{"path":"src/java/org/apache/solr/analysis/SnowballPorterFilter[SnowballPorterFilterFactory]#incrementToken().mjava","commits":[{"id":"be29e0e2cef1fd569147732e48caf8538790339b","date":1250443738,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/SnowballPorterFilter[SnowballPorterFilterFactory]#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken()) return false;\n    \n    char[] termBuffer = termAtt.termBuffer();\n    int len = termAtt.termLength();\n    // if protected, don't stem.  use this to avoid stemming collisions.\n    if (protWords != null && protWords.contains(termBuffer, 0, len)) {\n      return true;\n    }\n\n    stemmer.setCurrent(new String(termBuffer, 0, len));//ugh, wish the Stemmer took a char array\n    stemmer.stem();\n    String newstr = stemmer.getCurrent();\n    termAtt.setTermBuffer(newstr.toCharArray(), 0, newstr.length());\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9263ba3711d19fedd58e75bff00449a4497f6670","date":1268797917,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/SnowballPorterFilter[SnowballPorterFilterFactory]#incrementToken().mjava","pathOld":"src/java/org/apache/solr/analysis/SnowballPorterFilter[SnowballPorterFilterFactory]#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken()) return false;\n    \n    char[] termBuffer = termAtt.termBuffer();\n    int len = termAtt.termLength();\n    // if protected, don't stem.  use this to avoid stemming collisions.\n    if (protWords != null && protWords.contains(termBuffer, 0, len)) {\n      return true;\n    }\n\n    stemmer.setCurrent(termBuffer, len);\n    stemmer.stem();\n    final char finalTerm[] = stemmer.getCurrentBuffer();\n    final int newLength = stemmer.getCurrentBufferLength();\n    if (finalTerm != termBuffer)\n      termAtt.setTermBuffer(finalTerm, 0, newLength);\n    else\n      termAtt.setTermLength(newLength);\n\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken()) return false;\n    \n    char[] termBuffer = termAtt.termBuffer();\n    int len = termAtt.termLength();\n    // if protected, don't stem.  use this to avoid stemming collisions.\n    if (protWords != null && protWords.contains(termBuffer, 0, len)) {\n      return true;\n    }\n\n    stemmer.setCurrent(new String(termBuffer, 0, len));//ugh, wish the Stemmer took a char array\n    stemmer.stem();\n    String newstr = stemmer.getCurrent();\n    termAtt.setTermBuffer(newstr.toCharArray(), 0, newstr.length());\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/SnowballPorterFilter[SnowballPorterFilterFactory]#incrementToken().mjava","pathOld":"src/java/org/apache/solr/analysis/SnowballPorterFilter[SnowballPorterFilterFactory]#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken()) return false;\n    \n    char[] termBuffer = termAtt.termBuffer();\n    int len = termAtt.termLength();\n    // if protected, don't stem.  use this to avoid stemming collisions.\n    if (protWords != null && protWords.contains(termBuffer, 0, len)) {\n      return true;\n    }\n\n    stemmer.setCurrent(termBuffer, len);\n    stemmer.stem();\n    final char finalTerm[] = stemmer.getCurrentBuffer();\n    final int newLength = stemmer.getCurrentBufferLength();\n    if (finalTerm != termBuffer)\n      termAtt.setTermBuffer(finalTerm, 0, newLength);\n    else\n      termAtt.setTermLength(newLength);\n\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken()) return false;\n    \n    char[] termBuffer = termAtt.termBuffer();\n    int len = termAtt.termLength();\n    // if protected, don't stem.  use this to avoid stemming collisions.\n    if (protWords != null && protWords.contains(termBuffer, 0, len)) {\n      return true;\n    }\n\n    stemmer.setCurrent(termBuffer, len);\n    stemmer.stem();\n    final char finalTerm[] = stemmer.getCurrentBuffer();\n    final int newLength = stemmer.getCurrentBufferLength();\n    if (finalTerm != termBuffer)\n      termAtt.setTermBuffer(finalTerm, 0, newLength);\n    else\n      termAtt.setTermLength(newLength);\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9263ba3711d19fedd58e75bff00449a4497f6670":["be29e0e2cef1fd569147732e48caf8538790339b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"be29e0e2cef1fd569147732e48caf8538790339b":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["9263ba3711d19fedd58e75bff00449a4497f6670"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9263ba3711d19fedd58e75bff00449a4497f6670":["ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["be29e0e2cef1fd569147732e48caf8538790339b"],"be29e0e2cef1fd569147732e48caf8538790339b":["9263ba3711d19fedd58e75bff00449a4497f6670"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}