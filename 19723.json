{"path":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#waitForNodeChange(String,Slice,String).mjava","commits":[{"id":"9ebd3a557326ef3eab85b73a8cff781f7d801248","date":1431620752,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#waitForNodeChange(String,Slice,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#waitForNodeChange(String,Slice,String).mjava","sourceNew":"  int waitForNodeChange(String collectionName, Slice slice, String electionNode) throws InterruptedException, KeeperException {\n    String nodeName = LeaderElector.getNodeName(electionNode);\n    int oldSeq = LeaderElector.getSeq(electionNode);\n    for (int idx = 0; idx < 600; ++idx) {\n      ZkStateReader zkStateReader = coreContainer.getZkController().getZkStateReader();\n      List<String> electionNodes = OverseerCollectionProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n          ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n      for (String testNode : electionNodes) {\n        if (LeaderElector.getNodeName(testNode).equals(nodeName) && oldSeq != LeaderElector.getSeq(testNode)) {\n          return LeaderElector.getSeq(testNode);\n        }\n      }\n\n      Thread.sleep(100);\n    }\n    return -1;\n  }\n\n","sourceOld":"  int waitForNodeChange(String collectionName, Slice slice, String electionNode) throws InterruptedException, KeeperException {\n    String nodeName = LeaderElector.getNodeName(electionNode);\n    int oldSeq = LeaderElector.getSeq(electionNode);\n     for (int idx = 0; idx < 600; ++idx) {\n      ZkStateReader zkStateReader = coreContainer.getZkController().getZkStateReader();\n      List<String> electionNodes = OverseerCollectionProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n          ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n      for (String testNode : electionNodes) {\n        if (LeaderElector.getNodeName(testNode).equals(nodeName) && oldSeq != LeaderElector.getSeq(testNode)) {\n          return LeaderElector.getSeq(testNode);\n        }\n      }\n\n      Thread.sleep(100);\n    }\n    return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#waitForNodeChange(String,Slice,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#waitForNodeChange(String,Slice,String).mjava","sourceNew":"  int waitForNodeChange(String collectionName, Slice slice, String electionNode) throws InterruptedException, KeeperException {\n    String nodeName = LeaderElector.getNodeName(electionNode);\n    int oldSeq = LeaderElector.getSeq(electionNode);\n    for (int idx = 0; idx < 600; ++idx) {\n      ZkStateReader zkStateReader = coreContainer.getZkController().getZkStateReader();\n      List<String> electionNodes = OverseerProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n          ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n      for (String testNode : electionNodes) {\n        if (LeaderElector.getNodeName(testNode).equals(nodeName) && oldSeq != LeaderElector.getSeq(testNode)) {\n          return LeaderElector.getSeq(testNode);\n        }\n      }\n\n      Thread.sleep(100);\n    }\n    return -1;\n  }\n\n","sourceOld":"  int waitForNodeChange(String collectionName, Slice slice, String electionNode) throws InterruptedException, KeeperException {\n    String nodeName = LeaderElector.getNodeName(electionNode);\n    int oldSeq = LeaderElector.getSeq(electionNode);\n    for (int idx = 0; idx < 600; ++idx) {\n      ZkStateReader zkStateReader = coreContainer.getZkController().getZkStateReader();\n      List<String> electionNodes = OverseerCollectionProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n          ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n      for (String testNode : electionNodes) {\n        if (LeaderElector.getNodeName(testNode).equals(nodeName) && oldSeq != LeaderElector.getSeq(testNode)) {\n          return LeaderElector.getSeq(testNode);\n        }\n      }\n\n      Thread.sleep(100);\n    }\n    return -1;\n  }\n\n","bugFix":["4e6b620c271c84c0f14919eec7b90083b292ee51"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#waitForNodeChange(String,Slice,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#waitForNodeChange(String,Slice,String).mjava","sourceNew":"  int waitForNodeChange(String collectionName, Slice slice, String electionNode) throws InterruptedException, KeeperException {\n    String nodeName = LeaderElector.getNodeName(electionNode);\n    int oldSeq = LeaderElector.getSeq(electionNode);\n    for (int idx = 0; idx < 600; ++idx) {\n      ZkStateReader zkStateReader = coreContainer.getZkController().getZkStateReader();\n      List<String> electionNodes = OverseerTaskProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n          ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n      for (String testNode : electionNodes) {\n        if (LeaderElector.getNodeName(testNode).equals(nodeName) && oldSeq != LeaderElector.getSeq(testNode)) {\n          return LeaderElector.getSeq(testNode);\n        }\n      }\n\n      Thread.sleep(100);\n    }\n    return -1;\n  }\n\n","sourceOld":"  int waitForNodeChange(String collectionName, Slice slice, String electionNode) throws InterruptedException, KeeperException {\n    String nodeName = LeaderElector.getNodeName(electionNode);\n    int oldSeq = LeaderElector.getSeq(electionNode);\n    for (int idx = 0; idx < 600; ++idx) {\n      ZkStateReader zkStateReader = coreContainer.getZkController().getZkStateReader();\n      List<String> electionNodes = OverseerProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n          ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n      for (String testNode : electionNodes) {\n        if (LeaderElector.getNodeName(testNode).equals(nodeName) && oldSeq != LeaderElector.getSeq(testNode)) {\n          return LeaderElector.getSeq(testNode);\n        }\n      }\n\n      Thread.sleep(100);\n    }\n    return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73fd358e8ec697393d56617f4d9cedaca74dca14","date":1547954439,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#waitForNodeChange(Slice,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#waitForNodeChange(String,Slice,String).mjava","sourceNew":"  // We're just waiting for the electionNode to rejoin the queue with a _different_ node, indicating that any\n  // requeueing we've done has happened.\n  int waitForNodeChange(Slice slice, String electionNode) throws InterruptedException, KeeperException {\n    String nodeName = LeaderElector.getNodeName(electionNode);\n    int oldSeq = LeaderElector.getSeq(electionNode);\n    for (int idx = 0; idx < 600; ++idx) {\n\n      ZkStateReader zkStateReader = coreContainer.getZkController().getZkStateReader();\n      List<String> electionNodes = OverseerTaskProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n          ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n      for (String testNode : electionNodes) {\n        if (LeaderElector.getNodeName(testNode).equals(nodeName) && oldSeq != LeaderElector.getSeq(testNode)) {\n          return LeaderElector.getSeq(testNode);\n        }\n      }\n      TimeUnit.MILLISECONDS.sleep(100);\n      zkStateReader.forciblyRefreshAllClusterStateSlow();\n    }\n    return -1;\n  }\n\n","sourceOld":"  int waitForNodeChange(String collectionName, Slice slice, String electionNode) throws InterruptedException, KeeperException {\n    String nodeName = LeaderElector.getNodeName(electionNode);\n    int oldSeq = LeaderElector.getSeq(electionNode);\n    for (int idx = 0; idx < 600; ++idx) {\n      ZkStateReader zkStateReader = coreContainer.getZkController().getZkStateReader();\n      List<String> electionNodes = OverseerTaskProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n          ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n      for (String testNode : electionNodes) {\n        if (LeaderElector.getNodeName(testNode).equals(nodeName) && oldSeq != LeaderElector.getSeq(testNode)) {\n          return LeaderElector.getSeq(testNode);\n        }\n      }\n\n      Thread.sleep(100);\n    }\n    return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":5,"author":"Tommaso Teofili","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#waitForNodeChange(Slice,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#waitForNodeChange(String,Slice,String).mjava","sourceNew":"  // We're just waiting for the electionNode to rejoin the queue with a _different_ node, indicating that any\n  // requeueing we've done has happened.\n  int waitForNodeChange(Slice slice, String electionNode) throws InterruptedException, KeeperException {\n    String nodeName = LeaderElector.getNodeName(electionNode);\n    int oldSeq = LeaderElector.getSeq(electionNode);\n    for (int idx = 0; idx < 600; ++idx) {\n\n      ZkStateReader zkStateReader = coreContainer.getZkController().getZkStateReader();\n      List<String> electionNodes = OverseerTaskProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n          ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n      for (String testNode : electionNodes) {\n        if (LeaderElector.getNodeName(testNode).equals(nodeName) && oldSeq != LeaderElector.getSeq(testNode)) {\n          return LeaderElector.getSeq(testNode);\n        }\n      }\n      TimeUnit.MILLISECONDS.sleep(100);\n      zkStateReader.forciblyRefreshAllClusterStateSlow();\n    }\n    return -1;\n  }\n\n","sourceOld":"  int waitForNodeChange(String collectionName, Slice slice, String electionNode) throws InterruptedException, KeeperException {\n    String nodeName = LeaderElector.getNodeName(electionNode);\n    int oldSeq = LeaderElector.getSeq(electionNode);\n    for (int idx = 0; idx < 600; ++idx) {\n      ZkStateReader zkStateReader = coreContainer.getZkController().getZkStateReader();\n      List<String> electionNodes = OverseerTaskProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n          ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n      for (String testNode : electionNodes) {\n        if (LeaderElector.getNodeName(testNode).equals(nodeName) && oldSeq != LeaderElector.getSeq(testNode)) {\n          return LeaderElector.getSeq(testNode);\n        }\n      }\n\n      Thread.sleep(100);\n    }\n    return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["9ebd3a557326ef3eab85b73a8cff781f7d801248"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["2209af2c265d2258ec4b29c8cc78622d36994a15","73fd358e8ec697393d56617f4d9cedaca74dca14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ebd3a557326ef3eab85b73a8cff781f7d801248":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"73fd358e8ec697393d56617f4d9cedaca74dca14":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73fd358e8ec697393d56617f4d9cedaca74dca14"]},"commit2Childs":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","73fd358e8ec697393d56617f4d9cedaca74dca14"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ebd3a557326ef3eab85b73a8cff781f7d801248"],"9ebd3a557326ef3eab85b73a8cff781f7d801248":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"73fd358e8ec697393d56617f4d9cedaca74dca14":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}