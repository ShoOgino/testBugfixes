{"path":"solr/src/test/org/apache/solr/search/TestDocSet#doFilterTest(SolrIndexReader).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestDocSet#doFilterTest(SolrIndexReader).mjava","pathOld":"/dev/null","sourceNew":"  public void doFilterTest(SolrIndexReader reader) throws IOException {\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(reader);\n    DocIdSet db = fb.getDocIdSet(reader);\n    doTestIteratorEqual(da, db);\n\n    // first test in-sequence sub readers\n    for (SolrIndexReader sir : reader.getLeafReaders()) {\n      da = fa.getDocIdSet(sir);\n      db = fb.getDocIdSet(sir);\n      doTestIteratorEqual(da, db);\n    }  \n\n    int nReaders = reader.getLeafReaders().length;\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      SolrIndexReader sir = reader.getLeafReaders()[rand.nextInt(nReaders)];\n      da = fa.getDocIdSet(sir);\n      db = fb.getDocIdSet(sir);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/search/TestDocSet#doFilterTest(SolrIndexReader).mjava","sourceNew":null,"sourceOld":"  public void doFilterTest(SolrIndexReader reader) throws IOException {\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(reader);\n    DocIdSet db = fb.getDocIdSet(reader);\n    doTestIteratorEqual(da, db);\n\n    // first test in-sequence sub readers\n    for (SolrIndexReader sir : reader.getLeafReaders()) {\n      da = fa.getDocIdSet(sir);\n      db = fb.getDocIdSet(sir);\n      doTestIteratorEqual(da, db);\n    }  \n\n    int nReaders = reader.getLeafReaders().length;\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      SolrIndexReader sir = reader.getLeafReaders()[rand.nextInt(nReaders)];\n      da = fa.getDocIdSet(sir);\n      db = fb.getDocIdSet(sir);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestDocSet#doFilterTest(SolrIndexReader).mjava","pathOld":"src/test/org/apache/solr/search/TestDocSet#doFilterTest(SolrIndexReader).mjava","sourceNew":"  public void doFilterTest(SolrIndexReader reader) throws IOException {\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(reader);\n    DocIdSet db = fb.getDocIdSet(reader);\n    doTestIteratorEqual(da, db);\n\n    // first test in-sequence sub readers\n    for (SolrIndexReader sir : reader.getLeafReaders()) {\n      da = fa.getDocIdSet(sir);\n      db = fb.getDocIdSet(sir);\n      doTestIteratorEqual(da, db);\n    }  \n\n    int nReaders = reader.getLeafReaders().length;\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      SolrIndexReader sir = reader.getLeafReaders()[rand.nextInt(nReaders)];\n      da = fa.getDocIdSet(sir);\n      db = fb.getDocIdSet(sir);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","sourceOld":"  public void doFilterTest(SolrIndexReader reader) throws IOException {\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(reader);\n    DocIdSet db = fb.getDocIdSet(reader);\n    doTestIteratorEqual(da, db);\n\n    // first test in-sequence sub readers\n    for (SolrIndexReader sir : reader.getLeafReaders()) {\n      da = fa.getDocIdSet(sir);\n      db = fb.getDocIdSet(sir);\n      doTestIteratorEqual(da, db);\n    }  \n\n    int nReaders = reader.getLeafReaders().length;\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      SolrIndexReader sir = reader.getLeafReaders()[rand.nextInt(nReaders)];\n      da = fa.getDocIdSet(sir);\n      db = fb.getDocIdSet(sir);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/TestDocSet#doFilterTest(SolrIndexReader).mjava","pathOld":"/dev/null","sourceNew":"  public void doFilterTest(SolrIndexReader reader) throws IOException {\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(reader);\n    DocIdSet db = fb.getDocIdSet(reader);\n    doTestIteratorEqual(da, db);\n\n    // first test in-sequence sub readers\n    for (SolrIndexReader sir : reader.getLeafReaders()) {\n      da = fa.getDocIdSet(sir);\n      db = fb.getDocIdSet(sir);\n      doTestIteratorEqual(da, db);\n    }  \n\n    int nReaders = reader.getLeafReaders().length;\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      SolrIndexReader sir = reader.getLeafReaders()[rand.nextInt(nReaders)];\n      da = fa.getDocIdSet(sir);\n      db = fb.getDocIdSet(sir);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestDocSet#doFilterTest(SolrIndexReader).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestDocSet#doFilterTest(SolrIndexReader).mjava","sourceNew":"  public void doFilterTest(SolrIndexReader reader) throws IOException {\n    ReaderContext topLevelContext = reader.getTopReaderContext();\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(topLevelContext);\n    DocIdSet db = fb.getDocIdSet(topLevelContext);\n    doTestIteratorEqual(da, db);\n\n    // first test in-sequence sub readers\n    for (ReaderContext readerInfo : topLevelContext.leaves()) {\n      da = fa.getDocIdSet(readerInfo);\n      db = fb.getDocIdSet(readerInfo);\n      doTestIteratorEqual(da, db);\n    }  \n\n    int nReaders = topLevelContext.leaves().length;\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      ReaderContext readerInfo = topLevelContext.leaves()[rand.nextInt(nReaders)];\n      da = fa.getDocIdSet(readerInfo);\n      db = fb.getDocIdSet(readerInfo);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","sourceOld":"  public void doFilterTest(SolrIndexReader reader) throws IOException {\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(reader);\n    DocIdSet db = fb.getDocIdSet(reader);\n    doTestIteratorEqual(da, db);\n\n    // first test in-sequence sub readers\n    for (SolrIndexReader sir : reader.getLeafReaders()) {\n      da = fa.getDocIdSet(sir);\n      db = fb.getDocIdSet(sir);\n      doTestIteratorEqual(da, db);\n    }  \n\n    int nReaders = reader.getLeafReaders().length;\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      SolrIndexReader sir = reader.getLeafReaders()[rand.nextInt(nReaders)];\n      da = fa.getDocIdSet(sir);\n      db = fb.getDocIdSet(sir);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34743077dbbe20cd7a27d5c6c2511e62b99a0e36","date":1294410669,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestDocSet#doFilterTest(SolrIndexReader).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestDocSet#doFilterTest(SolrIndexReader).mjava","sourceNew":"  public void doFilterTest(SolrIndexReader reader) throws IOException {\n    ReaderContext topLevelContext = reader.getTopReaderContext();\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    /*** top level filters are no longer supported\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(topLevelContext);\n    DocIdSet db = fb.getDocIdSet(topLevelContext);\n    doTestIteratorEqual(da, db);\n    ***/\n\n    DocIdSet da;\n    DocIdSet db;\n\n    // first test in-sequence sub readers\n    for (ReaderContext readerInfo : topLevelContext.leaves()) {\n      da = fa.getDocIdSet(readerInfo);\n      db = fb.getDocIdSet(readerInfo);\n      doTestIteratorEqual(da, db);\n    }  \n\n    int nReaders = topLevelContext.leaves().length;\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      ReaderContext readerInfo = topLevelContext.leaves()[rand.nextInt(nReaders)];\n      da = fa.getDocIdSet(readerInfo);\n      db = fb.getDocIdSet(readerInfo);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","sourceOld":"  public void doFilterTest(SolrIndexReader reader) throws IOException {\n    ReaderContext topLevelContext = reader.getTopReaderContext();\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(topLevelContext);\n    DocIdSet db = fb.getDocIdSet(topLevelContext);\n    doTestIteratorEqual(da, db);\n\n    // first test in-sequence sub readers\n    for (ReaderContext readerInfo : topLevelContext.leaves()) {\n      da = fa.getDocIdSet(readerInfo);\n      db = fb.getDocIdSet(readerInfo);\n      doTestIteratorEqual(da, db);\n    }  \n\n    int nReaders = topLevelContext.leaves().length;\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      ReaderContext readerInfo = topLevelContext.leaves()[rand.nextInt(nReaders)];\n      da = fa.getDocIdSet(readerInfo);\n      db = fb.getDocIdSet(readerInfo);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","bugFix":null,"bugIntro":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","date":1294747166,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestDocSet#doFilterTest(SolrIndexReader).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestDocSet#doFilterTest(SolrIndexReader).mjava","sourceNew":"  public void doFilterTest(SolrIndexReader reader) throws IOException {\n    ReaderContext topLevelContext = reader.getTopReaderContext();\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    /*** top level filters are no longer supported\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(topLevelContext);\n    DocIdSet db = fb.getDocIdSet(topLevelContext);\n    doTestIteratorEqual(da, db);\n    ***/\n\n    DocIdSet da;\n    DocIdSet db;\n\n    // first test in-sequence sub readers\n    for (AtomicReaderContext readerContext : ReaderUtil.leaves(topLevelContext)) {\n      da = fa.getDocIdSet(readerContext);\n      db = fb.getDocIdSet(readerContext);\n      doTestIteratorEqual(da, db);\n    }  \n\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topLevelContext);\n    int nReaders = leaves.length;\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      AtomicReaderContext readerContext = leaves[rand.nextInt(nReaders)];\n      da = fa.getDocIdSet(readerContext);\n      db = fb.getDocIdSet(readerContext);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","sourceOld":"  public void doFilterTest(SolrIndexReader reader) throws IOException {\n    ReaderContext topLevelContext = reader.getTopReaderContext();\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    /*** top level filters are no longer supported\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(topLevelContext);\n    DocIdSet db = fb.getDocIdSet(topLevelContext);\n    doTestIteratorEqual(da, db);\n    ***/\n\n    DocIdSet da;\n    DocIdSet db;\n\n    // first test in-sequence sub readers\n    for (ReaderContext readerInfo : topLevelContext.leaves()) {\n      da = fa.getDocIdSet(readerInfo);\n      db = fb.getDocIdSet(readerInfo);\n      doTestIteratorEqual(da, db);\n    }  \n\n    int nReaders = topLevelContext.leaves().length;\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      ReaderContext readerInfo = topLevelContext.leaves()[rand.nextInt(nReaders)];\n      da = fa.getDocIdSet(readerInfo);\n      db = fb.getDocIdSet(readerInfo);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"323f871ffe96b871d8c534a614be60751bb023c2","date":1294820532,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestDocSet#doFilterTest(IndexReader).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestDocSet#doFilterTest(SolrIndexReader).mjava","sourceNew":"  public void doFilterTest(IndexReader reader) throws IOException {\n    ReaderContext topLevelContext = reader.getTopReaderContext();\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    /*** top level filters are no longer supported\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(topLevelContext);\n    DocIdSet db = fb.getDocIdSet(topLevelContext);\n    doTestIteratorEqual(da, db);\n    ***/\n\n    DocIdSet da;\n    DocIdSet db;\n\n    // first test in-sequence sub readers\n    for (AtomicReaderContext readerContext : ReaderUtil.leaves(topLevelContext)) {\n      da = fa.getDocIdSet(readerContext);\n      db = fb.getDocIdSet(readerContext);\n      doTestIteratorEqual(da, db);\n    }  \n\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topLevelContext);\n    int nReaders = leaves.length;\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      AtomicReaderContext readerContext = leaves[rand.nextInt(nReaders)];\n      da = fa.getDocIdSet(readerContext);\n      db = fb.getDocIdSet(readerContext);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","sourceOld":"  public void doFilterTest(SolrIndexReader reader) throws IOException {\n    ReaderContext topLevelContext = reader.getTopReaderContext();\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    /*** top level filters are no longer supported\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(topLevelContext);\n    DocIdSet db = fb.getDocIdSet(topLevelContext);\n    doTestIteratorEqual(da, db);\n    ***/\n\n    DocIdSet da;\n    DocIdSet db;\n\n    // first test in-sequence sub readers\n    for (AtomicReaderContext readerContext : ReaderUtil.leaves(topLevelContext)) {\n      da = fa.getDocIdSet(readerContext);\n      db = fb.getDocIdSet(readerContext);\n      doTestIteratorEqual(da, db);\n    }  \n\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topLevelContext);\n    int nReaders = leaves.length;\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      AtomicReaderContext readerContext = leaves[rand.nextInt(nReaders)];\n      da = fa.getDocIdSet(readerContext);\n      db = fb.getDocIdSet(readerContext);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/search/TestDocSet#doFilterTest(SolrIndexReader).mjava","sourceNew":null,"sourceOld":"  public void doFilterTest(SolrIndexReader reader) throws IOException {\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(reader);\n    DocIdSet db = fb.getDocIdSet(reader);\n    doTestIteratorEqual(da, db);\n\n    // first test in-sequence sub readers\n    for (SolrIndexReader sir : reader.getLeafReaders()) {\n      da = fa.getDocIdSet(sir);\n      db = fb.getDocIdSet(sir);\n      doTestIteratorEqual(da, db);\n    }  \n\n    int nReaders = reader.getLeafReaders().length;\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      SolrIndexReader sir = reader.getLeafReaders()[rand.nextInt(nReaders)];\n      da = fa.getDocIdSet(sir);\n      db = fb.getDocIdSet(sir);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/search/TestDocSet#doFilterTest(SolrIndexReader).mjava","sourceNew":null,"sourceOld":"  public void doFilterTest(SolrIndexReader reader) throws IOException {\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(reader);\n    DocIdSet db = fb.getDocIdSet(reader);\n    doTestIteratorEqual(da, db);\n\n    // first test in-sequence sub readers\n    for (SolrIndexReader sir : reader.getLeafReaders()) {\n      da = fa.getDocIdSet(sir);\n      db = fb.getDocIdSet(sir);\n      doTestIteratorEqual(da, db);\n    }  \n\n    int nReaders = reader.getLeafReaders().length;\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      SolrIndexReader sir = reader.getLeafReaders()[rand.nextInt(nReaders)];\n      da = fa.getDocIdSet(sir);\n      db = fb.getDocIdSet(sir);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"323f871ffe96b871d8c534a614be60751bb023c2":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"34743077dbbe20cd7a27d5c6c2511e62b99a0e36":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["1da8d55113b689b06716246649de6f62430f15c0","323f871ffe96b871d8c534a614be60751bb023c2"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["34743077dbbe20cd7a27d5c6c2511e62b99a0e36"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["1da8d55113b689b06716246649de6f62430f15c0","323f871ffe96b871d8c534a614be60751bb023c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["323f871ffe96b871d8c534a614be60751bb023c2"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"323f871ffe96b871d8c534a614be60751bb023c2":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"34743077dbbe20cd7a27d5c6c2511e62b99a0e36":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"1da8d55113b689b06716246649de6f62430f15c0":["29ef99d61cda9641b6250bf9567329a6e65f901d","2dadf0f3286a34a0fee6e788ffce88624bf2984e","868da859b43505d9d2a023bfeae6dd0c795f5295"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["34743077dbbe20cd7a27d5c6c2511e62b99a0e36"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["323f871ffe96b871d8c534a614be60751bb023c2"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}