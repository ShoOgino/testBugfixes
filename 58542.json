{"path":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#createDoublyLinkedList(Polygon,int,WindingOrder).mjava","commits":[{"id":"62608383871b832d79e6dc58a3c783d7300f64d5","date":1532707246,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#createDoublyLinkedList(Polygon,int,WindingOrder).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#createDoublyLinkedList(Polygon,WindingOrder).mjava","sourceNew":"  /** Creates a circular doubly linked list using polygon points. The order is governed by the specified winding order */\n  private static final Node createDoublyLinkedList(final Polygon polygon, int startIndex, final WindingOrder windingOrder) {\n    Node lastNode = null;\n    // Link points into the circular doubly-linked list in the specified winding order\n    if (windingOrder == polygon.getWindingOrder()) {\n      for (int i = 0; i < polygon.numPoints(); ++i) {\n        if (lastNode == null || filter(polygon, i, lastNode) == false) {\n          lastNode = insertNode(polygon, startIndex++, i, lastNode);\n        }\n      }\n    } else {\n      for (int i = polygon.numPoints() - 1; i >= 0; --i) {\n        if (lastNode == null || filter(polygon, i, lastNode) == false) {\n          lastNode = insertNode(polygon, startIndex++, i, lastNode);\n        }\n      }\n    }\n    // if first and last node are the same then remove the end node and set lastNode to the start\n    if (lastNode != null && isVertexEquals(lastNode, lastNode.next)) {\n      removeNode(lastNode);\n      lastNode = lastNode.next;\n    }\n\n    // Return the last node in the Doubly-Linked List\n    return lastNode;\n  }\n\n","sourceOld":"  /** Creates a circular doubly linked list using polygon points. The order is governed by the specified winding order */\n  private static final Node createDoublyLinkedList(final Polygon polygon, final WindingOrder windingOrder) {\n    Node lastNode = null;\n    // Link points into the circular doubly-linked list in the specified winding order\n    if (windingOrder == polygon.getWindingOrder()) {\n      for (int i = 0; i < polygon.numPoints(); ++i) {\n        if (lastNode == null || filter(polygon, i, lastNode) == false) {\n          lastNode = insertNode(polygon, i, lastNode);\n        }\n      }\n    } else {\n      for (int i = polygon.numPoints() - 1; i >= 0; --i) {\n        if (lastNode == null || filter(polygon, i, lastNode) == false) {\n          lastNode = insertNode(polygon, i, lastNode);\n        }\n      }\n    }\n    // if first and last node are the same then remove the end node and set lastNode to the start\n    if (lastNode != null && isVertexEquals(lastNode, lastNode.next)) {\n      removeNode(lastNode);\n      lastNode = lastNode.next;\n    }\n\n    // Return the last node in the Doubly-Linked List\n    return lastNode;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20528a74c86a9e2202bba25d481c632251a38f83","date":1541142089,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#createDoublyLinkedList(Polygon,int,WindingOrder).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#createDoublyLinkedList(Polygon,int,WindingOrder).mjava","sourceNew":"  /** Creates a circular doubly linked list using polygon points. The order is governed by the specified winding order */\n  private static final Node createDoublyLinkedList(final Polygon polygon, int startIndex, final WindingOrder windingOrder) {\n    Node lastNode = null;\n    // Link points into the circular doubly-linked list in the specified winding order\n    if (windingOrder == polygon.getWindingOrder()) {\n      for (int i = 0; i < polygon.numPoints(); ++i) {\n        lastNode = insertNode(polygon, startIndex++, i, lastNode);\n      }\n    } else {\n      for (int i = polygon.numPoints() - 1; i >= 0; --i) {\n        lastNode = insertNode(polygon, startIndex++, i, lastNode);\n      }\n    }\n    // if first and last node are the same then remove the end node and set lastNode to the start\n    if (lastNode != null && isVertexEquals(lastNode, lastNode.next)) {\n      removeNode(lastNode);\n      lastNode = lastNode.next;\n    }\n\n    // Return the last node in the Doubly-Linked List\n    return filterPoints(lastNode, null);\n  }\n\n","sourceOld":"  /** Creates a circular doubly linked list using polygon points. The order is governed by the specified winding order */\n  private static final Node createDoublyLinkedList(final Polygon polygon, int startIndex, final WindingOrder windingOrder) {\n    Node lastNode = null;\n    // Link points into the circular doubly-linked list in the specified winding order\n    if (windingOrder == polygon.getWindingOrder()) {\n      for (int i = 0; i < polygon.numPoints(); ++i) {\n        if (lastNode == null || filter(polygon, i, lastNode) == false) {\n          lastNode = insertNode(polygon, startIndex++, i, lastNode);\n        }\n      }\n    } else {\n      for (int i = polygon.numPoints() - 1; i >= 0; --i) {\n        if (lastNode == null || filter(polygon, i, lastNode) == false) {\n          lastNode = insertNode(polygon, startIndex++, i, lastNode);\n        }\n      }\n    }\n    // if first and last node are the same then remove the end node and set lastNode to the start\n    if (lastNode != null && isVertexEquals(lastNode, lastNode.next)) {\n      removeNode(lastNode);\n      lastNode = lastNode.next;\n    }\n\n    // Return the last node in the Doubly-Linked List\n    return lastNode;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c286b0d8c507a88b289407e2fe161effa275c6b0","date":1562615977,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#createDoublyLinkedList(double[],double[],WindingOrder,boolean,int,WindingOrder).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#createDoublyLinkedList(Polygon,int,WindingOrder).mjava","sourceNew":"  /** Creates a circular doubly linked list using polygon points. The order is governed by the specified winding order */\n  private static final Node createDoublyLinkedList(final double[] x, final double[] y, final WindingOrder polyWindingOrder,\n                                                   boolean isGeo, int startIndex, final WindingOrder windingOrder) {\n    Node lastNode = null;\n    // Link points into the circular doubly-linked list in the specified winding order\n    if (windingOrder == polyWindingOrder) {\n      for (int i = 0; i < x.length; ++i) {\n        lastNode = insertNode(x, y, startIndex++, i, lastNode, isGeo);\n      }\n    } else {\n      for (int i = x.length - 1; i >= 0; --i) {\n        lastNode = insertNode(x, y, startIndex++, i, lastNode, isGeo);\n      }\n    }\n    // if first and last node are the same then remove the end node and set lastNode to the start\n    if (lastNode != null && isVertexEquals(lastNode, lastNode.next)) {\n      removeNode(lastNode);\n      lastNode = lastNode.next;\n    }\n\n    // Return the last node in the Doubly-Linked List\n    return filterPoints(lastNode, null);\n  }\n\n","sourceOld":"  /** Creates a circular doubly linked list using polygon points. The order is governed by the specified winding order */\n  private static final Node createDoublyLinkedList(final Polygon polygon, int startIndex, final WindingOrder windingOrder) {\n    Node lastNode = null;\n    // Link points into the circular doubly-linked list in the specified winding order\n    if (windingOrder == polygon.getWindingOrder()) {\n      for (int i = 0; i < polygon.numPoints(); ++i) {\n        lastNode = insertNode(polygon, startIndex++, i, lastNode);\n      }\n    } else {\n      for (int i = polygon.numPoints() - 1; i >= 0; --i) {\n        lastNode = insertNode(polygon, startIndex++, i, lastNode);\n      }\n    }\n    // if first and last node are the same then remove the end node and set lastNode to the start\n    if (lastNode != null && isVertexEquals(lastNode, lastNode.next)) {\n      removeNode(lastNode);\n      lastNode = lastNode.next;\n    }\n\n    // Return the last node in the Doubly-Linked List\n    return filterPoints(lastNode, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"62608383871b832d79e6dc58a3c783d7300f64d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c286b0d8c507a88b289407e2fe161effa275c6b0":["20528a74c86a9e2202bba25d481c632251a38f83"],"20528a74c86a9e2202bba25d481c632251a38f83":["62608383871b832d79e6dc58a3c783d7300f64d5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c286b0d8c507a88b289407e2fe161effa275c6b0"]},"commit2Childs":{"62608383871b832d79e6dc58a3c783d7300f64d5":["20528a74c86a9e2202bba25d481c632251a38f83"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["62608383871b832d79e6dc58a3c783d7300f64d5"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"20528a74c86a9e2202bba25d481c632251a38f83":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}