{"path":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","sourceNew":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = newFSDirectory(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), StringField.TYPE_STORED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.forceMerge(1);\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","sourceOld":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = newFSDirectory(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), StringField.TYPE_STORED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.forceMerge(1);\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","sourceNew":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = newFSDirectory(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random(), new RAMDirectory(dir, newIOContext(random())));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), StringField.TYPE_STORED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.forceMerge(1);\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","sourceOld":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = newFSDirectory(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), StringField.TYPE_STORED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.forceMerge(1);\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","sourceNew":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = newFSDirectory(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random(), new RAMDirectory(dir, newIOContext(random())));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newStringField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.forceMerge(1);\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","sourceOld":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = newFSDirectory(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random(), new RAMDirectory(dir, newIOContext(random())));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), StringField.TYPE_STORED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.forceMerge(1);\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","sourceNew":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = newFSDirectory(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random(), new RAMDirectory(dir, newIOContext(random())));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newStringField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.forceMerge(1);\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.shutdown();\n  }\n\n","sourceOld":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = newFSDirectory(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random(), new RAMDirectory(dir, newIOContext(random())));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newStringField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.forceMerge(1);\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c15a75016387504d70a40cba6e9314b8885307f0","date":1397542349,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","sourceNew":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n\n    File indexDir = buildIndex();\n      \n    Directory dir = newFSDirectory(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random(), new RAMDirectory(dir, newIOContext(random())));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newStringField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.forceMerge(1);\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.shutdown();\n  }\n\n","sourceOld":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = newFSDirectory(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random(), new RAMDirectory(dir, newIOContext(random())));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newStringField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.forceMerge(1);\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","sourceNew":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n\n    File indexDir = buildIndex();\n      \n    Directory dir = newFSDirectory(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random(), new RAMDirectory(dir, newIOContext(random())));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newStringField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.forceMerge(1);\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","sourceOld":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n\n    File indexDir = buildIndex();\n      \n    Directory dir = newFSDirectory(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random(), new RAMDirectory(dir, newIOContext(random())));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newStringField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.forceMerge(1);\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","sourceNew":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n\n    Path indexDir = buildIndex();\n      \n    Directory dir = newFSDirectory(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random(), new RAMDirectory(dir, newIOContext(random())));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newStringField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.forceMerge(1);\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","sourceOld":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n\n    File indexDir = buildIndex();\n      \n    Directory dir = newFSDirectory(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random(), new RAMDirectory(dir, newIOContext(random())));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newStringField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.forceMerge(1);\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"302be0cc5e6a28ebcebcac98aa81a92be2e94370","date":1423848654,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","sourceNew":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n\n    Path indexDir = buildIndex();\n      \n    FSDirectory dir = new SimpleFSDirectory(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random(), new RAMDirectory(dir, newIOContext(random())));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newStringField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.forceMerge(1);\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","sourceOld":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n\n    Path indexDir = buildIndex();\n      \n    Directory dir = newFSDirectory(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random(), new RAMDirectory(dir, newIOContext(random())));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newStringField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.forceMerge(1);\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","bugFix":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4eda6e6a7dc9d9178b430d989fa9e3033edc780","date":1453398628,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","sourceNew":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n\n    Path indexDir = buildIndex();\n      \n    FSDirectory dir = new SimpleFSDirectory(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random(), new RAMDirectory(dir, newIOContext(random())));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newStringField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<numThreads; i++) {\n      threads[i].join();\n    }\n\n    writer.forceMerge(1);\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","sourceOld":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n\n    Path indexDir = buildIndex();\n      \n    FSDirectory dir = new SimpleFSDirectory(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random(), new RAMDirectory(dir, newIOContext(random())));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newStringField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.forceMerge(1);\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5de502b5478255493125e7e801411ba17a6682ec","date":1490974101,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","sourceNew":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n\n    Path indexDir = buildIndex();\n      \n    FSDirectory dir = new SimpleFSDirectory(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random(), new RAMDirectory(dir, newIOContext(random())));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[NUM_THREADS];\n    for (int i = 0; i< NUM_THREADS; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j = 1; j< DOCS_PER_THREAD; j++) {\n            Document doc = new Document();\n            doc.add(newStringField(\"sizeContent\", English.intToEnglish(num* DOCS_PER_THREAD +j).trim(), Field.Store.YES));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i = 0; i< NUM_THREADS; i++) {\n      threads[i].start();\n    }\n    for (int i = 0; i< NUM_THREADS; i++) {\n      threads[i].join();\n    }\n\n    writer.forceMerge(1);\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","sourceOld":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n\n    Path indexDir = buildIndex();\n      \n    FSDirectory dir = new SimpleFSDirectory(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random(), new RAMDirectory(dir, newIOContext(random())));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newStringField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<numThreads; i++) {\n      threads[i].join();\n    }\n\n    writer.forceMerge(1);\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f20fd35e3055a0c5b387df0b986a68d65d86441","date":1491045405,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","sourceNew":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n\n    Path indexDir = buildIndex();\n      \n    FSDirectory dir = new SimpleFSDirectory(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random(), new RAMDirectory(dir, newIOContext(random())));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[NUM_THREADS];\n    for (int i = 0; i< NUM_THREADS; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j = 1; j< DOCS_PER_THREAD; j++) {\n            Document doc = new Document();\n            doc.add(newStringField(\"sizeContent\", English.intToEnglish(num* DOCS_PER_THREAD +j).trim(), Field.Store.YES));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i = 0; i< NUM_THREADS; i++) {\n      threads[i].start();\n    }\n    for (int i = 0; i< NUM_THREADS; i++) {\n      threads[i].join();\n    }\n\n    writer.forceMerge(1);\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","sourceOld":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n\n    Path indexDir = buildIndex();\n      \n    FSDirectory dir = new SimpleFSDirectory(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random(), new RAMDirectory(dir, newIOContext(random())));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newStringField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<numThreads; i++) {\n      threads[i].join();\n    }\n\n    writer.forceMerge(1);\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"409da428f28953cf35fddd5c9ff5c7e4f5439863","date":1547556145,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","sourceNew":null,"sourceOld":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n\n    Path indexDir = buildIndex();\n      \n    FSDirectory dir = new SimpleFSDirectory(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random(), new RAMDirectory(dir, newIOContext(random())));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[NUM_THREADS];\n    for (int i = 0; i< NUM_THREADS; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j = 1; j< DOCS_PER_THREAD; j++) {\n            Document doc = new Document();\n            doc.add(newStringField(\"sizeContent\", English.intToEnglish(num* DOCS_PER_THREAD +j).trim(), Field.Store.YES));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i = 0; i< NUM_THREADS; i++) {\n      threads[i].start();\n    }\n    for (int i = 0; i< NUM_THREADS; i++) {\n      threads[i].join();\n    }\n\n    writer.forceMerge(1);\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5de502b5478255493125e7e801411ba17a6682ec":["d4eda6e6a7dc9d9178b430d989fa9e3033edc780"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":["d4eda6e6a7dc9d9178b430d989fa9e3033edc780"],"c15a75016387504d70a40cba6e9314b8885307f0":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"f4abec28b874149a7223e32cc7a01704c27790de":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"409da428f28953cf35fddd5c9ff5c7e4f5439863":["5de502b5478255493125e7e801411ba17a6682ec"],"d4eda6e6a7dc9d9178b430d989fa9e3033edc780":["302be0cc5e6a28ebcebcac98aa81a92be2e94370"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c15a75016387504d70a40cba6e9314b8885307f0"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["409da428f28953cf35fddd5c9ff5c7e4f5439863"],"302be0cc5e6a28ebcebcac98aa81a92be2e94370":["f4abec28b874149a7223e32cc7a01704c27790de"]},"commit2Childs":{"5de502b5478255493125e7e801411ba17a6682ec":["409da428f28953cf35fddd5c9ff5c7e4f5439863"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":[],"c15a75016387504d70a40cba6e9314b8885307f0":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"f4abec28b874149a7223e32cc7a01704c27790de":["302be0cc5e6a28ebcebcac98aa81a92be2e94370"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"409da428f28953cf35fddd5c9ff5c7e4f5439863":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d4eda6e6a7dc9d9178b430d989fa9e3033edc780":["5de502b5478255493125e7e801411ba17a6682ec","6f20fd35e3055a0c5b387df0b986a68d65d86441"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["f4abec28b874149a7223e32cc7a01704c27790de"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["c15a75016387504d70a40cba6e9314b8885307f0"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"302be0cc5e6a28ebcebcac98aa81a92be2e94370":["d4eda6e6a7dc9d9178b430d989fa9e3033edc780"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6f20fd35e3055a0c5b387df0b986a68d65d86441","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}