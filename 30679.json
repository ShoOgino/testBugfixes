{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testAboveSearchRate().mjava","commits":[{"id":"c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a","date":1524514741,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testAboveSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testSearchRate().mjava","sourceNew":"  @Test\n  public void testAboveSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"aboveRate_collection\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2));\n\n    // the trigger is initially disabled so that we have the time to set up listeners\n    // and generate the traffic\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger1',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : false,\" +\n        \"'collections' : '\" + COLL1 + \"',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'belowRate' : 0.1,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'started',\" +\n        \"'trigger' : 'search_rate_trigger1',\" +\n        \"'stage' : ['STARTED'],\" +\n        \"'class' : '\" + StartedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger1',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute'],\" +\n        \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'finished',\" +\n        \"'trigger' : 'search_rate_trigger1',\" +\n        \"'stage' : ['SUCCEEDED'],\" +\n        \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(COLL1, query);\n    }\n\n    // enable the trigger\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'search_rate_trigger1'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    boolean await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend the trigger\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'search_rate_trigger1'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(5000);\n\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(listenerEvents.toString(), 3, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(2).stage.toString());\n    assertNull(events.get(2).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = timeSource.getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>) ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>) ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double) r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>) ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>) shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double) r));\n    Map<String, Double> collectionRates = (Map<String, Double>) ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    assertEquals(collectionRate, totalNodeRate.get(), 5.0);\n    assertEquals(collectionRate, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n\n    // check operations\n    List<Map<String, Object>> ops = (List<Map<String, Object>>) ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (Map<String, Object> m : ops) {\n      assertEquals(\"ADDREPLICA\", m.get(\"params.action\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(COLL1, query);\n    }\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(5000);\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = timeSource.getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>) ev.event.getProperties().get(\"node\");\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>) ev.event.getProperties().get(\"replica\");\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double) r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>) ev.event.getProperties().get(\"shard\");\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>) shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double) r));\n    Map<String, Double> collectionRates = (Map<String, Double>) ev.event.getProperties().get(\"collection\");\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    assertEquals(collectionRate, totalNodeRate.get(), 5.0);\n    assertEquals(collectionRate, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n\n    // check operations\n    List<Map<String, Object>> ops = (List<Map<String, Object>>) ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (Map<String, Object> m : ops) {\n      assertEquals(\"ADDREPLICA\", m.get(\"params.action\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"042b92cf48996255bedb0c3c4bf772d7e06e4dea","date":1534272102,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testAboveSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testAboveSearchRate().mjava","sourceNew":"  @Test\n  public void testAboveSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"aboveRate_collection\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2));\n\n    // the trigger is initially disabled so that we have the time to set up listeners\n    // and generate the traffic\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger1',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : false,\" +\n        \"'collections' : '\" + COLL1 + \"',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'belowRate' : 0.1,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'started',\" +\n        \"'trigger' : 'search_rate_trigger1',\" +\n        \"'stage' : ['STARTED'],\" +\n        \"'class' : '\" + StartedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger1',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute'],\" +\n        \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'finished',\" +\n        \"'trigger' : 'search_rate_trigger1',\" +\n        \"'stage' : ['SUCCEEDED'],\" +\n        \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(COLL1, query);\n    }\n\n    // enable the trigger\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'search_rate_trigger1'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    boolean await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend the trigger\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'search_rate_trigger1'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(5000);\n\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(listenerEvents.toString(), 3, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(2).stage.toString());\n    assertNull(events.get(2).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = timeSource.getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>) ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);\n    assertNotNull(\"nodeRates\", nodeRates);\n    // no node violations because node rates weren't set in the config\n    assertTrue(nodeRates.toString(), nodeRates.isEmpty());\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>) ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double) r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>) ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>) shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double) r));\n    Map<String, Double> collectionRates = (Map<String, Double>) ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    // two replicas - the trigger calculates average over all searchable replicas\n    assertEquals(collectionRate / 2, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n\n    // check operations\n    List<Map<String, Object>> ops = (List<Map<String, Object>>) ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (Map<String, Object> m : ops) {\n      assertEquals(\"ADDREPLICA\", m.get(\"params.action\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAboveSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"aboveRate_collection\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2));\n\n    // the trigger is initially disabled so that we have the time to set up listeners\n    // and generate the traffic\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger1',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : false,\" +\n        \"'collections' : '\" + COLL1 + \"',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'belowRate' : 0.1,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'started',\" +\n        \"'trigger' : 'search_rate_trigger1',\" +\n        \"'stage' : ['STARTED'],\" +\n        \"'class' : '\" + StartedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger1',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute'],\" +\n        \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'finished',\" +\n        \"'trigger' : 'search_rate_trigger1',\" +\n        \"'stage' : ['SUCCEEDED'],\" +\n        \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(COLL1, query);\n    }\n\n    // enable the trigger\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'search_rate_trigger1'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    boolean await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend the trigger\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'search_rate_trigger1'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(5000);\n\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(listenerEvents.toString(), 3, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(2).stage.toString());\n    assertNull(events.get(2).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = timeSource.getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>) ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>) ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double) r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>) ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>) shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double) r));\n    Map<String, Double> collectionRates = (Map<String, Double>) ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    assertEquals(collectionRate, totalNodeRate.get(), 5.0);\n    assertEquals(collectionRate, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n\n    // check operations\n    List<Map<String, Object>> ops = (List<Map<String, Object>>) ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (Map<String, Object> m : ops) {\n      assertEquals(\"ADDREPLICA\", m.get(\"params.action\"));\n    }\n  }\n\n","bugFix":["c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3167eae3325cf45449a75ab0468b53c0545606a3","date":1538465698,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testAboveSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testAboveSearchRate().mjava","sourceNew":"  @Test\n  public void testAboveSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"aboveRate_collection\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2));\n\n    // the trigger is initially disabled so that we have the time to set up listeners\n    // and generate the traffic\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger1',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : false,\" +\n        \"'collections' : '\" + COLL1 + \"',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'belowRate' : 0.1,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'started',\" +\n        \"'trigger' : 'search_rate_trigger1',\" +\n        \"'stage' : ['STARTED'],\" +\n        \"'class' : '\" + StartedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger1',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute'],\" +\n        \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'finished',\" +\n        \"'trigger' : 'search_rate_trigger1',\" +\n        \"'stage' : ['SUCCEEDED'],\" +\n        \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(COLL1, query);\n    }\n\n    // enable the trigger\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'search_rate_trigger1'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    boolean await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend the trigger\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'search_rate_trigger1'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(5000);\n\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(listenerEvents.toString(), 3, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(2).stage.toString());\n    assertNull(events.get(2).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = timeSource.getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>) ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);\n    assertNotNull(\"nodeRates\", nodeRates);\n    // no node violations because node rates weren't set in the config\n    assertTrue(nodeRates.toString(), nodeRates.isEmpty());\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>) ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double) r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>) ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>) shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double) r));\n    Map<String, Double> collectionRates = (Map<String, Double>) ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    // two replicas - the trigger calculates average over all searchable replicas\n    assertEquals(collectionRate / 2, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n\n    // check operations\n    List<MapWriter> ops = (List<MapWriter>) ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (MapWriter m : ops) {\n      assertEquals(\"ADDREPLICA\", m._get(\"params.action\",null));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAboveSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"aboveRate_collection\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2));\n\n    // the trigger is initially disabled so that we have the time to set up listeners\n    // and generate the traffic\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger1',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : false,\" +\n        \"'collections' : '\" + COLL1 + \"',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'belowRate' : 0.1,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'started',\" +\n        \"'trigger' : 'search_rate_trigger1',\" +\n        \"'stage' : ['STARTED'],\" +\n        \"'class' : '\" + StartedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger1',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute'],\" +\n        \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'finished',\" +\n        \"'trigger' : 'search_rate_trigger1',\" +\n        \"'stage' : ['SUCCEEDED'],\" +\n        \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(COLL1, query);\n    }\n\n    // enable the trigger\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'search_rate_trigger1'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    boolean await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend the trigger\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'search_rate_trigger1'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(5000);\n\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(listenerEvents.toString(), 3, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(2).stage.toString());\n    assertNull(events.get(2).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = timeSource.getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>) ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);\n    assertNotNull(\"nodeRates\", nodeRates);\n    // no node violations because node rates weren't set in the config\n    assertTrue(nodeRates.toString(), nodeRates.isEmpty());\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>) ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double) r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>) ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>) shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double) r));\n    Map<String, Double> collectionRates = (Map<String, Double>) ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    // two replicas - the trigger calculates average over all searchable replicas\n    assertEquals(collectionRate / 2, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n\n    // check operations\n    List<Map<String, Object>> ops = (List<Map<String, Object>>) ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (Map<String, Object> m : ops) {\n      assertEquals(\"ADDREPLICA\", m.get(\"params.action\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testAboveSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testAboveSearchRate().mjava","sourceNew":"  @Test\n  public void testAboveSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"aboveRate_collection\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2));\n\n    // the trigger is initially disabled so that we have the time to set up listeners\n    // and generate the traffic\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger1',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : false,\" +\n        \"'collections' : '\" + COLL1 + \"',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'belowRate' : 0.1,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'started',\" +\n        \"'trigger' : 'search_rate_trigger1',\" +\n        \"'stage' : ['STARTED'],\" +\n        \"'class' : '\" + StartedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger1',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute'],\" +\n        \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'finished',\" +\n        \"'trigger' : 'search_rate_trigger1',\" +\n        \"'stage' : ['SUCCEEDED'],\" +\n        \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(COLL1, query);\n    }\n\n    // enable the trigger\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'search_rate_trigger1'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    boolean await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend the trigger\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'search_rate_trigger1'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(5000);\n\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(listenerEvents.toString(), 3, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(2).stage.toString());\n    assertNull(events.get(2).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = timeSource.getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>) ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);\n    assertNotNull(\"nodeRates\", nodeRates);\n    // no node violations because node rates weren't set in the config\n    assertTrue(nodeRates.toString(), nodeRates.isEmpty());\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>) ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double) r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>) ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>) shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double) r));\n    Map<String, Double> collectionRates = (Map<String, Double>) ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    // two replicas - the trigger calculates average over all searchable replicas\n    assertEquals(collectionRate / 2, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n\n    // check operations\n    List<MapWriter> ops = (List<MapWriter>) ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (MapWriter m : ops) {\n      assertEquals(\"ADDREPLICA\", m._get(\"params.action\",null));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAboveSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"aboveRate_collection\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2));\n\n    // the trigger is initially disabled so that we have the time to set up listeners\n    // and generate the traffic\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger1',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : false,\" +\n        \"'collections' : '\" + COLL1 + \"',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'belowRate' : 0.1,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'started',\" +\n        \"'trigger' : 'search_rate_trigger1',\" +\n        \"'stage' : ['STARTED'],\" +\n        \"'class' : '\" + StartedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger1',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute'],\" +\n        \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'finished',\" +\n        \"'trigger' : 'search_rate_trigger1',\" +\n        \"'stage' : ['SUCCEEDED'],\" +\n        \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(COLL1, query);\n    }\n\n    // enable the trigger\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'search_rate_trigger1'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    boolean await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend the trigger\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'search_rate_trigger1'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(5000);\n\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(listenerEvents.toString(), 3, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(2).stage.toString());\n    assertNull(events.get(2).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = timeSource.getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>) ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);\n    assertNotNull(\"nodeRates\", nodeRates);\n    // no node violations because node rates weren't set in the config\n    assertTrue(nodeRates.toString(), nodeRates.isEmpty());\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>) ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double) r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>) ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>) shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double) r));\n    Map<String, Double> collectionRates = (Map<String, Double>) ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    // two replicas - the trigger calculates average over all searchable replicas\n    assertEquals(collectionRate / 2, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n\n    // check operations\n    List<MapWriter> ops = (List<MapWriter>) ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (MapWriter m : ops) {\n      assertEquals(\"ADDREPLICA\", m._get(\"params.action\",null));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0921a3414432a896e242b56e81736020946fe960","date":1548182831,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testAboveSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testAboveSearchRate().mjava","sourceNew":"  @Test\n  public void testAboveSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"aboveRate_collection\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2));\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       // the trigger is initially disabled so that we have the time to set up listeners\n       // and generate the traffic\n       \"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'search_rate_trigger1',\" +\n       \"'event' : 'searchRate',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : false,\" +\n       \"'collections' : '\" + COLL1 + \"',\" +\n       \"'aboveRate' : 1.0,\" +\n       \"'belowRate' : 0.1,\" +\n       \"'actions' : [\" +\n       \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n       \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n       \"]\" +\n       \"}}\");\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'started',\" +\n       \"'trigger' : 'search_rate_trigger1',\" +\n       \"'stage' : ['STARTED'],\" +\n       \"'class' : '\" + StartedProcessingListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'srt',\" +\n       \"'trigger' : 'search_rate_trigger1',\" +\n       \"'stage' : ['FAILED','SUCCEEDED'],\" +\n       \"'afterAction': ['compute', 'execute'],\" +\n       \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n    listenerEventLatch = new CountDownLatch(3);\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'finished',\" +\n       \"'trigger' : 'search_rate_trigger1',\" +\n       \"'stage' : ['SUCCEEDED'],\" +\n       \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(COLL1, query);\n    }\n    \n    // enable the trigger\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'resume-trigger' : {\" +\n       \"'name' : 'search_rate_trigger1'\" +\n       \"}\" +\n       \"}\");\n\n    assertTrue(\"The trigger did not start in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"The trigger did not finish in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"the listener should have recorded all events w/in a reasonable amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n\n    // suspend the trigger\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'suspend-trigger' : {\" +\n       \"'name' : 'search_rate_trigger1'\" +\n       \"}\" +\n       \"}\");\n\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(listenerEvents.toString(), 3, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(2).stage.toString());\n    assertNull(events.get(2).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = timeSource.getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>) ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);\n    assertNotNull(\"nodeRates\", nodeRates);\n    // no node violations because node rates weren't set in the config\n    assertTrue(nodeRates.toString(), nodeRates.isEmpty());\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>) ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double) r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>) ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>) shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double) r));\n    Map<String, Double> collectionRates = (Map<String, Double>) ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    // two replicas - the trigger calculates average over all searchable replicas\n    assertEquals(collectionRate / 2, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n\n    // check operations\n    List<MapWriter> ops = (List<MapWriter>) ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (MapWriter m : ops) {\n      assertEquals(\"ADDREPLICA\", m._get(\"params.action\",null));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAboveSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"aboveRate_collection\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2));\n\n    // the trigger is initially disabled so that we have the time to set up listeners\n    // and generate the traffic\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger1',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : false,\" +\n        \"'collections' : '\" + COLL1 + \"',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'belowRate' : 0.1,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'started',\" +\n        \"'trigger' : 'search_rate_trigger1',\" +\n        \"'stage' : ['STARTED'],\" +\n        \"'class' : '\" + StartedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger1',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute'],\" +\n        \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'finished',\" +\n        \"'trigger' : 'search_rate_trigger1',\" +\n        \"'stage' : ['SUCCEEDED'],\" +\n        \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(COLL1, query);\n    }\n\n    // enable the trigger\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'search_rate_trigger1'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    boolean await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend the trigger\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'search_rate_trigger1'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(5000);\n\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(listenerEvents.toString(), 3, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(2).stage.toString());\n    assertNull(events.get(2).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = timeSource.getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>) ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);\n    assertNotNull(\"nodeRates\", nodeRates);\n    // no node violations because node rates weren't set in the config\n    assertTrue(nodeRates.toString(), nodeRates.isEmpty());\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>) ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double) r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>) ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>) shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double) r));\n    Map<String, Double> collectionRates = (Map<String, Double>) ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    // two replicas - the trigger calculates average over all searchable replicas\n    assertEquals(collectionRate / 2, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n\n    // check operations\n    List<MapWriter> ops = (List<MapWriter>) ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (MapWriter m : ops) {\n      assertEquals(\"ADDREPLICA\", m._get(\"params.action\",null));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2682a1cd25864ccdc1b44bf047bd08700f28ba06","date":1548321910,"type":3,"author":"Tommaso Teofili","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testAboveSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testAboveSearchRate().mjava","sourceNew":"  @Test\n  public void testAboveSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"aboveRate_collection\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2));\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       // the trigger is initially disabled so that we have the time to set up listeners\n       // and generate the traffic\n       \"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'search_rate_trigger1',\" +\n       \"'event' : 'searchRate',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : false,\" +\n       \"'collections' : '\" + COLL1 + \"',\" +\n       \"'aboveRate' : 1.0,\" +\n       \"'belowRate' : 0.1,\" +\n       \"'actions' : [\" +\n       \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n       \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n       \"]\" +\n       \"}}\");\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'started',\" +\n       \"'trigger' : 'search_rate_trigger1',\" +\n       \"'stage' : ['STARTED'],\" +\n       \"'class' : '\" + StartedProcessingListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'srt',\" +\n       \"'trigger' : 'search_rate_trigger1',\" +\n       \"'stage' : ['FAILED','SUCCEEDED'],\" +\n       \"'afterAction': ['compute', 'execute'],\" +\n       \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n    listenerEventLatch = new CountDownLatch(3);\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'finished',\" +\n       \"'trigger' : 'search_rate_trigger1',\" +\n       \"'stage' : ['SUCCEEDED'],\" +\n       \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(COLL1, query);\n    }\n    \n    // enable the trigger\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'resume-trigger' : {\" +\n       \"'name' : 'search_rate_trigger1'\" +\n       \"}\" +\n       \"}\");\n\n    assertTrue(\"The trigger did not start in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"The trigger did not finish in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"the listener should have recorded all events w/in a reasonable amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n\n    // suspend the trigger\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'suspend-trigger' : {\" +\n       \"'name' : 'search_rate_trigger1'\" +\n       \"}\" +\n       \"}\");\n\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(listenerEvents.toString(), 3, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(2).stage.toString());\n    assertNull(events.get(2).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = timeSource.getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>) ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);\n    assertNotNull(\"nodeRates\", nodeRates);\n    // no node violations because node rates weren't set in the config\n    assertTrue(nodeRates.toString(), nodeRates.isEmpty());\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>) ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double) r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>) ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>) shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double) r));\n    Map<String, Double> collectionRates = (Map<String, Double>) ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    // two replicas - the trigger calculates average over all searchable replicas\n    assertEquals(collectionRate / 2, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n\n    // check operations\n    List<MapWriter> ops = (List<MapWriter>) ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (MapWriter m : ops) {\n      assertEquals(\"ADDREPLICA\", m._get(\"params.action\",null));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAboveSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"aboveRate_collection\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2));\n\n    // the trigger is initially disabled so that we have the time to set up listeners\n    // and generate the traffic\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger1',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : false,\" +\n        \"'collections' : '\" + COLL1 + \"',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'belowRate' : 0.1,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'started',\" +\n        \"'trigger' : 'search_rate_trigger1',\" +\n        \"'stage' : ['STARTED'],\" +\n        \"'class' : '\" + StartedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger1',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute'],\" +\n        \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'finished',\" +\n        \"'trigger' : 'search_rate_trigger1',\" +\n        \"'stage' : ['SUCCEEDED'],\" +\n        \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(COLL1, query);\n    }\n\n    // enable the trigger\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'search_rate_trigger1'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    boolean await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend the trigger\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'search_rate_trigger1'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(5000);\n\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(listenerEvents.toString(), 3, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(2).stage.toString());\n    assertNull(events.get(2).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = timeSource.getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>) ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);\n    assertNotNull(\"nodeRates\", nodeRates);\n    // no node violations because node rates weren't set in the config\n    assertTrue(nodeRates.toString(), nodeRates.isEmpty());\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>) ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double) r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>) ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>) shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double) r));\n    Map<String, Double> collectionRates = (Map<String, Double>) ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    // two replicas - the trigger calculates average over all searchable replicas\n    assertEquals(collectionRate / 2, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n\n    // check operations\n    List<MapWriter> ops = (List<MapWriter>) ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (MapWriter m : ops) {\n      assertEquals(\"ADDREPLICA\", m._get(\"params.action\",null));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testAboveSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testAboveSearchRate().mjava","sourceNew":"  @Test\n  public void testAboveSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"aboveRate_collection\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n\n    CloudUtil.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudUtil.clusterShape(1, 2));\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       // the trigger is initially disabled so that we have the time to set up listeners\n       // and generate the traffic\n       \"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'search_rate_trigger1',\" +\n       \"'event' : 'searchRate',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : false,\" +\n       \"'collections' : '\" + COLL1 + \"',\" +\n       \"'aboveRate' : 1.0,\" +\n       \"'belowRate' : 0.1,\" +\n       \"'actions' : [\" +\n       \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n       \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n       \"]\" +\n       \"}}\");\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'started',\" +\n       \"'trigger' : 'search_rate_trigger1',\" +\n       \"'stage' : ['STARTED'],\" +\n       \"'class' : '\" + StartedProcessingListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'srt',\" +\n       \"'trigger' : 'search_rate_trigger1',\" +\n       \"'stage' : ['FAILED','SUCCEEDED'],\" +\n       \"'afterAction': ['compute', 'execute'],\" +\n       \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n    listenerEventLatch = new CountDownLatch(3);\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'finished',\" +\n       \"'trigger' : 'search_rate_trigger1',\" +\n       \"'stage' : ['SUCCEEDED'],\" +\n       \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(COLL1, query);\n    }\n    \n    // enable the trigger\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'resume-trigger' : {\" +\n       \"'name' : 'search_rate_trigger1'\" +\n       \"}\" +\n       \"}\");\n\n    assertTrue(\"The trigger did not start in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"The trigger did not finish in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"the listener should have recorded all events w/in a reasonable amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n\n    // suspend the trigger\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'suspend-trigger' : {\" +\n       \"'name' : 'search_rate_trigger1'\" +\n       \"}\" +\n       \"}\");\n\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(listenerEvents.toString(), 3, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(2).stage.toString());\n    assertNull(events.get(2).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = timeSource.getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>) ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);\n    assertNotNull(\"nodeRates\", nodeRates);\n    // no node violations because node rates weren't set in the config\n    assertTrue(nodeRates.toString(), nodeRates.isEmpty());\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>) ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double) r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>) ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>) shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double) r));\n    Map<String, Double> collectionRates = (Map<String, Double>) ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    // two replicas - the trigger calculates average over all searchable replicas\n    assertEquals(collectionRate / 2, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n\n    // check operations\n    List<MapWriter> ops = (List<MapWriter>) ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (MapWriter m : ops) {\n      assertEquals(\"ADDREPLICA\", m._get(\"params.action\",null));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAboveSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"aboveRate_collection\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2));\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       // the trigger is initially disabled so that we have the time to set up listeners\n       // and generate the traffic\n       \"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'search_rate_trigger1',\" +\n       \"'event' : 'searchRate',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : false,\" +\n       \"'collections' : '\" + COLL1 + \"',\" +\n       \"'aboveRate' : 1.0,\" +\n       \"'belowRate' : 0.1,\" +\n       \"'actions' : [\" +\n       \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n       \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n       \"]\" +\n       \"}}\");\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'started',\" +\n       \"'trigger' : 'search_rate_trigger1',\" +\n       \"'stage' : ['STARTED'],\" +\n       \"'class' : '\" + StartedProcessingListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'srt',\" +\n       \"'trigger' : 'search_rate_trigger1',\" +\n       \"'stage' : ['FAILED','SUCCEEDED'],\" +\n       \"'afterAction': ['compute', 'execute'],\" +\n       \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n    listenerEventLatch = new CountDownLatch(3);\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'finished',\" +\n       \"'trigger' : 'search_rate_trigger1',\" +\n       \"'stage' : ['SUCCEEDED'],\" +\n       \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(COLL1, query);\n    }\n    \n    // enable the trigger\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'resume-trigger' : {\" +\n       \"'name' : 'search_rate_trigger1'\" +\n       \"}\" +\n       \"}\");\n\n    assertTrue(\"The trigger did not start in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"The trigger did not finish in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"the listener should have recorded all events w/in a reasonable amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n\n    // suspend the trigger\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'suspend-trigger' : {\" +\n       \"'name' : 'search_rate_trigger1'\" +\n       \"}\" +\n       \"}\");\n\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(listenerEvents.toString(), 3, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(2).stage.toString());\n    assertNull(events.get(2).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = timeSource.getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>) ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);\n    assertNotNull(\"nodeRates\", nodeRates);\n    // no node violations because node rates weren't set in the config\n    assertTrue(nodeRates.toString(), nodeRates.isEmpty());\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>) ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double) r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>) ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>) shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double) r));\n    Map<String, Double> collectionRates = (Map<String, Double>) ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    // two replicas - the trigger calculates average over all searchable replicas\n    assertEquals(collectionRate / 2, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n\n    // check operations\n    List<MapWriter> ops = (List<MapWriter>) ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (MapWriter m : ops) {\n      assertEquals(\"ADDREPLICA\", m._get(\"params.action\",null));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testAboveSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testAboveSearchRate().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testAboveSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"aboveRate_collection\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n\n    CloudUtil.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudUtil.clusterShape(1, 2));\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       // the trigger is initially disabled so that we have the time to set up listeners\n       // and generate the traffic\n       \"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'search_rate_trigger1',\" +\n       \"'event' : 'searchRate',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : false,\" +\n       \"'collections' : '\" + COLL1 + \"',\" +\n       \"'aboveRate' : 1.0,\" +\n       \"'belowRate' : 0.1,\" +\n       \"'actions' : [\" +\n       \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n       \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n       \"]\" +\n       \"}}\");\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'started',\" +\n       \"'trigger' : 'search_rate_trigger1',\" +\n       \"'stage' : ['STARTED'],\" +\n       \"'class' : '\" + StartedProcessingListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'srt',\" +\n       \"'trigger' : 'search_rate_trigger1',\" +\n       \"'stage' : ['FAILED','SUCCEEDED'],\" +\n       \"'afterAction': ['compute', 'execute'],\" +\n       \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n    listenerEventLatch = new CountDownLatch(3);\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'finished',\" +\n       \"'trigger' : 'search_rate_trigger1',\" +\n       \"'stage' : ['SUCCEEDED'],\" +\n       \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(COLL1, query);\n    }\n    \n    // enable the trigger\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'resume-trigger' : {\" +\n       \"'name' : 'search_rate_trigger1'\" +\n       \"}\" +\n       \"}\");\n\n    assertTrue(\"The trigger did not start in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"The trigger did not finish in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"the listener should have recorded all events w/in a reasonable amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n\n    // suspend the trigger\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'suspend-trigger' : {\" +\n       \"'name' : 'search_rate_trigger1'\" +\n       \"}\" +\n       \"}\");\n\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(listenerEvents.toString(), 3, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(2).stage.toString());\n    assertNull(events.get(2).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = timeSource.getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>) ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);\n    assertNotNull(\"nodeRates\", nodeRates);\n    // no node violations because node rates weren't set in the config\n    assertTrue(nodeRates.toString(), nodeRates.isEmpty());\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>) ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double) r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>) ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>) shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double) r));\n    Map<String, Double> collectionRates = (Map<String, Double>) ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    // two replicas - the trigger calculates average over all searchable replicas\n    assertEquals(collectionRate / 2, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n\n    // check operations\n    List<MapWriter> ops = (List<MapWriter>) ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (MapWriter m : ops) {\n      assertEquals(\"ADDREPLICA\", m._get(\"params.action\",null));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAboveSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"aboveRate_collection\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n\n    CloudUtil.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudUtil.clusterShape(1, 2));\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       // the trigger is initially disabled so that we have the time to set up listeners\n       // and generate the traffic\n       \"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'search_rate_trigger1',\" +\n       \"'event' : 'searchRate',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : false,\" +\n       \"'collections' : '\" + COLL1 + \"',\" +\n       \"'aboveRate' : 1.0,\" +\n       \"'belowRate' : 0.1,\" +\n       \"'actions' : [\" +\n       \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n       \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n       \"]\" +\n       \"}}\");\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'started',\" +\n       \"'trigger' : 'search_rate_trigger1',\" +\n       \"'stage' : ['STARTED'],\" +\n       \"'class' : '\" + StartedProcessingListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'srt',\" +\n       \"'trigger' : 'search_rate_trigger1',\" +\n       \"'stage' : ['FAILED','SUCCEEDED'],\" +\n       \"'afterAction': ['compute', 'execute'],\" +\n       \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n    listenerEventLatch = new CountDownLatch(3);\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'finished',\" +\n       \"'trigger' : 'search_rate_trigger1',\" +\n       \"'stage' : ['SUCCEEDED'],\" +\n       \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(COLL1, query);\n    }\n    \n    // enable the trigger\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'resume-trigger' : {\" +\n       \"'name' : 'search_rate_trigger1'\" +\n       \"}\" +\n       \"}\");\n\n    assertTrue(\"The trigger did not start in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"The trigger did not finish in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"the listener should have recorded all events w/in a reasonable amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n\n    // suspend the trigger\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'suspend-trigger' : {\" +\n       \"'name' : 'search_rate_trigger1'\" +\n       \"}\" +\n       \"}\");\n\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(listenerEvents.toString(), 3, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(2).stage.toString());\n    assertNull(events.get(2).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = timeSource.getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>) ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);\n    assertNotNull(\"nodeRates\", nodeRates);\n    // no node violations because node rates weren't set in the config\n    assertTrue(nodeRates.toString(), nodeRates.isEmpty());\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>) ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double) r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>) ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>) shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double) r));\n    Map<String, Double> collectionRates = (Map<String, Double>) ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    // two replicas - the trigger calculates average over all searchable replicas\n    assertEquals(collectionRate / 2, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n\n    // check operations\n    List<MapWriter> ops = (List<MapWriter>) ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (MapWriter m : ops) {\n      assertEquals(\"ADDREPLICA\", m._get(\"params.action\",null));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testAboveSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testAboveSearchRate().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testAboveSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"aboveRate_collection\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n\n    CloudUtil.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudUtil.clusterShape(1, 2));\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       // the trigger is initially disabled so that we have the time to set up listeners\n       // and generate the traffic\n       \"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'search_rate_trigger1',\" +\n       \"'event' : 'searchRate',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : false,\" +\n       \"'collections' : '\" + COLL1 + \"',\" +\n       \"'aboveRate' : 1.0,\" +\n       \"'belowRate' : 0.1,\" +\n       \"'actions' : [\" +\n       \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n       \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n       \"]\" +\n       \"}}\");\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'started',\" +\n       \"'trigger' : 'search_rate_trigger1',\" +\n       \"'stage' : ['STARTED'],\" +\n       \"'class' : '\" + StartedProcessingListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'srt',\" +\n       \"'trigger' : 'search_rate_trigger1',\" +\n       \"'stage' : ['FAILED','SUCCEEDED'],\" +\n       \"'afterAction': ['compute', 'execute'],\" +\n       \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n    listenerEventLatch = new CountDownLatch(3);\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'finished',\" +\n       \"'trigger' : 'search_rate_trigger1',\" +\n       \"'stage' : ['SUCCEEDED'],\" +\n       \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(COLL1, query);\n    }\n    \n    // enable the trigger\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'resume-trigger' : {\" +\n       \"'name' : 'search_rate_trigger1'\" +\n       \"}\" +\n       \"}\");\n\n    assertTrue(\"The trigger did not start in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"The trigger did not finish in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"the listener should have recorded all events w/in a reasonable amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n\n    // suspend the trigger\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'suspend-trigger' : {\" +\n       \"'name' : 'search_rate_trigger1'\" +\n       \"}\" +\n       \"}\");\n\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(listenerEvents.toString(), 3, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(2).stage.toString());\n    assertNull(events.get(2).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = timeSource.getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>) ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);\n    assertNotNull(\"nodeRates\", nodeRates);\n    // no node violations because node rates weren't set in the config\n    assertTrue(nodeRates.toString(), nodeRates.isEmpty());\n    List<Replica> replicaRates = (List<Replica>) ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.get(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double) r.get(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>) ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>) shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double) r));\n    Map<String, Double> collectionRates = (Map<String, Double>) ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    // two replicas - the trigger calculates average over all searchable replicas\n    assertEquals(collectionRate / 2, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n\n    // check operations\n    List<MapWriter> ops = (List<MapWriter>) ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (MapWriter m : ops) {\n      assertEquals(\"ADDREPLICA\", m._get(\"params.action\",null));\n    }\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testAboveSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"aboveRate_collection\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n\n    CloudUtil.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudUtil.clusterShape(1, 2));\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       // the trigger is initially disabled so that we have the time to set up listeners\n       // and generate the traffic\n       \"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'search_rate_trigger1',\" +\n       \"'event' : 'searchRate',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : false,\" +\n       \"'collections' : '\" + COLL1 + \"',\" +\n       \"'aboveRate' : 1.0,\" +\n       \"'belowRate' : 0.1,\" +\n       \"'actions' : [\" +\n       \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n       \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n       \"]\" +\n       \"}}\");\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'started',\" +\n       \"'trigger' : 'search_rate_trigger1',\" +\n       \"'stage' : ['STARTED'],\" +\n       \"'class' : '\" + StartedProcessingListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'srt',\" +\n       \"'trigger' : 'search_rate_trigger1',\" +\n       \"'stage' : ['FAILED','SUCCEEDED'],\" +\n       \"'afterAction': ['compute', 'execute'],\" +\n       \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n    listenerEventLatch = new CountDownLatch(3);\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'finished',\" +\n       \"'trigger' : 'search_rate_trigger1',\" +\n       \"'stage' : ['SUCCEEDED'],\" +\n       \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(COLL1, query);\n    }\n    \n    // enable the trigger\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'resume-trigger' : {\" +\n       \"'name' : 'search_rate_trigger1'\" +\n       \"}\" +\n       \"}\");\n\n    assertTrue(\"The trigger did not start in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"The trigger did not finish in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"the listener should have recorded all events w/in a reasonable amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n\n    // suspend the trigger\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'suspend-trigger' : {\" +\n       \"'name' : 'search_rate_trigger1'\" +\n       \"}\" +\n       \"}\");\n\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(listenerEvents.toString(), 3, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(2).stage.toString());\n    assertNull(events.get(2).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = timeSource.getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>) ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);\n    assertNotNull(\"nodeRates\", nodeRates);\n    // no node violations because node rates weren't set in the config\n    assertTrue(nodeRates.toString(), nodeRates.isEmpty());\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>) ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double) r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>) ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>) shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double) r));\n    Map<String, Double> collectionRates = (Map<String, Double>) ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    // two replicas - the trigger calculates average over all searchable replicas\n    assertEquals(collectionRate / 2, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n\n    // check operations\n    List<MapWriter> ops = (List<MapWriter>) ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (MapWriter m : ops) {\n      assertEquals(\"ADDREPLICA\", m._get(\"params.action\",null));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testAboveSearchRate().mjava","sourceNew":null,"sourceOld":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testAboveSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"aboveRate_collection\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n\n    CloudUtil.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudUtil.clusterShape(1, 2));\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       // the trigger is initially disabled so that we have the time to set up listeners\n       // and generate the traffic\n       \"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'search_rate_trigger1',\" +\n       \"'event' : 'searchRate',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : false,\" +\n       \"'collections' : '\" + COLL1 + \"',\" +\n       \"'aboveRate' : 1.0,\" +\n       \"'belowRate' : 0.1,\" +\n       \"'actions' : [\" +\n       \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n       \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n       \"]\" +\n       \"}}\");\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'started',\" +\n       \"'trigger' : 'search_rate_trigger1',\" +\n       \"'stage' : ['STARTED'],\" +\n       \"'class' : '\" + StartedProcessingListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'srt',\" +\n       \"'trigger' : 'search_rate_trigger1',\" +\n       \"'stage' : ['FAILED','SUCCEEDED'],\" +\n       \"'afterAction': ['compute', 'execute'],\" +\n       \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n    listenerEventLatch = new CountDownLatch(3);\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'finished',\" +\n       \"'trigger' : 'search_rate_trigger1',\" +\n       \"'stage' : ['SUCCEEDED'],\" +\n       \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(COLL1, query);\n    }\n    \n    // enable the trigger\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'resume-trigger' : {\" +\n       \"'name' : 'search_rate_trigger1'\" +\n       \"}\" +\n       \"}\");\n\n    assertTrue(\"The trigger did not start in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"The trigger did not finish in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"the listener should have recorded all events w/in a reasonable amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n\n    // suspend the trigger\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'suspend-trigger' : {\" +\n       \"'name' : 'search_rate_trigger1'\" +\n       \"}\" +\n       \"}\");\n\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(listenerEvents.toString(), 3, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(2).stage.toString());\n    assertNull(events.get(2).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = timeSource.getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>) ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);\n    assertNotNull(\"nodeRates\", nodeRates);\n    // no node violations because node rates weren't set in the config\n    assertTrue(nodeRates.toString(), nodeRates.isEmpty());\n    List<Replica> replicaRates = (List<Replica>) ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.get(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double) r.get(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>) ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>) shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double) r));\n    Map<String, Double> collectionRates = (Map<String, Double>) ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    // two replicas - the trigger calculates average over all searchable replicas\n    assertEquals(collectionRate / 2, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n\n    // check operations\n    List<MapWriter> ops = (List<MapWriter>) ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (MapWriter m : ops) {\n      assertEquals(\"ADDREPLICA\", m._get(\"params.action\",null));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a"],"c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"3f504512a03d978990cbff30db0522b354e846db":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0921a3414432a896e242b56e81736020946fe960":["89948af0461fead48f44ba8fb7866f107ce83f22"],"3167eae3325cf45449a75ab0468b53c0545606a3":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["0921a3414432a896e242b56e81736020946fe960"],"89948af0461fead48f44ba8fb7866f107ce83f22":["3167eae3325cf45449a75ab0468b53c0545606a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":["89948af0461fead48f44ba8fb7866f107ce83f22","0921a3414432a896e242b56e81736020946fe960"]},"commit2Childs":{"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["3167eae3325cf45449a75ab0468b53c0545606a3"],"c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["3f504512a03d978990cbff30db0522b354e846db"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a"],"0921a3414432a896e242b56e81736020946fe960":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"3167eae3325cf45449a75ab0468b53c0545606a3":["89948af0461fead48f44ba8fb7866f107ce83f22"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"89948af0461fead48f44ba8fb7866f107ce83f22":["0921a3414432a896e242b56e81736020946fe960","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}