{"path":"modules/facet/src/java/org/apache/lucene/facet/search/FacetsCollector#initScoredDocCollector(FacetSearchParams,IndexReader,TaxonomyReader).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/FacetsCollector#initScoredDocCollector(FacetSearchParams,IndexReader,TaxonomyReader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a {@link ScoredDocIdCollector} to be used as the first phase of\n   * the facet collection. If all facetRequests are do not require the\n   * document score, a ScoredDocIdCollector which does not store the document\n   * scores would be returned. Otherwise a SDIC which does store the documents\n   * will be returned, having an initial allocated space for 1000 such\n   * documents' scores.\n   */\n  protected ScoredDocIdCollector initScoredDocCollector(\n      FacetSearchParams facetSearchParams, IndexReader indexReader,\n      TaxonomyReader taxonomyReader) {\n    for (FacetRequest frq : facetSearchParams.getFacetRequests()) {\n      if (frq.requireDocumentScore()) {\n        return ScoredDocIdCollector.create(1000, true);\n      }\n    }\n    return ScoredDocIdCollector.create(indexReader.maxDoc(), false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3bb9fddf38bc78fdecdf76173ec3d83fdea9f8a3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/FacetsCollector#initScoredDocCollector(FacetSearchParams,IndexReader,TaxonomyReader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a {@link ScoredDocIdCollector} to be used as the first phase of\n   * the facet collection. If all facetRequests are do not require the\n   * document score, a ScoredDocIdCollector which does not store the document\n   * scores would be returned. Otherwise a SDIC which does store the documents\n   * will be returned, having an initial allocated space for 1000 such\n   * documents' scores.\n   */\n  protected ScoredDocIdCollector initScoredDocCollector(\n      FacetSearchParams facetSearchParams, IndexReader indexReader,\n      TaxonomyReader taxonomyReader) {\n    for (FacetRequest frq : facetSearchParams.getFacetRequests()) {\n      if (frq.requireDocumentScore()) {\n        return ScoredDocIdCollector.create(1000, true);\n      }\n    }\n    return ScoredDocIdCollector.create(indexReader.maxDoc(), false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/FacetsCollector#initScoredDocCollector(FacetSearchParams,IndexReader,TaxonomyReader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a {@link ScoredDocIdCollector} to be used as the first phase of\n   * the facet collection. If all facetRequests are do not require the\n   * document score, a ScoredDocIdCollector which does not store the document\n   * scores would be returned. Otherwise a SDIC which does store the documents\n   * will be returned, having an initial allocated space for 1000 such\n   * documents' scores.\n   */\n  protected ScoredDocIdCollector initScoredDocCollector(\n      FacetSearchParams facetSearchParams, IndexReader indexReader,\n      TaxonomyReader taxonomyReader) {\n    for (FacetRequest frq : facetSearchParams.getFacetRequests()) {\n      if (frq.requireDocumentScore()) {\n        return ScoredDocIdCollector.create(1000, true);\n      }\n    }\n    return ScoredDocIdCollector.create(indexReader.maxDoc(), false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetsCollector#initScoredDocCollector(FacetSearchParams,IndexReader,TaxonomyReader).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/FacetsCollector#initScoredDocCollector(FacetSearchParams,IndexReader,TaxonomyReader).mjava","sourceNew":"  /**\n   * Create a {@link ScoredDocIdCollector} to be used as the first phase of\n   * the facet collection. If all facetRequests are do not require the\n   * document score, a ScoredDocIdCollector which does not store the document\n   * scores would be returned. Otherwise a SDIC which does store the documents\n   * will be returned, having an initial allocated space for 1000 such\n   * documents' scores.\n   */\n  protected ScoredDocIdCollector initScoredDocCollector(\n      FacetSearchParams facetSearchParams, IndexReader indexReader,\n      TaxonomyReader taxonomyReader) {\n    for (FacetRequest frq : facetSearchParams.getFacetRequests()) {\n      if (frq.requireDocumentScore()) {\n        return ScoredDocIdCollector.create(1000, true);\n      }\n    }\n    return ScoredDocIdCollector.create(indexReader.maxDoc(), false);\n  }\n\n","sourceOld":"  /**\n   * Create a {@link ScoredDocIdCollector} to be used as the first phase of\n   * the facet collection. If all facetRequests are do not require the\n   * document score, a ScoredDocIdCollector which does not store the document\n   * scores would be returned. Otherwise a SDIC which does store the documents\n   * will be returned, having an initial allocated space for 1000 such\n   * documents' scores.\n   */\n  protected ScoredDocIdCollector initScoredDocCollector(\n      FacetSearchParams facetSearchParams, IndexReader indexReader,\n      TaxonomyReader taxonomyReader) {\n    for (FacetRequest frq : facetSearchParams.getFacetRequests()) {\n      if (frq.requireDocumentScore()) {\n        return ScoredDocIdCollector.create(1000, true);\n      }\n    }\n    return ScoredDocIdCollector.create(indexReader.maxDoc(), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}