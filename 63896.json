{"path":"lucene/src/test/org/apache/lucene/util/TestSmallFloat#orig_floatToByte(float).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestSmallFloat#orig_floatToByte(float).mjava","pathOld":"src/test/org/apache/lucene/util/TestSmallFloat#orig_floatToByte(float).mjava","sourceNew":"  // original lucene floatToByte\n  static byte orig_floatToByte(float f) {\n    if (f < 0.0f)                                 // round negatives up to zero\n      f = 0.0f;\n\n    if (f == 0.0f)                                // zero is a special case\n      return 0;\n\n    int bits = Float.floatToIntBits(f);           // parse float into parts\n    int mantissa = (bits & 0xffffff) >> 21;\n    int exponent = (((bits >> 24) & 0x7f) - 63) + 15;\n\n    if (exponent > 31) {                          // overflow: use max value\n      exponent = 31;\n      mantissa = 7;\n    }\n\n    if (exponent < 0) {                           // underflow: use min value\n      exponent = 0;\n      mantissa = 1;\n    }\n\n    return (byte)((exponent << 3) | mantissa);    // pack into a byte\n  }\n\n","sourceOld":"  // original lucene floatToByte\n  static byte orig_floatToByte(float f) {\n    if (f < 0.0f)                                 // round negatives up to zero\n      f = 0.0f;\n\n    if (f == 0.0f)                                // zero is a special case\n      return 0;\n\n    int bits = Float.floatToIntBits(f);           // parse float into parts\n    int mantissa = (bits & 0xffffff) >> 21;\n    int exponent = (((bits >> 24) & 0x7f) - 63) + 15;\n\n    if (exponent > 31) {                          // overflow: use max value\n      exponent = 31;\n      mantissa = 7;\n    }\n\n    if (exponent < 0) {                           // underflow: use min value\n      exponent = 0;\n      mantissa = 1;\n    }\n\n    return (byte)((exponent << 3) | mantissa);    // pack into a byte\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c162cf3bb7fd2a150aaeeab80495a0a25bb9aee","date":1298483754,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestSmallFloat#orig_floatToByte(float).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestSmallFloat#orig_floatToByte(float).mjava","sourceNew":"  // This is the original lucene floatToBytes (from v1.3)\n  // except with the underflow detection bug fixed for values like 5.8123817E-10f\n  static byte orig_floatToByte(float f) {\n    if (f < 0.0f)                                 // round negatives up to zero\n      f = 0.0f;\n\n    if (f == 0.0f)                                // zero is a special case\n      return 0;\n\n    int bits = Float.floatToIntBits(f);           // parse float into parts\n    int mantissa = (bits & 0xffffff) >> 21;\n    int exponent = (((bits >> 24) & 0x7f) - 63) + 15;\n\n    if (exponent > 31) {                          // overflow: use max value\n      exponent = 31;\n      mantissa = 7;\n    }\n\n    if (exponent < 0 || exponent == 0 && mantissa == 0) { // underflow: use min value\n      exponent = 0;\n      mantissa = 1;\n    }\n\n    return (byte)((exponent << 3) | mantissa);    // pack into a byte\n  }\n\n","sourceOld":"  // original lucene floatToByte\n  static byte orig_floatToByte(float f) {\n    if (f < 0.0f)                                 // round negatives up to zero\n      f = 0.0f;\n\n    if (f == 0.0f)                                // zero is a special case\n      return 0;\n\n    int bits = Float.floatToIntBits(f);           // parse float into parts\n    int mantissa = (bits & 0xffffff) >> 21;\n    int exponent = (((bits >> 24) & 0x7f) - 63) + 15;\n\n    if (exponent > 31) {                          // overflow: use max value\n      exponent = 31;\n      mantissa = 7;\n    }\n\n    if (exponent < 0) {                           // underflow: use min value\n      exponent = 0;\n      mantissa = 1;\n    }\n\n    return (byte)((exponent << 3) | mantissa);    // pack into a byte\n  }\n\n","bugFix":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"692804e172a5810620fac3194db7b7616a21ad3d","date":1298513499,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestSmallFloat#orig_floatToByte(float).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestSmallFloat#orig_floatToByte(float).mjava","sourceNew":"  // This is the original lucene floatToBytes (from v1.3)\n  // except with the underflow detection bug fixed for values like 5.8123817E-10f\n  static byte orig_floatToByte(float f) {\n    if (f < 0.0f)                                 // round negatives up to zero\n      f = 0.0f;\n\n    if (f == 0.0f)                                // zero is a special case\n      return 0;\n\n    int bits = Float.floatToIntBits(f);           // parse float into parts\n    int mantissa = (bits & 0xffffff) >> 21;\n    int exponent = (((bits >> 24) & 0x7f) - 63) + 15;\n\n    if (exponent > 31) {                          // overflow: use max value\n      exponent = 31;\n      mantissa = 7;\n    }\n\n    if (exponent < 0 || exponent == 0 && mantissa == 0) { // underflow: use min value\n      exponent = 0;\n      mantissa = 1;\n    }\n\n    return (byte)((exponent << 3) | mantissa);    // pack into a byte\n  }\n\n","sourceOld":"  // original lucene floatToByte\n  static byte orig_floatToByte(float f) {\n    if (f < 0.0f)                                 // round negatives up to zero\n      f = 0.0f;\n\n    if (f == 0.0f)                                // zero is a special case\n      return 0;\n\n    int bits = Float.floatToIntBits(f);           // parse float into parts\n    int mantissa = (bits & 0xffffff) >> 21;\n    int exponent = (((bits >> 24) & 0x7f) - 63) + 15;\n\n    if (exponent > 31) {                          // overflow: use max value\n      exponent = 31;\n      mantissa = 7;\n    }\n\n    if (exponent < 0) {                           // underflow: use min value\n      exponent = 0;\n      mantissa = 1;\n    }\n\n    return (byte)((exponent << 3) | mantissa);    // pack into a byte\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestSmallFloat#orig_floatToByte(float).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestSmallFloat#orig_floatToByte(float).mjava","sourceNew":"  // This is the original lucene floatToBytes (from v1.3)\n  // except with the underflow detection bug fixed for values like 5.8123817E-10f\n  static byte orig_floatToByte(float f) {\n    if (f < 0.0f)                                 // round negatives up to zero\n      f = 0.0f;\n\n    if (f == 0.0f)                                // zero is a special case\n      return 0;\n\n    int bits = Float.floatToIntBits(f);           // parse float into parts\n    int mantissa = (bits & 0xffffff) >> 21;\n    int exponent = (((bits >> 24) & 0x7f) - 63) + 15;\n\n    if (exponent > 31) {                          // overflow: use max value\n      exponent = 31;\n      mantissa = 7;\n    }\n\n    if (exponent < 0 || exponent == 0 && mantissa == 0) { // underflow: use min value\n      exponent = 0;\n      mantissa = 1;\n    }\n\n    return (byte)((exponent << 3) | mantissa);    // pack into a byte\n  }\n\n","sourceOld":"  // original lucene floatToByte\n  static byte orig_floatToByte(float f) {\n    if (f < 0.0f)                                 // round negatives up to zero\n      f = 0.0f;\n\n    if (f == 0.0f)                                // zero is a special case\n      return 0;\n\n    int bits = Float.floatToIntBits(f);           // parse float into parts\n    int mantissa = (bits & 0xffffff) >> 21;\n    int exponent = (((bits >> 24) & 0x7f) - 63) + 15;\n\n    if (exponent > 31) {                          // overflow: use max value\n      exponent = 31;\n      mantissa = 7;\n    }\n\n    if (exponent < 0) {                           // underflow: use min value\n      exponent = 0;\n      mantissa = 1;\n    }\n\n    return (byte)((exponent << 3) | mantissa);    // pack into a byte\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestSmallFloat#orig_floatToByte(float).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestSmallFloat#orig_floatToByte(float).mjava","sourceNew":"  // This is the original lucene floatToBytes (from v1.3)\n  // except with the underflow detection bug fixed for values like 5.8123817E-10f\n  static byte orig_floatToByte(float f) {\n    if (f < 0.0f)                                 // round negatives up to zero\n      f = 0.0f;\n\n    if (f == 0.0f)                                // zero is a special case\n      return 0;\n\n    int bits = Float.floatToIntBits(f);           // parse float into parts\n    int mantissa = (bits & 0xffffff) >> 21;\n    int exponent = (((bits >> 24) & 0x7f) - 63) + 15;\n\n    if (exponent > 31) {                          // overflow: use max value\n      exponent = 31;\n      mantissa = 7;\n    }\n\n    if (exponent < 0 || exponent == 0 && mantissa == 0) { // underflow: use min value\n      exponent = 0;\n      mantissa = 1;\n    }\n\n    return (byte)((exponent << 3) | mantissa);    // pack into a byte\n  }\n\n","sourceOld":"  // This is the original lucene floatToBytes (from v1.3)\n  // except with the underflow detection bug fixed for values like 5.8123817E-10f\n  static byte orig_floatToByte(float f) {\n    if (f < 0.0f)                                 // round negatives up to zero\n      f = 0.0f;\n\n    if (f == 0.0f)                                // zero is a special case\n      return 0;\n\n    int bits = Float.floatToIntBits(f);           // parse float into parts\n    int mantissa = (bits & 0xffffff) >> 21;\n    int exponent = (((bits >> 24) & 0x7f) - 63) + 15;\n\n    if (exponent > 31) {                          // overflow: use max value\n      exponent = 31;\n      mantissa = 7;\n    }\n\n    if (exponent < 0 || exponent == 0 && mantissa == 0) { // underflow: use min value\n      exponent = 0;\n      mantissa = 1;\n    }\n\n    return (byte)((exponent << 3) | mantissa);    // pack into a byte\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"692804e172a5810620fac3194db7b7616a21ad3d":["9454a6510e2db155fb01faa5c049b06ece95fab9","4c162cf3bb7fd2a150aaeeab80495a0a25bb9aee"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["9454a6510e2db155fb01faa5c049b06ece95fab9","4c162cf3bb7fd2a150aaeeab80495a0a25bb9aee"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4c162cf3bb7fd2a150aaeeab80495a0a25bb9aee"],"4c162cf3bb7fd2a150aaeeab80495a0a25bb9aee":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"692804e172a5810620fac3194db7b7616a21ad3d":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4c162cf3bb7fd2a150aaeeab80495a0a25bb9aee":["692804e172a5810620fac3194db7b7616a21ad3d","d619839baa8ce5503e496b94a9e42ad6f079293f","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["692804e172a5810620fac3194db7b7616a21ad3d","d619839baa8ce5503e496b94a9e42ad6f079293f","4c162cf3bb7fd2a150aaeeab80495a0a25bb9aee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["692804e172a5810620fac3194db7b7616a21ad3d","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}