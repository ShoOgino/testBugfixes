{"path":"solr/core/src/test/org/apache/solr/cloud/AbstractCloudBackupRestoreTestCase#getShardToDocCountMap(CloudSolrClient,DocCollection).mjava","commits":[{"id":"4c623a7f72be34d6c45bee682028c50327d9e4b7","date":1467791293,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AbstractCloudBackupRestoreTestCase#getShardToDocCountMap(CloudSolrClient,DocCollection).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudBackupRestore#getShardToDocCountMap(CloudSolrClient,DocCollection).mjava","sourceNew":"  private Map<String, Integer> getShardToDocCountMap(CloudSolrClient client, DocCollection docCollection) throws SolrServerException, IOException {\n    Map<String,Integer> shardToDocCount = new TreeMap<>();\n    for (Slice slice : docCollection.getActiveSlices()) {\n      String shardName = slice.getName();\n      long docsInShard = client.query(docCollection.getName(), new SolrQuery(\"*:*\").setParam(_ROUTE_, shardName))\n          .getResults().getNumFound();\n      shardToDocCount.put(shardName, (int) docsInShard);\n    }\n    return shardToDocCount;\n  }\n\n","sourceOld":"  private Map<String, Integer> getShardToDocCountMap(CloudSolrClient client, DocCollection docCollection) throws SolrServerException, IOException {\n    Map<String,Integer> shardToDocCount = new TreeMap<>();\n    for (Slice slice : docCollection.getActiveSlices()) {\n      String shardName = slice.getName();\n      long docsInShard = client.query(docCollection.getName(), new SolrQuery(\"*:*\").setParam(_ROUTE_, shardName))\n          .getResults().getNumFound();\n      shardToDocCount.put(shardName, (int) docsInShard);\n    }\n    return shardToDocCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AbstractCloudBackupRestoreTestCase#getShardToDocCountMap(CloudSolrClient,DocCollection).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudBackupRestore#getShardToDocCountMap(CloudSolrClient,DocCollection).mjava","sourceNew":"  private Map<String, Integer> getShardToDocCountMap(CloudSolrClient client, DocCollection docCollection) throws SolrServerException, IOException {\n    Map<String,Integer> shardToDocCount = new TreeMap<>();\n    for (Slice slice : docCollection.getActiveSlices()) {\n      String shardName = slice.getName();\n      long docsInShard = client.query(docCollection.getName(), new SolrQuery(\"*:*\").setParam(_ROUTE_, shardName))\n          .getResults().getNumFound();\n      shardToDocCount.put(shardName, (int) docsInShard);\n    }\n    return shardToDocCount;\n  }\n\n","sourceOld":"  private Map<String, Integer> getShardToDocCountMap(CloudSolrClient client, DocCollection docCollection) throws SolrServerException, IOException {\n    Map<String,Integer> shardToDocCount = new TreeMap<>();\n    for (Slice slice : docCollection.getActiveSlices()) {\n      String shardName = slice.getName();\n      long docsInShard = client.query(docCollection.getName(), new SolrQuery(\"*:*\").setParam(_ROUTE_, shardName))\n          .getResults().getNumFound();\n      shardToDocCount.put(shardName, (int) docsInShard);\n    }\n    return shardToDocCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AbstractCloudBackupRestoreTestCase#getShardToDocCountMap(CloudSolrClient,DocCollection).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AbstractCloudBackupRestoreTestCase#getShardToDocCountMap(CloudSolrClient,DocCollection).mjava","sourceNew":"  private Map<String, Integer> getShardToDocCountMap(CloudSolrClient client, DocCollection docCollection) throws SolrServerException, IOException {\n    Map<String,Integer> shardToDocCount = new TreeMap<>();\n    for (Slice slice : docCollection.getActiveSlices()) {\n      String shardName = slice.getName();\n      try (HttpSolrClient leaderClient = new HttpSolrClient.Builder(slice.getLeader().getCoreUrl()).withHttpClient(client.getHttpClient()).build()) {\n        long docsInShard = leaderClient.query(new SolrQuery(\"*:*\").setParam(\"distrib\", \"false\"))\n            .getResults().getNumFound();\n        shardToDocCount.put(shardName, (int) docsInShard);\n      }\n    }\n    return shardToDocCount;\n  }\n\n","sourceOld":"  private Map<String, Integer> getShardToDocCountMap(CloudSolrClient client, DocCollection docCollection) throws SolrServerException, IOException {\n    Map<String,Integer> shardToDocCount = new TreeMap<>();\n    for (Slice slice : docCollection.getActiveSlices()) {\n      String shardName = slice.getName();\n      long docsInShard = client.query(docCollection.getName(), new SolrQuery(\"*:*\").setParam(_ROUTE_, shardName))\n          .getResults().getNumFound();\n      shardToDocCount.put(shardName, (int) docsInShard);\n    }\n    return shardToDocCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AbstractCloudBackupRestoreTestCase#getShardToDocCountMap(CloudSolrClient,DocCollection).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AbstractCloudBackupRestoreTestCase#getShardToDocCountMap(CloudSolrClient,DocCollection).mjava","sourceNew":"  private Map<String, Integer> getShardToDocCountMap(CloudSolrClient client, DocCollection docCollection) throws SolrServerException, IOException {\n    Map<String,Integer> shardToDocCount = new TreeMap<>();\n    for (Slice slice : docCollection.getActiveSlices()) {\n      String shardName = slice.getName();\n      try (HttpSolrClient leaderClient = new HttpSolrClient.Builder(slice.getLeader().getCoreUrl()).withHttpClient(client.getHttpClient()).build()) {\n        long docsInShard = leaderClient.query(new SolrQuery(\"*:*\").setParam(\"distrib\", \"false\"))\n            .getResults().getNumFound();\n        shardToDocCount.put(shardName, (int) docsInShard);\n      }\n    }\n    return shardToDocCount;\n  }\n\n","sourceOld":"  private Map<String, Integer> getShardToDocCountMap(CloudSolrClient client, DocCollection docCollection) throws SolrServerException, IOException {\n    Map<String,Integer> shardToDocCount = new TreeMap<>();\n    for (Slice slice : docCollection.getActiveSlices()) {\n      String shardName = slice.getName();\n      long docsInShard = client.query(docCollection.getName(), new SolrQuery(\"*:*\").setParam(_ROUTE_, shardName))\n          .getResults().getNumFound();\n      shardToDocCount.put(shardName, (int) docsInShard);\n    }\n    return shardToDocCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/AbstractCloudBackupRestoreTestCase#getShardToDocCountMap(CloudSolrClient,DocCollection).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AbstractCloudBackupRestoreTestCase#getShardToDocCountMap(CloudSolrClient,DocCollection).mjava","sourceNew":"  private Map<String, Integer> getShardToDocCountMap(CloudSolrClient client, DocCollection docCollection) throws SolrServerException, IOException {\n    Map<String,Integer> shardToDocCount = new TreeMap<>();\n    for (Slice slice : docCollection.getActiveSlices()) {\n      String shardName = slice.getName();\n      try (HttpSolrClient leaderClient = new HttpSolrClient.Builder(slice.getLeader().getCoreUrl()).withHttpClient(client.getHttpClient()).build()) {\n        long docsInShard = leaderClient.query(new SolrQuery(\"*:*\").setParam(\"distrib\", \"false\"))\n            .getResults().getNumFound();\n        shardToDocCount.put(shardName, (int) docsInShard);\n      }\n    }\n    return shardToDocCount;\n  }\n\n","sourceOld":"  private Map<String, Integer> getShardToDocCountMap(CloudSolrClient client, DocCollection docCollection) throws SolrServerException, IOException {\n    Map<String,Integer> shardToDocCount = new TreeMap<>();\n    for (Slice slice : docCollection.getActiveSlices()) {\n      String shardName = slice.getName();\n      try (HttpSolrClient leaderClient = new HttpSolrClient.Builder(slice.getLeader().getCoreUrl()).withHttpClient(client.getHttpClient()).build()) {\n        long docsInShard = leaderClient.query(new SolrQuery(\"*:*\").setParam(\"distrib\", \"false\"))\n            .getResults().getNumFound();\n        shardToDocCount.put(shardName, (int) docsInShard);\n      }\n    }\n    return shardToDocCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/AbstractCloudBackupRestoreTestCase#getShardToDocCountMap(CloudSolrClient,DocCollection).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AbstractCloudBackupRestoreTestCase#getShardToDocCountMap(CloudSolrClient,DocCollection).mjava","sourceNew":"  private Map<String, Integer> getShardToDocCountMap(CloudSolrClient client, DocCollection docCollection) throws SolrServerException, IOException {\n    Map<String,Integer> shardToDocCount = new TreeMap<>();\n    for (Slice slice : docCollection.getActiveSlices()) {\n      String shardName = slice.getName();\n      try (HttpSolrClient leaderClient = new HttpSolrClient.Builder(slice.getLeader().getCoreUrl()).withHttpClient(client.getHttpClient()).build()) {\n        long docsInShard = leaderClient.query(new SolrQuery(\"*:*\").setParam(\"distrib\", \"false\"))\n            .getResults().getNumFound();\n        shardToDocCount.put(shardName, (int) docsInShard);\n      }\n    }\n    return shardToDocCount;\n  }\n\n","sourceOld":"  private Map<String, Integer> getShardToDocCountMap(CloudSolrClient client, DocCollection docCollection) throws SolrServerException, IOException {\n    Map<String,Integer> shardToDocCount = new TreeMap<>();\n    for (Slice slice : docCollection.getActiveSlices()) {\n      String shardName = slice.getName();\n      try (HttpSolrClient leaderClient = new HttpSolrClient.Builder(slice.getLeader().getCoreUrl()).withHttpClient(client.getHttpClient()).build()) {\n        long docsInShard = leaderClient.query(new SolrQuery(\"*:*\").setParam(\"distrib\", \"false\"))\n            .getResults().getNumFound();\n        shardToDocCount.put(shardName, (int) docsInShard);\n      }\n    }\n    return shardToDocCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c623a7f72be34d6c45bee682028c50327d9e4b7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b94236357aaa22b76c10629851fe4e376e0cea82":["61c45e99cf6676da48f19d7511c73712ad39402b","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["4c623a7f72be34d6c45bee682028c50327d9e4b7","61c45e99cf6676da48f19d7511c73712ad39402b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["4c623a7f72be34d6c45bee682028c50327d9e4b7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["61c45e99cf6676da48f19d7511c73712ad39402b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4c623a7f72be34d6c45bee682028c50327d9e4b7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"4c623a7f72be34d6c45bee682028c50327d9e4b7":["e9017cf144952056066919f1ebc7897ff9bd71b1","61c45e99cf6676da48f19d7511c73712ad39402b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"61c45e99cf6676da48f19d7511c73712ad39402b":["b94236357aaa22b76c10629851fe4e376e0cea82","e9017cf144952056066919f1ebc7897ff9bd71b1","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4c623a7f72be34d6c45bee682028c50327d9e4b7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}