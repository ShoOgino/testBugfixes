{"path":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertSolrInputDocumentEquals(Object,Object).mjava","commits":[{"id":"6071e662e00f61ccd046fe73a31ac6e57aaca116","date":1394797480,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertSolrInputDocumentEquals(Object,Object).mjava","pathOld":"/dev/null","sourceNew":"  public boolean assertSolrInputDocumentEquals(Object expected, Object actual) {\n\n    if (!(expected instanceof SolrInputDocument) || !(actual instanceof SolrInputDocument)) {\n      return false;\n    }\n\n    if (expected == actual) {\n      return true;\n    }\n\n    SolrInputDocument sdoc1 = (SolrInputDocument) expected;\n    SolrInputDocument sdoc2 = (SolrInputDocument) actual;\n    if (Float.compare(sdoc1.getDocumentBoost(), sdoc2.getDocumentBoost()) != 0) {\n      return false;\n    }\n\n    if(sdoc1.getFieldNames().size() != sdoc2.getFieldNames().size()) {\n      return false;\n    }\n\n    Iterator<String> iter1 = sdoc1.getFieldNames().iterator();\n    Iterator<String> iter2 = sdoc2.getFieldNames().iterator();\n\n    if(iter1.hasNext()) {\n      String key1 = iter1.next();\n      String key2 = iter2.next();\n\n      Object val1 = sdoc1.getFieldValues(key1);\n      Object val2 = sdoc2.getFieldValues(key2);\n\n      if(!key1.equals(key2) || !val1.equals(val2)) {\n        return false;\n      }\n    }\n    if(sdoc1.getChildDocuments() == null && sdoc2.getChildDocuments() == null) {\n      return true;\n    }\n    if(sdoc1.getChildDocuments() == null || sdoc2.getChildDocuments() == null) {\n      return false;\n    } else if(sdoc1.getChildDocuments().size() != sdoc2.getChildDocuments().size()) {\n      return false;\n    } else {\n      Iterator<SolrInputDocument> childDocsIter1 = sdoc1.getChildDocuments().iterator();\n      Iterator<SolrInputDocument> childDocsIter2 = sdoc2.getChildDocuments().iterator();\n      while(childDocsIter1.hasNext()) {\n        if(!assertSolrInputDocumentEquals(childDocsIter1.next(), childDocsIter2.next())) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f50fec5dadda9f0c72e0e8fe342b6438178a459","date":1402575501,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#compareSolrInputDocument(Object,Object).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertSolrInputDocumentEquals(Object,Object).mjava","sourceNew":"  public boolean compareSolrInputDocument(Object expected, Object actual) {\n\n    if (!(expected instanceof SolrInputDocument) || !(actual instanceof SolrInputDocument)) {\n      return false;\n    }\n\n    if (expected == actual) {\n      return true;\n    }\n\n    SolrInputDocument sdoc1 = (SolrInputDocument) expected;\n    SolrInputDocument sdoc2 = (SolrInputDocument) actual;\n    if (Float.compare(sdoc1.getDocumentBoost(), sdoc2.getDocumentBoost()) != 0) {\n      return false;\n    }\n\n    if(sdoc1.getFieldNames().size() != sdoc2.getFieldNames().size()) {\n      return false;\n    }\n\n    Iterator<String> iter1 = sdoc1.getFieldNames().iterator();\n    Iterator<String> iter2 = sdoc2.getFieldNames().iterator();\n\n    if(iter1.hasNext()) {\n      String key1 = iter1.next();\n      String key2 = iter2.next();\n\n      Object val1 = sdoc1.getFieldValues(key1);\n      Object val2 = sdoc2.getFieldValues(key2);\n\n      if(!key1.equals(key2) || !val1.equals(val2)) {\n        return false;\n      }\n    }\n    if(sdoc1.getChildDocuments() == null && sdoc2.getChildDocuments() == null) {\n      return true;\n    }\n    if(sdoc1.getChildDocuments() == null || sdoc2.getChildDocuments() == null) {\n      return false;\n    } else if(sdoc1.getChildDocuments().size() != sdoc2.getChildDocuments().size()) {\n      return false;\n    } else {\n      Iterator<SolrInputDocument> childDocsIter1 = sdoc1.getChildDocuments().iterator();\n      Iterator<SolrInputDocument> childDocsIter2 = sdoc2.getChildDocuments().iterator();\n      while(childDocsIter1.hasNext()) {\n        if(!compareSolrInputDocument(childDocsIter1.next(), childDocsIter2.next())) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n","sourceOld":"  public boolean assertSolrInputDocumentEquals(Object expected, Object actual) {\n\n    if (!(expected instanceof SolrInputDocument) || !(actual instanceof SolrInputDocument)) {\n      return false;\n    }\n\n    if (expected == actual) {\n      return true;\n    }\n\n    SolrInputDocument sdoc1 = (SolrInputDocument) expected;\n    SolrInputDocument sdoc2 = (SolrInputDocument) actual;\n    if (Float.compare(sdoc1.getDocumentBoost(), sdoc2.getDocumentBoost()) != 0) {\n      return false;\n    }\n\n    if(sdoc1.getFieldNames().size() != sdoc2.getFieldNames().size()) {\n      return false;\n    }\n\n    Iterator<String> iter1 = sdoc1.getFieldNames().iterator();\n    Iterator<String> iter2 = sdoc2.getFieldNames().iterator();\n\n    if(iter1.hasNext()) {\n      String key1 = iter1.next();\n      String key2 = iter2.next();\n\n      Object val1 = sdoc1.getFieldValues(key1);\n      Object val2 = sdoc2.getFieldValues(key2);\n\n      if(!key1.equals(key2) || !val1.equals(val2)) {\n        return false;\n      }\n    }\n    if(sdoc1.getChildDocuments() == null && sdoc2.getChildDocuments() == null) {\n      return true;\n    }\n    if(sdoc1.getChildDocuments() == null || sdoc2.getChildDocuments() == null) {\n      return false;\n    } else if(sdoc1.getChildDocuments().size() != sdoc2.getChildDocuments().size()) {\n      return false;\n    } else {\n      Iterator<SolrInputDocument> childDocsIter1 = sdoc1.getChildDocuments().iterator();\n      Iterator<SolrInputDocument> childDocsIter2 = sdoc2.getChildDocuments().iterator();\n      while(childDocsIter1.hasNext()) {\n        if(!assertSolrInputDocumentEquals(childDocsIter1.next(), childDocsIter2.next())) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#compareSolrInputDocument(Object,Object).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertSolrInputDocumentEquals(Object,Object).mjava","sourceNew":"  public boolean compareSolrInputDocument(Object expected, Object actual) {\n\n    if (!(expected instanceof SolrInputDocument) || !(actual instanceof SolrInputDocument)) {\n      return false;\n    }\n\n    if (expected == actual) {\n      return true;\n    }\n\n    SolrInputDocument sdoc1 = (SolrInputDocument) expected;\n    SolrInputDocument sdoc2 = (SolrInputDocument) actual;\n    if (Float.compare(sdoc1.getDocumentBoost(), sdoc2.getDocumentBoost()) != 0) {\n      return false;\n    }\n\n    if(sdoc1.getFieldNames().size() != sdoc2.getFieldNames().size()) {\n      return false;\n    }\n\n    Iterator<String> iter1 = sdoc1.getFieldNames().iterator();\n    Iterator<String> iter2 = sdoc2.getFieldNames().iterator();\n\n    if(iter1.hasNext()) {\n      String key1 = iter1.next();\n      String key2 = iter2.next();\n\n      Object val1 = sdoc1.getFieldValues(key1);\n      Object val2 = sdoc2.getFieldValues(key2);\n\n      if(!key1.equals(key2) || !val1.equals(val2)) {\n        return false;\n      }\n    }\n    if(sdoc1.getChildDocuments() == null && sdoc2.getChildDocuments() == null) {\n      return true;\n    }\n    if(sdoc1.getChildDocuments() == null || sdoc2.getChildDocuments() == null) {\n      return false;\n    } else if(sdoc1.getChildDocuments().size() != sdoc2.getChildDocuments().size()) {\n      return false;\n    } else {\n      Iterator<SolrInputDocument> childDocsIter1 = sdoc1.getChildDocuments().iterator();\n      Iterator<SolrInputDocument> childDocsIter2 = sdoc2.getChildDocuments().iterator();\n      while(childDocsIter1.hasNext()) {\n        if(!compareSolrInputDocument(childDocsIter1.next(), childDocsIter2.next())) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n","sourceOld":"  public boolean assertSolrInputDocumentEquals(Object expected, Object actual) {\n\n    if (!(expected instanceof SolrInputDocument) || !(actual instanceof SolrInputDocument)) {\n      return false;\n    }\n\n    if (expected == actual) {\n      return true;\n    }\n\n    SolrInputDocument sdoc1 = (SolrInputDocument) expected;\n    SolrInputDocument sdoc2 = (SolrInputDocument) actual;\n    if (Float.compare(sdoc1.getDocumentBoost(), sdoc2.getDocumentBoost()) != 0) {\n      return false;\n    }\n\n    if(sdoc1.getFieldNames().size() != sdoc2.getFieldNames().size()) {\n      return false;\n    }\n\n    Iterator<String> iter1 = sdoc1.getFieldNames().iterator();\n    Iterator<String> iter2 = sdoc2.getFieldNames().iterator();\n\n    if(iter1.hasNext()) {\n      String key1 = iter1.next();\n      String key2 = iter2.next();\n\n      Object val1 = sdoc1.getFieldValues(key1);\n      Object val2 = sdoc2.getFieldValues(key2);\n\n      if(!key1.equals(key2) || !val1.equals(val2)) {\n        return false;\n      }\n    }\n    if(sdoc1.getChildDocuments() == null && sdoc2.getChildDocuments() == null) {\n      return true;\n    }\n    if(sdoc1.getChildDocuments() == null || sdoc2.getChildDocuments() == null) {\n      return false;\n    } else if(sdoc1.getChildDocuments().size() != sdoc2.getChildDocuments().size()) {\n      return false;\n    } else {\n      Iterator<SolrInputDocument> childDocsIter1 = sdoc1.getChildDocuments().iterator();\n      Iterator<SolrInputDocument> childDocsIter2 = sdoc2.getChildDocuments().iterator();\n      while(childDocsIter1.hasNext()) {\n        if(!assertSolrInputDocumentEquals(childDocsIter1.next(), childDocsIter2.next())) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6071e662e00f61ccd046fe73a31ac6e57aaca116":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3f50fec5dadda9f0c72e0e8fe342b6438178a459":["6071e662e00f61ccd046fe73a31ac6e57aaca116"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["6071e662e00f61ccd046fe73a31ac6e57aaca116","3f50fec5dadda9f0c72e0e8fe342b6438178a459"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f50fec5dadda9f0c72e0e8fe342b6438178a459"]},"commit2Childs":{"6071e662e00f61ccd046fe73a31ac6e57aaca116":["3f50fec5dadda9f0c72e0e8fe342b6438178a459","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6071e662e00f61ccd046fe73a31ac6e57aaca116"],"3f50fec5dadda9f0c72e0e8fe342b6438178a459":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}