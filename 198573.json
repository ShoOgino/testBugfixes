{"path":"lucene/core/src/test/org/apache/lucene/util/StressRamUsageEstimator#testSimpleByteArrays().mjava","commits":[{"id":"dd6c9e9b1251473f465b0443b56046b2658402da","date":1332082750,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/StressRamUsageEstimator#testSimpleByteArrays().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimpleByteArrays() {\n    MemoryMXBean memoryMXBean = ManagementFactory.getMemoryMXBean();\n\n    Object [][] all = new Object [0][];\n    try {\n      while (true) {\n        // Check the current memory consumption and provide the estimate.\n        causeGc();\n        MemoryUsage mu = memoryMXBean.getHeapMemoryUsage();\n        long estimated = shallowSizeOf(all);\n        if (estimated > 50 * RamUsageEstimator.ONE_MB) {\n          break;\n        }\n\n        System.out.println(String.format(Locale.ENGLISH, \"%10s\\t%10s\\t%10s\", \n            RamUsageEstimator.humanReadableUnits(mu.getUsed()),\n            RamUsageEstimator.humanReadableUnits(mu.getMax()), \n            RamUsageEstimator.humanReadableUnits(estimated)));\n\n        // Make another batch of objects.\n        Object[] seg =  new Object[10000];\n        all = Arrays.copyOf(all, all.length + 1);\n        all[all.length - 1] = seg;\n        for (int i = 0; i < seg.length; i++) {\n          seg[i] = new byte[random.nextInt(7)];\n        }\n      }\n    } catch (OutOfMemoryError e) {\n      // Release and quit.\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/StressRamUsageEstimator#testSimpleByteArrays().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/StressRamUsageEstimator#testSimpleByteArrays().mjava","sourceNew":"  public void testSimpleByteArrays() {\n    MemoryMXBean memoryMXBean = ManagementFactory.getMemoryMXBean();\n\n    Object [][] all = new Object [0][];\n    try {\n      while (true) {\n        // Check the current memory consumption and provide the estimate.\n        causeGc();\n        MemoryUsage mu = memoryMXBean.getHeapMemoryUsage();\n        long estimated = shallowSizeOf(all);\n        if (estimated > 50 * RamUsageEstimator.ONE_MB) {\n          break;\n        }\n\n        System.out.println(String.format(Locale.ENGLISH, \"%10s\\t%10s\\t%10s\", \n            RamUsageEstimator.humanReadableUnits(mu.getUsed()),\n            RamUsageEstimator.humanReadableUnits(mu.getMax()), \n            RamUsageEstimator.humanReadableUnits(estimated)));\n\n        // Make another batch of objects.\n        Object[] seg =  new Object[10000];\n        all = Arrays.copyOf(all, all.length + 1);\n        all[all.length - 1] = seg;\n        for (int i = 0; i < seg.length; i++) {\n          seg[i] = new byte[random().nextInt(7)];\n        }\n      }\n    } catch (OutOfMemoryError e) {\n      // Release and quit.\n    }\n  }\n\n","sourceOld":"  public void testSimpleByteArrays() {\n    MemoryMXBean memoryMXBean = ManagementFactory.getMemoryMXBean();\n\n    Object [][] all = new Object [0][];\n    try {\n      while (true) {\n        // Check the current memory consumption and provide the estimate.\n        causeGc();\n        MemoryUsage mu = memoryMXBean.getHeapMemoryUsage();\n        long estimated = shallowSizeOf(all);\n        if (estimated > 50 * RamUsageEstimator.ONE_MB) {\n          break;\n        }\n\n        System.out.println(String.format(Locale.ENGLISH, \"%10s\\t%10s\\t%10s\", \n            RamUsageEstimator.humanReadableUnits(mu.getUsed()),\n            RamUsageEstimator.humanReadableUnits(mu.getMax()), \n            RamUsageEstimator.humanReadableUnits(estimated)));\n\n        // Make another batch of objects.\n        Object[] seg =  new Object[10000];\n        all = Arrays.copyOf(all, all.length + 1);\n        all[all.length - 1] = seg;\n        for (int i = 0; i < seg.length; i++) {\n          seg[i] = new byte[random.nextInt(7)];\n        }\n      }\n    } catch (OutOfMemoryError e) {\n      // Release and quit.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279c7cd47f17e1e8b674a3741ff5f040bc680be","date":1341675760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/StressRamUsageEstimator#testSimpleByteArrays().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/StressRamUsageEstimator#testSimpleByteArrays().mjava","sourceNew":"  public void testSimpleByteArrays() {\n    MemoryMXBean memoryMXBean = ManagementFactory.getMemoryMXBean();\n\n    Object [][] all = new Object [0][];\n    try {\n      while (true) {\n        // Check the current memory consumption and provide the estimate.\n        causeGc();\n        MemoryUsage mu = memoryMXBean.getHeapMemoryUsage();\n        long estimated = shallowSizeOf(all);\n        if (estimated > 50 * RamUsageEstimator.ONE_MB) {\n          break;\n        }\n\n        System.out.println(String.format(Locale.ROOT, \"%10s\\t%10s\\t%10s\", \n            RamUsageEstimator.humanReadableUnits(mu.getUsed()),\n            RamUsageEstimator.humanReadableUnits(mu.getMax()), \n            RamUsageEstimator.humanReadableUnits(estimated)));\n\n        // Make another batch of objects.\n        Object[] seg =  new Object[10000];\n        all = Arrays.copyOf(all, all.length + 1);\n        all[all.length - 1] = seg;\n        for (int i = 0; i < seg.length; i++) {\n          seg[i] = new byte[random().nextInt(7)];\n        }\n      }\n    } catch (OutOfMemoryError e) {\n      // Release and quit.\n    }\n  }\n\n","sourceOld":"  public void testSimpleByteArrays() {\n    MemoryMXBean memoryMXBean = ManagementFactory.getMemoryMXBean();\n\n    Object [][] all = new Object [0][];\n    try {\n      while (true) {\n        // Check the current memory consumption and provide the estimate.\n        causeGc();\n        MemoryUsage mu = memoryMXBean.getHeapMemoryUsage();\n        long estimated = shallowSizeOf(all);\n        if (estimated > 50 * RamUsageEstimator.ONE_MB) {\n          break;\n        }\n\n        System.out.println(String.format(Locale.ENGLISH, \"%10s\\t%10s\\t%10s\", \n            RamUsageEstimator.humanReadableUnits(mu.getUsed()),\n            RamUsageEstimator.humanReadableUnits(mu.getMax()), \n            RamUsageEstimator.humanReadableUnits(estimated)));\n\n        // Make another batch of objects.\n        Object[] seg =  new Object[10000];\n        all = Arrays.copyOf(all, all.length + 1);\n        all[all.length - 1] = seg;\n        for (int i = 0; i < seg.length; i++) {\n          seg[i] = new byte[random().nextInt(7)];\n        }\n      }\n    } catch (OutOfMemoryError e) {\n      // Release and quit.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/StressRamUsageEstimator#testSimpleByteArrays().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/StressRamUsageEstimator#testSimpleByteArrays().mjava","sourceNew":"  public void testSimpleByteArrays() {\n    MemoryMXBean memoryMXBean = ManagementFactory.getMemoryMXBean();\n\n    Object [][] all = new Object [0][];\n    try {\n      while (true) {\n        // Check the current memory consumption and provide the estimate.\n        causeGc();\n        MemoryUsage mu = memoryMXBean.getHeapMemoryUsage();\n        long estimated = shallowSizeOf(all);\n        if (estimated > 50 * RamUsageEstimator.ONE_MB) {\n          break;\n        }\n\n        System.out.println(String.format(Locale.ROOT, \"%10s\\t%10s\\t%10s\", \n            RamUsageEstimator.humanReadableUnits(mu.getUsed()),\n            RamUsageEstimator.humanReadableUnits(mu.getMax()), \n            RamUsageEstimator.humanReadableUnits(estimated)));\n\n        // Make another batch of objects.\n        Object[] seg =  new Object[10000];\n        all = Arrays.copyOf(all, all.length + 1);\n        all[all.length - 1] = seg;\n        for (int i = 0; i < seg.length; i++) {\n          seg[i] = new byte[random().nextInt(7)];\n        }\n      }\n    } catch (OutOfMemoryError e) {\n      // Release and quit.\n    }\n  }\n\n","sourceOld":"  public void testSimpleByteArrays() {\n    MemoryMXBean memoryMXBean = ManagementFactory.getMemoryMXBean();\n\n    Object [][] all = new Object [0][];\n    try {\n      while (true) {\n        // Check the current memory consumption and provide the estimate.\n        causeGc();\n        MemoryUsage mu = memoryMXBean.getHeapMemoryUsage();\n        long estimated = shallowSizeOf(all);\n        if (estimated > 50 * RamUsageEstimator.ONE_MB) {\n          break;\n        }\n\n        System.out.println(String.format(Locale.ENGLISH, \"%10s\\t%10s\\t%10s\", \n            RamUsageEstimator.humanReadableUnits(mu.getUsed()),\n            RamUsageEstimator.humanReadableUnits(mu.getMax()), \n            RamUsageEstimator.humanReadableUnits(estimated)));\n\n        // Make another batch of objects.\n        Object[] seg =  new Object[10000];\n        all = Arrays.copyOf(all, all.length + 1);\n        all[all.length - 1] = seg;\n        for (int i = 0; i < seg.length; i++) {\n          seg[i] = new byte[random().nextInt(7)];\n        }\n      }\n    } catch (OutOfMemoryError e) {\n      // Release and quit.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/StressRamUsageEstimator#testSimpleByteArrays().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/StressRamUsageEstimator#testSimpleByteArrays().mjava","sourceNew":"  public void testSimpleByteArrays() {\n    MemoryMXBean memoryMXBean = ManagementFactory.getMemoryMXBean();\n\n    Object [][] all = new Object [0][];\n    try {\n      while (true) {\n        // Check the current memory consumption and provide the estimate.\n        causeGc();\n        MemoryUsage mu = memoryMXBean.getHeapMemoryUsage();\n        long estimated = shallowSizeOf(all);\n        if (estimated > 50 * RamUsageEstimator.ONE_MB) {\n          break;\n        }\n\n        System.out.println(String.format(Locale.ROOT, \"%10s\\t%10s\\t%10s\", \n            RamUsageEstimator.humanReadableUnits(mu.getUsed()),\n            RamUsageEstimator.humanReadableUnits(mu.getMax()), \n            RamUsageEstimator.humanReadableUnits(estimated)));\n\n        // Make another batch of objects.\n        Object[] seg =  new Object[10000];\n        all = Arrays.copyOf(all, all.length + 1);\n        all[all.length - 1] = seg;\n        for (int i = 0; i < seg.length; i++) {\n          seg[i] = new byte[random().nextInt(7)];\n        }\n      }\n    } catch (OutOfMemoryError e) {\n      // Release and quit.\n    }\n  }\n\n","sourceOld":"  public void testSimpleByteArrays() {\n    MemoryMXBean memoryMXBean = ManagementFactory.getMemoryMXBean();\n\n    Object [][] all = new Object [0][];\n    try {\n      while (true) {\n        // Check the current memory consumption and provide the estimate.\n        causeGc();\n        MemoryUsage mu = memoryMXBean.getHeapMemoryUsage();\n        long estimated = shallowSizeOf(all);\n        if (estimated > 50 * RamUsageEstimator.ONE_MB) {\n          break;\n        }\n\n        System.out.println(String.format(Locale.ENGLISH, \"%10s\\t%10s\\t%10s\", \n            RamUsageEstimator.humanReadableUnits(mu.getUsed()),\n            RamUsageEstimator.humanReadableUnits(mu.getMax()), \n            RamUsageEstimator.humanReadableUnits(estimated)));\n\n        // Make another batch of objects.\n        Object[] seg =  new Object[10000];\n        all = Arrays.copyOf(all, all.length + 1);\n        all[all.length - 1] = seg;\n        for (int i = 0; i < seg.length; i++) {\n          seg[i] = new byte[random().nextInt(7)];\n        }\n      }\n    } catch (OutOfMemoryError e) {\n      // Release and quit.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/StressRamUsageEstimator#testSimpleByteArrays().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/StressRamUsageEstimator#testSimpleByteArrays().mjava","sourceNew":"  public void testSimpleByteArrays() {\n    MemoryMXBean memoryMXBean = ManagementFactory.getMemoryMXBean();\n\n    Object [][] all = new Object [0][];\n    try {\n      while (true) {\n        // Check the current memory consumption and provide the estimate.\n        causeGc();\n        MemoryUsage mu = memoryMXBean.getHeapMemoryUsage();\n        long estimated = shallowSizeOf(all);\n        if (estimated > 50 * RamUsageEstimator.ONE_MB) {\n          break;\n        }\n\n        System.out.println(String.format(Locale.ROOT, \"%10s\\t%10s\\t%10s\", \n            RamUsageEstimator.humanReadableUnits(mu.getUsed()),\n            RamUsageEstimator.humanReadableUnits(mu.getMax()), \n            RamUsageEstimator.humanReadableUnits(estimated)));\n\n        // Make another batch of objects.\n        Object[] seg =  new Object[10000];\n        all = Arrays.copyOf(all, all.length + 1);\n        all[all.length - 1] = seg;\n        for (int i = 0; i < seg.length; i++) {\n          seg[i] = new byte[random().nextInt(7)];\n        }\n      }\n    } catch (OutOfMemoryError e) {\n      // Release and quit.\n    }\n  }\n\n","sourceOld":"  public void testSimpleByteArrays() {\n    MemoryMXBean memoryMXBean = ManagementFactory.getMemoryMXBean();\n\n    Object [][] all = new Object [0][];\n    try {\n      while (true) {\n        // Check the current memory consumption and provide the estimate.\n        causeGc();\n        MemoryUsage mu = memoryMXBean.getHeapMemoryUsage();\n        long estimated = shallowSizeOf(all);\n        if (estimated > 50 * RamUsageEstimator.ONE_MB) {\n          break;\n        }\n\n        System.out.println(String.format(Locale.ENGLISH, \"%10s\\t%10s\\t%10s\", \n            RamUsageEstimator.humanReadableUnits(mu.getUsed()),\n            RamUsageEstimator.humanReadableUnits(mu.getMax()), \n            RamUsageEstimator.humanReadableUnits(estimated)));\n\n        // Make another batch of objects.\n        Object[] seg =  new Object[10000];\n        all = Arrays.copyOf(all, all.length + 1);\n        all[all.length - 1] = seg;\n        for (int i = 0; i < seg.length; i++) {\n          seg[i] = new byte[random().nextInt(7)];\n        }\n      }\n    } catch (OutOfMemoryError e) {\n      // Release and quit.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01578325020f17ab9d0ae59f122d17f90c5fecbc","date":1423765178,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/StressRamUsageEstimator#testSimpleByteArrays().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/StressRamUsageEstimator#testSimpleByteArrays().mjava","sourceNew":"  public void testSimpleByteArrays() {\n    Object [][] all = new Object [0][];\n    try {\n      while (true) {\n        // Check the current memory consumption and provide the estimate.\n        System.gc();\n        long estimated = shallowSizeOf(all);\n        if (estimated > 50 * RamUsageEstimator.ONE_MB) {\n          break;\n        }\n\n        // Make another batch of objects.\n        Object[] seg =  new Object[10000];\n        all = Arrays.copyOf(all, all.length + 1);\n        all[all.length - 1] = seg;\n        for (int i = 0; i < seg.length; i++) {\n          seg[i] = new byte[random().nextInt(7)];\n        }\n      }\n    } catch (OutOfMemoryError e) {\n      // Release and quit.\n    }\n  }\n\n","sourceOld":"  public void testSimpleByteArrays() {\n    MemoryMXBean memoryMXBean = ManagementFactory.getMemoryMXBean();\n\n    Object [][] all = new Object [0][];\n    try {\n      while (true) {\n        // Check the current memory consumption and provide the estimate.\n        causeGc();\n        MemoryUsage mu = memoryMXBean.getHeapMemoryUsage();\n        long estimated = shallowSizeOf(all);\n        if (estimated > 50 * RamUsageEstimator.ONE_MB) {\n          break;\n        }\n\n        System.out.println(String.format(Locale.ROOT, \"%10s\\t%10s\\t%10s\", \n            RamUsageEstimator.humanReadableUnits(mu.getUsed()),\n            RamUsageEstimator.humanReadableUnits(mu.getMax()), \n            RamUsageEstimator.humanReadableUnits(estimated)));\n\n        // Make another batch of objects.\n        Object[] seg =  new Object[10000];\n        all = Arrays.copyOf(all, all.length + 1);\n        all[all.length - 1] = seg;\n        for (int i = 0; i < seg.length; i++) {\n          seg[i] = new byte[random().nextInt(7)];\n        }\n      }\n    } catch (OutOfMemoryError e) {\n      // Release and quit.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9798d0818e7a880546802b509792d3f3d57babd2","date":1528358901,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/StressRamUsageEstimator#testSimpleByteArrays().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/StressRamUsageEstimator#testSimpleByteArrays().mjava","sourceNew":"  public void testSimpleByteArrays() {\n    Object [][] all = new Object [0][];\n    try {\n      while (true) {\n        // Check the current memory consumption and provide the estimate.\n        System.gc();\n        long estimated = shallowSizeOf(all);\n        if (estimated > 50 * RamUsageEstimator.ONE_MB) {\n          break;\n        }\n\n        // Make another batch of objects.\n        Object[] seg =  new Object[10000];\n        all = ArrayUtil.growExact(all, all.length + 1);\n        all[all.length - 1] = seg;\n        for (int i = 0; i < seg.length; i++) {\n          seg[i] = new byte[random().nextInt(7)];\n        }\n      }\n    } catch (OutOfMemoryError e) {\n      // Release and quit.\n    }\n  }\n\n","sourceOld":"  public void testSimpleByteArrays() {\n    Object [][] all = new Object [0][];\n    try {\n      while (true) {\n        // Check the current memory consumption and provide the estimate.\n        System.gc();\n        long estimated = shallowSizeOf(all);\n        if (estimated > 50 * RamUsageEstimator.ONE_MB) {\n          break;\n        }\n\n        // Make another batch of objects.\n        Object[] seg =  new Object[10000];\n        all = Arrays.copyOf(all, all.length + 1);\n        all[all.length - 1] = seg;\n        for (int i = 0; i < seg.length; i++) {\n          seg[i] = new byte[random().nextInt(7)];\n        }\n      }\n    } catch (OutOfMemoryError e) {\n      // Release and quit.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/StressRamUsageEstimator#testSimpleByteArrays().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/StressRamUsageEstimator#testSimpleByteArrays().mjava","sourceNew":"  public void testSimpleByteArrays() {\n    Object [][] all = new Object [0][];\n    try {\n      while (true) {\n        // Check the current memory consumption and provide the estimate.\n        System.gc();\n        long estimated = shallowSizeOf(all);\n        if (estimated > 50 * RamUsageEstimator.ONE_MB) {\n          break;\n        }\n\n        // Make another batch of objects.\n        Object[] seg =  new Object[10000];\n        all = ArrayUtil.growExact(all, all.length + 1);\n        all[all.length - 1] = seg;\n        for (int i = 0; i < seg.length; i++) {\n          seg[i] = new byte[random().nextInt(7)];\n        }\n      }\n    } catch (OutOfMemoryError e) {\n      // Release and quit.\n    }\n  }\n\n","sourceOld":"  public void testSimpleByteArrays() {\n    Object [][] all = new Object [0][];\n    try {\n      while (true) {\n        // Check the current memory consumption and provide the estimate.\n        System.gc();\n        long estimated = shallowSizeOf(all);\n        if (estimated > 50 * RamUsageEstimator.ONE_MB) {\n          break;\n        }\n\n        // Make another batch of objects.\n        Object[] seg =  new Object[10000];\n        all = Arrays.copyOf(all, all.length + 1);\n        all[all.length - 1] = seg;\n        for (int i = 0; i < seg.length; i++) {\n          seg[i] = new byte[random().nextInt(7)];\n        }\n      }\n    } catch (OutOfMemoryError e) {\n      // Release and quit.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/StressRamUsageEstimator#testSimpleByteArrays().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/StressRamUsageEstimator#testSimpleByteArrays().mjava","sourceNew":"  public void testSimpleByteArrays() {\n    Object [][] all = new Object [0][];\n    try {\n      while (true) {\n        // Check the current memory consumption and provide the estimate.\n        System.gc();\n        long estimated = shallowSizeOf(all);\n        if (estimated > 50 * RamUsageEstimator.ONE_MB) {\n          break;\n        }\n\n        // Make another batch of objects.\n        Object[] seg =  new Object[10000];\n        all = ArrayUtil.growExact(all, all.length + 1);\n        all[all.length - 1] = seg;\n        for (int i = 0; i < seg.length; i++) {\n          seg[i] = new byte[random().nextInt(7)];\n        }\n      }\n    } catch (OutOfMemoryError e) {\n      // Release and quit.\n    }\n  }\n\n","sourceOld":"  public void testSimpleByteArrays() {\n    Object [][] all = new Object [0][];\n    try {\n      while (true) {\n        // Check the current memory consumption and provide the estimate.\n        System.gc();\n        long estimated = shallowSizeOf(all);\n        if (estimated > 50 * RamUsageEstimator.ONE_MB) {\n          break;\n        }\n\n        // Make another batch of objects.\n        Object[] seg =  new Object[10000];\n        all = Arrays.copyOf(all, all.length + 1);\n        all[all.length - 1] = seg;\n        for (int i = 0; i < seg.length; i++) {\n          seg[i] = new byte[random().nextInt(7)];\n        }\n      }\n    } catch (OutOfMemoryError e) {\n      // Release and quit.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c7ffceea3e516d0dbccfc91acb4ccf856cba19a","date":1579706384,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/StressRamUsageEstimator#testSimpleByteArrays().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/StressRamUsageEstimator#testSimpleByteArrays().mjava","sourceNew":"  @Nightly\n  public void testSimpleByteArrays() {\n    Object [][] all = new Object [0][];\n    try {\n      while (true) {\n        // Check the current memory consumption and provide the estimate.\n        System.gc();\n        long estimated = shallowSizeOf(all);\n        if (estimated > 50 * RamUsageEstimator.ONE_MB) {\n          break;\n        }\n\n        // Make another batch of objects.\n        Object[] seg =  new Object[10000];\n        all = ArrayUtil.growExact(all, all.length + 1);\n        all[all.length - 1] = seg;\n        for (int i = 0; i < seg.length; i++) {\n          seg[i] = new byte[random().nextInt(7)];\n        }\n      }\n    } catch (OutOfMemoryError e) {\n      // Release and quit.\n    }\n  }\n\n","sourceOld":"  public void testSimpleByteArrays() {\n    Object [][] all = new Object [0][];\n    try {\n      while (true) {\n        // Check the current memory consumption and provide the estimate.\n        System.gc();\n        long estimated = shallowSizeOf(all);\n        if (estimated > 50 * RamUsageEstimator.ONE_MB) {\n          break;\n        }\n\n        // Make another batch of objects.\n        Object[] seg =  new Object[10000];\n        all = ArrayUtil.growExact(all, all.length + 1);\n        all[all.length - 1] = seg;\n        for (int i = 0; i < seg.length; i++) {\n          seg[i] = new byte[random().nextInt(7)];\n        }\n      }\n    } catch (OutOfMemoryError e) {\n      // Release and quit.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"01578325020f17ab9d0ae59f122d17f90c5fecbc":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2acf500f78aa12b92e371fd89c719291986b6b90":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","9279c7cd47f17e1e8b674a3741ff5f040bc680be"],"46d8ada1fff8d18cb197c38c7983225162599948":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","2acf500f78aa12b92e371fd89c719291986b6b90"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["01578325020f17ab9d0ae59f122d17f90c5fecbc","9798d0818e7a880546802b509792d3f3d57babd2"],"dd6c9e9b1251473f465b0443b56046b2658402da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["dd6c9e9b1251473f465b0443b56046b2658402da"],"9798d0818e7a880546802b509792d3f3d57babd2":["01578325020f17ab9d0ae59f122d17f90c5fecbc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c7ffceea3e516d0dbccfc91acb4ccf856cba19a"],"5c7ffceea3e516d0dbccfc91acb4ccf856cba19a":["9798d0818e7a880546802b509792d3f3d57babd2"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["01578325020f17ab9d0ae59f122d17f90c5fecbc","9798d0818e7a880546802b509792d3f3d57babd2"]},"commit2Childs":{"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["2acf500f78aa12b92e371fd89c719291986b6b90"],"01578325020f17ab9d0ae59f122d17f90c5fecbc":["b70042a8a492f7054d480ccdd2be9796510d4327","9798d0818e7a880546802b509792d3f3d57babd2","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"2acf500f78aa12b92e371fd89c719291986b6b90":["01578325020f17ab9d0ae59f122d17f90c5fecbc","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"46d8ada1fff8d18cb197c38c7983225162599948":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd6c9e9b1251473f465b0443b56046b2658402da"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"dd6c9e9b1251473f465b0443b56046b2658402da":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["9279c7cd47f17e1e8b674a3741ff5f040bc680be","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"9798d0818e7a880546802b509792d3f3d57babd2":["b70042a8a492f7054d480ccdd2be9796510d4327","5c7ffceea3e516d0dbccfc91acb4ccf856cba19a","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"5c7ffceea3e516d0dbccfc91acb4ccf856cba19a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424","b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}