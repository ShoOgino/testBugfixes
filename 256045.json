{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelHavingStream().mjava","commits":[{"id":"2e196615f77a3277b22dbf33f9b4a9f086943dfe","date":1481905676,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelHavingStream().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testParallelHavingStream() throws Exception {\n\n    SolrClientCache solrClientCache = new SolrClientCache();\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"subject\", \"blah blah blah 0\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"subject\", \"blah blah blah 2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"subject\", \"blah blah blah 3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"subject\", \"blah blah blah 4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"subject\", \"blah blah blah 1\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"5\", \"a_f\", \"6\", \"subject\", \"blah blah blah 5\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"6\", \"a_f\", \"7\", \"subject\", \"blah blah blah 6\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"8\", \"subject\", \"blah blah blah 7\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"8\", \"a_f\", \"9\", \"subject\", \"blah blah blah 8\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"9\", \"a_f\", \"10\", \"subject\", \"blah blah blah 9\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"having\", HavingStream.class)\n        .withFunctionName(\"and\", AndOperation.class)\n        .withFunctionName(\"or\", OrOperation.class)\n        .withFunctionName(\"not\", NotOperation.class)\n        .withFunctionName(\"gt\", GreaterThanOperation.class)\n        .withFunctionName(\"lt\", LessThanOperation.class)\n        .withFunctionName(\"eq\", EqualsOperation.class)\n        .withFunctionName(\"lteq\", LessThanEqualToOperation.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToOperation.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), eq(a_i, 9)))\");\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    Tuple t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(eq(a_i, 9),lt(a_i, 10))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\",having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), or(eq(a_i, 9),eq(a_i, 8))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(eq(a_i, 9),not(eq(a_i, 9)))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 0);\n\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\",having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(lteq(a_i, 9), gteq(a_i, 8))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    System.out.println(\"####Tuples:\"+tuples.size());\n    assert(tuples.size() == 2);\n\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    solrClientCache.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb018b067d19fee3a9fe23997786b4f69e50e38e","date":1483473928,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelHavingStream().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testParallelHavingStream() throws Exception {\n\n    SolrClientCache solrClientCache = new SolrClientCache();\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"subject\", \"blah blah blah 0\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"subject\", \"blah blah blah 2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"subject\", \"blah blah blah 3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"subject\", \"blah blah blah 4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"subject\", \"blah blah blah 1\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"5\", \"a_f\", \"6\", \"subject\", \"blah blah blah 5\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"6\", \"a_f\", \"7\", \"subject\", \"blah blah blah 6\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"8\", \"subject\", \"blah blah blah 7\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"8\", \"a_f\", \"9\", \"subject\", \"blah blah blah 8\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"9\", \"a_f\", \"10\", \"subject\", \"blah blah blah 9\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"having\", HavingStream.class)\n        .withFunctionName(\"and\", AndOperation.class)\n        .withFunctionName(\"or\", OrOperation.class)\n        .withFunctionName(\"not\", NotOperation.class)\n        .withFunctionName(\"gt\", GreaterThanOperation.class)\n        .withFunctionName(\"lt\", LessThanOperation.class)\n        .withFunctionName(\"eq\", EqualsOperation.class)\n        .withFunctionName(\"lteq\", LessThanEqualToOperation.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToOperation.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), eq(a_i, 9)))\");\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    Tuple t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(eq(a_i, 9),lt(a_i, 10))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\",having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), or(eq(a_i, 9),eq(a_i, 8))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(eq(a_i, 9),not(eq(a_i, 9)))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 0);\n\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\",having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(lteq(a_i, 9), gteq(a_i, 8))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    System.out.println(\"####Tuples:\"+tuples.size());\n    assert(tuples.size() == 2);\n\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    solrClientCache.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e568a55dbd1d1d3331ed7570471066805e52921d","date":1483493242,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelHavingStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelHavingStream().mjava","sourceNew":"  @Test\n  public void testParallelHavingStream() throws Exception {\n\n    SolrClientCache solrClientCache = new SolrClientCache();\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"subject\", \"blah blah blah 0\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"subject\", \"blah blah blah 2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"subject\", \"blah blah blah 3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"subject\", \"blah blah blah 4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"subject\", \"blah blah blah 1\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"5\", \"a_f\", \"6\", \"subject\", \"blah blah blah 5\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"6\", \"a_f\", \"7\", \"subject\", \"blah blah blah 6\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"8\", \"subject\", \"blah blah blah 7\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"8\", \"a_f\", \"9\", \"subject\", \"blah blah blah 8\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"9\", \"a_f\", \"10\", \"subject\", \"blah blah blah 9\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"having\", HavingStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"and\", AndOperation.class)\n        .withFunctionName(\"or\", OrOperation.class)\n        .withFunctionName(\"not\", NotOperation.class)\n        .withFunctionName(\"gt\", GreaterThanOperation.class)\n        .withFunctionName(\"lt\", LessThanOperation.class)\n        .withFunctionName(\"eq\", EqualsOperation.class)\n        .withFunctionName(\"lteq\", LessThanEqualToOperation.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToOperation.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), eq(a_i, 9)))\");\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    Tuple t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(eq(a_i, 9),lt(a_i, 10))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\",having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), or(eq(a_i, 9),eq(a_i, 8))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(eq(a_i, 9),not(eq(a_i, 9)))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 0);\n\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\",having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(lteq(a_i, 9), gteq(a_i, 8))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\"+COLLECTIONORALIAS+\", workers=2, sort=\\\"a_f asc\\\", having(rollup(over=a_f, sum(a_i), search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=a_f)), eq('sum(a_i)', 9)))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n\n    t = tuples.get(0);\n    assertTrue(t.getDouble(\"a_f\") == 10.0D);\n\n\n\n    solrClientCache.close();\n  }\n\n","sourceOld":"  @Test\n  public void testParallelHavingStream() throws Exception {\n\n    SolrClientCache solrClientCache = new SolrClientCache();\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"subject\", \"blah blah blah 0\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"subject\", \"blah blah blah 2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"subject\", \"blah blah blah 3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"subject\", \"blah blah blah 4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"subject\", \"blah blah blah 1\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"5\", \"a_f\", \"6\", \"subject\", \"blah blah blah 5\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"6\", \"a_f\", \"7\", \"subject\", \"blah blah blah 6\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"8\", \"subject\", \"blah blah blah 7\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"8\", \"a_f\", \"9\", \"subject\", \"blah blah blah 8\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"9\", \"a_f\", \"10\", \"subject\", \"blah blah blah 9\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"having\", HavingStream.class)\n        .withFunctionName(\"and\", AndOperation.class)\n        .withFunctionName(\"or\", OrOperation.class)\n        .withFunctionName(\"not\", NotOperation.class)\n        .withFunctionName(\"gt\", GreaterThanOperation.class)\n        .withFunctionName(\"lt\", LessThanOperation.class)\n        .withFunctionName(\"eq\", EqualsOperation.class)\n        .withFunctionName(\"lteq\", LessThanEqualToOperation.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToOperation.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), eq(a_i, 9)))\");\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    Tuple t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(eq(a_i, 9),lt(a_i, 10))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\",having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), or(eq(a_i, 9),eq(a_i, 8))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(eq(a_i, 9),not(eq(a_i, 9)))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 0);\n\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\",having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(lteq(a_i, 9), gteq(a_i, 8))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    System.out.println(\"####Tuples:\"+tuples.size());\n    assert(tuples.size() == 2);\n\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    solrClientCache.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1af73925f08e2589b3b927ed119846dec892184","date":1483667215,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelHavingStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelHavingStream().mjava","sourceNew":"  @Test\n  public void testParallelHavingStream() throws Exception {\n\n    SolrClientCache solrClientCache = new SolrClientCache();\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"subject\", \"blah blah blah 0\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"subject\", \"blah blah blah 2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"subject\", \"blah blah blah 3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"subject\", \"blah blah blah 4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"subject\", \"blah blah blah 1\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"5\", \"a_f\", \"6\", \"subject\", \"blah blah blah 5\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"6\", \"a_f\", \"7\", \"subject\", \"blah blah blah 6\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"8\", \"subject\", \"blah blah blah 7\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"8\", \"a_f\", \"9\", \"subject\", \"blah blah blah 8\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"9\", \"a_f\", \"10\", \"subject\", \"blah blah blah 9\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"having\", HavingStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"and\", AndOperation.class)\n        .withFunctionName(\"or\", OrOperation.class)\n        .withFunctionName(\"not\", NotOperation.class)\n        .withFunctionName(\"gt\", GreaterThanOperation.class)\n        .withFunctionName(\"lt\", LessThanOperation.class)\n        .withFunctionName(\"eq\", EqualsOperation.class)\n        .withFunctionName(\"lteq\", LessThanEqualToOperation.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToOperation.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), eq(a_i, 9)))\");\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    Tuple t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(eq(a_i, 9),lt(a_i, 10))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\",having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), or(eq(a_i, 9),eq(a_i, 8))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(eq(a_i, 9),not(eq(a_i, 9)))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 0);\n\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\",having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(lteq(a_i, 9), gteq(a_i, 8))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\"+COLLECTIONORALIAS+\", workers=2, sort=\\\"a_f asc\\\", having(rollup(over=a_f, sum(a_i), search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=a_f)), and(eq(sum(a_i), 9),eq(sum(a_i),9))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n\n    t = tuples.get(0);\n    assertTrue(t.getDouble(\"a_f\") == 10.0D);\n\n\n\n    solrClientCache.close();\n  }\n\n","sourceOld":"  @Test\n  public void testParallelHavingStream() throws Exception {\n\n    SolrClientCache solrClientCache = new SolrClientCache();\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"subject\", \"blah blah blah 0\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"subject\", \"blah blah blah 2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"subject\", \"blah blah blah 3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"subject\", \"blah blah blah 4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"subject\", \"blah blah blah 1\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"5\", \"a_f\", \"6\", \"subject\", \"blah blah blah 5\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"6\", \"a_f\", \"7\", \"subject\", \"blah blah blah 6\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"8\", \"subject\", \"blah blah blah 7\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"8\", \"a_f\", \"9\", \"subject\", \"blah blah blah 8\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"9\", \"a_f\", \"10\", \"subject\", \"blah blah blah 9\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"having\", HavingStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"and\", AndOperation.class)\n        .withFunctionName(\"or\", OrOperation.class)\n        .withFunctionName(\"not\", NotOperation.class)\n        .withFunctionName(\"gt\", GreaterThanOperation.class)\n        .withFunctionName(\"lt\", LessThanOperation.class)\n        .withFunctionName(\"eq\", EqualsOperation.class)\n        .withFunctionName(\"lteq\", LessThanEqualToOperation.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToOperation.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), eq(a_i, 9)))\");\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    Tuple t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(eq(a_i, 9),lt(a_i, 10))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\",having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), or(eq(a_i, 9),eq(a_i, 8))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(eq(a_i, 9),not(eq(a_i, 9)))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 0);\n\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\",having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(lteq(a_i, 9), gteq(a_i, 8))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\"+COLLECTIONORALIAS+\", workers=2, sort=\\\"a_f asc\\\", having(rollup(over=a_f, sum(a_i), search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=a_f)), eq('sum(a_i)', 9)))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n\n    t = tuples.get(0);\n    assertTrue(t.getDouble(\"a_f\") == 10.0D);\n\n\n\n    solrClientCache.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"491c9672ec42582fe43960452dbd37f1c80fe0f0","date":1483739222,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelHavingStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelHavingStream().mjava","sourceNew":"  @Test\n  public void testParallelHavingStream() throws Exception {\n\n    SolrClientCache solrClientCache = new SolrClientCache();\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"subject\", \"blah blah blah 0\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"subject\", \"blah blah blah 2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"subject\", \"blah blah blah 3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"subject\", \"blah blah blah 4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"subject\", \"blah blah blah 1\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"5\", \"a_f\", \"6\", \"subject\", \"blah blah blah 5\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"6\", \"a_f\", \"7\", \"subject\", \"blah blah blah 6\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"8\", \"subject\", \"blah blah blah 7\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"8\", \"a_f\", \"9\", \"subject\", \"blah blah blah 8\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"9\", \"a_f\", \"10\", \"subject\", \"blah blah blah 9\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"having\", HavingStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"and\", AndOperation.class)\n        .withFunctionName(\"or\", OrOperation.class)\n        .withFunctionName(\"not\", NotOperation.class)\n        .withFunctionName(\"gt\", GreaterThanOperation.class)\n        .withFunctionName(\"lt\", LessThanOperation.class)\n        .withFunctionName(\"eq\", EqualsOperation.class)\n        .withFunctionName(\"lteq\", LessThanEqualToOperation.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToOperation.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), eq(a_i, 9)))\");\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    Tuple t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(eq(a_i, 9),lt(a_i, 10))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\",having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), or(eq(a_i, 9),eq(a_i, 8))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(eq(a_i, 9),not(eq(a_i, 9)))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 0);\n\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\",having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(lteq(a_i, 9), gteq(a_i, 8))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\"+COLLECTIONORALIAS+\", workers=2, sort=\\\"a_f asc\\\", having(rollup(over=a_f, sum(a_i), search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=a_f)), and(eq(sum(a_i), 9),eq(sum(a_i),9))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n\n    t = tuples.get(0);\n    assertTrue(t.getDouble(\"a_f\") == 10.0D);\n\n    solrClientCache.close();\n  }\n\n","sourceOld":"  @Test\n  public void testParallelHavingStream() throws Exception {\n\n    SolrClientCache solrClientCache = new SolrClientCache();\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"subject\", \"blah blah blah 0\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"subject\", \"blah blah blah 2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"subject\", \"blah blah blah 3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"subject\", \"blah blah blah 4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"subject\", \"blah blah blah 1\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"5\", \"a_f\", \"6\", \"subject\", \"blah blah blah 5\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"6\", \"a_f\", \"7\", \"subject\", \"blah blah blah 6\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"8\", \"subject\", \"blah blah blah 7\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"8\", \"a_f\", \"9\", \"subject\", \"blah blah blah 8\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"9\", \"a_f\", \"10\", \"subject\", \"blah blah blah 9\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"having\", HavingStream.class)\n        .withFunctionName(\"and\", AndOperation.class)\n        .withFunctionName(\"or\", OrOperation.class)\n        .withFunctionName(\"not\", NotOperation.class)\n        .withFunctionName(\"gt\", GreaterThanOperation.class)\n        .withFunctionName(\"lt\", LessThanOperation.class)\n        .withFunctionName(\"eq\", EqualsOperation.class)\n        .withFunctionName(\"lteq\", LessThanEqualToOperation.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToOperation.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), eq(a_i, 9)))\");\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    Tuple t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(eq(a_i, 9),lt(a_i, 10))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\",having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), or(eq(a_i, 9),eq(a_i, 8))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(eq(a_i, 9),not(eq(a_i, 9)))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 0);\n\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\",having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(lteq(a_i, 9), gteq(a_i, 8))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    System.out.println(\"####Tuples:\"+tuples.size());\n    assert(tuples.size() == 2);\n\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    solrClientCache.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"88073e8783f450d4c0218decc2f001a1ac2c7e7c","date":1486705191,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelHavingStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelHavingStream().mjava","sourceNew":"  @Test\n  public void testParallelHavingStream() throws Exception {\n\n    SolrClientCache solrClientCache = new SolrClientCache();\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"subject\", \"blah blah blah 0\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"subject\", \"blah blah blah 2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"subject\", \"blah blah blah 3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"subject\", \"blah blah blah 4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"subject\", \"blah blah blah 1\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"5\", \"a_f\", \"6\", \"subject\", \"blah blah blah 5\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"6\", \"a_f\", \"7\", \"subject\", \"blah blah blah 6\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"8\", \"subject\", \"blah blah blah 7\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"8\", \"a_f\", \"9\", \"subject\", \"blah blah blah 8\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"9\", \"a_f\", \"10\", \"subject\", \"blah blah blah 9\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"having\", HavingStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"eq\", EqualsEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), eq(a_i, 9)))\");\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    Tuple t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(eq(a_i, 9),lt(a_i, 10))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\",having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), or(eq(a_i, 9),eq(a_i, 8))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(eq(a_i, 9),not(eq(a_i, 9)))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 0);\n\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\",having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(lteq(a_i, 9), gteq(a_i, 8))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\"+COLLECTIONORALIAS+\", workers=2, sort=\\\"a_f asc\\\", having(rollup(over=a_f, sum(a_i), search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=a_f)), and(eq(sum(a_i), 9),eq(sum(a_i),9))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n\n    t = tuples.get(0);\n    assertTrue(t.getDouble(\"a_f\") == 10.0D);\n\n\n\n    solrClientCache.close();\n  }\n\n","sourceOld":"  @Test\n  public void testParallelHavingStream() throws Exception {\n\n    SolrClientCache solrClientCache = new SolrClientCache();\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"subject\", \"blah blah blah 0\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"subject\", \"blah blah blah 2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"subject\", \"blah blah blah 3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"subject\", \"blah blah blah 4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"subject\", \"blah blah blah 1\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"5\", \"a_f\", \"6\", \"subject\", \"blah blah blah 5\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"6\", \"a_f\", \"7\", \"subject\", \"blah blah blah 6\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"8\", \"subject\", \"blah blah blah 7\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"8\", \"a_f\", \"9\", \"subject\", \"blah blah blah 8\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"9\", \"a_f\", \"10\", \"subject\", \"blah blah blah 9\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"having\", HavingStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"and\", AndOperation.class)\n        .withFunctionName(\"or\", OrOperation.class)\n        .withFunctionName(\"not\", NotOperation.class)\n        .withFunctionName(\"gt\", GreaterThanOperation.class)\n        .withFunctionName(\"lt\", LessThanOperation.class)\n        .withFunctionName(\"eq\", EqualsOperation.class)\n        .withFunctionName(\"lteq\", LessThanEqualToOperation.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToOperation.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), eq(a_i, 9)))\");\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    Tuple t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(eq(a_i, 9),lt(a_i, 10))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\",having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), or(eq(a_i, 9),eq(a_i, 8))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(eq(a_i, 9),not(eq(a_i, 9)))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 0);\n\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\",having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(lteq(a_i, 9), gteq(a_i, 8))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\"+COLLECTIONORALIAS+\", workers=2, sort=\\\"a_f asc\\\", having(rollup(over=a_f, sum(a_i), search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=a_f)), and(eq(sum(a_i), 9),eq(sum(a_i),9))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n\n    t = tuples.get(0);\n    assertTrue(t.getDouble(\"a_f\") == 10.0D);\n\n\n\n    solrClientCache.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"116fdd6b9e04e18a6547a5650bc0afd3fda020aa","date":1487184909,"type":3,"author":"Joel Bernstein","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelHavingStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelHavingStream().mjava","sourceNew":"  @Test\n  public void testParallelHavingStream() throws Exception {\n\n    SolrClientCache solrClientCache = new SolrClientCache();\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"subject\", \"blah blah blah 0\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"subject\", \"blah blah blah 2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"subject\", \"blah blah blah 3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"subject\", \"blah blah blah 4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"subject\", \"blah blah blah 1\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"5\", \"a_f\", \"6\", \"subject\", \"blah blah blah 5\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"6\", \"a_f\", \"7\", \"subject\", \"blah blah blah 6\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"8\", \"subject\", \"blah blah blah 7\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"8\", \"a_f\", \"9\", \"subject\", \"blah blah blah 8\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"9\", \"a_f\", \"10\", \"subject\", \"blah blah blah 9\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"having\", HavingStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"eq\", EqualsEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), eq(a_i, 9)))\");\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    Tuple t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(eq(a_i, 9),lt(a_i, 10))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\",having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), or(eq(a_i, 9),eq(a_i, 8))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(eq(a_i, 9),not(eq(a_i, 9)))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 0);\n\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\",having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(lteq(a_i, 9), gteq(a_i, 8))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\"+COLLECTIONORALIAS+\", workers=2, sort=\\\"a_f asc\\\", having(rollup(over=a_f, sum(a_i), search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=a_f)), and(eq(sum(a_i), 9),eq(sum(a_i),9))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n\n    t = tuples.get(0);\n    assertTrue(t.getDouble(\"a_f\") == 10.0D);\n\n    solrClientCache.close();\n  }\n\n","sourceOld":"  @Test\n  public void testParallelHavingStream() throws Exception {\n\n    SolrClientCache solrClientCache = new SolrClientCache();\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"subject\", \"blah blah blah 0\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"subject\", \"blah blah blah 2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"subject\", \"blah blah blah 3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"subject\", \"blah blah blah 4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"subject\", \"blah blah blah 1\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"5\", \"a_f\", \"6\", \"subject\", \"blah blah blah 5\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"6\", \"a_f\", \"7\", \"subject\", \"blah blah blah 6\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"8\", \"subject\", \"blah blah blah 7\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"8\", \"a_f\", \"9\", \"subject\", \"blah blah blah 8\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"9\", \"a_f\", \"10\", \"subject\", \"blah blah blah 9\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"having\", HavingStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"eq\", EqualsEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), eq(a_i, 9)))\");\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    Tuple t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(eq(a_i, 9),lt(a_i, 10))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\",having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), or(eq(a_i, 9),eq(a_i, 8))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(eq(a_i, 9),not(eq(a_i, 9)))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 0);\n\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\",having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(lteq(a_i, 9), gteq(a_i, 8))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\"+COLLECTIONORALIAS+\", workers=2, sort=\\\"a_f asc\\\", having(rollup(over=a_f, sum(a_i), search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=a_f)), and(eq(sum(a_i), 9),eq(sum(a_i),9))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n\n    t = tuples.get(0);\n    assertTrue(t.getDouble(\"a_f\") == 10.0D);\n\n\n\n    solrClientCache.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1e7de64990e3928b90142a52fb92eeff556475","date":1503713257,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelHavingStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelHavingStream().mjava","sourceNew":"  @Test\n  public void testParallelHavingStream() throws Exception {\n\n    SolrClientCache solrClientCache = new SolrClientCache();\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"subject\", \"blah blah blah 0\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"subject\", \"blah blah blah 2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"subject\", \"blah blah blah 3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"subject\", \"blah blah blah 4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"subject\", \"blah blah blah 1\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"5\", \"a_f\", \"6\", \"subject\", \"blah blah blah 5\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"6\", \"a_f\", \"7\", \"subject\", \"blah blah blah 6\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"8\", \"subject\", \"blah blah blah 7\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"8\", \"a_f\", \"9\", \"subject\", \"blah blah blah 8\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"9\", \"a_f\", \"10\", \"subject\", \"blah blah blah 9\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"having\", HavingStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), eq(a_i, 9)))\");\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    Tuple t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(eq(a_i, 9),lt(a_i, 10))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\",having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), or(eq(a_i, 9),eq(a_i, 8))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(eq(a_i, 9),not(eq(a_i, 9)))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 0);\n\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\",having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(lteq(a_i, 9), gteq(a_i, 8))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\"+COLLECTIONORALIAS+\", workers=2, sort=\\\"a_f asc\\\", having(rollup(over=a_f, sum(a_i), search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=a_f)), and(eq(sum(a_i), 9),eq(sum(a_i),9))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n\n    t = tuples.get(0);\n    assertTrue(t.getDouble(\"a_f\") == 10.0D);\n\n    solrClientCache.close();\n  }\n\n","sourceOld":"  @Test\n  public void testParallelHavingStream() throws Exception {\n\n    SolrClientCache solrClientCache = new SolrClientCache();\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"subject\", \"blah blah blah 0\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"subject\", \"blah blah blah 2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"subject\", \"blah blah blah 3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"subject\", \"blah blah blah 4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"subject\", \"blah blah blah 1\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"5\", \"a_f\", \"6\", \"subject\", \"blah blah blah 5\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"6\", \"a_f\", \"7\", \"subject\", \"blah blah blah 6\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"8\", \"subject\", \"blah blah blah 7\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"8\", \"a_f\", \"9\", \"subject\", \"blah blah blah 8\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"9\", \"a_f\", \"10\", \"subject\", \"blah blah blah 9\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"having\", HavingStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"eq\", EqualsEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), eq(a_i, 9)))\");\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    Tuple t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(eq(a_i, 9),lt(a_i, 10))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\",having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), or(eq(a_i, 9),eq(a_i, 8))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(eq(a_i, 9),not(eq(a_i, 9)))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 0);\n\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\",having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(lteq(a_i, 9), gteq(a_i, 8))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\"+COLLECTIONORALIAS+\", workers=2, sort=\\\"a_f asc\\\", having(rollup(over=a_f, sum(a_i), search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=a_f)), and(eq(sum(a_i), 9),eq(sum(a_i),9))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n\n    t = tuples.get(0);\n    assertTrue(t.getDouble(\"a_f\") == 10.0D);\n\n    solrClientCache.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45c28dbb559366e1f4ef8077346552bfb3f7ecf6","date":1503738439,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelHavingStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelHavingStream().mjava","sourceNew":"  @Test\n  public void testParallelHavingStream() throws Exception {\n\n    SolrClientCache solrClientCache = new SolrClientCache();\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"subject\", \"blah blah blah 0\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"subject\", \"blah blah blah 2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"subject\", \"blah blah blah 3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"subject\", \"blah blah blah 4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"subject\", \"blah blah blah 1\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"5\", \"a_f\", \"6\", \"subject\", \"blah blah blah 5\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"6\", \"a_f\", \"7\", \"subject\", \"blah blah blah 6\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"8\", \"subject\", \"blah blah blah 7\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"8\", \"a_f\", \"9\", \"subject\", \"blah blah blah 8\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"9\", \"a_f\", \"10\", \"subject\", \"blah blah blah 9\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"having\", HavingStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), eq(a_i, 9)))\");\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    Tuple t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(eq(a_i, 9),lt(a_i, 10))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\",having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), or(eq(a_i, 9),eq(a_i, 8))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(eq(a_i, 9),not(eq(a_i, 9)))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 0);\n\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\",having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(lteq(a_i, 9), gteq(a_i, 8))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\"+COLLECTIONORALIAS+\", workers=2, sort=\\\"a_f asc\\\", having(rollup(over=a_f, sum(a_i), search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=a_f)), and(eq(sum(a_i), 9),eq(sum(a_i),9))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n\n    t = tuples.get(0);\n    assertTrue(t.getDouble(\"a_f\") == 10.0D);\n\n    solrClientCache.close();\n  }\n\n","sourceOld":"  @Test\n  public void testParallelHavingStream() throws Exception {\n\n    SolrClientCache solrClientCache = new SolrClientCache();\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"subject\", \"blah blah blah 0\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"subject\", \"blah blah blah 2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"subject\", \"blah blah blah 3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"subject\", \"blah blah blah 4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"subject\", \"blah blah blah 1\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"5\", \"a_f\", \"6\", \"subject\", \"blah blah blah 5\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"6\", \"a_f\", \"7\", \"subject\", \"blah blah blah 6\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"8\", \"subject\", \"blah blah blah 7\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"8\", \"a_f\", \"9\", \"subject\", \"blah blah blah 8\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"9\", \"a_f\", \"10\", \"subject\", \"blah blah blah 9\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"having\", HavingStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"eq\", EqualsEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), eq(a_i, 9)))\");\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    Tuple t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(eq(a_i, 9),lt(a_i, 10))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\",having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), or(eq(a_i, 9),eq(a_i, 8))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(eq(a_i, 9),not(eq(a_i, 9)))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 0);\n\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\",having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(lteq(a_i, 9), gteq(a_i, 8))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\"+COLLECTIONORALIAS+\", workers=2, sort=\\\"a_f asc\\\", having(rollup(over=a_f, sum(a_i), search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=a_f)), and(eq(sum(a_i), 9),eq(sum(a_i),9))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n\n    t = tuples.get(0);\n    assertTrue(t.getDouble(\"a_f\") == 10.0D);\n\n    solrClientCache.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelHavingStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelHavingStream().mjava","sourceNew":"  @Test\n  public void testParallelHavingStream() throws Exception {\n\n    SolrClientCache solrClientCache = new SolrClientCache();\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"subject\", \"blah blah blah 0\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"subject\", \"blah blah blah 2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"subject\", \"blah blah blah 3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"subject\", \"blah blah blah 4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"subject\", \"blah blah blah 1\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"5\", \"a_f\", \"6\", \"subject\", \"blah blah blah 5\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"6\", \"a_f\", \"7\", \"subject\", \"blah blah blah 6\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"8\", \"subject\", \"blah blah blah 7\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"8\", \"a_f\", \"9\", \"subject\", \"blah blah blah 8\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"9\", \"a_f\", \"10\", \"subject\", \"blah blah blah 9\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"having\", HavingStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), eq(a_i, 9)))\");\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    Tuple t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(eq(a_i, 9),lt(a_i, 10))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\",having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), or(eq(a_i, 9),eq(a_i, 8))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(eq(a_i, 9),not(eq(a_i, 9)))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 0);\n\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\",having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(lteq(a_i, 9), gteq(a_i, 8))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\"+COLLECTIONORALIAS+\", workers=2, sort=\\\"a_f asc\\\", having(rollup(over=a_f, sum(a_i), search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=a_f)), and(eq(sum(a_i), 9),eq(sum(a_i),9))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n\n    t = tuples.get(0);\n    assertTrue(t.getDouble(\"a_f\") == 10.0D);\n\n    solrClientCache.close();\n  }\n\n","sourceOld":"  @Test\n  public void testParallelHavingStream() throws Exception {\n\n    SolrClientCache solrClientCache = new SolrClientCache();\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"subject\", \"blah blah blah 0\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"subject\", \"blah blah blah 2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"subject\", \"blah blah blah 3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"subject\", \"blah blah blah 4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"subject\", \"blah blah blah 1\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"5\", \"a_f\", \"6\", \"subject\", \"blah blah blah 5\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"6\", \"a_f\", \"7\", \"subject\", \"blah blah blah 6\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"8\", \"subject\", \"blah blah blah 7\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"8\", \"a_f\", \"9\", \"subject\", \"blah blah blah 8\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"9\", \"a_f\", \"10\", \"subject\", \"blah blah blah 9\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"having\", HavingStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"eq\", EqualsEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), eq(a_i, 9)))\");\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    Tuple t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(eq(a_i, 9),lt(a_i, 10))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\",having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), or(eq(a_i, 9),eq(a_i, 8))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(eq(a_i, 9),not(eq(a_i, 9)))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 0);\n\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\",having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(lteq(a_i, 9), gteq(a_i, 8))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\"+COLLECTIONORALIAS+\", workers=2, sort=\\\"a_f asc\\\", having(rollup(over=a_f, sum(a_i), search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=a_f)), and(eq(sum(a_i), 9),eq(sum(a_i),9))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n\n    t = tuples.get(0);\n    assertTrue(t.getDouble(\"a_f\") == 10.0D);\n\n    solrClientCache.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testParallelHavingStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelHavingStream().mjava","sourceNew":"  @Test\n  public void testParallelHavingStream() throws Exception {\n\n    SolrClientCache solrClientCache = new SolrClientCache();\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"subject\", \"blah blah blah 0\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"subject\", \"blah blah blah 2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"subject\", \"blah blah blah 3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"subject\", \"blah blah blah 4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"subject\", \"blah blah blah 1\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"5\", \"a_f\", \"6\", \"subject\", \"blah blah blah 5\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"6\", \"a_f\", \"7\", \"subject\", \"blah blah blah 6\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"8\", \"subject\", \"blah blah blah 7\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"8\", \"a_f\", \"9\", \"subject\", \"blah blah blah 8\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"9\", \"a_f\", \"10\", \"subject\", \"blah blah blah 9\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"having\", HavingStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), eq(a_i, 9)))\");\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    Tuple t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(eq(a_i, 9),lt(a_i, 10))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\",having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), or(eq(a_i, 9),eq(a_i, 8))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(eq(a_i, 9),not(eq(a_i, 9)))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 0);\n\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\",having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(lteq(a_i, 9), gteq(a_i, 8))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\"+COLLECTIONORALIAS+\", workers=2, sort=\\\"a_f asc\\\", having(rollup(over=a_f, sum(a_i), search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=a_f)), and(eq(sum(a_i), 9),eq(sum(a_i),9))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n\n    t = tuples.get(0);\n    assertTrue(t.getDouble(\"a_f\") == 10.0D);\n\n    solrClientCache.close();\n  }\n\n","sourceOld":"  @Test\n  public void testParallelHavingStream() throws Exception {\n\n    SolrClientCache solrClientCache = new SolrClientCache();\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"subject\", \"blah blah blah 0\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"subject\", \"blah blah blah 2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"subject\", \"blah blah blah 3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"subject\", \"blah blah blah 4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"subject\", \"blah blah blah 1\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"5\", \"a_f\", \"6\", \"subject\", \"blah blah blah 5\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"6\", \"a_f\", \"7\", \"subject\", \"blah blah blah 6\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"8\", \"subject\", \"blah blah blah 7\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"8\", \"a_f\", \"9\", \"subject\", \"blah blah blah 8\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"9\", \"a_f\", \"10\", \"subject\", \"blah blah blah 9\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"having\", HavingStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), eq(a_i, 9)))\");\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    Tuple t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(eq(a_i, 9),lt(a_i, 10))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\",having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), or(eq(a_i, 9),eq(a_i, 8))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(eq(a_i, 9),not(eq(a_i, 9)))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 0);\n\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\",having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(lteq(a_i, 9), gteq(a_i, 8))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\"+COLLECTIONORALIAS+\", workers=2, sort=\\\"a_f asc\\\", having(rollup(over=a_f, sum(a_i), search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=a_f)), and(eq(sum(a_i), 9),eq(sum(a_i),9))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n\n    t = tuples.get(0);\n    assertTrue(t.getDouble(\"a_f\") == 10.0D);\n\n    solrClientCache.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e568a55dbd1d1d3331ed7570471066805e52921d":["cb018b067d19fee3a9fe23997786b4f69e50e38e"],"cb018b067d19fee3a9fe23997786b4f69e50e38e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2e196615f77a3277b22dbf33f9b4a9f086943dfe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"88073e8783f450d4c0218decc2f001a1ac2c7e7c":["c1af73925f08e2589b3b927ed119846dec892184"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["88073e8783f450d4c0218decc2f001a1ac2c7e7c","491c9672ec42582fe43960452dbd37f1c80fe0f0"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa","45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"c1af73925f08e2589b3b927ed119846dec892184":["e568a55dbd1d1d3331ed7570471066805e52921d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa","ba1e7de64990e3928b90142a52fb92eeff556475"],"ba1e7de64990e3928b90142a52fb92eeff556475":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"491c9672ec42582fe43960452dbd37f1c80fe0f0":["2e196615f77a3277b22dbf33f9b4a9f086943dfe","c1af73925f08e2589b3b927ed119846dec892184"]},"commit2Childs":{"e568a55dbd1d1d3331ed7570471066805e52921d":["c1af73925f08e2589b3b927ed119846dec892184"],"cb018b067d19fee3a9fe23997786b4f69e50e38e":["e568a55dbd1d1d3331ed7570471066805e52921d"],"2e196615f77a3277b22dbf33f9b4a9f086943dfe":["491c9672ec42582fe43960452dbd37f1c80fe0f0"],"88073e8783f450d4c0218decc2f001a1ac2c7e7c":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","45c28dbb559366e1f4ef8077346552bfb3f7ecf6","ba1e7de64990e3928b90142a52fb92eeff556475"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"c1af73925f08e2589b3b927ed119846dec892184":["88073e8783f450d4c0218decc2f001a1ac2c7e7c","491c9672ec42582fe43960452dbd37f1c80fe0f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cb018b067d19fee3a9fe23997786b4f69e50e38e","2e196615f77a3277b22dbf33f9b4a9f086943dfe"],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"ba1e7de64990e3928b90142a52fb92eeff556475":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"491c9672ec42582fe43960452dbd37f1c80fe0f0":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}