{"path":"contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymMap#createIndex(Map[String,ArrayList[Integer]],Map[Integer,ArrayList[String]]).mjava","commits":[{"id":"f11899016a0460a7ea2e4b008d002e1e75c7d867","date":1256772085,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymMap#createIndex(Map[String,ArrayList[Integer]],Map[Integer,ArrayList[String]]).mjava","pathOld":"contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymMap#createIndex(Map,Map).mjava","sourceNew":"  private HashMap<String,String[]> createIndex(Map<String,ArrayList<Integer>> word2Groups, Map<Integer,ArrayList<String>> group2Words) {\n    HashMap<String,String[]> word2Syns = new HashMap<String,String[]>();\n    \n    for (final Map.Entry<String,ArrayList<Integer>> entry : word2Groups.entrySet()) { // for each word\n      ArrayList<Integer> group = entry.getValue();     \n      String word = entry.getKey();\n      \n//      HashSet synonyms = new HashSet();\n      TreeSet<String> synonyms = new TreeSet<String>();\n      for (int i=group.size(); --i >= 0; ) { // for each groupID of word\n        ArrayList<String> words = group2Words.get(group.get(i));\n        for (int j=words.size(); --j >= 0; ) { // add all words       \n          String synonym = words.get(j); // note that w and word are interned\n          if (synonym != word) { // a word is implicitly it's own synonym\n            synonyms.add(synonym);\n          }\n        }\n      }\n\n      int size = synonyms.size();\n      if (size > 0) {\n        String[] syns = new String[size];\n        if (size == 1)  \n          syns[0] = synonyms.first();\n        else\n          synonyms.toArray(syns);\n//        if (syns.length > 1) Arrays.sort(syns);\n//        if (DEBUG) System.err.println(\"word=\" + word + \":\" + Arrays.asList(syns));\n        word2Syns.put(word, syns);\n      }\n    }\n  \n    return word2Syns;\n  }\n\n","sourceOld":"  private HashMap createIndex(Map word2Groups, Map group2Words) {\n    HashMap word2Syns = new HashMap();\n    Iterator iter = word2Groups.entrySet().iterator();\n    \n    while (iter.hasNext()) { // for each word\n      Map.Entry entry = (Map.Entry) iter.next();\n      ArrayList group = (ArrayList) entry.getValue();     \n      String word = (String) entry.getKey();\n      \n//      HashSet synonyms = new HashSet();\n      TreeSet synonyms = new TreeSet();\n      for (int i=group.size(); --i >= 0; ) { // for each groupID of word\n        ArrayList words = (ArrayList) group2Words.get(group.get(i));\n        for (int j=words.size(); --j >= 0; ) { // add all words       \n          Object synonym = words.get(j); // note that w and word are interned\n          if (synonym != word) { // a word is implicitly it's own synonym\n            synonyms.add(synonym);\n          }\n        }\n      }\n\n      int size = synonyms.size();\n      if (size > 0) {\n        String[] syns = new String[size];\n        if (size == 1)  \n          syns[0] = (String) synonyms.first();\n        else\n          synonyms.toArray(syns);\n//        if (syns.length > 1) Arrays.sort(syns);\n//        if (DEBUG) System.err.println(\"word=\" + word + \":\" + Arrays.asList(syns));\n        word2Syns.put(word, syns);\n      }\n    }\n  \n    return word2Syns;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymMap#createIndex(Map[String,ArrayList[Integer]],Map[Integer,ArrayList[String]]).mjava","pathOld":"contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymMap#createIndex(Map[String,ArrayList[Integer]],Map[Integer,ArrayList[String]]).mjava","sourceNew":"  private HashMap<String,String[]> createIndex(Map<String,ArrayList<Integer>> word2Groups, Map<Integer,ArrayList<String>> group2Words) {\n    HashMap<String,String[]> word2Syns = new HashMap<String,String[]>();\n    \n    for (final Map.Entry<String,ArrayList<Integer>> entry : word2Groups.entrySet()) { // for each word\n      ArrayList<Integer> group = entry.getValue();     \n      String word = entry.getKey();\n      \n//      HashSet synonyms = new HashSet();\n      TreeSet<String> synonyms = new TreeSet<String>();\n      for (int i=group.size(); --i >= 0; ) { // for each groupID of word\n        ArrayList<String> words = group2Words.get(group.get(i));\n        for (int j=words.size(); --j >= 0; ) { // add all words       \n          String synonym = words.get(j); // note that w and word are interned\n          if (synonym != word) { // a word is implicitly it's own synonym\n            synonyms.add(synonym);\n          }\n        }\n      }\n\n      int size = synonyms.size();\n      if (size > 0) {\n        String[] syns = new String[size];\n        if (size == 1)  \n          syns[0] = synonyms.first();\n        else\n          synonyms.toArray(syns);\n//        if (syns.length > 1) Arrays.sort(syns);\n//        if (DEBUG) System.err.println(\"word=\" + word + \":\" + Arrays.asList(syns));\n        word2Syns.put(word, syns);\n      }\n    }\n  \n    return word2Syns;\n  }\n\n","sourceOld":"  private HashMap<String,String[]> createIndex(Map<String,ArrayList<Integer>> word2Groups, Map<Integer,ArrayList<String>> group2Words) {\n    HashMap<String,String[]> word2Syns = new HashMap<String,String[]>();\n    \n    for (final Map.Entry<String,ArrayList<Integer>> entry : word2Groups.entrySet()) { // for each word\n      ArrayList<Integer> group = entry.getValue();     \n      String word = entry.getKey();\n      \n//      HashSet synonyms = new HashSet();\n      TreeSet<String> synonyms = new TreeSet<String>();\n      for (int i=group.size(); --i >= 0; ) { // for each groupID of word\n        ArrayList<String> words = group2Words.get(group.get(i));\n        for (int j=words.size(); --j >= 0; ) { // add all words       \n          String synonym = words.get(j); // note that w and word are interned\n          if (synonym != word) { // a word is implicitly it's own synonym\n            synonyms.add(synonym);\n          }\n        }\n      }\n\n      int size = synonyms.size();\n      if (size > 0) {\n        String[] syns = new String[size];\n        if (size == 1)  \n          syns[0] = synonyms.first();\n        else\n          synonyms.toArray(syns);\n//        if (syns.length > 1) Arrays.sort(syns);\n//        if (DEBUG) System.err.println(\"word=\" + word + \":\" + Arrays.asList(syns));\n        word2Syns.put(word, syns);\n      }\n    }\n  \n    return word2Syns;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f11899016a0460a7ea2e4b008d002e1e75c7d867"],"f11899016a0460a7ea2e4b008d002e1e75c7d867":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f11899016a0460a7ea2e4b008d002e1e75c7d867"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f11899016a0460a7ea2e4b008d002e1e75c7d867":["9454a6510e2db155fb01faa5c049b06ece95fab9"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}