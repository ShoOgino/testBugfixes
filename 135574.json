{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/IndexedDISI#readBlockHeader().mjava","commits":[{"id":"feec55b6e9aaab41be57a5001b31fa14c3925ae4","date":1476170434,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/IndexedDISI#readBlockHeader().mjava","pathOld":"/dev/null","sourceNew":"  private void readBlockHeader() throws IOException {\n    block = Short.toUnsignedInt(slice.readShort()) << 16;\n    assert block >= 0;\n    final int numValues = 1 + Short.toUnsignedInt(slice.readShort());\n    index = nextBlockIndex;\n    nextBlockIndex = index + numValues;\n    if (numValues <= MAX_ARRAY_LENGTH) {\n      method = Method.SPARSE;\n      blockEnd = slice.getFilePointer() + (numValues << 1);\n    } else if (numValues == 65536) {\n      method = Method.ALL;\n      blockEnd = slice.getFilePointer();\n      gap = block - index - 1;\n    } else {\n      method = Method.DENSE;\n      blockEnd = slice.getFilePointer() + (1 << 13);\n      wordIndex = -1;\n      numberOfOnes = index + 1;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/IndexedDISI#readBlockHeader().mjava","pathOld":"/dev/null","sourceNew":"  private void readBlockHeader() throws IOException {\n    block = Short.toUnsignedInt(slice.readShort()) << 16;\n    assert block >= 0;\n    final int numValues = 1 + Short.toUnsignedInt(slice.readShort());\n    index = nextBlockIndex;\n    nextBlockIndex = index + numValues;\n    if (numValues <= MAX_ARRAY_LENGTH) {\n      method = Method.SPARSE;\n      blockEnd = slice.getFilePointer() + (numValues << 1);\n    } else if (numValues == 65536) {\n      method = Method.ALL;\n      blockEnd = slice.getFilePointer();\n      gap = block - index - 1;\n    } else {\n      method = Method.DENSE;\n      blockEnd = slice.getFilePointer() + (1 << 13);\n      wordIndex = -1;\n      numberOfOnes = index + 1;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb9d1512598fc72005b830d5e2b88e61a0f4b374","date":1543843391,"type":3,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/IndexedDISI#readBlockHeader().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/IndexedDISI#readBlockHeader().mjava","sourceNew":"  private void readBlockHeader() throws IOException {\n    blockStart = slice.getFilePointer();\n    block = Short.toUnsignedInt(slice.readShort()) << 16;\n    assert block >= 0;\n    final int numValues = 1 + Short.toUnsignedInt(slice.readShort());\n    index = nextBlockIndex;\n    nextBlockIndex = index + numValues;\n    if (numValues <= MAX_ARRAY_LENGTH) {\n      method = Method.SPARSE;\n      blockEnd = slice.getFilePointer() + (numValues << 1);\n    } else if (numValues == 65536) {\n      method = Method.ALL;\n      blockEnd = slice.getFilePointer();\n      gap = block - index - 1;\n    } else {\n      method = Method.DENSE;\n      blockEnd = slice.getFilePointer() + (1 << 13);\n      wordIndex = -1;\n      numberOfOnes = index + 1;\n      denseOrigoIndex = numberOfOnes;\n    }\n  }\n\n","sourceOld":"  private void readBlockHeader() throws IOException {\n    block = Short.toUnsignedInt(slice.readShort()) << 16;\n    assert block >= 0;\n    final int numValues = 1 + Short.toUnsignedInt(slice.readShort());\n    index = nextBlockIndex;\n    nextBlockIndex = index + numValues;\n    if (numValues <= MAX_ARRAY_LENGTH) {\n      method = Method.SPARSE;\n      blockEnd = slice.getFilePointer() + (numValues << 1);\n    } else if (numValues == 65536) {\n      method = Method.ALL;\n      blockEnd = slice.getFilePointer();\n      gap = block - index - 1;\n    } else {\n      method = Method.DENSE;\n      blockEnd = slice.getFilePointer() + (1 << 13);\n      wordIndex = -1;\n      numberOfOnes = index + 1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c74cb19c6e988ccfef4286a1f3f0e5930f0863e","date":1544534277,"type":3,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/IndexedDISI#readBlockHeader().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/IndexedDISI#readBlockHeader().mjava","sourceNew":"  private void readBlockHeader() throws IOException {\n    block = Short.toUnsignedInt(slice.readShort()) << 16;\n    assert block >= 0;\n    final int numValues = 1 + Short.toUnsignedInt(slice.readShort());\n    index = nextBlockIndex;\n    nextBlockIndex = index + numValues;\n    if (numValues <= MAX_ARRAY_LENGTH) {\n      method = Method.SPARSE;\n      blockEnd = slice.getFilePointer() + (numValues << 1);\n    } else if (numValues == 65536) {\n      method = Method.ALL;\n      blockEnd = slice.getFilePointer();\n      gap = block - index - 1;\n    } else {\n      method = Method.DENSE;\n      blockEnd = slice.getFilePointer() + (1 << 13);\n      wordIndex = -1;\n      numberOfOnes = index + 1;\n    }\n  }\n\n","sourceOld":"  private void readBlockHeader() throws IOException {\n    blockStart = slice.getFilePointer();\n    block = Short.toUnsignedInt(slice.readShort()) << 16;\n    assert block >= 0;\n    final int numValues = 1 + Short.toUnsignedInt(slice.readShort());\n    index = nextBlockIndex;\n    nextBlockIndex = index + numValues;\n    if (numValues <= MAX_ARRAY_LENGTH) {\n      method = Method.SPARSE;\n      blockEnd = slice.getFilePointer() + (numValues << 1);\n    } else if (numValues == 65536) {\n      method = Method.ALL;\n      blockEnd = slice.getFilePointer();\n      gap = block - index - 1;\n    } else {\n      method = Method.DENSE;\n      blockEnd = slice.getFilePointer() + (1 << 13);\n      wordIndex = -1;\n      numberOfOnes = index + 1;\n      denseOrigoIndex = numberOfOnes;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd70c9571310639a77f0123aea0db41077d9bb6","date":1544538617,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/IndexedDISI#readBlockHeader().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/IndexedDISI#readBlockHeader().mjava","sourceNew":"  private void readBlockHeader() throws IOException {\n    block = Short.toUnsignedInt(slice.readShort()) << 16;\n    assert block >= 0;\n    final int numValues = 1 + Short.toUnsignedInt(slice.readShort());\n    index = nextBlockIndex;\n    nextBlockIndex = index + numValues;\n    if (numValues <= MAX_ARRAY_LENGTH) {\n      method = Method.SPARSE;\n      blockEnd = slice.getFilePointer() + (numValues << 1);\n    } else if (numValues == 65536) {\n      method = Method.ALL;\n      blockEnd = slice.getFilePointer();\n      gap = block - index - 1;\n    } else {\n      method = Method.DENSE;\n      blockEnd = slice.getFilePointer() + (1 << 13);\n      wordIndex = -1;\n      numberOfOnes = index + 1;\n    }\n  }\n\n","sourceOld":"  private void readBlockHeader() throws IOException {\n    blockStart = slice.getFilePointer();\n    block = Short.toUnsignedInt(slice.readShort()) << 16;\n    assert block >= 0;\n    final int numValues = 1 + Short.toUnsignedInt(slice.readShort());\n    index = nextBlockIndex;\n    nextBlockIndex = index + numValues;\n    if (numValues <= MAX_ARRAY_LENGTH) {\n      method = Method.SPARSE;\n      blockEnd = slice.getFilePointer() + (numValues << 1);\n    } else if (numValues == 65536) {\n      method = Method.ALL;\n      blockEnd = slice.getFilePointer();\n      gap = block - index - 1;\n    } else {\n      method = Method.DENSE;\n      blockEnd = slice.getFilePointer() + (1 << 13);\n      wordIndex = -1;\n      numberOfOnes = index + 1;\n      denseOrigoIndex = numberOfOnes;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":5,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/IndexedDISI#readBlockHeader().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/IndexedDISI#readBlockHeader().mjava","sourceNew":"  private void readBlockHeader() throws IOException {\n    block = Short.toUnsignedInt(slice.readShort()) << 16;\n    assert block >= 0;\n    final int numValues = 1 + Short.toUnsignedInt(slice.readShort());\n    index = nextBlockIndex;\n    nextBlockIndex = index + numValues;\n    if (numValues <= MAX_ARRAY_LENGTH) {\n      method = Method.SPARSE;\n      blockEnd = slice.getFilePointer() + (numValues << 1);\n    } else if (numValues == 65536) {\n      method = Method.ALL;\n      blockEnd = slice.getFilePointer();\n      gap = block - index - 1;\n    } else {\n      method = Method.DENSE;\n      blockEnd = slice.getFilePointer() + (1 << 13);\n      wordIndex = -1;\n      numberOfOnes = index + 1;\n    }\n  }\n\n","sourceOld":"  private void readBlockHeader() throws IOException {\n    block = Short.toUnsignedInt(slice.readShort()) << 16;\n    assert block >= 0;\n    final int numValues = 1 + Short.toUnsignedInt(slice.readShort());\n    index = nextBlockIndex;\n    nextBlockIndex = index + numValues;\n    if (numValues <= MAX_ARRAY_LENGTH) {\n      method = Method.SPARSE;\n      blockEnd = slice.getFilePointer() + (numValues << 1);\n    } else if (numValues == 65536) {\n      method = Method.ALL;\n      blockEnd = slice.getFilePointer();\n      gap = block - index - 1;\n    } else {\n      method = Method.DENSE;\n      blockEnd = slice.getFilePointer() + (1 << 13);\n      wordIndex = -1;\n      numberOfOnes = index + 1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":5,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/IndexedDISI#readBlockHeader().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/IndexedDISI#readBlockHeader().mjava","sourceNew":"  private void readBlockHeader() throws IOException {\n    block = Short.toUnsignedInt(slice.readShort()) << 16;\n    assert block >= 0;\n    final int numValues = 1 + Short.toUnsignedInt(slice.readShort());\n    index = nextBlockIndex;\n    nextBlockIndex = index + numValues;\n    if (numValues <= MAX_ARRAY_LENGTH) {\n      method = Method.SPARSE;\n      blockEnd = slice.getFilePointer() + (numValues << 1);\n    } else if (numValues == 65536) {\n      method = Method.ALL;\n      blockEnd = slice.getFilePointer();\n      gap = block - index - 1;\n    } else {\n      method = Method.DENSE;\n      blockEnd = slice.getFilePointer() + (1 << 13);\n      wordIndex = -1;\n      numberOfOnes = index + 1;\n    }\n  }\n\n","sourceOld":"  private void readBlockHeader() throws IOException {\n    block = Short.toUnsignedInt(slice.readShort()) << 16;\n    assert block >= 0;\n    final int numValues = 1 + Short.toUnsignedInt(slice.readShort());\n    index = nextBlockIndex;\n    nextBlockIndex = index + numValues;\n    if (numValues <= MAX_ARRAY_LENGTH) {\n      method = Method.SPARSE;\n      blockEnd = slice.getFilePointer() + (numValues << 1);\n    } else if (numValues == 65536) {\n      method = Method.ALL;\n      blockEnd = slice.getFilePointer();\n      gap = block - index - 1;\n    } else {\n      method = Method.DENSE;\n      blockEnd = slice.getFilePointer() + (1 << 13);\n      wordIndex = -1;\n      numberOfOnes = index + 1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["cfd70c9571310639a77f0123aea0db41077d9bb6"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["cfd70c9571310639a77f0123aea0db41077d9bb6","03e17b020972a0d6e8d6823f545571a66646a167"],"cfd70c9571310639a77f0123aea0db41077d9bb6":["fb9d1512598fc72005b830d5e2b88e61a0f4b374","5c74cb19c6e988ccfef4286a1f3f0e5930f0863e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb9d1512598fc72005b830d5e2b88e61a0f4b374":["feec55b6e9aaab41be57a5001b31fa14c3925ae4"],"feec55b6e9aaab41be57a5001b31fa14c3925ae4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5c74cb19c6e988ccfef4286a1f3f0e5930f0863e":["fb9d1512598fc72005b830d5e2b88e61a0f4b374"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","feec55b6e9aaab41be57a5001b31fa14c3925ae4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03e17b020972a0d6e8d6823f545571a66646a167"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"cfd70c9571310639a77f0123aea0db41077d9bb6":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["feec55b6e9aaab41be57a5001b31fa14c3925ae4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"fb9d1512598fc72005b830d5e2b88e61a0f4b374":["cfd70c9571310639a77f0123aea0db41077d9bb6","5c74cb19c6e988ccfef4286a1f3f0e5930f0863e"],"feec55b6e9aaab41be57a5001b31fa14c3925ae4":["fb9d1512598fc72005b830d5e2b88e61a0f4b374","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"5c74cb19c6e988ccfef4286a1f3f0e5930f0863e":["cfd70c9571310639a77f0123aea0db41077d9bb6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}