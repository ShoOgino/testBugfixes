{"path":"modules/queries/src/test/org/apache/lucene/queries/ChainedFilterTest#testSingleFilter().mjava","commits":[{"id":"1f9f2355d68aab1348539f7a1603279405e566a4","date":1313634992,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/ChainedFilterTest#testSingleFilter().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/ChainedFilterTest#testSingleFilter().mjava","sourceNew":"  public void testSingleFilter() throws Exception {\n    ChainedFilter chain = getChainedFilter(new Filter[] {dateFilter}, null);\n\n    int numHits = searcher.search(query, chain, 1000).totalHits;\n    assertEquals(MAX, numHits);\n\n    chain = new ChainedFilter(new Filter[] {bobFilter});\n    numHits = searcher.search(query, chain, 1000).totalHits;\n    assertEquals(MAX / 2, numHits);\n    \n    chain = getChainedFilter(new Filter[] {bobFilter}, new int[] {ChainedFilter.AND});\n    TopDocs hits = searcher.search(query, chain, 1000);\n    numHits = hits.totalHits;\n    assertEquals(MAX / 2, numHits);\n    assertEquals(\"bob\", searcher.doc(hits.scoreDocs[0].doc).get(\"owner\"));\n    \n    chain = getChainedFilter(new Filter[] {bobFilter}, new int[] {ChainedFilter.ANDNOT});\n    hits = searcher.search(query, chain, 1000);\n    numHits = hits.totalHits;\n    assertEquals(MAX / 2, numHits);\n    assertEquals(\"sue\", searcher.doc(hits.scoreDocs[0].doc).get(\"owner\"));\n  }\n\n","sourceOld":"  public void testSingleFilter() throws Exception {\n    ChainedFilter chain = getChainedFilter(new Filter[] {dateFilter}, null);\n\n    int numHits = searcher.search(query, chain, 1000).totalHits;\n    assertEquals(MAX, numHits);\n\n    chain = new ChainedFilter(new Filter[] {bobFilter});\n    numHits = searcher.search(query, chain, 1000).totalHits;\n    assertEquals(MAX / 2, numHits);\n    \n    chain = getChainedFilter(new Filter[] {bobFilter}, new int[] {ChainedFilter.AND});\n    TopDocs hits = searcher.search(query, chain, 1000);\n    numHits = hits.totalHits;\n    assertEquals(MAX / 2, numHits);\n    assertEquals(\"bob\", searcher.doc(hits.scoreDocs[0].doc).get(\"owner\"));\n    \n    chain = getChainedFilter(new Filter[] {bobFilter}, new int[] {ChainedFilter.ANDNOT});\n    hits = searcher.search(query, chain, 1000);\n    numHits = hits.totalHits;\n    assertEquals(MAX / 2, numHits);\n    assertEquals(\"sue\", searcher.doc(hits.scoreDocs[0].doc).get(\"owner\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/ChainedFilterTest#testSingleFilter().mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/ChainedFilterTest#testSingleFilter().mjava","sourceNew":"  public void testSingleFilter() throws Exception {\n    ChainedFilter chain = getChainedFilter(new Filter[] {dateFilter}, null);\n\n    int numHits = searcher.search(query, chain, 1000).totalHits;\n    assertEquals(MAX, numHits);\n\n    chain = new ChainedFilter(new Filter[] {bobFilter});\n    numHits = searcher.search(query, chain, 1000).totalHits;\n    assertEquals(MAX / 2, numHits);\n    \n    chain = getChainedFilter(new Filter[] {bobFilter}, new int[] {ChainedFilter.AND});\n    TopDocs hits = searcher.search(query, chain, 1000);\n    numHits = hits.totalHits;\n    assertEquals(MAX / 2, numHits);\n    assertEquals(\"bob\", searcher.doc(hits.scoreDocs[0].doc).get(\"owner\"));\n    \n    chain = getChainedFilter(new Filter[] {bobFilter}, new int[] {ChainedFilter.ANDNOT});\n    hits = searcher.search(query, chain, 1000);\n    numHits = hits.totalHits;\n    assertEquals(MAX / 2, numHits);\n    assertEquals(\"sue\", searcher.doc(hits.scoreDocs[0].doc).get(\"owner\"));\n  }\n\n","sourceOld":"  public void testSingleFilter() throws Exception {\n    ChainedFilter chain = getChainedFilter(new Filter[] {dateFilter}, null);\n\n    int numHits = searcher.search(query, chain, 1000).totalHits;\n    assertEquals(MAX, numHits);\n\n    chain = new ChainedFilter(new Filter[] {bobFilter});\n    numHits = searcher.search(query, chain, 1000).totalHits;\n    assertEquals(MAX / 2, numHits);\n    \n    chain = getChainedFilter(new Filter[] {bobFilter}, new int[] {ChainedFilter.AND});\n    TopDocs hits = searcher.search(query, chain, 1000);\n    numHits = hits.totalHits;\n    assertEquals(MAX / 2, numHits);\n    assertEquals(\"bob\", searcher.doc(hits.scoreDocs[0].doc).get(\"owner\"));\n    \n    chain = getChainedFilter(new Filter[] {bobFilter}, new int[] {ChainedFilter.ANDNOT});\n    hits = searcher.search(query, chain, 1000);\n    numHits = hits.totalHits;\n    assertEquals(MAX / 2, numHits);\n    assertEquals(\"sue\", searcher.doc(hits.scoreDocs[0].doc).get(\"owner\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["1f9f2355d68aab1348539f7a1603279405e566a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"1f9f2355d68aab1348539f7a1603279405e566a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f9f2355d68aab1348539f7a1603279405e566a4"],"1f9f2355d68aab1348539f7a1603279405e566a4":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}