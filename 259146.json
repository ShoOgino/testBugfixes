{"path":"lucene/core/src/java/org/apache/lucene/codecs/MultiLevelSkipListReader#log(int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/MultiLevelSkipListReader#log(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/MultiLevelSkipListReader#log(int,int).mjava","sourceNew":"  /** returns x == 0 ? 0 : Math.floor(Math.log(x) / Math.log(base)) */\n  static int log(int x, int base) {\n    assert base >= 2;\n    int ret = 0;\n    long n = base; // needs to be a long to avoid overflow\n    while (x >= n) {\n      n *= base;\n      ret++;\n    }\n    return ret;\n  }\n\n","sourceOld":"  /** returns x == 0 ? 0 : Math.floor(Math.log(x) / Math.log(base)) */\n  static int log(int x, int base) {\n    assert base >= 2;\n    int ret = 0;\n    long n = base; // needs to be a long to avoid overflow\n    while (x >= n) {\n      n *= base;\n      ret++;\n    }\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f72b850f14bb4291a8c2728f0073d07da0462d8","date":1333634910,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/MathUtil#log(long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/MultiLevelSkipListReader#log(int,int).mjava","sourceNew":"  /** returns x == 0 ? 0 : Math.floor(Math.log(x) / Math.log(base)) */\n  public static int log(long x, int base) {\n    assert base > 1;\n    int ret = 0;\n    while (x >= base) {\n      x /= base;\n      ret++;\n    }\n    return ret;\n  }\n\n","sourceOld":"  /** returns x == 0 ? 0 : Math.floor(Math.log(x) / Math.log(base)) */\n  static int log(int x, int base) {\n    assert base >= 2;\n    int ret = 0;\n    long n = base; // needs to be a long to avoid overflow\n    while (x >= n) {\n      n *= base;\n      ret++;\n    }\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":["94f54b3a3266f6c4ec183e8748b1703d2c46efaa"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2f72b850f14bb4291a8c2728f0073d07da0462d8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2f72b850f14bb4291a8c2728f0073d07da0462d8"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["2f72b850f14bb4291a8c2728f0073d07da0462d8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2f72b850f14bb4291a8c2728f0073d07da0462d8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}