{"path":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Map,boolean,String).mjava","commits":[{"id":"c609b959cb2dad7c9d9b3237fa2b806629e9206d","date":1439303330,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Map,boolean,String).mjava","pathOld":"/dev/null","sourceNew":"  public static Object getObjectByPath(Map root, boolean onlyPrimitive, String hierarchy) {\n    return getObjectByPath(root, onlyPrimitive, StrUtils.splitSmart(hierarchy, '/'));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Map,boolean,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Map,boolean,String).mjava","sourceNew":"  public static Object getObjectByPath(Map root, boolean onlyPrimitive, String hierarchy) {\n    List<String> parts = StrUtils.splitSmart(hierarchy, '/');\n    if (parts.get(0).isEmpty()) parts.remove(0);\n    return getObjectByPath(root, onlyPrimitive, parts);\n  }\n\n","sourceOld":"  public static Object getObjectByPath(Map root, boolean onlyPrimitive, String hierarchy) {\n    return getObjectByPath(root, onlyPrimitive, StrUtils.splitSmart(hierarchy, '/'));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Map,boolean,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Map,boolean,String).mjava","sourceNew":"  public static Object getObjectByPath(Map root, boolean onlyPrimitive, String hierarchy) {\n    List<String> parts = StrUtils.splitSmart(hierarchy, '/');\n    if (parts.get(0).isEmpty()) parts.remove(0);\n    return getObjectByPath(root, onlyPrimitive, parts);\n  }\n\n","sourceOld":"  public static Object getObjectByPath(Map root, boolean onlyPrimitive, String hierarchy) {\n    return getObjectByPath(root, onlyPrimitive, StrUtils.splitSmart(hierarchy, '/'));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4a9a892a743a560d17851cd4ce6cb0aaa2d8712","date":1498109521,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Object,boolean,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Map,boolean,String).mjava","sourceNew":"  public static Object getObjectByPath(Object root, boolean onlyPrimitive, String hierarchy) {\n    if(root == null) return null;\n    if(!isMapLike(root)) throw new RuntimeException(\"must be a Map or NamedList\");\n    List<String> parts = StrUtils.splitSmart(hierarchy, '/');\n    if (parts.get(0).isEmpty()) parts.remove(0);\n    return getObjectByPath(root, onlyPrimitive, parts);\n  }\n\n","sourceOld":"  public static Object getObjectByPath(Map root, boolean onlyPrimitive, String hierarchy) {\n    List<String> parts = StrUtils.splitSmart(hierarchy, '/');\n    if (parts.get(0).isEmpty()) parts.remove(0);\n    return getObjectByPath(root, onlyPrimitive, parts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Object,boolean,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Map,boolean,String).mjava","sourceNew":"  public static Object getObjectByPath(Object root, boolean onlyPrimitive, String hierarchy) {\n    List<String> parts = StrUtils.splitSmart(hierarchy, '/');\n    if (parts.get(0).isEmpty()) parts.remove(0);\n    return getObjectByPath(root, onlyPrimitive, parts);\n  }\n\n","sourceOld":"  public static Object getObjectByPath(Map root, boolean onlyPrimitive, String hierarchy) {\n    List<String> parts = StrUtils.splitSmart(hierarchy, '/');\n    if (parts.get(0).isEmpty()) parts.remove(0);\n    return getObjectByPath(root, onlyPrimitive, parts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Map,boolean,String).mjava","sourceNew":null,"sourceOld":"  public static Object getObjectByPath(Map root, boolean onlyPrimitive, String hierarchy) {\n    List<String> parts = StrUtils.splitSmart(hierarchy, '/');\n    if (parts.get(0).isEmpty()) parts.remove(0);\n    return getObjectByPath(root, onlyPrimitive, parts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4a9a892a743a560d17851cd4ce6cb0aaa2d8712":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["c609b959cb2dad7c9d9b3237fa2b806629e9206d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["c609b959cb2dad7c9d9b3237fa2b806629e9206d","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"c609b959cb2dad7c9d9b3237fa2b806629e9206d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","d4a9a892a743a560d17851cd4ce6cb0aaa2d8712"],"28288370235ed02234a64753cdbf0c6ec096304a":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","d4a9a892a743a560d17851cd4ce6cb0aaa2d8712"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"d4a9a892a743a560d17851cd4ce6cb0aaa2d8712":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["d4a9a892a743a560d17851cd4ce6cb0aaa2d8712","7c3523a0ab04c3002eee3896c75ea5f10f388bcc","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c609b959cb2dad7c9d9b3237fa2b806629e9206d"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"c609b959cb2dad7c9d9b3237fa2b806629e9206d":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}