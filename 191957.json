{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/path/ReversePathHierarchyTokenizer#ReversePathHierarchyTokenizer(AttributeFactory,int,char,char,int).mjava","commits":[{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/path/ReversePathHierarchyTokenizer#ReversePathHierarchyTokenizer(AttributeFactory,int,char,char,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/path/ReversePathHierarchyTokenizer#ReversePathHierarchyTokenizer(AttributeFactory,Reader,int,char,char,int).mjava","sourceNew":"  public ReversePathHierarchyTokenizer\n      (AttributeFactory factory, int bufferSize, char delimiter, char replacement, int skip) {\n    super(factory);\n    if (bufferSize < 0) {\n      throw new IllegalArgumentException(\"bufferSize cannot be negative\");\n    }\n    if (skip < 0) {\n      throw new IllegalArgumentException(\"skip cannot be negative\");\n    }\n    termAtt.resizeBuffer(bufferSize);\n    this.delimiter = delimiter;\n    this.replacement = replacement;\n    this.skip = skip;\n    resultToken = new StringBuilder(bufferSize);\n    resultTokenBuffer = new char[bufferSize];\n    delimiterPositions = new ArrayList<Integer>(bufferSize/10);\n  }\n\n","sourceOld":"  public ReversePathHierarchyTokenizer\n      (AttributeFactory factory, Reader input, int bufferSize, char delimiter, char replacement, int skip) {\n    super(factory, input);\n    if (bufferSize < 0) {\n      throw new IllegalArgumentException(\"bufferSize cannot be negative\");\n    }\n    if (skip < 0) {\n      throw new IllegalArgumentException(\"skip cannot be negative\");\n    }\n    termAtt.resizeBuffer(bufferSize);\n    this.delimiter = delimiter;\n    this.replacement = replacement;\n    this.skip = skip;\n    resultToken = new StringBuilder(bufferSize);\n    resultTokenBuffer = new char[bufferSize];\n    delimiterPositions = new ArrayList<Integer>(bufferSize/10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/path/ReversePathHierarchyTokenizer#ReversePathHierarchyTokenizer(AttributeFactory,int,char,char,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/path/ReversePathHierarchyTokenizer#ReversePathHierarchyTokenizer(AttributeFactory,int,char,char,int).mjava","sourceNew":"  public ReversePathHierarchyTokenizer\n      (AttributeFactory factory, int bufferSize, char delimiter, char replacement, int skip) {\n    super(factory);\n    if (bufferSize < 0) {\n      throw new IllegalArgumentException(\"bufferSize cannot be negative\");\n    }\n    if (skip < 0) {\n      throw new IllegalArgumentException(\"skip cannot be negative\");\n    }\n    termAtt.resizeBuffer(bufferSize);\n    this.delimiter = delimiter;\n    this.replacement = replacement;\n    this.skip = skip;\n    resultToken = new StringBuilder(bufferSize);\n    resultTokenBuffer = new char[bufferSize];\n    delimiterPositions = new ArrayList<>(bufferSize/10);\n  }\n\n","sourceOld":"  public ReversePathHierarchyTokenizer\n      (AttributeFactory factory, int bufferSize, char delimiter, char replacement, int skip) {\n    super(factory);\n    if (bufferSize < 0) {\n      throw new IllegalArgumentException(\"bufferSize cannot be negative\");\n    }\n    if (skip < 0) {\n      throw new IllegalArgumentException(\"skip cannot be negative\");\n    }\n    termAtt.resizeBuffer(bufferSize);\n    this.delimiter = delimiter;\n    this.replacement = replacement;\n    this.skip = skip;\n    resultToken = new StringBuilder(bufferSize);\n    resultTokenBuffer = new char[bufferSize];\n    delimiterPositions = new ArrayList<Integer>(bufferSize/10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}