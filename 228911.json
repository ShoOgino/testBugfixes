{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask#PerfTask(PerfRunData).mjava","commits":[{"id":"b2e70b697d9f5a6130848741a4f0cdc08a1fe258","date":1168661303,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask#PerfTask(PerfRunData).mjava","pathOld":"/dev/null","sourceNew":"  public PerfTask(PerfRunData runData) {\r\n    this();\r\n    this.runData = runData;\r\n    this.maxDepthLogStart = runData.getConfig().get(\"task.max.depth.log\",0);\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3738fa43eaa87dc7b393fe98b04cde1019e20bac","date":1175557034,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask#PerfTask(PerfRunData).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask#PerfTask(PerfRunData).mjava","sourceNew":"  public PerfTask(PerfRunData runData) {\n    this();\n    this.runData = runData;\n    this.maxDepthLogStart = runData.getConfig().get(\"task.max.depth.log\",0);\n  }\n\n","sourceOld":"  public PerfTask(PerfRunData runData) {\r\n    this();\r\n    this.runData = runData;\r\n    this.maxDepthLogStart = runData.getConfig().get(\"task.max.depth.log\",0);\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b","date":1245355139,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask#PerfTask(PerfRunData).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask#PerfTask(PerfRunData).mjava","sourceNew":"  public PerfTask(PerfRunData runData) {\n    this();\n    this.runData = runData;\n    Config config = runData.getConfig();\n    this.maxDepthLogStart = config.get(\"task.max.depth.log\",0);\n    logStep = config.get(\"log.step\", DEFAULT_LOG_STEP);\n    // To avoid the check 'if (logStep > 0)' in tearDown(). This effectively\n    // turns logging off.\n    if (logStep <= 0) {\n      logStep = Integer.MAX_VALUE;\n    }\n    checkObsoleteSettings(config);\n  }\n\n","sourceOld":"  public PerfTask(PerfRunData runData) {\n    this();\n    this.runData = runData;\n    this.maxDepthLogStart = runData.getConfig().get(\"task.max.depth.log\",0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34963ae3bf414fdcce901a666a846f23786ca11a","date":1249391103,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask#PerfTask(PerfRunData).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask#PerfTask(PerfRunData).mjava","sourceNew":"  public PerfTask(PerfRunData runData) {\n    this();\n    this.runData = runData;\n    Config config = runData.getConfig();\n    this.maxDepthLogStart = config.get(\"task.max.depth.log\",0);\n\n    String logStepAtt = \"log.step\";\n    // TODO (1.5): call getClass().getSimpleName() instead.\n    String taskName = getClass().getName();\n    int idx = taskName.lastIndexOf('.');\n    // To support test internal classes. when we move to getSimpleName, this can be removed.\n    int idx2 = taskName.indexOf('$', idx);\n    if (idx2 != -1) idx = idx2;\n    String taskLogStepAtt = \"log.step.\" + taskName.substring(idx + 1, taskName.length() - 4 /* w/o the 'Task' part */);\n    if (config.get(taskLogStepAtt, null) != null) {\n      logStepAtt = taskLogStepAtt;\n    }\n\n    // It's important to read this from Config, to support vals-by-round.\n    logStep = config.get(logStepAtt, DEFAULT_LOG_STEP);\n    // To avoid the check 'if (logStep > 0)' in tearDown(). This effectively\n    // turns logging off.\n    if (logStep <= 0) {\n      logStep = Integer.MAX_VALUE;\n    }\n    checkObsoleteSettings(config);\n  }\n\n","sourceOld":"  public PerfTask(PerfRunData runData) {\n    this();\n    this.runData = runData;\n    Config config = runData.getConfig();\n    this.maxDepthLogStart = config.get(\"task.max.depth.log\",0);\n    logStep = config.get(\"log.step\", DEFAULT_LOG_STEP);\n    // To avoid the check 'if (logStep > 0)' in tearDown(). This effectively\n    // turns logging off.\n    if (logStep <= 0) {\n      logStep = Integer.MAX_VALUE;\n    }\n    checkObsoleteSettings(config);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2aa9553aad4bb588f33e036ce51485a850a2917","date":1257895368,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask#PerfTask(PerfRunData).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask#PerfTask(PerfRunData).mjava","sourceNew":"  public PerfTask(PerfRunData runData) {\n    this();\n    this.runData = runData;\n    Config config = runData.getConfig();\n    this.maxDepthLogStart = config.get(\"task.max.depth.log\",0);\n\n    String logStepAtt = \"log.step\";\n    // TODO (1.5): call getClass().getSimpleName() instead.\n    String taskName = getClass().getName();\n    int idx = taskName.lastIndexOf('.');\n    // To support test internal classes. when we move to getSimpleName, this can be removed.\n    int idx2 = taskName.indexOf('$', idx);\n    if (idx2 != -1) idx = idx2;\n    String taskLogStepAtt = \"log.step.\" + taskName.substring(idx + 1, taskName.length() - 4 /* w/o the 'Task' part */);\n    if (config.get(taskLogStepAtt, null) != null) {\n      logStepAtt = taskLogStepAtt;\n    }\n\n    // It's important to read this from Config, to support vals-by-round.\n    logStep = config.get(logStepAtt, DEFAULT_LOG_STEP);\n    // To avoid the check 'if (logStep > 0)' in tearDown(). This effectively\n    // turns logging off.\n    if (logStep <= 0) {\n      logStep = Integer.MAX_VALUE;\n    }\n  }\n\n","sourceOld":"  public PerfTask(PerfRunData runData) {\n    this();\n    this.runData = runData;\n    Config config = runData.getConfig();\n    this.maxDepthLogStart = config.get(\"task.max.depth.log\",0);\n\n    String logStepAtt = \"log.step\";\n    // TODO (1.5): call getClass().getSimpleName() instead.\n    String taskName = getClass().getName();\n    int idx = taskName.lastIndexOf('.');\n    // To support test internal classes. when we move to getSimpleName, this can be removed.\n    int idx2 = taskName.indexOf('$', idx);\n    if (idx2 != -1) idx = idx2;\n    String taskLogStepAtt = \"log.step.\" + taskName.substring(idx + 1, taskName.length() - 4 /* w/o the 'Task' part */);\n    if (config.get(taskLogStepAtt, null) != null) {\n      logStepAtt = taskLogStepAtt;\n    }\n\n    // It's important to read this from Config, to support vals-by-round.\n    logStep = config.get(logStepAtt, DEFAULT_LOG_STEP);\n    // To avoid the check 'if (logStep > 0)' in tearDown(). This effectively\n    // turns logging off.\n    if (logStep <= 0) {\n      logStep = Integer.MAX_VALUE;\n    }\n    checkObsoleteSettings(config);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask#PerfTask(PerfRunData).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask#PerfTask(PerfRunData).mjava","sourceNew":"  public PerfTask(PerfRunData runData) {\n    this();\n    this.runData = runData;\n    Config config = runData.getConfig();\n    this.maxDepthLogStart = config.get(\"task.max.depth.log\",0);\n\n    String logStepAtt = \"log.step\";\n    // TODO (1.5): call getClass().getSimpleName() instead.\n    String taskName = getClass().getName();\n    int idx = taskName.lastIndexOf('.');\n    // To support test internal classes. when we move to getSimpleName, this can be removed.\n    int idx2 = taskName.indexOf('$', idx);\n    if (idx2 != -1) idx = idx2;\n    String taskLogStepAtt = \"log.step.\" + taskName.substring(idx + 1, taskName.length() - 4 /* w/o the 'Task' part */);\n    if (config.get(taskLogStepAtt, null) != null) {\n      logStepAtt = taskLogStepAtt;\n    }\n\n    // It's important to read this from Config, to support vals-by-round.\n    logStep = config.get(logStepAtt, DEFAULT_LOG_STEP);\n    // To avoid the check 'if (logStep > 0)' in tearDown(). This effectively\n    // turns logging off.\n    if (logStep <= 0) {\n      logStep = Integer.MAX_VALUE;\n    }\n  }\n\n","sourceOld":"  public PerfTask(PerfRunData runData) {\n    this();\n    this.runData = runData;\n    Config config = runData.getConfig();\n    this.maxDepthLogStart = config.get(\"task.max.depth.log\",0);\n\n    String logStepAtt = \"log.step\";\n    // TODO (1.5): call getClass().getSimpleName() instead.\n    String taskName = getClass().getName();\n    int idx = taskName.lastIndexOf('.');\n    // To support test internal classes. when we move to getSimpleName, this can be removed.\n    int idx2 = taskName.indexOf('$', idx);\n    if (idx2 != -1) idx = idx2;\n    String taskLogStepAtt = \"log.step.\" + taskName.substring(idx + 1, taskName.length() - 4 /* w/o the 'Task' part */);\n    if (config.get(taskLogStepAtt, null) != null) {\n      logStepAtt = taskLogStepAtt;\n    }\n\n    // It's important to read this from Config, to support vals-by-round.\n    logStep = config.get(logStepAtt, DEFAULT_LOG_STEP);\n    // To avoid the check 'if (logStep > 0)' in tearDown(). This effectively\n    // turns logging off.\n    if (logStep <= 0) {\n      logStep = Integer.MAX_VALUE;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f2aa9553aad4bb588f33e036ce51485a850a2917":["34963ae3bf414fdcce901a666a846f23786ca11a"],"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"34963ae3bf414fdcce901a666a846f23786ca11a":["6944b9fa6d8ef96b83ae2d3a4332d03b3857355b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["b2e70b697d9f5a6130848741a4f0cdc08a1fe258"],"b2e70b697d9f5a6130848741a4f0cdc08a1fe258":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f2aa9553aad4bb588f33e036ce51485a850a2917"]},"commit2Childs":{"f2aa9553aad4bb588f33e036ce51485a850a2917":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b":["34963ae3bf414fdcce901a666a846f23786ca11a"],"34963ae3bf414fdcce901a666a846f23786ca11a":["f2aa9553aad4bb588f33e036ce51485a850a2917"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b2e70b697d9f5a6130848741a4f0cdc08a1fe258"],"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["6944b9fa6d8ef96b83ae2d3a4332d03b3857355b"],"b2e70b697d9f5a6130848741a4f0cdc08a1fe258":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}