{"path":"src/test/org/apache/lucene/search/TestPhraseQuery#testWrappedPhrase().mjava","commits":[{"id":"71776a043ec5499f36208dcdf114f371cbbb27f5","date":1132623984,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhraseQuery#testWrappedPhrase().mjava","pathOld":"/dev/null","sourceNew":"  public void testWrappedPhrase() throws IOException {\n    query.add(new Term(\"repeated\", \"first\"));\n    query.add(new Term(\"repeated\", \"part\"));\n    query.add(new Term(\"repeated\", \"second\"));\n    query.add(new Term(\"repeated\", \"part\"));\n    query.setSlop(99);\n\n    Hits hits = searcher.search(query);\n    assertEquals(0, hits.length());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b3e493496c35fb4f17315b8827d1ba1ae1585554"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aabae793f43472efdf1dcdaae4e01e28cfc23ccd","date":1161750034,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhraseQuery#testWrappedPhrase().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhraseQuery#testWrappedPhrase().mjava","sourceNew":"  public void testWrappedPhrase() throws IOException {\n    query.add(new Term(\"repeated\", \"first\"));\n    query.add(new Term(\"repeated\", \"part\"));\n    query.add(new Term(\"repeated\", \"second\"));\n    query.add(new Term(\"repeated\", \"part\"));\n    query.setSlop(99);\n\n    Hits hits = searcher.search(query);\n    assertEquals(0, hits.length());\n    QueryUtils.check(query,searcher);\n\n  }\n\n","sourceOld":"  public void testWrappedPhrase() throws IOException {\n    query.add(new Term(\"repeated\", \"first\"));\n    query.add(new Term(\"repeated\", \"part\"));\n    query.add(new Term(\"repeated\", \"second\"));\n    query.add(new Term(\"repeated\", \"part\"));\n    query.setSlop(99);\n\n    Hits hits = searcher.search(query);\n    assertEquals(0, hits.length());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3e493496c35fb4f17315b8827d1ba1ae1585554","date":1177392767,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhraseQuery#testWrappedPhrase().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhraseQuery#testWrappedPhrase().mjava","sourceNew":"  public void testWrappedPhrase() throws IOException {\n    query.add(new Term(\"repeated\", \"first\"));\n    query.add(new Term(\"repeated\", \"part\"));\n    query.add(new Term(\"repeated\", \"second\"));\n    query.add(new Term(\"repeated\", \"part\"));\n    query.setSlop(100);\n\n    Hits hits = searcher.search(query);\n    assertEquals(\"slop of 100 just right\", 1, hits.length());\n    QueryUtils.check(query,searcher);\n\n    query.setSlop(99);\n\n    hits = searcher.search(query);\n    assertEquals(\"slop of 99 not enough\", 0, hits.length());\n    QueryUtils.check(query,searcher);\n  }\n\n","sourceOld":"  public void testWrappedPhrase() throws IOException {\n    query.add(new Term(\"repeated\", \"first\"));\n    query.add(new Term(\"repeated\", \"part\"));\n    query.add(new Term(\"repeated\", \"second\"));\n    query.add(new Term(\"repeated\", \"part\"));\n    query.setSlop(99);\n\n    Hits hits = searcher.search(query);\n    assertEquals(0, hits.length());\n    QueryUtils.check(query,searcher);\n\n  }\n\n","bugFix":["71776a043ec5499f36208dcdf114f371cbbb27f5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhraseQuery#testWrappedPhrase().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhraseQuery#testWrappedPhrase().mjava","sourceNew":"  public void testWrappedPhrase() throws IOException {\n    query.add(new Term(\"repeated\", \"first\"));\n    query.add(new Term(\"repeated\", \"part\"));\n    query.add(new Term(\"repeated\", \"second\"));\n    query.add(new Term(\"repeated\", \"part\"));\n    query.setSlop(100);\n\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"slop of 100 just right\", 1, hits.length);\n    QueryUtils.check(query,searcher);\n\n    query.setSlop(99);\n\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"slop of 99 not enough\", 0, hits.length);\n    QueryUtils.check(query,searcher);\n  }\n\n","sourceOld":"  public void testWrappedPhrase() throws IOException {\n    query.add(new Term(\"repeated\", \"first\"));\n    query.add(new Term(\"repeated\", \"part\"));\n    query.add(new Term(\"repeated\", \"second\"));\n    query.add(new Term(\"repeated\", \"part\"));\n    query.setSlop(100);\n\n    Hits hits = searcher.search(query);\n    assertEquals(\"slop of 100 just right\", 1, hits.length());\n    QueryUtils.check(query,searcher);\n\n    query.setSlop(99);\n\n    hits = searcher.search(query);\n    assertEquals(\"slop of 99 not enough\", 0, hits.length());\n    QueryUtils.check(query,searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testWrappedPhrase().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhraseQuery#testWrappedPhrase().mjava","sourceNew":"  public void testWrappedPhrase() throws IOException {\n    query.add(new Term(\"repeated\", \"first\"));\n    query.add(new Term(\"repeated\", \"part\"));\n    query.add(new Term(\"repeated\", \"second\"));\n    query.add(new Term(\"repeated\", \"part\"));\n    query.setSlop(100);\n\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"slop of 100 just right\", 1, hits.length);\n    QueryUtils.check(query,searcher);\n\n    query.setSlop(99);\n\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"slop of 99 not enough\", 0, hits.length);\n    QueryUtils.check(query,searcher);\n  }\n\n","sourceOld":"  public void testWrappedPhrase() throws IOException {\n    query.add(new Term(\"repeated\", \"first\"));\n    query.add(new Term(\"repeated\", \"part\"));\n    query.add(new Term(\"repeated\", \"second\"));\n    query.add(new Term(\"repeated\", \"part\"));\n    query.setSlop(100);\n\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"slop of 100 just right\", 1, hits.length);\n    QueryUtils.check(query,searcher);\n\n    query.setSlop(99);\n\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"slop of 99 not enough\", 0, hits.length);\n    QueryUtils.check(query,searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"71776a043ec5499f36208dcdf114f371cbbb27f5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b3e493496c35fb4f17315b8827d1ba1ae1585554":["aabae793f43472efdf1dcdaae4e01e28cfc23ccd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["b3e493496c35fb4f17315b8827d1ba1ae1585554"],"aabae793f43472efdf1dcdaae4e01e28cfc23ccd":["71776a043ec5499f36208dcdf114f371cbbb27f5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["5af07783dbc171e26a694c4f7d735e30c2769faa"]},"commit2Childs":{"71776a043ec5499f36208dcdf114f371cbbb27f5":["aabae793f43472efdf1dcdaae4e01e28cfc23ccd"],"b3e493496c35fb4f17315b8827d1ba1ae1585554":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["71776a043ec5499f36208dcdf114f371cbbb27f5"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"aabae793f43472efdf1dcdaae4e01e28cfc23ccd":["b3e493496c35fb4f17315b8827d1ba1ae1585554"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}