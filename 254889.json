{"path":"src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","commits":[{"id":"c4ff8864209d2e972cb4393600c26082f9a6533d","date":1239297466,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"/dev/null","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(new Field(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    r2.close();\n    writer.close();\n    \n    IndexReader r3 = IndexReader.open(dir1);\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["537382020d6797489b93fa8aeb62495d5018b0ba"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(new Field(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    r2.close();\n    writer.close();\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(new Field(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    r2.close();\n    writer.close();\n    \n    IndexReader r3 = IndexReader.open(dir1);\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(new Field(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    r2.close();\n    writer.close();\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(new Field(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    r2.close();\n    writer.close();\n    \n    IndexReader r3 = IndexReader.open(dir1);\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"537382020d6797489b93fa8aeb62495d5018b0ba","date":1255718738,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(new Field(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n                             IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(new Field(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    r2.close();\n    writer.close();\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(Version.LUCENE_CURRENT),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(new Field(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, new WhitespaceAnalyzer(Version.LUCENE_CURRENT),\n                             IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(new Field(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n                             IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(new Field(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n                             IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(Version.LUCENE_CURRENT),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(new Field(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, new WhitespaceAnalyzer(Version.LUCENE_CURRENT),\n                             IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT));\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(new Field(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(new Field(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n                             IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(new Field(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n                             IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT));\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(new Field(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(new Field(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(new Field(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n                             IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(new Field(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(new Field(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["537382020d6797489b93fa8aeb62495d5018b0ba"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["c4ff8864209d2e972cb4393600c26082f9a6533d","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"c4ff8864209d2e972cb4393600c26082f9a6533d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"537382020d6797489b93fa8aeb62495d5018b0ba":["0a046c0c310bc77931fc8441bd920053b607dd14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"0a046c0c310bc77931fc8441bd920053b607dd14":["537382020d6797489b93fa8aeb62495d5018b0ba"],"c4ff8864209d2e972cb4393600c26082f9a6533d":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"537382020d6797489b93fa8aeb62495d5018b0ba":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}