{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#open().mjava","commits":[{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/SolrStream#open().mjava","sourceNew":"  /**\n  * Opens the stream to a single Solr instance.\n  **/\n\n  public void open() throws IOException {\n\n    if(cache == null) {\n      client = new HttpSolrClient(baseUrl);\n    } else {\n      client = cache.getHttpSolrClient(baseUrl);\n    }\n\n    try {\n      jsonTupleStream = JSONTupleStream.create(client, loadParams(params));\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  /**\n  * Opens the stream to a single Solr instance.\n  **/\n\n  public void open() throws IOException {\n\n    if(cache == null) {\n      client = new HttpSolrClient(baseUrl);\n    } else {\n      client = cache.getHttpSolrClient(baseUrl);\n    }\n\n    try {\n      jsonTupleStream = JSONTupleStream.create(client, loadParams(params));\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10b9c6c42133576daaccbd79bd04c88511b9caca","date":1455930223,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#open().mjava","sourceNew":"  /**\n  * Opens the stream to a single Solr instance.\n  **/\n\n  public void open() throws IOException {\n\n\n    if(cache == null) {\n      client = new HttpSolrClient(baseUrl);\n    } else {\n      client = cache.getHttpSolrClient(baseUrl);\n    }\n\n    try {\n      jsonTupleStream = JSONTupleStream.create(client, loadParams(params));\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  /**\n  * Opens the stream to a single Solr instance.\n  **/\n\n  public void open() throws IOException {\n\n    if(cache == null) {\n      client = new HttpSolrClient(baseUrl);\n    } else {\n      client = cache.getHttpSolrClient(baseUrl);\n    }\n\n    try {\n      jsonTupleStream = JSONTupleStream.create(client, loadParams(params));\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#open().mjava","sourceNew":"  /**\n  * Opens the stream to a single Solr instance.\n  **/\n\n  public void open() throws IOException {\n\n\n    if(cache == null) {\n      client = new HttpSolrClient.Builder(baseUrl).build();\n    } else {\n      client = cache.getHttpSolrClient(baseUrl);\n    }\n\n    try {\n      jsonTupleStream = JSONTupleStream.create(client, loadParams(params));\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  /**\n  * Opens the stream to a single Solr instance.\n  **/\n\n  public void open() throws IOException {\n\n\n    if(cache == null) {\n      client = new HttpSolrClient(baseUrl);\n    } else {\n      client = cache.getHttpSolrClient(baseUrl);\n    }\n\n    try {\n      jsonTupleStream = JSONTupleStream.create(client, loadParams(params));\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#open().mjava","sourceNew":"  /**\n  * Opens the stream to a single Solr instance.\n  **/\n\n  public void open() throws IOException {\n\n\n    if(cache == null) {\n      client = new HttpSolrClient.Builder(baseUrl).build();\n    } else {\n      client = cache.getHttpSolrClient(baseUrl);\n    }\n\n    try {\n      jsonTupleStream = JSONTupleStream.create(client, loadParams(params));\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  /**\n  * Opens the stream to a single Solr instance.\n  **/\n\n  public void open() throws IOException {\n\n\n    if(cache == null) {\n      client = new HttpSolrClient(baseUrl);\n    } else {\n      client = cache.getHttpSolrClient(baseUrl);\n    }\n\n    try {\n      jsonTupleStream = JSONTupleStream.create(client, loadParams(params));\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a6fbf1484b3c2b38b75d59998de5fe4330b6b40","date":1478163495,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#open().mjava","sourceNew":"  /**\n  * Opens the stream to a single Solr instance.\n  **/\n\n  public void open() throws IOException {\n\n\n    if(cache == null) {\n      client = new HttpSolrClient.Builder(baseUrl).build();\n    } else {\n      client = cache.getHttpSolrClient(baseUrl);\n    }\n\n    try {\n      tupleStreamParser = constructParser(client, loadParams(params));\n    } catch (Exception e) {\n      throw new IOException(\"params \" + params, e);\n    }\n  }\n\n","sourceOld":"  /**\n  * Opens the stream to a single Solr instance.\n  **/\n\n  public void open() throws IOException {\n\n\n    if(cache == null) {\n      client = new HttpSolrClient.Builder(baseUrl).build();\n    } else {\n      client = cache.getHttpSolrClient(baseUrl);\n    }\n\n    try {\n      jsonTupleStream = JSONTupleStream.create(client, loadParams(params));\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#open().mjava","sourceNew":"  /**\n  * Opens the stream to a single Solr instance.\n  **/\n\n  public void open() throws IOException {\n\n\n    if(cache == null) {\n      client = new HttpSolrClient.Builder(baseUrl).build();\n    } else {\n      client = cache.getHttpSolrClient(baseUrl);\n    }\n\n    try {\n      tupleStreamParser = constructParser(client, loadParams(params));\n    } catch (Exception e) {\n      throw new IOException(\"params \" + params, e);\n    }\n  }\n\n","sourceOld":"  /**\n  * Opens the stream to a single Solr instance.\n  **/\n\n  public void open() throws IOException {\n\n\n    if(cache == null) {\n      client = new HttpSolrClient.Builder(baseUrl).build();\n    } else {\n      client = cache.getHttpSolrClient(baseUrl);\n    }\n\n    try {\n      jsonTupleStream = JSONTupleStream.create(client, loadParams(params));\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c969f15cd04d31e520319c619a445ae21f02d72","date":1479263638,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#open().mjava","sourceNew":"  /**\n  * Opens the stream to a single Solr instance.\n  **/\n\n  public void open() throws IOException {\n    if(cache == null) {\n      client = new HttpSolrClient.Builder(baseUrl).build();\n    } else {\n      client = cache.getHttpSolrClient(baseUrl);\n    }\n\n    try {\n      tupleStreamParser = constructParser(client, loadParams(params));\n    } catch (Exception e) {\n      throw new IOException(\"params \" + params, e);\n    }\n  }\n\n","sourceOld":"  /**\n  * Opens the stream to a single Solr instance.\n  **/\n\n  public void open() throws IOException {\n\n\n    if(cache == null) {\n      client = new HttpSolrClient.Builder(baseUrl).build();\n    } else {\n      client = cache.getHttpSolrClient(baseUrl);\n    }\n\n    try {\n      tupleStreamParser = constructParser(client, loadParams(params));\n    } catch (Exception e) {\n      throw new IOException(\"params \" + params, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#open().mjava","sourceNew":"  /**\n  * Opens the stream to a single Solr instance.\n  **/\n\n  public void open() throws IOException {\n    if(cache == null) {\n      client = new HttpSolrClient.Builder(baseUrl).build();\n    } else {\n      client = cache.getHttpSolrClient(baseUrl);\n    }\n\n    try {\n      tupleStreamParser = constructParser(client, loadParams(params));\n    } catch (Exception e) {\n      throw new IOException(\"params \" + params, e);\n    }\n  }\n\n","sourceOld":"  /**\n  * Opens the stream to a single Solr instance.\n  **/\n\n  public void open() throws IOException {\n\n\n    if(cache == null) {\n      client = new HttpSolrClient.Builder(baseUrl).build();\n    } else {\n      client = cache.getHttpSolrClient(baseUrl);\n    }\n\n    try {\n      tupleStreamParser = constructParser(client, loadParams(params));\n    } catch (Exception e) {\n      throw new IOException(\"params \" + params, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70d9c44f68e848648da304352cf7c045c33148f4","date":1557331987,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#open().mjava","sourceNew":"  /**\n  * Opens the stream to a single Solr instance.\n  **/\n\n  public void open() throws IOException {\n    if(cache == null) {\n      client = new HttpSolrClient.Builder(baseUrl).build();\n    } else {\n      client = cache.getHttpSolrClient(baseUrl);\n    }\n\n    try {\n      SolrParams requestParams = loadParams(params);\n      if (!distrib) {\n        ((ModifiableSolrParams) requestParams).add(\"distrib\",\"false\");\n      }\n      tupleStreamParser = constructParser(client, requestParams);\n    } catch (Exception e) {\n      throw new IOException(\"params \" + params, e);\n    }\n  }\n\n","sourceOld":"  /**\n  * Opens the stream to a single Solr instance.\n  **/\n\n  public void open() throws IOException {\n    if(cache == null) {\n      client = new HttpSolrClient.Builder(baseUrl).build();\n    } else {\n      client = cache.getHttpSolrClient(baseUrl);\n    }\n\n    try {\n      tupleStreamParser = constructParser(client, loadParams(params));\n    } catch (Exception e) {\n      throw new IOException(\"params \" + params, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"10b9c6c42133576daaccbd79bd04c88511b9caca":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["10b9c6c42133576daaccbd79bd04c88511b9caca"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","3a6fbf1484b3c2b38b75d59998de5fe4330b6b40"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["9720b151fde2073f4e401450f4574e5f31c2d0ff","8c969f15cd04d31e520319c619a445ae21f02d72"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["10b9c6c42133576daaccbd79bd04c88511b9caca","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"8c969f15cd04d31e520319c619a445ae21f02d72":["3a6fbf1484b3c2b38b75d59998de5fe4330b6b40"],"3a6fbf1484b3c2b38b75d59998de5fe4330b6b40":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70d9c44f68e848648da304352cf7c045c33148f4"],"70d9c44f68e848648da304352cf7c045c33148f4":["8c969f15cd04d31e520319c619a445ae21f02d72"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["10b9c6c42133576daaccbd79bd04c88511b9caca"],"10b9c6c42133576daaccbd79bd04c88511b9caca":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["9720b151fde2073f4e401450f4574e5f31c2d0ff","3a6fbf1484b3c2b38b75d59998de5fe4330b6b40"],"8c969f15cd04d31e520319c619a445ae21f02d72":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","70d9c44f68e848648da304352cf7c045c33148f4"],"3a6fbf1484b3c2b38b75d59998de5fe4330b6b40":["9720b151fde2073f4e401450f4574e5f31c2d0ff","8c969f15cd04d31e520319c619a445ae21f02d72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"70d9c44f68e848648da304352cf7c045c33148f4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}