{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoWideLongitudeSlice#GeoWideLongitudeSlice(PlanetModel,double,double).mjava","commits":[{"id":"f9f97ca977ad649f14b4f60a888adef2edd7a64e","date":1432702490,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoWideLongitudeSlice#GeoWideLongitudeSlice(PlanetModel,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoWideLongitudeSlice#GeoWideLongitudeSlice(double,double).mjava","sourceNew":"  /**\n   * Accepts only values in the following ranges: lon: {@code -PI -> PI}.\n   * Horizantal angle must be greater than or equal to PI.\n   */\n  public GeoWideLongitudeSlice(final PlanetModel planetModel, final double leftLon, double rightLon) {\n    super(planetModel);\n    // Argument checking\n    if (leftLon < -Math.PI || leftLon > Math.PI)\n      throw new IllegalArgumentException(\"Left longitude out of range\");\n    if (rightLon < -Math.PI || rightLon > Math.PI)\n      throw new IllegalArgumentException(\"Right longitude out of range\");\n    double extent = rightLon - leftLon;\n    if (extent < 0.0) {\n      extent += 2.0 * Math.PI;\n    }\n    if (extent < Math.PI)\n      throw new IllegalArgumentException(\"Width of rectangle too small\");\n\n    this.leftLon = leftLon;\n    this.rightLon = rightLon;\n\n    final double sinLeftLon = Math.sin(leftLon);\n    final double cosLeftLon = Math.cos(leftLon);\n    final double sinRightLon = Math.sin(rightLon);\n    final double cosRightLon = Math.cos(rightLon);\n\n    // Normalize\n    while (leftLon > rightLon) {\n      rightLon += Math.PI * 2.0;\n    }\n    final double middleLon = (leftLon + rightLon) * 0.5;\n    this.centerPoint = new GeoPoint(planetModel, 0.0, middleLon);\n\n    this.leftPlane = new SidedPlane(centerPoint, cosLeftLon, sinLeftLon);\n    this.rightPlane = new SidedPlane(centerPoint, cosRightLon, sinRightLon);\n    \n    this.planePoints = new GeoPoint[]{planetModel.NORTH_POLE, planetModel.SOUTH_POLE};\n    this.edgePoints = new GeoPoint[]{planetModel.NORTH_POLE};\n  }\n\n","sourceOld":"  /**\n   * Accepts only values in the following ranges: lon: {@code -PI -> PI}.\n   * Horizantal angle must be greater than or equal to PI.\n   */\n  public GeoWideLongitudeSlice(final double leftLon, double rightLon) {\n    // Argument checking\n    if (leftLon < -Math.PI || leftLon > Math.PI)\n      throw new IllegalArgumentException(\"Left longitude out of range\");\n    if (rightLon < -Math.PI || rightLon > Math.PI)\n      throw new IllegalArgumentException(\"Right longitude out of range\");\n    double extent = rightLon - leftLon;\n    if (extent < 0.0) {\n      extent += 2.0 * Math.PI;\n    }\n    if (extent < Math.PI)\n      throw new IllegalArgumentException(\"Width of rectangle too small\");\n\n    this.leftLon = leftLon;\n    this.rightLon = rightLon;\n\n    final double sinLeftLon = Math.sin(leftLon);\n    final double cosLeftLon = Math.cos(leftLon);\n    final double sinRightLon = Math.sin(rightLon);\n    final double cosRightLon = Math.cos(rightLon);\n\n    // Normalize\n    while (leftLon > rightLon) {\n      rightLon += Math.PI * 2.0;\n    }\n    final double middleLon = (leftLon + rightLon) * 0.5;\n    this.centerPoint = new GeoPoint(0.0, middleLon);\n\n    this.leftPlane = new SidedPlane(centerPoint, cosLeftLon, sinLeftLon);\n    this.rightPlane = new SidedPlane(centerPoint, cosRightLon, sinRightLon);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fec06d6753751ae302c7d35866763e6cb414112d","date":1433250698,"type":1,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoWideLongitudeSlice#GeoWideLongitudeSlice(PlanetModel,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoWideLongitudeSlice#GeoWideLongitudeSlice(double,double).mjava","sourceNew":"  /**\n   * Accepts only values in the following ranges: lon: {@code -PI -> PI}.\n   * Horizantal angle must be greater than or equal to PI.\n   */\n  public GeoWideLongitudeSlice(final PlanetModel planetModel, final double leftLon, double rightLon) {\n    super(planetModel);\n    // Argument checking\n    if (leftLon < -Math.PI || leftLon > Math.PI)\n      throw new IllegalArgumentException(\"Left longitude out of range\");\n    if (rightLon < -Math.PI || rightLon > Math.PI)\n      throw new IllegalArgumentException(\"Right longitude out of range\");\n    double extent = rightLon - leftLon;\n    if (extent < 0.0) {\n      extent += 2.0 * Math.PI;\n    }\n    if (extent < Math.PI)\n      throw new IllegalArgumentException(\"Width of rectangle too small\");\n\n    this.leftLon = leftLon;\n    this.rightLon = rightLon;\n\n    final double sinLeftLon = Math.sin(leftLon);\n    final double cosLeftLon = Math.cos(leftLon);\n    final double sinRightLon = Math.sin(rightLon);\n    final double cosRightLon = Math.cos(rightLon);\n\n    // Normalize\n    while (leftLon > rightLon) {\n      rightLon += Math.PI * 2.0;\n    }\n    final double middleLon = (leftLon + rightLon) * 0.5;\n    this.centerPoint = new GeoPoint(planetModel, 0.0, middleLon);\n\n    this.leftPlane = new SidedPlane(centerPoint, cosLeftLon, sinLeftLon);\n    this.rightPlane = new SidedPlane(centerPoint, cosRightLon, sinRightLon);\n    \n    this.planePoints = new GeoPoint[]{planetModel.NORTH_POLE, planetModel.SOUTH_POLE};\n    this.edgePoints = new GeoPoint[]{planetModel.NORTH_POLE};\n  }\n\n","sourceOld":"  /**\n   * Accepts only values in the following ranges: lon: {@code -PI -> PI}.\n   * Horizantal angle must be greater than or equal to PI.\n   */\n  public GeoWideLongitudeSlice(final double leftLon, double rightLon) {\n    // Argument checking\n    if (leftLon < -Math.PI || leftLon > Math.PI)\n      throw new IllegalArgumentException(\"Left longitude out of range\");\n    if (rightLon < -Math.PI || rightLon > Math.PI)\n      throw new IllegalArgumentException(\"Right longitude out of range\");\n    double extent = rightLon - leftLon;\n    if (extent < 0.0) {\n      extent += 2.0 * Math.PI;\n    }\n    if (extent < Math.PI)\n      throw new IllegalArgumentException(\"Width of rectangle too small\");\n\n    this.leftLon = leftLon;\n    this.rightLon = rightLon;\n\n    final double sinLeftLon = Math.sin(leftLon);\n    final double cosLeftLon = Math.cos(leftLon);\n    final double sinRightLon = Math.sin(rightLon);\n    final double cosRightLon = Math.cos(rightLon);\n\n    // Normalize\n    while (leftLon > rightLon) {\n      rightLon += Math.PI * 2.0;\n    }\n    final double middleLon = (leftLon + rightLon) * 0.5;\n    this.centerPoint = new GeoPoint(0.0, middleLon);\n\n    this.leftPlane = new SidedPlane(centerPoint, cosLeftLon, sinLeftLon);\n    this.rightPlane = new SidedPlane(centerPoint, cosRightLon, sinRightLon);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoWideLongitudeSlice#GeoWideLongitudeSlice(PlanetModel,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoWideLongitudeSlice#GeoWideLongitudeSlice(PlanetModel,double,double).mjava","sourceNew":"  /**\n   * Accepts only values in the following ranges: lon: {@code -PI -> PI}.\n   * Horizantal angle must be greater than or equal to PI.\n   */\n  public GeoWideLongitudeSlice(final PlanetModel planetModel, final double leftLon, double rightLon) {\n    super(planetModel);\n    // Argument checking\n    if (leftLon < -Math.PI || leftLon > Math.PI)\n      throw new IllegalArgumentException(\"Left longitude out of range\");\n    if (rightLon < -Math.PI || rightLon > Math.PI)\n      throw new IllegalArgumentException(\"Right longitude out of range\");\n    double extent = rightLon - leftLon;\n    if (extent < 0.0) {\n      extent += 2.0 * Math.PI;\n    }\n    if (extent < Math.PI)\n      throw new IllegalArgumentException(\"Width of rectangle too small\");\n\n    this.leftLon = leftLon;\n    this.rightLon = rightLon;\n\n    final double sinLeftLon = Math.sin(leftLon);\n    final double cosLeftLon = Math.cos(leftLon);\n    final double sinRightLon = Math.sin(rightLon);\n    final double cosRightLon = Math.cos(rightLon);\n\n    // Normalize\n    while (leftLon > rightLon) {\n      rightLon += Math.PI * 2.0;\n    }\n    final double middleLon = (leftLon + rightLon) * 0.5;\n    this.centerPoint = new GeoPoint(planetModel, 0.0, middleLon);\n\n    this.leftPlane = new SidedPlane(centerPoint, cosLeftLon, sinLeftLon);\n    this.rightPlane = new SidedPlane(centerPoint, cosRightLon, sinRightLon);\n    \n    this.planePoints = new GeoPoint[]{planetModel.NORTH_POLE, planetModel.SOUTH_POLE};\n    this.edgePoints = new GeoPoint[]{planetModel.NORTH_POLE};\n  }\n\n","sourceOld":"  /**\n   * Accepts only values in the following ranges: lon: {@code -PI -> PI}.\n   * Horizantal angle must be greater than or equal to PI.\n   */\n  public GeoWideLongitudeSlice(final PlanetModel planetModel, final double leftLon, double rightLon) {\n    super(planetModel);\n    // Argument checking\n    if (leftLon < -Math.PI || leftLon > Math.PI)\n      throw new IllegalArgumentException(\"Left longitude out of range\");\n    if (rightLon < -Math.PI || rightLon > Math.PI)\n      throw new IllegalArgumentException(\"Right longitude out of range\");\n    double extent = rightLon - leftLon;\n    if (extent < 0.0) {\n      extent += 2.0 * Math.PI;\n    }\n    if (extent < Math.PI)\n      throw new IllegalArgumentException(\"Width of rectangle too small\");\n\n    this.leftLon = leftLon;\n    this.rightLon = rightLon;\n\n    final double sinLeftLon = Math.sin(leftLon);\n    final double cosLeftLon = Math.cos(leftLon);\n    final double sinRightLon = Math.sin(rightLon);\n    final double cosRightLon = Math.cos(rightLon);\n\n    // Normalize\n    while (leftLon > rightLon) {\n      rightLon += Math.PI * 2.0;\n    }\n    final double middleLon = (leftLon + rightLon) * 0.5;\n    this.centerPoint = new GeoPoint(planetModel, 0.0, middleLon);\n\n    this.leftPlane = new SidedPlane(centerPoint, cosLeftLon, sinLeftLon);\n    this.rightPlane = new SidedPlane(centerPoint, cosRightLon, sinRightLon);\n    \n    this.planePoints = new GeoPoint[]{planetModel.NORTH_POLE, planetModel.SOUTH_POLE};\n    this.edgePoints = new GeoPoint[]{planetModel.NORTH_POLE};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fec06d6753751ae302c7d35866763e6cb414112d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["fec06d6753751ae302c7d35866763e6cb414112d"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3022be5842502b7c2a57a5124199bbc30236f0a0"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fec06d6753751ae302c7d35866763e6cb414112d","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"fec06d6753751ae302c7d35866763e6cb414112d":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["fec06d6753751ae302c7d35866763e6cb414112d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}