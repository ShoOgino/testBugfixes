{"path":"lucene/core/src/test/org/apache/lucene/util/TestQueryBuilder#testSynonyms().mjava","commits":[{"id":"c1c1dd5dce93e4fa48898dabc7e012560acda425","date":1381334364,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestQueryBuilder#testSynonyms().mjava","pathOld":"/dev/null","sourceNew":"  /** simple synonyms test */\n  public void testSynonyms() throws Exception {\n    BooleanQuery expected = new BooleanQuery(true);\n    expected.add(new TermQuery(new Term(\"field\", \"dogs\")), BooleanClause.Occur.SHOULD);\n    expected.add(new TermQuery(new Term(\"field\", \"dog\")), BooleanClause.Occur.SHOULD);\n    QueryBuilder builder = new QueryBuilder(new MockSynonymAnalyzer());\n    assertEquals(expected, builder.createBooleanQuery(\"field\", \"dogs\"));\n    assertEquals(expected, builder.createPhraseQuery(\"field\", \"dogs\"));\n    assertEquals(expected, builder.createBooleanQuery(\"field\", \"dogs\", BooleanClause.Occur.MUST));\n    assertEquals(expected, builder.createPhraseQuery(\"field\", \"dogs\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestQueryBuilder#testSynonyms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestQueryBuilder#testSynonyms().mjava","sourceNew":"  /** simple synonyms test */\n  public void testSynonyms() throws Exception {\n    BooleanQuery.Builder expectedB = new BooleanQuery.Builder();\n    expectedB.setDisableCoord(true);\n    expectedB.add(new TermQuery(new Term(\"field\", \"dogs\")), BooleanClause.Occur.SHOULD);\n    expectedB.add(new TermQuery(new Term(\"field\", \"dog\")), BooleanClause.Occur.SHOULD);\n    Query expected = expectedB.build();\n    QueryBuilder builder = new QueryBuilder(new MockSynonymAnalyzer());\n    assertEquals(expected, builder.createBooleanQuery(\"field\", \"dogs\"));\n    assertEquals(expected, builder.createPhraseQuery(\"field\", \"dogs\"));\n    assertEquals(expected, builder.createBooleanQuery(\"field\", \"dogs\", BooleanClause.Occur.MUST));\n    assertEquals(expected, builder.createPhraseQuery(\"field\", \"dogs\"));\n  }\n\n","sourceOld":"  /** simple synonyms test */\n  public void testSynonyms() throws Exception {\n    BooleanQuery expected = new BooleanQuery(true);\n    expected.add(new TermQuery(new Term(\"field\", \"dogs\")), BooleanClause.Occur.SHOULD);\n    expected.add(new TermQuery(new Term(\"field\", \"dog\")), BooleanClause.Occur.SHOULD);\n    QueryBuilder builder = new QueryBuilder(new MockSynonymAnalyzer());\n    assertEquals(expected, builder.createBooleanQuery(\"field\", \"dogs\"));\n    assertEquals(expected, builder.createPhraseQuery(\"field\", \"dogs\"));\n    assertEquals(expected, builder.createBooleanQuery(\"field\", \"dogs\", BooleanClause.Occur.MUST));\n    assertEquals(expected, builder.createPhraseQuery(\"field\", \"dogs\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81d0720146de53dd3a4a023d2a3d1089d86d748d","date":1442268215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestQueryBuilder#testSynonyms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestQueryBuilder#testSynonyms().mjava","sourceNew":"  /** simple synonyms test */\n  public void testSynonyms() throws Exception {\n    SynonymQuery expected = new SynonymQuery(new Term(\"field\", \"dogs\"), new Term(\"field\", \"dog\"));\n    QueryBuilder builder = new QueryBuilder(new MockSynonymAnalyzer());\n    assertEquals(expected, builder.createBooleanQuery(\"field\", \"dogs\"));\n    assertEquals(expected, builder.createPhraseQuery(\"field\", \"dogs\"));\n    assertEquals(expected, builder.createBooleanQuery(\"field\", \"dogs\", BooleanClause.Occur.MUST));\n    assertEquals(expected, builder.createPhraseQuery(\"field\", \"dogs\"));\n  }\n\n","sourceOld":"  /** simple synonyms test */\n  public void testSynonyms() throws Exception {\n    BooleanQuery.Builder expectedB = new BooleanQuery.Builder();\n    expectedB.setDisableCoord(true);\n    expectedB.add(new TermQuery(new Term(\"field\", \"dogs\")), BooleanClause.Occur.SHOULD);\n    expectedB.add(new TermQuery(new Term(\"field\", \"dog\")), BooleanClause.Occur.SHOULD);\n    Query expected = expectedB.build();\n    QueryBuilder builder = new QueryBuilder(new MockSynonymAnalyzer());\n    assertEquals(expected, builder.createBooleanQuery(\"field\", \"dogs\"));\n    assertEquals(expected, builder.createPhraseQuery(\"field\", \"dogs\"));\n    assertEquals(expected, builder.createBooleanQuery(\"field\", \"dogs\", BooleanClause.Occur.MUST));\n    assertEquals(expected, builder.createPhraseQuery(\"field\", \"dogs\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df25592b82060bc1c800e87bf019444bf0ddf9d4","date":1552296011,"type":3,"author":"jimczi","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestQueryBuilder#testSynonyms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestQueryBuilder#testSynonyms().mjava","sourceNew":"  /** simple synonyms test */\n  public void testSynonyms() throws Exception {\n    SynonymQuery expected = new SynonymQuery.Builder(\"field\")\n        .addTerm(new Term(\"field\", \"dogs\"))\n        .addTerm(new Term(\"field\", \"dog\"))\n        .build();\n    QueryBuilder builder = new QueryBuilder(new MockSynonymAnalyzer());\n    assertEquals(expected, builder.createBooleanQuery(\"field\", \"dogs\"));\n    assertEquals(expected, builder.createPhraseQuery(\"field\", \"dogs\"));\n    assertEquals(expected, builder.createBooleanQuery(\"field\", \"dogs\", BooleanClause.Occur.MUST));\n    assertEquals(expected, builder.createPhraseQuery(\"field\", \"dogs\"));\n  }\n\n","sourceOld":"  /** simple synonyms test */\n  public void testSynonyms() throws Exception {\n    SynonymQuery expected = new SynonymQuery(new Term(\"field\", \"dogs\"), new Term(\"field\", \"dog\"));\n    QueryBuilder builder = new QueryBuilder(new MockSynonymAnalyzer());\n    assertEquals(expected, builder.createBooleanQuery(\"field\", \"dogs\"));\n    assertEquals(expected, builder.createPhraseQuery(\"field\", \"dogs\"));\n    assertEquals(expected, builder.createBooleanQuery(\"field\", \"dogs\", BooleanClause.Occur.MUST));\n    assertEquals(expected, builder.createPhraseQuery(\"field\", \"dogs\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["c1c1dd5dce93e4fa48898dabc7e012560acda425"],"c1c1dd5dce93e4fa48898dabc7e012560acda425":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"df25592b82060bc1c800e87bf019444bf0ddf9d4":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df25592b82060bc1c800e87bf019444bf0ddf9d4"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"c1c1dd5dce93e4fa48898dabc7e012560acda425":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c1c1dd5dce93e4fa48898dabc7e012560acda425"],"df25592b82060bc1c800e87bf019444bf0ddf9d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["df25592b82060bc1c800e87bf019444bf0ddf9d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}