{"path":"lucene/backwards/src/java/org/apache/lucene/index/SegmentReader#doCommit(Map[String,String]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/SegmentReader#doCommit(Map[String,String]).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/SegmentReader#doCommit(Map[String,String]).mjava","sourceNew":"  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    if (hasChanges) {\n      if (deletedDocsDirty) {               // re-write deleted\n        si.advanceDelGen();\n\n        // We can write directly to the actual name (vs to a\n        // .tmp & renaming it) because the file is not live\n        // until segments file is written:\n        deletedDocs.write(directory(), si.getDelFileName());\n\n        si.setDelCount(si.getDelCount()+pendingDeleteCount);\n        pendingDeleteCount = 0;\n        assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n      } else {\n        assert pendingDeleteCount == 0;\n      }\n\n      if (normsDirty) {               // re-write norms\n        si.setNumFields(core.fieldInfos.size());\n        for (final Norm norm : norms.values()) {\n          if (norm.dirty) {\n            norm.reWrite(si);\n          }\n        }\n      }\n      deletedDocsDirty = false;\n      normsDirty = false;\n      hasChanges = false;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    if (hasChanges) {\n      if (deletedDocsDirty) {               // re-write deleted\n        si.advanceDelGen();\n\n        // We can write directly to the actual name (vs to a\n        // .tmp & renaming it) because the file is not live\n        // until segments file is written:\n        deletedDocs.write(directory(), si.getDelFileName());\n\n        si.setDelCount(si.getDelCount()+pendingDeleteCount);\n        pendingDeleteCount = 0;\n        assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n      } else {\n        assert pendingDeleteCount == 0;\n      }\n\n      if (normsDirty) {               // re-write norms\n        si.setNumFields(core.fieldInfos.size());\n        for (final Norm norm : norms.values()) {\n          if (norm.dirty) {\n            norm.reWrite(si);\n          }\n        }\n      }\n      deletedDocsDirty = false;\n      normsDirty = false;\n      hasChanges = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/SegmentReader#doCommit(Map[String,String]).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    if (hasChanges) {\n      if (deletedDocsDirty) {               // re-write deleted\n        si.advanceDelGen();\n\n        // We can write directly to the actual name (vs to a\n        // .tmp & renaming it) because the file is not live\n        // until segments file is written:\n        deletedDocs.write(directory(), si.getDelFileName());\n\n        si.setDelCount(si.getDelCount()+pendingDeleteCount);\n        pendingDeleteCount = 0;\n        assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n      } else {\n        assert pendingDeleteCount == 0;\n      }\n\n      if (normsDirty) {               // re-write norms\n        si.setNumFields(core.fieldInfos.size());\n        for (final Norm norm : norms.values()) {\n          if (norm.dirty) {\n            norm.reWrite(si);\n          }\n        }\n      }\n      deletedDocsDirty = false;\n      normsDirty = false;\n      hasChanges = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}