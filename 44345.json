{"path":"lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery#getSpans(AtomicReaderContext,Bits,Map[Term,TermContext]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery#getSpans(AtomicReaderContext,Bits,Map[Term,TermContext]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanOrQuery#getSpans(AtomicReaderContext,Bits,Map[Term,TermContext]).mjava","sourceNew":"  @Override\n  public Spans getSpans(final AtomicReaderContext context, final Bits acceptDocs, final Map<Term,TermContext> termContexts) throws IOException {\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return (clauses.get(0)).getSpans(context, acceptDocs, termContexts);\n\n    return new Spans() {\n        private SpanQueue queue = null;\n\n        private boolean initSpanQueue(int target) throws IOException {\n          queue = new SpanQueue(clauses.size());\n          Iterator<SpanQuery> i = clauses.iterator();\n          while (i.hasNext()) {\n            Spans spans = i.next().getSpans(context, acceptDocs, termContexts);\n            if (   ((target == -1) && spans.next())\n                || ((target != -1) && spans.skipTo(target))) {\n              queue.add(spans);\n            }\n          }\n          return queue.size() != 0;\n        }\n\n        @Override\n        public boolean next() throws IOException {\n          if (queue == null) {\n            return initSpanQueue(-1);\n          }\n\n          if (queue.size() == 0) { // all done\n            return false;\n          }\n\n          if (top().next()) { // move to next\n            queue.updateTop();\n            return true;\n          }\n\n          queue.pop();  // exhausted a clause\n          return queue.size() != 0;\n        }\n\n        private Spans top() { return queue.top(); }\n\n        @Override\n        public boolean skipTo(int target) throws IOException {\n          if (queue == null) {\n            return initSpanQueue(target);\n          }\n  \n          boolean skipCalled = false;\n          while (queue.size() != 0 && top().doc() < target) {\n            if (top().skipTo(target)) {\n              queue.updateTop();\n            } else {\n              queue.pop();\n            }\n            skipCalled = true;\n          }\n  \n          if (skipCalled) {\n            return queue.size() != 0;\n          }\n          return next();\n        }\n\n        @Override\n        public int doc() { return top().doc(); }\n        @Override\n        public int start() { return top().start(); }\n        @Override\n        public int end() { return top().end(); }\n\n      @Override\n      public Collection<byte[]> getPayload() throws IOException {\n        ArrayList<byte[]> result = null;\n        Spans theTop = top();\n        if (theTop != null && theTop.isPayloadAvailable()) {\n          result = new ArrayList<byte[]>(theTop.getPayload());\n        }\n        return result;\n      }\n\n      @Override\n      public boolean isPayloadAvailable() {\n        Spans top = top();\n        return top != null && top.isPayloadAvailable();\n      }\n\n      @Override\n      public String toString() {\n          return \"spans(\"+SpanOrQuery.this+\")@\"+\n            ((queue == null)?\"START\"\n             :(queue.size()>0?(doc()+\":\"+start()+\"-\"+end()):\"END\"));\n        }\n\n      };\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final AtomicReaderContext context, final Bits acceptDocs, final Map<Term,TermContext> termContexts) throws IOException {\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return (clauses.get(0)).getSpans(context, acceptDocs, termContexts);\n\n    return new Spans() {\n        private SpanQueue queue = null;\n\n        private boolean initSpanQueue(int target) throws IOException {\n          queue = new SpanQueue(clauses.size());\n          Iterator<SpanQuery> i = clauses.iterator();\n          while (i.hasNext()) {\n            Spans spans = i.next().getSpans(context, acceptDocs, termContexts);\n            if (   ((target == -1) && spans.next())\n                || ((target != -1) && spans.skipTo(target))) {\n              queue.add(spans);\n            }\n          }\n          return queue.size() != 0;\n        }\n\n        @Override\n        public boolean next() throws IOException {\n          if (queue == null) {\n            return initSpanQueue(-1);\n          }\n\n          if (queue.size() == 0) { // all done\n            return false;\n          }\n\n          if (top().next()) { // move to next\n            queue.updateTop();\n            return true;\n          }\n\n          queue.pop();  // exhausted a clause\n          return queue.size() != 0;\n        }\n\n        private Spans top() { return queue.top(); }\n\n        @Override\n        public boolean skipTo(int target) throws IOException {\n          if (queue == null) {\n            return initSpanQueue(target);\n          }\n  \n          boolean skipCalled = false;\n          while (queue.size() != 0 && top().doc() < target) {\n            if (top().skipTo(target)) {\n              queue.updateTop();\n            } else {\n              queue.pop();\n            }\n            skipCalled = true;\n          }\n  \n          if (skipCalled) {\n            return queue.size() != 0;\n          }\n          return next();\n        }\n\n        @Override\n        public int doc() { return top().doc(); }\n        @Override\n        public int start() { return top().start(); }\n        @Override\n        public int end() { return top().end(); }\n\n      @Override\n      public Collection<byte[]> getPayload() throws IOException {\n        ArrayList<byte[]> result = null;\n        Spans theTop = top();\n        if (theTop != null && theTop.isPayloadAvailable()) {\n          result = new ArrayList<byte[]>(theTop.getPayload());\n        }\n        return result;\n      }\n\n      @Override\n      public boolean isPayloadAvailable() {\n        Spans top = top();\n        return top != null && top.isPayloadAvailable();\n      }\n\n      @Override\n      public String toString() {\n          return \"spans(\"+SpanOrQuery.this+\")@\"+\n            ((queue == null)?\"START\"\n             :(queue.size()>0?(doc()+\":\"+start()+\"-\"+end()):\"END\"));\n        }\n\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552","date":1344797146,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery#getSpans(AtomicReaderContext,Bits,Map[Term,TermContext]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery#getSpans(AtomicReaderContext,Bits,Map[Term,TermContext]).mjava","sourceNew":"  @Override\n  public Spans getSpans(final AtomicReaderContext context, final Bits acceptDocs, final Map<Term,TermContext> termContexts) throws IOException {\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return (clauses.get(0)).getSpans(context, acceptDocs, termContexts);\n\n    return new Spans() {\n        private SpanQueue queue = null;\n\n        private boolean initSpanQueue(int target) throws IOException {\n          queue = new SpanQueue(clauses.size());\n          Iterator<SpanQuery> i = clauses.iterator();\n          while (i.hasNext()) {\n            Spans spans = i.next().getSpans(context, acceptDocs, termContexts);\n            if (   ((target == -1) && spans.next())\n                || ((target != -1) && spans.skipTo(target))) {\n              queue.add(spans);\n            }\n          }\n          return queue.size() != 0;\n        }\n\n        @Override\n        public boolean next() throws IOException {\n          if (queue == null) {\n            return initSpanQueue(-1);\n          }\n\n          if (queue.size() == 0) { // all done\n            return false;\n          }\n\n          if (top().next()) { // move to next\n            queue.updateTop();\n            return true;\n          }\n\n          queue.pop();  // exhausted a clause\n          return queue.size() != 0;\n        }\n\n        private Spans top() { return queue.top(); }\n\n        @Override\n        public boolean skipTo(int target) throws IOException {\n          if (queue == null) {\n            return initSpanQueue(target);\n          }\n  \n          boolean skipCalled = false;\n          while (queue.size() != 0 && top().doc() < target) {\n            if (top().skipTo(target)) {\n              queue.updateTop();\n            } else {\n              queue.pop();\n            }\n            skipCalled = true;\n          }\n  \n          if (skipCalled) {\n            return queue.size() != 0;\n          }\n          return next();\n        }\n\n        @Override\n        public int doc() { return top().doc(); }\n        @Override\n        public int start() { return top().start(); }\n        @Override\n        public int end() { return top().end(); }\n\n      @Override\n      public Collection<byte[]> getPayload() throws IOException {\n        ArrayList<byte[]> result = null;\n        Spans theTop = top();\n        if (theTop != null && theTop.isPayloadAvailable()) {\n          result = new ArrayList<byte[]>(theTop.getPayload());\n        }\n        return result;\n      }\n\n      @Override\n      public boolean isPayloadAvailable() throws IOException {\n        Spans top = top();\n        return top != null && top.isPayloadAvailable();\n      }\n\n      @Override\n      public String toString() {\n          return \"spans(\"+SpanOrQuery.this+\")@\"+\n            ((queue == null)?\"START\"\n             :(queue.size()>0?(doc()+\":\"+start()+\"-\"+end()):\"END\"));\n        }\n\n      };\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final AtomicReaderContext context, final Bits acceptDocs, final Map<Term,TermContext> termContexts) throws IOException {\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return (clauses.get(0)).getSpans(context, acceptDocs, termContexts);\n\n    return new Spans() {\n        private SpanQueue queue = null;\n\n        private boolean initSpanQueue(int target) throws IOException {\n          queue = new SpanQueue(clauses.size());\n          Iterator<SpanQuery> i = clauses.iterator();\n          while (i.hasNext()) {\n            Spans spans = i.next().getSpans(context, acceptDocs, termContexts);\n            if (   ((target == -1) && spans.next())\n                || ((target != -1) && spans.skipTo(target))) {\n              queue.add(spans);\n            }\n          }\n          return queue.size() != 0;\n        }\n\n        @Override\n        public boolean next() throws IOException {\n          if (queue == null) {\n            return initSpanQueue(-1);\n          }\n\n          if (queue.size() == 0) { // all done\n            return false;\n          }\n\n          if (top().next()) { // move to next\n            queue.updateTop();\n            return true;\n          }\n\n          queue.pop();  // exhausted a clause\n          return queue.size() != 0;\n        }\n\n        private Spans top() { return queue.top(); }\n\n        @Override\n        public boolean skipTo(int target) throws IOException {\n          if (queue == null) {\n            return initSpanQueue(target);\n          }\n  \n          boolean skipCalled = false;\n          while (queue.size() != 0 && top().doc() < target) {\n            if (top().skipTo(target)) {\n              queue.updateTop();\n            } else {\n              queue.pop();\n            }\n            skipCalled = true;\n          }\n  \n          if (skipCalled) {\n            return queue.size() != 0;\n          }\n          return next();\n        }\n\n        @Override\n        public int doc() { return top().doc(); }\n        @Override\n        public int start() { return top().start(); }\n        @Override\n        public int end() { return top().end(); }\n\n      @Override\n      public Collection<byte[]> getPayload() throws IOException {\n        ArrayList<byte[]> result = null;\n        Spans theTop = top();\n        if (theTop != null && theTop.isPayloadAvailable()) {\n          result = new ArrayList<byte[]>(theTop.getPayload());\n        }\n        return result;\n      }\n\n      @Override\n      public boolean isPayloadAvailable() {\n        Spans top = top();\n        return top != null && top.isPayloadAvailable();\n      }\n\n      @Override\n      public String toString() {\n          return \"spans(\"+SpanOrQuery.this+\")@\"+\n            ((queue == null)?\"START\"\n             :(queue.size()>0?(doc()+\":\"+start()+\"-\"+end()):\"END\"));\n        }\n\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery#getSpans(AtomicReaderContext,Bits,Map[Term,TermContext]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery#getSpans(AtomicReaderContext,Bits,Map[Term,TermContext]).mjava","sourceNew":"  @Override\n  public Spans getSpans(final AtomicReaderContext context, final Bits acceptDocs, final Map<Term,TermContext> termContexts) throws IOException {\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return (clauses.get(0)).getSpans(context, acceptDocs, termContexts);\n\n    return new Spans() {\n        private SpanQueue queue = null;\n\n        private boolean initSpanQueue(int target) throws IOException {\n          queue = new SpanQueue(clauses.size());\n          Iterator<SpanQuery> i = clauses.iterator();\n          while (i.hasNext()) {\n            Spans spans = i.next().getSpans(context, acceptDocs, termContexts);\n            if (   ((target == -1) && spans.next())\n                || ((target != -1) && spans.skipTo(target))) {\n              queue.add(spans);\n            }\n          }\n          return queue.size() != 0;\n        }\n\n        @Override\n        public boolean next() throws IOException {\n          if (queue == null) {\n            return initSpanQueue(-1);\n          }\n\n          if (queue.size() == 0) { // all done\n            return false;\n          }\n\n          if (top().next()) { // move to next\n            queue.updateTop();\n            return true;\n          }\n\n          queue.pop();  // exhausted a clause\n          return queue.size() != 0;\n        }\n\n        private Spans top() { return queue.top(); }\n\n        @Override\n        public boolean skipTo(int target) throws IOException {\n          if (queue == null) {\n            return initSpanQueue(target);\n          }\n  \n          boolean skipCalled = false;\n          while (queue.size() != 0 && top().doc() < target) {\n            if (top().skipTo(target)) {\n              queue.updateTop();\n            } else {\n              queue.pop();\n            }\n            skipCalled = true;\n          }\n  \n          if (skipCalled) {\n            return queue.size() != 0;\n          }\n          return next();\n        }\n\n        @Override\n        public int doc() { return top().doc(); }\n        @Override\n        public int start() { return top().start(); }\n        @Override\n        public int end() { return top().end(); }\n\n      @Override\n      public Collection<byte[]> getPayload() throws IOException {\n        ArrayList<byte[]> result = null;\n        Spans theTop = top();\n        if (theTop != null && theTop.isPayloadAvailable()) {\n          result = new ArrayList<byte[]>(theTop.getPayload());\n        }\n        return result;\n      }\n\n      @Override\n      public boolean isPayloadAvailable() throws IOException {\n        Spans top = top();\n        return top != null && top.isPayloadAvailable();\n      }\n\n      @Override\n      public String toString() {\n          return \"spans(\"+SpanOrQuery.this+\")@\"+\n            ((queue == null)?\"START\"\n             :(queue.size()>0?(doc()+\":\"+start()+\"-\"+end()):\"END\"));\n        }\n\n      };\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final AtomicReaderContext context, final Bits acceptDocs, final Map<Term,TermContext> termContexts) throws IOException {\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return (clauses.get(0)).getSpans(context, acceptDocs, termContexts);\n\n    return new Spans() {\n        private SpanQueue queue = null;\n\n        private boolean initSpanQueue(int target) throws IOException {\n          queue = new SpanQueue(clauses.size());\n          Iterator<SpanQuery> i = clauses.iterator();\n          while (i.hasNext()) {\n            Spans spans = i.next().getSpans(context, acceptDocs, termContexts);\n            if (   ((target == -1) && spans.next())\n                || ((target != -1) && spans.skipTo(target))) {\n              queue.add(spans);\n            }\n          }\n          return queue.size() != 0;\n        }\n\n        @Override\n        public boolean next() throws IOException {\n          if (queue == null) {\n            return initSpanQueue(-1);\n          }\n\n          if (queue.size() == 0) { // all done\n            return false;\n          }\n\n          if (top().next()) { // move to next\n            queue.updateTop();\n            return true;\n          }\n\n          queue.pop();  // exhausted a clause\n          return queue.size() != 0;\n        }\n\n        private Spans top() { return queue.top(); }\n\n        @Override\n        public boolean skipTo(int target) throws IOException {\n          if (queue == null) {\n            return initSpanQueue(target);\n          }\n  \n          boolean skipCalled = false;\n          while (queue.size() != 0 && top().doc() < target) {\n            if (top().skipTo(target)) {\n              queue.updateTop();\n            } else {\n              queue.pop();\n            }\n            skipCalled = true;\n          }\n  \n          if (skipCalled) {\n            return queue.size() != 0;\n          }\n          return next();\n        }\n\n        @Override\n        public int doc() { return top().doc(); }\n        @Override\n        public int start() { return top().start(); }\n        @Override\n        public int end() { return top().end(); }\n\n      @Override\n      public Collection<byte[]> getPayload() throws IOException {\n        ArrayList<byte[]> result = null;\n        Spans theTop = top();\n        if (theTop != null && theTop.isPayloadAvailable()) {\n          result = new ArrayList<byte[]>(theTop.getPayload());\n        }\n        return result;\n      }\n\n      @Override\n      public boolean isPayloadAvailable() {\n        Spans top = top();\n        return top != null && top.isPayloadAvailable();\n      }\n\n      @Override\n      public String toString() {\n          return \"spans(\"+SpanOrQuery.this+\")@\"+\n            ((queue == null)?\"START\"\n             :(queue.size()>0?(doc()+\":\"+start()+\"-\"+end()):\"END\"));\n        }\n\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery#getSpans(AtomicReaderContext,Bits,Map[Term,TermContext]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery#getSpans(AtomicReaderContext,Bits,Map[Term,TermContext]).mjava","sourceNew":"  @Override\n  public Spans getSpans(final AtomicReaderContext context, final Bits acceptDocs, final Map<Term,TermContext> termContexts) throws IOException {\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return (clauses.get(0)).getSpans(context, acceptDocs, termContexts);\n\n    return new Spans() {\n        private SpanQueue queue = null;\n\n        private boolean initSpanQueue(int target) throws IOException {\n          queue = new SpanQueue(clauses.size());\n          Iterator<SpanQuery> i = clauses.iterator();\n          while (i.hasNext()) {\n            Spans spans = i.next().getSpans(context, acceptDocs, termContexts);\n            if (   ((target == -1) && spans.next())\n                || ((target != -1) && spans.skipTo(target))) {\n              queue.add(spans);\n            }\n          }\n          return queue.size() != 0;\n        }\n\n        @Override\n        public boolean next() throws IOException {\n          if (queue == null) {\n            return initSpanQueue(-1);\n          }\n\n          if (queue.size() == 0) { // all done\n            return false;\n          }\n\n          if (top().next()) { // move to next\n            queue.updateTop();\n            return true;\n          }\n\n          queue.pop();  // exhausted a clause\n          return queue.size() != 0;\n        }\n\n        private Spans top() { return queue.top(); }\n\n        @Override\n        public boolean skipTo(int target) throws IOException {\n          if (queue == null) {\n            return initSpanQueue(target);\n          }\n  \n          boolean skipCalled = false;\n          while (queue.size() != 0 && top().doc() < target) {\n            if (top().skipTo(target)) {\n              queue.updateTop();\n            } else {\n              queue.pop();\n            }\n            skipCalled = true;\n          }\n  \n          if (skipCalled) {\n            return queue.size() != 0;\n          }\n          return next();\n        }\n\n        @Override\n        public int doc() { return top().doc(); }\n        @Override\n        public int start() { return top().start(); }\n        @Override\n        public int end() { return top().end(); }\n\n      @Override\n      public Collection<byte[]> getPayload() throws IOException {\n        ArrayList<byte[]> result = null;\n        Spans theTop = top();\n        if (theTop != null && theTop.isPayloadAvailable()) {\n          result = new ArrayList<byte[]>(theTop.getPayload());\n        }\n        return result;\n      }\n\n      @Override\n      public boolean isPayloadAvailable() throws IOException {\n        Spans top = top();\n        return top != null && top.isPayloadAvailable();\n      }\n\n      @Override\n      public String toString() {\n          return \"spans(\"+SpanOrQuery.this+\")@\"+\n            ((queue == null)?\"START\"\n             :(queue.size()>0?(doc()+\":\"+start()+\"-\"+end()):\"END\"));\n        }\n\n      };\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final AtomicReaderContext context, final Bits acceptDocs, final Map<Term,TermContext> termContexts) throws IOException {\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return (clauses.get(0)).getSpans(context, acceptDocs, termContexts);\n\n    return new Spans() {\n        private SpanQueue queue = null;\n\n        private boolean initSpanQueue(int target) throws IOException {\n          queue = new SpanQueue(clauses.size());\n          Iterator<SpanQuery> i = clauses.iterator();\n          while (i.hasNext()) {\n            Spans spans = i.next().getSpans(context, acceptDocs, termContexts);\n            if (   ((target == -1) && spans.next())\n                || ((target != -1) && spans.skipTo(target))) {\n              queue.add(spans);\n            }\n          }\n          return queue.size() != 0;\n        }\n\n        @Override\n        public boolean next() throws IOException {\n          if (queue == null) {\n            return initSpanQueue(-1);\n          }\n\n          if (queue.size() == 0) { // all done\n            return false;\n          }\n\n          if (top().next()) { // move to next\n            queue.updateTop();\n            return true;\n          }\n\n          queue.pop();  // exhausted a clause\n          return queue.size() != 0;\n        }\n\n        private Spans top() { return queue.top(); }\n\n        @Override\n        public boolean skipTo(int target) throws IOException {\n          if (queue == null) {\n            return initSpanQueue(target);\n          }\n  \n          boolean skipCalled = false;\n          while (queue.size() != 0 && top().doc() < target) {\n            if (top().skipTo(target)) {\n              queue.updateTop();\n            } else {\n              queue.pop();\n            }\n            skipCalled = true;\n          }\n  \n          if (skipCalled) {\n            return queue.size() != 0;\n          }\n          return next();\n        }\n\n        @Override\n        public int doc() { return top().doc(); }\n        @Override\n        public int start() { return top().start(); }\n        @Override\n        public int end() { return top().end(); }\n\n      @Override\n      public Collection<byte[]> getPayload() throws IOException {\n        ArrayList<byte[]> result = null;\n        Spans theTop = top();\n        if (theTop != null && theTop.isPayloadAvailable()) {\n          result = new ArrayList<byte[]>(theTop.getPayload());\n        }\n        return result;\n      }\n\n      @Override\n      public boolean isPayloadAvailable() {\n        Spans top = top();\n        return top != null && top.isPayloadAvailable();\n      }\n\n      @Override\n      public String toString() {\n          return \"spans(\"+SpanOrQuery.this+\")@\"+\n            ((queue == null)?\"START\"\n             :(queue.size()>0?(doc()+\":\"+start()+\"-\"+end()):\"END\"));\n        }\n\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a","date":1363294103,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery#getSpans(AtomicReaderContext,Bits,Map[Term,TermContext]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery#getSpans(AtomicReaderContext,Bits,Map[Term,TermContext]).mjava","sourceNew":"  @Override\n  public Spans getSpans(final AtomicReaderContext context, final Bits acceptDocs, final Map<Term,TermContext> termContexts) throws IOException {\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return (clauses.get(0)).getSpans(context, acceptDocs, termContexts);\n\n    return new Spans() {\n        private SpanQueue queue = null;\n        private long cost;\n\n        private boolean initSpanQueue(int target) throws IOException {\n          queue = new SpanQueue(clauses.size());\n          Iterator<SpanQuery> i = clauses.iterator();\n          while (i.hasNext()) {\n            Spans spans = i.next().getSpans(context, acceptDocs, termContexts);\n            cost += spans.cost();\n            if (   ((target == -1) && spans.next())\n                || ((target != -1) && spans.skipTo(target))) {\n              queue.add(spans);\n            }\n          }\n          return queue.size() != 0;\n        }\n\n        @Override\n        public boolean next() throws IOException {\n          if (queue == null) {\n            return initSpanQueue(-1);\n          }\n\n          if (queue.size() == 0) { // all done\n            return false;\n          }\n\n          if (top().next()) { // move to next\n            queue.updateTop();\n            return true;\n          }\n\n          queue.pop();  // exhausted a clause\n          return queue.size() != 0;\n        }\n\n        private Spans top() { return queue.top(); }\n\n        @Override\n        public boolean skipTo(int target) throws IOException {\n          if (queue == null) {\n            return initSpanQueue(target);\n          }\n  \n          boolean skipCalled = false;\n          while (queue.size() != 0 && top().doc() < target) {\n            if (top().skipTo(target)) {\n              queue.updateTop();\n            } else {\n              queue.pop();\n            }\n            skipCalled = true;\n          }\n  \n          if (skipCalled) {\n            return queue.size() != 0;\n          }\n          return next();\n        }\n\n        @Override\n        public int doc() { return top().doc(); }\n        @Override\n        public int start() { return top().start(); }\n        @Override\n        public int end() { return top().end(); }\n\n      @Override\n      public Collection<byte[]> getPayload() throws IOException {\n        ArrayList<byte[]> result = null;\n        Spans theTop = top();\n        if (theTop != null && theTop.isPayloadAvailable()) {\n          result = new ArrayList<byte[]>(theTop.getPayload());\n        }\n        return result;\n      }\n\n      @Override\n      public boolean isPayloadAvailable() throws IOException {\n        Spans top = top();\n        return top != null && top.isPayloadAvailable();\n      }\n\n      @Override\n      public String toString() {\n          return \"spans(\"+SpanOrQuery.this+\")@\"+\n            ((queue == null)?\"START\"\n             :(queue.size()>0?(doc()+\":\"+start()+\"-\"+end()):\"END\"));\n        }\n\n      @Override\n      public long cost() {\n        return cost;\n      }\n      \n      };\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final AtomicReaderContext context, final Bits acceptDocs, final Map<Term,TermContext> termContexts) throws IOException {\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return (clauses.get(0)).getSpans(context, acceptDocs, termContexts);\n\n    return new Spans() {\n        private SpanQueue queue = null;\n\n        private boolean initSpanQueue(int target) throws IOException {\n          queue = new SpanQueue(clauses.size());\n          Iterator<SpanQuery> i = clauses.iterator();\n          while (i.hasNext()) {\n            Spans spans = i.next().getSpans(context, acceptDocs, termContexts);\n            if (   ((target == -1) && spans.next())\n                || ((target != -1) && spans.skipTo(target))) {\n              queue.add(spans);\n            }\n          }\n          return queue.size() != 0;\n        }\n\n        @Override\n        public boolean next() throws IOException {\n          if (queue == null) {\n            return initSpanQueue(-1);\n          }\n\n          if (queue.size() == 0) { // all done\n            return false;\n          }\n\n          if (top().next()) { // move to next\n            queue.updateTop();\n            return true;\n          }\n\n          queue.pop();  // exhausted a clause\n          return queue.size() != 0;\n        }\n\n        private Spans top() { return queue.top(); }\n\n        @Override\n        public boolean skipTo(int target) throws IOException {\n          if (queue == null) {\n            return initSpanQueue(target);\n          }\n  \n          boolean skipCalled = false;\n          while (queue.size() != 0 && top().doc() < target) {\n            if (top().skipTo(target)) {\n              queue.updateTop();\n            } else {\n              queue.pop();\n            }\n            skipCalled = true;\n          }\n  \n          if (skipCalled) {\n            return queue.size() != 0;\n          }\n          return next();\n        }\n\n        @Override\n        public int doc() { return top().doc(); }\n        @Override\n        public int start() { return top().start(); }\n        @Override\n        public int end() { return top().end(); }\n\n      @Override\n      public Collection<byte[]> getPayload() throws IOException {\n        ArrayList<byte[]> result = null;\n        Spans theTop = top();\n        if (theTop != null && theTop.isPayloadAvailable()) {\n          result = new ArrayList<byte[]>(theTop.getPayload());\n        }\n        return result;\n      }\n\n      @Override\n      public boolean isPayloadAvailable() throws IOException {\n        Spans top = top();\n        return top != null && top.isPayloadAvailable();\n      }\n\n      @Override\n      public String toString() {\n          return \"spans(\"+SpanOrQuery.this+\")@\"+\n            ((queue == null)?\"START\"\n             :(queue.size()>0?(doc()+\":\"+start()+\"-\"+end()):\"END\"));\n        }\n\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery#getSpans(AtomicReaderContext,Bits,Map[Term,TermContext]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery#getSpans(AtomicReaderContext,Bits,Map[Term,TermContext]).mjava","sourceNew":"  @Override\n  public Spans getSpans(final AtomicReaderContext context, final Bits acceptDocs, final Map<Term,TermContext> termContexts) throws IOException {\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return (clauses.get(0)).getSpans(context, acceptDocs, termContexts);\n\n    return new Spans() {\n        private SpanQueue queue = null;\n        private long cost;\n\n        private boolean initSpanQueue(int target) throws IOException {\n          queue = new SpanQueue(clauses.size());\n          Iterator<SpanQuery> i = clauses.iterator();\n          while (i.hasNext()) {\n            Spans spans = i.next().getSpans(context, acceptDocs, termContexts);\n            cost += spans.cost();\n            if (   ((target == -1) && spans.next())\n                || ((target != -1) && spans.skipTo(target))) {\n              queue.add(spans);\n            }\n          }\n          return queue.size() != 0;\n        }\n\n        @Override\n        public boolean next() throws IOException {\n          if (queue == null) {\n            return initSpanQueue(-1);\n          }\n\n          if (queue.size() == 0) { // all done\n            return false;\n          }\n\n          if (top().next()) { // move to next\n            queue.updateTop();\n            return true;\n          }\n\n          queue.pop();  // exhausted a clause\n          return queue.size() != 0;\n        }\n\n        private Spans top() { return queue.top(); }\n\n        @Override\n        public boolean skipTo(int target) throws IOException {\n          if (queue == null) {\n            return initSpanQueue(target);\n          }\n  \n          boolean skipCalled = false;\n          while (queue.size() != 0 && top().doc() < target) {\n            if (top().skipTo(target)) {\n              queue.updateTop();\n            } else {\n              queue.pop();\n            }\n            skipCalled = true;\n          }\n  \n          if (skipCalled) {\n            return queue.size() != 0;\n          }\n          return next();\n        }\n\n        @Override\n        public int doc() { return top().doc(); }\n        @Override\n        public int start() { return top().start(); }\n        @Override\n        public int end() { return top().end(); }\n\n      @Override\n      public Collection<byte[]> getPayload() throws IOException {\n        ArrayList<byte[]> result = null;\n        Spans theTop = top();\n        if (theTop != null && theTop.isPayloadAvailable()) {\n          result = new ArrayList<>(theTop.getPayload());\n        }\n        return result;\n      }\n\n      @Override\n      public boolean isPayloadAvailable() throws IOException {\n        Spans top = top();\n        return top != null && top.isPayloadAvailable();\n      }\n\n      @Override\n      public String toString() {\n          return \"spans(\"+SpanOrQuery.this+\")@\"+\n            ((queue == null)?\"START\"\n             :(queue.size()>0?(doc()+\":\"+start()+\"-\"+end()):\"END\"));\n        }\n\n      @Override\n      public long cost() {\n        return cost;\n      }\n      \n      };\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final AtomicReaderContext context, final Bits acceptDocs, final Map<Term,TermContext> termContexts) throws IOException {\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return (clauses.get(0)).getSpans(context, acceptDocs, termContexts);\n\n    return new Spans() {\n        private SpanQueue queue = null;\n        private long cost;\n\n        private boolean initSpanQueue(int target) throws IOException {\n          queue = new SpanQueue(clauses.size());\n          Iterator<SpanQuery> i = clauses.iterator();\n          while (i.hasNext()) {\n            Spans spans = i.next().getSpans(context, acceptDocs, termContexts);\n            cost += spans.cost();\n            if (   ((target == -1) && spans.next())\n                || ((target != -1) && spans.skipTo(target))) {\n              queue.add(spans);\n            }\n          }\n          return queue.size() != 0;\n        }\n\n        @Override\n        public boolean next() throws IOException {\n          if (queue == null) {\n            return initSpanQueue(-1);\n          }\n\n          if (queue.size() == 0) { // all done\n            return false;\n          }\n\n          if (top().next()) { // move to next\n            queue.updateTop();\n            return true;\n          }\n\n          queue.pop();  // exhausted a clause\n          return queue.size() != 0;\n        }\n\n        private Spans top() { return queue.top(); }\n\n        @Override\n        public boolean skipTo(int target) throws IOException {\n          if (queue == null) {\n            return initSpanQueue(target);\n          }\n  \n          boolean skipCalled = false;\n          while (queue.size() != 0 && top().doc() < target) {\n            if (top().skipTo(target)) {\n              queue.updateTop();\n            } else {\n              queue.pop();\n            }\n            skipCalled = true;\n          }\n  \n          if (skipCalled) {\n            return queue.size() != 0;\n          }\n          return next();\n        }\n\n        @Override\n        public int doc() { return top().doc(); }\n        @Override\n        public int start() { return top().start(); }\n        @Override\n        public int end() { return top().end(); }\n\n      @Override\n      public Collection<byte[]> getPayload() throws IOException {\n        ArrayList<byte[]> result = null;\n        Spans theTop = top();\n        if (theTop != null && theTop.isPayloadAvailable()) {\n          result = new ArrayList<byte[]>(theTop.getPayload());\n        }\n        return result;\n      }\n\n      @Override\n      public boolean isPayloadAvailable() throws IOException {\n        Spans top = top();\n        return top != null && top.isPayloadAvailable();\n      }\n\n      @Override\n      public String toString() {\n          return \"spans(\"+SpanOrQuery.this+\")@\"+\n            ((queue == null)?\"START\"\n             :(queue.size()>0?(doc()+\":\"+start()+\"-\"+end()):\"END\"));\n        }\n\n      @Override\n      public long cost() {\n        return cost;\n      }\n      \n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery#getSpans(AtomicReaderContext,Bits,Map[Term,TermContext]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Spans getSpans(final AtomicReaderContext context, final Bits acceptDocs, final Map<Term,TermContext> termContexts) throws IOException {\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return (clauses.get(0)).getSpans(context, acceptDocs, termContexts);\n\n    return new Spans() {\n        private SpanQueue queue = null;\n        private long cost;\n\n        private boolean initSpanQueue(int target) throws IOException {\n          queue = new SpanQueue(clauses.size());\n          Iterator<SpanQuery> i = clauses.iterator();\n          while (i.hasNext()) {\n            Spans spans = i.next().getSpans(context, acceptDocs, termContexts);\n            cost += spans.cost();\n            if (   ((target == -1) && spans.next())\n                || ((target != -1) && spans.skipTo(target))) {\n              queue.add(spans);\n            }\n          }\n          return queue.size() != 0;\n        }\n\n        @Override\n        public boolean next() throws IOException {\n          if (queue == null) {\n            return initSpanQueue(-1);\n          }\n\n          if (queue.size() == 0) { // all done\n            return false;\n          }\n\n          if (top().next()) { // move to next\n            queue.updateTop();\n            return true;\n          }\n\n          queue.pop();  // exhausted a clause\n          return queue.size() != 0;\n        }\n\n        private Spans top() { return queue.top(); }\n\n        @Override\n        public boolean skipTo(int target) throws IOException {\n          if (queue == null) {\n            return initSpanQueue(target);\n          }\n  \n          boolean skipCalled = false;\n          while (queue.size() != 0 && top().doc() < target) {\n            if (top().skipTo(target)) {\n              queue.updateTop();\n            } else {\n              queue.pop();\n            }\n            skipCalled = true;\n          }\n  \n          if (skipCalled) {\n            return queue.size() != 0;\n          }\n          return next();\n        }\n\n        @Override\n        public int doc() { return top().doc(); }\n        @Override\n        public int start() { return top().start(); }\n        @Override\n        public int end() { return top().end(); }\n\n      @Override\n      public Collection<byte[]> getPayload() throws IOException {\n        ArrayList<byte[]> result = null;\n        Spans theTop = top();\n        if (theTop != null && theTop.isPayloadAvailable()) {\n          result = new ArrayList<>(theTop.getPayload());\n        }\n        return result;\n      }\n\n      @Override\n      public boolean isPayloadAvailable() throws IOException {\n        Spans top = top();\n        return top != null && top.isPayloadAvailable();\n      }\n\n      @Override\n      public String toString() {\n          return \"spans(\"+SpanOrQuery.this+\")@\"+\n            ((queue == null)?\"START\"\n             :(queue.size()>0?(doc()+\":\"+start()+\"-\"+end()):\"END\"));\n        }\n\n      @Override\n      public long cost() {\n        return cost;\n      }\n      \n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552"],"2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a":["2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552":["c7869f64c874ebf7f317d22c00baf2b6857797a6","7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c7869f64c874ebf7f317d22c00baf2b6857797a6","2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}