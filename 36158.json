{"path":"solr/core/src/test/org/apache/solr/core/TestNonNRTOpen#testReaderIsNotNRT().mjava","commits":[{"id":"c9f81a0a8d08cc36757b7be45a8c8dcd66ff0360","date":1378833548,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestNonNRTOpen#testReaderIsNotNRT().mjava","pathOld":"/dev/null","sourceNew":"  public void testReaderIsNotNRT() {\n    // startup\n    assertNotNRT(1);\n    \n    // core reload\n    String core = h.getCore().getName();\n    h.getCoreContainer().reload(core);\n    assertNotNRT(1);\n    \n    // add a doc and commit\n    assertU(adoc(\"baz\", \"doc\"));\n    assertU(commit());\n    assertNotNRT(2);\n    \n    // add a doc and core reload\n    assertU(adoc(\"bazz\", \"doc2\"));\n    h.getCoreContainer().reload(core);\n    assertNotNRT(3);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b66851588830a6a56665a693aac80056eedba0b","date":1393981278,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestNonNRTOpen#testReaderIsNotNRT().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestNonNRTOpen#testReaderIsNotNRT().mjava","sourceNew":"  public void testReaderIsNotNRT() {\n    // startup\n    assertNotNRT(1);\n    \n    // core reload\n    String core = h.getCore().getName();\n    log.info(\"Reloading core: \" + h.getCore().toString());\n    h.getCoreContainer().reload(core);\n    assertNotNRT(1);\n    \n    // add a doc and commit\n    assertU(adoc(\"baz\", \"doc\"));\n    assertU(commit());\n    assertNotNRT(2);\n    \n    // add a doc and core reload\n    assertU(adoc(\"bazz\", \"doc2\"));\n    log.info(\"Reloading core: \" + h.getCore().toString());\n    h.getCoreContainer().reload(core);\n    assertNotNRT(3);\n  }\n\n","sourceOld":"  public void testReaderIsNotNRT() {\n    // startup\n    assertNotNRT(1);\n    \n    // core reload\n    String core = h.getCore().getName();\n    h.getCoreContainer().reload(core);\n    assertNotNRT(1);\n    \n    // add a doc and commit\n    assertU(adoc(\"baz\", \"doc\"));\n    assertU(commit());\n    assertNotNRT(2);\n    \n    // add a doc and core reload\n    assertU(adoc(\"bazz\", \"doc2\"));\n    h.getCoreContainer().reload(core);\n    assertNotNRT(3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestNonNRTOpen#testReaderIsNotNRT().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestNonNRTOpen#testReaderIsNotNRT().mjava","sourceNew":"  public void testReaderIsNotNRT() {\n    // startup\n    assertNotNRT(1);\n    \n    // core reload\n    String core = h.getCore().getName();\n    log.info(\"Reloading core: \" + h.getCore().toString());\n    h.getCoreContainer().reload(core);\n    assertNotNRT(1);\n    \n    // add a doc and commit\n    assertU(adoc(\"baz\", \"doc\"));\n    assertU(commit());\n    assertNotNRT(2);\n    \n    // add a doc and core reload\n    assertU(adoc(\"bazz\", \"doc2\"));\n    log.info(\"Reloading core: \" + h.getCore().toString());\n    h.getCoreContainer().reload(core);\n    assertNotNRT(3);\n  }\n\n","sourceOld":"  public void testReaderIsNotNRT() {\n    // startup\n    assertNotNRT(1);\n    \n    // core reload\n    String core = h.getCore().getName();\n    h.getCoreContainer().reload(core);\n    assertNotNRT(1);\n    \n    // add a doc and commit\n    assertU(adoc(\"baz\", \"doc\"));\n    assertU(commit());\n    assertNotNRT(2);\n    \n    // add a doc and core reload\n    assertU(adoc(\"bazz\", \"doc2\"));\n    h.getCoreContainer().reload(core);\n    assertNotNRT(3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac2f1cdbdc54a889e88543cc1d939a931cb96883","date":1420554488,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/core/TestNonNRTOpen#testReaderIsNotNRT().mjava","sourceNew":null,"sourceOld":"  public void testReaderIsNotNRT() {\n    // startup\n    assertNotNRT(1);\n    \n    // core reload\n    String core = h.getCore().getName();\n    log.info(\"Reloading core: \" + h.getCore().toString());\n    h.getCoreContainer().reload(core);\n    assertNotNRT(1);\n    \n    // add a doc and commit\n    assertU(adoc(\"baz\", \"doc\"));\n    assertU(commit());\n    assertNotNRT(2);\n    \n    // add a doc and core reload\n    assertU(adoc(\"bazz\", \"doc2\"));\n    log.info(\"Reloading core: \" + h.getCore().toString());\n    h.getCoreContainer().reload(core);\n    assertNotNRT(3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":["c9f81a0a8d08cc36757b7be45a8c8dcd66ff0360","3b66851588830a6a56665a693aac80056eedba0b"],"3b66851588830a6a56665a693aac80056eedba0b":["c9f81a0a8d08cc36757b7be45a8c8dcd66ff0360"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9f81a0a8d08cc36757b7be45a8c8dcd66ff0360":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ac2f1cdbdc54a889e88543cc1d939a931cb96883":["3b66851588830a6a56665a693aac80056eedba0b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ac2f1cdbdc54a889e88543cc1d939a931cb96883"]},"commit2Childs":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"3b66851588830a6a56665a693aac80056eedba0b":["96ea64d994d340044e0d57aeb6a5871539d10ca5","ac2f1cdbdc54a889e88543cc1d939a931cb96883"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9f81a0a8d08cc36757b7be45a8c8dcd66ff0360"],"c9f81a0a8d08cc36757b7be45a8c8dcd66ff0360":["96ea64d994d340044e0d57aeb6a5871539d10ca5","3b66851588830a6a56665a693aac80056eedba0b"],"ac2f1cdbdc54a889e88543cc1d939a931cb96883":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96ea64d994d340044e0d57aeb6a5871539d10ca5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}