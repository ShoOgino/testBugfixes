{"path":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.FilterStrategy#filteredBulkScorer(LeafReaderContext,Weight,DocIdSet).mjava","commits":[{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.FilterStrategy#filteredBulkScorer(LeafReaderContext,Weight,DocIdSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.FilterStrategy#filteredBulkScorer(LeafReaderContext,Weight,boolean,DocIdSet).mjava","sourceNew":"    /**\n     * Returns a filtered {@link BulkScorer} based on this\n     * strategy.  This is an optional method: the default\n     * implementation just calls {@link #filteredScorer} and\n     * wraps that into a BulkScorer.\n     *\n     * @param context\n     *          the {@link org.apache.lucene.index.LeafReaderContext} for which to return the {@link Scorer}.\n     * @param weight the {@link FilteredQuery} {@link Weight} to create the filtered scorer.\n     * @param docIdSet the filter {@link DocIdSet} to apply\n     * @return a filtered top scorer\n     */\n    public BulkScorer filteredBulkScorer(LeafReaderContext context,\n        Weight weight, DocIdSet docIdSet) throws IOException {\n      Scorer scorer = filteredScorer(context, weight, docIdSet);\n      if (scorer == null) {\n        return null;\n      }\n      // This impl always scores docs in order, so we can\n      // ignore scoreDocsInOrder:\n      return new Weight.DefaultBulkScorer(scorer);\n    }\n\n","sourceOld":"    /**\n     * Returns a filtered {@link BulkScorer} based on this\n     * strategy.  This is an optional method: the default\n     * implementation just calls {@link #filteredScorer} and\n     * wraps that into a BulkScorer.\n     *\n     * @param context\n     *          the {@link org.apache.lucene.index.LeafReaderContext} for which to return the {@link Scorer}.\n     * @param weight the {@link FilteredQuery} {@link Weight} to create the filtered scorer.\n     * @param docIdSet the filter {@link DocIdSet} to apply\n     * @return a filtered top scorer\n     */\n    public BulkScorer filteredBulkScorer(LeafReaderContext context,\n        Weight weight, boolean scoreDocsInOrder, DocIdSet docIdSet) throws IOException {\n      Scorer scorer = filteredScorer(context, weight, docIdSet);\n      if (scorer == null) {\n        return null;\n      }\n      // This impl always scores docs in order, so we can\n      // ignore scoreDocsInOrder:\n      return new Weight.DefaultBulkScorer(scorer);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.FilterStrategy#filteredBulkScorer(LeafReaderContext,Weight,DocIdSet,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.FilterStrategy#filteredBulkScorer(LeafReaderContext,Weight,DocIdSet).mjava","sourceNew":"    /**\n     * Returns a filtered {@link BulkScorer} based on this\n     * strategy.  This is an optional method: the default\n     * implementation just calls {@link #filteredScorer} and\n     * wraps that into a BulkScorer.\n     *\n     * @param context\n     *          the {@link org.apache.lucene.index.LeafReaderContext} for which to return the {@link Scorer}.\n     * @param weight the {@link FilteredQuery} {@link Weight} to create the filtered scorer.\n     * @param docIdSet the filter {@link DocIdSet} to apply\n     * @return a filtered top scorer\n     */\n    public BulkScorer filteredBulkScorer(LeafReaderContext context,\n        Weight weight, DocIdSet docIdSet, boolean needsScores) throws IOException {\n      Scorer scorer = filteredScorer(context, weight, docIdSet, needsScores);\n      if (scorer == null) {\n        return null;\n      }\n      // This impl always scores docs in order, so we can\n      // ignore scoreDocsInOrder:\n      return new Weight.DefaultBulkScorer(scorer);\n    }\n\n","sourceOld":"    /**\n     * Returns a filtered {@link BulkScorer} based on this\n     * strategy.  This is an optional method: the default\n     * implementation just calls {@link #filteredScorer} and\n     * wraps that into a BulkScorer.\n     *\n     * @param context\n     *          the {@link org.apache.lucene.index.LeafReaderContext} for which to return the {@link Scorer}.\n     * @param weight the {@link FilteredQuery} {@link Weight} to create the filtered scorer.\n     * @param docIdSet the filter {@link DocIdSet} to apply\n     * @return a filtered top scorer\n     */\n    public BulkScorer filteredBulkScorer(LeafReaderContext context,\n        Weight weight, DocIdSet docIdSet) throws IOException {\n      Scorer scorer = filteredScorer(context, weight, docIdSet);\n      if (scorer == null) {\n        return null;\n      }\n      // This impl always scores docs in order, so we can\n      // ignore scoreDocsInOrder:\n      return new Weight.DefaultBulkScorer(scorer);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed5ee3fe575910625535c3ecfeb2c055f2c95738","date":1423238579,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.FilterStrategy#filteredBulkScorer(LeafReaderContext,Weight,DocIdSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.FilterStrategy#filteredBulkScorer(LeafReaderContext,Weight,DocIdSet,boolean).mjava","sourceNew":"    /**\n     * Returns a filtered {@link BulkScorer} based on this\n     * strategy.  This is an optional method: the default\n     * implementation just calls {@link #filteredScorer} and\n     * wraps that into a BulkScorer.\n     *\n     * @param context\n     *          the {@link org.apache.lucene.index.LeafReaderContext} for which to return the {@link Scorer}.\n     * @param weight the {@link FilteredQuery} {@link Weight} to create the filtered scorer.\n     * @param docIdSet the filter {@link DocIdSet} to apply\n     * @return a filtered top scorer\n     */\n    public BulkScorer filteredBulkScorer(LeafReaderContext context,\n        Weight weight, DocIdSet docIdSet) throws IOException {\n      Scorer scorer = filteredScorer(context, weight, docIdSet);\n      if (scorer == null) {\n        return null;\n      }\n      // This impl always scores docs in order, so we can\n      // ignore scoreDocsInOrder:\n      return new Weight.DefaultBulkScorer(scorer);\n    }\n\n","sourceOld":"    /**\n     * Returns a filtered {@link BulkScorer} based on this\n     * strategy.  This is an optional method: the default\n     * implementation just calls {@link #filteredScorer} and\n     * wraps that into a BulkScorer.\n     *\n     * @param context\n     *          the {@link org.apache.lucene.index.LeafReaderContext} for which to return the {@link Scorer}.\n     * @param weight the {@link FilteredQuery} {@link Weight} to create the filtered scorer.\n     * @param docIdSet the filter {@link DocIdSet} to apply\n     * @return a filtered top scorer\n     */\n    public BulkScorer filteredBulkScorer(LeafReaderContext context,\n        Weight weight, DocIdSet docIdSet, boolean needsScores) throws IOException {\n      Scorer scorer = filteredScorer(context, weight, docIdSet);\n      if (scorer == null) {\n        return null;\n      }\n      // This impl always scores docs in order, so we can\n      // ignore scoreDocsInOrder:\n      return new Weight.DefaultBulkScorer(scorer);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1db68e96dd908fcd79ef809095822736aa601d08","date":1434630596,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.FilterStrategy#filteredBulkScorer(LeafReaderContext,Weight,DocIdSet).mjava","sourceNew":null,"sourceOld":"    /**\n     * Returns a filtered {@link BulkScorer} based on this\n     * strategy.  This is an optional method: the default\n     * implementation just calls {@link #filteredScorer} and\n     * wraps that into a BulkScorer.\n     *\n     * @param context\n     *          the {@link org.apache.lucene.index.LeafReaderContext} for which to return the {@link Scorer}.\n     * @param weight the {@link FilteredQuery} {@link Weight} to create the filtered scorer.\n     * @param docIdSet the filter {@link DocIdSet} to apply\n     * @return a filtered top scorer\n     */\n    public BulkScorer filteredBulkScorer(LeafReaderContext context,\n        Weight weight, DocIdSet docIdSet) throws IOException {\n      Scorer scorer = filteredScorer(context, weight, docIdSet);\n      if (scorer == null) {\n        return null;\n      }\n      // This impl always scores docs in order, so we can\n      // ignore scoreDocsInOrder:\n      return new Weight.DefaultBulkScorer(scorer);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1db68e96dd908fcd79ef809095822736aa601d08":["ed5ee3fe575910625535c3ecfeb2c055f2c95738"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ed5ee3fe575910625535c3ecfeb2c055f2c95738":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1db68e96dd908fcd79ef809095822736aa601d08"]},"commit2Childs":{"1db68e96dd908fcd79ef809095822736aa601d08":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["ed5ee3fe575910625535c3ecfeb2c055f2c95738"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"ed5ee3fe575910625535c3ecfeb2c055f2c95738":["1db68e96dd908fcd79ef809095822736aa601d08"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}