{"path":"lucene/src/java/org/apache/lucene/search/TimeLimitingCollector.TimerThread#TimerThread().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TimeLimitingCollector.TimerThread#TimerThread().mjava","pathOld":"src/java/org/apache/lucene/search/TimeLimitingCollector.TimerThread#TimerThread().mjava","sourceNew":"    /**\n     * TimerThread provides a pseudo-clock service to all searching\n     * threads, so that they can count elapsed time with less overhead\n     * than repeatedly calling System.currentTimeMillis.  A single\n     * thread should be created to be used for all searches.\n     */\n    private TimerThread() {\n      super(\"TimeLimitedCollector timer thread\");\n      this.setDaemon( true );\n    }\n\n","sourceOld":"    /**\n     * TimerThread provides a pseudo-clock service to all searching\n     * threads, so that they can count elapsed time with less overhead\n     * than repeatedly calling System.currentTimeMillis.  A single\n     * thread should be created to be used for all searches.\n     */\n    private TimerThread() {\n      super(\"TimeLimitedCollector timer thread\");\n      this.setDaemon( true );\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23550189554f52bad1625fceab84a71d20a4df3f","date":1321064526,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/TimeLimitingCollector.TimerThread#TimerThread().mjava","sourceNew":null,"sourceOld":"    /**\n     * TimerThread provides a pseudo-clock service to all searching\n     * threads, so that they can count elapsed time with less overhead\n     * than repeatedly calling System.currentTimeMillis.  A single\n     * thread should be created to be used for all searches.\n     */\n    private TimerThread() {\n      super(\"TimeLimitedCollector timer thread\");\n      this.setDaemon( true );\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"23550189554f52bad1625fceab84a71d20a4df3f":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23550189554f52bad1625fceab84a71d20a4df3f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"23550189554f52bad1625fceab84a71d20a4df3f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["23550189554f52bad1625fceab84a71d20a4df3f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}