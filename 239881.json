{"path":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery#equals(Object).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery#equals(Object).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanNearQuery#equals(Object).mjava","sourceNew":"  /** Returns true iff <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof SpanNearQuery)) return false;\n\n    final SpanNearQuery spanNearQuery = (SpanNearQuery) o;\n\n    if (inOrder != spanNearQuery.inOrder) return false;\n    if (slop != spanNearQuery.slop) return false;\n    if (!clauses.equals(spanNearQuery.clauses)) return false;\n\n    return getBoost() == spanNearQuery.getBoost();\n  }\n\n","sourceOld":"  /** Returns true iff <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof SpanNearQuery)) return false;\n\n    final SpanNearQuery spanNearQuery = (SpanNearQuery) o;\n\n    if (inOrder != spanNearQuery.inOrder) return false;\n    if (slop != spanNearQuery.slop) return false;\n    if (!clauses.equals(spanNearQuery.clauses)) return false;\n\n    return getBoost() == spanNearQuery.getBoost();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaa8203c0525e91bf87759d14591ba3ff26dfa7f","date":1430913024,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery#equals(Object).mjava","sourceNew":"  /** Returns true iff <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (! super.equals(o)) {\n      return false;\n    }\n    final SpanNearQuery spanNearQuery = (SpanNearQuery) o;\n\n    return (inOrder == spanNearQuery.inOrder)\n        && (slop == spanNearQuery.slop)\n        && (collectPayloads == spanNearQuery.collectPayloads)\n        && clauses.equals(spanNearQuery.clauses);\n  }\n\n","sourceOld":"  /** Returns true iff <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof SpanNearQuery)) return false;\n\n    final SpanNearQuery spanNearQuery = (SpanNearQuery) o;\n\n    if (inOrder != spanNearQuery.inOrder) return false;\n    if (slop != spanNearQuery.slop) return false;\n    if (!clauses.equals(spanNearQuery.clauses)) return false;\n\n    return getBoost() == spanNearQuery.getBoost();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67926a77440e5dcb5f9c63f02b9bbe865c066978","date":1434459674,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery#equals(Object).mjava","sourceNew":"  /** Returns true iff <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (! super.equals(o)) {\n      return false;\n    }\n    final SpanNearQuery spanNearQuery = (SpanNearQuery) o;\n\n    return (inOrder == spanNearQuery.inOrder)\n        && (slop == spanNearQuery.slop)\n        && clauses.equals(spanNearQuery.clauses);\n  }\n\n","sourceOld":"  /** Returns true iff <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (! super.equals(o)) {\n      return false;\n    }\n    final SpanNearQuery spanNearQuery = (SpanNearQuery) o;\n\n    return (inOrder == spanNearQuery.inOrder)\n        && (slop == spanNearQuery.slop)\n        && (collectPayloads == spanNearQuery.collectPayloads)\n        && clauses.equals(spanNearQuery.clauses);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7bc21595222ae4f75509300fbb7726691f387f","date":1464078795,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object other) {\n    return sameClassAs(other) &&\n           equalsTo(getClass().cast(other));\n  }\n\n","sourceOld":"  /** Returns true iff <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (! super.equals(o)) {\n      return false;\n    }\n    final SpanNearQuery spanNearQuery = (SpanNearQuery) o;\n\n    return (inOrder == spanNearQuery.inOrder)\n        && (slop == spanNearQuery.slop)\n        && clauses.equals(spanNearQuery.clauses);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object other) {\n    return sameClassAs(other) &&\n           equalsTo(getClass().cast(other));\n  }\n\n","sourceOld":"  /** Returns true iff <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (! super.equals(o)) {\n      return false;\n    }\n    final SpanNearQuery spanNearQuery = (SpanNearQuery) o;\n\n    return (inOrder == spanNearQuery.inOrder)\n        && (slop == spanNearQuery.slop)\n        && clauses.equals(spanNearQuery.clauses);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"67926a77440e5dcb5f9c63f02b9bbe865c066978":["aaa8203c0525e91bf87759d14591ba3ff26dfa7f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e7bc21595222ae4f75509300fbb7726691f387f":["67926a77440e5dcb5f9c63f02b9bbe865c066978"],"aaa8203c0525e91bf87759d14591ba3ff26dfa7f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["67926a77440e5dcb5f9c63f02b9bbe865c066978","0e7bc21595222ae4f75509300fbb7726691f387f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e7bc21595222ae4f75509300fbb7726691f387f"]},"commit2Childs":{"67926a77440e5dcb5f9c63f02b9bbe865c066978":["0e7bc21595222ae4f75509300fbb7726691f387f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["aaa8203c0525e91bf87759d14591ba3ff26dfa7f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0e7bc21595222ae4f75509300fbb7726691f387f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aaa8203c0525e91bf87759d14591ba3ff26dfa7f":["67926a77440e5dcb5f9c63f02b9bbe865c066978"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}