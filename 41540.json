{"path":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsFormat#TempPostingsFormat(int,int).mjava","commits":[{"id":"0a570bec4aec8585a4eea44849bfb2bc264208c4","date":1371308653,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsFormat#TempPostingsFormat(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Creates {@code TempPostingsFormat} with custom\n   *  values for {@code minBlockSize} and {@code\n   *  maxBlockSize} passed to block terms dictionary.\n   *  @see TempBlockTermsWriter#TempBlockTermsWriter(SegmentWriteState,PostingsWriterBase,int,int) */\n  public TempPostingsFormat(int minTermBlockSize, int maxTermBlockSize) {\n    super(\"TempBlock\");\n    this.minTermBlockSize = minTermBlockSize;\n    assert minTermBlockSize > 1;\n    this.maxTermBlockSize = maxTermBlockSize;\n    assert minTermBlockSize <= maxTermBlockSize;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80c2fa34e9c9fca694e8ca0ce52e50c2651777ce","date":1371391350,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsFormat#TempPostingsFormat(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsFormat#TempPostingsFormat(int,int).mjava","sourceNew":"  /** Creates {@code TempPostingsFormat} with custom\n   *  values for {@code minBlockSize} and {@code\n   *  maxBlockSize} passed to block terms dictionary.\n   *  @see TempBlockTermsWriter#TempBlockTermsWriter(SegmentWriteState,TempPostingsWriterBase,int,int) */\n  public TempPostingsFormat(int minTermBlockSize, int maxTermBlockSize) {\n    super(\"TempBlock\");\n    this.minTermBlockSize = minTermBlockSize;\n    assert minTermBlockSize > 1;\n    this.maxTermBlockSize = maxTermBlockSize;\n    assert minTermBlockSize <= maxTermBlockSize;\n  }\n\n","sourceOld":"  /** Creates {@code TempPostingsFormat} with custom\n   *  values for {@code minBlockSize} and {@code\n   *  maxBlockSize} passed to block terms dictionary.\n   *  @see TempBlockTermsWriter#TempBlockTermsWriter(SegmentWriteState,PostingsWriterBase,int,int) */\n  public TempPostingsFormat(int minTermBlockSize, int maxTermBlockSize) {\n    super(\"TempBlock\");\n    this.minTermBlockSize = minTermBlockSize;\n    assert minTermBlockSize > 1;\n    this.maxTermBlockSize = maxTermBlockSize;\n    assert minTermBlockSize <= maxTermBlockSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a509b6df968a74c38a0528f5bf6ea26f503b756","date":1373188457,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockPostingsFormat#TempBlockPostingsFormat(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsFormat#TempPostingsFormat(int,int).mjava","sourceNew":"  /** Creates {@code TempBlockPostingsFormat} with custom\n   *  values for {@code minBlockSize} and {@code\n   *  maxBlockSize} passed to block terms dictionary.\n   *  @see TempBlockTermsWriter#TempBlockTermsWriter(SegmentWriteState,TempPostingsWriterBase,int,int) */\n  public TempBlockPostingsFormat(int minTermBlockSize, int maxTermBlockSize) {\n    super(\"TempBlock\");\n    this.minTermBlockSize = minTermBlockSize;\n    assert minTermBlockSize > 1;\n    this.maxTermBlockSize = maxTermBlockSize;\n    assert minTermBlockSize <= maxTermBlockSize;\n  }\n\n","sourceOld":"  /** Creates {@code TempPostingsFormat} with custom\n   *  values for {@code minBlockSize} and {@code\n   *  maxBlockSize} passed to block terms dictionary.\n   *  @see TempBlockTermsWriter#TempBlockTermsWriter(SegmentWriteState,TempPostingsWriterBase,int,int) */\n  public TempPostingsFormat(int minTermBlockSize, int maxTermBlockSize) {\n    super(\"TempBlock\");\n    this.minTermBlockSize = minTermBlockSize;\n    assert minTermBlockSize > 1;\n    this.maxTermBlockSize = maxTermBlockSize;\n    assert minTermBlockSize <= maxTermBlockSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a570bec4aec8585a4eea44849bfb2bc264208c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80c2fa34e9c9fca694e8ca0ce52e50c2651777ce":["0a570bec4aec8585a4eea44849bfb2bc264208c4"],"3a509b6df968a74c38a0528f5bf6ea26f503b756":["80c2fa34e9c9fca694e8ca0ce52e50c2651777ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0a570bec4aec8585a4eea44849bfb2bc264208c4":["80c2fa34e9c9fca694e8ca0ce52e50c2651777ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a570bec4aec8585a4eea44849bfb2bc264208c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"80c2fa34e9c9fca694e8ca0ce52e50c2651777ce":["3a509b6df968a74c38a0528f5bf6ea26f503b756"],"3a509b6df968a74c38a0528f5bf6ea26f503b756":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a509b6df968a74c38a0528f5bf6ea26f503b756","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}