{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.PackedIndexTree#readNodeData(boolean).mjava","commits":[{"id":"9fc0d60683b47b5d922124c31f57c8b34734f9e6","date":1480846684,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.PackedIndexTree#readNodeData(boolean).mjava","pathOld":"/dev/null","sourceNew":"    private void readNodeData(boolean isLeft) {\n\n      leafBlockFPStack[level] = leafBlockFPStack[level-1];\n\n      // read leaf block FP delta\n      if (isLeft == false) {\n        leafBlockFPStack[level] += in.readVLong();\n      }\n\n      if (isLeafNode()) {\n        splitDim = -1;\n      } else {\n\n        // read split dim, prefix, firstDiffByteDelta encoded as int:\n        int code = in.readVInt();\n        splitDim = code % numDims;\n        splitDims[level] = splitDim;\n        code /= numDims;\n        int prefix = code % (1+bytesPerDim);\n        int suffix = bytesPerDim - prefix;\n\n        if (splitValuesStack[level] == null) {\n          splitValuesStack[level] = new byte[packedBytesLength];\n        }\n        System.arraycopy(splitValuesStack[level-1], 0, splitValuesStack[level], 0, packedBytesLength);\n        if (suffix > 0) {\n          int firstDiffByteDelta = code / (1+bytesPerDim);\n          if (negativeDeltas[level*numDims + splitDim]) {\n            firstDiffByteDelta = -firstDiffByteDelta;\n          }\n          int oldByte = splitValuesStack[level][splitDim*bytesPerDim+prefix] & 0xFF;\n          splitValuesStack[level][splitDim*bytesPerDim+prefix] = (byte) (oldByte + firstDiffByteDelta);\n          in.readBytes(splitValuesStack[level], splitDim*bytesPerDim+prefix+1, suffix-1);\n        } else {\n          // our split value is == last split value in this dim, which can happen when there are many duplicate values\n        }\n\n        int leftNumBytes;\n        if (nodeID * 2 < leafNodeOffset) {\n          leftNumBytes = in.readVInt();\n        } else {\n          leftNumBytes = 0;\n        }\n\n        leftNodePositions[level] = in.getPosition();\n        rightNodePositions[level] = leftNodePositions[level] + leftNumBytes;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.PackedIndexTree#readNodeData(boolean).mjava","pathOld":"/dev/null","sourceNew":"    private void readNodeData(boolean isLeft) {\n\n      leafBlockFPStack[level] = leafBlockFPStack[level-1];\n\n      // read leaf block FP delta\n      if (isLeft == false) {\n        leafBlockFPStack[level] += in.readVLong();\n      }\n\n      if (isLeafNode()) {\n        splitDim = -1;\n      } else {\n\n        // read split dim, prefix, firstDiffByteDelta encoded as int:\n        int code = in.readVInt();\n        splitDim = code % numDims;\n        splitDims[level] = splitDim;\n        code /= numDims;\n        int prefix = code % (1+bytesPerDim);\n        int suffix = bytesPerDim - prefix;\n\n        if (splitValuesStack[level] == null) {\n          splitValuesStack[level] = new byte[packedBytesLength];\n        }\n        System.arraycopy(splitValuesStack[level-1], 0, splitValuesStack[level], 0, packedBytesLength);\n        if (suffix > 0) {\n          int firstDiffByteDelta = code / (1+bytesPerDim);\n          if (negativeDeltas[level*numDims + splitDim]) {\n            firstDiffByteDelta = -firstDiffByteDelta;\n          }\n          int oldByte = splitValuesStack[level][splitDim*bytesPerDim+prefix] & 0xFF;\n          splitValuesStack[level][splitDim*bytesPerDim+prefix] = (byte) (oldByte + firstDiffByteDelta);\n          in.readBytes(splitValuesStack[level], splitDim*bytesPerDim+prefix+1, suffix-1);\n        } else {\n          // our split value is == last split value in this dim, which can happen when there are many duplicate values\n        }\n\n        int leftNumBytes;\n        if (nodeID * 2 < leafNodeOffset) {\n          leftNumBytes = in.readVInt();\n        } else {\n          leftNumBytes = 0;\n        }\n\n        leftNodePositions[level] = in.getPosition();\n        rightNodePositions[level] = leftNodePositions[level] + leftNumBytes;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0e7448656541edc407546460641f47950451b16","date":1519150500,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.IndexTree#readNodeData(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.PackedIndexTree#readNodeData(boolean).mjava","sourceNew":"    private void readNodeData(boolean isLeft) {\n\n      leafBlockFPStack[level] = leafBlockFPStack[level-1];\n\n      // read leaf block FP delta\n      if (isLeft == false) {\n        leafBlockFPStack[level] += in.readVLong();\n      }\n\n      if (isLeafNode()) {\n        splitDim = -1;\n      } else {\n\n        // read split dim, prefix, firstDiffByteDelta encoded as int:\n        int code = in.readVInt();\n        splitDim = code % numDims;\n        splitDims[level] = splitDim;\n        code /= numDims;\n        int prefix = code % (1+bytesPerDim);\n        int suffix = bytesPerDim - prefix;\n\n        if (splitValuesStack[level] == null) {\n          splitValuesStack[level] = new byte[packedBytesLength];\n        }\n        System.arraycopy(splitValuesStack[level-1], 0, splitValuesStack[level], 0, packedBytesLength);\n        if (suffix > 0) {\n          int firstDiffByteDelta = code / (1+bytesPerDim);\n          if (negativeDeltas[level*numDims + splitDim]) {\n            firstDiffByteDelta = -firstDiffByteDelta;\n          }\n          int oldByte = splitValuesStack[level][splitDim*bytesPerDim+prefix] & 0xFF;\n          splitValuesStack[level][splitDim*bytesPerDim+prefix] = (byte) (oldByte + firstDiffByteDelta);\n          in.readBytes(splitValuesStack[level], splitDim*bytesPerDim+prefix+1, suffix-1);\n        } else {\n          // our split value is == last split value in this dim, which can happen when there are many duplicate values\n        }\n\n        int leftNumBytes;\n        if (nodeID * 2 < leafNodeOffset) {\n          leftNumBytes = in.readVInt();\n        } else {\n          leftNumBytes = 0;\n        }\n\n        leftNodePositions[level] = in.getPosition();\n        rightNodePositions[level] = leftNodePositions[level] + leftNumBytes;\n      }\n    }\n\n","sourceOld":"    private void readNodeData(boolean isLeft) {\n\n      leafBlockFPStack[level] = leafBlockFPStack[level-1];\n\n      // read leaf block FP delta\n      if (isLeft == false) {\n        leafBlockFPStack[level] += in.readVLong();\n      }\n\n      if (isLeafNode()) {\n        splitDim = -1;\n      } else {\n\n        // read split dim, prefix, firstDiffByteDelta encoded as int:\n        int code = in.readVInt();\n        splitDim = code % numDims;\n        splitDims[level] = splitDim;\n        code /= numDims;\n        int prefix = code % (1+bytesPerDim);\n        int suffix = bytesPerDim - prefix;\n\n        if (splitValuesStack[level] == null) {\n          splitValuesStack[level] = new byte[packedBytesLength];\n        }\n        System.arraycopy(splitValuesStack[level-1], 0, splitValuesStack[level], 0, packedBytesLength);\n        if (suffix > 0) {\n          int firstDiffByteDelta = code / (1+bytesPerDim);\n          if (negativeDeltas[level*numDims + splitDim]) {\n            firstDiffByteDelta = -firstDiffByteDelta;\n          }\n          int oldByte = splitValuesStack[level][splitDim*bytesPerDim+prefix] & 0xFF;\n          splitValuesStack[level][splitDim*bytesPerDim+prefix] = (byte) (oldByte + firstDiffByteDelta);\n          in.readBytes(splitValuesStack[level], splitDim*bytesPerDim+prefix+1, suffix-1);\n        } else {\n          // our split value is == last split value in this dim, which can happen when there are many duplicate values\n        }\n\n        int leftNumBytes;\n        if (nodeID * 2 < leafNodeOffset) {\n          leftNumBytes = in.readVInt();\n        } else {\n          leftNumBytes = 0;\n        }\n\n        leftNodePositions[level] = in.getPosition();\n        rightNodePositions[level] = leftNodePositions[level] + leftNumBytes;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0e7448656541edc407546460641f47950451b16":["9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c0e7448656541edc407546460641f47950451b16"]},"commit2Childs":{"c0e7448656541edc407546460641f47950451b16":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["c0e7448656541edc407546460641f47950451b16","9856095f7afb5a607bf5e65077615ed91273508c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","9856095f7afb5a607bf5e65077615ed91273508c"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}