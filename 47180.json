{"path":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI.FSRead#read(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"8476949555f799dff381770c01cfad051a264487","date":1570505073,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI.FSRead#read(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"    @Command\n    public void read(SolrQueryRequest req, SolrQueryResponse rsp) {\n      String path = req.getPathTemplateValues().get(\"*\");\n      String pathCopy = path;\n      String getFrom = req.getParams().get(\"getFrom\");\n      if (getFrom != null) {\n        coreContainer.getUpdateShardHandler().getUpdateExecutor().submit(() -> {\n          log.debug(\"Downloading file {}\", pathCopy);\n          try {\n            packageStore.fetch(pathCopy, getFrom);\n          } catch (Exception e) {\n            log.error(\"Failed to download file: \" + pathCopy, e);\n          }\n          log.info(\"downloaded file: {}\", pathCopy);\n        });\n        return;\n\n      }\n      if (path == null) {\n        path = \"\";\n      }\n\n      PackageStore.FileType typ = packageStore.getType(path);\n      if (typ == PackageStore.FileType.NOFILE) {\n        rsp.add(\"files\", Collections.singletonMap(path, null));\n        return;\n      }\n      if (typ == PackageStore.FileType.DIRECTORY) {\n        rsp.add(\"files\", Collections.singletonMap(path, packageStore.list(path, null)));\n        return;\n      }\n      if (req.getParams().getBool(\"meta\", false)) {\n        if (typ == PackageStore.FileType.FILE) {\n          int idx = path.lastIndexOf('/');\n          String fileName = path.substring(idx + 1);\n          String parentPath = path.substring(0, path.lastIndexOf('/'));\n          List l = packageStore.list(parentPath, s -> s.equals(fileName));\n          rsp.add(\"files\", Collections.singletonMap(path, l.isEmpty() ? null : l.get(0)));\n          return;\n        }\n      } else {\n        writeRawFile(req, rsp, path);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"849dbf8570155b8e5fd03d8c2274a0a60491051c","date":1570859954,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI.FSRead#read(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI.FSRead#read(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"    @Command\n    public void read(SolrQueryRequest req, SolrQueryResponse rsp) {\n      String path = req.getPathTemplateValues().get(\"*\");\n      String pathCopy = path;\n      String getFrom = req.getParams().get(\"getFrom\");\n      if (getFrom != null) {\n        coreContainer.getUpdateShardHandler().getUpdateExecutor().submit(() -> {\n          log.debug(\"Downloading file {}\", pathCopy);\n          try {\n            packageStore.fetch(pathCopy, getFrom);\n          } catch (Exception e) {\n            log.error(\"Failed to download file: \" + pathCopy, e);\n          }\n          log.info(\"downloaded file: {}\", pathCopy);\n        });\n        return;\n\n      }\n      if (path == null) {\n        path = \"\";\n      }\n\n      PackageStore.FileType typ = packageStore.getType(path, false);\n      if (typ == PackageStore.FileType.NOFILE) {\n        rsp.add(\"files\", Collections.singletonMap(path, null));\n        return;\n      }\n      if (typ == PackageStore.FileType.DIRECTORY) {\n        rsp.add(\"files\", Collections.singletonMap(path, packageStore.list(path, null)));\n        return;\n      }\n      if (req.getParams().getBool(\"meta\", false)) {\n        if (typ == PackageStore.FileType.FILE) {\n          int idx = path.lastIndexOf('/');\n          String fileName = path.substring(idx + 1);\n          String parentPath = path.substring(0, path.lastIndexOf('/'));\n          List l = packageStore.list(parentPath, s -> s.equals(fileName));\n          rsp.add(\"files\", Collections.singletonMap(path, l.isEmpty() ? null : l.get(0)));\n          return;\n        }\n      } else {\n        writeRawFile(req, rsp, path);\n      }\n    }\n\n","sourceOld":"    @Command\n    public void read(SolrQueryRequest req, SolrQueryResponse rsp) {\n      String path = req.getPathTemplateValues().get(\"*\");\n      String pathCopy = path;\n      String getFrom = req.getParams().get(\"getFrom\");\n      if (getFrom != null) {\n        coreContainer.getUpdateShardHandler().getUpdateExecutor().submit(() -> {\n          log.debug(\"Downloading file {}\", pathCopy);\n          try {\n            packageStore.fetch(pathCopy, getFrom);\n          } catch (Exception e) {\n            log.error(\"Failed to download file: \" + pathCopy, e);\n          }\n          log.info(\"downloaded file: {}\", pathCopy);\n        });\n        return;\n\n      }\n      if (path == null) {\n        path = \"\";\n      }\n\n      PackageStore.FileType typ = packageStore.getType(path);\n      if (typ == PackageStore.FileType.NOFILE) {\n        rsp.add(\"files\", Collections.singletonMap(path, null));\n        return;\n      }\n      if (typ == PackageStore.FileType.DIRECTORY) {\n        rsp.add(\"files\", Collections.singletonMap(path, packageStore.list(path, null)));\n        return;\n      }\n      if (req.getParams().getBool(\"meta\", false)) {\n        if (typ == PackageStore.FileType.FILE) {\n          int idx = path.lastIndexOf('/');\n          String fileName = path.substring(idx + 1);\n          String parentPath = path.substring(0, path.lastIndexOf('/'));\n          List l = packageStore.list(parentPath, s -> s.equals(fileName));\n          rsp.add(\"files\", Collections.singletonMap(path, l.isEmpty() ? null : l.get(0)));\n          return;\n        }\n      } else {\n        writeRawFile(req, rsp, path);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI.FSRead#read(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"    @Command\n    public void read(SolrQueryRequest req, SolrQueryResponse rsp) {\n      String path = req.getPathTemplateValues().get(\"*\");\n      String pathCopy = path;\n      String getFrom = req.getParams().get(\"getFrom\");\n      if (getFrom != null) {\n        coreContainer.getUpdateShardHandler().getUpdateExecutor().submit(() -> {\n          log.debug(\"Downloading file {}\", pathCopy);\n          try {\n            packageStore.fetch(pathCopy, getFrom);\n          } catch (Exception e) {\n            log.error(\"Failed to download file: \" + pathCopy, e);\n          }\n          log.info(\"downloaded file: {}\", pathCopy);\n        });\n        return;\n\n      }\n      if (path == null) {\n        path = \"\";\n      }\n\n      PackageStore.FileType typ = packageStore.getType(path, false);\n      if (typ == PackageStore.FileType.NOFILE) {\n        rsp.add(\"files\", Collections.singletonMap(path, null));\n        return;\n      }\n      if (typ == PackageStore.FileType.DIRECTORY) {\n        rsp.add(\"files\", Collections.singletonMap(path, packageStore.list(path, null)));\n        return;\n      }\n      if (req.getParams().getBool(\"meta\", false)) {\n        if (typ == PackageStore.FileType.FILE) {\n          int idx = path.lastIndexOf('/');\n          String fileName = path.substring(idx + 1);\n          String parentPath = path.substring(0, path.lastIndexOf('/'));\n          List l = packageStore.list(parentPath, s -> s.equals(fileName));\n          rsp.add(\"files\", Collections.singletonMap(path, l.isEmpty() ? null : l.get(0)));\n          return;\n        }\n      } else {\n        writeRawFile(req, rsp, path);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d218decf811b7a0a4d86218c54c79c74a962374b","date":1578632144,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI.FSRead#read(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI.FSRead#read(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"    @Command\n    public void read(SolrQueryRequest req, SolrQueryResponse rsp) {\n      String path = req.getPathTemplateValues().get(\"*\");\n      String pathCopy = path;\n      if (req.getParams().getBool(\"sync\", false)) {\n        try {\n          packageStore.syncToAllNodes(path);\n          return;\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error getting file \", e);\n        }\n      }\n      String getFrom = req.getParams().get(\"getFrom\");\n      if (getFrom != null) {\n        coreContainer.getUpdateShardHandler().getUpdateExecutor().submit(() -> {\n          log.debug(\"Downloading file {}\", pathCopy);\n          try {\n            packageStore.fetch(pathCopy, getFrom);\n          } catch (Exception e) {\n            log.error(\"Failed to download file: \" + pathCopy, e);\n          }\n          log.info(\"downloaded file: {}\", pathCopy);\n        });\n        return;\n\n      }\n      if (path == null) {\n        path = \"\";\n      }\n\n      PackageStore.FileType typ = packageStore.getType(path, false);\n      if (typ == PackageStore.FileType.NOFILE) {\n        rsp.add(\"files\", Collections.singletonMap(path, null));\n        return;\n      }\n      if (typ == PackageStore.FileType.DIRECTORY) {\n        rsp.add(\"files\", Collections.singletonMap(path, packageStore.list(path, null)));\n        return;\n      }\n      if (req.getParams().getBool(\"meta\", false)) {\n        if (typ == PackageStore.FileType.FILE) {\n          int idx = path.lastIndexOf('/');\n          String fileName = path.substring(idx + 1);\n          String parentPath = path.substring(0, path.lastIndexOf('/'));\n          List l = packageStore.list(parentPath, s -> s.equals(fileName));\n          rsp.add(\"files\", Collections.singletonMap(path, l.isEmpty() ? null : l.get(0)));\n          return;\n        }\n      } else {\n        writeRawFile(req, rsp, path);\n      }\n    }\n\n","sourceOld":"    @Command\n    public void read(SolrQueryRequest req, SolrQueryResponse rsp) {\n      String path = req.getPathTemplateValues().get(\"*\");\n      String pathCopy = path;\n      String getFrom = req.getParams().get(\"getFrom\");\n      if (getFrom != null) {\n        coreContainer.getUpdateShardHandler().getUpdateExecutor().submit(() -> {\n          log.debug(\"Downloading file {}\", pathCopy);\n          try {\n            packageStore.fetch(pathCopy, getFrom);\n          } catch (Exception e) {\n            log.error(\"Failed to download file: \" + pathCopy, e);\n          }\n          log.info(\"downloaded file: {}\", pathCopy);\n        });\n        return;\n\n      }\n      if (path == null) {\n        path = \"\";\n      }\n\n      PackageStore.FileType typ = packageStore.getType(path, false);\n      if (typ == PackageStore.FileType.NOFILE) {\n        rsp.add(\"files\", Collections.singletonMap(path, null));\n        return;\n      }\n      if (typ == PackageStore.FileType.DIRECTORY) {\n        rsp.add(\"files\", Collections.singletonMap(path, packageStore.list(path, null)));\n        return;\n      }\n      if (req.getParams().getBool(\"meta\", false)) {\n        if (typ == PackageStore.FileType.FILE) {\n          int idx = path.lastIndexOf('/');\n          String fileName = path.substring(idx + 1);\n          String parentPath = path.substring(0, path.lastIndexOf('/'));\n          List l = packageStore.list(parentPath, s -> s.equals(fileName));\n          rsp.add(\"files\", Collections.singletonMap(path, l.isEmpty() ? null : l.get(0)));\n          return;\n        }\n      } else {\n        writeRawFile(req, rsp, path);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8f0a7504661c8e51be5c63e87f9d79a36d9116c","date":1578657638,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI.FSRead#read(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI.FSRead#read(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"    @Command\n    public void read(SolrQueryRequest req, SolrQueryResponse rsp) {\n      String path = req.getPathTemplateValues().get(\"*\");\n      String pathCopy = path;\n      if (req.getParams().getBool(\"sync\", false)) {\n        try {\n          packageStore.syncToAllNodes(path);\n          return;\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error getting file \", e);\n        }\n      }\n      String getFrom = req.getParams().get(\"getFrom\");\n      if (getFrom != null) {\n        coreContainer.getUpdateShardHandler().getUpdateExecutor().submit(() -> {\n          log.debug(\"Downloading file {}\", pathCopy);\n          try {\n            packageStore.fetch(pathCopy, getFrom);\n          } catch (Exception e) {\n            log.error(\"Failed to download file: \" + pathCopy, e);\n          }\n          log.info(\"downloaded file: {}\", pathCopy);\n        });\n        return;\n\n      }\n      if (path == null) {\n        path = \"\";\n      }\n\n      PackageStore.FileType typ = packageStore.getType(path, false);\n      if (typ == PackageStore.FileType.NOFILE) {\n        rsp.add(\"files\", Collections.singletonMap(path, null));\n        return;\n      }\n      if (typ == PackageStore.FileType.DIRECTORY) {\n        rsp.add(\"files\", Collections.singletonMap(path, packageStore.list(path, null)));\n        return;\n      }\n      if (req.getParams().getBool(\"meta\", false)) {\n        if (typ == PackageStore.FileType.FILE) {\n          int idx = path.lastIndexOf('/');\n          String fileName = path.substring(idx + 1);\n          String parentPath = path.substring(0, path.lastIndexOf('/'));\n          List l = packageStore.list(parentPath, s -> s.equals(fileName));\n          rsp.add(\"files\", Collections.singletonMap(path, l.isEmpty() ? null : l.get(0)));\n          return;\n        }\n      } else {\n        writeRawFile(req, rsp, path);\n      }\n    }\n\n","sourceOld":"    @Command\n    public void read(SolrQueryRequest req, SolrQueryResponse rsp) {\n      String path = req.getPathTemplateValues().get(\"*\");\n      String pathCopy = path;\n      String getFrom = req.getParams().get(\"getFrom\");\n      if (getFrom != null) {\n        coreContainer.getUpdateShardHandler().getUpdateExecutor().submit(() -> {\n          log.debug(\"Downloading file {}\", pathCopy);\n          try {\n            packageStore.fetch(pathCopy, getFrom);\n          } catch (Exception e) {\n            log.error(\"Failed to download file: \" + pathCopy, e);\n          }\n          log.info(\"downloaded file: {}\", pathCopy);\n        });\n        return;\n\n      }\n      if (path == null) {\n        path = \"\";\n      }\n\n      PackageStore.FileType typ = packageStore.getType(path, false);\n      if (typ == PackageStore.FileType.NOFILE) {\n        rsp.add(\"files\", Collections.singletonMap(path, null));\n        return;\n      }\n      if (typ == PackageStore.FileType.DIRECTORY) {\n        rsp.add(\"files\", Collections.singletonMap(path, packageStore.list(path, null)));\n        return;\n      }\n      if (req.getParams().getBool(\"meta\", false)) {\n        if (typ == PackageStore.FileType.FILE) {\n          int idx = path.lastIndexOf('/');\n          String fileName = path.substring(idx + 1);\n          String parentPath = path.substring(0, path.lastIndexOf('/'));\n          List l = packageStore.list(parentPath, s -> s.equals(fileName));\n          rsp.add(\"files\", Collections.singletonMap(path, l.isEmpty() ? null : l.get(0)));\n          return;\n        }\n      } else {\n        writeRawFile(req, rsp, path);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140be51d03394488536f4aacedace29f9b318347","date":1587170432,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI.FSRead#read(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI.FSRead#read(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"    @Command\n    public void read(SolrQueryRequest req, SolrQueryResponse rsp) {\n      String path = req.getPathTemplateValues().get(\"*\");\n      String pathCopy = path;\n      if (req.getParams().getBool(\"sync\", false)) {\n        try {\n          packageStore.syncToAllNodes(path);\n          return;\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error getting file \", e);\n        }\n      }\n      String getFrom = req.getParams().get(\"getFrom\");\n      if (getFrom != null) {\n        coreContainer.getUpdateShardHandler().getUpdateExecutor().submit(() -> {\n          log.debug(\"Downloading file {}\", pathCopy);\n          try {\n            packageStore.fetch(pathCopy, getFrom);\n          } catch (Exception e) {\n            log.error(\"Failed to download file: {}\", pathCopy, e);\n          }\n          log.info(\"downloaded file: {}\", pathCopy);\n        });\n        return;\n\n      }\n      if (path == null) {\n        path = \"\";\n      }\n\n      PackageStore.FileType typ = packageStore.getType(path, false);\n      if (typ == PackageStore.FileType.NOFILE) {\n        rsp.add(\"files\", Collections.singletonMap(path, null));\n        return;\n      }\n      if (typ == PackageStore.FileType.DIRECTORY) {\n        rsp.add(\"files\", Collections.singletonMap(path, packageStore.list(path, null)));\n        return;\n      }\n      if (req.getParams().getBool(\"meta\", false)) {\n        if (typ == PackageStore.FileType.FILE) {\n          int idx = path.lastIndexOf('/');\n          String fileName = path.substring(idx + 1);\n          String parentPath = path.substring(0, path.lastIndexOf('/'));\n          List l = packageStore.list(parentPath, s -> s.equals(fileName));\n          rsp.add(\"files\", Collections.singletonMap(path, l.isEmpty() ? null : l.get(0)));\n          return;\n        }\n      } else {\n        writeRawFile(req, rsp, path);\n      }\n    }\n\n","sourceOld":"    @Command\n    public void read(SolrQueryRequest req, SolrQueryResponse rsp) {\n      String path = req.getPathTemplateValues().get(\"*\");\n      String pathCopy = path;\n      if (req.getParams().getBool(\"sync\", false)) {\n        try {\n          packageStore.syncToAllNodes(path);\n          return;\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error getting file \", e);\n        }\n      }\n      String getFrom = req.getParams().get(\"getFrom\");\n      if (getFrom != null) {\n        coreContainer.getUpdateShardHandler().getUpdateExecutor().submit(() -> {\n          log.debug(\"Downloading file {}\", pathCopy);\n          try {\n            packageStore.fetch(pathCopy, getFrom);\n          } catch (Exception e) {\n            log.error(\"Failed to download file: \" + pathCopy, e);\n          }\n          log.info(\"downloaded file: {}\", pathCopy);\n        });\n        return;\n\n      }\n      if (path == null) {\n        path = \"\";\n      }\n\n      PackageStore.FileType typ = packageStore.getType(path, false);\n      if (typ == PackageStore.FileType.NOFILE) {\n        rsp.add(\"files\", Collections.singletonMap(path, null));\n        return;\n      }\n      if (typ == PackageStore.FileType.DIRECTORY) {\n        rsp.add(\"files\", Collections.singletonMap(path, packageStore.list(path, null)));\n        return;\n      }\n      if (req.getParams().getBool(\"meta\", false)) {\n        if (typ == PackageStore.FileType.FILE) {\n          int idx = path.lastIndexOf('/');\n          String fileName = path.substring(idx + 1);\n          String parentPath = path.substring(0, path.lastIndexOf('/'));\n          List l = packageStore.list(parentPath, s -> s.equals(fileName));\n          rsp.add(\"files\", Collections.singletonMap(path, l.isEmpty() ? null : l.get(0)));\n          return;\n        }\n      } else {\n        writeRawFile(req, rsp, path);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd25fa3647fa73152703b8dccb4fb5f43633de20","date":1592060458,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI.FSRead#read(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI.FSRead#read(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"    @Command\n    public void read(SolrQueryRequest req, SolrQueryResponse rsp) {\n      String path = req.getPathTemplateValues().get(\"*\");\n      String pathCopy = path;\n      if (req.getParams().getBool(\"sync\", false)) {\n        try {\n          packageStore.syncToAllNodes(path);\n          return;\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error getting file \", e);\n        }\n      }\n      String getFrom = req.getParams().get(\"getFrom\");\n      if (getFrom != null) {\n        coreContainer.getUpdateShardHandler().getUpdateExecutor().submit(() -> {\n          log.debug(\"Downloading file {}\", pathCopy);\n          try {\n            packageStore.fetch(pathCopy, getFrom);\n          } catch (Exception e) {\n            log.error(\"Failed to download file: {}\", pathCopy, e);\n          }\n          log.info(\"downloaded file: {}\", pathCopy);\n        });\n        return;\n\n      }\n      if (path == null) {\n        path = \"\";\n      }\n\n      PackageStore.FileType typ = packageStore.getType(path, false);\n      if (typ == PackageStore.FileType.NOFILE) {\n        rsp.add(\"files\", Collections.singletonMap(path, null));\n        return;\n      }\n      if (typ == PackageStore.FileType.DIRECTORY) {\n        rsp.add(\"files\", Collections.singletonMap(path, packageStore.list(path, null)));\n        return;\n      }\n      if (req.getParams().getBool(\"meta\", false)) {\n        if (typ == PackageStore.FileType.FILE) {\n          int idx = path.lastIndexOf('/');\n          String fileName = path.substring(idx + 1);\n          String parentPath = path.substring(0, path.lastIndexOf('/'));\n          @SuppressWarnings({\"rawtypes\"})\n          List l = packageStore.list(parentPath, s -> s.equals(fileName));\n          rsp.add(\"files\", Collections.singletonMap(path, l.isEmpty() ? null : l.get(0)));\n          return;\n        }\n      } else {\n        writeRawFile(req, rsp, path);\n      }\n    }\n\n","sourceOld":"    @Command\n    public void read(SolrQueryRequest req, SolrQueryResponse rsp) {\n      String path = req.getPathTemplateValues().get(\"*\");\n      String pathCopy = path;\n      if (req.getParams().getBool(\"sync\", false)) {\n        try {\n          packageStore.syncToAllNodes(path);\n          return;\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error getting file \", e);\n        }\n      }\n      String getFrom = req.getParams().get(\"getFrom\");\n      if (getFrom != null) {\n        coreContainer.getUpdateShardHandler().getUpdateExecutor().submit(() -> {\n          log.debug(\"Downloading file {}\", pathCopy);\n          try {\n            packageStore.fetch(pathCopy, getFrom);\n          } catch (Exception e) {\n            log.error(\"Failed to download file: {}\", pathCopy, e);\n          }\n          log.info(\"downloaded file: {}\", pathCopy);\n        });\n        return;\n\n      }\n      if (path == null) {\n        path = \"\";\n      }\n\n      PackageStore.FileType typ = packageStore.getType(path, false);\n      if (typ == PackageStore.FileType.NOFILE) {\n        rsp.add(\"files\", Collections.singletonMap(path, null));\n        return;\n      }\n      if (typ == PackageStore.FileType.DIRECTORY) {\n        rsp.add(\"files\", Collections.singletonMap(path, packageStore.list(path, null)));\n        return;\n      }\n      if (req.getParams().getBool(\"meta\", false)) {\n        if (typ == PackageStore.FileType.FILE) {\n          int idx = path.lastIndexOf('/');\n          String fileName = path.substring(idx + 1);\n          String parentPath = path.substring(0, path.lastIndexOf('/'));\n          List l = packageStore.list(parentPath, s -> s.equals(fileName));\n          rsp.add(\"files\", Collections.singletonMap(path, l.isEmpty() ? null : l.get(0)));\n          return;\n        }\n      } else {\n        writeRawFile(req, rsp, path);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fbcc7055e8c549bce2c868275542860dba71a0e","date":1593065764,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI.FSRead#read(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI.FSRead#read(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"    @EndPoint(\n        path = \"/node/files/*\",\n        method = SolrRequest.METHOD.GET,\n        permission = PermissionNameProvider.Name.FILESTORE_READ_PERM)\n    public void read(SolrQueryRequest req, SolrQueryResponse rsp) {\n      String path = req.getPathTemplateValues().get(\"*\");\n      String pathCopy = path;\n      if (req.getParams().getBool(\"sync\", false)) {\n        try {\n          packageStore.syncToAllNodes(path);\n          return;\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error getting file \", e);\n        }\n      }\n      String getFrom = req.getParams().get(\"getFrom\");\n      if (getFrom != null) {\n        coreContainer.getUpdateShardHandler().getUpdateExecutor().submit(() -> {\n          log.debug(\"Downloading file {}\", pathCopy);\n          try {\n            packageStore.fetch(pathCopy, getFrom);\n          } catch (Exception e) {\n            log.error(\"Failed to download file: {}\", pathCopy, e);\n          }\n          log.info(\"downloaded file: {}\", pathCopy);\n        });\n        return;\n\n      }\n      if (path == null) {\n        path = \"\";\n      }\n\n      PackageStore.FileType typ = packageStore.getType(path, false);\n      if (typ == PackageStore.FileType.NOFILE) {\n        rsp.add(\"files\", Collections.singletonMap(path, null));\n        return;\n      }\n      if (typ == PackageStore.FileType.DIRECTORY) {\n        rsp.add(\"files\", Collections.singletonMap(path, packageStore.list(path, null)));\n        return;\n      }\n      if (req.getParams().getBool(\"meta\", false)) {\n        if (typ == PackageStore.FileType.FILE) {\n          int idx = path.lastIndexOf('/');\n          String fileName = path.substring(idx + 1);\n          String parentPath = path.substring(0, path.lastIndexOf('/'));\n          @SuppressWarnings({\"rawtypes\"})\n          List l = packageStore.list(parentPath, s -> s.equals(fileName));\n          rsp.add(\"files\", Collections.singletonMap(path, l.isEmpty() ? null : l.get(0)));\n          return;\n        }\n      } else {\n        writeRawFile(req, rsp, path);\n      }\n    }\n\n","sourceOld":"    @Command\n    public void read(SolrQueryRequest req, SolrQueryResponse rsp) {\n      String path = req.getPathTemplateValues().get(\"*\");\n      String pathCopy = path;\n      if (req.getParams().getBool(\"sync\", false)) {\n        try {\n          packageStore.syncToAllNodes(path);\n          return;\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error getting file \", e);\n        }\n      }\n      String getFrom = req.getParams().get(\"getFrom\");\n      if (getFrom != null) {\n        coreContainer.getUpdateShardHandler().getUpdateExecutor().submit(() -> {\n          log.debug(\"Downloading file {}\", pathCopy);\n          try {\n            packageStore.fetch(pathCopy, getFrom);\n          } catch (Exception e) {\n            log.error(\"Failed to download file: {}\", pathCopy, e);\n          }\n          log.info(\"downloaded file: {}\", pathCopy);\n        });\n        return;\n\n      }\n      if (path == null) {\n        path = \"\";\n      }\n\n      PackageStore.FileType typ = packageStore.getType(path, false);\n      if (typ == PackageStore.FileType.NOFILE) {\n        rsp.add(\"files\", Collections.singletonMap(path, null));\n        return;\n      }\n      if (typ == PackageStore.FileType.DIRECTORY) {\n        rsp.add(\"files\", Collections.singletonMap(path, packageStore.list(path, null)));\n        return;\n      }\n      if (req.getParams().getBool(\"meta\", false)) {\n        if (typ == PackageStore.FileType.FILE) {\n          int idx = path.lastIndexOf('/');\n          String fileName = path.substring(idx + 1);\n          String parentPath = path.substring(0, path.lastIndexOf('/'));\n          @SuppressWarnings({\"rawtypes\"})\n          List l = packageStore.list(parentPath, s -> s.equals(fileName));\n          rsp.add(\"files\", Collections.singletonMap(path, l.isEmpty() ? null : l.get(0)));\n          return;\n        }\n      } else {\n        writeRawFile(req, rsp, path);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b8f0a7504661c8e51be5c63e87f9d79a36d9116c":["849dbf8570155b8e5fd03d8c2274a0a60491051c","d218decf811b7a0a4d86218c54c79c74a962374b"],"9fbcc7055e8c549bce2c868275542860dba71a0e":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"140be51d03394488536f4aacedace29f9b318347":["d218decf811b7a0a4d86218c54c79c74a962374b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d218decf811b7a0a4d86218c54c79c74a962374b":["849dbf8570155b8e5fd03d8c2274a0a60491051c"],"8476949555f799dff381770c01cfad051a264487":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["140be51d03394488536f4aacedace29f9b318347"],"849dbf8570155b8e5fd03d8c2274a0a60491051c":["8476949555f799dff381770c01cfad051a264487"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9fbcc7055e8c549bce2c868275542860dba71a0e"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","849dbf8570155b8e5fd03d8c2274a0a60491051c"]},"commit2Childs":{"b8f0a7504661c8e51be5c63e87f9d79a36d9116c":[],"9fbcc7055e8c549bce2c868275542860dba71a0e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"140be51d03394488536f4aacedace29f9b318347":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8476949555f799dff381770c01cfad051a264487","b0b597c65628ca9e73913a07e81691f8229bae35"],"d218decf811b7a0a4d86218c54c79c74a962374b":["b8f0a7504661c8e51be5c63e87f9d79a36d9116c","140be51d03394488536f4aacedace29f9b318347"],"8476949555f799dff381770c01cfad051a264487":["849dbf8570155b8e5fd03d8c2274a0a60491051c"],"849dbf8570155b8e5fd03d8c2274a0a60491051c":["b8f0a7504661c8e51be5c63e87f9d79a36d9116c","d218decf811b7a0a4d86218c54c79c74a962374b","b0b597c65628ca9e73913a07e81691f8229bae35"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["9fbcc7055e8c549bce2c868275542860dba71a0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["b8f0a7504661c8e51be5c63e87f9d79a36d9116c","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}