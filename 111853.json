{"path":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#readObject(DataInputInputStream).mjava","commits":[{"id":"da8b6cfd1b67b932db9907356935046c4d40d033","date":1479958221,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#readObject(DataInputInputStream).mjava","pathOld":"/dev/null","sourceNew":"  protected Object readObject(DataInputInputStream dis) throws IOException {\n    // if ((tagByte & 0xe0) == 0) {\n    // if top 3 bits are clear, this is a normal tag\n\n    // OK, try type + size in single byte\n    switch (tagByte >>> 5) {\n      case STR >>> 5:\n        return readStr(dis);\n      case SINT >>> 5:\n        return readSmallInt(dis);\n      case SLONG >>> 5:\n        return readSmallLong(dis);\n      case ARR >>> 5:\n        return readArray(dis);\n      case ORDERED_MAP >>> 5:\n        return readOrderedMap(dis);\n      case NAMED_LST >>> 5:\n        return readNamedList(dis);\n      case EXTERN_STRING >>> 5:\n        return readExternString(dis);\n    }\n\n    switch (tagByte) {\n      case NULL:\n        return null;\n      case DATE:\n        return new Date(dis.readLong());\n      case INT:\n        return dis.readInt();\n      case BOOL_TRUE:\n        return Boolean.TRUE;\n      case BOOL_FALSE:\n        return Boolean.FALSE;\n      case FLOAT:\n        return dis.readFloat();\n      case DOUBLE:\n        return dis.readDouble();\n      case LONG:\n        return dis.readLong();\n      case BYTE:\n        return dis.readByte();\n      case SHORT:\n        return dis.readShort();\n      case MAP:\n        return readMap(dis);\n      case SOLRDOC:\n        return readSolrDocument(dis);\n      case SOLRDOCLST:\n        return readSolrDocumentList(dis);\n      case BYTEARR:\n        return readByteArray(dis);\n      case ITERATOR:\n        return readIterator(dis);\n      case END:\n        return END_OBJ;\n      case SOLRINPUTDOC:\n        return readSolrInputDocument(dis);\n      case ENUM_FIELD_VALUE:\n        return readEnumFieldValue(dis);\n      case MAP_ENTRY:\n        return readMapEntry(dis);\n      case MAP_ENTRY_ITER:\n        return readMapIter(dis);\n    }\n\n    throw new RuntimeException(\"Unknown type \" + tagByte);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#readObject(DataInputInputStream).mjava","pathOld":"/dev/null","sourceNew":"  protected Object readObject(DataInputInputStream dis) throws IOException {\n    // if ((tagByte & 0xe0) == 0) {\n    // if top 3 bits are clear, this is a normal tag\n\n    // OK, try type + size in single byte\n    switch (tagByte >>> 5) {\n      case STR >>> 5:\n        return readStr(dis);\n      case SINT >>> 5:\n        return readSmallInt(dis);\n      case SLONG >>> 5:\n        return readSmallLong(dis);\n      case ARR >>> 5:\n        return readArray(dis);\n      case ORDERED_MAP >>> 5:\n        return readOrderedMap(dis);\n      case NAMED_LST >>> 5:\n        return readNamedList(dis);\n      case EXTERN_STRING >>> 5:\n        return readExternString(dis);\n    }\n\n    switch (tagByte) {\n      case NULL:\n        return null;\n      case DATE:\n        return new Date(dis.readLong());\n      case INT:\n        return dis.readInt();\n      case BOOL_TRUE:\n        return Boolean.TRUE;\n      case BOOL_FALSE:\n        return Boolean.FALSE;\n      case FLOAT:\n        return dis.readFloat();\n      case DOUBLE:\n        return dis.readDouble();\n      case LONG:\n        return dis.readLong();\n      case BYTE:\n        return dis.readByte();\n      case SHORT:\n        return dis.readShort();\n      case MAP:\n        return readMap(dis);\n      case SOLRDOC:\n        return readSolrDocument(dis);\n      case SOLRDOCLST:\n        return readSolrDocumentList(dis);\n      case BYTEARR:\n        return readByteArray(dis);\n      case ITERATOR:\n        return readIterator(dis);\n      case END:\n        return END_OBJ;\n      case SOLRINPUTDOC:\n        return readSolrInputDocument(dis);\n      case ENUM_FIELD_VALUE:\n        return readEnumFieldValue(dis);\n      case MAP_ENTRY:\n        return readMapEntry(dis);\n      case MAP_ENTRY_ITER:\n        return readMapIter(dis);\n    }\n\n    throw new RuntimeException(\"Unknown type \" + tagByte);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7b5b9bd55a953275a0efc3c5272ed76129541fb","date":1546921668,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#readObject(DataInputInputStream).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#readObject(DataInputInputStream).mjava","sourceNew":"  protected Object readObject(DataInputInputStream dis) throws IOException {\n    // if ((tagByte & 0xe0) == 0) {\n    // if top 3 bits are clear, this is a normal tag\n\n    // OK, try type + size in single byte\n    switch (tagByte >>> 5) {\n      case STR >>> 5:\n        return readStr(dis, stringCache, readStringAsCharSeq);\n      case SINT >>> 5:\n        return readSmallInt(dis);\n      case SLONG >>> 5:\n        return readSmallLong(dis);\n      case ARR >>> 5:\n        return readArray(dis);\n      case ORDERED_MAP >>> 5:\n        return readOrderedMap(dis);\n      case NAMED_LST >>> 5:\n        return readNamedList(dis);\n      case EXTERN_STRING >>> 5:\n        return readExternString(dis);\n    }\n\n    switch (tagByte) {\n      case NULL:\n        return null;\n      case DATE:\n        return new Date(dis.readLong());\n      case INT:\n        return dis.readInt();\n      case BOOL_TRUE:\n        return Boolean.TRUE;\n      case BOOL_FALSE:\n        return Boolean.FALSE;\n      case FLOAT:\n        return dis.readFloat();\n      case DOUBLE:\n        return dis.readDouble();\n      case LONG:\n        return dis.readLong();\n      case BYTE:\n        return dis.readByte();\n      case SHORT:\n        return dis.readShort();\n      case MAP:\n        return readMap(dis);\n      case SOLRDOC:\n        return readSolrDocument(dis);\n      case SOLRDOCLST:\n        return readSolrDocumentList(dis);\n      case BYTEARR:\n        return readByteArray(dis);\n      case ITERATOR:\n        return readIterator(dis);\n      case END:\n        return END_OBJ;\n      case SOLRINPUTDOC:\n        return readSolrInputDocument(dis);\n      case ENUM_FIELD_VALUE:\n        return readEnumFieldValue(dis);\n      case MAP_ENTRY:\n        return readMapEntry(dis);\n      case MAP_ENTRY_ITER:\n        return readMapIter(dis);\n    }\n\n    throw new RuntimeException(\"Unknown type \" + tagByte);\n  }\n\n","sourceOld":"  protected Object readObject(DataInputInputStream dis) throws IOException {\n    // if ((tagByte & 0xe0) == 0) {\n    // if top 3 bits are clear, this is a normal tag\n\n    // OK, try type + size in single byte\n    switch (tagByte >>> 5) {\n      case STR >>> 5:\n        return readStr(dis);\n      case SINT >>> 5:\n        return readSmallInt(dis);\n      case SLONG >>> 5:\n        return readSmallLong(dis);\n      case ARR >>> 5:\n        return readArray(dis);\n      case ORDERED_MAP >>> 5:\n        return readOrderedMap(dis);\n      case NAMED_LST >>> 5:\n        return readNamedList(dis);\n      case EXTERN_STRING >>> 5:\n        return readExternString(dis);\n    }\n\n    switch (tagByte) {\n      case NULL:\n        return null;\n      case DATE:\n        return new Date(dis.readLong());\n      case INT:\n        return dis.readInt();\n      case BOOL_TRUE:\n        return Boolean.TRUE;\n      case BOOL_FALSE:\n        return Boolean.FALSE;\n      case FLOAT:\n        return dis.readFloat();\n      case DOUBLE:\n        return dis.readDouble();\n      case LONG:\n        return dis.readLong();\n      case BYTE:\n        return dis.readByte();\n      case SHORT:\n        return dis.readShort();\n      case MAP:\n        return readMap(dis);\n      case SOLRDOC:\n        return readSolrDocument(dis);\n      case SOLRDOCLST:\n        return readSolrDocumentList(dis);\n      case BYTEARR:\n        return readByteArray(dis);\n      case ITERATOR:\n        return readIterator(dis);\n      case END:\n        return END_OBJ;\n      case SOLRINPUTDOC:\n        return readSolrInputDocument(dis);\n      case ENUM_FIELD_VALUE:\n        return readEnumFieldValue(dis);\n      case MAP_ENTRY:\n        return readMapEntry(dis);\n      case MAP_ENTRY_ITER:\n        return readMapIter(dis);\n    }\n\n    throw new RuntimeException(\"Unknown type \" + tagByte);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da8b6cfd1b67b932db9907356935046c4d40d033":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b7b5b9bd55a953275a0efc3c5272ed76129541fb":["da8b6cfd1b67b932db9907356935046c4d40d033"],"727bb765ff2542275f6d31f67be18d7104bae148":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","da8b6cfd1b67b932db9907356935046c4d40d033"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b7b5b9bd55a953275a0efc3c5272ed76129541fb"]},"commit2Childs":{"da8b6cfd1b67b932db9907356935046c4d40d033":["b7b5b9bd55a953275a0efc3c5272ed76129541fb","727bb765ff2542275f6d31f67be18d7104bae148"],"b7b5b9bd55a953275a0efc3c5272ed76129541fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"727bb765ff2542275f6d31f67be18d7104bae148":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["da8b6cfd1b67b932db9907356935046c4d40d033","727bb765ff2542275f6d31f67be18d7104bae148"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}