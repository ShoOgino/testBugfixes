{"path":"solr/core/src/test/org/apache/solr/handler/component/CustomTermsComponentTest#findAndCheckTerms(MiniSolrCloudCluster,String,String,String,String,String,String,String,String).mjava","commits":[{"id":"4d51e7db479b42602c7e23ba871b177387268179","date":1547581497,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/CustomTermsComponentTest#findAndCheckTerms(MiniSolrCloudCluster,String,String,String,String,String,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private static String findAndCheckTerms(final MiniSolrCloudCluster cluster, final String collection,\n      String requestHandlerName, String in_shards,\n      String field1, String value1,\n      String field2, String value2,\n      String solrServerExceptionMessagePrefix) throws IOException {\n\n      // compose the query ...\n      final SolrQuery solrQuery =  new SolrQuery(\"*:*\");\n      solrQuery.setRequestHandler(requestHandlerName);\n      solrQuery.add(\"shards.qt\", requestHandlerName);\n      // ... asking for terms ...\n      solrQuery.setTerms(true);\n      if (field1 != null) {\n        solrQuery.addTermsField(field1);\n      }\n      if (field2 != null) {\n        solrQuery.addTermsField(field2);\n      }\n      // ... and shards info ...\n      solrQuery.add(\"shards.info\", \"true\");\n      // ... passing shards to use (if we have a preference)\n      if (in_shards != null) {\n        solrQuery.add(\"shards\", in_shards);\n      }\n\n      // make the query\n      final QueryResponse queryResponse;\n      try {\n        queryResponse = new QueryRequest(solrQuery)\n            .process(cluster.getSolrClient(), collection);\n        assertNull(\"expected exception (\"+solrServerExceptionMessagePrefix+\") not encountered\", solrServerExceptionMessagePrefix);\n      } catch (SolrServerException sse) {\n        assertNotNull(\"unexpectedly caught exception \"+sse, solrServerExceptionMessagePrefix);\n        assertTrue(sse.getMessage().startsWith(solrServerExceptionMessagePrefix));\n        assertThat(sse.getCause().getMessage(), containsString(\"not on the shards whitelist\"));\n        return null;\n      }\n\n      // analyse the response ...\n      final TermsResponse termsResponse = queryResponse.getTermsResponse();\n      // ... checking the terms returned ...\n      checkTermsResponse(termsResponse, field1, value1);\n      checkTermsResponse(termsResponse, field2, value2);\n      // ... and assemble info about the shards ...\n      final String out_shards = extractShardAddresses(queryResponse, \",\");\n      // ... to return to the caller\n      return out_shards;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bc79aa44ce8dfeb7ad9dda5b4f6b4926d003e0c","date":1600965744,"type":4,"author":"S N Munendra","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/component/CustomTermsComponentTest#findAndCheckTerms(MiniSolrCloudCluster,String,String,String,String,String,String,String,String).mjava","sourceNew":null,"sourceOld":"  private static String findAndCheckTerms(final MiniSolrCloudCluster cluster, final String collection,\n      String requestHandlerName, String in_shards,\n      String field1, String value1,\n      String field2, String value2,\n      String solrServerExceptionMessagePrefix) throws IOException {\n\n      // compose the query ...\n      final SolrQuery solrQuery =  new SolrQuery(\"*:*\");\n      solrQuery.setRequestHandler(requestHandlerName);\n      solrQuery.add(\"shards.qt\", requestHandlerName);\n      // ... asking for terms ...\n      solrQuery.setTerms(true);\n      if (field1 != null) {\n        solrQuery.addTermsField(field1);\n      }\n      if (field2 != null) {\n        solrQuery.addTermsField(field2);\n      }\n      // ... and shards info ...\n      solrQuery.add(\"shards.info\", \"true\");\n      // ... passing shards to use (if we have a preference)\n      if (in_shards != null) {\n        solrQuery.add(\"shards\", in_shards);\n      }\n\n      // make the query\n      final QueryResponse queryResponse;\n      try {\n        queryResponse = new QueryRequest(solrQuery)\n            .process(cluster.getSolrClient(), collection);\n        assertNull(\"expected exception (\"+solrServerExceptionMessagePrefix+\") not encountered\", solrServerExceptionMessagePrefix);\n      } catch (SolrServerException sse) {\n        assertNotNull(\"unexpectedly caught exception \"+sse, solrServerExceptionMessagePrefix);\n        assertTrue(sse.getMessage().startsWith(solrServerExceptionMessagePrefix));\n        assertThat(sse.getCause().getMessage(), containsString(\"not on the shards whitelist\"));\n        return null;\n      }\n\n      // analyse the response ...\n      final TermsResponse termsResponse = queryResponse.getTermsResponse();\n      // ... checking the terms returned ...\n      checkTermsResponse(termsResponse, field1, value1);\n      checkTermsResponse(termsResponse, field2, value2);\n      // ... and assemble info about the shards ...\n      final String out_shards = extractShardAddresses(queryResponse, \",\");\n      // ... to return to the caller\n      return out_shards;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1bc79aa44ce8dfeb7ad9dda5b4f6b4926d003e0c":["4d51e7db479b42602c7e23ba871b177387268179"],"4d51e7db479b42602c7e23ba871b177387268179":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1bc79aa44ce8dfeb7ad9dda5b4f6b4926d003e0c"]},"commit2Childs":{"1bc79aa44ce8dfeb7ad9dda5b4f6b4926d003e0c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4d51e7db479b42602c7e23ba871b177387268179":["1bc79aa44ce8dfeb7ad9dda5b4f6b4926d003e0c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d51e7db479b42602c7e23ba871b177387268179"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}