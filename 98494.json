{"path":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#init(NamedList).mjava","commits":[{"id":"be9a5d1846ac0beb625ba68da060e16119d9f51e","date":1328820081,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#init(NamedList).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Handles common initialization related to source fields for \n   * constructoring the FieldNameSelector to be used.\n   *\n   * Will error if any unexpected init args are found, so subclasses should\n   * remove any subclass-specific init args before calling this method.\n   */\n  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(NamedList args) {\n\n    inclusions = parseSelectorParams(args);\n\n    List<Object> excList = args.getAll(\"exclude\");\n    for (Object excObj : excList) {\n      if (null == excObj) {\n        throw new SolrException\n          (SERVER_ERROR, \"'exclude' init param can not be null\"); \n      }\n      if (! (excObj instanceof NamedList) ) {\n        throw new SolrException\n          (SERVER_ERROR, \"'exclude' init param must be <lst/>\"); \n      }\n      NamedList exc = (NamedList) excObj;\n      exclusions.add(parseSelectorParams(exc));\n      if (0 < exc.size()) {\n        throw new SolrException(SERVER_ERROR, \n                                \"Unexpected 'exclude' init sub-param(s): '\" + \n                                args.getName(0) + \"'\");\n      }\n      // call once per instance\n      args.remove(\"exclude\");\n    }\n    if (0 < args.size()) {\n      throw new SolrException(SERVER_ERROR, \n                              \"Unexpected init param(s): '\" + \n                              args.getName(0) + \"'\");\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0a19f093878b8ef6d65992a55f7a565549f30ee","date":1370735567,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#init(NamedList).mjava","sourceNew":"  /**\n   * Handles common initialization related to source fields for \n   * constructing the FieldNameSelector to be used.\n   *\n   * Will error if any unexpected init args are found, so subclasses should\n   * remove any subclass-specific init args before calling this method.\n   */\n  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(NamedList args) {\n\n    inclusions = parseSelectorParams(args);\n\n    List<Object> excList = args.getAll(\"exclude\");\n    for (Object excObj : excList) {\n      if (null == excObj) {\n        throw new SolrException\n          (SERVER_ERROR, \"'exclude' init param can not be null\"); \n      }\n      if (! (excObj instanceof NamedList) ) {\n        throw new SolrException\n          (SERVER_ERROR, \"'exclude' init param must be <lst/>\"); \n      }\n      NamedList exc = (NamedList) excObj;\n      exclusions.add(parseSelectorParams(exc));\n      if (0 < exc.size()) {\n        throw new SolrException(SERVER_ERROR, \n                                \"Unexpected 'exclude' init sub-param(s): '\" + \n                                args.getName(0) + \"'\");\n      }\n      // call once per instance\n      args.remove(\"exclude\");\n    }\n    if (0 < args.size()) {\n      throw new SolrException(SERVER_ERROR, \n                              \"Unexpected init param(s): '\" + \n                              args.getName(0) + \"'\");\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Handles common initialization related to source fields for \n   * constructoring the FieldNameSelector to be used.\n   *\n   * Will error if any unexpected init args are found, so subclasses should\n   * remove any subclass-specific init args before calling this method.\n   */\n  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(NamedList args) {\n\n    inclusions = parseSelectorParams(args);\n\n    List<Object> excList = args.getAll(\"exclude\");\n    for (Object excObj : excList) {\n      if (null == excObj) {\n        throw new SolrException\n          (SERVER_ERROR, \"'exclude' init param can not be null\"); \n      }\n      if (! (excObj instanceof NamedList) ) {\n        throw new SolrException\n          (SERVER_ERROR, \"'exclude' init param must be <lst/>\"); \n      }\n      NamedList exc = (NamedList) excObj;\n      exclusions.add(parseSelectorParams(exc));\n      if (0 < exc.size()) {\n        throw new SolrException(SERVER_ERROR, \n                                \"Unexpected 'exclude' init sub-param(s): '\" + \n                                args.getName(0) + \"'\");\n      }\n      // call once per instance\n      args.remove(\"exclude\");\n    }\n    if (0 < args.size()) {\n      throw new SolrException(SERVER_ERROR, \n                              \"Unexpected init param(s): '\" + \n                              args.getName(0) + \"'\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe3edda347939cc6859dbf4287e84f3e8e4bb939","date":1372696449,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#init(NamedList).mjava","sourceNew":"  /**\n   * Handles common initialization related to source fields for \n   * constructing the FieldNameSelector to be used.\n   *\n   * Will error if any unexpected init args are found, so subclasses should\n   * remove any subclass-specific init args before calling this method.\n   */\n  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(NamedList args) {\n\n    inclusions = parseSelectorParams(args);\n    exclusions = parseSelectorExclusionParams(args);\n\n    if (0 < args.size()) {\n      throw new SolrException(SERVER_ERROR, \n                              \"Unexpected init param(s): '\" + \n                              args.getName(0) + \"'\");\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Handles common initialization related to source fields for \n   * constructing the FieldNameSelector to be used.\n   *\n   * Will error if any unexpected init args are found, so subclasses should\n   * remove any subclass-specific init args before calling this method.\n   */\n  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(NamedList args) {\n\n    inclusions = parseSelectorParams(args);\n\n    List<Object> excList = args.getAll(\"exclude\");\n    for (Object excObj : excList) {\n      if (null == excObj) {\n        throw new SolrException\n          (SERVER_ERROR, \"'exclude' init param can not be null\"); \n      }\n      if (! (excObj instanceof NamedList) ) {\n        throw new SolrException\n          (SERVER_ERROR, \"'exclude' init param must be <lst/>\"); \n      }\n      NamedList exc = (NamedList) excObj;\n      exclusions.add(parseSelectorParams(exc));\n      if (0 < exc.size()) {\n        throw new SolrException(SERVER_ERROR, \n                                \"Unexpected 'exclude' init sub-param(s): '\" + \n                                args.getName(0) + \"'\");\n      }\n      // call once per instance\n      args.remove(\"exclude\");\n    }\n    if (0 < args.size()) {\n      throw new SolrException(SERVER_ERROR, \n                              \"Unexpected init param(s): '\" + \n                              args.getName(0) + \"'\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#init(NamedList).mjava","sourceNew":"  /**\n   * Handles common initialization related to source fields for \n   * constructing the FieldNameSelector to be used.\n   *\n   * Will error if any unexpected init args are found, so subclasses should\n   * remove any subclass-specific init args before calling this method.\n   */\n  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(NamedList args) {\n\n    inclusions = parseSelectorParams(args);\n    exclusions = parseSelectorExclusionParams(args);\n\n    if (0 < args.size()) {\n      throw new SolrException(SERVER_ERROR, \n                              \"Unexpected init param(s): '\" + \n                              args.getName(0) + \"'\");\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Handles common initialization related to source fields for \n   * constructing the FieldNameSelector to be used.\n   *\n   * Will error if any unexpected init args are found, so subclasses should\n   * remove any subclass-specific init args before calling this method.\n   */\n  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(NamedList args) {\n\n    inclusions = parseSelectorParams(args);\n\n    List<Object> excList = args.getAll(\"exclude\");\n    for (Object excObj : excList) {\n      if (null == excObj) {\n        throw new SolrException\n          (SERVER_ERROR, \"'exclude' init param can not be null\"); \n      }\n      if (! (excObj instanceof NamedList) ) {\n        throw new SolrException\n          (SERVER_ERROR, \"'exclude' init param must be <lst/>\"); \n      }\n      NamedList exc = (NamedList) excObj;\n      exclusions.add(parseSelectorParams(exc));\n      if (0 < exc.size()) {\n        throw new SolrException(SERVER_ERROR, \n                                \"Unexpected 'exclude' init sub-param(s): '\" + \n                                args.getName(0) + \"'\");\n      }\n      // call once per instance\n      args.remove(\"exclude\");\n    }\n    if (0 < args.size()) {\n      throw new SolrException(SERVER_ERROR, \n                              \"Unexpected init param(s): '\" + \n                              args.getName(0) + \"'\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ae0c36347d7586e501169851eb8fe2ad2b8f0dd","date":1380757525,"type":3,"author":"Shawn Heisey","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#init(NamedList).mjava","sourceNew":"  /**\n   * Handles common initialization related to source fields for \n   * constructing the FieldNameSelector to be used.\n   *\n   * Will error if any unexpected init args are found, so subclasses should\n   * remove any subclass-specific init args before calling this method.\n   */\n  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(NamedList args) {\n\n    inclusions = parseSelectorParams(args);\n    exclusions = parseSelectorExclusionParams(args);\n\n    if (0 < args.size()) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unexpected init param(s): '\" + args.getName(0) + \"'\");\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Handles common initialization related to source fields for \n   * constructing the FieldNameSelector to be used.\n   *\n   * Will error if any unexpected init args are found, so subclasses should\n   * remove any subclass-specific init args before calling this method.\n   */\n  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(NamedList args) {\n\n    inclusions = parseSelectorParams(args);\n    exclusions = parseSelectorExclusionParams(args);\n\n    if (0 < args.size()) {\n      throw new SolrException(SERVER_ERROR, \n                              \"Unexpected init param(s): '\" + \n                              args.getName(0) + \"'\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"018a36ff4088cb91ab12cbe44f696d81d1fadd77","date":1591657414,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#init(NamedList).mjava","sourceNew":"  /**\n   * Handles common initialization related to source fields for \n   * constructing the FieldNameSelector to be used.\n   *\n   * Will error if any unexpected init args are found, so subclasses should\n   * remove any subclass-specific init args before calling this method.\n   */\n  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(@SuppressWarnings({\"rawtypes\"})NamedList args) {\n\n    inclusions = parseSelectorParams(args);\n    exclusions = parseSelectorExclusionParams(args);\n\n    if (0 < args.size()) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unexpected init param(s): '\" + args.getName(0) + \"'\");\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Handles common initialization related to source fields for \n   * constructing the FieldNameSelector to be used.\n   *\n   * Will error if any unexpected init args are found, so subclasses should\n   * remove any subclass-specific init args before calling this method.\n   */\n  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(NamedList args) {\n\n    inclusions = parseSelectorParams(args);\n    exclusions = parseSelectorExclusionParams(args);\n\n    if (0 < args.size()) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unexpected init param(s): '\" + args.getName(0) + \"'\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"be9a5d1846ac0beb625ba68da060e16119d9f51e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["3ae0c36347d7586e501169851eb8fe2ad2b8f0dd"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["b0a19f093878b8ef6d65992a55f7a565549f30ee","fe3edda347939cc6859dbf4287e84f3e8e4bb939"],"fe3edda347939cc6859dbf4287e84f3e8e4bb939":["b0a19f093878b8ef6d65992a55f7a565549f30ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b0a19f093878b8ef6d65992a55f7a565549f30ee":["be9a5d1846ac0beb625ba68da060e16119d9f51e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["018a36ff4088cb91ab12cbe44f696d81d1fadd77"],"3ae0c36347d7586e501169851eb8fe2ad2b8f0dd":["fe3edda347939cc6859dbf4287e84f3e8e4bb939"]},"commit2Childs":{"be9a5d1846ac0beb625ba68da060e16119d9f51e":["b0a19f093878b8ef6d65992a55f7a565549f30ee"],"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["be9a5d1846ac0beb625ba68da060e16119d9f51e"],"fe3edda347939cc6859dbf4287e84f3e8e4bb939":["37a0f60745e53927c4c876cfe5b5a58170f0646c","3ae0c36347d7586e501169851eb8fe2ad2b8f0dd"],"b0a19f093878b8ef6d65992a55f7a565549f30ee":["37a0f60745e53927c4c876cfe5b5a58170f0646c","fe3edda347939cc6859dbf4287e84f3e8e4bb939"],"3ae0c36347d7586e501169851eb8fe2ad2b8f0dd":["018a36ff4088cb91ab12cbe44f696d81d1fadd77"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}