{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testForceMergeExceptions().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testForceMergeExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testForceMergeExceptions().mjava","sourceNew":"  public void testForceMergeExceptions() throws IOException {\n    Directory startDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(100);\n    IndexWriter w = new IndexWriter(startDir, conf);\n    for(int i=0;i<27;i++)\n      addDoc(w);\n    w.close();\n\n    int iter = TEST_NIGHTLY ? 200 : 10;\n    for(int i=0;i<iter;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter \" + i);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, new RAMDirectory(startDir, newIOContext(random)));\n      conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new ConcurrentMergeScheduler());\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      w = new IndexWriter(dir, conf);\n      dir.setRandomIOExceptionRate(0.5);\n      try {\n        w.forceMerge(1);\n      } catch (IOException ioe) {\n        if (ioe.getCause() == null)\n          fail(\"forceMerge threw IOException without root cause\");\n      }\n      dir.setRandomIOExceptionRate(0);\n      w.close();\n      dir.close();\n    }\n    startDir.close();\n  }\n\n","sourceOld":"  public void testForceMergeExceptions() throws IOException {\n    Directory startDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(100);\n    IndexWriter w = new IndexWriter(startDir, conf);\n    for(int i=0;i<27;i++)\n      addDoc(w);\n    w.close();\n\n    int iter = TEST_NIGHTLY ? 200 : 10;\n    for(int i=0;i<iter;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter \" + i);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, new RAMDirectory(startDir, newIOContext(random)));\n      conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new ConcurrentMergeScheduler());\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      w = new IndexWriter(dir, conf);\n      dir.setRandomIOExceptionRate(0.5);\n      try {\n        w.forceMerge(1);\n      } catch (IOException ioe) {\n        if (ioe.getCause() == null)\n          fail(\"forceMerge threw IOException without root cause\");\n      }\n      dir.setRandomIOExceptionRate(0);\n      w.close();\n      dir.close();\n    }\n    startDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testForceMergeExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testForceMergeExceptions().mjava","sourceNew":"  public void testForceMergeExceptions() throws IOException {\n    Directory startDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(100);\n    IndexWriter w = new IndexWriter(startDir, conf);\n    for(int i=0;i<27;i++)\n      addDoc(w);\n    w.close();\n\n    int iter = TEST_NIGHTLY ? 200 : 10;\n    for(int i=0;i<iter;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter \" + i);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory(startDir, newIOContext(random())));\n      conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergeScheduler(new ConcurrentMergeScheduler());\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      w = new IndexWriter(dir, conf);\n      dir.setRandomIOExceptionRate(0.5);\n      try {\n        w.forceMerge(1);\n      } catch (IOException ioe) {\n        if (ioe.getCause() == null)\n          fail(\"forceMerge threw IOException without root cause\");\n      }\n      dir.setRandomIOExceptionRate(0);\n      w.close();\n      dir.close();\n    }\n    startDir.close();\n  }\n\n","sourceOld":"  public void testForceMergeExceptions() throws IOException {\n    Directory startDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(100);\n    IndexWriter w = new IndexWriter(startDir, conf);\n    for(int i=0;i<27;i++)\n      addDoc(w);\n    w.close();\n\n    int iter = TEST_NIGHTLY ? 200 : 10;\n    for(int i=0;i<iter;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter \" + i);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, new RAMDirectory(startDir, newIOContext(random)));\n      conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new ConcurrentMergeScheduler());\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      w = new IndexWriter(dir, conf);\n      dir.setRandomIOExceptionRate(0.5);\n      try {\n        w.forceMerge(1);\n      } catch (IOException ioe) {\n        if (ioe.getCause() == null)\n          fail(\"forceMerge threw IOException without root cause\");\n      }\n      dir.setRandomIOExceptionRate(0);\n      w.close();\n      dir.close();\n    }\n    startDir.close();\n  }\n\n","bugFix":null,"bugIntro":["302be0cc5e6a28ebcebcac98aa81a92be2e94370"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testForceMergeExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testForceMergeExceptions().mjava","sourceNew":"  public void testForceMergeExceptions() throws IOException {\n    Directory startDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(100);\n    IndexWriter w = new IndexWriter(startDir, conf);\n    for(int i=0;i<27;i++)\n      addDoc(w);\n    w.shutdown();\n\n    int iter = TEST_NIGHTLY ? 200 : 10;\n    for(int i=0;i<iter;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter \" + i);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory(startDir, newIOContext(random())));\n      conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergeScheduler(new ConcurrentMergeScheduler());\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      w = new IndexWriter(dir, conf);\n      dir.setRandomIOExceptionRate(0.5);\n      try {\n        w.forceMerge(1);\n      } catch (IOException ioe) {\n        if (ioe.getCause() == null)\n          fail(\"forceMerge threw IOException without root cause\");\n      }\n      dir.setRandomIOExceptionRate(0);\n      w.shutdown();\n      dir.close();\n    }\n    startDir.close();\n  }\n\n","sourceOld":"  public void testForceMergeExceptions() throws IOException {\n    Directory startDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(100);\n    IndexWriter w = new IndexWriter(startDir, conf);\n    for(int i=0;i<27;i++)\n      addDoc(w);\n    w.close();\n\n    int iter = TEST_NIGHTLY ? 200 : 10;\n    for(int i=0;i<iter;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter \" + i);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory(startDir, newIOContext(random())));\n      conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergeScheduler(new ConcurrentMergeScheduler());\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      w = new IndexWriter(dir, conf);\n      dir.setRandomIOExceptionRate(0.5);\n      try {\n        w.forceMerge(1);\n      } catch (IOException ioe) {\n        if (ioe.getCause() == null)\n          fail(\"forceMerge threw IOException without root cause\");\n      }\n      dir.setRandomIOExceptionRate(0);\n      w.close();\n      dir.close();\n    }\n    startDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testForceMergeExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testForceMergeExceptions().mjava","sourceNew":"  public void testForceMergeExceptions() throws IOException {\n    Directory startDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()))\n                               .setMaxBufferedDocs(2)\n                               .setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(100);\n    IndexWriter w = new IndexWriter(startDir, conf);\n    for(int i=0;i<27;i++)\n      addDoc(w);\n    w.shutdown();\n\n    int iter = TEST_NIGHTLY ? 200 : 10;\n    for(int i=0;i<iter;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter \" + i);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory(startDir, newIOContext(random())));\n      conf = newIndexWriterConfig(new MockAnalyzer(random()))\n               .setMergeScheduler(new ConcurrentMergeScheduler());\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      w = new IndexWriter(dir, conf);\n      dir.setRandomIOExceptionRate(0.5);\n      try {\n        w.forceMerge(1);\n      } catch (IOException ioe) {\n        if (ioe.getCause() == null)\n          fail(\"forceMerge threw IOException without root cause\");\n      }\n      dir.setRandomIOExceptionRate(0);\n      w.shutdown();\n      dir.close();\n    }\n    startDir.close();\n  }\n\n","sourceOld":"  public void testForceMergeExceptions() throws IOException {\n    Directory startDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(100);\n    IndexWriter w = new IndexWriter(startDir, conf);\n    for(int i=0;i<27;i++)\n      addDoc(w);\n    w.shutdown();\n\n    int iter = TEST_NIGHTLY ? 200 : 10;\n    for(int i=0;i<iter;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter \" + i);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory(startDir, newIOContext(random())));\n      conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergeScheduler(new ConcurrentMergeScheduler());\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      w = new IndexWriter(dir, conf);\n      dir.setRandomIOExceptionRate(0.5);\n      try {\n        w.forceMerge(1);\n      } catch (IOException ioe) {\n        if (ioe.getCause() == null)\n          fail(\"forceMerge threw IOException without root cause\");\n      }\n      dir.setRandomIOExceptionRate(0);\n      w.shutdown();\n      dir.close();\n    }\n    startDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testForceMergeExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testForceMergeExceptions().mjava","sourceNew":"  public void testForceMergeExceptions() throws IOException {\n    Directory startDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()))\n                               .setMaxBufferedDocs(2)\n                               .setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(100);\n    IndexWriter w = new IndexWriter(startDir, conf);\n    for(int i=0;i<27;i++)\n      addDoc(w);\n    w.close();\n\n    int iter = TEST_NIGHTLY ? 200 : 10;\n    for(int i=0;i<iter;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter \" + i);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory(startDir, newIOContext(random())));\n      conf = newIndexWriterConfig(new MockAnalyzer(random()))\n               .setMergeScheduler(new ConcurrentMergeScheduler());\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      w = new IndexWriter(dir, conf);\n      dir.setRandomIOExceptionRate(0.5);\n      try {\n        w.forceMerge(1);\n      } catch (IOException ioe) {\n        if (ioe.getCause() == null)\n          fail(\"forceMerge threw IOException without root cause\");\n      }\n      dir.setRandomIOExceptionRate(0);\n      w.close();\n      dir.close();\n    }\n    startDir.close();\n  }\n\n","sourceOld":"  public void testForceMergeExceptions() throws IOException {\n    Directory startDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()))\n                               .setMaxBufferedDocs(2)\n                               .setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(100);\n    IndexWriter w = new IndexWriter(startDir, conf);\n    for(int i=0;i<27;i++)\n      addDoc(w);\n    w.shutdown();\n\n    int iter = TEST_NIGHTLY ? 200 : 10;\n    for(int i=0;i<iter;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter \" + i);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory(startDir, newIOContext(random())));\n      conf = newIndexWriterConfig(new MockAnalyzer(random()))\n               .setMergeScheduler(new ConcurrentMergeScheduler());\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      w = new IndexWriter(dir, conf);\n      dir.setRandomIOExceptionRate(0.5);\n      try {\n        w.forceMerge(1);\n      } catch (IOException ioe) {\n        if (ioe.getCause() == null)\n          fail(\"forceMerge threw IOException without root cause\");\n      }\n      dir.setRandomIOExceptionRate(0);\n      w.shutdown();\n      dir.close();\n    }\n    startDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"302be0cc5e6a28ebcebcac98aa81a92be2e94370","date":1423848654,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testForceMergeExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testForceMergeExceptions().mjava","sourceNew":"  public void testForceMergeExceptions() throws IOException {\n    Directory startDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()))\n                               .setMaxBufferedDocs(2)\n                               .setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(100);\n    IndexWriter w = new IndexWriter(startDir, conf);\n    for(int i=0;i<27;i++)\n      addDoc(w);\n    w.close();\n\n    int iter = TEST_NIGHTLY ? 200 : 10;\n    for(int i=0;i<iter;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter \" + i);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), TestUtil.ramCopyOf(startDir));\n      conf = newIndexWriterConfig(new MockAnalyzer(random()))\n               .setMergeScheduler(new ConcurrentMergeScheduler());\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      w = new IndexWriter(dir, conf);\n      dir.setRandomIOExceptionRate(0.5);\n      try {\n        w.forceMerge(1);\n      } catch (IOException ioe) {\n        if (ioe.getCause() == null)\n          fail(\"forceMerge threw IOException without root cause\");\n      }\n      dir.setRandomIOExceptionRate(0);\n      w.close();\n      dir.close();\n    }\n    startDir.close();\n  }\n\n","sourceOld":"  public void testForceMergeExceptions() throws IOException {\n    Directory startDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()))\n                               .setMaxBufferedDocs(2)\n                               .setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(100);\n    IndexWriter w = new IndexWriter(startDir, conf);\n    for(int i=0;i<27;i++)\n      addDoc(w);\n    w.close();\n\n    int iter = TEST_NIGHTLY ? 200 : 10;\n    for(int i=0;i<iter;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter \" + i);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory(startDir, newIOContext(random())));\n      conf = newIndexWriterConfig(new MockAnalyzer(random()))\n               .setMergeScheduler(new ConcurrentMergeScheduler());\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      w = new IndexWriter(dir, conf);\n      dir.setRandomIOExceptionRate(0.5);\n      try {\n        w.forceMerge(1);\n      } catch (IOException ioe) {\n        if (ioe.getCause() == null)\n          fail(\"forceMerge threw IOException without root cause\");\n      }\n      dir.setRandomIOExceptionRate(0);\n      w.close();\n      dir.close();\n    }\n    startDir.close();\n  }\n\n","bugFix":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9e22bdf0692bfa61e342b04a6ac7078670c1e16","date":1436866730,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testForceMergeExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testForceMergeExceptions().mjava","sourceNew":"  public void testForceMergeExceptions() throws IOException {\n    Directory startDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()))\n                               .setMaxBufferedDocs(2)\n                               .setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(100);\n    IndexWriter w = new IndexWriter(startDir, conf);\n    for(int i=0;i<27;i++) {\n      addDoc(w);\n    }\n    w.close();\n\n    int iter = TEST_NIGHTLY ? 200 : 10;\n    for(int i=0;i<iter;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter \" + i);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), TestUtil.ramCopyOf(startDir));\n      conf = newIndexWriterConfig(new MockAnalyzer(random()))\n               .setMergeScheduler(new ConcurrentMergeScheduler());\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      w = new IndexWriter(dir, conf);\n      dir.setRandomIOExceptionRate(0.5);\n      try {\n        w.forceMerge(1);\n      } catch (IllegalStateException ise) {\n        // expected\n      } catch (IOException ioe) {\n        if (ioe.getCause() == null) {\n          fail(\"forceMerge threw IOException without root cause\");\n        }\n      }\n      dir.setRandomIOExceptionRate(0);\n      //System.out.println(\"TEST: now close IW\");\n      try {\n        w.close();\n      } catch (IllegalStateException ise) {\n        // ok\n      }\n      dir.close();\n    }\n    startDir.close();\n  }\n\n","sourceOld":"  public void testForceMergeExceptions() throws IOException {\n    Directory startDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()))\n                               .setMaxBufferedDocs(2)\n                               .setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(100);\n    IndexWriter w = new IndexWriter(startDir, conf);\n    for(int i=0;i<27;i++)\n      addDoc(w);\n    w.close();\n\n    int iter = TEST_NIGHTLY ? 200 : 10;\n    for(int i=0;i<iter;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter \" + i);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), TestUtil.ramCopyOf(startDir));\n      conf = newIndexWriterConfig(new MockAnalyzer(random()))\n               .setMergeScheduler(new ConcurrentMergeScheduler());\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      w = new IndexWriter(dir, conf);\n      dir.setRandomIOExceptionRate(0.5);\n      try {\n        w.forceMerge(1);\n      } catch (IOException ioe) {\n        if (ioe.getCause() == null)\n          fail(\"forceMerge threw IOException without root cause\");\n      }\n      dir.setRandomIOExceptionRate(0);\n      w.close();\n      dir.close();\n    }\n    startDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d9e22bdf0692bfa61e342b04a6ac7078670c1e16":["302be0cc5e6a28ebcebcac98aa81a92be2e94370"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d9e22bdf0692bfa61e342b04a6ac7078670c1e16"],"302be0cc5e6a28ebcebcac98aa81a92be2e94370":["d0ef034a4f10871667ae75181537775ddcf8ade4"]},"commit2Childs":{"d9e22bdf0692bfa61e342b04a6ac7078670c1e16":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["302be0cc5e6a28ebcebcac98aa81a92be2e94370"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"302be0cc5e6a28ebcebcac98aa81a92be2e94370":["d9e22bdf0692bfa61e342b04a6ac7078670c1e16"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}