{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,LBHttpSolrServer,boolean).mjava","commits":[{"id":"fd9b79570dbb7dde96e0d8bf42339245b30df35b","date":1344117822,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,LBHttpSolrServer,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param zkHost The client endpoint of the zookeeper quorum containing the cloud state,\n   * in the form HOST:PORT.\n   * @param lbServer LBHttpSolrServer instance for requests. \n   * @param updatesToLeaders sends updates only to leaders - defaults to true\n   */\n  public CloudSolrServer(String zkHost, LBHttpSolrServer lbServer, boolean updatesToLeaders) {\n    this.zkHost = zkHost;\n    this.lbServer = lbServer;\n    this.updatesToLeaders = updatesToLeaders;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,LBHttpSolrServer,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param zkHost The client endpoint of the zookeeper quorum containing the cloud state,\n   * in the form HOST:PORT.\n   * @param lbServer LBHttpSolrServer instance for requests. \n   * @param updatesToLeaders sends updates only to leaders - defaults to true\n   */\n  public CloudSolrServer(String zkHost, LBHttpSolrServer lbServer, boolean updatesToLeaders) {\n    this.zkHost = zkHost;\n    this.lbServer = lbServer;\n    this.updatesToLeaders = updatesToLeaders;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,LBHttpSolrServer,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param zkHost The client endpoint of the zookeeper quorum containing the cloud state,\n   * in the form HOST:PORT.\n   * @param lbServer LBHttpSolrServer instance for requests. \n   * @param updatesToLeaders sends updates only to leaders - defaults to true\n   */\n  public CloudSolrServer(String zkHost, LBHttpSolrServer lbServer, boolean updatesToLeaders) {\n    this.zkHost = zkHost;\n    this.lbServer = lbServer;\n    this.updatesToLeaders = updatesToLeaders;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4fb788ea821fd2677915770f1cada8122fce2cce","date":1379008291,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,LBHttpSolrServer,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,LBHttpSolrServer,boolean).mjava","sourceNew":"  /**\n   * @param zkHost The client endpoint of the zookeeper quorum containing the cloud state,\n   * in the form HOST:PORT.\n   * @param lbServer LBHttpSolrServer instance for requests. \n   * @param updatesToLeaders sends updates only to leaders - defaults to true\n   */\n  public CloudSolrServer(String zkHost, LBHttpSolrServer lbServer, boolean updatesToLeaders) {\n    this.zkHost = zkHost;\n    this.lbServer = lbServer;\n    this.updatesToLeaders = updatesToLeaders;\n    shutdownLBHttpSolrServer = false;\n  }\n\n","sourceOld":"  /**\n   * @param zkHost The client endpoint of the zookeeper quorum containing the cloud state,\n   * in the form HOST:PORT.\n   * @param lbServer LBHttpSolrServer instance for requests. \n   * @param updatesToLeaders sends updates only to leaders - defaults to true\n   */\n  public CloudSolrServer(String zkHost, LBHttpSolrServer lbServer, boolean updatesToLeaders) {\n    this.zkHost = zkHost;\n    this.lbServer = lbServer;\n    this.updatesToLeaders = updatesToLeaders;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0622fbd990643ae4cacb693db6a0c82cf8916ae2","date":1397637446,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,LBHttpSolrServer,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,LBHttpSolrServer,boolean).mjava","sourceNew":"  /**\n   * @param zkHost The client endpoint of the zookeeper quorum containing the cloud state,\n   * in the form HOST:PORT.\n   * @param lbServer LBHttpSolrServer instance for requests. \n   * @param updatesToLeaders sends updates only to leaders - defaults to true\n   */\n  public CloudSolrServer(String zkHost, LBHttpSolrServer lbServer, boolean updatesToLeaders) {\n    this(zkHost, lbServer, updatesToLeaders, 60);\n  }\n\n","sourceOld":"  /**\n   * @param zkHost The client endpoint of the zookeeper quorum containing the cloud state,\n   * in the form HOST:PORT.\n   * @param lbServer LBHttpSolrServer instance for requests. \n   * @param updatesToLeaders sends updates only to leaders - defaults to true\n   */\n  public CloudSolrServer(String zkHost, LBHttpSolrServer lbServer, boolean updatesToLeaders) {\n    this.zkHost = zkHost;\n    this.lbServer = lbServer;\n    this.updatesToLeaders = updatesToLeaders;\n    shutdownLBHttpSolrServer = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5a233896b7f16ac9b4ed601ef8207d98f1f0500","date":1398857046,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,LBHttpSolrServer,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,LBHttpSolrServer,boolean).mjava","sourceNew":"  /**\n   * @param zkHost The client endpoint of the zookeeper quorum containing the cloud state,\n   * in the form HOST:PORT.\n   * @param lbServer LBHttpSolrServer instance for requests. \n   * @param updatesToLeaders sends updates only to leaders - defaults to true\n   */\n  public CloudSolrServer(String zkHost, LBHttpSolrServer lbServer, boolean updatesToLeaders) {\n    this.zkHost = zkHost;\n    this.lbServer = lbServer;\n    this.updatesToLeaders = updatesToLeaders;\n    shutdownLBHttpSolrServer = false;\n  }\n\n","sourceOld":"  /**\n   * @param zkHost The client endpoint of the zookeeper quorum containing the cloud state,\n   * in the form HOST:PORT.\n   * @param lbServer LBHttpSolrServer instance for requests. \n   * @param updatesToLeaders sends updates only to leaders - defaults to true\n   */\n  public CloudSolrServer(String zkHost, LBHttpSolrServer lbServer, boolean updatesToLeaders) {\n    this(zkHost, lbServer, updatesToLeaders, 60);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6f693ed86f289b2e42b46684409b3997f2c264a","date":1404319832,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,LBHttpSolrServer,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,LBHttpSolrServer,boolean).mjava","sourceNew":"  /**\n   * @param zkHost The client endpoint of the zookeeper quorum containing the cloud state,\n   * in the form HOST:PORT.\n   * @param lbServer LBHttpSolrServer instance for requests. \n   * @param updatesToLeaders sends updates only to leaders - defaults to true\n   */\n  public CloudSolrServer(String zkHost, LBHttpSolrServer lbServer, boolean updatesToLeaders) {\n    this.zkHost = zkHost;\n    this.lbServer = lbServer;\n    this.updatesToLeaders = updatesToLeaders;\n    shutdownLBHttpSolrServer = false;\n    setupStateVerParamOnQueryString(lbServer);\n\n  }\n\n","sourceOld":"  /**\n   * @param zkHost The client endpoint of the zookeeper quorum containing the cloud state,\n   * in the form HOST:PORT.\n   * @param lbServer LBHttpSolrServer instance for requests. \n   * @param updatesToLeaders sends updates only to leaders - defaults to true\n   */\n  public CloudSolrServer(String zkHost, LBHttpSolrServer lbServer, boolean updatesToLeaders) {\n    this.zkHost = zkHost;\n    this.lbServer = lbServer;\n    this.updatesToLeaders = updatesToLeaders;\n    shutdownLBHttpSolrServer = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c07fa58a256dccf8b95364855fd5e9ad4d1401","date":1404386015,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,LBHttpSolrServer,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,LBHttpSolrServer,boolean).mjava","sourceNew":"  /**\n   * @param zkHost The client endpoint of the zookeeper quorum containing the cloud state,\n   * in the form HOST:PORT.\n   * @param lbServer LBHttpSolrServer instance for requests. \n   * @param updatesToLeaders sends updates only to leaders - defaults to true\n   */\n  public CloudSolrServer(String zkHost, LBHttpSolrServer lbServer, boolean updatesToLeaders) {\n    this.zkHost = zkHost;\n    this.lbServer = lbServer;\n    this.updatesToLeaders = updatesToLeaders;\n    shutdownLBHttpSolrServer = false;\n  }\n\n","sourceOld":"  /**\n   * @param zkHost The client endpoint of the zookeeper quorum containing the cloud state,\n   * in the form HOST:PORT.\n   * @param lbServer LBHttpSolrServer instance for requests. \n   * @param updatesToLeaders sends updates only to leaders - defaults to true\n   */\n  public CloudSolrServer(String zkHost, LBHttpSolrServer lbServer, boolean updatesToLeaders) {\n    this.zkHost = zkHost;\n    this.lbServer = lbServer;\n    this.updatesToLeaders = updatesToLeaders;\n    shutdownLBHttpSolrServer = false;\n    setupStateVerParamOnQueryString(lbServer);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52209f74dc33b64e2e3576fe15b8c2d312809d7","date":1408896505,"type":3,"author":"Shawn Heisey","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,LBHttpSolrServer,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,LBHttpSolrServer,boolean).mjava","sourceNew":"  /**\n   * @param zkHost\n   *          A zookeeper client endpoint.\n   * @param lbServer\n   *          LBHttpSolrServer instance for requests.\n   * @param updatesToLeaders\n   *          If true, sends updates only to shard leaders.\n   * @see #CloudSolrServer(String) for full description and details on zkHost\n   */\n  public CloudSolrServer(String zkHost, LBHttpSolrServer lbServer, boolean updatesToLeaders) {\n    this.zkHost = zkHost;\n    this.lbServer = lbServer;\n    this.updatesToLeaders = updatesToLeaders;\n    shutdownLBHttpSolrServer = false;\n  }\n\n","sourceOld":"  /**\n   * @param zkHost The client endpoint of the zookeeper quorum containing the cloud state,\n   * in the form HOST:PORT.\n   * @param lbServer LBHttpSolrServer instance for requests. \n   * @param updatesToLeaders sends updates only to leaders - defaults to true\n   */\n  public CloudSolrServer(String zkHost, LBHttpSolrServer lbServer, boolean updatesToLeaders) {\n    this.zkHost = zkHost;\n    this.lbServer = lbServer;\n    this.updatesToLeaders = updatesToLeaders;\n    shutdownLBHttpSolrServer = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279b175e5e66258442d2123a50f052219a9cc1b","date":1410531077,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,LBHttpSolrServer,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,LBHttpSolrServer,boolean).mjava","sourceNew":"  /**\n   * @param zkHost\n   *          A zookeeper client endpoint.\n   * @param lbServer\n   *          LBHttpSolrServer instance for requests.\n   * @param updatesToLeaders\n   *          If true, sends updates only to shard leaders.\n   * @see #CloudSolrServer(String) for full description and details on zkHost\n   */\n  public CloudSolrServer(String zkHost, LBHttpSolrServer lbServer, boolean updatesToLeaders) {\n    this.zkHost = zkHost;\n    this.lbServer = lbServer;\n    this.updatesToLeaders = updatesToLeaders;\n    shutdownLBHttpSolrServer = false;\n    setupStateVerParamOnQueryString(lbServer);\n\n  }\n\n","sourceOld":"  /**\n   * @param zkHost\n   *          A zookeeper client endpoint.\n   * @param lbServer\n   *          LBHttpSolrServer instance for requests.\n   * @param updatesToLeaders\n   *          If true, sends updates only to shard leaders.\n   * @see #CloudSolrServer(String) for full description and details on zkHost\n   */\n  public CloudSolrServer(String zkHost, LBHttpSolrServer lbServer, boolean updatesToLeaders) {\n    this.zkHost = zkHost;\n    this.lbServer = lbServer;\n    this.updatesToLeaders = updatesToLeaders;\n    shutdownLBHttpSolrServer = false;\n  }\n\n","bugFix":null,"bugIntro":["403b6d8b3e6cec80048e9cfc481bbffdd57517bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"403b6d8b3e6cec80048e9cfc481bbffdd57517bb","date":1410598299,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,LBHttpSolrServer,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,LBHttpSolrServer,boolean).mjava","sourceNew":"  /**\n   * @param zkHost\n   *          A zookeeper client endpoint.\n   * @param lbServer\n   *          LBHttpSolrServer instance for requests.\n   * @param updatesToLeaders\n   *          If true, sends updates only to shard leaders.\n   * @see #CloudSolrServer(String) for full description and details on zkHost\n   */\n  public CloudSolrServer(String zkHost, LBHttpSolrServer lbServer, boolean updatesToLeaders) {\n    this.zkHost = zkHost;\n    this.lbServer = lbServer;\n    this.updatesToLeaders = updatesToLeaders;\n    shutdownLBHttpSolrServer = false;\n    lbServer.addQueryParams(STATE_VERSION);\n\n  }\n\n","sourceOld":"  /**\n   * @param zkHost\n   *          A zookeeper client endpoint.\n   * @param lbServer\n   *          LBHttpSolrServer instance for requests.\n   * @param updatesToLeaders\n   *          If true, sends updates only to shard leaders.\n   * @see #CloudSolrServer(String) for full description and details on zkHost\n   */\n  public CloudSolrServer(String zkHost, LBHttpSolrServer lbServer, boolean updatesToLeaders) {\n    this.zkHost = zkHost;\n    this.lbServer = lbServer;\n    this.updatesToLeaders = updatesToLeaders;\n    shutdownLBHttpSolrServer = false;\n    setupStateVerParamOnQueryString(lbServer);\n\n  }\n\n","bugFix":["9279b175e5e66258442d2123a50f052219a9cc1b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"791652abeeebb8642f54a7b42ca914c55805479a","date":1413382171,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,LBHttpSolrServer,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,LBHttpSolrServer,boolean).mjava","sourceNew":"  /**\n   * @param zkHost\n   *          A zookeeper client endpoint.\n   * @param lbServer\n   *          LBHttpSolrServer instance for requests.\n   * @param updatesToLeaders\n   *          If true, sends updates only to shard leaders.\n   * @see #CloudSolrServer(String) for full description and details on zkHost\n   */\n  public CloudSolrServer(String zkHost, LBHttpSolrServer lbServer, boolean updatesToLeaders) {\n    this.zkHost = zkHost;\n    this.lbServer = lbServer;\n    this.updatesToLeaders = updatesToLeaders;\n    shutdownLBHttpSolrServer = false;\n    this.clientIsInternal = false;\n    lbServer.addQueryParams(STATE_VERSION);\n  }\n\n","sourceOld":"  /**\n   * @param zkHost\n   *          A zookeeper client endpoint.\n   * @param lbServer\n   *          LBHttpSolrServer instance for requests.\n   * @param updatesToLeaders\n   *          If true, sends updates only to shard leaders.\n   * @see #CloudSolrServer(String) for full description and details on zkHost\n   */\n  public CloudSolrServer(String zkHost, LBHttpSolrServer lbServer, boolean updatesToLeaders) {\n    this.zkHost = zkHost;\n    this.lbServer = lbServer;\n    this.updatesToLeaders = updatesToLeaders;\n    shutdownLBHttpSolrServer = false;\n    lbServer.addQueryParams(STATE_VERSION);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","date":1413458798,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,LBHttpSolrServer,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,LBHttpSolrServer,boolean).mjava","sourceNew":"  /**\n   * @param zkHost\n   *          A zookeeper client endpoint.\n   * @param lbServer\n   *          LBHttpSolrServer instance for requests.\n   * @param updatesToLeaders\n   *          If true, sends updates only to shard leaders.\n   * @see #CloudSolrServer(String) for full description and details on zkHost\n   */\n  public CloudSolrServer(String zkHost, LBHttpSolrServer lbServer, boolean updatesToLeaders) {\n    this.zkHost = zkHost;\n    this.lbServer = lbServer;\n    this.updatesToLeaders = updatesToLeaders;\n    shutdownLBHttpSolrServer = false;\n    this.clientIsInternal = false;\n    lbServer.addQueryParams(STATE_VERSION);\n  }\n\n","sourceOld":"  /**\n   * @param zkHost\n   *          A zookeeper client endpoint.\n   * @param lbServer\n   *          LBHttpSolrServer instance for requests.\n   * @param updatesToLeaders\n   *          If true, sends updates only to shard leaders.\n   * @see #CloudSolrServer(String) for full description and details on zkHost\n   */\n  public CloudSolrServer(String zkHost, LBHttpSolrServer lbServer, boolean updatesToLeaders) {\n    this.zkHost = zkHost;\n    this.lbServer = lbServer;\n    this.updatesToLeaders = updatesToLeaders;\n    shutdownLBHttpSolrServer = false;\n    lbServer.addQueryParams(STATE_VERSION);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(String,LBHttpSolrClient,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,LBHttpSolrServer,boolean).mjava","sourceNew":"  /**\n   * @param zkHost\n   *          A zookeeper client endpoint.\n   * @param lbClient\n   *          LBHttpSolrServer instance for requests.\n   * @param updatesToLeaders\n   *          If true, sends updates only to shard leaders.\n   * @see #CloudSolrClient(String) for full description and details on zkHost\n   */\n  public CloudSolrClient(String zkHost, LBHttpSolrClient lbClient, boolean updatesToLeaders) {\n    this.zkHost = zkHost;\n    this.lbClient = lbClient;\n    this.updatesToLeaders = updatesToLeaders;\n    shutdownLBHttpSolrServer = false;\n    this.clientIsInternal = false;\n    lbClient.addQueryParams(STATE_VERSION);\n  }\n\n","sourceOld":"  /**\n   * @param zkHost\n   *          A zookeeper client endpoint.\n   * @param lbServer\n   *          LBHttpSolrServer instance for requests.\n   * @param updatesToLeaders\n   *          If true, sends updates only to shard leaders.\n   * @see #CloudSolrServer(String) for full description and details on zkHost\n   */\n  public CloudSolrServer(String zkHost, LBHttpSolrServer lbServer, boolean updatesToLeaders) {\n    this.zkHost = zkHost;\n    this.lbServer = lbServer;\n    this.updatesToLeaders = updatesToLeaders;\n    shutdownLBHttpSolrServer = false;\n    this.clientIsInternal = false;\n    lbServer.addQueryParams(STATE_VERSION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"403b6d8b3e6cec80048e9cfc481bbffdd57517bb":["9279b175e5e66258442d2123a50f052219a9cc1b"],"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84":["403b6d8b3e6cec80048e9cfc481bbffdd57517bb","791652abeeebb8642f54a7b42ca914c55805479a"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"bafca15d8e408346a67f4282ad1143b88023893b":["791652abeeebb8642f54a7b42ca914c55805479a"],"e52209f74dc33b64e2e3576fe15b8c2d312809d7":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"fd9b79570dbb7dde96e0d8bf42339245b30df35b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9279b175e5e66258442d2123a50f052219a9cc1b":["e52209f74dc33b64e2e3576fe15b8c2d312809d7"],"4fb788ea821fd2677915770f1cada8122fce2cce":["fd9b79570dbb7dde96e0d8bf42339245b30df35b"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd9b79570dbb7dde96e0d8bf42339245b30df35b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd9b79570dbb7dde96e0d8bf42339245b30df35b"],"791652abeeebb8642f54a7b42ca914c55805479a":["403b6d8b3e6cec80048e9cfc481bbffdd57517bb"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["4fb788ea821fd2677915770f1cada8122fce2cce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"403b6d8b3e6cec80048e9cfc481bbffdd57517bb":["c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","791652abeeebb8642f54a7b42ca914c55805479a"],"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84":[],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["e52209f74dc33b64e2e3576fe15b8c2d312809d7"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e52209f74dc33b64e2e3576fe15b8c2d312809d7":["9279b175e5e66258442d2123a50f052219a9cc1b"],"fd9b79570dbb7dde96e0d8bf42339245b30df35b":["4fb788ea821fd2677915770f1cada8122fce2cce","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"9279b175e5e66258442d2123a50f052219a9cc1b":["403b6d8b3e6cec80048e9cfc481bbffdd57517bb"],"4fb788ea821fd2677915770f1cada8122fce2cce":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fd9b79570dbb7dde96e0d8bf42339245b30df35b","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"791652abeeebb8642f54a7b42ca914c55805479a":["c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","bafca15d8e408346a67f4282ad1143b88023893b"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}