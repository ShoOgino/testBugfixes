{"path":"lucene/src/java/org/apache/lucene/index/ThreadAffinityDocumentsWriterThreadPool#getAndLock(Thread,DocumentsWriter).mjava","commits":[{"id":"2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27","date":1306166545,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ThreadAffinityDocumentsWriterThreadPool#getAndLock(Thread,DocumentsWriter).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ThreadAffinityDocumentsWriterThreadPool#getAndLock(Thread,DocumentsWriter,Document).mjava","sourceNew":"  @Override\n  public ThreadState getAndLock(Thread requestingThread, DocumentsWriter documentsWriter) {\n    ThreadState threadState = threadBindings.get(requestingThread);\n    if (threadState != null && threadState.tryLock()) {\n      return threadState;\n    }\n    ThreadState minThreadState = null;\n\n    \n    /* TODO -- another thread could lock the minThreadState we just got while \n     we should somehow prevent this. */\n    // Find the state that has minimum number of threads waiting\n    minThreadState = minContendedThreadState();\n    if (minThreadState == null || minThreadState.hasQueuedThreads()) {\n      final ThreadState newState = newThreadState(); // state is already locked if non-null\n      if (newState != null) {\n        assert newState.isHeldByCurrentThread();\n        threadBindings.put(requestingThread, newState);\n        return newState;\n      } else if (minThreadState == null) {\n        /*\n         * no new threadState available we just take the minContented one\n         * This must return a valid thread state since we accessed the \n         * synced context in newThreadState() above.\n         */\n        minThreadState = minContendedThreadState();\n      }\n    }\n    assert minThreadState != null: \"ThreadState is null\";\n    \n    minThreadState.lock();\n    return minThreadState;\n  }\n\n","sourceOld":"  @Override\n  public ThreadState getAndLock(Thread requestingThread, DocumentsWriter documentsWriter, Document doc) {\n    ThreadState threadState = threadBindings.get(requestingThread);\n    if (threadState != null) {\n      if (threadState.tryLock()) {\n        return threadState;\n      }\n    }\n    ThreadState minThreadState = null;\n\n    \n    /* TODO -- another thread could lock the minThreadState we just got while \n     we should somehow prevent this. */\n    // Find the state that has minimum number of threads waiting\n    minThreadState = minContendedThreadState();\n    if (minThreadState == null || minThreadState.hasQueuedThreads()) {\n      final ThreadState newState = newThreadState(); // state is already locked if non-null\n      if (newState != null) {\n        assert newState.isHeldByCurrentThread();\n        threadBindings.put(requestingThread, newState);\n        return newState;\n      } else if (minThreadState == null) {\n        /*\n         * no new threadState available we just take the minContented one\n         * This must return a valid thread state since we accessed the \n         * synced context in newThreadState() above.\n         */\n        minThreadState = minContendedThreadState();\n      }\n    }\n    assert minThreadState != null: \"ThreadState is null\";\n    \n    minThreadState.lock();\n    return minThreadState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/ThreadAffinityDocumentsWriterThreadPool#getAndLock(Thread,DocumentsWriter).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ThreadAffinityDocumentsWriterThreadPool#getAndLock(Thread,DocumentsWriter,Document).mjava","sourceNew":"  @Override\n  public ThreadState getAndLock(Thread requestingThread, DocumentsWriter documentsWriter) {\n    ThreadState threadState = threadBindings.get(requestingThread);\n    if (threadState != null && threadState.tryLock()) {\n      return threadState;\n    }\n    ThreadState minThreadState = null;\n\n    \n    /* TODO -- another thread could lock the minThreadState we just got while \n     we should somehow prevent this. */\n    // Find the state that has minimum number of threads waiting\n    minThreadState = minContendedThreadState();\n    if (minThreadState == null || minThreadState.hasQueuedThreads()) {\n      final ThreadState newState = newThreadState(); // state is already locked if non-null\n      if (newState != null) {\n        assert newState.isHeldByCurrentThread();\n        threadBindings.put(requestingThread, newState);\n        return newState;\n      } else if (minThreadState == null) {\n        /*\n         * no new threadState available we just take the minContented one\n         * This must return a valid thread state since we accessed the \n         * synced context in newThreadState() above.\n         */\n        minThreadState = minContendedThreadState();\n      }\n    }\n    assert minThreadState != null: \"ThreadState is null\";\n    \n    minThreadState.lock();\n    return minThreadState;\n  }\n\n","sourceOld":"  @Override\n  public ThreadState getAndLock(Thread requestingThread, DocumentsWriter documentsWriter, Document doc) {\n    ThreadState threadState = threadBindings.get(requestingThread);\n    if (threadState != null) {\n      if (threadState.tryLock()) {\n        return threadState;\n      }\n    }\n    ThreadState minThreadState = null;\n\n    \n    /* TODO -- another thread could lock the minThreadState we just got while \n     we should somehow prevent this. */\n    // Find the state that has minimum number of threads waiting\n    minThreadState = minContendedThreadState();\n    if (minThreadState == null || minThreadState.hasQueuedThreads()) {\n      final ThreadState newState = newThreadState(); // state is already locked if non-null\n      if (newState != null) {\n        assert newState.isHeldByCurrentThread();\n        threadBindings.put(requestingThread, newState);\n        return newState;\n      } else if (minThreadState == null) {\n        /*\n         * no new threadState available we just take the minContented one\n         * This must return a valid thread state since we accessed the \n         * synced context in newThreadState() above.\n         */\n        minThreadState = minContendedThreadState();\n      }\n    }\n    assert minThreadState != null: \"ThreadState is null\";\n    \n    minThreadState.lock();\n    return minThreadState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/ThreadAffinityDocumentsWriterThreadPool#getAndLock(Thread,DocumentsWriter).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ThreadAffinityDocumentsWriterThreadPool#getAndLock(Thread,DocumentsWriter,Document).mjava","sourceNew":"  @Override\n  public ThreadState getAndLock(Thread requestingThread, DocumentsWriter documentsWriter) {\n    ThreadState threadState = threadBindings.get(requestingThread);\n    if (threadState != null && threadState.tryLock()) {\n      return threadState;\n    }\n    ThreadState minThreadState = null;\n\n    \n    /* TODO -- another thread could lock the minThreadState we just got while \n     we should somehow prevent this. */\n    // Find the state that has minimum number of threads waiting\n    minThreadState = minContendedThreadState();\n    if (minThreadState == null || minThreadState.hasQueuedThreads()) {\n      final ThreadState newState = newThreadState(); // state is already locked if non-null\n      if (newState != null) {\n        assert newState.isHeldByCurrentThread();\n        threadBindings.put(requestingThread, newState);\n        return newState;\n      } else if (minThreadState == null) {\n        /*\n         * no new threadState available we just take the minContented one\n         * This must return a valid thread state since we accessed the \n         * synced context in newThreadState() above.\n         */\n        minThreadState = minContendedThreadState();\n      }\n    }\n    assert minThreadState != null: \"ThreadState is null\";\n    \n    minThreadState.lock();\n    return minThreadState;\n  }\n\n","sourceOld":"  @Override\n  public ThreadState getAndLock(Thread requestingThread, DocumentsWriter documentsWriter, Document doc) {\n    ThreadState threadState = threadBindings.get(requestingThread);\n    if (threadState != null) {\n      if (threadState.tryLock()) {\n        return threadState;\n      }\n    }\n    ThreadState minThreadState = null;\n\n    \n    /* TODO -- another thread could lock the minThreadState we just got while \n     we should somehow prevent this. */\n    // Find the state that has minimum number of threads waiting\n    minThreadState = minContendedThreadState();\n    if (minThreadState == null || minThreadState.hasQueuedThreads()) {\n      final ThreadState newState = newThreadState(); // state is already locked if non-null\n      if (newState != null) {\n        assert newState.isHeldByCurrentThread();\n        threadBindings.put(requestingThread, newState);\n        return newState;\n      } else if (minThreadState == null) {\n        /*\n         * no new threadState available we just take the minContented one\n         * This must return a valid thread state since we accessed the \n         * synced context in newThreadState() above.\n         */\n        minThreadState = minContendedThreadState();\n      }\n    }\n    assert minThreadState != null: \"ThreadState is null\";\n    \n    minThreadState.lock();\n    return minThreadState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ThreadAffinityDocumentsWriterThreadPool#getAndLock(Thread,DocumentsWriter).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ThreadAffinityDocumentsWriterThreadPool#getAndLock(Thread,DocumentsWriter).mjava","sourceNew":"  @Override\n  public ThreadState getAndLock(Thread requestingThread, DocumentsWriter documentsWriter) {\n    ThreadState threadState = threadBindings.get(requestingThread);\n    if (threadState != null && threadState.tryLock()) {\n      return threadState;\n    }\n    ThreadState minThreadState = null;\n\n    \n    /* TODO -- another thread could lock the minThreadState we just got while \n     we should somehow prevent this. */\n    // Find the state that has minimum number of threads waiting\n    minThreadState = minContendedThreadState();\n    if (minThreadState == null || minThreadState.hasQueuedThreads()) {\n      final ThreadState newState = newThreadState(); // state is already locked if non-null\n      if (newState != null) {\n        assert newState.isHeldByCurrentThread();\n        threadBindings.put(requestingThread, newState);\n        return newState;\n      } else if (minThreadState == null) {\n        /*\n         * no new threadState available we just take the minContented one\n         * This must return a valid thread state since we accessed the \n         * synced context in newThreadState() above.\n         */\n        minThreadState = minContendedThreadState();\n      }\n    }\n    assert minThreadState != null: \"ThreadState is null\";\n    \n    minThreadState.lock();\n    return minThreadState;\n  }\n\n","sourceOld":"  @Override\n  public ThreadState getAndLock(Thread requestingThread, DocumentsWriter documentsWriter) {\n    ThreadState threadState = threadBindings.get(requestingThread);\n    if (threadState != null && threadState.tryLock()) {\n      return threadState;\n    }\n    ThreadState minThreadState = null;\n\n    \n    /* TODO -- another thread could lock the minThreadState we just got while \n     we should somehow prevent this. */\n    // Find the state that has minimum number of threads waiting\n    minThreadState = minContendedThreadState();\n    if (minThreadState == null || minThreadState.hasQueuedThreads()) {\n      final ThreadState newState = newThreadState(); // state is already locked if non-null\n      if (newState != null) {\n        assert newState.isHeldByCurrentThread();\n        threadBindings.put(requestingThread, newState);\n        return newState;\n      } else if (minThreadState == null) {\n        /*\n         * no new threadState available we just take the minContented one\n         * This must return a valid thread state since we accessed the \n         * synced context in newThreadState() above.\n         */\n        minThreadState = minContendedThreadState();\n      }\n    }\n    assert minThreadState != null: \"ThreadState is null\";\n    \n    minThreadState.lock();\n    return minThreadState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27"]},"commit2Childs":{"2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","3a119bbc8703c10faa329ec201c654b3a35a1e3e","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}