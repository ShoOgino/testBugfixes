{"path":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/utils/ReflectionUtils#implementsType(Class,Class).mjava","commits":[{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/utils/ReflectionUtils#implementsType(Class,Class).mjava","pathOld":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/utils/ReflectionUtils#implementsType(Class,Class).mjava","sourceNew":"    /**\n     * Check if the given type implements a given super type\n     * @param typeToCheck - type supposed to implement an interface\n     * @param superType - the interface to be implemented by the type to check\n     * @return <code>true</code> if and only if the super type is above in the type hierarchy of the given type, otherwise <code>false</code>\n     */\n    public static boolean implementsType(Class typeToCheck, Class superType) {\n        if(superType == null)\n            return false;\n        if(!superType.isInterface())\n            return  false;\n        if (typeToCheck == null)\n            return false;\n        if (typeToCheck.equals(Object.class))\n            return false;\n        if (typeToCheck.equals(superType))\n            return true;\n        Class[] interfaces = typeToCheck.getInterfaces();\n        for (int i = 0; i < interfaces.length; i++) {\n            if (implementsType(interfaces[i], superType))\n                return true;\n        }\n        return implementsType(typeToCheck.getSuperclass(),superType);\n        \n    }\n\n","sourceOld":"    /**\n     * Check if the given type implements a given super type\n     * @param typeToCheck - type supposed to implement an interface\n     * @param superType - the interface to be implemented by the type to check\n     * @return <code>true</code> if and only if the super type is above in the type hierarchy of the given type, otherwise <code>false</code>\n     */\n    public static boolean implementsType(Class typeToCheck, Class superType) {\n        if(superType == null)\n            return false;\n        if(!superType.isInterface())\n            return  false;\n        if (typeToCheck == null)\n            return false;\n        if (typeToCheck.equals(Object.class))\n            return false;\n        if (typeToCheck.equals(superType))\n            return true;\n        Class[] interfaces = typeToCheck.getInterfaces();\n        for (int i = 0; i < interfaces.length; i++) {\n            if (implementsType(interfaces[i], superType))\n                return true;\n        }\n        return implementsType(typeToCheck.getSuperclass(),superType);\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe","date":1195519587,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/utils/ReflectionUtils#implementsType(Class,Class).mjava","sourceNew":null,"sourceOld":"    /**\n     * Check if the given type implements a given super type\n     * @param typeToCheck - type supposed to implement an interface\n     * @param superType - the interface to be implemented by the type to check\n     * @return <code>true</code> if and only if the super type is above in the type hierarchy of the given type, otherwise <code>false</code>\n     */\n    public static boolean implementsType(Class typeToCheck, Class superType) {\n        if(superType == null)\n            return false;\n        if(!superType.isInterface())\n            return  false;\n        if (typeToCheck == null)\n            return false;\n        if (typeToCheck.equals(Object.class))\n            return false;\n        if (typeToCheck.equals(superType))\n            return true;\n        Class[] interfaces = typeToCheck.getInterfaces();\n        for (int i = 0; i < interfaces.length; i++) {\n            if (implementsType(interfaces[i], superType))\n                return true;\n        }\n        return implementsType(typeToCheck.getSuperclass(),superType);\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}