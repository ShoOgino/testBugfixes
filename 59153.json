{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeQuery.VisitorTemplate#visitScanned(Cell).mjava","commits":[{"id":"672b198fc3dce868916c727917cae58c2906763d","date":1443669960,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeQuery.VisitorTemplate#visitScanned(Cell).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeFilter.VisitorTemplate#visitScanned(Cell).mjava","sourceNew":"    /**\n     * The cell is either indexed as a leaf or is the last level of detail. It\n     * might not even intersect the query shape, so be sure to check for that.\n     * The default implementation will check that and if passes then call\n     * {@link #visitLeaf(org.apache.lucene.spatial.prefix.tree.Cell)} or\n     * {@link #visitPrefix(org.apache.lucene.spatial.prefix.tree.Cell)}.\n     */\n    protected void visitScanned(Cell cell) throws IOException {\n      final SpatialRelation relate = cell.getShape().relate(queryShape);\n      if (relate.intersects()) {\n        cell.setShapeRel(relate);//just being pedantic\n        if (cell.isLeaf()) {\n          visitLeaf(cell);\n        } else {\n          visitPrefix(cell);\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * The cell is either indexed as a leaf or is the last level of detail. It\n     * might not even intersect the query shape, so be sure to check for that.\n     * The default implementation will check that and if passes then call\n     * {@link #visitLeaf(org.apache.lucene.spatial.prefix.tree.Cell)} or\n     * {@link #visitPrefix(org.apache.lucene.spatial.prefix.tree.Cell)}.\n     */\n    protected void visitScanned(Cell cell) throws IOException {\n      final SpatialRelation relate = cell.getShape().relate(queryShape);\n      if (relate.intersects()) {\n        cell.setShapeRel(relate);//just being pedantic\n        if (cell.isLeaf()) {\n          visitLeaf(cell);\n        } else {\n          visitPrefix(cell);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeQuery.VisitorTemplate#visitScanned(Cell).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeQuery.VisitorTemplate#visitScanned(Cell).mjava","sourceNew":"    /**\n     * The cell is either indexed as a leaf or is the last level of detail. It\n     * might not even intersect the query shape, so be sure to check for that.\n     * The default implementation will check that and if passes then call\n     * {@link #visitLeaf(org.apache.lucene.spatial.prefix.tree.Cell)} or\n     * {@link #visitPrefix(org.apache.lucene.spatial.prefix.tree.Cell)}.\n     */\n    protected void visitScanned(Cell cell) throws IOException {\n      final SpatialRelation relate = cell.getShape().relate(queryShape);\n      if (relate.intersects()) {\n        cell.setShapeRel(relate);//just being pedantic\n        if (cell.isLeaf()) {\n          visitLeaf(cell);\n        } else {\n          visitPrefix(cell);\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * The cell is either indexed as a leaf or is the last level of detail. It\n     * might not even intersect the query shape, so be sure to check for that.\n     * The default implementation will check that and if passes then call\n     * {@link #visitLeaf(org.apache.lucene.spatial.prefix.tree.Cell)} or\n     * {@link #visitPrefix(org.apache.lucene.spatial.prefix.tree.Cell)}.\n     */\n    protected void visitScanned(Cell cell) throws IOException {\n      final SpatialRelation relate = cell.getShape().relate(queryShape);\n      if (relate.intersects()) {\n        cell.setShapeRel(relate);//just being pedantic\n        if (cell.isLeaf()) {\n          visitLeaf(cell);\n        } else {\n          visitPrefix(cell);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeQuery.VisitorTemplate#visitScanned(Cell).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeQuery.VisitorTemplate#visitScanned(Cell).mjava","sourceNew":"    /**\n     * The cell is either indexed as a leaf or is the last level of detail. It\n     * might not even intersect the query shape, so be sure to check for that.\n     * The default implementation will check that and if passes then call\n     * {@link #visitLeaf(org.apache.lucene.spatial.prefix.tree.Cell)} or\n     * {@link #visitPrefix(org.apache.lucene.spatial.prefix.tree.Cell)}.\n     */\n    protected void visitScanned(Cell cell) throws IOException {\n      final SpatialRelation relate = cell.getShape().relate(queryShape);\n      if (relate.intersects()) {\n        cell.setShapeRel(relate);//just being pedantic\n        if (cell.isLeaf()) {\n          visitLeaf(cell);\n        } else {\n          visitPrefix(cell);\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * The cell is either indexed as a leaf or is the last level of detail. It\n     * might not even intersect the query shape, so be sure to check for that.\n     * The default implementation will check that and if passes then call\n     * {@link #visitLeaf(org.apache.lucene.spatial.prefix.tree.Cell)} or\n     * {@link #visitPrefix(org.apache.lucene.spatial.prefix.tree.Cell)}.\n     */\n    protected void visitScanned(Cell cell) throws IOException {\n      final SpatialRelation relate = cell.getShape().relate(queryShape);\n      if (relate.intersects()) {\n        cell.setShapeRel(relate);//just being pedantic\n        if (cell.isLeaf()) {\n          visitLeaf(cell);\n        } else {\n          visitPrefix(cell);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["672b198fc3dce868916c727917cae58c2906763d","112d77ac8d3e10a362516ad834c9a11d35c94234"],"672b198fc3dce868916c727917cae58c2906763d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["672b198fc3dce868916c727917cae58c2906763d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"672b198fc3dce868916c727917cae58c2906763d":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["672b198fc3dce868916c727917cae58c2906763d"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}