{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexWriter#close().mjava","commits":[{"id":"038e2a9b07e2f8ae58336613cea227bf8b973484","date":1346850972,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexWriter#close().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/FixedGapTermsIndexWriter#close().mjava","sourceNew":"  public void close() throws IOException {\n    boolean success = false;\n    try {\n      final long dirStart = out.getFilePointer();\n      final int fieldCount = fields.size();\n      \n      int nonNullFieldCount = 0;\n      for(int i=0;i<fieldCount;i++) {\n        SimpleFieldWriter field = fields.get(i);\n        if (field.numIndexTerms > 0) {\n          nonNullFieldCount++;\n        }\n      }\n      \n      out.writeVInt(nonNullFieldCount);\n      for(int i=0;i<fieldCount;i++) {\n        SimpleFieldWriter field = fields.get(i);\n        if (field.numIndexTerms > 0) {\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVInt(field.numIndexTerms);\n          out.writeVLong(field.termsStart);\n          out.writeVLong(field.indexStart);\n          out.writeVLong(field.packedIndexStart);\n          out.writeVLong(field.packedOffsetsStart);\n        }\n      }\n      writeTrailer(dirStart);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out);\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public void close() throws IOException {\n    boolean success = false;\n    try {\n      final long dirStart = out.getFilePointer();\n      final int fieldCount = fields.size();\n      \n      int nonNullFieldCount = 0;\n      for(int i=0;i<fieldCount;i++) {\n        SimpleFieldWriter field = fields.get(i);\n        if (field.numIndexTerms > 0) {\n          nonNullFieldCount++;\n        }\n      }\n      \n      out.writeVInt(nonNullFieldCount);\n      for(int i=0;i<fieldCount;i++) {\n        SimpleFieldWriter field = fields.get(i);\n        if (field.numIndexTerms > 0) {\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVInt(field.numIndexTerms);\n          out.writeVLong(field.termsStart);\n          out.writeVLong(field.indexStart);\n          out.writeVLong(field.packedIndexStart);\n          out.writeVLong(field.packedOffsetsStart);\n        }\n      }\n      writeTrailer(dirStart);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out);\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexWriter#close().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    boolean success = false;\n    try {\n      final long dirStart = out.getFilePointer();\n      final int fieldCount = fields.size();\n      \n      int nonNullFieldCount = 0;\n      for(int i=0;i<fieldCount;i++) {\n        SimpleFieldWriter field = fields.get(i);\n        if (field.numIndexTerms > 0) {\n          nonNullFieldCount++;\n        }\n      }\n      \n      out.writeVInt(nonNullFieldCount);\n      for(int i=0;i<fieldCount;i++) {\n        SimpleFieldWriter field = fields.get(i);\n        if (field.numIndexTerms > 0) {\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVInt(field.numIndexTerms);\n          out.writeVLong(field.termsStart);\n          out.writeVLong(field.indexStart);\n          out.writeVLong(field.packedIndexStart);\n          out.writeVLong(field.packedOffsetsStart);\n        }\n      }\n      writeTrailer(dirStart);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out);\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public void close() throws IOException {\n    boolean success = false;\n    try {\n      final long dirStart = out.getFilePointer();\n      final int fieldCount = fields.size();\n      \n      int nonNullFieldCount = 0;\n      for(int i=0;i<fieldCount;i++) {\n        SimpleFieldWriter field = fields.get(i);\n        if (field.numIndexTerms > 0) {\n          nonNullFieldCount++;\n        }\n      }\n      \n      out.writeVInt(nonNullFieldCount);\n      for(int i=0;i<fieldCount;i++) {\n        SimpleFieldWriter field = fields.get(i);\n        if (field.numIndexTerms > 0) {\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVInt(field.numIndexTerms);\n          out.writeVLong(field.termsStart);\n          out.writeVLong(field.indexStart);\n          out.writeVLong(field.packedIndexStart);\n          out.writeVLong(field.packedOffsetsStart);\n        }\n      }\n      writeTrailer(dirStart);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out);\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexWriter#close().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    boolean success = false;\n    try {\n      final long dirStart = out.getFilePointer();\n      final int fieldCount = fields.size();\n      \n      int nonNullFieldCount = 0;\n      for(int i=0;i<fieldCount;i++) {\n        SimpleFieldWriter field = fields.get(i);\n        if (field.numIndexTerms > 0) {\n          nonNullFieldCount++;\n        }\n      }\n      \n      out.writeVInt(nonNullFieldCount);\n      for(int i=0;i<fieldCount;i++) {\n        SimpleFieldWriter field = fields.get(i);\n        if (field.numIndexTerms > 0) {\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVInt(field.numIndexTerms);\n          out.writeVLong(field.termsStart);\n          out.writeVLong(field.indexStart);\n          out.writeVLong(field.packedIndexStart);\n          out.writeVLong(field.packedOffsetsStart);\n        }\n      }\n      writeTrailer(dirStart);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out);\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public void close() throws IOException {\n    boolean success = false;\n    try {\n      final long dirStart = out.getFilePointer();\n      final int fieldCount = fields.size();\n      \n      int nonNullFieldCount = 0;\n      for(int i=0;i<fieldCount;i++) {\n        SimpleFieldWriter field = fields.get(i);\n        if (field.numIndexTerms > 0) {\n          nonNullFieldCount++;\n        }\n      }\n      \n      out.writeVInt(nonNullFieldCount);\n      for(int i=0;i<fieldCount;i++) {\n        SimpleFieldWriter field = fields.get(i);\n        if (field.numIndexTerms > 0) {\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVInt(field.numIndexTerms);\n          out.writeVLong(field.termsStart);\n          out.writeVLong(field.indexStart);\n          out.writeVLong(field.packedIndexStart);\n          out.writeVLong(field.packedOffsetsStart);\n        }\n      }\n      writeTrailer(dirStart);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out);\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f3b037cd083286b2af89f96e768f85dcd8072d6","date":1396337805,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexWriter#close().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    if (out != null) {\n      boolean success = false;\n      try {\n        final long dirStart = out.getFilePointer();\n        final int fieldCount = fields.size();\n        \n        int nonNullFieldCount = 0;\n        for(int i=0;i<fieldCount;i++) {\n          SimpleFieldWriter field = fields.get(i);\n          if (field.numIndexTerms > 0) {\n            nonNullFieldCount++;\n          }\n        }\n        \n        out.writeVInt(nonNullFieldCount);\n        for(int i=0;i<fieldCount;i++) {\n          SimpleFieldWriter field = fields.get(i);\n          if (field.numIndexTerms > 0) {\n            out.writeVInt(field.fieldInfo.number);\n            out.writeVInt(field.numIndexTerms);\n            out.writeVLong(field.termsStart);\n            out.writeVLong(field.indexStart);\n            out.writeVLong(field.packedIndexStart);\n            out.writeVLong(field.packedOffsetsStart);\n          }\n        }\n        writeTrailer(dirStart);\n        CodecUtil.writeFooter(out);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(out);\n        } else {\n          IOUtils.closeWhileHandlingException(out);\n        }\n        out = null;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    boolean success = false;\n    try {\n      final long dirStart = out.getFilePointer();\n      final int fieldCount = fields.size();\n      \n      int nonNullFieldCount = 0;\n      for(int i=0;i<fieldCount;i++) {\n        SimpleFieldWriter field = fields.get(i);\n        if (field.numIndexTerms > 0) {\n          nonNullFieldCount++;\n        }\n      }\n      \n      out.writeVInt(nonNullFieldCount);\n      for(int i=0;i<fieldCount;i++) {\n        SimpleFieldWriter field = fields.get(i);\n        if (field.numIndexTerms > 0) {\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVInt(field.numIndexTerms);\n          out.writeVLong(field.termsStart);\n          out.writeVLong(field.indexStart);\n          out.writeVLong(field.packedIndexStart);\n          out.writeVLong(field.packedOffsetsStart);\n        }\n      }\n      writeTrailer(dirStart);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out);\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexWriter#close().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    if (out != null) {\n      boolean success = false;\n      try {\n        final long dirStart = out.getFilePointer();\n        final int fieldCount = fields.size();\n        \n        int nonNullFieldCount = 0;\n        for(int i=0;i<fieldCount;i++) {\n          SimpleFieldWriter field = fields.get(i);\n          if (field.numIndexTerms > 0) {\n            nonNullFieldCount++;\n          }\n        }\n        \n        out.writeVInt(nonNullFieldCount);\n        for(int i=0;i<fieldCount;i++) {\n          SimpleFieldWriter field = fields.get(i);\n          if (field.numIndexTerms > 0) {\n            out.writeVInt(field.fieldInfo.number);\n            out.writeVInt(field.numIndexTerms);\n            out.writeVLong(field.termsStart);\n            out.writeVLong(field.indexStart);\n            out.writeVLong(field.packedIndexStart);\n            out.writeVLong(field.packedOffsetsStart);\n          }\n        }\n        writeTrailer(dirStart);\n        CodecUtil.writeFooter(out);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(out);\n        } else {\n          IOUtils.closeWhileHandlingException(out);\n        }\n        out = null;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    boolean success = false;\n    try {\n      final long dirStart = out.getFilePointer();\n      final int fieldCount = fields.size();\n      \n      int nonNullFieldCount = 0;\n      for(int i=0;i<fieldCount;i++) {\n        SimpleFieldWriter field = fields.get(i);\n        if (field.numIndexTerms > 0) {\n          nonNullFieldCount++;\n        }\n      }\n      \n      out.writeVInt(nonNullFieldCount);\n      for(int i=0;i<fieldCount;i++) {\n        SimpleFieldWriter field = fields.get(i);\n        if (field.numIndexTerms > 0) {\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVInt(field.numIndexTerms);\n          out.writeVLong(field.termsStart);\n          out.writeVLong(field.indexStart);\n          out.writeVLong(field.packedIndexStart);\n          out.writeVLong(field.packedOffsetsStart);\n        }\n      }\n      writeTrailer(dirStart);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out);\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["7530de27b87b961b51f01bd1299b7004d46e8823","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["038e2a9b07e2f8ae58336613cea227bf8b973484","7530de27b87b961b51f01bd1299b7004d46e8823"],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["038e2a9b07e2f8ae58336613cea227bf8b973484"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"038e2a9b07e2f8ae58336613cea227bf8b973484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["038e2a9b07e2f8ae58336613cea227bf8b973484"],"7530de27b87b961b51f01bd1299b7004d46e8823":["5eb2511ababf862ea11e10761c70ee560cd84510","d3fcb70cf561547c7bb1506e0cf32ca7b1287064","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"038e2a9b07e2f8ae58336613cea227bf8b973484":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}