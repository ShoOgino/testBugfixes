{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/simple/TestSimpleQueryParser#testORPhrase().mjava","commits":[{"id":"fdc91c6aee685b616507b9e44fcc69315b8a9e6c","date":1384275771,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/simple/TestSimpleQueryParser#testORPhrase().mjava","pathOld":"/dev/null","sourceNew":"  /** test some OR'd phrases using '|' operator */\n  public void testORPhrase() throws Exception {\n    PhraseQuery phrase1 = new PhraseQuery();\n    phrase1.add(new Term(\"field\", \"foo\"));\n    phrase1.add(new Term(\"field\", \"bar\"));\n    PhraseQuery phrase2 = new PhraseQuery();\n    phrase2.add(new Term(\"field\", \"star\"));\n    phrase2.add(new Term(\"field\", \"wars\"));\n    BooleanQuery expected = new BooleanQuery();\n    expected.add(phrase1, Occur.SHOULD);\n    expected.add(phrase2, Occur.SHOULD);\n\n    assertEquals(expected, parse(\"\\\"foo bar\\\"|\\\"star wars\\\"\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9e1499c5d26c936238506df90a3c02c76707722","date":1434449920,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/simple/TestSimpleQueryParser#testORPhrase().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/simple/TestSimpleQueryParser#testORPhrase().mjava","sourceNew":"  /** test some OR'd phrases using '|' operator */\n  public void testORPhrase() throws Exception {\n    PhraseQuery phrase1 = new PhraseQuery(\"field\", \"foo\", \"bar\");\n    PhraseQuery phrase2 = new PhraseQuery(\"field\", \"star\", \"wars\");\n    BooleanQuery expected = new BooleanQuery();\n    expected.add(phrase1, Occur.SHOULD);\n    expected.add(phrase2, Occur.SHOULD);\n\n    assertEquals(expected, parse(\"\\\"foo bar\\\"|\\\"star wars\\\"\"));\n  }\n\n","sourceOld":"  /** test some OR'd phrases using '|' operator */\n  public void testORPhrase() throws Exception {\n    PhraseQuery phrase1 = new PhraseQuery();\n    phrase1.add(new Term(\"field\", \"foo\"));\n    phrase1.add(new Term(\"field\", \"bar\"));\n    PhraseQuery phrase2 = new PhraseQuery();\n    phrase2.add(new Term(\"field\", \"star\"));\n    phrase2.add(new Term(\"field\", \"wars\"));\n    BooleanQuery expected = new BooleanQuery();\n    expected.add(phrase1, Occur.SHOULD);\n    expected.add(phrase2, Occur.SHOULD);\n\n    assertEquals(expected, parse(\"\\\"foo bar\\\"|\\\"star wars\\\"\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/simple/TestSimpleQueryParser#testORPhrase().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/simple/TestSimpleQueryParser#testORPhrase().mjava","sourceNew":"  /** test some OR'd phrases using '|' operator */\n  public void testORPhrase() throws Exception {\n    PhraseQuery phrase1 = new PhraseQuery(\"field\", \"foo\", \"bar\");\n    PhraseQuery phrase2 = new PhraseQuery(\"field\", \"star\", \"wars\");\n    BooleanQuery.Builder expected = new BooleanQuery.Builder();\n    expected.add(phrase1, Occur.SHOULD);\n    expected.add(phrase2, Occur.SHOULD);\n\n    assertEquals(expected.build(), parse(\"\\\"foo bar\\\"|\\\"star wars\\\"\"));\n  }\n\n","sourceOld":"  /** test some OR'd phrases using '|' operator */\n  public void testORPhrase() throws Exception {\n    PhraseQuery phrase1 = new PhraseQuery(\"field\", \"foo\", \"bar\");\n    PhraseQuery phrase2 = new PhraseQuery(\"field\", \"star\", \"wars\");\n    BooleanQuery expected = new BooleanQuery();\n    expected.add(phrase1, Occur.SHOULD);\n    expected.add(phrase2, Occur.SHOULD);\n\n    assertEquals(expected, parse(\"\\\"foo bar\\\"|\\\"star wars\\\"\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["e9e1499c5d26c936238506df90a3c02c76707722"],"e9e1499c5d26c936238506df90a3c02c76707722":["fdc91c6aee685b616507b9e44fcc69315b8a9e6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fdc91c6aee685b616507b9e44fcc69315b8a9e6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9e1499c5d26c936238506df90a3c02c76707722":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fdc91c6aee685b616507b9e44fcc69315b8a9e6c"],"fdc91c6aee685b616507b9e44fcc69315b8a9e6c":["e9e1499c5d26c936238506df90a3c02c76707722"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}