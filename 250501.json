{"path":"src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer#explain(int).mjava","commits":[{"id":"fa4f1b5e611afe6cb170951e0a9202ff95dc9156","date":1250976267,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer#explain(int).mjava","pathOld":"src/java/org/apache/lucene/search/payloads/BoostingFunctionTermQuery.BoostingFunctionTermWeight.BoostingFunctionSpanScorer#explain(int).mjava","sourceNew":"      public Explanation explain(final int doc) throws IOException {\n        ComplexExplanation result = new ComplexExplanation();\n        Explanation nonPayloadExpl = super.explain(doc);\n        result.addDetail(nonPayloadExpl);\n        // QUESTION: Is there a way to avoid this skipTo call? We need to know\n        // whether to load the payload or not\n        Explanation payloadBoost = new Explanation();\n        result.addDetail(payloadBoost);\n\n        float payloadScore = getPayloadScore();\n        payloadBoost.setValue(payloadScore);\n        // GSI: I suppose we could toString the payload, but I don't think that\n        // would be a good idea\n        payloadBoost.setDescription(\"scorePayload(...)\");\n        result.setValue(nonPayloadExpl.getValue() * payloadScore);\n        result.setDescription(\"btq, product of:\");\n        result.setMatch(nonPayloadExpl.getValue() == 0 ? Boolean.FALSE\n            : Boolean.TRUE); // LUCENE-1303\n        return result;\n      }\n\n","sourceOld":"      public Explanation explain(final int doc) throws IOException {\n        ComplexExplanation result = new ComplexExplanation();\n        Explanation nonPayloadExpl = super.explain(doc);\n        result.addDetail(nonPayloadExpl);\n        //QUESTION: Is there a way to avoid this skipTo call?  We need to know whether to load the payload or not\n        Explanation payloadBoost = new Explanation();\n        result.addDetail(payloadBoost);\n\n\n        float payloadScore = getPayloadScore();\n        payloadBoost.setValue(payloadScore);\n        //GSI: I suppose we could toString the payload, but I don't think that would be a good idea\n        payloadBoost.setDescription(\"scorePayload(...)\");\n        result.setValue(nonPayloadExpl.getValue() * payloadScore);\n        result.setDescription(\"btq, product of:\");\n        result.setMatch(nonPayloadExpl.getValue()==0 ? Boolean.FALSE : Boolean.TRUE); // LUCENE-1303\n        return result;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"486cfd5a3f7481938475c113415d896f7a74a4a9","date":1256682581,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer#explain(int).mjava","pathOld":"src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer#explain(int).mjava","sourceNew":"      @Override\n      protected Explanation explain(final int doc) throws IOException {\n        ComplexExplanation result = new ComplexExplanation();\n        Explanation nonPayloadExpl = super.explain(doc);\n        result.addDetail(nonPayloadExpl);\n        // QUESTION: Is there a way to avoid this skipTo call? We need to know\n        // whether to load the payload or not\n        Explanation payloadBoost = new Explanation();\n        result.addDetail(payloadBoost);\n\n        float payloadScore = getPayloadScore();\n        payloadBoost.setValue(payloadScore);\n        // GSI: I suppose we could toString the payload, but I don't think that\n        // would be a good idea\n        payloadBoost.setDescription(\"scorePayload(...)\");\n        result.setValue(nonPayloadExpl.getValue() * payloadScore);\n        result.setDescription(\"btq, product of:\");\n        result.setMatch(nonPayloadExpl.getValue() == 0 ? Boolean.FALSE\n            : Boolean.TRUE); // LUCENE-1303\n        return result;\n      }\n\n","sourceOld":"      public Explanation explain(final int doc) throws IOException {\n        ComplexExplanation result = new ComplexExplanation();\n        Explanation nonPayloadExpl = super.explain(doc);\n        result.addDetail(nonPayloadExpl);\n        // QUESTION: Is there a way to avoid this skipTo call? We need to know\n        // whether to load the payload or not\n        Explanation payloadBoost = new Explanation();\n        result.addDetail(payloadBoost);\n\n        float payloadScore = getPayloadScore();\n        payloadBoost.setValue(payloadScore);\n        // GSI: I suppose we could toString the payload, but I don't think that\n        // would be a good idea\n        payloadBoost.setDescription(\"scorePayload(...)\");\n        result.setValue(nonPayloadExpl.getValue() * payloadScore);\n        result.setDescription(\"btq, product of:\");\n        result.setMatch(nonPayloadExpl.getValue() == 0 ? Boolean.FALSE\n            : Boolean.TRUE); // LUCENE-1303\n        return result;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer#explain(int).mjava","pathOld":"src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer#explain(int).mjava","sourceNew":"      @Override\n      protected Explanation explain(final int doc) throws IOException {\n        ComplexExplanation result = new ComplexExplanation();\n        Explanation nonPayloadExpl = super.explain(doc);\n        result.addDetail(nonPayloadExpl);\n        // QUESTION: Is there a way to avoid this skipTo call? We need to know\n        // whether to load the payload or not\n        Explanation payloadBoost = new Explanation();\n        result.addDetail(payloadBoost);\n\n        float payloadScore = getPayloadScore();\n        payloadBoost.setValue(payloadScore);\n        // GSI: I suppose we could toString the payload, but I don't think that\n        // would be a good idea\n        payloadBoost.setDescription(\"scorePayload(...)\");\n        result.setValue(nonPayloadExpl.getValue() * payloadScore);\n        result.setDescription(\"btq, product of:\");\n        result.setMatch(nonPayloadExpl.getValue() == 0 ? Boolean.FALSE\n            : Boolean.TRUE); // LUCENE-1303\n        return result;\n      }\n\n","sourceOld":"      @Override\n      protected Explanation explain(final int doc) throws IOException {\n        ComplexExplanation result = new ComplexExplanation();\n        Explanation nonPayloadExpl = super.explain(doc);\n        result.addDetail(nonPayloadExpl);\n        // QUESTION: Is there a way to avoid this skipTo call? We need to know\n        // whether to load the payload or not\n        Explanation payloadBoost = new Explanation();\n        result.addDetail(payloadBoost);\n\n        float payloadScore = getPayloadScore();\n        payloadBoost.setValue(payloadScore);\n        // GSI: I suppose we could toString the payload, but I don't think that\n        // would be a good idea\n        payloadBoost.setDescription(\"scorePayload(...)\");\n        result.setValue(nonPayloadExpl.getValue() * payloadScore);\n        result.setDescription(\"btq, product of:\");\n        result.setMatch(nonPayloadExpl.getValue() == 0 ? Boolean.FALSE\n            : Boolean.TRUE); // LUCENE-1303\n        return result;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"486cfd5a3f7481938475c113415d896f7a74a4a9":["fa4f1b5e611afe6cb170951e0a9202ff95dc9156"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa4f1b5e611afe6cb170951e0a9202ff95dc9156":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["486cfd5a3f7481938475c113415d896f7a74a4a9"]},"commit2Childs":{"486cfd5a3f7481938475c113415d896f7a74a4a9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fa4f1b5e611afe6cb170951e0a9202ff95dc9156"],"fa4f1b5e611afe6cb170951e0a9202ff95dc9156":["486cfd5a3f7481938475c113415d896f7a74a4a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}