{"path":"src/java/org/apache/lucene/search/PhrasePrefixQuery#scorer(IndexReader,Similarity).mjava","commits":[{"id":"6f5efa46fb27648cd98137d9898d819e115911bc","date":1036690287,"type":1,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhrasePrefixQuery#scorer(IndexReader,Similarity).mjava","pathOld":"src/java/org/apache/lucene/search/PhrasePrefixQuery#scorer(IndexReader).mjava","sourceNew":"    Scorer scorer(IndexReader reader, Similarity similarity)\n\tthrows IOException\n    {\n    \tif (_termArrays.size() == 0)  // optimize zero-term case\n\t    return null;\n\n\tif (_termArrays.size() == 1)  // optimize one-term case\n\t{\n\t    Term[] terms = (Term[])_termArrays.get(0);\n\n\t    BooleanQuery boq = new BooleanQuery();\n\t    for (int i=0; i<terms.length; i++)\n\t\tboq.add(new TermQuery(terms[i]), false, false);\n\n\t    return boq.scorer(reader, similarity);\n    \t}\n\n    \tTermPositions[] tps = new TermPositions[_termArrays.size()];\n\tfor (int i=0; i<tps.length; i++)\n\t{\n\t    Term[] terms = (Term[])_termArrays.get(i);\n\n\t    TermPositions p;\n\t    if (terms.length > 1)\n\t\tp = new MultipleTermPositions(reader, terms);\n\t    else\n\t\tp = reader.termPositions(terms[0]);\n\n\t    if (p == null)\n\t\treturn null;\n\n\t    tps[i] = p;\n\t}\n\n\tif (_slop == 0)\n\t    return new ExactPhraseScorer(tps, similarity,\n                                         reader.norms(_field), _weight);\n\telse\n\t    return new SloppyPhraseScorer(tps, similarity, _slop,\n                                          reader.norms(_field), _weight);\n    }\n\n","sourceOld":"    Scorer scorer(IndexReader reader)\n\tthrows IOException\n    {\n    \tif (_termArrays.size() == 0)  // optimize zero-term case\n\t    return null;\n\n\tif (_termArrays.size() == 1)  // optimize one-term case\n\t{\n\t    Term[] terms = (Term[])_termArrays.get(0);\n\n\t    BooleanQuery boq = new BooleanQuery();\n\t    for (int i=0; i<terms.length; i++)\n\t\tboq.add(new TermQuery(terms[i]), false, false);\n\n\t    return boq.scorer(reader);\n    \t}\n\n    \tTermPositions[] tps = new TermPositions[_termArrays.size()];\n\tfor (int i=0; i<tps.length; i++)\n\t{\n\t    Term[] terms = (Term[])_termArrays.get(i);\n\n\t    TermPositions p;\n\t    if (terms.length > 1)\n\t\tp = new MultipleTermPositions(reader, terms);\n\t    else\n\t\tp = reader.termPositions(terms[0]);\n\n\t    if (p == null)\n\t\treturn null;\n\n\t    tps[i] = p;\n\t}\n\n\tif (_slop == 0)\n\t    return new ExactPhraseScorer(tps, reader.norms(_field), _weight);\n\telse\n\t    return new SloppyPhraseScorer(tps, _slop, reader.norms(_field), _weight);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27274410c91546fcfc28e692abd2dd77ca99be4b","date":1042501834,"type":4,"author":"Doug Cutting","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/PhrasePrefixQuery#scorer(IndexReader,Similarity).mjava","sourceNew":null,"sourceOld":"    Scorer scorer(IndexReader reader, Similarity similarity)\n\tthrows IOException\n    {\n    \tif (_termArrays.size() == 0)  // optimize zero-term case\n\t    return null;\n\n\tif (_termArrays.size() == 1)  // optimize one-term case\n\t{\n\t    Term[] terms = (Term[])_termArrays.get(0);\n\n\t    BooleanQuery boq = new BooleanQuery();\n\t    for (int i=0; i<terms.length; i++)\n\t\tboq.add(new TermQuery(terms[i]), false, false);\n\n\t    return boq.scorer(reader, similarity);\n    \t}\n\n    \tTermPositions[] tps = new TermPositions[_termArrays.size()];\n\tfor (int i=0; i<tps.length; i++)\n\t{\n\t    Term[] terms = (Term[])_termArrays.get(i);\n\n\t    TermPositions p;\n\t    if (terms.length > 1)\n\t\tp = new MultipleTermPositions(reader, terms);\n\t    else\n\t\tp = reader.termPositions(terms[0]);\n\n\t    if (p == null)\n\t\treturn null;\n\n\t    tps[i] = p;\n\t}\n\n\tif (_slop == 0)\n\t    return new ExactPhraseScorer(tps, similarity,\n                                         reader.norms(_field), _weight);\n\telse\n\t    return new SloppyPhraseScorer(tps, similarity, _slop,\n                                          reader.norms(_field), _weight);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"27274410c91546fcfc28e692abd2dd77ca99be4b":["6f5efa46fb27648cd98137d9898d819e115911bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6f5efa46fb27648cd98137d9898d819e115911bc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["27274410c91546fcfc28e692abd2dd77ca99be4b"]},"commit2Childs":{"27274410c91546fcfc28e692abd2dd77ca99be4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6f5efa46fb27648cd98137d9898d819e115911bc"],"6f5efa46fb27648cd98137d9898d819e115911bc":["27274410c91546fcfc28e692abd2dd77ca99be4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}