{"path":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testTermWithoutWildcard().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testTermWithoutWildcard().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testTermWithoutWildcard().mjava","sourceNew":"  /**\n   * Tests if a WildcardQuery that has no wildcard in the term is rewritten to a single\n   * TermQuery. The boost should be preserved, and the rewrite should return\n   * a ConstantScoreQuery if the WildcardQuery had a ConstantScore rewriteMethod.\n   */\n  public void testTermWithoutWildcard() throws IOException {\n      Directory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n      IndexReader reader = IndexReader.open(indexStore);\n      IndexSearcher searcher = new IndexSearcher(reader);\n\n      MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"nowildcard\"));\n      assertMatches(searcher, wq, 1);\n\n      wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n      wq.setBoost(0.1F);\n      Query q = searcher.rewrite(wq);\n      assertTrue(q instanceof TermQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0);\n      \n      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n      wq.setBoost(0.2F);\n      q = searcher.rewrite(wq);\n      assertTrue(q instanceof ConstantScoreQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0.1);\n      \n      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n      wq.setBoost(0.3F);\n      q = searcher.rewrite(wq);\n      assertTrue(q instanceof ConstantScoreQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0.1);\n      \n      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n      wq.setBoost(0.4F);\n      q = searcher.rewrite(wq);\n      assertTrue(q instanceof ConstantScoreQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0.1);\n      reader.close();\n      indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests if a WildcardQuery that has no wildcard in the term is rewritten to a single\n   * TermQuery. The boost should be preserved, and the rewrite should return\n   * a ConstantScoreQuery if the WildcardQuery had a ConstantScore rewriteMethod.\n   */\n  public void testTermWithoutWildcard() throws IOException {\n      Directory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n      IndexReader reader = IndexReader.open(indexStore);\n      IndexSearcher searcher = new IndexSearcher(reader);\n\n      MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"nowildcard\"));\n      assertMatches(searcher, wq, 1);\n\n      wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n      wq.setBoost(0.1F);\n      Query q = searcher.rewrite(wq);\n      assertTrue(q instanceof TermQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0);\n      \n      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n      wq.setBoost(0.2F);\n      q = searcher.rewrite(wq);\n      assertTrue(q instanceof ConstantScoreQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0.1);\n      \n      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n      wq.setBoost(0.3F);\n      q = searcher.rewrite(wq);\n      assertTrue(q instanceof ConstantScoreQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0.1);\n      \n      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n      wq.setBoost(0.4F);\n      q = searcher.rewrite(wq);\n      assertTrue(q instanceof ConstantScoreQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0.1);\n      reader.close();\n      indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testTermWithoutWildcard().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testTermWithoutWildcard().mjava","sourceNew":"  /**\n   * Tests if a WildcardQuery that has no wildcard in the term is rewritten to a single\n   * TermQuery. The boost should be preserved, and the rewrite should return\n   * a ConstantScoreQuery if the WildcardQuery had a ConstantScore rewriteMethod.\n   */\n  public void testTermWithoutWildcard() throws IOException {\n      Directory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n      IndexReader reader = DirectoryReader.open(indexStore);\n      IndexSearcher searcher = new IndexSearcher(reader);\n\n      MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"nowildcard\"));\n      assertMatches(searcher, wq, 1);\n\n      wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n      wq.setBoost(0.1F);\n      Query q = searcher.rewrite(wq);\n      assertTrue(q instanceof TermQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0);\n      \n      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n      wq.setBoost(0.2F);\n      q = searcher.rewrite(wq);\n      assertTrue(q instanceof ConstantScoreQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0.1);\n      \n      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n      wq.setBoost(0.3F);\n      q = searcher.rewrite(wq);\n      assertTrue(q instanceof ConstantScoreQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0.1);\n      \n      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n      wq.setBoost(0.4F);\n      q = searcher.rewrite(wq);\n      assertTrue(q instanceof ConstantScoreQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0.1);\n      reader.close();\n      indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests if a WildcardQuery that has no wildcard in the term is rewritten to a single\n   * TermQuery. The boost should be preserved, and the rewrite should return\n   * a ConstantScoreQuery if the WildcardQuery had a ConstantScore rewriteMethod.\n   */\n  public void testTermWithoutWildcard() throws IOException {\n      Directory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n      IndexReader reader = IndexReader.open(indexStore);\n      IndexSearcher searcher = new IndexSearcher(reader);\n\n      MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"nowildcard\"));\n      assertMatches(searcher, wq, 1);\n\n      wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n      wq.setBoost(0.1F);\n      Query q = searcher.rewrite(wq);\n      assertTrue(q instanceof TermQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0);\n      \n      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n      wq.setBoost(0.2F);\n      q = searcher.rewrite(wq);\n      assertTrue(q instanceof ConstantScoreQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0.1);\n      \n      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n      wq.setBoost(0.3F);\n      q = searcher.rewrite(wq);\n      assertTrue(q instanceof ConstantScoreQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0.1);\n      \n      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n      wq.setBoost(0.4F);\n      q = searcher.rewrite(wq);\n      assertTrue(q instanceof ConstantScoreQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0.1);\n      reader.close();\n      indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","date":1365631993,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testTermWithoutWildcard().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testTermWithoutWildcard().mjava","sourceNew":"  /**\n   * Tests if a WildcardQuery that has no wildcard in the term is rewritten to a single\n   * TermQuery. The boost should be preserved, and the rewrite should return\n   * a ConstantScoreQuery if the WildcardQuery had a ConstantScore rewriteMethod.\n   */\n  public void testTermWithoutWildcard() throws IOException {\n      Directory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n      IndexReader reader = DirectoryReader.open(indexStore);\n      IndexSearcher searcher = newSearcher(reader);\n\n      MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"nowildcard\"));\n      assertMatches(searcher, wq, 1);\n\n      wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n      wq.setBoost(0.1F);\n      Query q = searcher.rewrite(wq);\n      assertTrue(q instanceof TermQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0);\n      \n      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n      wq.setBoost(0.2F);\n      q = searcher.rewrite(wq);\n      assertTrue(q instanceof ConstantScoreQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0.1);\n      \n      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n      wq.setBoost(0.3F);\n      q = searcher.rewrite(wq);\n      assertTrue(q instanceof ConstantScoreQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0.1);\n      \n      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n      wq.setBoost(0.4F);\n      q = searcher.rewrite(wq);\n      assertTrue(q instanceof ConstantScoreQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0.1);\n      reader.close();\n      indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests if a WildcardQuery that has no wildcard in the term is rewritten to a single\n   * TermQuery. The boost should be preserved, and the rewrite should return\n   * a ConstantScoreQuery if the WildcardQuery had a ConstantScore rewriteMethod.\n   */\n  public void testTermWithoutWildcard() throws IOException {\n      Directory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n      IndexReader reader = DirectoryReader.open(indexStore);\n      IndexSearcher searcher = new IndexSearcher(reader);\n\n      MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"nowildcard\"));\n      assertMatches(searcher, wq, 1);\n\n      wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n      wq.setBoost(0.1F);\n      Query q = searcher.rewrite(wq);\n      assertTrue(q instanceof TermQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0);\n      \n      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n      wq.setBoost(0.2F);\n      q = searcher.rewrite(wq);\n      assertTrue(q instanceof ConstantScoreQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0.1);\n      \n      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n      wq.setBoost(0.3F);\n      q = searcher.rewrite(wq);\n      assertTrue(q instanceof ConstantScoreQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0.1);\n      \n      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n      wq.setBoost(0.4F);\n      q = searcher.rewrite(wq);\n      assertTrue(q instanceof ConstantScoreQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0.1);\n      reader.close();\n      indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0","date":1412077943,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testTermWithoutWildcard().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testTermWithoutWildcard().mjava","sourceNew":"  /**\n   * Tests if a WildcardQuery that has no wildcard in the term is rewritten to a single\n   * TermQuery. The boost should be preserved, and the rewrite should return\n   * a ConstantScoreQuery if the WildcardQuery had a ConstantScore rewriteMethod.\n   */\n  public void testTermWithoutWildcard() throws IOException {\n      Directory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n      IndexReader reader = DirectoryReader.open(indexStore);\n      IndexSearcher searcher = newSearcher(reader);\n\n      MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"nowildcard\"));\n      assertMatches(searcher, wq, 1);\n\n      wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n      wq.setBoost(0.1F);\n      Query q = searcher.rewrite(wq);\n      assertTrue(q instanceof TermQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0);\n      \n      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n      wq.setBoost(0.2F);\n      q = searcher.rewrite(wq);\n      assertTrue(q instanceof ConstantScoreQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0.1);\n      \n      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n      wq.setBoost(0.4F);\n      q = searcher.rewrite(wq);\n      assertTrue(q instanceof ConstantScoreQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0.1);\n      reader.close();\n      indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests if a WildcardQuery that has no wildcard in the term is rewritten to a single\n   * TermQuery. The boost should be preserved, and the rewrite should return\n   * a ConstantScoreQuery if the WildcardQuery had a ConstantScore rewriteMethod.\n   */\n  public void testTermWithoutWildcard() throws IOException {\n      Directory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n      IndexReader reader = DirectoryReader.open(indexStore);\n      IndexSearcher searcher = newSearcher(reader);\n\n      MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"nowildcard\"));\n      assertMatches(searcher, wq, 1);\n\n      wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n      wq.setBoost(0.1F);\n      Query q = searcher.rewrite(wq);\n      assertTrue(q instanceof TermQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0);\n      \n      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n      wq.setBoost(0.2F);\n      q = searcher.rewrite(wq);\n      assertTrue(q instanceof ConstantScoreQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0.1);\n      \n      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n      wq.setBoost(0.3F);\n      q = searcher.rewrite(wq);\n      assertTrue(q instanceof ConstantScoreQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0.1);\n      \n      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n      wq.setBoost(0.4F);\n      q = searcher.rewrite(wq);\n      assertTrue(q instanceof ConstantScoreQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0.1);\n      reader.close();\n      indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testTermWithoutWildcard().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testTermWithoutWildcard().mjava","sourceNew":"  /**\n   * Tests if a WildcardQuery that has no wildcard in the term is rewritten to a single\n   * TermQuery. The boost should be preserved, and the rewrite should return\n   * a ConstantScoreQuery if the WildcardQuery had a ConstantScore rewriteMethod.\n   */\n  public void testTermWithoutWildcard() throws IOException {\n      Directory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n      IndexReader reader = DirectoryReader.open(indexStore);\n      IndexSearcher searcher = newSearcher(reader);\n\n      MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"nowildcard\"));\n      assertMatches(searcher, wq, 1);\n\n      wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n      wq.setBoost(0.1F);\n      Query q = searcher.rewrite(wq);\n      assertTrue(q instanceof TermQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0);\n      \n      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n      wq.setBoost(0.2F);\n      q = searcher.rewrite(wq);\n      assertTrue(q instanceof ConstantScoreQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0.1);\n      \n      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n      wq.setBoost(0.4F);\n      q = searcher.rewrite(wq);\n      assertTrue(q instanceof ConstantScoreQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0.1);\n      reader.close();\n      indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests if a WildcardQuery that has no wildcard in the term is rewritten to a single\n   * TermQuery. The boost should be preserved, and the rewrite should return\n   * a ConstantScoreQuery if the WildcardQuery had a ConstantScore rewriteMethod.\n   */\n  public void testTermWithoutWildcard() throws IOException {\n      Directory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n      IndexReader reader = DirectoryReader.open(indexStore);\n      IndexSearcher searcher = newSearcher(reader);\n\n      MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"nowildcard\"));\n      assertMatches(searcher, wq, 1);\n\n      wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n      wq.setBoost(0.1F);\n      Query q = searcher.rewrite(wq);\n      assertTrue(q instanceof TermQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0);\n      \n      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n      wq.setBoost(0.2F);\n      q = searcher.rewrite(wq);\n      assertTrue(q instanceof ConstantScoreQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0.1);\n      \n      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n      wq.setBoost(0.3F);\n      q = searcher.rewrite(wq);\n      assertTrue(q instanceof ConstantScoreQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0.1);\n      \n      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n      wq.setBoost(0.4F);\n      q = searcher.rewrite(wq);\n      assertTrue(q instanceof ConstantScoreQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0.1);\n      reader.close();\n      indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2713584a660051cd646423be682771e3bbd99985","date":1425046322,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testTermWithoutWildcard().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testTermWithoutWildcard().mjava","sourceNew":"  /**\n   * Tests if a WildcardQuery that has no wildcard in the term is rewritten to a single\n   * TermQuery. The boost should be preserved, and the rewrite should return\n   * a ConstantScoreQuery if the WildcardQuery had a ConstantScore rewriteMethod.\n   */\n  public void testTermWithoutWildcard() throws IOException {\n      Directory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n      IndexReader reader = DirectoryReader.open(indexStore);\n      IndexSearcher searcher = newSearcher(reader);\n\n      MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"nowildcard\"));\n      assertMatches(searcher, wq, 1);\n\n      wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n      wq.setBoost(0.1F);\n      Query q = searcher.rewrite(wq);\n      assertTrue(q instanceof TermQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0);\n      \n      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_REWRITE);\n      wq.setBoost(0.2F);\n      q = searcher.rewrite(wq);\n      assertTrue(q instanceof MultiTermQueryConstantScoreWrapper);\n      assertEquals(q.getBoost(), wq.getBoost(), 0.1);\n      \n      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE);\n      wq.setBoost(0.4F);\n      q = searcher.rewrite(wq);\n      assertTrue(q instanceof ConstantScoreQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0.1);\n      reader.close();\n      indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests if a WildcardQuery that has no wildcard in the term is rewritten to a single\n   * TermQuery. The boost should be preserved, and the rewrite should return\n   * a ConstantScoreQuery if the WildcardQuery had a ConstantScore rewriteMethod.\n   */\n  public void testTermWithoutWildcard() throws IOException {\n      Directory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n      IndexReader reader = DirectoryReader.open(indexStore);\n      IndexSearcher searcher = newSearcher(reader);\n\n      MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"nowildcard\"));\n      assertMatches(searcher, wq, 1);\n\n      wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n      wq.setBoost(0.1F);\n      Query q = searcher.rewrite(wq);\n      assertTrue(q instanceof TermQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0);\n      \n      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n      wq.setBoost(0.2F);\n      q = searcher.rewrite(wq);\n      assertTrue(q instanceof ConstantScoreQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0.1);\n      \n      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n      wq.setBoost(0.4F);\n      q = searcher.rewrite(wq);\n      assertTrue(q instanceof ConstantScoreQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0.1);\n      reader.close();\n      indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testTermWithoutWildcard().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testTermWithoutWildcard().mjava","sourceNew":"  /**\n   * Tests if a WildcardQuery that has no wildcard in the term is rewritten to a single\n   * TermQuery. The boost should be preserved, and the rewrite should return\n   * a ConstantScoreQuery if the WildcardQuery had a ConstantScore rewriteMethod.\n   */\n  public void testTermWithoutWildcard() throws IOException {\n      Directory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n      IndexReader reader = DirectoryReader.open(indexStore);\n      IndexSearcher searcher = newSearcher(reader);\n\n      MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"nowildcard\"));\n      assertMatches(searcher, wq, 1);\n\n      wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n      wq.setBoost(0.1F);\n      Query q = searcher.rewrite(wq);\n      assertTrue(q instanceof TermQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0);\n      \n      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_REWRITE);\n      wq.setBoost(0.2F);\n      q = searcher.rewrite(wq);\n      assertTrue(q instanceof MultiTermQueryConstantScoreWrapper);\n      assertEquals(q.getBoost(), wq.getBoost(), 0.1);\n      \n      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE);\n      wq.setBoost(0.4F);\n      q = searcher.rewrite(wq);\n      assertTrue(q instanceof ConstantScoreQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0.1);\n      reader.close();\n      indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests if a WildcardQuery that has no wildcard in the term is rewritten to a single\n   * TermQuery. The boost should be preserved, and the rewrite should return\n   * a ConstantScoreQuery if the WildcardQuery had a ConstantScore rewriteMethod.\n   */\n  public void testTermWithoutWildcard() throws IOException {\n      Directory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n      IndexReader reader = DirectoryReader.open(indexStore);\n      IndexSearcher searcher = newSearcher(reader);\n\n      MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"nowildcard\"));\n      assertMatches(searcher, wq, 1);\n\n      wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n      wq.setBoost(0.1F);\n      Query q = searcher.rewrite(wq);\n      assertTrue(q instanceof TermQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0);\n      \n      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n      wq.setBoost(0.2F);\n      q = searcher.rewrite(wq);\n      assertTrue(q instanceof ConstantScoreQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0.1);\n      \n      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n      wq.setBoost(0.4F);\n      q = searcher.rewrite(wq);\n      assertTrue(q instanceof ConstantScoreQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0.1);\n      reader.close();\n      indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testTermWithoutWildcard().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testTermWithoutWildcard().mjava","sourceNew":"  /**\n   * Tests if a WildcardQuery that has no wildcard in the term is rewritten to a single\n   * TermQuery. The boost should be preserved, and the rewrite should return\n   * a ConstantScoreQuery if the WildcardQuery had a ConstantScore rewriteMethod.\n   */\n  public void testTermWithoutWildcard() throws IOException {\n      Directory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n      IndexReader reader = DirectoryReader.open(indexStore);\n      IndexSearcher searcher = newSearcher(reader);\n\n      MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"nowildcard\"));\n      assertMatches(searcher, wq, 1);\n\n      wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n      Query q = searcher.rewrite(wq);\n      assertTrue(q instanceof TermQuery);\n      \n      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_REWRITE);\n      q = searcher.rewrite(wq);\n      assertTrue(q instanceof MultiTermQueryConstantScoreWrapper);\n      \n      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE);\n      q = searcher.rewrite(wq);\n      assertTrue(q instanceof ConstantScoreQuery);\n      reader.close();\n      indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests if a WildcardQuery that has no wildcard in the term is rewritten to a single\n   * TermQuery. The boost should be preserved, and the rewrite should return\n   * a ConstantScoreQuery if the WildcardQuery had a ConstantScore rewriteMethod.\n   */\n  public void testTermWithoutWildcard() throws IOException {\n      Directory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n      IndexReader reader = DirectoryReader.open(indexStore);\n      IndexSearcher searcher = newSearcher(reader);\n\n      MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"nowildcard\"));\n      assertMatches(searcher, wq, 1);\n\n      wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n      wq.setBoost(0.1F);\n      Query q = searcher.rewrite(wq);\n      assertTrue(q instanceof TermQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0);\n      \n      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_REWRITE);\n      wq.setBoost(0.2F);\n      q = searcher.rewrite(wq);\n      assertTrue(q instanceof MultiTermQueryConstantScoreWrapper);\n      assertEquals(q.getBoost(), wq.getBoost(), 0.1);\n      \n      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE);\n      wq.setBoost(0.4F);\n      q = searcher.rewrite(wq);\n      assertTrue(q instanceof ConstantScoreQuery);\n      assertEquals(q.getBoost(), wq.getBoost(), 0.1);\n      reader.close();\n      indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["59ce67ef5584d0d65a576a6bbe06322cc84eb9b0","2713584a660051cd646423be682771e3bbd99985"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2713584a660051cd646423be682771e3bbd99985":["59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["2713584a660051cd646423be682771e3bbd99985"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dfdf766e55e943d942055d7de53c7ad6bc45283"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"2713584a660051cd646423be682771e3bbd99985":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2dfdf766e55e943d942055d7de53c7ad6bc45283"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["d9a47902d6207303f5ed3e7aaca62ca33433af66","59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2713584a660051cd646423be682771e3bbd99985","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}