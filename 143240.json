{"path":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring.BoostingSimilarity#simScorer(SimWeight,AtomicReaderContext).mjava","commits":[{"id":"b799defcfda6d303cbb180917bf1e749089adf42","date":1370695356,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring.BoostingSimilarity#simScorer(SimWeight,AtomicReaderContext).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring.BoostingSimilarity#sloppySimScorer(SimWeight,AtomicReaderContext).mjava","sourceNew":"    @Override\n    public SimScorer simScorer(SimWeight stats, AtomicReaderContext context) throws IOException {\n      final SimScorer sub = sim.simScorer(stats, context);\n      final FieldCache.Floats values = FieldCache.DEFAULT.getFloats(context.reader(), boostField, false);\n      \n      return new SimScorer() {\n        @Override\n        public float score(int doc, float freq) {\n          return values.get(doc) * sub.score(doc, freq);\n        }\n        \n        @Override\n        public float computeSlopFactor(int distance) {\n          return sub.computeSlopFactor(distance);\n        }\n\n        @Override\n        public float computePayloadFactor(int doc, int start, int end, BytesRef payload) {\n          return sub.computePayloadFactor(doc, start, end, payload);\n        }\n\n        @Override\n        public Explanation explain(int doc, Explanation freq) {\n          Explanation boostExplanation = new Explanation(values.get(doc), \"indexDocValue(\" + boostField + \")\");\n          Explanation simExplanation = sub.explain(doc, freq);\n          Explanation expl = new Explanation(boostExplanation.getValue() * simExplanation.getValue(), \"product of:\");\n          expl.addDetail(boostExplanation);\n          expl.addDetail(simExplanation);\n          return expl;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public SloppySimScorer sloppySimScorer(SimWeight stats, AtomicReaderContext context) throws IOException {\n      final SloppySimScorer sub = sim.sloppySimScorer(stats, context);\n      final FieldCache.Floats values = FieldCache.DEFAULT.getFloats(context.reader(), boostField, false);\n      \n      return new SloppySimScorer() {\n        @Override\n        public float score(int doc, float freq) {\n          return values.get(doc) * sub.score(doc, freq);\n        }\n        \n        @Override\n        public float computeSlopFactor(int distance) {\n          return sub.computeSlopFactor(distance);\n        }\n\n        @Override\n        public float computePayloadFactor(int doc, int start, int end, BytesRef payload) {\n          return sub.computePayloadFactor(doc, start, end, payload);\n        }\n\n        @Override\n        public Explanation explain(int doc, Explanation freq) {\n          Explanation boostExplanation = new Explanation(values.get(doc), \"indexDocValue(\" + boostField + \")\");\n          Explanation simExplanation = sub.explain(doc, freq);\n          Explanation expl = new Explanation(boostExplanation.getValue() * simExplanation.getValue(), \"product of:\");\n          expl.addDetail(boostExplanation);\n          expl.addDetail(simExplanation);\n          return expl;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring.BoostingSimilarity#simScorer(SimWeight,AtomicReaderContext).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring.BoostingSimilarity#simScorer(SimWeight,AtomicReaderContext).mjava","sourceNew":"    @Override\n    public SimScorer simScorer(SimWeight stats, AtomicReaderContext context) throws IOException {\n      final SimScorer sub = sim.simScorer(stats, context);\n      final NumericDocValues values = DocValues.getNumeric(context.reader(), boostField);\n      \n      return new SimScorer() {\n        @Override\n        public float score(int doc, float freq) {\n          return Float.intBitsToFloat((int)values.get(doc)) * sub.score(doc, freq);\n        }\n        \n        @Override\n        public float computeSlopFactor(int distance) {\n          return sub.computeSlopFactor(distance);\n        }\n\n        @Override\n        public float computePayloadFactor(int doc, int start, int end, BytesRef payload) {\n          return sub.computePayloadFactor(doc, start, end, payload);\n        }\n\n        @Override\n        public Explanation explain(int doc, Explanation freq) {\n          Explanation boostExplanation = new Explanation(Float.intBitsToFloat((int)values.get(doc)), \"indexDocValue(\" + boostField + \")\");\n          Explanation simExplanation = sub.explain(doc, freq);\n          Explanation expl = new Explanation(boostExplanation.getValue() * simExplanation.getValue(), \"product of:\");\n          expl.addDetail(boostExplanation);\n          expl.addDetail(simExplanation);\n          return expl;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public SimScorer simScorer(SimWeight stats, AtomicReaderContext context) throws IOException {\n      final SimScorer sub = sim.simScorer(stats, context);\n      final FieldCache.Floats values = FieldCache.DEFAULT.getFloats(context.reader(), boostField, false);\n      \n      return new SimScorer() {\n        @Override\n        public float score(int doc, float freq) {\n          return values.get(doc) * sub.score(doc, freq);\n        }\n        \n        @Override\n        public float computeSlopFactor(int distance) {\n          return sub.computeSlopFactor(distance);\n        }\n\n        @Override\n        public float computePayloadFactor(int doc, int start, int end, BytesRef payload) {\n          return sub.computePayloadFactor(doc, start, end, payload);\n        }\n\n        @Override\n        public Explanation explain(int doc, Explanation freq) {\n          Explanation boostExplanation = new Explanation(values.get(doc), \"indexDocValue(\" + boostField + \")\");\n          Explanation simExplanation = sub.explain(doc, freq);\n          Explanation expl = new Explanation(boostExplanation.getValue() * simExplanation.getValue(), \"product of:\");\n          expl.addDetail(boostExplanation);\n          expl.addDetail(simExplanation);\n          return expl;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring.BoostingSimilarity#simScorer(SimWeight,AtomicReaderContext).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring.BoostingSimilarity#simScorer(SimWeight,AtomicReaderContext).mjava","sourceNew":"    @Override\n    public SimScorer simScorer(SimWeight stats, AtomicReaderContext context) throws IOException {\n      final SimScorer sub = sim.simScorer(stats, context);\n      final NumericDocValues values = DocValues.getNumeric(context.reader(), boostField);\n      \n      return new SimScorer() {\n        @Override\n        public float score(int doc, float freq) {\n          return Float.intBitsToFloat((int)values.get(doc)) * sub.score(doc, freq);\n        }\n        \n        @Override\n        public float computeSlopFactor(int distance) {\n          return sub.computeSlopFactor(distance);\n        }\n\n        @Override\n        public float computePayloadFactor(int doc, int start, int end, BytesRef payload) {\n          return sub.computePayloadFactor(doc, start, end, payload);\n        }\n\n        @Override\n        public Explanation explain(int doc, Explanation freq) {\n          Explanation boostExplanation = new Explanation(Float.intBitsToFloat((int)values.get(doc)), \"indexDocValue(\" + boostField + \")\");\n          Explanation simExplanation = sub.explain(doc, freq);\n          Explanation expl = new Explanation(boostExplanation.getValue() * simExplanation.getValue(), \"product of:\");\n          expl.addDetail(boostExplanation);\n          expl.addDetail(simExplanation);\n          return expl;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public SimScorer simScorer(SimWeight stats, AtomicReaderContext context) throws IOException {\n      final SimScorer sub = sim.simScorer(stats, context);\n      final FieldCache.Floats values = FieldCache.DEFAULT.getFloats(context.reader(), boostField, false);\n      \n      return new SimScorer() {\n        @Override\n        public float score(int doc, float freq) {\n          return values.get(doc) * sub.score(doc, freq);\n        }\n        \n        @Override\n        public float computeSlopFactor(int distance) {\n          return sub.computeSlopFactor(distance);\n        }\n\n        @Override\n        public float computePayloadFactor(int doc, int start, int end, BytesRef payload) {\n          return sub.computePayloadFactor(doc, start, end, payload);\n        }\n\n        @Override\n        public Explanation explain(int doc, Explanation freq) {\n          Explanation boostExplanation = new Explanation(values.get(doc), \"indexDocValue(\" + boostField + \")\");\n          Explanation simExplanation = sub.explain(doc, freq);\n          Explanation expl = new Explanation(boostExplanation.getValue() * simExplanation.getValue(), \"product of:\");\n          expl.addDetail(boostExplanation);\n          expl.addDetail(simExplanation);\n          return expl;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring.BoostingSimilarity#simScorer(SimWeight,AtomicReaderContext).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring.BoostingSimilarity#simScorer(SimWeight,AtomicReaderContext).mjava","sourceNew":"    @Override\n    public SimScorer simScorer(SimWeight stats, AtomicReaderContext context) throws IOException {\n      final SimScorer sub = sim.simScorer(stats, context);\n      final NumericDocValues values = DocValues.getNumeric(context.reader(), boostField);\n      \n      return new SimScorer() {\n        @Override\n        public float score(int doc, float freq) {\n          return Float.intBitsToFloat((int)values.get(doc)) * sub.score(doc, freq);\n        }\n        \n        @Override\n        public float computeSlopFactor(int distance) {\n          return sub.computeSlopFactor(distance);\n        }\n\n        @Override\n        public float computePayloadFactor(int doc, int start, int end, BytesRef payload) {\n          return sub.computePayloadFactor(doc, start, end, payload);\n        }\n\n        @Override\n        public Explanation explain(int doc, Explanation freq) {\n          Explanation boostExplanation = new Explanation(Float.intBitsToFloat((int)values.get(doc)), \"indexDocValue(\" + boostField + \")\");\n          Explanation simExplanation = sub.explain(doc, freq);\n          Explanation expl = new Explanation(boostExplanation.getValue() * simExplanation.getValue(), \"product of:\");\n          expl.addDetail(boostExplanation);\n          expl.addDetail(simExplanation);\n          return expl;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public SimScorer simScorer(SimWeight stats, AtomicReaderContext context) throws IOException {\n      final SimScorer sub = sim.simScorer(stats, context);\n      final FieldCache.Floats values = FieldCache.DEFAULT.getFloats(context.reader(), boostField, false);\n      \n      return new SimScorer() {\n        @Override\n        public float score(int doc, float freq) {\n          return values.get(doc) * sub.score(doc, freq);\n        }\n        \n        @Override\n        public float computeSlopFactor(int distance) {\n          return sub.computeSlopFactor(distance);\n        }\n\n        @Override\n        public float computePayloadFactor(int doc, int start, int end, BytesRef payload) {\n          return sub.computePayloadFactor(doc, start, end, payload);\n        }\n\n        @Override\n        public Explanation explain(int doc, Explanation freq) {\n          Explanation boostExplanation = new Explanation(values.get(doc), \"indexDocValue(\" + boostField + \")\");\n          Explanation simExplanation = sub.explain(doc, freq);\n          Explanation expl = new Explanation(boostExplanation.getValue() * simExplanation.getValue(), \"product of:\");\n          expl.addDetail(boostExplanation);\n          expl.addDetail(simExplanation);\n          return expl;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring.BoostingSimilarity#simScorer(SimWeight,AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"    @Override\n    public SimScorer simScorer(SimWeight stats, AtomicReaderContext context) throws IOException {\n      final SimScorer sub = sim.simScorer(stats, context);\n      final NumericDocValues values = DocValues.getNumeric(context.reader(), boostField);\n      \n      return new SimScorer() {\n        @Override\n        public float score(int doc, float freq) {\n          return Float.intBitsToFloat((int)values.get(doc)) * sub.score(doc, freq);\n        }\n        \n        @Override\n        public float computeSlopFactor(int distance) {\n          return sub.computeSlopFactor(distance);\n        }\n\n        @Override\n        public float computePayloadFactor(int doc, int start, int end, BytesRef payload) {\n          return sub.computePayloadFactor(doc, start, end, payload);\n        }\n\n        @Override\n        public Explanation explain(int doc, Explanation freq) {\n          Explanation boostExplanation = new Explanation(Float.intBitsToFloat((int)values.get(doc)), \"indexDocValue(\" + boostField + \")\");\n          Explanation simExplanation = sub.explain(doc, freq);\n          Explanation expl = new Explanation(boostExplanation.getValue() * simExplanation.getValue(), \"product of:\");\n          expl.addDetail(boostExplanation);\n          expl.addDetail(simExplanation);\n          return expl;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["b799defcfda6d303cbb180917bf1e749089adf42","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"b799defcfda6d303cbb180917bf1e749089adf42":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["b799defcfda6d303cbb180917bf1e749089adf42"],"56572ec06f1407c066d6b7399413178b33176cd8":["b799defcfda6d303cbb180917bf1e749089adf42","93dd449115a9247533e44bab47e8429e5dccbc6d"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"b799defcfda6d303cbb180917bf1e749089adf42":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b799defcfda6d303cbb180917bf1e749089adf42"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}