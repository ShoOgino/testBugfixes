{"path":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeShard(ClusterState,ZkNodeProps).mjava","commits":[{"id":"4ee5a5186e7187cd42c6f7ff64b6e7206a780325","date":1372914261,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeShard(ClusterState,ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"    /*\n     * Remove collection slice from cloudstate\n     */\n    private ClusterState removeShard(final ClusterState clusterState, ZkNodeProps message) {\n\n      final String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      final String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n\n      final Map<String, DocCollection> newCollections = new LinkedHashMap<String,DocCollection>(clusterState.getCollectionStates()); // shallow copy\n      DocCollection coll = newCollections.get(collection);\n\n      Map<String, Slice> newSlices = new LinkedHashMap<String, Slice>(coll.getSlicesMap());\n      newSlices.remove(sliceId);\n\n      DocCollection newCollection = new DocCollection(coll.getName(), newSlices, coll.getProperties(), coll.getRouter());\n      newCollections.put(newCollection.getName(), newCollection);\n\n      return new ClusterState(clusterState.getLiveNodes(), newCollections);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0b5f2c825882b5378afd6f911e0d1cd0274b7410"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeShard(ClusterState,ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"    /*\n     * Remove collection slice from cloudstate\n     */\n    private ClusterState removeShard(final ClusterState clusterState, ZkNodeProps message) {\n\n      final String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      final String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n\n      final Map<String, DocCollection> newCollections = new LinkedHashMap<String,DocCollection>(clusterState.getCollectionStates()); // shallow copy\n      DocCollection coll = newCollections.get(collection);\n\n      Map<String, Slice> newSlices = new LinkedHashMap<String, Slice>(coll.getSlicesMap());\n      newSlices.remove(sliceId);\n\n      DocCollection newCollection = new DocCollection(coll.getName(), newSlices, coll.getProperties(), coll.getRouter());\n      newCollections.put(newCollection.getName(), newCollection);\n\n      return new ClusterState(clusterState.getLiveNodes(), newCollections);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0b5f2c825882b5378afd6f911e0d1cd0274b7410","date":1378970050,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeShard(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeShard(ClusterState,ZkNodeProps).mjava","sourceNew":"    /*\n     * Remove collection slice from cloudstate\n     */\n    private ClusterState removeShard(final ClusterState clusterState, ZkNodeProps message) {\n      final String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      final String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n\n      log.info(\"Removing collection: \" + collection + \" shard: \" + sliceId + \" from clusterstate\");\n\n      final Map<String, DocCollection> newCollections = new LinkedHashMap<String,DocCollection>(clusterState.getCollectionStates()); // shallow copy\n      DocCollection coll = newCollections.get(collection);\n\n      Map<String, Slice> newSlices = new LinkedHashMap<String, Slice>(coll.getSlicesMap());\n      newSlices.remove(sliceId);\n\n      DocCollection newCollection = new DocCollection(coll.getName(), newSlices, coll.getProperties(), coll.getRouter());\n      newCollections.put(newCollection.getName(), newCollection);\n\n      return new ClusterState(clusterState.getLiveNodes(), newCollections);\n    }\n\n","sourceOld":"    /*\n     * Remove collection slice from cloudstate\n     */\n    private ClusterState removeShard(final ClusterState clusterState, ZkNodeProps message) {\n\n      final String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      final String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n\n      final Map<String, DocCollection> newCollections = new LinkedHashMap<String,DocCollection>(clusterState.getCollectionStates()); // shallow copy\n      DocCollection coll = newCollections.get(collection);\n\n      Map<String, Slice> newSlices = new LinkedHashMap<String, Slice>(coll.getSlicesMap());\n      newSlices.remove(sliceId);\n\n      DocCollection newCollection = new DocCollection(coll.getName(), newSlices, coll.getProperties(), coll.getRouter());\n      newCollections.put(newCollection.getName(), newCollection);\n\n      return new ClusterState(clusterState.getLiveNodes(), newCollections);\n    }\n\n","bugFix":["4ee5a5186e7187cd42c6f7ff64b6e7206a780325"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce7cfca1a733d2ed1f7089b339faf006bdcc7b70","date":1386334715,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeShard(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeShard(ClusterState,ZkNodeProps).mjava","sourceNew":"    /*\n     * Remove collection slice from cloudstate\n     */\n    private ClusterState removeShard(final ClusterState clusterState, ZkNodeProps message) {\n      final String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      final String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n\n      log.info(\"Removing collection: \" + collection + \" shard: \" + sliceId + \" from clusterstate\");\n\n//      final Map<String, DocCollection> newCollections = new LinkedHashMap<String,DocCollection>(clusterState.getCollectionStates()); // shallow copy\n      DocCollection coll = clusterState.getCollection(collection);\n\n      Map<String, Slice> newSlices = new LinkedHashMap<String, Slice>(coll.getSlicesMap());\n      newSlices.remove(sliceId);\n\n      DocCollection newCollection = new DocCollection(coll.getName(), newSlices, coll.getProperties(), coll.getRouter());\n//      newCollections.put(newCollection.getName(), newCollection);\n      return newState(clusterState, singletonMap(collection,newCollection));\n\n//     return new ClusterState(clusterState.getLiveNodes(), newCollections);\n    }\n\n","sourceOld":"    /*\n     * Remove collection slice from cloudstate\n     */\n    private ClusterState removeShard(final ClusterState clusterState, ZkNodeProps message) {\n      final String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      final String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n\n      log.info(\"Removing collection: \" + collection + \" shard: \" + sliceId + \" from clusterstate\");\n\n      final Map<String, DocCollection> newCollections = new LinkedHashMap<String,DocCollection>(clusterState.getCollectionStates()); // shallow copy\n      DocCollection coll = newCollections.get(collection);\n\n      Map<String, Slice> newSlices = new LinkedHashMap<String, Slice>(coll.getSlicesMap());\n      newSlices.remove(sliceId);\n\n      DocCollection newCollection = new DocCollection(coll.getName(), newSlices, coll.getProperties(), coll.getRouter());\n      newCollections.put(newCollection.getName(), newCollection);\n\n      return new ClusterState(clusterState.getLiveNodes(), newCollections);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeShard(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeShard(ClusterState,ZkNodeProps).mjava","sourceNew":"    /*\n     * Remove collection slice from cloudstate\n     */\n    private ClusterState removeShard(final ClusterState clusterState, ZkNodeProps message) {\n      final String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      final String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n\n      log.info(\"Removing collection: \" + collection + \" shard: \" + sliceId + \" from clusterstate\");\n\n//      final Map<String, DocCollection> newCollections = new LinkedHashMap<String,DocCollection>(clusterState.getCollectionStates()); // shallow copy\n      DocCollection coll = clusterState.getCollection(collection);\n\n      Map<String, Slice> newSlices = new LinkedHashMap<String, Slice>(coll.getSlicesMap());\n      newSlices.remove(sliceId);\n\n      DocCollection newCollection = new DocCollection(coll.getName(), newSlices, coll.getProperties(), coll.getRouter());\n//      newCollections.put(newCollection.getName(), newCollection);\n      return newState(clusterState, singletonMap(collection,newCollection));\n\n//     return new ClusterState(clusterState.getLiveNodes(), newCollections);\n    }\n\n","sourceOld":"    /*\n     * Remove collection slice from cloudstate\n     */\n    private ClusterState removeShard(final ClusterState clusterState, ZkNodeProps message) {\n      final String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      final String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n\n      log.info(\"Removing collection: \" + collection + \" shard: \" + sliceId + \" from clusterstate\");\n\n      final Map<String, DocCollection> newCollections = new LinkedHashMap<String,DocCollection>(clusterState.getCollectionStates()); // shallow copy\n      DocCollection coll = newCollections.get(collection);\n\n      Map<String, Slice> newSlices = new LinkedHashMap<String, Slice>(coll.getSlicesMap());\n      newSlices.remove(sliceId);\n\n      DocCollection newCollection = new DocCollection(coll.getName(), newSlices, coll.getProperties(), coll.getRouter());\n      newCollections.put(newCollection.getName(), newCollection);\n\n      return new ClusterState(clusterState.getLiveNodes(), newCollections);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29f5eaf296600e1665151e7929d42a3cbe22e481","date":1393983215,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeShard(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeShard(ClusterState,ZkNodeProps).mjava","sourceNew":"    /*\n     * Remove collection slice from cloudstate\n     */\n    private ClusterState removeShard(final ClusterState clusterState, ZkNodeProps message) {\n      final String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      checkCollection(message, collection);\n      final String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n\n      log.info(\"Removing collection: \" + collection + \" shard: \" + sliceId + \" from clusterstate\");\n\n//      final Map<String, DocCollection> newCollections = new LinkedHashMap<String,DocCollection>(clusterState.getCollectionStates()); // shallow copy\n      DocCollection coll = clusterState.getCollection(collection);\n\n      Map<String, Slice> newSlices = new LinkedHashMap<String, Slice>(coll.getSlicesMap());\n      newSlices.remove(sliceId);\n\n      DocCollection newCollection = new DocCollection(coll.getName(), newSlices, coll.getProperties(), coll.getRouter());\n//      newCollections.put(newCollection.getName(), newCollection);\n      return newState(clusterState, singletonMap(collection,newCollection));\n\n//     return new ClusterState(clusterState.getLiveNodes(), newCollections);\n    }\n\n","sourceOld":"    /*\n     * Remove collection slice from cloudstate\n     */\n    private ClusterState removeShard(final ClusterState clusterState, ZkNodeProps message) {\n      final String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      final String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n\n      log.info(\"Removing collection: \" + collection + \" shard: \" + sliceId + \" from clusterstate\");\n\n//      final Map<String, DocCollection> newCollections = new LinkedHashMap<String,DocCollection>(clusterState.getCollectionStates()); // shallow copy\n      DocCollection coll = clusterState.getCollection(collection);\n\n      Map<String, Slice> newSlices = new LinkedHashMap<String, Slice>(coll.getSlicesMap());\n      newSlices.remove(sliceId);\n\n      DocCollection newCollection = new DocCollection(coll.getName(), newSlices, coll.getProperties(), coll.getRouter());\n//      newCollections.put(newCollection.getName(), newCollection);\n      return newState(clusterState, singletonMap(collection,newCollection));\n\n//     return new ClusterState(clusterState.getLiveNodes(), newCollections);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6df412542f3e2161f4bc2b13357b4a973195bfb7","date":1394040511,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeShard(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeShard(ClusterState,ZkNodeProps).mjava","sourceNew":"    /*\n     * Remove collection slice from cloudstate\n     */\n    private ClusterState removeShard(final ClusterState clusterState, ZkNodeProps message) {\n      final String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      final String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      if (!checkCollectionKeyExistence(message)) return clusterState;\n\n      log.info(\"Removing collection: \" + collection + \" shard: \" + sliceId + \" from clusterstate\");\n\n      DocCollection coll = clusterState.getCollection(collection);\n\n      Map<String, Slice> newSlices = new LinkedHashMap<String, Slice>(coll.getSlicesMap());\n      newSlices.remove(sliceId);\n\n      DocCollection newCollection = new DocCollection(coll.getName(), newSlices, coll.getProperties(), coll.getRouter());\n      return newState(clusterState, singletonMap(collection,newCollection));\n    }\n\n","sourceOld":"    /*\n     * Remove collection slice from cloudstate\n     */\n    private ClusterState removeShard(final ClusterState clusterState, ZkNodeProps message) {\n      final String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      checkCollection(message, collection);\n      final String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n\n      log.info(\"Removing collection: \" + collection + \" shard: \" + sliceId + \" from clusterstate\");\n\n//      final Map<String, DocCollection> newCollections = new LinkedHashMap<String,DocCollection>(clusterState.getCollectionStates()); // shallow copy\n      DocCollection coll = clusterState.getCollection(collection);\n\n      Map<String, Slice> newSlices = new LinkedHashMap<String, Slice>(coll.getSlicesMap());\n      newSlices.remove(sliceId);\n\n      DocCollection newCollection = new DocCollection(coll.getName(), newSlices, coll.getProperties(), coll.getRouter());\n//      newCollections.put(newCollection.getName(), newCollection);\n      return newState(clusterState, singletonMap(collection,newCollection));\n\n//     return new ClusterState(clusterState.getLiveNodes(), newCollections);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeShard(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeShard(ClusterState,ZkNodeProps).mjava","sourceNew":"    /*\n     * Remove collection slice from cloudstate\n     */\n    private ClusterState removeShard(final ClusterState clusterState, ZkNodeProps message) {\n      final String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      final String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      if (!checkCollectionKeyExistence(message)) return clusterState;\n\n      log.info(\"Removing collection: \" + collection + \" shard: \" + sliceId + \" from clusterstate\");\n\n      DocCollection coll = clusterState.getCollection(collection);\n\n      Map<String, Slice> newSlices = new LinkedHashMap<String, Slice>(coll.getSlicesMap());\n      newSlices.remove(sliceId);\n\n      DocCollection newCollection = new DocCollection(coll.getName(), newSlices, coll.getProperties(), coll.getRouter());\n      return newState(clusterState, singletonMap(collection,newCollection));\n    }\n\n","sourceOld":"    /*\n     * Remove collection slice from cloudstate\n     */\n    private ClusterState removeShard(final ClusterState clusterState, ZkNodeProps message) {\n      final String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      final String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n\n      log.info(\"Removing collection: \" + collection + \" shard: \" + sliceId + \" from clusterstate\");\n\n//      final Map<String, DocCollection> newCollections = new LinkedHashMap<String,DocCollection>(clusterState.getCollectionStates()); // shallow copy\n      DocCollection coll = clusterState.getCollection(collection);\n\n      Map<String, Slice> newSlices = new LinkedHashMap<String, Slice>(coll.getSlicesMap());\n      newSlices.remove(sliceId);\n\n      DocCollection newCollection = new DocCollection(coll.getName(), newSlices, coll.getProperties(), coll.getRouter());\n//      newCollections.put(newCollection.getName(), newCollection);\n      return newState(clusterState, singletonMap(collection,newCollection));\n\n//     return new ClusterState(clusterState.getLiveNodes(), newCollections);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeShard(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeShard(ClusterState,ZkNodeProps).mjava","sourceNew":"    /*\n     * Remove collection slice from cloudstate\n     */\n    private ClusterState removeShard(final ClusterState clusterState, ZkNodeProps message) {\n      final String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      final String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      if (!checkCollectionKeyExistence(message)) return clusterState;\n\n      log.info(\"Removing collection: \" + collection + \" shard: \" + sliceId + \" from clusterstate\");\n\n      DocCollection coll = clusterState.getCollection(collection);\n\n      Map<String, Slice> newSlices = new LinkedHashMap<>(coll.getSlicesMap());\n      newSlices.remove(sliceId);\n\n      DocCollection newCollection = new DocCollection(coll.getName(), newSlices, coll.getProperties(), coll.getRouter());\n      return newState(clusterState, singletonMap(collection,newCollection));\n    }\n\n","sourceOld":"    /*\n     * Remove collection slice from cloudstate\n     */\n    private ClusterState removeShard(final ClusterState clusterState, ZkNodeProps message) {\n      final String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      final String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      if (!checkCollectionKeyExistence(message)) return clusterState;\n\n      log.info(\"Removing collection: \" + collection + \" shard: \" + sliceId + \" from clusterstate\");\n\n      DocCollection coll = clusterState.getCollection(collection);\n\n      Map<String, Slice> newSlices = new LinkedHashMap<String, Slice>(coll.getSlicesMap());\n      newSlices.remove(sliceId);\n\n      DocCollection newCollection = new DocCollection(coll.getName(), newSlices, coll.getProperties(), coll.getRouter());\n      return newState(clusterState, singletonMap(collection,newCollection));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6f693ed86f289b2e42b46684409b3997f2c264a","date":1404319832,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeShard(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeShard(ClusterState,ZkNodeProps).mjava","sourceNew":"    /*\n     * Remove collection slice from cloudstate\n     */\n    private ClusterState removeShard(final ClusterState clusterState, ZkNodeProps message) {\n      final String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      final String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      if (!checkCollectionKeyExistence(message)) return clusterState;\n\n      log.info(\"Removing collection: \" + collection + \" shard: \" + sliceId + \" from clusterstate\");\n\n      DocCollection coll = clusterState.getCollection(collection);\n\n      Map<String, Slice> newSlices = new LinkedHashMap<>(coll.getSlicesMap());\n      newSlices.remove(sliceId);\n\n      DocCollection newCollection = coll.copyWith(newSlices);\n      return newState(clusterState, singletonMap(collection,newCollection));\n    }\n\n","sourceOld":"    /*\n     * Remove collection slice from cloudstate\n     */\n    private ClusterState removeShard(final ClusterState clusterState, ZkNodeProps message) {\n      final String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      final String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      if (!checkCollectionKeyExistence(message)) return clusterState;\n\n      log.info(\"Removing collection: \" + collection + \" shard: \" + sliceId + \" from clusterstate\");\n\n      DocCollection coll = clusterState.getCollection(collection);\n\n      Map<String, Slice> newSlices = new LinkedHashMap<>(coll.getSlicesMap());\n      newSlices.remove(sliceId);\n\n      DocCollection newCollection = new DocCollection(coll.getName(), newSlices, coll.getProperties(), coll.getRouter());\n      return newState(clusterState, singletonMap(collection,newCollection));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c07fa58a256dccf8b95364855fd5e9ad4d1401","date":1404386015,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeShard(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeShard(ClusterState,ZkNodeProps).mjava","sourceNew":"    /*\n     * Remove collection slice from cloudstate\n     */\n    private ClusterState removeShard(final ClusterState clusterState, ZkNodeProps message) {\n      final String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      final String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      if (!checkCollectionKeyExistence(message)) return clusterState;\n\n      log.info(\"Removing collection: \" + collection + \" shard: \" + sliceId + \" from clusterstate\");\n\n      DocCollection coll = clusterState.getCollection(collection);\n\n      Map<String, Slice> newSlices = new LinkedHashMap<>(coll.getSlicesMap());\n      newSlices.remove(sliceId);\n\n      DocCollection newCollection = new DocCollection(coll.getName(), newSlices, coll.getProperties(), coll.getRouter());\n      return newState(clusterState, singletonMap(collection,newCollection));\n    }\n\n","sourceOld":"    /*\n     * Remove collection slice from cloudstate\n     */\n    private ClusterState removeShard(final ClusterState clusterState, ZkNodeProps message) {\n      final String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      final String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      if (!checkCollectionKeyExistence(message)) return clusterState;\n\n      log.info(\"Removing collection: \" + collection + \" shard: \" + sliceId + \" from clusterstate\");\n\n      DocCollection coll = clusterState.getCollection(collection);\n\n      Map<String, Slice> newSlices = new LinkedHashMap<>(coll.getSlicesMap());\n      newSlices.remove(sliceId);\n\n      DocCollection newCollection = coll.copyWith(newSlices);\n      return newState(clusterState, singletonMap(collection,newCollection));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279b175e5e66258442d2123a50f052219a9cc1b","date":1410531077,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeShard(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeShard(ClusterState,ZkNodeProps).mjava","sourceNew":"    /*\n     * Remove collection slice from cloudstate\n     */\n    private ClusterState removeShard(final ClusterState clusterState, ZkNodeProps message) {\n      final String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      final String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      if (!checkCollectionKeyExistence(message)) return clusterState;\n\n      log.info(\"Removing collection: \" + collection + \" shard: \" + sliceId + \" from clusterstate\");\n\n      DocCollection coll = clusterState.getCollection(collection);\n\n      Map<String, Slice> newSlices = new LinkedHashMap<>(coll.getSlicesMap());\n      newSlices.remove(sliceId);\n\n      DocCollection newCollection = coll.copyWithSlices(newSlices);\n      return newState(clusterState, singletonMap(collection,newCollection));\n    }\n\n","sourceOld":"    /*\n     * Remove collection slice from cloudstate\n     */\n    private ClusterState removeShard(final ClusterState clusterState, ZkNodeProps message) {\n      final String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      final String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      if (!checkCollectionKeyExistence(message)) return clusterState;\n\n      log.info(\"Removing collection: \" + collection + \" shard: \" + sliceId + \" from clusterstate\");\n\n      DocCollection coll = clusterState.getCollection(collection);\n\n      Map<String, Slice> newSlices = new LinkedHashMap<>(coll.getSlicesMap());\n      newSlices.remove(sliceId);\n\n      DocCollection newCollection = new DocCollection(coll.getName(), newSlices, coll.getProperties(), coll.getRouter());\n      return newState(clusterState, singletonMap(collection,newCollection));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfb6f3c8c119796b6a4ca83753599e3064b65305","date":1416760830,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeShard(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeShard(ClusterState,ZkNodeProps).mjava","sourceNew":"    /*\n     * Remove collection slice from cloudstate\n     */\n    private ClusterState removeShard(final ClusterState clusterState, ZkNodeProps message) {\n      final String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      final String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      if (!checkCollectionKeyExistence(message)) return clusterState;\n\n      log.info(\"Removing collection: {}, shard: {} from cluster state\", collection, sliceId);\n\n      DocCollection coll = clusterState.getCollection(collection);\n\n      Map<String, Slice> newSlices = new LinkedHashMap<>(coll.getSlicesMap());\n      newSlices.remove(sliceId);\n\n      DocCollection newCollection = coll.copyWithSlices(newSlices);\n      return newState(clusterState, singletonMap(collection,newCollection));\n    }\n\n","sourceOld":"    /*\n     * Remove collection slice from cloudstate\n     */\n    private ClusterState removeShard(final ClusterState clusterState, ZkNodeProps message) {\n      final String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      final String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      if (!checkCollectionKeyExistence(message)) return clusterState;\n\n      log.info(\"Removing collection: \" + collection + \" shard: \" + sliceId + \" from clusterstate\");\n\n      DocCollection coll = clusterState.getCollection(collection);\n\n      Map<String, Slice> newSlices = new LinkedHashMap<>(coll.getSlicesMap());\n      newSlices.remove(sliceId);\n\n      DocCollection newCollection = coll.copyWithSlices(newSlices);\n      return newState(clusterState, singletonMap(collection,newCollection));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24a5da2a0d397ff29f3de8f6cf451d3412c2509a","date":1417276391,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeShard(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeShard(ClusterState,ZkNodeProps).mjava","sourceNew":"    /*\n     * Remove collection slice from cloudstate\n     */\n    private ZkWriteCommand removeShard(final ClusterState clusterState, ZkNodeProps message) {\n      return new CollectionMutator(getZkStateReader()).deleteShard(clusterState, message);\n    }\n\n","sourceOld":"    /*\n     * Remove collection slice from cloudstate\n     */\n    private ClusterState removeShard(final ClusterState clusterState, ZkNodeProps message) {\n      final String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      final String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      if (!checkCollectionKeyExistence(message)) return clusterState;\n\n      log.info(\"Removing collection: {}, shard: {} from cluster state\", collection, sliceId);\n\n      DocCollection coll = clusterState.getCollection(collection);\n\n      Map<String, Slice> newSlices = new LinkedHashMap<>(coll.getSlicesMap());\n      newSlices.remove(sliceId);\n\n      DocCollection newCollection = coll.copyWithSlices(newSlices);\n      return newState(clusterState, singletonMap(collection,newCollection));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03f6fef27e0d27edc875c720e6ce5db17480a562","date":1417277285,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeShard(ClusterState,ZkNodeProps).mjava","sourceNew":null,"sourceOld":"    /*\n     * Remove collection slice from cloudstate\n     */\n    private ZkWriteCommand removeShard(final ClusterState clusterState, ZkNodeProps message) {\n      return new CollectionMutator(getZkStateReader()).deleteShard(clusterState, message);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6df412542f3e2161f4bc2b13357b4a973195bfb7"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":["ce7cfca1a733d2ed1f7089b339faf006bdcc7b70","6df412542f3e2161f4bc2b13357b4a973195bfb7"],"ce7cfca1a733d2ed1f7089b339faf006bdcc7b70":["0b5f2c825882b5378afd6f911e0d1cd0274b7410"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ee5a5186e7187cd42c6f7ff64b6e7206a780325"],"bfb6f3c8c119796b6a4ca83753599e3064b65305":["9279b175e5e66258442d2123a50f052219a9cc1b"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"0b5f2c825882b5378afd6f911e0d1cd0274b7410":["4ee5a5186e7187cd42c6f7ff64b6e7206a780325"],"9279b175e5e66258442d2123a50f052219a9cc1b":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"29f5eaf296600e1665151e7929d42a3cbe22e481":["ce7cfca1a733d2ed1f7089b339faf006bdcc7b70"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["bfb6f3c8c119796b6a4ca83753599e3064b65305"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"03f6fef27e0d27edc875c720e6ce5db17480a562":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6df412542f3e2161f4bc2b13357b4a973195bfb7":["29f5eaf296600e1665151e7929d42a3cbe22e481"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["0b5f2c825882b5378afd6f911e0d1cd0274b7410","ce7cfca1a733d2ed1f7089b339faf006bdcc7b70"],"4ee5a5186e7187cd42c6f7ff64b6e7206a780325":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03f6fef27e0d27edc875c720e6ce5db17480a562"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"ce7cfca1a733d2ed1f7089b339faf006bdcc7b70":["96ea64d994d340044e0d57aeb6a5871539d10ca5","29f5eaf296600e1665151e7929d42a3cbe22e481","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"bfb6f3c8c119796b6a4ca83753599e3064b65305":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["9279b175e5e66258442d2123a50f052219a9cc1b"],"0b5f2c825882b5378afd6f911e0d1cd0274b7410":["ce7cfca1a733d2ed1f7089b339faf006bdcc7b70","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"9279b175e5e66258442d2123a50f052219a9cc1b":["bfb6f3c8c119796b6a4ca83753599e3064b65305"],"29f5eaf296600e1665151e7929d42a3cbe22e481":["6df412542f3e2161f4bc2b13357b4a973195bfb7"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["03f6fef27e0d27edc875c720e6ce5db17480a562"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"03f6fef27e0d27edc875c720e6ce5db17480a562":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","4ee5a5186e7187cd42c6f7ff64b6e7206a780325"],"6df412542f3e2161f4bc2b13357b4a973195bfb7":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","96ea64d994d340044e0d57aeb6a5871539d10ca5"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"4ee5a5186e7187cd42c6f7ff64b6e7206a780325":["37a0f60745e53927c4c876cfe5b5a58170f0646c","0b5f2c825882b5378afd6f911e0d1cd0274b7410"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96ea64d994d340044e0d57aeb6a5871539d10ca5","37a0f60745e53927c4c876cfe5b5a58170f0646c","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}