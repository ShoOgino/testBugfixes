{"path":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsWriter.TermsWriter.FindBlocks#freeze(Builder.UnCompiledNode[Object][],int,IntsRef).mjava","commits":[{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsWriter.TermsWriter.FindBlocks#freeze(Builder.UnCompiledNode[Object][],int,IntsRef).mjava","pathOld":"/dev/null","sourceNew":"      @Override\n      public void freeze(final Builder.UnCompiledNode<Object>[] frontier, int prefixLenPlus1, final IntsRef lastInput) throws IOException {\n\n        //if (DEBUG) System.out.println(\"  freeze prefixLenPlus1=\" + prefixLenPlus1);\n\n        for(int idx=lastInput.length; idx >= prefixLenPlus1; idx--) {\n          final Builder.UnCompiledNode<Object> node = frontier[idx];\n\n          long totCount = 0;\n\n          if (node.isFinal) {\n            totCount++;\n          }\n\n          for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n            @SuppressWarnings(\"unchecked\") final Builder.UnCompiledNode<Object> target = (Builder.UnCompiledNode<Object>) node.arcs[arcIdx].target;\n            totCount += target.inputCount;\n            target.clear();\n            node.arcs[arcIdx].target = null;\n          }\n          node.numArcs = 0;\n\n          if (totCount >= minItemsInBlock || idx == 0) {\n            // We are on a prefix node that has enough\n            // entries (terms or sub-blocks) under it to let\n            // us write a new block or multiple blocks (main\n            // block + follow on floor blocks):\n            //if (DEBUG) {\n            //  if (totCount < minItemsInBlock && idx != 0) {\n            //    System.out.println(\"  force block has terms\");\n            //  }\n            //}\n            writeBlocks(lastInput, idx, (int) totCount);\n            node.inputCount = 1;\n          } else {\n            // stragglers!  carry count upwards\n            node.inputCount = totCount;\n          }\n          frontier[idx] = new Builder.UnCompiledNode<Object>(blockBuilder, idx);\n        }\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter.FindBlocks#freeze(Builder.UnCompiledNode[Object][],int,IntsRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsWriter.TermsWriter.FindBlocks#freeze(Builder.UnCompiledNode[Object][],int,IntsRef).mjava","sourceNew":"      @Override\n      public void freeze(final Builder.UnCompiledNode<Object>[] frontier, int prefixLenPlus1, final IntsRef lastInput) throws IOException {\n\n        //if (DEBUG) System.out.println(\"  freeze prefixLenPlus1=\" + prefixLenPlus1);\n\n        for(int idx=lastInput.length; idx >= prefixLenPlus1; idx--) {\n          final Builder.UnCompiledNode<Object> node = frontier[idx];\n\n          long totCount = 0;\n\n          if (node.isFinal) {\n            totCount++;\n          }\n\n          for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n            @SuppressWarnings(\"unchecked\") final Builder.UnCompiledNode<Object> target = (Builder.UnCompiledNode<Object>) node.arcs[arcIdx].target;\n            totCount += target.inputCount;\n            target.clear();\n            node.arcs[arcIdx].target = null;\n          }\n          node.numArcs = 0;\n\n          if (totCount >= minItemsInBlock || idx == 0) {\n            // We are on a prefix node that has enough\n            // entries (terms or sub-blocks) under it to let\n            // us write a new block or multiple blocks (main\n            // block + follow on floor blocks):\n            //if (DEBUG) {\n            //  if (totCount < minItemsInBlock && idx != 0) {\n            //    System.out.println(\"  force block has terms\");\n            //  }\n            //}\n            writeBlocks(lastInput, idx, (int) totCount);\n            node.inputCount = 1;\n          } else {\n            // stragglers!  carry count upwards\n            node.inputCount = totCount;\n          }\n          frontier[idx] = new Builder.UnCompiledNode<Object>(blockBuilder, idx);\n        }\n      }\n\n","sourceOld":"      @Override\n      public void freeze(final Builder.UnCompiledNode<Object>[] frontier, int prefixLenPlus1, final IntsRef lastInput) throws IOException {\n\n        //if (DEBUG) System.out.println(\"  freeze prefixLenPlus1=\" + prefixLenPlus1);\n\n        for(int idx=lastInput.length; idx >= prefixLenPlus1; idx--) {\n          final Builder.UnCompiledNode<Object> node = frontier[idx];\n\n          long totCount = 0;\n\n          if (node.isFinal) {\n            totCount++;\n          }\n\n          for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n            @SuppressWarnings(\"unchecked\") final Builder.UnCompiledNode<Object> target = (Builder.UnCompiledNode<Object>) node.arcs[arcIdx].target;\n            totCount += target.inputCount;\n            target.clear();\n            node.arcs[arcIdx].target = null;\n          }\n          node.numArcs = 0;\n\n          if (totCount >= minItemsInBlock || idx == 0) {\n            // We are on a prefix node that has enough\n            // entries (terms or sub-blocks) under it to let\n            // us write a new block or multiple blocks (main\n            // block + follow on floor blocks):\n            //if (DEBUG) {\n            //  if (totCount < minItemsInBlock && idx != 0) {\n            //    System.out.println(\"  force block has terms\");\n            //  }\n            //}\n            writeBlocks(lastInput, idx, (int) totCount);\n            node.inputCount = 1;\n          } else {\n            // stragglers!  carry count upwards\n            node.inputCount = totCount;\n          }\n          frontier[idx] = new Builder.UnCompiledNode<Object>(blockBuilder, idx);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}