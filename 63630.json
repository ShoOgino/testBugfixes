{"path":"solr/core/src/java/org/apache/solr/cloud/overseer/ZkStateWriter#maybeFlushBefore(ZkWriteCommand).mjava","commits":[{"id":"584c1ee8712b5af28075d98028ccab111d6eeda2","date":1417444624,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ZkStateWriter#maybeFlushBefore(ZkWriteCommand).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Logic to decide a flush before processing a ZkWriteCommand\n   *\n   * @param cmd the ZkWriteCommand instance\n   * @return true if a flush is required, false otherwise\n   */\n  protected boolean maybeFlushBefore(ZkWriteCommand cmd) {\n    if (lastUpdatedTime == 0) {\n      // first update, make sure we go through\n      return false;\n    }\n    if (cmd.collection == null) {\n      return false;\n    }\n    if (cmd.collection.getStateFormat() != lastStateFormat) {\n      return true;\n    }\n    return cmd.collection.getStateFormat() > 1 && !cmd.name.equals(lastCollectionName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a805d491a97c1b3c7c5ec8285930649472d0fd10","date":1494235279,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ZkStateWriter#maybeFlushBefore(ZkWriteCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ZkStateWriter#maybeFlushBefore(ZkWriteCommand).mjava","sourceNew":"  /**\n   * Logic to decide a flush before processing a ZkWriteCommand\n   *\n   * @param cmd the ZkWriteCommand instance\n   * @return true if a flush is required, false otherwise\n   */\n  protected boolean maybeFlushBefore(ZkWriteCommand cmd) {\n    return cmd.collection.getStateFormat() != lastStateFormat;\n  }\n\n","sourceOld":"  /**\n   * Logic to decide a flush before processing a ZkWriteCommand\n   *\n   * @param cmd the ZkWriteCommand instance\n   * @return true if a flush is required, false otherwise\n   */\n  protected boolean maybeFlushBefore(ZkWriteCommand cmd) {\n    if (lastUpdatedTime == 0) {\n      // first update, make sure we go through\n      return false;\n    }\n    if (cmd.collection == null) {\n      return false;\n    }\n    if (cmd.collection.getStateFormat() != lastStateFormat) {\n      return true;\n    }\n    return cmd.collection.getStateFormat() > 1 && !cmd.name.equals(lastCollectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7bc3c275fcd06c02bce73db4d2dc4ba1f3c89e44","date":1494290035,"type":3,"author":"Scott Blum","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ZkStateWriter#maybeFlushBefore(ZkWriteCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ZkStateWriter#maybeFlushBefore(ZkWriteCommand).mjava","sourceNew":"  /**\n   * Logic to decide a flush before processing a ZkWriteCommand\n   *\n   * @param cmd the ZkWriteCommand instance\n   * @return true if a flush is required, false otherwise\n   */\n  protected boolean maybeFlushBefore(ZkWriteCommand cmd) {\n    if (cmd.collection == null || lastStateFormat <= 0) {\n      return false;\n    }\n    return cmd.collection.getStateFormat() != lastStateFormat;\n  }\n\n","sourceOld":"  /**\n   * Logic to decide a flush before processing a ZkWriteCommand\n   *\n   * @param cmd the ZkWriteCommand instance\n   * @return true if a flush is required, false otherwise\n   */\n  protected boolean maybeFlushBefore(ZkWriteCommand cmd) {\n    return cmd.collection.getStateFormat() != lastStateFormat;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ZkStateWriter#maybeFlushBefore(ZkWriteCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ZkStateWriter#maybeFlushBefore(ZkWriteCommand).mjava","sourceNew":"  /**\n   * Logic to decide a flush before processing a ZkWriteCommand\n   *\n   * @param cmd the ZkWriteCommand instance\n   * @return true if a flush is required, false otherwise\n   */\n  protected boolean maybeFlushBefore(ZkWriteCommand cmd) {\n    if (cmd.collection == null || lastStateFormat <= 0) {\n      return false;\n    }\n    return cmd.collection.getStateFormat() != lastStateFormat;\n  }\n\n","sourceOld":"  /**\n   * Logic to decide a flush before processing a ZkWriteCommand\n   *\n   * @param cmd the ZkWriteCommand instance\n   * @return true if a flush is required, false otherwise\n   */\n  protected boolean maybeFlushBefore(ZkWriteCommand cmd) {\n    if (lastUpdatedTime == 0) {\n      // first update, make sure we go through\n      return false;\n    }\n    if (cmd.collection == null) {\n      return false;\n    }\n    if (cmd.collection.getStateFormat() != lastStateFormat) {\n      return true;\n    }\n    return cmd.collection.getStateFormat() > 1 && !cmd.name.equals(lastCollectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e42079c4c34cc1868518eff79f79ebaeb6d1965","date":1507883024,"type":4,"author":"Cao Manh Dat","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ZkStateWriter#maybeFlushBefore(ZkWriteCommand).mjava","sourceNew":null,"sourceOld":"  /**\n   * Logic to decide a flush before processing a ZkWriteCommand\n   *\n   * @param cmd the ZkWriteCommand instance\n   * @return true if a flush is required, false otherwise\n   */\n  protected boolean maybeFlushBefore(ZkWriteCommand cmd) {\n    if (cmd.collection == null || lastStateFormat <= 0) {\n      return false;\n    }\n    return cmd.collection.getStateFormat() != lastStateFormat;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["584c1ee8712b5af28075d98028ccab111d6eeda2","7bc3c275fcd06c02bce73db4d2dc4ba1f3c89e44"],"4e42079c4c34cc1868518eff79f79ebaeb6d1965":["7bc3c275fcd06c02bce73db4d2dc4ba1f3c89e44"],"a805d491a97c1b3c7c5ec8285930649472d0fd10":["584c1ee8712b5af28075d98028ccab111d6eeda2"],"584c1ee8712b5af28075d98028ccab111d6eeda2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7bc3c275fcd06c02bce73db4d2dc4ba1f3c89e44":["a805d491a97c1b3c7c5ec8285930649472d0fd10"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4e42079c4c34cc1868518eff79f79ebaeb6d1965"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"4e42079c4c34cc1868518eff79f79ebaeb6d1965":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a805d491a97c1b3c7c5ec8285930649472d0fd10":["7bc3c275fcd06c02bce73db4d2dc4ba1f3c89e44"],"584c1ee8712b5af28075d98028ccab111d6eeda2":["e9017cf144952056066919f1ebc7897ff9bd71b1","a805d491a97c1b3c7c5ec8285930649472d0fd10"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["584c1ee8712b5af28075d98028ccab111d6eeda2"],"7bc3c275fcd06c02bce73db4d2dc4ba1f3c89e44":["e9017cf144952056066919f1ebc7897ff9bd71b1","4e42079c4c34cc1868518eff79f79ebaeb6d1965"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}