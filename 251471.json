{"path":"solr/core/src/java/org/apache/solr/core/RequestParams#getMapAndVersion(SolrResourceLoader,String).mjava","commits":[{"id":"c2d72c3e6563e08675f940d4c74139309c5e3db2","date":1419411068,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestParams#getMapAndVersion(SolrResourceLoader,String).mjava","pathOld":"/dev/null","sourceNew":"  private static  Object[] getMapAndVersion(SolrResourceLoader loader, String name) {\n    InputStream in = null;\n    try {\n      in = loader.openResource(name);\n    } catch (IOException e) {\n      //no problem no overlay.json file\n      return new Object[]{Collections.EMPTY_MAP, -1};\n    }\n\n    try {\n      int version = 0; //will be always 0 for file based resourceloader\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.info( \"conf resource {} loaded . version : {} \", name,version);\n      }\n      Map m = (Map) ObjectBuilder.getVal(new JSONParser(new InputStreamReader(in, StandardCharsets.UTF_8)));\n      return new Object[]{m,version};\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error reading conf resource \"+name,e);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ad8bc2fca706055f5c66e05eaf3d598cfb135a9b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"32c9c18cfc3e7e9def0f70c28af0d6b5bfd02320","date":1419447031,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestParams#getMapAndVersion(SolrResourceLoader,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RequestParams#getMapAndVersion(SolrResourceLoader,String).mjava","sourceNew":"  private static  Object[] getMapAndVersion(SolrResourceLoader loader, String name) {\n    InputStream in = null;\n    try {\n      in = loader.openResource(name);\n    } catch (IOException e) {\n      //no problem no overlay.json file\n      return new Object[]{Collections.EMPTY_MAP, -1};\n    }\n\n      int version = 0; //will be always 0 for file based resourceloader\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.info( \"conf resource {} loaded . version : {} \", name,version);\n      }\n\n    try {\n      Map m = (Map) ObjectBuilder.getVal(new JSONParser(new InputStreamReader(in, StandardCharsets.UTF_8)));\n      return new Object[]{m,version};\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error parsing conf resource \"+name,e);\n    }\n\n  }\n\n","sourceOld":"  private static  Object[] getMapAndVersion(SolrResourceLoader loader, String name) {\n    InputStream in = null;\n    try {\n      in = loader.openResource(name);\n    } catch (IOException e) {\n      //no problem no overlay.json file\n      return new Object[]{Collections.EMPTY_MAP, -1};\n    }\n\n    try {\n      int version = 0; //will be always 0 for file based resourceloader\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.info( \"conf resource {} loaded . version : {} \", name,version);\n      }\n      Map m = (Map) ObjectBuilder.getVal(new JSONParser(new InputStreamReader(in, StandardCharsets.UTF_8)));\n      return new Object[]{m,version};\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error reading conf resource \"+name,e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["ad8bc2fca706055f5c66e05eaf3d598cfb135a9b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2330174b38007b9942205a2679db9ddffe35af89","date":1423653924,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestParams#getMapAndVersion(SolrResourceLoader,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RequestParams#getMapAndVersion(SolrResourceLoader,String).mjava","sourceNew":"  private static Object[] getMapAndVersion(SolrResourceLoader loader, String name) {\n    InputStream in = null;\n    try {\n      in = loader.openResource(name);\n    } catch (IOException e) {\n      //no problem no overlay.json file\n      return new Object[]{Collections.EMPTY_MAP, -1};\n    }\n\n    int version = 0; //will be always 0 for file based resourceloader\n    if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n      version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n      log.info(\"conf resource {} loaded . version : {} \", name, version);\n    }\n\n    try {\n      Map m = (Map) ObjectBuilder.getVal(new JSONParser(new InputStreamReader(in, StandardCharsets.UTF_8)));\n      return new Object[]{m, version};\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error parsing conf resource \" + name, e);\n    }\n\n  }\n\n","sourceOld":"  private static  Object[] getMapAndVersion(SolrResourceLoader loader, String name) {\n    InputStream in = null;\n    try {\n      in = loader.openResource(name);\n    } catch (IOException e) {\n      //no problem no overlay.json file\n      return new Object[]{Collections.EMPTY_MAP, -1};\n    }\n\n      int version = 0; //will be always 0 for file based resourceloader\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.info( \"conf resource {} loaded . version : {} \", name,version);\n      }\n\n    try {\n      Map m = (Map) ObjectBuilder.getVal(new JSONParser(new InputStreamReader(in, StandardCharsets.UTF_8)));\n      return new Object[]{m,version};\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error parsing conf resource \"+name,e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["ad8bc2fca706055f5c66e05eaf3d598cfb135a9b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad8bc2fca706055f5c66e05eaf3d598cfb135a9b","date":1428295918,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestParams#getMapAndVersion(SolrResourceLoader,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RequestParams#getMapAndVersion(SolrResourceLoader,String).mjava","sourceNew":"  private static Object[] getMapAndVersion(SolrResourceLoader loader, String name) {\n    try (InputStream in = loader.openResource(name)) {\n      int version = 0; //will be always 0 for file based resourceloader\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.info(\"conf resource {} loaded . version : {} \", name, version);\n      }\n      try {\n        Map m = (Map) ObjectBuilder.getVal(new JSONParser(new InputStreamReader(in, StandardCharsets.UTF_8)));\n        return new Object[]{m, version};\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error parsing conf resource \" + name, e);\n      }\n\n    } catch (IOException e) {\n      //no problem no overlay.json file\n      return new Object[]{Collections.EMPTY_MAP, -1};\n    }\n  }\n\n","sourceOld":"  private static Object[] getMapAndVersion(SolrResourceLoader loader, String name) {\n    InputStream in = null;\n    try {\n      in = loader.openResource(name);\n    } catch (IOException e) {\n      //no problem no overlay.json file\n      return new Object[]{Collections.EMPTY_MAP, -1};\n    }\n\n    int version = 0; //will be always 0 for file based resourceloader\n    if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n      version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n      log.info(\"conf resource {} loaded . version : {} \", name, version);\n    }\n\n    try {\n      Map m = (Map) ObjectBuilder.getVal(new JSONParser(new InputStreamReader(in, StandardCharsets.UTF_8)));\n      return new Object[]{m, version};\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error parsing conf resource \" + name, e);\n    }\n\n  }\n\n","bugFix":["32c9c18cfc3e7e9def0f70c28af0d6b5bfd02320","c2d72c3e6563e08675f940d4c74139309c5e3db2","2330174b38007b9942205a2679db9ddffe35af89"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3714bcf66a68a1600e9dd11442fc1b33b62ef088","date":1556832005,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestParams#getMapAndVersion(SolrResourceLoader,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RequestParams#getMapAndVersion(SolrResourceLoader,String).mjava","sourceNew":"  private static Object[] getMapAndVersion(SolrResourceLoader loader, String name) {\n    try (InputStream in = loader.openResource(name)) {\n      int version = 0; //will be always 0 for file based resourceloader\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.info(\"conf resource {} loaded . version : {} \", name, version);\n      }\n      try {\n        Map m = (Map) fromJSON (in);\n        return new Object[]{m, version};\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error parsing conf resource \" + name, e);\n      }\n\n    } catch (IOException e) {\n      //no problem no overlay.json file\n      return new Object[]{Collections.EMPTY_MAP, -1};\n    }\n  }\n\n","sourceOld":"  private static Object[] getMapAndVersion(SolrResourceLoader loader, String name) {\n    try (InputStream in = loader.openResource(name)) {\n      int version = 0; //will be always 0 for file based resourceloader\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.info(\"conf resource {} loaded . version : {} \", name, version);\n      }\n      try {\n        Map m = (Map) ObjectBuilder.getVal(new JSONParser(new InputStreamReader(in, StandardCharsets.UTF_8)));\n        return new Object[]{m, version};\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error parsing conf resource \" + name, e);\n      }\n\n    } catch (IOException e) {\n      //no problem no overlay.json file\n      return new Object[]{Collections.EMPTY_MAP, -1};\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75237075d8425856bf4bbf52a6be4f9162b8187d","date":1591103291,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestParams#getMapAndVersion(SolrResourceLoader,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RequestParams#getMapAndVersion(SolrResourceLoader,String).mjava","sourceNew":"  private static Object[] getMapAndVersion(SolrResourceLoader loader, String name) {\n    try (InputStream in = loader.openResource(name)) {\n      int version = 0; //will be always 0 for file based resourceloader\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.info(\"conf resource {} loaded . version : {} \", name, version);\n      }\n      try {\n        @SuppressWarnings({\"rawtypes\"})\n        Map m = (Map) fromJSON (in);\n        return new Object[]{m, version};\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error parsing conf resource \" + name, e);\n      }\n\n    } catch (IOException e) {\n      //no problem no overlay.json file\n      return new Object[]{Collections.EMPTY_MAP, -1};\n    }\n  }\n\n","sourceOld":"  private static Object[] getMapAndVersion(SolrResourceLoader loader, String name) {\n    try (InputStream in = loader.openResource(name)) {\n      int version = 0; //will be always 0 for file based resourceloader\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.info(\"conf resource {} loaded . version : {} \", name, version);\n      }\n      try {\n        Map m = (Map) fromJSON (in);\n        return new Object[]{m, version};\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error parsing conf resource \" + name, e);\n      }\n\n    } catch (IOException e) {\n      //no problem no overlay.json file\n      return new Object[]{Collections.EMPTY_MAP, -1};\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ad8bc2fca706055f5c66e05eaf3d598cfb135a9b":["2330174b38007b9942205a2679db9ddffe35af89"],"75237075d8425856bf4bbf52a6be4f9162b8187d":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"2330174b38007b9942205a2679db9ddffe35af89":["32c9c18cfc3e7e9def0f70c28af0d6b5bfd02320"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["ad8bc2fca706055f5c66e05eaf3d598cfb135a9b"],"32c9c18cfc3e7e9def0f70c28af0d6b5bfd02320":["c2d72c3e6563e08675f940d4c74139309c5e3db2"],"c2d72c3e6563e08675f940d4c74139309c5e3db2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["75237075d8425856bf4bbf52a6be4f9162b8187d"]},"commit2Childs":{"ad8bc2fca706055f5c66e05eaf3d598cfb135a9b":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"75237075d8425856bf4bbf52a6be4f9162b8187d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2330174b38007b9942205a2679db9ddffe35af89":["ad8bc2fca706055f5c66e05eaf3d598cfb135a9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c2d72c3e6563e08675f940d4c74139309c5e3db2"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["75237075d8425856bf4bbf52a6be4f9162b8187d"],"32c9c18cfc3e7e9def0f70c28af0d6b5bfd02320":["2330174b38007b9942205a2679db9ddffe35af89"],"c2d72c3e6563e08675f940d4c74139309c5e3db2":["32c9c18cfc3e7e9def0f70c28af0d6b5bfd02320"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}