{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Random,Directory,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Random,Directory,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Random,Directory,boolean).mjava","sourceNew":"  private void doTestReopenWithCommit (Random random, Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(\n                                                              OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(newLogMergePolicy()));\n    iwriter.commit();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    try {\n      int M = 3;\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setTokenized(false);\n      FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n      customType2.setTokenized(false);\n      customType2.setOmitNorms(true);\n      FieldType customType3 = new FieldType();\n      customType3.setStored(true);\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(newField(\"id\", i+\"_\"+j, customType));\n          doc.add(newField(\"id2\", i+\"_\"+j, customType2));\n          doc.add(newField(\"id3\", i+\"_\"+j, customType3));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          DirectoryReader r2 = DirectoryReader.openIfChanged(reader);\n          if (r2 != null) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = DirectoryReader.open(dir);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","sourceOld":"  private void doTestReopenWithCommit (Random random, Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(\n                                                              OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(newLogMergePolicy()));\n    iwriter.commit();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    try {\n      int M = 3;\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setTokenized(false);\n      FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n      customType2.setTokenized(false);\n      customType2.setOmitNorms(true);\n      FieldType customType3 = new FieldType();\n      customType3.setStored(true);\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(newField(\"id\", i+\"_\"+j, customType));\n          doc.add(newField(\"id2\", i+\"_\"+j, customType2));\n          doc.add(newField(\"id3\", i+\"_\"+j, customType3));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          DirectoryReader r2 = DirectoryReader.openIfChanged(reader);\n          if (r2 != null) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = DirectoryReader.open(dir);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87","date":1328967626,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#doTestReopenWithCommit(Random,Directory,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Random,Directory,boolean).mjava","sourceNew":"  private void doTestReopenWithCommit (Random random, Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(\n                                                              OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(newLogMergePolicy()));\n    iwriter.commit();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    try {\n      int M = 3;\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setTokenized(false);\n      FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n      customType2.setTokenized(false);\n      customType2.setOmitNorms(true);\n      FieldType customType3 = new FieldType();\n      customType3.setStored(true);\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(newField(\"id\", i+\"_\"+j, customType));\n          doc.add(newField(\"id2\", i+\"_\"+j, customType2));\n          doc.add(newField(\"id3\", i+\"_\"+j, customType3));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          DirectoryReader r2 = DirectoryReader.openIfChanged(reader);\n          if (r2 != null) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = DirectoryReader.open(dir);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","sourceOld":"  private void doTestReopenWithCommit (Random random, Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(\n                                                              OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(newLogMergePolicy()));\n    iwriter.commit();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    try {\n      int M = 3;\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setTokenized(false);\n      FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n      customType2.setTokenized(false);\n      customType2.setOmitNorms(true);\n      FieldType customType3 = new FieldType();\n      customType3.setStored(true);\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(newField(\"id\", i+\"_\"+j, customType));\n          doc.add(newField(\"id2\", i+\"_\"+j, customType2));\n          doc.add(newField(\"id3\", i+\"_\"+j, customType3));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          DirectoryReader r2 = DirectoryReader.openIfChanged(reader);\n          if (r2 != null) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = DirectoryReader.open(dir);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"]},"commit2Childs":{"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}