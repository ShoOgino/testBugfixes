{"path":"lucene/facet/src/java/org/apache/lucene/util/collections/IntArray#equals(Object).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/util/collections/IntArray#equals(Object).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/util/collections/IntArray#equals(Object).mjava","sourceNew":"  /**\n   * Equals method. Checking the sizes, than the values from the last index to\n   * the first (Statistically for random should be the same but for our\n   * specific use would find differences faster).\n   */\n  @Override\n  public boolean equals(Object o) {\n    if (!(o instanceof IntArray)) {\n      return false;\n    }\n\n    IntArray array = (IntArray) o;\n    if (array.size != size) {\n      return false;\n    }\n\n    sort();\n    array.sort();\n\n    boolean equal = true;\n\n    for (int i = size; i > 0 && equal;) {\n      --i;\n      equal = (array.data[i] == this.data[i]);\n    }\n\n    return equal;\n  }\n\n","sourceOld":"  /**\n   * Equals method. Checking the sizes, than the values from the last index to\n   * the first (Statistically for random should be the same but for our\n   * specific use would find differences faster).\n   */\n  @Override\n  public boolean equals(Object o) {\n    if (!(o instanceof IntArray)) {\n      return false;\n    }\n\n    IntArray array = (IntArray) o;\n    if (array.size != size) {\n      return false;\n    }\n\n    sort();\n    array.sort();\n\n    boolean equal = true;\n\n    for (int i = size; i > 0 && equal;) {\n      --i;\n      equal = (array.data[i] == this.data[i]);\n    }\n\n    return equal;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/collections/IntArray#equals(Object).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/util/collections/IntArray#equals(Object).mjava","sourceNew":"  /**\n   * Equals method. Checking the sizes, than the values from the last index to\n   * the first (Statistically for random should be the same but for our\n   * specific use would find differences faster).\n   */\n  @Override\n  public boolean equals(Object o) {\n    if (!(o instanceof IntArray)) {\n      return false;\n    }\n\n    IntArray array = (IntArray) o;\n    if (array.size != size) {\n      return false;\n    }\n\n    sort();\n    array.sort();\n\n    boolean equal = true;\n\n    for (int i = size; i > 0 && equal;) {\n      --i;\n      equal = (array.data[i] == this.data[i]);\n    }\n\n    return equal;\n  }\n\n","sourceOld":"  /**\n   * Equals method. Checking the sizes, than the values from the last index to\n   * the first (Statistically for random should be the same but for our\n   * specific use would find differences faster).\n   */\n  @Override\n  public boolean equals(Object o) {\n    if (!(o instanceof IntArray)) {\n      return false;\n    }\n\n    IntArray array = (IntArray) o;\n    if (array.size != size) {\n      return false;\n    }\n\n    sort();\n    array.sort();\n\n    boolean equal = true;\n\n    for (int i = size; i > 0 && equal;) {\n      --i;\n      equal = (array.data[i] == this.data[i]);\n    }\n\n    return equal;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["607428da722dcb3e86bbd11c63de8986e6275c36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}