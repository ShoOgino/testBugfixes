{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testNewFieldQuery().mjava","commits":[{"id":"ee76d213d935c68932ca13b55fa0a8a32bf6af1a","date":1343572717,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testNewFieldQuery().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void testNewFieldQuery() throws Exception {\n    /** ordinary behavior, synonyms form uncoordinated boolean query */\n    QueryParser dumb = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new Analyzer1());\n    BooleanQuery expanded = new BooleanQuery(true);\n    expanded.add(new TermQuery(new Term(\"field\", \"dogs\")),\n        BooleanClause.Occur.SHOULD);\n    expanded.add(new TermQuery(new Term(\"field\", \"dog\")),\n        BooleanClause.Occur.SHOULD);\n    assertEquals(expanded, dumb.parse(\"\\\"dogs\\\"\"));\n    /** even with the phrase operator the behavior is the same */\n    assertEquals(expanded, dumb.parse(\"dogs\"));\n    \n    /**\n     * custom behavior, the synonyms are expanded, unless you use quote operator\n     */\n    QueryParser smart = new SmartQueryParser();\n    assertEquals(expanded, smart.parse(\"dogs\"));\n    \n    Query unexpanded = new TermQuery(new Term(\"field\", \"dogs\"));\n    assertEquals(unexpanded, smart.parse(\"\\\"dogs\\\"\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testNewFieldQuery().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void testNewFieldQuery() throws Exception {\n    /** ordinary behavior, synonyms form uncoordinated boolean query */\n    QueryParser dumb = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new Analyzer1());\n    BooleanQuery expanded = new BooleanQuery(true);\n    expanded.add(new TermQuery(new Term(\"field\", \"dogs\")),\n        BooleanClause.Occur.SHOULD);\n    expanded.add(new TermQuery(new Term(\"field\", \"dog\")),\n        BooleanClause.Occur.SHOULD);\n    assertEquals(expanded, dumb.parse(\"\\\"dogs\\\"\"));\n    /** even with the phrase operator the behavior is the same */\n    assertEquals(expanded, dumb.parse(\"dogs\"));\n    \n    /**\n     * custom behavior, the synonyms are expanded, unless you use quote operator\n     */\n    QueryParser smart = new SmartQueryParser();\n    assertEquals(expanded, smart.parse(\"dogs\"));\n    \n    Query unexpanded = new TermQuery(new Term(\"field\", \"dogs\"));\n    assertEquals(unexpanded, smart.parse(\"\\\"dogs\\\"\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testNewFieldQuery().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void testNewFieldQuery() throws Exception {\n    /** ordinary behavior, synonyms form uncoordinated boolean query */\n    QueryParser dumb = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new Analyzer1());\n    BooleanQuery expanded = new BooleanQuery(true);\n    expanded.add(new TermQuery(new Term(\"field\", \"dogs\")),\n        BooleanClause.Occur.SHOULD);\n    expanded.add(new TermQuery(new Term(\"field\", \"dog\")),\n        BooleanClause.Occur.SHOULD);\n    assertEquals(expanded, dumb.parse(\"\\\"dogs\\\"\"));\n    /** even with the phrase operator the behavior is the same */\n    assertEquals(expanded, dumb.parse(\"dogs\"));\n    \n    /**\n     * custom behavior, the synonyms are expanded, unless you use quote operator\n     */\n    QueryParser smart = new SmartQueryParser();\n    assertEquals(expanded, smart.parse(\"dogs\"));\n    \n    Query unexpanded = new TermQuery(new Term(\"field\", \"dogs\"));\n    assertEquals(unexpanded, smart.parse(\"\\\"dogs\\\"\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testNewFieldQuery().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testNewFieldQuery().mjava","sourceNew":"  @Override\n  public void testNewFieldQuery() throws Exception {\n    /** ordinary behavior, synonyms form uncoordinated boolean query */\n    QueryParser dumb = new QueryParser(\"field\",\n        new Analyzer1());\n    BooleanQuery expanded = new BooleanQuery(true);\n    expanded.add(new TermQuery(new Term(\"field\", \"dogs\")),\n        BooleanClause.Occur.SHOULD);\n    expanded.add(new TermQuery(new Term(\"field\", \"dog\")),\n        BooleanClause.Occur.SHOULD);\n    assertEquals(expanded, dumb.parse(\"\\\"dogs\\\"\"));\n    /** even with the phrase operator the behavior is the same */\n    assertEquals(expanded, dumb.parse(\"dogs\"));\n    \n    /**\n     * custom behavior, the synonyms are expanded, unless you use quote operator\n     */\n    QueryParser smart = new SmartQueryParser();\n    assertEquals(expanded, smart.parse(\"dogs\"));\n    \n    Query unexpanded = new TermQuery(new Term(\"field\", \"dogs\"));\n    assertEquals(unexpanded, smart.parse(\"\\\"dogs\\\"\"));\n  }\n\n","sourceOld":"  @Override\n  public void testNewFieldQuery() throws Exception {\n    /** ordinary behavior, synonyms form uncoordinated boolean query */\n    QueryParser dumb = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new Analyzer1());\n    BooleanQuery expanded = new BooleanQuery(true);\n    expanded.add(new TermQuery(new Term(\"field\", \"dogs\")),\n        BooleanClause.Occur.SHOULD);\n    expanded.add(new TermQuery(new Term(\"field\", \"dog\")),\n        BooleanClause.Occur.SHOULD);\n    assertEquals(expanded, dumb.parse(\"\\\"dogs\\\"\"));\n    /** even with the phrase operator the behavior is the same */\n    assertEquals(expanded, dumb.parse(\"dogs\"));\n    \n    /**\n     * custom behavior, the synonyms are expanded, unless you use quote operator\n     */\n    QueryParser smart = new SmartQueryParser();\n    assertEquals(expanded, smart.parse(\"dogs\"));\n    \n    Query unexpanded = new TermQuery(new Term(\"field\", \"dogs\"));\n    assertEquals(unexpanded, smart.parse(\"\\\"dogs\\\"\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testNewFieldQuery().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testNewFieldQuery().mjava","sourceNew":"  @Override\n  public void testNewFieldQuery() throws Exception {\n    /** ordinary behavior, synonyms form uncoordinated boolean query */\n    QueryParser dumb = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new Analyzer1());\n    BooleanQuery expanded = new BooleanQuery(true);\n    expanded.add(new TermQuery(new Term(\"field\", \"dogs\")),\n        BooleanClause.Occur.SHOULD);\n    expanded.add(new TermQuery(new Term(\"field\", \"dog\")),\n        BooleanClause.Occur.SHOULD);\n    assertEquals(expanded, dumb.parse(\"\\\"dogs\\\"\"));\n    /** even with the phrase operator the behavior is the same */\n    assertEquals(expanded, dumb.parse(\"dogs\"));\n    \n    /**\n     * custom behavior, the synonyms are expanded, unless you use quote operator\n     */\n    QueryParser smart = new SmartQueryParser();\n    assertEquals(expanded, smart.parse(\"dogs\"));\n    \n    Query unexpanded = new TermQuery(new Term(\"field\", \"dogs\"));\n    assertEquals(unexpanded, smart.parse(\"\\\"dogs\\\"\"));\n  }\n\n","sourceOld":"  @Override\n  public void testNewFieldQuery() throws Exception {\n    /** ordinary behavior, synonyms form uncoordinated boolean query */\n    QueryParser dumb = new QueryParser(\"field\",\n        new Analyzer1());\n    BooleanQuery expanded = new BooleanQuery(true);\n    expanded.add(new TermQuery(new Term(\"field\", \"dogs\")),\n        BooleanClause.Occur.SHOULD);\n    expanded.add(new TermQuery(new Term(\"field\", \"dog\")),\n        BooleanClause.Occur.SHOULD);\n    assertEquals(expanded, dumb.parse(\"\\\"dogs\\\"\"));\n    /** even with the phrase operator the behavior is the same */\n    assertEquals(expanded, dumb.parse(\"dogs\"));\n    \n    /**\n     * custom behavior, the synonyms are expanded, unless you use quote operator\n     */\n    QueryParser smart = new SmartQueryParser();\n    assertEquals(expanded, smart.parse(\"dogs\"));\n    \n    Query unexpanded = new TermQuery(new Term(\"field\", \"dogs\"));\n    assertEquals(unexpanded, smart.parse(\"\\\"dogs\\\"\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testNewFieldQuery().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testNewFieldQuery().mjava","sourceNew":"  @Override\n  public void testNewFieldQuery() throws Exception {\n    /** ordinary behavior, synonyms form uncoordinated boolean query */\n    QueryParser dumb = new QueryParser(\"field\",\n        new Analyzer1());\n    BooleanQuery expanded = new BooleanQuery(true);\n    expanded.add(new TermQuery(new Term(\"field\", \"dogs\")),\n        BooleanClause.Occur.SHOULD);\n    expanded.add(new TermQuery(new Term(\"field\", \"dog\")),\n        BooleanClause.Occur.SHOULD);\n    assertEquals(expanded, dumb.parse(\"\\\"dogs\\\"\"));\n    /** even with the phrase operator the behavior is the same */\n    assertEquals(expanded, dumb.parse(\"dogs\"));\n    \n    /**\n     * custom behavior, the synonyms are expanded, unless you use quote operator\n     */\n    QueryParser smart = new SmartQueryParser();\n    assertEquals(expanded, smart.parse(\"dogs\"));\n    \n    Query unexpanded = new TermQuery(new Term(\"field\", \"dogs\"));\n    assertEquals(unexpanded, smart.parse(\"\\\"dogs\\\"\"));\n  }\n\n","sourceOld":"  @Override\n  public void testNewFieldQuery() throws Exception {\n    /** ordinary behavior, synonyms form uncoordinated boolean query */\n    QueryParser dumb = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new Analyzer1());\n    BooleanQuery expanded = new BooleanQuery(true);\n    expanded.add(new TermQuery(new Term(\"field\", \"dogs\")),\n        BooleanClause.Occur.SHOULD);\n    expanded.add(new TermQuery(new Term(\"field\", \"dog\")),\n        BooleanClause.Occur.SHOULD);\n    assertEquals(expanded, dumb.parse(\"\\\"dogs\\\"\"));\n    /** even with the phrase operator the behavior is the same */\n    assertEquals(expanded, dumb.parse(\"dogs\"));\n    \n    /**\n     * custom behavior, the synonyms are expanded, unless you use quote operator\n     */\n    QueryParser smart = new SmartQueryParser();\n    assertEquals(expanded, smart.parse(\"dogs\"));\n    \n    Query unexpanded = new TermQuery(new Term(\"field\", \"dogs\"));\n    assertEquals(unexpanded, smart.parse(\"\\\"dogs\\\"\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testNewFieldQuery().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testNewFieldQuery().mjava","sourceNew":"  @Override\n  public void testNewFieldQuery() throws Exception {\n    /** ordinary behavior, synonyms form uncoordinated boolean query */\n    QueryParser dumb = new QueryParser(\"field\",\n        new Analyzer1());\n    BooleanQuery.Builder expanded = new BooleanQuery.Builder();\n    expanded.setDisableCoord(true);\n    expanded.add(new TermQuery(new Term(\"field\", \"dogs\")),\n        BooleanClause.Occur.SHOULD);\n    expanded.add(new TermQuery(new Term(\"field\", \"dog\")),\n        BooleanClause.Occur.SHOULD);\n    assertEquals(expanded.build(), dumb.parse(\"\\\"dogs\\\"\"));\n    /** even with the phrase operator the behavior is the same */\n    assertEquals(expanded.build(), dumb.parse(\"dogs\"));\n    \n    /**\n     * custom behavior, the synonyms are expanded, unless you use quote operator\n     */\n    QueryParser smart = new SmartQueryParser();\n    assertEquals(expanded.build(), smart.parse(\"dogs\"));\n    \n    Query unexpanded = new TermQuery(new Term(\"field\", \"dogs\"));\n    assertEquals(unexpanded, smart.parse(\"\\\"dogs\\\"\"));\n  }\n\n","sourceOld":"  @Override\n  public void testNewFieldQuery() throws Exception {\n    /** ordinary behavior, synonyms form uncoordinated boolean query */\n    QueryParser dumb = new QueryParser(\"field\",\n        new Analyzer1());\n    BooleanQuery expanded = new BooleanQuery(true);\n    expanded.add(new TermQuery(new Term(\"field\", \"dogs\")),\n        BooleanClause.Occur.SHOULD);\n    expanded.add(new TermQuery(new Term(\"field\", \"dog\")),\n        BooleanClause.Occur.SHOULD);\n    assertEquals(expanded, dumb.parse(\"\\\"dogs\\\"\"));\n    /** even with the phrase operator the behavior is the same */\n    assertEquals(expanded, dumb.parse(\"dogs\"));\n    \n    /**\n     * custom behavior, the synonyms are expanded, unless you use quote operator\n     */\n    QueryParser smart = new SmartQueryParser();\n    assertEquals(expanded, smart.parse(\"dogs\"));\n    \n    Query unexpanded = new TermQuery(new Term(\"field\", \"dogs\"));\n    assertEquals(unexpanded, smart.parse(\"\\\"dogs\\\"\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81d0720146de53dd3a4a023d2a3d1089d86d748d","date":1442268215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testNewFieldQuery().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testNewFieldQuery().mjava","sourceNew":"  @Override\n  public void testNewFieldQuery() throws Exception {\n    /** ordinary behavior, synonyms form uncoordinated boolean query */\n    QueryParser dumb = new QueryParser(\"field\",\n        new Analyzer1());\n    Query expanded = new SynonymQuery(new Term(\"field\", \"dogs\"), new Term(\"field\", \"dog\"));\n    assertEquals(expanded, dumb.parse(\"\\\"dogs\\\"\"));\n    /** even with the phrase operator the behavior is the same */\n    assertEquals(expanded, dumb.parse(\"dogs\"));\n    \n    /**\n     * custom behavior, the synonyms are expanded, unless you use quote operator\n     */\n    QueryParser smart = new SmartQueryParser();\n    assertEquals(expanded, smart.parse(\"dogs\"));\n    \n    Query unexpanded = new TermQuery(new Term(\"field\", \"dogs\"));\n    assertEquals(unexpanded, smart.parse(\"\\\"dogs\\\"\"));\n  }\n\n","sourceOld":"  @Override\n  public void testNewFieldQuery() throws Exception {\n    /** ordinary behavior, synonyms form uncoordinated boolean query */\n    QueryParser dumb = new QueryParser(\"field\",\n        new Analyzer1());\n    BooleanQuery.Builder expanded = new BooleanQuery.Builder();\n    expanded.setDisableCoord(true);\n    expanded.add(new TermQuery(new Term(\"field\", \"dogs\")),\n        BooleanClause.Occur.SHOULD);\n    expanded.add(new TermQuery(new Term(\"field\", \"dog\")),\n        BooleanClause.Occur.SHOULD);\n    assertEquals(expanded.build(), dumb.parse(\"\\\"dogs\\\"\"));\n    /** even with the phrase operator the behavior is the same */\n    assertEquals(expanded.build(), dumb.parse(\"dogs\"));\n    \n    /**\n     * custom behavior, the synonyms are expanded, unless you use quote operator\n     */\n    QueryParser smart = new SmartQueryParser();\n    assertEquals(expanded.build(), smart.parse(\"dogs\"));\n    \n    Query unexpanded = new TermQuery(new Term(\"field\", \"dogs\"));\n    assertEquals(unexpanded, smart.parse(\"\\\"dogs\\\"\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea4107f60b9f95623c16025c9c247412ff809092","date":1468333987,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testNewFieldQuery().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testNewFieldQuery().mjava","sourceNew":"  @Override\n  public void testNewFieldQuery() throws Exception {\n    /** ordinary behavior, synonyms form uncoordinated boolean query */\n    QueryParser dumb = new QueryParser(FIELD,\n        new Analyzer1());\n    Query expanded = new SynonymQuery(new Term(FIELD, \"dogs\"), new Term(FIELD, \"dog\"));\n    assertEquals(expanded, dumb.parse(\"\\\"dogs\\\"\"));\n    /** even with the phrase operator the behavior is the same */\n    assertEquals(expanded, dumb.parse(\"dogs\"));\n    \n    /**\n     * custom behavior, the synonyms are expanded, unless you use quote operator\n     */\n    QueryParser smart = new SmartQueryParser();\n    assertEquals(expanded, smart.parse(\"dogs\"));\n    \n    Query unexpanded = new TermQuery(new Term(FIELD, \"dogs\"));\n    assertEquals(unexpanded, smart.parse(\"\\\"dogs\\\"\"));\n  }\n\n","sourceOld":"  @Override\n  public void testNewFieldQuery() throws Exception {\n    /** ordinary behavior, synonyms form uncoordinated boolean query */\n    QueryParser dumb = new QueryParser(\"field\",\n        new Analyzer1());\n    Query expanded = new SynonymQuery(new Term(\"field\", \"dogs\"), new Term(\"field\", \"dog\"));\n    assertEquals(expanded, dumb.parse(\"\\\"dogs\\\"\"));\n    /** even with the phrase operator the behavior is the same */\n    assertEquals(expanded, dumb.parse(\"dogs\"));\n    \n    /**\n     * custom behavior, the synonyms are expanded, unless you use quote operator\n     */\n    QueryParser smart = new SmartQueryParser();\n    assertEquals(expanded, smart.parse(\"dogs\"));\n    \n    Query unexpanded = new TermQuery(new Term(\"field\", \"dogs\"));\n    assertEquals(unexpanded, smart.parse(\"\\\"dogs\\\"\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testNewFieldQuery().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testNewFieldQuery().mjava","sourceNew":"  @Override\n  public void testNewFieldQuery() throws Exception {\n    /** ordinary behavior, synonyms form uncoordinated boolean query */\n    QueryParser dumb = new QueryParser(FIELD,\n        new Analyzer1());\n    Query expanded = new SynonymQuery(new Term(FIELD, \"dogs\"), new Term(FIELD, \"dog\"));\n    assertEquals(expanded, dumb.parse(\"\\\"dogs\\\"\"));\n    /** even with the phrase operator the behavior is the same */\n    assertEquals(expanded, dumb.parse(\"dogs\"));\n    \n    /**\n     * custom behavior, the synonyms are expanded, unless you use quote operator\n     */\n    QueryParser smart = new SmartQueryParser();\n    assertEquals(expanded, smart.parse(\"dogs\"));\n    \n    Query unexpanded = new TermQuery(new Term(FIELD, \"dogs\"));\n    assertEquals(unexpanded, smart.parse(\"\\\"dogs\\\"\"));\n  }\n\n","sourceOld":"  @Override\n  public void testNewFieldQuery() throws Exception {\n    /** ordinary behavior, synonyms form uncoordinated boolean query */\n    QueryParser dumb = new QueryParser(\"field\",\n        new Analyzer1());\n    Query expanded = new SynonymQuery(new Term(\"field\", \"dogs\"), new Term(\"field\", \"dog\"));\n    assertEquals(expanded, dumb.parse(\"\\\"dogs\\\"\"));\n    /** even with the phrase operator the behavior is the same */\n    assertEquals(expanded, dumb.parse(\"dogs\"));\n    \n    /**\n     * custom behavior, the synonyms are expanded, unless you use quote operator\n     */\n    QueryParser smart = new SmartQueryParser();\n    assertEquals(expanded, smart.parse(\"dogs\"));\n    \n    Query unexpanded = new TermQuery(new Term(\"field\", \"dogs\"));\n    assertEquals(unexpanded, smart.parse(\"\\\"dogs\\\"\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df25592b82060bc1c800e87bf019444bf0ddf9d4","date":1552296011,"type":3,"author":"jimczi","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testNewFieldQuery().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testNewFieldQuery().mjava","sourceNew":"  @Override\n  public void testNewFieldQuery() throws Exception {\n    /** ordinary behavior, synonyms form uncoordinated boolean query */\n    QueryParser dumb = new QueryParser(FIELD,\n        new Analyzer1());\n    Query expanded = new SynonymQuery.Builder(FIELD)\n        .addTerm(new Term(FIELD, \"dogs\"))\n        .addTerm(new Term(FIELD, \"dog\"))\n        .build();\n    assertEquals(expanded, dumb.parse(\"\\\"dogs\\\"\"));\n    /** even with the phrase operator the behavior is the same */\n    assertEquals(expanded, dumb.parse(\"dogs\"));\n    \n    /**\n     * custom behavior, the synonyms are expanded, unless you use quote operator\n     */\n    QueryParser smart = new SmartQueryParser();\n    assertEquals(expanded, smart.parse(\"dogs\"));\n    \n    Query unexpanded = new TermQuery(new Term(FIELD, \"dogs\"));\n    assertEquals(unexpanded, smart.parse(\"\\\"dogs\\\"\"));\n  }\n\n","sourceOld":"  @Override\n  public void testNewFieldQuery() throws Exception {\n    /** ordinary behavior, synonyms form uncoordinated boolean query */\n    QueryParser dumb = new QueryParser(FIELD,\n        new Analyzer1());\n    Query expanded = new SynonymQuery(new Term(FIELD, \"dogs\"), new Term(FIELD, \"dog\"));\n    assertEquals(expanded, dumb.parse(\"\\\"dogs\\\"\"));\n    /** even with the phrase operator the behavior is the same */\n    assertEquals(expanded, dumb.parse(\"dogs\"));\n    \n    /**\n     * custom behavior, the synonyms are expanded, unless you use quote operator\n     */\n    QueryParser smart = new SmartQueryParser();\n    assertEquals(expanded, smart.parse(\"dogs\"));\n    \n    Query unexpanded = new TermQuery(new Term(FIELD, \"dogs\"));\n    assertEquals(unexpanded, smart.parse(\"\\\"dogs\\\"\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"df25592b82060bc1c800e87bf019444bf0ddf9d4":["ea4107f60b9f95623c16025c9c247412ff809092"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["81d0720146de53dd3a4a023d2a3d1089d86d748d","ea4107f60b9f95623c16025c9c247412ff809092"],"ee76d213d935c68932ca13b55fa0a8a32bf6af1a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"ea4107f60b9f95623c16025c9c247412ff809092":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df25592b82060bc1c800e87bf019444bf0ddf9d4"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"df25592b82060bc1c800e87bf019444bf0ddf9d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","ea4107f60b9f95623c16025c9c247412ff809092"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"ee76d213d935c68932ca13b55fa0a8a32bf6af1a":["ff4227bb146f97aabae888091c19e48c88dbb0db","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"ea4107f60b9f95623c16025c9c247412ff809092":["df25592b82060bc1c800e87bf019444bf0ddf9d4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}