{"path":"src/java/org/apache/solr/analysis/CapitalizationFilter[CapitalizationFilterFactory]#next().mjava","commits":[{"id":"9c706ea4648df3cdef242f9dd43da00db226b1a6","date":1184375011,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/CapitalizationFilter[CapitalizationFilterFactory]#next().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public final Token next() throws IOException {\n    \n    Token t = input.next();\n    if( t != null ) {\n      String s = t.termText();\n      if( s.length() < factory.maxTokenLength ) {\n        int wordCount = 0;\n\n        StringBuilder word = new StringBuilder( s.length() );\n        StringBuilder text = new StringBuilder( s.length() );\n        for( char c : s.toCharArray() ) {\n          if( c <= ' ' || c == '.' ) { \n            if( word.length() > 0 ) {\n              text.append( factory.processWord( word.toString(), wordCount++ ) );\n              word.setLength( 0 );\n            }\n            text.append( c );\n          }\n          else { \n            word.append( c );\n          }\n        }\n        \n        // Add the last word\n        if( word.length() > 0 ) {\n          text.append( factory.processWord( word.toString(), wordCount++ ) );\n        }\n        \n        if( wordCount <= factory.maxWordCount ) {\n          t.setTermText( text.toString() );\n        }\n      }\n    }\n    return t;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16a3bd060e23c83333ee54d14fc1034f973eb8b5","date":1203820455,"type":4,"author":"Grant Ingersoll","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/solr/analysis/CapitalizationFilter[CapitalizationFilterFactory]#next().mjava","sourceNew":null,"sourceOld":"  @Override\n  public final Token next() throws IOException {\n    \n    Token t = input.next();\n    if( t != null ) {\n      String s = t.termText();\n      if( s.length() < factory.maxTokenLength ) {\n        int wordCount = 0;\n\n        StringBuilder word = new StringBuilder( s.length() );\n        StringBuilder text = new StringBuilder( s.length() );\n        for( char c : s.toCharArray() ) {\n          if( c <= ' ' || c == '.' ) { \n            if( word.length() > 0 ) {\n              text.append( factory.processWord( word.toString(), wordCount++ ) );\n              word.setLength( 0 );\n            }\n            text.append( c );\n          }\n          else { \n            word.append( c );\n          }\n        }\n        \n        // Add the last word\n        if( word.length() > 0 ) {\n          text.append( factory.processWord( word.toString(), wordCount++ ) );\n        }\n        \n        if( wordCount <= factory.maxWordCount ) {\n          t.setTermText( text.toString() );\n        }\n      }\n    }\n    return t;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"16a3bd060e23c83333ee54d14fc1034f973eb8b5":["9c706ea4648df3cdef242f9dd43da00db226b1a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9c706ea4648df3cdef242f9dd43da00db226b1a6":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["9c706ea4648df3cdef242f9dd43da00db226b1a6"],"16a3bd060e23c83333ee54d14fc1034f973eb8b5":[],"9c706ea4648df3cdef242f9dd43da00db226b1a6":["16a3bd060e23c83333ee54d14fc1034f973eb8b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["16a3bd060e23c83333ee54d14fc1034f973eb8b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}