{"path":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#toString(int).mjava","commits":[{"id":"fba839b7548159227edcb740033d0f814b323d8d","date":1424455904,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#toString(int).mjava","pathOld":"/dev/null","sourceNew":"  /** Used for debugging.  Format may suddenly change.\n   *\n   *  <p>Current format looks like\n   *  <code>_a(3.1):c45/4</code>, which means the segment's\n   *  name is <code>_a</code>; it was created with Lucene 3.1 (or\n   *  '?' if it's unknown); it's using compound file\n   *  format (would be <code>C</code> if not compound); it\n   *  has 45 documents; it has 4 deletions (this part is\n   *  left off when there are no deletions).</p>\n   */\n  public String toString(int delCount) {\n    StringBuilder s = new StringBuilder();\n    s.append(name).append('(').append(version == null ? \"?\" : version).append(')').append(':');\n    char cfs = getUseCompoundFile() ? 'c' : 'C';\n    s.append(cfs);\n\n    s.append(docCount);\n\n    if (delCount != 0) {\n      s.append('/').append(delCount);\n    }\n\n    // TODO: we could append toString of attributes() here?\n\n    return s.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0267c69e2456a3477a1ad785723f2135da3117e","date":1425317087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#toString(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#toString(int).mjava","sourceNew":"  /** Used for debugging.  Format may suddenly change.\n   *\n   *  <p>Current format looks like\n   *  <code>_a(3.1):c45/4</code>, which means the segment's\n   *  name is <code>_a</code>; it was created with Lucene 3.1 (or\n   *  '?' if it's unknown); it's using compound file\n   *  format (would be <code>C</code> if not compound); it\n   *  has 45 documents; it has 4 deletions (this part is\n   *  left off when there are no deletions).</p>\n   */\n  public String toString(int delCount) {\n    StringBuilder s = new StringBuilder();\n    s.append(name).append('(').append(version == null ? \"?\" : version).append(')').append(':');\n    char cfs = getUseCompoundFile() ? 'c' : 'C';\n    s.append(cfs);\n\n    s.append(maxDoc);\n\n    if (delCount != 0) {\n      s.append('/').append(delCount);\n    }\n\n    // TODO: we could append toString of attributes() here?\n\n    return s.toString();\n  }\n\n","sourceOld":"  /** Used for debugging.  Format may suddenly change.\n   *\n   *  <p>Current format looks like\n   *  <code>_a(3.1):c45/4</code>, which means the segment's\n   *  name is <code>_a</code>; it was created with Lucene 3.1 (or\n   *  '?' if it's unknown); it's using compound file\n   *  format (would be <code>C</code> if not compound); it\n   *  has 45 documents; it has 4 deletions (this part is\n   *  left off when there are no deletions).</p>\n   */\n  public String toString(int delCount) {\n    StringBuilder s = new StringBuilder();\n    s.append(name).append('(').append(version == null ? \"?\" : version).append(')').append(':');\n    char cfs = getUseCompoundFile() ? 'c' : 'C';\n    s.append(cfs);\n\n    s.append(docCount);\n\n    if (delCount != 0) {\n      s.append('/').append(delCount);\n    }\n\n    // TODO: we could append toString of attributes() here?\n\n    return s.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b06445ae1731e049327712db0454e5643ca9b7fe","date":1425329139,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#toString(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#toString(int).mjava","sourceNew":"  /** Used for debugging.  Format may suddenly change.\n   *\n   *  <p>Current format looks like\n   *  <code>_a(3.1):c45/4</code>, which means the segment's\n   *  name is <code>_a</code>; it was created with Lucene 3.1 (or\n   *  '?' if it's unknown); it's using compound file\n   *  format (would be <code>C</code> if not compound); it\n   *  has 45 documents; it has 4 deletions (this part is\n   *  left off when there are no deletions).</p>\n   */\n  public String toString(int delCount) {\n    StringBuilder s = new StringBuilder();\n    s.append(name).append('(').append(version == null ? \"?\" : version).append(')').append(':');\n    char cfs = getUseCompoundFile() ? 'c' : 'C';\n    s.append(cfs);\n\n    s.append(maxDoc);\n\n    if (delCount != 0) {\n      s.append('/').append(delCount);\n    }\n\n    // TODO: we could append toString of attributes() here?\n\n    return s.toString();\n  }\n\n","sourceOld":"  /** Used for debugging.  Format may suddenly change.\n   *\n   *  <p>Current format looks like\n   *  <code>_a(3.1):c45/4</code>, which means the segment's\n   *  name is <code>_a</code>; it was created with Lucene 3.1 (or\n   *  '?' if it's unknown); it's using compound file\n   *  format (would be <code>C</code> if not compound); it\n   *  has 45 documents; it has 4 deletions (this part is\n   *  left off when there are no deletions).</p>\n   */\n  public String toString(int delCount) {\n    StringBuilder s = new StringBuilder();\n    s.append(name).append('(').append(version == null ? \"?\" : version).append(')').append(':');\n    char cfs = getUseCompoundFile() ? 'c' : 'C';\n    s.append(cfs);\n\n    s.append(docCount);\n\n    if (delCount != 0) {\n      s.append('/').append(delCount);\n    }\n\n    // TODO: we could append toString of attributes() here?\n\n    return s.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#toString(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#toString(int).mjava","sourceNew":"  /** Used for debugging.  Format may suddenly change.\n   *\n   *  <p>Current format looks like\n   *  <code>_a(3.1):c45/4</code>, which means the segment's\n   *  name is <code>_a</code>; it was created with Lucene 3.1 (or\n   *  '?' if it's unknown); it's using compound file\n   *  format (would be <code>C</code> if not compound); it\n   *  has 45 documents; it has 4 deletions (this part is\n   *  left off when there are no deletions).</p>\n   */\n  public String toString(int delCount) {\n    StringBuilder s = new StringBuilder();\n    s.append(name).append('(').append(version == null ? \"?\" : version).append(')').append(':');\n    char cfs = getUseCompoundFile() ? 'c' : 'C';\n    s.append(cfs);\n\n    s.append(maxDoc);\n\n    if (delCount != 0) {\n      s.append('/').append(delCount);\n    }\n\n    // TODO: we could append toString of attributes() here?\n\n    return s.toString();\n  }\n\n","sourceOld":"  /** Used for debugging.  Format may suddenly change.\n   *\n   *  <p>Current format looks like\n   *  <code>_a(3.1):c45/4</code>, which means the segment's\n   *  name is <code>_a</code>; it was created with Lucene 3.1 (or\n   *  '?' if it's unknown); it's using compound file\n   *  format (would be <code>C</code> if not compound); it\n   *  has 45 documents; it has 4 deletions (this part is\n   *  left off when there are no deletions).</p>\n   */\n  public String toString(int delCount) {\n    StringBuilder s = new StringBuilder();\n    s.append(name).append('(').append(version == null ? \"?\" : version).append(')').append(':');\n    char cfs = getUseCompoundFile() ? 'c' : 'C';\n    s.append(cfs);\n\n    s.append(docCount);\n\n    if (delCount != 0) {\n      s.append('/').append(delCount);\n    }\n\n    // TODO: we could append toString of attributes() here?\n\n    return s.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3f89986d299512248eedcbdc3530fbbbb5235e3","date":1435447038,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#toString(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#toString(int).mjava","sourceNew":"  /** Used for debugging.  Format may suddenly change.\n   *\n   *  <p>Current format looks like\n   *  <code>_a(3.1):c45/4:[sorter=&lt;long: \"timestamp\"&gt;!]</code>, which means\n   *  the segment's name is <code>_a</code>; it was created with Lucene 3.1 (or\n   *  '?' if it's unknown); it's using compound file\n   *  format (would be <code>C</code> if not compound); it\n   *  has 45 documents; it has 4 deletions (this part is\n   *  left off when there are no deletions); it is sorted by the timestamp field\n   *  in descending order (this part is omitted for unsorted segments).</p>\n   */\n  public String toString(int delCount) {\n    StringBuilder s = new StringBuilder();\n    s.append(name).append('(').append(version == null ? \"?\" : version).append(')').append(':');\n    char cfs = getUseCompoundFile() ? 'c' : 'C';\n    s.append(cfs);\n\n    s.append(maxDoc);\n\n    if (delCount != 0) {\n      s.append('/').append(delCount);\n    }\n\n    final String sorter_key = \"sorter\"; // SortingMergePolicy.SORTER_ID_PROP; // TODO: use this once we can import SortingMergePolicy (currently located in 'misc' instead of 'core')\n    final String sorter_val = diagnostics.get(sorter_key);\n    if (sorter_val != null) {\n      s.append(\":[\");\n      s.append(sorter_key);\n      s.append('=');\n      s.append(sorter_val);\n      s.append(']');\n    }\n\n    // TODO: we could append toString of attributes() here?\n\n    return s.toString();\n  }\n\n","sourceOld":"  /** Used for debugging.  Format may suddenly change.\n   *\n   *  <p>Current format looks like\n   *  <code>_a(3.1):c45/4</code>, which means the segment's\n   *  name is <code>_a</code>; it was created with Lucene 3.1 (or\n   *  '?' if it's unknown); it's using compound file\n   *  format (would be <code>C</code> if not compound); it\n   *  has 45 documents; it has 4 deletions (this part is\n   *  left off when there are no deletions).</p>\n   */\n  public String toString(int delCount) {\n    StringBuilder s = new StringBuilder();\n    s.append(name).append('(').append(version == null ? \"?\" : version).append(')').append(':');\n    char cfs = getUseCompoundFile() ? 'c' : 'C';\n    s.append(cfs);\n\n    s.append(maxDoc);\n\n    if (delCount != 0) {\n      s.append('/').append(delCount);\n    }\n\n    // TODO: we could append toString of attributes() here?\n\n    return s.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#toString(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#toString(int).mjava","sourceNew":"  /** Used for debugging.  Format may suddenly change.\n   *\n   *  <p>Current format looks like\n   *  <code>_a(3.1):c45/4:[sorter=&lt;long: \"timestamp\"&gt;!]</code>, which means\n   *  the segment's name is <code>_a</code>; it was created with Lucene 3.1 (or\n   *  '?' if it's unknown); it's using compound file\n   *  format (would be <code>C</code> if not compound); it\n   *  has 45 documents; it has 4 deletions (this part is\n   *  left off when there are no deletions); it is sorted by the timestamp field\n   *  in descending order (this part is omitted for unsorted segments).</p>\n   */\n  public String toString(int delCount) {\n    StringBuilder s = new StringBuilder();\n    s.append(name).append('(').append(version == null ? \"?\" : version).append(')').append(':');\n    char cfs = getUseCompoundFile() ? 'c' : 'C';\n    s.append(cfs);\n\n    s.append(maxDoc);\n\n    if (delCount != 0) {\n      s.append('/').append(delCount);\n    }\n\n    // nocommit does search time \"do the right thing\" automatically when segment is sorted?\n\n    // nocommit remove sorter_key from diagnostics\n\n    if (indexSort != null) {\n      s.append(\":[indexSort=\");\n      s.append(indexSort);\n      s.append(']');\n    }\n\n    // TODO: we could append toString of attributes() here?\n\n    return s.toString();\n  }\n\n","sourceOld":"  /** Used for debugging.  Format may suddenly change.\n   *\n   *  <p>Current format looks like\n   *  <code>_a(3.1):c45/4:[sorter=&lt;long: \"timestamp\"&gt;!]</code>, which means\n   *  the segment's name is <code>_a</code>; it was created with Lucene 3.1 (or\n   *  '?' if it's unknown); it's using compound file\n   *  format (would be <code>C</code> if not compound); it\n   *  has 45 documents; it has 4 deletions (this part is\n   *  left off when there are no deletions); it is sorted by the timestamp field\n   *  in descending order (this part is omitted for unsorted segments).</p>\n   */\n  public String toString(int delCount) {\n    StringBuilder s = new StringBuilder();\n    s.append(name).append('(').append(version == null ? \"?\" : version).append(')').append(':');\n    char cfs = getUseCompoundFile() ? 'c' : 'C';\n    s.append(cfs);\n\n    s.append(maxDoc);\n\n    if (delCount != 0) {\n      s.append('/').append(delCount);\n    }\n\n    final String sorter_key = \"sorter\"; // SortingMergePolicy.SORTER_ID_PROP; // TODO: use this once we can import SortingMergePolicy (currently located in 'misc' instead of 'core')\n    final String sorter_val = diagnostics.get(sorter_key);\n    if (sorter_val != null) {\n      s.append(\":[\");\n      s.append(sorter_key);\n      s.append('=');\n      s.append(sorter_val);\n      s.append(']');\n    }\n\n    // TODO: we could append toString of attributes() here?\n\n    return s.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d8200beeffd3fa5155855f4cb8a8a5e38aeff14","date":1462698019,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#toString(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#toString(int).mjava","sourceNew":"  /** Used for debugging.  Format may suddenly change.\n   *\n   *  <p>Current format looks like\n   *  <code>_a(3.1):c45/4:[sorter=&lt;long: \"timestamp\"&gt;!]</code>, which means\n   *  the segment's name is <code>_a</code>; it was created with Lucene 3.1 (or\n   *  '?' if it's unknown); it's using compound file\n   *  format (would be <code>C</code> if not compound); it\n   *  has 45 documents; it has 4 deletions (this part is\n   *  left off when there are no deletions); it is sorted by the timestamp field\n   *  in descending order (this part is omitted for unsorted segments).</p>\n   */\n  public String toString(int delCount) {\n    StringBuilder s = new StringBuilder();\n    s.append(name).append('(').append(version == null ? \"?\" : version).append(')').append(':');\n    char cfs = getUseCompoundFile() ? 'c' : 'C';\n    s.append(cfs);\n\n    s.append(maxDoc);\n\n    if (delCount != 0) {\n      s.append('/').append(delCount);\n    }\n\n    if (indexSort != null) {\n      s.append(\":[indexSort=\");\n      s.append(indexSort);\n      s.append(']');\n    }\n\n    // TODO: we could append toString of attributes() here?\n\n    return s.toString();\n  }\n\n","sourceOld":"  /** Used for debugging.  Format may suddenly change.\n   *\n   *  <p>Current format looks like\n   *  <code>_a(3.1):c45/4:[sorter=&lt;long: \"timestamp\"&gt;!]</code>, which means\n   *  the segment's name is <code>_a</code>; it was created with Lucene 3.1 (or\n   *  '?' if it's unknown); it's using compound file\n   *  format (would be <code>C</code> if not compound); it\n   *  has 45 documents; it has 4 deletions (this part is\n   *  left off when there are no deletions); it is sorted by the timestamp field\n   *  in descending order (this part is omitted for unsorted segments).</p>\n   */\n  public String toString(int delCount) {\n    StringBuilder s = new StringBuilder();\n    s.append(name).append('(').append(version == null ? \"?\" : version).append(')').append(':');\n    char cfs = getUseCompoundFile() ? 'c' : 'C';\n    s.append(cfs);\n\n    s.append(maxDoc);\n\n    if (delCount != 0) {\n      s.append('/').append(delCount);\n    }\n\n    // nocommit does search time \"do the right thing\" automatically when segment is sorted?\n\n    // nocommit remove sorter_key from diagnostics\n\n    if (indexSort != null) {\n      s.append(\":[indexSort=\");\n      s.append(indexSort);\n      s.append(']');\n    }\n\n    // TODO: we could append toString of attributes() here?\n\n    return s.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#toString(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#toString(int).mjava","sourceNew":"  /** Used for debugging.  Format may suddenly change.\n   *\n   *  <p>Current format looks like\n   *  <code>_a(3.1):c45/4:[sorter=&lt;long: \"timestamp\"&gt;!]</code>, which means\n   *  the segment's name is <code>_a</code>; it was created with Lucene 3.1 (or\n   *  '?' if it's unknown); it's using compound file\n   *  format (would be <code>C</code> if not compound); it\n   *  has 45 documents; it has 4 deletions (this part is\n   *  left off when there are no deletions); it is sorted by the timestamp field\n   *  in descending order (this part is omitted for unsorted segments).</p>\n   */\n  public String toString(int delCount) {\n    StringBuilder s = new StringBuilder();\n    s.append(name).append('(').append(version == null ? \"?\" : version).append(')').append(':');\n    char cfs = getUseCompoundFile() ? 'c' : 'C';\n    s.append(cfs);\n\n    s.append(maxDoc);\n\n    if (delCount != 0) {\n      s.append('/').append(delCount);\n    }\n\n    if (indexSort != null) {\n      s.append(\":[indexSort=\");\n      s.append(indexSort);\n      s.append(']');\n    }\n\n    // TODO: we could append toString of attributes() here?\n\n    return s.toString();\n  }\n\n","sourceOld":"  /** Used for debugging.  Format may suddenly change.\n   *\n   *  <p>Current format looks like\n   *  <code>_a(3.1):c45/4:[sorter=&lt;long: \"timestamp\"&gt;!]</code>, which means\n   *  the segment's name is <code>_a</code>; it was created with Lucene 3.1 (or\n   *  '?' if it's unknown); it's using compound file\n   *  format (would be <code>C</code> if not compound); it\n   *  has 45 documents; it has 4 deletions (this part is\n   *  left off when there are no deletions); it is sorted by the timestamp field\n   *  in descending order (this part is omitted for unsorted segments).</p>\n   */\n  public String toString(int delCount) {\n    StringBuilder s = new StringBuilder();\n    s.append(name).append('(').append(version == null ? \"?\" : version).append(')').append(':');\n    char cfs = getUseCompoundFile() ? 'c' : 'C';\n    s.append(cfs);\n\n    s.append(maxDoc);\n\n    if (delCount != 0) {\n      s.append('/').append(delCount);\n    }\n\n    final String sorter_key = \"sorter\"; // SortingMergePolicy.SORTER_ID_PROP; // TODO: use this once we can import SortingMergePolicy (currently located in 'misc' instead of 'core')\n    final String sorter_val = diagnostics.get(sorter_key);\n    if (sorter_val != null) {\n      s.append(\":[\");\n      s.append(sorter_key);\n      s.append('=');\n      s.append(sorter_val);\n      s.append(']');\n    }\n\n    // TODO: we could append toString of attributes() here?\n\n    return s.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#toString(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#toString(int).mjava","sourceNew":"  /** Used for debugging.  Format may suddenly change.\n   *\n   *  <p>Current format looks like\n   *  <code>_a(3.1):c45/4:[sorter=&lt;long: \"timestamp\"&gt;!]</code>, which means\n   *  the segment's name is <code>_a</code>; it was created with Lucene 3.1 (or\n   *  '?' if it's unknown); it's using compound file\n   *  format (would be <code>C</code> if not compound); it\n   *  has 45 documents; it has 4 deletions (this part is\n   *  left off when there are no deletions); it is sorted by the timestamp field\n   *  in descending order (this part is omitted for unsorted segments).</p>\n   */\n  public String toString(int delCount) {\n    StringBuilder s = new StringBuilder();\n    s.append(name).append('(').append(version == null ? \"?\" : version).append(')').append(':');\n    char cfs = getUseCompoundFile() ? 'c' : 'C';\n    s.append(cfs);\n\n    s.append(maxDoc);\n\n    if (delCount != 0) {\n      s.append('/').append(delCount);\n    }\n\n    if (indexSort != null) {\n      s.append(\":[indexSort=\");\n      s.append(indexSort);\n      s.append(']');\n    }\n\n    // TODO: we could append toString of attributes() here?\n\n    return s.toString();\n  }\n\n","sourceOld":"  /** Used for debugging.  Format may suddenly change.\n   *\n   *  <p>Current format looks like\n   *  <code>_a(3.1):c45/4:[sorter=&lt;long: \"timestamp\"&gt;!]</code>, which means\n   *  the segment's name is <code>_a</code>; it was created with Lucene 3.1 (or\n   *  '?' if it's unknown); it's using compound file\n   *  format (would be <code>C</code> if not compound); it\n   *  has 45 documents; it has 4 deletions (this part is\n   *  left off when there are no deletions); it is sorted by the timestamp field\n   *  in descending order (this part is omitted for unsorted segments).</p>\n   */\n  public String toString(int delCount) {\n    StringBuilder s = new StringBuilder();\n    s.append(name).append('(').append(version == null ? \"?\" : version).append(')').append(':');\n    char cfs = getUseCompoundFile() ? 'c' : 'C';\n    s.append(cfs);\n\n    s.append(maxDoc);\n\n    if (delCount != 0) {\n      s.append('/').append(delCount);\n    }\n\n    final String sorter_key = \"sorter\"; // SortingMergePolicy.SORTER_ID_PROP; // TODO: use this once we can import SortingMergePolicy (currently located in 'misc' instead of 'core')\n    final String sorter_val = diagnostics.get(sorter_key);\n    if (sorter_val != null) {\n      s.append(\":[\");\n      s.append(sorter_key);\n      s.append('=');\n      s.append(sorter_val);\n      s.append(']');\n    }\n\n    // TODO: we could append toString of attributes() here?\n\n    return s.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#toString(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#toString(int).mjava","sourceNew":"  /** Used for debugging.  Format may suddenly change.\n   *\n   *  <p>Current format looks like\n   *  <code>_a(3.1):c45/4:[sorter=&lt;long: \"timestamp\"&gt;!]</code>, which means\n   *  the segment's name is <code>_a</code>; it was created with Lucene 3.1 (or\n   *  '?' if it's unknown); it's using compound file\n   *  format (would be <code>C</code> if not compound); it\n   *  has 45 documents; it has 4 deletions (this part is\n   *  left off when there are no deletions); it is sorted by the timestamp field\n   *  in descending order (this part is omitted for unsorted segments).</p>\n   */\n  public String toString(int delCount) {\n    StringBuilder s = new StringBuilder();\n    s.append(name).append('(').append(version == null ? \"?\" : version).append(')').append(':');\n    char cfs = getUseCompoundFile() ? 'c' : 'C';\n    s.append(cfs);\n\n    s.append(maxDoc);\n\n    if (delCount != 0) {\n      s.append('/').append(delCount);\n    }\n\n    if (indexSort != null) {\n      s.append(\":[indexSort=\");\n      s.append(indexSort);\n      s.append(']');\n    }\n\n    // TODO: we could append toString of attributes() here?\n\n    return s.toString();\n  }\n\n","sourceOld":"  /** Used for debugging.  Format may suddenly change.\n   *\n   *  <p>Current format looks like\n   *  <code>_a(3.1):c45/4:[sorter=&lt;long: \"timestamp\"&gt;!]</code>, which means\n   *  the segment's name is <code>_a</code>; it was created with Lucene 3.1 (or\n   *  '?' if it's unknown); it's using compound file\n   *  format (would be <code>C</code> if not compound); it\n   *  has 45 documents; it has 4 deletions (this part is\n   *  left off when there are no deletions); it is sorted by the timestamp field\n   *  in descending order (this part is omitted for unsorted segments).</p>\n   */\n  public String toString(int delCount) {\n    StringBuilder s = new StringBuilder();\n    s.append(name).append('(').append(version == null ? \"?\" : version).append(')').append(':');\n    char cfs = getUseCompoundFile() ? 'c' : 'C';\n    s.append(cfs);\n\n    s.append(maxDoc);\n\n    if (delCount != 0) {\n      s.append('/').append(delCount);\n    }\n\n    final String sorter_key = \"sorter\"; // SortingMergePolicy.SORTER_ID_PROP; // TODO: use this once we can import SortingMergePolicy (currently located in 'misc' instead of 'core')\n    final String sorter_val = diagnostics.get(sorter_key);\n    if (sorter_val != null) {\n      s.append(\":[\");\n      s.append(sorter_key);\n      s.append('=');\n      s.append(sorter_val);\n      s.append(']');\n    }\n\n    // TODO: we could append toString of attributes() here?\n\n    return s.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#toString(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#toString(int).mjava","sourceNew":"  /** Used for debugging.  Format may suddenly change.\n   *\n   *  <p>Current format looks like\n   *  <code>_a(3.1):c45/4:[sorter=&lt;long: \"timestamp\"&gt;!]</code>, which means\n   *  the segment's name is <code>_a</code>; it was created with Lucene 3.1 (or\n   *  '?' if it's unknown); it's using compound file\n   *  format (would be <code>C</code> if not compound); it\n   *  has 45 documents; it has 4 deletions (this part is\n   *  left off when there are no deletions); it is sorted by the timestamp field\n   *  in descending order (this part is omitted for unsorted segments).</p>\n   */\n  public String toString(int delCount) {\n    StringBuilder s = new StringBuilder();\n    s.append(name).append('(').append(version == null ? \"?\" : version).append(')').append(':');\n    char cfs = getUseCompoundFile() ? 'c' : 'C';\n    s.append(cfs);\n\n    s.append(maxDoc);\n\n    if (delCount != 0) {\n      s.append('/').append(delCount);\n    }\n\n    if (indexSort != null) {\n      s.append(\":[indexSort=\");\n      s.append(indexSort);\n      s.append(']');\n    }\n\n    // TODO: we could append toString of attributes() here?\n\n    return s.toString();\n  }\n\n","sourceOld":"  /** Used for debugging.  Format may suddenly change.\n   *\n   *  <p>Current format looks like\n   *  <code>_a(3.1):c45/4:[sorter=&lt;long: \"timestamp\"&gt;!]</code>, which means\n   *  the segment's name is <code>_a</code>; it was created with Lucene 3.1 (or\n   *  '?' if it's unknown); it's using compound file\n   *  format (would be <code>C</code> if not compound); it\n   *  has 45 documents; it has 4 deletions (this part is\n   *  left off when there are no deletions); it is sorted by the timestamp field\n   *  in descending order (this part is omitted for unsorted segments).</p>\n   */\n  public String toString(int delCount) {\n    StringBuilder s = new StringBuilder();\n    s.append(name).append('(').append(version == null ? \"?\" : version).append(')').append(':');\n    char cfs = getUseCompoundFile() ? 'c' : 'C';\n    s.append(cfs);\n\n    s.append(maxDoc);\n\n    if (delCount != 0) {\n      s.append('/').append(delCount);\n    }\n\n    final String sorter_key = \"sorter\"; // SortingMergePolicy.SORTER_ID_PROP; // TODO: use this once we can import SortingMergePolicy (currently located in 'misc' instead of 'core')\n    final String sorter_val = diagnostics.get(sorter_key);\n    if (sorter_val != null) {\n      s.append(\":[\");\n      s.append(sorter_key);\n      s.append('=');\n      s.append(sorter_val);\n      s.append(']');\n    }\n\n    // TODO: we could append toString of attributes() here?\n\n    return s.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaa6e525fae6fd6259993ee28fab14cb920fdf77","date":1543567369,"type":3,"author":"Namgyu Kim","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#toString(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#toString(int).mjava","sourceNew":"  /** Used for debugging.  Format may suddenly change.\n   *\n   *  <p>Current format looks like\n   *  <code>_a(3.1):c45/4:[sorter=&lt;long: \"timestamp\"&gt;!]</code>, which means\n   *  the segment's name is <code>_a</code>; it was created with Lucene 3.1 (or\n   *  '?' if it's unknown); it's using compound file\n   *  format (would be <code>C</code> if not compound); it\n   *  has 45 documents; it has 4 deletions (this part is\n   *  left off when there are no deletions); it is sorted by the timestamp field\n   *  in descending order (this part is omitted for unsorted segments).</p>\n   */\n  public String toString(int delCount) {\n    StringBuilder s = new StringBuilder();\n    s.append(name).append('(').append(version == null ? \"?\" : version).append(')').append(':');\n    char cfs = getUseCompoundFile() ? 'c' : 'C';\n    s.append(cfs);\n\n    s.append(maxDoc);\n\n    if (delCount != 0) {\n      s.append('/').append(delCount);\n    }\n\n    if (indexSort != null) {\n      s.append(\":[indexSort=\");\n      s.append(indexSort);\n      s.append(']');\n    }\n\n    if (!diagnostics.isEmpty()) {\n      s.append(\":[diagnostics=\");\n      s.append(diagnostics.toString());\n      s.append(']');\n    }\n\n    if (!attributes.isEmpty()) {\n      s.append(\":[attributes=\");\n      s.append(attributes.toString());\n      s.append(']');\n    }\n\n    return s.toString();\n  }\n\n","sourceOld":"  /** Used for debugging.  Format may suddenly change.\n   *\n   *  <p>Current format looks like\n   *  <code>_a(3.1):c45/4:[sorter=&lt;long: \"timestamp\"&gt;!]</code>, which means\n   *  the segment's name is <code>_a</code>; it was created with Lucene 3.1 (or\n   *  '?' if it's unknown); it's using compound file\n   *  format (would be <code>C</code> if not compound); it\n   *  has 45 documents; it has 4 deletions (this part is\n   *  left off when there are no deletions); it is sorted by the timestamp field\n   *  in descending order (this part is omitted for unsorted segments).</p>\n   */\n  public String toString(int delCount) {\n    StringBuilder s = new StringBuilder();\n    s.append(name).append('(').append(version == null ? \"?\" : version).append(')').append(':');\n    char cfs = getUseCompoundFile() ? 'c' : 'C';\n    s.append(cfs);\n\n    s.append(maxDoc);\n\n    if (delCount != 0) {\n      s.append('/').append(delCount);\n    }\n\n    if (indexSort != null) {\n      s.append(\":[indexSort=\");\n      s.append(indexSort);\n      s.append(']');\n    }\n\n    // TODO: we could append toString of attributes() here?\n\n    return s.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a3f89986d299512248eedcbdc3530fbbbb5235e3":["b0267c69e2456a3477a1ad785723f2135da3117e"],"fba839b7548159227edcb740033d0f814b323d8d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b0267c69e2456a3477a1ad785723f2135da3117e":["fba839b7548159227edcb740033d0f814b323d8d"],"0ad30c6a479e764150a3316e57263319775f1df2":["a3f89986d299512248eedcbdc3530fbbbb5235e3","3d33e731a93d4b57e662ff094f64f94a745422d4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a3f89986d299512248eedcbdc3530fbbbb5235e3","d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a3f89986d299512248eedcbdc3530fbbbb5235e3","0ad30c6a479e764150a3316e57263319775f1df2"],"aaa6e525fae6fd6259993ee28fab14cb920fdf77":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["fba839b7548159227edcb740033d0f814b323d8d","b0267c69e2456a3477a1ad785723f2135da3117e"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["a3f89986d299512248eedcbdc3530fbbbb5235e3"],"b06445ae1731e049327712db0454e5643ca9b7fe":["fba839b7548159227edcb740033d0f814b323d8d","b0267c69e2456a3477a1ad785723f2135da3117e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6d8200beeffd3fa5155855f4cb8a8a5e38aeff14":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["a3f89986d299512248eedcbdc3530fbbbb5235e3","6d8200beeffd3fa5155855f4cb8a8a5e38aeff14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aaa6e525fae6fd6259993ee28fab14cb920fdf77"]},"commit2Childs":{"a3f89986d299512248eedcbdc3530fbbbb5235e3":["0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","ceaef6cfc68c8ab22a684192e469a8280f9e6e70","3d33e731a93d4b57e662ff094f64f94a745422d4"],"fba839b7548159227edcb740033d0f814b323d8d":["b0267c69e2456a3477a1ad785723f2135da3117e","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe"],"b0267c69e2456a3477a1ad785723f2135da3117e":["a3f89986d299512248eedcbdc3530fbbbb5235e3","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","aaa6e525fae6fd6259993ee28fab14cb920fdf77"],"aaa6e525fae6fd6259993ee28fab14cb920fdf77":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["6d8200beeffd3fa5155855f4cb8a8a5e38aeff14"],"b06445ae1731e049327712db0454e5643ca9b7fe":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fba839b7548159227edcb740033d0f814b323d8d"],"6d8200beeffd3fa5155855f4cb8a8a5e38aeff14":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}