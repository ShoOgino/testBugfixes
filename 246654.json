{"path":"contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizer#incrementToken().mjava","commits":[{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizer#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  /*\n  * (non-Javadoc)\n  *\n  * @see org.apache.lucene.analysis.TokenStream#next()\n  */\n  public final boolean incrementToken() throws IOException {\n    if (tokens != null && tokens.hasNext()){\n      AttributeSource.State state = (AttributeSource.State) tokens.next();\n      restoreState(state);\n      return true;\n    }\n    int tokenType = scanner.getNextToken();\n\n    if (tokenType == WikipediaTokenizerImpl.YYEOF) {\n      return false;\n    }\n    String type = WikipediaTokenizerImpl.TOKEN_TYPES[tokenType];\n    if (tokenOutput == TOKENS_ONLY || untokenizedTypes.contains(type) == false){\n      setupToken();\n    } else if (tokenOutput == UNTOKENIZED_ONLY && untokenizedTypes.contains(type) == true){\n      collapseTokens(tokenType);\n\n    }\n    else if (tokenOutput == BOTH){\n      //collapse into a single token, add it to tokens AND output the individual tokens\n      //output the untokenized Token first\n      collapseAndSaveTokens(tokenType, type);\n    }\n    posIncrAtt.setPositionIncrement(scanner.getPositionIncrement());\n    typeAtt.setType(type);\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91d0e16ae1a83f5658ad4d16453fb88650460140","date":1250287302,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizer#incrementToken().mjava","pathOld":"contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizer#incrementToken().mjava","sourceNew":"  /*\n  * (non-Javadoc)\n  *\n  * @see org.apache.lucene.analysis.TokenStream#next()\n  */\n  public final boolean incrementToken() throws IOException {\n    if (tokens != null && tokens.hasNext()){\n      AttributeSource.State state = (AttributeSource.State) tokens.next();\n      restoreState(state);\n      return true;\n    }\n    clearAttributes();\n    int tokenType = scanner.getNextToken();\n\n    if (tokenType == WikipediaTokenizerImpl.YYEOF) {\n      return false;\n    }\n    String type = WikipediaTokenizerImpl.TOKEN_TYPES[tokenType];\n    if (tokenOutput == TOKENS_ONLY || untokenizedTypes.contains(type) == false){\n      setupToken();\n    } else if (tokenOutput == UNTOKENIZED_ONLY && untokenizedTypes.contains(type) == true){\n      collapseTokens(tokenType);\n\n    }\n    else if (tokenOutput == BOTH){\n      //collapse into a single token, add it to tokens AND output the individual tokens\n      //output the untokenized Token first\n      collapseAndSaveTokens(tokenType, type);\n    }\n    posIncrAtt.setPositionIncrement(scanner.getPositionIncrement());\n    typeAtt.setType(type);\n    return true;\n  }\n\n","sourceOld":"  /*\n  * (non-Javadoc)\n  *\n  * @see org.apache.lucene.analysis.TokenStream#next()\n  */\n  public final boolean incrementToken() throws IOException {\n    if (tokens != null && tokens.hasNext()){\n      AttributeSource.State state = (AttributeSource.State) tokens.next();\n      restoreState(state);\n      return true;\n    }\n    int tokenType = scanner.getNextToken();\n\n    if (tokenType == WikipediaTokenizerImpl.YYEOF) {\n      return false;\n    }\n    String type = WikipediaTokenizerImpl.TOKEN_TYPES[tokenType];\n    if (tokenOutput == TOKENS_ONLY || untokenizedTypes.contains(type) == false){\n      setupToken();\n    } else if (tokenOutput == UNTOKENIZED_ONLY && untokenizedTypes.contains(type) == true){\n      collapseTokens(tokenType);\n\n    }\n    else if (tokenOutput == BOTH){\n      //collapse into a single token, add it to tokens AND output the individual tokens\n      //output the untokenized Token first\n      collapseAndSaveTokens(tokenType, type);\n    }\n    posIncrAtt.setPositionIncrement(scanner.getPositionIncrement());\n    typeAtt.setType(type);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizer#incrementToken().mjava","pathOld":"contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizer#incrementToken().mjava","sourceNew":"  /*\n  * (non-Javadoc)\n  *\n  * @see org.apache.lucene.analysis.TokenStream#next()\n  */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    if (tokens != null && tokens.hasNext()){\n      AttributeSource.State state = (AttributeSource.State) tokens.next();\n      restoreState(state);\n      return true;\n    }\n    clearAttributes();\n    int tokenType = scanner.getNextToken();\n\n    if (tokenType == WikipediaTokenizerImpl.YYEOF) {\n      return false;\n    }\n    String type = WikipediaTokenizerImpl.TOKEN_TYPES[tokenType];\n    if (tokenOutput == TOKENS_ONLY || untokenizedTypes.contains(type) == false){\n      setupToken();\n    } else if (tokenOutput == UNTOKENIZED_ONLY && untokenizedTypes.contains(type) == true){\n      collapseTokens(tokenType);\n\n    }\n    else if (tokenOutput == BOTH){\n      //collapse into a single token, add it to tokens AND output the individual tokens\n      //output the untokenized Token first\n      collapseAndSaveTokens(tokenType, type);\n    }\n    posIncrAtt.setPositionIncrement(scanner.getPositionIncrement());\n    typeAtt.setType(type);\n    return true;\n  }\n\n","sourceOld":"  /*\n  * (non-Javadoc)\n  *\n  * @see org.apache.lucene.analysis.TokenStream#next()\n  */\n  public final boolean incrementToken() throws IOException {\n    if (tokens != null && tokens.hasNext()){\n      AttributeSource.State state = (AttributeSource.State) tokens.next();\n      restoreState(state);\n      return true;\n    }\n    clearAttributes();\n    int tokenType = scanner.getNextToken();\n\n    if (tokenType == WikipediaTokenizerImpl.YYEOF) {\n      return false;\n    }\n    String type = WikipediaTokenizerImpl.TOKEN_TYPES[tokenType];\n    if (tokenOutput == TOKENS_ONLY || untokenizedTypes.contains(type) == false){\n      setupToken();\n    } else if (tokenOutput == UNTOKENIZED_ONLY && untokenizedTypes.contains(type) == true){\n      collapseTokens(tokenType);\n\n    }\n    else if (tokenOutput == BOTH){\n      //collapse into a single token, add it to tokens AND output the individual tokens\n      //output the untokenized Token first\n      collapseAndSaveTokens(tokenType, type);\n    }\n    posIncrAtt.setPositionIncrement(scanner.getPositionIncrement());\n    typeAtt.setType(type);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69d87d34a81230de56333f52f590caeb6d80667","date":1257848306,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizer#incrementToken().mjava","pathOld":"contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizer#incrementToken().mjava","sourceNew":"  /*\n  * (non-Javadoc)\n  *\n  * @see org.apache.lucene.analysis.TokenStream#next()\n  */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    if (tokens != null && tokens.hasNext()){\n      AttributeSource.State state = tokens.next();\n      restoreState(state);\n      return true;\n    }\n    clearAttributes();\n    int tokenType = scanner.getNextToken();\n\n    if (tokenType == WikipediaTokenizerImpl.YYEOF) {\n      return false;\n    }\n    String type = WikipediaTokenizerImpl.TOKEN_TYPES[tokenType];\n    if (tokenOutput == TOKENS_ONLY || untokenizedTypes.contains(type) == false){\n      setupToken();\n    } else if (tokenOutput == UNTOKENIZED_ONLY && untokenizedTypes.contains(type) == true){\n      collapseTokens(tokenType);\n\n    }\n    else if (tokenOutput == BOTH){\n      //collapse into a single token, add it to tokens AND output the individual tokens\n      //output the untokenized Token first\n      collapseAndSaveTokens(tokenType, type);\n    }\n    posIncrAtt.setPositionIncrement(scanner.getPositionIncrement());\n    typeAtt.setType(type);\n    return true;\n  }\n\n","sourceOld":"  /*\n  * (non-Javadoc)\n  *\n  * @see org.apache.lucene.analysis.TokenStream#next()\n  */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    if (tokens != null && tokens.hasNext()){\n      AttributeSource.State state = (AttributeSource.State) tokens.next();\n      restoreState(state);\n      return true;\n    }\n    clearAttributes();\n    int tokenType = scanner.getNextToken();\n\n    if (tokenType == WikipediaTokenizerImpl.YYEOF) {\n      return false;\n    }\n    String type = WikipediaTokenizerImpl.TOKEN_TYPES[tokenType];\n    if (tokenOutput == TOKENS_ONLY || untokenizedTypes.contains(type) == false){\n      setupToken();\n    } else if (tokenOutput == UNTOKENIZED_ONLY && untokenizedTypes.contains(type) == true){\n      collapseTokens(tokenType);\n\n    }\n    else if (tokenOutput == BOTH){\n      //collapse into a single token, add it to tokens AND output the individual tokens\n      //output the untokenized Token first\n      collapseAndSaveTokens(tokenType, type);\n    }\n    posIncrAtt.setPositionIncrement(scanner.getPositionIncrement());\n    typeAtt.setType(type);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizer#incrementToken().mjava","pathOld":"contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizer#incrementToken().mjava","sourceNew":"  /*\n  * (non-Javadoc)\n  *\n  * @see org.apache.lucene.analysis.TokenStream#next()\n  */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    if (tokens != null && tokens.hasNext()){\n      AttributeSource.State state = tokens.next();\n      restoreState(state);\n      return true;\n    }\n    clearAttributes();\n    int tokenType = scanner.getNextToken();\n\n    if (tokenType == WikipediaTokenizerImpl.YYEOF) {\n      return false;\n    }\n    String type = WikipediaTokenizerImpl.TOKEN_TYPES[tokenType];\n    if (tokenOutput == TOKENS_ONLY || untokenizedTypes.contains(type) == false){\n      setupToken();\n    } else if (tokenOutput == UNTOKENIZED_ONLY && untokenizedTypes.contains(type) == true){\n      collapseTokens(tokenType);\n\n    }\n    else if (tokenOutput == BOTH){\n      //collapse into a single token, add it to tokens AND output the individual tokens\n      //output the untokenized Token first\n      collapseAndSaveTokens(tokenType, type);\n    }\n    posIncrAtt.setPositionIncrement(scanner.getPositionIncrement());\n    typeAtt.setType(type);\n    return true;\n  }\n\n","sourceOld":"  /*\n  * (non-Javadoc)\n  *\n  * @see org.apache.lucene.analysis.TokenStream#next()\n  */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    if (tokens != null && tokens.hasNext()){\n      AttributeSource.State state = tokens.next();\n      restoreState(state);\n      return true;\n    }\n    clearAttributes();\n    int tokenType = scanner.getNextToken();\n\n    if (tokenType == WikipediaTokenizerImpl.YYEOF) {\n      return false;\n    }\n    String type = WikipediaTokenizerImpl.TOKEN_TYPES[tokenType];\n    if (tokenOutput == TOKENS_ONLY || untokenizedTypes.contains(type) == false){\n      setupToken();\n    } else if (tokenOutput == UNTOKENIZED_ONLY && untokenizedTypes.contains(type) == true){\n      collapseTokens(tokenType);\n\n    }\n    else if (tokenOutput == BOTH){\n      //collapse into a single token, add it to tokens AND output the individual tokens\n      //output the untokenized Token first\n      collapseAndSaveTokens(tokenType, type);\n    }\n    posIncrAtt.setPositionIncrement(scanner.getPositionIncrement());\n    typeAtt.setType(type);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c69d87d34a81230de56333f52f590caeb6d80667":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"91d0e16ae1a83f5658ad4d16453fb88650460140":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b5756469957918cac40a831acec9cf01c8c2bb3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["91d0e16ae1a83f5658ad4d16453fb88650460140"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c69d87d34a81230de56333f52f590caeb6d80667"]},"commit2Childs":{"c69d87d34a81230de56333f52f590caeb6d80667":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"91d0e16ae1a83f5658ad4d16453fb88650460140":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["91d0e16ae1a83f5658ad4d16453fb88650460140"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["c69d87d34a81230de56333f52f590caeb6d80667"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}