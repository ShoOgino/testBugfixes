{"path":"lucene/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,boolean,boolean,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,boolean,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,boolean,boolean,boolean).mjava","sourceNew":"  void update(boolean isIndexed, boolean storeTermVector, boolean storePositionWithTermVector, \n              boolean storeOffsetWithTermVector, boolean omitNorms, boolean storePayloads, boolean omitTermFreqAndPositions) {\n    if (this.isIndexed != isIndexed) {\n      this.isIndexed = true;                      // once indexed, always index\n    }\n    if (isIndexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePositionWithTermVector != storePositionWithTermVector) {\n        this.storePositionWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storeOffsetWithTermVector != storeOffsetWithTermVector) {\n        this.storeOffsetWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = false;                // once norms are stored, always store\n      }\n      if (this.omitTermFreqAndPositions != omitTermFreqAndPositions) {\n        this.omitTermFreqAndPositions = true;                // if one require omitTermFreqAndPositions at least once, it remains off for life\n      }\n    }\n  }\n\n","sourceOld":"  void update(boolean isIndexed, boolean storeTermVector, boolean storePositionWithTermVector, \n              boolean storeOffsetWithTermVector, boolean omitNorms, boolean storePayloads, boolean omitTermFreqAndPositions) {\n    if (this.isIndexed != isIndexed) {\n      this.isIndexed = true;                      // once indexed, always index\n    }\n    if (isIndexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePositionWithTermVector != storePositionWithTermVector) {\n        this.storePositionWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storeOffsetWithTermVector != storeOffsetWithTermVector) {\n        this.storeOffsetWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = false;                // once norms are stored, always store\n      }\n      if (this.omitTermFreqAndPositions != omitTermFreqAndPositions) {\n        this.omitTermFreqAndPositions = true;                // if one require omitTermFreqAndPositions at least once, it remains off for life\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05","date":1294877328,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,boolean,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,boolean,boolean,boolean).mjava","sourceNew":"  void update(boolean isIndexed, boolean storeTermVector, boolean storePositionWithTermVector, \n              boolean storeOffsetWithTermVector, boolean omitNorms, boolean storePayloads, boolean omitTermFreqAndPositions) {\n    if (this.isIndexed != isIndexed) {\n      this.isIndexed = true;                      // once indexed, always index\n    }\n    if (isIndexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePositionWithTermVector != storePositionWithTermVector) {\n        this.storePositionWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storeOffsetWithTermVector != storeOffsetWithTermVector) {\n        this.storeOffsetWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n      if (this.omitTermFreqAndPositions != omitTermFreqAndPositions) {\n        this.omitTermFreqAndPositions = true;                // if one require omitTermFreqAndPositions at least once, it remains off for life\n      }\n    }\n  }\n\n","sourceOld":"  void update(boolean isIndexed, boolean storeTermVector, boolean storePositionWithTermVector, \n              boolean storeOffsetWithTermVector, boolean omitNorms, boolean storePayloads, boolean omitTermFreqAndPositions) {\n    if (this.isIndexed != isIndexed) {\n      this.isIndexed = true;                      // once indexed, always index\n    }\n    if (isIndexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePositionWithTermVector != storePositionWithTermVector) {\n        this.storePositionWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storeOffsetWithTermVector != storeOffsetWithTermVector) {\n        this.storeOffsetWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = false;                // once norms are stored, always store\n      }\n      if (this.omitTermFreqAndPositions != omitTermFreqAndPositions) {\n        this.omitTermFreqAndPositions = true;                // if one require omitTermFreqAndPositions at least once, it remains off for life\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,boolean,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,boolean,boolean,boolean).mjava","sourceNew":"  void update(boolean isIndexed, boolean storeTermVector, boolean storePositionWithTermVector, \n              boolean storeOffsetWithTermVector, boolean omitNorms, boolean storePayloads, boolean omitTermFreqAndPositions) {\n    if (this.isIndexed != isIndexed) {\n      this.isIndexed = true;                      // once indexed, always index\n    }\n    if (isIndexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePositionWithTermVector != storePositionWithTermVector) {\n        this.storePositionWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storeOffsetWithTermVector != storeOffsetWithTermVector) {\n        this.storeOffsetWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n      if (this.omitTermFreqAndPositions != omitTermFreqAndPositions) {\n        this.omitTermFreqAndPositions = true;                // if one require omitTermFreqAndPositions at least once, it remains off for life\n      }\n    }\n  }\n\n","sourceOld":"  void update(boolean isIndexed, boolean storeTermVector, boolean storePositionWithTermVector, \n              boolean storeOffsetWithTermVector, boolean omitNorms, boolean storePayloads, boolean omitTermFreqAndPositions) {\n    if (this.isIndexed != isIndexed) {\n      this.isIndexed = true;                      // once indexed, always index\n    }\n    if (isIndexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePositionWithTermVector != storePositionWithTermVector) {\n        this.storePositionWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storeOffsetWithTermVector != storeOffsetWithTermVector) {\n        this.storeOffsetWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = false;                // once norms are stored, always store\n      }\n      if (this.omitTermFreqAndPositions != omitTermFreqAndPositions) {\n        this.omitTermFreqAndPositions = true;                // if one require omitTermFreqAndPositions at least once, it remains off for life\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,boolean,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,boolean,boolean,boolean).mjava","sourceNew":"  void update(boolean isIndexed, boolean storeTermVector, boolean storePositionWithTermVector, \n              boolean storeOffsetWithTermVector, boolean omitNorms, boolean storePayloads, boolean omitTermFreqAndPositions) {\n    if (this.isIndexed != isIndexed) {\n      this.isIndexed = true;                      // once indexed, always index\n    }\n    if (isIndexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePositionWithTermVector != storePositionWithTermVector) {\n        this.storePositionWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storeOffsetWithTermVector != storeOffsetWithTermVector) {\n        this.storeOffsetWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n      if (this.omitTermFreqAndPositions != omitTermFreqAndPositions) {\n        this.omitTermFreqAndPositions = true;                // if one require omitTermFreqAndPositions at least once, it remains off for life\n      }\n    }\n  }\n\n","sourceOld":"  void update(boolean isIndexed, boolean storeTermVector, boolean storePositionWithTermVector, \n              boolean storeOffsetWithTermVector, boolean omitNorms, boolean storePayloads, boolean omitTermFreqAndPositions) {\n    if (this.isIndexed != isIndexed) {\n      this.isIndexed = true;                      // once indexed, always index\n    }\n    if (isIndexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePositionWithTermVector != storePositionWithTermVector) {\n        this.storePositionWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storeOffsetWithTermVector != storeOffsetWithTermVector) {\n        this.storeOffsetWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = false;                // once norms are stored, always store\n      }\n      if (this.omitTermFreqAndPositions != omitTermFreqAndPositions) {\n        this.omitTermFreqAndPositions = true;                // if one require omitTermFreqAndPositions at least once, it remains off for life\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e92442af786151ee55bc283eb472f629e3c7b52b","date":1301070252,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,boolean,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,boolean,boolean,boolean).mjava","sourceNew":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean isIndexed, boolean storeTermVector, boolean storePositionWithTermVector, \n              boolean storeOffsetWithTermVector, boolean omitNorms, boolean storePayloads, boolean omitTermFreqAndPositions) {\n    if (this.isIndexed != isIndexed) {\n      this.isIndexed = true;                      // once indexed, always index\n    }\n    if (isIndexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePositionWithTermVector != storePositionWithTermVector) {\n        this.storePositionWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storeOffsetWithTermVector != storeOffsetWithTermVector) {\n        this.storeOffsetWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n      if (this.omitTermFreqAndPositions != omitTermFreqAndPositions) {\n        this.omitTermFreqAndPositions = true;                // if one require omitTermFreqAndPositions at least once, it remains off for life\n      }\n    }\n  }\n\n","sourceOld":"  void update(boolean isIndexed, boolean storeTermVector, boolean storePositionWithTermVector, \n              boolean storeOffsetWithTermVector, boolean omitNorms, boolean storePayloads, boolean omitTermFreqAndPositions) {\n    if (this.isIndexed != isIndexed) {\n      this.isIndexed = true;                      // once indexed, always index\n    }\n    if (isIndexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePositionWithTermVector != storePositionWithTermVector) {\n        this.storePositionWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storeOffsetWithTermVector != storeOffsetWithTermVector) {\n        this.storeOffsetWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n      if (this.omitTermFreqAndPositions != omitTermFreqAndPositions) {\n        this.omitTermFreqAndPositions = true;                // if one require omitTermFreqAndPositions at least once, it remains off for life\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,boolean,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,boolean,boolean,boolean).mjava","sourceNew":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean isIndexed, boolean storeTermVector, boolean storePositionWithTermVector, \n              boolean storeOffsetWithTermVector, boolean omitNorms, boolean storePayloads, boolean omitTermFreqAndPositions) {\n    if (this.isIndexed != isIndexed) {\n      this.isIndexed = true;                      // once indexed, always index\n    }\n    if (isIndexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePositionWithTermVector != storePositionWithTermVector) {\n        this.storePositionWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storeOffsetWithTermVector != storeOffsetWithTermVector) {\n        this.storeOffsetWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n      if (this.omitTermFreqAndPositions != omitTermFreqAndPositions) {\n        this.omitTermFreqAndPositions = true;                // if one require omitTermFreqAndPositions at least once, it remains off for life\n      }\n    }\n  }\n\n","sourceOld":"  void update(boolean isIndexed, boolean storeTermVector, boolean storePositionWithTermVector, \n              boolean storeOffsetWithTermVector, boolean omitNorms, boolean storePayloads, boolean omitTermFreqAndPositions) {\n    if (this.isIndexed != isIndexed) {\n      this.isIndexed = true;                      // once indexed, always index\n    }\n    if (isIndexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePositionWithTermVector != storePositionWithTermVector) {\n        this.storePositionWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storeOffsetWithTermVector != storeOffsetWithTermVector) {\n        this.storeOffsetWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n      if (this.omitTermFreqAndPositions != omitTermFreqAndPositions) {\n        this.omitTermFreqAndPositions = true;                // if one require omitTermFreqAndPositions at least once, it remains off for life\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,boolean,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,boolean,boolean,boolean).mjava","sourceNew":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean isIndexed, boolean storeTermVector, boolean storePositionWithTermVector, \n              boolean storeOffsetWithTermVector, boolean omitNorms, boolean storePayloads, boolean omitTermFreqAndPositions) {\n    if (this.isIndexed != isIndexed) {\n      this.isIndexed = true;                      // once indexed, always index\n    }\n    if (isIndexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePositionWithTermVector != storePositionWithTermVector) {\n        this.storePositionWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storeOffsetWithTermVector != storeOffsetWithTermVector) {\n        this.storeOffsetWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n      if (this.omitTermFreqAndPositions != omitTermFreqAndPositions) {\n        this.omitTermFreqAndPositions = true;                // if one require omitTermFreqAndPositions at least once, it remains off for life\n      }\n    }\n  }\n\n","sourceOld":"  void update(boolean isIndexed, boolean storeTermVector, boolean storePositionWithTermVector, \n              boolean storeOffsetWithTermVector, boolean omitNorms, boolean storePayloads, boolean omitTermFreqAndPositions) {\n    if (this.isIndexed != isIndexed) {\n      this.isIndexed = true;                      // once indexed, always index\n    }\n    if (isIndexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePositionWithTermVector != storePositionWithTermVector) {\n        this.storePositionWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storeOffsetWithTermVector != storeOffsetWithTermVector) {\n        this.storeOffsetWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n      if (this.omitTermFreqAndPositions != omitTermFreqAndPositions) {\n        this.omitTermFreqAndPositions = true;                // if one require omitTermFreqAndPositions at least once, it remains off for life\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e19ec8535092055101db3ede419e136b73d235ac","date":1302777181,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,boolean,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,boolean,boolean,boolean).mjava","sourceNew":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean isIndexed, boolean storeTermVector, boolean storePositionWithTermVector, \n              boolean storeOffsetWithTermVector, boolean omitNorms, boolean storePayloads, boolean omitTermFreqAndPositions) {\n\n    if (this.isIndexed != isIndexed) {\n      this.isIndexed = true;                      // once indexed, always index\n    }\n    if (isIndexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePositionWithTermVector != storePositionWithTermVector) {\n        this.storePositionWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storeOffsetWithTermVector != storeOffsetWithTermVector) {\n        this.storeOffsetWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n      if (this.omitTermFreqAndPositions != omitTermFreqAndPositions) {\n        this.omitTermFreqAndPositions = true;                // if one require omitTermFreqAndPositions at least once, it remains off for life\n        this.storePayloads = false;\n      }\n    }\n    assert !this.omitTermFreqAndPositions || !this.storePayloads;\n  }\n\n","sourceOld":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean isIndexed, boolean storeTermVector, boolean storePositionWithTermVector, \n              boolean storeOffsetWithTermVector, boolean omitNorms, boolean storePayloads, boolean omitTermFreqAndPositions) {\n    if (this.isIndexed != isIndexed) {\n      this.isIndexed = true;                      // once indexed, always index\n    }\n    if (isIndexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePositionWithTermVector != storePositionWithTermVector) {\n        this.storePositionWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storeOffsetWithTermVector != storeOffsetWithTermVector) {\n        this.storeOffsetWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n      if (this.omitTermFreqAndPositions != omitTermFreqAndPositions) {\n        this.omitTermFreqAndPositions = true;                // if one require omitTermFreqAndPositions at least once, it remains off for life\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1eb46686a27187e42311e77666a2c7026f461ebc","date":1302858020,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,boolean,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,boolean,boolean,boolean).mjava","sourceNew":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean isIndexed, boolean storeTermVector, boolean storePositionWithTermVector, \n              boolean storeOffsetWithTermVector, boolean omitNorms, boolean storePayloads, boolean omitTermFreqAndPositions) {\n\n    if (this.isIndexed != isIndexed) {\n      this.isIndexed = true;                      // once indexed, always index\n    }\n    if (isIndexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePositionWithTermVector != storePositionWithTermVector) {\n        this.storePositionWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storeOffsetWithTermVector != storeOffsetWithTermVector) {\n        this.storeOffsetWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n      if (this.omitTermFreqAndPositions != omitTermFreqAndPositions) {\n        this.omitTermFreqAndPositions = true;                // if one require omitTermFreqAndPositions at least once, it remains off for life\n        this.storePayloads = false;\n      }\n    }\n    assert !this.omitTermFreqAndPositions || !this.storePayloads;\n  }\n\n","sourceOld":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean isIndexed, boolean storeTermVector, boolean storePositionWithTermVector, \n              boolean storeOffsetWithTermVector, boolean omitNorms, boolean storePayloads, boolean omitTermFreqAndPositions) {\n    if (this.isIndexed != isIndexed) {\n      this.isIndexed = true;                      // once indexed, always index\n    }\n    if (isIndexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePositionWithTermVector != storePositionWithTermVector) {\n        this.storePositionWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storeOffsetWithTermVector != storeOffsetWithTermVector) {\n        this.storeOffsetWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n      if (this.omitTermFreqAndPositions != omitTermFreqAndPositions) {\n        this.omitTermFreqAndPositions = true;                // if one require omitTermFreqAndPositions at least once, it remains off for life\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,boolean,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,boolean,boolean,boolean).mjava","sourceNew":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean isIndexed, boolean storeTermVector, boolean storePositionWithTermVector, \n              boolean storeOffsetWithTermVector, boolean omitNorms, boolean storePayloads, boolean omitTermFreqAndPositions) {\n\n    if (this.isIndexed != isIndexed) {\n      this.isIndexed = true;                      // once indexed, always index\n    }\n    if (isIndexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePositionWithTermVector != storePositionWithTermVector) {\n        this.storePositionWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storeOffsetWithTermVector != storeOffsetWithTermVector) {\n        this.storeOffsetWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n      if (this.omitTermFreqAndPositions != omitTermFreqAndPositions) {\n        this.omitTermFreqAndPositions = true;                // if one require omitTermFreqAndPositions at least once, it remains off for life\n        this.storePayloads = false;\n      }\n    }\n    assert !this.omitTermFreqAndPositions || !this.storePayloads;\n  }\n\n","sourceOld":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean isIndexed, boolean storeTermVector, boolean storePositionWithTermVector, \n              boolean storeOffsetWithTermVector, boolean omitNorms, boolean storePayloads, boolean omitTermFreqAndPositions) {\n    if (this.isIndexed != isIndexed) {\n      this.isIndexed = true;                      // once indexed, always index\n    }\n    if (isIndexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePositionWithTermVector != storePositionWithTermVector) {\n        this.storePositionWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storeOffsetWithTermVector != storeOffsetWithTermVector) {\n        this.storeOffsetWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n      if (this.omitTermFreqAndPositions != omitTermFreqAndPositions) {\n        this.omitTermFreqAndPositions = true;                // if one require omitTermFreqAndPositions at least once, it remains off for life\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,boolean,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,boolean,boolean,boolean).mjava","sourceNew":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean isIndexed, boolean storeTermVector, boolean storePositionWithTermVector, \n              boolean storeOffsetWithTermVector, boolean omitNorms, boolean storePayloads, boolean omitTermFreqAndPositions) {\n\n    if (this.isIndexed != isIndexed) {\n      this.isIndexed = true;                      // once indexed, always index\n    }\n    if (isIndexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePositionWithTermVector != storePositionWithTermVector) {\n        this.storePositionWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storeOffsetWithTermVector != storeOffsetWithTermVector) {\n        this.storeOffsetWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n      if (this.omitTermFreqAndPositions != omitTermFreqAndPositions) {\n        this.omitTermFreqAndPositions = true;                // if one require omitTermFreqAndPositions at least once, it remains off for life\n        this.storePayloads = false;\n      }\n    }\n    assert !this.omitTermFreqAndPositions || !this.storePayloads;\n  }\n\n","sourceOld":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean isIndexed, boolean storeTermVector, boolean storePositionWithTermVector, \n              boolean storeOffsetWithTermVector, boolean omitNorms, boolean storePayloads, boolean omitTermFreqAndPositions) {\n    if (this.isIndexed != isIndexed) {\n      this.isIndexed = true;                      // once indexed, always index\n    }\n    if (isIndexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePositionWithTermVector != storePositionWithTermVector) {\n        this.storePositionWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storeOffsetWithTermVector != storeOffsetWithTermVector) {\n        this.storeOffsetWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n      if (this.omitTermFreqAndPositions != omitTermFreqAndPositions) {\n        this.omitTermFreqAndPositions = true;                // if one require omitTermFreqAndPositions at least once, it remains off for life\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,boolean,boolean,IndexOptions).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,boolean,boolean,boolean).mjava","sourceNew":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean isIndexed, boolean storeTermVector, boolean storePositionWithTermVector, \n              boolean storeOffsetWithTermVector, boolean omitNorms, boolean storePayloads, IndexOptions indexOptions) {\n\n    if (this.isIndexed != isIndexed) {\n      this.isIndexed = true;                      // once indexed, always index\n    }\n    if (isIndexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePositionWithTermVector != storePositionWithTermVector) {\n        this.storePositionWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storeOffsetWithTermVector != storeOffsetWithTermVector) {\n        this.storeOffsetWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n      if (this.indexOptions != indexOptions) {\n        // downgrade\n        this.indexOptions = this.indexOptions.compareTo(indexOptions) < 0 ? this.indexOptions : indexOptions;\n        this.storePayloads = false;\n      }\n    }\n    assert this.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !this.storePayloads;\n  }\n\n","sourceOld":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean isIndexed, boolean storeTermVector, boolean storePositionWithTermVector, \n              boolean storeOffsetWithTermVector, boolean omitNorms, boolean storePayloads, boolean omitTermFreqAndPositions) {\n\n    if (this.isIndexed != isIndexed) {\n      this.isIndexed = true;                      // once indexed, always index\n    }\n    if (isIndexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePositionWithTermVector != storePositionWithTermVector) {\n        this.storePositionWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storeOffsetWithTermVector != storeOffsetWithTermVector) {\n        this.storeOffsetWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n      if (this.omitTermFreqAndPositions != omitTermFreqAndPositions) {\n        this.omitTermFreqAndPositions = true;                // if one require omitTermFreqAndPositions at least once, it remains off for life\n        this.storePayloads = false;\n      }\n    }\n    assert !this.omitTermFreqAndPositions || !this.storePayloads;\n  }\n\n","bugFix":null,"bugIntro":["83ede60c0b5bb96ad193414bbd663193b56689b3"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["e19ec8535092055101db3ede419e136b73d235ac"],"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d619839baa8ce5503e496b94a9e42ad6f079293f","e19ec8535092055101db3ede419e136b73d235ac"],"e19ec8535092055101db3ede419e136b73d235ac":["e92442af786151ee55bc283eb472f629e3c7b52b"],"e92442af786151ee55bc283eb472f629e3c7b52b":["7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["868da859b43505d9d2a023bfeae6dd0c795f5295","e92442af786151ee55bc283eb472f629e3c7b52b"],"1eb46686a27187e42311e77666a2c7026f461ebc":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","e19ec8535092055101db3ede419e136b73d235ac"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","e92442af786151ee55bc283eb472f629e3c7b52b"],"a3776dccca01c11e7046323cfad46a3b4a471233":["e92442af786151ee55bc283eb472f629e3c7b52b","e19ec8535092055101db3ede419e136b73d235ac"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9454a6510e2db155fb01faa5c049b06ece95fab9","7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["9454a6510e2db155fb01faa5c049b06ece95fab9","7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05":["e92442af786151ee55bc283eb472f629e3c7b52b","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"e19ec8535092055101db3ede419e136b73d235ac":["2afd23a6f1242190c3409d8d81d5c5912d607fc9","135621f3a0670a9394eb563224a3b76cc4dddc0f","1eb46686a27187e42311e77666a2c7026f461ebc","a3776dccca01c11e7046323cfad46a3b4a471233"],"e92442af786151ee55bc283eb472f629e3c7b52b":["e19ec8535092055101db3ede419e136b73d235ac","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["1eb46686a27187e42311e77666a2c7026f461ebc"],"1eb46686a27187e42311e77666a2c7026f461ebc":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7a54e23e03b47f3d568ab3020bdd386e4b2f0a05","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","1eb46686a27187e42311e77666a2c7026f461ebc","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}