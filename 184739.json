{"path":"src/test/org/apache/lucene/StoreTest#test(int,boolean,boolean).mjava","commits":[{"id":"c493b9789ad0f3deb14aa73312bca235d3dcf889","date":1140541240,"type":1,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/StoreTest#test(int,boolean,boolean).mjava","pathOld":"src/test/org/apache/lucene/StoreTest#test(int,boolean).mjava","sourceNew":"  public static void test(int count, boolean ram, boolean buffered)\n       throws Exception {\n    Random gen = new Random(1251971);\n    int i;\n    \n    Date veryStart = new Date();\n    Date start = new Date();\n\n    Directory store;\n    if (ram)\n      store = new RAMDirectory();\n    else\n      store = FSDirectory.getDirectory(\"test.store\", true);\n\n    final int LENGTH_MASK = 0xFFF;\n\n\tfinal byte[] buffer = new byte[LENGTH_MASK];\n\n    for (i = 0; i < count; i++) {\n      String name = i + \".dat\";\n      int length = gen.nextInt() & LENGTH_MASK;\n      byte b = (byte)(gen.nextInt() & 0x7F);\n      //System.out.println(\"filling \" + name + \" with \" + length + \" of \" + b);\n\n      IndexOutput file = store.createOutput(name);\n\n      if (buffered) {\n        for (int j = 0; j < length; j++)\n          buffer[j] = b;\n        file.writeBytes(buffer, length);\n      } else {\n        for (int j = 0; j < length; j++)\n          file.writeByte(b);\n      }\n      \n      file.close();\n    }\n\n    store.close();\n\n    Date end = new Date();\n\n    System.out.print(end.getTime() - start.getTime());\n    System.out.println(\" total milliseconds to create\");\n\n    gen = new Random(1251971);\n    start = new Date();\n\n    if (!ram)\n      store = FSDirectory.getDirectory(\"test.store\", false);\n\n    for (i = 0; i < count; i++) {\n      String name = i + \".dat\";\n      int length = gen.nextInt() & LENGTH_MASK;\n      byte b = (byte)(gen.nextInt() & 0x7F);\n      //System.out.println(\"reading \" + name + \" with \" + length + \" of \" + b);\n\n      IndexInput file = store.openInput(name);\n\n      if (file.length() != length)\n\tthrow new Exception(\"length incorrect\");\n\n      byte[] content = new byte[length];\n      if (buffered) {\n        file.readBytes(content, 0, length);\n        // check the buffer\n        for (int j = 0; j < length; j++)\n          if (content[j] != b)\n            throw new Exception(\"contents incorrect\");\n      } else {\n        for (int j = 0; j < length; j++)\n          if (file.readByte() != b)\n            throw new Exception(\"contents incorrect\");\n      }\n\n      file.close();\n    }\n\n    end = new Date();\n\n    System.out.print(end.getTime() - start.getTime());\n    System.out.println(\" total milliseconds to read\");\n\n    gen = new Random(1251971);\n    start = new Date();\n\n    for (i = 0; i < count; i++) {\n      String name = i + \".dat\";\n      //System.out.println(\"deleting \" + name);\n      store.deleteFile(name);\n    }\n\n    end = new Date();\n\n    System.out.print(end.getTime() - start.getTime());\n    System.out.println(\" total milliseconds to delete\");\n\n    System.out.print(end.getTime() - veryStart.getTime());\n    System.out.println(\" total milliseconds\");\n\n    store.close();\n  }\n\n","sourceOld":"  public static void test(int count, boolean ram)\n       throws Exception {\n    Random gen = new Random(1251971);\n    int i;\n    \n    Date veryStart = new Date();\n    Date start = new Date();\n\n    Directory store;\n    if (ram)\n      store = new RAMDirectory();\n    else\n      store = FSDirectory.getDirectory(\"test.store\", true);\n\n    final int LENGTH_MASK = 0xFFF;\n\n    for (i = 0; i < count; i++) {\n      String name = i + \".dat\";\n      int length = gen.nextInt() & LENGTH_MASK;\n      byte b = (byte)(gen.nextInt() & 0x7F);\n      //System.out.println(\"filling \" + name + \" with \" + length + \" of \" + b);\n\n      IndexOutput file = store.createOutput(name);\n\n      for (int j = 0; j < length; j++)\n\tfile.writeByte(b);\n      \n      file.close();\n    }\n\n    store.close();\n\n    Date end = new Date();\n\n    System.out.print(end.getTime() - start.getTime());\n    System.out.println(\" total milliseconds to create\");\n\n    gen = new Random(1251971);\n    start = new Date();\n\n    if (!ram)\n      store = FSDirectory.getDirectory(\"test.store\", false);\n\n    for (i = 0; i < count; i++) {\n      String name = i + \".dat\";\n      int length = gen.nextInt() & LENGTH_MASK;\n      byte b = (byte)(gen.nextInt() & 0x7F);\n      //System.out.println(\"reading \" + name + \" with \" + length + \" of \" + b);\n\n      IndexInput file = store.openInput(name);\n\n      if (file.length() != length)\n\tthrow new Exception(\"length incorrect\");\n\n      for (int j = 0; j < length; j++)\n\tif (file.readByte() != b)\n\t  throw new Exception(\"contents incorrect\");\n\n      file.close();\n    }\n\n    end = new Date();\n\n    System.out.print(end.getTime() - start.getTime());\n    System.out.println(\" total milliseconds to read\");\n\n    gen = new Random(1251971);\n    start = new Date();\n\n    for (i = 0; i < count; i++) {\n      String name = i + \".dat\";\n      //System.out.println(\"deleting \" + name);\n      store.deleteFile(name);\n    }\n\n    end = new Date();\n\n    System.out.print(end.getTime() - start.getTime());\n    System.out.println(\" total milliseconds to delete\");\n\n    System.out.print(end.getTime() - veryStart.getTime());\n    System.out.println(\" total milliseconds\");\n\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66b12ba4967665216eeb706b58d424c51fb3641a","date":1169160423,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/StoreTest#test(int,boolean,boolean).mjava","pathOld":"src/test/org/apache/lucene/StoreTest#test(int,boolean,boolean).mjava","sourceNew":"  public static void test(int count, boolean ram, boolean buffered)\n       throws Exception {\n    Random gen = new Random(1251971);\n    int i;\n    \n    Date veryStart = new Date();\n    Date start = new Date();\n\n    Directory store;\n    if (ram)\n      store = new RAMDirectory();\n    else {\n      String dirName = \"test.store\";\n      _TestUtil.rmDir(dirName);\n      store = FSDirectory.getDirectory(dirName);\n    }\n\n    final int LENGTH_MASK = 0xFFF;\n\n\tfinal byte[] buffer = new byte[LENGTH_MASK];\n\n    for (i = 0; i < count; i++) {\n      String name = i + \".dat\";\n      int length = gen.nextInt() & LENGTH_MASK;\n      byte b = (byte)(gen.nextInt() & 0x7F);\n      //System.out.println(\"filling \" + name + \" with \" + length + \" of \" + b);\n\n      IndexOutput file = store.createOutput(name);\n\n      if (buffered) {\n        for (int j = 0; j < length; j++)\n          buffer[j] = b;\n        file.writeBytes(buffer, length);\n      } else {\n        for (int j = 0; j < length; j++)\n          file.writeByte(b);\n      }\n      \n      file.close();\n    }\n\n    store.close();\n\n    Date end = new Date();\n\n    System.out.print(end.getTime() - start.getTime());\n    System.out.println(\" total milliseconds to create\");\n\n    gen = new Random(1251971);\n    start = new Date();\n\n    if (!ram)\n      store = FSDirectory.getDirectory(\"test.store\");\n\n    for (i = 0; i < count; i++) {\n      String name = i + \".dat\";\n      int length = gen.nextInt() & LENGTH_MASK;\n      byte b = (byte)(gen.nextInt() & 0x7F);\n      //System.out.println(\"reading \" + name + \" with \" + length + \" of \" + b);\n\n      IndexInput file = store.openInput(name);\n\n      if (file.length() != length)\n\tthrow new Exception(\"length incorrect\");\n\n      byte[] content = new byte[length];\n      if (buffered) {\n        file.readBytes(content, 0, length);\n        // check the buffer\n        for (int j = 0; j < length; j++)\n          if (content[j] != b)\n            throw new Exception(\"contents incorrect\");\n      } else {\n        for (int j = 0; j < length; j++)\n          if (file.readByte() != b)\n            throw new Exception(\"contents incorrect\");\n      }\n\n      file.close();\n    }\n\n    end = new Date();\n\n    System.out.print(end.getTime() - start.getTime());\n    System.out.println(\" total milliseconds to read\");\n\n    gen = new Random(1251971);\n    start = new Date();\n\n    for (i = 0; i < count; i++) {\n      String name = i + \".dat\";\n      //System.out.println(\"deleting \" + name);\n      store.deleteFile(name);\n    }\n\n    end = new Date();\n\n    System.out.print(end.getTime() - start.getTime());\n    System.out.println(\" total milliseconds to delete\");\n\n    System.out.print(end.getTime() - veryStart.getTime());\n    System.out.println(\" total milliseconds\");\n\n    store.close();\n  }\n\n","sourceOld":"  public static void test(int count, boolean ram, boolean buffered)\n       throws Exception {\n    Random gen = new Random(1251971);\n    int i;\n    \n    Date veryStart = new Date();\n    Date start = new Date();\n\n    Directory store;\n    if (ram)\n      store = new RAMDirectory();\n    else\n      store = FSDirectory.getDirectory(\"test.store\", true);\n\n    final int LENGTH_MASK = 0xFFF;\n\n\tfinal byte[] buffer = new byte[LENGTH_MASK];\n\n    for (i = 0; i < count; i++) {\n      String name = i + \".dat\";\n      int length = gen.nextInt() & LENGTH_MASK;\n      byte b = (byte)(gen.nextInt() & 0x7F);\n      //System.out.println(\"filling \" + name + \" with \" + length + \" of \" + b);\n\n      IndexOutput file = store.createOutput(name);\n\n      if (buffered) {\n        for (int j = 0; j < length; j++)\n          buffer[j] = b;\n        file.writeBytes(buffer, length);\n      } else {\n        for (int j = 0; j < length; j++)\n          file.writeByte(b);\n      }\n      \n      file.close();\n    }\n\n    store.close();\n\n    Date end = new Date();\n\n    System.out.print(end.getTime() - start.getTime());\n    System.out.println(\" total milliseconds to create\");\n\n    gen = new Random(1251971);\n    start = new Date();\n\n    if (!ram)\n      store = FSDirectory.getDirectory(\"test.store\", false);\n\n    for (i = 0; i < count; i++) {\n      String name = i + \".dat\";\n      int length = gen.nextInt() & LENGTH_MASK;\n      byte b = (byte)(gen.nextInt() & 0x7F);\n      //System.out.println(\"reading \" + name + \" with \" + length + \" of \" + b);\n\n      IndexInput file = store.openInput(name);\n\n      if (file.length() != length)\n\tthrow new Exception(\"length incorrect\");\n\n      byte[] content = new byte[length];\n      if (buffered) {\n        file.readBytes(content, 0, length);\n        // check the buffer\n        for (int j = 0; j < length; j++)\n          if (content[j] != b)\n            throw new Exception(\"contents incorrect\");\n      } else {\n        for (int j = 0; j < length; j++)\n          if (file.readByte() != b)\n            throw new Exception(\"contents incorrect\");\n      }\n\n      file.close();\n    }\n\n    end = new Date();\n\n    System.out.print(end.getTime() - start.getTime());\n    System.out.println(\" total milliseconds to read\");\n\n    gen = new Random(1251971);\n    start = new Date();\n\n    for (i = 0; i < count; i++) {\n      String name = i + \".dat\";\n      //System.out.println(\"deleting \" + name);\n      store.deleteFile(name);\n    }\n\n    end = new Date();\n\n    System.out.print(end.getTime() - start.getTime());\n    System.out.println(\" total milliseconds to delete\");\n\n    System.out.print(end.getTime() - veryStart.getTime());\n    System.out.println(\" total milliseconds\");\n\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"520d06488b13c8ef837dd0815b77a80fff8779e1","date":1240950232,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/StoreTest#test(int,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  public static void test(int count, boolean ram, boolean buffered)\n       throws Exception {\n    Random gen = new Random(1251971);\n    int i;\n    \n    Date veryStart = new Date();\n    Date start = new Date();\n\n    Directory store;\n    if (ram)\n      store = new RAMDirectory();\n    else {\n      String dirName = \"test.store\";\n      _TestUtil.rmDir(dirName);\n      store = FSDirectory.getDirectory(dirName);\n    }\n\n    final int LENGTH_MASK = 0xFFF;\n\n\tfinal byte[] buffer = new byte[LENGTH_MASK];\n\n    for (i = 0; i < count; i++) {\n      String name = i + \".dat\";\n      int length = gen.nextInt() & LENGTH_MASK;\n      byte b = (byte)(gen.nextInt() & 0x7F);\n      //System.out.println(\"filling \" + name + \" with \" + length + \" of \" + b);\n\n      IndexOutput file = store.createOutput(name);\n\n      if (buffered) {\n        for (int j = 0; j < length; j++)\n          buffer[j] = b;\n        file.writeBytes(buffer, length);\n      } else {\n        for (int j = 0; j < length; j++)\n          file.writeByte(b);\n      }\n      \n      file.close();\n    }\n\n    store.close();\n\n    Date end = new Date();\n\n    System.out.print(end.getTime() - start.getTime());\n    System.out.println(\" total milliseconds to create\");\n\n    gen = new Random(1251971);\n    start = new Date();\n\n    if (!ram)\n      store = FSDirectory.getDirectory(\"test.store\");\n\n    for (i = 0; i < count; i++) {\n      String name = i + \".dat\";\n      int length = gen.nextInt() & LENGTH_MASK;\n      byte b = (byte)(gen.nextInt() & 0x7F);\n      //System.out.println(\"reading \" + name + \" with \" + length + \" of \" + b);\n\n      IndexInput file = store.openInput(name);\n\n      if (file.length() != length)\n\tthrow new Exception(\"length incorrect\");\n\n      byte[] content = new byte[length];\n      if (buffered) {\n        file.readBytes(content, 0, length);\n        // check the buffer\n        for (int j = 0; j < length; j++)\n          if (content[j] != b)\n            throw new Exception(\"contents incorrect\");\n      } else {\n        for (int j = 0; j < length; j++)\n          if (file.readByte() != b)\n            throw new Exception(\"contents incorrect\");\n      }\n\n      file.close();\n    }\n\n    end = new Date();\n\n    System.out.print(end.getTime() - start.getTime());\n    System.out.println(\" total milliseconds to read\");\n\n    gen = new Random(1251971);\n    start = new Date();\n\n    for (i = 0; i < count; i++) {\n      String name = i + \".dat\";\n      //System.out.println(\"deleting \" + name);\n      store.deleteFile(name);\n    }\n\n    end = new Date();\n\n    System.out.print(end.getTime() - start.getTime());\n    System.out.println(\" total milliseconds to delete\");\n\n    System.out.print(end.getTime() - veryStart.getTime());\n    System.out.println(\" total milliseconds\");\n\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"66b12ba4967665216eeb706b58d424c51fb3641a":["c493b9789ad0f3deb14aa73312bca235d3dcf889"],"520d06488b13c8ef837dd0815b77a80fff8779e1":["66b12ba4967665216eeb706b58d424c51fb3641a"],"c493b9789ad0f3deb14aa73312bca235d3dcf889":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["520d06488b13c8ef837dd0815b77a80fff8779e1"]},"commit2Childs":{"66b12ba4967665216eeb706b58d424c51fb3641a":["520d06488b13c8ef837dd0815b77a80fff8779e1"],"520d06488b13c8ef837dd0815b77a80fff8779e1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c493b9789ad0f3deb14aa73312bca235d3dcf889":["66b12ba4967665216eeb706b58d424c51fb3641a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c493b9789ad0f3deb14aa73312bca235d3dcf889"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}