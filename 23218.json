{"path":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newPrefixQuery(String,InetAddress,int).mjava","commits":[{"id":"d3104a6ba367dfb690806b227c5ef17c42c6107b","date":1456265035,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newPrefixQuery(String,InetAddress,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newInetAddressPrefix(String,InetAddress,int).mjava","sourceNew":"  /** \n   * Create a prefix query for matching a CIDR network range.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param value any host address\n   * @param prefixLength the network prefix length for this address. This is also known as the subnet mask in the context of IPv4 addresses.\n   * @throws IllegalArgumentException if {@code field} is null, or prefixLength is invalid.\n   * @return a query matching documents with addresses contained within this network\n   */\n  public static PointRangeQuery newPrefixQuery(String field, InetAddress value, int prefixLength) {\n    if (prefixLength < 0 || prefixLength > 8 * value.getAddress().length) {\n      throw new IllegalArgumentException(\"illegal prefixLength '\" + prefixLength + \"'. Must be 0-32 for IPv4 ranges, 0-128 for IPv6 ranges\");\n    }\n    // create the lower value by zeroing out the host portion, upper value by filling it with all ones.\n    byte lower[] = value.getAddress();\n    byte upper[] = value.getAddress();\n    for (int i = prefixLength; i < 8 * lower.length; i++) {\n      lower[i >> 3] &= ~(1 << (i & 7));\n      upper[i >> 3] |= 1 << (i & 7);\n    }\n    try {\n      return newRangeQuery(field, InetAddress.getByAddress(lower), true, InetAddress.getByAddress(upper), true);\n    } catch (UnknownHostException e) {\n      throw new AssertionError(e); // values are coming from InetAddress\n    }\n  }\n\n","sourceOld":"  /** \n   * Create a range query for matching a CIDR network range.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param value any host address\n   * @param prefixLength the network prefix length for this address. This is also known as the subnet mask in the context of IPv4 addresses.\n   * @throws IllegalArgumentException if {@code field} is null, or prefixLength is invalid.\n   * @return a query matching documents with addresses contained within this network\n   */\n  public static PointRangeQuery newInetAddressPrefix(String field, InetAddress value, int prefixLength) {\n    if (prefixLength < 0 || prefixLength > 8 * value.getAddress().length) {\n      throw new IllegalArgumentException(\"illegal prefixLength '\" + prefixLength + \"'. Must be 0-32 for IPv4 ranges, 0-128 for IPv6 ranges\");\n    }\n    // create the lower value by zeroing out the host portion, upper value by filling it with all ones.\n    byte lower[] = value.getAddress();\n    byte upper[] = value.getAddress();\n    for (int i = prefixLength; i < 8 * lower.length; i++) {\n      lower[i >> 3] &= ~(1 << (i & 7));\n      upper[i >> 3] |= 1 << (i & 7);\n    }\n    try {\n      return newInetAddressRange(field, InetAddress.getByAddress(lower), true, InetAddress.getByAddress(upper), true);\n    } catch (UnknownHostException e) {\n      throw new AssertionError(e); // values are coming from InetAddress\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","date":1456265720,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newPrefixQuery(String,InetAddress,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newInetAddressPrefix(String,InetAddress,int).mjava","sourceNew":"  /** \n   * Create a prefix query for matching a CIDR network range.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param value any host address\n   * @param prefixLength the network prefix length for this address. This is also known as the subnet mask in the context of IPv4 addresses.\n   * @throws IllegalArgumentException if {@code field} is null, or prefixLength is invalid.\n   * @return a query matching documents with addresses contained within this network\n   */\n  public static PointRangeQuery newPrefixQuery(String field, InetAddress value, int prefixLength) {\n    if (prefixLength < 0 || prefixLength > 8 * value.getAddress().length) {\n      throw new IllegalArgumentException(\"illegal prefixLength '\" + prefixLength + \"'. Must be 0-32 for IPv4 ranges, 0-128 for IPv6 ranges\");\n    }\n    // create the lower value by zeroing out the host portion, upper value by filling it with all ones.\n    byte lower[] = value.getAddress();\n    byte upper[] = value.getAddress();\n    for (int i = prefixLength; i < 8 * lower.length; i++) {\n      lower[i >> 3] &= ~(1 << (i & 7));\n      upper[i >> 3] |= 1 << (i & 7);\n    }\n    try {\n      return newRangeQuery(field, InetAddress.getByAddress(lower), true, InetAddress.getByAddress(upper), true);\n    } catch (UnknownHostException e) {\n      throw new AssertionError(e); // values are coming from InetAddress\n    }\n  }\n\n","sourceOld":"  /** \n   * Create a range query for matching a CIDR network range.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param value any host address\n   * @param prefixLength the network prefix length for this address. This is also known as the subnet mask in the context of IPv4 addresses.\n   * @throws IllegalArgumentException if {@code field} is null, or prefixLength is invalid.\n   * @return a query matching documents with addresses contained within this network\n   */\n  public static PointRangeQuery newInetAddressPrefix(String field, InetAddress value, int prefixLength) {\n    if (prefixLength < 0 || prefixLength > 8 * value.getAddress().length) {\n      throw new IllegalArgumentException(\"illegal prefixLength '\" + prefixLength + \"'. Must be 0-32 for IPv4 ranges, 0-128 for IPv6 ranges\");\n    }\n    // create the lower value by zeroing out the host portion, upper value by filling it with all ones.\n    byte lower[] = value.getAddress();\n    byte upper[] = value.getAddress();\n    for (int i = prefixLength; i < 8 * lower.length; i++) {\n      lower[i >> 3] &= ~(1 << (i & 7));\n      upper[i >> 3] |= 1 << (i & 7);\n    }\n    try {\n      return newInetAddressRange(field, InetAddress.getByAddress(lower), true, InetAddress.getByAddress(upper), true);\n    } catch (UnknownHostException e) {\n      throw new AssertionError(e); // values are coming from InetAddress\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5296efc4b319f5647b606629c093a94b23692c6","date":1456267155,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newPrefixQuery(String,InetAddress,int).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Create a prefix query for matching a CIDR network range.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param value any host address\n   * @param prefixLength the network prefix length for this address. This is also known as the subnet mask in the context of IPv4 addresses.\n   * @throws IllegalArgumentException if {@code field} is null, or prefixLength is invalid.\n   * @return a query matching documents with addresses contained within this network\n   */\n  public static PointRangeQuery newPrefixQuery(String field, InetAddress value, int prefixLength) {\n    if (prefixLength < 0 || prefixLength > 8 * value.getAddress().length) {\n      throw new IllegalArgumentException(\"illegal prefixLength '\" + prefixLength + \"'. Must be 0-32 for IPv4 ranges, 0-128 for IPv6 ranges\");\n    }\n    // create the lower value by zeroing out the host portion, upper value by filling it with all ones.\n    byte lower[] = value.getAddress();\n    byte upper[] = value.getAddress();\n    for (int i = prefixLength; i < 8 * lower.length; i++) {\n      lower[i >> 3] &= ~(1 << (i & 7));\n      upper[i >> 3] |= 1 << (i & 7);\n    }\n    try {\n      return newRangeQuery(field, InetAddress.getByAddress(lower), true, InetAddress.getByAddress(upper), true);\n    } catch (UnknownHostException e) {\n      throw new AssertionError(e); // values are coming from InetAddress\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","date":1456306182,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newPrefixQuery(String,InetAddress,int).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Create a prefix query for matching a CIDR network range.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param value any host address\n   * @param prefixLength the network prefix length for this address. This is also known as the subnet mask in the context of IPv4 addresses.\n   * @throws IllegalArgumentException if {@code field} is null, or prefixLength is invalid.\n   * @return a query matching documents with addresses contained within this network\n   */\n  public static PointRangeQuery newPrefixQuery(String field, InetAddress value, int prefixLength) {\n    if (prefixLength < 0 || prefixLength > 8 * value.getAddress().length) {\n      throw new IllegalArgumentException(\"illegal prefixLength '\" + prefixLength + \"'. Must be 0-32 for IPv4 ranges, 0-128 for IPv6 ranges\");\n    }\n    // create the lower value by zeroing out the host portion, upper value by filling it with all ones.\n    byte lower[] = value.getAddress();\n    byte upper[] = value.getAddress();\n    for (int i = prefixLength; i < 8 * lower.length; i++) {\n      lower[i >> 3] &= ~(1 << (i & 7));\n      upper[i >> 3] |= 1 << (i & 7);\n    }\n    try {\n      return newRangeQuery(field, InetAddress.getByAddress(lower), true, InetAddress.getByAddress(upper), true);\n    } catch (UnknownHostException e) {\n      throw new AssertionError(e); // values are coming from InetAddress\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"609ba4ce51a7095e9815d4fb2666ec85714f8f54","date":1456320705,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newPrefixQuery(String,InetAddress,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newPrefixQuery(String,InetAddress,int).mjava","sourceNew":"  /** \n   * Create a prefix query for matching a CIDR network range.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param value any host address\n   * @param prefixLength the network prefix length for this address. This is also known as the subnet mask in the context of IPv4 addresses.\n   * @throws IllegalArgumentException if {@code field} is null, or prefixLength is invalid.\n   * @return a query matching documents with addresses contained within this network\n   */\n  public static Query newPrefixQuery(String field, InetAddress value, int prefixLength) {\n    if (prefixLength < 0 || prefixLength > 8 * value.getAddress().length) {\n      throw new IllegalArgumentException(\"illegal prefixLength '\" + prefixLength + \"'. Must be 0-32 for IPv4 ranges, 0-128 for IPv6 ranges\");\n    }\n    // create the lower value by zeroing out the host portion, upper value by filling it with all ones.\n    byte lower[] = value.getAddress();\n    byte upper[] = value.getAddress();\n    for (int i = prefixLength; i < 8 * lower.length; i++) {\n      lower[i >> 3] &= ~(1 << (i & 7));\n      upper[i >> 3] |= 1 << (i & 7);\n    }\n    try {\n      return newRangeQuery(field, InetAddress.getByAddress(lower), true, InetAddress.getByAddress(upper), true);\n    } catch (UnknownHostException e) {\n      throw new AssertionError(e); // values are coming from InetAddress\n    }\n  }\n\n","sourceOld":"  /** \n   * Create a prefix query for matching a CIDR network range.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param value any host address\n   * @param prefixLength the network prefix length for this address. This is also known as the subnet mask in the context of IPv4 addresses.\n   * @throws IllegalArgumentException if {@code field} is null, or prefixLength is invalid.\n   * @return a query matching documents with addresses contained within this network\n   */\n  public static PointRangeQuery newPrefixQuery(String field, InetAddress value, int prefixLength) {\n    if (prefixLength < 0 || prefixLength > 8 * value.getAddress().length) {\n      throw new IllegalArgumentException(\"illegal prefixLength '\" + prefixLength + \"'. Must be 0-32 for IPv4 ranges, 0-128 for IPv6 ranges\");\n    }\n    // create the lower value by zeroing out the host portion, upper value by filling it with all ones.\n    byte lower[] = value.getAddress();\n    byte upper[] = value.getAddress();\n    for (int i = prefixLength; i < 8 * lower.length; i++) {\n      lower[i >> 3] &= ~(1 << (i & 7));\n      upper[i >> 3] |= 1 << (i & 7);\n    }\n    try {\n      return newRangeQuery(field, InetAddress.getByAddress(lower), true, InetAddress.getByAddress(upper), true);\n    } catch (UnknownHostException e) {\n      throw new AssertionError(e); // values are coming from InetAddress\n    }\n  }\n\n","bugFix":["d3104a6ba367dfb690806b227c5ef17c42c6107b"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6","date":1456321728,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newPrefixQuery(String,InetAddress,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newPrefixQuery(String,InetAddress,int).mjava","sourceNew":"  /** \n   * Create a prefix query for matching a CIDR network range.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param value any host address\n   * @param prefixLength the network prefix length for this address. This is also known as the subnet mask in the context of IPv4 addresses.\n   * @throws IllegalArgumentException if {@code field} is null, or prefixLength is invalid.\n   * @return a query matching documents with addresses contained within this network\n   */\n  public static Query newPrefixQuery(String field, InetAddress value, int prefixLength) {\n    if (prefixLength < 0 || prefixLength > 8 * value.getAddress().length) {\n      throw new IllegalArgumentException(\"illegal prefixLength '\" + prefixLength + \"'. Must be 0-32 for IPv4 ranges, 0-128 for IPv6 ranges\");\n    }\n    // create the lower value by zeroing out the host portion, upper value by filling it with all ones.\n    byte lower[] = value.getAddress();\n    byte upper[] = value.getAddress();\n    for (int i = prefixLength; i < 8 * lower.length; i++) {\n      lower[i >> 3] &= ~(1 << (i & 7));\n      upper[i >> 3] |= 1 << (i & 7);\n    }\n    try {\n      return newRangeQuery(field, InetAddress.getByAddress(lower), true, InetAddress.getByAddress(upper), true);\n    } catch (UnknownHostException e) {\n      throw new AssertionError(e); // values are coming from InetAddress\n    }\n  }\n\n","sourceOld":"  /** \n   * Create a prefix query for matching a CIDR network range.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param value any host address\n   * @param prefixLength the network prefix length for this address. This is also known as the subnet mask in the context of IPv4 addresses.\n   * @throws IllegalArgumentException if {@code field} is null, or prefixLength is invalid.\n   * @return a query matching documents with addresses contained within this network\n   */\n  public static PointRangeQuery newPrefixQuery(String field, InetAddress value, int prefixLength) {\n    if (prefixLength < 0 || prefixLength > 8 * value.getAddress().length) {\n      throw new IllegalArgumentException(\"illegal prefixLength '\" + prefixLength + \"'. Must be 0-32 for IPv4 ranges, 0-128 for IPv6 ranges\");\n    }\n    // create the lower value by zeroing out the host portion, upper value by filling it with all ones.\n    byte lower[] = value.getAddress();\n    byte upper[] = value.getAddress();\n    for (int i = prefixLength; i < 8 * lower.length; i++) {\n      lower[i >> 3] &= ~(1 << (i & 7));\n      upper[i >> 3] |= 1 << (i & 7);\n    }\n    try {\n      return newRangeQuery(field, InetAddress.getByAddress(lower), true, InetAddress.getByAddress(upper), true);\n    } catch (UnknownHostException e) {\n      throw new AssertionError(e); // values are coming from InetAddress\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1800b996d8677670482a071dcb7a48b08c423ace","date":1456955558,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newPrefixQuery(String,InetAddress,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newPrefixQuery(String,InetAddress,int).mjava","sourceNew":"  /** \n   * Create a prefix query for matching a CIDR network range.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param value any host address\n   * @param prefixLength the network prefix length for this address. This is also known as the subnet mask in the context of IPv4 addresses.\n   * @throws IllegalArgumentException if {@code field} is null, or prefixLength is invalid.\n   * @return a query matching documents with addresses contained within this network\n   */\n  public static Query newPrefixQuery(String field, InetAddress value, int prefixLength) {\n    if (value == null) {\n      throw new IllegalArgumentException(\"InetAddress cannot be null\");\n    }\n    if (prefixLength < 0 || prefixLength > 8 * value.getAddress().length) {\n      throw new IllegalArgumentException(\"illegal prefixLength '\" + prefixLength + \"'. Must be 0-32 for IPv4 ranges, 0-128 for IPv6 ranges\");\n    }\n    // create the lower value by zeroing out the host portion, upper value by filling it with all ones.\n    byte lower[] = value.getAddress();\n    byte upper[] = value.getAddress();\n    for (int i = prefixLength; i < 8 * lower.length; i++) {\n      lower[i >> 3] &= ~(1 << (i & 7));\n      upper[i >> 3] |= 1 << (i & 7);\n    }\n    try {\n      return newRangeQuery(field, InetAddress.getByAddress(lower), InetAddress.getByAddress(upper));\n    } catch (UnknownHostException e) {\n      throw new AssertionError(e); // values are coming from InetAddress\n    }\n  }\n\n","sourceOld":"  /** \n   * Create a prefix query for matching a CIDR network range.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param value any host address\n   * @param prefixLength the network prefix length for this address. This is also known as the subnet mask in the context of IPv4 addresses.\n   * @throws IllegalArgumentException if {@code field} is null, or prefixLength is invalid.\n   * @return a query matching documents with addresses contained within this network\n   */\n  public static Query newPrefixQuery(String field, InetAddress value, int prefixLength) {\n    if (prefixLength < 0 || prefixLength > 8 * value.getAddress().length) {\n      throw new IllegalArgumentException(\"illegal prefixLength '\" + prefixLength + \"'. Must be 0-32 for IPv4 ranges, 0-128 for IPv6 ranges\");\n    }\n    // create the lower value by zeroing out the host portion, upper value by filling it with all ones.\n    byte lower[] = value.getAddress();\n    byte upper[] = value.getAddress();\n    for (int i = prefixLength; i < 8 * lower.length; i++) {\n      lower[i >> 3] &= ~(1 << (i & 7));\n      upper[i >> 3] |= 1 << (i & 7);\n    }\n    try {\n      return newRangeQuery(field, InetAddress.getByAddress(lower), true, InetAddress.getByAddress(upper), true);\n    } catch (UnknownHostException e) {\n      throw new AssertionError(e); // values are coming from InetAddress\n    }\n  }\n\n","bugFix":["d3104a6ba367dfb690806b227c5ef17c42c6107b"],"bugIntro":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c422e924212367b334b4938f1fd3e44438e88c40","date":1456962933,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newPrefixQuery(String,InetAddress,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newPrefixQuery(String,InetAddress,int).mjava","sourceNew":"  /** \n   * Create a prefix query for matching a CIDR network range.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param value any host address\n   * @param prefixLength the network prefix length for this address. This is also known as the subnet mask in the context of IPv4 addresses.\n   * @throws IllegalArgumentException if {@code field} is null, or prefixLength is invalid.\n   * @return a query matching documents with addresses contained within this network\n   */\n  public static Query newPrefixQuery(String field, InetAddress value, int prefixLength) {\n    if (value == null) {\n      throw new IllegalArgumentException(\"InetAddress cannot be null\");\n    }\n    if (prefixLength < 0 || prefixLength > 8 * value.getAddress().length) {\n      throw new IllegalArgumentException(\"illegal prefixLength '\" + prefixLength + \"'. Must be 0-32 for IPv4 ranges, 0-128 for IPv6 ranges\");\n    }\n    // create the lower value by zeroing out the host portion, upper value by filling it with all ones.\n    byte lower[] = value.getAddress();\n    byte upper[] = value.getAddress();\n    for (int i = prefixLength; i < 8 * lower.length; i++) {\n      lower[i >> 3] &= ~(1 << (i & 7));\n      upper[i >> 3] |= 1 << (i & 7);\n    }\n    try {\n      return newRangeQuery(field, InetAddress.getByAddress(lower), InetAddress.getByAddress(upper));\n    } catch (UnknownHostException e) {\n      throw new AssertionError(e); // values are coming from InetAddress\n    }\n  }\n\n","sourceOld":"  /** \n   * Create a prefix query for matching a CIDR network range.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param value any host address\n   * @param prefixLength the network prefix length for this address. This is also known as the subnet mask in the context of IPv4 addresses.\n   * @throws IllegalArgumentException if {@code field} is null, or prefixLength is invalid.\n   * @return a query matching documents with addresses contained within this network\n   */\n  public static Query newPrefixQuery(String field, InetAddress value, int prefixLength) {\n    if (prefixLength < 0 || prefixLength > 8 * value.getAddress().length) {\n      throw new IllegalArgumentException(\"illegal prefixLength '\" + prefixLength + \"'. Must be 0-32 for IPv4 ranges, 0-128 for IPv6 ranges\");\n    }\n    // create the lower value by zeroing out the host portion, upper value by filling it with all ones.\n    byte lower[] = value.getAddress();\n    byte upper[] = value.getAddress();\n    for (int i = prefixLength; i < 8 * lower.length; i++) {\n      lower[i >> 3] &= ~(1 << (i & 7));\n      upper[i >> 3] |= 1 << (i & 7);\n    }\n    try {\n      return newRangeQuery(field, InetAddress.getByAddress(lower), true, InetAddress.getByAddress(upper), true);\n    } catch (UnknownHostException e) {\n      throw new AssertionError(e); // values are coming from InetAddress\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newPrefixQuery(String,InetAddress,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newPrefixQuery(String,InetAddress,int).mjava","sourceNew":"  /** \n   * Create a prefix query for matching a CIDR network range.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param value any host address\n   * @param prefixLength the network prefix length for this address. This is also known as the subnet mask in the context of IPv4 addresses.\n   * @throws IllegalArgumentException if {@code field} is null, or prefixLength is invalid.\n   * @return a query matching documents with addresses contained within this network\n   */\n  public static Query newPrefixQuery(String field, InetAddress value, int prefixLength) {\n    if (value == null) {\n      throw new IllegalArgumentException(\"InetAddress cannot be null\");\n    }\n    if (prefixLength < 0 || prefixLength > 8 * value.getAddress().length) {\n      throw new IllegalArgumentException(\"illegal prefixLength '\" + prefixLength + \"'. Must be 0-32 for IPv4 ranges, 0-128 for IPv6 ranges\");\n    }\n    // create the lower value by zeroing out the host portion, upper value by filling it with all ones.\n    byte lower[] = value.getAddress();\n    byte upper[] = value.getAddress();\n    for (int i = prefixLength; i < 8 * lower.length; i++) {\n      lower[i >> 3] &= ~(1 << (i & 7));\n      upper[i >> 3] |= 1 << (i & 7);\n    }\n    try {\n      return newRangeQuery(field, InetAddress.getByAddress(lower), InetAddress.getByAddress(upper));\n    } catch (UnknownHostException e) {\n      throw new AssertionError(e); // values are coming from InetAddress\n    }\n  }\n\n","sourceOld":"  /** \n   * Create a prefix query for matching a CIDR network range.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param value any host address\n   * @param prefixLength the network prefix length for this address. This is also known as the subnet mask in the context of IPv4 addresses.\n   * @throws IllegalArgumentException if {@code field} is null, or prefixLength is invalid.\n   * @return a query matching documents with addresses contained within this network\n   */\n  public static Query newPrefixQuery(String field, InetAddress value, int prefixLength) {\n    if (prefixLength < 0 || prefixLength > 8 * value.getAddress().length) {\n      throw new IllegalArgumentException(\"illegal prefixLength '\" + prefixLength + \"'. Must be 0-32 for IPv4 ranges, 0-128 for IPv6 ranges\");\n    }\n    // create the lower value by zeroing out the host portion, upper value by filling it with all ones.\n    byte lower[] = value.getAddress();\n    byte upper[] = value.getAddress();\n    for (int i = prefixLength; i < 8 * lower.length; i++) {\n      lower[i >> 3] &= ~(1 << (i & 7));\n      upper[i >> 3] |= 1 << (i & 7);\n    }\n    try {\n      return newRangeQuery(field, InetAddress.getByAddress(lower), true, InetAddress.getByAddress(upper), true);\n    } catch (UnknownHostException e) {\n      throw new AssertionError(e); // values are coming from InetAddress\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad0d09e969f4763b0df4230f8e3f74357872a4e4","date":1459188769,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newPrefixQuery(String,InetAddress,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newPrefixQuery(String,InetAddress,int).mjava","sourceNew":"  /** \n   * Create a prefix query for matching a CIDR network range.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param value any host address\n   * @param prefixLength the network prefix length for this address. This is also known as the subnet mask in the context of IPv4 addresses.\n   * @throws IllegalArgumentException if {@code field} is null, or prefixLength is invalid.\n   * @return a query matching documents with addresses contained within this network\n   */\n  public static Query newPrefixQuery(String field, InetAddress value, int prefixLength) {\n    if (value == null) {\n      throw new IllegalArgumentException(\"InetAddress must not be null\");\n    }\n    if (prefixLength < 0 || prefixLength > 8 * value.getAddress().length) {\n      throw new IllegalArgumentException(\"illegal prefixLength '\" + prefixLength + \"'. Must be 0-32 for IPv4 ranges, 0-128 for IPv6 ranges\");\n    }\n    // create the lower value by zeroing out the host portion, upper value by filling it with all ones.\n    byte lower[] = value.getAddress();\n    byte upper[] = value.getAddress();\n    for (int i = prefixLength; i < 8 * lower.length; i++) {\n      lower[i >> 3] &= ~(1 << (i & 7));\n      upper[i >> 3] |= 1 << (i & 7);\n    }\n    try {\n      return newRangeQuery(field, InetAddress.getByAddress(lower), InetAddress.getByAddress(upper));\n    } catch (UnknownHostException e) {\n      throw new AssertionError(e); // values are coming from InetAddress\n    }\n  }\n\n","sourceOld":"  /** \n   * Create a prefix query for matching a CIDR network range.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param value any host address\n   * @param prefixLength the network prefix length for this address. This is also known as the subnet mask in the context of IPv4 addresses.\n   * @throws IllegalArgumentException if {@code field} is null, or prefixLength is invalid.\n   * @return a query matching documents with addresses contained within this network\n   */\n  public static Query newPrefixQuery(String field, InetAddress value, int prefixLength) {\n    if (value == null) {\n      throw new IllegalArgumentException(\"InetAddress cannot be null\");\n    }\n    if (prefixLength < 0 || prefixLength > 8 * value.getAddress().length) {\n      throw new IllegalArgumentException(\"illegal prefixLength '\" + prefixLength + \"'. Must be 0-32 for IPv4 ranges, 0-128 for IPv6 ranges\");\n    }\n    // create the lower value by zeroing out the host portion, upper value by filling it with all ones.\n    byte lower[] = value.getAddress();\n    byte upper[] = value.getAddress();\n    for (int i = prefixLength; i < 8 * lower.length; i++) {\n      lower[i >> 3] &= ~(1 << (i & 7));\n      upper[i >> 3] |= 1 << (i & 7);\n    }\n    try {\n      return newRangeQuery(field, InetAddress.getByAddress(lower), InetAddress.getByAddress(upper));\n    } catch (UnknownHostException e) {\n      throw new AssertionError(e); // values are coming from InetAddress\n    }\n  }\n\n","bugFix":["1800b996d8677670482a071dcb7a48b08c423ace"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3f3b56c78dfadd81142dd9b9563806ed95a89fde","date":1461158000,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newPrefixQuery(String,InetAddress,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newPrefixQuery(String,InetAddress,int).mjava","sourceNew":"  /** \n   * Create a prefix query for matching a CIDR network range.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param value any host address\n   * @param prefixLength the network prefix length for this address. This is also known as the subnet mask in the context of IPv4 addresses.\n   * @throws IllegalArgumentException if {@code field} is null, or prefixLength is invalid.\n   * @return a query matching documents with addresses contained within this network\n   */\n  public static Query newPrefixQuery(String field, InetAddress value, int prefixLength) {\n    if (value == null) {\n      throw new IllegalArgumentException(\"InetAddress must not be null\");\n    }\n    if (prefixLength < 0 || prefixLength > 8 * value.getAddress().length) {\n      throw new IllegalArgumentException(\"illegal prefixLength '\" + prefixLength + \"'. Must be 0-32 for IPv4 ranges, 0-128 for IPv6 ranges\");\n    }\n    // create the lower value by zeroing out the host portion, upper value by filling it with all ones.\n    byte lower[] = value.getAddress();\n    byte upper[] = value.getAddress();\n    for (int i = prefixLength; i < 8 * lower.length; i++) {\n      int m = 1 << (7 - (i & 7));\n      lower[i >> 3] &= ~m;\n      upper[i >> 3] |= m;\n    }\n    try {\n      return newRangeQuery(field, InetAddress.getByAddress(lower), InetAddress.getByAddress(upper));\n    } catch (UnknownHostException e) {\n      throw new AssertionError(e); // values are coming from InetAddress\n    }\n  }\n\n","sourceOld":"  /** \n   * Create a prefix query for matching a CIDR network range.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param value any host address\n   * @param prefixLength the network prefix length for this address. This is also known as the subnet mask in the context of IPv4 addresses.\n   * @throws IllegalArgumentException if {@code field} is null, or prefixLength is invalid.\n   * @return a query matching documents with addresses contained within this network\n   */\n  public static Query newPrefixQuery(String field, InetAddress value, int prefixLength) {\n    if (value == null) {\n      throw new IllegalArgumentException(\"InetAddress must not be null\");\n    }\n    if (prefixLength < 0 || prefixLength > 8 * value.getAddress().length) {\n      throw new IllegalArgumentException(\"illegal prefixLength '\" + prefixLength + \"'. Must be 0-32 for IPv4 ranges, 0-128 for IPv6 ranges\");\n    }\n    // create the lower value by zeroing out the host portion, upper value by filling it with all ones.\n    byte lower[] = value.getAddress();\n    byte upper[] = value.getAddress();\n    for (int i = prefixLength; i < 8 * lower.length; i++) {\n      lower[i >> 3] &= ~(1 << (i & 7));\n      upper[i >> 3] |= 1 << (i & 7);\n    }\n    try {\n      return newRangeQuery(field, InetAddress.getByAddress(lower), InetAddress.getByAddress(upper));\n    } catch (UnknownHostException e) {\n      throw new AssertionError(e); // values are coming from InetAddress\n    }\n  }\n\n","bugFix":["dd4aa10c3623b9da92a555b8d04677af8fe86877"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b701e0fcef214f86bab1daf107adce0b0131212","date":1461241874,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newPrefixQuery(String,InetAddress,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newPrefixQuery(String,InetAddress,int).mjava","sourceNew":"  /** \n   * Create a prefix query for matching a CIDR network range.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param value any host address\n   * @param prefixLength the network prefix length for this address. This is also known as the subnet mask in the context of IPv4 addresses.\n   * @throws IllegalArgumentException if {@code field} is null, or prefixLength is invalid.\n   * @return a query matching documents with addresses contained within this network\n   */\n  public static Query newPrefixQuery(String field, InetAddress value, int prefixLength) {\n    if (value == null) {\n      throw new IllegalArgumentException(\"InetAddress must not be null\");\n    }\n    if (prefixLength < 0 || prefixLength > 8 * value.getAddress().length) {\n      throw new IllegalArgumentException(\"illegal prefixLength '\" + prefixLength + \"'. Must be 0-32 for IPv4 ranges, 0-128 for IPv6 ranges\");\n    }\n    // create the lower value by zeroing out the host portion, upper value by filling it with all ones.\n    byte lower[] = value.getAddress();\n    byte upper[] = value.getAddress();\n    for (int i = prefixLength; i < 8 * lower.length; i++) {\n      int m = 1 << (7 - (i & 7));\n      lower[i >> 3] &= ~m;\n      upper[i >> 3] |= m;\n    }\n    try {\n      return newRangeQuery(field, InetAddress.getByAddress(lower), InetAddress.getByAddress(upper));\n    } catch (UnknownHostException e) {\n      throw new AssertionError(e); // values are coming from InetAddress\n    }\n  }\n\n","sourceOld":"  /** \n   * Create a prefix query for matching a CIDR network range.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param value any host address\n   * @param prefixLength the network prefix length for this address. This is also known as the subnet mask in the context of IPv4 addresses.\n   * @throws IllegalArgumentException if {@code field} is null, or prefixLength is invalid.\n   * @return a query matching documents with addresses contained within this network\n   */\n  public static Query newPrefixQuery(String field, InetAddress value, int prefixLength) {\n    if (value == null) {\n      throw new IllegalArgumentException(\"InetAddress must not be null\");\n    }\n    if (prefixLength < 0 || prefixLength > 8 * value.getAddress().length) {\n      throw new IllegalArgumentException(\"illegal prefixLength '\" + prefixLength + \"'. Must be 0-32 for IPv4 ranges, 0-128 for IPv6 ranges\");\n    }\n    // create the lower value by zeroing out the host portion, upper value by filling it with all ones.\n    byte lower[] = value.getAddress();\n    byte upper[] = value.getAddress();\n    for (int i = prefixLength; i < 8 * lower.length; i++) {\n      lower[i >> 3] &= ~(1 << (i & 7));\n      upper[i >> 3] |= 1 << (i & 7);\n    }\n    try {\n      return newRangeQuery(field, InetAddress.getByAddress(lower), InetAddress.getByAddress(upper));\n    } catch (UnknownHostException e) {\n      throw new AssertionError(e); // values are coming from InetAddress\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a52b01a73cacbd2d360240e72d64c0ba353618f","date":1489389749,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/document/InetAddressPoint#newPrefixQuery(String,InetAddress,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newPrefixQuery(String,InetAddress,int).mjava","sourceNew":"  /** \n   * Create a prefix query for matching a CIDR network range.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param value any host address\n   * @param prefixLength the network prefix length for this address. This is also known as the subnet mask in the context of IPv4 addresses.\n   * @throws IllegalArgumentException if {@code field} is null, or prefixLength is invalid.\n   * @return a query matching documents with addresses contained within this network\n   */\n  public static Query newPrefixQuery(String field, InetAddress value, int prefixLength) {\n    if (value == null) {\n      throw new IllegalArgumentException(\"InetAddress must not be null\");\n    }\n    if (prefixLength < 0 || prefixLength > 8 * value.getAddress().length) {\n      throw new IllegalArgumentException(\"illegal prefixLength '\" + prefixLength + \"'. Must be 0-32 for IPv4 ranges, 0-128 for IPv6 ranges\");\n    }\n    // create the lower value by zeroing out the host portion, upper value by filling it with all ones.\n    byte lower[] = value.getAddress();\n    byte upper[] = value.getAddress();\n    for (int i = prefixLength; i < 8 * lower.length; i++) {\n      int m = 1 << (7 - (i & 7));\n      lower[i >> 3] &= ~m;\n      upper[i >> 3] |= m;\n    }\n    try {\n      return newRangeQuery(field, InetAddress.getByAddress(lower), InetAddress.getByAddress(upper));\n    } catch (UnknownHostException e) {\n      throw new AssertionError(e); // values are coming from InetAddress\n    }\n  }\n\n","sourceOld":"  /** \n   * Create a prefix query for matching a CIDR network range.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param value any host address\n   * @param prefixLength the network prefix length for this address. This is also known as the subnet mask in the context of IPv4 addresses.\n   * @throws IllegalArgumentException if {@code field} is null, or prefixLength is invalid.\n   * @return a query matching documents with addresses contained within this network\n   */\n  public static Query newPrefixQuery(String field, InetAddress value, int prefixLength) {\n    if (value == null) {\n      throw new IllegalArgumentException(\"InetAddress must not be null\");\n    }\n    if (prefixLength < 0 || prefixLength > 8 * value.getAddress().length) {\n      throw new IllegalArgumentException(\"illegal prefixLength '\" + prefixLength + \"'. Must be 0-32 for IPv4 ranges, 0-128 for IPv6 ranges\");\n    }\n    // create the lower value by zeroing out the host portion, upper value by filling it with all ones.\n    byte lower[] = value.getAddress();\n    byte upper[] = value.getAddress();\n    for (int i = prefixLength; i < 8 * lower.length; i++) {\n      int m = 1 << (7 - (i & 7));\n      lower[i >> 3] &= ~m;\n      upper[i >> 3] |= m;\n    }\n    try {\n      return newRangeQuery(field, InetAddress.getByAddress(lower), InetAddress.getByAddress(upper));\n    } catch (UnknownHostException e) {\n      throw new AssertionError(e); // values are coming from InetAddress\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9b701e0fcef214f86bab1daf107adce0b0131212":["ad0d09e969f4763b0df4230f8e3f74357872a4e4","3f3b56c78dfadd81142dd9b9563806ed95a89fde"],"4a52b01a73cacbd2d360240e72d64c0ba353618f":["9b701e0fcef214f86bab1daf107adce0b0131212"],"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a5296efc4b319f5647b606629c093a94b23692c6"],"c422e924212367b334b4938f1fd3e44438e88c40":["609ba4ce51a7095e9815d4fb2666ec85714f8f54","1800b996d8677670482a071dcb7a48b08c423ace"],"1800b996d8677670482a071dcb7a48b08c423ace":["609ba4ce51a7095e9815d4fb2666ec85714f8f54"],"d3104a6ba367dfb690806b227c5ef17c42c6107b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f3b56c78dfadd81142dd9b9563806ed95a89fde":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"609ba4ce51a7095e9815d4fb2666ec85714f8f54":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad0d09e969f4763b0df4230f8e3f74357872a4e4":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d3104a6ba367dfb690806b227c5ef17c42c6107b"],"a5296efc4b319f5647b606629c093a94b23692c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d3104a6ba367dfb690806b227c5ef17c42c6107b"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["609ba4ce51a7095e9815d4fb2666ec85714f8f54","c422e924212367b334b4938f1fd3e44438e88c40"],"1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6":["7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","609ba4ce51a7095e9815d4fb2666ec85714f8f54"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4a52b01a73cacbd2d360240e72d64c0ba353618f"]},"commit2Childs":{"9b701e0fcef214f86bab1daf107adce0b0131212":["4a52b01a73cacbd2d360240e72d64c0ba353618f"],"4a52b01a73cacbd2d360240e72d64c0ba353618f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6":["609ba4ce51a7095e9815d4fb2666ec85714f8f54"],"c422e924212367b334b4938f1fd3e44438e88c40":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"1800b996d8677670482a071dcb7a48b08c423ace":["c422e924212367b334b4938f1fd3e44438e88c40"],"d3104a6ba367dfb690806b227c5ef17c42c6107b":["7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","a5296efc4b319f5647b606629c093a94b23692c6"],"3f3b56c78dfadd81142dd9b9563806ed95a89fde":["9b701e0fcef214f86bab1daf107adce0b0131212"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","d3104a6ba367dfb690806b227c5ef17c42c6107b","7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","a5296efc4b319f5647b606629c093a94b23692c6"],"609ba4ce51a7095e9815d4fb2666ec85714f8f54":["c422e924212367b334b4938f1fd3e44438e88c40","1800b996d8677670482a071dcb7a48b08c423ace","cf1a614098b46c9c22afebd7b898ae4d1d2fc273","1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6"],"ad0d09e969f4763b0df4230f8e3f74357872a4e4":["9b701e0fcef214f86bab1daf107adce0b0131212","3f3b56c78dfadd81142dd9b9563806ed95a89fde"],"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5":["1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6"],"a5296efc4b319f5647b606629c093a94b23692c6":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}