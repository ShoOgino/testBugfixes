{"path":"lucene/core/src/java/org/apache/lucene/util/SmallFloat#longToInt4(long).mjava","commits":[{"id":"615370d2b876c3435773b5174df2e2242ad7981a","date":1495117651,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SmallFloat#longToInt4(long).mjava","pathOld":"/dev/null","sourceNew":"  /** Float-like encoding for positive longs that preserves ordering and 4 significant bits. */\n  public static int longToInt4(long i) {\n    if (i < 0) {\n      throw new IllegalArgumentException(\"Only supports positive values, got \" + i);\n    }\n    int numBits = 64 - Long.numberOfLeadingZeros(i);\n    if (numBits < 4) {\n      // subnormal value\n      return Math.toIntExact(i);\n    } else {\n      // normal value\n      int shift = numBits - 4;\n      // only keep the 5 most significant bits\n      int encoded = Math.toIntExact(i >>> shift);\n      // clear the most significant bit, which is implicit\n      encoded &= 0x07;\n      // encode the shift, adding 1 because 0 is reserved for subnormal values\n      encoded |= (shift + 1) << 3;\n      return encoded;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SmallFloat#longToInt4(long).mjava","pathOld":"/dev/null","sourceNew":"  /** Float-like encoding for positive longs that preserves ordering and 4 significant bits. */\n  public static int longToInt4(long i) {\n    if (i < 0) {\n      throw new IllegalArgumentException(\"Only supports positive values, got \" + i);\n    }\n    int numBits = 64 - Long.numberOfLeadingZeros(i);\n    if (numBits < 4) {\n      // subnormal value\n      return Math.toIntExact(i);\n    } else {\n      // normal value\n      int shift = numBits - 4;\n      // only keep the 5 most significant bits\n      int encoded = Math.toIntExact(i >>> shift);\n      // clear the most significant bit, which is implicit\n      encoded &= 0x07;\n      // encode the shift, adding 1 because 0 is reserved for subnormal values\n      encoded |= (shift + 1) << 3;\n      return encoded;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","615370d2b876c3435773b5174df2e2242ad7981a"],"615370d2b876c3435773b5174df2e2242ad7981a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["615370d2b876c3435773b5174df2e2242ad7981a"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"615370d2b876c3435773b5174df2e2242ad7981a":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","615370d2b876c3435773b5174df2e2242ad7981a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}