{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#constructStream(String).mjava","commits":[{"id":"6209d9025a3f5ce74a8295606b15060efd4d7542","date":1442585859,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#constructStream(String).mjava","pathOld":"/dev/null","sourceNew":"  protected SolrStream constructStream(String sql) throws IOException {\n\n    try {\n      ZkStateReader zkStateReader = client.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Collection<Slice> slices = clusterState.getActiveSlices(this.collection);\n\n      if(slices == null) {\n        throw new Exception(\"Collection not found:\"+this.collection);\n      }\n\n      Map params = new HashMap();\n\n      List<Replica> shuffler = new ArrayList();\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          shuffler.add(replica);\n        }\n      }\n\n      Collections.shuffle(shuffler, new Random());\n\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", sql);\n      params.putAll(properties);\n\n      Replica rep = shuffler.get(0);\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n      String url = zkProps.getCoreUrl();\n      return new SolrStream(url, params);\n\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ec71d4701edbd96cfea97384101d13611393552","date":1444686705,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#constructStream(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#constructStream(String).mjava","sourceNew":"  protected SolrStream constructStream(String sql) throws IOException {\n\n    try {\n      ZkStateReader zkStateReader = client.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Collection<Slice> slices = clusterState.getActiveSlices(this.collection);\n\n      if(slices == null) {\n        throw new Exception(\"Collection not found:\"+this.collection);\n      }\n\n      Map params = new HashMap();\n\n      List<Replica> shuffler = new ArrayList();\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          shuffler.add(replica);\n        }\n      }\n\n      Collections.shuffle(shuffler, new Random());\n\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", sql);\n      params.putAll(properties);\n\n      Replica rep = shuffler.get(0);\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n      String url = zkProps.getCoreUrl();\n      return new SolrStream(url, params);\n\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  protected SolrStream constructStream(String sql) throws IOException {\n\n    try {\n      ZkStateReader zkStateReader = client.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Collection<Slice> slices = clusterState.getActiveSlices(this.collection);\n\n      if(slices == null) {\n        throw new Exception(\"Collection not found:\"+this.collection);\n      }\n\n      Map params = new HashMap();\n\n      List<Replica> shuffler = new ArrayList();\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          shuffler.add(replica);\n        }\n      }\n\n      Collections.shuffle(shuffler, new Random());\n\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", sql);\n      params.putAll(properties);\n\n      Replica rep = shuffler.get(0);\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n      String url = zkProps.getCoreUrl();\n      return new SolrStream(url, params);\n\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bf38d05ea0037f06f6e05ed747948f19a746d3c","date":1453230855,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#constructStream(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#constructStream(String).mjava","sourceNew":"  protected SolrStream constructStream(String sql) throws IOException {\n    try {\n      ZkStateReader zkStateReader = this.connection.getClient().getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Collection<Slice> slices = clusterState.getActiveSlices(this.connection.getCatalog());\n\n      if(slices == null) {\n        throw new Exception(\"Collection not found:\"+this.connection.getCatalog());\n      }\n\n      List<Replica> shuffler = new ArrayList<>();\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          shuffler.add(replica);\n        }\n      }\n\n      Collections.shuffle(shuffler, new Random());\n\n      Map<String, String> params = new HashMap<>();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", sql);\n      for(String propertyName : this.connection.getProperties().stringPropertyNames()) {\n        params.put(propertyName, this.connection.getProperties().getProperty(propertyName));\n      }\n\n      Replica rep = shuffler.get(0);\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n      String url = zkProps.getCoreUrl();\n      return new SolrStream(url, params);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  protected SolrStream constructStream(String sql) throws IOException {\n\n    try {\n      ZkStateReader zkStateReader = client.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Collection<Slice> slices = clusterState.getActiveSlices(this.collection);\n\n      if(slices == null) {\n        throw new Exception(\"Collection not found:\"+this.collection);\n      }\n\n      Map params = new HashMap();\n\n      List<Replica> shuffler = new ArrayList();\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          shuffler.add(replica);\n        }\n      }\n\n      Collections.shuffle(shuffler, new Random());\n\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", sql);\n      params.putAll(properties);\n\n      Replica rep = shuffler.get(0);\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n      String url = zkProps.getCoreUrl();\n      return new SolrStream(url, params);\n\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2af3708aa5f155e8f27905be60c119be0e39be8","date":1454361673,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#constructStream(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#constructStream(String).mjava","sourceNew":"  protected SolrStream constructStream(String sql) throws IOException {\n    try {\n      ZkStateReader zkStateReader = this.connection.getClient().getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Collection<Slice> slices = clusterState.getActiveSlices(this.connection.getSchema());\n\n      if(slices == null) {\n        throw new Exception(\"Collection not found:\"+this.connection.getSchema());\n      }\n\n      List<Replica> shuffler = new ArrayList<>();\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          shuffler.add(replica);\n        }\n      }\n\n      Collections.shuffle(shuffler, new Random());\n\n      Map<String, String> params = new HashMap<>();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", sql);\n      for(String propertyName : this.connection.getProperties().stringPropertyNames()) {\n        params.put(propertyName, this.connection.getProperties().getProperty(propertyName));\n      }\n\n      Replica rep = shuffler.get(0);\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n      String url = zkProps.getCoreUrl();\n      return new SolrStream(url, params);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  protected SolrStream constructStream(String sql) throws IOException {\n    try {\n      ZkStateReader zkStateReader = this.connection.getClient().getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Collection<Slice> slices = clusterState.getActiveSlices(this.connection.getCatalog());\n\n      if(slices == null) {\n        throw new Exception(\"Collection not found:\"+this.connection.getCatalog());\n      }\n\n      List<Replica> shuffler = new ArrayList<>();\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          shuffler.add(replica);\n        }\n      }\n\n      Collections.shuffle(shuffler, new Random());\n\n      Map<String, String> params = new HashMap<>();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", sql);\n      for(String propertyName : this.connection.getProperties().stringPropertyNames()) {\n        params.put(propertyName, this.connection.getProperties().getProperty(propertyName));\n      }\n\n      Replica rep = shuffler.get(0);\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n      String url = zkProps.getCoreUrl();\n      return new SolrStream(url, params);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#constructStream(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#constructStream(String).mjava","sourceNew":"  protected SolrStream constructStream(String sql) throws IOException {\n    try {\n      ZkStateReader zkStateReader = this.connection.getClient().getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Collection<Slice> slices = clusterState.getActiveSlices(this.connection.getSchema());\n\n      if(slices == null) {\n        throw new Exception(\"Collection not found:\"+this.connection.getSchema());\n      }\n\n      List<Replica> shuffler = new ArrayList<>();\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          shuffler.add(replica);\n        }\n      }\n\n      Collections.shuffle(shuffler, new Random());\n\n      Map<String, String> params = new HashMap<>();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", sql);\n      for(String propertyName : this.connection.getProperties().stringPropertyNames()) {\n        params.put(propertyName, this.connection.getProperties().getProperty(propertyName));\n      }\n\n      Replica rep = shuffler.get(0);\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n      String url = zkProps.getCoreUrl();\n      return new SolrStream(url, params);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  protected SolrStream constructStream(String sql) throws IOException {\n    try {\n      ZkStateReader zkStateReader = this.connection.getClient().getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Collection<Slice> slices = clusterState.getActiveSlices(this.connection.getCatalog());\n\n      if(slices == null) {\n        throw new Exception(\"Collection not found:\"+this.connection.getCatalog());\n      }\n\n      List<Replica> shuffler = new ArrayList<>();\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          shuffler.add(replica);\n        }\n      }\n\n      Collections.shuffle(shuffler, new Random());\n\n      Map<String, String> params = new HashMap<>();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", sql);\n      for(String propertyName : this.connection.getProperties().stringPropertyNames()) {\n        params.put(propertyName, this.connection.getProperties().getProperty(propertyName));\n      }\n\n      Replica rep = shuffler.get(0);\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n      String url = zkProps.getCoreUrl();\n      return new SolrStream(url, params);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa9b48fdb08e049dc94a4077226b510eb68f2b24","date":1458766161,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#constructStream(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#constructStream(String).mjava","sourceNew":"  protected SolrStream constructStream(String sql) throws IOException {\n    try {\n      ZkStateReader zkStateReader = this.connection.getClient().getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Collection<Slice> slices = clusterState.getActiveSlices(this.connection.getCollection());\n\n      if(slices == null) {\n        throw new Exception(\"Collection not found:\"+this.connection.getCollection());\n      }\n\n      List<Replica> shuffler = new ArrayList<>();\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          shuffler.add(replica);\n        }\n      }\n\n      Collections.shuffle(shuffler, new Random());\n\n      Map<String, String> params = new HashMap<>();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", sql);\n      for(String propertyName : this.connection.getProperties().stringPropertyNames()) {\n        params.put(propertyName, this.connection.getProperties().getProperty(propertyName));\n      }\n\n      Replica rep = shuffler.get(0);\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n      String url = zkProps.getCoreUrl();\n      return new SolrStream(url, params);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  protected SolrStream constructStream(String sql) throws IOException {\n    try {\n      ZkStateReader zkStateReader = this.connection.getClient().getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Collection<Slice> slices = clusterState.getActiveSlices(this.connection.getSchema());\n\n      if(slices == null) {\n        throw new Exception(\"Collection not found:\"+this.connection.getSchema());\n      }\n\n      List<Replica> shuffler = new ArrayList<>();\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          shuffler.add(replica);\n        }\n      }\n\n      Collections.shuffle(shuffler, new Random());\n\n      Map<String, String> params = new HashMap<>();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", sql);\n      for(String propertyName : this.connection.getProperties().stringPropertyNames()) {\n        params.put(propertyName, this.connection.getProperties().getProperty(propertyName));\n      }\n\n      Replica rep = shuffler.get(0);\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n      String url = zkProps.getCoreUrl();\n      return new SolrStream(url, params);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"826d15444ddf61716dc768c229cd54b2c2ccce1c","date":1462822652,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#constructStream(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#constructStream(String).mjava","sourceNew":"  protected SolrStream constructStream(String sql) throws IOException {\n    try {\n      ZkStateReader zkStateReader = this.connection.getClient().getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Collection<Slice> slices = clusterState.getActiveSlices(this.connection.getCollection());\n\n      if(slices == null) {\n        throw new Exception(\"Collection not found:\"+this.connection.getCollection());\n      }\n\n      List<Replica> shuffler = new ArrayList<>();\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          shuffler.add(replica);\n        }\n      }\n\n      Collections.shuffle(shuffler, new Random());\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CommonParams.QT, \"/sql\");\n      params.set(\"stmt\", sql);\n      for(String propertyName : this.connection.getProperties().stringPropertyNames()) {\n        params.set(propertyName, this.connection.getProperties().getProperty(propertyName));\n      }\n\n      Replica rep = shuffler.get(0);\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n      String url = zkProps.getCoreUrl();\n      return new SolrStream(url, params);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  protected SolrStream constructStream(String sql) throws IOException {\n    try {\n      ZkStateReader zkStateReader = this.connection.getClient().getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Collection<Slice> slices = clusterState.getActiveSlices(this.connection.getCollection());\n\n      if(slices == null) {\n        throw new Exception(\"Collection not found:\"+this.connection.getCollection());\n      }\n\n      List<Replica> shuffler = new ArrayList<>();\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          shuffler.add(replica);\n        }\n      }\n\n      Collections.shuffle(shuffler, new Random());\n\n      Map<String, String> params = new HashMap<>();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", sql);\n      for(String propertyName : this.connection.getProperties().stringPropertyNames()) {\n        params.put(propertyName, this.connection.getProperties().getProperty(propertyName));\n      }\n\n      Replica rep = shuffler.get(0);\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n      String url = zkProps.getCoreUrl();\n      return new SolrStream(url, params);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#constructStream(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#constructStream(String).mjava","sourceNew":"  protected SolrStream constructStream(String sql) throws IOException {\n    try {\n      ZkStateReader zkStateReader = this.connection.getClient().getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Collection<Slice> slices = clusterState.getActiveSlices(this.connection.getCollection());\n\n      if(slices == null) {\n        throw new Exception(\"Collection not found:\"+this.connection.getCollection());\n      }\n\n      List<Replica> shuffler = new ArrayList<>();\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          shuffler.add(replica);\n        }\n      }\n\n      Collections.shuffle(shuffler, new Random());\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CommonParams.QT, \"/sql\");\n      params.set(\"stmt\", sql);\n      for(String propertyName : this.connection.getProperties().stringPropertyNames()) {\n        params.set(propertyName, this.connection.getProperties().getProperty(propertyName));\n      }\n\n      Replica rep = shuffler.get(0);\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n      String url = zkProps.getCoreUrl();\n      return new SolrStream(url, params);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  protected SolrStream constructStream(String sql) throws IOException {\n    try {\n      ZkStateReader zkStateReader = this.connection.getClient().getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Collection<Slice> slices = clusterState.getActiveSlices(this.connection.getCollection());\n\n      if(slices == null) {\n        throw new Exception(\"Collection not found:\"+this.connection.getCollection());\n      }\n\n      List<Replica> shuffler = new ArrayList<>();\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          shuffler.add(replica);\n        }\n      }\n\n      Collections.shuffle(shuffler, new Random());\n\n      Map<String, String> params = new HashMap<>();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", sql);\n      for(String propertyName : this.connection.getProperties().stringPropertyNames()) {\n        params.put(propertyName, this.connection.getProperties().getProperty(propertyName));\n      }\n\n      Replica rep = shuffler.get(0);\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n      String url = zkProps.getCoreUrl();\n      return new SolrStream(url, params);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#constructStream(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#constructStream(String).mjava","sourceNew":"  protected SolrStream constructStream(String sql) throws IOException {\n    try {\n      ZkStateReader zkStateReader = this.connection.getClient().getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Collection<Slice> slices = clusterState.getActiveSlices(this.connection.getCollection());\n\n      if(slices == null) {\n        throw new Exception(\"Collection not found:\"+this.connection.getCollection());\n      }\n\n      List<Replica> shuffler = new ArrayList<>();\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          shuffler.add(replica);\n        }\n      }\n\n      Collections.shuffle(shuffler, new Random());\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CommonParams.QT, \"/sql\");\n      params.set(\"stmt\", sql);\n      for(String propertyName : this.connection.getProperties().stringPropertyNames()) {\n        params.set(propertyName, this.connection.getProperties().getProperty(propertyName));\n      }\n\n      Replica rep = shuffler.get(0);\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n      String url = zkProps.getCoreUrl();\n      return new SolrStream(url, params);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  protected SolrStream constructStream(String sql) throws IOException {\n    try {\n      ZkStateReader zkStateReader = this.connection.getClient().getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Collection<Slice> slices = clusterState.getActiveSlices(this.connection.getCollection());\n\n      if(slices == null) {\n        throw new Exception(\"Collection not found:\"+this.connection.getCollection());\n      }\n\n      List<Replica> shuffler = new ArrayList<>();\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          shuffler.add(replica);\n        }\n      }\n\n      Collections.shuffle(shuffler, new Random());\n\n      Map<String, String> params = new HashMap<>();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", sql);\n      for(String propertyName : this.connection.getProperties().stringPropertyNames()) {\n        params.put(propertyName, this.connection.getProperties().getProperty(propertyName));\n      }\n\n      Replica rep = shuffler.get(0);\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n      String url = zkProps.getCoreUrl();\n      return new SolrStream(url, params);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#constructStream(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#constructStream(String).mjava","sourceNew":"  protected SolrStream constructStream(String sql) throws IOException {\n    try {\n      ZkStateReader zkStateReader = this.connection.getClient().getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Collection<Slice> slices = clusterState.getActiveSlices(this.connection.getCollection());\n\n      if(slices == null) {\n        throw new Exception(\"Collection not found:\"+this.connection.getCollection());\n      }\n\n      List<Replica> shuffler = new ArrayList<>();\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          shuffler.add(replica);\n        }\n      }\n\n      Collections.shuffle(shuffler, new Random());\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CommonParams.QT, \"/sql\");\n      params.set(\"stmt\", sql);\n      for(String propertyName : this.connection.getProperties().stringPropertyNames()) {\n        params.set(propertyName, this.connection.getProperties().getProperty(propertyName));\n      }\n\n      Replica rep = shuffler.get(0);\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n      String url = zkProps.getCoreUrl();\n      return new SolrStream(url, params);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  protected SolrStream constructStream(String sql) throws IOException {\n    try {\n      ZkStateReader zkStateReader = this.connection.getClient().getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Collection<Slice> slices = clusterState.getActiveSlices(this.connection.getCollection());\n\n      if(slices == null) {\n        throw new Exception(\"Collection not found:\"+this.connection.getCollection());\n      }\n\n      List<Replica> shuffler = new ArrayList<>();\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          shuffler.add(replica);\n        }\n      }\n\n      Collections.shuffle(shuffler, new Random());\n\n      Map<String, String> params = new HashMap<>();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", sql);\n      for(String propertyName : this.connection.getProperties().stringPropertyNames()) {\n        params.put(propertyName, this.connection.getProperties().getProperty(propertyName));\n      }\n\n      Replica rep = shuffler.get(0);\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n      String url = zkProps.getCoreUrl();\n      return new SolrStream(url, params);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c969f15cd04d31e520319c619a445ae21f02d72","date":1479263638,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#constructStream(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#constructStream(String).mjava","sourceNew":"  protected SolrStream constructStream(String sql) throws IOException {\n    try {\n      ZkStateReader zkStateReader = this.connection.getClient().getZkStateReader();\n      Collection<Slice> slices = CloudSolrStream.getSlices(this.connection.getCollection(), zkStateReader, true);\n\n      List<Replica> shuffler = new ArrayList<>();\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          shuffler.add(replica);\n        }\n      }\n\n      Collections.shuffle(shuffler, new Random());\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CommonParams.QT, \"/sql\");\n      params.set(\"stmt\", sql);\n      for(String propertyName : this.connection.getProperties().stringPropertyNames()) {\n        params.set(propertyName, this.connection.getProperties().getProperty(propertyName));\n      }\n\n      Replica rep = shuffler.get(0);\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n      String url = zkProps.getCoreUrl();\n      return new SolrStream(url, params);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  protected SolrStream constructStream(String sql) throws IOException {\n    try {\n      ZkStateReader zkStateReader = this.connection.getClient().getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Collection<Slice> slices = clusterState.getActiveSlices(this.connection.getCollection());\n\n      if(slices == null) {\n        throw new Exception(\"Collection not found:\"+this.connection.getCollection());\n      }\n\n      List<Replica> shuffler = new ArrayList<>();\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          shuffler.add(replica);\n        }\n      }\n\n      Collections.shuffle(shuffler, new Random());\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CommonParams.QT, \"/sql\");\n      params.set(\"stmt\", sql);\n      for(String propertyName : this.connection.getProperties().stringPropertyNames()) {\n        params.set(propertyName, this.connection.getProperties().getProperty(propertyName));\n      }\n\n      Replica rep = shuffler.get(0);\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n      String url = zkProps.getCoreUrl();\n      return new SolrStream(url, params);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#constructStream(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#constructStream(String).mjava","sourceNew":"  protected SolrStream constructStream(String sql) throws IOException {\n    try {\n      ZkStateReader zkStateReader = this.connection.getClient().getZkStateReader();\n      Collection<Slice> slices = CloudSolrStream.getSlices(this.connection.getCollection(), zkStateReader, true);\n\n      List<Replica> shuffler = new ArrayList<>();\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          shuffler.add(replica);\n        }\n      }\n\n      Collections.shuffle(shuffler, new Random());\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CommonParams.QT, \"/sql\");\n      params.set(\"stmt\", sql);\n      for(String propertyName : this.connection.getProperties().stringPropertyNames()) {\n        params.set(propertyName, this.connection.getProperties().getProperty(propertyName));\n      }\n\n      Replica rep = shuffler.get(0);\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n      String url = zkProps.getCoreUrl();\n      return new SolrStream(url, params);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  protected SolrStream constructStream(String sql) throws IOException {\n    try {\n      ZkStateReader zkStateReader = this.connection.getClient().getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Collection<Slice> slices = clusterState.getActiveSlices(this.connection.getCollection());\n\n      if(slices == null) {\n        throw new Exception(\"Collection not found:\"+this.connection.getCollection());\n      }\n\n      List<Replica> shuffler = new ArrayList<>();\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          shuffler.add(replica);\n        }\n      }\n\n      Collections.shuffle(shuffler, new Random());\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CommonParams.QT, \"/sql\");\n      params.set(\"stmt\", sql);\n      for(String propertyName : this.connection.getProperties().stringPropertyNames()) {\n        params.set(propertyName, this.connection.getProperties().getProperty(propertyName));\n      }\n\n      Replica rep = shuffler.get(0);\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n      String url = zkProps.getCoreUrl();\n      return new SolrStream(url, params);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c84df91ca6a2e8d6f26f185663112546a27f6b45","date":1536077760,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#constructStream(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#constructStream(String).mjava","sourceNew":"  protected SolrStream constructStream(String sql) throws IOException {\n    try {\n      ZkStateReader zkStateReader = this.connection.getClient().getZkStateReader();\n      Slice[] slices = CloudSolrStream.getSlices(this.connection.getCollection(), zkStateReader, true);\n\n      List<Replica> shuffler = new ArrayList<>();\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          shuffler.add(replica);\n        }\n      }\n\n      Collections.shuffle(shuffler, new Random());\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CommonParams.QT, \"/sql\");\n      params.set(\"stmt\", sql);\n      for(String propertyName : this.connection.getProperties().stringPropertyNames()) {\n        params.set(propertyName, this.connection.getProperties().getProperty(propertyName));\n      }\n\n      Replica rep = shuffler.get(0);\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n      String url = zkProps.getCoreUrl();\n      return new SolrStream(url, params);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  protected SolrStream constructStream(String sql) throws IOException {\n    try {\n      ZkStateReader zkStateReader = this.connection.getClient().getZkStateReader();\n      Collection<Slice> slices = CloudSolrStream.getSlices(this.connection.getCollection(), zkStateReader, true);\n\n      List<Replica> shuffler = new ArrayList<>();\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          shuffler.add(replica);\n        }\n      }\n\n      Collections.shuffle(shuffler, new Random());\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CommonParams.QT, \"/sql\");\n      params.set(\"stmt\", sql);\n      for(String propertyName : this.connection.getProperties().stringPropertyNames()) {\n        params.set(propertyName, this.connection.getProperties().getProperty(propertyName));\n      }\n\n      Replica rep = shuffler.get(0);\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n      String url = zkProps.getCoreUrl();\n      return new SolrStream(url, params);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c84df91ca6a2e8d6f26f185663112546a27f6b45":["8c969f15cd04d31e520319c619a445ae21f02d72"],"d2af3708aa5f155e8f27905be60c119be0e39be8":["9bf38d05ea0037f06f6e05ed747948f19a746d3c"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["9bf38d05ea0037f06f6e05ed747948f19a746d3c","d2af3708aa5f155e8f27905be60c119be0e39be8"],"6209d9025a3f5ce74a8295606b15060efd4d7542":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aa9b48fdb08e049dc94a4077226b510eb68f2b24":["d2af3708aa5f155e8f27905be60c119be0e39be8"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["aa9b48fdb08e049dc94a4077226b510eb68f2b24"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["aa9b48fdb08e049dc94a4077226b510eb68f2b24","d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["aa9b48fdb08e049dc94a4077226b510eb68f2b24","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"3ec71d4701edbd96cfea97384101d13611393552":["6209d9025a3f5ce74a8295606b15060efd4d7542"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8c969f15cd04d31e520319c619a445ae21f02d72"],"9bf38d05ea0037f06f6e05ed747948f19a746d3c":["3ec71d4701edbd96cfea97384101d13611393552"],"e66a459d38c1c4a2f97128433dab546f683a9fed":["aa9b48fdb08e049dc94a4077226b510eb68f2b24","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"8c969f15cd04d31e520319c619a445ae21f02d72":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c84df91ca6a2e8d6f26f185663112546a27f6b45"]},"commit2Childs":{"c84df91ca6a2e8d6f26f185663112546a27f6b45":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d2af3708aa5f155e8f27905be60c119be0e39be8":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","aa9b48fdb08e049dc94a4077226b510eb68f2b24"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"6209d9025a3f5ce74a8295606b15060efd4d7542":["3ec71d4701edbd96cfea97384101d13611393552"],"aa9b48fdb08e049dc94a4077226b510eb68f2b24":["826d15444ddf61716dc768c229cd54b2c2ccce1c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","e66a459d38c1c4a2f97128433dab546f683a9fed"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["d470c8182e92b264680e34081b75e70a9f2b3c89","e66a459d38c1c4a2f97128433dab546f683a9fed"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8c969f15cd04d31e520319c619a445ae21f02d72"],"3ec71d4701edbd96cfea97384101d13611393552":["9bf38d05ea0037f06f6e05ed747948f19a746d3c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6209d9025a3f5ce74a8295606b15060efd4d7542"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"9bf38d05ea0037f06f6e05ed747948f19a746d3c":["d2af3708aa5f155e8f27905be60c119be0e39be8","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"8c969f15cd04d31e520319c619a445ae21f02d72":["c84df91ca6a2e8d6f26f185663112546a27f6b45","a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","a1ef55e1fff7ff44354432770ad8bc19be1fcc75","e66a459d38c1c4a2f97128433dab546f683a9fed","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}