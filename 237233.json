{"path":"lucene/sandbox/src/test/org/apache/lucene/search/TestCoveringQuery#testEquals().mjava","commits":[{"id":"7d5484fcfd752ec7a2ff2ed6a860c539fdf92da8","date":1503307834,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestCoveringQuery#testEquals().mjava","pathOld":"/dev/null","sourceNew":"  public void testEquals() {\n    TermQuery tq1 = new TermQuery(new Term(\"foo\", \"bar\"));\n    TermQuery tq2 = new TermQuery(new Term(\"foo\", \"quux\"));\n    LongValuesSource vs = LongValuesSource.fromLongField(\"field\");\n\n    CoveringQuery q1 = new CoveringQuery(Arrays.asList(tq1, tq2), vs);\n    CoveringQuery q2 = new CoveringQuery(Arrays.asList(tq1, tq2), vs);\n    QueryUtils.checkEqual(q1, q2);\n\n    // order does not matter\n    CoveringQuery q3 = new CoveringQuery(Arrays.asList(tq2, tq1), vs);\n    QueryUtils.checkEqual(q1, q3);\n\n    // values source matters\n    CoveringQuery q4 = new CoveringQuery(Arrays.asList(tq2, tq1), LongValuesSource.fromLongField(\"other_field\"));\n    QueryUtils.checkUnequal(q1, q4);\n\n    // duplicates matter\n    CoveringQuery q5 = new CoveringQuery(Arrays.asList(tq1, tq1, tq2), vs);\n    CoveringQuery q6 = new CoveringQuery(Arrays.asList(tq1, tq2, tq2), vs);\n    QueryUtils.checkUnequal(q5, q6);\n\n    // query matters\n    CoveringQuery q7 = new CoveringQuery(Arrays.asList(tq1), vs);\n    CoveringQuery q8 = new CoveringQuery(Arrays.asList(tq2), vs);\n    QueryUtils.checkUnequal(q7, q8);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8e4fbf51a35a1292b838d83f793794c274932a1","date":1503371298,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestCoveringQuery#testEquals().mjava","pathOld":"/dev/null","sourceNew":"  public void testEquals() {\n    TermQuery tq1 = new TermQuery(new Term(\"foo\", \"bar\"));\n    TermQuery tq2 = new TermQuery(new Term(\"foo\", \"quux\"));\n    LongValuesSource vs = LongValuesSource.fromLongField(\"field\");\n\n    CoveringQuery q1 = new CoveringQuery(Arrays.asList(tq1, tq2), vs);\n    CoveringQuery q2 = new CoveringQuery(Arrays.asList(tq1, tq2), vs);\n    QueryUtils.checkEqual(q1, q2);\n\n    // order does not matter\n    CoveringQuery q3 = new CoveringQuery(Arrays.asList(tq2, tq1), vs);\n    QueryUtils.checkEqual(q1, q3);\n\n    // values source matters\n    CoveringQuery q4 = new CoveringQuery(Arrays.asList(tq2, tq1), LongValuesSource.fromLongField(\"other_field\"));\n    QueryUtils.checkUnequal(q1, q4);\n\n    // duplicates matter\n    CoveringQuery q5 = new CoveringQuery(Arrays.asList(tq1, tq1, tq2), vs);\n    CoveringQuery q6 = new CoveringQuery(Arrays.asList(tq1, tq2, tq2), vs);\n    QueryUtils.checkUnequal(q5, q6);\n\n    // query matters\n    CoveringQuery q7 = new CoveringQuery(Arrays.asList(tq1), vs);\n    CoveringQuery q8 = new CoveringQuery(Arrays.asList(tq2), vs);\n    QueryUtils.checkUnequal(q7, q8);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestCoveringQuery#testEquals().mjava","pathOld":"/dev/null","sourceNew":"  public void testEquals() {\n    TermQuery tq1 = new TermQuery(new Term(\"foo\", \"bar\"));\n    TermQuery tq2 = new TermQuery(new Term(\"foo\", \"quux\"));\n    LongValuesSource vs = LongValuesSource.fromLongField(\"field\");\n\n    CoveringQuery q1 = new CoveringQuery(Arrays.asList(tq1, tq2), vs);\n    CoveringQuery q2 = new CoveringQuery(Arrays.asList(tq1, tq2), vs);\n    QueryUtils.checkEqual(q1, q2);\n\n    // order does not matter\n    CoveringQuery q3 = new CoveringQuery(Arrays.asList(tq2, tq1), vs);\n    QueryUtils.checkEqual(q1, q3);\n\n    // values source matters\n    CoveringQuery q4 = new CoveringQuery(Arrays.asList(tq2, tq1), LongValuesSource.fromLongField(\"other_field\"));\n    QueryUtils.checkUnequal(q1, q4);\n\n    // duplicates matter\n    CoveringQuery q5 = new CoveringQuery(Arrays.asList(tq1, tq1, tq2), vs);\n    CoveringQuery q6 = new CoveringQuery(Arrays.asList(tq1, tq2, tq2), vs);\n    QueryUtils.checkUnequal(q5, q6);\n\n    // query matters\n    CoveringQuery q7 = new CoveringQuery(Arrays.asList(tq1), vs);\n    CoveringQuery q8 = new CoveringQuery(Arrays.asList(tq2), vs);\n    QueryUtils.checkUnequal(q7, q8);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a8e4fbf51a35a1292b838d83f793794c274932a1"],"7d5484fcfd752ec7a2ff2ed6a860c539fdf92da8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a8e4fbf51a35a1292b838d83f793794c274932a1"],"a8e4fbf51a35a1292b838d83f793794c274932a1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7d5484fcfd752ec7a2ff2ed6a860c539fdf92da8"]},"commit2Childs":{"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"7d5484fcfd752ec7a2ff2ed6a860c539fdf92da8":["a8e4fbf51a35a1292b838d83f793794c274932a1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","7d5484fcfd752ec7a2ff2ed6a860c539fdf92da8","a8e4fbf51a35a1292b838d83f793794c274932a1"],"a8e4fbf51a35a1292b838d83f793794c274932a1":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}