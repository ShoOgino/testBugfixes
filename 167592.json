{"path":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#copyIfNotNull(SolrParams,Map[String,Object],String...).mjava","commits":[{"id":"1eeda7e62e149f90eee8895af874c74efa7d4852","date":1375293182,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#copyIfNotNull(SolrParams,Map[String,Object],String...).mjava","pathOld":"/dev/null","sourceNew":"  private static void copyIfNotNull(SolrParams params, Map<String, Object> props, String... keys) {\n    if(keys !=null){\n      for (String key : keys) {\n        String v = params.get(key);\n        if(v != null) props.put(key,v);\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#copyIfNotNull(SolrParams,Map[String,Object],String...).mjava","pathOld":"/dev/null","sourceNew":"  private static void copyIfNotNull(SolrParams params, Map<String, Object> props, String... keys) {\n    if(keys !=null){\n      for (String key : keys) {\n        String v = params.get(key);\n        if(v != null) props.put(key,v);\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e187a371a1d09379bb452c2c13a7b9221525dff8","date":1379517004,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#copyIfNotNull(SolrParams,Map[String,Object],String...).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#copyIfNotNull(SolrParams,Map[String,Object],String...).mjava","sourceNew":"  private static void copyIfNotNull(SolrParams params, Map<String, Object> props, String... keys) {\n    ArrayList<String> prefixes = new ArrayList<String>(1);\n    if(keys !=null){\n      for (String key : keys) {\n        if(key.endsWith(\".\")) {\n          prefixes.add(key);\n          continue;\n        }\n        String v = params.get(key);\n        if(v != null) props.put(key,v);\n      }\n    }\n    if(prefixes.isEmpty()) return;\n    Iterator<String> it = params.getParameterNamesIterator();\n    String prefix = null;\n    for(;it.hasNext();){\n      String name = it.next();\n      for (int i = 0; i < prefixes.size(); i++) {\n        if(name.startsWith(prefixes.get(i))){\n          String val = params.get(name);\n          if(val !=null) props.put(name,val);\n        }\n      }\n    }\n\n  }\n\n","sourceOld":"  private static void copyIfNotNull(SolrParams params, Map<String, Object> props, String... keys) {\n    if(keys !=null){\n      for (String key : keys) {\n        String v = params.get(key);\n        if(v != null) props.put(key,v);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#copyIfNotNull(SolrParams,Map[String,Object],String...).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#copyIfNotNull(SolrParams,Map[String,Object],String...).mjava","sourceNew":"  private static void copyIfNotNull(SolrParams params, Map<String, Object> props, String... keys) {\n    ArrayList<String> prefixes = new ArrayList<>(1);\n    if(keys !=null){\n      for (String key : keys) {\n        if(key.endsWith(\".\")) {\n          prefixes.add(key);\n          continue;\n        }\n        String v = params.get(key);\n        if(v != null) props.put(key,v);\n      }\n    }\n    if(prefixes.isEmpty()) return;\n    Iterator<String> it = params.getParameterNamesIterator();\n    String prefix = null;\n    for(;it.hasNext();){\n      String name = it.next();\n      for (int i = 0; i < prefixes.size(); i++) {\n        if(name.startsWith(prefixes.get(i))){\n          String val = params.get(name);\n          if(val !=null) props.put(name,val);\n        }\n      }\n    }\n\n  }\n\n","sourceOld":"  private static void copyIfNotNull(SolrParams params, Map<String, Object> props, String... keys) {\n    ArrayList<String> prefixes = new ArrayList<String>(1);\n    if(keys !=null){\n      for (String key : keys) {\n        if(key.endsWith(\".\")) {\n          prefixes.add(key);\n          continue;\n        }\n        String v = params.get(key);\n        if(v != null) props.put(key,v);\n      }\n    }\n    if(prefixes.isEmpty()) return;\n    Iterator<String> it = params.getParameterNamesIterator();\n    String prefix = null;\n    for(;it.hasNext();){\n      String name = it.next();\n      for (int i = 0; i < prefixes.size(); i++) {\n        if(name.startsWith(prefixes.get(i))){\n          String val = params.get(name);\n          if(val !=null) props.put(name,val);\n        }\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ebd3a557326ef3eab85b73a8cff781f7d801248","date":1431620752,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#copyIfNotNull(SolrParams,Map[String,Object],String...).mjava","sourceNew":null,"sourceOld":"  private static void copyIfNotNull(SolrParams params, Map<String, Object> props, String... keys) {\n    ArrayList<String> prefixes = new ArrayList<>(1);\n    if(keys !=null){\n      for (String key : keys) {\n        if(key.endsWith(\".\")) {\n          prefixes.add(key);\n          continue;\n        }\n        String v = params.get(key);\n        if(v != null) props.put(key,v);\n      }\n    }\n    if(prefixes.isEmpty()) return;\n    Iterator<String> it = params.getParameterNamesIterator();\n    String prefix = null;\n    for(;it.hasNext();){\n      String name = it.next();\n      for (int i = 0; i < prefixes.size(); i++) {\n        if(name.startsWith(prefixes.get(i))){\n          String val = params.get(name);\n          if(val !=null) props.put(name,val);\n        }\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["e187a371a1d09379bb452c2c13a7b9221525dff8"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1eeda7e62e149f90eee8895af874c74efa7d4852"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e187a371a1d09379bb452c2c13a7b9221525dff8":["1eeda7e62e149f90eee8895af874c74efa7d4852"],"9ebd3a557326ef3eab85b73a8cff781f7d801248":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"1eeda7e62e149f90eee8895af874c74efa7d4852":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ebd3a557326ef3eab85b73a8cff781f7d801248"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["9ebd3a557326ef3eab85b73a8cff781f7d801248"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","1eeda7e62e149f90eee8895af874c74efa7d4852"],"e187a371a1d09379bb452c2c13a7b9221525dff8":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"9ebd3a557326ef3eab85b73a8cff781f7d801248":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1eeda7e62e149f90eee8895af874c74efa7d4852":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","e187a371a1d09379bb452c2c13a7b9221525dff8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}