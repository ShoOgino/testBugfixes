{"path":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#getAllRecords(Reader).mjava","commits":[{"id":"caf7f9acfdff984e59be68054cc1e0048b8ee030","date":1407766058,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#getAllRecords(Reader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Uses {@link #streamRecords streamRecords} to getInst the JSON source but with\n   * a handler that collects all the emitted records into a single List which\n   * is returned upon completion.\n   *\n   * @param r the stream reader\n   * @return results a List of emitted records\n   */\n  public List<Map<String, Object>> getAllRecords(Reader r) throws IOException {\n    final List<Map<String, Object>> results = new ArrayList<>();\n    streamRecords(r, new Handler() {\n      @Override\n      public void handle(Map<String, Object> record, String path) {\n        results.add(record);\n      }\n    });\n    return results;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e08e2b6886d78c91752d82ea2b436c4324cd55","date":1464786234,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#getAllRecords(Reader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#getAllRecords(Reader).mjava","sourceNew":"  /**\n   * Uses {@link #streamRecords streamRecords} to getInst the JSON source but with\n   * a handler that collects all the emitted records into a single List which\n   * is returned upon completion.\n   *\n   * @param r the stream reader\n   * @return results a List of emitted records\n   */\n  public List<Map<String, Object>> getAllRecords(Reader r) throws IOException {\n    final List<Map<String, Object>> results = new ArrayList<>();\n    streamRecords(r, (record, path) -> {\n      results.add(record);\n    });\n    return results;\n  }\n\n","sourceOld":"  /**\n   * Uses {@link #streamRecords streamRecords} to getInst the JSON source but with\n   * a handler that collects all the emitted records into a single List which\n   * is returned upon completion.\n   *\n   * @param r the stream reader\n   * @return results a List of emitted records\n   */\n  public List<Map<String, Object>> getAllRecords(Reader r) throws IOException {\n    final List<Map<String, Object>> results = new ArrayList<>();\n    streamRecords(r, new Handler() {\n      @Override\n      public void handle(Map<String, Object> record, String path) {\n        results.add(record);\n      }\n    });\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"611f7ea4eee5babadf4129bfa5fbae964738cd7c","date":1464787051,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#getAllRecords(Reader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#getAllRecords(Reader).mjava","sourceNew":"  /**\n   * Uses {@link #streamRecords streamRecords} to getInst the JSON source but with\n   * a handler that collects all the emitted records into a single List which\n   * is returned upon completion.\n   *\n   * @param r the stream reader\n   * @return results a List of emitted records\n   */\n  public List<Map<String, Object>> getAllRecords(Reader r) throws IOException {\n    final List<Map<String, Object>> results = new ArrayList<>();\n    streamRecords(r, (record, path) -> {\n      results.add(record);\n    });\n    return results;\n  }\n\n","sourceOld":"  /**\n   * Uses {@link #streamRecords streamRecords} to getInst the JSON source but with\n   * a handler that collects all the emitted records into a single List which\n   * is returned upon completion.\n   *\n   * @param r the stream reader\n   * @return results a List of emitted records\n   */\n  public List<Map<String, Object>> getAllRecords(Reader r) throws IOException {\n    final List<Map<String, Object>> results = new ArrayList<>();\n    streamRecords(r, new Handler() {\n      @Override\n      public void handle(Map<String, Object> record, String path) {\n        results.add(record);\n      }\n    });\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8ee93140fd0efef7e101786e3ed5160a700b5f","date":1464820111,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#getAllRecords(Reader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#getAllRecords(Reader).mjava","sourceNew":"  /**\n   * Uses {@link #streamRecords streamRecords} to getInst the JSON source but with\n   * a handler that collects all the emitted records into a single List which\n   * is returned upon completion.\n   *\n   * @param r the stream reader\n   * @return results a List of emitted records\n   */\n  public List<Map<String, Object>> getAllRecords(Reader r) throws IOException {\n    final List<Map<String, Object>> results = new ArrayList<>();\n    streamRecords(r, (record, path) -> {\n      results.add(record);\n    });\n    return results;\n  }\n\n","sourceOld":"  /**\n   * Uses {@link #streamRecords streamRecords} to getInst the JSON source but with\n   * a handler that collects all the emitted records into a single List which\n   * is returned upon completion.\n   *\n   * @param r the stream reader\n   * @return results a List of emitted records\n   */\n  public List<Map<String, Object>> getAllRecords(Reader r) throws IOException {\n    final List<Map<String, Object>> results = new ArrayList<>();\n    streamRecords(r, new Handler() {\n      @Override\n      public void handle(Map<String, Object> record, String path) {\n        results.add(record);\n      }\n    });\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","date":1464821470,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#getAllRecords(Reader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#getAllRecords(Reader).mjava","sourceNew":"  /**\n   * Uses {@link #streamRecords streamRecords} to getInst the JSON source but with\n   * a handler that collects all the emitted records into a single List which\n   * is returned upon completion.\n   *\n   * @param r the stream reader\n   * @return results a List of emitted records\n   */\n  public List<Map<String, Object>> getAllRecords(Reader r) throws IOException {\n    final List<Map<String, Object>> results = new ArrayList<>();\n    streamRecords(r, (record, path) -> {\n      results.add(record);\n    });\n    return results;\n  }\n\n","sourceOld":"  /**\n   * Uses {@link #streamRecords streamRecords} to getInst the JSON source but with\n   * a handler that collects all the emitted records into a single List which\n   * is returned upon completion.\n   *\n   * @param r the stream reader\n   * @return results a List of emitted records\n   */\n  public List<Map<String, Object>> getAllRecords(Reader r) throws IOException {\n    final List<Map<String, Object>> results = new ArrayList<>();\n    streamRecords(r, new Handler() {\n      @Override\n      public void handle(Map<String, Object> record, String path) {\n        results.add(record);\n      }\n    });\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"026b7e389cd847f6590f8783e6f9f1c8d2b80fcd","date":1472647322,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#getAllRecords(Reader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#getAllRecords(Reader).mjava","sourceNew":"  /**\n   * Uses {@link #streamRecords streamRecords} to getInst the JSON source but with\n   * a handler that collects all the emitted records into a single List which\n   * is returned upon completion.\n   *\n   * @param r the stream reader\n   * @return results a List of emitted records\n   */\n  public List<Map<String, Object>> getAllRecords(Reader r) throws IOException {\n    final List<Map<String, Object>> results = new ArrayList<>();\n    // Deep copy is required here because the stream might hold on to the map\n    streamRecords(r, (record, path) -> results.add(Utils.getDeepCopy(record, 2)));\n    return results;\n  }\n\n","sourceOld":"  /**\n   * Uses {@link #streamRecords streamRecords} to getInst the JSON source but with\n   * a handler that collects all the emitted records into a single List which\n   * is returned upon completion.\n   *\n   * @param r the stream reader\n   * @return results a List of emitted records\n   */\n  public List<Map<String, Object>> getAllRecords(Reader r) throws IOException {\n    final List<Map<String, Object>> results = new ArrayList<>();\n    streamRecords(r, (record, path) -> {\n      results.add(record);\n    });\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f206328a706450934717bec7ccc22ad166fc0","date":1473142172,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#getAllRecords(Reader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#getAllRecords(Reader).mjava","sourceNew":"  /**\n   * Uses {@link #streamRecords streamRecords} to getInst the JSON source but with\n   * a handler that collects all the emitted records into a single List which\n   * is returned upon completion.\n   *\n   * @param r the stream reader\n   * @return results a List of emitted records\n   */\n  public List<Map<String, Object>> getAllRecords(Reader r) throws IOException {\n    final List<Map<String, Object>> results = new ArrayList<>();\n    // Deep copy is required here because the stream might hold on to the map\n    streamRecords(r, (record, path) -> results.add(Utils.getDeepCopy(record, 2)));\n    return results;\n  }\n\n","sourceOld":"  /**\n   * Uses {@link #streamRecords streamRecords} to getInst the JSON source but with\n   * a handler that collects all the emitted records into a single List which\n   * is returned upon completion.\n   *\n   * @param r the stream reader\n   * @return results a List of emitted records\n   */\n  public List<Map<String, Object>> getAllRecords(Reader r) throws IOException {\n    final List<Map<String, Object>> results = new ArrayList<>();\n    streamRecords(r, (record, path) -> {\n      results.add(record);\n    });\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#getAllRecords(Reader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#getAllRecords(Reader).mjava","sourceNew":"  /**\n   * Uses {@link #streamRecords streamRecords} to getInst the JSON source but with\n   * a handler that collects all the emitted records into a single List which\n   * is returned upon completion.\n   *\n   * @param r the stream reader\n   * @return results a List of emitted records\n   */\n  public List<Map<String, Object>> getAllRecords(Reader r) throws IOException {\n    final List<Map<String, Object>> results = new ArrayList<>();\n    // Deep copy is required here because the stream might hold on to the map\n    streamRecords(r, (record, path) -> results.add(Utils.getDeepCopy(record, 2)));\n    return results;\n  }\n\n","sourceOld":"  /**\n   * Uses {@link #streamRecords streamRecords} to getInst the JSON source but with\n   * a handler that collects all the emitted records into a single List which\n   * is returned upon completion.\n   *\n   * @param r the stream reader\n   * @return results a List of emitted records\n   */\n  public List<Map<String, Object>> getAllRecords(Reader r) throws IOException {\n    final List<Map<String, Object>> results = new ArrayList<>();\n    streamRecords(r, (record, path) -> {\n      results.add(record);\n    });\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#getAllRecords(Reader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#getAllRecords(Reader).mjava","sourceNew":"  /**\n   * Uses {@link #streamRecords streamRecords} to getInst the JSON source but with\n   * a handler that collects all the emitted records into a single List which\n   * is returned upon completion.\n   *\n   * @param r the stream reader\n   * @return results a List of emitted records\n   */\n  public List<Map<String, Object>> getAllRecords(Reader r) throws IOException {\n    final List<Map<String, Object>> results = new ArrayList<>();\n    // Deep copy is required here because the stream might hold on to the map\n    streamRecords(r, (record, path) -> results.add(Utils.getDeepCopy(record, 2)));\n    return results;\n  }\n\n","sourceOld":"  /**\n   * Uses {@link #streamRecords streamRecords} to getInst the JSON source but with\n   * a handler that collects all the emitted records into a single List which\n   * is returned upon completion.\n   *\n   * @param r the stream reader\n   * @return results a List of emitted records\n   */\n  public List<Map<String, Object>> getAllRecords(Reader r) throws IOException {\n    final List<Map<String, Object>> results = new ArrayList<>();\n    streamRecords(r, new Handler() {\n      @Override\n      public void handle(Map<String, Object> record, String path) {\n        results.add(record);\n      }\n    });\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7dfea4f7c80813344b0152e37fc18b31369e8ff","date":1592136683,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#getAllRecords(Reader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#getAllRecords(Reader).mjava","sourceNew":"  /**\n   * Uses {@link #streamRecords streamRecords} to getInst the JSON source but with\n   * a handler that collects all the emitted records into a single List which\n   * is returned upon completion.\n   *\n   * @param r the stream reader\n   * @return results a List of emitted records\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public List<Map<String, Object>> getAllRecords(Reader r) throws IOException {\n    final List<Map<String, Object>> results = new ArrayList<>();\n    // Deep copy is required here because the stream might hold on to the map\n    streamRecords(r, (record, path) -> results.add(Utils.getDeepCopy(record, 2)));\n    return results;\n  }\n\n","sourceOld":"  /**\n   * Uses {@link #streamRecords streamRecords} to getInst the JSON source but with\n   * a handler that collects all the emitted records into a single List which\n   * is returned upon completion.\n   *\n   * @param r the stream reader\n   * @return results a List of emitted records\n   */\n  public List<Map<String, Object>> getAllRecords(Reader r) throws IOException {\n    final List<Map<String, Object>> results = new ArrayList<>();\n    // Deep copy is required here because the stream might hold on to the map\n    streamRecords(r, (record, path) -> results.add(Utils.getDeepCopy(record, 2)));\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b4e08e2b6886d78c91752d82ea2b436c4324cd55":["caf7f9acfdff984e59be68054cc1e0048b8ee030"],"026b7e389cd847f6590f8783e6f9f1c8d2b80fcd":["b4e08e2b6886d78c91752d82ea2b436c4324cd55"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["b4e08e2b6886d78c91752d82ea2b436c4324cd55","026b7e389cd847f6590f8783e6f9f1c8d2b80fcd"],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"611f7ea4eee5babadf4129bfa5fbae964738cd7c":["caf7f9acfdff984e59be68054cc1e0048b8ee030","b4e08e2b6886d78c91752d82ea2b436c4324cd55"],"bc8f206328a706450934717bec7ccc22ad166fc0":["b4e08e2b6886d78c91752d82ea2b436c4324cd55","026b7e389cd847f6590f8783e6f9f1c8d2b80fcd"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["caf7f9acfdff984e59be68054cc1e0048b8ee030","611f7ea4eee5babadf4129bfa5fbae964738cd7c"],"caf7f9acfdff984e59be68054cc1e0048b8ee030":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["caf7f9acfdff984e59be68054cc1e0048b8ee030","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":["caf7f9acfdff984e59be68054cc1e0048b8ee030","5b8ee93140fd0efef7e101786e3ed5160a700b5f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"]},"commit2Childs":{"b4e08e2b6886d78c91752d82ea2b436c4324cd55":["026b7e389cd847f6590f8783e6f9f1c8d2b80fcd","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","611f7ea4eee5babadf4129bfa5fbae964738cd7c","bc8f206328a706450934717bec7ccc22ad166fc0"],"026b7e389cd847f6590f8783e6f9f1c8d2b80fcd":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","bc8f206328a706450934717bec7ccc22ad166fc0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["caf7f9acfdff984e59be68054cc1e0048b8ee030"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a7dfea4f7c80813344b0152e37fc18b31369e8ff","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"611f7ea4eee5babadf4129bfa5fbae964738cd7c":["5b8ee93140fd0efef7e101786e3ed5160a700b5f"],"bc8f206328a706450934717bec7ccc22ad166fc0":[],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"caf7f9acfdff984e59be68054cc1e0048b8ee030":["b4e08e2b6886d78c91752d82ea2b436c4324cd55","611f7ea4eee5babadf4129bfa5fbae964738cd7c","5b8ee93140fd0efef7e101786e3ed5160a700b5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["bc8f206328a706450934717bec7ccc22ad166fc0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}