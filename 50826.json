{"path":"src/java/org/apache/lucene/search/TopFieldCollector.OneComparatorNonScoringCollector#collect(int).mjava","commits":[{"id":"64714133cf5ec732e3bbceee63351bb9af0117dc","date":1239647636,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TopFieldCollector.OneComparatorNonScoringCollector#collect(int).mjava","pathOld":"/dev/null","sourceNew":"    public void collect(int doc) throws IOException {\n      ++totalHits;\n      if (queueFull) {\n        // Fastmatch: return if this hit is not competitive\n        final int cmp = reverseMul * comparator.compareBottom(doc);\n        if (cmp < 0 || (cmp == 0 && doc + docBase > bottom.docID)) {\n          return;\n        }\n        \n        // This hit is competitive - replace bottom element in queue & adjustTop\n        comparator.copy(bottom.slot, doc);\n        updateBottom(doc);\n        comparator.setBottom(bottom.slot);\n      } else {\n        // Startup transient: queue hasn't gathered numHits yet\n        final int slot = totalHits - 1;\n        // Copy hit into queue\n        comparator.copy(slot, doc);\n        add(slot, doc, Float.NaN);\n        if (queueFull) {\n          comparator.setBottom(bottom.slot);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc","date":1241865401,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TopFieldCollector.OneComparatorNonScoringCollector#collect(int).mjava","pathOld":"src/java/org/apache/lucene/search/TopFieldCollector.OneComparatorNonScoringCollector#collect(int).mjava","sourceNew":"    public void collect(int doc) throws IOException {\n      ++totalHits;\n      if (queueFull) {\n        if ((reverseMul * comparator.compareBottom(doc)) <= 0) {\n          // since docs are visited in doc Id order, if compare is 0, it means\n          // this document is largest than anything else in the queue, and\n          // therefore not competitive.\n          return;\n        }\n        \n        // This hit is competitive - replace bottom element in queue & adjustTop\n        comparator.copy(bottom.slot, doc);\n        updateBottom(doc);\n        comparator.setBottom(bottom.slot);\n      } else {\n        // Startup transient: queue hasn't gathered numHits yet\n        final int slot = totalHits - 1;\n        // Copy hit into queue\n        comparator.copy(slot, doc);\n        add(slot, doc, Float.NaN);\n        if (queueFull) {\n          comparator.setBottom(bottom.slot);\n        }\n      }\n    }\n\n","sourceOld":"    public void collect(int doc) throws IOException {\n      ++totalHits;\n      if (queueFull) {\n        // Fastmatch: return if this hit is not competitive\n        final int cmp = reverseMul * comparator.compareBottom(doc);\n        if (cmp < 0 || (cmp == 0 && doc + docBase > bottom.docID)) {\n          return;\n        }\n        \n        // This hit is competitive - replace bottom element in queue & adjustTop\n        comparator.copy(bottom.slot, doc);\n        updateBottom(doc);\n        comparator.setBottom(bottom.slot);\n      } else {\n        // Startup transient: queue hasn't gathered numHits yet\n        final int slot = totalHits - 1;\n        // Copy hit into queue\n        comparator.copy(slot, doc);\n        add(slot, doc, Float.NaN);\n        if (queueFull) {\n          comparator.setBottom(bottom.slot);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TopFieldCollector.OneComparatorNonScoringCollector#collect(int).mjava","pathOld":"src/java/org/apache/lucene/search/TopFieldCollector.OneComparatorNonScoringCollector#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      ++totalHits;\n      if (queueFull) {\n        if ((reverseMul * comparator.compareBottom(doc)) <= 0) {\n          // since docs are visited in doc Id order, if compare is 0, it means\n          // this document is largest than anything else in the queue, and\n          // therefore not competitive.\n          return;\n        }\n        \n        // This hit is competitive - replace bottom element in queue & adjustTop\n        comparator.copy(bottom.slot, doc);\n        updateBottom(doc);\n        comparator.setBottom(bottom.slot);\n      } else {\n        // Startup transient: queue hasn't gathered numHits yet\n        final int slot = totalHits - 1;\n        // Copy hit into queue\n        comparator.copy(slot, doc);\n        add(slot, doc, Float.NaN);\n        if (queueFull) {\n          comparator.setBottom(bottom.slot);\n        }\n      }\n    }\n\n","sourceOld":"    public void collect(int doc) throws IOException {\n      ++totalHits;\n      if (queueFull) {\n        if ((reverseMul * comparator.compareBottom(doc)) <= 0) {\n          // since docs are visited in doc Id order, if compare is 0, it means\n          // this document is largest than anything else in the queue, and\n          // therefore not competitive.\n          return;\n        }\n        \n        // This hit is competitive - replace bottom element in queue & adjustTop\n        comparator.copy(bottom.slot, doc);\n        updateBottom(doc);\n        comparator.setBottom(bottom.slot);\n      } else {\n        // Startup transient: queue hasn't gathered numHits yet\n        final int slot = totalHits - 1;\n        // Copy hit into queue\n        comparator.copy(slot, doc);\n        add(slot, doc, Float.NaN);\n        if (queueFull) {\n          comparator.setBottom(bottom.slot);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TopFieldCollector.OneComparatorNonScoringCollector#collect(int).mjava","pathOld":"src/java/org/apache/lucene/search/TopFieldCollector.OneComparatorNonScoringCollector#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      ++totalHits;\n      if (queueFull) {\n        if ((reverseMul * comparator.compareBottom(doc)) <= 0) {\n          // since docs are visited in doc Id order, if compare is 0, it means\n          // this document is largest than anything else in the queue, and\n          // therefore not competitive.\n          return;\n        }\n        \n        // This hit is competitive - replace bottom element in queue & adjustTop\n        comparator.copy(bottom.slot, doc);\n        updateBottom(doc);\n        comparator.setBottom(bottom.slot);\n      } else {\n        // Startup transient: queue hasn't gathered numHits yet\n        final int slot = totalHits - 1;\n        // Copy hit into queue\n        comparator.copy(slot, doc);\n        add(slot, doc, Float.NaN);\n        if (queueFull) {\n          comparator.setBottom(bottom.slot);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      ++totalHits;\n      if (queueFull) {\n        if ((reverseMul * comparator.compareBottom(doc)) <= 0) {\n          // since docs are visited in doc Id order, if compare is 0, it means\n          // this document is largest than anything else in the queue, and\n          // therefore not competitive.\n          return;\n        }\n        \n        // This hit is competitive - replace bottom element in queue & adjustTop\n        comparator.copy(bottom.slot, doc);\n        updateBottom(doc);\n        comparator.setBottom(bottom.slot);\n      } else {\n        // Startup transient: queue hasn't gathered numHits yet\n        final int slot = totalHits - 1;\n        // Copy hit into queue\n        comparator.copy(slot, doc);\n        add(slot, doc, Float.NaN);\n        if (queueFull) {\n          comparator.setBottom(bottom.slot);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8a9e385641d717e641408d8fbbc62be8fc766357":["17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"]},"commit2Childs":{"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc":["8a9e385641d717e641408d8fbbc62be8fc766357"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}