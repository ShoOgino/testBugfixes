{"path":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#assertSame(TermsEnum,BytesRefFSTEnum,boolean).mjava","commits":[{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#assertSame(TermsEnum,BytesRefFSTEnum,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#assertSame(TermsEnum,BytesRefFSTEnum,boolean).mjava","sourceNew":"  private void assertSame(TermsEnum termsEnum, BytesRefFSTEnum fstEnum, boolean storeOrd) throws Exception {\n    if (termsEnum.term() == null) {\n      assertNull(fstEnum.current());\n    } else {\n      assertNotNull(fstEnum.current());\n      assertEquals(termsEnum.term().utf8ToString() + \" != \" + fstEnum.current().input.utf8ToString(), termsEnum.term(), fstEnum.current().input);\n      if (storeOrd) {\n        // fst stored the ord\n        assertEquals(termsEnum.ord(), ((Long) fstEnum.current().output).longValue());\n      } else {\n        // fst stored the docFreq\n        assertEquals(termsEnum.docFreq(), (int) (((Long) fstEnum.current().output).longValue()));\n      }\n    }\n  }\n\n","sourceOld":"  private void assertSame(TermsEnum termsEnum, BytesRefFSTEnum fstEnum, boolean storeOrd) throws Exception {\n    if (termsEnum.term() == null) {\n      assertNull(fstEnum.current());\n    } else {\n      assertNotNull(fstEnum.current());\n      assertEquals(termsEnum.term().utf8ToString() + \" != \" + fstEnum.current().input.utf8ToString(), termsEnum.term(), fstEnum.current().input);\n      if (storeOrd) {\n        // fst stored the ord\n        assertEquals(termsEnum.ord(), ((Long) fstEnum.current().output).longValue());\n      } else {\n        // fst stored the docFreq\n        assertEquals(termsEnum.docFreq(), (int) (((Long) fstEnum.current().output).longValue()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#assertSame(TermsEnum,BytesRefFSTEnum,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#assertSame(TermsEnum,BytesRefFSTEnum,boolean).mjava","sourceNew":"  private void assertSame(TermsEnum termsEnum, BytesRefFSTEnum fstEnum, boolean storeOrd) throws Exception {\n    if (termsEnum.term() == null) {\n      assertNull(fstEnum.current());\n    } else {\n      assertNotNull(fstEnum.current());\n      assertEquals(termsEnum.term().utf8ToString() + \" != \" + fstEnum.current().input.utf8ToString(), termsEnum.term(), fstEnum.current().input);\n      if (storeOrd) {\n        // fst stored the ord\n        assertEquals(termsEnum.ord(), ((Long) fstEnum.current().output).longValue());\n      } else {\n        // fst stored the docFreq\n        assertEquals(termsEnum.docFreq(), (int) (((Long) fstEnum.current().output).longValue()));\n      }\n    }\n  }\n\n","sourceOld":"  private void assertSame(TermsEnum termsEnum, BytesRefFSTEnum fstEnum, boolean storeOrd) throws Exception {\n    if (termsEnum.term() == null) {\n      assertNull(fstEnum.current());\n    } else {\n      assertNotNull(fstEnum.current());\n      assertEquals(termsEnum.term().utf8ToString() + \" != \" + fstEnum.current().input.utf8ToString(), termsEnum.term(), fstEnum.current().input);\n      if (storeOrd) {\n        // fst stored the ord\n        assertEquals(termsEnum.ord(), ((Long) fstEnum.current().output).longValue());\n      } else {\n        // fst stored the docFreq\n        assertEquals(termsEnum.docFreq(), (int) (((Long) fstEnum.current().output).longValue()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#assertSame(TermsEnum,BytesRefFSTEnum,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#assertSame(TermsEnum,BytesRefFSTEnum,boolean).mjava","sourceNew":"  private void assertSame(TermsEnum termsEnum, BytesRefFSTEnum fstEnum, boolean storeOrd) throws Exception {\n    if (termsEnum.term() == null) {\n      assertNull(fstEnum.current());\n    } else {\n      assertNotNull(fstEnum.current());\n      assertEquals(termsEnum.term().utf8ToString() + \" != \" + fstEnum.current().input.utf8ToString(), termsEnum.term(), fstEnum.current().input);\n      if (storeOrd) {\n        // fst stored the ord\n        assertEquals(termsEnum.ord(), ((Long) fstEnum.current().output).longValue());\n      } else {\n        // fst stored the docFreq\n        assertEquals(termsEnum.docFreq(), (int) (((Long) fstEnum.current().output).longValue()));\n      }\n    }\n  }\n\n","sourceOld":"  private void assertSame(TermsEnum termsEnum, BytesRefFSTEnum fstEnum, boolean storeOrd) throws Exception {\n    if (termsEnum.term() == null) {\n      assertNull(fstEnum.current());\n    } else {\n      assertNotNull(fstEnum.current());\n      assertEquals(termsEnum.term().utf8ToString() + \" != \" + fstEnum.current().input.utf8ToString(), termsEnum.term(), fstEnum.current().input);\n      if (storeOrd) {\n        // fst stored the ord\n        assertEquals(termsEnum.ord(), ((Long) fstEnum.current().output).longValue());\n      } else {\n        // fst stored the docFreq\n        assertEquals(termsEnum.docFreq(), (int) (((Long) fstEnum.current().output).longValue()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#assertSame(TermsEnum,BytesRefFSTEnum,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#assertSame(TermsEnum,BytesRefFSTEnum,boolean).mjava","sourceNew":"  private void assertSame(TermsEnum termsEnum, BytesRefFSTEnum fstEnum, boolean storeOrd) throws Exception {\n    if (termsEnum.term() == null) {\n      assertNull(fstEnum.current());\n    } else {\n      assertNotNull(fstEnum.current());\n      assertEquals(termsEnum.term().utf8ToString() + \" != \" + fstEnum.current().input.utf8ToString(), termsEnum.term(), fstEnum.current().input);\n      if (storeOrd) {\n        // fst stored the ord\n        assertEquals(\"term=\" + termsEnum.term().utf8ToString() + \" \" + termsEnum.term(), termsEnum.ord(), ((Long) fstEnum.current().output).longValue());\n      } else {\n        // fst stored the docFreq\n        assertEquals(\"term=\" + termsEnum.term().utf8ToString() + \" \" + termsEnum.term(), termsEnum.docFreq(), (int) (((Long) fstEnum.current().output).longValue()));\n      }\n    }\n  }\n\n","sourceOld":"  private void assertSame(TermsEnum termsEnum, BytesRefFSTEnum fstEnum, boolean storeOrd) throws Exception {\n    if (termsEnum.term() == null) {\n      assertNull(fstEnum.current());\n    } else {\n      assertNotNull(fstEnum.current());\n      assertEquals(termsEnum.term().utf8ToString() + \" != \" + fstEnum.current().input.utf8ToString(), termsEnum.term(), fstEnum.current().input);\n      if (storeOrd) {\n        // fst stored the ord\n        assertEquals(termsEnum.ord(), ((Long) fstEnum.current().output).longValue());\n      } else {\n        // fst stored the docFreq\n        assertEquals(termsEnum.docFreq(), (int) (((Long) fstEnum.current().output).longValue()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#assertSame(TermsEnum,BytesRefFSTEnum,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#assertSame(TermsEnum,BytesRefFSTEnum,boolean).mjava","sourceNew":"  private void assertSame(TermsEnum termsEnum, BytesRefFSTEnum fstEnum, boolean storeOrd) throws Exception {\n    if (termsEnum.term() == null) {\n      assertNull(fstEnum.current());\n    } else {\n      assertNotNull(fstEnum.current());\n      assertEquals(termsEnum.term().utf8ToString() + \" != \" + fstEnum.current().input.utf8ToString(), termsEnum.term(), fstEnum.current().input);\n      if (storeOrd) {\n        // fst stored the ord\n        assertEquals(\"term=\" + termsEnum.term().utf8ToString() + \" \" + termsEnum.term(), termsEnum.ord(), ((Long) fstEnum.current().output).longValue());\n      } else {\n        // fst stored the docFreq\n        assertEquals(\"term=\" + termsEnum.term().utf8ToString() + \" \" + termsEnum.term(), termsEnum.docFreq(), (int) (((Long) fstEnum.current().output).longValue()));\n      }\n    }\n  }\n\n","sourceOld":"  private void assertSame(TermsEnum termsEnum, BytesRefFSTEnum fstEnum, boolean storeOrd) throws Exception {\n    if (termsEnum.term() == null) {\n      assertNull(fstEnum.current());\n    } else {\n      assertNotNull(fstEnum.current());\n      assertEquals(termsEnum.term().utf8ToString() + \" != \" + fstEnum.current().input.utf8ToString(), termsEnum.term(), fstEnum.current().input);\n      if (storeOrd) {\n        // fst stored the ord\n        assertEquals(\"term=\" + termsEnum.term().utf8ToString() + \" \" + termsEnum.term(), termsEnum.ord(), ((Long) fstEnum.current().output).longValue());\n      } else {\n        // fst stored the docFreq\n        assertEquals(\"term=\" + termsEnum.term().utf8ToString() + \" \" + termsEnum.term(), termsEnum.docFreq(), (int) (((Long) fstEnum.current().output).longValue()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["60ba444201d2570214b6fcf1d15600dc1a01f548","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}