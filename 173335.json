{"path":"lucene/core/src/test/org/apache/lucene/document/TestXYLineShapeQueries.LineValidator#testWithinLine(Component2D,XYLine).mjava","commits":[{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestXYLineShapeQueries.LineValidator#testWithinLine(Component2D,XYLine).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestXYLineShapeQueries.LineValidator#testWithinLine(Component2D,XYLine).mjava","sourceNew":"    private boolean testWithinLine(Component2D tree, XYLine line) {\n      Component2D.WithinRelation answer = Component2D.WithinRelation.DISJOINT;\n      for (int i = 0, j = 1; j < line.numPoints(); ++i, ++j) {\n        double[] qTriangle = encoder.quantizeTriangle(line.getX(i), line.getY(i), true, line.getX(j), line.getY(j), true, line.getX(i), line.getY(i), true);\n        Component2D.WithinRelation relation = tree.withinTriangle(qTriangle[1], qTriangle[0], true, qTriangle[3], qTriangle[2], true, qTriangle[5], qTriangle[4], true);\n        if (relation == Component2D.WithinRelation.NOTWITHIN) {\n          return false;\n        } else if (relation == Component2D.WithinRelation.CANDIDATE) {\n          answer = Component2D.WithinRelation.CANDIDATE;\n        }\n      }\n      return answer == Component2D.WithinRelation.CANDIDATE;\n    }\n\n","sourceOld":"    private boolean testWithinLine(Component2D tree, XYLine line) {\n      Component2D.WithinRelation answer = Component2D.WithinRelation.DISJOINT;\n      for (int i = 0, j = 1; j < line.numPoints(); ++i, ++j) {\n        double[] qTriangle = encoder.quantizeTriangle(line.getX(i), line.getY(i), true, line.getX(j), line.getY(j), true, line.getX(i), line.getY(i), true);\n        Component2D.WithinRelation relation = tree.withinTriangle(qTriangle[1], qTriangle[0], true, qTriangle[3], qTriangle[2], true, qTriangle[5], qTriangle[4], true);\n        if (relation == Component2D.WithinRelation.NOTWITHIN) {\n          return false;\n        } else if (relation == Component2D.WithinRelation.CANDIDATE) {\n          answer = Component2D.WithinRelation.CANDIDATE;\n        }\n      }\n      return answer == Component2D.WithinRelation.CANDIDATE;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c568a1e2a5125c2245150eebb030a81baa158b31","date":1587403489,"type":4,"author":"Ignacio Vera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestXYLineShapeQueries.LineValidator#testWithinLine(Component2D,XYLine).mjava","sourceNew":null,"sourceOld":"    private boolean testWithinLine(Component2D tree, XYLine line) {\n      Component2D.WithinRelation answer = Component2D.WithinRelation.DISJOINT;\n      for (int i = 0, j = 1; j < line.numPoints(); ++i, ++j) {\n        double[] qTriangle = encoder.quantizeTriangle(line.getX(i), line.getY(i), true, line.getX(j), line.getY(j), true, line.getX(i), line.getY(i), true);\n        Component2D.WithinRelation relation = tree.withinTriangle(qTriangle[1], qTriangle[0], true, qTriangle[3], qTriangle[2], true, qTriangle[5], qTriangle[4], true);\n        if (relation == Component2D.WithinRelation.NOTWITHIN) {\n          return false;\n        } else if (relation == Component2D.WithinRelation.CANDIDATE) {\n          answer = Component2D.WithinRelation.CANDIDATE;\n        }\n      }\n      return answer == Component2D.WithinRelation.CANDIDATE;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c568a1e2a5125c2245150eebb030a81baa158b31":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c568a1e2a5125c2245150eebb030a81baa158b31"]},"commit2Childs":{"c568a1e2a5125c2245150eebb030a81baa158b31":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["c568a1e2a5125c2245150eebb030a81baa158b31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}