{"path":"lucene/queries/src/java/org/apache/lucene/queries/intervals/MinimumShouldMatchIntervalsSource.MinimumMatchesIterator#endOffset().mjava","commits":[{"id":"97ee2282ff806e9bc9d705f389cf40451ab81c3e","date":1561721333,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/intervals/MinimumShouldMatchIntervalsSource.MinimumMatchesIterator#endOffset().mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/MinimumShouldMatchIntervalsSource.MinimumMatchesIterator#endOffset().mjava","sourceNew":"    @Override\n    public int endOffset() throws IOException {\n      int end = 0;\n      int endPos = endPosition();\n      for (IntervalIterator it : iterator.getCurrentIterators()) {\n        CachingMatchesIterator cms = lookup.get(it);\n        end = Math.max(end, cms.endOffset(endPos));\n      }\n      return end;\n    }\n\n","sourceOld":"    @Override\n    public int endOffset() throws IOException {\n      int end = 0;\n      int endPos = endPosition();\n      for (IntervalIterator it : iterator.getCurrentIterators()) {\n        CachingMatchesIterator cms = lookup.get(it);\n        end = Math.max(end, cms.endOffset(endPos));\n      }\n      return end;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"]},"commit2Childs":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}