{"path":"backwards/src/java/org/apache/lucene/index/IndexReader#deleteDocument(int).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/index/IndexReader#deleteDocument(int).mjava","pathOld":"/dev/null","sourceNew":"  /** Deletes the document numbered <code>docNum</code>.  Once a document is\n   * deleted it will not appear in TermDocs or TermPostitions enumerations.\n   * Attempts to read its field with the {@link #document}\n   * method will result in an error.  The presence of this document may still be\n   * reflected in the {@link #docFreq} statistic, though\n   * this will be corrected eventually as the index is further modified.\n   *\n   * @throws StaleReaderException if the index has changed\n   * since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized void deleteDocument(int docNum) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doDelete(docNum);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/IndexReader#deleteDocument(int).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/IndexReader#deleteDocument(int).mjava","sourceNew":"  /** Deletes the document numbered <code>docNum</code>.  Once a document is\n   * deleted it will not appear in TermDocs or TermPostitions enumerations.\n   * Attempts to read its field with the {@link #document}\n   * method will result in an error.  The presence of this document may still be\n   * reflected in the {@link #docFreq} statistic, though\n   * this will be corrected eventually as the index is further modified.\n   *\n   * @throws StaleReaderException if the index has changed\n   * since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized void deleteDocument(int docNum) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doDelete(docNum);\n  }\n\n","sourceOld":"  /** Deletes the document numbered <code>docNum</code>.  Once a document is\n   * deleted it will not appear in TermDocs or TermPostitions enumerations.\n   * Attempts to read its field with the {@link #document}\n   * method will result in an error.  The presence of this document may still be\n   * reflected in the {@link #docFreq} statistic, though\n   * this will be corrected eventually as the index is further modified.\n   *\n   * @throws StaleReaderException if the index has changed\n   * since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized void deleteDocument(int docNum) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doDelete(docNum);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}