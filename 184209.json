{"path":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#remove(QueueEvent).mjava","commits":[{"id":"c986b1ea9768aff3c903f05a2c85b7b672b5c225","date":1359126891,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#remove(QueueEvent).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Remove the event and save the response into the other path.\n   * \n   */\n  public byte[] remove(QueueEvent event) throws KeeperException,\n      InterruptedException {\n    String path = event.getId();\n    String responsePath = dir + \"/\" + response_prefix\n        + path.substring(path.lastIndexOf(\"-\") + 1);\n    if (zookeeper.exists(responsePath, true)) {\n      zookeeper.setData(responsePath, event.getBytes(), true);\n    }\n    byte[] data = zookeeper.getData(path, null, null, true);\n    zookeeper.delete(path, -1, true);\n    return data;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd45d4a2ee01a1932d33eec42f5272c2402da679","date":1359316912,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#remove(QueueEvent).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Remove the event and save the response into the other path.\n   * \n   */\n  public byte[] remove(QueueEvent event) throws KeeperException,\n      InterruptedException {\n    String path = event.getId();\n    String responsePath = dir + \"/\" + response_prefix\n        + path.substring(path.lastIndexOf(\"-\") + 1);\n    if (zookeeper.exists(responsePath, true)) {\n      zookeeper.setData(responsePath, event.getBytes(), true);\n    }\n    byte[] data = zookeeper.getData(path, null, null, true);\n    zookeeper.delete(path, -1, true);\n    return data;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f45f67a018421da088ea39274f23ad5d339b97d","date":1395559348,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#remove(QueueEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#remove(QueueEvent).mjava","sourceNew":"  /**\n   * Remove the event and save the response into the other path.\n   * \n   */\n  public byte[] remove(QueueEvent event) throws KeeperException,\n      InterruptedException {\n    TimerContext time = stats.time(dir + \"_remove_event\");\n    try {\n      String path = event.getId();\n      String responsePath = dir + \"/\" + response_prefix\n          + path.substring(path.lastIndexOf(\"-\") + 1);\n      if (zookeeper.exists(responsePath, true)) {\n        zookeeper.setData(responsePath, event.getBytes(), true);\n      }\n      byte[] data = zookeeper.getData(path, null, null, true);\n      zookeeper.delete(path, -1, true);\n      return data;\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove the event and save the response into the other path.\n   * \n   */\n  public byte[] remove(QueueEvent event) throws KeeperException,\n      InterruptedException {\n    String path = event.getId();\n    String responsePath = dir + \"/\" + response_prefix\n        + path.substring(path.lastIndexOf(\"-\") + 1);\n    if (zookeeper.exists(responsePath, true)) {\n      zookeeper.setData(responsePath, event.getBytes(), true);\n    }\n    byte[] data = zookeeper.getData(path, null, null, true);\n    zookeeper.delete(path, -1, true);\n    return data;\n  }\n\n","bugFix":null,"bugIntro":["94a5e240cfc05f5af141a42c7a36718fce82667f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a282020d6c9a4ea32a359539e283e4771a2fda8","date":1440047542,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionQueue#remove(QueueEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#remove(QueueEvent).mjava","sourceNew":"  /**\n   * Remove the event and save the response into the other path.\n   * \n   */\n  public byte[] remove(QueueEvent event) throws KeeperException,\n      InterruptedException {\n    TimerContext time = stats.time(dir + \"_remove_event\");\n    try {\n      String path = event.getId();\n      String responsePath = dir + \"/\" + response_prefix\n          + path.substring(path.lastIndexOf(\"-\") + 1);\n      if (zookeeper.exists(responsePath, true)) {\n        zookeeper.setData(responsePath, event.getBytes(), true);\n      }\n      byte[] data = zookeeper.getData(path, null, null, true);\n      zookeeper.delete(path, -1, true);\n      return data;\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove the event and save the response into the other path.\n   * \n   */\n  public byte[] remove(QueueEvent event) throws KeeperException,\n      InterruptedException {\n    TimerContext time = stats.time(dir + \"_remove_event\");\n    try {\n      String path = event.getId();\n      String responsePath = dir + \"/\" + response_prefix\n          + path.substring(path.lastIndexOf(\"-\") + 1);\n      if (zookeeper.exists(responsePath, true)) {\n        zookeeper.setData(responsePath, event.getBytes(), true);\n      }\n      byte[] data = zookeeper.getData(path, null, null, true);\n      zookeeper.delete(path, -1, true);\n      return data;\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c986b1ea9768aff3c903f05a2c85b7b672b5c225":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9f45f67a018421da088ea39274f23ad5d339b97d":["c986b1ea9768aff3c903f05a2c85b7b672b5c225"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c986b1ea9768aff3c903f05a2c85b7b672b5c225"],"2a282020d6c9a4ea32a359539e283e4771a2fda8":["9f45f67a018421da088ea39274f23ad5d339b97d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2a282020d6c9a4ea32a359539e283e4771a2fda8"]},"commit2Childs":{"c986b1ea9768aff3c903f05a2c85b7b672b5c225":["9f45f67a018421da088ea39274f23ad5d339b97d","dd45d4a2ee01a1932d33eec42f5272c2402da679"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c986b1ea9768aff3c903f05a2c85b7b672b5c225","dd45d4a2ee01a1932d33eec42f5272c2402da679"],"9f45f67a018421da088ea39274f23ad5d339b97d":["2a282020d6c9a4ea32a359539e283e4771a2fda8"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":[],"2a282020d6c9a4ea32a359539e283e4771a2fda8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dd45d4a2ee01a1932d33eec42f5272c2402da679","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}