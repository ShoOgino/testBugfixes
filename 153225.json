{"path":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#setUp().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSearchAfter#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    int numDocs = atLeast(200);\n    for (int i = 0; i < numDocs; i++) {\n      Document document = new Document();\n      document.add(newField(\"english\", English.intToEnglish(i), TextField.TYPE_UNSTORED));\n      document.add(newField(\"oddeven\", (i % 2 == 0) ? \"even\" : \"odd\", TextField.TYPE_UNSTORED));\n      iw.addDocument(document);\n    }\n    reader = iw.getReader();\n    iw.close();\n    searcher = newSearcher(reader);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    int numDocs = atLeast(200);\n    for (int i = 0; i < numDocs; i++) {\n      Document document = new Document();\n      document.add(newField(\"english\", English.intToEnglish(i), TextField.TYPE_UNSTORED));\n      document.add(newField(\"oddeven\", (i % 2 == 0) ? \"even\" : \"odd\", TextField.TYPE_UNSTORED));\n      iw.addDocument(document);\n    }\n    reader = iw.getReader();\n    iw.close();\n    searcher = newSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(200);\n    for (int i = 0; i < numDocs; i++) {\n      Document document = new Document();\n      document.add(newField(\"english\", English.intToEnglish(i), TextField.TYPE_UNSTORED));\n      document.add(newField(\"oddeven\", (i % 2 == 0) ? \"even\" : \"odd\", TextField.TYPE_UNSTORED));\n      iw.addDocument(document);\n    }\n    reader = iw.getReader();\n    iw.close();\n    searcher = newSearcher(reader);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    int numDocs = atLeast(200);\n    for (int i = 0; i < numDocs; i++) {\n      Document document = new Document();\n      document.add(newField(\"english\", English.intToEnglish(i), TextField.TYPE_UNSTORED));\n      document.add(newField(\"oddeven\", (i % 2 == 0) ? \"even\" : \"odd\", TextField.TYPE_UNSTORED));\n      iw.addDocument(document);\n    }\n    reader = iw.getReader();\n    iw.close();\n    searcher = newSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fb02351ae2b114dd41585916d1e35fb2cff98fb0","date":1337171337,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(200);\n    for (int i = 0; i < numDocs; i++) {\n      Document document = new Document();\n      document.add(newField(\"english\", English.intToEnglish(i), TextField.TYPE_UNSTORED));\n      document.add(newField(\"oddeven\", (i % 2 == 0) ? \"even\" : \"odd\", TextField.TYPE_UNSTORED));\n      document.add(newField(\"byte\", \"\" + ((byte) random().nextInt()), StringField.TYPE_UNSTORED));\n      document.add(newField(\"short\", \"\" + ((short) random().nextInt()), StringField.TYPE_UNSTORED));\n      document.add(new IntField(\"int\", random().nextInt()));\n      document.add(new LongField(\"long\", random().nextLong()));\n\n      document.add(new FloatField(\"float\", random().nextFloat()));\n      document.add(new DoubleField(\"double\", random().nextDouble()));\n      document.add(newField(\"bytes\", _TestUtil.randomRealisticUnicodeString(random()), StringField.TYPE_UNSTORED));\n      document.add(newField(\"bytesval\", _TestUtil.randomRealisticUnicodeString(random()), StringField.TYPE_UNSTORED));\n      document.add(new DoubleField(\"double\", random().nextDouble()));\n\n      if (supportsDocValues) {\n        document.add(new IntDocValuesField(\"intdocvalues\", random().nextInt()));\n        document.add(new FloatDocValuesField(\"floatdocvalues\", random().nextFloat()));\n        document.add(new SortedBytesDocValuesField(\"sortedbytesdocvalues\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n        document.add(new SortedBytesDocValuesField(\"sortedbytesdocvaluesval\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n        document.add(new StraightBytesDocValuesField(\"straightbytesdocvalues\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n      }\n\n      iw.addDocument(document);\n    }\n    reader = iw.getReader();\n    iw.close();\n    searcher = newSearcher(reader);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(200);\n    for (int i = 0; i < numDocs; i++) {\n      Document document = new Document();\n      document.add(newField(\"english\", English.intToEnglish(i), TextField.TYPE_UNSTORED));\n      document.add(newField(\"oddeven\", (i % 2 == 0) ? \"even\" : \"odd\", TextField.TYPE_UNSTORED));\n      iw.addDocument(document);\n    }\n    reader = iw.getReader();\n    iw.close();\n    searcher = newSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ef0d8a69209261514c5739c770bba706c2308450","date":1337607597,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(200);\n    for (int i = 0; i < numDocs; i++) {\n      Document document = new Document();\n      document.add(newField(\"english\", English.intToEnglish(i), TextField.TYPE_UNSTORED));\n      document.add(newField(\"oddeven\", (i % 2 == 0) ? \"even\" : \"odd\", TextField.TYPE_UNSTORED));\n      document.add(newField(\"byte\", \"\" + ((byte) random().nextInt()), StringField.TYPE_UNSTORED));\n      document.add(newField(\"short\", \"\" + ((short) random().nextInt()), StringField.TYPE_UNSTORED));\n      document.add(new IntField(\"int\", random().nextInt()));\n      document.add(new LongField(\"long\", random().nextLong()));\n\n      document.add(new FloatField(\"float\", random().nextFloat()));\n      document.add(new DoubleField(\"double\", random().nextDouble()));\n      document.add(newField(\"bytes\", _TestUtil.randomRealisticUnicodeString(random()), StringField.TYPE_UNSTORED));\n      document.add(newField(\"bytesval\", _TestUtil.randomRealisticUnicodeString(random()), StringField.TYPE_UNSTORED));\n      document.add(new DoubleField(\"double\", random().nextDouble()));\n\n      if (supportsDocValues) {\n        document.add(new IntDocValuesField(\"intdocvalues\", random().nextInt()));\n        document.add(new FloatDocValuesField(\"floatdocvalues\", random().nextFloat()));\n        document.add(new SortedBytesDocValuesField(\"sortedbytesdocvalues\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n        document.add(new SortedBytesDocValuesField(\"sortedbytesdocvaluesval\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n        document.add(new StraightBytesDocValuesField(\"straightbytesdocvalues\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n      }\n\n      iw.addDocument(document);\n    }\n    reader = iw.getReader();\n    iw.close();\n    searcher = newSearcher(reader);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(200);\n    for (int i = 0; i < numDocs; i++) {\n      Document document = new Document();\n      document.add(newField(\"english\", English.intToEnglish(i), TextField.TYPE_UNSTORED));\n      document.add(newField(\"oddeven\", (i % 2 == 0) ? \"even\" : \"odd\", TextField.TYPE_UNSTORED));\n      iw.addDocument(document);\n    }\n    reader = iw.getReader();\n    iw.close();\n    searcher = newSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57ae3024996ccdb3c36c42cb890e1efb37df4ce8","date":1338343651,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(200);\n    for (int i = 0; i < numDocs; i++) {\n      Document document = new Document();\n      document.add(newField(\"english\", English.intToEnglish(i), TextField.TYPE_UNSTORED));\n      document.add(newField(\"oddeven\", (i % 2 == 0) ? \"even\" : \"odd\", TextField.TYPE_UNSTORED));\n      document.add(newField(\"byte\", \"\" + ((byte) random().nextInt()), StringField.TYPE_UNSTORED));\n      document.add(newField(\"short\", \"\" + ((short) random().nextInt()), StringField.TYPE_UNSTORED));\n      document.add(new IntField(\"int\", random().nextInt()));\n      document.add(new LongField(\"long\", random().nextLong()));\n\n      document.add(new FloatField(\"float\", random().nextFloat()));\n      document.add(new DoubleField(\"double\", random().nextDouble()));\n      document.add(newField(\"bytes\", _TestUtil.randomRealisticUnicodeString(random()), StringField.TYPE_UNSTORED));\n      document.add(newField(\"bytesval\", _TestUtil.randomRealisticUnicodeString(random()), StringField.TYPE_UNSTORED));\n      document.add(new DoubleField(\"double\", random().nextDouble()));\n\n      document.add(new IntDocValuesField(\"intdocvalues\", random().nextInt()));\n      document.add(new FloatDocValuesField(\"floatdocvalues\", random().nextFloat()));\n      document.add(new SortedBytesDocValuesField(\"sortedbytesdocvalues\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n      document.add(new SortedBytesDocValuesField(\"sortedbytesdocvaluesval\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n      document.add(new StraightBytesDocValuesField(\"straightbytesdocvalues\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n\n      iw.addDocument(document);\n    }\n    reader = iw.getReader();\n    iw.close();\n    searcher = newSearcher(reader);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(200);\n    for (int i = 0; i < numDocs; i++) {\n      Document document = new Document();\n      document.add(newField(\"english\", English.intToEnglish(i), TextField.TYPE_UNSTORED));\n      document.add(newField(\"oddeven\", (i % 2 == 0) ? \"even\" : \"odd\", TextField.TYPE_UNSTORED));\n      document.add(newField(\"byte\", \"\" + ((byte) random().nextInt()), StringField.TYPE_UNSTORED));\n      document.add(newField(\"short\", \"\" + ((short) random().nextInt()), StringField.TYPE_UNSTORED));\n      document.add(new IntField(\"int\", random().nextInt()));\n      document.add(new LongField(\"long\", random().nextLong()));\n\n      document.add(new FloatField(\"float\", random().nextFloat()));\n      document.add(new DoubleField(\"double\", random().nextDouble()));\n      document.add(newField(\"bytes\", _TestUtil.randomRealisticUnicodeString(random()), StringField.TYPE_UNSTORED));\n      document.add(newField(\"bytesval\", _TestUtil.randomRealisticUnicodeString(random()), StringField.TYPE_UNSTORED));\n      document.add(new DoubleField(\"double\", random().nextDouble()));\n\n      if (supportsDocValues) {\n        document.add(new IntDocValuesField(\"intdocvalues\", random().nextInt()));\n        document.add(new FloatDocValuesField(\"floatdocvalues\", random().nextFloat()));\n        document.add(new SortedBytesDocValuesField(\"sortedbytesdocvalues\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n        document.add(new SortedBytesDocValuesField(\"sortedbytesdocvaluesval\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n        document.add(new StraightBytesDocValuesField(\"straightbytesdocvalues\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n      }\n\n      iw.addDocument(document);\n    }\n    reader = iw.getReader();\n    iw.close();\n    searcher = newSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(200);\n    for (int i = 0; i < numDocs; i++) {\n      Document document = new Document();\n      document.add(newTextField(\"english\", English.intToEnglish(i), Field.Store.NO));\n      document.add(newTextField(\"oddeven\", (i % 2 == 0) ? \"even\" : \"odd\", Field.Store.NO));\n      document.add(newStringField(\"byte\", \"\" + ((byte) random().nextInt()), Field.Store.NO));\n      document.add(newStringField(\"short\", \"\" + ((short) random().nextInt()), Field.Store.NO));\n      document.add(new IntField(\"int\", random().nextInt(), Field.Store.NO));\n      document.add(new LongField(\"long\", random().nextLong(), Field.Store.NO));\n\n      document.add(new FloatField(\"float\", random().nextFloat(), Field.Store.NO));\n      document.add(new DoubleField(\"double\", random().nextDouble(), Field.Store.NO));\n      document.add(newStringField(\"bytes\", _TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));\n      document.add(newStringField(\"bytesval\", _TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));\n      document.add(new DoubleField(\"double\", random().nextDouble(), Field.Store.NO));\n\n      document.add(new IntDocValuesField(\"intdocvalues\", random().nextInt()));\n      document.add(new FloatDocValuesField(\"floatdocvalues\", random().nextFloat()));\n      document.add(new SortedBytesDocValuesField(\"sortedbytesdocvalues\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n      document.add(new SortedBytesDocValuesField(\"sortedbytesdocvaluesval\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n      document.add(new StraightBytesDocValuesField(\"straightbytesdocvalues\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n\n      iw.addDocument(document);\n    }\n    reader = iw.getReader();\n    iw.close();\n    searcher = newSearcher(reader);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(200);\n    for (int i = 0; i < numDocs; i++) {\n      Document document = new Document();\n      document.add(newField(\"english\", English.intToEnglish(i), TextField.TYPE_UNSTORED));\n      document.add(newField(\"oddeven\", (i % 2 == 0) ? \"even\" : \"odd\", TextField.TYPE_UNSTORED));\n      document.add(newField(\"byte\", \"\" + ((byte) random().nextInt()), StringField.TYPE_UNSTORED));\n      document.add(newField(\"short\", \"\" + ((short) random().nextInt()), StringField.TYPE_UNSTORED));\n      document.add(new IntField(\"int\", random().nextInt()));\n      document.add(new LongField(\"long\", random().nextLong()));\n\n      document.add(new FloatField(\"float\", random().nextFloat()));\n      document.add(new DoubleField(\"double\", random().nextDouble()));\n      document.add(newField(\"bytes\", _TestUtil.randomRealisticUnicodeString(random()), StringField.TYPE_UNSTORED));\n      document.add(newField(\"bytesval\", _TestUtil.randomRealisticUnicodeString(random()), StringField.TYPE_UNSTORED));\n      document.add(new DoubleField(\"double\", random().nextDouble()));\n\n      document.add(new IntDocValuesField(\"intdocvalues\", random().nextInt()));\n      document.add(new FloatDocValuesField(\"floatdocvalues\", random().nextFloat()));\n      document.add(new SortedBytesDocValuesField(\"sortedbytesdocvalues\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n      document.add(new SortedBytesDocValuesField(\"sortedbytesdocvaluesval\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n      document.add(new StraightBytesDocValuesField(\"straightbytesdocvalues\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n\n      iw.addDocument(document);\n    }\n    reader = iw.getReader();\n    iw.close();\n    searcher = newSearcher(reader);\n  }\n\n","bugFix":["45a51a576bac6b9947b098f823748652c7550ee4","fb02351ae2b114dd41585916d1e35fb2cff98fb0"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"423d89a2b3cc419b647c07c2b3fdbc54311d07f9","date":1358836612,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(200);\n    for (int i = 0; i < numDocs; i++) {\n      Document document = new Document();\n      document.add(newTextField(\"english\", English.intToEnglish(i), Field.Store.NO));\n      document.add(newTextField(\"oddeven\", (i % 2 == 0) ? \"even\" : \"odd\", Field.Store.NO));\n      document.add(newStringField(\"byte\", \"\" + ((byte) random().nextInt()), Field.Store.NO));\n      document.add(newStringField(\"short\", \"\" + ((short) random().nextInt()), Field.Store.NO));\n      document.add(new IntField(\"int\", random().nextInt(), Field.Store.NO));\n      document.add(new LongField(\"long\", random().nextLong(), Field.Store.NO));\n\n      document.add(new FloatField(\"float\", random().nextFloat(), Field.Store.NO));\n      document.add(new DoubleField(\"double\", random().nextDouble(), Field.Store.NO));\n      document.add(newStringField(\"bytes\", _TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));\n      document.add(newStringField(\"bytesval\", _TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));\n      document.add(new DoubleField(\"double\", random().nextDouble(), Field.Store.NO));\n\n      document.add(new NumericDocValuesField(\"intdocvalues\", random().nextInt()));\n      document.add(new FloatDocValuesField(\"floatdocvalues\", random().nextFloat()));\n      document.add(new SortedDocValuesField(\"sortedbytesdocvalues\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n      document.add(new SortedDocValuesField(\"sortedbytesdocvaluesval\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n      document.add(new BinaryDocValuesField(\"straightbytesdocvalues\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n\n      iw.addDocument(document);\n    }\n    reader = iw.getReader();\n    iw.close();\n    searcher = newSearcher(reader);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(200);\n    for (int i = 0; i < numDocs; i++) {\n      Document document = new Document();\n      document.add(newTextField(\"english\", English.intToEnglish(i), Field.Store.NO));\n      document.add(newTextField(\"oddeven\", (i % 2 == 0) ? \"even\" : \"odd\", Field.Store.NO));\n      document.add(newStringField(\"byte\", \"\" + ((byte) random().nextInt()), Field.Store.NO));\n      document.add(newStringField(\"short\", \"\" + ((short) random().nextInt()), Field.Store.NO));\n      document.add(new IntField(\"int\", random().nextInt(), Field.Store.NO));\n      document.add(new LongField(\"long\", random().nextLong(), Field.Store.NO));\n\n      document.add(new FloatField(\"float\", random().nextFloat(), Field.Store.NO));\n      document.add(new DoubleField(\"double\", random().nextDouble(), Field.Store.NO));\n      document.add(newStringField(\"bytes\", _TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));\n      document.add(newStringField(\"bytesval\", _TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));\n      document.add(new DoubleField(\"double\", random().nextDouble(), Field.Store.NO));\n\n      document.add(new IntDocValuesField(\"intdocvalues\", random().nextInt()));\n      document.add(new FloatDocValuesField(\"floatdocvalues\", random().nextFloat()));\n      document.add(new SortedBytesDocValuesField(\"sortedbytesdocvalues\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n      document.add(new SortedBytesDocValuesField(\"sortedbytesdocvaluesval\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n      document.add(new StraightBytesDocValuesField(\"straightbytesdocvalues\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n\n      iw.addDocument(document);\n    }\n    reader = iw.getReader();\n    iw.close();\n    searcher = newSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(200);\n    for (int i = 0; i < numDocs; i++) {\n      Document document = new Document();\n      document.add(newTextField(\"english\", English.intToEnglish(i), Field.Store.NO));\n      document.add(newTextField(\"oddeven\", (i % 2 == 0) ? \"even\" : \"odd\", Field.Store.NO));\n      document.add(newStringField(\"byte\", \"\" + ((byte) random().nextInt()), Field.Store.NO));\n      document.add(newStringField(\"short\", \"\" + ((short) random().nextInt()), Field.Store.NO));\n      document.add(new IntField(\"int\", random().nextInt(), Field.Store.NO));\n      document.add(new LongField(\"long\", random().nextLong(), Field.Store.NO));\n\n      document.add(new FloatField(\"float\", random().nextFloat(), Field.Store.NO));\n      document.add(new DoubleField(\"double\", random().nextDouble(), Field.Store.NO));\n      document.add(newStringField(\"bytes\", _TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));\n      document.add(newStringField(\"bytesval\", _TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));\n      document.add(new DoubleField(\"double\", random().nextDouble(), Field.Store.NO));\n\n      document.add(new NumericDocValuesField(\"intdocvalues\", random().nextInt()));\n      document.add(new FloatDocValuesField(\"floatdocvalues\", random().nextFloat()));\n      document.add(new SortedDocValuesField(\"sortedbytesdocvalues\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n      document.add(new SortedDocValuesField(\"sortedbytesdocvaluesval\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n      document.add(new BinaryDocValuesField(\"straightbytesdocvalues\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n\n      iw.addDocument(document);\n    }\n    reader = iw.getReader();\n    iw.close();\n    searcher = newSearcher(reader);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(200);\n    for (int i = 0; i < numDocs; i++) {\n      Document document = new Document();\n      document.add(newTextField(\"english\", English.intToEnglish(i), Field.Store.NO));\n      document.add(newTextField(\"oddeven\", (i % 2 == 0) ? \"even\" : \"odd\", Field.Store.NO));\n      document.add(newStringField(\"byte\", \"\" + ((byte) random().nextInt()), Field.Store.NO));\n      document.add(newStringField(\"short\", \"\" + ((short) random().nextInt()), Field.Store.NO));\n      document.add(new IntField(\"int\", random().nextInt(), Field.Store.NO));\n      document.add(new LongField(\"long\", random().nextLong(), Field.Store.NO));\n\n      document.add(new FloatField(\"float\", random().nextFloat(), Field.Store.NO));\n      document.add(new DoubleField(\"double\", random().nextDouble(), Field.Store.NO));\n      document.add(newStringField(\"bytes\", _TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));\n      document.add(newStringField(\"bytesval\", _TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));\n      document.add(new DoubleField(\"double\", random().nextDouble(), Field.Store.NO));\n\n      document.add(new IntDocValuesField(\"intdocvalues\", random().nextInt()));\n      document.add(new FloatDocValuesField(\"floatdocvalues\", random().nextFloat()));\n      document.add(new SortedBytesDocValuesField(\"sortedbytesdocvalues\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n      document.add(new SortedBytesDocValuesField(\"sortedbytesdocvaluesval\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n      document.add(new StraightBytesDocValuesField(\"straightbytesdocvalues\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n\n      iw.addDocument(document);\n    }\n    reader = iw.getReader();\n    iw.close();\n    searcher = newSearcher(reader);\n  }\n\n","bugFix":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7615b855702e008d91a95a2578bf05d27372f599","date":1389802891,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(200);\n    for (int i = 0; i < numDocs; i++) {\n      List<Field> fields = new ArrayList<Field>();\n      fields.add(newTextField(\"english\", English.intToEnglish(i), Field.Store.NO));\n      fields.add(newTextField(\"oddeven\", (i % 2 == 0) ? \"even\" : \"odd\", Field.Store.NO));\n      fields.add(newStringField(\"byte\", \"\" + ((byte) random().nextInt()), Field.Store.NO));\n      fields.add(newStringField(\"short\", \"\" + ((short) random().nextInt()), Field.Store.NO));\n      fields.add(new IntField(\"int\", random().nextInt(), Field.Store.NO));\n      fields.add(new LongField(\"long\", random().nextLong(), Field.Store.NO));\n\n      fields.add(new FloatField(\"float\", random().nextFloat(), Field.Store.NO));\n      fields.add(new DoubleField(\"double\", random().nextDouble(), Field.Store.NO));\n      fields.add(newStringField(\"bytes\", _TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));\n      fields.add(newStringField(\"bytesval\", _TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));\n      fields.add(new DoubleField(\"double\", random().nextDouble(), Field.Store.NO));\n\n      fields.add(new NumericDocValuesField(\"intdocvalues\", random().nextInt()));\n      fields.add(new FloatDocValuesField(\"floatdocvalues\", random().nextFloat()));\n      fields.add(new SortedDocValuesField(\"sortedbytesdocvalues\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n      fields.add(new SortedDocValuesField(\"sortedbytesdocvaluesval\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n      fields.add(new BinaryDocValuesField(\"straightbytesdocvalues\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n\n      Document document = new Document();\n      document.add(new StoredField(\"id\", \"\"+i));\n      if (VERBOSE) {\n        System.out.println(\"  add doc id=\" + i);\n      }\n      for(Field field : fields) {\n        // So we are sometimes missing that field:\n        if (random().nextInt(5) != 4) {\n          document.add(field);\n          if (VERBOSE) {\n            System.out.println(\"    \" + field);\n          }\n        }\n      }\n\n      iw.addDocument(document);\n\n      // nocommit randomly commit so we exercise segments\n    }\n    reader = iw.getReader();\n    iw.close();\n    searcher = newSearcher(reader);\n    if (VERBOSE) {\n      System.out.println(\"  searcher=\" + searcher);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(200);\n    for (int i = 0; i < numDocs; i++) {\n      Document document = new Document();\n      document.add(newTextField(\"english\", English.intToEnglish(i), Field.Store.NO));\n      document.add(newTextField(\"oddeven\", (i % 2 == 0) ? \"even\" : \"odd\", Field.Store.NO));\n      document.add(newStringField(\"byte\", \"\" + ((byte) random().nextInt()), Field.Store.NO));\n      document.add(newStringField(\"short\", \"\" + ((short) random().nextInt()), Field.Store.NO));\n      document.add(new IntField(\"int\", random().nextInt(), Field.Store.NO));\n      document.add(new LongField(\"long\", random().nextLong(), Field.Store.NO));\n\n      document.add(new FloatField(\"float\", random().nextFloat(), Field.Store.NO));\n      document.add(new DoubleField(\"double\", random().nextDouble(), Field.Store.NO));\n      document.add(newStringField(\"bytes\", _TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));\n      document.add(newStringField(\"bytesval\", _TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));\n      document.add(new DoubleField(\"double\", random().nextDouble(), Field.Store.NO));\n\n      document.add(new NumericDocValuesField(\"intdocvalues\", random().nextInt()));\n      document.add(new FloatDocValuesField(\"floatdocvalues\", random().nextFloat()));\n      document.add(new SortedDocValuesField(\"sortedbytesdocvalues\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n      document.add(new SortedDocValuesField(\"sortedbytesdocvaluesval\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n      document.add(new BinaryDocValuesField(\"straightbytesdocvalues\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n\n      iw.addDocument(document);\n    }\n    reader = iw.getReader();\n    iw.close();\n    searcher = newSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":["0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f718186415bc5417a3367c952c64c8534053c350","date":1389820099,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    allSortFields = new ArrayList<SortField>(Arrays.asList(new SortField[] {\n          new SortField(\"int\", SortField.Type.INT, false),\n          new SortField(\"long\", SortField.Type.LONG, false),\n          new SortField(\"float\", SortField.Type.FLOAT, false),\n          new SortField(\"double\", SortField.Type.DOUBLE, false),\n          new SortField(\"bytes\", SortField.Type.STRING, false),\n          new SortField(\"bytesval\", SortField.Type.STRING_VAL, false),\n          new SortField(\"intdocvalues\", SortField.Type.INT, false),\n          new SortField(\"floatdocvalues\", SortField.Type.FLOAT, false),\n          new SortField(\"sortedbytesdocvalues\", SortField.Type.STRING, false),\n          new SortField(\"sortedbytesdocvaluesval\", SortField.Type.STRING_VAL, false),\n          new SortField(\"straightbytesdocvalues\", SortField.Type.STRING_VAL, false),\n          new SortField(\"int\", SortField.Type.INT, true),\n          new SortField(\"long\", SortField.Type.LONG, true),\n          new SortField(\"float\", SortField.Type.FLOAT, true),\n          new SortField(\"double\", SortField.Type.DOUBLE, true),\n          new SortField(\"bytes\", SortField.Type.STRING, true),\n          new SortField(\"bytesval\", SortField.Type.STRING_VAL, true),\n          new SortField(\"intdocvalues\", SortField.Type.INT, true),\n          new SortField(\"floatdocvalues\", SortField.Type.FLOAT, true),\n          new SortField(\"sortedbytesdocvalues\", SortField.Type.STRING, true),\n          new SortField(\"sortedbytesdocvaluesval\", SortField.Type.STRING_VAL, true),\n          new SortField(\"straightbytesdocvalues\", SortField.Type.STRING_VAL, true),\n          SortField.FIELD_SCORE,\n          SortField.FIELD_DOC,\n        }));\n\n    // Also test missing first / last for the \"string\" sorts:\n    for(String field : new String[] {\"bytes\", \"sortedbytesdocvalues\"}) {\n      for(int rev=0;rev<2;rev++) {\n        boolean reversed = rev == 0;\n        SortField sf = new SortField(field, SortField.Type.STRING, reversed);\n        sf.setMissingValue(SortField.STRING_FIRST);\n        allSortFields.add(sf);\n\n        sf = new SortField(field, SortField.Type.STRING, reversed);\n        sf.setMissingValue(SortField.STRING_LAST);\n        allSortFields.add(sf);\n      }\n    }\n\n    int limit = allSortFields.size();\n    for(int i=0;i<limit;i++) {\n      SortField sf = allSortFields.get(i);\n      if (sf.getType() == SortField.Type.INT) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.INT, sf.getReverse());\n        sf2.setMissingValue(random().nextInt());\n        allSortFields.add(sf2);\n      } else if (sf.getType() == SortField.Type.LONG) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.LONG, sf.getReverse());\n        sf2.setMissingValue(random().nextLong());\n        allSortFields.add(sf2);\n      } else if (sf.getType() == SortField.Type.FLOAT) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.FLOAT, sf.getReverse());\n        sf2.setMissingValue(random().nextFloat());\n        allSortFields.add(sf2);\n      } else if (sf.getType() == SortField.Type.DOUBLE) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.DOUBLE, sf.getReverse());\n        sf2.setMissingValue(random().nextDouble());\n        allSortFields.add(sf2);\n      }\n    }\n\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(200);\n    for (int i = 0; i < numDocs; i++) {\n      List<Field> fields = new ArrayList<Field>();\n      fields.add(newTextField(\"english\", English.intToEnglish(i), Field.Store.NO));\n      fields.add(newTextField(\"oddeven\", (i % 2 == 0) ? \"even\" : \"odd\", Field.Store.NO));\n      fields.add(newStringField(\"byte\", \"\" + ((byte) random().nextInt()), Field.Store.NO));\n      fields.add(newStringField(\"short\", \"\" + ((short) random().nextInt()), Field.Store.NO));\n      fields.add(new IntField(\"int\", random().nextInt(), Field.Store.NO));\n      fields.add(new LongField(\"long\", random().nextLong(), Field.Store.NO));\n\n      fields.add(new FloatField(\"float\", random().nextFloat(), Field.Store.NO));\n      fields.add(new DoubleField(\"double\", random().nextDouble(), Field.Store.NO));\n      fields.add(newStringField(\"bytes\", _TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));\n      fields.add(newStringField(\"bytesval\", _TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));\n      fields.add(new DoubleField(\"double\", random().nextDouble(), Field.Store.NO));\n\n      fields.add(new NumericDocValuesField(\"intdocvalues\", random().nextInt()));\n      fields.add(new FloatDocValuesField(\"floatdocvalues\", random().nextFloat()));\n      fields.add(new SortedDocValuesField(\"sortedbytesdocvalues\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n      fields.add(new SortedDocValuesField(\"sortedbytesdocvaluesval\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n      fields.add(new BinaryDocValuesField(\"straightbytesdocvalues\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n\n      Document document = new Document();\n      document.add(new StoredField(\"id\", \"\"+i));\n      if (VERBOSE) {\n        System.out.println(\"  add doc id=\" + i);\n      }\n      for(Field field : fields) {\n        // So we are sometimes missing that field:\n        if (random().nextInt(5) != 4) {\n          document.add(field);\n          if (VERBOSE) {\n            System.out.println(\"    \" + field);\n          }\n        }\n      }\n\n      iw.addDocument(document);\n\n      if (random().nextInt(50) == 17) {\n        iw.commit();\n      }\n    }\n    reader = iw.getReader();\n    iw.close();\n    searcher = newSearcher(reader);\n    if (VERBOSE) {\n      System.out.println(\"  searcher=\" + searcher);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(200);\n    for (int i = 0; i < numDocs; i++) {\n      List<Field> fields = new ArrayList<Field>();\n      fields.add(newTextField(\"english\", English.intToEnglish(i), Field.Store.NO));\n      fields.add(newTextField(\"oddeven\", (i % 2 == 0) ? \"even\" : \"odd\", Field.Store.NO));\n      fields.add(newStringField(\"byte\", \"\" + ((byte) random().nextInt()), Field.Store.NO));\n      fields.add(newStringField(\"short\", \"\" + ((short) random().nextInt()), Field.Store.NO));\n      fields.add(new IntField(\"int\", random().nextInt(), Field.Store.NO));\n      fields.add(new LongField(\"long\", random().nextLong(), Field.Store.NO));\n\n      fields.add(new FloatField(\"float\", random().nextFloat(), Field.Store.NO));\n      fields.add(new DoubleField(\"double\", random().nextDouble(), Field.Store.NO));\n      fields.add(newStringField(\"bytes\", _TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));\n      fields.add(newStringField(\"bytesval\", _TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));\n      fields.add(new DoubleField(\"double\", random().nextDouble(), Field.Store.NO));\n\n      fields.add(new NumericDocValuesField(\"intdocvalues\", random().nextInt()));\n      fields.add(new FloatDocValuesField(\"floatdocvalues\", random().nextFloat()));\n      fields.add(new SortedDocValuesField(\"sortedbytesdocvalues\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n      fields.add(new SortedDocValuesField(\"sortedbytesdocvaluesval\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n      fields.add(new BinaryDocValuesField(\"straightbytesdocvalues\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n\n      Document document = new Document();\n      document.add(new StoredField(\"id\", \"\"+i));\n      if (VERBOSE) {\n        System.out.println(\"  add doc id=\" + i);\n      }\n      for(Field field : fields) {\n        // So we are sometimes missing that field:\n        if (random().nextInt(5) != 4) {\n          document.add(field);\n          if (VERBOSE) {\n            System.out.println(\"    \" + field);\n          }\n        }\n      }\n\n      iw.addDocument(document);\n\n      // nocommit randomly commit so we exercise segments\n    }\n    reader = iw.getReader();\n    iw.close();\n    searcher = newSearcher(reader);\n    if (VERBOSE) {\n      System.out.println(\"  searcher=\" + searcher);\n    }\n  }\n\n","bugFix":null,"bugIntro":["0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"27ab7b234eab0cbc020836989b96ed430e1065bb","date":1389894025,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    allSortFields = new ArrayList<SortField>(Arrays.asList(new SortField[] {\n          new SortField(\"int\", SortField.Type.INT, false),\n          new SortField(\"long\", SortField.Type.LONG, false),\n          new SortField(\"float\", SortField.Type.FLOAT, false),\n          new SortField(\"double\", SortField.Type.DOUBLE, false),\n          new SortField(\"bytes\", SortField.Type.STRING, false),\n          new SortField(\"bytesval\", SortField.Type.STRING_VAL, false),\n          new SortField(\"intdocvalues\", SortField.Type.INT, false),\n          new SortField(\"floatdocvalues\", SortField.Type.FLOAT, false),\n          new SortField(\"sortedbytesdocvalues\", SortField.Type.STRING, false),\n          new SortField(\"sortedbytesdocvaluesval\", SortField.Type.STRING_VAL, false),\n          new SortField(\"straightbytesdocvalues\", SortField.Type.STRING_VAL, false),\n          new SortField(\"int\", SortField.Type.INT, true),\n          new SortField(\"long\", SortField.Type.LONG, true),\n          new SortField(\"float\", SortField.Type.FLOAT, true),\n          new SortField(\"double\", SortField.Type.DOUBLE, true),\n          new SortField(\"bytes\", SortField.Type.STRING, true),\n          new SortField(\"bytesval\", SortField.Type.STRING_VAL, true),\n          new SortField(\"intdocvalues\", SortField.Type.INT, true),\n          new SortField(\"floatdocvalues\", SortField.Type.FLOAT, true),\n          new SortField(\"sortedbytesdocvalues\", SortField.Type.STRING, true),\n          new SortField(\"sortedbytesdocvaluesval\", SortField.Type.STRING_VAL, true),\n          new SortField(\"straightbytesdocvalues\", SortField.Type.STRING_VAL, true),\n          SortField.FIELD_SCORE,\n          SortField.FIELD_DOC,\n        }));\n\n    // Also test missing first / last for the \"string\" sorts:\n    for(String field : new String[] {\"bytes\", \"sortedbytesdocvalues\"}) {\n      for(int rev=0;rev<2;rev++) {\n        boolean reversed = rev == 0;\n        SortField sf = new SortField(field, SortField.Type.STRING, reversed);\n        sf.setMissingValue(SortField.STRING_FIRST);\n        allSortFields.add(sf);\n\n        sf = new SortField(field, SortField.Type.STRING, reversed);\n        sf.setMissingValue(SortField.STRING_LAST);\n        allSortFields.add(sf);\n      }\n    }\n\n    int limit = allSortFields.size();\n    for(int i=0;i<limit;i++) {\n      SortField sf = allSortFields.get(i);\n      if (sf.getType() == SortField.Type.INT) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.INT, sf.getReverse());\n        sf2.setMissingValue(random().nextInt());\n        allSortFields.add(sf2);\n      } else if (sf.getType() == SortField.Type.LONG) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.LONG, sf.getReverse());\n        sf2.setMissingValue(random().nextLong());\n        allSortFields.add(sf2);\n      } else if (sf.getType() == SortField.Type.FLOAT) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.FLOAT, sf.getReverse());\n        sf2.setMissingValue(random().nextFloat());\n        allSortFields.add(sf2);\n      } else if (sf.getType() == SortField.Type.DOUBLE) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.DOUBLE, sf.getReverse());\n        sf2.setMissingValue(random().nextDouble());\n        allSortFields.add(sf2);\n      }\n    }\n\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(200);\n    for (int i = 0; i < numDocs; i++) {\n      List<Field> fields = new ArrayList<Field>();\n      fields.add(newTextField(\"english\", English.intToEnglish(i), Field.Store.NO));\n      fields.add(newTextField(\"oddeven\", (i % 2 == 0) ? \"even\" : \"odd\", Field.Store.NO));\n      fields.add(newStringField(\"byte\", \"\" + ((byte) random().nextInt()), Field.Store.NO));\n      fields.add(newStringField(\"short\", \"\" + ((short) random().nextInt()), Field.Store.NO));\n      fields.add(new IntField(\"int\", random().nextInt(), Field.Store.NO));\n      fields.add(new LongField(\"long\", random().nextLong(), Field.Store.NO));\n\n      fields.add(new FloatField(\"float\", random().nextFloat(), Field.Store.NO));\n      fields.add(new DoubleField(\"double\", random().nextDouble(), Field.Store.NO));\n      fields.add(newStringField(\"bytes\", _TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));\n      fields.add(newStringField(\"bytesval\", _TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));\n      fields.add(new DoubleField(\"double\", random().nextDouble(), Field.Store.NO));\n\n      fields.add(new NumericDocValuesField(\"intdocvalues\", random().nextInt()));\n      fields.add(new FloatDocValuesField(\"floatdocvalues\", random().nextFloat()));\n      fields.add(new SortedDocValuesField(\"sortedbytesdocvalues\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n      fields.add(new SortedDocValuesField(\"sortedbytesdocvaluesval\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n      fields.add(new BinaryDocValuesField(\"straightbytesdocvalues\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n\n      Document document = new Document();\n      document.add(new StoredField(\"id\", \"\"+i));\n      if (VERBOSE) {\n        System.out.println(\"  add doc id=\" + i);\n      }\n      for(Field field : fields) {\n        // So we are sometimes missing that field:\n        if (random().nextInt(5) != 4) {\n          document.add(field);\n          if (VERBOSE) {\n            System.out.println(\"    \" + field);\n          }\n        }\n      }\n\n      iw.addDocument(document);\n\n      if (random().nextInt(50) == 17) {\n        iw.commit();\n      }\n    }\n    reader = iw.getReader();\n    iw.close();\n    searcher = newSearcher(reader);\n    if (VERBOSE) {\n      System.out.println(\"  searcher=\" + searcher);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(200);\n    for (int i = 0; i < numDocs; i++) {\n      Document document = new Document();\n      document.add(newTextField(\"english\", English.intToEnglish(i), Field.Store.NO));\n      document.add(newTextField(\"oddeven\", (i % 2 == 0) ? \"even\" : \"odd\", Field.Store.NO));\n      document.add(newStringField(\"byte\", \"\" + ((byte) random().nextInt()), Field.Store.NO));\n      document.add(newStringField(\"short\", \"\" + ((short) random().nextInt()), Field.Store.NO));\n      document.add(new IntField(\"int\", random().nextInt(), Field.Store.NO));\n      document.add(new LongField(\"long\", random().nextLong(), Field.Store.NO));\n\n      document.add(new FloatField(\"float\", random().nextFloat(), Field.Store.NO));\n      document.add(new DoubleField(\"double\", random().nextDouble(), Field.Store.NO));\n      document.add(newStringField(\"bytes\", _TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));\n      document.add(newStringField(\"bytesval\", _TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));\n      document.add(new DoubleField(\"double\", random().nextDouble(), Field.Store.NO));\n\n      document.add(new NumericDocValuesField(\"intdocvalues\", random().nextInt()));\n      document.add(new FloatDocValuesField(\"floatdocvalues\", random().nextFloat()));\n      document.add(new SortedDocValuesField(\"sortedbytesdocvalues\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n      document.add(new SortedDocValuesField(\"sortedbytesdocvaluesval\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n      document.add(new BinaryDocValuesField(\"straightbytesdocvalues\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n\n      iw.addDocument(document);\n    }\n    reader = iw.getReader();\n    iw.close();\n    searcher = newSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    allSortFields = new ArrayList<SortField>(Arrays.asList(new SortField[] {\n          new SortField(\"int\", SortField.Type.INT, false),\n          new SortField(\"long\", SortField.Type.LONG, false),\n          new SortField(\"float\", SortField.Type.FLOAT, false),\n          new SortField(\"double\", SortField.Type.DOUBLE, false),\n          new SortField(\"bytes\", SortField.Type.STRING, false),\n          new SortField(\"bytesval\", SortField.Type.STRING_VAL, false),\n          new SortField(\"intdocvalues\", SortField.Type.INT, false),\n          new SortField(\"floatdocvalues\", SortField.Type.FLOAT, false),\n          new SortField(\"sortedbytesdocvalues\", SortField.Type.STRING, false),\n          new SortField(\"sortedbytesdocvaluesval\", SortField.Type.STRING_VAL, false),\n          new SortField(\"straightbytesdocvalues\", SortField.Type.STRING_VAL, false),\n          new SortField(\"int\", SortField.Type.INT, true),\n          new SortField(\"long\", SortField.Type.LONG, true),\n          new SortField(\"float\", SortField.Type.FLOAT, true),\n          new SortField(\"double\", SortField.Type.DOUBLE, true),\n          new SortField(\"bytes\", SortField.Type.STRING, true),\n          new SortField(\"bytesval\", SortField.Type.STRING_VAL, true),\n          new SortField(\"intdocvalues\", SortField.Type.INT, true),\n          new SortField(\"floatdocvalues\", SortField.Type.FLOAT, true),\n          new SortField(\"sortedbytesdocvalues\", SortField.Type.STRING, true),\n          new SortField(\"sortedbytesdocvaluesval\", SortField.Type.STRING_VAL, true),\n          new SortField(\"straightbytesdocvalues\", SortField.Type.STRING_VAL, true),\n          SortField.FIELD_SCORE,\n          SortField.FIELD_DOC,\n        }));\n\n    // Also test missing first / last for the \"string\" sorts:\n    for(String field : new String[] {\"bytes\", \"sortedbytesdocvalues\"}) {\n      for(int rev=0;rev<2;rev++) {\n        boolean reversed = rev == 0;\n        SortField sf = new SortField(field, SortField.Type.STRING, reversed);\n        sf.setMissingValue(SortField.STRING_FIRST);\n        allSortFields.add(sf);\n\n        sf = new SortField(field, SortField.Type.STRING, reversed);\n        sf.setMissingValue(SortField.STRING_LAST);\n        allSortFields.add(sf);\n      }\n    }\n\n    int limit = allSortFields.size();\n    for(int i=0;i<limit;i++) {\n      SortField sf = allSortFields.get(i);\n      if (sf.getType() == SortField.Type.INT) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.INT, sf.getReverse());\n        sf2.setMissingValue(random().nextInt());\n        allSortFields.add(sf2);\n      } else if (sf.getType() == SortField.Type.LONG) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.LONG, sf.getReverse());\n        sf2.setMissingValue(random().nextLong());\n        allSortFields.add(sf2);\n      } else if (sf.getType() == SortField.Type.FLOAT) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.FLOAT, sf.getReverse());\n        sf2.setMissingValue(random().nextFloat());\n        allSortFields.add(sf2);\n      } else if (sf.getType() == SortField.Type.DOUBLE) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.DOUBLE, sf.getReverse());\n        sf2.setMissingValue(random().nextDouble());\n        allSortFields.add(sf2);\n      }\n    }\n\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(200);\n    for (int i = 0; i < numDocs; i++) {\n      List<Field> fields = new ArrayList<Field>();\n      fields.add(newTextField(\"english\", English.intToEnglish(i), Field.Store.NO));\n      fields.add(newTextField(\"oddeven\", (i % 2 == 0) ? \"even\" : \"odd\", Field.Store.NO));\n      fields.add(newStringField(\"byte\", \"\" + ((byte) random().nextInt()), Field.Store.NO));\n      fields.add(newStringField(\"short\", \"\" + ((short) random().nextInt()), Field.Store.NO));\n      fields.add(new IntField(\"int\", random().nextInt(), Field.Store.NO));\n      fields.add(new LongField(\"long\", random().nextLong(), Field.Store.NO));\n\n      fields.add(new FloatField(\"float\", random().nextFloat(), Field.Store.NO));\n      fields.add(new DoubleField(\"double\", random().nextDouble(), Field.Store.NO));\n      fields.add(newStringField(\"bytes\", TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));\n      fields.add(newStringField(\"bytesval\", TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));\n      fields.add(new DoubleField(\"double\", random().nextDouble(), Field.Store.NO));\n\n      fields.add(new NumericDocValuesField(\"intdocvalues\", random().nextInt()));\n      fields.add(new FloatDocValuesField(\"floatdocvalues\", random().nextFloat()));\n      fields.add(new SortedDocValuesField(\"sortedbytesdocvalues\", new BytesRef(TestUtil.randomRealisticUnicodeString(random()))));\n      fields.add(new SortedDocValuesField(\"sortedbytesdocvaluesval\", new BytesRef(TestUtil.randomRealisticUnicodeString(random()))));\n      fields.add(new BinaryDocValuesField(\"straightbytesdocvalues\", new BytesRef(TestUtil.randomRealisticUnicodeString(random()))));\n\n      Document document = new Document();\n      document.add(new StoredField(\"id\", \"\"+i));\n      if (VERBOSE) {\n        System.out.println(\"  add doc id=\" + i);\n      }\n      for(Field field : fields) {\n        // So we are sometimes missing that field:\n        if (random().nextInt(5) != 4) {\n          document.add(field);\n          if (VERBOSE) {\n            System.out.println(\"    \" + field);\n          }\n        }\n      }\n\n      iw.addDocument(document);\n\n      if (random().nextInt(50) == 17) {\n        iw.commit();\n      }\n    }\n    reader = iw.getReader();\n    iw.close();\n    searcher = newSearcher(reader);\n    if (VERBOSE) {\n      System.out.println(\"  searcher=\" + searcher);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    allSortFields = new ArrayList<SortField>(Arrays.asList(new SortField[] {\n          new SortField(\"int\", SortField.Type.INT, false),\n          new SortField(\"long\", SortField.Type.LONG, false),\n          new SortField(\"float\", SortField.Type.FLOAT, false),\n          new SortField(\"double\", SortField.Type.DOUBLE, false),\n          new SortField(\"bytes\", SortField.Type.STRING, false),\n          new SortField(\"bytesval\", SortField.Type.STRING_VAL, false),\n          new SortField(\"intdocvalues\", SortField.Type.INT, false),\n          new SortField(\"floatdocvalues\", SortField.Type.FLOAT, false),\n          new SortField(\"sortedbytesdocvalues\", SortField.Type.STRING, false),\n          new SortField(\"sortedbytesdocvaluesval\", SortField.Type.STRING_VAL, false),\n          new SortField(\"straightbytesdocvalues\", SortField.Type.STRING_VAL, false),\n          new SortField(\"int\", SortField.Type.INT, true),\n          new SortField(\"long\", SortField.Type.LONG, true),\n          new SortField(\"float\", SortField.Type.FLOAT, true),\n          new SortField(\"double\", SortField.Type.DOUBLE, true),\n          new SortField(\"bytes\", SortField.Type.STRING, true),\n          new SortField(\"bytesval\", SortField.Type.STRING_VAL, true),\n          new SortField(\"intdocvalues\", SortField.Type.INT, true),\n          new SortField(\"floatdocvalues\", SortField.Type.FLOAT, true),\n          new SortField(\"sortedbytesdocvalues\", SortField.Type.STRING, true),\n          new SortField(\"sortedbytesdocvaluesval\", SortField.Type.STRING_VAL, true),\n          new SortField(\"straightbytesdocvalues\", SortField.Type.STRING_VAL, true),\n          SortField.FIELD_SCORE,\n          SortField.FIELD_DOC,\n        }));\n\n    // Also test missing first / last for the \"string\" sorts:\n    for(String field : new String[] {\"bytes\", \"sortedbytesdocvalues\"}) {\n      for(int rev=0;rev<2;rev++) {\n        boolean reversed = rev == 0;\n        SortField sf = new SortField(field, SortField.Type.STRING, reversed);\n        sf.setMissingValue(SortField.STRING_FIRST);\n        allSortFields.add(sf);\n\n        sf = new SortField(field, SortField.Type.STRING, reversed);\n        sf.setMissingValue(SortField.STRING_LAST);\n        allSortFields.add(sf);\n      }\n    }\n\n    int limit = allSortFields.size();\n    for(int i=0;i<limit;i++) {\n      SortField sf = allSortFields.get(i);\n      if (sf.getType() == SortField.Type.INT) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.INT, sf.getReverse());\n        sf2.setMissingValue(random().nextInt());\n        allSortFields.add(sf2);\n      } else if (sf.getType() == SortField.Type.LONG) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.LONG, sf.getReverse());\n        sf2.setMissingValue(random().nextLong());\n        allSortFields.add(sf2);\n      } else if (sf.getType() == SortField.Type.FLOAT) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.FLOAT, sf.getReverse());\n        sf2.setMissingValue(random().nextFloat());\n        allSortFields.add(sf2);\n      } else if (sf.getType() == SortField.Type.DOUBLE) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.DOUBLE, sf.getReverse());\n        sf2.setMissingValue(random().nextDouble());\n        allSortFields.add(sf2);\n      }\n    }\n\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(200);\n    for (int i = 0; i < numDocs; i++) {\n      List<Field> fields = new ArrayList<Field>();\n      fields.add(newTextField(\"english\", English.intToEnglish(i), Field.Store.NO));\n      fields.add(newTextField(\"oddeven\", (i % 2 == 0) ? \"even\" : \"odd\", Field.Store.NO));\n      fields.add(newStringField(\"byte\", \"\" + ((byte) random().nextInt()), Field.Store.NO));\n      fields.add(newStringField(\"short\", \"\" + ((short) random().nextInt()), Field.Store.NO));\n      fields.add(new IntField(\"int\", random().nextInt(), Field.Store.NO));\n      fields.add(new LongField(\"long\", random().nextLong(), Field.Store.NO));\n\n      fields.add(new FloatField(\"float\", random().nextFloat(), Field.Store.NO));\n      fields.add(new DoubleField(\"double\", random().nextDouble(), Field.Store.NO));\n      fields.add(newStringField(\"bytes\", _TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));\n      fields.add(newStringField(\"bytesval\", _TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));\n      fields.add(new DoubleField(\"double\", random().nextDouble(), Field.Store.NO));\n\n      fields.add(new NumericDocValuesField(\"intdocvalues\", random().nextInt()));\n      fields.add(new FloatDocValuesField(\"floatdocvalues\", random().nextFloat()));\n      fields.add(new SortedDocValuesField(\"sortedbytesdocvalues\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n      fields.add(new SortedDocValuesField(\"sortedbytesdocvaluesval\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n      fields.add(new BinaryDocValuesField(\"straightbytesdocvalues\", new BytesRef(_TestUtil.randomRealisticUnicodeString(random()))));\n\n      Document document = new Document();\n      document.add(new StoredField(\"id\", \"\"+i));\n      if (VERBOSE) {\n        System.out.println(\"  add doc id=\" + i);\n      }\n      for(Field field : fields) {\n        // So we are sometimes missing that field:\n        if (random().nextInt(5) != 4) {\n          document.add(field);\n          if (VERBOSE) {\n            System.out.println(\"    \" + field);\n          }\n        }\n      }\n\n      iw.addDocument(document);\n\n      if (random().nextInt(50) == 17) {\n        iw.commit();\n      }\n    }\n    reader = iw.getReader();\n    iw.close();\n    searcher = newSearcher(reader);\n    if (VERBOSE) {\n      System.out.println(\"  searcher=\" + searcher);\n    }\n  }\n\n","bugFix":null,"bugIntro":["0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    allSortFields = new ArrayList<>(Arrays.asList(new SortField[] {\n          new SortField(\"int\", SortField.Type.INT, false),\n          new SortField(\"long\", SortField.Type.LONG, false),\n          new SortField(\"float\", SortField.Type.FLOAT, false),\n          new SortField(\"double\", SortField.Type.DOUBLE, false),\n          new SortField(\"bytes\", SortField.Type.STRING, false),\n          new SortField(\"bytesval\", SortField.Type.STRING_VAL, false),\n          new SortField(\"intdocvalues\", SortField.Type.INT, false),\n          new SortField(\"floatdocvalues\", SortField.Type.FLOAT, false),\n          new SortField(\"sortedbytesdocvalues\", SortField.Type.STRING, false),\n          new SortField(\"sortedbytesdocvaluesval\", SortField.Type.STRING_VAL, false),\n          new SortField(\"straightbytesdocvalues\", SortField.Type.STRING_VAL, false),\n          new SortField(\"int\", SortField.Type.INT, true),\n          new SortField(\"long\", SortField.Type.LONG, true),\n          new SortField(\"float\", SortField.Type.FLOAT, true),\n          new SortField(\"double\", SortField.Type.DOUBLE, true),\n          new SortField(\"bytes\", SortField.Type.STRING, true),\n          new SortField(\"bytesval\", SortField.Type.STRING_VAL, true),\n          new SortField(\"intdocvalues\", SortField.Type.INT, true),\n          new SortField(\"floatdocvalues\", SortField.Type.FLOAT, true),\n          new SortField(\"sortedbytesdocvalues\", SortField.Type.STRING, true),\n          new SortField(\"sortedbytesdocvaluesval\", SortField.Type.STRING_VAL, true),\n          new SortField(\"straightbytesdocvalues\", SortField.Type.STRING_VAL, true),\n          SortField.FIELD_SCORE,\n          SortField.FIELD_DOC,\n        }));\n\n    // Also test missing first / last for the \"string\" sorts:\n    for(String field : new String[] {\"bytes\", \"sortedbytesdocvalues\"}) {\n      for(int rev=0;rev<2;rev++) {\n        boolean reversed = rev == 0;\n        SortField sf = new SortField(field, SortField.Type.STRING, reversed);\n        sf.setMissingValue(SortField.STRING_FIRST);\n        allSortFields.add(sf);\n\n        sf = new SortField(field, SortField.Type.STRING, reversed);\n        sf.setMissingValue(SortField.STRING_LAST);\n        allSortFields.add(sf);\n      }\n    }\n\n    int limit = allSortFields.size();\n    for(int i=0;i<limit;i++) {\n      SortField sf = allSortFields.get(i);\n      if (sf.getType() == SortField.Type.INT) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.INT, sf.getReverse());\n        sf2.setMissingValue(random().nextInt());\n        allSortFields.add(sf2);\n      } else if (sf.getType() == SortField.Type.LONG) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.LONG, sf.getReverse());\n        sf2.setMissingValue(random().nextLong());\n        allSortFields.add(sf2);\n      } else if (sf.getType() == SortField.Type.FLOAT) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.FLOAT, sf.getReverse());\n        sf2.setMissingValue(random().nextFloat());\n        allSortFields.add(sf2);\n      } else if (sf.getType() == SortField.Type.DOUBLE) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.DOUBLE, sf.getReverse());\n        sf2.setMissingValue(random().nextDouble());\n        allSortFields.add(sf2);\n      }\n    }\n\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(200);\n    for (int i = 0; i < numDocs; i++) {\n      List<Field> fields = new ArrayList<>();\n      fields.add(newTextField(\"english\", English.intToEnglish(i), Field.Store.NO));\n      fields.add(newTextField(\"oddeven\", (i % 2 == 0) ? \"even\" : \"odd\", Field.Store.NO));\n      fields.add(newStringField(\"byte\", \"\" + ((byte) random().nextInt()), Field.Store.NO));\n      fields.add(newStringField(\"short\", \"\" + ((short) random().nextInt()), Field.Store.NO));\n      fields.add(new IntField(\"int\", random().nextInt(), Field.Store.NO));\n      fields.add(new LongField(\"long\", random().nextLong(), Field.Store.NO));\n\n      fields.add(new FloatField(\"float\", random().nextFloat(), Field.Store.NO));\n      fields.add(new DoubleField(\"double\", random().nextDouble(), Field.Store.NO));\n      fields.add(newStringField(\"bytes\", TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));\n      fields.add(newStringField(\"bytesval\", TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));\n      fields.add(new DoubleField(\"double\", random().nextDouble(), Field.Store.NO));\n\n      fields.add(new NumericDocValuesField(\"intdocvalues\", random().nextInt()));\n      fields.add(new FloatDocValuesField(\"floatdocvalues\", random().nextFloat()));\n      fields.add(new SortedDocValuesField(\"sortedbytesdocvalues\", new BytesRef(TestUtil.randomRealisticUnicodeString(random()))));\n      fields.add(new SortedDocValuesField(\"sortedbytesdocvaluesval\", new BytesRef(TestUtil.randomRealisticUnicodeString(random()))));\n      fields.add(new BinaryDocValuesField(\"straightbytesdocvalues\", new BytesRef(TestUtil.randomRealisticUnicodeString(random()))));\n\n      Document document = new Document();\n      document.add(new StoredField(\"id\", \"\"+i));\n      if (VERBOSE) {\n        System.out.println(\"  add doc id=\" + i);\n      }\n      for(Field field : fields) {\n        // So we are sometimes missing that field:\n        if (random().nextInt(5) != 4) {\n          document.add(field);\n          if (VERBOSE) {\n            System.out.println(\"    \" + field);\n          }\n        }\n      }\n\n      iw.addDocument(document);\n\n      if (random().nextInt(50) == 17) {\n        iw.commit();\n      }\n    }\n    reader = iw.getReader();\n    iw.close();\n    searcher = newSearcher(reader);\n    if (VERBOSE) {\n      System.out.println(\"  searcher=\" + searcher);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    allSortFields = new ArrayList<SortField>(Arrays.asList(new SortField[] {\n          new SortField(\"int\", SortField.Type.INT, false),\n          new SortField(\"long\", SortField.Type.LONG, false),\n          new SortField(\"float\", SortField.Type.FLOAT, false),\n          new SortField(\"double\", SortField.Type.DOUBLE, false),\n          new SortField(\"bytes\", SortField.Type.STRING, false),\n          new SortField(\"bytesval\", SortField.Type.STRING_VAL, false),\n          new SortField(\"intdocvalues\", SortField.Type.INT, false),\n          new SortField(\"floatdocvalues\", SortField.Type.FLOAT, false),\n          new SortField(\"sortedbytesdocvalues\", SortField.Type.STRING, false),\n          new SortField(\"sortedbytesdocvaluesval\", SortField.Type.STRING_VAL, false),\n          new SortField(\"straightbytesdocvalues\", SortField.Type.STRING_VAL, false),\n          new SortField(\"int\", SortField.Type.INT, true),\n          new SortField(\"long\", SortField.Type.LONG, true),\n          new SortField(\"float\", SortField.Type.FLOAT, true),\n          new SortField(\"double\", SortField.Type.DOUBLE, true),\n          new SortField(\"bytes\", SortField.Type.STRING, true),\n          new SortField(\"bytesval\", SortField.Type.STRING_VAL, true),\n          new SortField(\"intdocvalues\", SortField.Type.INT, true),\n          new SortField(\"floatdocvalues\", SortField.Type.FLOAT, true),\n          new SortField(\"sortedbytesdocvalues\", SortField.Type.STRING, true),\n          new SortField(\"sortedbytesdocvaluesval\", SortField.Type.STRING_VAL, true),\n          new SortField(\"straightbytesdocvalues\", SortField.Type.STRING_VAL, true),\n          SortField.FIELD_SCORE,\n          SortField.FIELD_DOC,\n        }));\n\n    // Also test missing first / last for the \"string\" sorts:\n    for(String field : new String[] {\"bytes\", \"sortedbytesdocvalues\"}) {\n      for(int rev=0;rev<2;rev++) {\n        boolean reversed = rev == 0;\n        SortField sf = new SortField(field, SortField.Type.STRING, reversed);\n        sf.setMissingValue(SortField.STRING_FIRST);\n        allSortFields.add(sf);\n\n        sf = new SortField(field, SortField.Type.STRING, reversed);\n        sf.setMissingValue(SortField.STRING_LAST);\n        allSortFields.add(sf);\n      }\n    }\n\n    int limit = allSortFields.size();\n    for(int i=0;i<limit;i++) {\n      SortField sf = allSortFields.get(i);\n      if (sf.getType() == SortField.Type.INT) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.INT, sf.getReverse());\n        sf2.setMissingValue(random().nextInt());\n        allSortFields.add(sf2);\n      } else if (sf.getType() == SortField.Type.LONG) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.LONG, sf.getReverse());\n        sf2.setMissingValue(random().nextLong());\n        allSortFields.add(sf2);\n      } else if (sf.getType() == SortField.Type.FLOAT) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.FLOAT, sf.getReverse());\n        sf2.setMissingValue(random().nextFloat());\n        allSortFields.add(sf2);\n      } else if (sf.getType() == SortField.Type.DOUBLE) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.DOUBLE, sf.getReverse());\n        sf2.setMissingValue(random().nextDouble());\n        allSortFields.add(sf2);\n      }\n    }\n\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(200);\n    for (int i = 0; i < numDocs; i++) {\n      List<Field> fields = new ArrayList<Field>();\n      fields.add(newTextField(\"english\", English.intToEnglish(i), Field.Store.NO));\n      fields.add(newTextField(\"oddeven\", (i % 2 == 0) ? \"even\" : \"odd\", Field.Store.NO));\n      fields.add(newStringField(\"byte\", \"\" + ((byte) random().nextInt()), Field.Store.NO));\n      fields.add(newStringField(\"short\", \"\" + ((short) random().nextInt()), Field.Store.NO));\n      fields.add(new IntField(\"int\", random().nextInt(), Field.Store.NO));\n      fields.add(new LongField(\"long\", random().nextLong(), Field.Store.NO));\n\n      fields.add(new FloatField(\"float\", random().nextFloat(), Field.Store.NO));\n      fields.add(new DoubleField(\"double\", random().nextDouble(), Field.Store.NO));\n      fields.add(newStringField(\"bytes\", TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));\n      fields.add(newStringField(\"bytesval\", TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));\n      fields.add(new DoubleField(\"double\", random().nextDouble(), Field.Store.NO));\n\n      fields.add(new NumericDocValuesField(\"intdocvalues\", random().nextInt()));\n      fields.add(new FloatDocValuesField(\"floatdocvalues\", random().nextFloat()));\n      fields.add(new SortedDocValuesField(\"sortedbytesdocvalues\", new BytesRef(TestUtil.randomRealisticUnicodeString(random()))));\n      fields.add(new SortedDocValuesField(\"sortedbytesdocvaluesval\", new BytesRef(TestUtil.randomRealisticUnicodeString(random()))));\n      fields.add(new BinaryDocValuesField(\"straightbytesdocvalues\", new BytesRef(TestUtil.randomRealisticUnicodeString(random()))));\n\n      Document document = new Document();\n      document.add(new StoredField(\"id\", \"\"+i));\n      if (VERBOSE) {\n        System.out.println(\"  add doc id=\" + i);\n      }\n      for(Field field : fields) {\n        // So we are sometimes missing that field:\n        if (random().nextInt(5) != 4) {\n          document.add(field);\n          if (VERBOSE) {\n            System.out.println(\"    \" + field);\n          }\n        }\n      }\n\n      iw.addDocument(document);\n\n      if (random().nextInt(50) == 17) {\n        iw.commit();\n      }\n    }\n    reader = iw.getReader();\n    iw.close();\n    searcher = newSearcher(reader);\n    if (VERBOSE) {\n      System.out.println(\"  searcher=\" + searcher);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    allSortFields = new ArrayList<>(Arrays.asList(new SortField[] {\n          new SortField(\"int\", SortField.Type.INT, false),\n          new SortField(\"long\", SortField.Type.LONG, false),\n          new SortField(\"float\", SortField.Type.FLOAT, false),\n          new SortField(\"double\", SortField.Type.DOUBLE, false),\n          new SortField(\"bytes\", SortField.Type.STRING, false),\n          new SortField(\"bytesval\", SortField.Type.STRING_VAL, false),\n          new SortField(\"intdocvalues\", SortField.Type.INT, false),\n          new SortField(\"floatdocvalues\", SortField.Type.FLOAT, false),\n          new SortField(\"sortedbytesdocvalues\", SortField.Type.STRING, false),\n          new SortField(\"sortedbytesdocvaluesval\", SortField.Type.STRING_VAL, false),\n          new SortField(\"straightbytesdocvalues\", SortField.Type.STRING_VAL, false),\n          new SortField(\"int\", SortField.Type.INT, true),\n          new SortField(\"long\", SortField.Type.LONG, true),\n          new SortField(\"float\", SortField.Type.FLOAT, true),\n          new SortField(\"double\", SortField.Type.DOUBLE, true),\n          new SortField(\"bytes\", SortField.Type.STRING, true),\n          new SortField(\"bytesval\", SortField.Type.STRING_VAL, true),\n          new SortField(\"intdocvalues\", SortField.Type.INT, true),\n          new SortField(\"floatdocvalues\", SortField.Type.FLOAT, true),\n          new SortField(\"sortedbytesdocvalues\", SortField.Type.STRING, true),\n          new SortField(\"sortedbytesdocvaluesval\", SortField.Type.STRING_VAL, true),\n          new SortField(\"straightbytesdocvalues\", SortField.Type.STRING_VAL, true),\n          SortField.FIELD_SCORE,\n          SortField.FIELD_DOC,\n        }));\n\n    // Also test missing first / last for the \"string\" sorts:\n    for(String field : new String[] {\"bytes\", \"sortedbytesdocvalues\"}) {\n      for(int rev=0;rev<2;rev++) {\n        boolean reversed = rev == 0;\n        SortField sf = new SortField(field, SortField.Type.STRING, reversed);\n        sf.setMissingValue(SortField.STRING_FIRST);\n        allSortFields.add(sf);\n\n        sf = new SortField(field, SortField.Type.STRING, reversed);\n        sf.setMissingValue(SortField.STRING_LAST);\n        allSortFields.add(sf);\n      }\n    }\n\n    int limit = allSortFields.size();\n    for(int i=0;i<limit;i++) {\n      SortField sf = allSortFields.get(i);\n      if (sf.getType() == SortField.Type.INT) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.INT, sf.getReverse());\n        sf2.setMissingValue(random().nextInt());\n        allSortFields.add(sf2);\n      } else if (sf.getType() == SortField.Type.LONG) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.LONG, sf.getReverse());\n        sf2.setMissingValue(random().nextLong());\n        allSortFields.add(sf2);\n      } else if (sf.getType() == SortField.Type.FLOAT) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.FLOAT, sf.getReverse());\n        sf2.setMissingValue(random().nextFloat());\n        allSortFields.add(sf2);\n      } else if (sf.getType() == SortField.Type.DOUBLE) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.DOUBLE, sf.getReverse());\n        sf2.setMissingValue(random().nextDouble());\n        allSortFields.add(sf2);\n      }\n    }\n\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(200);\n    for (int i = 0; i < numDocs; i++) {\n      List<Field> fields = new ArrayList<>();\n      fields.add(newTextField(\"english\", English.intToEnglish(i), Field.Store.NO));\n      fields.add(newTextField(\"oddeven\", (i % 2 == 0) ? \"even\" : \"odd\", Field.Store.NO));\n      fields.add(newStringField(\"byte\", \"\" + ((byte) random().nextInt()), Field.Store.NO));\n      fields.add(newStringField(\"short\", \"\" + ((short) random().nextInt()), Field.Store.NO));\n      fields.add(new IntField(\"int\", random().nextInt(), Field.Store.NO));\n      fields.add(new LongField(\"long\", random().nextLong(), Field.Store.NO));\n\n      fields.add(new FloatField(\"float\", random().nextFloat(), Field.Store.NO));\n      fields.add(new DoubleField(\"double\", random().nextDouble(), Field.Store.NO));\n      fields.add(newStringField(\"bytes\", TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));\n      fields.add(newStringField(\"bytesval\", TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));\n      fields.add(new DoubleField(\"double\", random().nextDouble(), Field.Store.NO));\n\n      fields.add(new NumericDocValuesField(\"intdocvalues\", random().nextInt()));\n      fields.add(new FloatDocValuesField(\"floatdocvalues\", random().nextFloat()));\n      fields.add(new SortedDocValuesField(\"sortedbytesdocvalues\", new BytesRef(TestUtil.randomRealisticUnicodeString(random()))));\n      fields.add(new SortedDocValuesField(\"sortedbytesdocvaluesval\", new BytesRef(TestUtil.randomRealisticUnicodeString(random()))));\n      fields.add(new BinaryDocValuesField(\"straightbytesdocvalues\", new BytesRef(TestUtil.randomRealisticUnicodeString(random()))));\n\n      Document document = new Document();\n      document.add(new StoredField(\"id\", \"\"+i));\n      if (VERBOSE) {\n        System.out.println(\"  add doc id=\" + i);\n      }\n      for(Field field : fields) {\n        // So we are sometimes missing that field:\n        if (random().nextInt(5) != 4) {\n          document.add(field);\n          if (VERBOSE) {\n            System.out.println(\"    \" + field);\n          }\n        }\n      }\n\n      iw.addDocument(document);\n\n      if (random().nextInt(50) == 17) {\n        iw.commit();\n      }\n    }\n    reader = iw.getReader();\n    iw.shutdown();\n    searcher = newSearcher(reader);\n    if (VERBOSE) {\n      System.out.println(\"  searcher=\" + searcher);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    allSortFields = new ArrayList<>(Arrays.asList(new SortField[] {\n          new SortField(\"int\", SortField.Type.INT, false),\n          new SortField(\"long\", SortField.Type.LONG, false),\n          new SortField(\"float\", SortField.Type.FLOAT, false),\n          new SortField(\"double\", SortField.Type.DOUBLE, false),\n          new SortField(\"bytes\", SortField.Type.STRING, false),\n          new SortField(\"bytesval\", SortField.Type.STRING_VAL, false),\n          new SortField(\"intdocvalues\", SortField.Type.INT, false),\n          new SortField(\"floatdocvalues\", SortField.Type.FLOAT, false),\n          new SortField(\"sortedbytesdocvalues\", SortField.Type.STRING, false),\n          new SortField(\"sortedbytesdocvaluesval\", SortField.Type.STRING_VAL, false),\n          new SortField(\"straightbytesdocvalues\", SortField.Type.STRING_VAL, false),\n          new SortField(\"int\", SortField.Type.INT, true),\n          new SortField(\"long\", SortField.Type.LONG, true),\n          new SortField(\"float\", SortField.Type.FLOAT, true),\n          new SortField(\"double\", SortField.Type.DOUBLE, true),\n          new SortField(\"bytes\", SortField.Type.STRING, true),\n          new SortField(\"bytesval\", SortField.Type.STRING_VAL, true),\n          new SortField(\"intdocvalues\", SortField.Type.INT, true),\n          new SortField(\"floatdocvalues\", SortField.Type.FLOAT, true),\n          new SortField(\"sortedbytesdocvalues\", SortField.Type.STRING, true),\n          new SortField(\"sortedbytesdocvaluesval\", SortField.Type.STRING_VAL, true),\n          new SortField(\"straightbytesdocvalues\", SortField.Type.STRING_VAL, true),\n          SortField.FIELD_SCORE,\n          SortField.FIELD_DOC,\n        }));\n\n    // Also test missing first / last for the \"string\" sorts:\n    for(String field : new String[] {\"bytes\", \"sortedbytesdocvalues\"}) {\n      for(int rev=0;rev<2;rev++) {\n        boolean reversed = rev == 0;\n        SortField sf = new SortField(field, SortField.Type.STRING, reversed);\n        sf.setMissingValue(SortField.STRING_FIRST);\n        allSortFields.add(sf);\n\n        sf = new SortField(field, SortField.Type.STRING, reversed);\n        sf.setMissingValue(SortField.STRING_LAST);\n        allSortFields.add(sf);\n      }\n    }\n\n    int limit = allSortFields.size();\n    for(int i=0;i<limit;i++) {\n      SortField sf = allSortFields.get(i);\n      if (sf.getType() == SortField.Type.INT) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.INT, sf.getReverse());\n        sf2.setMissingValue(random().nextInt());\n        allSortFields.add(sf2);\n      } else if (sf.getType() == SortField.Type.LONG) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.LONG, sf.getReverse());\n        sf2.setMissingValue(random().nextLong());\n        allSortFields.add(sf2);\n      } else if (sf.getType() == SortField.Type.FLOAT) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.FLOAT, sf.getReverse());\n        sf2.setMissingValue(random().nextFloat());\n        allSortFields.add(sf2);\n      } else if (sf.getType() == SortField.Type.DOUBLE) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.DOUBLE, sf.getReverse());\n        sf2.setMissingValue(random().nextDouble());\n        allSortFields.add(sf2);\n      }\n    }\n\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(200);\n    for (int i = 0; i < numDocs; i++) {\n      List<Field> fields = new ArrayList<>();\n      fields.add(newTextField(\"english\", English.intToEnglish(i), Field.Store.NO));\n      fields.add(newTextField(\"oddeven\", (i % 2 == 0) ? \"even\" : \"odd\", Field.Store.NO));\n      fields.add(newStringField(\"byte\", \"\" + ((byte) random().nextInt()), Field.Store.NO));\n      fields.add(newStringField(\"short\", \"\" + ((short) random().nextInt()), Field.Store.NO));\n      fields.add(new IntField(\"int\", random().nextInt(), Field.Store.NO));\n      fields.add(new LongField(\"long\", random().nextLong(), Field.Store.NO));\n\n      fields.add(new FloatField(\"float\", random().nextFloat(), Field.Store.NO));\n      fields.add(new DoubleField(\"double\", random().nextDouble(), Field.Store.NO));\n      fields.add(newStringField(\"bytes\", TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));\n      fields.add(newStringField(\"bytesval\", TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));\n      fields.add(new DoubleField(\"double\", random().nextDouble(), Field.Store.NO));\n\n      fields.add(new NumericDocValuesField(\"intdocvalues\", random().nextInt()));\n      fields.add(new FloatDocValuesField(\"floatdocvalues\", random().nextFloat()));\n      fields.add(new SortedDocValuesField(\"sortedbytesdocvalues\", new BytesRef(TestUtil.randomRealisticUnicodeString(random()))));\n      fields.add(new SortedDocValuesField(\"sortedbytesdocvaluesval\", new BytesRef(TestUtil.randomRealisticUnicodeString(random()))));\n      fields.add(new BinaryDocValuesField(\"straightbytesdocvalues\", new BytesRef(TestUtil.randomRealisticUnicodeString(random()))));\n\n      Document document = new Document();\n      document.add(new StoredField(\"id\", \"\"+i));\n      if (VERBOSE) {\n        System.out.println(\"  add doc id=\" + i);\n      }\n      for(Field field : fields) {\n        // So we are sometimes missing that field:\n        if (random().nextInt(5) != 4) {\n          document.add(field);\n          if (VERBOSE) {\n            System.out.println(\"    \" + field);\n          }\n        }\n      }\n\n      iw.addDocument(document);\n\n      if (random().nextInt(50) == 17) {\n        iw.commit();\n      }\n    }\n    reader = iw.getReader();\n    iw.close();\n    searcher = newSearcher(reader);\n    if (VERBOSE) {\n      System.out.println(\"  searcher=\" + searcher);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"400558e34d57baf6a8e8c42d60fc1a87b5acb596","date":1405940665,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    allSortFields = new ArrayList<>(Arrays.asList(new SortField[] {\n          new SortField(\"int\", SortField.Type.INT, false),\n          new SortField(\"long\", SortField.Type.LONG, false),\n          new SortField(\"float\", SortField.Type.FLOAT, false),\n          new SortField(\"double\", SortField.Type.DOUBLE, false),\n          new SortField(\"bytes\", SortField.Type.STRING, false),\n          new SortField(\"bytesval\", SortField.Type.STRING_VAL, false),\n          new SortField(\"intdocvalues\", SortField.Type.INT, false),\n          new SortField(\"floatdocvalues\", SortField.Type.FLOAT, false),\n          new SortField(\"sortedbytesdocvalues\", SortField.Type.STRING, false),\n          new SortField(\"sortedbytesdocvaluesval\", SortField.Type.STRING_VAL, false),\n          new SortField(\"straightbytesdocvalues\", SortField.Type.STRING_VAL, false),\n          new SortField(\"int\", SortField.Type.INT, true),\n          new SortField(\"long\", SortField.Type.LONG, true),\n          new SortField(\"float\", SortField.Type.FLOAT, true),\n          new SortField(\"double\", SortField.Type.DOUBLE, true),\n          new SortField(\"bytes\", SortField.Type.STRING, true),\n          new SortField(\"bytesval\", SortField.Type.STRING_VAL, true),\n          new SortField(\"intdocvalues\", SortField.Type.INT, true),\n          new SortField(\"floatdocvalues\", SortField.Type.FLOAT, true),\n          new SortField(\"sortedbytesdocvalues\", SortField.Type.STRING, true),\n          new SortField(\"sortedbytesdocvaluesval\", SortField.Type.STRING_VAL, true),\n          new SortField(\"straightbytesdocvalues\", SortField.Type.STRING_VAL, true),\n          SortField.FIELD_SCORE,\n          SortField.FIELD_DOC,\n        }));\n\n    // Also test missing first / last for the \"string\" sorts:\n    for(String field : new String[] {\"bytes\", \"sortedbytesdocvalues\"}) {\n      for(int rev=0;rev<2;rev++) {\n        boolean reversed = rev == 0;\n        SortField sf = new SortField(field, SortField.Type.STRING, reversed);\n        sf.setMissingValue(SortField.STRING_FIRST);\n        allSortFields.add(sf);\n\n        sf = new SortField(field, SortField.Type.STRING, reversed);\n        sf.setMissingValue(SortField.STRING_LAST);\n        allSortFields.add(sf);\n      }\n    }\n\n    // Also test missing first / last for the \"string_val\" sorts:\n    for(String field : new String[] {\"sortedbytesdocvaluesval\", \"straightbytesdocvalues\"}) {\n      for(int rev=0;rev<2;rev++) {\n        boolean reversed = rev == 0;\n        SortField sf = new SortField(field, SortField.Type.STRING_VAL, reversed);\n        sf.setMissingValue(SortField.STRING_FIRST);\n        allSortFields.add(sf);\n\n        sf = new SortField(field, SortField.Type.STRING_VAL, reversed);\n        sf.setMissingValue(SortField.STRING_LAST);\n        allSortFields.add(sf);\n      }\n    }\n\n    int limit = allSortFields.size();\n    for(int i=0;i<limit;i++) {\n      SortField sf = allSortFields.get(i);\n      if (sf.getType() == SortField.Type.INT) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.INT, sf.getReverse());\n        sf2.setMissingValue(random().nextInt());\n        allSortFields.add(sf2);\n      } else if (sf.getType() == SortField.Type.LONG) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.LONG, sf.getReverse());\n        sf2.setMissingValue(random().nextLong());\n        allSortFields.add(sf2);\n      } else if (sf.getType() == SortField.Type.FLOAT) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.FLOAT, sf.getReverse());\n        sf2.setMissingValue(random().nextFloat());\n        allSortFields.add(sf2);\n      } else if (sf.getType() == SortField.Type.DOUBLE) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.DOUBLE, sf.getReverse());\n        sf2.setMissingValue(random().nextDouble());\n        allSortFields.add(sf2);\n      }\n    }\n\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(200);\n    for (int i = 0; i < numDocs; i++) {\n      List<Field> fields = new ArrayList<>();\n      fields.add(newTextField(\"english\", English.intToEnglish(i), Field.Store.NO));\n      fields.add(newTextField(\"oddeven\", (i % 2 == 0) ? \"even\" : \"odd\", Field.Store.NO));\n      fields.add(newStringField(\"byte\", \"\" + ((byte) random().nextInt()), Field.Store.NO));\n      fields.add(newStringField(\"short\", \"\" + ((short) random().nextInt()), Field.Store.NO));\n      fields.add(new IntField(\"int\", random().nextInt(), Field.Store.NO));\n      fields.add(new LongField(\"long\", random().nextLong(), Field.Store.NO));\n\n      fields.add(new FloatField(\"float\", random().nextFloat(), Field.Store.NO));\n      fields.add(new DoubleField(\"double\", random().nextDouble(), Field.Store.NO));\n      fields.add(newStringField(\"bytes\", TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));\n      fields.add(newStringField(\"bytesval\", TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));\n      fields.add(new DoubleField(\"double\", random().nextDouble(), Field.Store.NO));\n\n      fields.add(new NumericDocValuesField(\"intdocvalues\", random().nextInt()));\n      fields.add(new FloatDocValuesField(\"floatdocvalues\", random().nextFloat()));\n      fields.add(new SortedDocValuesField(\"sortedbytesdocvalues\", new BytesRef(TestUtil.randomRealisticUnicodeString(random()))));\n      fields.add(new SortedDocValuesField(\"sortedbytesdocvaluesval\", new BytesRef(TestUtil.randomRealisticUnicodeString(random()))));\n      fields.add(new BinaryDocValuesField(\"straightbytesdocvalues\", new BytesRef(TestUtil.randomRealisticUnicodeString(random()))));\n\n      Document document = new Document();\n      document.add(new StoredField(\"id\", \"\"+i));\n      if (VERBOSE) {\n        System.out.println(\"  add doc id=\" + i);\n      }\n      for(Field field : fields) {\n        // So we are sometimes missing that field:\n        if (random().nextInt(5) != 4) {\n          document.add(field);\n          if (VERBOSE) {\n            System.out.println(\"    \" + field);\n          }\n        }\n      }\n\n      iw.addDocument(document);\n\n      if (random().nextInt(50) == 17) {\n        iw.commit();\n      }\n    }\n    reader = iw.getReader();\n    iw.shutdown();\n    searcher = newSearcher(reader);\n    if (VERBOSE) {\n      System.out.println(\"  searcher=\" + searcher);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    allSortFields = new ArrayList<>(Arrays.asList(new SortField[] {\n          new SortField(\"int\", SortField.Type.INT, false),\n          new SortField(\"long\", SortField.Type.LONG, false),\n          new SortField(\"float\", SortField.Type.FLOAT, false),\n          new SortField(\"double\", SortField.Type.DOUBLE, false),\n          new SortField(\"bytes\", SortField.Type.STRING, false),\n          new SortField(\"bytesval\", SortField.Type.STRING_VAL, false),\n          new SortField(\"intdocvalues\", SortField.Type.INT, false),\n          new SortField(\"floatdocvalues\", SortField.Type.FLOAT, false),\n          new SortField(\"sortedbytesdocvalues\", SortField.Type.STRING, false),\n          new SortField(\"sortedbytesdocvaluesval\", SortField.Type.STRING_VAL, false),\n          new SortField(\"straightbytesdocvalues\", SortField.Type.STRING_VAL, false),\n          new SortField(\"int\", SortField.Type.INT, true),\n          new SortField(\"long\", SortField.Type.LONG, true),\n          new SortField(\"float\", SortField.Type.FLOAT, true),\n          new SortField(\"double\", SortField.Type.DOUBLE, true),\n          new SortField(\"bytes\", SortField.Type.STRING, true),\n          new SortField(\"bytesval\", SortField.Type.STRING_VAL, true),\n          new SortField(\"intdocvalues\", SortField.Type.INT, true),\n          new SortField(\"floatdocvalues\", SortField.Type.FLOAT, true),\n          new SortField(\"sortedbytesdocvalues\", SortField.Type.STRING, true),\n          new SortField(\"sortedbytesdocvaluesval\", SortField.Type.STRING_VAL, true),\n          new SortField(\"straightbytesdocvalues\", SortField.Type.STRING_VAL, true),\n          SortField.FIELD_SCORE,\n          SortField.FIELD_DOC,\n        }));\n\n    // Also test missing first / last for the \"string\" sorts:\n    for(String field : new String[] {\"bytes\", \"sortedbytesdocvalues\"}) {\n      for(int rev=0;rev<2;rev++) {\n        boolean reversed = rev == 0;\n        SortField sf = new SortField(field, SortField.Type.STRING, reversed);\n        sf.setMissingValue(SortField.STRING_FIRST);\n        allSortFields.add(sf);\n\n        sf = new SortField(field, SortField.Type.STRING, reversed);\n        sf.setMissingValue(SortField.STRING_LAST);\n        allSortFields.add(sf);\n      }\n    }\n\n    int limit = allSortFields.size();\n    for(int i=0;i<limit;i++) {\n      SortField sf = allSortFields.get(i);\n      if (sf.getType() == SortField.Type.INT) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.INT, sf.getReverse());\n        sf2.setMissingValue(random().nextInt());\n        allSortFields.add(sf2);\n      } else if (sf.getType() == SortField.Type.LONG) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.LONG, sf.getReverse());\n        sf2.setMissingValue(random().nextLong());\n        allSortFields.add(sf2);\n      } else if (sf.getType() == SortField.Type.FLOAT) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.FLOAT, sf.getReverse());\n        sf2.setMissingValue(random().nextFloat());\n        allSortFields.add(sf2);\n      } else if (sf.getType() == SortField.Type.DOUBLE) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.DOUBLE, sf.getReverse());\n        sf2.setMissingValue(random().nextDouble());\n        allSortFields.add(sf2);\n      }\n    }\n\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(200);\n    for (int i = 0; i < numDocs; i++) {\n      List<Field> fields = new ArrayList<>();\n      fields.add(newTextField(\"english\", English.intToEnglish(i), Field.Store.NO));\n      fields.add(newTextField(\"oddeven\", (i % 2 == 0) ? \"even\" : \"odd\", Field.Store.NO));\n      fields.add(newStringField(\"byte\", \"\" + ((byte) random().nextInt()), Field.Store.NO));\n      fields.add(newStringField(\"short\", \"\" + ((short) random().nextInt()), Field.Store.NO));\n      fields.add(new IntField(\"int\", random().nextInt(), Field.Store.NO));\n      fields.add(new LongField(\"long\", random().nextLong(), Field.Store.NO));\n\n      fields.add(new FloatField(\"float\", random().nextFloat(), Field.Store.NO));\n      fields.add(new DoubleField(\"double\", random().nextDouble(), Field.Store.NO));\n      fields.add(newStringField(\"bytes\", TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));\n      fields.add(newStringField(\"bytesval\", TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));\n      fields.add(new DoubleField(\"double\", random().nextDouble(), Field.Store.NO));\n\n      fields.add(new NumericDocValuesField(\"intdocvalues\", random().nextInt()));\n      fields.add(new FloatDocValuesField(\"floatdocvalues\", random().nextFloat()));\n      fields.add(new SortedDocValuesField(\"sortedbytesdocvalues\", new BytesRef(TestUtil.randomRealisticUnicodeString(random()))));\n      fields.add(new SortedDocValuesField(\"sortedbytesdocvaluesval\", new BytesRef(TestUtil.randomRealisticUnicodeString(random()))));\n      fields.add(new BinaryDocValuesField(\"straightbytesdocvalues\", new BytesRef(TestUtil.randomRealisticUnicodeString(random()))));\n\n      Document document = new Document();\n      document.add(new StoredField(\"id\", \"\"+i));\n      if (VERBOSE) {\n        System.out.println(\"  add doc id=\" + i);\n      }\n      for(Field field : fields) {\n        // So we are sometimes missing that field:\n        if (random().nextInt(5) != 4) {\n          document.add(field);\n          if (VERBOSE) {\n            System.out.println(\"    \" + field);\n          }\n        }\n      }\n\n      iw.addDocument(document);\n\n      if (random().nextInt(50) == 17) {\n        iw.commit();\n      }\n    }\n    reader = iw.getReader();\n    iw.shutdown();\n    searcher = newSearcher(reader);\n    if (VERBOSE) {\n      System.out.println(\"  searcher=\" + searcher);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    allSortFields = new ArrayList<>(Arrays.asList(new SortField[] {\n          new SortField(\"int\", SortField.Type.INT, false),\n          new SortField(\"long\", SortField.Type.LONG, false),\n          new SortField(\"float\", SortField.Type.FLOAT, false),\n          new SortField(\"double\", SortField.Type.DOUBLE, false),\n          new SortField(\"bytes\", SortField.Type.STRING, false),\n          new SortField(\"bytesval\", SortField.Type.STRING_VAL, false),\n          new SortField(\"intdocvalues\", SortField.Type.INT, false),\n          new SortField(\"floatdocvalues\", SortField.Type.FLOAT, false),\n          new SortField(\"sortedbytesdocvalues\", SortField.Type.STRING, false),\n          new SortField(\"sortedbytesdocvaluesval\", SortField.Type.STRING_VAL, false),\n          new SortField(\"straightbytesdocvalues\", SortField.Type.STRING_VAL, false),\n          new SortField(\"int\", SortField.Type.INT, true),\n          new SortField(\"long\", SortField.Type.LONG, true),\n          new SortField(\"float\", SortField.Type.FLOAT, true),\n          new SortField(\"double\", SortField.Type.DOUBLE, true),\n          new SortField(\"bytes\", SortField.Type.STRING, true),\n          new SortField(\"bytesval\", SortField.Type.STRING_VAL, true),\n          new SortField(\"intdocvalues\", SortField.Type.INT, true),\n          new SortField(\"floatdocvalues\", SortField.Type.FLOAT, true),\n          new SortField(\"sortedbytesdocvalues\", SortField.Type.STRING, true),\n          new SortField(\"sortedbytesdocvaluesval\", SortField.Type.STRING_VAL, true),\n          new SortField(\"straightbytesdocvalues\", SortField.Type.STRING_VAL, true),\n          SortField.FIELD_SCORE,\n          SortField.FIELD_DOC,\n        }));\n\n    // Also test missing first / last for the \"string\" sorts:\n    for(String field : new String[] {\"bytes\", \"sortedbytesdocvalues\"}) {\n      for(int rev=0;rev<2;rev++) {\n        boolean reversed = rev == 0;\n        SortField sf = new SortField(field, SortField.Type.STRING, reversed);\n        sf.setMissingValue(SortField.STRING_FIRST);\n        allSortFields.add(sf);\n\n        sf = new SortField(field, SortField.Type.STRING, reversed);\n        sf.setMissingValue(SortField.STRING_LAST);\n        allSortFields.add(sf);\n      }\n    }\n\n    // Also test missing first / last for the \"string_val\" sorts:\n    for(String field : new String[] {\"sortedbytesdocvaluesval\", \"straightbytesdocvalues\"}) {\n      for(int rev=0;rev<2;rev++) {\n        boolean reversed = rev == 0;\n        SortField sf = new SortField(field, SortField.Type.STRING_VAL, reversed);\n        sf.setMissingValue(SortField.STRING_FIRST);\n        allSortFields.add(sf);\n\n        sf = new SortField(field, SortField.Type.STRING_VAL, reversed);\n        sf.setMissingValue(SortField.STRING_LAST);\n        allSortFields.add(sf);\n      }\n    }\n\n    int limit = allSortFields.size();\n    for(int i=0;i<limit;i++) {\n      SortField sf = allSortFields.get(i);\n      if (sf.getType() == SortField.Type.INT) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.INT, sf.getReverse());\n        sf2.setMissingValue(random().nextInt());\n        allSortFields.add(sf2);\n      } else if (sf.getType() == SortField.Type.LONG) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.LONG, sf.getReverse());\n        sf2.setMissingValue(random().nextLong());\n        allSortFields.add(sf2);\n      } else if (sf.getType() == SortField.Type.FLOAT) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.FLOAT, sf.getReverse());\n        sf2.setMissingValue(random().nextFloat());\n        allSortFields.add(sf2);\n      } else if (sf.getType() == SortField.Type.DOUBLE) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.DOUBLE, sf.getReverse());\n        sf2.setMissingValue(random().nextDouble());\n        allSortFields.add(sf2);\n      }\n    }\n\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(200);\n    for (int i = 0; i < numDocs; i++) {\n      List<Field> fields = new ArrayList<>();\n      fields.add(newTextField(\"english\", English.intToEnglish(i), Field.Store.NO));\n      fields.add(newTextField(\"oddeven\", (i % 2 == 0) ? \"even\" : \"odd\", Field.Store.NO));\n      fields.add(newStringField(\"byte\", \"\" + ((byte) random().nextInt()), Field.Store.NO));\n      fields.add(newStringField(\"short\", \"\" + ((short) random().nextInt()), Field.Store.NO));\n      fields.add(new IntField(\"int\", random().nextInt(), Field.Store.NO));\n      fields.add(new LongField(\"long\", random().nextLong(), Field.Store.NO));\n\n      fields.add(new FloatField(\"float\", random().nextFloat(), Field.Store.NO));\n      fields.add(new DoubleField(\"double\", random().nextDouble(), Field.Store.NO));\n      fields.add(newStringField(\"bytes\", TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));\n      fields.add(newStringField(\"bytesval\", TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));\n      fields.add(new DoubleField(\"double\", random().nextDouble(), Field.Store.NO));\n\n      fields.add(new NumericDocValuesField(\"intdocvalues\", random().nextInt()));\n      fields.add(new FloatDocValuesField(\"floatdocvalues\", random().nextFloat()));\n      fields.add(new SortedDocValuesField(\"sortedbytesdocvalues\", new BytesRef(TestUtil.randomRealisticUnicodeString(random()))));\n      fields.add(new SortedDocValuesField(\"sortedbytesdocvaluesval\", new BytesRef(TestUtil.randomRealisticUnicodeString(random()))));\n      fields.add(new BinaryDocValuesField(\"straightbytesdocvalues\", new BytesRef(TestUtil.randomRealisticUnicodeString(random()))));\n\n      Document document = new Document();\n      document.add(new StoredField(\"id\", \"\"+i));\n      if (VERBOSE) {\n        System.out.println(\"  add doc id=\" + i);\n      }\n      for(Field field : fields) {\n        // So we are sometimes missing that field:\n        if (random().nextInt(5) != 4) {\n          document.add(field);\n          if (VERBOSE) {\n            System.out.println(\"    \" + field);\n          }\n        }\n      }\n\n      iw.addDocument(document);\n\n      if (random().nextInt(50) == 17) {\n        iw.commit();\n      }\n    }\n    reader = iw.getReader();\n    iw.close();\n    searcher = newSearcher(reader);\n    if (VERBOSE) {\n      System.out.println(\"  searcher=\" + searcher);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    allSortFields = new ArrayList<>(Arrays.asList(new SortField[] {\n          new SortField(\"int\", SortField.Type.INT, false),\n          new SortField(\"long\", SortField.Type.LONG, false),\n          new SortField(\"float\", SortField.Type.FLOAT, false),\n          new SortField(\"double\", SortField.Type.DOUBLE, false),\n          new SortField(\"bytes\", SortField.Type.STRING, false),\n          new SortField(\"bytesval\", SortField.Type.STRING_VAL, false),\n          new SortField(\"intdocvalues\", SortField.Type.INT, false),\n          new SortField(\"floatdocvalues\", SortField.Type.FLOAT, false),\n          new SortField(\"sortedbytesdocvalues\", SortField.Type.STRING, false),\n          new SortField(\"sortedbytesdocvaluesval\", SortField.Type.STRING_VAL, false),\n          new SortField(\"straightbytesdocvalues\", SortField.Type.STRING_VAL, false),\n          new SortField(\"int\", SortField.Type.INT, true),\n          new SortField(\"long\", SortField.Type.LONG, true),\n          new SortField(\"float\", SortField.Type.FLOAT, true),\n          new SortField(\"double\", SortField.Type.DOUBLE, true),\n          new SortField(\"bytes\", SortField.Type.STRING, true),\n          new SortField(\"bytesval\", SortField.Type.STRING_VAL, true),\n          new SortField(\"intdocvalues\", SortField.Type.INT, true),\n          new SortField(\"floatdocvalues\", SortField.Type.FLOAT, true),\n          new SortField(\"sortedbytesdocvalues\", SortField.Type.STRING, true),\n          new SortField(\"sortedbytesdocvaluesval\", SortField.Type.STRING_VAL, true),\n          new SortField(\"straightbytesdocvalues\", SortField.Type.STRING_VAL, true),\n          SortField.FIELD_SCORE,\n          SortField.FIELD_DOC,\n        }));\n\n    // Also test missing first / last for the \"string\" sorts:\n    for(String field : new String[] {\"bytes\", \"sortedbytesdocvalues\"}) {\n      for(int rev=0;rev<2;rev++) {\n        boolean reversed = rev == 0;\n        SortField sf = new SortField(field, SortField.Type.STRING, reversed);\n        sf.setMissingValue(SortField.STRING_FIRST);\n        allSortFields.add(sf);\n\n        sf = new SortField(field, SortField.Type.STRING, reversed);\n        sf.setMissingValue(SortField.STRING_LAST);\n        allSortFields.add(sf);\n      }\n    }\n\n    // Also test missing first / last for the \"string_val\" sorts:\n    for(String field : new String[] {\"sortedbytesdocvaluesval\", \"straightbytesdocvalues\"}) {\n      for(int rev=0;rev<2;rev++) {\n        boolean reversed = rev == 0;\n        SortField sf = new SortField(field, SortField.Type.STRING_VAL, reversed);\n        sf.setMissingValue(SortField.STRING_FIRST);\n        allSortFields.add(sf);\n\n        sf = new SortField(field, SortField.Type.STRING_VAL, reversed);\n        sf.setMissingValue(SortField.STRING_LAST);\n        allSortFields.add(sf);\n      }\n    }\n\n    int limit = allSortFields.size();\n    for(int i=0;i<limit;i++) {\n      SortField sf = allSortFields.get(i);\n      if (sf.getType() == SortField.Type.INT) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.INT, sf.getReverse());\n        sf2.setMissingValue(random().nextInt());\n        allSortFields.add(sf2);\n      } else if (sf.getType() == SortField.Type.LONG) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.LONG, sf.getReverse());\n        sf2.setMissingValue(random().nextLong());\n        allSortFields.add(sf2);\n      } else if (sf.getType() == SortField.Type.FLOAT) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.FLOAT, sf.getReverse());\n        sf2.setMissingValue(random().nextFloat());\n        allSortFields.add(sf2);\n      } else if (sf.getType() == SortField.Type.DOUBLE) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.DOUBLE, sf.getReverse());\n        sf2.setMissingValue(random().nextDouble());\n        allSortFields.add(sf2);\n      }\n    }\n\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(200);\n    for (int i = 0; i < numDocs; i++) {\n      List<Field> fields = new ArrayList<>();\n      fields.add(newTextField(\"english\", English.intToEnglish(i), Field.Store.NO));\n      fields.add(newTextField(\"oddeven\", (i % 2 == 0) ? \"even\" : \"odd\", Field.Store.NO));\n      fields.add(newStringField(\"byte\", \"\" + ((byte) random().nextInt()), Field.Store.NO));\n      fields.add(newStringField(\"short\", \"\" + ((short) random().nextInt()), Field.Store.NO));\n      fields.add(new IntField(\"int\", random().nextInt(), Field.Store.NO));\n      fields.add(new LongField(\"long\", random().nextLong(), Field.Store.NO));\n\n      fields.add(new FloatField(\"float\", random().nextFloat(), Field.Store.NO));\n      fields.add(new DoubleField(\"double\", random().nextDouble(), Field.Store.NO));\n      fields.add(newStringField(\"bytes\", TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));\n      fields.add(newStringField(\"bytesval\", TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));\n      fields.add(new DoubleField(\"double\", random().nextDouble(), Field.Store.NO));\n\n      fields.add(new NumericDocValuesField(\"intdocvalues\", random().nextInt()));\n      fields.add(new FloatDocValuesField(\"floatdocvalues\", random().nextFloat()));\n      fields.add(new SortedDocValuesField(\"sortedbytesdocvalues\", new BytesRef(TestUtil.randomRealisticUnicodeString(random()))));\n      fields.add(new SortedDocValuesField(\"sortedbytesdocvaluesval\", new BytesRef(TestUtil.randomRealisticUnicodeString(random()))));\n      fields.add(new BinaryDocValuesField(\"straightbytesdocvalues\", new BytesRef(TestUtil.randomRealisticUnicodeString(random()))));\n\n      Document document = new Document();\n      document.add(new StoredField(\"id\", \"\"+i));\n      if (VERBOSE) {\n        System.out.println(\"  add doc id=\" + i);\n      }\n      for(Field field : fields) {\n        // So we are sometimes missing that field:\n        if (random().nextInt(5) != 4) {\n          document.add(field);\n          if (VERBOSE) {\n            System.out.println(\"    \" + field);\n          }\n        }\n      }\n\n      iw.addDocument(document);\n\n      if (random().nextInt(50) == 17) {\n        iw.commit();\n      }\n    }\n    reader = iw.getReader();\n    iw.shutdown();\n    searcher = newSearcher(reader);\n    if (VERBOSE) {\n      System.out.println(\"  searcher=\" + searcher);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c","date":1416362965,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    allSortFields = new ArrayList<>(Arrays.asList(new SortField[] {\n          new SortField(\"int\", SortField.Type.INT, false),\n          new SortField(\"long\", SortField.Type.LONG, false),\n          new SortField(\"float\", SortField.Type.FLOAT, false),\n          new SortField(\"double\", SortField.Type.DOUBLE, false),\n          new SortField(\"bytes\", SortField.Type.STRING, false),\n          new SortField(\"bytesval\", SortField.Type.STRING_VAL, false),\n          new SortField(\"int\", SortField.Type.INT, true),\n          new SortField(\"long\", SortField.Type.LONG, true),\n          new SortField(\"float\", SortField.Type.FLOAT, true),\n          new SortField(\"double\", SortField.Type.DOUBLE, true),\n          new SortField(\"bytes\", SortField.Type.STRING, true),\n          new SortField(\"bytesval\", SortField.Type.STRING_VAL, true),\n          SortField.FIELD_SCORE,\n          SortField.FIELD_DOC,\n        }));\n\n    // Also test missing first / last for the \"string\" sorts:\n    for(String field : new String[] {\"bytes\", \"sortedbytesdocvalues\"}) {\n      for(int rev=0;rev<2;rev++) {\n        boolean reversed = rev == 0;\n        SortField sf = new SortField(field, SortField.Type.STRING, reversed);\n        sf.setMissingValue(SortField.STRING_FIRST);\n        allSortFields.add(sf);\n\n        sf = new SortField(field, SortField.Type.STRING, reversed);\n        sf.setMissingValue(SortField.STRING_LAST);\n        allSortFields.add(sf);\n      }\n    }\n\n    // Also test missing first / last for the \"string_val\" sorts:\n    for(String field : new String[] {\"sortedbytesdocvaluesval\", \"straightbytesdocvalues\"}) {\n      for(int rev=0;rev<2;rev++) {\n        boolean reversed = rev == 0;\n        SortField sf = new SortField(field, SortField.Type.STRING_VAL, reversed);\n        sf.setMissingValue(SortField.STRING_FIRST);\n        allSortFields.add(sf);\n\n        sf = new SortField(field, SortField.Type.STRING_VAL, reversed);\n        sf.setMissingValue(SortField.STRING_LAST);\n        allSortFields.add(sf);\n      }\n    }\n\n    int limit = allSortFields.size();\n    for(int i=0;i<limit;i++) {\n      SortField sf = allSortFields.get(i);\n      if (sf.getType() == SortField.Type.INT) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.INT, sf.getReverse());\n        sf2.setMissingValue(random().nextInt());\n        allSortFields.add(sf2);\n      } else if (sf.getType() == SortField.Type.LONG) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.LONG, sf.getReverse());\n        sf2.setMissingValue(random().nextLong());\n        allSortFields.add(sf2);\n      } else if (sf.getType() == SortField.Type.FLOAT) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.FLOAT, sf.getReverse());\n        sf2.setMissingValue(random().nextFloat());\n        allSortFields.add(sf2);\n      } else if (sf.getType() == SortField.Type.DOUBLE) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.DOUBLE, sf.getReverse());\n        sf2.setMissingValue(random().nextDouble());\n        allSortFields.add(sf2);\n      }\n    }\n\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(200);\n    Random r = random();\n    for (int i = 0; i < numDocs; i++) {\n      List<Field> fields = new ArrayList<>();\n      fields.add(newTextField(\"english\", English.intToEnglish(i), Field.Store.NO));\n      fields.add(newTextField(\"oddeven\", (i % 2 == 0) ? \"even\" : \"odd\", Field.Store.NO));\n      fields.add(new NumericDocValuesField(\"byte\", (byte) r.nextInt()));\n      fields.add(new NumericDocValuesField(\"short\", (short) r.nextInt()));\n      fields.add(new NumericDocValuesField(\"int\", r.nextInt()));\n      fields.add(new NumericDocValuesField(\"long\", r.nextLong()));\n      fields.add(new FloatDocValuesField(\"float\", r.nextFloat()));\n      fields.add(new DoubleDocValuesField(\"double\", r.nextDouble()));\n      fields.add(new SortedDocValuesField(\"bytes\", new BytesRef(TestUtil.randomRealisticUnicodeString(random()))));\n      fields.add(new BinaryDocValuesField(\"bytesval\", new BytesRef(TestUtil.randomRealisticUnicodeString(random()))));\n\n      Document document = new Document();\n      document.add(new StoredField(\"id\", \"\"+i));\n      if (VERBOSE) {\n        System.out.println(\"  add doc id=\" + i);\n      }\n      for(Field field : fields) {\n        // So we are sometimes missing that field:\n        if (random().nextInt(5) != 4) {\n          document.add(field);\n          if (VERBOSE) {\n            System.out.println(\"    \" + field);\n          }\n        }\n      }\n\n      iw.addDocument(document);\n\n      if (random().nextInt(50) == 17) {\n        iw.commit();\n      }\n    }\n    reader = iw.getReader();\n    iw.close();\n    searcher = newSearcher(reader);\n    if (VERBOSE) {\n      System.out.println(\"  searcher=\" + searcher);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    allSortFields = new ArrayList<>(Arrays.asList(new SortField[] {\n          new SortField(\"int\", SortField.Type.INT, false),\n          new SortField(\"long\", SortField.Type.LONG, false),\n          new SortField(\"float\", SortField.Type.FLOAT, false),\n          new SortField(\"double\", SortField.Type.DOUBLE, false),\n          new SortField(\"bytes\", SortField.Type.STRING, false),\n          new SortField(\"bytesval\", SortField.Type.STRING_VAL, false),\n          new SortField(\"intdocvalues\", SortField.Type.INT, false),\n          new SortField(\"floatdocvalues\", SortField.Type.FLOAT, false),\n          new SortField(\"sortedbytesdocvalues\", SortField.Type.STRING, false),\n          new SortField(\"sortedbytesdocvaluesval\", SortField.Type.STRING_VAL, false),\n          new SortField(\"straightbytesdocvalues\", SortField.Type.STRING_VAL, false),\n          new SortField(\"int\", SortField.Type.INT, true),\n          new SortField(\"long\", SortField.Type.LONG, true),\n          new SortField(\"float\", SortField.Type.FLOAT, true),\n          new SortField(\"double\", SortField.Type.DOUBLE, true),\n          new SortField(\"bytes\", SortField.Type.STRING, true),\n          new SortField(\"bytesval\", SortField.Type.STRING_VAL, true),\n          new SortField(\"intdocvalues\", SortField.Type.INT, true),\n          new SortField(\"floatdocvalues\", SortField.Type.FLOAT, true),\n          new SortField(\"sortedbytesdocvalues\", SortField.Type.STRING, true),\n          new SortField(\"sortedbytesdocvaluesval\", SortField.Type.STRING_VAL, true),\n          new SortField(\"straightbytesdocvalues\", SortField.Type.STRING_VAL, true),\n          SortField.FIELD_SCORE,\n          SortField.FIELD_DOC,\n        }));\n\n    // Also test missing first / last for the \"string\" sorts:\n    for(String field : new String[] {\"bytes\", \"sortedbytesdocvalues\"}) {\n      for(int rev=0;rev<2;rev++) {\n        boolean reversed = rev == 0;\n        SortField sf = new SortField(field, SortField.Type.STRING, reversed);\n        sf.setMissingValue(SortField.STRING_FIRST);\n        allSortFields.add(sf);\n\n        sf = new SortField(field, SortField.Type.STRING, reversed);\n        sf.setMissingValue(SortField.STRING_LAST);\n        allSortFields.add(sf);\n      }\n    }\n\n    // Also test missing first / last for the \"string_val\" sorts:\n    for(String field : new String[] {\"sortedbytesdocvaluesval\", \"straightbytesdocvalues\"}) {\n      for(int rev=0;rev<2;rev++) {\n        boolean reversed = rev == 0;\n        SortField sf = new SortField(field, SortField.Type.STRING_VAL, reversed);\n        sf.setMissingValue(SortField.STRING_FIRST);\n        allSortFields.add(sf);\n\n        sf = new SortField(field, SortField.Type.STRING_VAL, reversed);\n        sf.setMissingValue(SortField.STRING_LAST);\n        allSortFields.add(sf);\n      }\n    }\n\n    int limit = allSortFields.size();\n    for(int i=0;i<limit;i++) {\n      SortField sf = allSortFields.get(i);\n      if (sf.getType() == SortField.Type.INT) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.INT, sf.getReverse());\n        sf2.setMissingValue(random().nextInt());\n        allSortFields.add(sf2);\n      } else if (sf.getType() == SortField.Type.LONG) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.LONG, sf.getReverse());\n        sf2.setMissingValue(random().nextLong());\n        allSortFields.add(sf2);\n      } else if (sf.getType() == SortField.Type.FLOAT) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.FLOAT, sf.getReverse());\n        sf2.setMissingValue(random().nextFloat());\n        allSortFields.add(sf2);\n      } else if (sf.getType() == SortField.Type.DOUBLE) {\n        SortField sf2 = new SortField(sf.getField(), SortField.Type.DOUBLE, sf.getReverse());\n        sf2.setMissingValue(random().nextDouble());\n        allSortFields.add(sf2);\n      }\n    }\n\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(200);\n    for (int i = 0; i < numDocs; i++) {\n      List<Field> fields = new ArrayList<>();\n      fields.add(newTextField(\"english\", English.intToEnglish(i), Field.Store.NO));\n      fields.add(newTextField(\"oddeven\", (i % 2 == 0) ? \"even\" : \"odd\", Field.Store.NO));\n      fields.add(newStringField(\"byte\", \"\" + ((byte) random().nextInt()), Field.Store.NO));\n      fields.add(newStringField(\"short\", \"\" + ((short) random().nextInt()), Field.Store.NO));\n      fields.add(new IntField(\"int\", random().nextInt(), Field.Store.NO));\n      fields.add(new LongField(\"long\", random().nextLong(), Field.Store.NO));\n\n      fields.add(new FloatField(\"float\", random().nextFloat(), Field.Store.NO));\n      fields.add(new DoubleField(\"double\", random().nextDouble(), Field.Store.NO));\n      fields.add(newStringField(\"bytes\", TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));\n      fields.add(newStringField(\"bytesval\", TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));\n      fields.add(new DoubleField(\"double\", random().nextDouble(), Field.Store.NO));\n\n      fields.add(new NumericDocValuesField(\"intdocvalues\", random().nextInt()));\n      fields.add(new FloatDocValuesField(\"floatdocvalues\", random().nextFloat()));\n      fields.add(new SortedDocValuesField(\"sortedbytesdocvalues\", new BytesRef(TestUtil.randomRealisticUnicodeString(random()))));\n      fields.add(new SortedDocValuesField(\"sortedbytesdocvaluesval\", new BytesRef(TestUtil.randomRealisticUnicodeString(random()))));\n      fields.add(new BinaryDocValuesField(\"straightbytesdocvalues\", new BytesRef(TestUtil.randomRealisticUnicodeString(random()))));\n\n      Document document = new Document();\n      document.add(new StoredField(\"id\", \"\"+i));\n      if (VERBOSE) {\n        System.out.println(\"  add doc id=\" + i);\n      }\n      for(Field field : fields) {\n        // So we are sometimes missing that field:\n        if (random().nextInt(5) != 4) {\n          document.add(field);\n          if (VERBOSE) {\n            System.out.println(\"    \" + field);\n          }\n        }\n      }\n\n      iw.addDocument(document);\n\n      if (random().nextInt(50) == 17) {\n        iw.commit();\n      }\n    }\n    reader = iw.getReader();\n    iw.close();\n    searcher = newSearcher(reader);\n    if (VERBOSE) {\n      System.out.println(\"  searcher=\" + searcher);\n    }\n  }\n\n","bugFix":["7615b855702e008d91a95a2578bf05d27372f599","f718186415bc5417a3367c952c64c8534053c350","6613659748fe4411a7dcf85266e55db1f95f7315"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6613659748fe4411a7dcf85266e55db1f95f7315"],"f718186415bc5417a3367c952c64c8534053c350":["7615b855702e008d91a95a2578bf05d27372f599"],"27ab7b234eab0cbc020836989b96ed430e1065bb":["d4d69c535930b5cce125cff868d40f6373dc27d4","f718186415bc5417a3367c952c64c8534053c350"],"6613659748fe4411a7dcf85266e55db1f95f7315":["27ab7b234eab0cbc020836989b96ed430e1065bb"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"400558e34d57baf6a8e8c42d60fc1a87b5acb596":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"fb02351ae2b114dd41585916d1e35fb2cff98fb0":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["fb02351ae2b114dd41585916d1e35fb2cff98fb0"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["04f07771a2a7dd3a395700665ed839c3dae2def2","423d89a2b3cc419b647c07c2b3fdbc54311d07f9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["400558e34d57baf6a8e8c42d60fc1a87b5acb596"],"7615b855702e008d91a95a2578bf05d27372f599":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"423d89a2b3cc419b647c07c2b3fdbc54311d07f9":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"ef0d8a69209261514c5739c770bba706c2308450":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","fb02351ae2b114dd41585916d1e35fb2cff98fb0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"f718186415bc5417a3367c952c64c8534053c350":["27ab7b234eab0cbc020836989b96ed430e1065bb"],"27ab7b234eab0cbc020836989b96ed430e1065bb":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"400558e34d57baf6a8e8c42d60fc1a87b5acb596":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["d4d69c535930b5cce125cff868d40f6373dc27d4","423d89a2b3cc419b647c07c2b3fdbc54311d07f9"],"fb02351ae2b114dd41585916d1e35fb2cff98fb0":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8","ef0d8a69209261514c5739c770bba706c2308450"],"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["27ab7b234eab0cbc020836989b96ed430e1065bb","7615b855702e008d91a95a2578bf05d27372f599"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7615b855702e008d91a95a2578bf05d27372f599":["f718186415bc5417a3367c952c64c8534053c350"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["400558e34d57baf6a8e8c42d60fc1a87b5acb596"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["fb02351ae2b114dd41585916d1e35fb2cff98fb0","ef0d8a69209261514c5739c770bba706c2308450"],"423d89a2b3cc419b647c07c2b3fdbc54311d07f9":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"ef0d8a69209261514c5739c770bba706c2308450":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}