{"path":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document).mjava","pathOld":"/dev/null","sourceNew":"  /** Adds a document to this index.*/\n  public final void addDocument(Document doc) throws IOException {\n    DocumentWriter dw =\n      new DocumentWriter(ramDirectory, analyzer, maxFieldLength);\n    String segmentName = newSegmentName();\n    dw.addDocument(segmentName, doc);\n    synchronized (this) {\n      segmentInfos.addElement(new SegmentInfo(segmentName, 1, ramDirectory));\n      maybeMergeSegments();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c7454619ea6a0710272c1dd947345cee64489f6","date":1026927484,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document).mjava","sourceNew":"  /** Adds a document to this index.*/\n  public void addDocument(Document doc) throws IOException {\n    DocumentWriter dw =\n      new DocumentWriter(ramDirectory, analyzer, maxFieldLength);\n    String segmentName = newSegmentName();\n    dw.addDocument(segmentName, doc);\n    synchronized (this) {\n      segmentInfos.addElement(new SegmentInfo(segmentName, 1, ramDirectory));\n      maybeMergeSegments();\n    }\n  }\n\n","sourceOld":"  /** Adds a document to this index.*/\n  public final void addDocument(Document doc) throws IOException {\n    DocumentWriter dw =\n      new DocumentWriter(ramDirectory, analyzer, maxFieldLength);\n    String segmentName = newSegmentName();\n    dw.addDocument(segmentName, doc);\n    synchronized (this) {\n      segmentInfos.addElement(new SegmentInfo(segmentName, 1, ramDirectory));\n      maybeMergeSegments();\n    }\n  }\n\n","bugFix":null,"bugIntro":["1b54a9bc667895a2095a886184bf69a3179e63df"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6f5efa46fb27648cd98137d9898d819e115911bc","date":1036690287,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document).mjava","sourceNew":"  /** Adds a document to this index.*/\n  public void addDocument(Document doc) throws IOException {\n    DocumentWriter dw =\n      new DocumentWriter(ramDirectory, analyzer, similarity, maxFieldLength);\n    String segmentName = newSegmentName();\n    dw.addDocument(segmentName, doc);\n    synchronized (this) {\n      segmentInfos.addElement(new SegmentInfo(segmentName, 1, ramDirectory));\n      maybeMergeSegments();\n    }\n  }\n\n","sourceOld":"  /** Adds a document to this index.*/\n  public void addDocument(Document doc) throws IOException {\n    DocumentWriter dw =\n      new DocumentWriter(ramDirectory, analyzer, maxFieldLength);\n    String segmentName = newSegmentName();\n    dw.addDocument(segmentName, doc);\n    synchronized (this) {\n      segmentInfos.addElement(new SegmentInfo(segmentName, 1, ramDirectory));\n      maybeMergeSegments();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8ac4052920fcd27b00a09b0f354a72da109d5d01","date":1049855256,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document).mjava","sourceNew":"  /**\n   * Adds a document to this index.  If the document contains more than\n   * {@link #maxFieldLength} terms for a given field, the remainder are\n   * discarded.\n   */\n  public void addDocument(Document doc) throws IOException {\n    DocumentWriter dw =\n      new DocumentWriter(ramDirectory, analyzer, similarity, maxFieldLength);\n    String segmentName = newSegmentName();\n    dw.addDocument(segmentName, doc);\n    synchronized (this) {\n      segmentInfos.addElement(new SegmentInfo(segmentName, 1, ramDirectory));\n      maybeMergeSegments();\n    }\n  }\n\n","sourceOld":"  /** Adds a document to this index.*/\n  public void addDocument(Document doc) throws IOException {\n    DocumentWriter dw =\n      new DocumentWriter(ramDirectory, analyzer, similarity, maxFieldLength);\n    String segmentName = newSegmentName();\n    dw.addDocument(segmentName, doc);\n    synchronized (this) {\n      segmentInfos.addElement(new SegmentInfo(segmentName, 1, ramDirectory));\n      maybeMergeSegments();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6ebe528b0781ad625e6dd684272e383b49f57d1f","date":1057961593,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document).mjava","sourceNew":"  /**\n   * Adds a document to this index.  If the document contains more than\n   * {@link #maxFieldLength} terms for a given field, the remainder are\n   * discarded.\n   */\n  public void addDocument(Document doc) throws IOException {\n    addDocument(doc, analyzer);\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index.  If the document contains more than\n   * {@link #maxFieldLength} terms for a given field, the remainder are\n   * discarded.\n   */\n  public void addDocument(Document doc) throws IOException {\n    DocumentWriter dw =\n      new DocumentWriter(ramDirectory, analyzer, similarity, maxFieldLength);\n    String segmentName = newSegmentName();\n    dw.addDocument(segmentName, doc);\n    synchronized (this) {\n      segmentInfos.addElement(new SegmentInfo(segmentName, 1, ramDirectory));\n      maybeMergeSegments();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ec9ae8cafc8006554fd1fcc13f8a3bff3517ebd6","date":1117912671,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document).mjava","sourceNew":"  /**\n   * Adds a document to this index.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   */\n  public void addDocument(Document doc) throws IOException {\n    addDocument(doc, analyzer);\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index.  If the document contains more than\n   * {@link #maxFieldLength} terms for a given field, the remainder are\n   * discarded.\n   */\n  public void addDocument(Document doc) throws IOException {\n    addDocument(doc, analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"eeefd99c477417e5c7c574228461ebafe92469d4","date":1166460329,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document).mjava","sourceNew":"  /**\n   * Adds a document to this index.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * Note that if an Exception is hit (eg disk full) then\n   * the index will be consistent, but this document will\n   * not have been added.  Furthermore, it's possible the\n   * index will have one segment in non-compound format even\n   * when using compound files.\n   */\n  public void addDocument(Document doc) throws IOException {\n    addDocument(doc, analyzer);\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   */\n  public void addDocument(Document doc) throws IOException {\n    addDocument(doc, analyzer);\n  }\n\n","bugFix":null,"bugIntro":["5a664b1395d4341b88e32d36297d7670f1a665ac"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a664b1395d4341b88e32d36297d7670f1a665ac","date":1166527887,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document).mjava","sourceNew":"  /**\n   * Adds a document to this index.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p> Note that if an Exception is hit (eg disk full)\n   * then the index will be consistent, but this document\n   * may not have been added.  Furthermore, it's possible\n   * the index will have one segment in non-compound format\n   * even when using compound files (when a merge has\n   * partially succeeded).</p>\n   */\n  public void addDocument(Document doc) throws IOException {\n    addDocument(doc, analyzer);\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * Note that if an Exception is hit (eg disk full) then\n   * the index will be consistent, but this document will\n   * not have been added.  Furthermore, it's possible the\n   * index will have one segment in non-compound format even\n   * when using compound files.\n   */\n  public void addDocument(Document doc) throws IOException {\n    addDocument(doc, analyzer);\n  }\n\n","bugFix":["eeefd99c477417e5c7c574228461ebafe92469d4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8f7478f1d67a81bf80f28067595be0383022d65b","date":1167857941,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document).mjava","sourceNew":"  /**\n   * Adds a document to this index.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p> Note that if an Exception is hit (for example disk full)\n   * then the index will be consistent, but this document\n   * may not have been added.  Furthermore, it's possible\n   * the index will have one segment in non-compound format\n   * even when using compound files (when a merge has\n   * partially succeeded).</p>\n   *\n   * <p> This method periodically flushes pending documents\n   * to the Directory (every {@link #setMaxBufferedDocs}),\n   * and also periodically merges segments in the index\n   * (every {@link #setMergeFactor} flushes).  When this\n   * occurs, the method will take more time to run (possibly\n   * a long time if the index is large), and will require\n   * free temporary space in the Directory to do the\n   * merging.</p>\n   *\n   * <p>The amount of free space required when a merge is\n   * triggered is up to 1X the size of all segments being\n   * merged, when no readers/searchers are open against the\n   * index, and up to 2X the size of all segments being\n   * merged when readers/searchers are open against the\n   * index (see {@link #optimize()} for details).  Most\n   * merges are small (merging the smallest segments\n   * together), but whenever a full merge occurs (all\n   * segments in the index, which is the worst case for\n   * temporary space usage) then the maximum free disk space\n   * required is the same as {@link #optimize}.</p>\n   */\n  public void addDocument(Document doc) throws IOException {\n    addDocument(doc, analyzer);\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p> Note that if an Exception is hit (eg disk full)\n   * then the index will be consistent, but this document\n   * may not have been added.  Furthermore, it's possible\n   * the index will have one segment in non-compound format\n   * even when using compound files (when a merge has\n   * partially succeeded).</p>\n   */\n  public void addDocument(Document doc) throws IOException {\n    addDocument(doc, analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b54a9bc667895a2095a886184bf69a3179e63df","date":1172088096,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document).mjava","sourceNew":"  /**\n   * Adds a document to this index.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p> Note that if an Exception is hit (for example disk full)\n   * then the index will be consistent, but this document\n   * may not have been added.  Furthermore, it's possible\n   * the index will have one segment in non-compound format\n   * even when using compound files (when a merge has\n   * partially succeeded).</p>\n   *\n   * <p> This method periodically flushes pending documents\n   * to the Directory (every {@link #setMaxBufferedDocs}),\n   * and also periodically merges segments in the index\n   * (every {@link #setMergeFactor} flushes).  When this\n   * occurs, the method will take more time to run (possibly\n   * a long time if the index is large), and will require\n   * free temporary space in the Directory to do the\n   * merging.</p>\n   *\n   * <p>The amount of free space required when a merge is\n   * triggered is up to 1X the size of all segments being\n   * merged, when no readers/searchers are open against the\n   * index, and up to 2X the size of all segments being\n   * merged when readers/searchers are open against the\n   * index (see {@link #optimize()} for details).  Most\n   * merges are small (merging the smallest segments\n   * together), but whenever a full merge occurs (all\n   * segments in the index, which is the worst case for\n   * temporary space usage) then the maximum free disk space\n   * required is the same as {@link #optimize}.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc) throws CorruptIndexException, IOException {\n    addDocument(doc, analyzer);\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p> Note that if an Exception is hit (for example disk full)\n   * then the index will be consistent, but this document\n   * may not have been added.  Furthermore, it's possible\n   * the index will have one segment in non-compound format\n   * even when using compound files (when a merge has\n   * partially succeeded).</p>\n   *\n   * <p> This method periodically flushes pending documents\n   * to the Directory (every {@link #setMaxBufferedDocs}),\n   * and also periodically merges segments in the index\n   * (every {@link #setMergeFactor} flushes).  When this\n   * occurs, the method will take more time to run (possibly\n   * a long time if the index is large), and will require\n   * free temporary space in the Directory to do the\n   * merging.</p>\n   *\n   * <p>The amount of free space required when a merge is\n   * triggered is up to 1X the size of all segments being\n   * merged, when no readers/searchers are open against the\n   * index, and up to 2X the size of all segments being\n   * merged when readers/searchers are open against the\n   * index (see {@link #optimize()} for details).  Most\n   * merges are small (merging the smallest segments\n   * together), but whenever a full merge occurs (all\n   * segments in the index, which is the worst case for\n   * temporary space usage) then the maximum free disk space\n   * required is the same as {@link #optimize}.</p>\n   */\n  public void addDocument(Document doc) throws IOException {\n    addDocument(doc, analyzer);\n  }\n\n","bugFix":["9c7454619ea6a0710272c1dd947345cee64489f6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da249b441376287ae32d1604bc7b50b35b351d09","date":1187478914,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document).mjava","sourceNew":"  /**\n   * Adds a document to this index.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p> Note that if an Exception is hit (for example disk full)\n   * then the index will be consistent, but this document\n   * may not have been added.  Furthermore, it's possible\n   * the index will have one segment in non-compound format\n   * even when using compound files (when a merge has\n   * partially succeeded).</p>\n   *\n   * <p> This method periodically flushes pending documents\n   * to the Directory (every {@link #setMaxBufferedDocs}),\n   * and also periodically merges segments in the index\n   * (every {@link #setMergeFactor} flushes).  When this\n   * occurs, the method will take more time to run (possibly\n   * a long time if the index is large), and will require\n   * free temporary space in the Directory to do the\n   * merging.</p>\n   *\n   * <p>The amount of free space required when a merge is\n   * triggered is up to 1X the size of all segments being\n   * merged, when no readers/searchers are open against the\n   * index, and up to 2X the size of all segments being\n   * merged when readers/searchers are open against the\n   * index (see {@link #optimize()} for details).  Most\n   * merges are small (merging the smallest segments\n   * together), but whenever a full merge occurs (all\n   * segments in the index, which is the worst case for\n   * temporary space usage) then the maximum free disk space\n   * required is the same as {@link #optimize}.</p>\n   *\n   * <p>Note that each term in the document can be no longer\n   * than 16383 characters, otherwise an\n   * IllegalArgumentException will be thrown.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc) throws CorruptIndexException, IOException {\n    addDocument(doc, analyzer);\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p> Note that if an Exception is hit (for example disk full)\n   * then the index will be consistent, but this document\n   * may not have been added.  Furthermore, it's possible\n   * the index will have one segment in non-compound format\n   * even when using compound files (when a merge has\n   * partially succeeded).</p>\n   *\n   * <p> This method periodically flushes pending documents\n   * to the Directory (every {@link #setMaxBufferedDocs}),\n   * and also periodically merges segments in the index\n   * (every {@link #setMergeFactor} flushes).  When this\n   * occurs, the method will take more time to run (possibly\n   * a long time if the index is large), and will require\n   * free temporary space in the Directory to do the\n   * merging.</p>\n   *\n   * <p>The amount of free space required when a merge is\n   * triggered is up to 1X the size of all segments being\n   * merged, when no readers/searchers are open against the\n   * index, and up to 2X the size of all segments being\n   * merged when readers/searchers are open against the\n   * index (see {@link #optimize()} for details).  Most\n   * merges are small (merging the smallest segments\n   * together), but whenever a full merge occurs (all\n   * segments in the index, which is the worst case for\n   * temporary space usage) then the maximum free disk space\n   * required is the same as {@link #optimize}.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc) throws CorruptIndexException, IOException {\n    addDocument(doc, analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1405362241b561f5590ff4a87d5d6e173bcd9cf","date":1190107634,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document).mjava","sourceNew":"  /**\n   * Adds a document to this index.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p> Note that if an Exception is hit (for example disk full)\n   * then the index will be consistent, but this document\n   * may not have been added.  Furthermore, it's possible\n   * the index will have one segment in non-compound format\n   * even when using compound files (when a merge has\n   * partially succeeded).</p>\n   *\n   * <p> This method periodically flushes pending documents\n   * to the Directory (every {@link #setMaxBufferedDocs}),\n   * and also periodically merges segments in the index\n   * (every {@link #setMergeFactor} flushes).  When this\n   * occurs, the method will take more time to run (possibly\n   * a long time if the index is large), and will require\n   * free temporary space in the Directory to do the\n   * merging.</p>\n   *\n   * <p>The amount of free space required when a merge is triggered is\n   * up to 1X the size of all segments being merged, when no\n   * readers/searchers are open against the index, and up to 2X the\n   * size of all segments being merged when readers/searchers are open\n   * against the index (see {@link #optimize()} for details). The\n   * sequence of primitive merge operations performed is governed by\n   * the merge policy.\n   *\n   * <p>Note that each term in the document can be no longer\n   * than 16383 characters, otherwise an\n   * IllegalArgumentException will be thrown.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc) throws CorruptIndexException, IOException {\n    addDocument(doc, analyzer);\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p> Note that if an Exception is hit (for example disk full)\n   * then the index will be consistent, but this document\n   * may not have been added.  Furthermore, it's possible\n   * the index will have one segment in non-compound format\n   * even when using compound files (when a merge has\n   * partially succeeded).</p>\n   *\n   * <p> This method periodically flushes pending documents\n   * to the Directory (every {@link #setMaxBufferedDocs}),\n   * and also periodically merges segments in the index\n   * (every {@link #setMergeFactor} flushes).  When this\n   * occurs, the method will take more time to run (possibly\n   * a long time if the index is large), and will require\n   * free temporary space in the Directory to do the\n   * merging.</p>\n   *\n   * <p>The amount of free space required when a merge is\n   * triggered is up to 1X the size of all segments being\n   * merged, when no readers/searchers are open against the\n   * index, and up to 2X the size of all segments being\n   * merged when readers/searchers are open against the\n   * index (see {@link #optimize()} for details).  Most\n   * merges are small (merging the smallest segments\n   * together), but whenever a full merge occurs (all\n   * segments in the index, which is the worst case for\n   * temporary space usage) then the maximum free disk space\n   * required is the same as {@link #optimize}.</p>\n   *\n   * <p>Note that each term in the document can be no longer\n   * than 16383 characters, otherwise an\n   * IllegalArgumentException will be thrown.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc) throws CorruptIndexException, IOException {\n    addDocument(doc, analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4","date":1206538765,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document).mjava","sourceNew":"  /**\n   * Adds a document to this index.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p> Note that if an Exception is hit (for example disk full)\n   * then the index will be consistent, but this document\n   * may not have been added.  Furthermore, it's possible\n   * the index will have one segment in non-compound format\n   * even when using compound files (when a merge has\n   * partially succeeded).</p>\n   *\n   * <p> This method periodically flushes pending documents\n   * to the Directory (see <a href=\"#flush\">above</a>), and\n   * also periodically triggers segment merges in the index\n   * according to the {@link MergePolicy} in use.</p>\n   *\n   * <p>Merges temporarily consume space in the\n   * directory. The amount of space required is up to 1X the\n   * size of all segments being merged, when no\n   * readers/searchers are open against the index, and up to\n   * 2X the size of all segments being merged when\n   * readers/searchers are open against the index (see\n   * {@link #optimize()} for details). The sequence of\n   * primitive merge operations performed is governed by the\n   * merge policy.\n   *\n   * <p>Note that each term in the document can be no longer\n   * than 16383 characters, otherwise an\n   * IllegalArgumentException will be thrown.</p>\n   *\n   * <p>Note that it's possible to create an invalid Unicode\n   * string in java if a UTF16 surrogate pair is malformed.\n   * In this case, the invalid characters are silently\n   * replaced with the Unicode replacement character\n   * U+FFFD.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc) throws CorruptIndexException, IOException {\n    addDocument(doc, analyzer);\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p> Note that if an Exception is hit (for example disk full)\n   * then the index will be consistent, but this document\n   * may not have been added.  Furthermore, it's possible\n   * the index will have one segment in non-compound format\n   * even when using compound files (when a merge has\n   * partially succeeded).</p>\n   *\n   * <p> This method periodically flushes pending documents\n   * to the Directory (every {@link #setMaxBufferedDocs}),\n   * and also periodically merges segments in the index\n   * (every {@link #setMergeFactor} flushes).  When this\n   * occurs, the method will take more time to run (possibly\n   * a long time if the index is large), and will require\n   * free temporary space in the Directory to do the\n   * merging.</p>\n   *\n   * <p>The amount of free space required when a merge is triggered is\n   * up to 1X the size of all segments being merged, when no\n   * readers/searchers are open against the index, and up to 2X the\n   * size of all segments being merged when readers/searchers are open\n   * against the index (see {@link #optimize()} for details). The\n   * sequence of primitive merge operations performed is governed by\n   * the merge policy.\n   *\n   * <p>Note that each term in the document can be no longer\n   * than 16383 characters, otherwise an\n   * IllegalArgumentException will be thrown.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc) throws CorruptIndexException, IOException {\n    addDocument(doc, analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9665d17707cc21b1db995118ff36129723139ab","date":1225384420,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document).mjava","sourceNew":"  /**\n   * Adds a document to this index.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p> Note that if an Exception is hit (for example disk full)\n   * then the index will be consistent, but this document\n   * may not have been added.  Furthermore, it's possible\n   * the index will have one segment in non-compound format\n   * even when using compound files (when a merge has\n   * partially succeeded).</p>\n   *\n   * <p> This method periodically flushes pending documents\n   * to the Directory (see <a href=\"#flush\">above</a>), and\n   * also periodically triggers segment merges in the index\n   * according to the {@link MergePolicy} in use.</p>\n   *\n   * <p>Merges temporarily consume space in the\n   * directory. The amount of space required is up to 1X the\n   * size of all segments being merged, when no\n   * readers/searchers are open against the index, and up to\n   * 2X the size of all segments being merged when\n   * readers/searchers are open against the index (see\n   * {@link #optimize()} for details). The sequence of\n   * primitive merge operations performed is governed by the\n   * merge policy.\n   *\n   * <p>Note that each term in the document can be no longer\n   * than 16383 characters, otherwise an\n   * IllegalArgumentException will be thrown.</p>\n   *\n   * <p>Note that it's possible to create an invalid Unicode\n   * string in java if a UTF16 surrogate pair is malformed.\n   * In this case, the invalid characters are silently\n   * replaced with the Unicode replacement character\n   * U+FFFD.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc) throws CorruptIndexException, IOException {\n    addDocument(doc, analyzer);\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p> Note that if an Exception is hit (for example disk full)\n   * then the index will be consistent, but this document\n   * may not have been added.  Furthermore, it's possible\n   * the index will have one segment in non-compound format\n   * even when using compound files (when a merge has\n   * partially succeeded).</p>\n   *\n   * <p> This method periodically flushes pending documents\n   * to the Directory (see <a href=\"#flush\">above</a>), and\n   * also periodically triggers segment merges in the index\n   * according to the {@link MergePolicy} in use.</p>\n   *\n   * <p>Merges temporarily consume space in the\n   * directory. The amount of space required is up to 1X the\n   * size of all segments being merged, when no\n   * readers/searchers are open against the index, and up to\n   * 2X the size of all segments being merged when\n   * readers/searchers are open against the index (see\n   * {@link #optimize()} for details). The sequence of\n   * primitive merge operations performed is governed by the\n   * merge policy.\n   *\n   * <p>Note that each term in the document can be no longer\n   * than 16383 characters, otherwise an\n   * IllegalArgumentException will be thrown.</p>\n   *\n   * <p>Note that it's possible to create an invalid Unicode\n   * string in java if a UTF16 surrogate pair is malformed.\n   * In this case, the invalid characters are silently\n   * replaced with the Unicode replacement character\n   * U+FFFD.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc) throws CorruptIndexException, IOException {\n    addDocument(doc, analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#addDocument(Document).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document).mjava","sourceNew":"  /**\n   * Adds a document to this index.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p> Note that if an Exception is hit (for example disk full)\n   * then the index will be consistent, but this document\n   * may not have been added.  Furthermore, it's possible\n   * the index will have one segment in non-compound format\n   * even when using compound files (when a merge has\n   * partially succeeded).</p>\n   *\n   * <p> This method periodically flushes pending documents\n   * to the Directory (see <a href=\"#flush\">above</a>), and\n   * also periodically triggers segment merges in the index\n   * according to the {@link MergePolicy} in use.</p>\n   *\n   * <p>Merges temporarily consume space in the\n   * directory. The amount of space required is up to 1X the\n   * size of all segments being merged, when no\n   * readers/searchers are open against the index, and up to\n   * 2X the size of all segments being merged when\n   * readers/searchers are open against the index (see\n   * {@link #optimize()} for details). The sequence of\n   * primitive merge operations performed is governed by the\n   * merge policy.\n   *\n   * <p>Note that each term in the document can be no longer\n   * than 16383 characters, otherwise an\n   * IllegalArgumentException will be thrown.</p>\n   *\n   * <p>Note that it's possible to create an invalid Unicode\n   * string in java if a UTF16 surrogate pair is malformed.\n   * In this case, the invalid characters are silently\n   * replaced with the Unicode replacement character\n   * U+FFFD.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc) throws CorruptIndexException, IOException {\n    addDocument(doc, analyzer);\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p> Note that if an Exception is hit (for example disk full)\n   * then the index will be consistent, but this document\n   * may not have been added.  Furthermore, it's possible\n   * the index will have one segment in non-compound format\n   * even when using compound files (when a merge has\n   * partially succeeded).</p>\n   *\n   * <p> This method periodically flushes pending documents\n   * to the Directory (see <a href=\"#flush\">above</a>), and\n   * also periodically triggers segment merges in the index\n   * according to the {@link MergePolicy} in use.</p>\n   *\n   * <p>Merges temporarily consume space in the\n   * directory. The amount of space required is up to 1X the\n   * size of all segments being merged, when no\n   * readers/searchers are open against the index, and up to\n   * 2X the size of all segments being merged when\n   * readers/searchers are open against the index (see\n   * {@link #optimize()} for details). The sequence of\n   * primitive merge operations performed is governed by the\n   * merge policy.\n   *\n   * <p>Note that each term in the document can be no longer\n   * than 16383 characters, otherwise an\n   * IllegalArgumentException will be thrown.</p>\n   *\n   * <p>Note that it's possible to create an invalid Unicode\n   * string in java if a UTF16 surrogate pair is malformed.\n   * In this case, the invalid characters are silently\n   * replaced with the Unicode replacement character\n   * U+FFFD.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc) throws CorruptIndexException, IOException {\n    addDocument(doc, analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["da249b441376287ae32d1604bc7b50b35b351d09"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6ebe528b0781ad625e6dd684272e383b49f57d1f":["8ac4052920fcd27b00a09b0f354a72da109d5d01"],"1b54a9bc667895a2095a886184bf69a3179e63df":["8f7478f1d67a81bf80f28067595be0383022d65b"],"dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"da249b441376287ae32d1604bc7b50b35b351d09":["1b54a9bc667895a2095a886184bf69a3179e63df"],"5a664b1395d4341b88e32d36297d7670f1a665ac":["eeefd99c477417e5c7c574228461ebafe92469d4"],"ec9ae8cafc8006554fd1fcc13f8a3bff3517ebd6":["6ebe528b0781ad625e6dd684272e383b49f57d1f"],"6f5efa46fb27648cd98137d9898d819e115911bc":["9c7454619ea6a0710272c1dd947345cee64489f6"],"e9665d17707cc21b1db995118ff36129723139ab":["dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4"],"8ac4052920fcd27b00a09b0f354a72da109d5d01":["6f5efa46fb27648cd98137d9898d819e115911bc"],"eeefd99c477417e5c7c574228461ebafe92469d4":["ec9ae8cafc8006554fd1fcc13f8a3bff3517ebd6"],"8f7478f1d67a81bf80f28067595be0383022d65b":["5a664b1395d4341b88e32d36297d7670f1a665ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9c7454619ea6a0710272c1dd947345cee64489f6":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e9665d17707cc21b1db995118ff36129723139ab"]},"commit2Childs":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["9c7454619ea6a0710272c1dd947345cee64489f6"],"6ebe528b0781ad625e6dd684272e383b49f57d1f":["ec9ae8cafc8006554fd1fcc13f8a3bff3517ebd6"],"1b54a9bc667895a2095a886184bf69a3179e63df":["da249b441376287ae32d1604bc7b50b35b351d09"],"dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4":["e9665d17707cc21b1db995118ff36129723139ab"],"da249b441376287ae32d1604bc7b50b35b351d09":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"5a664b1395d4341b88e32d36297d7670f1a665ac":["8f7478f1d67a81bf80f28067595be0383022d65b"],"ec9ae8cafc8006554fd1fcc13f8a3bff3517ebd6":["eeefd99c477417e5c7c574228461ebafe92469d4"],"6f5efa46fb27648cd98137d9898d819e115911bc":["8ac4052920fcd27b00a09b0f354a72da109d5d01"],"8ac4052920fcd27b00a09b0f354a72da109d5d01":["6ebe528b0781ad625e6dd684272e383b49f57d1f"],"e9665d17707cc21b1db995118ff36129723139ab":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"eeefd99c477417e5c7c574228461ebafe92469d4":["5a664b1395d4341b88e32d36297d7670f1a665ac"],"8f7478f1d67a81bf80f28067595be0383022d65b":["1b54a9bc667895a2095a886184bf69a3179e63df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"9c7454619ea6a0710272c1dd947345cee64489f6":["6f5efa46fb27648cd98137d9898d819e115911bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}