{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#testMultiValuedWithMultipleDocuments().mjava","commits":[{"id":"3c0dbd7f9c2fb9dac33f6bd9e4d7199e309280f9","date":1387897927,"type":0,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#testMultiValuedWithMultipleDocuments().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n  @Test\n  public void testMultiValuedWithMultipleDocuments() throws Exception {\n    Map entityAttrs = createMap(\"name\", \"e\", \"url\", \"testdata.xml\", XPathEntityProcessor.FOR_EACH, \"/documents/doc\");\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"id\", \"xpath\", \"/documents/doc/id\", DataImporter.MULTI_VALUED, \"false\"));\n    fields.add(createMap(\"column\", \"a\", \"xpath\", \"/documents/doc/a\", DataImporter.MULTI_VALUED, \"true\"));\n    fields.add(createMap(\"column\", \"s1dataA\", \"xpath\", \"/documents/doc/sec1/s1dataA\", DataImporter.MULTI_VALUED, \"true\"));\n    fields.add(createMap(\"column\", \"s1dataB\", \"xpath\", \"/documents/doc/sec1/s1dataB\", DataImporter.MULTI_VALUED, \"true\")); \n    fields.add(createMap(\"column\", \"s1dataC\", \"xpath\", \"/documents/doc/sec1/s1dataC\", DataImporter.MULTI_VALUED, \"true\")); \n    \n    Context c = getContext(null,\n            new VariableResolver(), getDataSource(textMultipleDocuments), Context.FULL_DUMP, fields, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    {  \n      assertEquals(\"1\", result.get(0).get(\"id\"));\n      List a = (List)result.get(0).get(\"a\");\n      List s1dataA = (List)result.get(0).get(\"s1dataA\");\n      List s1dataB = (List)result.get(0).get(\"s1dataB\");\n      List s1dataC = (List)result.get(0).get(\"s1dataC\");      \n      assertEquals(2, a.size());\n      assertEquals(\"id1-a1\", a.get(0));\n      assertEquals(\"id1-a2\", a.get(1));\n      assertEquals(3, s1dataA.size());\n      assertEquals(\"id1-s1dataA-1\", s1dataA.get(0));\n      assertNull(s1dataA.get(1));\n      assertEquals(\"id1-s1dataA-3\", s1dataA.get(2));\n      assertEquals(3, s1dataB.size());\n      assertEquals(\"id1-s1dataB-1\", s1dataB.get(0));\n      assertEquals(\"id1-s1dataB-2\", s1dataB.get(1));\n      assertEquals(\"id1-s1dataB-3\", s1dataB.get(2));\n      assertEquals(3, s1dataC.size());\n      assertNull(s1dataC.get(0));\n      assertNull(s1dataC.get(1));\n      assertNull(s1dataC.get(2));\n    }\n    { \n      assertEquals(\"2\", result.get(1).get(\"id\"));\n      List a = (List)result.get(1).get(\"a\");\n      List s1dataA = (List)result.get(1).get(\"s1dataA\");\n      List s1dataB = (List)result.get(1).get(\"s1dataB\");\n      List s1dataC = (List)result.get(1).get(\"s1dataC\");  \n      assertTrue(a==null || a.size()==0);\n      assertEquals(1, s1dataA.size()); \n      assertNull(s1dataA.get(0));\n      assertEquals(1, s1dataB.size());\n      assertEquals(\"id2-s1dataB-1\", s1dataB.get(0));\n      assertEquals(1, s1dataC.size());\n      assertNull(s1dataC.get(0));\n    }  \n    {\n      assertEquals(\"3\", result.get(2).get(\"id\"));\n      List a = (List)result.get(2).get(\"a\");\n      List s1dataA = (List)result.get(2).get(\"s1dataA\");\n      List s1dataB = (List)result.get(2).get(\"s1dataB\");\n      List s1dataC = (List)result.get(2).get(\"s1dataC\");  \n      assertTrue(a==null || a.size()==0);\n      assertEquals(1, s1dataA.size());\n      assertEquals(\"id3-s1dataA-1\", s1dataA.get(0));\n      assertEquals(1, s1dataB.size());\n      assertNull(s1dataB.get(0));\n      assertEquals(1, s1dataC.size());\n      assertNull(s1dataC.get(0)); \n    }\n    {  \n      assertEquals(\"4\", result.get(3).get(\"id\"));\n      List a = (List)result.get(3).get(\"a\");\n      List s1dataA = (List)result.get(3).get(\"s1dataA\");\n      List s1dataB = (List)result.get(3).get(\"s1dataB\");\n      List s1dataC = (List)result.get(3).get(\"s1dataC\");  \n      assertTrue(a==null || a.size()==0);\n      assertEquals(1, s1dataA.size());\n      assertEquals(\"id4-s1dataA-1\", s1dataA.get(0));\n      assertEquals(1, s1dataB.size());\n      assertEquals(\"id4-s1dataB-1\", s1dataB.get(0));\n      assertEquals(1, s1dataC.size());\n      assertEquals(\"id4-s1dataC-1\", s1dataC.get(0));\n    }\n    {\n      assertEquals(\"5\", result.get(4).get(\"id\"));\n      List a = (List)result.get(4).get(\"a\");\n      List s1dataA = (List)result.get(4).get(\"s1dataA\");\n      List s1dataB = (List)result.get(4).get(\"s1dataB\");\n      List s1dataC = (List)result.get(4).get(\"s1dataC\");  \n      assertTrue(a==null || a.size()==0);      \n      assertEquals(1, s1dataA.size());\n      assertNull(s1dataA.get(0)); \n      assertEquals(1, s1dataB.size());\n      assertNull(s1dataB.get(0)); \n      assertEquals(1, s1dataC.size());\n      assertEquals(\"id5-s1dataC-1\", s1dataC.get(0));\n    }\n    {  \n      assertEquals(\"6\", result.get(5).get(\"id\"));\n      List a = (List)result.get(5).get(\"a\");\n      List s1dataA = (List)result.get(5).get(\"s1dataA\");\n      List s1dataB = (List)result.get(5).get(\"s1dataB\");\n      List s1dataC = (List)result.get(5).get(\"s1dataC\");     \n      assertTrue(a==null || a.size()==0); \n      assertEquals(3, s1dataA.size());\n      assertEquals(\"id6-s1dataA-1\", s1dataA.get(0));\n      assertEquals(\"id6-s1dataA-2\", s1dataA.get(1));\n      assertNull(s1dataA.get(2));\n      assertEquals(3, s1dataB.size());\n      assertEquals(\"id6-s1dataB-1\", s1dataB.get(0));\n      assertEquals(\"id6-s1dataB-2\", s1dataB.get(1));\n      assertEquals(\"id6-s1dataB-3\", s1dataB.get(2));\n      assertEquals(3, s1dataC.size());\n      assertEquals(\"id6-s1dataC-1\", s1dataC.get(0));\n      assertNull(s1dataC.get(1));\n      assertEquals(\"id6-s1dataC-3\", s1dataC.get(2));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#testMultiValuedWithMultipleDocuments().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#testMultiValuedWithMultipleDocuments().mjava","sourceNew":"  @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n  @Test\n  public void testMultiValuedWithMultipleDocuments() throws Exception {\n    Map entityAttrs = createMap(\"name\", \"e\", \"url\", \"testdata.xml\", XPathEntityProcessor.FOR_EACH, \"/documents/doc\");\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"id\", \"xpath\", \"/documents/doc/id\", DataImporter.MULTI_VALUED, \"false\"));\n    fields.add(createMap(\"column\", \"a\", \"xpath\", \"/documents/doc/a\", DataImporter.MULTI_VALUED, \"true\"));\n    fields.add(createMap(\"column\", \"s1dataA\", \"xpath\", \"/documents/doc/sec1/s1dataA\", DataImporter.MULTI_VALUED, \"true\"));\n    fields.add(createMap(\"column\", \"s1dataB\", \"xpath\", \"/documents/doc/sec1/s1dataB\", DataImporter.MULTI_VALUED, \"true\")); \n    fields.add(createMap(\"column\", \"s1dataC\", \"xpath\", \"/documents/doc/sec1/s1dataC\", DataImporter.MULTI_VALUED, \"true\")); \n    \n    Context c = getContext(null,\n            new VariableResolver(), getDataSource(textMultipleDocuments), Context.FULL_DUMP, fields, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    {  \n      assertEquals(\"1\", result.get(0).get(\"id\"));\n      List a = (List)result.get(0).get(\"a\");\n      List s1dataA = (List)result.get(0).get(\"s1dataA\");\n      List s1dataB = (List)result.get(0).get(\"s1dataB\");\n      List s1dataC = (List)result.get(0).get(\"s1dataC\");      \n      assertEquals(2, a.size());\n      assertEquals(\"id1-a1\", a.get(0));\n      assertEquals(\"id1-a2\", a.get(1));\n      assertEquals(3, s1dataA.size());\n      assertEquals(\"id1-s1dataA-1\", s1dataA.get(0));\n      assertNull(s1dataA.get(1));\n      assertEquals(\"id1-s1dataA-3\", s1dataA.get(2));\n      assertEquals(3, s1dataB.size());\n      assertEquals(\"id1-s1dataB-1\", s1dataB.get(0));\n      assertEquals(\"id1-s1dataB-2\", s1dataB.get(1));\n      assertEquals(\"id1-s1dataB-3\", s1dataB.get(2));\n      assertEquals(3, s1dataC.size());\n      assertNull(s1dataC.get(0));\n      assertNull(s1dataC.get(1));\n      assertNull(s1dataC.get(2));\n    }\n    { \n      assertEquals(\"2\", result.get(1).get(\"id\"));\n      List a = (List)result.get(1).get(\"a\");\n      List s1dataA = (List)result.get(1).get(\"s1dataA\");\n      List s1dataB = (List)result.get(1).get(\"s1dataB\");\n      List s1dataC = (List)result.get(1).get(\"s1dataC\");  \n      assertTrue(a==null || a.size()==0);\n      assertEquals(1, s1dataA.size()); \n      assertNull(s1dataA.get(0));\n      assertEquals(1, s1dataB.size());\n      assertEquals(\"id2-s1dataB-1\", s1dataB.get(0));\n      assertEquals(1, s1dataC.size());\n      assertNull(s1dataC.get(0));\n    }  \n    {\n      assertEquals(\"3\", result.get(2).get(\"id\"));\n      List a = (List)result.get(2).get(\"a\");\n      List s1dataA = (List)result.get(2).get(\"s1dataA\");\n      List s1dataB = (List)result.get(2).get(\"s1dataB\");\n      List s1dataC = (List)result.get(2).get(\"s1dataC\");  \n      assertTrue(a==null || a.size()==0);\n      assertEquals(1, s1dataA.size());\n      assertEquals(\"id3-s1dataA-1\", s1dataA.get(0));\n      assertEquals(1, s1dataB.size());\n      assertNull(s1dataB.get(0));\n      assertEquals(1, s1dataC.size());\n      assertNull(s1dataC.get(0)); \n    }\n    {  \n      assertEquals(\"4\", result.get(3).get(\"id\"));\n      List a = (List)result.get(3).get(\"a\");\n      List s1dataA = (List)result.get(3).get(\"s1dataA\");\n      List s1dataB = (List)result.get(3).get(\"s1dataB\");\n      List s1dataC = (List)result.get(3).get(\"s1dataC\");  \n      assertTrue(a==null || a.size()==0);\n      assertEquals(1, s1dataA.size());\n      assertEquals(\"id4-s1dataA-1\", s1dataA.get(0));\n      assertEquals(1, s1dataB.size());\n      assertEquals(\"id4-s1dataB-1\", s1dataB.get(0));\n      assertEquals(1, s1dataC.size());\n      assertEquals(\"id4-s1dataC-1\", s1dataC.get(0));\n    }\n    {\n      assertEquals(\"5\", result.get(4).get(\"id\"));\n      List a = (List)result.get(4).get(\"a\");\n      List s1dataA = (List)result.get(4).get(\"s1dataA\");\n      List s1dataB = (List)result.get(4).get(\"s1dataB\");\n      List s1dataC = (List)result.get(4).get(\"s1dataC\");  \n      assertTrue(a==null || a.size()==0);      \n      assertEquals(1, s1dataA.size());\n      assertNull(s1dataA.get(0)); \n      assertEquals(1, s1dataB.size());\n      assertNull(s1dataB.get(0)); \n      assertEquals(1, s1dataC.size());\n      assertEquals(\"id5-s1dataC-1\", s1dataC.get(0));\n    }\n    {  \n      assertEquals(\"6\", result.get(5).get(\"id\"));\n      List a = (List)result.get(5).get(\"a\");\n      List s1dataA = (List)result.get(5).get(\"s1dataA\");\n      List s1dataB = (List)result.get(5).get(\"s1dataB\");\n      List s1dataC = (List)result.get(5).get(\"s1dataC\");     \n      assertTrue(a==null || a.size()==0); \n      assertEquals(3, s1dataA.size());\n      assertEquals(\"id6-s1dataA-1\", s1dataA.get(0));\n      assertEquals(\"id6-s1dataA-2\", s1dataA.get(1));\n      assertNull(s1dataA.get(2));\n      assertEquals(3, s1dataB.size());\n      assertEquals(\"id6-s1dataB-1\", s1dataB.get(0));\n      assertEquals(\"id6-s1dataB-2\", s1dataB.get(1));\n      assertEquals(\"id6-s1dataB-3\", s1dataB.get(2));\n      assertEquals(3, s1dataC.size());\n      assertEquals(\"id6-s1dataC-1\", s1dataC.get(0));\n      assertNull(s1dataC.get(1));\n      assertEquals(\"id6-s1dataC-3\", s1dataC.get(2));\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n  @Test\n  public void testMultiValuedWithMultipleDocuments() throws Exception {\n    Map entityAttrs = createMap(\"name\", \"e\", \"url\", \"testdata.xml\", XPathEntityProcessor.FOR_EACH, \"/documents/doc\");\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"id\", \"xpath\", \"/documents/doc/id\", DataImporter.MULTI_VALUED, \"false\"));\n    fields.add(createMap(\"column\", \"a\", \"xpath\", \"/documents/doc/a\", DataImporter.MULTI_VALUED, \"true\"));\n    fields.add(createMap(\"column\", \"s1dataA\", \"xpath\", \"/documents/doc/sec1/s1dataA\", DataImporter.MULTI_VALUED, \"true\"));\n    fields.add(createMap(\"column\", \"s1dataB\", \"xpath\", \"/documents/doc/sec1/s1dataB\", DataImporter.MULTI_VALUED, \"true\")); \n    fields.add(createMap(\"column\", \"s1dataC\", \"xpath\", \"/documents/doc/sec1/s1dataC\", DataImporter.MULTI_VALUED, \"true\")); \n    \n    Context c = getContext(null,\n            new VariableResolver(), getDataSource(textMultipleDocuments), Context.FULL_DUMP, fields, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    {  \n      assertEquals(\"1\", result.get(0).get(\"id\"));\n      List a = (List)result.get(0).get(\"a\");\n      List s1dataA = (List)result.get(0).get(\"s1dataA\");\n      List s1dataB = (List)result.get(0).get(\"s1dataB\");\n      List s1dataC = (List)result.get(0).get(\"s1dataC\");      \n      assertEquals(2, a.size());\n      assertEquals(\"id1-a1\", a.get(0));\n      assertEquals(\"id1-a2\", a.get(1));\n      assertEquals(3, s1dataA.size());\n      assertEquals(\"id1-s1dataA-1\", s1dataA.get(0));\n      assertNull(s1dataA.get(1));\n      assertEquals(\"id1-s1dataA-3\", s1dataA.get(2));\n      assertEquals(3, s1dataB.size());\n      assertEquals(\"id1-s1dataB-1\", s1dataB.get(0));\n      assertEquals(\"id1-s1dataB-2\", s1dataB.get(1));\n      assertEquals(\"id1-s1dataB-3\", s1dataB.get(2));\n      assertEquals(3, s1dataC.size());\n      assertNull(s1dataC.get(0));\n      assertNull(s1dataC.get(1));\n      assertNull(s1dataC.get(2));\n    }\n    { \n      assertEquals(\"2\", result.get(1).get(\"id\"));\n      List a = (List)result.get(1).get(\"a\");\n      List s1dataA = (List)result.get(1).get(\"s1dataA\");\n      List s1dataB = (List)result.get(1).get(\"s1dataB\");\n      List s1dataC = (List)result.get(1).get(\"s1dataC\");  \n      assertTrue(a==null || a.size()==0);\n      assertEquals(1, s1dataA.size()); \n      assertNull(s1dataA.get(0));\n      assertEquals(1, s1dataB.size());\n      assertEquals(\"id2-s1dataB-1\", s1dataB.get(0));\n      assertEquals(1, s1dataC.size());\n      assertNull(s1dataC.get(0));\n    }  \n    {\n      assertEquals(\"3\", result.get(2).get(\"id\"));\n      List a = (List)result.get(2).get(\"a\");\n      List s1dataA = (List)result.get(2).get(\"s1dataA\");\n      List s1dataB = (List)result.get(2).get(\"s1dataB\");\n      List s1dataC = (List)result.get(2).get(\"s1dataC\");  \n      assertTrue(a==null || a.size()==0);\n      assertEquals(1, s1dataA.size());\n      assertEquals(\"id3-s1dataA-1\", s1dataA.get(0));\n      assertEquals(1, s1dataB.size());\n      assertNull(s1dataB.get(0));\n      assertEquals(1, s1dataC.size());\n      assertNull(s1dataC.get(0)); \n    }\n    {  \n      assertEquals(\"4\", result.get(3).get(\"id\"));\n      List a = (List)result.get(3).get(\"a\");\n      List s1dataA = (List)result.get(3).get(\"s1dataA\");\n      List s1dataB = (List)result.get(3).get(\"s1dataB\");\n      List s1dataC = (List)result.get(3).get(\"s1dataC\");  \n      assertTrue(a==null || a.size()==0);\n      assertEquals(1, s1dataA.size());\n      assertEquals(\"id4-s1dataA-1\", s1dataA.get(0));\n      assertEquals(1, s1dataB.size());\n      assertEquals(\"id4-s1dataB-1\", s1dataB.get(0));\n      assertEquals(1, s1dataC.size());\n      assertEquals(\"id4-s1dataC-1\", s1dataC.get(0));\n    }\n    {\n      assertEquals(\"5\", result.get(4).get(\"id\"));\n      List a = (List)result.get(4).get(\"a\");\n      List s1dataA = (List)result.get(4).get(\"s1dataA\");\n      List s1dataB = (List)result.get(4).get(\"s1dataB\");\n      List s1dataC = (List)result.get(4).get(\"s1dataC\");  \n      assertTrue(a==null || a.size()==0);      \n      assertEquals(1, s1dataA.size());\n      assertNull(s1dataA.get(0)); \n      assertEquals(1, s1dataB.size());\n      assertNull(s1dataB.get(0)); \n      assertEquals(1, s1dataC.size());\n      assertEquals(\"id5-s1dataC-1\", s1dataC.get(0));\n    }\n    {  \n      assertEquals(\"6\", result.get(5).get(\"id\"));\n      List a = (List)result.get(5).get(\"a\");\n      List s1dataA = (List)result.get(5).get(\"s1dataA\");\n      List s1dataB = (List)result.get(5).get(\"s1dataB\");\n      List s1dataC = (List)result.get(5).get(\"s1dataC\");     \n      assertTrue(a==null || a.size()==0); \n      assertEquals(3, s1dataA.size());\n      assertEquals(\"id6-s1dataA-1\", s1dataA.get(0));\n      assertEquals(\"id6-s1dataA-2\", s1dataA.get(1));\n      assertNull(s1dataA.get(2));\n      assertEquals(3, s1dataB.size());\n      assertEquals(\"id6-s1dataB-1\", s1dataB.get(0));\n      assertEquals(\"id6-s1dataB-2\", s1dataB.get(1));\n      assertEquals(\"id6-s1dataB-3\", s1dataB.get(2));\n      assertEquals(3, s1dataC.size());\n      assertEquals(\"id6-s1dataC-1\", s1dataC.get(0));\n      assertNull(s1dataC.get(1));\n      assertEquals(\"id6-s1dataC-3\", s1dataC.get(2));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#testMultiValuedWithMultipleDocuments().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#testMultiValuedWithMultipleDocuments().mjava","sourceNew":"  @Test\n  public void testMultiValuedWithMultipleDocuments() throws Exception {\n    Map entityAttrs = createMap(\"name\", \"e\", \"url\", \"testdata.xml\", XPathEntityProcessor.FOR_EACH, \"/documents/doc\");\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"id\", \"xpath\", \"/documents/doc/id\", DataImporter.MULTI_VALUED, \"false\"));\n    fields.add(createMap(\"column\", \"a\", \"xpath\", \"/documents/doc/a\", DataImporter.MULTI_VALUED, \"true\"));\n    fields.add(createMap(\"column\", \"s1dataA\", \"xpath\", \"/documents/doc/sec1/s1dataA\", DataImporter.MULTI_VALUED, \"true\"));\n    fields.add(createMap(\"column\", \"s1dataB\", \"xpath\", \"/documents/doc/sec1/s1dataB\", DataImporter.MULTI_VALUED, \"true\")); \n    fields.add(createMap(\"column\", \"s1dataC\", \"xpath\", \"/documents/doc/sec1/s1dataC\", DataImporter.MULTI_VALUED, \"true\")); \n    \n    Context c = getContext(null,\n            new VariableResolver(), getDataSource(textMultipleDocuments), Context.FULL_DUMP, fields, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    {  \n      assertEquals(\"1\", result.get(0).get(\"id\"));\n      List a = (List)result.get(0).get(\"a\");\n      List s1dataA = (List)result.get(0).get(\"s1dataA\");\n      List s1dataB = (List)result.get(0).get(\"s1dataB\");\n      List s1dataC = (List)result.get(0).get(\"s1dataC\");      \n      assertEquals(2, a.size());\n      assertEquals(\"id1-a1\", a.get(0));\n      assertEquals(\"id1-a2\", a.get(1));\n      assertEquals(3, s1dataA.size());\n      assertEquals(\"id1-s1dataA-1\", s1dataA.get(0));\n      assertNull(s1dataA.get(1));\n      assertEquals(\"id1-s1dataA-3\", s1dataA.get(2));\n      assertEquals(3, s1dataB.size());\n      assertEquals(\"id1-s1dataB-1\", s1dataB.get(0));\n      assertEquals(\"id1-s1dataB-2\", s1dataB.get(1));\n      assertEquals(\"id1-s1dataB-3\", s1dataB.get(2));\n      assertEquals(3, s1dataC.size());\n      assertNull(s1dataC.get(0));\n      assertNull(s1dataC.get(1));\n      assertNull(s1dataC.get(2));\n    }\n    { \n      assertEquals(\"2\", result.get(1).get(\"id\"));\n      List a = (List)result.get(1).get(\"a\");\n      List s1dataA = (List)result.get(1).get(\"s1dataA\");\n      List s1dataB = (List)result.get(1).get(\"s1dataB\");\n      List s1dataC = (List)result.get(1).get(\"s1dataC\");  \n      assertTrue(a==null || a.size()==0);\n      assertEquals(1, s1dataA.size()); \n      assertNull(s1dataA.get(0));\n      assertEquals(1, s1dataB.size());\n      assertEquals(\"id2-s1dataB-1\", s1dataB.get(0));\n      assertEquals(1, s1dataC.size());\n      assertNull(s1dataC.get(0));\n    }  \n    {\n      assertEquals(\"3\", result.get(2).get(\"id\"));\n      List a = (List)result.get(2).get(\"a\");\n      List s1dataA = (List)result.get(2).get(\"s1dataA\");\n      List s1dataB = (List)result.get(2).get(\"s1dataB\");\n      List s1dataC = (List)result.get(2).get(\"s1dataC\");  \n      assertTrue(a==null || a.size()==0);\n      assertEquals(1, s1dataA.size());\n      assertEquals(\"id3-s1dataA-1\", s1dataA.get(0));\n      assertEquals(1, s1dataB.size());\n      assertNull(s1dataB.get(0));\n      assertEquals(1, s1dataC.size());\n      assertNull(s1dataC.get(0)); \n    }\n    {  \n      assertEquals(\"4\", result.get(3).get(\"id\"));\n      List a = (List)result.get(3).get(\"a\");\n      List s1dataA = (List)result.get(3).get(\"s1dataA\");\n      List s1dataB = (List)result.get(3).get(\"s1dataB\");\n      List s1dataC = (List)result.get(3).get(\"s1dataC\");  \n      assertTrue(a==null || a.size()==0);\n      assertEquals(1, s1dataA.size());\n      assertEquals(\"id4-s1dataA-1\", s1dataA.get(0));\n      assertEquals(1, s1dataB.size());\n      assertEquals(\"id4-s1dataB-1\", s1dataB.get(0));\n      assertEquals(1, s1dataC.size());\n      assertEquals(\"id4-s1dataC-1\", s1dataC.get(0));\n    }\n    {\n      assertEquals(\"5\", result.get(4).get(\"id\"));\n      List a = (List)result.get(4).get(\"a\");\n      List s1dataA = (List)result.get(4).get(\"s1dataA\");\n      List s1dataB = (List)result.get(4).get(\"s1dataB\");\n      List s1dataC = (List)result.get(4).get(\"s1dataC\");  \n      assertTrue(a==null || a.size()==0);      \n      assertEquals(1, s1dataA.size());\n      assertNull(s1dataA.get(0)); \n      assertEquals(1, s1dataB.size());\n      assertNull(s1dataB.get(0)); \n      assertEquals(1, s1dataC.size());\n      assertEquals(\"id5-s1dataC-1\", s1dataC.get(0));\n    }\n    {  \n      assertEquals(\"6\", result.get(5).get(\"id\"));\n      List a = (List)result.get(5).get(\"a\");\n      List s1dataA = (List)result.get(5).get(\"s1dataA\");\n      List s1dataB = (List)result.get(5).get(\"s1dataB\");\n      List s1dataC = (List)result.get(5).get(\"s1dataC\");     \n      assertTrue(a==null || a.size()==0); \n      assertEquals(3, s1dataA.size());\n      assertEquals(\"id6-s1dataA-1\", s1dataA.get(0));\n      assertEquals(\"id6-s1dataA-2\", s1dataA.get(1));\n      assertNull(s1dataA.get(2));\n      assertEquals(3, s1dataB.size());\n      assertEquals(\"id6-s1dataB-1\", s1dataB.get(0));\n      assertEquals(\"id6-s1dataB-2\", s1dataB.get(1));\n      assertEquals(\"id6-s1dataB-3\", s1dataB.get(2));\n      assertEquals(3, s1dataC.size());\n      assertEquals(\"id6-s1dataC-1\", s1dataC.get(0));\n      assertNull(s1dataC.get(1));\n      assertEquals(\"id6-s1dataC-3\", s1dataC.get(2));\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n  @Test\n  public void testMultiValuedWithMultipleDocuments() throws Exception {\n    Map entityAttrs = createMap(\"name\", \"e\", \"url\", \"testdata.xml\", XPathEntityProcessor.FOR_EACH, \"/documents/doc\");\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"id\", \"xpath\", \"/documents/doc/id\", DataImporter.MULTI_VALUED, \"false\"));\n    fields.add(createMap(\"column\", \"a\", \"xpath\", \"/documents/doc/a\", DataImporter.MULTI_VALUED, \"true\"));\n    fields.add(createMap(\"column\", \"s1dataA\", \"xpath\", \"/documents/doc/sec1/s1dataA\", DataImporter.MULTI_VALUED, \"true\"));\n    fields.add(createMap(\"column\", \"s1dataB\", \"xpath\", \"/documents/doc/sec1/s1dataB\", DataImporter.MULTI_VALUED, \"true\")); \n    fields.add(createMap(\"column\", \"s1dataC\", \"xpath\", \"/documents/doc/sec1/s1dataC\", DataImporter.MULTI_VALUED, \"true\")); \n    \n    Context c = getContext(null,\n            new VariableResolver(), getDataSource(textMultipleDocuments), Context.FULL_DUMP, fields, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    {  \n      assertEquals(\"1\", result.get(0).get(\"id\"));\n      List a = (List)result.get(0).get(\"a\");\n      List s1dataA = (List)result.get(0).get(\"s1dataA\");\n      List s1dataB = (List)result.get(0).get(\"s1dataB\");\n      List s1dataC = (List)result.get(0).get(\"s1dataC\");      \n      assertEquals(2, a.size());\n      assertEquals(\"id1-a1\", a.get(0));\n      assertEquals(\"id1-a2\", a.get(1));\n      assertEquals(3, s1dataA.size());\n      assertEquals(\"id1-s1dataA-1\", s1dataA.get(0));\n      assertNull(s1dataA.get(1));\n      assertEquals(\"id1-s1dataA-3\", s1dataA.get(2));\n      assertEquals(3, s1dataB.size());\n      assertEquals(\"id1-s1dataB-1\", s1dataB.get(0));\n      assertEquals(\"id1-s1dataB-2\", s1dataB.get(1));\n      assertEquals(\"id1-s1dataB-3\", s1dataB.get(2));\n      assertEquals(3, s1dataC.size());\n      assertNull(s1dataC.get(0));\n      assertNull(s1dataC.get(1));\n      assertNull(s1dataC.get(2));\n    }\n    { \n      assertEquals(\"2\", result.get(1).get(\"id\"));\n      List a = (List)result.get(1).get(\"a\");\n      List s1dataA = (List)result.get(1).get(\"s1dataA\");\n      List s1dataB = (List)result.get(1).get(\"s1dataB\");\n      List s1dataC = (List)result.get(1).get(\"s1dataC\");  \n      assertTrue(a==null || a.size()==0);\n      assertEquals(1, s1dataA.size()); \n      assertNull(s1dataA.get(0));\n      assertEquals(1, s1dataB.size());\n      assertEquals(\"id2-s1dataB-1\", s1dataB.get(0));\n      assertEquals(1, s1dataC.size());\n      assertNull(s1dataC.get(0));\n    }  \n    {\n      assertEquals(\"3\", result.get(2).get(\"id\"));\n      List a = (List)result.get(2).get(\"a\");\n      List s1dataA = (List)result.get(2).get(\"s1dataA\");\n      List s1dataB = (List)result.get(2).get(\"s1dataB\");\n      List s1dataC = (List)result.get(2).get(\"s1dataC\");  \n      assertTrue(a==null || a.size()==0);\n      assertEquals(1, s1dataA.size());\n      assertEquals(\"id3-s1dataA-1\", s1dataA.get(0));\n      assertEquals(1, s1dataB.size());\n      assertNull(s1dataB.get(0));\n      assertEquals(1, s1dataC.size());\n      assertNull(s1dataC.get(0)); \n    }\n    {  \n      assertEquals(\"4\", result.get(3).get(\"id\"));\n      List a = (List)result.get(3).get(\"a\");\n      List s1dataA = (List)result.get(3).get(\"s1dataA\");\n      List s1dataB = (List)result.get(3).get(\"s1dataB\");\n      List s1dataC = (List)result.get(3).get(\"s1dataC\");  \n      assertTrue(a==null || a.size()==0);\n      assertEquals(1, s1dataA.size());\n      assertEquals(\"id4-s1dataA-1\", s1dataA.get(0));\n      assertEquals(1, s1dataB.size());\n      assertEquals(\"id4-s1dataB-1\", s1dataB.get(0));\n      assertEquals(1, s1dataC.size());\n      assertEquals(\"id4-s1dataC-1\", s1dataC.get(0));\n    }\n    {\n      assertEquals(\"5\", result.get(4).get(\"id\"));\n      List a = (List)result.get(4).get(\"a\");\n      List s1dataA = (List)result.get(4).get(\"s1dataA\");\n      List s1dataB = (List)result.get(4).get(\"s1dataB\");\n      List s1dataC = (List)result.get(4).get(\"s1dataC\");  \n      assertTrue(a==null || a.size()==0);      \n      assertEquals(1, s1dataA.size());\n      assertNull(s1dataA.get(0)); \n      assertEquals(1, s1dataB.size());\n      assertNull(s1dataB.get(0)); \n      assertEquals(1, s1dataC.size());\n      assertEquals(\"id5-s1dataC-1\", s1dataC.get(0));\n    }\n    {  \n      assertEquals(\"6\", result.get(5).get(\"id\"));\n      List a = (List)result.get(5).get(\"a\");\n      List s1dataA = (List)result.get(5).get(\"s1dataA\");\n      List s1dataB = (List)result.get(5).get(\"s1dataB\");\n      List s1dataC = (List)result.get(5).get(\"s1dataC\");     \n      assertTrue(a==null || a.size()==0); \n      assertEquals(3, s1dataA.size());\n      assertEquals(\"id6-s1dataA-1\", s1dataA.get(0));\n      assertEquals(\"id6-s1dataA-2\", s1dataA.get(1));\n      assertNull(s1dataA.get(2));\n      assertEquals(3, s1dataB.size());\n      assertEquals(\"id6-s1dataB-1\", s1dataB.get(0));\n      assertEquals(\"id6-s1dataB-2\", s1dataB.get(1));\n      assertEquals(\"id6-s1dataB-3\", s1dataB.get(2));\n      assertEquals(3, s1dataC.size());\n      assertEquals(\"id6-s1dataC-1\", s1dataC.get(0));\n      assertNull(s1dataC.get(1));\n      assertEquals(\"id6-s1dataC-3\", s1dataC.get(2));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#testMultiValuedWithMultipleDocuments().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#testMultiValuedWithMultipleDocuments().mjava","sourceNew":"  @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n  @Test\n  public void testMultiValuedWithMultipleDocuments() throws Exception {\n    Map entityAttrs = createMap(\"name\", \"e\", \"url\", \"testdata.xml\", XPathEntityProcessor.FOR_EACH, \"/documents/doc\");\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"id\", \"xpath\", \"/documents/doc/id\", DataImporter.MULTI_VALUED, \"false\"));\n    fields.add(createMap(\"column\", \"a\", \"xpath\", \"/documents/doc/a\", DataImporter.MULTI_VALUED, \"true\"));\n    fields.add(createMap(\"column\", \"s1dataA\", \"xpath\", \"/documents/doc/sec1/s1dataA\", DataImporter.MULTI_VALUED, \"true\"));\n    fields.add(createMap(\"column\", \"s1dataB\", \"xpath\", \"/documents/doc/sec1/s1dataB\", DataImporter.MULTI_VALUED, \"true\")); \n    fields.add(createMap(\"column\", \"s1dataC\", \"xpath\", \"/documents/doc/sec1/s1dataC\", DataImporter.MULTI_VALUED, \"true\")); \n    \n    Context c = getContext(null,\n            new VariableResolver(), getDataSource(textMultipleDocuments), Context.FULL_DUMP, fields, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    {  \n      assertEquals(\"1\", result.get(0).get(\"id\"));\n      List a = (List)result.get(0).get(\"a\");\n      List s1dataA = (List)result.get(0).get(\"s1dataA\");\n      List s1dataB = (List)result.get(0).get(\"s1dataB\");\n      List s1dataC = (List)result.get(0).get(\"s1dataC\");      \n      assertEquals(2, a.size());\n      assertEquals(\"id1-a1\", a.get(0));\n      assertEquals(\"id1-a2\", a.get(1));\n      assertEquals(3, s1dataA.size());\n      assertEquals(\"id1-s1dataA-1\", s1dataA.get(0));\n      assertNull(s1dataA.get(1));\n      assertEquals(\"id1-s1dataA-3\", s1dataA.get(2));\n      assertEquals(3, s1dataB.size());\n      assertEquals(\"id1-s1dataB-1\", s1dataB.get(0));\n      assertEquals(\"id1-s1dataB-2\", s1dataB.get(1));\n      assertEquals(\"id1-s1dataB-3\", s1dataB.get(2));\n      assertEquals(3, s1dataC.size());\n      assertNull(s1dataC.get(0));\n      assertNull(s1dataC.get(1));\n      assertNull(s1dataC.get(2));\n    }\n    { \n      assertEquals(\"2\", result.get(1).get(\"id\"));\n      List a = (List)result.get(1).get(\"a\");\n      List s1dataA = (List)result.get(1).get(\"s1dataA\");\n      List s1dataB = (List)result.get(1).get(\"s1dataB\");\n      List s1dataC = (List)result.get(1).get(\"s1dataC\");  \n      assertTrue(a==null || a.size()==0);\n      assertEquals(1, s1dataA.size()); \n      assertNull(s1dataA.get(0));\n      assertEquals(1, s1dataB.size());\n      assertEquals(\"id2-s1dataB-1\", s1dataB.get(0));\n      assertEquals(1, s1dataC.size());\n      assertNull(s1dataC.get(0));\n    }  \n    {\n      assertEquals(\"3\", result.get(2).get(\"id\"));\n      List a = (List)result.get(2).get(\"a\");\n      List s1dataA = (List)result.get(2).get(\"s1dataA\");\n      List s1dataB = (List)result.get(2).get(\"s1dataB\");\n      List s1dataC = (List)result.get(2).get(\"s1dataC\");  \n      assertTrue(a==null || a.size()==0);\n      assertEquals(1, s1dataA.size());\n      assertEquals(\"id3-s1dataA-1\", s1dataA.get(0));\n      assertEquals(1, s1dataB.size());\n      assertNull(s1dataB.get(0));\n      assertEquals(1, s1dataC.size());\n      assertNull(s1dataC.get(0)); \n    }\n    {  \n      assertEquals(\"4\", result.get(3).get(\"id\"));\n      List a = (List)result.get(3).get(\"a\");\n      List s1dataA = (List)result.get(3).get(\"s1dataA\");\n      List s1dataB = (List)result.get(3).get(\"s1dataB\");\n      List s1dataC = (List)result.get(3).get(\"s1dataC\");  \n      assertTrue(a==null || a.size()==0);\n      assertEquals(1, s1dataA.size());\n      assertEquals(\"id4-s1dataA-1\", s1dataA.get(0));\n      assertEquals(1, s1dataB.size());\n      assertEquals(\"id4-s1dataB-1\", s1dataB.get(0));\n      assertEquals(1, s1dataC.size());\n      assertEquals(\"id4-s1dataC-1\", s1dataC.get(0));\n    }\n    {\n      assertEquals(\"5\", result.get(4).get(\"id\"));\n      List a = (List)result.get(4).get(\"a\");\n      List s1dataA = (List)result.get(4).get(\"s1dataA\");\n      List s1dataB = (List)result.get(4).get(\"s1dataB\");\n      List s1dataC = (List)result.get(4).get(\"s1dataC\");  \n      assertTrue(a==null || a.size()==0);      \n      assertEquals(1, s1dataA.size());\n      assertNull(s1dataA.get(0)); \n      assertEquals(1, s1dataB.size());\n      assertNull(s1dataB.get(0)); \n      assertEquals(1, s1dataC.size());\n      assertEquals(\"id5-s1dataC-1\", s1dataC.get(0));\n    }\n    {  \n      assertEquals(\"6\", result.get(5).get(\"id\"));\n      List a = (List)result.get(5).get(\"a\");\n      List s1dataA = (List)result.get(5).get(\"s1dataA\");\n      List s1dataB = (List)result.get(5).get(\"s1dataB\");\n      List s1dataC = (List)result.get(5).get(\"s1dataC\");     \n      assertTrue(a==null || a.size()==0); \n      assertEquals(3, s1dataA.size());\n      assertEquals(\"id6-s1dataA-1\", s1dataA.get(0));\n      assertEquals(\"id6-s1dataA-2\", s1dataA.get(1));\n      assertNull(s1dataA.get(2));\n      assertEquals(3, s1dataB.size());\n      assertEquals(\"id6-s1dataB-1\", s1dataB.get(0));\n      assertEquals(\"id6-s1dataB-2\", s1dataB.get(1));\n      assertEquals(\"id6-s1dataB-3\", s1dataB.get(2));\n      assertEquals(3, s1dataC.size());\n      assertEquals(\"id6-s1dataC-1\", s1dataC.get(0));\n      assertNull(s1dataC.get(1));\n      assertEquals(\"id6-s1dataC-3\", s1dataC.get(2));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testMultiValuedWithMultipleDocuments() throws Exception {\n    Map entityAttrs = createMap(\"name\", \"e\", \"url\", \"testdata.xml\", XPathEntityProcessor.FOR_EACH, \"/documents/doc\");\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"id\", \"xpath\", \"/documents/doc/id\", DataImporter.MULTI_VALUED, \"false\"));\n    fields.add(createMap(\"column\", \"a\", \"xpath\", \"/documents/doc/a\", DataImporter.MULTI_VALUED, \"true\"));\n    fields.add(createMap(\"column\", \"s1dataA\", \"xpath\", \"/documents/doc/sec1/s1dataA\", DataImporter.MULTI_VALUED, \"true\"));\n    fields.add(createMap(\"column\", \"s1dataB\", \"xpath\", \"/documents/doc/sec1/s1dataB\", DataImporter.MULTI_VALUED, \"true\")); \n    fields.add(createMap(\"column\", \"s1dataC\", \"xpath\", \"/documents/doc/sec1/s1dataC\", DataImporter.MULTI_VALUED, \"true\")); \n    \n    Context c = getContext(null,\n            new VariableResolver(), getDataSource(textMultipleDocuments), Context.FULL_DUMP, fields, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    {  \n      assertEquals(\"1\", result.get(0).get(\"id\"));\n      List a = (List)result.get(0).get(\"a\");\n      List s1dataA = (List)result.get(0).get(\"s1dataA\");\n      List s1dataB = (List)result.get(0).get(\"s1dataB\");\n      List s1dataC = (List)result.get(0).get(\"s1dataC\");      \n      assertEquals(2, a.size());\n      assertEquals(\"id1-a1\", a.get(0));\n      assertEquals(\"id1-a2\", a.get(1));\n      assertEquals(3, s1dataA.size());\n      assertEquals(\"id1-s1dataA-1\", s1dataA.get(0));\n      assertNull(s1dataA.get(1));\n      assertEquals(\"id1-s1dataA-3\", s1dataA.get(2));\n      assertEquals(3, s1dataB.size());\n      assertEquals(\"id1-s1dataB-1\", s1dataB.get(0));\n      assertEquals(\"id1-s1dataB-2\", s1dataB.get(1));\n      assertEquals(\"id1-s1dataB-3\", s1dataB.get(2));\n      assertEquals(3, s1dataC.size());\n      assertNull(s1dataC.get(0));\n      assertNull(s1dataC.get(1));\n      assertNull(s1dataC.get(2));\n    }\n    { \n      assertEquals(\"2\", result.get(1).get(\"id\"));\n      List a = (List)result.get(1).get(\"a\");\n      List s1dataA = (List)result.get(1).get(\"s1dataA\");\n      List s1dataB = (List)result.get(1).get(\"s1dataB\");\n      List s1dataC = (List)result.get(1).get(\"s1dataC\");  \n      assertTrue(a==null || a.size()==0);\n      assertEquals(1, s1dataA.size()); \n      assertNull(s1dataA.get(0));\n      assertEquals(1, s1dataB.size());\n      assertEquals(\"id2-s1dataB-1\", s1dataB.get(0));\n      assertEquals(1, s1dataC.size());\n      assertNull(s1dataC.get(0));\n    }  \n    {\n      assertEquals(\"3\", result.get(2).get(\"id\"));\n      List a = (List)result.get(2).get(\"a\");\n      List s1dataA = (List)result.get(2).get(\"s1dataA\");\n      List s1dataB = (List)result.get(2).get(\"s1dataB\");\n      List s1dataC = (List)result.get(2).get(\"s1dataC\");  \n      assertTrue(a==null || a.size()==0);\n      assertEquals(1, s1dataA.size());\n      assertEquals(\"id3-s1dataA-1\", s1dataA.get(0));\n      assertEquals(1, s1dataB.size());\n      assertNull(s1dataB.get(0));\n      assertEquals(1, s1dataC.size());\n      assertNull(s1dataC.get(0)); \n    }\n    {  \n      assertEquals(\"4\", result.get(3).get(\"id\"));\n      List a = (List)result.get(3).get(\"a\");\n      List s1dataA = (List)result.get(3).get(\"s1dataA\");\n      List s1dataB = (List)result.get(3).get(\"s1dataB\");\n      List s1dataC = (List)result.get(3).get(\"s1dataC\");  \n      assertTrue(a==null || a.size()==0);\n      assertEquals(1, s1dataA.size());\n      assertEquals(\"id4-s1dataA-1\", s1dataA.get(0));\n      assertEquals(1, s1dataB.size());\n      assertEquals(\"id4-s1dataB-1\", s1dataB.get(0));\n      assertEquals(1, s1dataC.size());\n      assertEquals(\"id4-s1dataC-1\", s1dataC.get(0));\n    }\n    {\n      assertEquals(\"5\", result.get(4).get(\"id\"));\n      List a = (List)result.get(4).get(\"a\");\n      List s1dataA = (List)result.get(4).get(\"s1dataA\");\n      List s1dataB = (List)result.get(4).get(\"s1dataB\");\n      List s1dataC = (List)result.get(4).get(\"s1dataC\");  \n      assertTrue(a==null || a.size()==0);      \n      assertEquals(1, s1dataA.size());\n      assertNull(s1dataA.get(0)); \n      assertEquals(1, s1dataB.size());\n      assertNull(s1dataB.get(0)); \n      assertEquals(1, s1dataC.size());\n      assertEquals(\"id5-s1dataC-1\", s1dataC.get(0));\n    }\n    {  \n      assertEquals(\"6\", result.get(5).get(\"id\"));\n      List a = (List)result.get(5).get(\"a\");\n      List s1dataA = (List)result.get(5).get(\"s1dataA\");\n      List s1dataB = (List)result.get(5).get(\"s1dataB\");\n      List s1dataC = (List)result.get(5).get(\"s1dataC\");     \n      assertTrue(a==null || a.size()==0); \n      assertEquals(3, s1dataA.size());\n      assertEquals(\"id6-s1dataA-1\", s1dataA.get(0));\n      assertEquals(\"id6-s1dataA-2\", s1dataA.get(1));\n      assertNull(s1dataA.get(2));\n      assertEquals(3, s1dataB.size());\n      assertEquals(\"id6-s1dataB-1\", s1dataB.get(0));\n      assertEquals(\"id6-s1dataB-2\", s1dataB.get(1));\n      assertEquals(\"id6-s1dataB-3\", s1dataB.get(2));\n      assertEquals(3, s1dataC.size());\n      assertEquals(\"id6-s1dataC-1\", s1dataC.get(0));\n      assertNull(s1dataC.get(1));\n      assertEquals(\"id6-s1dataC-3\", s1dataC.get(2));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#testMultiValuedWithMultipleDocuments().mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n  @Test\n  public void testMultiValuedWithMultipleDocuments() throws Exception {\n    Map entityAttrs = createMap(\"name\", \"e\", \"url\", \"testdata.xml\", XPathEntityProcessor.FOR_EACH, \"/documents/doc\");\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"id\", \"xpath\", \"/documents/doc/id\", DataImporter.MULTI_VALUED, \"false\"));\n    fields.add(createMap(\"column\", \"a\", \"xpath\", \"/documents/doc/a\", DataImporter.MULTI_VALUED, \"true\"));\n    fields.add(createMap(\"column\", \"s1dataA\", \"xpath\", \"/documents/doc/sec1/s1dataA\", DataImporter.MULTI_VALUED, \"true\"));\n    fields.add(createMap(\"column\", \"s1dataB\", \"xpath\", \"/documents/doc/sec1/s1dataB\", DataImporter.MULTI_VALUED, \"true\")); \n    fields.add(createMap(\"column\", \"s1dataC\", \"xpath\", \"/documents/doc/sec1/s1dataC\", DataImporter.MULTI_VALUED, \"true\")); \n    \n    Context c = getContext(null,\n            new VariableResolver(), getDataSource(textMultipleDocuments), Context.FULL_DUMP, fields, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    {  \n      assertEquals(\"1\", result.get(0).get(\"id\"));\n      List a = (List)result.get(0).get(\"a\");\n      List s1dataA = (List)result.get(0).get(\"s1dataA\");\n      List s1dataB = (List)result.get(0).get(\"s1dataB\");\n      List s1dataC = (List)result.get(0).get(\"s1dataC\");      \n      assertEquals(2, a.size());\n      assertEquals(\"id1-a1\", a.get(0));\n      assertEquals(\"id1-a2\", a.get(1));\n      assertEquals(3, s1dataA.size());\n      assertEquals(\"id1-s1dataA-1\", s1dataA.get(0));\n      assertNull(s1dataA.get(1));\n      assertEquals(\"id1-s1dataA-3\", s1dataA.get(2));\n      assertEquals(3, s1dataB.size());\n      assertEquals(\"id1-s1dataB-1\", s1dataB.get(0));\n      assertEquals(\"id1-s1dataB-2\", s1dataB.get(1));\n      assertEquals(\"id1-s1dataB-3\", s1dataB.get(2));\n      assertEquals(3, s1dataC.size());\n      assertNull(s1dataC.get(0));\n      assertNull(s1dataC.get(1));\n      assertNull(s1dataC.get(2));\n    }\n    { \n      assertEquals(\"2\", result.get(1).get(\"id\"));\n      List a = (List)result.get(1).get(\"a\");\n      List s1dataA = (List)result.get(1).get(\"s1dataA\");\n      List s1dataB = (List)result.get(1).get(\"s1dataB\");\n      List s1dataC = (List)result.get(1).get(\"s1dataC\");  \n      assertTrue(a==null || a.size()==0);\n      assertEquals(1, s1dataA.size()); \n      assertNull(s1dataA.get(0));\n      assertEquals(1, s1dataB.size());\n      assertEquals(\"id2-s1dataB-1\", s1dataB.get(0));\n      assertEquals(1, s1dataC.size());\n      assertNull(s1dataC.get(0));\n    }  \n    {\n      assertEquals(\"3\", result.get(2).get(\"id\"));\n      List a = (List)result.get(2).get(\"a\");\n      List s1dataA = (List)result.get(2).get(\"s1dataA\");\n      List s1dataB = (List)result.get(2).get(\"s1dataB\");\n      List s1dataC = (List)result.get(2).get(\"s1dataC\");  \n      assertTrue(a==null || a.size()==0);\n      assertEquals(1, s1dataA.size());\n      assertEquals(\"id3-s1dataA-1\", s1dataA.get(0));\n      assertEquals(1, s1dataB.size());\n      assertNull(s1dataB.get(0));\n      assertEquals(1, s1dataC.size());\n      assertNull(s1dataC.get(0)); \n    }\n    {  \n      assertEquals(\"4\", result.get(3).get(\"id\"));\n      List a = (List)result.get(3).get(\"a\");\n      List s1dataA = (List)result.get(3).get(\"s1dataA\");\n      List s1dataB = (List)result.get(3).get(\"s1dataB\");\n      List s1dataC = (List)result.get(3).get(\"s1dataC\");  \n      assertTrue(a==null || a.size()==0);\n      assertEquals(1, s1dataA.size());\n      assertEquals(\"id4-s1dataA-1\", s1dataA.get(0));\n      assertEquals(1, s1dataB.size());\n      assertEquals(\"id4-s1dataB-1\", s1dataB.get(0));\n      assertEquals(1, s1dataC.size());\n      assertEquals(\"id4-s1dataC-1\", s1dataC.get(0));\n    }\n    {\n      assertEquals(\"5\", result.get(4).get(\"id\"));\n      List a = (List)result.get(4).get(\"a\");\n      List s1dataA = (List)result.get(4).get(\"s1dataA\");\n      List s1dataB = (List)result.get(4).get(\"s1dataB\");\n      List s1dataC = (List)result.get(4).get(\"s1dataC\");  \n      assertTrue(a==null || a.size()==0);      \n      assertEquals(1, s1dataA.size());\n      assertNull(s1dataA.get(0)); \n      assertEquals(1, s1dataB.size());\n      assertNull(s1dataB.get(0)); \n      assertEquals(1, s1dataC.size());\n      assertEquals(\"id5-s1dataC-1\", s1dataC.get(0));\n    }\n    {  \n      assertEquals(\"6\", result.get(5).get(\"id\"));\n      List a = (List)result.get(5).get(\"a\");\n      List s1dataA = (List)result.get(5).get(\"s1dataA\");\n      List s1dataB = (List)result.get(5).get(\"s1dataB\");\n      List s1dataC = (List)result.get(5).get(\"s1dataC\");     \n      assertTrue(a==null || a.size()==0); \n      assertEquals(3, s1dataA.size());\n      assertEquals(\"id6-s1dataA-1\", s1dataA.get(0));\n      assertEquals(\"id6-s1dataA-2\", s1dataA.get(1));\n      assertNull(s1dataA.get(2));\n      assertEquals(3, s1dataB.size());\n      assertEquals(\"id6-s1dataB-1\", s1dataB.get(0));\n      assertEquals(\"id6-s1dataB-2\", s1dataB.get(1));\n      assertEquals(\"id6-s1dataB-3\", s1dataB.get(2));\n      assertEquals(3, s1dataC.size());\n      assertEquals(\"id6-s1dataC-1\", s1dataC.get(0));\n      assertNull(s1dataC.get(1));\n      assertEquals(\"id6-s1dataC-3\", s1dataC.get(2));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3c0dbd7f9c2fb9dac33f6bd9e4d7199e309280f9"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"3c0dbd7f9c2fb9dac33f6bd9e4d7199e309280f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3c0dbd7f9c2fb9dac33f6bd9e4d7199e309280f9"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"3c0dbd7f9c2fb9dac33f6bd9e4d7199e309280f9":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}