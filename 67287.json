{"path":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","commits":[{"id":"aa8dcd4adc562c6e8da67c42872ef9194f8598fa","date":1108145465,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","pathOld":"sandbox/contributions/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","sourceNew":"    protected void setUp () throws Exception {\n        super.setUp();\n\n        //create a user index\n        userindex=new RAMDirectory();\n        IndexWriter writer=new IndexWriter(userindex, new SimpleAnalyzer(), true);\n\n        for (int i=0; i<1000; i++) {\n            Document doc=new Document();\n            doc.add(Field.Text(\"field1\", English.intToEnglish(i)));\n            doc.add(Field.Text(\"field2\", English.intToEnglish(i+1))); // + word thousand\n            writer.addDocument(doc);\n        }\n        writer.close();\n\n        // create the spellChecker\n        File file=new File(\"d://test\");\n        spellindex=FSDirectory.getDirectory(file, true);\n        spellChecker=new SpellChecker(spellindex);\n    }\n\n","sourceOld":"    protected void setUp () throws Exception {\n        super.setUp();\n\n        //create a user index\n        userindex=new RAMDirectory();\n        IndexWriter writer=new IndexWriter(userindex, new SimpleAnalyzer(), true);\n\n        for (int i=0; i<1000; i++) {\n            Document doc=new Document();\n            doc.add(Field.Text(\"field1\", English.intToEnglish(i)));\n            doc.add(Field.Text(\"field2\", English.intToEnglish(i+1))); // + word thousand\n            writer.addDocument(doc);\n        }\n        writer.close();\n\n        // create the spellChecker\n        File file=new File(\"d://test\");\n        spellindex=FSDirectory.getDirectory(file, true);\n        spellChecker=new SpellChecker(spellindex);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a614b98c1cfd216f3f63751e3ae13364a3bb2810","date":1113263282,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","pathOld":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","sourceNew":"  protected void setUp() throws Exception {\n    super.setUp();\n\n    //create a user index\n    userindex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new SimpleAnalyzer(), true);\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field1\", English.intToEnglish(i), Field.Store.YES, Field.Index.TOKENIZED));\n      doc.add(new Field(\"field2\", English.intToEnglish(i + 1), Field.Store.YES, Field.Index.TOKENIZED)); // + word thousand\n      writer.addDocument(doc);\n    }\n    writer.close();\n\n    // create the spellChecker\n    spellindex = new RAMDirectory();\n    spellChecker = new SpellChecker(spellindex);\n  }\n\n","sourceOld":"    protected void setUp () throws Exception {\n        super.setUp();\n\n        //create a user index\n        userindex=new RAMDirectory();\n        IndexWriter writer=new IndexWriter(userindex, new SimpleAnalyzer(), true);\n\n        for (int i=0; i<1000; i++) {\n            Document doc=new Document();\n            doc.add(Field.Text(\"field1\", English.intToEnglish(i)));\n            doc.add(Field.Text(\"field2\", English.intToEnglish(i+1))); // + word thousand\n            writer.addDocument(doc);\n        }\n        writer.close();\n\n        // create the spellChecker\n        File file=new File(\"d://test\");\n        spellindex=FSDirectory.getDirectory(file, true);\n        spellChecker=new SpellChecker(spellindex);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6000179efff4c320dafa76c7f0f088e44c4df0d0","date":1213765317,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","pathOld":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","sourceNew":"  protected void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new SimpleAnalyzer(), true);\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field1\", English.intToEnglish(i), Field.Store.YES, Field.Index.TOKENIZED));\n      doc.add(new Field(\"field2\", English.intToEnglish(i + 1), Field.Store.YES, Field.Index.TOKENIZED)); // + word thousand\n      writer.addDocument(doc);\n    }\n    writer.close();\n\n    // create the spellChecker\n    spellindex = new RAMDirectory();\n    spellChecker = new SpellChecker(spellindex);\n  }\n\n","sourceOld":"  protected void setUp() throws Exception {\n    super.setUp();\n\n    //create a user index\n    userindex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new SimpleAnalyzer(), true);\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field1\", English.intToEnglish(i), Field.Store.YES, Field.Index.TOKENIZED));\n      doc.add(new Field(\"field2\", English.intToEnglish(i + 1), Field.Store.YES, Field.Index.TOKENIZED)); // + word thousand\n      writer.addDocument(doc);\n    }\n    writer.close();\n\n    // create the spellChecker\n    spellindex = new RAMDirectory();\n    spellChecker = new SpellChecker(spellindex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","pathOld":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","sourceNew":"  protected void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new SimpleAnalyzer(), true);\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field1\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(\"field2\", English.intToEnglish(i + 1), Field.Store.YES, Field.Index.ANALYZED)); // + word thousand\n      writer.addDocument(doc);\n    }\n    writer.close();\n\n    // create the spellChecker\n    spellindex = new RAMDirectory();\n    spellChecker = new SpellChecker(spellindex);\n  }\n\n","sourceOld":"  protected void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new SimpleAnalyzer(), true);\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field1\", English.intToEnglish(i), Field.Store.YES, Field.Index.TOKENIZED));\n      doc.add(new Field(\"field2\", English.intToEnglish(i + 1), Field.Store.YES, Field.Index.TOKENIZED)); // + word thousand\n      writer.addDocument(doc);\n    }\n    writer.close();\n\n    // create the spellChecker\n    spellindex = new RAMDirectory();\n    spellChecker = new SpellChecker(spellindex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","pathOld":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","sourceNew":"  protected void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field1\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(\"field2\", English.intToEnglish(i + 1), Field.Store.YES, Field.Index.ANALYZED)); // + word thousand\n      writer.addDocument(doc);\n    }\n    writer.close();\n\n    // create the spellChecker\n    spellindex = new RAMDirectory();\n    spellChecker = new SpellChecker(spellindex);\n  }\n\n","sourceOld":"  protected void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new SimpleAnalyzer(), true);\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field1\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(\"field2\", English.intToEnglish(i + 1), Field.Store.YES, Field.Index.ANALYZED)); // + word thousand\n      writer.addDocument(doc);\n    }\n    writer.close();\n\n    // create the spellChecker\n    spellindex = new RAMDirectory();\n    spellChecker = new SpellChecker(spellindex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","pathOld":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field1\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(\"field2\", English.intToEnglish(i + 1), Field.Store.YES, Field.Index.ANALYZED)); // + word thousand\n      writer.addDocument(doc);\n    }\n    writer.close();\n\n    // create the spellChecker\n    spellindex = new RAMDirectory();\n    spellChecker = new SpellChecker(spellindex);\n  }\n\n","sourceOld":"  protected void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field1\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(\"field2\", English.intToEnglish(i + 1), Field.Store.YES, Field.Index.ANALYZED)); // + word thousand\n      writer.addDocument(doc);\n    }\n    writer.close();\n\n    // create the spellChecker\n    spellindex = new RAMDirectory();\n    spellChecker = new SpellChecker(spellindex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"edfb471a48a4bd226eefc6d6fd96195d9ce1db73","date":1260015437,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","pathOld":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field1\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(\"field2\", English.intToEnglish(i + 1), Field.Store.YES, Field.Index.ANALYZED)); // + word thousand\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searchers = Collections.synchronizedList(new ArrayList<IndexSearcher>());\n    // create the spellChecker\n    spellindex = new RAMDirectory();\n    spellChecker = new SpellCheckerMock(spellindex);\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field1\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(\"field2\", English.intToEnglish(i + 1), Field.Store.YES, Field.Index.ANALYZED)); // + word thousand\n      writer.addDocument(doc);\n    }\n    writer.close();\n\n    // create the spellChecker\n    spellindex = new RAMDirectory();\n    spellChecker = new SpellChecker(spellindex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ced3401b9c4e7ed2be67711dbc83e48b81aa736","date":1265394056,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","pathOld":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new SimpleAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field1\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(\"field2\", English.intToEnglish(i + 1), Field.Store.YES, Field.Index.ANALYZED)); // + word thousand\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searchers = Collections.synchronizedList(new ArrayList<IndexSearcher>());\n    // create the spellChecker\n    spellindex = new RAMDirectory();\n    spellChecker = new SpellCheckerMock(spellindex);\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field1\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(\"field2\", English.intToEnglish(i + 1), Field.Store.YES, Field.Index.ANALYZED)); // + word thousand\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searchers = Collections.synchronizedList(new ArrayList<IndexSearcher>());\n    // create the spellChecker\n    spellindex = new RAMDirectory();\n    spellChecker = new SpellCheckerMock(spellindex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","pathOld":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field1\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(\"field2\", English.intToEnglish(i + 1), Field.Store.YES, Field.Index.ANALYZED)); // + word thousand\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searchers = Collections.synchronizedList(new ArrayList<IndexSearcher>());\n    // create the spellChecker\n    spellindex = new RAMDirectory();\n    spellChecker = new SpellCheckerMock(spellindex);\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new SimpleAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field1\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(\"field2\", English.intToEnglish(i + 1), Field.Store.YES, Field.Index.ANALYZED)); // + word thousand\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searchers = Collections.synchronizedList(new ArrayList<IndexSearcher>());\n    // create the spellChecker\n    spellindex = new RAMDirectory();\n    spellChecker = new SpellCheckerMock(spellindex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","pathOld":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new IndexWriterConfig(TEST_VERSION_CURRENT));\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field1\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(\"field2\", English.intToEnglish(i + 1), Field.Store.YES, Field.Index.ANALYZED)); // + word thousand\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searchers = Collections.synchronizedList(new ArrayList<IndexSearcher>());\n    // create the spellChecker\n    spellindex = new RAMDirectory();\n    spellChecker = new SpellCheckerMock(spellindex);\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field1\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(\"field2\", English.intToEnglish(i + 1), Field.Store.YES, Field.Index.ANALYZED)); // + word thousand\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searchers = Collections.synchronizedList(new ArrayList<IndexSearcher>());\n    // create the spellChecker\n    spellindex = new RAMDirectory();\n    spellChecker = new SpellCheckerMock(spellindex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","pathOld":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field1\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(\"field2\", English.intToEnglish(i + 1), Field.Store.YES, Field.Index.ANALYZED)); // + word thousand\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searchers = Collections.synchronizedList(new ArrayList<IndexSearcher>());\n    // create the spellChecker\n    spellindex = new RAMDirectory();\n    spellChecker = new SpellCheckerMock(spellindex);\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new IndexWriterConfig(TEST_VERSION_CURRENT));\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field1\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(\"field2\", English.intToEnglish(i + 1), Field.Store.YES, Field.Index.ANALYZED)); // + word thousand\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searchers = Collections.synchronizedList(new ArrayList<IndexSearcher>());\n    // create the spellChecker\n    spellindex = new RAMDirectory();\n    spellChecker = new SpellCheckerMock(spellindex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","pathOld":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field1\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(\"field2\", English.intToEnglish(i + 1), Field.Store.YES, Field.Index.ANALYZED)); // + word thousand\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searchers = Collections.synchronizedList(new ArrayList<IndexSearcher>());\n    // create the spellChecker\n    spellindex = new RAMDirectory();\n    spellChecker = new SpellCheckerMock(spellindex);\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field1\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(\"field2\", English.intToEnglish(i + 1), Field.Store.YES, Field.Index.ANALYZED)); // + word thousand\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searchers = Collections.synchronizedList(new ArrayList<IndexSearcher>());\n    // create the spellChecker\n    spellindex = new RAMDirectory();\n    spellChecker = new SpellCheckerMock(spellindex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","pathOld":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field1\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(\"field2\", English.intToEnglish(i + 1), Field.Store.YES, Field.Index.ANALYZED)); // + word thousand\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searchers = Collections.synchronizedList(new ArrayList<IndexSearcher>());\n    // create the spellChecker\n    spellindex = new RAMDirectory();\n    spellChecker = new SpellCheckerMock(spellindex);\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field1\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(\"field2\", English.intToEnglish(i + 1), Field.Store.YES, Field.Index.ANALYZED)); // + word thousand\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searchers = Collections.synchronizedList(new ArrayList<IndexSearcher>());\n    // create the spellChecker\n    spellindex = new RAMDirectory();\n    spellChecker = new SpellCheckerMock(spellindex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1cedb00d2dd44640194401179358a2e3ba6051bf":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"edfb471a48a4bd226eefc6d6fd96195d9ce1db73":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["87c966e9308847938a7c905c2e46a56d8df788b8"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["6000179efff4c320dafa76c7f0f088e44c4df0d0"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"6ced3401b9c4e7ed2be67711dbc83e48b81aa736":["edfb471a48a4bd226eefc6d6fd96195d9ce1db73"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"a614b98c1cfd216f3f63751e3ae13364a3bb2810":["aa8dcd4adc562c6e8da67c42872ef9194f8598fa"],"aa8dcd4adc562c6e8da67c42872ef9194f8598fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"87c966e9308847938a7c905c2e46a56d8df788b8":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"6000179efff4c320dafa76c7f0f088e44c4df0d0":["a614b98c1cfd216f3f63751e3ae13364a3bb2810"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["6ced3401b9c4e7ed2be67711dbc83e48b81aa736"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"edfb471a48a4bd226eefc6d6fd96195d9ce1db73":["6ced3401b9c4e7ed2be67711dbc83e48b81aa736"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["edfb471a48a4bd226eefc6d6fd96195d9ce1db73"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["87c966e9308847938a7c905c2e46a56d8df788b8"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"6ced3401b9c4e7ed2be67711dbc83e48b81aa736":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a614b98c1cfd216f3f63751e3ae13364a3bb2810":["6000179efff4c320dafa76c7f0f088e44c4df0d0"],"aa8dcd4adc562c6e8da67c42872ef9194f8598fa":["a614b98c1cfd216f3f63751e3ae13364a3bb2810"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aa8dcd4adc562c6e8da67c42872ef9194f8598fa"],"87c966e9308847938a7c905c2e46a56d8df788b8":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"6000179efff4c320dafa76c7f0f088e44c4df0d0":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}