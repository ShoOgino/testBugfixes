{"path":"lucene/src/java/org/apache/lucene/index/FilterIndexReader#FilterIndexReader(IndexReader).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FilterIndexReader#FilterIndexReader(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/index/FilterIndexReader#FilterIndexReader(IndexReader).mjava","sourceNew":"  /**\n   * <p>Construct a FilterIndexReader based on the specified base reader.\n   * Directory locking for delete, undeleteAll, and setNorm operations is\n   * left to the base reader.</p>\n   * <p>Note that base reader is closed if this FilterIndexReader is closed.</p>\n   * @param in specified base reader.\n   */\n  public FilterIndexReader(IndexReader in) {\n    super();\n    this.in = in;\n  }\n\n","sourceOld":"  /**\n   * <p>Construct a FilterIndexReader based on the specified base reader.\n   * Directory locking for delete, undeleteAll, and setNorm operations is\n   * left to the base reader.</p>\n   * <p>Note that base reader is closed if this FilterIndexReader is closed.</p>\n   * @param in specified base reader.\n   */\n  public FilterIndexReader(IndexReader in) {\n    super();\n    this.in = in;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340","date":1295995357,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FilterIndexReader#FilterIndexReader(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FilterIndexReader#FilterIndexReader(IndexReader).mjava","sourceNew":"  /**\n   * <p>Construct a FilterIndexReader based on the specified base reader.\n   * Directory locking for delete, undeleteAll, and setNorm operations is\n   * left to the base reader.</p>\n   * <p>Note that base reader is closed if this FilterIndexReader is closed.</p>\n   * @param in specified base reader.\n   */\n  public FilterIndexReader(IndexReader in) {\n    super();\n    this.in = in;\n    readerFinishedListeners = Collections.synchronizedSet(new HashSet<ReaderFinishedListener>());\n  }\n\n","sourceOld":"  /**\n   * <p>Construct a FilterIndexReader based on the specified base reader.\n   * Directory locking for delete, undeleteAll, and setNorm operations is\n   * left to the base reader.</p>\n   * <p>Note that base reader is closed if this FilterIndexReader is closed.</p>\n   * @param in specified base reader.\n   */\n  public FilterIndexReader(IndexReader in) {\n    super();\n    this.in = in;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed47693b1e536083c1fa52f3c2994098f3154d3c","date":1296080277,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FilterIndexReader#FilterIndexReader(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FilterIndexReader#FilterIndexReader(IndexReader).mjava","sourceNew":"  /**\n   * <p>Construct a FilterIndexReader based on the specified base reader.\n   * Directory locking for delete, undeleteAll, and setNorm operations is\n   * left to the base reader.</p>\n   * <p>Note that base reader is closed if this FilterIndexReader is closed.</p>\n   * @param in specified base reader.\n   */\n  public FilterIndexReader(IndexReader in) {\n    super();\n    this.in = in;\n    readerFinishedListeners = new MapBackedSet<ReaderFinishedListener>(new ConcurrentHashMap<ReaderFinishedListener,Boolean>());\n  }\n\n","sourceOld":"  /**\n   * <p>Construct a FilterIndexReader based on the specified base reader.\n   * Directory locking for delete, undeleteAll, and setNorm operations is\n   * left to the base reader.</p>\n   * <p>Note that base reader is closed if this FilterIndexReader is closed.</p>\n   * @param in specified base reader.\n   */\n  public FilterIndexReader(IndexReader in) {\n    super();\n    this.in = in;\n    readerFinishedListeners = Collections.synchronizedSet(new HashSet<ReaderFinishedListener>());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FilterIndexReader#FilterIndexReader(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FilterIndexReader#FilterIndexReader(IndexReader).mjava","sourceNew":"  /**\n   * <p>Construct a FilterIndexReader based on the specified base reader.\n   * Directory locking for delete, undeleteAll, and setNorm operations is\n   * left to the base reader.</p>\n   * <p>Note that base reader is closed if this FilterIndexReader is closed.</p>\n   * @param in specified base reader.\n   */\n  public FilterIndexReader(IndexReader in) {\n    super();\n    this.in = in;\n    readerFinishedListeners = new MapBackedSet<ReaderFinishedListener>(new ConcurrentHashMap<ReaderFinishedListener,Boolean>());\n  }\n\n","sourceOld":"  /**\n   * <p>Construct a FilterIndexReader based on the specified base reader.\n   * Directory locking for delete, undeleteAll, and setNorm operations is\n   * left to the base reader.</p>\n   * <p>Note that base reader is closed if this FilterIndexReader is closed.</p>\n   * @param in specified base reader.\n   */\n  public FilterIndexReader(IndexReader in) {\n    super();\n    this.in = in;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FilterIndexReader#FilterIndexReader(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FilterIndexReader#FilterIndexReader(IndexReader).mjava","sourceNew":"  /**\n   * <p>Construct a FilterIndexReader based on the specified base reader.\n   * Directory locking for delete, undeleteAll, and setNorm operations is\n   * left to the base reader.</p>\n   * <p>Note that base reader is closed if this FilterIndexReader is closed.</p>\n   * @param in specified base reader.\n   */\n  public FilterIndexReader(IndexReader in) {\n    super();\n    this.in = in;\n    readerFinishedListeners = new MapBackedSet<ReaderFinishedListener>(new ConcurrentHashMap<ReaderFinishedListener,Boolean>());\n  }\n\n","sourceOld":"  /**\n   * <p>Construct a FilterIndexReader based on the specified base reader.\n   * Directory locking for delete, undeleteAll, and setNorm operations is\n   * left to the base reader.</p>\n   * <p>Note that base reader is closed if this FilterIndexReader is closed.</p>\n   * @param in specified base reader.\n   */\n  public FilterIndexReader(IndexReader in) {\n    super();\n    this.in = in;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4122a26e1fd0457a340616673a3d3aada370f713","date":1322955654,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FilterIndexReader#FilterIndexReader(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FilterIndexReader#FilterIndexReader(IndexReader).mjava","sourceNew":"  /**\n   * <p>Construct a FilterIndexReader based on the specified base reader.\n   * Directory locking for delete, undeleteAll operations is\n   * left to the base reader.</p>\n   * <p>Note that base reader is closed if this FilterIndexReader is closed.</p>\n   * @param in specified base reader.\n   */\n  public FilterIndexReader(IndexReader in) {\n    super();\n    this.in = in;\n    readerFinishedListeners = new MapBackedSet<ReaderFinishedListener>(new ConcurrentHashMap<ReaderFinishedListener,Boolean>());\n  }\n\n","sourceOld":"  /**\n   * <p>Construct a FilterIndexReader based on the specified base reader.\n   * Directory locking for delete, undeleteAll, and setNorm operations is\n   * left to the base reader.</p>\n   * <p>Note that base reader is closed if this FilterIndexReader is closed.</p>\n   * @param in specified base reader.\n   */\n  public FilterIndexReader(IndexReader in) {\n    super();\n    this.in = in;\n    readerFinishedListeners = new MapBackedSet<ReaderFinishedListener>(new ConcurrentHashMap<ReaderFinishedListener,Boolean>());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75ec8c9aaa10ac00b30fd4c2465409770c838f7b","date":1323020115,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FilterIndexReader#FilterIndexReader(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FilterIndexReader#FilterIndexReader(IndexReader).mjava","sourceNew":"  /**\n   * <p>Construct a FilterIndexReader based on the specified base reader.\n   * <p>Note that base reader is closed if this FilterIndexReader is closed.</p>\n   * @param in specified base reader.\n   */\n  public FilterIndexReader(IndexReader in) {\n    super();\n    this.in = in;\n    readerFinishedListeners = new MapBackedSet<ReaderFinishedListener>(new ConcurrentHashMap<ReaderFinishedListener,Boolean>());\n  }\n\n","sourceOld":"  /**\n   * <p>Construct a FilterIndexReader based on the specified base reader.\n   * Directory locking for delete, undeleteAll operations is\n   * left to the base reader.</p>\n   * <p>Note that base reader is closed if this FilterIndexReader is closed.</p>\n   * @param in specified base reader.\n   */\n  public FilterIndexReader(IndexReader in) {\n    super();\n    this.in = in;\n    readerFinishedListeners = new MapBackedSet<ReaderFinishedListener>(new ConcurrentHashMap<ReaderFinishedListener,Boolean>());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FilterIndexReader#FilterIndexReader(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FilterIndexReader#FilterIndexReader(IndexReader).mjava","sourceNew":"  /**\n   * <p>Construct a FilterIndexReader based on the specified base reader.\n   * <p>Note that base reader is closed if this FilterIndexReader is closed.</p>\n   * @param in specified base reader.\n   */\n  public FilterIndexReader(IndexReader in) {\n    super();\n    this.in = in;\n    readerFinishedListeners = new MapBackedSet<ReaderFinishedListener>(new ConcurrentHashMap<ReaderFinishedListener,Boolean>());\n  }\n\n","sourceOld":"  /**\n   * <p>Construct a FilterIndexReader based on the specified base reader.\n   * Directory locking for delete, undeleteAll, and setNorm operations is\n   * left to the base reader.</p>\n   * <p>Note that base reader is closed if this FilterIndexReader is closed.</p>\n   * @param in specified base reader.\n   */\n  public FilterIndexReader(IndexReader in) {\n    super();\n    this.in = in;\n    readerFinishedListeners = new MapBackedSet<ReaderFinishedListener>(new ConcurrentHashMap<ReaderFinishedListener,Boolean>());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FilterIndexReader#FilterIndexReader(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FilterIndexReader#FilterIndexReader(IndexReader).mjava","sourceNew":"  /**\n   * <p>Construct a FilterIndexReader based on the specified base reader.\n   * <p>Note that base reader is closed if this FilterIndexReader is closed.</p>\n   * @param in specified base reader.\n   */\n  public FilterIndexReader(IndexReader in) {\n    super();\n    this.in = in;\n    readerFinishedListeners = new MapBackedSet<ReaderFinishedListener>(new ConcurrentHashMap<ReaderFinishedListener,Boolean>());\n  }\n\n","sourceOld":"  /**\n   * <p>Construct a FilterIndexReader based on the specified base reader.\n   * Directory locking for delete, undeleteAll, and setNorm operations is\n   * left to the base reader.</p>\n   * <p>Note that base reader is closed if this FilterIndexReader is closed.</p>\n   * @param in specified base reader.\n   */\n  public FilterIndexReader(IndexReader in) {\n    super();\n    this.in = in;\n    readerFinishedListeners = new MapBackedSet<ReaderFinishedListener>(new ConcurrentHashMap<ReaderFinishedListener,Boolean>());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeb24fe119d55091148e2a3d94e80c9e349d886c","date":1323807643,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FilterIndexReader#FilterIndexReader(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FilterIndexReader#FilterIndexReader(IndexReader).mjava","sourceNew":"  /**\n   * <p>Construct a FilterIndexReader based on the specified base reader.\n   * <p>Note that base reader is closed if this FilterIndexReader is closed.</p>\n   * @param in specified base reader.\n   */\n  public FilterIndexReader(IndexReader in) {\n    super();\n    this.in = in;\n  }\n\n","sourceOld":"  /**\n   * <p>Construct a FilterIndexReader based on the specified base reader.\n   * <p>Note that base reader is closed if this FilterIndexReader is closed.</p>\n   * @param in specified base reader.\n   */\n  public FilterIndexReader(IndexReader in) {\n    super();\n    this.in = in;\n    readerFinishedListeners = new MapBackedSet<ReaderFinishedListener>(new ConcurrentHashMap<ReaderFinishedListener,Boolean>());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FilterIndexReader#FilterIndexReader(AtomicIndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FilterIndexReader#FilterIndexReader(IndexReader).mjava","sourceNew":"  /**\n   * <p>Construct a FilterIndexReader based on the specified base reader.\n   * <p>Note that base reader is closed if this FilterIndexReader is closed.</p>\n   * @param in specified base reader.\n   */\n  public FilterIndexReader(AtomicIndexReader in) {\n    super();\n    this.in = in;\n  }\n\n","sourceOld":"  /**\n   * <p>Construct a FilterIndexReader based on the specified base reader.\n   * <p>Note that base reader is closed if this FilterIndexReader is closed.</p>\n   * @param in specified base reader.\n   */\n  public FilterIndexReader(IndexReader in) {\n    super();\n    this.in = in;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FilterIndexReader#FilterIndexReader(AtomicReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FilterIndexReader#FilterIndexReader(IndexReader).mjava","sourceNew":"  /**\n   * <p>Construct a FilterIndexReader based on the specified base reader.\n   * <p>Note that base reader is closed if this FilterIndexReader is closed.</p>\n   * @param in specified base reader.\n   */\n  public FilterIndexReader(AtomicReader in) {\n    super();\n    this.in = in;\n  }\n\n","sourceOld":"  /**\n   * <p>Construct a FilterIndexReader based on the specified base reader.\n   * <p>Note that base reader is closed if this FilterIndexReader is closed.</p>\n   * @param in specified base reader.\n   */\n  public FilterIndexReader(IndexReader in) {\n    super();\n    this.in = in;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["4122a26e1fd0457a340616673a3d3aada370f713"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["ed47693b1e536083c1fa52f3c2994098f3154d3c","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ed47693b1e536083c1fa52f3c2994098f3154d3c":["cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["eeb24fe119d55091148e2a3d94e80c9e349d886c","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9454a6510e2db155fb01faa5c049b06ece95fab9","ed47693b1e536083c1fa52f3c2994098f3154d3c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eeb24fe119d55091148e2a3d94e80c9e349d886c":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ed47693b1e536083c1fa52f3c2994098f3154d3c","75ec8c9aaa10ac00b30fd4c2465409770c838f7b"],"4122a26e1fd0457a340616673a3d3aada370f713":["ed47693b1e536083c1fa52f3c2994098f3154d3c"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["9454a6510e2db155fb01faa5c049b06ece95fab9","ed47693b1e536083c1fa52f3c2994098f3154d3c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["eeb24fe119d55091148e2a3d94e80c9e349d886c"]},"commit2Childs":{"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"ed47693b1e536083c1fa52f3c2994098f3154d3c":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","29ef99d61cda9641b6250bf9567329a6e65f901d","3615ce4a1f785ae1b779244de52c6a7d99227e60","4122a26e1fd0457a340616673a3d3aada370f713","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340":["ed47693b1e536083c1fa52f3c2994098f3154d3c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"eeb24fe119d55091148e2a3d94e80c9e349d886c":["5cab9a86bd67202d20b6adc463008c8e982b070a","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","eeb24fe119d55091148e2a3d94e80c9e349d886c"],"4122a26e1fd0457a340616673a3d3aada370f713":["75ec8c9aaa10ac00b30fd4c2465409770c838f7b"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}