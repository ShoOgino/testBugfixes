{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#getPackedValueSlice(int,BytesRef).mjava","commits":[{"id":"16ffb58ba57f805651a528311c104f104d9f4573","date":1457861471,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#getPackedValueSlice(int,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns a reference, in <code>result</code>, to the byte[] slice holding this value */\n  void getPackedValueSlice(int index, BytesRef result) {\n    int block = index / valuesPerBlock;\n    int blockIndex = index % valuesPerBlock;\n    result.bytes = blocks.get(block);\n    result.offset = blockIndex * packedBytesLength;\n    assert result.length == packedBytesLength;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9028cf27fe30db95667505bb92ecaee8fa3aef7","date":1457861734,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#getPackedValueSlice(int,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns a reference, in <code>result</code>, to the byte[] slice holding this value */\n  void getPackedValueSlice(int index, BytesRef result) {\n    int block = index / valuesPerBlock;\n    int blockIndex = index % valuesPerBlock;\n    result.bytes = blocks.get(block);\n    result.offset = blockIndex * packedBytesLength;\n    assert result.length == packedBytesLength;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc0d60683b47b5d922124c31f57c8b34734f9e6","date":1480846684,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#getPackedValueSlice(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#getPackedValueSlice(int,BytesRef).mjava","sourceNew":"  /** Returns a reference, in <code>result</code>, to the byte[] slice holding this value */\n  public void getPackedValueSlice(int index, BytesRef result) {\n    int block = index / valuesPerBlock;\n    int blockIndex = index % valuesPerBlock;\n    result.bytes = blocks.get(block);\n    result.offset = blockIndex * packedBytesLength;\n    assert result.length == packedBytesLength;\n  }\n\n","sourceOld":"  /** Returns a reference, in <code>result</code>, to the byte[] slice holding this value */\n  void getPackedValueSlice(int index, BytesRef result) {\n    int block = index / valuesPerBlock;\n    int blockIndex = index % valuesPerBlock;\n    result.bytes = blocks.get(block);\n    result.offset = blockIndex * packedBytesLength;\n    assert result.length == packedBytesLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#getPackedValueSlice(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#getPackedValueSlice(int,BytesRef).mjava","sourceNew":"  /** Returns a reference, in <code>result</code>, to the byte[] slice holding this value */\n  public void getPackedValueSlice(int index, BytesRef result) {\n    int block = index / valuesPerBlock;\n    int blockIndex = index % valuesPerBlock;\n    result.bytes = blocks.get(block);\n    result.offset = blockIndex * packedBytesLength;\n    assert result.length == packedBytesLength;\n  }\n\n","sourceOld":"  /** Returns a reference, in <code>result</code>, to the byte[] slice holding this value */\n  void getPackedValueSlice(int index, BytesRef result) {\n    int block = index / valuesPerBlock;\n    int blockIndex = index % valuesPerBlock;\n    result.bytes = blocks.get(block);\n    result.offset = blockIndex * packedBytesLength;\n    assert result.length == packedBytesLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78bdc7d6906146edb12a1a6c1f765ba680ed5124","date":1549523533,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#getPackedValueSlice(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#getPackedValueSlice(int,BytesRef).mjava","sourceNew":"  /** Returns a reference, in <code>result</code>, to the byte[] slice holding this value */\n  public void getPackedValueSlice(int index, BytesRef result) {\n    int block = index / valuesPerBlock;\n    int blockIndex = index % valuesPerBlock;\n    result.bytes = blocks.get(block);\n    result.offset = blockIndex * packedBytesLength;\n    result.length = packedBytesLength;\n  }\n\n","sourceOld":"  /** Returns a reference, in <code>result</code>, to the byte[] slice holding this value */\n  public void getPackedValueSlice(int index, BytesRef result) {\n    int block = index / valuesPerBlock;\n    int blockIndex = index % valuesPerBlock;\n    result.bytes = blocks.get(block);\n    result.offset = blockIndex * packedBytesLength;\n    assert result.length == packedBytesLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2344a1c769566d8c85cffcacc5e55153fa54b86","date":1550661298,"type":4,"author":"iverase","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#getPackedValueSlice(int,BytesRef).mjava","sourceNew":null,"sourceOld":"  /** Returns a reference, in <code>result</code>, to the byte[] slice holding this value */\n  public void getPackedValueSlice(int index, BytesRef result) {\n    int block = index / valuesPerBlock;\n    int blockIndex = index % valuesPerBlock;\n    result.bytes = blocks.get(block);\n    result.offset = blockIndex * packedBytesLength;\n    result.length = packedBytesLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["b9028cf27fe30db95667505bb92ecaee8fa3aef7"],"16ffb58ba57f805651a528311c104f104d9f4573":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b9028cf27fe30db95667505bb92ecaee8fa3aef7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","16ffb58ba57f805651a528311c104f104d9f4573"],"c2344a1c769566d8c85cffcacc5e55153fa54b86":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"9856095f7afb5a607bf5e65077615ed91273508c":["b9028cf27fe30db95667505bb92ecaee8fa3aef7","9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c2344a1c769566d8c85cffcacc5e55153fa54b86"]},"commit2Childs":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["78bdc7d6906146edb12a1a6c1f765ba680ed5124","9856095f7afb5a607bf5e65077615ed91273508c"],"16ffb58ba57f805651a528311c104f104d9f4573":["b9028cf27fe30db95667505bb92ecaee8fa3aef7"],"b9028cf27fe30db95667505bb92ecaee8fa3aef7":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","9856095f7afb5a607bf5e65077615ed91273508c"],"c2344a1c769566d8c85cffcacc5e55153fa54b86":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["16ffb58ba57f805651a528311c104f104d9f4573","b9028cf27fe30db95667505bb92ecaee8fa3aef7"],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["c2344a1c769566d8c85cffcacc5e55153fa54b86"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}