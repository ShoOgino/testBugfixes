{"path":"lucene/contrib/lucli/src/java/lucli/Lucli#handleCommand(String,ConsoleReader).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/lucli/src/java/lucli/Lucli#handleCommand(String,ConsoleReader).mjava","pathOld":"contrib/lucli/src/java/lucli/Lucli#handleCommand(String,ConsoleReader).mjava","sourceNew":"\tprivate void handleCommand(String line, ConsoleReader cr) throws IOException, ParseException {\n\t\tString [] words = tokenizeCommand(line);\n\t\tif (words.length == 0)\n\t\t\treturn; //white space\n\t\tString query = \"\";\n\t\tif (line.trim().startsWith(\"#\"))\t\t// # = comment\n\t\t\treturn;\n\t\t//Command name and number of arguments\n\t\tswitch (getCommandId(words[0], words.length - 1)) {\n\t\t\tcase INFO:\n\t\t\t\tluceneMethods.info();\n\t\t\t\tbreak;\n\t\t\tcase SEARCH:\n\t\t\t\tfor (int ii = 1; ii < words.length; ii++) {\n\t\t\t\t\tquery += words[ii] + \" \";\n\t\t\t\t}\n\t\t\t\tluceneMethods.search(query, false, false, cr);\n\t\t\t\tbreak;\n\t\t\tcase COUNT:\n\t\t\t\tfor (int ii = 1; ii < words.length; ii++) {\n\t\t\t\t\tquery += words[ii] + \" \";\n\t\t\t\t}\n\t\t\t\tluceneMethods.count(query);\n\t\t\t\tbreak;\n\t\t\tcase QUIT:\n\t\t\t\texit();\n\t\t\t\tbreak;\n\t\t\tcase TERMS:\n\t\t\t\tif(words.length > 1)\n\t\t\t\t\tluceneMethods.terms(words[1]);\n\t\t\t\telse\n\t\t\t\t\tluceneMethods.terms(null);\n\t\t\t\tbreak;\n\t\t\tcase INDEX:\n\t\t\t\tLuceneMethods newLm = new LuceneMethods(words[1]);\n\t\t\t\ttry {\n\t\t\t\t\tnewLm.info(); //will fail if can't open the index\n\t\t\t\t\tluceneMethods = newLm; //OK, so we'll use the new one\n\t\t\t\t} catch (IOException ioe) {\n\t\t\t\t\t//problem we'll keep using the old one\n\t\t\t\t\terror(ioe.toString());\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase OPTIMIZE:\n\t\t\t\tluceneMethods.optimize();\n\t\t\t\tbreak;\n\t\t\tcase TOKENS:\n\t\t\t\tfor (int ii = 1; ii < words.length; ii++) {\n\t\t\t\t\tquery += words[ii] + \" \";\n\t\t\t\t}\n\t\t\t\tluceneMethods.search(query, false, true, cr);\n\t\t\t\tbreak;\n\t\t\tcase EXPLAIN:\n\t\t\t\tfor (int ii = 1; ii < words.length; ii++) {\n\t\t\t\t\tquery += words[ii] + \" \";\n\t\t\t\t}\n\t\t\t\tluceneMethods.search(query, true, false, cr);\n\t\t\t\tbreak;\n\t\t\tcase ANALYZER:\n\t\t\t\tluceneMethods.analyzer(words[1]);\n\t\t\t\tbreak;\n\t\t\tcase HELP:\n\t\t\t\thelp();\n\t\t\t\tbreak;\n\t\t\tcase NOCOMMAND: //do nothing\n\t\t\t\tbreak;\n\t\t\tcase UNKOWN:\n\t\t\t\tSystem.out.println(\"Unknown command: \" + words[0] + \". Type help to get a list of commands.\");\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n","sourceOld":"\tprivate void handleCommand(String line, ConsoleReader cr) throws IOException, ParseException {\n\t\tString [] words = tokenizeCommand(line);\n\t\tif (words.length == 0)\n\t\t\treturn; //white space\n\t\tString query = \"\";\n\t\tif (line.trim().startsWith(\"#\"))\t\t// # = comment\n\t\t\treturn;\n\t\t//Command name and number of arguments\n\t\tswitch (getCommandId(words[0], words.length - 1)) {\n\t\t\tcase INFO:\n\t\t\t\tluceneMethods.info();\n\t\t\t\tbreak;\n\t\t\tcase SEARCH:\n\t\t\t\tfor (int ii = 1; ii < words.length; ii++) {\n\t\t\t\t\tquery += words[ii] + \" \";\n\t\t\t\t}\n\t\t\t\tluceneMethods.search(query, false, false, cr);\n\t\t\t\tbreak;\n\t\t\tcase COUNT:\n\t\t\t\tfor (int ii = 1; ii < words.length; ii++) {\n\t\t\t\t\tquery += words[ii] + \" \";\n\t\t\t\t}\n\t\t\t\tluceneMethods.count(query);\n\t\t\t\tbreak;\n\t\t\tcase QUIT:\n\t\t\t\texit();\n\t\t\t\tbreak;\n\t\t\tcase TERMS:\n\t\t\t\tif(words.length > 1)\n\t\t\t\t\tluceneMethods.terms(words[1]);\n\t\t\t\telse\n\t\t\t\t\tluceneMethods.terms(null);\n\t\t\t\tbreak;\n\t\t\tcase INDEX:\n\t\t\t\tLuceneMethods newLm = new LuceneMethods(words[1]);\n\t\t\t\ttry {\n\t\t\t\t\tnewLm.info(); //will fail if can't open the index\n\t\t\t\t\tluceneMethods = newLm; //OK, so we'll use the new one\n\t\t\t\t} catch (IOException ioe) {\n\t\t\t\t\t//problem we'll keep using the old one\n\t\t\t\t\terror(ioe.toString());\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase OPTIMIZE:\n\t\t\t\tluceneMethods.optimize();\n\t\t\t\tbreak;\n\t\t\tcase TOKENS:\n\t\t\t\tfor (int ii = 1; ii < words.length; ii++) {\n\t\t\t\t\tquery += words[ii] + \" \";\n\t\t\t\t}\n\t\t\t\tluceneMethods.search(query, false, true, cr);\n\t\t\t\tbreak;\n\t\t\tcase EXPLAIN:\n\t\t\t\tfor (int ii = 1; ii < words.length; ii++) {\n\t\t\t\t\tquery += words[ii] + \" \";\n\t\t\t\t}\n\t\t\t\tluceneMethods.search(query, true, false, cr);\n\t\t\t\tbreak;\n\t\t\tcase ANALYZER:\n\t\t\t\tluceneMethods.analyzer(words[1]);\n\t\t\t\tbreak;\n\t\t\tcase HELP:\n\t\t\t\thelp();\n\t\t\t\tbreak;\n\t\t\tcase NOCOMMAND: //do nothing\n\t\t\t\tbreak;\n\t\t\tcase UNKOWN:\n\t\t\t\tSystem.out.println(\"Unknown command: \" + words[0] + \". Type help to get a list of commands.\");\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a55c46ea262f9033bd9ab60542dea4b38abef33","date":1306109444,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/lucli/src/java/lucli/Lucli#handleCommand(String,ConsoleReader).mjava","sourceNew":null,"sourceOld":"\tprivate void handleCommand(String line, ConsoleReader cr) throws IOException, ParseException {\n\t\tString [] words = tokenizeCommand(line);\n\t\tif (words.length == 0)\n\t\t\treturn; //white space\n\t\tString query = \"\";\n\t\tif (line.trim().startsWith(\"#\"))\t\t// # = comment\n\t\t\treturn;\n\t\t//Command name and number of arguments\n\t\tswitch (getCommandId(words[0], words.length - 1)) {\n\t\t\tcase INFO:\n\t\t\t\tluceneMethods.info();\n\t\t\t\tbreak;\n\t\t\tcase SEARCH:\n\t\t\t\tfor (int ii = 1; ii < words.length; ii++) {\n\t\t\t\t\tquery += words[ii] + \" \";\n\t\t\t\t}\n\t\t\t\tluceneMethods.search(query, false, false, cr);\n\t\t\t\tbreak;\n\t\t\tcase COUNT:\n\t\t\t\tfor (int ii = 1; ii < words.length; ii++) {\n\t\t\t\t\tquery += words[ii] + \" \";\n\t\t\t\t}\n\t\t\t\tluceneMethods.count(query);\n\t\t\t\tbreak;\n\t\t\tcase QUIT:\n\t\t\t\texit();\n\t\t\t\tbreak;\n\t\t\tcase TERMS:\n\t\t\t\tif(words.length > 1)\n\t\t\t\t\tluceneMethods.terms(words[1]);\n\t\t\t\telse\n\t\t\t\t\tluceneMethods.terms(null);\n\t\t\t\tbreak;\n\t\t\tcase INDEX:\n\t\t\t\tLuceneMethods newLm = new LuceneMethods(words[1]);\n\t\t\t\ttry {\n\t\t\t\t\tnewLm.info(); //will fail if can't open the index\n\t\t\t\t\tluceneMethods = newLm; //OK, so we'll use the new one\n\t\t\t\t} catch (IOException ioe) {\n\t\t\t\t\t//problem we'll keep using the old one\n\t\t\t\t\terror(ioe.toString());\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase OPTIMIZE:\n\t\t\t\tluceneMethods.optimize();\n\t\t\t\tbreak;\n\t\t\tcase TOKENS:\n\t\t\t\tfor (int ii = 1; ii < words.length; ii++) {\n\t\t\t\t\tquery += words[ii] + \" \";\n\t\t\t\t}\n\t\t\t\tluceneMethods.search(query, false, true, cr);\n\t\t\t\tbreak;\n\t\t\tcase EXPLAIN:\n\t\t\t\tfor (int ii = 1; ii < words.length; ii++) {\n\t\t\t\t\tquery += words[ii] + \" \";\n\t\t\t\t}\n\t\t\t\tluceneMethods.search(query, true, false, cr);\n\t\t\t\tbreak;\n\t\t\tcase ANALYZER:\n\t\t\t\tluceneMethods.analyzer(words[1]);\n\t\t\t\tbreak;\n\t\t\tcase HELP:\n\t\t\t\thelp();\n\t\t\t\tbreak;\n\t\t\tcase NOCOMMAND: //do nothing\n\t\t\t\tbreak;\n\t\t\tcase UNKOWN:\n\t\t\t\tSystem.out.println(\"Unknown command: \" + words[0] + \". Type help to get a list of commands.\");\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae132b768aece5bf21cda14e2f17fba66eb6f7d6","date":1306128032,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/lucli/src/java/lucli/Lucli#handleCommand(String,ConsoleReader).mjava","sourceNew":null,"sourceOld":"\tprivate void handleCommand(String line, ConsoleReader cr) throws IOException, ParseException {\n\t\tString [] words = tokenizeCommand(line);\n\t\tif (words.length == 0)\n\t\t\treturn; //white space\n\t\tString query = \"\";\n\t\tif (line.trim().startsWith(\"#\"))\t\t// # = comment\n\t\t\treturn;\n\t\t//Command name and number of arguments\n\t\tswitch (getCommandId(words[0], words.length - 1)) {\n\t\t\tcase INFO:\n\t\t\t\tluceneMethods.info();\n\t\t\t\tbreak;\n\t\t\tcase SEARCH:\n\t\t\t\tfor (int ii = 1; ii < words.length; ii++) {\n\t\t\t\t\tquery += words[ii] + \" \";\n\t\t\t\t}\n\t\t\t\tluceneMethods.search(query, false, false, cr);\n\t\t\t\tbreak;\n\t\t\tcase COUNT:\n\t\t\t\tfor (int ii = 1; ii < words.length; ii++) {\n\t\t\t\t\tquery += words[ii] + \" \";\n\t\t\t\t}\n\t\t\t\tluceneMethods.count(query);\n\t\t\t\tbreak;\n\t\t\tcase QUIT:\n\t\t\t\texit();\n\t\t\t\tbreak;\n\t\t\tcase TERMS:\n\t\t\t\tif(words.length > 1)\n\t\t\t\t\tluceneMethods.terms(words[1]);\n\t\t\t\telse\n\t\t\t\t\tluceneMethods.terms(null);\n\t\t\t\tbreak;\n\t\t\tcase INDEX:\n\t\t\t\tLuceneMethods newLm = new LuceneMethods(words[1]);\n\t\t\t\ttry {\n\t\t\t\t\tnewLm.info(); //will fail if can't open the index\n\t\t\t\t\tluceneMethods = newLm; //OK, so we'll use the new one\n\t\t\t\t} catch (IOException ioe) {\n\t\t\t\t\t//problem we'll keep using the old one\n\t\t\t\t\terror(ioe.toString());\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase OPTIMIZE:\n\t\t\t\tluceneMethods.optimize();\n\t\t\t\tbreak;\n\t\t\tcase TOKENS:\n\t\t\t\tfor (int ii = 1; ii < words.length; ii++) {\n\t\t\t\t\tquery += words[ii] + \" \";\n\t\t\t\t}\n\t\t\t\tluceneMethods.search(query, false, true, cr);\n\t\t\t\tbreak;\n\t\t\tcase EXPLAIN:\n\t\t\t\tfor (int ii = 1; ii < words.length; ii++) {\n\t\t\t\t\tquery += words[ii] + \" \";\n\t\t\t\t}\n\t\t\t\tluceneMethods.search(query, true, false, cr);\n\t\t\t\tbreak;\n\t\t\tcase ANALYZER:\n\t\t\t\tluceneMethods.analyzer(words[1]);\n\t\t\t\tbreak;\n\t\t\tcase HELP:\n\t\t\t\thelp();\n\t\t\t\tbreak;\n\t\t\tcase NOCOMMAND: //do nothing\n\t\t\t\tbreak;\n\t\t\tcase UNKOWN:\n\t\t\t\tSystem.out.println(\"Unknown command: \" + words[0] + \". Type help to get a list of commands.\");\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","date":1306150983,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/lucli/src/java/lucli/Lucli#handleCommand(String,ConsoleReader).mjava","sourceNew":null,"sourceOld":"\tprivate void handleCommand(String line, ConsoleReader cr) throws IOException, ParseException {\n\t\tString [] words = tokenizeCommand(line);\n\t\tif (words.length == 0)\n\t\t\treturn; //white space\n\t\tString query = \"\";\n\t\tif (line.trim().startsWith(\"#\"))\t\t// # = comment\n\t\t\treturn;\n\t\t//Command name and number of arguments\n\t\tswitch (getCommandId(words[0], words.length - 1)) {\n\t\t\tcase INFO:\n\t\t\t\tluceneMethods.info();\n\t\t\t\tbreak;\n\t\t\tcase SEARCH:\n\t\t\t\tfor (int ii = 1; ii < words.length; ii++) {\n\t\t\t\t\tquery += words[ii] + \" \";\n\t\t\t\t}\n\t\t\t\tluceneMethods.search(query, false, false, cr);\n\t\t\t\tbreak;\n\t\t\tcase COUNT:\n\t\t\t\tfor (int ii = 1; ii < words.length; ii++) {\n\t\t\t\t\tquery += words[ii] + \" \";\n\t\t\t\t}\n\t\t\t\tluceneMethods.count(query);\n\t\t\t\tbreak;\n\t\t\tcase QUIT:\n\t\t\t\texit();\n\t\t\t\tbreak;\n\t\t\tcase TERMS:\n\t\t\t\tif(words.length > 1)\n\t\t\t\t\tluceneMethods.terms(words[1]);\n\t\t\t\telse\n\t\t\t\t\tluceneMethods.terms(null);\n\t\t\t\tbreak;\n\t\t\tcase INDEX:\n\t\t\t\tLuceneMethods newLm = new LuceneMethods(words[1]);\n\t\t\t\ttry {\n\t\t\t\t\tnewLm.info(); //will fail if can't open the index\n\t\t\t\t\tluceneMethods = newLm; //OK, so we'll use the new one\n\t\t\t\t} catch (IOException ioe) {\n\t\t\t\t\t//problem we'll keep using the old one\n\t\t\t\t\terror(ioe.toString());\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase OPTIMIZE:\n\t\t\t\tluceneMethods.optimize();\n\t\t\t\tbreak;\n\t\t\tcase TOKENS:\n\t\t\t\tfor (int ii = 1; ii < words.length; ii++) {\n\t\t\t\t\tquery += words[ii] + \" \";\n\t\t\t\t}\n\t\t\t\tluceneMethods.search(query, false, true, cr);\n\t\t\t\tbreak;\n\t\t\tcase EXPLAIN:\n\t\t\t\tfor (int ii = 1; ii < words.length; ii++) {\n\t\t\t\t\tquery += words[ii] + \" \";\n\t\t\t\t}\n\t\t\t\tluceneMethods.search(query, true, false, cr);\n\t\t\t\tbreak;\n\t\t\tcase ANALYZER:\n\t\t\t\tluceneMethods.analyzer(words[1]);\n\t\t\t\tbreak;\n\t\t\tcase HELP:\n\t\t\t\thelp();\n\t\t\t\tbreak;\n\t\t\tcase NOCOMMAND: //do nothing\n\t\t\t\tbreak;\n\t\t\tcase UNKOWN:\n\t\t\t\tSystem.out.println(\"Unknown command: \" + words[0] + \". Type help to get a list of commands.\");\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ae132b768aece5bf21cda14e2f17fba66eb6f7d6":["9454a6510e2db155fb01faa5c049b06ece95fab9","3a55c46ea262f9033bd9ab60542dea4b38abef33"],"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a":["9454a6510e2db155fb01faa5c049b06ece95fab9","3a55c46ea262f9033bd9ab60542dea4b38abef33"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3a55c46ea262f9033bd9ab60542dea4b38abef33":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a55c46ea262f9033bd9ab60542dea4b38abef33"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ae132b768aece5bf21cda14e2f17fba66eb6f7d6":[],"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a55c46ea262f9033bd9ab60542dea4b38abef33":["ae132b768aece5bf21cda14e2f17fba66eb6f7d6","5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ae132b768aece5bf21cda14e2f17fba66eb6f7d6","5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","3a55c46ea262f9033bd9ab60542dea4b38abef33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ae132b768aece5bf21cda14e2f17fba66eb6f7d6","5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}