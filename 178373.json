{"path":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#runReadBytes(IndexInput,int,Random).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#runReadBytes(IndexInput,int,Random).mjava","pathOld":"src/test/org/apache/lucene/store/TestBufferedIndexInput#runReadBytes(IndexInput,int,Random).mjava","sourceNew":"  private void runReadBytes(IndexInput input, int bufferSize, Random r)\n      throws IOException {\n\n    int pos = 0;\n    // gradually increasing size:\n    for (int size = 1; size < bufferSize * 10; size = size + size / 200 + 1) {\n      checkReadBytes(input, size, pos);\n      pos += size;\n      if (pos >= TEST_FILE_LENGTH) {\n        // wrap\n        pos = 0;\n        input.seek(0L);\n      }\n    }\n    // wildly fluctuating size:\n    for (long i = 0; i < 100; i++) {\n      final int size = r.nextInt(10000);\n      checkReadBytes(input, 1+size, pos);\n      pos += 1+size;\n      if (pos >= TEST_FILE_LENGTH) {\n        // wrap\n        pos = 0;\n        input.seek(0L);\n      }\n    }\n    // constant small size (7 bytes):\n    for (int i = 0; i < bufferSize; i++) {\n      checkReadBytes(input, 7, pos);\n      pos += 7;\n      if (pos >= TEST_FILE_LENGTH) {\n        // wrap\n        pos = 0;\n        input.seek(0L);\n      }\n    }\n  }\n\n","sourceOld":"  private void runReadBytes(IndexInput input, int bufferSize, Random r)\n      throws IOException {\n\n    int pos = 0;\n    // gradually increasing size:\n    for (int size = 1; size < bufferSize * 10; size = size + size / 200 + 1) {\n      checkReadBytes(input, size, pos);\n      pos += size;\n      if (pos >= TEST_FILE_LENGTH) {\n        // wrap\n        pos = 0;\n        input.seek(0L);\n      }\n    }\n    // wildly fluctuating size:\n    for (long i = 0; i < 100; i++) {\n      final int size = r.nextInt(10000);\n      checkReadBytes(input, 1+size, pos);\n      pos += 1+size;\n      if (pos >= TEST_FILE_LENGTH) {\n        // wrap\n        pos = 0;\n        input.seek(0L);\n      }\n    }\n    // constant small size (7 bytes):\n    for (int i = 0; i < bufferSize; i++) {\n      checkReadBytes(input, 7, pos);\n      pos += 7;\n      if (pos >= TEST_FILE_LENGTH) {\n        // wrap\n        pos = 0;\n        input.seek(0L);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestBufferedIndexInput#runReadBytes(IndexInput,int,Random).mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#runReadBytes(IndexInput,int,Random).mjava","sourceNew":"  private void runReadBytes(IndexInput input, int bufferSize, Random r)\n      throws IOException {\n\n    int pos = 0;\n    // gradually increasing size:\n    for (int size = 1; size < bufferSize * 10; size = size + size / 200 + 1) {\n      checkReadBytes(input, size, pos);\n      pos += size;\n      if (pos >= TEST_FILE_LENGTH) {\n        // wrap\n        pos = 0;\n        input.seek(0L);\n      }\n    }\n    // wildly fluctuating size:\n    for (long i = 0; i < 100; i++) {\n      final int size = r.nextInt(10000);\n      checkReadBytes(input, 1+size, pos);\n      pos += 1+size;\n      if (pos >= TEST_FILE_LENGTH) {\n        // wrap\n        pos = 0;\n        input.seek(0L);\n      }\n    }\n    // constant small size (7 bytes):\n    for (int i = 0; i < bufferSize; i++) {\n      checkReadBytes(input, 7, pos);\n      pos += 7;\n      if (pos >= TEST_FILE_LENGTH) {\n        // wrap\n        pos = 0;\n        input.seek(0L);\n      }\n    }\n  }\n\n","sourceOld":"  private void runReadBytes(IndexInput input, int bufferSize, Random r)\n      throws IOException {\n\n    int pos = 0;\n    // gradually increasing size:\n    for (int size = 1; size < bufferSize * 10; size = size + size / 200 + 1) {\n      checkReadBytes(input, size, pos);\n      pos += size;\n      if (pos >= TEST_FILE_LENGTH) {\n        // wrap\n        pos = 0;\n        input.seek(0L);\n      }\n    }\n    // wildly fluctuating size:\n    for (long i = 0; i < 100; i++) {\n      final int size = r.nextInt(10000);\n      checkReadBytes(input, 1+size, pos);\n      pos += 1+size;\n      if (pos >= TEST_FILE_LENGTH) {\n        // wrap\n        pos = 0;\n        input.seek(0L);\n      }\n    }\n    // constant small size (7 bytes):\n    for (int i = 0; i < bufferSize; i++) {\n      checkReadBytes(input, 7, pos);\n      pos += 7;\n      if (pos >= TEST_FILE_LENGTH) {\n        // wrap\n        pos = 0;\n        input.seek(0L);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}