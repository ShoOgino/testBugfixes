{"path":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/de/WordlistLoader#getWordSet(File).mjava","commits":[{"id":"4215168c7c026cd898f2d98bb6aa5b0df9856696","date":1092688246,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/de/WordlistLoader#getWordSet(File).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Loads a text file and adds every line as an entry to a HashSet (omitting\n   * leading and trailing whitespace). Every line of the file should contain only \n   * one word. The words need to be in lowercase if you make use of an\n   * Analyzer which uses LowerCaseFilter (like GermanAnalyzer).\n   * \n   * @param wordfile File containing the wordlist\n   * @return A HashSet with the file's words\n   */\n  public static HashSet getWordSet(File wordfile) throws IOException {\n    HashSet result = new HashSet();\n    FileReader freader = null;\n    LineNumberReader lnr = null;\n    try {\n      freader = new FileReader(wordfile);\n      lnr = new LineNumberReader(freader);\n      String word = null;\n      while ((word = lnr.readLine()) != null) {\n        result.add(word.trim());\n      }\n    }\n    finally {\n      if (lnr != null)\n        lnr.close();\n      if (freader != null)\n        freader.close();\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4085ba9aca1a3aca2529c3be6774d5ed092c9419","date":1092688979,"type":4,"author":"Daniel Naber","isMerge":false,"pathNew":"/dev/null","pathOld":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/de/WordlistLoader#getWordSet(File).mjava","sourceNew":null,"sourceOld":"  /**\n   * Loads a text file and adds every line as an entry to a HashSet (omitting\n   * leading and trailing whitespace). Every line of the file should contain only \n   * one word. The words need to be in lowercase if you make use of an\n   * Analyzer which uses LowerCaseFilter (like GermanAnalyzer).\n   * \n   * @param wordfile File containing the wordlist\n   * @return A HashSet with the file's words\n   */\n  public static HashSet getWordSet(File wordfile) throws IOException {\n    HashSet result = new HashSet();\n    FileReader freader = null;\n    LineNumberReader lnr = null;\n    try {\n      freader = new FileReader(wordfile);\n      lnr = new LineNumberReader(freader);\n      String word = null;\n      while ((word = lnr.readLine()) != null) {\n        result.add(word.trim());\n      }\n    }\n    finally {\n      if (lnr != null)\n        lnr.close();\n      if (freader != null)\n        freader.close();\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4215168c7c026cd898f2d98bb6aa5b0df9856696":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4085ba9aca1a3aca2529c3be6774d5ed092c9419":["4215168c7c026cd898f2d98bb6aa5b0df9856696"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4085ba9aca1a3aca2529c3be6774d5ed092c9419"]},"commit2Childs":{"4215168c7c026cd898f2d98bb6aa5b0df9856696":["4085ba9aca1a3aca2529c3be6774d5ed092c9419"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4215168c7c026cd898f2d98bb6aa5b0df9856696"],"4085ba9aca1a3aca2529c3be6774d5ed092c9419":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}