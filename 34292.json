{"path":"sandbox/contributions/webcrawler-LARM/src/HTTPClient/HTTPConnection#setTimeout(int).mjava","commits":[{"id":"05d36e0b328ec96237035fbcca240e73631396e5","date":1020520725,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/src/HTTPClient/HTTPConnection#setTimeout(int).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Sets the timeout to be used for creating connections and reading\n     * responses. When a timeout expires the operation will throw an\n     * InterruptedIOException. The operation may be restarted again afterwards.\n     * If the operation is not restarted and it is a read operation (i.e\n     * HTTPResponse.xxxx()) then <code>resp.getInputStream().close()</code>\n     * <strong>should</strong> be invoked. <P>\n     *\n     * When creating new sockets the timeout will limit the time spent doing the\n     * host name translation and establishing the connection with the server.\n     * <P>\n     *\n     * The timeout also influences the reading of the response headers. However,\n     * it does not specify a how long, for example, getStatusCode() may take, as\n     * might be assumed. Instead it specifies how long a read on the socket may\n     * take. If the response dribbles in slowly with packets arriving quicker\n     * than the timeout then the method will complete normally. I.e. the\n     * exception is only thrown if nothing arrives on the socket for the\n     * specified time. Furthermore, the timeout only influences the reading of\n     * the headers, not the reading of the body. <P>\n     *\n     * Read Timeouts are associated with responses, so that you may change this\n     * value before each request and it won't affect the reading of responses to\n     * previous requests.\n     *\n     * @param time  the time in milliseconds. A time of 0 means wait\n     *      indefinitely.\n     * @see         #stop()\n     */\n    public void setTimeout(int time)\n    {\n        Timeout = time;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afc16d717d9ed1a8e45371668ca6de674164d624","date":1103345442,"type":4,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"/dev/null","pathOld":"sandbox/contributions/webcrawler-LARM/src/HTTPClient/HTTPConnection#setTimeout(int).mjava","sourceNew":null,"sourceOld":"    /**\n     * Sets the timeout to be used for creating connections and reading\n     * responses. When a timeout expires the operation will throw an\n     * InterruptedIOException. The operation may be restarted again afterwards.\n     * If the operation is not restarted and it is a read operation (i.e\n     * HTTPResponse.xxxx()) then <code>resp.getInputStream().close()</code>\n     * <strong>should</strong> be invoked. <P>\n     *\n     * When creating new sockets the timeout will limit the time spent doing the\n     * host name translation and establishing the connection with the server.\n     * <P>\n     *\n     * The timeout also influences the reading of the response headers. However,\n     * it does not specify a how long, for example, getStatusCode() may take, as\n     * might be assumed. Instead it specifies how long a read on the socket may\n     * take. If the response dribbles in slowly with packets arriving quicker\n     * than the timeout then the method will complete normally. I.e. the\n     * exception is only thrown if nothing arrives on the socket for the\n     * specified time. Furthermore, the timeout only influences the reading of\n     * the headers, not the reading of the body. <P>\n     *\n     * Read Timeouts are associated with responses, so that you may change this\n     * value before each request and it won't affect the reading of responses to\n     * previous requests.\n     *\n     * @param time  the time in milliseconds. A time of 0 means wait\n     *      indefinitely.\n     * @see         #stop()\n     */\n    public void setTimeout(int time)\n    {\n        Timeout = time;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afc16d717d9ed1a8e45371668ca6de674164d624":["05d36e0b328ec96237035fbcca240e73631396e5"],"05d36e0b328ec96237035fbcca240e73631396e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["afc16d717d9ed1a8e45371668ca6de674164d624"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["05d36e0b328ec96237035fbcca240e73631396e5"],"afc16d717d9ed1a8e45371668ca6de674164d624":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"05d36e0b328ec96237035fbcca240e73631396e5":["afc16d717d9ed1a8e45371668ca6de674164d624"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}