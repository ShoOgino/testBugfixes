{"path":"lucene/codecs/src/test/org/apache/lucene/codecs/blocktreeords/TestOrdsBlockTree#testNonRootFloorBlocks().mjava","commits":[{"id":"0cdf9cc6702d60334a616bd7db3ae91501d1dce7","date":1405858112,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/blocktreeords/TestOrdsBlockTree#testNonRootFloorBlocks().mjava","pathOld":"/dev/null","sourceNew":"  public void testNonRootFloorBlocks() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter w = new IndexWriter(dir, iwc);\n    List<String> terms = new ArrayList<>();\n    for(int i=0;i<36;i++) {\n      Document doc = new Document();\n      String term = \"\" + (char) (97+i);\n      terms.add(term);\n      if (VERBOSE) {\n        System.out.println(\"i=\" + i + \" term=\" + term);\n      }\n      doc.add(newTextField(\"field\", term, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    for(int i=0;i<128;i++) {\n      Document doc = new Document();\n      String term = \"m\" + (char) i;\n      terms.add(term);\n      if (VERBOSE) {\n        System.out.println(\"i=\" + i + \" term=\" + term + \" bytes=\" + new BytesRef(term));\n      }\n      doc.add(newStringField(\"field\", term, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    IndexReader r = DirectoryReader.open(w, true);\n    TermsEnum te = MultiFields.getTerms(r, \"field\").iterator(null);\n\n    BytesRef term;\n    int ord = 0;\n    while ((term = te.next()) != null) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + te.ord() + \": \" + term.utf8ToString());\n      }\n      assertEquals(ord, te.ord());\n      ord++;\n    }\n\n    testEnum(te, terms);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/blocktreeords/TestOrdsBlockTree#testNonRootFloorBlocks().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/blocktreeords/TestOrdsBlockTree#testNonRootFloorBlocks().mjava","sourceNew":"  public void testNonRootFloorBlocks() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter w = new IndexWriter(dir, iwc);\n    List<String> terms = new ArrayList<>();\n    for(int i=0;i<36;i++) {\n      Document doc = new Document();\n      String term = \"\" + (char) (97+i);\n      terms.add(term);\n      if (VERBOSE) {\n        System.out.println(\"i=\" + i + \" term=\" + term);\n      }\n      doc.add(newTextField(\"field\", term, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    for(int i=0;i<128;i++) {\n      Document doc = new Document();\n      String term = \"m\" + (char) i;\n      terms.add(term);\n      if (VERBOSE) {\n        System.out.println(\"i=\" + i + \" term=\" + term + \" bytes=\" + new BytesRef(term));\n      }\n      doc.add(newStringField(\"field\", term, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    IndexReader r = DirectoryReader.open(w, true);\n    TermsEnum te = MultiFields.getTerms(r, \"field\").iterator(null);\n\n    BytesRef term;\n    int ord = 0;\n    while ((term = te.next()) != null) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + te.ord() + \": \" + term.utf8ToString());\n      }\n      assertEquals(ord, te.ord());\n      ord++;\n    }\n\n    testEnum(te, terms);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNonRootFloorBlocks() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter w = new IndexWriter(dir, iwc);\n    List<String> terms = new ArrayList<>();\n    for(int i=0;i<36;i++) {\n      Document doc = new Document();\n      String term = \"\" + (char) (97+i);\n      terms.add(term);\n      if (VERBOSE) {\n        System.out.println(\"i=\" + i + \" term=\" + term);\n      }\n      doc.add(newTextField(\"field\", term, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    for(int i=0;i<128;i++) {\n      Document doc = new Document();\n      String term = \"m\" + (char) i;\n      terms.add(term);\n      if (VERBOSE) {\n        System.out.println(\"i=\" + i + \" term=\" + term + \" bytes=\" + new BytesRef(term));\n      }\n      doc.add(newStringField(\"field\", term, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    IndexReader r = DirectoryReader.open(w, true);\n    TermsEnum te = MultiFields.getTerms(r, \"field\").iterator(null);\n\n    BytesRef term;\n    int ord = 0;\n    while ((term = te.next()) != null) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + te.ord() + \": \" + term.utf8ToString());\n      }\n      assertEquals(ord, te.ord());\n      ord++;\n    }\n\n    testEnum(te, terms);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/blocktreeords/TestOrdsBlockTree#testNonRootFloorBlocks().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/blocktreeords/TestOrdsBlockTree#testNonRootFloorBlocks().mjava","sourceNew":"  public void testNonRootFloorBlocks() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter w = new IndexWriter(dir, iwc);\n    List<String> terms = new ArrayList<>();\n    for(int i=0;i<36;i++) {\n      Document doc = new Document();\n      String term = \"\" + (char) (97+i);\n      terms.add(term);\n      if (VERBOSE) {\n        System.out.println(\"i=\" + i + \" term=\" + term);\n      }\n      doc.add(newTextField(\"field\", term, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    for(int i=0;i<128;i++) {\n      Document doc = new Document();\n      String term = \"m\" + (char) i;\n      terms.add(term);\n      if (VERBOSE) {\n        System.out.println(\"i=\" + i + \" term=\" + term + \" bytes=\" + new BytesRef(term));\n      }\n      doc.add(newStringField(\"field\", term, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    IndexReader r = DirectoryReader.open(w, true);\n    TermsEnum te = MultiFields.getTerms(r, \"field\").iterator();\n\n    BytesRef term;\n    int ord = 0;\n    while ((term = te.next()) != null) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + te.ord() + \": \" + term.utf8ToString());\n      }\n      assertEquals(ord, te.ord());\n      ord++;\n    }\n\n    testEnum(te, terms);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNonRootFloorBlocks() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter w = new IndexWriter(dir, iwc);\n    List<String> terms = new ArrayList<>();\n    for(int i=0;i<36;i++) {\n      Document doc = new Document();\n      String term = \"\" + (char) (97+i);\n      terms.add(term);\n      if (VERBOSE) {\n        System.out.println(\"i=\" + i + \" term=\" + term);\n      }\n      doc.add(newTextField(\"field\", term, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    for(int i=0;i<128;i++) {\n      Document doc = new Document();\n      String term = \"m\" + (char) i;\n      terms.add(term);\n      if (VERBOSE) {\n        System.out.println(\"i=\" + i + \" term=\" + term + \" bytes=\" + new BytesRef(term));\n      }\n      doc.add(newStringField(\"field\", term, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    IndexReader r = DirectoryReader.open(w, true);\n    TermsEnum te = MultiFields.getTerms(r, \"field\").iterator(null);\n\n    BytesRef term;\n    int ord = 0;\n    while ((term = te.next()) != null) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + te.ord() + \": \" + term.utf8ToString());\n      }\n      assertEquals(ord, te.ord());\n      ord++;\n    }\n\n    testEnum(te, terms);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a1862266772deb28cdcb7d996b64d2177022687","date":1453077824,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/blocktreeords/TestOrdsBlockTree#testNonRootFloorBlocks().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/blocktreeords/TestOrdsBlockTree#testNonRootFloorBlocks().mjava","sourceNew":"  public void testNonRootFloorBlocks() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter w = new IndexWriter(dir, iwc);\n    List<String> terms = new ArrayList<>();\n    for(int i=0;i<36;i++) {\n      Document doc = new Document();\n      String term = \"\" + (char) (97+i);\n      terms.add(term);\n      if (VERBOSE) {\n        System.out.println(\"i=\" + i + \" term=\" + term);\n      }\n      doc.add(newTextField(\"field\", term, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    for(int i=0;i<128;i++) {\n      Document doc = new Document();\n      String term = \"m\" + (char) i;\n      terms.add(term);\n      if (VERBOSE) {\n        System.out.println(\"i=\" + i + \" term=\" + term + \" bytes=\" + new BytesRef(term));\n      }\n      doc.add(newStringField(\"field\", term, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    IndexReader r = DirectoryReader.open(w);\n    TermsEnum te = MultiFields.getTerms(r, \"field\").iterator();\n\n    BytesRef term;\n    int ord = 0;\n    while ((term = te.next()) != null) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + te.ord() + \": \" + term.utf8ToString());\n      }\n      assertEquals(ord, te.ord());\n      ord++;\n    }\n\n    testEnum(te, terms);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNonRootFloorBlocks() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter w = new IndexWriter(dir, iwc);\n    List<String> terms = new ArrayList<>();\n    for(int i=0;i<36;i++) {\n      Document doc = new Document();\n      String term = \"\" + (char) (97+i);\n      terms.add(term);\n      if (VERBOSE) {\n        System.out.println(\"i=\" + i + \" term=\" + term);\n      }\n      doc.add(newTextField(\"field\", term, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    for(int i=0;i<128;i++) {\n      Document doc = new Document();\n      String term = \"m\" + (char) i;\n      terms.add(term);\n      if (VERBOSE) {\n        System.out.println(\"i=\" + i + \" term=\" + term + \" bytes=\" + new BytesRef(term));\n      }\n      doc.add(newStringField(\"field\", term, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    IndexReader r = DirectoryReader.open(w, true);\n    TermsEnum te = MultiFields.getTerms(r, \"field\").iterator();\n\n    BytesRef term;\n    int ord = 0;\n    while ((term = te.next()) != null) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + te.ord() + \": \" + term.utf8ToString());\n      }\n      assertEquals(ord, te.ord());\n      ord++;\n    }\n\n    testEnum(te, terms);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"165c905a42bedc7c7d1acb37b177498306b7e866","date":1518704038,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/blocktreeords/TestOrdsBlockTree#testNonRootFloorBlocks().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/blocktreeords/TestOrdsBlockTree#testNonRootFloorBlocks().mjava","sourceNew":"  public void testNonRootFloorBlocks() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter w = new IndexWriter(dir, iwc);\n    List<String> terms = new ArrayList<>();\n    for(int i=0;i<36;i++) {\n      Document doc = new Document();\n      String term = \"\" + (char) (97+i);\n      terms.add(term);\n      if (VERBOSE) {\n        System.out.println(\"i=\" + i + \" term=\" + term);\n      }\n      doc.add(newStringField(\"field\", term, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    for(int i=0;i<128;i++) {\n      Document doc = new Document();\n      String term = \"m\" + (char) i;\n      terms.add(term);\n      if (VERBOSE) {\n        System.out.println(\"i=\" + i + \" term=\" + term + \" bytes=\" + new BytesRef(term));\n      }\n      doc.add(newStringField(\"field\", term, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    IndexReader r = DirectoryReader.open(w);\n    TermsEnum te = MultiFields.getTerms(r, \"field\").iterator();\n\n    BytesRef term;\n    int ord = 0;\n    while ((term = te.next()) != null) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + te.ord() + \": \" + term.utf8ToString());\n      }\n      assertEquals(ord, te.ord());\n      ord++;\n    }\n\n    testEnum(te, terms);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNonRootFloorBlocks() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter w = new IndexWriter(dir, iwc);\n    List<String> terms = new ArrayList<>();\n    for(int i=0;i<36;i++) {\n      Document doc = new Document();\n      String term = \"\" + (char) (97+i);\n      terms.add(term);\n      if (VERBOSE) {\n        System.out.println(\"i=\" + i + \" term=\" + term);\n      }\n      doc.add(newTextField(\"field\", term, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    for(int i=0;i<128;i++) {\n      Document doc = new Document();\n      String term = \"m\" + (char) i;\n      terms.add(term);\n      if (VERBOSE) {\n        System.out.println(\"i=\" + i + \" term=\" + term + \" bytes=\" + new BytesRef(term));\n      }\n      doc.add(newStringField(\"field\", term, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    IndexReader r = DirectoryReader.open(w);\n    TermsEnum te = MultiFields.getTerms(r, \"field\").iterator();\n\n    BytesRef term;\n    int ord = 0;\n    while ((term = te.next()) != null) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + te.ord() + \": \" + term.utf8ToString());\n      }\n      assertEquals(ord, te.ord());\n      ord++;\n    }\n\n    testEnum(te, terms);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/blocktreeords/TestOrdsBlockTree#testNonRootFloorBlocks().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/blocktreeords/TestOrdsBlockTree#testNonRootFloorBlocks().mjava","sourceNew":"  public void testNonRootFloorBlocks() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter w = new IndexWriter(dir, iwc);\n    List<String> terms = new ArrayList<>();\n    for(int i=0;i<36;i++) {\n      Document doc = new Document();\n      String term = \"\" + (char) (97+i);\n      terms.add(term);\n      if (VERBOSE) {\n        System.out.println(\"i=\" + i + \" term=\" + term);\n      }\n      doc.add(newStringField(\"field\", term, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    for(int i=0;i<128;i++) {\n      Document doc = new Document();\n      String term = \"m\" + (char) i;\n      terms.add(term);\n      if (VERBOSE) {\n        System.out.println(\"i=\" + i + \" term=\" + term + \" bytes=\" + new BytesRef(term));\n      }\n      doc.add(newStringField(\"field\", term, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    IndexReader r = DirectoryReader.open(w);\n    TermsEnum te = MultiTerms.getTerms(r, \"field\").iterator();\n\n    BytesRef term;\n    int ord = 0;\n    while ((term = te.next()) != null) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + te.ord() + \": \" + term.utf8ToString());\n      }\n      assertEquals(ord, te.ord());\n      ord++;\n    }\n\n    testEnum(te, terms);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNonRootFloorBlocks() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter w = new IndexWriter(dir, iwc);\n    List<String> terms = new ArrayList<>();\n    for(int i=0;i<36;i++) {\n      Document doc = new Document();\n      String term = \"\" + (char) (97+i);\n      terms.add(term);\n      if (VERBOSE) {\n        System.out.println(\"i=\" + i + \" term=\" + term);\n      }\n      doc.add(newStringField(\"field\", term, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    for(int i=0;i<128;i++) {\n      Document doc = new Document();\n      String term = \"m\" + (char) i;\n      terms.add(term);\n      if (VERBOSE) {\n        System.out.println(\"i=\" + i + \" term=\" + term + \" bytes=\" + new BytesRef(term));\n      }\n      doc.add(newStringField(\"field\", term, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    IndexReader r = DirectoryReader.open(w);\n    TermsEnum te = MultiFields.getTerms(r, \"field\").iterator();\n\n    BytesRef term;\n    int ord = 0;\n    while ((term = te.next()) != null) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + te.ord() + \": \" + term.utf8ToString());\n      }\n      assertEquals(ord, te.ord());\n      ord++;\n    }\n\n    testEnum(te, terms);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"165c905a42bedc7c7d1acb37b177498306b7e866":["2a1862266772deb28cdcb7d996b64d2177022687"],"2a1862266772deb28cdcb7d996b64d2177022687":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["165c905a42bedc7c7d1acb37b177498306b7e866"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["2a1862266772deb28cdcb7d996b64d2177022687"],"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"165c905a42bedc7c7d1acb37b177498306b7e866":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"2a1862266772deb28cdcb7d996b64d2177022687":["165c905a42bedc7c7d1acb37b177498306b7e866"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}