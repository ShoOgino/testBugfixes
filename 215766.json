{"path":"solr/core/src/java/org/apache/solr/core/backup/repository/LocalFileSystemRepository#createURI(String...).mjava","commits":[{"id":"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b","date":1466705968,"type":0,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/repository/LocalFileSystemRepository#createURI(String...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public URI createURI(String... pathComponents) {\n    Preconditions.checkArgument(pathComponents.length > 0);\n    Path result = Paths.get(pathComponents[0]);\n    for (int i = 1; i < pathComponents.length; i++) {\n      result = result.resolve(pathComponents[i]);\n    }\n    return result.toUri();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf74d72c9e299c9e6046d769094c0e91e67d489b","date":1470366295,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/repository/LocalFileSystemRepository#createURI(String...).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/backup/repository/LocalFileSystemRepository#createURI(String...).mjava","sourceNew":"  @Override\n  public URI createURI(String... pathComponents) {\n    Preconditions.checkArgument(pathComponents.length > 0);\n\n    String basePath = Preconditions.checkNotNull(pathComponents[0]);\n    // Note the URI.getPath() invocation on Windows platform generates an invalid URI.\n    // Refer to http://stackoverflow.com/questions/9834776/java-nio-file-path-issue\n    // Since the caller may have used this method to generate the string representation\n    // for the pathComponents, we implement a work-around specifically for Windows platform\n    // to remove the leading '/' character.\n    if (Constants.WINDOWS) {\n      basePath = basePath.replaceFirst(\"^/(.:/)\", \"$1\");\n    }\n\n    Path result = Paths.get(basePath);\n    for (int i = 1; i < pathComponents.length; i++) {\n      result = result.resolve(pathComponents[i]);\n    }\n\n    return result.toUri();\n  }\n\n","sourceOld":"  @Override\n  public URI createURI(String... pathComponents) {\n    Preconditions.checkArgument(pathComponents.length > 0);\n    Path result = Paths.get(pathComponents[0]);\n    for (int i = 1; i < pathComponents.length; i++) {\n      result = result.resolve(pathComponents[i]);\n    }\n    return result.toUri();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/repository/LocalFileSystemRepository#createURI(String...).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/backup/repository/LocalFileSystemRepository#createURI(String...).mjava","sourceNew":"  @Override\n  public URI createURI(String... pathComponents) {\n    Preconditions.checkArgument(pathComponents.length > 0);\n\n    String basePath = Preconditions.checkNotNull(pathComponents[0]);\n    // Note the URI.getPath() invocation on Windows platform generates an invalid URI.\n    // Refer to http://stackoverflow.com/questions/9834776/java-nio-file-path-issue\n    // Since the caller may have used this method to generate the string representation\n    // for the pathComponents, we implement a work-around specifically for Windows platform\n    // to remove the leading '/' character.\n    if (Constants.WINDOWS) {\n      basePath = basePath.replaceFirst(\"^/(.:/)\", \"$1\");\n    }\n\n    Path result = Paths.get(basePath);\n    for (int i = 1; i < pathComponents.length; i++) {\n      result = result.resolve(pathComponents[i]);\n    }\n\n    return result.toUri();\n  }\n\n","sourceOld":"  @Override\n  public URI createURI(String... pathComponents) {\n    Preconditions.checkArgument(pathComponents.length > 0);\n    Path result = Paths.get(pathComponents[0]);\n    for (int i = 1; i < pathComponents.length; i++) {\n      result = result.resolve(pathComponents[i]);\n    }\n    return result.toUri();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af3193c66df8e8324d4bce9f66df967af9e8c602","date":1472772499,"type":4,"author":"Hrishikesh Gadre","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/backup/repository/LocalFileSystemRepository#createURI(String...).mjava","sourceNew":null,"sourceOld":"  @Override\n  public URI createURI(String... pathComponents) {\n    Preconditions.checkArgument(pathComponents.length > 0);\n\n    String basePath = Preconditions.checkNotNull(pathComponents[0]);\n    // Note the URI.getPath() invocation on Windows platform generates an invalid URI.\n    // Refer to http://stackoverflow.com/questions/9834776/java-nio-file-path-issue\n    // Since the caller may have used this method to generate the string representation\n    // for the pathComponents, we implement a work-around specifically for Windows platform\n    // to remove the leading '/' character.\n    if (Constants.WINDOWS) {\n      basePath = basePath.replaceFirst(\"^/(.:/)\", \"$1\");\n    }\n\n    Path result = Paths.get(basePath);\n    for (int i = 1; i < pathComponents.length; i++) {\n      result = result.resolve(pathComponents[i]);\n    }\n\n    return result.toUri();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da02fc41cfc83eaee66abb7c926f2c909bda6d26","date":1472818509,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/backup/repository/LocalFileSystemRepository#createURI(String...).mjava","sourceNew":null,"sourceOld":"  @Override\n  public URI createURI(String... pathComponents) {\n    Preconditions.checkArgument(pathComponents.length > 0);\n\n    String basePath = Preconditions.checkNotNull(pathComponents[0]);\n    // Note the URI.getPath() invocation on Windows platform generates an invalid URI.\n    // Refer to http://stackoverflow.com/questions/9834776/java-nio-file-path-issue\n    // Since the caller may have used this method to generate the string representation\n    // for the pathComponents, we implement a work-around specifically for Windows platform\n    // to remove the leading '/' character.\n    if (Constants.WINDOWS) {\n      basePath = basePath.replaceFirst(\"^/(.:/)\", \"$1\");\n    }\n\n    Path result = Paths.get(basePath);\n    for (int i = 1; i < pathComponents.length; i++) {\n      result = result.resolve(pathComponents[i]);\n    }\n\n    return result.toUri();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f206328a706450934717bec7ccc22ad166fc0","date":1473142172,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/backup/repository/LocalFileSystemRepository#createURI(String...).mjava","sourceNew":null,"sourceOld":"  @Override\n  public URI createURI(String... pathComponents) {\n    Preconditions.checkArgument(pathComponents.length > 0);\n\n    String basePath = Preconditions.checkNotNull(pathComponents[0]);\n    // Note the URI.getPath() invocation on Windows platform generates an invalid URI.\n    // Refer to http://stackoverflow.com/questions/9834776/java-nio-file-path-issue\n    // Since the caller may have used this method to generate the string representation\n    // for the pathComponents, we implement a work-around specifically for Windows platform\n    // to remove the leading '/' character.\n    if (Constants.WINDOWS) {\n      basePath = basePath.replaceFirst(\"^/(.:/)\", \"$1\");\n    }\n\n    Path result = Paths.get(basePath);\n    for (int i = 1; i < pathComponents.length; i++) {\n      result = result.resolve(pathComponents[i]);\n    }\n\n    return result.toUri();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/backup/repository/LocalFileSystemRepository#createURI(String...).mjava","sourceNew":null,"sourceOld":"  @Override\n  public URI createURI(String... pathComponents) {\n    Preconditions.checkArgument(pathComponents.length > 0);\n\n    String basePath = Preconditions.checkNotNull(pathComponents[0]);\n    // Note the URI.getPath() invocation on Windows platform generates an invalid URI.\n    // Refer to http://stackoverflow.com/questions/9834776/java-nio-file-path-issue\n    // Since the caller may have used this method to generate the string representation\n    // for the pathComponents, we implement a work-around specifically for Windows platform\n    // to remove the leading '/' character.\n    if (Constants.WINDOWS) {\n      basePath = basePath.replaceFirst(\"^/(.:/)\", \"$1\");\n    }\n\n    Path result = Paths.get(basePath);\n    for (int i = 1; i < pathComponents.length; i++) {\n      result = result.resolve(pathComponents[i]);\n    }\n\n    return result.toUri();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bf74d72c9e299c9e6046d769094c0e91e67d489b":["a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b"],"da02fc41cfc83eaee66abb7c926f2c909bda6d26":["bf74d72c9e299c9e6046d769094c0e91e67d489b","af3193c66df8e8324d4bce9f66df967af9e8c602"],"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["bf74d72c9e299c9e6046d769094c0e91e67d489b","da02fc41cfc83eaee66abb7c926f2c909bda6d26"],"af3193c66df8e8324d4bce9f66df967af9e8c602":["bf74d72c9e299c9e6046d769094c0e91e67d489b"],"bc8f206328a706450934717bec7ccc22ad166fc0":["bf74d72c9e299c9e6046d769094c0e91e67d489b","da02fc41cfc83eaee66abb7c926f2c909bda6d26"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b","bf74d72c9e299c9e6046d769094c0e91e67d489b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"bf74d72c9e299c9e6046d769094c0e91e67d489b":["da02fc41cfc83eaee66abb7c926f2c909bda6d26","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","af3193c66df8e8324d4bce9f66df967af9e8c602","bc8f206328a706450934717bec7ccc22ad166fc0","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"da02fc41cfc83eaee66abb7c926f2c909bda6d26":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","bc8f206328a706450934717bec7ccc22ad166fc0"],"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b":["bf74d72c9e299c9e6046d769094c0e91e67d489b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"af3193c66df8e8324d4bce9f66df967af9e8c602":["da02fc41cfc83eaee66abb7c926f2c909bda6d26"],"bc8f206328a706450934717bec7ccc22ad166fc0":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["bc8f206328a706450934717bec7ccc22ad166fc0","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}