{"path":"modules/queryparser/src/java/org/apache/lucene/queryparser/xml/CoreParser#CoreParser(String,Analyzer,QueryParser).mjava","commits":[{"id":"251550f5d19b526a76f8c5126ae7bb2d22cf8935","date":1315202008,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/xml/CoreParser#CoreParser(String,Analyzer,QueryParser).mjava","pathOld":"lucene/contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/CoreParser#CoreParser(String,Analyzer,QueryParser).mjava","sourceNew":"  protected CoreParser(String defaultField, Analyzer analyzer, QueryParser parser) {\n    this.analyzer = analyzer;\n    this.parser = parser;\n    filterFactory = new FilterBuilderFactory();\n    filterFactory.addBuilder(\"RangeFilter\", new RangeFilterBuilder());\n    filterFactory.addBuilder(\"NumericRangeFilter\", new NumericRangeFilterBuilder());\n\n    queryFactory = new QueryBuilderFactory();\n    queryFactory.addBuilder(\"TermQuery\", new TermQueryBuilder());\n    queryFactory.addBuilder(\"TermsQuery\", new TermsQueryBuilder(analyzer));\n    queryFactory.addBuilder(\"MatchAllDocsQuery\", new MatchAllDocsQueryBuilder());\n    queryFactory.addBuilder(\"BooleanQuery\", new BooleanQueryBuilder(queryFactory));\n    queryFactory.addBuilder(\"NumericRangeQuery\", new NumericRangeQueryBuilder());\n    if (parser != null) {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(parser));\n    } else {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(defaultField, analyzer));\n    }\n    queryFactory.addBuilder(\"FilteredQuery\", new FilteredQueryBuilder(filterFactory, queryFactory));\n    queryFactory.addBuilder(\"ConstantScoreQuery\", new ConstantScoreQueryBuilder(filterFactory));\n\n    filterFactory.addBuilder(\"CachedFilter\", new CachedFilterBuilder(queryFactory,\n        filterFactory, maxNumCachedFilters));\n\n\n    SpanQueryBuilderFactory sqof = new SpanQueryBuilderFactory();\n\n    SpanNearBuilder snb = new SpanNearBuilder(sqof);\n    sqof.addBuilder(\"SpanNear\", snb);\n    queryFactory.addBuilder(\"SpanNear\", snb);\n\n    BoostingTermBuilder btb = new BoostingTermBuilder();\n    sqof.addBuilder(\"BoostingTermQuery\", btb);\n    queryFactory.addBuilder(\"BoostingTermQuery\", btb);\n\n    SpanTermBuilder snt = new SpanTermBuilder();\n    sqof.addBuilder(\"SpanTerm\", snt);\n    queryFactory.addBuilder(\"SpanTerm\", snt);\n\n    SpanOrBuilder sot = new SpanOrBuilder(sqof);\n    sqof.addBuilder(\"SpanOr\", sot);\n    queryFactory.addBuilder(\"SpanOr\", sot);\n\n    SpanOrTermsBuilder sots = new SpanOrTermsBuilder(analyzer);\n    sqof.addBuilder(\"SpanOrTerms\", sots);\n    queryFactory.addBuilder(\"SpanOrTerms\", sots);\n\n    SpanFirstBuilder sft = new SpanFirstBuilder(sqof);\n    sqof.addBuilder(\"SpanFirst\", sft);\n    queryFactory.addBuilder(\"SpanFirst\", sft);\n\n    SpanNotBuilder snot = new SpanNotBuilder(sqof);\n    sqof.addBuilder(\"SpanNot\", snot);\n    queryFactory.addBuilder(\"SpanNot\", snot);\n  }\n\n","sourceOld":"  protected CoreParser(String defaultField, Analyzer analyzer, QueryParser parser) {\n    this.analyzer = analyzer;\n    this.parser = parser;\n    filterFactory = new FilterBuilderFactory();\n    filterFactory.addBuilder(\"RangeFilter\", new RangeFilterBuilder());\n    filterFactory.addBuilder(\"NumericRangeFilter\", new NumericRangeFilterBuilder());\n\n    queryFactory = new QueryBuilderFactory();\n    queryFactory.addBuilder(\"TermQuery\", new TermQueryBuilder());\n    queryFactory.addBuilder(\"TermsQuery\", new TermsQueryBuilder(analyzer));\n    queryFactory.addBuilder(\"MatchAllDocsQuery\", new MatchAllDocsQueryBuilder());\n    queryFactory.addBuilder(\"BooleanQuery\", new BooleanQueryBuilder(queryFactory));\n    queryFactory.addBuilder(\"NumericRangeQuery\", new NumericRangeQueryBuilder());\n    if (parser != null) {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(parser));\n    } else {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(defaultField, analyzer));\n    }\n    queryFactory.addBuilder(\"FilteredQuery\", new FilteredQueryBuilder(filterFactory, queryFactory));\n    queryFactory.addBuilder(\"ConstantScoreQuery\", new ConstantScoreQueryBuilder(filterFactory));\n\n    filterFactory.addBuilder(\"CachedFilter\", new CachedFilterBuilder(queryFactory,\n        filterFactory, maxNumCachedFilters));\n\n\n    SpanQueryBuilderFactory sqof = new SpanQueryBuilderFactory();\n\n    SpanNearBuilder snb = new SpanNearBuilder(sqof);\n    sqof.addBuilder(\"SpanNear\", snb);\n    queryFactory.addBuilder(\"SpanNear\", snb);\n\n    BoostingTermBuilder btb = new BoostingTermBuilder();\n    sqof.addBuilder(\"BoostingTermQuery\", btb);\n    queryFactory.addBuilder(\"BoostingTermQuery\", btb);\n\n    SpanTermBuilder snt = new SpanTermBuilder();\n    sqof.addBuilder(\"SpanTerm\", snt);\n    queryFactory.addBuilder(\"SpanTerm\", snt);\n\n    SpanOrBuilder sot = new SpanOrBuilder(sqof);\n    sqof.addBuilder(\"SpanOr\", sot);\n    queryFactory.addBuilder(\"SpanOr\", sot);\n\n    SpanOrTermsBuilder sots = new SpanOrTermsBuilder(analyzer);\n    sqof.addBuilder(\"SpanOrTerms\", sots);\n    queryFactory.addBuilder(\"SpanOrTerms\", sots);\n\n    SpanFirstBuilder sft = new SpanFirstBuilder(sqof);\n    sqof.addBuilder(\"SpanFirst\", sft);\n    queryFactory.addBuilder(\"SpanFirst\", sft);\n\n    SpanNotBuilder snot = new SpanNotBuilder(sqof);\n    sqof.addBuilder(\"SpanNot\", snot);\n    queryFactory.addBuilder(\"SpanNot\", snot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CoreParser#CoreParser(String,Analyzer,QueryParser).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/xml/CoreParser#CoreParser(String,Analyzer,QueryParser).mjava","sourceNew":"  protected CoreParser(String defaultField, Analyzer analyzer, QueryParser parser) {\n    this.analyzer = analyzer;\n    this.parser = parser;\n    filterFactory = new FilterBuilderFactory();\n    filterFactory.addBuilder(\"RangeFilter\", new RangeFilterBuilder());\n    filterFactory.addBuilder(\"NumericRangeFilter\", new NumericRangeFilterBuilder());\n\n    queryFactory = new QueryBuilderFactory();\n    queryFactory.addBuilder(\"TermQuery\", new TermQueryBuilder());\n    queryFactory.addBuilder(\"TermsQuery\", new TermsQueryBuilder(analyzer));\n    queryFactory.addBuilder(\"MatchAllDocsQuery\", new MatchAllDocsQueryBuilder());\n    queryFactory.addBuilder(\"BooleanQuery\", new BooleanQueryBuilder(queryFactory));\n    queryFactory.addBuilder(\"NumericRangeQuery\", new NumericRangeQueryBuilder());\n    if (parser != null) {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(parser));\n    } else {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(defaultField, analyzer));\n    }\n    queryFactory.addBuilder(\"FilteredQuery\", new FilteredQueryBuilder(filterFactory, queryFactory));\n    queryFactory.addBuilder(\"ConstantScoreQuery\", new ConstantScoreQueryBuilder(filterFactory));\n\n    filterFactory.addBuilder(\"CachedFilter\", new CachedFilterBuilder(queryFactory,\n        filterFactory, maxNumCachedFilters));\n\n\n    SpanQueryBuilderFactory sqof = new SpanQueryBuilderFactory();\n\n    SpanNearBuilder snb = new SpanNearBuilder(sqof);\n    sqof.addBuilder(\"SpanNear\", snb);\n    queryFactory.addBuilder(\"SpanNear\", snb);\n\n    BoostingTermBuilder btb = new BoostingTermBuilder();\n    sqof.addBuilder(\"BoostingTermQuery\", btb);\n    queryFactory.addBuilder(\"BoostingTermQuery\", btb);\n\n    SpanTermBuilder snt = new SpanTermBuilder();\n    sqof.addBuilder(\"SpanTerm\", snt);\n    queryFactory.addBuilder(\"SpanTerm\", snt);\n\n    SpanOrBuilder sot = new SpanOrBuilder(sqof);\n    sqof.addBuilder(\"SpanOr\", sot);\n    queryFactory.addBuilder(\"SpanOr\", sot);\n\n    SpanOrTermsBuilder sots = new SpanOrTermsBuilder(analyzer);\n    sqof.addBuilder(\"SpanOrTerms\", sots);\n    queryFactory.addBuilder(\"SpanOrTerms\", sots);\n\n    SpanFirstBuilder sft = new SpanFirstBuilder(sqof);\n    sqof.addBuilder(\"SpanFirst\", sft);\n    queryFactory.addBuilder(\"SpanFirst\", sft);\n\n    SpanNotBuilder snot = new SpanNotBuilder(sqof);\n    sqof.addBuilder(\"SpanNot\", snot);\n    queryFactory.addBuilder(\"SpanNot\", snot);\n  }\n\n","sourceOld":"  protected CoreParser(String defaultField, Analyzer analyzer, QueryParser parser) {\n    this.analyzer = analyzer;\n    this.parser = parser;\n    filterFactory = new FilterBuilderFactory();\n    filterFactory.addBuilder(\"RangeFilter\", new RangeFilterBuilder());\n    filterFactory.addBuilder(\"NumericRangeFilter\", new NumericRangeFilterBuilder());\n\n    queryFactory = new QueryBuilderFactory();\n    queryFactory.addBuilder(\"TermQuery\", new TermQueryBuilder());\n    queryFactory.addBuilder(\"TermsQuery\", new TermsQueryBuilder(analyzer));\n    queryFactory.addBuilder(\"MatchAllDocsQuery\", new MatchAllDocsQueryBuilder());\n    queryFactory.addBuilder(\"BooleanQuery\", new BooleanQueryBuilder(queryFactory));\n    queryFactory.addBuilder(\"NumericRangeQuery\", new NumericRangeQueryBuilder());\n    if (parser != null) {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(parser));\n    } else {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(defaultField, analyzer));\n    }\n    queryFactory.addBuilder(\"FilteredQuery\", new FilteredQueryBuilder(filterFactory, queryFactory));\n    queryFactory.addBuilder(\"ConstantScoreQuery\", new ConstantScoreQueryBuilder(filterFactory));\n\n    filterFactory.addBuilder(\"CachedFilter\", new CachedFilterBuilder(queryFactory,\n        filterFactory, maxNumCachedFilters));\n\n\n    SpanQueryBuilderFactory sqof = new SpanQueryBuilderFactory();\n\n    SpanNearBuilder snb = new SpanNearBuilder(sqof);\n    sqof.addBuilder(\"SpanNear\", snb);\n    queryFactory.addBuilder(\"SpanNear\", snb);\n\n    BoostingTermBuilder btb = new BoostingTermBuilder();\n    sqof.addBuilder(\"BoostingTermQuery\", btb);\n    queryFactory.addBuilder(\"BoostingTermQuery\", btb);\n\n    SpanTermBuilder snt = new SpanTermBuilder();\n    sqof.addBuilder(\"SpanTerm\", snt);\n    queryFactory.addBuilder(\"SpanTerm\", snt);\n\n    SpanOrBuilder sot = new SpanOrBuilder(sqof);\n    sqof.addBuilder(\"SpanOr\", sot);\n    queryFactory.addBuilder(\"SpanOr\", sot);\n\n    SpanOrTermsBuilder sots = new SpanOrTermsBuilder(analyzer);\n    sqof.addBuilder(\"SpanOrTerms\", sots);\n    queryFactory.addBuilder(\"SpanOrTerms\", sots);\n\n    SpanFirstBuilder sft = new SpanFirstBuilder(sqof);\n    sqof.addBuilder(\"SpanFirst\", sft);\n    queryFactory.addBuilder(\"SpanFirst\", sft);\n\n    SpanNotBuilder snot = new SpanNotBuilder(sqof);\n    sqof.addBuilder(\"SpanNot\", snot);\n    queryFactory.addBuilder(\"SpanNot\", snot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["251550f5d19b526a76f8c5126ae7bb2d22cf8935"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"251550f5d19b526a76f8c5126ae7bb2d22cf8935":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["251550f5d19b526a76f8c5126ae7bb2d22cf8935"],"251550f5d19b526a76f8c5126ae7bb2d22cf8935":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}