{"path":"solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.ReRankQParser#parse().mjava","commits":[{"id":"a667f95e8b4d25c8e45a6bb9ba8ce9654e7858d7","date":1401992910,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.ReRankQParser#parse().mjava","pathOld":"/dev/null","sourceNew":"    public Query parse() throws SyntaxError {\n\n      String reRankQueryString = localParams.get(\"reRankQuery\");\n      QParser reRankParser = QParser.getParser(reRankQueryString, null, req);\n      Query reRankQuery = reRankParser.parse();\n\n      int reRankDocs  = localParams.getInt(\"reRankDocs\", 200);\n      double reRankWeight = localParams.getDouble(\"reRankWeight\",2.0d);\n\n      int start = params.getInt(CommonParams.START,0);\n      int rows = params.getInt(CommonParams.ROWS,10);\n\n      // This enusres that reRankDocs >= docs needed to satisfy the result set.\n      reRankDocs = Math.max(start+rows, reRankDocs);\n\n      return new ReRankQuery(reRankQuery, reRankDocs, reRankWeight);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a6be80501b3ee38dea6ab1d6439aa049acdfa0ad"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab323901b34dfa96b6871cb6c5fc9cfcce93c2d1","date":1410446084,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.ReRankQParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.ReRankQParser#parse().mjava","sourceNew":"    public Query parse() throws SyntaxError {\n\n      String reRankQueryString = localParams.get(\"reRankQuery\");\n      QParser reRankParser = QParser.getParser(reRankQueryString, null, req);\n      Query reRankQuery = reRankParser.parse();\n\n      int reRankDocs  = localParams.getInt(\"reRankDocs\", 200);\n      reRankDocs = Math.max(1, reRankDocs); //\n\n      double reRankWeight = localParams.getDouble(\"reRankWeight\",2.0d);\n\n      int start = params.getInt(CommonParams.START,0);\n      int rows = params.getInt(CommonParams.ROWS,10);\n      int length = start+rows;\n      return new ReRankQuery(reRankQuery, reRankDocs, reRankWeight, length);\n    }\n\n","sourceOld":"    public Query parse() throws SyntaxError {\n\n      String reRankQueryString = localParams.get(\"reRankQuery\");\n      QParser reRankParser = QParser.getParser(reRankQueryString, null, req);\n      Query reRankQuery = reRankParser.parse();\n\n      int reRankDocs  = localParams.getInt(\"reRankDocs\", 200);\n      double reRankWeight = localParams.getDouble(\"reRankWeight\",2.0d);\n\n      int start = params.getInt(CommonParams.START,0);\n      int rows = params.getInt(CommonParams.ROWS,10);\n\n      // This enusres that reRankDocs >= docs needed to satisfy the result set.\n      reRankDocs = Math.max(start+rows, reRankDocs);\n\n      return new ReRankQuery(reRankQuery, reRankDocs, reRankWeight);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6be80501b3ee38dea6ab1d6439aa049acdfa0ad","date":1434033347,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.ReRankQParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.ReRankQParser#parse().mjava","sourceNew":"    public Query parse() throws SyntaxError {\n      String reRankQueryString = localParams.get(\"reRankQuery\");\n      if (reRankQueryString == null || reRankQueryString.trim().length() == 0)  {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"reRankQuery parameter is mandatory\");\n      }\n      QParser reRankParser = QParser.getParser(reRankQueryString, null, req);\n      Query reRankQuery = reRankParser.parse();\n\n      int reRankDocs  = localParams.getInt(\"reRankDocs\", 200);\n      reRankDocs = Math.max(1, reRankDocs); //\n\n      double reRankWeight = localParams.getDouble(\"reRankWeight\",2.0d);\n\n      int start = params.getInt(CommonParams.START,0);\n      int rows = params.getInt(CommonParams.ROWS,10);\n      int length = start+rows;\n      return new ReRankQuery(reRankQuery, reRankDocs, reRankWeight, length);\n    }\n\n","sourceOld":"    public Query parse() throws SyntaxError {\n\n      String reRankQueryString = localParams.get(\"reRankQuery\");\n      QParser reRankParser = QParser.getParser(reRankQueryString, null, req);\n      Query reRankQuery = reRankParser.parse();\n\n      int reRankDocs  = localParams.getInt(\"reRankDocs\", 200);\n      reRankDocs = Math.max(1, reRankDocs); //\n\n      double reRankWeight = localParams.getDouble(\"reRankWeight\",2.0d);\n\n      int start = params.getInt(CommonParams.START,0);\n      int rows = params.getInt(CommonParams.ROWS,10);\n      int length = start+rows;\n      return new ReRankQuery(reRankQuery, reRankDocs, reRankWeight, length);\n    }\n\n","bugFix":["a667f95e8b4d25c8e45a6bb9ba8ce9654e7858d7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79acb0e466faaab809d0bcd9d44bc446449d325e","date":1453293805,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.ReRankQParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.ReRankQParser#parse().mjava","sourceNew":"    public Query parse() throws SyntaxError {\n      String reRankQueryString = localParams.get(\"reRankQuery\");\n      if (reRankQueryString == null || reRankQueryString.trim().length() == 0)  {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"reRankQuery parameter is mandatory\");\n      }\n      QParser reRankParser = QParser.getParser(reRankQueryString, null, req);\n      Query reRankQuery = reRankParser.parse();\n\n      int reRankDocs  = localParams.getInt(\"reRankDocs\", 200);\n      reRankDocs = Math.max(1, reRankDocs); //\n\n      double reRankWeight = localParams.getDouble(\"reRankWeight\",2.0d);\n\n      int start = params.getInt(CommonParams.START,CommonParams.START_DEFAULT);\n      int rows = params.getInt(CommonParams.ROWS,CommonParams.ROWS_DEFAULT);\n      int length = start+rows;\n      return new ReRankQuery(reRankQuery, reRankDocs, reRankWeight, length);\n    }\n\n","sourceOld":"    public Query parse() throws SyntaxError {\n      String reRankQueryString = localParams.get(\"reRankQuery\");\n      if (reRankQueryString == null || reRankQueryString.trim().length() == 0)  {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"reRankQuery parameter is mandatory\");\n      }\n      QParser reRankParser = QParser.getParser(reRankQueryString, null, req);\n      Query reRankQuery = reRankParser.parse();\n\n      int reRankDocs  = localParams.getInt(\"reRankDocs\", 200);\n      reRankDocs = Math.max(1, reRankDocs); //\n\n      double reRankWeight = localParams.getDouble(\"reRankWeight\",2.0d);\n\n      int start = params.getInt(CommonParams.START,0);\n      int rows = params.getInt(CommonParams.ROWS,10);\n      int length = start+rows;\n      return new ReRankQuery(reRankQuery, reRankDocs, reRankWeight, length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"569aade36ab5d95a5e6b8fca9676ce35657ba6b6","date":1454328039,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.ReRankQParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.ReRankQParser#parse().mjava","sourceNew":"    public Query parse() throws SyntaxError {\n      String reRankQueryString = localParams.get(RERANK_QUERY);\n      if (reRankQueryString == null || reRankQueryString.trim().length() == 0)  {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, RERANK_QUERY+\" parameter is mandatory\");\n      }\n      QParser reRankParser = QParser.getParser(reRankQueryString, null, req);\n      Query reRankQuery = reRankParser.parse();\n\n      int reRankDocs  = localParams.getInt(RERANK_DOCS, RERANK_DOCS_DEFAULT);\n      reRankDocs = Math.max(1, reRankDocs); //\n\n      double reRankWeight = localParams.getDouble(RERANK_WEIGHT, RERANK_WEIGHT_DEFAULT);\n\n      int start = params.getInt(CommonParams.START,CommonParams.START_DEFAULT);\n      int rows = params.getInt(CommonParams.ROWS,CommonParams.ROWS_DEFAULT);\n      int length = start+rows;\n      return new ReRankQuery(reRankQuery, reRankDocs, reRankWeight, length);\n    }\n\n","sourceOld":"    public Query parse() throws SyntaxError {\n      String reRankQueryString = localParams.get(\"reRankQuery\");\n      if (reRankQueryString == null || reRankQueryString.trim().length() == 0)  {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"reRankQuery parameter is mandatory\");\n      }\n      QParser reRankParser = QParser.getParser(reRankQueryString, null, req);\n      Query reRankQuery = reRankParser.parse();\n\n      int reRankDocs  = localParams.getInt(\"reRankDocs\", 200);\n      reRankDocs = Math.max(1, reRankDocs); //\n\n      double reRankWeight = localParams.getDouble(\"reRankWeight\",2.0d);\n\n      int start = params.getInt(CommonParams.START,CommonParams.START_DEFAULT);\n      int rows = params.getInt(CommonParams.ROWS,CommonParams.ROWS_DEFAULT);\n      int length = start+rows;\n      return new ReRankQuery(reRankQuery, reRankDocs, reRankWeight, length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.ReRankQParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.ReRankQParser#parse().mjava","sourceNew":"    public Query parse() throws SyntaxError {\n      String reRankQueryString = localParams.get(RERANK_QUERY);\n      if (reRankQueryString == null || reRankQueryString.trim().length() == 0)  {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, RERANK_QUERY+\" parameter is mandatory\");\n      }\n      QParser reRankParser = QParser.getParser(reRankQueryString, null, req);\n      Query reRankQuery = reRankParser.parse();\n\n      int reRankDocs  = localParams.getInt(RERANK_DOCS, RERANK_DOCS_DEFAULT);\n      reRankDocs = Math.max(1, reRankDocs); //\n\n      double reRankWeight = localParams.getDouble(RERANK_WEIGHT, RERANK_WEIGHT_DEFAULT);\n\n      int start = params.getInt(CommonParams.START,CommonParams.START_DEFAULT);\n      int rows = params.getInt(CommonParams.ROWS,CommonParams.ROWS_DEFAULT);\n      int length = start+rows;\n      return new ReRankQuery(reRankQuery, reRankDocs, reRankWeight, length);\n    }\n\n","sourceOld":"    public Query parse() throws SyntaxError {\n      String reRankQueryString = localParams.get(\"reRankQuery\");\n      if (reRankQueryString == null || reRankQueryString.trim().length() == 0)  {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"reRankQuery parameter is mandatory\");\n      }\n      QParser reRankParser = QParser.getParser(reRankQueryString, null, req);\n      Query reRankQuery = reRankParser.parse();\n\n      int reRankDocs  = localParams.getInt(\"reRankDocs\", 200);\n      reRankDocs = Math.max(1, reRankDocs); //\n\n      double reRankWeight = localParams.getDouble(\"reRankWeight\",2.0d);\n\n      int start = params.getInt(CommonParams.START,CommonParams.START_DEFAULT);\n      int rows = params.getInt(CommonParams.ROWS,CommonParams.ROWS_DEFAULT);\n      int length = start+rows;\n      return new ReRankQuery(reRankQuery, reRankDocs, reRankWeight, length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc5ee54a993d26579e3fe1f8f2a696b46b61c48f","date":1470751445,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.ReRankQParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.ReRankQParser#parse().mjava","sourceNew":"    public Query parse() throws SyntaxError {\n      String reRankQueryString = localParams.get(RERANK_QUERY);\n      if (reRankQueryString == null || reRankQueryString.trim().length() == 0)  {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, RERANK_QUERY+\" parameter is mandatory\");\n      }\n      QParser reRankParser = QParser.getParser(reRankQueryString, req);\n      Query reRankQuery = reRankParser.parse();\n\n      int reRankDocs  = localParams.getInt(RERANK_DOCS, RERANK_DOCS_DEFAULT);\n      reRankDocs = Math.max(1, reRankDocs); //\n\n      double reRankWeight = localParams.getDouble(RERANK_WEIGHT, RERANK_WEIGHT_DEFAULT);\n\n      int start = params.getInt(CommonParams.START,CommonParams.START_DEFAULT);\n      int rows = params.getInt(CommonParams.ROWS,CommonParams.ROWS_DEFAULT);\n      int length = start+rows;\n      return new ReRankQuery(reRankQuery, reRankDocs, reRankWeight, length);\n    }\n\n","sourceOld":"    public Query parse() throws SyntaxError {\n      String reRankQueryString = localParams.get(RERANK_QUERY);\n      if (reRankQueryString == null || reRankQueryString.trim().length() == 0)  {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, RERANK_QUERY+\" parameter is mandatory\");\n      }\n      QParser reRankParser = QParser.getParser(reRankQueryString, null, req);\n      Query reRankQuery = reRankParser.parse();\n\n      int reRankDocs  = localParams.getInt(RERANK_DOCS, RERANK_DOCS_DEFAULT);\n      reRankDocs = Math.max(1, reRankDocs); //\n\n      double reRankWeight = localParams.getDouble(RERANK_WEIGHT, RERANK_WEIGHT_DEFAULT);\n\n      int start = params.getInt(CommonParams.START,CommonParams.START_DEFAULT);\n      int rows = params.getInt(CommonParams.ROWS,CommonParams.ROWS_DEFAULT);\n      int length = start+rows;\n      return new ReRankQuery(reRankQuery, reRankDocs, reRankWeight, length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bca25eefa1f2205e2b0ef713701dc3a0fecd702","date":1470810578,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.ReRankQParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.ReRankQParser#parse().mjava","sourceNew":"    public Query parse() throws SyntaxError {\n      String reRankQueryString = localParams.get(RERANK_QUERY);\n      if (reRankQueryString == null || reRankQueryString.trim().length() == 0)  {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, RERANK_QUERY+\" parameter is mandatory\");\n      }\n      QParser reRankParser = QParser.getParser(reRankQueryString, req);\n      Query reRankQuery = reRankParser.parse();\n\n      int reRankDocs  = localParams.getInt(RERANK_DOCS, RERANK_DOCS_DEFAULT);\n      reRankDocs = Math.max(1, reRankDocs); //\n\n      double reRankWeight = localParams.getDouble(RERANK_WEIGHT, RERANK_WEIGHT_DEFAULT);\n\n      int start = params.getInt(CommonParams.START,CommonParams.START_DEFAULT);\n      int rows = params.getInt(CommonParams.ROWS,CommonParams.ROWS_DEFAULT);\n      int length = start+rows;\n      return new ReRankQuery(reRankQuery, reRankDocs, reRankWeight, length);\n    }\n\n","sourceOld":"    public Query parse() throws SyntaxError {\n      String reRankQueryString = localParams.get(RERANK_QUERY);\n      if (reRankQueryString == null || reRankQueryString.trim().length() == 0)  {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, RERANK_QUERY+\" parameter is mandatory\");\n      }\n      QParser reRankParser = QParser.getParser(reRankQueryString, null, req);\n      Query reRankQuery = reRankParser.parse();\n\n      int reRankDocs  = localParams.getInt(RERANK_DOCS, RERANK_DOCS_DEFAULT);\n      reRankDocs = Math.max(1, reRankDocs); //\n\n      double reRankWeight = localParams.getDouble(RERANK_WEIGHT, RERANK_WEIGHT_DEFAULT);\n\n      int start = params.getInt(CommonParams.START,CommonParams.START_DEFAULT);\n      int rows = params.getInt(CommonParams.ROWS,CommonParams.ROWS_DEFAULT);\n      int length = start+rows;\n      return new ReRankQuery(reRankQuery, reRankDocs, reRankWeight, length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c5a91ef02362eb48a041b2bc6e1f1fd1d653dbd","date":1470842850,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.ReRankQParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.ReRankQParser#parse().mjava","sourceNew":"    public Query parse() throws SyntaxError {\n      String reRankQueryString = localParams.get(RERANK_QUERY);\n      if (reRankQueryString == null || reRankQueryString.trim().length() == 0)  {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, RERANK_QUERY+\" parameter is mandatory\");\n      }\n      QParser reRankParser = QParser.getParser(reRankQueryString, req);\n      Query reRankQuery = reRankParser.parse();\n\n      int reRankDocs  = localParams.getInt(RERANK_DOCS, RERANK_DOCS_DEFAULT);\n      reRankDocs = Math.max(1, reRankDocs); //\n\n      double reRankWeight = localParams.getDouble(RERANK_WEIGHT, RERANK_WEIGHT_DEFAULT);\n\n      return new ReRankQuery(reRankQuery, reRankDocs, reRankWeight);\n    }\n\n","sourceOld":"    public Query parse() throws SyntaxError {\n      String reRankQueryString = localParams.get(RERANK_QUERY);\n      if (reRankQueryString == null || reRankQueryString.trim().length() == 0)  {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, RERANK_QUERY+\" parameter is mandatory\");\n      }\n      QParser reRankParser = QParser.getParser(reRankQueryString, req);\n      Query reRankQuery = reRankParser.parse();\n\n      int reRankDocs  = localParams.getInt(RERANK_DOCS, RERANK_DOCS_DEFAULT);\n      reRankDocs = Math.max(1, reRankDocs); //\n\n      double reRankWeight = localParams.getDouble(RERANK_WEIGHT, RERANK_WEIGHT_DEFAULT);\n\n      int start = params.getInt(CommonParams.START,CommonParams.START_DEFAULT);\n      int rows = params.getInt(CommonParams.ROWS,CommonParams.ROWS_DEFAULT);\n      int length = start+rows;\n      return new ReRankQuery(reRankQuery, reRankDocs, reRankWeight, length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.ReRankQParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.ReRankQParser#parse().mjava","sourceNew":"    public Query parse() throws SyntaxError {\n      String reRankQueryString = localParams.get(RERANK_QUERY);\n      if (reRankQueryString == null || reRankQueryString.trim().length() == 0)  {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, RERANK_QUERY+\" parameter is mandatory\");\n      }\n      QParser reRankParser = QParser.getParser(reRankQueryString, req);\n      Query reRankQuery = reRankParser.parse();\n\n      int reRankDocs  = localParams.getInt(RERANK_DOCS, RERANK_DOCS_DEFAULT);\n      reRankDocs = Math.max(1, reRankDocs); //\n\n      double reRankWeight = localParams.getDouble(RERANK_WEIGHT, RERANK_WEIGHT_DEFAULT);\n\n      return new ReRankQuery(reRankQuery, reRankDocs, reRankWeight);\n    }\n\n","sourceOld":"    public Query parse() throws SyntaxError {\n      String reRankQueryString = localParams.get(RERANK_QUERY);\n      if (reRankQueryString == null || reRankQueryString.trim().length() == 0)  {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, RERANK_QUERY+\" parameter is mandatory\");\n      }\n      QParser reRankParser = QParser.getParser(reRankQueryString, null, req);\n      Query reRankQuery = reRankParser.parse();\n\n      int reRankDocs  = localParams.getInt(RERANK_DOCS, RERANK_DOCS_DEFAULT);\n      reRankDocs = Math.max(1, reRankDocs); //\n\n      double reRankWeight = localParams.getDouble(RERANK_WEIGHT, RERANK_WEIGHT_DEFAULT);\n\n      int start = params.getInt(CommonParams.START,CommonParams.START_DEFAULT);\n      int rows = params.getInt(CommonParams.ROWS,CommonParams.ROWS_DEFAULT);\n      int length = start+rows;\n      return new ReRankQuery(reRankQuery, reRankDocs, reRankWeight, length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.ReRankQParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.ReRankQParser#parse().mjava","sourceNew":"    public Query parse() throws SyntaxError {\n      String reRankQueryString = localParams.get(RERANK_QUERY);\n      if (reRankQueryString == null || reRankQueryString.trim().length() == 0)  {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, RERANK_QUERY+\" parameter is mandatory\");\n      }\n      QParser reRankParser = QParser.getParser(reRankQueryString, req);\n      Query reRankQuery = reRankParser.parse();\n\n      int reRankDocs  = localParams.getInt(RERANK_DOCS, RERANK_DOCS_DEFAULT);\n      reRankDocs = Math.max(1, reRankDocs); //\n\n      double reRankWeight = localParams.getDouble(RERANK_WEIGHT, RERANK_WEIGHT_DEFAULT);\n\n      return new ReRankQuery(reRankQuery, reRankDocs, reRankWeight);\n    }\n\n","sourceOld":"    public Query parse() throws SyntaxError {\n      String reRankQueryString = localParams.get(RERANK_QUERY);\n      if (reRankQueryString == null || reRankQueryString.trim().length() == 0)  {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, RERANK_QUERY+\" parameter is mandatory\");\n      }\n      QParser reRankParser = QParser.getParser(reRankQueryString, req);\n      Query reRankQuery = reRankParser.parse();\n\n      int reRankDocs  = localParams.getInt(RERANK_DOCS, RERANK_DOCS_DEFAULT);\n      reRankDocs = Math.max(1, reRankDocs); //\n\n      double reRankWeight = localParams.getDouble(RERANK_WEIGHT, RERANK_WEIGHT_DEFAULT);\n\n      int start = params.getInt(CommonParams.START,CommonParams.START_DEFAULT);\n      int rows = params.getInt(CommonParams.ROWS,CommonParams.ROWS_DEFAULT);\n      int length = start+rows;\n      return new ReRankQuery(reRankQuery, reRankDocs, reRankWeight, length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.ReRankQParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.ReRankQParser#parse().mjava","sourceNew":"    public Query parse() throws SyntaxError {\n      String reRankQueryString = localParams.get(RERANK_QUERY);\n      if (reRankQueryString == null || reRankQueryString.trim().length() == 0)  {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, RERANK_QUERY+\" parameter is mandatory\");\n      }\n      QParser reRankParser = QParser.getParser(reRankQueryString, req);\n      Query reRankQuery = reRankParser.parse();\n\n      int reRankDocs  = localParams.getInt(RERANK_DOCS, RERANK_DOCS_DEFAULT);\n      reRankDocs = Math.max(1, reRankDocs); //\n\n      double reRankWeight = localParams.getDouble(RERANK_WEIGHT, RERANK_WEIGHT_DEFAULT);\n\n      return new ReRankQuery(reRankQuery, reRankDocs, reRankWeight);\n    }\n\n","sourceOld":"    public Query parse() throws SyntaxError {\n      String reRankQueryString = localParams.get(RERANK_QUERY);\n      if (reRankQueryString == null || reRankQueryString.trim().length() == 0)  {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, RERANK_QUERY+\" parameter is mandatory\");\n      }\n      QParser reRankParser = QParser.getParser(reRankQueryString, null, req);\n      Query reRankQuery = reRankParser.parse();\n\n      int reRankDocs  = localParams.getInt(RERANK_DOCS, RERANK_DOCS_DEFAULT);\n      reRankDocs = Math.max(1, reRankDocs); //\n\n      double reRankWeight = localParams.getDouble(RERANK_WEIGHT, RERANK_WEIGHT_DEFAULT);\n\n      int start = params.getInt(CommonParams.START,CommonParams.START_DEFAULT);\n      int rows = params.getInt(CommonParams.ROWS,CommonParams.ROWS_DEFAULT);\n      int length = start+rows;\n      return new ReRankQuery(reRankQuery, reRankDocs, reRankWeight, length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf9d6fd2b46a1c50382c5cef6be68fd0525946ff","date":1580036619,"type":3,"author":"andywebb1975","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.ReRankQParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.ReRankQParser#parse().mjava","sourceNew":"    public Query parse() throws SyntaxError {\n      String reRankQueryString = localParams.get(RERANK_QUERY);\n      if (StringUtils.isBlank(reRankQueryString)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, RERANK_QUERY+\" parameter is mandatory\");\n      }\n      QParser reRankParser = QParser.getParser(reRankQueryString, req);\n      Query reRankQuery = reRankParser.parse();\n\n      int reRankDocs  = localParams.getInt(RERANK_DOCS, RERANK_DOCS_DEFAULT);\n      reRankDocs = Math.max(1, reRankDocs); //\n\n      double reRankWeight = localParams.getDouble(RERANK_WEIGHT, RERANK_WEIGHT_DEFAULT);\n\n      return new ReRankQuery(reRankQuery, reRankDocs, reRankWeight);\n    }\n\n","sourceOld":"    public Query parse() throws SyntaxError {\n      String reRankQueryString = localParams.get(RERANK_QUERY);\n      if (reRankQueryString == null || reRankQueryString.trim().length() == 0)  {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, RERANK_QUERY+\" parameter is mandatory\");\n      }\n      QParser reRankParser = QParser.getParser(reRankQueryString, req);\n      Query reRankQuery = reRankParser.parse();\n\n      int reRankDocs  = localParams.getInt(RERANK_DOCS, RERANK_DOCS_DEFAULT);\n      reRankDocs = Math.max(1, reRankDocs); //\n\n      double reRankWeight = localParams.getDouble(RERANK_WEIGHT, RERANK_WEIGHT_DEFAULT);\n\n      return new ReRankQuery(reRankQuery, reRankDocs, reRankWeight);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"a6be80501b3ee38dea6ab1d6439aa049acdfa0ad":["ab323901b34dfa96b6871cb6c5fc9cfcce93c2d1"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["79acb0e466faaab809d0bcd9d44bc446449d325e","569aade36ab5d95a5e6b8fca9676ce35657ba6b6"],"cf9d6fd2b46a1c50382c5cef6be68fd0525946ff":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cc5ee54a993d26579e3fe1f8f2a696b46b61c48f":["569aade36ab5d95a5e6b8fca9676ce35657ba6b6"],"569aade36ab5d95a5e6b8fca9676ce35657ba6b6":["79acb0e466faaab809d0bcd9d44bc446449d325e"],"a667f95e8b4d25c8e45a6bb9ba8ce9654e7858d7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["569aade36ab5d95a5e6b8fca9676ce35657ba6b6","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"8bca25eefa1f2205e2b0ef713701dc3a0fecd702":["569aade36ab5d95a5e6b8fca9676ce35657ba6b6","cc5ee54a993d26579e3fe1f8f2a696b46b61c48f"],"79acb0e466faaab809d0bcd9d44bc446449d325e":["a6be80501b3ee38dea6ab1d6439aa049acdfa0ad"],"3c5a91ef02362eb48a041b2bc6e1f1fd1d653dbd":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ab323901b34dfa96b6871cb6c5fc9cfcce93c2d1":["a667f95e8b4d25c8e45a6bb9ba8ce9654e7858d7"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["569aade36ab5d95a5e6b8fca9676ce35657ba6b6","3c5a91ef02362eb48a041b2bc6e1f1fd1d653dbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf9d6fd2b46a1c50382c5cef6be68fd0525946ff"]},"commit2Childs":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["cf9d6fd2b46a1c50382c5cef6be68fd0525946ff","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a6be80501b3ee38dea6ab1d6439aa049acdfa0ad":["79acb0e466faaab809d0bcd9d44bc446449d325e"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"cf9d6fd2b46a1c50382c5cef6be68fd0525946ff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cc5ee54a993d26579e3fe1f8f2a696b46b61c48f":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"569aade36ab5d95a5e6b8fca9676ce35657ba6b6":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cc5ee54a993d26579e3fe1f8f2a696b46b61c48f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8bca25eefa1f2205e2b0ef713701dc3a0fecd702","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"a667f95e8b4d25c8e45a6bb9ba8ce9654e7858d7":["ab323901b34dfa96b6871cb6c5fc9cfcce93c2d1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"8bca25eefa1f2205e2b0ef713701dc3a0fecd702":["403d05f7f8d69b65659157eff1bc1d2717f04c66","3c5a91ef02362eb48a041b2bc6e1f1fd1d653dbd"],"79acb0e466faaab809d0bcd9d44bc446449d325e":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","569aade36ab5d95a5e6b8fca9676ce35657ba6b6"],"3c5a91ef02362eb48a041b2bc6e1f1fd1d653dbd":["3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a667f95e8b4d25c8e45a6bb9ba8ce9654e7858d7"],"ab323901b34dfa96b6871cb6c5fc9cfcce93c2d1":["a6be80501b3ee38dea6ab1d6439aa049acdfa0ad"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}