{"path":"lucene/core/src/test/org/apache/lucene/index/TestSegmentInfos#testToString().mjava","commits":[{"id":"aaa6e525fae6fd6259993ee28fab14cb920fdf77","date":1543567369,"type":0,"author":"Namgyu Kim","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentInfos#testToString().mjava","pathOld":"/dev/null","sourceNew":"  /** Test toString method */\n  public void testToString() throws Throwable{\n    SegmentInfo si;\n    final Directory dir = newDirectory();\n    Codec codec = Codec.getDefault();\n\n    // diagnostics map\n    Map<String, String> diagnostics = new LinkedHashMap<>();\n    diagnostics.put(\"key1\", \"value1\");\n    diagnostics.put(\"key2\", \"value2\");\n\n    // attributes map\n    Map<String,String> attributes = new LinkedHashMap<>();\n    attributes.put(\"key1\", \"value1\");\n    attributes.put(\"key2\", \"value2\");\n\n    // diagnostics X, attributes X\n    si = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"TEST\", 10000, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), Sort.INDEXORDER);\n    assertEquals(\"TEST(\" + Version.LATEST.toString() + \")\" +\n        \":C10000\" +\n        \":[indexSort=<doc>]\", si.toString());\n\n    // diagnostics O, attributes X\n    si = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"TEST\", 10000, false, codec, diagnostics, StringHelper.randomId(), new HashMap<>(), Sort.INDEXORDER);\n    assertEquals(\"TEST(\" + Version.LATEST.toString() + \")\" +\n        \":C10000\" +\n        \":[indexSort=<doc>]\" +\n        \":[diagnostics={key1=value1, key2=value2}]\", si.toString());\n\n    // diagnostics X, attributes O\n    si = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"TEST\", 10000, false, codec, Collections.emptyMap(), StringHelper.randomId(), attributes, Sort.INDEXORDER);\n    assertEquals(\"TEST(\" + Version.LATEST.toString() + \")\" +\n        \":C10000\" +\n        \":[indexSort=<doc>]\" +\n        \":[attributes={key1=value1, key2=value2}]\", si.toString());\n\n    // diagnostics O, attributes O\n    si = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"TEST\", 10000, false, codec, diagnostics, StringHelper.randomId(), attributes, Sort.INDEXORDER);\n    System.out.println(si.toString());\n    assertEquals(\"TEST(\" + Version.LATEST.toString() + \")\" +\n        \":C10000\" +\n        \":[indexSort=<doc>]\" +\n        \":[diagnostics={key1=value1, key2=value2}]\" +\n        \":[attributes={key1=value1, key2=value2}]\", si.toString());\n\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd2b7ad87a1172d1d06dc8491991e52534c90f71","date":1555507572,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentInfos#testToString().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentInfos#testToString().mjava","sourceNew":"  /** Test toString method */\n  public void testToString() throws Throwable{\n    SegmentInfo si;\n    final Directory dir = newDirectory();\n    Codec codec = Codec.getDefault();\n\n    // diagnostics map\n    Map<String, String> diagnostics = Map.of(\"key1\", \"value1\", \"key2\", \"value2\");\n\n    // attributes map\n    Map<String,String> attributes =  Map.of(\"akey1\", \"value1\", \"akey2\", \"value2\");\n\n    // diagnostics X, attributes X\n    si = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"TEST\", 10000, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), Sort.INDEXORDER);\n    assertEquals(\"TEST(\" + Version.LATEST.toString() + \")\" +\n        \":C10000\" +\n        \":[indexSort=<doc>]\", si.toString());\n\n    // diagnostics O, attributes X\n    si = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"TEST\", 10000, false, codec, diagnostics, StringHelper.randomId(), new HashMap<>(), Sort.INDEXORDER);\n    assertEquals(\"TEST(\" + Version.LATEST.toString() + \")\" +\n        \":C10000\" +\n        \":[indexSort=<doc>]\" +\n        \":[diagnostics=\" + diagnostics + \"]\", si.toString());\n\n    // diagnostics X, attributes O\n    si = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"TEST\", 10000, false, codec, Collections.emptyMap(), StringHelper.randomId(), attributes, Sort.INDEXORDER);\n    assertEquals(\"TEST(\" + Version.LATEST.toString() + \")\" +\n        \":C10000\" +\n        \":[indexSort=<doc>]\" +\n        \":[attributes=\" + attributes + \"]\", si.toString());\n\n    // diagnostics O, attributes O\n    si = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"TEST\", 10000, false, codec, diagnostics, StringHelper.randomId(), attributes, Sort.INDEXORDER);\n    assertEquals(\"TEST(\" + Version.LATEST.toString() + \")\" +\n        \":C10000\" +\n        \":[indexSort=<doc>]\" +\n        \":[diagnostics=\" + diagnostics + \"]\" +\n        \":[attributes=\" + attributes + \"]\", si.toString());\n\n    dir.close();\n  }\n\n","sourceOld":"  /** Test toString method */\n  public void testToString() throws Throwable{\n    SegmentInfo si;\n    final Directory dir = newDirectory();\n    Codec codec = Codec.getDefault();\n\n    // diagnostics map\n    Map<String, String> diagnostics = new LinkedHashMap<>();\n    diagnostics.put(\"key1\", \"value1\");\n    diagnostics.put(\"key2\", \"value2\");\n\n    // attributes map\n    Map<String,String> attributes = new LinkedHashMap<>();\n    attributes.put(\"key1\", \"value1\");\n    attributes.put(\"key2\", \"value2\");\n\n    // diagnostics X, attributes X\n    si = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"TEST\", 10000, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), Sort.INDEXORDER);\n    assertEquals(\"TEST(\" + Version.LATEST.toString() + \")\" +\n        \":C10000\" +\n        \":[indexSort=<doc>]\", si.toString());\n\n    // diagnostics O, attributes X\n    si = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"TEST\", 10000, false, codec, diagnostics, StringHelper.randomId(), new HashMap<>(), Sort.INDEXORDER);\n    assertEquals(\"TEST(\" + Version.LATEST.toString() + \")\" +\n        \":C10000\" +\n        \":[indexSort=<doc>]\" +\n        \":[diagnostics={key1=value1, key2=value2}]\", si.toString());\n\n    // diagnostics X, attributes O\n    si = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"TEST\", 10000, false, codec, Collections.emptyMap(), StringHelper.randomId(), attributes, Sort.INDEXORDER);\n    assertEquals(\"TEST(\" + Version.LATEST.toString() + \")\" +\n        \":C10000\" +\n        \":[indexSort=<doc>]\" +\n        \":[attributes={key1=value1, key2=value2}]\", si.toString());\n\n    // diagnostics O, attributes O\n    si = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"TEST\", 10000, false, codec, diagnostics, StringHelper.randomId(), attributes, Sort.INDEXORDER);\n    System.out.println(si.toString());\n    assertEquals(\"TEST(\" + Version.LATEST.toString() + \")\" +\n        \":C10000\" +\n        \":[indexSort=<doc>]\" +\n        \":[diagnostics={key1=value1, key2=value2}]\" +\n        \":[attributes={key1=value1, key2=value2}]\", si.toString());\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aaa6e525fae6fd6259993ee28fab14cb920fdf77":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd2b7ad87a1172d1d06dc8491991e52534c90f71":["aaa6e525fae6fd6259993ee28fab14cb920fdf77"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fd2b7ad87a1172d1d06dc8491991e52534c90f71"]},"commit2Childs":{"aaa6e525fae6fd6259993ee28fab14cb920fdf77":["fd2b7ad87a1172d1d06dc8491991e52534c90f71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aaa6e525fae6fd6259993ee28fab14cb920fdf77"],"fd2b7ad87a1172d1d06dc8491991e52534c90f71":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}