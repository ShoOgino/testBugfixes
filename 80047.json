{"path":"lucene/core/src/java/org/apache/lucene/search/spans/TermSpans#next().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/TermSpans#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/TermSpans#next().mjava","sourceNew":"  @Override\n  public boolean next() throws IOException {\n    if (count == freq) {\n      if (postings == null) {\n        return false;\n      }\n      doc = postings.nextDoc();\n      if (doc == DocsAndPositionsEnum.NO_MORE_DOCS) {\n        return false;\n      }\n      freq = postings.freq();\n      count = 0;\n    }\n    position = postings.nextPosition();\n    count++;\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean next() throws IOException {\n    if (count == freq) {\n      if (postings == null) {\n        return false;\n      }\n      doc = postings.nextDoc();\n      if (doc == DocsAndPositionsEnum.NO_MORE_DOCS) {\n        return false;\n      }\n      freq = postings.freq();\n      count = 0;\n    }\n    position = postings.nextPosition();\n    count++;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/TermSpans#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/TermSpans#next().mjava","sourceNew":"  @Override\n  public boolean next() throws IOException {\n    if (count == freq) {\n      if (postings == null) {\n        return false;\n      }\n      doc = postings.nextDoc();\n      if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n        return false;\n      }\n      freq = postings.freq();\n      count = 0;\n    }\n    position = postings.nextPosition();\n    count++;\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean next() throws IOException {\n    if (count == freq) {\n      if (postings == null) {\n        return false;\n      }\n      doc = postings.nextDoc();\n      if (doc == DocsAndPositionsEnum.NO_MORE_DOCS) {\n        return false;\n      }\n      freq = postings.freq();\n      count = 0;\n    }\n    position = postings.nextPosition();\n    count++;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/TermSpans#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/TermSpans#next().mjava","sourceNew":"  @Override\n  public boolean next() throws IOException {\n    if (count == freq) {\n      if (postings == null) {\n        return false;\n      }\n      doc = postings.nextDoc();\n      if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n        return false;\n      }\n      freq = postings.freq();\n      count = 0;\n    }\n    position = postings.nextPosition();\n    count++;\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean next() throws IOException {\n    if (count == freq) {\n      if (postings == null) {\n        return false;\n      }\n      doc = postings.nextDoc();\n      if (doc == DocsAndPositionsEnum.NO_MORE_DOCS) {\n        return false;\n      }\n      freq = postings.freq();\n      count = 0;\n    }\n    position = postings.nextPosition();\n    count++;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552","date":1344797146,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/TermSpans#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/TermSpans#next().mjava","sourceNew":"  @Override\n  public boolean next() throws IOException {\n    if (count == freq) {\n      if (postings == null) {\n        return false;\n      }\n      doc = postings.nextDoc();\n      if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n        return false;\n      }\n      freq = postings.freq();\n      count = 0;\n    }\n    position = postings.nextPosition();\n    count++;\n    readPayload = false;\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean next() throws IOException {\n    if (count == freq) {\n      if (postings == null) {\n        return false;\n      }\n      doc = postings.nextDoc();\n      if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n        return false;\n      }\n      freq = postings.freq();\n      count = 0;\n    }\n    position = postings.nextPosition();\n    count++;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/TermSpans#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/TermSpans#next().mjava","sourceNew":"  @Override\n  public boolean next() throws IOException {\n    if (count == freq) {\n      if (postings == null) {\n        return false;\n      }\n      doc = postings.nextDoc();\n      if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n        return false;\n      }\n      freq = postings.freq();\n      count = 0;\n    }\n    position = postings.nextPosition();\n    count++;\n    readPayload = false;\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean next() throws IOException {\n    if (count == freq) {\n      if (postings == null) {\n        return false;\n      }\n      doc = postings.nextDoc();\n      if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n        return false;\n      }\n      freq = postings.freq();\n      count = 0;\n    }\n    position = postings.nextPosition();\n    count++;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/TermSpans#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/TermSpans#next().mjava","sourceNew":"  @Override\n  public boolean next() throws IOException {\n    if (count == freq) {\n      if (postings == null) {\n        return false;\n      }\n      doc = postings.nextDoc();\n      if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n        return false;\n      }\n      freq = postings.freq();\n      count = 0;\n    }\n    position = postings.nextPosition();\n    count++;\n    readPayload = false;\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean next() throws IOException {\n    if (count == freq) {\n      if (postings == null) {\n        return false;\n      }\n      doc = postings.nextDoc();\n      if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n        return false;\n      }\n      freq = postings.freq();\n      count = 0;\n    }\n    position = postings.nextPosition();\n    count++;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30de45e50bdc1a79a6797f34dca6271c8866cb6e","date":1427790465,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/TermSpans#next().mjava","sourceNew":null,"sourceOld":"  @Override\n  public boolean next() throws IOException {\n    if (count == freq) {\n      if (postings == null) {\n        return false;\n      }\n      doc = postings.nextDoc();\n      if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n        return false;\n      }\n      freq = postings.freq();\n      count = 0;\n    }\n    position = postings.nextPosition();\n    count++;\n    readPayload = false;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/TermSpans#next().mjava","sourceNew":null,"sourceOld":"  @Override\n  public boolean next() throws IOException {\n    if (count == freq) {\n      if (postings == null) {\n        return false;\n      }\n      doc = postings.nextDoc();\n      if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n        return false;\n      }\n      freq = postings.freq();\n      count = 0;\n    }\n    position = postings.nextPosition();\n    count++;\n    readPayload = false;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":["f08557cdb6c60ac7b88a9342c983a20cd236e74f","2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552"],"2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552"],"fab172655716b96f7e42376116235017a922de3a":["2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552","30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["f08557cdb6c60ac7b88a9342c983a20cd236e74f","2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"]},"commit2Childs":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552":["c7869f64c874ebf7f317d22c00baf2b6857797a6","30de45e50bdc1a79a6797f34dca6271c8866cb6e","fab172655716b96f7e42376116235017a922de3a","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["c7869f64c874ebf7f317d22c00baf2b6857797a6","2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fab172655716b96f7e42376116235017a922de3a":[],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","fab172655716b96f7e42376116235017a922de3a","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}