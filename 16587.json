{"path":"lucene/core/src/java/org/apache/lucene/search/spans/Spans#setFreqCurrentDoc().mjava","commits":[{"id":"557b118fdfb9d28b6cfe38fac273af58c4d51135","date":1445505363,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/Spans#setFreqCurrentDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer#setFreqCurrentDoc().mjava","sourceNew":"  /**\n   * Sets {@link #freq} and {@link #numMatches} for the current document.\n   * <p>\n   * This will be called at most once per document.\n   */\n  protected final void setFreqCurrentDoc() throws IOException {\n    freq = 0.0f;\n    numMatches = 0;\n\n    doStartCurrentDoc();\n\n    assert startPosition() == -1 : \"incorrect initial start position, \" + this.toString();\n    assert endPosition() == -1 : \"incorrect initial end position, \" + this.toString();\n    int prevStartPos = -1;\n    int prevEndPos = -1;\n\n    int startPos = nextStartPosition();\n    assert startPos != Spans.NO_MORE_POSITIONS : \"initial startPos NO_MORE_POSITIONS, \" + this.toString();\n    do {\n      assert startPos >= prevStartPos;\n      int endPos = endPosition();\n      assert endPos != Spans.NO_MORE_POSITIONS;\n      // This assertion can fail for Or spans on the same term:\n      // assert (startPos != prevStartPos) || (endPos > prevEndPos) : \"non increased endPos=\"+endPos;\n      assert (startPos != prevStartPos) || (endPos >= prevEndPos) : \"decreased endPos=\"+endPos;\n      numMatches++;\n      if (docScorer == null) {  // scores not required, break out here\n        freq = 1;\n        return;\n      }\n      freq += docScorer.computeSlopFactor(width());\n      doCurrentSpans();\n      prevStartPos = startPos;\n      prevEndPos = endPos;\n      startPos = nextStartPosition();\n    } while (startPos != Spans.NO_MORE_POSITIONS);\n\n    assert startPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final start position, \" + this.toString();\n    assert endPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final end position, \" + this.toString();\n  }\n\n","sourceOld":"  /**\n   * Sets {@link #freq} and {@link #numMatches} for the current document.\n   * <p>\n   * This will be called at most once per document.\n   */\n  protected final void setFreqCurrentDoc() throws IOException {\n    freq = 0.0f;\n    numMatches = 0;\n\n    doStartCurrentDoc();\n\n    assert spans.startPosition() == -1 : \"incorrect initial start position, spans=\"+spans;\n    assert spans.endPosition() == -1 : \"incorrect initial end position, spans=\"+spans;\n    int prevStartPos = -1;\n    int prevEndPos = -1;\n\n    int startPos = spans.nextStartPosition();\n    assert startPos != Spans.NO_MORE_POSITIONS : \"initial startPos NO_MORE_POSITIONS, spans=\"+spans;\n    do {\n      assert startPos >= prevStartPos;\n      int endPos = spans.endPosition();\n      assert endPos != Spans.NO_MORE_POSITIONS;\n      // This assertion can fail for Or spans on the same term:\n      // assert (startPos != prevStartPos) || (endPos > prevEndPos) : \"non increased endPos=\"+endPos;\n      assert (startPos != prevStartPos) || (endPos >= prevEndPos) : \"decreased endPos=\"+endPos;\n      numMatches++;\n      if (docScorer == null) {  // scores not required, break out here\n        freq = 1;\n        return;\n      }\n      freq += docScorer.computeSlopFactor(spans.width());\n      doCurrentSpans();\n      prevStartPos = startPos;\n      prevEndPos = endPos;\n      startPos = spans.nextStartPosition();\n    } while (startPos != Spans.NO_MORE_POSITIONS);\n\n    assert spans.startPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final start position, spans=\"+spans;\n    assert spans.endPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final end position, spans=\"+spans;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer#setFreqCurrentDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/Spans#setFreqCurrentDoc().mjava","sourceNew":"  /**\n   * Sets {@link #freq} and {@link #numMatches} for the current document.\n   * <p>\n   * This will be called at most once per document.\n   */\n  protected final void setFreqCurrentDoc() throws IOException {\n    freq = 0.0f;\n    numMatches = 0;\n\n    spans.doStartCurrentDoc();\n\n    assert spans.startPosition() == -1 : \"incorrect initial start position, \" + this.toString();\n    assert spans.endPosition() == -1 : \"incorrect initial end position, \" + this.toString();\n    int prevStartPos = -1;\n    int prevEndPos = -1;\n\n    int startPos = spans.nextStartPosition();\n    assert startPos != Spans.NO_MORE_POSITIONS : \"initial startPos NO_MORE_POSITIONS, \" + this.toString();\n    do {\n      assert startPos >= prevStartPos;\n      int endPos = spans.endPosition();\n      assert endPos != Spans.NO_MORE_POSITIONS;\n      // This assertion can fail for Or spans on the same term:\n      // assert (startPos != prevStartPos) || (endPos > prevEndPos) : \"non increased endPos=\"+endPos;\n      assert (startPos != prevStartPos) || (endPos >= prevEndPos) : \"decreased endPos=\"+endPos;\n      numMatches++;\n      if (docScorer == null) {  // scores not required, break out here\n        freq = 1;\n        return;\n      }\n      freq += docScorer.computeSlopFactor(spans.width());\n      spans.doCurrentSpans();\n      prevStartPos = startPos;\n      prevEndPos = endPos;\n      startPos = spans.nextStartPosition();\n    } while (startPos != Spans.NO_MORE_POSITIONS);\n\n    assert spans.startPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final start position, \" + this.toString();\n    assert spans.endPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final end position, \" + this.toString();\n  }\n\n","sourceOld":"  /**\n   * Sets {@link #freq} and {@link #numMatches} for the current document.\n   * <p>\n   * This will be called at most once per document.\n   */\n  protected final void setFreqCurrentDoc() throws IOException {\n    freq = 0.0f;\n    numMatches = 0;\n\n    doStartCurrentDoc();\n\n    assert startPosition() == -1 : \"incorrect initial start position, \" + this.toString();\n    assert endPosition() == -1 : \"incorrect initial end position, \" + this.toString();\n    int prevStartPos = -1;\n    int prevEndPos = -1;\n\n    int startPos = nextStartPosition();\n    assert startPos != Spans.NO_MORE_POSITIONS : \"initial startPos NO_MORE_POSITIONS, \" + this.toString();\n    do {\n      assert startPos >= prevStartPos;\n      int endPos = endPosition();\n      assert endPos != Spans.NO_MORE_POSITIONS;\n      // This assertion can fail for Or spans on the same term:\n      // assert (startPos != prevStartPos) || (endPos > prevEndPos) : \"non increased endPos=\"+endPos;\n      assert (startPos != prevStartPos) || (endPos >= prevEndPos) : \"decreased endPos=\"+endPos;\n      numMatches++;\n      if (docScorer == null) {  // scores not required, break out here\n        freq = 1;\n        return;\n      }\n      freq += docScorer.computeSlopFactor(width());\n      doCurrentSpans();\n      prevStartPos = startPos;\n      prevEndPos = endPos;\n      startPos = nextStartPosition();\n    } while (startPos != Spans.NO_MORE_POSITIONS);\n\n    assert startPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final start position, \" + this.toString();\n    assert endPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final end position, \" + this.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"557b118fdfb9d28b6cfe38fac273af58c4d51135":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["557b118fdfb9d28b6cfe38fac273af58c4d51135"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dd748bb245633a8195281556bb0e68a6ea97d18"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["557b118fdfb9d28b6cfe38fac273af58c4d51135"],"557b118fdfb9d28b6cfe38fac273af58c4d51135":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}