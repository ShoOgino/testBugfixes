{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDRadixSelector#heapSelect(HeapPointWriter,PointWriter,PointWriter,int,int,int,int,int).mjava","commits":[{"id":"78bdc7d6906146edb12a1a6c1f765ba680ed5124","date":1549523533,"type":0,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDRadixSelector#heapSelect(HeapPointWriter,PointWriter,PointWriter,int,int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private byte[] heapSelect(HeapPointWriter points, PointWriter left, PointWriter right, int dim, int from, int to, int partitionPoint, int commonPrefix) throws IOException {\n    final int offset = dim * bytesPerDim + commonPrefix;\n    new RadixSelector(bytesSorted - commonPrefix) {\n\n      @Override\n      protected void swap(int i, int j) {\n        points.swap(i, j);\n      }\n\n      @Override\n      protected int byteAt(int i, int k) {\n        assert k >= 0;\n        if (k + commonPrefix < bytesPerDim) {\n          // dim bytes\n          int block = i / points.valuesPerBlock;\n          int index = i % points.valuesPerBlock;\n          return points.blocks.get(block)[index * packedBytesLength + offset + k] & 0xff;\n        } else {\n          // doc id\n          int s = 3 - (k + commonPrefix - bytesPerDim);\n          return (points.docIDs[i] >>> (s * 8)) & 0xff;\n        }\n      }\n    }.select(from, to, partitionPoint);\n\n    for (int i = from; i < to; i++) {\n      points.getPackedValueSlice(i, bytesRef1);\n      int docID = points.docIDs[i];\n      if (i < partitionPoint) {\n        left.append(bytesRef1, docID);\n      } else {\n        right.append(bytesRef1, docID);\n      }\n    }\n    byte[] partition = new byte[bytesPerDim];\n    points.getPackedValueSlice(partitionPoint, bytesRef1);\n    System.arraycopy(bytesRef1.bytes, bytesRef1.offset + dim * bytesPerDim, partition, 0, bytesPerDim);\n    return partition;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a69ebf290ab26d026cc224e517e0d93d931ac87b","date":1549869083,"type":5,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDRadixSelector#heapRadixSelect(HeapPointWriter,int,int,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDRadixSelector#heapSelect(HeapPointWriter,PointWriter,PointWriter,int,int,int,int,int).mjava","sourceNew":"  private byte[] heapRadixSelect(HeapPointWriter points, int dim, int from, int to, int partitionPoint, int commonPrefix) {\n    final int offset = dim * bytesPerDim + commonPrefix;\n    new RadixSelector(bytesSorted - commonPrefix) {\n\n      @Override\n      protected void swap(int i, int j) {\n        points.swap(i, j);\n      }\n\n      @Override\n      protected int byteAt(int i, int k) {\n        assert k >= 0;\n        if (k + commonPrefix < bytesPerDim) {\n          // dim bytes\n          int block = i / points.valuesPerBlock;\n          int index = i % points.valuesPerBlock;\n          return points.blocks.get(block)[index * packedBytesLength + offset + k] & 0xff;\n        } else {\n          // doc id\n          int s = 3 - (k + commonPrefix - bytesPerDim);\n          return (points.docIDs[i] >>> (s * 8)) & 0xff;\n        }\n      }\n    }.select(from, to, partitionPoint);\n\n    byte[] partition = new byte[bytesPerDim];\n    points.getPackedValueSlice(partitionPoint, bytesRef1);\n    System.arraycopy(bytesRef1.bytes, bytesRef1.offset + dim * bytesPerDim, partition, 0, bytesPerDim);\n    return partition;\n  }\n\n","sourceOld":"  private byte[] heapSelect(HeapPointWriter points, PointWriter left, PointWriter right, int dim, int from, int to, int partitionPoint, int commonPrefix) throws IOException {\n    final int offset = dim * bytesPerDim + commonPrefix;\n    new RadixSelector(bytesSorted - commonPrefix) {\n\n      @Override\n      protected void swap(int i, int j) {\n        points.swap(i, j);\n      }\n\n      @Override\n      protected int byteAt(int i, int k) {\n        assert k >= 0;\n        if (k + commonPrefix < bytesPerDim) {\n          // dim bytes\n          int block = i / points.valuesPerBlock;\n          int index = i % points.valuesPerBlock;\n          return points.blocks.get(block)[index * packedBytesLength + offset + k] & 0xff;\n        } else {\n          // doc id\n          int s = 3 - (k + commonPrefix - bytesPerDim);\n          return (points.docIDs[i] >>> (s * 8)) & 0xff;\n        }\n      }\n    }.select(from, to, partitionPoint);\n\n    for (int i = from; i < to; i++) {\n      points.getPackedValueSlice(i, bytesRef1);\n      int docID = points.docIDs[i];\n      if (i < partitionPoint) {\n        left.append(bytesRef1, docID);\n      } else {\n        right.append(bytesRef1, docID);\n      }\n    }\n    byte[] partition = new byte[bytesPerDim];\n    points.getPackedValueSlice(partitionPoint, bytesRef1);\n    System.arraycopy(bytesRef1.bytes, bytesRef1.offset + dim * bytesPerDim, partition, 0, bytesPerDim);\n    return partition;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a69ebf290ab26d026cc224e517e0d93d931ac87b":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a69ebf290ab26d026cc224e517e0d93d931ac87b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["a69ebf290ab26d026cc224e517e0d93d931ac87b"],"a69ebf290ab26d026cc224e517e0d93d931ac87b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}