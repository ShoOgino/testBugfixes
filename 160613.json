{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#addPosition(int,BytesRef,int,int).mjava","commits":[{"id":"6616b1fd222bb5a60f7f7856ace312252bc97890","date":1350142044,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#addPosition(int,BytesRef,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#addPosition(int,BytesRef,int,int).mjava","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    //if (DEBUG) System.out.println(\"SPW:     addPos pos=\" + position + \" payload=\" + (payload == null ? \"null\" : (payload.length + \" bytes\")) + \" proxFP=\" + proxOut.getFilePointer());\n    assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 : \"invalid indexOptions: \" + indexOptions;\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    int payloadLength = 0;\n\n    if (storePayloads) {\n      payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n    \n    if (storeOffsets) {\n      // don't use startOffset - lastEndOffset, because this creates lots of negative vints for synonyms,\n      // and the numbers aren't that much smaller anyways.\n      int offsetDelta = startOffset - lastOffset;\n      int offsetLength = endOffset - startOffset;\n      assert offsetDelta >= 0 && offsetLength >= 0 : \"startOffset=\" + startOffset + \",lastOffset=\" + lastOffset + \",endOffset=\" + endOffset;\n      if (offsetLength != lastOffsetLength) {\n        proxOut.writeVInt(offsetDelta << 1 | 1);\n        proxOut.writeVInt(offsetLength);\n      } else {\n        proxOut.writeVInt(offsetDelta << 1);\n      }\n      lastOffset = startOffset;\n      lastOffsetLength = offsetLength;\n    }\n    \n    if (payloadLength > 0) {\n      proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n    }\n  }\n\n","sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    //if (DEBUG) System.out.println(\"SPW:     addPos pos=\" + position + \" payload=\" + (payload == null ? \"null\" : (payload.length + \" bytes\")) + \" proxFP=\" + proxOut.getFilePointer());\n    assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 : \"invalid indexOptions: \" + indexOptions;\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    int payloadLength = 0;\n\n    if (storePayloads) {\n      payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n    \n    if (storeOffsets) {\n      // don't use startOffset - lastEndOffset, because this creates lots of negative vints for synonyms,\n      // and the numbers aren't that much smaller anyways.\n      int offsetDelta = startOffset - lastOffset;\n      int offsetLength = endOffset - startOffset;\n      assert offsetDelta >= 0 && offsetLength >= 0 : \"startOffset=\" + startOffset + \",lastOffset=\" + lastOffset + \",endOffset=\" + endOffset;\n      if (offsetLength != lastOffsetLength) {\n        proxOut.writeVInt(offsetDelta << 1 | 1);\n        proxOut.writeVInt(offsetLength);\n      } else {\n        proxOut.writeVInt(offsetDelta << 1);\n      }\n      lastOffset = startOffset;\n      lastOffsetLength = offsetLength;\n    }\n    \n    if (payloadLength > 0) {\n      proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#addPosition(int,BytesRef,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#addPosition(int,BytesRef,int,int).mjava","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    //if (DEBUG) System.out.println(\"SPW:     addPos pos=\" + position + \" payload=\" + (payload == null ? \"null\" : (payload.length + \" bytes\")) + \" proxFP=\" + proxOut.getFilePointer());\n    assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 : \"invalid indexOptions: \" + indexOptions;\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    int payloadLength = 0;\n\n    if (storePayloads) {\n      payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n    \n    if (storeOffsets) {\n      // don't use startOffset - lastEndOffset, because this creates lots of negative vints for synonyms,\n      // and the numbers aren't that much smaller anyways.\n      int offsetDelta = startOffset - lastOffset;\n      int offsetLength = endOffset - startOffset;\n      assert offsetDelta >= 0 && offsetLength >= 0 : \"startOffset=\" + startOffset + \",lastOffset=\" + lastOffset + \",endOffset=\" + endOffset;\n      if (offsetLength != lastOffsetLength) {\n        proxOut.writeVInt(offsetDelta << 1 | 1);\n        proxOut.writeVInt(offsetLength);\n      } else {\n        proxOut.writeVInt(offsetDelta << 1);\n      }\n      lastOffset = startOffset;\n      lastOffsetLength = offsetLength;\n    }\n    \n    if (payloadLength > 0) {\n      proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n    }\n  }\n\n","sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    //if (DEBUG) System.out.println(\"SPW:     addPos pos=\" + position + \" payload=\" + (payload == null ? \"null\" : (payload.length + \" bytes\")) + \" proxFP=\" + proxOut.getFilePointer());\n    assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 : \"invalid indexOptions: \" + indexOptions;\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    int payloadLength = 0;\n\n    if (storePayloads) {\n      payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n    \n    if (storeOffsets) {\n      // don't use startOffset - lastEndOffset, because this creates lots of negative vints for synonyms,\n      // and the numbers aren't that much smaller anyways.\n      int offsetDelta = startOffset - lastOffset;\n      int offsetLength = endOffset - startOffset;\n      assert offsetDelta >= 0 && offsetLength >= 0 : \"startOffset=\" + startOffset + \",lastOffset=\" + lastOffset + \",endOffset=\" + endOffset;\n      if (offsetLength != lastOffsetLength) {\n        proxOut.writeVInt(offsetDelta << 1 | 1);\n        proxOut.writeVInt(offsetLength);\n      } else {\n        proxOut.writeVInt(offsetDelta << 1);\n      }\n      lastOffset = startOffset;\n      lastOffsetLength = offsetLength;\n    }\n    \n    if (payloadLength > 0) {\n      proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#addPosition(int,BytesRef,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#addPosition(int,BytesRef,int,int).mjava","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    //if (DEBUG) System.out.println(\"SPW:     addPos pos=\" + position + \" payload=\" + (payload == null ? \"null\" : (payload.length + \" bytes\")) + \" proxFP=\" + proxOut.getFilePointer());\n    assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 : \"invalid indexOptions: \" + indexOptions;\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    int payloadLength = 0;\n\n    if (storePayloads) {\n      payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n    \n    if (storeOffsets) {\n      // don't use startOffset - lastEndOffset, because this creates lots of negative vints for synonyms,\n      // and the numbers aren't that much smaller anyways.\n      int offsetDelta = startOffset - lastOffset;\n      int offsetLength = endOffset - startOffset;\n      assert offsetDelta >= 0 && offsetLength >= 0 : \"startOffset=\" + startOffset + \",lastOffset=\" + lastOffset + \",endOffset=\" + endOffset;\n      if (offsetLength != lastOffsetLength) {\n        proxOut.writeVInt(offsetDelta << 1 | 1);\n        proxOut.writeVInt(offsetLength);\n      } else {\n        proxOut.writeVInt(offsetDelta << 1);\n      }\n      lastOffset = startOffset;\n      lastOffsetLength = offsetLength;\n    }\n    \n    if (payloadLength > 0) {\n      proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n    }\n  }\n\n","sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    //if (DEBUG) System.out.println(\"SPW:     addPos pos=\" + position + \" payload=\" + (payload == null ? \"null\" : (payload.length + \" bytes\")) + \" proxFP=\" + proxOut.getFilePointer());\n    assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 : \"invalid indexOptions: \" + indexOptions;\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    int payloadLength = 0;\n\n    if (storePayloads) {\n      payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n    \n    if (storeOffsets) {\n      // don't use startOffset - lastEndOffset, because this creates lots of negative vints for synonyms,\n      // and the numbers aren't that much smaller anyways.\n      int offsetDelta = startOffset - lastOffset;\n      int offsetLength = endOffset - startOffset;\n      assert offsetDelta >= 0 && offsetLength >= 0 : \"startOffset=\" + startOffset + \",lastOffset=\" + lastOffset + \",endOffset=\" + endOffset;\n      if (offsetLength != lastOffsetLength) {\n        proxOut.writeVInt(offsetDelta << 1 | 1);\n        proxOut.writeVInt(offsetLength);\n      } else {\n        proxOut.writeVInt(offsetDelta << 1);\n      }\n      lastOffset = startOffset;\n      lastOffsetLength = offsetLength;\n    }\n    \n    if (payloadLength > 0) {\n      proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa80a35d7c4b2b1e83082b275e3e8328ab93db52","date":1381766157,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#addPosition(int,BytesRef,int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#addPosition(int,BytesRef,int,int).mjava","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    //if (DEBUG) System.out.println(\"SPW:     addPos pos=\" + position + \" payload=\" + (payload == null ? \"null\" : (payload.length + \" bytes\")) + \" proxFP=\" + proxOut.getFilePointer());\n    assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 : \"invalid indexOptions: \" + indexOptions;\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    int payloadLength = 0;\n\n    if (writePayloads) {\n      payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n    \n    if (writeOffsets) {\n      // don't use startOffset - lastEndOffset, because this creates lots of negative vints for synonyms,\n      // and the numbers aren't that much smaller anyways.\n      int offsetDelta = startOffset - lastOffset;\n      int offsetLength = endOffset - startOffset;\n      assert offsetDelta >= 0 && offsetLength >= 0 : \"startOffset=\" + startOffset + \",lastOffset=\" + lastOffset + \",endOffset=\" + endOffset;\n      if (offsetLength != lastOffsetLength) {\n        proxOut.writeVInt(offsetDelta << 1 | 1);\n        proxOut.writeVInt(offsetLength);\n      } else {\n        proxOut.writeVInt(offsetDelta << 1);\n      }\n      lastOffset = startOffset;\n      lastOffsetLength = offsetLength;\n    }\n    \n    if (payloadLength > 0) {\n      proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n    }\n  }\n\n","sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    //if (DEBUG) System.out.println(\"SPW:     addPos pos=\" + position + \" payload=\" + (payload == null ? \"null\" : (payload.length + \" bytes\")) + \" proxFP=\" + proxOut.getFilePointer());\n    assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 : \"invalid indexOptions: \" + indexOptions;\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    int payloadLength = 0;\n\n    if (storePayloads) {\n      payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n    \n    if (storeOffsets) {\n      // don't use startOffset - lastEndOffset, because this creates lots of negative vints for synonyms,\n      // and the numbers aren't that much smaller anyways.\n      int offsetDelta = startOffset - lastOffset;\n      int offsetLength = endOffset - startOffset;\n      assert offsetDelta >= 0 && offsetLength >= 0 : \"startOffset=\" + startOffset + \",lastOffset=\" + lastOffset + \",endOffset=\" + endOffset;\n      if (offsetLength != lastOffsetLength) {\n        proxOut.writeVInt(offsetDelta << 1 | 1);\n        proxOut.writeVInt(offsetLength);\n      } else {\n        proxOut.writeVInt(offsetDelta << 1);\n      }\n      lastOffset = startOffset;\n      lastOffsetLength = offsetLength;\n    }\n    \n    if (payloadLength > 0) {\n      proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#addPosition(int,BytesRef,int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#addPosition(int,BytesRef,int,int).mjava","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    //if (DEBUG) System.out.println(\"SPW:     addPos pos=\" + position + \" payload=\" + (payload == null ? \"null\" : (payload.length + \" bytes\")) + \" proxFP=\" + proxOut.getFilePointer());\n    assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 : \"invalid indexOptions: \" + indexOptions;\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    int payloadLength = 0;\n\n    if (writePayloads) {\n      payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n    \n    if (writeOffsets) {\n      // don't use startOffset - lastEndOffset, because this creates lots of negative vints for synonyms,\n      // and the numbers aren't that much smaller anyways.\n      int offsetDelta = startOffset - lastOffset;\n      int offsetLength = endOffset - startOffset;\n      assert offsetDelta >= 0 && offsetLength >= 0 : \"startOffset=\" + startOffset + \",lastOffset=\" + lastOffset + \",endOffset=\" + endOffset;\n      if (offsetLength != lastOffsetLength) {\n        proxOut.writeVInt(offsetDelta << 1 | 1);\n        proxOut.writeVInt(offsetLength);\n      } else {\n        proxOut.writeVInt(offsetDelta << 1);\n      }\n      lastOffset = startOffset;\n      lastOffsetLength = offsetLength;\n    }\n    \n    if (payloadLength > 0) {\n      proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n    }\n  }\n\n","sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    //if (DEBUG) System.out.println(\"SPW:     addPos pos=\" + position + \" payload=\" + (payload == null ? \"null\" : (payload.length + \" bytes\")) + \" proxFP=\" + proxOut.getFilePointer());\n    assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 : \"invalid indexOptions: \" + indexOptions;\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    int payloadLength = 0;\n\n    if (writePayloads) {\n      payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n    \n    if (writeOffsets) {\n      // don't use startOffset - lastEndOffset, because this creates lots of negative vints for synonyms,\n      // and the numbers aren't that much smaller anyways.\n      int offsetDelta = startOffset - lastOffset;\n      int offsetLength = endOffset - startOffset;\n      assert offsetDelta >= 0 && offsetLength >= 0 : \"startOffset=\" + startOffset + \",lastOffset=\" + lastOffset + \",endOffset=\" + endOffset;\n      if (offsetLength != lastOffsetLength) {\n        proxOut.writeVInt(offsetDelta << 1 | 1);\n        proxOut.writeVInt(offsetLength);\n      } else {\n        proxOut.writeVInt(offsetDelta << 1);\n      }\n      lastOffset = startOffset;\n      lastOffsetLength = offsetLength;\n    }\n    \n    if (payloadLength > 0) {\n      proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#addPosition(int,BytesRef,int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#addPosition(int,BytesRef,int,int).mjava","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    //if (DEBUG) System.out.println(\"SPW:     addPos pos=\" + position + \" payload=\" + (payload == null ? \"null\" : (payload.length + \" bytes\")) + \" proxFP=\" + proxOut.getFilePointer());\n    assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 : \"invalid indexOptions: \" + indexOptions;\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    int payloadLength = 0;\n\n    if (writePayloads) {\n      payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n    \n    if (writeOffsets) {\n      // don't use startOffset - lastEndOffset, because this creates lots of negative vints for synonyms,\n      // and the numbers aren't that much smaller anyways.\n      int offsetDelta = startOffset - lastOffset;\n      int offsetLength = endOffset - startOffset;\n      assert offsetDelta >= 0 && offsetLength >= 0 : \"startOffset=\" + startOffset + \",lastOffset=\" + lastOffset + \",endOffset=\" + endOffset;\n      if (offsetLength != lastOffsetLength) {\n        proxOut.writeVInt(offsetDelta << 1 | 1);\n        proxOut.writeVInt(offsetLength);\n      } else {\n        proxOut.writeVInt(offsetDelta << 1);\n      }\n      lastOffset = startOffset;\n      lastOffsetLength = offsetLength;\n    }\n    \n    if (payloadLength > 0) {\n      proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n    }\n  }\n\n","sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    //if (DEBUG) System.out.println(\"SPW:     addPos pos=\" + position + \" payload=\" + (payload == null ? \"null\" : (payload.length + \" bytes\")) + \" proxFP=\" + proxOut.getFilePointer());\n    assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 : \"invalid indexOptions: \" + indexOptions;\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    int payloadLength = 0;\n\n    if (writePayloads) {\n      payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n    \n    if (writeOffsets) {\n      // don't use startOffset - lastEndOffset, because this creates lots of negative vints for synonyms,\n      // and the numbers aren't that much smaller anyways.\n      int offsetDelta = startOffset - lastOffset;\n      int offsetLength = endOffset - startOffset;\n      assert offsetDelta >= 0 && offsetLength >= 0 : \"startOffset=\" + startOffset + \",lastOffset=\" + lastOffset + \",endOffset=\" + endOffset;\n      if (offsetLength != lastOffsetLength) {\n        proxOut.writeVInt(offsetDelta << 1 | 1);\n        proxOut.writeVInt(offsetLength);\n      } else {\n        proxOut.writeVInt(offsetDelta << 1);\n      }\n      lastOffset = startOffset;\n      lastOffsetLength = offsetLength;\n    }\n    \n    if (payloadLength > 0) {\n      proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6616b1fd222bb5a60f7f7856ace312252bc97890":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6616b1fd222bb5a60f7f7856ace312252bc97890"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"6616b1fd222bb5a60f7f7856ace312252bc97890":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6616b1fd222bb5a60f7f7856ace312252bc97890","c7492bcb52be51e55d596134b95b2e53cc4ffb91","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}