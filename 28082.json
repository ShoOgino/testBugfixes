{"path":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermsEnum#NumericRangeTermsEnum(TermsEnum).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermsEnum#NumericRangeTermsEnum(TermsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermsEnum#NumericRangeTermsEnum(TermsEnum).mjava","sourceNew":"    NumericRangeTermsEnum(final TermsEnum tenum) throws IOException {\n      super(tenum);\n      switch (dataType) {\n        case LONG:\n        case DOUBLE: {\n          // lower\n          long minBound;\n          if (dataType == DataType.LONG) {\n            minBound = (min == null) ? Long.MIN_VALUE : min.longValue();\n          } else {\n            assert dataType == DataType.DOUBLE;\n            minBound = (min == null) ? LONG_NEGATIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(min.doubleValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Long.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          long maxBound;\n          if (dataType == DataType.LONG) {\n            maxBound = (max == null) ? Long.MAX_VALUE : max.longValue();\n          } else {\n            assert dataType == DataType.DOUBLE;\n            maxBound = (max == null) ? LONG_POSITIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(max.doubleValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Long.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          NumericUtils.splitLongRange(new NumericUtils.LongRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        case INT:\n        case FLOAT: {\n          // lower\n          int minBound;\n          if (dataType == DataType.INT) {\n            minBound = (min == null) ? Integer.MIN_VALUE : min.intValue();\n          } else {\n            assert dataType == DataType.FLOAT;\n            minBound = (min == null) ? INT_NEGATIVE_INFINITY\n              : NumericUtils.floatToSortableInt(min.floatValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Integer.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          int maxBound;\n          if (dataType == DataType.INT) {\n            maxBound = (max == null) ? Integer.MAX_VALUE : max.intValue();\n          } else {\n            assert dataType == DataType.FLOAT;\n            maxBound = (max == null) ? INT_POSITIVE_INFINITY\n              : NumericUtils.floatToSortableInt(max.floatValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Integer.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          NumericUtils.splitIntRange(new NumericUtils.IntRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        default:\n          // should never happen\n          throw new IllegalArgumentException(\"Invalid numeric DataType\");\n      }\n\n      termComp = getComparator();\n    }\n\n","sourceOld":"    NumericRangeTermsEnum(final TermsEnum tenum) throws IOException {\n      super(tenum);\n      switch (dataType) {\n        case LONG:\n        case DOUBLE: {\n          // lower\n          long minBound;\n          if (dataType == DataType.LONG) {\n            minBound = (min == null) ? Long.MIN_VALUE : min.longValue();\n          } else {\n            assert dataType == DataType.DOUBLE;\n            minBound = (min == null) ? LONG_NEGATIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(min.doubleValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Long.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          long maxBound;\n          if (dataType == DataType.LONG) {\n            maxBound = (max == null) ? Long.MAX_VALUE : max.longValue();\n          } else {\n            assert dataType == DataType.DOUBLE;\n            maxBound = (max == null) ? LONG_POSITIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(max.doubleValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Long.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          NumericUtils.splitLongRange(new NumericUtils.LongRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        case INT:\n        case FLOAT: {\n          // lower\n          int minBound;\n          if (dataType == DataType.INT) {\n            minBound = (min == null) ? Integer.MIN_VALUE : min.intValue();\n          } else {\n            assert dataType == DataType.FLOAT;\n            minBound = (min == null) ? INT_NEGATIVE_INFINITY\n              : NumericUtils.floatToSortableInt(min.floatValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Integer.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          int maxBound;\n          if (dataType == DataType.INT) {\n            maxBound = (max == null) ? Integer.MAX_VALUE : max.intValue();\n          } else {\n            assert dataType == DataType.FLOAT;\n            maxBound = (max == null) ? INT_POSITIVE_INFINITY\n              : NumericUtils.floatToSortableInt(max.floatValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Integer.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          NumericUtils.splitIntRange(new NumericUtils.IntRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        default:\n          // should never happen\n          throw new IllegalArgumentException(\"Invalid numeric DataType\");\n      }\n\n      termComp = getComparator();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a78a90fc9701e511308346ea29f4f5e548bb39fe","date":1329489995,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermsEnum#NumericRangeTermsEnum(TermsEnum).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermsEnum#NumericRangeTermsEnum(TermsEnum).mjava","sourceNew":"    NumericRangeTermsEnum(final TermsEnum tenum) throws IOException {\n      super(tenum);\n      switch (dataType) {\n        case LONG:\n        case DOUBLE: {\n          // lower\n          long minBound;\n          if (dataType == NumericType.LONG) {\n            minBound = (min == null) ? Long.MIN_VALUE : min.longValue();\n          } else {\n            assert dataType == NumericType.DOUBLE;\n            minBound = (min == null) ? LONG_NEGATIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(min.doubleValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Long.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          long maxBound;\n          if (dataType == NumericType.LONG) {\n            maxBound = (max == null) ? Long.MAX_VALUE : max.longValue();\n          } else {\n            assert dataType == NumericType.DOUBLE;\n            maxBound = (max == null) ? LONG_POSITIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(max.doubleValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Long.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          NumericUtils.splitLongRange(new NumericUtils.LongRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        case INT:\n        case FLOAT: {\n          // lower\n          int minBound;\n          if (dataType == NumericType.INT) {\n            minBound = (min == null) ? Integer.MIN_VALUE : min.intValue();\n          } else {\n            assert dataType == NumericType.FLOAT;\n            minBound = (min == null) ? INT_NEGATIVE_INFINITY\n              : NumericUtils.floatToSortableInt(min.floatValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Integer.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          int maxBound;\n          if (dataType == NumericType.INT) {\n            maxBound = (max == null) ? Integer.MAX_VALUE : max.intValue();\n          } else {\n            assert dataType == NumericType.FLOAT;\n            maxBound = (max == null) ? INT_POSITIVE_INFINITY\n              : NumericUtils.floatToSortableInt(max.floatValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Integer.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          NumericUtils.splitIntRange(new NumericUtils.IntRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        default:\n          // should never happen\n          throw new IllegalArgumentException(\"Invalid NumericType\");\n      }\n\n      termComp = getComparator();\n    }\n\n","sourceOld":"    NumericRangeTermsEnum(final TermsEnum tenum) throws IOException {\n      super(tenum);\n      switch (dataType) {\n        case LONG:\n        case DOUBLE: {\n          // lower\n          long minBound;\n          if (dataType == DataType.LONG) {\n            minBound = (min == null) ? Long.MIN_VALUE : min.longValue();\n          } else {\n            assert dataType == DataType.DOUBLE;\n            minBound = (min == null) ? LONG_NEGATIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(min.doubleValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Long.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          long maxBound;\n          if (dataType == DataType.LONG) {\n            maxBound = (max == null) ? Long.MAX_VALUE : max.longValue();\n          } else {\n            assert dataType == DataType.DOUBLE;\n            maxBound = (max == null) ? LONG_POSITIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(max.doubleValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Long.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          NumericUtils.splitLongRange(new NumericUtils.LongRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        case INT:\n        case FLOAT: {\n          // lower\n          int minBound;\n          if (dataType == DataType.INT) {\n            minBound = (min == null) ? Integer.MIN_VALUE : min.intValue();\n          } else {\n            assert dataType == DataType.FLOAT;\n            minBound = (min == null) ? INT_NEGATIVE_INFINITY\n              : NumericUtils.floatToSortableInt(min.floatValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Integer.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          int maxBound;\n          if (dataType == DataType.INT) {\n            maxBound = (max == null) ? Integer.MAX_VALUE : max.intValue();\n          } else {\n            assert dataType == DataType.FLOAT;\n            maxBound = (max == null) ? INT_POSITIVE_INFINITY\n              : NumericUtils.floatToSortableInt(max.floatValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Integer.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          NumericUtils.splitIntRange(new NumericUtils.IntRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        default:\n          // should never happen\n          throw new IllegalArgumentException(\"Invalid numeric DataType\");\n      }\n\n      termComp = getComparator();\n    }\n\n","bugFix":["7f1640a619bcb2540ce0703e0db764ce7327c1a5"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermsEnum#NumericRangeTermsEnum(TermsEnum).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermsEnum#NumericRangeTermsEnum(TermsEnum).mjava","sourceNew":"    NumericRangeTermsEnum(final TermsEnum tenum) {\n      super(tenum);\n      switch (dataType) {\n        case LONG:\n        case DOUBLE: {\n          // lower\n          long minBound;\n          if (dataType == NumericType.LONG) {\n            minBound = (min == null) ? Long.MIN_VALUE : min.longValue();\n          } else {\n            assert dataType == NumericType.DOUBLE;\n            minBound = (min == null) ? LONG_NEGATIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(min.doubleValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Long.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          long maxBound;\n          if (dataType == NumericType.LONG) {\n            maxBound = (max == null) ? Long.MAX_VALUE : max.longValue();\n          } else {\n            assert dataType == NumericType.DOUBLE;\n            maxBound = (max == null) ? LONG_POSITIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(max.doubleValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Long.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          NumericUtils.splitLongRange(new NumericUtils.LongRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        case INT:\n        case FLOAT: {\n          // lower\n          int minBound;\n          if (dataType == NumericType.INT) {\n            minBound = (min == null) ? Integer.MIN_VALUE : min.intValue();\n          } else {\n            assert dataType == NumericType.FLOAT;\n            minBound = (min == null) ? INT_NEGATIVE_INFINITY\n              : NumericUtils.floatToSortableInt(min.floatValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Integer.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          int maxBound;\n          if (dataType == NumericType.INT) {\n            maxBound = (max == null) ? Integer.MAX_VALUE : max.intValue();\n          } else {\n            assert dataType == NumericType.FLOAT;\n            maxBound = (max == null) ? INT_POSITIVE_INFINITY\n              : NumericUtils.floatToSortableInt(max.floatValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Integer.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          NumericUtils.splitIntRange(new NumericUtils.IntRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        default:\n          // should never happen\n          throw new IllegalArgumentException(\"Invalid NumericType\");\n      }\n\n      termComp = getComparator();\n    }\n\n","sourceOld":"    NumericRangeTermsEnum(final TermsEnum tenum) throws IOException {\n      super(tenum);\n      switch (dataType) {\n        case LONG:\n        case DOUBLE: {\n          // lower\n          long minBound;\n          if (dataType == NumericType.LONG) {\n            minBound = (min == null) ? Long.MIN_VALUE : min.longValue();\n          } else {\n            assert dataType == NumericType.DOUBLE;\n            minBound = (min == null) ? LONG_NEGATIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(min.doubleValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Long.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          long maxBound;\n          if (dataType == NumericType.LONG) {\n            maxBound = (max == null) ? Long.MAX_VALUE : max.longValue();\n          } else {\n            assert dataType == NumericType.DOUBLE;\n            maxBound = (max == null) ? LONG_POSITIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(max.doubleValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Long.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          NumericUtils.splitLongRange(new NumericUtils.LongRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        case INT:\n        case FLOAT: {\n          // lower\n          int minBound;\n          if (dataType == NumericType.INT) {\n            minBound = (min == null) ? Integer.MIN_VALUE : min.intValue();\n          } else {\n            assert dataType == NumericType.FLOAT;\n            minBound = (min == null) ? INT_NEGATIVE_INFINITY\n              : NumericUtils.floatToSortableInt(min.floatValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Integer.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          int maxBound;\n          if (dataType == NumericType.INT) {\n            maxBound = (max == null) ? Integer.MAX_VALUE : max.intValue();\n          } else {\n            assert dataType == NumericType.FLOAT;\n            maxBound = (max == null) ? INT_POSITIVE_INFINITY\n              : NumericUtils.floatToSortableInt(max.floatValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Integer.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          NumericUtils.splitIntRange(new NumericUtils.IntRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        default:\n          // should never happen\n          throw new IllegalArgumentException(\"Invalid NumericType\");\n      }\n\n      termComp = getComparator();\n    }\n\n","bugFix":["e8dd2a69747e9f2922fd8b6970bd1661b26a692d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermsEnum#NumericRangeTermsEnum(TermsEnum).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermsEnum#NumericRangeTermsEnum(TermsEnum).mjava","sourceNew":"    NumericRangeTermsEnum(final TermsEnum tenum) {\n      super(tenum);\n      switch (dataType) {\n        case LONG:\n        case DOUBLE: {\n          // lower\n          long minBound;\n          if (dataType == NumericType.LONG) {\n            minBound = (min == null) ? Long.MIN_VALUE : min.longValue();\n          } else {\n            assert dataType == NumericType.DOUBLE;\n            minBound = (min == null) ? LONG_NEGATIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(min.doubleValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Long.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          long maxBound;\n          if (dataType == NumericType.LONG) {\n            maxBound = (max == null) ? Long.MAX_VALUE : max.longValue();\n          } else {\n            assert dataType == NumericType.DOUBLE;\n            maxBound = (max == null) ? LONG_POSITIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(max.doubleValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Long.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          NumericUtils.splitLongRange(new NumericUtils.LongRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        case INT:\n        case FLOAT: {\n          // lower\n          int minBound;\n          if (dataType == NumericType.INT) {\n            minBound = (min == null) ? Integer.MIN_VALUE : min.intValue();\n          } else {\n            assert dataType == NumericType.FLOAT;\n            minBound = (min == null) ? INT_NEGATIVE_INFINITY\n              : NumericUtils.floatToSortableInt(min.floatValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Integer.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          int maxBound;\n          if (dataType == NumericType.INT) {\n            maxBound = (max == null) ? Integer.MAX_VALUE : max.intValue();\n          } else {\n            assert dataType == NumericType.FLOAT;\n            maxBound = (max == null) ? INT_POSITIVE_INFINITY\n              : NumericUtils.floatToSortableInt(max.floatValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Integer.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          NumericUtils.splitIntRange(new NumericUtils.IntRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        default:\n          // should never happen\n          throw new IllegalArgumentException(\"Invalid NumericType\");\n      }\n\n      termComp = getComparator();\n    }\n\n","sourceOld":"    NumericRangeTermsEnum(final TermsEnum tenum) throws IOException {\n      super(tenum);\n      switch (dataType) {\n        case LONG:\n        case DOUBLE: {\n          // lower\n          long minBound;\n          if (dataType == NumericType.LONG) {\n            minBound = (min == null) ? Long.MIN_VALUE : min.longValue();\n          } else {\n            assert dataType == NumericType.DOUBLE;\n            minBound = (min == null) ? LONG_NEGATIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(min.doubleValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Long.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          long maxBound;\n          if (dataType == NumericType.LONG) {\n            maxBound = (max == null) ? Long.MAX_VALUE : max.longValue();\n          } else {\n            assert dataType == NumericType.DOUBLE;\n            maxBound = (max == null) ? LONG_POSITIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(max.doubleValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Long.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          NumericUtils.splitLongRange(new NumericUtils.LongRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        case INT:\n        case FLOAT: {\n          // lower\n          int minBound;\n          if (dataType == NumericType.INT) {\n            minBound = (min == null) ? Integer.MIN_VALUE : min.intValue();\n          } else {\n            assert dataType == NumericType.FLOAT;\n            minBound = (min == null) ? INT_NEGATIVE_INFINITY\n              : NumericUtils.floatToSortableInt(min.floatValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Integer.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          int maxBound;\n          if (dataType == NumericType.INT) {\n            maxBound = (max == null) ? Integer.MAX_VALUE : max.intValue();\n          } else {\n            assert dataType == NumericType.FLOAT;\n            maxBound = (max == null) ? INT_POSITIVE_INFINITY\n              : NumericUtils.floatToSortableInt(max.floatValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Integer.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          NumericUtils.splitIntRange(new NumericUtils.IntRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        default:\n          // should never happen\n          throw new IllegalArgumentException(\"Invalid NumericType\");\n      }\n\n      termComp = getComparator();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","date":1379624229,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermsEnum#NumericRangeTermsEnum(TermsEnum).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermsEnum#NumericRangeTermsEnum(TermsEnum).mjava","sourceNew":"    NumericRangeTermsEnum(final TermsEnum tenum) {\n      super(tenum);\n      switch (dataType) {\n        case LONG:\n        case DOUBLE: {\n          // lower\n          long minBound;\n          if (dataType == NumericType.LONG) {\n            minBound = (min == null) ? Long.MIN_VALUE : min.longValue();\n          } else {\n            assert dataType == NumericType.DOUBLE;\n            minBound = (min == null) ? LONG_NEGATIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(min.doubleValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Long.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          long maxBound;\n          if (dataType == NumericType.LONG) {\n            maxBound = (max == null) ? Long.MAX_VALUE : max.longValue();\n          } else {\n            assert dataType == NumericType.DOUBLE;\n            maxBound = (max == null) ? LONG_POSITIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(max.doubleValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Long.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          NumericUtils.splitLongRange(new NumericUtils.LongRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        case INT:\n        case FLOAT: {\n          // lower\n          int minBound;\n          if (dataType == NumericType.INT) {\n            minBound = (min == null) ? Integer.MIN_VALUE : min.intValue();\n          } else {\n            assert dataType == NumericType.FLOAT;\n            minBound = (min == null) ? INT_NEGATIVE_INFINITY\n              : NumericUtils.floatToSortableInt(min.floatValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Integer.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          int maxBound;\n          if (dataType == NumericType.INT) {\n            maxBound = (max == null) ? Integer.MAX_VALUE : max.intValue();\n          } else {\n            assert dataType == NumericType.FLOAT;\n            maxBound = (max == null) ? INT_POSITIVE_INFINITY\n              : NumericUtils.floatToSortableInt(max.floatValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Integer.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          NumericUtils.splitIntRange(new NumericUtils.IntRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        default:\n          // should never happen\n          throw new IllegalArgumentException(\"Invalid NumericType\");\n      }\n    }\n\n","sourceOld":"    NumericRangeTermsEnum(final TermsEnum tenum) {\n      super(tenum);\n      switch (dataType) {\n        case LONG:\n        case DOUBLE: {\n          // lower\n          long minBound;\n          if (dataType == NumericType.LONG) {\n            minBound = (min == null) ? Long.MIN_VALUE : min.longValue();\n          } else {\n            assert dataType == NumericType.DOUBLE;\n            minBound = (min == null) ? LONG_NEGATIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(min.doubleValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Long.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          long maxBound;\n          if (dataType == NumericType.LONG) {\n            maxBound = (max == null) ? Long.MAX_VALUE : max.longValue();\n          } else {\n            assert dataType == NumericType.DOUBLE;\n            maxBound = (max == null) ? LONG_POSITIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(max.doubleValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Long.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          NumericUtils.splitLongRange(new NumericUtils.LongRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        case INT:\n        case FLOAT: {\n          // lower\n          int minBound;\n          if (dataType == NumericType.INT) {\n            minBound = (min == null) ? Integer.MIN_VALUE : min.intValue();\n          } else {\n            assert dataType == NumericType.FLOAT;\n            minBound = (min == null) ? INT_NEGATIVE_INFINITY\n              : NumericUtils.floatToSortableInt(min.floatValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Integer.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          int maxBound;\n          if (dataType == NumericType.INT) {\n            maxBound = (max == null) ? Integer.MAX_VALUE : max.intValue();\n          } else {\n            assert dataType == NumericType.FLOAT;\n            maxBound = (max == null) ? INT_POSITIVE_INFINITY\n              : NumericUtils.floatToSortableInt(max.floatValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Integer.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          NumericUtils.splitIntRange(new NumericUtils.IntRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        default:\n          // should never happen\n          throw new IllegalArgumentException(\"Invalid NumericType\");\n      }\n\n      termComp = getComparator();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LegacyNumericRangeQuery.NumericRangeTermsEnum#NumericRangeTermsEnum(TermsEnum).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermsEnum#NumericRangeTermsEnum(TermsEnum).mjava","sourceNew":"    NumericRangeTermsEnum(final TermsEnum tenum) {\n      super(tenum);\n      switch (dataType) {\n        case LONG:\n        case DOUBLE: {\n          // lower\n          long minBound;\n          if (dataType == FieldType.LegacyNumericType.LONG) {\n            minBound = (min == null) ? Long.MIN_VALUE : min.longValue();\n          } else {\n            assert dataType == FieldType.LegacyNumericType.DOUBLE;\n            minBound = (min == null) ? LONG_NEGATIVE_INFINITY\n              : LegacyNumericUtils.doubleToSortableLong(min.doubleValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Long.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          long maxBound;\n          if (dataType == FieldType.LegacyNumericType.LONG) {\n            maxBound = (max == null) ? Long.MAX_VALUE : max.longValue();\n          } else {\n            assert dataType == FieldType.LegacyNumericType.DOUBLE;\n            maxBound = (max == null) ? LONG_POSITIVE_INFINITY\n              : LegacyNumericUtils.doubleToSortableLong(max.doubleValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Long.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          LegacyNumericUtils.splitLongRange(new LegacyNumericUtils.LongRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        case INT:\n        case FLOAT: {\n          // lower\n          int minBound;\n          if (dataType == FieldType.LegacyNumericType.INT) {\n            minBound = (min == null) ? Integer.MIN_VALUE : min.intValue();\n          } else {\n            assert dataType == FieldType.LegacyNumericType.FLOAT;\n            minBound = (min == null) ? INT_NEGATIVE_INFINITY\n              : LegacyNumericUtils.floatToSortableInt(min.floatValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Integer.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          int maxBound;\n          if (dataType == LegacyNumericType.INT) {\n            maxBound = (max == null) ? Integer.MAX_VALUE : max.intValue();\n          } else {\n            assert dataType == FieldType.LegacyNumericType.FLOAT;\n            maxBound = (max == null) ? INT_POSITIVE_INFINITY\n              : LegacyNumericUtils.floatToSortableInt(max.floatValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Integer.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          LegacyNumericUtils.splitIntRange(new LegacyNumericUtils.IntRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        default:\n          // should never happen\n          throw new IllegalArgumentException(\"Invalid LegacyNumericType\");\n      }\n    }\n\n","sourceOld":"    NumericRangeTermsEnum(final TermsEnum tenum) {\n      super(tenum);\n      switch (dataType) {\n        case LONG:\n        case DOUBLE: {\n          // lower\n          long minBound;\n          if (dataType == NumericType.LONG) {\n            minBound = (min == null) ? Long.MIN_VALUE : min.longValue();\n          } else {\n            assert dataType == NumericType.DOUBLE;\n            minBound = (min == null) ? LONG_NEGATIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(min.doubleValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Long.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          long maxBound;\n          if (dataType == NumericType.LONG) {\n            maxBound = (max == null) ? Long.MAX_VALUE : max.longValue();\n          } else {\n            assert dataType == NumericType.DOUBLE;\n            maxBound = (max == null) ? LONG_POSITIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(max.doubleValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Long.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          NumericUtils.splitLongRange(new NumericUtils.LongRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        case INT:\n        case FLOAT: {\n          // lower\n          int minBound;\n          if (dataType == NumericType.INT) {\n            minBound = (min == null) ? Integer.MIN_VALUE : min.intValue();\n          } else {\n            assert dataType == NumericType.FLOAT;\n            minBound = (min == null) ? INT_NEGATIVE_INFINITY\n              : NumericUtils.floatToSortableInt(min.floatValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Integer.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          int maxBound;\n          if (dataType == NumericType.INT) {\n            maxBound = (max == null) ? Integer.MAX_VALUE : max.intValue();\n          } else {\n            assert dataType == NumericType.FLOAT;\n            maxBound = (max == null) ? INT_POSITIVE_INFINITY\n              : NumericUtils.floatToSortableInt(max.floatValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Integer.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          NumericUtils.splitIntRange(new NumericUtils.IntRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        default:\n          // should never happen\n          throw new IllegalArgumentException(\"Invalid NumericType\");\n      }\n    }\n\n","bugFix":null,"bugIntro":["a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a78a90fc9701e511308346ea29f4f5e548bb39fe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a78a90fc9701e511308346ea29f4f5e548bb39fe","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"770342641f7b505eaa8dccdc666158bff2419109":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["770342641f7b505eaa8dccdc666158bff2419109"]},"commit2Childs":{"a78a90fc9701e511308346ea29f4f5e548bb39fe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["770342641f7b505eaa8dccdc666158bff2419109"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"770342641f7b505eaa8dccdc666158bff2419109":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}