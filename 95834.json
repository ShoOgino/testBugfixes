{"path":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40SkipListWriter#writeSkipData(int,IndexOutput).mjava","commits":[{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40SkipListWriter#writeSkipData(int,IndexOutput).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40SkipListWriter#writeSkipData(int,IndexOutput).mjava","sourceNew":"  @Override\n  protected void writeSkipData(int level, IndexOutput skipBuffer) throws IOException {\n    // To efficiently store payloads/offsets in the posting lists we do not store the length of\n    // every payload/offset. Instead we omit the length if the previous lengths were the same\n    //\n    // However, in order to support skipping, the length at every skip point must be known.\n    // So we use the same length encoding that we use for the posting lists for the skip data as well:\n    // Case 1: current field does not store payloads/offsets\n    //           SkipDatum                 --> DocSkip, FreqSkip, ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           DocSkip records the document number before every SkipInterval th  document in TermFreqs. \n    //           Document numbers are represented as differences from the previous value in the sequence.\n    // Case 2: current field stores payloads/offsets\n    //           SkipDatum                 --> DocSkip, PayloadLength?,OffsetLength?,FreqSkip,ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           PayloadLength,OffsetLength--> VInt    \n    //         In this case DocSkip/2 is the difference between\n    //         the current and the previous value. If DocSkip\n    //         is odd, then a PayloadLength encoded as VInt follows,\n    //         if DocSkip is even, then it is assumed that the\n    //         current payload/offset lengths equals the lengths at the previous\n    //         skip point\n    int delta = curDoc - lastSkipDoc[level];\n    \n    if (curStorePayloads || curStoreOffsets) {\n      assert curStorePayloads || curPayloadLength == lastSkipPayloadLength[level];\n      assert curStoreOffsets  || curOffsetLength == lastSkipOffsetLength[level];\n\n      if (curPayloadLength == lastSkipPayloadLength[level] && curOffsetLength == lastSkipOffsetLength[level]) {\n        // the current payload/offset lengths equals the lengths at the previous skip point,\n        // so we don't store the lengths again\n        skipBuffer.writeVInt(delta << 1);\n      } else {\n        // the payload and/or offset length is different from the previous one. We shift the DocSkip, \n        // set the lowest bit and store the current payload and/or offset lengths as VInts.\n        skipBuffer.writeVInt(delta << 1 | 1);\n\n        if (curStorePayloads) {\n          skipBuffer.writeVInt(curPayloadLength);\n          lastSkipPayloadLength[level] = curPayloadLength;\n        }\n        if (curStoreOffsets) {\n          skipBuffer.writeVInt(curOffsetLength);\n          lastSkipOffsetLength[level] = curOffsetLength;\n        }\n      }\n    } else {\n      // current field does not store payloads or offsets\n      skipBuffer.writeVInt(delta);\n    }\n\n    skipBuffer.writeVInt((int) (curFreqPointer - lastSkipFreqPointer[level]));\n    skipBuffer.writeVInt((int) (curProxPointer - lastSkipProxPointer[level]));\n\n    lastSkipDoc[level] = curDoc;\n    \n    lastSkipFreqPointer[level] = curFreqPointer;\n    lastSkipProxPointer[level] = curProxPointer;\n  }\n\n","sourceOld":"  @Override\n  protected void writeSkipData(int level, IndexOutput skipBuffer) throws IOException {\n    // To efficiently store payloads/offsets in the posting lists we do not store the length of\n    // every payload/offset. Instead we omit the length if the previous lengths were the same\n    //\n    // However, in order to support skipping, the length at every skip point must be known.\n    // So we use the same length encoding that we use for the posting lists for the skip data as well:\n    // Case 1: current field does not store payloads/offsets\n    //           SkipDatum                 --> DocSkip, FreqSkip, ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           DocSkip records the document number before every SkipInterval th  document in TermFreqs. \n    //           Document numbers are represented as differences from the previous value in the sequence.\n    // Case 2: current field stores payloads/offsets\n    //           SkipDatum                 --> DocSkip, PayloadLength?,OffsetLength?,FreqSkip,ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           PayloadLength,OffsetLength--> VInt    \n    //         In this case DocSkip/2 is the difference between\n    //         the current and the previous value. If DocSkip\n    //         is odd, then a PayloadLength encoded as VInt follows,\n    //         if DocSkip is even, then it is assumed that the\n    //         current payload/offset lengths equals the lengths at the previous\n    //         skip point\n    int delta = curDoc - lastSkipDoc[level];\n    \n    if (curStorePayloads || curStoreOffsets) {\n      assert curStorePayloads || curPayloadLength == lastSkipPayloadLength[level];\n      assert curStoreOffsets  || curOffsetLength == lastSkipOffsetLength[level];\n\n      if (curPayloadLength == lastSkipPayloadLength[level] && curOffsetLength == lastSkipOffsetLength[level]) {\n        // the current payload/offset lengths equals the lengths at the previous skip point,\n        // so we don't store the lengths again\n        skipBuffer.writeVInt(delta << 1);\n      } else {\n        // the payload and/or offset length is different from the previous one. We shift the DocSkip, \n        // set the lowest bit and store the current payload and/or offset lengths as VInts.\n        skipBuffer.writeVInt(delta << 1 | 1);\n\n        if (curStorePayloads) {\n          skipBuffer.writeVInt(curPayloadLength);\n          lastSkipPayloadLength[level] = curPayloadLength;\n        }\n        if (curStoreOffsets) {\n          skipBuffer.writeVInt(curOffsetLength);\n          lastSkipOffsetLength[level] = curOffsetLength;\n        }\n      }\n    } else {\n      // current field does not store payloads or offsets\n      skipBuffer.writeVInt(delta);\n    }\n\n    skipBuffer.writeVInt((int) (curFreqPointer - lastSkipFreqPointer[level]));\n    skipBuffer.writeVInt((int) (curProxPointer - lastSkipProxPointer[level]));\n\n    lastSkipDoc[level] = curDoc;\n    \n    lastSkipFreqPointer[level] = curFreqPointer;\n    lastSkipProxPointer[level] = curProxPointer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40SkipListWriter#writeSkipData(int,IndexOutput).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40SkipListWriter#writeSkipData(int,IndexOutput).mjava","sourceNew":"  @Override\n  protected void writeSkipData(int level, IndexOutput skipBuffer) throws IOException {\n    // To efficiently store payloads/offsets in the posting lists we do not store the length of\n    // every payload/offset. Instead we omit the length if the previous lengths were the same\n    //\n    // However, in order to support skipping, the length at every skip point must be known.\n    // So we use the same length encoding that we use for the posting lists for the skip data as well:\n    // Case 1: current field does not store payloads/offsets\n    //           SkipDatum                 --> DocSkip, FreqSkip, ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           DocSkip records the document number before every SkipInterval th  document in TermFreqs. \n    //           Document numbers are represented as differences from the previous value in the sequence.\n    // Case 2: current field stores payloads/offsets\n    //           SkipDatum                 --> DocSkip, PayloadLength?,OffsetLength?,FreqSkip,ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           PayloadLength,OffsetLength--> VInt    \n    //         In this case DocSkip/2 is the difference between\n    //         the current and the previous value. If DocSkip\n    //         is odd, then a PayloadLength encoded as VInt follows,\n    //         if DocSkip is even, then it is assumed that the\n    //         current payload/offset lengths equals the lengths at the previous\n    //         skip point\n    int delta = curDoc - lastSkipDoc[level];\n    \n    if (curStorePayloads || curStoreOffsets) {\n      assert curStorePayloads || curPayloadLength == lastSkipPayloadLength[level];\n      assert curStoreOffsets  || curOffsetLength == lastSkipOffsetLength[level];\n\n      if (curPayloadLength == lastSkipPayloadLength[level] && curOffsetLength == lastSkipOffsetLength[level]) {\n        // the current payload/offset lengths equals the lengths at the previous skip point,\n        // so we don't store the lengths again\n        skipBuffer.writeVInt(delta << 1);\n      } else {\n        // the payload and/or offset length is different from the previous one. We shift the DocSkip, \n        // set the lowest bit and store the current payload and/or offset lengths as VInts.\n        skipBuffer.writeVInt(delta << 1 | 1);\n\n        if (curStorePayloads) {\n          skipBuffer.writeVInt(curPayloadLength);\n          lastSkipPayloadLength[level] = curPayloadLength;\n        }\n        if (curStoreOffsets) {\n          skipBuffer.writeVInt(curOffsetLength);\n          lastSkipOffsetLength[level] = curOffsetLength;\n        }\n      }\n    } else {\n      // current field does not store payloads or offsets\n      skipBuffer.writeVInt(delta);\n    }\n\n    skipBuffer.writeVInt((int) (curFreqPointer - lastSkipFreqPointer[level]));\n    skipBuffer.writeVInt((int) (curProxPointer - lastSkipProxPointer[level]));\n\n    lastSkipDoc[level] = curDoc;\n    \n    lastSkipFreqPointer[level] = curFreqPointer;\n    lastSkipProxPointer[level] = curProxPointer;\n  }\n\n","sourceOld":"  @Override\n  protected void writeSkipData(int level, IndexOutput skipBuffer) throws IOException {\n    // To efficiently store payloads/offsets in the posting lists we do not store the length of\n    // every payload/offset. Instead we omit the length if the previous lengths were the same\n    //\n    // However, in order to support skipping, the length at every skip point must be known.\n    // So we use the same length encoding that we use for the posting lists for the skip data as well:\n    // Case 1: current field does not store payloads/offsets\n    //           SkipDatum                 --> DocSkip, FreqSkip, ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           DocSkip records the document number before every SkipInterval th  document in TermFreqs. \n    //           Document numbers are represented as differences from the previous value in the sequence.\n    // Case 2: current field stores payloads/offsets\n    //           SkipDatum                 --> DocSkip, PayloadLength?,OffsetLength?,FreqSkip,ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           PayloadLength,OffsetLength--> VInt    \n    //         In this case DocSkip/2 is the difference between\n    //         the current and the previous value. If DocSkip\n    //         is odd, then a PayloadLength encoded as VInt follows,\n    //         if DocSkip is even, then it is assumed that the\n    //         current payload/offset lengths equals the lengths at the previous\n    //         skip point\n    int delta = curDoc - lastSkipDoc[level];\n    \n    if (curStorePayloads || curStoreOffsets) {\n      assert curStorePayloads || curPayloadLength == lastSkipPayloadLength[level];\n      assert curStoreOffsets  || curOffsetLength == lastSkipOffsetLength[level];\n\n      if (curPayloadLength == lastSkipPayloadLength[level] && curOffsetLength == lastSkipOffsetLength[level]) {\n        // the current payload/offset lengths equals the lengths at the previous skip point,\n        // so we don't store the lengths again\n        skipBuffer.writeVInt(delta << 1);\n      } else {\n        // the payload and/or offset length is different from the previous one. We shift the DocSkip, \n        // set the lowest bit and store the current payload and/or offset lengths as VInts.\n        skipBuffer.writeVInt(delta << 1 | 1);\n\n        if (curStorePayloads) {\n          skipBuffer.writeVInt(curPayloadLength);\n          lastSkipPayloadLength[level] = curPayloadLength;\n        }\n        if (curStoreOffsets) {\n          skipBuffer.writeVInt(curOffsetLength);\n          lastSkipOffsetLength[level] = curOffsetLength;\n        }\n      }\n    } else {\n      // current field does not store payloads or offsets\n      skipBuffer.writeVInt(delta);\n    }\n\n    skipBuffer.writeVInt((int) (curFreqPointer - lastSkipFreqPointer[level]));\n    skipBuffer.writeVInt((int) (curProxPointer - lastSkipProxPointer[level]));\n\n    lastSkipDoc[level] = curDoc;\n    \n    lastSkipFreqPointer[level] = curFreqPointer;\n    lastSkipProxPointer[level] = curProxPointer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40SkipListWriter#writeSkipData(int,IndexOutput).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected void writeSkipData(int level, IndexOutput skipBuffer) throws IOException {\n    // To efficiently store payloads/offsets in the posting lists we do not store the length of\n    // every payload/offset. Instead we omit the length if the previous lengths were the same\n    //\n    // However, in order to support skipping, the length at every skip point must be known.\n    // So we use the same length encoding that we use for the posting lists for the skip data as well:\n    // Case 1: current field does not store payloads/offsets\n    //           SkipDatum                 --> DocSkip, FreqSkip, ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           DocSkip records the document number before every SkipInterval th  document in TermFreqs. \n    //           Document numbers are represented as differences from the previous value in the sequence.\n    // Case 2: current field stores payloads/offsets\n    //           SkipDatum                 --> DocSkip, PayloadLength?,OffsetLength?,FreqSkip,ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           PayloadLength,OffsetLength--> VInt    \n    //         In this case DocSkip/2 is the difference between\n    //         the current and the previous value. If DocSkip\n    //         is odd, then a PayloadLength encoded as VInt follows,\n    //         if DocSkip is even, then it is assumed that the\n    //         current payload/offset lengths equals the lengths at the previous\n    //         skip point\n    int delta = curDoc - lastSkipDoc[level];\n    \n    if (curStorePayloads || curStoreOffsets) {\n      assert curStorePayloads || curPayloadLength == lastSkipPayloadLength[level];\n      assert curStoreOffsets  || curOffsetLength == lastSkipOffsetLength[level];\n\n      if (curPayloadLength == lastSkipPayloadLength[level] && curOffsetLength == lastSkipOffsetLength[level]) {\n        // the current payload/offset lengths equals the lengths at the previous skip point,\n        // so we don't store the lengths again\n        skipBuffer.writeVInt(delta << 1);\n      } else {\n        // the payload and/or offset length is different from the previous one. We shift the DocSkip, \n        // set the lowest bit and store the current payload and/or offset lengths as VInts.\n        skipBuffer.writeVInt(delta << 1 | 1);\n\n        if (curStorePayloads) {\n          skipBuffer.writeVInt(curPayloadLength);\n          lastSkipPayloadLength[level] = curPayloadLength;\n        }\n        if (curStoreOffsets) {\n          skipBuffer.writeVInt(curOffsetLength);\n          lastSkipOffsetLength[level] = curOffsetLength;\n        }\n      }\n    } else {\n      // current field does not store payloads or offsets\n      skipBuffer.writeVInt(delta);\n    }\n\n    skipBuffer.writeVInt((int) (curFreqPointer - lastSkipFreqPointer[level]));\n    skipBuffer.writeVInt((int) (curProxPointer - lastSkipProxPointer[level]));\n\n    lastSkipDoc[level] = curDoc;\n    \n    lastSkipFreqPointer[level] = curFreqPointer;\n    lastSkipProxPointer[level] = curProxPointer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}