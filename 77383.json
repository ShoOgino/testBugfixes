{"path":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#getTextsToAnalyze(SolrInputDocument).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#getTextsToAnalyze(SolrInputDocument).mjava","pathOld":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#getTextsToAnalyze(SolrInputDocument).mjava","sourceNew":"  /*\n   * get the texts to analyze from the corresponding fields\n   */\n  private String[] getTextsToAnalyze(SolrInputDocument solrInputDocument) {\n    String[] fieldsToAnalyze = solrUIMAConfiguration.getFieldsToAnalyze();\n    boolean merge = solrUIMAConfiguration.isFieldsMerging();\n    String[] textVals = null;\n    if (merge) {\n      StringBuilder unifiedText = new StringBuilder(\"\");\n      for (int i = 0; i < fieldsToAnalyze.length; i++) {\n        unifiedText.append(String.valueOf(solrInputDocument.getFieldValue(fieldsToAnalyze[i])));\n      }\n      textVals = new String[1];\n      textVals[0] = unifiedText.toString();\n    } else {\n      textVals = new String[fieldsToAnalyze.length];\n      for (int i = 0; i < fieldsToAnalyze.length; i++) {\n        textVals[i] = String.valueOf(solrInputDocument.getFieldValue(fieldsToAnalyze[i]));\n      }\n    }\n    return textVals;\n  }\n\n","sourceOld":"  /*\n   * get the texts to analyze from the corresponding fields\n   */\n  private String[] getTextsToAnalyze(SolrInputDocument solrInputDocument) {\n    String[] fieldsToAnalyze = solrUIMAConfiguration.getFieldsToAnalyze();\n    boolean merge = solrUIMAConfiguration.isFieldsMerging();\n    String[] textVals = null;\n    if (merge) {\n      StringBuilder unifiedText = new StringBuilder(\"\");\n      for (int i = 0; i < fieldsToAnalyze.length; i++) {\n        unifiedText.append(String.valueOf(solrInputDocument.getFieldValue(fieldsToAnalyze[i])));\n      }\n      textVals = new String[1];\n      textVals[0] = unifiedText.toString();\n    } else {\n      textVals = new String[fieldsToAnalyze.length];\n      for (int i = 0; i < fieldsToAnalyze.length; i++) {\n        textVals[i] = String.valueOf(solrInputDocument.getFieldValue(fieldsToAnalyze[i]));\n      }\n    }\n    return textVals;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ed208afa1e7aa98899ddb1dedfddedddf898253","date":1308079587,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#getTextsToAnalyze(SolrInputDocument).mjava","pathOld":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#getTextsToAnalyze(SolrInputDocument).mjava","sourceNew":"  /*\n   * get the texts to analyze from the corresponding fields\n   */\n  private String[] getTextsToAnalyze(SolrInputDocument solrInputDocument) {\n    String[] fieldsToAnalyze = solrUIMAConfiguration.getFieldsToAnalyze();\n    boolean merge = solrUIMAConfiguration.isFieldsMerging();\n    String[] textVals;\n    if (merge) {\n      StringBuilder unifiedText = new StringBuilder(\"\");\n      for (int i = 0; i < fieldsToAnalyze.length; i++) {\n        unifiedText.append(String.valueOf(solrInputDocument.getFieldValue(fieldsToAnalyze[i])));\n      }\n      textVals = new String[1];\n      textVals[0] = unifiedText.toString();\n    } else {\n      textVals = new String[fieldsToAnalyze.length];\n      for (int i = 0; i < fieldsToAnalyze.length; i++) {\n        textVals[i] = String.valueOf(solrInputDocument.getFieldValue(fieldsToAnalyze[i]));\n      }\n    }\n    return textVals;\n  }\n\n","sourceOld":"  /*\n   * get the texts to analyze from the corresponding fields\n   */\n  private String[] getTextsToAnalyze(SolrInputDocument solrInputDocument) {\n    String[] fieldsToAnalyze = solrUIMAConfiguration.getFieldsToAnalyze();\n    boolean merge = solrUIMAConfiguration.isFieldsMerging();\n    String[] textVals = null;\n    if (merge) {\n      StringBuilder unifiedText = new StringBuilder(\"\");\n      for (int i = 0; i < fieldsToAnalyze.length; i++) {\n        unifiedText.append(String.valueOf(solrInputDocument.getFieldValue(fieldsToAnalyze[i])));\n      }\n      textVals = new String[1];\n      textVals[0] = unifiedText.toString();\n    } else {\n      textVals = new String[fieldsToAnalyze.length];\n      for (int i = 0; i < fieldsToAnalyze.length; i++) {\n        textVals[i] = String.valueOf(solrInputDocument.getFieldValue(fieldsToAnalyze[i]));\n      }\n    }\n    return textVals;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#getTextsToAnalyze(SolrInputDocument).mjava","pathOld":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#getTextsToAnalyze(SolrInputDocument).mjava","sourceNew":"  /*\n   * get the texts to analyze from the corresponding fields\n   */\n  private String[] getTextsToAnalyze(SolrInputDocument solrInputDocument) {\n    String[] fieldsToAnalyze = solrUIMAConfiguration.getFieldsToAnalyze();\n    boolean merge = solrUIMAConfiguration.isFieldsMerging();\n    String[] textVals;\n    if (merge) {\n      StringBuilder unifiedText = new StringBuilder(\"\");\n      for (int i = 0; i < fieldsToAnalyze.length; i++) {\n        unifiedText.append(String.valueOf(solrInputDocument.getFieldValue(fieldsToAnalyze[i])));\n      }\n      textVals = new String[1];\n      textVals[0] = unifiedText.toString();\n    } else {\n      textVals = new String[fieldsToAnalyze.length];\n      for (int i = 0; i < fieldsToAnalyze.length; i++) {\n        textVals[i] = String.valueOf(solrInputDocument.getFieldValue(fieldsToAnalyze[i]));\n      }\n    }\n    return textVals;\n  }\n\n","sourceOld":"  /*\n   * get the texts to analyze from the corresponding fields\n   */\n  private String[] getTextsToAnalyze(SolrInputDocument solrInputDocument) {\n    String[] fieldsToAnalyze = solrUIMAConfiguration.getFieldsToAnalyze();\n    boolean merge = solrUIMAConfiguration.isFieldsMerging();\n    String[] textVals;\n    if (merge) {\n      StringBuilder unifiedText = new StringBuilder(\"\");\n      for (int i = 0; i < fieldsToAnalyze.length; i++) {\n        unifiedText.append(String.valueOf(solrInputDocument.getFieldValue(fieldsToAnalyze[i])));\n      }\n      textVals = new String[1];\n      textVals[0] = unifiedText.toString();\n    } else {\n      textVals = new String[fieldsToAnalyze.length];\n      for (int i = 0; i < fieldsToAnalyze.length; i++) {\n        textVals[i] = String.valueOf(solrInputDocument.getFieldValue(fieldsToAnalyze[i]));\n      }\n    }\n    return textVals;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d45d2ab8ae4e9969914b9c8a761a4cb3a23634c2","date":1350024115,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#getTextsToAnalyze(SolrInputDocument).mjava","pathOld":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#getTextsToAnalyze(SolrInputDocument).mjava","sourceNew":"  /*\n   * get the texts to analyze from the corresponding fields\n   */\n  private String[] getTextsToAnalyze(SolrInputDocument solrInputDocument) {\n    String[] fieldsToAnalyze = solrUIMAConfiguration.getFieldsToAnalyze();\n    boolean merge = solrUIMAConfiguration.isFieldsMerging();\n    String[] textVals;\n    if (merge) {\n      StringBuilder unifiedText = new StringBuilder(\"\");\n      for (String aFieldsToAnalyze : fieldsToAnalyze) {\n        unifiedText.append(String.valueOf(solrInputDocument.getFieldValue(aFieldsToAnalyze)));\n      }\n      textVals = new String[1];\n      textVals[0] = unifiedText.toString();\n    } else {\n      textVals = new String[fieldsToAnalyze.length];\n      for (int i = 0; i < fieldsToAnalyze.length; i++) {\n        textVals[i] = String.valueOf(solrInputDocument.getFieldValue(fieldsToAnalyze[i]));\n      }\n    }\n    return textVals;\n  }\n\n","sourceOld":"  /*\n   * get the texts to analyze from the corresponding fields\n   */\n  private String[] getTextsToAnalyze(SolrInputDocument solrInputDocument) {\n    String[] fieldsToAnalyze = solrUIMAConfiguration.getFieldsToAnalyze();\n    boolean merge = solrUIMAConfiguration.isFieldsMerging();\n    String[] textVals;\n    if (merge) {\n      StringBuilder unifiedText = new StringBuilder(\"\");\n      for (int i = 0; i < fieldsToAnalyze.length; i++) {\n        unifiedText.append(String.valueOf(solrInputDocument.getFieldValue(fieldsToAnalyze[i])));\n      }\n      textVals = new String[1];\n      textVals[0] = unifiedText.toString();\n    } else {\n      textVals = new String[fieldsToAnalyze.length];\n      for (int i = 0; i < fieldsToAnalyze.length; i++) {\n        textVals[i] = String.valueOf(solrInputDocument.getFieldValue(fieldsToAnalyze[i]));\n      }\n    }\n    return textVals;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6efad415dcdbcca7d440f909743e6e3152eeb6c0","date":1350055371,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#getTextsToAnalyze(SolrInputDocument).mjava","pathOld":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#getTextsToAnalyze(SolrInputDocument).mjava","sourceNew":"  /*\n   * get the texts to analyze from the corresponding fields\n   */\n  private String[] getTextsToAnalyze(SolrInputDocument solrInputDocument) {\n    String[] fieldsToAnalyze = solrUIMAConfiguration.getFieldsToAnalyze();\n    boolean merge = solrUIMAConfiguration.isFieldsMerging();\n    String[] textVals;\n    if (merge) {\n      StringBuilder unifiedText = new StringBuilder(\"\");\n      for (String aFieldsToAnalyze : fieldsToAnalyze) {\n        unifiedText.append(String.valueOf(solrInputDocument.getFieldValue(aFieldsToAnalyze)));\n      }\n      textVals = new String[1];\n      textVals[0] = unifiedText.toString();\n    } else {\n      textVals = new String[fieldsToAnalyze.length];\n      for (int i = 0; i < fieldsToAnalyze.length; i++) {\n        textVals[i] = String.valueOf(solrInputDocument.getFieldValue(fieldsToAnalyze[i]));\n      }\n    }\n    return textVals;\n  }\n\n","sourceOld":"  /*\n   * get the texts to analyze from the corresponding fields\n   */\n  private String[] getTextsToAnalyze(SolrInputDocument solrInputDocument) {\n    String[] fieldsToAnalyze = solrUIMAConfiguration.getFieldsToAnalyze();\n    boolean merge = solrUIMAConfiguration.isFieldsMerging();\n    String[] textVals;\n    if (merge) {\n      StringBuilder unifiedText = new StringBuilder(\"\");\n      for (int i = 0; i < fieldsToAnalyze.length; i++) {\n        unifiedText.append(String.valueOf(solrInputDocument.getFieldValue(fieldsToAnalyze[i])));\n      }\n      textVals = new String[1];\n      textVals[0] = unifiedText.toString();\n    } else {\n      textVals = new String[fieldsToAnalyze.length];\n      for (int i = 0; i < fieldsToAnalyze.length; i++) {\n        textVals[i] = String.valueOf(solrInputDocument.getFieldValue(fieldsToAnalyze[i]));\n      }\n    }\n    return textVals;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d82832af39f94dbb58a3130fd216ff1d49435589","date":1350147242,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#getTextsToAnalyze(SolrInputDocument).mjava","pathOld":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#getTextsToAnalyze(SolrInputDocument).mjava","sourceNew":"  /*\n   * get the texts to analyze from the corresponding fields\n   */\n  private String[] getTextsToAnalyze(SolrInputDocument solrInputDocument) {\n    String[] fieldsToAnalyze = solrUIMAConfiguration.getFieldsToAnalyze();\n    boolean merge = solrUIMAConfiguration.isFieldsMerging();\n    String[] textVals;\n    if (merge) {\n      StringBuilder unifiedText = new StringBuilder(\"\");\n      for (String aFieldsToAnalyze : fieldsToAnalyze) {\n        unifiedText.append(String.valueOf(solrInputDocument.getFieldValue(aFieldsToAnalyze)));\n      }\n      textVals = new String[1];\n      textVals[0] = unifiedText.toString();\n    } else {\n      textVals = new String[fieldsToAnalyze.length];\n      for (int i = 0; i < fieldsToAnalyze.length; i++) {\n        textVals[i] = String.valueOf(solrInputDocument.getFieldValue(fieldsToAnalyze[i]));\n      }\n    }\n    return textVals;\n  }\n\n","sourceOld":"  /*\n   * get the texts to analyze from the corresponding fields\n   */\n  private String[] getTextsToAnalyze(SolrInputDocument solrInputDocument) {\n    String[] fieldsToAnalyze = solrUIMAConfiguration.getFieldsToAnalyze();\n    boolean merge = solrUIMAConfiguration.isFieldsMerging();\n    String[] textVals;\n    if (merge) {\n      StringBuilder unifiedText = new StringBuilder(\"\");\n      for (int i = 0; i < fieldsToAnalyze.length; i++) {\n        unifiedText.append(String.valueOf(solrInputDocument.getFieldValue(fieldsToAnalyze[i])));\n      }\n      textVals = new String[1];\n      textVals[0] = unifiedText.toString();\n    } else {\n      textVals = new String[fieldsToAnalyze.length];\n      for (int i = 0; i < fieldsToAnalyze.length; i++) {\n        textVals[i] = String.valueOf(solrInputDocument.getFieldValue(fieldsToAnalyze[i]));\n      }\n    }\n    return textVals;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7f0ce0fa58dfd65f8f8bf1e640cbeaafd227e76","date":1378365130,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#getTextsToAnalyze(SolrInputDocument).mjava","pathOld":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#getTextsToAnalyze(SolrInputDocument).mjava","sourceNew":"  /*\n   * get the texts to analyze from the corresponding fields\n   */\n  private String[] getTextsToAnalyze(SolrInputDocument solrInputDocument) {\n    String[] fieldsToAnalyze = solrUIMAConfiguration.getFieldsToAnalyze();\n    boolean merge = solrUIMAConfiguration.isFieldsMerging();\n    String[] textVals;\n    if (merge) {\n      StringBuilder unifiedText = new StringBuilder(\"\");\n      for (String aFieldsToAnalyze : fieldsToAnalyze) {\n        unifiedText.append(String.valueOf(solrInputDocument\n            .getFieldValue(aFieldsToAnalyze)));\n      }\n      textVals = new String[1];\n      textVals[0] = unifiedText.toString();\n    } else {\n      textVals = new String[fieldsToAnalyze.length];\n      for (int i = 0; i < fieldsToAnalyze.length; i++) {\n        textVals[i] = String.valueOf(solrInputDocument\n            .getFieldValue(fieldsToAnalyze[i]));\n      }\n    }\n    return textVals;\n  }\n\n","sourceOld":"  /*\n   * get the texts to analyze from the corresponding fields\n   */\n  private String[] getTextsToAnalyze(SolrInputDocument solrInputDocument) {\n    String[] fieldsToAnalyze = solrUIMAConfiguration.getFieldsToAnalyze();\n    boolean merge = solrUIMAConfiguration.isFieldsMerging();\n    String[] textVals;\n    if (merge) {\n      StringBuilder unifiedText = new StringBuilder(\"\");\n      for (String aFieldsToAnalyze : fieldsToAnalyze) {\n        unifiedText.append(String.valueOf(solrInputDocument.getFieldValue(aFieldsToAnalyze)));\n      }\n      textVals = new String[1];\n      textVals[0] = unifiedText.toString();\n    } else {\n      textVals = new String[fieldsToAnalyze.length];\n      for (int i = 0; i < fieldsToAnalyze.length; i++) {\n        textVals[i] = String.valueOf(solrInputDocument.getFieldValue(fieldsToAnalyze[i]));\n      }\n    }\n    return textVals;\n  }\n\n","bugFix":null,"bugIntro":["0af81b6027da0f3c796972ca2012332d0ff38cbd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0af81b6027da0f3c796972ca2012332d0ff38cbd","date":1452499957,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#getTextsToAnalyze(SolrInputDocument).mjava","pathOld":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#getTextsToAnalyze(SolrInputDocument).mjava","sourceNew":"  /*\n   * get the texts to analyze from the corresponding fields\n   */\n  private String[] getTextsToAnalyze(SolrInputDocument solrInputDocument) {\n    String[] fieldsToAnalyze = solrUIMAConfiguration.getFieldsToAnalyze();\n    boolean merge = solrUIMAConfiguration.isFieldsMerging();\n    String[] textVals;\n    if (merge) {\n      StringBuilder unifiedText = new StringBuilder(\"\");\n      for (String aFieldsToAnalyze : fieldsToAnalyze) {\n        if (solrInputDocument.getFieldValues(aFieldsToAnalyze) != null) {\n          Object[] Values = solrInputDocument.getFieldValues(aFieldsToAnalyze).toArray();\n          for (Object Value : Values) {\n            if (unifiedText.length() > 0) {\n              unifiedText.append(' ');\n            }\n            unifiedText.append(Value.toString());\n          }\n        }\n      }\n      textVals = new String[1];\n      textVals[0] = unifiedText.toString();\n    } else {\n      textVals = new String[fieldsToAnalyze.length];\n      for (int i = 0; i < fieldsToAnalyze.length; i++) {\n        if (solrInputDocument.getFieldValues(fieldsToAnalyze[i]) != null) {\n          Object[] Values = solrInputDocument.getFieldValues(fieldsToAnalyze[i]).toArray();\n          for (Object Value : Values) {\n            textVals[i] += Value.toString();\n          }\n        }\n      }\n    }\n    return textVals;\n  }\n\n","sourceOld":"  /*\n   * get the texts to analyze from the corresponding fields\n   */\n  private String[] getTextsToAnalyze(SolrInputDocument solrInputDocument) {\n    String[] fieldsToAnalyze = solrUIMAConfiguration.getFieldsToAnalyze();\n    boolean merge = solrUIMAConfiguration.isFieldsMerging();\n    String[] textVals;\n    if (merge) {\n      StringBuilder unifiedText = new StringBuilder(\"\");\n      for (String aFieldsToAnalyze : fieldsToAnalyze) {\n        unifiedText.append(String.valueOf(solrInputDocument\n            .getFieldValue(aFieldsToAnalyze)));\n      }\n      textVals = new String[1];\n      textVals[0] = unifiedText.toString();\n    } else {\n      textVals = new String[fieldsToAnalyze.length];\n      for (int i = 0; i < fieldsToAnalyze.length; i++) {\n        textVals[i] = String.valueOf(solrInputDocument\n            .getFieldValue(fieldsToAnalyze[i]));\n      }\n    }\n    return textVals;\n  }\n\n","bugFix":["e7f0ce0fa58dfd65f8f8bf1e640cbeaafd227e76"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c9a6ea78b00a421744e770568d8c2aab262e4cd","date":1530971937,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#getTextsToAnalyze(SolrInputDocument).mjava","sourceNew":null,"sourceOld":"  /*\n   * get the texts to analyze from the corresponding fields\n   */\n  private String[] getTextsToAnalyze(SolrInputDocument solrInputDocument) {\n    String[] fieldsToAnalyze = solrUIMAConfiguration.getFieldsToAnalyze();\n    boolean merge = solrUIMAConfiguration.isFieldsMerging();\n    String[] textVals;\n    if (merge) {\n      StringBuilder unifiedText = new StringBuilder(\"\");\n      for (String aFieldsToAnalyze : fieldsToAnalyze) {\n        if (solrInputDocument.getFieldValues(aFieldsToAnalyze) != null) {\n          Object[] Values = solrInputDocument.getFieldValues(aFieldsToAnalyze).toArray();\n          for (Object Value : Values) {\n            if (unifiedText.length() > 0) {\n              unifiedText.append(' ');\n            }\n            unifiedText.append(Value.toString());\n          }\n        }\n      }\n      textVals = new String[1];\n      textVals[0] = unifiedText.toString();\n    } else {\n      textVals = new String[fieldsToAnalyze.length];\n      for (int i = 0; i < fieldsToAnalyze.length; i++) {\n        if (solrInputDocument.getFieldValues(fieldsToAnalyze[i]) != null) {\n          Object[] Values = solrInputDocument.getFieldValues(fieldsToAnalyze[i]).toArray();\n          for (Object Value : Values) {\n            textVals[i] += Value.toString();\n          }\n        }\n      }\n    }\n    return textVals;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":4,"author":"Michael Braun","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#getTextsToAnalyze(SolrInputDocument).mjava","sourceNew":null,"sourceOld":"  /*\n   * get the texts to analyze from the corresponding fields\n   */\n  private String[] getTextsToAnalyze(SolrInputDocument solrInputDocument) {\n    String[] fieldsToAnalyze = solrUIMAConfiguration.getFieldsToAnalyze();\n    boolean merge = solrUIMAConfiguration.isFieldsMerging();\n    String[] textVals;\n    if (merge) {\n      StringBuilder unifiedText = new StringBuilder(\"\");\n      for (String aFieldsToAnalyze : fieldsToAnalyze) {\n        if (solrInputDocument.getFieldValues(aFieldsToAnalyze) != null) {\n          Object[] Values = solrInputDocument.getFieldValues(aFieldsToAnalyze).toArray();\n          for (Object Value : Values) {\n            if (unifiedText.length() > 0) {\n              unifiedText.append(' ');\n            }\n            unifiedText.append(Value.toString());\n          }\n        }\n      }\n      textVals = new String[1];\n      textVals[0] = unifiedText.toString();\n    } else {\n      textVals = new String[fieldsToAnalyze.length];\n      for (int i = 0; i < fieldsToAnalyze.length; i++) {\n        if (solrInputDocument.getFieldValues(fieldsToAnalyze[i]) != null) {\n          Object[] Values = solrInputDocument.getFieldValues(fieldsToAnalyze[i]).toArray();\n          for (Object Value : Values) {\n            textVals[i] += Value.toString();\n          }\n        }\n      }\n    }\n    return textVals;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":4,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#getTextsToAnalyze(SolrInputDocument).mjava","sourceNew":null,"sourceOld":"  /*\n   * get the texts to analyze from the corresponding fields\n   */\n  private String[] getTextsToAnalyze(SolrInputDocument solrInputDocument) {\n    String[] fieldsToAnalyze = solrUIMAConfiguration.getFieldsToAnalyze();\n    boolean merge = solrUIMAConfiguration.isFieldsMerging();\n    String[] textVals;\n    if (merge) {\n      StringBuilder unifiedText = new StringBuilder(\"\");\n      for (String aFieldsToAnalyze : fieldsToAnalyze) {\n        if (solrInputDocument.getFieldValues(aFieldsToAnalyze) != null) {\n          Object[] Values = solrInputDocument.getFieldValues(aFieldsToAnalyze).toArray();\n          for (Object Value : Values) {\n            if (unifiedText.length() > 0) {\n              unifiedText.append(' ');\n            }\n            unifiedText.append(Value.toString());\n          }\n        }\n      }\n      textVals = new String[1];\n      textVals[0] = unifiedText.toString();\n    } else {\n      textVals = new String[fieldsToAnalyze.length];\n      for (int i = 0; i < fieldsToAnalyze.length; i++) {\n        if (solrInputDocument.getFieldValues(fieldsToAnalyze[i]) != null) {\n          Object[] Values = solrInputDocument.getFieldValues(fieldsToAnalyze[i]).toArray();\n          for (Object Value : Values) {\n            textVals[i] += Value.toString();\n          }\n        }\n      }\n    }\n    return textVals;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d45d2ab8ae4e9969914b9c8a761a4cb3a23634c2":["c26f00b574427b55127e869b935845554afde1fa"],"e7f0ce0fa58dfd65f8f8bf1e640cbeaafd227e76":["d45d2ab8ae4e9969914b9c8a761a4cb3a23634c2"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9ed208afa1e7aa98899ddb1dedfddedddf898253"],"9ed208afa1e7aa98899ddb1dedfddedddf898253":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8c9a6ea78b00a421744e770568d8c2aab262e4cd":["0af81b6027da0f3c796972ca2012332d0ff38cbd"],"6efad415dcdbcca7d440f909743e6e3152eeb6c0":["c26f00b574427b55127e869b935845554afde1fa","d45d2ab8ae4e9969914b9c8a761a4cb3a23634c2"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["0af81b6027da0f3c796972ca2012332d0ff38cbd","8c9a6ea78b00a421744e770568d8c2aab262e4cd"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d82832af39f94dbb58a3130fd216ff1d49435589":["c26f00b574427b55127e869b935845554afde1fa","d45d2ab8ae4e9969914b9c8a761a4cb3a23634c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0af81b6027da0f3c796972ca2012332d0ff38cbd":["e7f0ce0fa58dfd65f8f8bf1e640cbeaafd227e76"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8c9a6ea78b00a421744e770568d8c2aab262e4cd"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["0af81b6027da0f3c796972ca2012332d0ff38cbd","8c9a6ea78b00a421744e770568d8c2aab262e4cd"]},"commit2Childs":{"d45d2ab8ae4e9969914b9c8a761a4cb3a23634c2":["e7f0ce0fa58dfd65f8f8bf1e640cbeaafd227e76","6efad415dcdbcca7d440f909743e6e3152eeb6c0","d82832af39f94dbb58a3130fd216ff1d49435589"],"e7f0ce0fa58dfd65f8f8bf1e640cbeaafd227e76":["0af81b6027da0f3c796972ca2012332d0ff38cbd"],"c26f00b574427b55127e869b935845554afde1fa":["d45d2ab8ae4e9969914b9c8a761a4cb3a23634c2","6efad415dcdbcca7d440f909743e6e3152eeb6c0","d82832af39f94dbb58a3130fd216ff1d49435589"],"9ed208afa1e7aa98899ddb1dedfddedddf898253":["c26f00b574427b55127e869b935845554afde1fa"],"8c9a6ea78b00a421744e770568d8c2aab262e4cd":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"6efad415dcdbcca7d440f909743e6e3152eeb6c0":[],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["9ed208afa1e7aa98899ddb1dedfddedddf898253"],"d82832af39f94dbb58a3130fd216ff1d49435589":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","9ed208afa1e7aa98899ddb1dedfddedddf898253","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"0af81b6027da0f3c796972ca2012332d0ff38cbd":["8c9a6ea78b00a421744e770568d8c2aab262e4cd","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["6efad415dcdbcca7d440f909743e6e3152eeb6c0","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","d82832af39f94dbb58a3130fd216ff1d49435589","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}