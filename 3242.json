{"path":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort.BufferSize#automatic().mjava","commits":[{"id":"7bf07f4ebadc7539de83a531e64678350d78ca26","date":1322776167,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort.BufferSize#automatic().mjava","pathOld":"/dev/null","sourceNew":"    /** \n     * Approximately half of the currently available free heap, but no less\n     * than {@link #MIN_BUFFER_SIZE_MB}.\n     */\n    public static BufferSize automatic() {\n      long freeHeap = Runtime.getRuntime().freeMemory();\n      return new BufferSize(Math.min(MIN_BUFFER_SIZE_MB * MB, freeHeap / 2));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["88a13515f526b44e05ab4be039e01bd40272e9f0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"88a13515f526b44e05ab4be039e01bd40272e9f0","date":1328594439,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort.BufferSize#automatic().mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort.BufferSize#automatic().mjava","sourceNew":"    /** \n     * Approximately half of the currently available free heap, but no less\n     * than {@link #MIN_BUFFER_SIZE_MB}. However if current heap allocation \n     * is insufficient for sorting consult with max allowed heap size. \n     */\n    public static BufferSize automatic() {\n      Runtime rt = Runtime.getRuntime();\n      \n      // take sizes in \"conservative\" order\n      long max = rt.maxMemory();\n      long total = rt.totalMemory();\n      long free = rt.freeMemory();\n\n      // by free mem (attempting to not grow the heap for this)\n      long half = free/2;\n      if (half >= ABSOLUTE_MIN_SORT_BUFFER_SIZE) { \n        return new BufferSize(Math.min(MIN_BUFFER_SIZE_MB * MB, half));\n      }\n      \n      // by max mem (heap will grow)\n      half = (max - total) / 2;\n      return new BufferSize(Math.min(MIN_BUFFER_SIZE_MB * MB, half));\n    }\n\n","sourceOld":"    /** \n     * Approximately half of the currently available free heap, but no less\n     * than {@link #MIN_BUFFER_SIZE_MB}.\n     */\n    public static BufferSize automatic() {\n      long freeHeap = Runtime.getRuntime().freeMemory();\n      return new BufferSize(Math.min(MIN_BUFFER_SIZE_MB * MB, freeHeap / 2));\n    }\n\n","bugFix":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"bugIntro":["448e3697f1d27a496bfdfa77169d70f63cedf945"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort.BufferSize#automatic().mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort.BufferSize#automatic().mjava","sourceNew":"    /** \n     * Approximately half of the currently available free heap, but no less\n     * than {@link #MIN_BUFFER_SIZE_MB}. However if current heap allocation \n     * is insufficient for sorting consult with max allowed heap size. \n     */\n    public static BufferSize automatic() {\n      Runtime rt = Runtime.getRuntime();\n      \n      // take sizes in \"conservative\" order\n      long max = rt.maxMemory();\n      long total = rt.totalMemory();\n      long free = rt.freeMemory();\n\n      // by free mem (attempting to not grow the heap for this)\n      long half = free/2;\n      if (half >= ABSOLUTE_MIN_SORT_BUFFER_SIZE) { \n        return new BufferSize(Math.min(MIN_BUFFER_SIZE_MB * MB, half));\n      }\n      \n      // by max mem (heap will grow)\n      half = (max - total) / 2;\n      return new BufferSize(Math.min(MIN_BUFFER_SIZE_MB * MB, half));\n    }\n\n","sourceOld":"    /** \n     * Approximately half of the currently available free heap, but no less\n     * than {@link #MIN_BUFFER_SIZE_MB}. However if current heap allocation \n     * is insufficient for sorting consult with max allowed heap size. \n     */\n    public static BufferSize automatic() {\n      Runtime rt = Runtime.getRuntime();\n      \n      // take sizes in \"conservative\" order\n      long max = rt.maxMemory();\n      long total = rt.totalMemory();\n      long free = rt.freeMemory();\n\n      // by free mem (attempting to not grow the heap for this)\n      long half = free/2;\n      if (half >= ABSOLUTE_MIN_SORT_BUFFER_SIZE) { \n        return new BufferSize(Math.min(MIN_BUFFER_SIZE_MB * MB, half));\n      }\n      \n      // by max mem (heap will grow)\n      half = (max - total) / 2;\n      return new BufferSize(Math.min(MIN_BUFFER_SIZE_MB * MB, half));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["88a13515f526b44e05ab4be039e01bd40272e9f0"],"7bf07f4ebadc7539de83a531e64678350d78ca26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"88a13515f526b44e05ab4be039e01bd40272e9f0":["7bf07f4ebadc7539de83a531e64678350d78ca26"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7bf07f4ebadc7539de83a531e64678350d78ca26":["88a13515f526b44e05ab4be039e01bd40272e9f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"88a13515f526b44e05ab4be039e01bd40272e9f0":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}