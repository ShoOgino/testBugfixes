{"path":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEnum(int,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEnum(int,int).mjava","pathOld":"src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEnum(int,int).mjava","sourceNew":"  private void testEnum(int lower, int upper) throws Exception {\n    NumericRangeQuery<Integer> q = NumericRangeQuery.newIntRange(\"field4\", 4, lower, upper, true, true);\n    FilteredTermEnum termEnum = q.getEnum(searcher.getIndexReader());\n    try {\n      int count = 0;\n      do {\n        final Term t = termEnum.term();\n        if (t != null) {\n          final int val = NumericUtils.prefixCodedToInt(t.text());\n          assertTrue(\"value not in bounds\", val >= lower && val <= upper);\n          count++;\n        } else break;\n      } while (termEnum.next());\n      assertFalse(termEnum.next());\n      if (VERBOSE) System.out.println(\"TermEnum on 'field4' for range [\" + lower + \",\" + upper + \"] contained \" + count + \" terms.\");\n    } finally {\n      termEnum.close();\n    }\n  }\n\n","sourceOld":"  private void testEnum(int lower, int upper) throws Exception {\n    NumericRangeQuery<Integer> q = NumericRangeQuery.newIntRange(\"field4\", 4, lower, upper, true, true);\n    FilteredTermEnum termEnum = q.getEnum(searcher.getIndexReader());\n    try {\n      int count = 0;\n      do {\n        final Term t = termEnum.term();\n        if (t != null) {\n          final int val = NumericUtils.prefixCodedToInt(t.text());\n          assertTrue(\"value not in bounds\", val >= lower && val <= upper);\n          count++;\n        } else break;\n      } while (termEnum.next());\n      assertFalse(termEnum.next());\n      if (VERBOSE) System.out.println(\"TermEnum on 'field4' for range [\" + lower + \",\" + upper + \"] contained \" + count + \" terms.\");\n    } finally {\n      termEnum.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEnum(int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEnum(int,int).mjava","sourceNew":"  private void testEnum(int lower, int upper) throws Exception {\n    NumericRangeQuery<Integer> q = NumericRangeQuery.newIntRange(\"field4\", 4,\n        lower, upper, true, true);\n    TermsEnum termEnum = q.getTermsEnum(searcher.getIndexReader());\n    int count = 0;\n    while (termEnum.next() != null) {\n      final BytesRef t = termEnum.term();\n      if (t != null) {\n        final int val = NumericUtils.prefixCodedToInt(t);\n        assertTrue(\"value not in bounds \" + val + \" >= \" + lower + \" && \"\n            + val + \" <= \" + upper, val >= lower && val <= upper);\n        count++;\n      } else\n        break;\n    } \n    assertNull(termEnum.next());\n    if (VERBOSE) System.out.println(\"TermEnum on 'field4' for range [\" + lower + \",\" + upper\n        + \"] contained \" + count + \" terms.\");\n\n  }\n\n","sourceOld":"  private void testEnum(int lower, int upper) throws Exception {\n    NumericRangeQuery<Integer> q = NumericRangeQuery.newIntRange(\"field4\", 4, lower, upper, true, true);\n    FilteredTermEnum termEnum = q.getEnum(searcher.getIndexReader());\n    try {\n      int count = 0;\n      do {\n        final Term t = termEnum.term();\n        if (t != null) {\n          final int val = NumericUtils.prefixCodedToInt(t.text());\n          assertTrue(\"value not in bounds\", val >= lower && val <= upper);\n          count++;\n        } else break;\n      } while (termEnum.next());\n      assertFalse(termEnum.next());\n      if (VERBOSE) System.out.println(\"TermEnum on 'field4' for range [\" + lower + \",\" + upper + \"] contained \" + count + \" terms.\");\n    } finally {\n      termEnum.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8dd2a69747e9f2922fd8b6970bd1661b26a692d","date":1291080135,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEnum(int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEnum(int,int).mjava","sourceNew":"  private void testEnum(int lower, int upper) throws Exception {\n    NumericRangeQuery<Integer> q = NumericRangeQuery.newIntRange(\"field4\", 4,\n        lower, upper, true, true);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"field4\");\n    TermsEnum termEnum = q.getTermsEnum(terms);\n    int count = 0;\n    while (termEnum.next() != null) {\n      final BytesRef t = termEnum.term();\n      if (t != null) {\n        final int val = NumericUtils.prefixCodedToInt(t);\n        assertTrue(\"value not in bounds \" + val + \" >= \" + lower + \" && \"\n            + val + \" <= \" + upper, val >= lower && val <= upper);\n        count++;\n      } else\n        break;\n    } \n    assertNull(termEnum.next());\n    if (VERBOSE) System.out.println(\"TermEnum on 'field4' for range [\" + lower + \",\" + upper\n        + \"] contained \" + count + \" terms.\");\n\n  }\n\n","sourceOld":"  private void testEnum(int lower, int upper) throws Exception {\n    NumericRangeQuery<Integer> q = NumericRangeQuery.newIntRange(\"field4\", 4,\n        lower, upper, true, true);\n    TermsEnum termEnum = q.getTermsEnum(searcher.getIndexReader());\n    int count = 0;\n    while (termEnum.next() != null) {\n      final BytesRef t = termEnum.term();\n      if (t != null) {\n        final int val = NumericUtils.prefixCodedToInt(t);\n        assertTrue(\"value not in bounds \" + val + \" >= \" + lower + \" && \"\n            + val + \" <= \" + upper, val >= lower && val <= upper);\n        count++;\n      } else\n        break;\n    } \n    assertNull(termEnum.next());\n    if (VERBOSE) System.out.println(\"TermEnum on 'field4' for range [\" + lower + \",\" + upper\n        + \"] contained \" + count + \" terms.\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEnum(int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEnum(int,int).mjava","sourceNew":"  private void testEnum(int lower, int upper) throws Exception {\n    NumericRangeQuery<Integer> q = NumericRangeQuery.newIntRange(\"field4\", 4,\n        lower, upper, true, true);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"field4\");\n    TermsEnum termEnum = q.getTermsEnum(terms);\n    int count = 0;\n    while (termEnum.next() != null) {\n      final BytesRef t = termEnum.term();\n      if (t != null) {\n        final int val = NumericUtils.prefixCodedToInt(t);\n        assertTrue(\"value not in bounds \" + val + \" >= \" + lower + \" && \"\n            + val + \" <= \" + upper, val >= lower && val <= upper);\n        count++;\n      } else\n        break;\n    } \n    assertNull(termEnum.next());\n    if (VERBOSE) System.out.println(\"TermEnum on 'field4' for range [\" + lower + \",\" + upper\n        + \"] contained \" + count + \" terms.\");\n\n  }\n\n","sourceOld":"  private void testEnum(int lower, int upper) throws Exception {\n    NumericRangeQuery<Integer> q = NumericRangeQuery.newIntRange(\"field4\", 4,\n        lower, upper, true, true);\n    TermsEnum termEnum = q.getTermsEnum(searcher.getIndexReader());\n    int count = 0;\n    while (termEnum.next() != null) {\n      final BytesRef t = termEnum.term();\n      if (t != null) {\n        final int val = NumericUtils.prefixCodedToInt(t);\n        assertTrue(\"value not in bounds \" + val + \" >= \" + lower + \" && \"\n            + val + \" <= \" + upper, val >= lower && val <= upper);\n        count++;\n      } else\n        break;\n    } \n    assertNull(termEnum.next());\n    if (VERBOSE) System.out.println(\"TermEnum on 'field4' for range [\" + lower + \",\" + upper\n        + \"] contained \" + count + \" terms.\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEnum(int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEnum(int,int).mjava","sourceNew":"  private void testEnum(int lower, int upper) throws Exception {\n    NumericRangeQuery<Integer> q = NumericRangeQuery.newIntRange(\"field4\", 4,\n        lower, upper, true, true);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"field4\");\n    TermsEnum termEnum = q.getTermsEnum(terms);\n    int count = 0;\n    while (termEnum.next() != null) {\n      final BytesRef t = termEnum.term();\n      if (t != null) {\n        final int val = NumericUtils.prefixCodedToInt(t);\n        assertTrue(\"value not in bounds \" + val + \" >= \" + lower + \" && \"\n            + val + \" <= \" + upper, val >= lower && val <= upper);\n        count++;\n      } else\n        break;\n    } \n    assertNull(termEnum.next());\n    if (VERBOSE) System.out.println(\"TermEnum on 'field4' for range [\" + lower + \",\" + upper\n        + \"] contained \" + count + \" terms.\");\n\n  }\n\n","sourceOld":"  private void testEnum(int lower, int upper) throws Exception {\n    NumericRangeQuery<Integer> q = NumericRangeQuery.newIntRange(\"field4\", 4,\n        lower, upper, true, true);\n    TermsEnum termEnum = q.getTermsEnum(searcher.getIndexReader());\n    int count = 0;\n    while (termEnum.next() != null) {\n      final BytesRef t = termEnum.term();\n      if (t != null) {\n        final int val = NumericUtils.prefixCodedToInt(t);\n        assertTrue(\"value not in bounds \" + val + \" >= \" + lower + \" && \"\n            + val + \" <= \" + upper, val >= lower && val <= upper);\n        count++;\n      } else\n        break;\n    } \n    assertNull(termEnum.next());\n    if (VERBOSE) System.out.println(\"TermEnum on 'field4' for range [\" + lower + \",\" + upper\n        + \"] contained \" + count + \" terms.\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a4965b25e439626b575c2281b39ad875f89d891","date":1321132400,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEnum(int,int).mjava","sourceNew":null,"sourceOld":"  private void testEnum(int lower, int upper) throws Exception {\n    NumericRangeQuery<Integer> q = NumericRangeQuery.newIntRange(\"field4\", 4,\n        lower, upper, true, true);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"field4\");\n    TermsEnum termEnum = q.getTermsEnum(terms);\n    int count = 0;\n    while (termEnum.next() != null) {\n      final BytesRef t = termEnum.term();\n      if (t != null) {\n        final int val = NumericUtils.prefixCodedToInt(t);\n        assertTrue(\"value not in bounds \" + val + \" >= \" + lower + \" && \"\n            + val + \" <= \" + upper, val >= lower && val <= upper);\n        count++;\n      } else\n        break;\n    } \n    assertNull(termEnum.next());\n    if (VERBOSE) System.out.println(\"TermEnum on 'field4' for range [\" + lower + \",\" + upper\n        + \"] contained \" + count + \" terms.\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2a4965b25e439626b575c2281b39ad875f89d891":["e8dd2a69747e9f2922fd8b6970bd1661b26a692d"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","e8dd2a69747e9f2922fd8b6970bd1661b26a692d"],"e8dd2a69747e9f2922fd8b6970bd1661b26a692d":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"3bb13258feba31ab676502787ab2e1779f129b7a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","e8dd2a69747e9f2922fd8b6970bd1661b26a692d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2a4965b25e439626b575c2281b39ad875f89d891"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"2a4965b25e439626b575c2281b39ad875f89d891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","e8dd2a69747e9f2922fd8b6970bd1661b26a692d","3bb13258feba31ab676502787ab2e1779f129b7a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"e8dd2a69747e9f2922fd8b6970bd1661b26a692d":["2a4965b25e439626b575c2281b39ad875f89d891","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}