{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexReader.FieldIndexData#FieldIndexData(IndexInput,PagedBytes,long,long,long,long,long).mjava","commits":[{"id":"d943163030bbd7a9caf93cb5fea92257390a2a99","date":1403094254,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexReader.FieldIndexData#FieldIndexData(IndexInput,PagedBytes,long,long,long,long,long).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexReader.FieldIndexData#FieldIndexData(IndexInput,long,long,long,long,long).mjava","sourceNew":"    public FieldIndexData(IndexInput in, PagedBytes termBytes, long indexStart, long termsStart, long packedIndexStart, long packedOffsetsStart, long numIndexTerms) throws IOException {\n      \n      this.termsStart = termsStart;\n      termBytesStart = termBytes.getPointer();\n      \n      IndexInput clone = in.clone();\n      clone.seek(indexStart);\n      \n      this.numIndexTerms = numIndexTerms;\n      assert this.numIndexTerms  > 0: \"numIndexTerms=\" + numIndexTerms;\n      \n      // slurp in the images from disk:\n      \n      try {\n        final long numTermBytes = packedIndexStart - indexStart;\n        termBytes.copy(clone, numTermBytes);\n        \n        // records offsets into main terms dict file\n        termsDictOffsets = MonotonicBlockPackedReader.of(clone, packedIntsVersion, blocksize, numIndexTerms, false);\n        \n        // records offsets into byte[] term data\n        termOffsets = MonotonicBlockPackedReader.of(clone, packedIntsVersion, blocksize, 1+numIndexTerms, false);\n      } finally {\n        clone.close();\n      }\n    }\n\n","sourceOld":"    public FieldIndexData(IndexInput in, long indexStart, long termsStart, long packedIndexStart, long packedOffsetsStart, long numIndexTerms) throws IOException {\n      \n      this.termsStart = termsStart;\n      termBytesStart = termBytes.getPointer();\n      \n      IndexInput clone = in.clone();\n      clone.seek(indexStart);\n      \n      this.numIndexTerms = numIndexTerms;\n      assert this.numIndexTerms  > 0: \"numIndexTerms=\" + numIndexTerms;\n      \n      // slurp in the images from disk:\n      \n      try {\n        final long numTermBytes = packedIndexStart - indexStart;\n        termBytes.copy(clone, numTermBytes);\n        \n        // records offsets into main terms dict file\n        termsDictOffsets = MonotonicBlockPackedReader.of(clone, packedIntsVersion, blocksize, numIndexTerms, false);\n        \n        // records offsets into byte[] term data\n        termOffsets = MonotonicBlockPackedReader.of(clone, packedIntsVersion, blocksize, 1+numIndexTerms, false);\n      } finally {\n        clone.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e57c73924f3b8c19defa62e96bfa34a4922d49c2","date":1403106358,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexReader.FieldIndexData#FieldIndexData(IndexInput,PagedBytes,long,long,long,long,long).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexReader.FieldIndexData#FieldIndexData(IndexInput,long,long,long,long,long).mjava","sourceNew":"    public FieldIndexData(IndexInput in, PagedBytes termBytes, long indexStart, long termsStart, long packedIndexStart, long packedOffsetsStart, long numIndexTerms) throws IOException {\n      \n      this.termsStart = termsStart;\n      termBytesStart = termBytes.getPointer();\n      \n      IndexInput clone = in.clone();\n      clone.seek(indexStart);\n      \n      this.numIndexTerms = numIndexTerms;\n      assert this.numIndexTerms  > 0: \"numIndexTerms=\" + numIndexTerms;\n      \n      // slurp in the images from disk:\n      \n      try {\n        final long numTermBytes = packedIndexStart - indexStart;\n        termBytes.copy(clone, numTermBytes);\n        \n        // records offsets into main terms dict file\n        termsDictOffsets = MonotonicBlockPackedReader.of(clone, packedIntsVersion, blocksize, numIndexTerms, false);\n        \n        // records offsets into byte[] term data\n        termOffsets = MonotonicBlockPackedReader.of(clone, packedIntsVersion, blocksize, 1+numIndexTerms, false);\n      } finally {\n        clone.close();\n      }\n    }\n\n","sourceOld":"    public FieldIndexData(IndexInput in, long indexStart, long termsStart, long packedIndexStart, long packedOffsetsStart, long numIndexTerms) throws IOException {\n      \n      this.termsStart = termsStart;\n      termBytesStart = termBytes.getPointer();\n      \n      IndexInput clone = in.clone();\n      clone.seek(indexStart);\n      \n      this.numIndexTerms = numIndexTerms;\n      assert this.numIndexTerms  > 0: \"numIndexTerms=\" + numIndexTerms;\n      \n      // slurp in the images from disk:\n      \n      try {\n        final long numTermBytes = packedIndexStart - indexStart;\n        termBytes.copy(clone, numTermBytes);\n        \n        // records offsets into main terms dict file\n        termsDictOffsets = MonotonicBlockPackedReader.of(clone, packedIntsVersion, blocksize, numIndexTerms, false);\n        \n        // records offsets into byte[] term data\n        termOffsets = MonotonicBlockPackedReader.of(clone, packedIntsVersion, blocksize, 1+numIndexTerms, false);\n      } finally {\n        clone.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e57c73924f3b8c19defa62e96bfa34a4922d49c2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d943163030bbd7a9caf93cb5fea92257390a2a99"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d943163030bbd7a9caf93cb5fea92257390a2a99":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d943163030bbd7a9caf93cb5fea92257390a2a99"]},"commit2Childs":{"e57c73924f3b8c19defa62e96bfa34a4922d49c2":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","d943163030bbd7a9caf93cb5fea92257390a2a99"],"d943163030bbd7a9caf93cb5fea92257390a2a99":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}