{"path":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testCustomIDF().mjava","commits":[{"id":"be0e0881e3769f3abb8f083719a2a1eb66a80be2","date":1295840025,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testCustomIDF().mjava","pathOld":"/dev/null","sourceNew":"  public void testCustomIDF() throws Exception {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new DefaultSimilarity() {\n      \n      @Override\n      public IDFExplanation idfExplain(Collection<Term> terms,\n          IndexSearcher searcher) throws IOException {\n        return new IDFExplanation() {\n\n          @Override\n          public float getIdf() {\n            return 10f;\n          }\n\n          @Override\n          public String explain() {\n            return \"just a test\";\n          }\n          \n        };\n      }   \n    });\n    \n    MultiPhraseQuery query = new MultiPhraseQuery();\n    query.add(new Term[] { new Term(\"body\", \"this\"), new Term(\"body\", \"that\") });\n    query.add(new Term(\"body\", \"is\"));\n    Weight weight = query.createWeight(searcher);\n    assertEquals(10f * 10f, weight.sumOfSquaredWeights(), 0.001f);\n\n    writer.close();\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9325c7ff9928fabe81c28553b41fc7aa57dfab","date":1295896411,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testCustomIDF().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testCustomIDF().mjava","sourceNew":"  public void testCustomIDF() throws Exception {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarityProvider(new DefaultSimilarity() {\n      \n      @Override\n      public IDFExplanation idfExplain(Collection<Term> terms,\n          IndexSearcher searcher) throws IOException {\n        return new IDFExplanation() {\n\n          @Override\n          public float getIdf() {\n            return 10f;\n          }\n\n          @Override\n          public String explain() {\n            return \"just a test\";\n          }\n          \n        };\n      }   \n    });\n    \n    MultiPhraseQuery query = new MultiPhraseQuery();\n    query.add(new Term[] { new Term(\"body\", \"this\"), new Term(\"body\", \"that\") });\n    query.add(new Term(\"body\", \"is\"));\n    Weight weight = query.createWeight(searcher);\n    assertEquals(10f * 10f, weight.sumOfSquaredWeights(), 0.001f);\n\n    writer.close();\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testCustomIDF() throws Exception {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new DefaultSimilarity() {\n      \n      @Override\n      public IDFExplanation idfExplain(Collection<Term> terms,\n          IndexSearcher searcher) throws IOException {\n        return new IDFExplanation() {\n\n          @Override\n          public float getIdf() {\n            return 10f;\n          }\n\n          @Override\n          public String explain() {\n            return \"just a test\";\n          }\n          \n        };\n      }   \n    });\n    \n    MultiPhraseQuery query = new MultiPhraseQuery();\n    query.add(new Term[] { new Term(\"body\", \"this\"), new Term(\"body\", \"that\") });\n    query.add(new Term(\"body\", \"is\"));\n    Weight weight = query.createWeight(searcher);\n    assertEquals(10f * 10f, weight.sumOfSquaredWeights(), 0.001f);\n\n    writer.close();\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testCustomIDF().mjava","pathOld":"/dev/null","sourceNew":"  public void testCustomIDF() throws Exception {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarityProvider(new DefaultSimilarity() {\n      \n      @Override\n      public IDFExplanation idfExplain(Collection<Term> terms,\n          IndexSearcher searcher) throws IOException {\n        return new IDFExplanation() {\n\n          @Override\n          public float getIdf() {\n            return 10f;\n          }\n\n          @Override\n          public String explain() {\n            return \"just a test\";\n          }\n          \n        };\n      }   \n    });\n    \n    MultiPhraseQuery query = new MultiPhraseQuery();\n    query.add(new Term[] { new Term(\"body\", \"this\"), new Term(\"body\", \"that\") });\n    query.add(new Term(\"body\", \"is\"));\n    Weight weight = query.createWeight(searcher);\n    assertEquals(10f * 10f, weight.sumOfSquaredWeights(), 0.001f);\n\n    writer.close();\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testCustomIDF().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testCustomIDF().mjava","sourceNew":"  public void testCustomIDF() throws Exception {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new DefaultSimilarity() {\n      \n      @Override\n      public IDFExplanation idfExplain(Collection<Term> terms,\n          IndexSearcher searcher) throws IOException {\n        return new IDFExplanation() {\n\n          @Override\n          public float getIdf() {\n            return 10f;\n          }\n\n          @Override\n          public String explain() {\n            return \"just a test\";\n          }\n          \n        };\n      }   \n    });\n    \n    MultiPhraseQuery query = new MultiPhraseQuery();\n    query.add(new Term[] { new Term(\"body\", \"this\"), new Term(\"body\", \"that\") });\n    query.add(new Term(\"body\", \"is\"));\n    Weight weight = query.createWeight(searcher);\n    assertEquals(10f * 10f, weight.sumOfSquaredWeights(), 0.001f);\n\n    writer.close();\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testCustomIDF() throws Exception {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarityProvider(new DefaultSimilarity() {\n      \n      @Override\n      public IDFExplanation idfExplain(Collection<Term> terms,\n          IndexSearcher searcher) throws IOException {\n        return new IDFExplanation() {\n\n          @Override\n          public float getIdf() {\n            return 10f;\n          }\n\n          @Override\n          public String explain() {\n            return \"just a test\";\n          }\n          \n        };\n      }   \n    });\n    \n    MultiPhraseQuery query = new MultiPhraseQuery();\n    query.add(new Term[] { new Term(\"body\", \"this\"), new Term(\"body\", \"that\") });\n    query.add(new Term(\"body\", \"is\"));\n    Weight weight = query.createWeight(searcher);\n    assertEquals(10f * 10f, weight.sumOfSquaredWeights(), 0.001f);\n\n    writer.close();\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testCustomIDF().mjava","pathOld":"/dev/null","sourceNew":"  public void testCustomIDF() throws Exception {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new DefaultSimilarity() {\n      \n      @Override\n      public IDFExplanation idfExplain(Collection<Term> terms,\n          IndexSearcher searcher) throws IOException {\n        return new IDFExplanation() {\n\n          @Override\n          public float getIdf() {\n            return 10f;\n          }\n\n          @Override\n          public String explain() {\n            return \"just a test\";\n          }\n          \n        };\n      }   \n    });\n    \n    MultiPhraseQuery query = new MultiPhraseQuery();\n    query.add(new Term[] { new Term(\"body\", \"this\"), new Term(\"body\", \"that\") });\n    query.add(new Term(\"body\", \"is\"));\n    Weight weight = query.createWeight(searcher);\n    assertEquals(10f * 10f, weight.sumOfSquaredWeights(), 0.001f);\n\n    writer.close();\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testCustomIDF().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testCustomIDF().mjava","sourceNew":"  public void testCustomIDF() throws Exception {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new DefaultSimilarity() {\n      \n      @Override\n      public IDFExplanation idfExplain(Collection<Term> terms,\n          IndexSearcher searcher) throws IOException {\n        return new IDFExplanation() {\n\n          @Override\n          public float getIdf() {\n            return 10f;\n          }\n\n          @Override\n          public String explain() {\n            return \"just a test\";\n          }\n          \n        };\n      }   \n    });\n    \n    MultiPhraseQuery query = new MultiPhraseQuery();\n    query.add(new Term[] { new Term(\"body\", \"this\"), new Term(\"body\", \"that\") });\n    query.add(new Term(\"body\", \"is\"));\n    Weight weight = query.createWeight(searcher);\n    assertEquals(10f * 10f, weight.sumOfSquaredWeights(), 0.001f);\n\n    writer.close();\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testCustomIDF() throws Exception {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarityProvider(new DefaultSimilarity() {\n      \n      @Override\n      public IDFExplanation idfExplain(Collection<Term> terms,\n          IndexSearcher searcher) throws IOException {\n        return new IDFExplanation() {\n\n          @Override\n          public float getIdf() {\n            return 10f;\n          }\n\n          @Override\n          public String explain() {\n            return \"just a test\";\n          }\n          \n        };\n      }   \n    });\n    \n    MultiPhraseQuery query = new MultiPhraseQuery();\n    query.add(new Term[] { new Term(\"body\", \"this\"), new Term(\"body\", \"that\") });\n    query.add(new Term(\"body\", \"is\"));\n    Weight weight = query.createWeight(searcher);\n    assertEquals(10f * 10f, weight.sumOfSquaredWeights(), 0.001f);\n\n    writer.close();\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"160d004a0e8f5361a446f9d01456aee1c1af20dc","date":1301061642,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testCustomIDF().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testCustomIDF().mjava","sourceNew":"  public void testCustomIDF() throws Exception {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public Similarity get(String field) {\n        return new DefaultSimilarity() {\n          \n          @Override\n          public IDFExplanation idfExplain(Collection<Term> terms,\n              IndexSearcher searcher) throws IOException {\n            return new IDFExplanation() {\n\n              @Override\n              public float getIdf() {\n                return 10f;\n              }\n\n              @Override\n              public String explain() {\n                return \"just a test\";\n              }\n              \n            };\n          } \n        };\n      }\n    });\n    \n    MultiPhraseQuery query = new MultiPhraseQuery();\n    query.add(new Term[] { new Term(\"body\", \"this\"), new Term(\"body\", \"that\") });\n    query.add(new Term(\"body\", \"is\"));\n    Weight weight = query.createWeight(searcher);\n    assertEquals(10f * 10f, weight.sumOfSquaredWeights(), 0.001f);\n\n    writer.close();\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testCustomIDF() throws Exception {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new DefaultSimilarity() {\n      \n      @Override\n      public IDFExplanation idfExplain(Collection<Term> terms,\n          IndexSearcher searcher) throws IOException {\n        return new IDFExplanation() {\n\n          @Override\n          public float getIdf() {\n            return 10f;\n          }\n\n          @Override\n          public String explain() {\n            return \"just a test\";\n          }\n          \n        };\n      }   \n    });\n    \n    MultiPhraseQuery query = new MultiPhraseQuery();\n    query.add(new Term[] { new Term(\"body\", \"this\"), new Term(\"body\", \"that\") });\n    query.add(new Term(\"body\", \"is\"));\n    Weight weight = query.createWeight(searcher);\n    assertEquals(10f * 10f, weight.sumOfSquaredWeights(), 0.001f);\n\n    writer.close();\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testCustomIDF().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testCustomIDF().mjava","sourceNew":"  public void testCustomIDF() throws Exception {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public Similarity get(String field) {\n        return new DefaultSimilarity() {\n          \n          @Override\n          public IDFExplanation idfExplain(Collection<Term> terms,\n              IndexSearcher searcher) throws IOException {\n            return new IDFExplanation() {\n\n              @Override\n              public float getIdf() {\n                return 10f;\n              }\n\n              @Override\n              public String explain() {\n                return \"just a test\";\n              }\n              \n            };\n          } \n        };\n      }\n    });\n    \n    MultiPhraseQuery query = new MultiPhraseQuery();\n    query.add(new Term[] { new Term(\"body\", \"this\"), new Term(\"body\", \"that\") });\n    query.add(new Term(\"body\", \"is\"));\n    Weight weight = query.createWeight(searcher);\n    assertEquals(10f * 10f, weight.sumOfSquaredWeights(), 0.001f);\n\n    writer.close();\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testCustomIDF() throws Exception {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new DefaultSimilarity() {\n      \n      @Override\n      public IDFExplanation idfExplain(Collection<Term> terms,\n          IndexSearcher searcher) throws IOException {\n        return new IDFExplanation() {\n\n          @Override\n          public float getIdf() {\n            return 10f;\n          }\n\n          @Override\n          public String explain() {\n            return \"just a test\";\n          }\n          \n        };\n      }   \n    });\n    \n    MultiPhraseQuery query = new MultiPhraseQuery();\n    query.add(new Term[] { new Term(\"body\", \"this\"), new Term(\"body\", \"that\") });\n    query.add(new Term(\"body\", \"is\"));\n    Weight weight = query.createWeight(searcher);\n    assertEquals(10f * 10f, weight.sumOfSquaredWeights(), 0.001f);\n\n    writer.close();\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testCustomIDF().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testCustomIDF().mjava","sourceNew":"  public void testCustomIDF() throws Exception {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public Similarity get(String field) {\n        return new DefaultSimilarity() {\n          \n          @Override\n          public IDFExplanation idfExplain(Collection<Term> terms,\n              IndexSearcher searcher) throws IOException {\n            return new IDFExplanation() {\n\n              @Override\n              public float getIdf() {\n                return 10f;\n              }\n\n              @Override\n              public String explain() {\n                return \"just a test\";\n              }\n              \n            };\n          } \n        };\n      }\n    });\n    \n    MultiPhraseQuery query = new MultiPhraseQuery();\n    query.add(new Term[] { new Term(\"body\", \"this\"), new Term(\"body\", \"that\") });\n    query.add(new Term(\"body\", \"is\"));\n    Weight weight = query.createWeight(searcher);\n    assertEquals(10f * 10f, weight.sumOfSquaredWeights(), 0.001f);\n\n    writer.close();\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testCustomIDF() throws Exception {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new DefaultSimilarity() {\n      \n      @Override\n      public IDFExplanation idfExplain(Collection<Term> terms,\n          IndexSearcher searcher) throws IOException {\n        return new IDFExplanation() {\n\n          @Override\n          public float getIdf() {\n            return 10f;\n          }\n\n          @Override\n          public String explain() {\n            return \"just a test\";\n          }\n          \n        };\n      }   \n    });\n    \n    MultiPhraseQuery query = new MultiPhraseQuery();\n    query.add(new Term[] { new Term(\"body\", \"this\"), new Term(\"body\", \"that\") });\n    query.add(new Term(\"body\", \"is\"));\n    Weight weight = query.createWeight(searcher);\n    assertEquals(10f * 10f, weight.sumOfSquaredWeights(), 0.001f);\n\n    writer.close();\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3cee3d20b0c786e6fca20539454262e29edcab","date":1310101685,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testCustomIDF().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testCustomIDF().mjava","sourceNew":"  public void testCustomIDF() throws Exception {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public Similarity get(String field) {\n        return new DefaultSimilarity() {\n          \n          @Override\n          public Explanation idfExplain(TermContext stats[],\n              IndexSearcher searcher) throws IOException {\n            return new Explanation(10f, \"just a test\");\n          } \n        };\n      }\n    });\n    \n    MultiPhraseQuery query = new MultiPhraseQuery();\n    query.add(new Term[] { new Term(\"body\", \"this\"), new Term(\"body\", \"that\") });\n    query.add(new Term(\"body\", \"is\"));\n    Weight weight = query.createWeight(searcher);\n    assertEquals(10f * 10f, weight.getValueForNormalization(), 0.001f);\n\n    writer.close();\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testCustomIDF() throws Exception {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public Similarity get(String field) {\n        return new DefaultSimilarity() {\n          \n          @Override\n          public IDFExplanation idfExplain(Collection<Term> terms,\n              IndexSearcher searcher) throws IOException {\n            return new IDFExplanation() {\n\n              @Override\n              public float getIdf() {\n                return 10f;\n              }\n\n              @Override\n              public String explain() {\n                return \"just a test\";\n              }\n              \n            };\n          } \n        };\n      }\n    });\n    \n    MultiPhraseQuery query = new MultiPhraseQuery();\n    query.add(new Term[] { new Term(\"body\", \"this\"), new Term(\"body\", \"that\") });\n    query.add(new Term(\"body\", \"is\"));\n    Weight weight = query.createWeight(searcher);\n    assertEquals(10f * 10f, weight.sumOfSquaredWeights(), 0.001f);\n\n    writer.close();\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testCustomIDF().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testCustomIDF().mjava","sourceNew":"  public void testCustomIDF() throws Exception {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public Similarity get(String field) {\n        return new DefaultSimilarity() {\n          \n          @Override\n          public Explanation idfExplain(TermContext stats[],\n              IndexSearcher searcher) throws IOException {\n            return new Explanation(10f, \"just a test\");\n          } \n        };\n      }\n    });\n    \n    MultiPhraseQuery query = new MultiPhraseQuery();\n    query.add(new Term[] { new Term(\"body\", \"this\"), new Term(\"body\", \"that\") });\n    query.add(new Term(\"body\", \"is\"));\n    Weight weight = query.createWeight(searcher);\n    assertEquals(10f * 10f, weight.getValueForNormalization(), 0.001f);\n\n    writer.close();\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testCustomIDF() throws Exception {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public Similarity get(String field) {\n        return new DefaultSimilarity() {\n          \n          @Override\n          public IDFExplanation idfExplain(Collection<Term> terms,\n              IndexSearcher searcher) throws IOException {\n            return new IDFExplanation() {\n\n              @Override\n              public float getIdf() {\n                return 10f;\n              }\n\n              @Override\n              public String explain() {\n                return \"just a test\";\n              }\n              \n            };\n          } \n        };\n      }\n    });\n    \n    MultiPhraseQuery query = new MultiPhraseQuery();\n    query.add(new Term[] { new Term(\"body\", \"this\"), new Term(\"body\", \"that\") });\n    query.add(new Term(\"body\", \"is\"));\n    Weight weight = query.createWeight(searcher);\n    assertEquals(10f * 10f, weight.sumOfSquaredWeights(), 0.001f);\n\n    writer.close();\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testCustomIDF().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testCustomIDF().mjava","sourceNew":"  public void testCustomIDF() throws Exception {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public Similarity get(String field) {\n        return new DefaultSimilarity() {\n          \n          @Override\n          public Explanation idfExplain(TermContext stats[],\n              IndexSearcher searcher) throws IOException {\n            return new Explanation(10f, \"just a test\");\n          } \n        };\n      }\n    });\n    \n    MultiPhraseQuery query = new MultiPhraseQuery();\n    query.add(new Term[] { new Term(\"body\", \"this\"), new Term(\"body\", \"that\") });\n    query.add(new Term(\"body\", \"is\"));\n    Weight weight = query.createWeight(searcher);\n    assertEquals(10f * 10f, weight.getValueForNormalization(), 0.001f);\n\n    writer.close();\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testCustomIDF() throws Exception {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public Similarity get(String field) {\n        return new DefaultSimilarity() {\n          \n          @Override\n          public IDFExplanation idfExplain(Collection<Term> terms,\n              IndexSearcher searcher) throws IOException {\n            return new IDFExplanation() {\n\n              @Override\n              public float getIdf() {\n                return 10f;\n              }\n\n              @Override\n              public String explain() {\n                return \"just a test\";\n              }\n              \n            };\n          } \n        };\n      }\n    });\n    \n    MultiPhraseQuery query = new MultiPhraseQuery();\n    query.add(new Term[] { new Term(\"body\", \"this\"), new Term(\"body\", \"that\") });\n    query.add(new Term(\"body\", \"is\"));\n    Weight weight = query.createWeight(searcher);\n    assertEquals(10f * 10f, weight.sumOfSquaredWeights(), 0.001f);\n\n    writer.close();\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce8e026ad419f6c1e2d26851d5b4b35e6239c9d","date":1320398636,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testCustomIDF().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testCustomIDF().mjava","sourceNew":"  public void testCustomIDF() throws Exception {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public Similarity get(String field) {\n        return new DefaultSimilarity() {\n          \n          @Override\n          public Explanation idfExplain(CollectionStatistics collectionStats, TermStatistics termStats[]) {\n            return new Explanation(10f, \"just a test\");\n          } \n        };\n      }\n    });\n    \n    MultiPhraseQuery query = new MultiPhraseQuery();\n    query.add(new Term[] { new Term(\"body\", \"this\"), new Term(\"body\", \"that\") });\n    query.add(new Term(\"body\", \"is\"));\n    Weight weight = query.createWeight(searcher);\n    assertEquals(10f * 10f, weight.getValueForNormalization(), 0.001f);\n\n    writer.close();\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testCustomIDF() throws Exception {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public Similarity get(String field) {\n        return new DefaultSimilarity() {\n          \n          @Override\n          public Explanation idfExplain(TermContext stats[],\n              IndexSearcher searcher) throws IOException {\n            return new Explanation(10f, \"just a test\");\n          } \n        };\n      }\n    });\n    \n    MultiPhraseQuery query = new MultiPhraseQuery();\n    query.add(new Term[] { new Term(\"body\", \"this\"), new Term(\"body\", \"that\") });\n    query.add(new Term(\"body\", \"is\"));\n    Weight weight = query.createWeight(searcher);\n    assertEquals(10f * 10f, weight.getValueForNormalization(), 0.001f);\n\n    writer.close();\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testCustomIDF().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testCustomIDF().mjava","sourceNew":"  public void testCustomIDF() throws Exception {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public Similarity get(String field) {\n        return new DefaultSimilarity() {\n          \n          @Override\n          public Explanation idfExplain(CollectionStatistics collectionStats, TermStatistics termStats[]) {\n            return new Explanation(10f, \"just a test\");\n          } \n        };\n      }\n    });\n    \n    MultiPhraseQuery query = new MultiPhraseQuery();\n    query.add(new Term[] { new Term(\"body\", \"this\"), new Term(\"body\", \"that\") });\n    query.add(new Term(\"body\", \"is\"));\n    Weight weight = query.createWeight(searcher);\n    assertEquals(10f * 10f, weight.getValueForNormalization(), 0.001f);\n\n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testCustomIDF() throws Exception {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public Similarity get(String field) {\n        return new DefaultSimilarity() {\n          \n          @Override\n          public Explanation idfExplain(CollectionStatistics collectionStats, TermStatistics termStats[]) {\n            return new Explanation(10f, \"just a test\");\n          } \n        };\n      }\n    });\n    \n    MultiPhraseQuery query = new MultiPhraseQuery();\n    query.add(new Term[] { new Term(\"body\", \"this\"), new Term(\"body\", \"that\") });\n    query.add(new Term(\"body\", \"is\"));\n    Weight weight = query.createWeight(searcher);\n    assertEquals(10f * 10f, weight.getValueForNormalization(), 0.001f);\n\n    writer.close();\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testCustomIDF().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testCustomIDF().mjava","sourceNew":"  public void testCustomIDF() throws Exception {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public Similarity get(String field) {\n        return new DefaultSimilarity() {\n          \n          @Override\n          public Explanation idfExplain(CollectionStatistics collectionStats, TermStatistics termStats[]) {\n            return new Explanation(10f, \"just a test\");\n          } \n        };\n      }\n    });\n    \n    MultiPhraseQuery query = new MultiPhraseQuery();\n    query.add(new Term[] { new Term(\"body\", \"this\"), new Term(\"body\", \"that\") });\n    query.add(new Term(\"body\", \"is\"));\n    Weight weight = query.createWeight(searcher);\n    assertEquals(10f * 10f, weight.getValueForNormalization(), 0.001f);\n\n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testCustomIDF() throws Exception {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public Similarity get(String field) {\n        return new DefaultSimilarity() {\n          \n          @Override\n          public Explanation idfExplain(CollectionStatistics collectionStats, TermStatistics termStats[]) {\n            return new Explanation(10f, \"just a test\");\n          } \n        };\n      }\n    });\n    \n    MultiPhraseQuery query = new MultiPhraseQuery();\n    query.add(new Term[] { new Term(\"body\", \"this\"), new Term(\"body\", \"that\") });\n    query.add(new Term(\"body\", \"is\"));\n    Weight weight = query.createWeight(searcher);\n    assertEquals(10f * 10f, weight.getValueForNormalization(), 0.001f);\n\n    writer.close();\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b","date":1328532481,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testCustomIDF().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testCustomIDF().mjava","sourceNew":"  public void testCustomIDF() throws Exception {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new DefaultSimilarity() { \n      @Override\n      public Explanation idfExplain(CollectionStatistics collectionStats, TermStatistics termStats[]) {\n        return new Explanation(10f, \"just a test\");\n      } \n    });\n    \n    MultiPhraseQuery query = new MultiPhraseQuery();\n    query.add(new Term[] { new Term(\"body\", \"this\"), new Term(\"body\", \"that\") });\n    query.add(new Term(\"body\", \"is\"));\n    Weight weight = query.createWeight(searcher);\n    assertEquals(10f * 10f, weight.getValueForNormalization(), 0.001f);\n\n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testCustomIDF() throws Exception {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public Similarity get(String field) {\n        return new DefaultSimilarity() {\n          \n          @Override\n          public Explanation idfExplain(CollectionStatistics collectionStats, TermStatistics termStats[]) {\n            return new Explanation(10f, \"just a test\");\n          } \n        };\n      }\n    });\n    \n    MultiPhraseQuery query = new MultiPhraseQuery();\n    query.add(new Term[] { new Term(\"body\", \"this\"), new Term(\"body\", \"that\") });\n    query.add(new Term(\"body\", \"is\"));\n    Weight weight = query.createWeight(searcher);\n    assertEquals(10f * 10f, weight.getValueForNormalization(), 0.001f);\n\n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testCustomIDF().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testCustomIDF().mjava","sourceNew":"  public void testCustomIDF() throws Exception {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new DefaultSimilarity() { \n      @Override\n      public Explanation idfExplain(CollectionStatistics collectionStats, TermStatistics termStats[]) {\n        return new Explanation(10f, \"just a test\");\n      } \n    });\n    \n    MultiPhraseQuery query = new MultiPhraseQuery();\n    query.add(new Term[] { new Term(\"body\", \"this\"), new Term(\"body\", \"that\") });\n    query.add(new Term(\"body\", \"is\"));\n    Weight weight = query.createWeight(searcher);\n    assertEquals(10f * 10f, weight.getValueForNormalization(), 0.001f);\n\n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testCustomIDF() throws Exception {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new DefaultSimilarity() { \n      @Override\n      public Explanation idfExplain(CollectionStatistics collectionStats, TermStatistics termStats[]) {\n        return new Explanation(10f, \"just a test\");\n      } \n    });\n    \n    MultiPhraseQuery query = new MultiPhraseQuery();\n    query.add(new Term[] { new Term(\"body\", \"this\"), new Term(\"body\", \"that\") });\n    query.add(new Term(\"body\", \"is\"));\n    Weight weight = query.createWeight(searcher);\n    assertEquals(10f * 10f, weight.getValueForNormalization(), 0.001f);\n\n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f3cee3d20b0c786e6fca20539454262e29edcab":["160d004a0e8f5361a446f9d01456aee1c1af20dc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["9ce8e026ad419f6c1e2d26851d5b4b35e6239c9d","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"be0e0881e3769f3abb8f083719a2a1eb66a80be2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["be0e0881e3769f3abb8f083719a2a1eb66a80be2"],"1291e4568eb7d9463d751627596ef14baf4c1603":["160d004a0e8f5361a446f9d01456aee1c1af20dc","0f3cee3d20b0c786e6fca20539454262e29edcab"],"9ce8e026ad419f6c1e2d26851d5b4b35e6239c9d":["0f3cee3d20b0c786e6fca20539454262e29edcab"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bde51b089eb7f86171eb3406e38a274743f9b7ac","160d004a0e8f5361a446f9d01456aee1c1af20dc"],"160d004a0e8f5361a446f9d01456aee1c1af20dc":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["160d004a0e8f5361a446f9d01456aee1c1af20dc","0f3cee3d20b0c786e6fca20539454262e29edcab"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["9ce8e026ad419f6c1e2d26851d5b4b35e6239c9d"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","160d004a0e8f5361a446f9d01456aee1c1af20dc"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","790e1fde4caa765b3faaad3fbcd25c6973450336"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","790e1fde4caa765b3faaad3fbcd25c6973450336"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"0f3cee3d20b0c786e6fca20539454262e29edcab":["1291e4568eb7d9463d751627596ef14baf4c1603","9ce8e026ad419f6c1e2d26851d5b4b35e6239c9d","f0b9507caf22f292ac0e5e59f62db4275adf4511"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"be0e0881e3769f3abb8f083719a2a1eb66a80be2":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["160d004a0e8f5361a446f9d01456aee1c1af20dc","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","790e1fde4caa765b3faaad3fbcd25c6973450336"],"1291e4568eb7d9463d751627596ef14baf4c1603":[],"9ce8e026ad419f6c1e2d26851d5b4b35e6239c9d":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"160d004a0e8f5361a446f9d01456aee1c1af20dc":["0f3cee3d20b0c786e6fca20539454262e29edcab","1291e4568eb7d9463d751627596ef14baf4c1603","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","f0b9507caf22f292ac0e5e59f62db4275adf4511","d619839baa8ce5503e496b94a9e42ad6f079293f"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["be0e0881e3769f3abb8f083719a2a1eb66a80be2","bb9b72f7c3d7827c64dd4ec580ded81778da361d","29ef99d61cda9641b6250bf9567329a6e65f901d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","1291e4568eb7d9463d751627596ef14baf4c1603","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","f0b9507caf22f292ac0e5e59f62db4275adf4511","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}