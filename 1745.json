{"path":"solr/core/src/test/org/apache/solr/MinimalSchemaTest#testAllConfiguredHandlers().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/MinimalSchemaTest#testAllConfiguredHandlers().mjava","pathOld":"solr/src/test/org/apache/solr/MinimalSchemaTest#testAllConfiguredHandlers().mjava","sourceNew":"  /** \n   * Iterates over all (non \"/update/*\") handlers in the core and hits \n   * them with a request (using some simple params) to verify that they \n   * don't generate an error against the minimal schema\n   */\n  @Test\n  public void testAllConfiguredHandlers() {\n    Set<String> handlerNames = h.getCore().getRequestHandlers().keySet();\n    for (String handler : handlerNames) {\n      try {\n        if (handler.startsWith(\"/update\")) {\n          continue;\n        }\n        if (handler.startsWith(\"/mlt\")) {\n          continue;\n        }\n\n        assertQ(\"failure w/handler: '\" + handler + \"'\",\n                req(\"qt\", handler,\n                    // this should be fairly innoculous for any type of query\n                    \"q\", \"foo:bar\")\n                ,\"//lst[@name='responseHeader']\"\n                );\n      } catch (Exception e) {\n        throw new RuntimeException(\"exception w/handler: '\" + handler + \"'\", \n                                   e);\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Iterates over all (non \"/update/*\") handlers in the core and hits \n   * them with a request (using some simple params) to verify that they \n   * don't generate an error against the minimal schema\n   */\n  @Test\n  public void testAllConfiguredHandlers() {\n    Set<String> handlerNames = h.getCore().getRequestHandlers().keySet();\n    for (String handler : handlerNames) {\n      try {\n        if (handler.startsWith(\"/update\")) {\n          continue;\n        }\n        if (handler.startsWith(\"/mlt\")) {\n          continue;\n        }\n\n        assertQ(\"failure w/handler: '\" + handler + \"'\",\n                req(\"qt\", handler,\n                    // this should be fairly innoculous for any type of query\n                    \"q\", \"foo:bar\")\n                ,\"//lst[@name='responseHeader']\"\n                );\n      } catch (Exception e) {\n        throw new RuntimeException(\"exception w/handler: '\" + handler + \"'\", \n                                   e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/MinimalSchemaTest#testAllConfiguredHandlers().mjava","pathOld":"solr/src/test/org/apache/solr/MinimalSchemaTest#testAllConfiguredHandlers().mjava","sourceNew":"  /** \n   * Iterates over all (non \"/update/*\") handlers in the core and hits \n   * them with a request (using some simple params) to verify that they \n   * don't generate an error against the minimal schema\n   */\n  @Test\n  public void testAllConfiguredHandlers() {\n    Set<String> handlerNames = h.getCore().getRequestHandlers().keySet();\n    for (String handler : handlerNames) {\n      try {\n        if (handler.startsWith(\"/update\")) {\n          continue;\n        }\n        if (handler.startsWith(\"/mlt\")) {\n          continue;\n        }\n\n        assertQ(\"failure w/handler: '\" + handler + \"'\",\n                req(\"qt\", handler,\n                    // this should be fairly innoculous for any type of query\n                    \"q\", \"foo:bar\")\n                ,\"//lst[@name='responseHeader']\"\n                );\n      } catch (Exception e) {\n        throw new RuntimeException(\"exception w/handler: '\" + handler + \"'\", \n                                   e);\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Iterates over all (non \"/update/*\") handlers in the core and hits \n   * them with a request (using some simple params) to verify that they \n   * don't generate an error against the minimal schema\n   */\n  @Test\n  public void testAllConfiguredHandlers() {\n    Set<String> handlerNames = h.getCore().getRequestHandlers().keySet();\n    for (String handler : handlerNames) {\n      try {\n        if (handler.startsWith(\"/update\")) {\n          continue;\n        }\n        if (handler.startsWith(\"/mlt\")) {\n          continue;\n        }\n\n        assertQ(\"failure w/handler: '\" + handler + \"'\",\n                req(\"qt\", handler,\n                    // this should be fairly innoculous for any type of query\n                    \"q\", \"foo:bar\")\n                ,\"//lst[@name='responseHeader']\"\n                );\n      } catch (Exception e) {\n        throw new RuntimeException(\"exception w/handler: '\" + handler + \"'\", \n                                   e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/MinimalSchemaTest#testAllConfiguredHandlers().mjava","pathOld":"solr/src/test/org/apache/solr/MinimalSchemaTest#testAllConfiguredHandlers().mjava","sourceNew":"  /** \n   * Iterates over all (non \"/update/*\") handlers in the core and hits \n   * them with a request (using some simple params) to verify that they \n   * don't generate an error against the minimal schema\n   */\n  @Test\n  public void testAllConfiguredHandlers() {\n    Set<String> handlerNames = h.getCore().getRequestHandlers().keySet();\n    for (String handler : handlerNames) {\n      try {\n        if (handler.startsWith(\"/update\")) {\n          continue;\n        }\n        if (handler.startsWith(\"/mlt\")) {\n          continue;\n        }\n\n        assertQ(\"failure w/handler: '\" + handler + \"'\",\n                req(\"qt\", handler,\n                    // this should be fairly innoculous for any type of query\n                    \"q\", \"foo:bar\")\n                ,\"//lst[@name='responseHeader']\"\n                );\n      } catch (Exception e) {\n        throw new RuntimeException(\"exception w/handler: '\" + handler + \"'\", \n                                   e);\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Iterates over all (non \"/update/*\") handlers in the core and hits \n   * them with a request (using some simple params) to verify that they \n   * don't generate an error against the minimal schema\n   */\n  @Test\n  public void testAllConfiguredHandlers() {\n    Set<String> handlerNames = h.getCore().getRequestHandlers().keySet();\n    for (String handler : handlerNames) {\n      try {\n        if (handler.startsWith(\"/update\")) {\n          continue;\n        }\n        if (handler.startsWith(\"/mlt\")) {\n          continue;\n        }\n\n        assertQ(\"failure w/handler: '\" + handler + \"'\",\n                req(\"qt\", handler,\n                    // this should be fairly innoculous for any type of query\n                    \"q\", \"foo:bar\")\n                ,\"//lst[@name='responseHeader']\"\n                );\n      } catch (Exception e) {\n        throw new RuntimeException(\"exception w/handler: '\" + handler + \"'\", \n                                   e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd0ef6574805f3cb9880e0983b7548a6aa933508","date":1315345052,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/MinimalSchemaTest#testAllConfiguredHandlers().mjava","pathOld":"solr/core/src/test/org/apache/solr/MinimalSchemaTest#testAllConfiguredHandlers().mjava","sourceNew":"  /** \n   * Iterates over all (non \"/update/*\") handlers in the core and hits \n   * them with a request (using some simple params) to verify that they \n   * don't generate an error against the minimal schema\n   */\n  @Test\n  public void testAllConfiguredHandlers() {\n    Set<String> handlerNames = h.getCore().getRequestHandlers().keySet();\n    for (String handler : handlerNames) {\n      try {\n        if (handler.startsWith(\"/update\")) {\n          continue;\n        }\n        if (handler.startsWith(\"/mlt\")) {\n          continue;\n        }\n\n        assertQ(\"failure w/handler: '\" + handler + \"'\",\n                req(\"qt\", handler,\n                    // this should be fairly innocuous for any type of query\n                    \"q\", \"foo:bar\",\n                    \"omitHeader\", \"false\"\n                )\n                ,\"//lst[@name='responseHeader']\"\n                );\n      } catch (Exception e) {\n        throw new RuntimeException(\"exception w/handler: '\" + handler + \"'\", \n                                   e);\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Iterates over all (non \"/update/*\") handlers in the core and hits \n   * them with a request (using some simple params) to verify that they \n   * don't generate an error against the minimal schema\n   */\n  @Test\n  public void testAllConfiguredHandlers() {\n    Set<String> handlerNames = h.getCore().getRequestHandlers().keySet();\n    for (String handler : handlerNames) {\n      try {\n        if (handler.startsWith(\"/update\")) {\n          continue;\n        }\n        if (handler.startsWith(\"/mlt\")) {\n          continue;\n        }\n\n        assertQ(\"failure w/handler: '\" + handler + \"'\",\n                req(\"qt\", handler,\n                    // this should be fairly innoculous for any type of query\n                    \"q\", \"foo:bar\")\n                ,\"//lst[@name='responseHeader']\"\n                );\n      } catch (Exception e) {\n        throw new RuntimeException(\"exception w/handler: '\" + handler + \"'\", \n                                   e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e56881a4ebc3438313e3c008a7124ba0f8ecc7bf","date":1416997673,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/MinimalSchemaTest#testAllConfiguredHandlers().mjava","pathOld":"solr/core/src/test/org/apache/solr/MinimalSchemaTest#testAllConfiguredHandlers().mjava","sourceNew":"  /** \n   * Iterates over all (non \"/update/*\") handlers in the core and hits \n   * them with a request (using some simple params) to verify that they \n   * don't generate an error against the minimal schema\n   */\n  @Test\n  public void testAllConfiguredHandlers() {\n    Set<String> handlerNames = h.getCore().getRequestHandlers().keySet();\n    for (String handler : handlerNames) {\n      try {\n\n        if (handler.startsWith(\"/update\")) {\n          continue;\n        }\n        if (handler.startsWith(\"/mlt\")) {\n          continue;\n        }\n        if(handler.equals(\"/admin/ping\")) continue;\n\n        assertQ(\"failure w/handler: '\" + handler + \"'\",\n                req(\"qt\", handler,\n                    // this should be fairly innocuous for any type of query\n                    \"q\", \"foo:bar\",\n                    \"omitHeader\", \"false\"\n                )\n                ,\"//lst[@name='responseHeader']\"\n                );\n      } catch (Exception e) {\n        throw new RuntimeException(\"exception w/handler: '\" + handler + \"'\", \n                                   e);\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Iterates over all (non \"/update/*\") handlers in the core and hits \n   * them with a request (using some simple params) to verify that they \n   * don't generate an error against the minimal schema\n   */\n  @Test\n  public void testAllConfiguredHandlers() {\n    Set<String> handlerNames = h.getCore().getRequestHandlers().keySet();\n    for (String handler : handlerNames) {\n      try {\n        if (handler.startsWith(\"/update\")) {\n          continue;\n        }\n        if (handler.startsWith(\"/mlt\")) {\n          continue;\n        }\n\n        assertQ(\"failure w/handler: '\" + handler + \"'\",\n                req(\"qt\", handler,\n                    // this should be fairly innocuous for any type of query\n                    \"q\", \"foo:bar\",\n                    \"omitHeader\", \"false\"\n                )\n                ,\"//lst[@name='responseHeader']\"\n                );\n      } catch (Exception e) {\n        throw new RuntimeException(\"exception w/handler: '\" + handler + \"'\", \n                                   e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d72e80cee24be385c713864a9f1f90be3744482","date":1417420925,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/MinimalSchemaTest#testAllConfiguredHandlers().mjava","pathOld":"solr/core/src/test/org/apache/solr/MinimalSchemaTest#testAllConfiguredHandlers().mjava","sourceNew":"  /** \n   * Iterates over all (non \"/update/*\") handlers in the core and hits \n   * them with a request (using some simple params) to verify that they \n   * don't generate an error against the minimal schema\n   */\n  @Test\n  public void testAllConfiguredHandlers() {\n    Set<String> handlerNames = h.getCore().getRequestHandlers().keySet();\n    for (String handler : handlerNames) {\n      try {\n\n\n        if (handler.startsWith(\"/update\") ||\n            handler.startsWith(\"/admin\") ||\n            handler.startsWith(\"/schema\") ||\n            handler.startsWith(\"/config\") ||\n            handler.startsWith(\"/mlt\")\n            ) {\n          continue;\n        }\n\n        assertQ(\"failure w/handler: '\" + handler + \"'\",\n                req(\"qt\", handler,\n                    // this should be fairly innocuous for any type of query\n                    \"q\", \"foo:bar\",\n                    \"omitHeader\", \"false\"\n                )\n                ,\"//lst[@name='responseHeader']\"\n                );\n      } catch (Exception e) {\n        throw new RuntimeException(\"exception w/handler: '\" + handler + \"'\", \n                                   e);\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Iterates over all (non \"/update/*\") handlers in the core and hits \n   * them with a request (using some simple params) to verify that they \n   * don't generate an error against the minimal schema\n   */\n  @Test\n  public void testAllConfiguredHandlers() {\n    Set<String> handlerNames = h.getCore().getRequestHandlers().keySet();\n    for (String handler : handlerNames) {\n      try {\n\n        if (handler.startsWith(\"/update\")) {\n          continue;\n        }\n        if (handler.startsWith(\"/mlt\")) {\n          continue;\n        }\n        if(handler.equals(\"/admin/ping\")) continue;\n\n        assertQ(\"failure w/handler: '\" + handler + \"'\",\n                req(\"qt\", handler,\n                    // this should be fairly innocuous for any type of query\n                    \"q\", \"foo:bar\",\n                    \"omitHeader\", \"false\"\n                )\n                ,\"//lst[@name='responseHeader']\"\n                );\n      } catch (Exception e) {\n        throw new RuntimeException(\"exception w/handler: '\" + handler + \"'\", \n                                   e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d12ee9465d37a9eedeee8a630aa7551b013cd4e4","date":1450303849,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/MinimalSchemaTest#testAllConfiguredHandlers().mjava","pathOld":"solr/core/src/test/org/apache/solr/MinimalSchemaTest#testAllConfiguredHandlers().mjava","sourceNew":"  /** \n   * Iterates over all (non \"/update/*\") handlers in the core and hits \n   * them with a request (using some simple params) to verify that they \n   * don't generate an error against the minimal schema\n   */\n  @Test\n  public void testAllConfiguredHandlers() {\n    Set<String> handlerNames = h.getCore().getRequestHandlers().keySet();\n    for (String handler : handlerNames) {\n      try {\n\n\n        if (handler.startsWith(\"/update\") ||\n            handler.startsWith(\"/admin\") ||\n            handler.startsWith(\"/schema\") ||\n            handler.startsWith(\"/config\") ||\n            handler.startsWith(\"/mlt\") ||\n            handler.startsWith(\"/export\") ||\n            handler.startsWith(\"/sql\") ||\n            handler.startsWith(\"/stream\")\n            ) {\n          continue;\n        }\n\n        assertQ(\"failure w/handler: '\" + handler + \"'\",\n                req(\"qt\", handler,\n                    // this should be fairly innocuous for any type of query\n                    \"q\", \"foo:bar\",\n                    \"omitHeader\", \"false\"\n                )\n                ,\"//lst[@name='responseHeader']\"\n                );\n      } catch (Exception e) {\n        throw new RuntimeException(\"exception w/handler: '\" + handler + \"'\", \n                                   e);\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Iterates over all (non \"/update/*\") handlers in the core and hits \n   * them with a request (using some simple params) to verify that they \n   * don't generate an error against the minimal schema\n   */\n  @Test\n  public void testAllConfiguredHandlers() {\n    Set<String> handlerNames = h.getCore().getRequestHandlers().keySet();\n    for (String handler : handlerNames) {\n      try {\n\n\n        if (handler.startsWith(\"/update\") ||\n            handler.startsWith(\"/admin\") ||\n            handler.startsWith(\"/schema\") ||\n            handler.startsWith(\"/config\") ||\n            handler.startsWith(\"/mlt\")\n            ) {\n          continue;\n        }\n\n        assertQ(\"failure w/handler: '\" + handler + \"'\",\n                req(\"qt\", handler,\n                    // this should be fairly innocuous for any type of query\n                    \"q\", \"foo:bar\",\n                    \"omitHeader\", \"false\"\n                )\n                ,\"//lst[@name='responseHeader']\"\n                );\n      } catch (Exception e) {\n        throw new RuntimeException(\"exception w/handler: '\" + handler + \"'\", \n                                   e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89fc530b0b90c48296ecc9c7747483cb41c9fefe","date":1462537461,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/MinimalSchemaTest#testAllConfiguredHandlers().mjava","pathOld":"solr/core/src/test/org/apache/solr/MinimalSchemaTest#testAllConfiguredHandlers().mjava","sourceNew":"  /** \n   * Iterates over all (non \"/update/*\") handlers in the core and hits \n   * them with a request (using some simple params) to verify that they \n   * don't generate an error against the minimal schema\n   */\n  @Test\n  public void testAllConfiguredHandlers() {\n    Set<String> handlerNames = h.getCore().getRequestHandlers().keySet();\n    for (String handler : handlerNames) {\n      try {\n\n\n        if (handler.startsWith(\"/update\") ||\n            handler.startsWith(\"/admin\") ||\n            handler.startsWith(\"/schema\") ||\n            handler.startsWith(\"/config\") ||\n            handler.startsWith(\"/mlt\") ||\n            handler.startsWith(\"/export\") ||\n            handler.startsWith(\"/graph\") ||\n            handler.startsWith(\"/sql\") ||\n            handler.startsWith(\"/stream\")\n            ) {\n          continue;\n        }\n\n        assertQ(\"failure w/handler: '\" + handler + \"'\",\n                req(\"qt\", handler,\n                    // this should be fairly innocuous for any type of query\n                    \"q\", \"foo:bar\",\n                    \"omitHeader\", \"false\"\n                )\n                ,\"//lst[@name='responseHeader']\"\n                );\n      } catch (Exception e) {\n        throw new RuntimeException(\"exception w/handler: '\" + handler + \"'\", \n                                   e);\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Iterates over all (non \"/update/*\") handlers in the core and hits \n   * them with a request (using some simple params) to verify that they \n   * don't generate an error against the minimal schema\n   */\n  @Test\n  public void testAllConfiguredHandlers() {\n    Set<String> handlerNames = h.getCore().getRequestHandlers().keySet();\n    for (String handler : handlerNames) {\n      try {\n\n\n        if (handler.startsWith(\"/update\") ||\n            handler.startsWith(\"/admin\") ||\n            handler.startsWith(\"/schema\") ||\n            handler.startsWith(\"/config\") ||\n            handler.startsWith(\"/mlt\") ||\n            handler.startsWith(\"/export\") ||\n            handler.startsWith(\"/sql\") ||\n            handler.startsWith(\"/stream\")\n            ) {\n          continue;\n        }\n\n        assertQ(\"failure w/handler: '\" + handler + \"'\",\n                req(\"qt\", handler,\n                    // this should be fairly innocuous for any type of query\n                    \"q\", \"foo:bar\",\n                    \"omitHeader\", \"false\"\n                )\n                ,\"//lst[@name='responseHeader']\"\n                );\n      } catch (Exception e) {\n        throw new RuntimeException(\"exception w/handler: '\" + handler + \"'\", \n                                   e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/MinimalSchemaTest#testAllConfiguredHandlers().mjava","pathOld":"solr/core/src/test/org/apache/solr/MinimalSchemaTest#testAllConfiguredHandlers().mjava","sourceNew":"  /** \n   * Iterates over all (non \"/update/*\") handlers in the core and hits \n   * them with a request (using some simple params) to verify that they \n   * don't generate an error against the minimal schema\n   */\n  @Test\n  public void testAllConfiguredHandlers() {\n    Set<String> handlerNames = h.getCore().getRequestHandlers().keySet();\n    for (String handler : handlerNames) {\n      try {\n\n\n        if (handler.startsWith(\"/update\") ||\n            handler.startsWith(\"/admin\") ||\n            handler.startsWith(\"/schema\") ||\n            handler.startsWith(\"/config\") ||\n            handler.startsWith(\"/mlt\") ||\n            handler.startsWith(\"/export\") ||\n            handler.startsWith(\"/graph\") ||\n            handler.startsWith(\"/sql\") ||\n            handler.startsWith(\"/stream\")\n            ) {\n          continue;\n        }\n\n        assertQ(\"failure w/handler: '\" + handler + \"'\",\n                req(\"qt\", handler,\n                    // this should be fairly innocuous for any type of query\n                    \"q\", \"foo:bar\",\n                    \"omitHeader\", \"false\"\n                )\n                ,\"//lst[@name='responseHeader']\"\n                );\n      } catch (Exception e) {\n        throw new RuntimeException(\"exception w/handler: '\" + handler + \"'\", \n                                   e);\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Iterates over all (non \"/update/*\") handlers in the core and hits \n   * them with a request (using some simple params) to verify that they \n   * don't generate an error against the minimal schema\n   */\n  @Test\n  public void testAllConfiguredHandlers() {\n    Set<String> handlerNames = h.getCore().getRequestHandlers().keySet();\n    for (String handler : handlerNames) {\n      try {\n\n\n        if (handler.startsWith(\"/update\") ||\n            handler.startsWith(\"/admin\") ||\n            handler.startsWith(\"/schema\") ||\n            handler.startsWith(\"/config\") ||\n            handler.startsWith(\"/mlt\") ||\n            handler.startsWith(\"/export\") ||\n            handler.startsWith(\"/sql\") ||\n            handler.startsWith(\"/stream\")\n            ) {\n          continue;\n        }\n\n        assertQ(\"failure w/handler: '\" + handler + \"'\",\n                req(\"qt\", handler,\n                    // this should be fairly innocuous for any type of query\n                    \"q\", \"foo:bar\",\n                    \"omitHeader\", \"false\"\n                )\n                ,\"//lst[@name='responseHeader']\"\n                );\n      } catch (Exception e) {\n        throw new RuntimeException(\"exception w/handler: '\" + handler + \"'\", \n                                   e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b92f86e90a95b8fc860ddecd9470ffb89a9fa7d","date":1467828398,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/MinimalSchemaTest#testAllConfiguredHandlers().mjava","pathOld":"solr/core/src/test/org/apache/solr/MinimalSchemaTest#testAllConfiguredHandlers().mjava","sourceNew":"  /** \n   * Iterates over all (non \"/update/*\") handlers in the core and hits \n   * them with a request (using some simple params) to verify that they \n   * don't generate an error against the minimal schema\n   */\n  @Test\n  public void testAllConfiguredHandlers() {\n    Set<String> handlerNames = h.getCore().getRequestHandlers().keySet();\n    for (String handler : handlerNames) {\n      try {\n\n\n        if (handler.startsWith(\"/update\") ||\n            handler.startsWith(\"/admin\") ||\n            handler.startsWith(\"/schema\") ||\n            handler.startsWith(\"/config\") ||\n            handler.startsWith(\"/mlt\") ||\n            handler.startsWith(\"/export\") ||\n            handler.startsWith(\"/graph\") ||\n            handler.startsWith(\"/sql\") ||\n            handler.startsWith(\"/stream\") ||\n            handler.startsWith(\"/terms\")\n\n            ) {\n          continue;\n        }\n\n        assertQ(\"failure w/handler: '\" + handler + \"'\",\n                req(\"qt\", handler,\n                    // this should be fairly innocuous for any type of query\n                    \"q\", \"foo:bar\",\n                    \"omitHeader\", \"false\"\n                )\n                ,\"//lst[@name='responseHeader']\"\n                );\n      } catch (Exception e) {\n        throw new RuntimeException(\"exception w/handler: '\" + handler + \"'\", \n                                   e);\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Iterates over all (non \"/update/*\") handlers in the core and hits \n   * them with a request (using some simple params) to verify that they \n   * don't generate an error against the minimal schema\n   */\n  @Test\n  public void testAllConfiguredHandlers() {\n    Set<String> handlerNames = h.getCore().getRequestHandlers().keySet();\n    for (String handler : handlerNames) {\n      try {\n\n\n        if (handler.startsWith(\"/update\") ||\n            handler.startsWith(\"/admin\") ||\n            handler.startsWith(\"/schema\") ||\n            handler.startsWith(\"/config\") ||\n            handler.startsWith(\"/mlt\") ||\n            handler.startsWith(\"/export\") ||\n            handler.startsWith(\"/graph\") ||\n            handler.startsWith(\"/sql\") ||\n            handler.startsWith(\"/stream\")\n            ) {\n          continue;\n        }\n\n        assertQ(\"failure w/handler: '\" + handler + \"'\",\n                req(\"qt\", handler,\n                    // this should be fairly innocuous for any type of query\n                    \"q\", \"foo:bar\",\n                    \"omitHeader\", \"false\"\n                )\n                ,\"//lst[@name='responseHeader']\"\n                );\n      } catch (Exception e) {\n        throw new RuntimeException(\"exception w/handler: '\" + handler + \"'\", \n                                   e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11407a855d05b788a5400e8f4ac3083bb258f473","date":1475073244,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/MinimalSchemaTest#testAllConfiguredHandlers().mjava","pathOld":"solr/core/src/test/org/apache/solr/MinimalSchemaTest#testAllConfiguredHandlers().mjava","sourceNew":"  /** \n   * Iterates over all (non \"/update/*\") handlers in the core and hits \n   * them with a request (using some simple params) to verify that they \n   * don't generate an error against the minimal schema\n   */\n  @Test\n  public void testAllConfiguredHandlers() {\n    Set<String> handlerNames = h.getCore().getRequestHandlers().keySet();\n    for (String handler : handlerNames) {\n      try {\n\n\n        if (handler.startsWith(\"/update\") ||\n            handler.startsWith(\"/admin\") ||\n            handler.startsWith(\"/schema\") ||\n            handler.startsWith(\"/config\") ||\n            handler.startsWith(\"/mlt\") ||\n            handler.startsWith(\"/export\") ||\n            handler.startsWith(\"/graph\") ||\n            handler.startsWith(\"/sql\") ||\n            handler.startsWith(\"/stream\") ||\n            handler.startsWith(\"/terms\") ||\n            handler.startsWith(\"/analysis/\")||\n            handler.startsWith(\"/debug/\")\n            ) {\n          continue;\n        }\n\n        assertQ(\"failure w/handler: '\" + handler + \"'\",\n                req(\"qt\", handler,\n                    // this should be fairly innocuous for any type of query\n                    \"q\", \"foo:bar\",\n                    \"omitHeader\", \"false\"\n                )\n                ,\"//lst[@name='responseHeader']\"\n                );\n      } catch (Exception e) {\n        throw new RuntimeException(\"exception w/handler: '\" + handler + \"'\", \n                                   e);\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Iterates over all (non \"/update/*\") handlers in the core and hits \n   * them with a request (using some simple params) to verify that they \n   * don't generate an error against the minimal schema\n   */\n  @Test\n  public void testAllConfiguredHandlers() {\n    Set<String> handlerNames = h.getCore().getRequestHandlers().keySet();\n    for (String handler : handlerNames) {\n      try {\n\n\n        if (handler.startsWith(\"/update\") ||\n            handler.startsWith(\"/admin\") ||\n            handler.startsWith(\"/schema\") ||\n            handler.startsWith(\"/config\") ||\n            handler.startsWith(\"/mlt\") ||\n            handler.startsWith(\"/export\") ||\n            handler.startsWith(\"/graph\") ||\n            handler.startsWith(\"/sql\") ||\n            handler.startsWith(\"/stream\") ||\n            handler.startsWith(\"/terms\")\n\n            ) {\n          continue;\n        }\n\n        assertQ(\"failure w/handler: '\" + handler + \"'\",\n                req(\"qt\", handler,\n                    // this should be fairly innocuous for any type of query\n                    \"q\", \"foo:bar\",\n                    \"omitHeader\", \"false\"\n                )\n                ,\"//lst[@name='responseHeader']\"\n                );\n      } catch (Exception e) {\n        throw new RuntimeException(\"exception w/handler: '\" + handler + \"'\", \n                                   e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["5cb65c1c2f90852e718f86c8be09beb1c4dba408"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/MinimalSchemaTest#testAllConfiguredHandlers().mjava","pathOld":"solr/core/src/test/org/apache/solr/MinimalSchemaTest#testAllConfiguredHandlers().mjava","sourceNew":"  /** \n   * Iterates over all (non \"/update/*\") handlers in the core and hits \n   * them with a request (using some simple params) to verify that they \n   * don't generate an error against the minimal schema\n   */\n  @Test\n  public void testAllConfiguredHandlers() {\n    Set<String> handlerNames = h.getCore().getRequestHandlers().keySet();\n    for (String handler : handlerNames) {\n      try {\n\n\n        if (handler.startsWith(\"/update\") ||\n            handler.startsWith(\"/admin\") ||\n            handler.startsWith(\"/schema\") ||\n            handler.startsWith(\"/config\") ||\n            handler.startsWith(\"/mlt\") ||\n            handler.startsWith(\"/export\") ||\n            handler.startsWith(\"/graph\") ||\n            handler.startsWith(\"/sql\") ||\n            handler.startsWith(\"/stream\") ||\n            handler.startsWith(\"/terms\") ||\n            handler.startsWith(\"/analysis/\")||\n            handler.startsWith(\"/debug/\")\n            ) {\n          continue;\n        }\n\n        assertQ(\"failure w/handler: '\" + handler + \"'\",\n                req(\"qt\", handler,\n                    // this should be fairly innocuous for any type of query\n                    \"q\", \"foo:bar\",\n                    \"omitHeader\", \"false\"\n                )\n                ,\"//lst[@name='responseHeader']\"\n                );\n      } catch (Exception e) {\n        throw new RuntimeException(\"exception w/handler: '\" + handler + \"'\", \n                                   e);\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Iterates over all (non \"/update/*\") handlers in the core and hits \n   * them with a request (using some simple params) to verify that they \n   * don't generate an error against the minimal schema\n   */\n  @Test\n  public void testAllConfiguredHandlers() {\n    Set<String> handlerNames = h.getCore().getRequestHandlers().keySet();\n    for (String handler : handlerNames) {\n      try {\n\n\n        if (handler.startsWith(\"/update\") ||\n            handler.startsWith(\"/admin\") ||\n            handler.startsWith(\"/schema\") ||\n            handler.startsWith(\"/config\") ||\n            handler.startsWith(\"/mlt\") ||\n            handler.startsWith(\"/export\") ||\n            handler.startsWith(\"/graph\") ||\n            handler.startsWith(\"/sql\") ||\n            handler.startsWith(\"/stream\") ||\n            handler.startsWith(\"/terms\")\n\n            ) {\n          continue;\n        }\n\n        assertQ(\"failure w/handler: '\" + handler + \"'\",\n                req(\"qt\", handler,\n                    // this should be fairly innocuous for any type of query\n                    \"q\", \"foo:bar\",\n                    \"omitHeader\", \"false\"\n                )\n                ,\"//lst[@name='responseHeader']\"\n                );\n      } catch (Exception e) {\n        throw new RuntimeException(\"exception w/handler: '\" + handler + \"'\", \n                                   e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/MinimalSchemaTest#testAllConfiguredHandlers().mjava","pathOld":"solr/core/src/test/org/apache/solr/MinimalSchemaTest#testAllConfiguredHandlers().mjava","sourceNew":"  /** \n   * Iterates over all (non \"/update/*\") handlers in the core and hits \n   * them with a request (using some simple params) to verify that they \n   * don't generate an error against the minimal schema\n   */\n  @Test\n  public void testAllConfiguredHandlers() {\n    Set<String> handlerNames = h.getCore().getRequestHandlers().keySet();\n    for (String handler : handlerNames) {\n      try {\n\n\n        if (handler.startsWith(\"/update\") ||\n            handler.startsWith(\"/admin\") ||\n            handler.startsWith(\"/schema\") ||\n            handler.startsWith(\"/config\") ||\n            handler.startsWith(\"/mlt\") ||\n            handler.startsWith(\"/export\") ||\n            handler.startsWith(\"/graph\") ||\n            handler.startsWith(\"/sql\") ||\n            handler.startsWith(\"/stream\") ||\n            handler.startsWith(\"/terms\") ||\n            handler.startsWith(\"/analysis/\")||\n            handler.startsWith(\"/debug/\")\n            ) {\n          continue;\n        }\n\n        assertQ(\"failure w/handler: '\" + handler + \"'\",\n                req(\"qt\", handler,\n                    // this should be fairly innocuous for any type of query\n                    \"q\", \"foo:bar\",\n                    \"omitHeader\", \"false\"\n                )\n                ,\"//lst[@name='responseHeader']\"\n                );\n      } catch (Exception e) {\n        throw new RuntimeException(\"exception w/handler: '\" + handler + \"'\", \n                                   e);\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Iterates over all (non \"/update/*\") handlers in the core and hits \n   * them with a request (using some simple params) to verify that they \n   * don't generate an error against the minimal schema\n   */\n  @Test\n  public void testAllConfiguredHandlers() {\n    Set<String> handlerNames = h.getCore().getRequestHandlers().keySet();\n    for (String handler : handlerNames) {\n      try {\n\n\n        if (handler.startsWith(\"/update\") ||\n            handler.startsWith(\"/admin\") ||\n            handler.startsWith(\"/schema\") ||\n            handler.startsWith(\"/config\") ||\n            handler.startsWith(\"/mlt\") ||\n            handler.startsWith(\"/export\") ||\n            handler.startsWith(\"/sql\") ||\n            handler.startsWith(\"/stream\")\n            ) {\n          continue;\n        }\n\n        assertQ(\"failure w/handler: '\" + handler + \"'\",\n                req(\"qt\", handler,\n                    // this should be fairly innocuous for any type of query\n                    \"q\", \"foo:bar\",\n                    \"omitHeader\", \"false\"\n                )\n                ,\"//lst[@name='responseHeader']\"\n                );\n      } catch (Exception e) {\n        throw new RuntimeException(\"exception w/handler: '\" + handler + \"'\", \n                                   e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cb65c1c2f90852e718f86c8be09beb1c4dba408","date":1543785784,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/MinimalSchemaTest#testAllConfiguredHandlers().mjava","pathOld":"solr/core/src/test/org/apache/solr/MinimalSchemaTest#testAllConfiguredHandlers().mjava","sourceNew":"  /** \n   * Iterates over all (non \"/update/*\") handlers in the core and hits \n   * them with a request (using some simple params) to verify that they \n   * don't generate an error against the minimal schema\n   */\n  @Test\n  public void testAllConfiguredHandlers() {\n    Set<String> handlerNames = h.getCore().getRequestHandlers().keySet();\n    for (String handler : handlerNames) {\n      try {\n\n\n        if (handler.startsWith(\"/update\") ||\n            handler.startsWith(\"/admin\") ||\n            handler.startsWith(\"/schema\") ||\n            handler.startsWith(\"/config\") ||\n            handler.startsWith(\"/mlt\") ||\n            handler.startsWith(\"/export\") ||\n            handler.startsWith(\"/graph\") ||\n            handler.startsWith(\"/sql\") ||\n            handler.startsWith(\"/stream\") ||\n            handler.startsWith(\"/terms\") ||\n            handler.startsWith(\"/analysis/\")||\n            handler.startsWith(\"/debug/\") ||\n            handler.startsWith(\"/replication\")\n            ) {\n          continue;\n        }\n\n        assertQ(\"failure w/handler: '\" + handler + \"'\",\n                req(\"qt\", handler,\n                    // this should be fairly innocuous for any type of query\n                    \"q\", \"foo:bar\",\n                    \"omitHeader\", \"false\"\n                )\n                ,\"//lst[@name='responseHeader']\"\n                );\n      } catch (Exception e) {\n        throw new RuntimeException(\"exception w/handler: '\" + handler + \"'\", \n                                   e);\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Iterates over all (non \"/update/*\") handlers in the core and hits \n   * them with a request (using some simple params) to verify that they \n   * don't generate an error against the minimal schema\n   */\n  @Test\n  public void testAllConfiguredHandlers() {\n    Set<String> handlerNames = h.getCore().getRequestHandlers().keySet();\n    for (String handler : handlerNames) {\n      try {\n\n\n        if (handler.startsWith(\"/update\") ||\n            handler.startsWith(\"/admin\") ||\n            handler.startsWith(\"/schema\") ||\n            handler.startsWith(\"/config\") ||\n            handler.startsWith(\"/mlt\") ||\n            handler.startsWith(\"/export\") ||\n            handler.startsWith(\"/graph\") ||\n            handler.startsWith(\"/sql\") ||\n            handler.startsWith(\"/stream\") ||\n            handler.startsWith(\"/terms\") ||\n            handler.startsWith(\"/analysis/\")||\n            handler.startsWith(\"/debug/\")\n            ) {\n          continue;\n        }\n\n        assertQ(\"failure w/handler: '\" + handler + \"'\",\n                req(\"qt\", handler,\n                    // this should be fairly innocuous for any type of query\n                    \"q\", \"foo:bar\",\n                    \"omitHeader\", \"false\"\n                )\n                ,\"//lst[@name='responseHeader']\"\n                );\n      } catch (Exception e) {\n        throw new RuntimeException(\"exception w/handler: '\" + handler + \"'\", \n                                   e);\n      }\n    }\n  }\n\n","bugFix":["11407a855d05b788a5400e8f4ac3083bb258f473"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7d72e80cee24be385c713864a9f1f90be3744482":["e56881a4ebc3438313e3c008a7124ba0f8ecc7bf"],"89fc530b0b90c48296ecc9c7747483cb41c9fefe":["d12ee9465d37a9eedeee8a630aa7551b013cd4e4"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["d12ee9465d37a9eedeee8a630aa7551b013cd4e4","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"bd0ef6574805f3cb9880e0983b7548a6aa933508":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"11407a855d05b788a5400e8f4ac3083bb258f473":["8b92f86e90a95b8fc860ddecd9470ffb89a9fa7d"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["d12ee9465d37a9eedeee8a630aa7551b013cd4e4","89fc530b0b90c48296ecc9c7747483cb41c9fefe"],"e56881a4ebc3438313e3c008a7124ba0f8ecc7bf":["bd0ef6574805f3cb9880e0983b7548a6aa933508"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["8b92f86e90a95b8fc860ddecd9470ffb89a9fa7d","11407a855d05b788a5400e8f4ac3083bb258f473"],"d12ee9465d37a9eedeee8a630aa7551b013cd4e4":["7d72e80cee24be385c713864a9f1f90be3744482"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cb65c1c2f90852e718f86c8be09beb1c4dba408":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"8b92f86e90a95b8fc860ddecd9470ffb89a9fa7d":["89fc530b0b90c48296ecc9c7747483cb41c9fefe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5cb65c1c2f90852e718f86c8be09beb1c4dba408"]},"commit2Childs":{"7d72e80cee24be385c713864a9f1f90be3744482":["d12ee9465d37a9eedeee8a630aa7551b013cd4e4"],"89fc530b0b90c48296ecc9c7747483cb41c9fefe":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","8b92f86e90a95b8fc860ddecd9470ffb89a9fa7d"],"c26f00b574427b55127e869b935845554afde1fa":["bd0ef6574805f3cb9880e0983b7548a6aa933508"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"bd0ef6574805f3cb9880e0983b7548a6aa933508":["e56881a4ebc3438313e3c008a7124ba0f8ecc7bf"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"11407a855d05b788a5400e8f4ac3083bb258f473":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"e56881a4ebc3438313e3c008a7124ba0f8ecc7bf":["7d72e80cee24be385c713864a9f1f90be3744482"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","5cb65c1c2f90852e718f86c8be09beb1c4dba408"],"d12ee9465d37a9eedeee8a630aa7551b013cd4e4":["89fc530b0b90c48296ecc9c7747483cb41c9fefe","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"5cb65c1c2f90852e718f86c8be09beb1c4dba408":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8b92f86e90a95b8fc860ddecd9470ffb89a9fa7d":["11407a855d05b788a5400e8f4ac3083bb258f473","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}