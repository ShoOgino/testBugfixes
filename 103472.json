{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","sourceNew":"  @Override\n  public void visitDocument(int n, StoredFieldVisitor visitor) throws IOException {\n    in.seek(offsets.get(n));\n    readLine();\n    assert StringHelper.startsWith(scratch, NUM);\n    int numFields = parseIntAt(NUM.length);\n    \n    for (int i = 0; i < numFields; i++) {\n      readLine();\n      assert StringHelper.startsWith(scratch, FIELD);\n      int fieldNumber = parseIntAt(FIELD.length);\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n      readLine();\n      assert StringHelper.startsWith(scratch, NAME);\n      readLine();\n      assert StringHelper.startsWith(scratch, TYPE);\n      \n      final BytesRef type;\n      if (equalsAt(TYPE_STRING, scratch, TYPE.length)) {\n        type = TYPE_STRING;\n      } else if (equalsAt(TYPE_BINARY, scratch, TYPE.length)) {\n        type = TYPE_BINARY;\n      } else if (equalsAt(TYPE_INT, scratch, TYPE.length)) {\n        type = TYPE_INT;\n      } else if (equalsAt(TYPE_LONG, scratch, TYPE.length)) {\n        type = TYPE_LONG;\n      } else if (equalsAt(TYPE_FLOAT, scratch, TYPE.length)) {\n        type = TYPE_FLOAT;\n      } else if (equalsAt(TYPE_DOUBLE, scratch, TYPE.length)) {\n        type = TYPE_DOUBLE;\n      } else {\n        throw new RuntimeException(\"unknown field type\");\n      }\n      \n      switch (visitor.needsField(fieldInfo)) {\n        case YES:  \n          readField(type, fieldInfo, visitor);\n          break;\n        case NO:   \n          readLine();\n          assert StringHelper.startsWith(scratch, VALUE);\n          break;\n        case STOP: return;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void visitDocument(int n, StoredFieldVisitor visitor) throws IOException {\n    in.seek(offsets.get(n));\n    readLine();\n    assert StringHelper.startsWith(scratch, NUM);\n    int numFields = parseIntAt(NUM.length);\n    \n    for (int i = 0; i < numFields; i++) {\n      readLine();\n      assert StringHelper.startsWith(scratch, FIELD);\n      int fieldNumber = parseIntAt(FIELD.length);\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n      readLine();\n      assert StringHelper.startsWith(scratch, NAME);\n      readLine();\n      assert StringHelper.startsWith(scratch, TYPE);\n      \n      final BytesRef type;\n      if (equalsAt(TYPE_STRING, scratch, TYPE.length)) {\n        type = TYPE_STRING;\n      } else if (equalsAt(TYPE_BINARY, scratch, TYPE.length)) {\n        type = TYPE_BINARY;\n      } else if (equalsAt(TYPE_INT, scratch, TYPE.length)) {\n        type = TYPE_INT;\n      } else if (equalsAt(TYPE_LONG, scratch, TYPE.length)) {\n        type = TYPE_LONG;\n      } else if (equalsAt(TYPE_FLOAT, scratch, TYPE.length)) {\n        type = TYPE_FLOAT;\n      } else if (equalsAt(TYPE_DOUBLE, scratch, TYPE.length)) {\n        type = TYPE_DOUBLE;\n      } else {\n        throw new RuntimeException(\"unknown field type\");\n      }\n      \n      switch (visitor.needsField(fieldInfo)) {\n        case YES:  \n          readField(type, fieldInfo, visitor);\n          break;\n        case NO:   \n          readLine();\n          assert StringHelper.startsWith(scratch, VALUE);\n          break;\n        case STOP: return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e784d2742d5536b6fceba16c6d032d4b2e38e320","date":1349724693,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","sourceNew":"  @Override\n  public void visitDocument(int n, StoredFieldVisitor visitor) throws IOException {\n    in.seek(offsets[n]);\n    readLine();\n    assert StringHelper.startsWith(scratch, NUM);\n    int numFields = parseIntAt(NUM.length);\n    \n    for (int i = 0; i < numFields; i++) {\n      readLine();\n      assert StringHelper.startsWith(scratch, FIELD);\n      int fieldNumber = parseIntAt(FIELD.length);\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n      readLine();\n      assert StringHelper.startsWith(scratch, NAME);\n      readLine();\n      assert StringHelper.startsWith(scratch, TYPE);\n      \n      final BytesRef type;\n      if (equalsAt(TYPE_STRING, scratch, TYPE.length)) {\n        type = TYPE_STRING;\n      } else if (equalsAt(TYPE_BINARY, scratch, TYPE.length)) {\n        type = TYPE_BINARY;\n      } else if (equalsAt(TYPE_INT, scratch, TYPE.length)) {\n        type = TYPE_INT;\n      } else if (equalsAt(TYPE_LONG, scratch, TYPE.length)) {\n        type = TYPE_LONG;\n      } else if (equalsAt(TYPE_FLOAT, scratch, TYPE.length)) {\n        type = TYPE_FLOAT;\n      } else if (equalsAt(TYPE_DOUBLE, scratch, TYPE.length)) {\n        type = TYPE_DOUBLE;\n      } else {\n        throw new RuntimeException(\"unknown field type\");\n      }\n      \n      switch (visitor.needsField(fieldInfo)) {\n        case YES:  \n          readField(type, fieldInfo, visitor);\n          break;\n        case NO:   \n          readLine();\n          assert StringHelper.startsWith(scratch, VALUE);\n          break;\n        case STOP: return;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void visitDocument(int n, StoredFieldVisitor visitor) throws IOException {\n    in.seek(offsets.get(n));\n    readLine();\n    assert StringHelper.startsWith(scratch, NUM);\n    int numFields = parseIntAt(NUM.length);\n    \n    for (int i = 0; i < numFields; i++) {\n      readLine();\n      assert StringHelper.startsWith(scratch, FIELD);\n      int fieldNumber = parseIntAt(FIELD.length);\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n      readLine();\n      assert StringHelper.startsWith(scratch, NAME);\n      readLine();\n      assert StringHelper.startsWith(scratch, TYPE);\n      \n      final BytesRef type;\n      if (equalsAt(TYPE_STRING, scratch, TYPE.length)) {\n        type = TYPE_STRING;\n      } else if (equalsAt(TYPE_BINARY, scratch, TYPE.length)) {\n        type = TYPE_BINARY;\n      } else if (equalsAt(TYPE_INT, scratch, TYPE.length)) {\n        type = TYPE_INT;\n      } else if (equalsAt(TYPE_LONG, scratch, TYPE.length)) {\n        type = TYPE_LONG;\n      } else if (equalsAt(TYPE_FLOAT, scratch, TYPE.length)) {\n        type = TYPE_FLOAT;\n      } else if (equalsAt(TYPE_DOUBLE, scratch, TYPE.length)) {\n        type = TYPE_DOUBLE;\n      } else {\n        throw new RuntimeException(\"unknown field type\");\n      }\n      \n      switch (visitor.needsField(fieldInfo)) {\n        case YES:  \n          readField(type, fieldInfo, visitor);\n          break;\n        case NO:   \n          readLine();\n          assert StringHelper.startsWith(scratch, VALUE);\n          break;\n        case STOP: return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"52c7e49be259508735752fba88085255014a6ecf","date":1398706273,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","sourceNew":"  @Override\n  public void visitDocument(int n, StoredFieldVisitor visitor) throws IOException {\n    in.seek(offsets[n]);\n    \n    while (true) {\n      readLine();\n      if (StringHelper.startsWith(scratch, FIELD) == false) {\n        break;\n      }\n      int fieldNumber = parseIntAt(FIELD.length);\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n      readLine();\n      assert StringHelper.startsWith(scratch, NAME);\n      readLine();\n      assert StringHelper.startsWith(scratch, TYPE);\n      \n      final BytesRef type;\n      if (equalsAt(TYPE_STRING, scratch, TYPE.length)) {\n        type = TYPE_STRING;\n      } else if (equalsAt(TYPE_BINARY, scratch, TYPE.length)) {\n        type = TYPE_BINARY;\n      } else if (equalsAt(TYPE_INT, scratch, TYPE.length)) {\n        type = TYPE_INT;\n      } else if (equalsAt(TYPE_LONG, scratch, TYPE.length)) {\n        type = TYPE_LONG;\n      } else if (equalsAt(TYPE_FLOAT, scratch, TYPE.length)) {\n        type = TYPE_FLOAT;\n      } else if (equalsAt(TYPE_DOUBLE, scratch, TYPE.length)) {\n        type = TYPE_DOUBLE;\n      } else {\n        throw new RuntimeException(\"unknown field type\");\n      }\n      \n      switch (visitor.needsField(fieldInfo)) {\n        case YES:  \n          readField(type, fieldInfo, visitor);\n          break;\n        case NO:   \n          readLine();\n          assert StringHelper.startsWith(scratch, VALUE);\n          break;\n        case STOP: return;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void visitDocument(int n, StoredFieldVisitor visitor) throws IOException {\n    in.seek(offsets[n]);\n    readLine();\n    assert StringHelper.startsWith(scratch, NUM);\n    int numFields = parseIntAt(NUM.length);\n    \n    for (int i = 0; i < numFields; i++) {\n      readLine();\n      assert StringHelper.startsWith(scratch, FIELD);\n      int fieldNumber = parseIntAt(FIELD.length);\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n      readLine();\n      assert StringHelper.startsWith(scratch, NAME);\n      readLine();\n      assert StringHelper.startsWith(scratch, TYPE);\n      \n      final BytesRef type;\n      if (equalsAt(TYPE_STRING, scratch, TYPE.length)) {\n        type = TYPE_STRING;\n      } else if (equalsAt(TYPE_BINARY, scratch, TYPE.length)) {\n        type = TYPE_BINARY;\n      } else if (equalsAt(TYPE_INT, scratch, TYPE.length)) {\n        type = TYPE_INT;\n      } else if (equalsAt(TYPE_LONG, scratch, TYPE.length)) {\n        type = TYPE_LONG;\n      } else if (equalsAt(TYPE_FLOAT, scratch, TYPE.length)) {\n        type = TYPE_FLOAT;\n      } else if (equalsAt(TYPE_DOUBLE, scratch, TYPE.length)) {\n        type = TYPE_DOUBLE;\n      } else {\n        throw new RuntimeException(\"unknown field type\");\n      }\n      \n      switch (visitor.needsField(fieldInfo)) {\n        case YES:  \n          readField(type, fieldInfo, visitor);\n          break;\n        case NO:   \n          readLine();\n          assert StringHelper.startsWith(scratch, VALUE);\n          break;\n        case STOP: return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3394716f52b34ab259ad5247e7595d9f9db6e935","date":1398791921,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","sourceNew":"  @Override\n  public void visitDocument(int n, StoredFieldVisitor visitor) throws IOException {\n    in.seek(offsets[n]);\n    \n    while (true) {\n      readLine();\n      if (StringHelper.startsWith(scratch, FIELD) == false) {\n        break;\n      }\n      int fieldNumber = parseIntAt(FIELD.length);\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n      readLine();\n      assert StringHelper.startsWith(scratch, NAME);\n      readLine();\n      assert StringHelper.startsWith(scratch, TYPE);\n      \n      final BytesRef type;\n      if (equalsAt(TYPE_STRING, scratch, TYPE.length)) {\n        type = TYPE_STRING;\n      } else if (equalsAt(TYPE_BINARY, scratch, TYPE.length)) {\n        type = TYPE_BINARY;\n      } else if (equalsAt(TYPE_INT, scratch, TYPE.length)) {\n        type = TYPE_INT;\n      } else if (equalsAt(TYPE_LONG, scratch, TYPE.length)) {\n        type = TYPE_LONG;\n      } else if (equalsAt(TYPE_FLOAT, scratch, TYPE.length)) {\n        type = TYPE_FLOAT;\n      } else if (equalsAt(TYPE_DOUBLE, scratch, TYPE.length)) {\n        type = TYPE_DOUBLE;\n      } else {\n        throw new RuntimeException(\"unknown field type\");\n      }\n      \n      switch (visitor.needsField(fieldInfo)) {\n        case YES:  \n          readField(type, fieldInfo, visitor);\n          break;\n        case NO:   \n          readLine();\n          assert StringHelper.startsWith(scratch, VALUE);\n          break;\n        case STOP: return;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void visitDocument(int n, StoredFieldVisitor visitor) throws IOException {\n    in.seek(offsets[n]);\n    readLine();\n    assert StringHelper.startsWith(scratch, NUM);\n    int numFields = parseIntAt(NUM.length);\n    \n    for (int i = 0; i < numFields; i++) {\n      readLine();\n      assert StringHelper.startsWith(scratch, FIELD);\n      int fieldNumber = parseIntAt(FIELD.length);\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n      readLine();\n      assert StringHelper.startsWith(scratch, NAME);\n      readLine();\n      assert StringHelper.startsWith(scratch, TYPE);\n      \n      final BytesRef type;\n      if (equalsAt(TYPE_STRING, scratch, TYPE.length)) {\n        type = TYPE_STRING;\n      } else if (equalsAt(TYPE_BINARY, scratch, TYPE.length)) {\n        type = TYPE_BINARY;\n      } else if (equalsAt(TYPE_INT, scratch, TYPE.length)) {\n        type = TYPE_INT;\n      } else if (equalsAt(TYPE_LONG, scratch, TYPE.length)) {\n        type = TYPE_LONG;\n      } else if (equalsAt(TYPE_FLOAT, scratch, TYPE.length)) {\n        type = TYPE_FLOAT;\n      } else if (equalsAt(TYPE_DOUBLE, scratch, TYPE.length)) {\n        type = TYPE_DOUBLE;\n      } else {\n        throw new RuntimeException(\"unknown field type\");\n      }\n      \n      switch (visitor.needsField(fieldInfo)) {\n        case YES:  \n          readField(type, fieldInfo, visitor);\n          break;\n        case NO:   \n          readLine();\n          assert StringHelper.startsWith(scratch, VALUE);\n          break;\n        case STOP: return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","sourceNew":"  @Override\n  public void visitDocument(int n, StoredFieldVisitor visitor) throws IOException {\n    in.seek(offsets[n]);\n    \n    while (true) {\n      readLine();\n      if (StringHelper.startsWith(scratch, FIELD) == false) {\n        break;\n      }\n      int fieldNumber = parseIntAt(FIELD.length);\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n      readLine();\n      assert StringHelper.startsWith(scratch, NAME);\n      readLine();\n      assert StringHelper.startsWith(scratch, TYPE);\n      \n      final BytesRef type;\n      if (equalsAt(TYPE_STRING, scratch, TYPE.length)) {\n        type = TYPE_STRING;\n      } else if (equalsAt(TYPE_BINARY, scratch, TYPE.length)) {\n        type = TYPE_BINARY;\n      } else if (equalsAt(TYPE_INT, scratch, TYPE.length)) {\n        type = TYPE_INT;\n      } else if (equalsAt(TYPE_LONG, scratch, TYPE.length)) {\n        type = TYPE_LONG;\n      } else if (equalsAt(TYPE_FLOAT, scratch, TYPE.length)) {\n        type = TYPE_FLOAT;\n      } else if (equalsAt(TYPE_DOUBLE, scratch, TYPE.length)) {\n        type = TYPE_DOUBLE;\n      } else {\n        throw new RuntimeException(\"unknown field type\");\n      }\n      \n      switch (visitor.needsField(fieldInfo)) {\n        case YES:  \n          readField(type, fieldInfo, visitor);\n          break;\n        case NO:   \n          readLine();\n          assert StringHelper.startsWith(scratch, VALUE);\n          break;\n        case STOP: return;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void visitDocument(int n, StoredFieldVisitor visitor) throws IOException {\n    in.seek(offsets[n]);\n    readLine();\n    assert StringHelper.startsWith(scratch, NUM);\n    int numFields = parseIntAt(NUM.length);\n    \n    for (int i = 0; i < numFields; i++) {\n      readLine();\n      assert StringHelper.startsWith(scratch, FIELD);\n      int fieldNumber = parseIntAt(FIELD.length);\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n      readLine();\n      assert StringHelper.startsWith(scratch, NAME);\n      readLine();\n      assert StringHelper.startsWith(scratch, TYPE);\n      \n      final BytesRef type;\n      if (equalsAt(TYPE_STRING, scratch, TYPE.length)) {\n        type = TYPE_STRING;\n      } else if (equalsAt(TYPE_BINARY, scratch, TYPE.length)) {\n        type = TYPE_BINARY;\n      } else if (equalsAt(TYPE_INT, scratch, TYPE.length)) {\n        type = TYPE_INT;\n      } else if (equalsAt(TYPE_LONG, scratch, TYPE.length)) {\n        type = TYPE_LONG;\n      } else if (equalsAt(TYPE_FLOAT, scratch, TYPE.length)) {\n        type = TYPE_FLOAT;\n      } else if (equalsAt(TYPE_DOUBLE, scratch, TYPE.length)) {\n        type = TYPE_DOUBLE;\n      } else {\n        throw new RuntimeException(\"unknown field type\");\n      }\n      \n      switch (visitor.needsField(fieldInfo)) {\n        case YES:  \n          readField(type, fieldInfo, visitor);\n          break;\n        case NO:   \n          readLine();\n          assert StringHelper.startsWith(scratch, VALUE);\n          break;\n        case STOP: return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","sourceNew":"  @Override\n  public void visitDocument(int n, StoredFieldVisitor visitor) throws IOException {\n    in.seek(offsets[n]);\n    \n    while (true) {\n      readLine();\n      if (StringHelper.startsWith(scratch.get(), FIELD) == false) {\n        break;\n      }\n      int fieldNumber = parseIntAt(FIELD.length);\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n      readLine();\n      assert StringHelper.startsWith(scratch.get(), NAME);\n      readLine();\n      assert StringHelper.startsWith(scratch.get(), TYPE);\n      \n      final BytesRef type;\n      if (equalsAt(TYPE_STRING, scratch.get(), TYPE.length)) {\n        type = TYPE_STRING;\n      } else if (equalsAt(TYPE_BINARY, scratch.get(), TYPE.length)) {\n        type = TYPE_BINARY;\n      } else if (equalsAt(TYPE_INT, scratch.get(), TYPE.length)) {\n        type = TYPE_INT;\n      } else if (equalsAt(TYPE_LONG, scratch.get(), TYPE.length)) {\n        type = TYPE_LONG;\n      } else if (equalsAt(TYPE_FLOAT, scratch.get(), TYPE.length)) {\n        type = TYPE_FLOAT;\n      } else if (equalsAt(TYPE_DOUBLE, scratch.get(), TYPE.length)) {\n        type = TYPE_DOUBLE;\n      } else {\n        throw new RuntimeException(\"unknown field type\");\n      }\n      \n      switch (visitor.needsField(fieldInfo)) {\n        case YES:  \n          readField(type, fieldInfo, visitor);\n          break;\n        case NO:   \n          readLine();\n          assert StringHelper.startsWith(scratch.get(), VALUE);\n          break;\n        case STOP: return;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void visitDocument(int n, StoredFieldVisitor visitor) throws IOException {\n    in.seek(offsets[n]);\n    \n    while (true) {\n      readLine();\n      if (StringHelper.startsWith(scratch, FIELD) == false) {\n        break;\n      }\n      int fieldNumber = parseIntAt(FIELD.length);\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n      readLine();\n      assert StringHelper.startsWith(scratch, NAME);\n      readLine();\n      assert StringHelper.startsWith(scratch, TYPE);\n      \n      final BytesRef type;\n      if (equalsAt(TYPE_STRING, scratch, TYPE.length)) {\n        type = TYPE_STRING;\n      } else if (equalsAt(TYPE_BINARY, scratch, TYPE.length)) {\n        type = TYPE_BINARY;\n      } else if (equalsAt(TYPE_INT, scratch, TYPE.length)) {\n        type = TYPE_INT;\n      } else if (equalsAt(TYPE_LONG, scratch, TYPE.length)) {\n        type = TYPE_LONG;\n      } else if (equalsAt(TYPE_FLOAT, scratch, TYPE.length)) {\n        type = TYPE_FLOAT;\n      } else if (equalsAt(TYPE_DOUBLE, scratch, TYPE.length)) {\n        type = TYPE_DOUBLE;\n      } else {\n        throw new RuntimeException(\"unknown field type\");\n      }\n      \n      switch (visitor.needsField(fieldInfo)) {\n        case YES:  \n          readField(type, fieldInfo, visitor);\n          break;\n        case NO:   \n          readLine();\n          assert StringHelper.startsWith(scratch, VALUE);\n          break;\n        case STOP: return;\n      }\n    }\n  }\n\n","bugFix":["06584e6e98d592b34e1329b384182f368d2025e8","61f30939a6ca0891c7b0c0f34aa43800bd4c9a15","52c7e49be259508735752fba88085255014a6ecf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e784d2742d5536b6fceba16c6d032d4b2e38e320":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"3394716f52b34ab259ad5247e7595d9f9db6e935":["e784d2742d5536b6fceba16c6d032d4b2e38e320","52c7e49be259508735752fba88085255014a6ecf"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["e784d2742d5536b6fceba16c6d032d4b2e38e320","3394716f52b34ab259ad5247e7595d9f9db6e935"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"52c7e49be259508735752fba88085255014a6ecf":["e784d2742d5536b6fceba16c6d032d4b2e38e320"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"]},"commit2Childs":{"e784d2742d5536b6fceba16c6d032d4b2e38e320":["3394716f52b34ab259ad5247e7595d9f9db6e935","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","52c7e49be259508735752fba88085255014a6ecf"],"3394716f52b34ab259ad5247e7595d9f9db6e935":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["e784d2742d5536b6fceba16c6d032d4b2e38e320"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"52c7e49be259508735752fba88085255014a6ecf":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}