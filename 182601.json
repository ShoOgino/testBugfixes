{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/complexPhrase/TestComplexPhraseQuery#testToStringContainsSlop().mjava","commits":[{"id":"86b27e276d8be127b1975bb4af6f6d8cdeb02f1b","date":1444135747,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/complexPhrase/TestComplexPhraseQuery#testToStringContainsSlop().mjava","pathOld":"/dev/null","sourceNew":"  public void testToStringContainsSlop() throws Exception {\n    ComplexPhraseQueryParser qp = new ComplexPhraseQueryParser(defaultFieldName, analyzer);\n    int slop = random().nextInt(31) + 1;\n\n    String qString = \"name:\\\"j* smyth~\\\"~\" + slop;\n    Query query = qp.parse(qString);\n    assertTrue(\"Slop is not shown in toString()\", query.toString().endsWith(\"~\" + slop));\n\n    String string = \"\\\"j* smyth~\\\"\";\n    Query q = qp.parse(string);\n    assertEquals(\"Don't show implicit slop of zero\", q.toString(), string);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7fe4fee4a2c5f1a5de6ffb7c9973cba69cb9cc55"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7fe4fee4a2c5f1a5de6ffb7c9973cba69cb9cc55","date":1601387881,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/complexPhrase/TestComplexPhraseQuery#testToStringContainsSlop().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/complexPhrase/TestComplexPhraseQuery#testToStringContainsSlop().mjava","sourceNew":"  public void testToStringContainsSlop() throws Exception {\n    ComplexPhraseQueryParser qp = new ComplexPhraseQueryParser(\"\", analyzer);\n    int slop = random().nextInt(31) + 1;\n\n    String qString = \"name:\\\"j* smyth~\\\"~\" + slop;\n    Query query = qp.parse(qString);\n    String actualQStr = query.toString();\n    assertTrue(\"Slop is not shown in toString()\", actualQStr.endsWith(\"~\" + slop));\n    assertEquals(qString, actualQStr);\n\n    String string = \"\\\"j* smyth~\\\"\";\n    Query q = qp.parse(string);\n    assertEquals(\"Don't show implicit slop of zero\", q.toString(), string);\n  }\n\n","sourceOld":"  public void testToStringContainsSlop() throws Exception {\n    ComplexPhraseQueryParser qp = new ComplexPhraseQueryParser(defaultFieldName, analyzer);\n    int slop = random().nextInt(31) + 1;\n\n    String qString = \"name:\\\"j* smyth~\\\"~\" + slop;\n    Query query = qp.parse(qString);\n    assertTrue(\"Slop is not shown in toString()\", query.toString().endsWith(\"~\" + slop));\n\n    String string = \"\\\"j* smyth~\\\"\";\n    Query q = qp.parse(string);\n    assertEquals(\"Don't show implicit slop of zero\", q.toString(), string);\n  }\n\n","bugFix":["86b27e276d8be127b1975bb4af6f6d8cdeb02f1b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"86b27e276d8be127b1975bb4af6f6d8cdeb02f1b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7fe4fee4a2c5f1a5de6ffb7c9973cba69cb9cc55":["86b27e276d8be127b1975bb4af6f6d8cdeb02f1b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7fe4fee4a2c5f1a5de6ffb7c9973cba69cb9cc55"]},"commit2Childs":{"86b27e276d8be127b1975bb4af6f6d8cdeb02f1b":["7fe4fee4a2c5f1a5de6ffb7c9973cba69cb9cc55"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86b27e276d8be127b1975bb4af6f6d8cdeb02f1b"],"7fe4fee4a2c5f1a5de6ffb7c9973cba69cb9cc55":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}