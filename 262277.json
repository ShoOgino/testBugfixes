{"path":"lucene/src/java/org/apache/lucene/document/NumericField#tokenStreamValue().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/NumericField#tokenStreamValue().mjava","pathOld":"src/java/org/apache/lucene/document/NumericField#tokenStreamValue().mjava","sourceNew":"  /** Returns a {@link NumericTokenStream} for indexing the numeric value. */\n  public TokenStream tokenStreamValue()   {\n    return isIndexed() ? numericTS : null;\n  }\n\n","sourceOld":"  /** Returns a {@link NumericTokenStream} for indexing the numeric value. */\n  public TokenStream tokenStreamValue()   {\n    return isIndexed() ? numericTS : null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab0e9f7ce724e6aea1fea746dded19e76d231cf8","date":1304774078,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/NumericField#tokenStreamValue().mjava","pathOld":"lucene/src/java/org/apache/lucene/document/NumericField#tokenStreamValue().mjava","sourceNew":"  /** Returns a {@link NumericTokenStream} for indexing the numeric value. */\n  public TokenStream tokenStreamValue()   {\n    if (!isIndexed())\n      return null;\n    if (numericTS == null) {\n      // lazy init the TokenStream as it is heavy to instantiate (attributes,...),\n      // if not needed (stored field loading)\n      numericTS = new NumericTokenStream(precisionStep);\n      // initialize value in TokenStream\n      if (fieldsData != null) {\n        assert type != null;\n        final Number val = (Number) fieldsData;\n        switch (type) {\n          case INT:\n            numericTS.setIntValue(val.intValue()); break;\n          case LONG:\n            numericTS.setLongValue(val.longValue()); break;\n          case FLOAT:\n            numericTS.setFloatValue(val.floatValue()); break;\n          case DOUBLE:\n            numericTS.setDoubleValue(val.doubleValue()); break;\n          default:\n            assert false : \"Should never get here\";\n        }\n      }\n    }\n    return numericTS;\n  }\n\n","sourceOld":"  /** Returns a {@link NumericTokenStream} for indexing the numeric value. */\n  public TokenStream tokenStreamValue()   {\n    return isIndexed() ? numericTS : null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/document/NumericField#tokenStreamValue().mjava","pathOld":"lucene/src/java/org/apache/lucene/document/NumericField#tokenStreamValue().mjava","sourceNew":"  /** Returns a {@link NumericTokenStream} for indexing the numeric value. */\n  public TokenStream tokenStreamValue()   {\n    if (!isIndexed())\n      return null;\n    if (numericTS == null) {\n      // lazy init the TokenStream as it is heavy to instantiate (attributes,...),\n      // if not needed (stored field loading)\n      numericTS = new NumericTokenStream(precisionStep);\n      // initialize value in TokenStream\n      if (fieldsData != null) {\n        assert type != null;\n        final Number val = (Number) fieldsData;\n        switch (type) {\n          case INT:\n            numericTS.setIntValue(val.intValue()); break;\n          case LONG:\n            numericTS.setLongValue(val.longValue()); break;\n          case FLOAT:\n            numericTS.setFloatValue(val.floatValue()); break;\n          case DOUBLE:\n            numericTS.setDoubleValue(val.doubleValue()); break;\n          default:\n            assert false : \"Should never get here\";\n        }\n      }\n    }\n    return numericTS;\n  }\n\n","sourceOld":"  /** Returns a {@link NumericTokenStream} for indexing the numeric value. */\n  public TokenStream tokenStreamValue()   {\n    return isIndexed() ? numericTS : null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/document/NumericField#tokenStreamValue().mjava","pathOld":"lucene/src/java/org/apache/lucene/document/NumericField#tokenStreamValue().mjava","sourceNew":"  /** Returns a {@link NumericTokenStream} for indexing the numeric value. */\n  public TokenStream tokenStreamValue()   {\n    if (!isIndexed())\n      return null;\n    if (numericTS == null) {\n      // lazy init the TokenStream as it is heavy to instantiate (attributes,...),\n      // if not needed (stored field loading)\n      numericTS = new NumericTokenStream(precisionStep);\n      // initialize value in TokenStream\n      if (fieldsData != null) {\n        assert type != null;\n        final Number val = (Number) fieldsData;\n        switch (type) {\n          case INT:\n            numericTS.setIntValue(val.intValue()); break;\n          case LONG:\n            numericTS.setLongValue(val.longValue()); break;\n          case FLOAT:\n            numericTS.setFloatValue(val.floatValue()); break;\n          case DOUBLE:\n            numericTS.setDoubleValue(val.doubleValue()); break;\n          default:\n            assert false : \"Should never get here\";\n        }\n      }\n    }\n    return numericTS;\n  }\n\n","sourceOld":"  /** Returns a {@link NumericTokenStream} for indexing the numeric value. */\n  public TokenStream tokenStreamValue()   {\n    return isIndexed() ? numericTS : null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/NumericField#tokenStreamValue().mjava","pathOld":"lucene/src/java/org/apache/lucene/document/NumericField#tokenStreamValue().mjava","sourceNew":"  /** Returns a {@link NumericTokenStream} for indexing the numeric value. */\n  public TokenStream tokenStreamValue() {\n    if (!indexed()) return null;\n    if (numericTS == null) {\n      // lazy init the TokenStream as it is heavy to instantiate\n      // (attributes,...),\n      // if not needed (stored field loading)\n      numericTS = new NumericTokenStream(precisionStep);\n      // initialize value in TokenStream\n      if (fieldsData != null) {\n        assert dataType != null;\n        final Number val = (Number) fieldsData;\n        switch (dataType) {\n          case INT:\n            numericTS.setIntValue(val.intValue());\n            break;\n          case LONG:\n            numericTS.setLongValue(val.longValue());\n            break;\n          case FLOAT:\n            numericTS.setFloatValue(val.floatValue());\n            break;\n          case DOUBLE:\n            numericTS.setDoubleValue(val.doubleValue());\n            break;\n          default:\n            assert false : \"Should never get here\";\n        }\n      }\n    }\n    return numericTS;\n  }\n\n","sourceOld":"  /** Returns a {@link NumericTokenStream} for indexing the numeric value. */\n  public TokenStream tokenStreamValue()   {\n    if (!isIndexed())\n      return null;\n    if (numericTS == null) {\n      // lazy init the TokenStream as it is heavy to instantiate (attributes,...),\n      // if not needed (stored field loading)\n      numericTS = new NumericTokenStream(precisionStep);\n      // initialize value in TokenStream\n      if (fieldsData != null) {\n        assert type != null;\n        final Number val = (Number) fieldsData;\n        switch (type) {\n          case INT:\n            numericTS.setIntValue(val.intValue()); break;\n          case LONG:\n            numericTS.setLongValue(val.longValue()); break;\n          case FLOAT:\n            numericTS.setFloatValue(val.floatValue()); break;\n          case DOUBLE:\n            numericTS.setDoubleValue(val.doubleValue()); break;\n          default:\n            assert false : \"Should never get here\";\n        }\n      }\n    }\n    return numericTS;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6eb141f80638abdb6ffaa5149877f36ea39b6ad5","date":1315714072,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/NumericField#tokenStreamValue().mjava","pathOld":"lucene/src/java/org/apache/lucene/document/NumericField#tokenStreamValue().mjava","sourceNew":"  /** Returns a {@link NumericTokenStream} for indexing the numeric value. */\n  public TokenStream tokenStreamValue() {\n    if (!type.indexed()) return null;\n    if (numericTS == null) {\n      // lazy init the TokenStream as it is heavy to instantiate\n      // (attributes,...),\n      // if not needed (stored field loading)\n      numericTS = new NumericTokenStream(precisionStep);\n      // initialize value in TokenStream\n      if (fieldsData != null) {\n        assert dataType != null;\n        final Number val = (Number) fieldsData;\n        switch (dataType) {\n          case INT:\n            numericTS.setIntValue(val.intValue());\n            break;\n          case LONG:\n            numericTS.setLongValue(val.longValue());\n            break;\n          case FLOAT:\n            numericTS.setFloatValue(val.floatValue());\n            break;\n          case DOUBLE:\n            numericTS.setDoubleValue(val.doubleValue());\n            break;\n          default:\n            assert false : \"Should never get here\";\n        }\n      }\n    }\n    return numericTS;\n  }\n\n","sourceOld":"  /** Returns a {@link NumericTokenStream} for indexing the numeric value. */\n  public TokenStream tokenStreamValue() {\n    if (!indexed()) return null;\n    if (numericTS == null) {\n      // lazy init the TokenStream as it is heavy to instantiate\n      // (attributes,...),\n      // if not needed (stored field loading)\n      numericTS = new NumericTokenStream(precisionStep);\n      // initialize value in TokenStream\n      if (fieldsData != null) {\n        assert dataType != null;\n        final Number val = (Number) fieldsData;\n        switch (dataType) {\n          case INT:\n            numericTS.setIntValue(val.intValue());\n            break;\n          case LONG:\n            numericTS.setLongValue(val.longValue());\n            break;\n          case FLOAT:\n            numericTS.setFloatValue(val.floatValue());\n            break;\n          case DOUBLE:\n            numericTS.setDoubleValue(val.doubleValue());\n            break;\n          default:\n            assert false : \"Should never get here\";\n        }\n      }\n    }\n    return numericTS;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b3bdb938a073ccc28d7ed813f6e8c4cb58e04c5","date":1316747797,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/NumericField#tokenStream(Analyzer).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/NumericField#tokenStreamValue().mjava","sourceNew":"  /** Returns a {@link NumericTokenStream} for indexing the numeric value. */\n  public TokenStream tokenStream(Analyzer analyzer) {\n    if (!type.indexed()) return null;\n    if (numericTS == null) {\n      // lazy init the TokenStream as it is heavy to instantiate\n      // (attributes,...),\n      // if not needed (stored field loading)\n      numericTS = new NumericTokenStream(precisionStep);\n      // initialize value in TokenStream\n      if (fieldsData != null) {\n        assert dataType != null;\n        final Number val = (Number) fieldsData;\n        switch (dataType) {\n          case INT:\n            numericTS.setIntValue(val.intValue());\n            break;\n          case LONG:\n            numericTS.setLongValue(val.longValue());\n            break;\n          case FLOAT:\n            numericTS.setFloatValue(val.floatValue());\n            break;\n          case DOUBLE:\n            numericTS.setDoubleValue(val.doubleValue());\n            break;\n          default:\n            assert false : \"Should never get here\";\n        }\n      }\n    }\n    return numericTS;\n  }\n\n","sourceOld":"  /** Returns a {@link NumericTokenStream} for indexing the numeric value. */\n  public TokenStream tokenStreamValue() {\n    if (!type.indexed()) return null;\n    if (numericTS == null) {\n      // lazy init the TokenStream as it is heavy to instantiate\n      // (attributes,...),\n      // if not needed (stored field loading)\n      numericTS = new NumericTokenStream(precisionStep);\n      // initialize value in TokenStream\n      if (fieldsData != null) {\n        assert dataType != null;\n        final Number val = (Number) fieldsData;\n        switch (dataType) {\n          case INT:\n            numericTS.setIntValue(val.intValue());\n            break;\n          case LONG:\n            numericTS.setLongValue(val.longValue());\n            break;\n          case FLOAT:\n            numericTS.setFloatValue(val.floatValue());\n            break;\n          case DOUBLE:\n            numericTS.setDoubleValue(val.doubleValue());\n            break;\n          default:\n            assert false : \"Should never get here\";\n        }\n      }\n    }\n    return numericTS;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab0e9f7ce724e6aea1fea746dded19e76d231cf8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a3776dccca01c11e7046323cfad46a3b4a471233":["9454a6510e2db155fb01faa5c049b06ece95fab9","ab0e9f7ce724e6aea1fea746dded19e76d231cf8"],"6eb141f80638abdb6ffaa5149877f36ea39b6ad5":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["9454a6510e2db155fb01faa5c049b06ece95fab9","ab0e9f7ce724e6aea1fea746dded19e76d231cf8"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["ab0e9f7ce724e6aea1fea746dded19e76d231cf8"],"8b3bdb938a073ccc28d7ed813f6e8c4cb58e04c5":["6eb141f80638abdb6ffaa5149877f36ea39b6ad5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b3bdb938a073ccc28d7ed813f6e8c4cb58e04c5"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ab0e9f7ce724e6aea1fea746dded19e76d231cf8":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"6eb141f80638abdb6ffaa5149877f36ea39b6ad5":["8b3bdb938a073ccc28d7ed813f6e8c4cb58e04c5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["6eb141f80638abdb6ffaa5149877f36ea39b6ad5"],"8b3bdb938a073ccc28d7ed813f6e8c4cb58e04c5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ab0e9f7ce724e6aea1fea746dded19e76d231cf8","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}