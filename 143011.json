{"path":"lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,int).mjava","commits":[{"id":"322360ac5185a8446d3e0b530b2068bef67cd3d5","date":1343669494,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,boolean).mjava","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n    MultiDocsAndPositionsEnum docsAndPositionsEnum;\n    // Can only reuse if incoming enum is also a MultiDocsAndPositionsEnum\n    if (reuse != null && reuse instanceof MultiDocsAndPositionsEnum) {\n      docsAndPositionsEnum = (MultiDocsAndPositionsEnum) reuse;\n      // ... and was previously created w/ this MultiTermsEnum:\n      if (!docsAndPositionsEnum.canReuse(this)) {\n        docsAndPositionsEnum = new MultiDocsAndPositionsEnum(this, subs.length);\n      }\n    } else {\n      docsAndPositionsEnum = new MultiDocsAndPositionsEnum(this, subs.length);\n    }\n    \n    final MultiBits multiLiveDocs;\n    if (liveDocs instanceof MultiBits) {\n      multiLiveDocs = (MultiBits) liveDocs;\n    } else {\n      multiLiveDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiLiveDocs != null) {\n        // Optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the liveDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiLiveDocs.getMatchingSub(top[i].subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access (very\n          // inefficient)\n          b = new BitsSlice(liveDocs, top[i].subSlice);\n        }\n      } else if (liveDocs != null) {\n        b = new BitsSlice(liveDocs, top[i].subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      assert entry.index < docsAndPositionsEnum.subDocsAndPositionsEnum.length: entry.index + \" vs \" + docsAndPositionsEnum.subDocsAndPositionsEnum.length + \"; \" + subs.length;\n      final DocsAndPositionsEnum subPostings = entry.terms.docsAndPositions(b, docsAndPositionsEnum.subDocsAndPositionsEnum[entry.index], flags);\n\n      if (subPostings != null) {\n        docsAndPositionsEnum.subDocsAndPositionsEnum[entry.index] = subPostings;\n        subDocsAndPositions[upto].docsAndPositionsEnum = subPostings;\n        subDocsAndPositions[upto].slice = entry.subSlice;\n        upto++;\n      } else {\n        if (entry.terms.docs(b, null, false) != null) {\n          // At least one of our subs does not store\n          // offsets or positions -- we can't correctly\n          // produce a MultiDocsAndPositions enum\n          return null;\n        }\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsAndPositionsEnum.reset(subDocsAndPositions, upto);\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, boolean needsOffsets) throws IOException {\n    MultiDocsAndPositionsEnum docsAndPositionsEnum;\n    // Can only reuse if incoming enum is also a MultiDocsAndPositionsEnum\n    if (reuse != null && reuse instanceof MultiDocsAndPositionsEnum) {\n      docsAndPositionsEnum = (MultiDocsAndPositionsEnum) reuse;\n      // ... and was previously created w/ this MultiTermsEnum:\n      if (!docsAndPositionsEnum.canReuse(this)) {\n        docsAndPositionsEnum = new MultiDocsAndPositionsEnum(this, subs.length);\n      }\n    } else {\n      docsAndPositionsEnum = new MultiDocsAndPositionsEnum(this, subs.length);\n    }\n    \n    final MultiBits multiLiveDocs;\n    if (liveDocs instanceof MultiBits) {\n      multiLiveDocs = (MultiBits) liveDocs;\n    } else {\n      multiLiveDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiLiveDocs != null) {\n        // Optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the liveDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiLiveDocs.getMatchingSub(top[i].subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access (very\n          // inefficient)\n          b = new BitsSlice(liveDocs, top[i].subSlice);\n        }\n      } else if (liveDocs != null) {\n        b = new BitsSlice(liveDocs, top[i].subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      assert entry.index < docsAndPositionsEnum.subDocsAndPositionsEnum.length: entry.index + \" vs \" + docsAndPositionsEnum.subDocsAndPositionsEnum.length + \"; \" + subs.length;\n      final DocsAndPositionsEnum subPostings = entry.terms.docsAndPositions(b, docsAndPositionsEnum.subDocsAndPositionsEnum[entry.index], needsOffsets);\n\n      if (subPostings != null) {\n        docsAndPositionsEnum.subDocsAndPositionsEnum[entry.index] = subPostings;\n        subDocsAndPositions[upto].docsAndPositionsEnum = subPostings;\n        subDocsAndPositions[upto].slice = entry.subSlice;\n        upto++;\n      } else {\n        if (entry.terms.docs(b, null, false) != null) {\n          // At least one of our subs does not store\n          // offsets or positions -- we can't correctly\n          // produce a MultiDocsAndPositions enum\n          return null;\n        }\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsAndPositionsEnum.reset(subDocsAndPositions, upto);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02331260bb246364779cb6f04919ca47900d01bb","date":1343749884,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,int).mjava","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n    MultiDocsAndPositionsEnum docsAndPositionsEnum;\n    // Can only reuse if incoming enum is also a MultiDocsAndPositionsEnum\n    if (reuse != null && reuse instanceof MultiDocsAndPositionsEnum) {\n      docsAndPositionsEnum = (MultiDocsAndPositionsEnum) reuse;\n      // ... and was previously created w/ this MultiTermsEnum:\n      if (!docsAndPositionsEnum.canReuse(this)) {\n        docsAndPositionsEnum = new MultiDocsAndPositionsEnum(this, subs.length);\n      }\n    } else {\n      docsAndPositionsEnum = new MultiDocsAndPositionsEnum(this, subs.length);\n    }\n    \n    final MultiBits multiLiveDocs;\n    if (liveDocs instanceof MultiBits) {\n      multiLiveDocs = (MultiBits) liveDocs;\n    } else {\n      multiLiveDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiLiveDocs != null) {\n        // Optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the liveDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiLiveDocs.getMatchingSub(top[i].subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access (very\n          // inefficient)\n          b = new BitsSlice(liveDocs, top[i].subSlice);\n        }\n      } else if (liveDocs != null) {\n        b = new BitsSlice(liveDocs, top[i].subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      assert entry.index < docsAndPositionsEnum.subDocsAndPositionsEnum.length: entry.index + \" vs \" + docsAndPositionsEnum.subDocsAndPositionsEnum.length + \"; \" + subs.length;\n      final DocsAndPositionsEnum subPostings = entry.terms.docsAndPositions(b, docsAndPositionsEnum.subDocsAndPositionsEnum[entry.index], flags);\n\n      if (subPostings != null) {\n        docsAndPositionsEnum.subDocsAndPositionsEnum[entry.index] = subPostings;\n        subDocsAndPositions[upto].docsAndPositionsEnum = subPostings;\n        subDocsAndPositions[upto].slice = entry.subSlice;\n        upto++;\n      } else {\n        if (entry.terms.docs(b, null, 0) != null) {\n          // At least one of our subs does not store\n          // offsets or positions -- we can't correctly\n          // produce a MultiDocsAndPositions enum\n          return null;\n        }\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsAndPositionsEnum.reset(subDocsAndPositions, upto);\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n    MultiDocsAndPositionsEnum docsAndPositionsEnum;\n    // Can only reuse if incoming enum is also a MultiDocsAndPositionsEnum\n    if (reuse != null && reuse instanceof MultiDocsAndPositionsEnum) {\n      docsAndPositionsEnum = (MultiDocsAndPositionsEnum) reuse;\n      // ... and was previously created w/ this MultiTermsEnum:\n      if (!docsAndPositionsEnum.canReuse(this)) {\n        docsAndPositionsEnum = new MultiDocsAndPositionsEnum(this, subs.length);\n      }\n    } else {\n      docsAndPositionsEnum = new MultiDocsAndPositionsEnum(this, subs.length);\n    }\n    \n    final MultiBits multiLiveDocs;\n    if (liveDocs instanceof MultiBits) {\n      multiLiveDocs = (MultiBits) liveDocs;\n    } else {\n      multiLiveDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiLiveDocs != null) {\n        // Optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the liveDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiLiveDocs.getMatchingSub(top[i].subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access (very\n          // inefficient)\n          b = new BitsSlice(liveDocs, top[i].subSlice);\n        }\n      } else if (liveDocs != null) {\n        b = new BitsSlice(liveDocs, top[i].subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      assert entry.index < docsAndPositionsEnum.subDocsAndPositionsEnum.length: entry.index + \" vs \" + docsAndPositionsEnum.subDocsAndPositionsEnum.length + \"; \" + subs.length;\n      final DocsAndPositionsEnum subPostings = entry.terms.docsAndPositions(b, docsAndPositionsEnum.subDocsAndPositionsEnum[entry.index], flags);\n\n      if (subPostings != null) {\n        docsAndPositionsEnum.subDocsAndPositionsEnum[entry.index] = subPostings;\n        subDocsAndPositions[upto].docsAndPositionsEnum = subPostings;\n        subDocsAndPositions[upto].slice = entry.subSlice;\n        upto++;\n      } else {\n        if (entry.terms.docs(b, null, false) != null) {\n          // At least one of our subs does not store\n          // offsets or positions -- we can't correctly\n          // produce a MultiDocsAndPositions enum\n          return null;\n        }\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsAndPositionsEnum.reset(subDocsAndPositions, upto);\n    }\n  }\n\n","bugFix":["872cff1d3a554e0cd64014cd97f88d3002b0f491"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n    MultiDocsAndPositionsEnum docsAndPositionsEnum;\n    // Can only reuse if incoming enum is also a MultiDocsAndPositionsEnum\n    if (reuse != null && reuse instanceof MultiDocsAndPositionsEnum) {\n      docsAndPositionsEnum = (MultiDocsAndPositionsEnum) reuse;\n      // ... and was previously created w/ this MultiTermsEnum:\n      if (!docsAndPositionsEnum.canReuse(this)) {\n        docsAndPositionsEnum = new MultiDocsAndPositionsEnum(this, subs.length);\n      }\n    } else {\n      docsAndPositionsEnum = new MultiDocsAndPositionsEnum(this, subs.length);\n    }\n    \n    final MultiBits multiLiveDocs;\n    if (liveDocs instanceof MultiBits) {\n      multiLiveDocs = (MultiBits) liveDocs;\n    } else {\n      multiLiveDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiLiveDocs != null) {\n        // Optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the liveDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiLiveDocs.getMatchingSub(top[i].subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access (very\n          // inefficient)\n          b = new BitsSlice(liveDocs, top[i].subSlice);\n        }\n      } else if (liveDocs != null) {\n        b = new BitsSlice(liveDocs, top[i].subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      assert entry.index < docsAndPositionsEnum.subDocsAndPositionsEnum.length: entry.index + \" vs \" + docsAndPositionsEnum.subDocsAndPositionsEnum.length + \"; \" + subs.length;\n      final DocsAndPositionsEnum subPostings = entry.terms.docsAndPositions(b, docsAndPositionsEnum.subDocsAndPositionsEnum[entry.index], flags);\n\n      if (subPostings != null) {\n        docsAndPositionsEnum.subDocsAndPositionsEnum[entry.index] = subPostings;\n        subDocsAndPositions[upto].docsAndPositionsEnum = subPostings;\n        subDocsAndPositions[upto].slice = entry.subSlice;\n        upto++;\n      } else {\n        if (entry.terms.docs(b, null, 0) != null) {\n          // At least one of our subs does not store\n          // offsets or positions -- we can't correctly\n          // produce a MultiDocsAndPositions enum\n          return null;\n        }\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsAndPositionsEnum.reset(subDocsAndPositions, upto);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n    MultiDocsAndPositionsEnum docsAndPositionsEnum;\n    // Can only reuse if incoming enum is also a MultiDocsAndPositionsEnum\n    if (reuse != null && reuse instanceof MultiDocsAndPositionsEnum) {\n      docsAndPositionsEnum = (MultiDocsAndPositionsEnum) reuse;\n      // ... and was previously created w/ this MultiTermsEnum:\n      if (!docsAndPositionsEnum.canReuse(this)) {\n        docsAndPositionsEnum = new MultiDocsAndPositionsEnum(this, subs.length);\n      }\n    } else {\n      docsAndPositionsEnum = new MultiDocsAndPositionsEnum(this, subs.length);\n    }\n    \n    final MultiBits multiLiveDocs;\n    if (liveDocs instanceof MultiBits) {\n      multiLiveDocs = (MultiBits) liveDocs;\n    } else {\n      multiLiveDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiLiveDocs != null) {\n        // Optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the liveDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiLiveDocs.getMatchingSub(top[i].subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access (very\n          // inefficient)\n          b = new BitsSlice(liveDocs, top[i].subSlice);\n        }\n      } else if (liveDocs != null) {\n        b = new BitsSlice(liveDocs, top[i].subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      assert entry.index < docsAndPositionsEnum.subDocsAndPositionsEnum.length: entry.index + \" vs \" + docsAndPositionsEnum.subDocsAndPositionsEnum.length + \"; \" + subs.length;\n      final DocsAndPositionsEnum subPostings = entry.terms.docsAndPositions(b, docsAndPositionsEnum.subDocsAndPositionsEnum[entry.index], flags);\n\n      if (subPostings != null) {\n        docsAndPositionsEnum.subDocsAndPositionsEnum[entry.index] = subPostings;\n        subDocsAndPositions[upto].docsAndPositionsEnum = subPostings;\n        subDocsAndPositions[upto].slice = entry.subSlice;\n        upto++;\n      } else {\n        if (entry.terms.docs(b, null, 0) != null) {\n          // At least one of our subs does not store\n          // offsets or positions -- we can't correctly\n          // produce a MultiDocsAndPositions enum\n          return null;\n        }\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsAndPositionsEnum.reset(subDocsAndPositions, upto);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15250ca94ba8ab3bcdd476daf6bf3f3febb92640","date":1355200097,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,int).mjava","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n    MultiDocsAndPositionsEnum docsAndPositionsEnum;\n    // Can only reuse if incoming enum is also a MultiDocsAndPositionsEnum\n    if (reuse != null && reuse instanceof MultiDocsAndPositionsEnum) {\n      docsAndPositionsEnum = (MultiDocsAndPositionsEnum) reuse;\n      // ... and was previously created w/ this MultiTermsEnum:\n      if (!docsAndPositionsEnum.canReuse(this)) {\n        docsAndPositionsEnum = new MultiDocsAndPositionsEnum(this, subs.length);\n      }\n    } else {\n      docsAndPositionsEnum = new MultiDocsAndPositionsEnum(this, subs.length);\n    }\n    \n    final MultiBits multiLiveDocs;\n    if (liveDocs instanceof MultiBits) {\n      multiLiveDocs = (MultiBits) liveDocs;\n    } else {\n      multiLiveDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiLiveDocs != null) {\n        // Optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the liveDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiLiveDocs.getMatchingSub(top[i].subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access (very\n          // inefficient)\n          b = new BitsSlice(liveDocs, top[i].subSlice);\n        }\n      } else if (liveDocs != null) {\n        b = new BitsSlice(liveDocs, top[i].subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      assert entry.index < docsAndPositionsEnum.subDocsAndPositionsEnum.length: entry.index + \" vs \" + docsAndPositionsEnum.subDocsAndPositionsEnum.length + \"; \" + subs.length;\n      final DocsAndPositionsEnum subPostings = entry.terms.docsAndPositions(b, docsAndPositionsEnum.subDocsAndPositionsEnum[entry.index], flags);\n\n      if (subPostings != null) {\n        docsAndPositionsEnum.subDocsAndPositionsEnum[entry.index] = subPostings;\n        subDocsAndPositions[upto].docsAndPositionsEnum = subPostings;\n        subDocsAndPositions[upto].slice = entry.subSlice;\n        upto++;\n      } else {\n        if (entry.terms.docs(b, null, DocsEnum.FLAG_NONE) != null) {\n          // At least one of our subs does not store\n          // offsets or positions -- we can't correctly\n          // produce a MultiDocsAndPositions enum\n          return null;\n        }\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsAndPositionsEnum.reset(subDocsAndPositions, upto);\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n    MultiDocsAndPositionsEnum docsAndPositionsEnum;\n    // Can only reuse if incoming enum is also a MultiDocsAndPositionsEnum\n    if (reuse != null && reuse instanceof MultiDocsAndPositionsEnum) {\n      docsAndPositionsEnum = (MultiDocsAndPositionsEnum) reuse;\n      // ... and was previously created w/ this MultiTermsEnum:\n      if (!docsAndPositionsEnum.canReuse(this)) {\n        docsAndPositionsEnum = new MultiDocsAndPositionsEnum(this, subs.length);\n      }\n    } else {\n      docsAndPositionsEnum = new MultiDocsAndPositionsEnum(this, subs.length);\n    }\n    \n    final MultiBits multiLiveDocs;\n    if (liveDocs instanceof MultiBits) {\n      multiLiveDocs = (MultiBits) liveDocs;\n    } else {\n      multiLiveDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiLiveDocs != null) {\n        // Optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the liveDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiLiveDocs.getMatchingSub(top[i].subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access (very\n          // inefficient)\n          b = new BitsSlice(liveDocs, top[i].subSlice);\n        }\n      } else if (liveDocs != null) {\n        b = new BitsSlice(liveDocs, top[i].subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      assert entry.index < docsAndPositionsEnum.subDocsAndPositionsEnum.length: entry.index + \" vs \" + docsAndPositionsEnum.subDocsAndPositionsEnum.length + \"; \" + subs.length;\n      final DocsAndPositionsEnum subPostings = entry.terms.docsAndPositions(b, docsAndPositionsEnum.subDocsAndPositionsEnum[entry.index], flags);\n\n      if (subPostings != null) {\n        docsAndPositionsEnum.subDocsAndPositionsEnum[entry.index] = subPostings;\n        subDocsAndPositions[upto].docsAndPositionsEnum = subPostings;\n        subDocsAndPositions[upto].slice = entry.subSlice;\n        upto++;\n      } else {\n        if (entry.terms.docs(b, null, 0) != null) {\n          // At least one of our subs does not store\n          // offsets or positions -- we can't correctly\n          // produce a MultiDocsAndPositions enum\n          return null;\n        }\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsAndPositionsEnum.reset(subDocsAndPositions, upto);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,int).mjava","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n    MultiDocsAndPositionsEnum docsAndPositionsEnum;\n    // Can only reuse if incoming enum is also a MultiDocsAndPositionsEnum\n    if (reuse != null && reuse instanceof MultiDocsAndPositionsEnum) {\n      docsAndPositionsEnum = (MultiDocsAndPositionsEnum) reuse;\n      // ... and was previously created w/ this MultiTermsEnum:\n      if (!docsAndPositionsEnum.canReuse(this)) {\n        docsAndPositionsEnum = new MultiDocsAndPositionsEnum(this, subs.length);\n      }\n    } else {\n      docsAndPositionsEnum = new MultiDocsAndPositionsEnum(this, subs.length);\n    }\n    \n    final MultiBits multiLiveDocs;\n    if (liveDocs instanceof MultiBits) {\n      multiLiveDocs = (MultiBits) liveDocs;\n    } else {\n      multiLiveDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiLiveDocs != null) {\n        // Optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the liveDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiLiveDocs.getMatchingSub(top[i].subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access (very\n          // inefficient)\n          b = new BitsSlice(liveDocs, top[i].subSlice);\n        }\n      } else if (liveDocs != null) {\n        b = new BitsSlice(liveDocs, top[i].subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      assert entry.index < docsAndPositionsEnum.subDocsAndPositionsEnum.length: entry.index + \" vs \" + docsAndPositionsEnum.subDocsAndPositionsEnum.length + \"; \" + subs.length;\n      final DocsAndPositionsEnum subPostings = entry.terms.docsAndPositions(b, docsAndPositionsEnum.subDocsAndPositionsEnum[entry.index], flags);\n\n      if (subPostings != null) {\n        docsAndPositionsEnum.subDocsAndPositionsEnum[entry.index] = subPostings;\n        subDocsAndPositions[upto].docsAndPositionsEnum = subPostings;\n        subDocsAndPositions[upto].slice = entry.subSlice;\n        upto++;\n      } else {\n        if (entry.terms.docs(b, null, DocsEnum.FLAG_NONE) != null) {\n          // At least one of our subs does not store\n          // offsets or positions -- we can't correctly\n          // produce a MultiDocsAndPositions enum\n          return null;\n        }\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsAndPositionsEnum.reset(subDocsAndPositions, upto);\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n    MultiDocsAndPositionsEnum docsAndPositionsEnum;\n    // Can only reuse if incoming enum is also a MultiDocsAndPositionsEnum\n    if (reuse != null && reuse instanceof MultiDocsAndPositionsEnum) {\n      docsAndPositionsEnum = (MultiDocsAndPositionsEnum) reuse;\n      // ... and was previously created w/ this MultiTermsEnum:\n      if (!docsAndPositionsEnum.canReuse(this)) {\n        docsAndPositionsEnum = new MultiDocsAndPositionsEnum(this, subs.length);\n      }\n    } else {\n      docsAndPositionsEnum = new MultiDocsAndPositionsEnum(this, subs.length);\n    }\n    \n    final MultiBits multiLiveDocs;\n    if (liveDocs instanceof MultiBits) {\n      multiLiveDocs = (MultiBits) liveDocs;\n    } else {\n      multiLiveDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiLiveDocs != null) {\n        // Optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the liveDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiLiveDocs.getMatchingSub(top[i].subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access (very\n          // inefficient)\n          b = new BitsSlice(liveDocs, top[i].subSlice);\n        }\n      } else if (liveDocs != null) {\n        b = new BitsSlice(liveDocs, top[i].subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      assert entry.index < docsAndPositionsEnum.subDocsAndPositionsEnum.length: entry.index + \" vs \" + docsAndPositionsEnum.subDocsAndPositionsEnum.length + \"; \" + subs.length;\n      final DocsAndPositionsEnum subPostings = entry.terms.docsAndPositions(b, docsAndPositionsEnum.subDocsAndPositionsEnum[entry.index], flags);\n\n      if (subPostings != null) {\n        docsAndPositionsEnum.subDocsAndPositionsEnum[entry.index] = subPostings;\n        subDocsAndPositions[upto].docsAndPositionsEnum = subPostings;\n        subDocsAndPositions[upto].slice = entry.subSlice;\n        upto++;\n      } else {\n        if (entry.terms.docs(b, null, 0) != null) {\n          // At least one of our subs does not store\n          // offsets or positions -- we can't correctly\n          // produce a MultiDocsAndPositions enum\n          return null;\n        }\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsAndPositionsEnum.reset(subDocsAndPositions, upto);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n    MultiDocsAndPositionsEnum docsAndPositionsEnum;\n    // Can only reuse if incoming enum is also a MultiDocsAndPositionsEnum\n    if (reuse != null && reuse instanceof MultiDocsAndPositionsEnum) {\n      docsAndPositionsEnum = (MultiDocsAndPositionsEnum) reuse;\n      // ... and was previously created w/ this MultiTermsEnum:\n      if (!docsAndPositionsEnum.canReuse(this)) {\n        docsAndPositionsEnum = new MultiDocsAndPositionsEnum(this, subs.length);\n      }\n    } else {\n      docsAndPositionsEnum = new MultiDocsAndPositionsEnum(this, subs.length);\n    }\n    \n    final MultiBits multiLiveDocs;\n    if (liveDocs instanceof MultiBits) {\n      multiLiveDocs = (MultiBits) liveDocs;\n    } else {\n      multiLiveDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiLiveDocs != null) {\n        // Optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the liveDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiLiveDocs.getMatchingSub(top[i].subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access (very\n          // inefficient)\n          b = new BitsSlice(liveDocs, top[i].subSlice);\n        }\n      } else if (liveDocs != null) {\n        b = new BitsSlice(liveDocs, top[i].subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      assert entry.index < docsAndPositionsEnum.subDocsAndPositionsEnum.length: entry.index + \" vs \" + docsAndPositionsEnum.subDocsAndPositionsEnum.length + \"; \" + subs.length;\n      final DocsAndPositionsEnum subPostings = entry.terms.docsAndPositions(b, docsAndPositionsEnum.subDocsAndPositionsEnum[entry.index], flags);\n\n      if (subPostings != null) {\n        docsAndPositionsEnum.subDocsAndPositionsEnum[entry.index] = subPostings;\n        subDocsAndPositions[upto].docsAndPositionsEnum = subPostings;\n        subDocsAndPositions[upto].slice = entry.subSlice;\n        upto++;\n      } else {\n        if (entry.terms.docs(b, null, DocsEnum.FLAG_NONE) != null) {\n          // At least one of our subs does not store\n          // offsets or positions -- we can't correctly\n          // produce a MultiDocsAndPositions enum\n          return null;\n        }\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsAndPositionsEnum.reset(subDocsAndPositions, upto);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["02331260bb246364779cb6f04919ca47900d01bb","15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["02331260bb246364779cb6f04919ca47900d01bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","02331260bb246364779cb6f04919ca47900d01bb"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","02331260bb246364779cb6f04919ca47900d01bb"],"51f5280f31484820499077f41fcdfe92d527d9dc":["15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["51f5280f31484820499077f41fcdfe92d527d9dc"],"02331260bb246364779cb6f04919ca47900d01bb":["322360ac5185a8446d3e0b530b2068bef67cd3d5"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","51f5280f31484820499077f41fcdfe92d527d9dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"51f5280f31484820499077f41fcdfe92d527d9dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["02331260bb246364779cb6f04919ca47900d01bb"],"02331260bb246364779cb6f04919ca47900d01bb":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","15250ca94ba8ab3bcdd476daf6bf3f3febb92640","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}