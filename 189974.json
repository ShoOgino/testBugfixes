{"path":"src/java/org/apache/lucene/search/NumericRangeFilter#newFloatRange(String,int,Float,Float,boolean,boolean).mjava","commits":[{"id":"53b6c192847de8643a5da505cc433cbf8476a175","date":1245413392,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/NumericRangeFilter#newFloatRange(String,int,Float,Float,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Factory that creates a <code>NumericRangeFilter</code>, that filters a <code>float</code>\n   * range using the given <a href=\"NumericRangeQuery.html#precisionStepDesc\"><code>precisionStep</code></a>.\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the min or max value to <code>null</code>. By setting inclusive to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   */\n  public static NumericRangeFilter newFloatRange(final String field, final int precisionStep,\n    Float min, Float max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    return new NumericRangeFilter(\n      NumericRangeQuery.newFloatRange(field, precisionStep, min, max, minInclusive, maxInclusive)\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc70c3e4d8e6a1f3c3e92a33e8dc307f4c0b0a6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70a9e462a51fd525218b83cdc33329f5ee00ca20","date":1254431499,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/NumericRangeFilter#newFloatRange(String,int,Float,Float,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/NumericRangeFilter#newFloatRange(String,int,Float,Float,boolean,boolean).mjava","sourceNew":"  /**\n   * Factory that creates a <code>NumericRangeFilter</code>, that filters a <code>float</code>\n   * range using the given <a href=\"NumericRangeQuery.html#precisionStepDesc\"><code>precisionStep</code></a>.\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the min or max value to <code>null</code>. By setting inclusive to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   */\n  public static NumericRangeFilter<Float> newFloatRange(final String field, final int precisionStep,\n    Float min, Float max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    return new NumericRangeFilter<Float>(\n      NumericRangeQuery.newFloatRange(field, precisionStep, min, max, minInclusive, maxInclusive)\n    );\n  }\n\n","sourceOld":"  /**\n   * Factory that creates a <code>NumericRangeFilter</code>, that filters a <code>float</code>\n   * range using the given <a href=\"NumericRangeQuery.html#precisionStepDesc\"><code>precisionStep</code></a>.\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the min or max value to <code>null</code>. By setting inclusive to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   */\n  public static NumericRangeFilter newFloatRange(final String field, final int precisionStep,\n    Float min, Float max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    return new NumericRangeFilter(\n      NumericRangeQuery.newFloatRange(field, precisionStep, min, max, minInclusive, maxInclusive)\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/NumericRangeFilter#newFloatRange(String,int,Float,Float,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/NumericRangeFilter#newFloatRange(String,int,Float,Float,boolean,boolean).mjava","sourceNew":"  /**\n   * Factory that creates a <code>NumericRangeFilter</code>, that filters a <code>float</code>\n   * range using the given <a href=\"NumericRangeQuery.html#precisionStepDesc\"><code>precisionStep</code></a>.\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the min or max value to <code>null</code>. By setting inclusive to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   */\n  public static NumericRangeFilter<Float> newFloatRange(final String field, final int precisionStep,\n    Float min, Float max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    return new NumericRangeFilter<Float>(\n      NumericRangeQuery.newFloatRange(field, precisionStep, min, max, minInclusive, maxInclusive)\n    );\n  }\n\n","sourceOld":"  /**\n   * Factory that creates a <code>NumericRangeFilter</code>, that filters a <code>float</code>\n   * range using the given <a href=\"NumericRangeQuery.html#precisionStepDesc\"><code>precisionStep</code></a>.\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the min or max value to <code>null</code>. By setting inclusive to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   */\n  public static NumericRangeFilter<Float> newFloatRange(final String field, final int precisionStep,\n    Float min, Float max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    return new NumericRangeFilter<Float>(\n      NumericRangeQuery.newFloatRange(field, precisionStep, min, max, minInclusive, maxInclusive)\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"70a9e462a51fd525218b83cdc33329f5ee00ca20":["53b6c192847de8643a5da505cc433cbf8476a175"],"53b6c192847de8643a5da505cc433cbf8476a175":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["70a9e462a51fd525218b83cdc33329f5ee00ca20"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["53b6c192847de8643a5da505cc433cbf8476a175"],"70a9e462a51fd525218b83cdc33329f5ee00ca20":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"53b6c192847de8643a5da505cc433cbf8476a175":["70a9e462a51fd525218b83cdc33329f5ee00ca20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}