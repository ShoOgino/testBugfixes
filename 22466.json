{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene84/Lucene84PostingsReader.EverythingEnum#advance(int).mjava","commits":[{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene84/Lucene84PostingsReader.EverythingEnum#advance(int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      if (target > nextSkipDoc) {\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new Lucene84SkipReader(docIn.clone(),\n                                        MAX_SKIP_LEVELS,\n                                        true,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, posTermStartFP, payTermStartFP, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target) + 1;\n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();\n          docIn.seek(skipper.getDocPointer());\n          posPendingFP = skipper.getPosPointer();\n          payPendingFP = skipper.getPayPointer();\n          posPendingCount = skipper.getPosBufferUpto();\n          lastStartOffset = 0; // new document\n          payloadByteUpto = skipper.getPayloadByteUpto();\n        }\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan:\n      long doc;\n      while (true) {\n        doc = docBuffer[docBufferUpto];\n        freq = (int) freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (doc >= target) {\n          break;\n        }\n\n        if (docBufferUpto == BLOCK_SIZE) {\n          return this.doc = NO_MORE_DOCS;\n        }\n      }\n\n      position = 0;\n      lastStartOffset = 0;\n      return this.doc = (int) doc;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3270c8036d92f23d84b526bdcb07d645d3102eb7","date":1574438988,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene84/Lucene84PostingsReader.EverythingEnum#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene84/Lucene84PostingsReader.EverythingEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      if (target > nextSkipDoc) {\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new Lucene84SkipReader(docIn.clone(),\n                                        MAX_SKIP_LEVELS,\n                                        true,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, posTermStartFP, payTermStartFP, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target) + 1;\n\n        if (newDocUpto > blockUpto - BLOCK_SIZE + docBufferUpto) {\n          // Skipper moved\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          blockUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();\n          docIn.seek(skipper.getDocPointer());\n          posPendingFP = skipper.getPosPointer();\n          payPendingFP = skipper.getPayPointer();\n          posPendingCount = skipper.getPosBufferUpto();\n          lastStartOffset = 0; // new document\n          payloadByteUpto = skipper.getPayloadByteUpto();\n        }\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan:\n      long doc;\n      while (true) {\n        doc = docBuffer[docBufferUpto];\n        freq = (int) freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n\n        if (doc >= target) {\n          break;\n        }\n      }\n\n      position = 0;\n      lastStartOffset = 0;\n      return this.doc = (int) doc;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      if (target > nextSkipDoc) {\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new Lucene84SkipReader(docIn.clone(),\n                                        MAX_SKIP_LEVELS,\n                                        true,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, posTermStartFP, payTermStartFP, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target) + 1;\n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();\n          docIn.seek(skipper.getDocPointer());\n          posPendingFP = skipper.getPosPointer();\n          payPendingFP = skipper.getPayPointer();\n          posPendingCount = skipper.getPosBufferUpto();\n          lastStartOffset = 0; // new document\n          payloadByteUpto = skipper.getPayloadByteUpto();\n        }\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan:\n      long doc;\n      while (true) {\n        doc = docBuffer[docBufferUpto];\n        freq = (int) freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (doc >= target) {\n          break;\n        }\n\n        if (docBufferUpto == BLOCK_SIZE) {\n          return this.doc = NO_MORE_DOCS;\n        }\n      }\n\n      position = 0;\n      lastStartOffset = 0;\n      return this.doc = (int) doc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3270c8036d92f23d84b526bdcb07d645d3102eb7":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3270c8036d92f23d84b526bdcb07d645d3102eb7"]},"commit2Childs":{"3270c8036d92f23d84b526bdcb07d645d3102eb7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["3270c8036d92f23d84b526bdcb07d645d3102eb7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}