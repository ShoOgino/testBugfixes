{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testDataProvider().mjava","commits":[{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testDataProvider().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testDataProvider().mjava","sourceNew":"  public void testDataProvider() throws IOException, SolrServerException, KeeperException, InterruptedException {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudTestUtils.clusterShape(1, 2, false, true));\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n\n    Map<String, Object> val = cluster.getNodeStateProvider().getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\n        \"freedisk\",\n        \"cores\",\n        \"heapUsage\",\n        \"sysLoadAvg\"));\n    assertNotNull(val.get(\"freedisk\"));\n    assertNotNull(val.get(\"heapUsage\"));\n    assertNotNull(val.get(\"sysLoadAvg\"));\n    assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n    assertTrue(\"freedisk value is \" + ((Number) val.get(\"freedisk\")).doubleValue(),  Double.compare(((Number) val.get(\"freedisk\")).doubleValue(), 0.0d) > 0);\n    assertTrue(\"heapUsage value is \" + ((Number) val.get(\"heapUsage\")).doubleValue(), Double.compare(((Number) val.get(\"heapUsage\")).doubleValue(), 0.0d) > 0);\n    if (!Constants.WINDOWS)  {\n      // the system load average metrics is not available on windows platform\n      assertTrue(\"sysLoadAvg value is \" + ((Number) val.get(\"sysLoadAvg\")).doubleValue(), Double.compare(((Number) val.get(\"sysLoadAvg\")).doubleValue(), 0.0d) > 0);\n    }\n    // simulator doesn't have Overseer, so just pick a random node\n    String overseerNode = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n    solrClient.request(CollectionAdminRequest.addRole(overseerNode, \"overseer\"));\n    for (int i = 0; i < 10; i++) {\n      Map<String, Object> data = Utils.getJson(cluster.getDistribStateManager(), ZkStateReader.ROLES);\n      if (i >= 9 && data.isEmpty()) {\n        throw new RuntimeException(\"NO overseer node created\");\n      }\n      cluster.getTimeSource().sleep(100);\n    }\n    val = cluster.getNodeStateProvider().getNodeValues(overseerNode, Arrays.asList(\n        \"nodeRole\",\n        \"ip_1\", \"ip_2\", \"ip_3\", \"ip_4\",\n        \"sysprop.java.version\",\n        \"sysprop.java.vendor\"));\n    assertEquals(\"overseer\", val.get(\"nodeRole\"));\n    assertNotNull(val.get(\"ip_1\"));\n    assertNotNull(val.get(\"ip_2\"));\n    assertNotNull(val.get(\"ip_3\"));\n    assertNotNull(val.get(\"ip_4\"));\n    assertNotNull(val.get(\"sysprop.java.version\"));\n    assertNotNull(val.get(\"sysprop.java.vendor\"));\n  }\n\n","sourceOld":"  public void testDataProvider() throws IOException, SolrServerException, KeeperException, InterruptedException {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudTestUtils.clusterShape(1, 2, false, true));\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n\n    Map<String, Object> val = cluster.getNodeStateProvider().getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\n        \"freedisk\",\n        \"cores\",\n        \"heapUsage\",\n        \"sysLoadAvg\"));\n    assertNotNull(val.get(\"freedisk\"));\n    assertNotNull(val.get(\"heapUsage\"));\n    assertNotNull(val.get(\"sysLoadAvg\"));\n    assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n    assertTrue(\"freedisk value is \" + ((Number) val.get(\"freedisk\")).doubleValue(),  Double.compare(((Number) val.get(\"freedisk\")).doubleValue(), 0.0d) > 0);\n    assertTrue(\"heapUsage value is \" + ((Number) val.get(\"heapUsage\")).doubleValue(), Double.compare(((Number) val.get(\"heapUsage\")).doubleValue(), 0.0d) > 0);\n    if (!Constants.WINDOWS)  {\n      // the system load average metrics is not available on windows platform\n      assertTrue(\"sysLoadAvg value is \" + ((Number) val.get(\"sysLoadAvg\")).doubleValue(), Double.compare(((Number) val.get(\"sysLoadAvg\")).doubleValue(), 0.0d) > 0);\n    }\n    // simulator doesn't have Overseer, so just pick a random node\n    String overseerNode = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n    solrClient.request(CollectionAdminRequest.addRole(overseerNode, \"overseer\"));\n    for (int i = 0; i < 10; i++) {\n      Map<String, Object> data = Utils.getJson(cluster.getDistribStateManager(), ZkStateReader.ROLES);\n      if (i >= 9 && data.isEmpty()) {\n        throw new RuntimeException(\"NO overseer node created\");\n      }\n      cluster.getTimeSource().sleep(100);\n    }\n    val = cluster.getNodeStateProvider().getNodeValues(overseerNode, Arrays.asList(\n        \"nodeRole\",\n        \"ip_1\", \"ip_2\", \"ip_3\", \"ip_4\",\n        \"sysprop.java.version\",\n        \"sysprop.java.vendor\"));\n    assertEquals(\"overseer\", val.get(\"nodeRole\"));\n    assertNotNull(val.get(\"ip_1\"));\n    assertNotNull(val.get(\"ip_2\"));\n    assertNotNull(val.get(\"ip_3\"));\n    assertNotNull(val.get(\"ip_4\"));\n    assertNotNull(val.get(\"sysprop.java.version\"));\n    assertNotNull(val.get(\"sysprop.java.vendor\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc18bc8ea2e2c1e308757ff50671c774438e9f3e","date":1538052583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testDataProvider().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testDataProvider().mjava","sourceNew":"  public void testDataProvider() throws IOException, SolrServerException, KeeperException, InterruptedException {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudTestUtils.clusterShape(1, 2, false, true));\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n\n    Map<String, Object> val = cluster.getNodeStateProvider().getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\n        \"freedisk\",\n        \"cores\",\n        \"heapUsage\",\n        \"sysLoadAvg\"));\n    assertNotNull(val.get(\"freedisk\"));\n    assertNotNull(val.get(\"heapUsage\"));\n    assertNotNull(val.get(\"sysLoadAvg\"));\n    assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n    assertTrue(\"freedisk value is \" + ((Number) val.get(\"freedisk\")).doubleValue(),  Double.compare(((Number) val.get(\"freedisk\")).doubleValue(), 0.0d) > 0);\n    assertTrue(\"heapUsage value is \" + ((Number) val.get(\"heapUsage\")).doubleValue(), Double.compare(((Number) val.get(\"heapUsage\")).doubleValue(), 0.0d) > 0);\n    if (!Constants.WINDOWS)  {\n      // the system load average metrics is not available on windows platform\n      assertTrue(\"sysLoadAvg value is \" + ((Number) val.get(\"sysLoadAvg\")).doubleValue(), Double.compare(((Number) val.get(\"sysLoadAvg\")).doubleValue(), 0.0d) > 0);\n    }\n    // simulator doesn't have Overseer, so just pick a random node\n    String overseerNode = cluster.getSimClusterStateProvider().simGetRandomNode();\n    solrClient.request(CollectionAdminRequest.addRole(overseerNode, \"overseer\"));\n    for (int i = 0; i < 10; i++) {\n      Map<String, Object> data = Utils.getJson(cluster.getDistribStateManager(), ZkStateReader.ROLES);\n      if (i >= 9 && data.isEmpty()) {\n        throw new RuntimeException(\"NO overseer node created\");\n      }\n      cluster.getTimeSource().sleep(100);\n    }\n    val = cluster.getNodeStateProvider().getNodeValues(overseerNode, Arrays.asList(\n        \"nodeRole\",\n        \"ip_1\", \"ip_2\", \"ip_3\", \"ip_4\",\n        \"sysprop.java.version\",\n        \"sysprop.java.vendor\"));\n    assertEquals(\"overseer\", val.get(\"nodeRole\"));\n    assertNotNull(val.get(\"ip_1\"));\n    assertNotNull(val.get(\"ip_2\"));\n    assertNotNull(val.get(\"ip_3\"));\n    assertNotNull(val.get(\"ip_4\"));\n    assertNotNull(val.get(\"sysprop.java.version\"));\n    assertNotNull(val.get(\"sysprop.java.vendor\"));\n  }\n\n","sourceOld":"  public void testDataProvider() throws IOException, SolrServerException, KeeperException, InterruptedException {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudTestUtils.clusterShape(1, 2, false, true));\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n\n    Map<String, Object> val = cluster.getNodeStateProvider().getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\n        \"freedisk\",\n        \"cores\",\n        \"heapUsage\",\n        \"sysLoadAvg\"));\n    assertNotNull(val.get(\"freedisk\"));\n    assertNotNull(val.get(\"heapUsage\"));\n    assertNotNull(val.get(\"sysLoadAvg\"));\n    assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n    assertTrue(\"freedisk value is \" + ((Number) val.get(\"freedisk\")).doubleValue(),  Double.compare(((Number) val.get(\"freedisk\")).doubleValue(), 0.0d) > 0);\n    assertTrue(\"heapUsage value is \" + ((Number) val.get(\"heapUsage\")).doubleValue(), Double.compare(((Number) val.get(\"heapUsage\")).doubleValue(), 0.0d) > 0);\n    if (!Constants.WINDOWS)  {\n      // the system load average metrics is not available on windows platform\n      assertTrue(\"sysLoadAvg value is \" + ((Number) val.get(\"sysLoadAvg\")).doubleValue(), Double.compare(((Number) val.get(\"sysLoadAvg\")).doubleValue(), 0.0d) > 0);\n    }\n    // simulator doesn't have Overseer, so just pick a random node\n    String overseerNode = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n    solrClient.request(CollectionAdminRequest.addRole(overseerNode, \"overseer\"));\n    for (int i = 0; i < 10; i++) {\n      Map<String, Object> data = Utils.getJson(cluster.getDistribStateManager(), ZkStateReader.ROLES);\n      if (i >= 9 && data.isEmpty()) {\n        throw new RuntimeException(\"NO overseer node created\");\n      }\n      cluster.getTimeSource().sleep(100);\n    }\n    val = cluster.getNodeStateProvider().getNodeValues(overseerNode, Arrays.asList(\n        \"nodeRole\",\n        \"ip_1\", \"ip_2\", \"ip_3\", \"ip_4\",\n        \"sysprop.java.version\",\n        \"sysprop.java.vendor\"));\n    assertEquals(\"overseer\", val.get(\"nodeRole\"));\n    assertNotNull(val.get(\"ip_1\"));\n    assertNotNull(val.get(\"ip_2\"));\n    assertNotNull(val.get(\"ip_3\"));\n    assertNotNull(val.get(\"ip_4\"));\n    assertNotNull(val.get(\"sysprop.java.version\"));\n    assertNotNull(val.get(\"sysprop.java.vendor\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testDataProvider().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testDataProvider().mjava","sourceNew":"  public void testDataProvider() throws IOException, SolrServerException, KeeperException, InterruptedException {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(solrClient);\n    CloudUtil.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudUtil.clusterShape(1, 2, false, true));\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n\n    Map<String, Object> val = cluster.getNodeStateProvider().getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\n        \"freedisk\",\n        \"cores\",\n        \"heapUsage\",\n        \"sysLoadAvg\"));\n    assertNotNull(val.get(\"freedisk\"));\n    assertNotNull(val.get(\"heapUsage\"));\n    assertNotNull(val.get(\"sysLoadAvg\"));\n    assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n    assertTrue(\"freedisk value is \" + ((Number) val.get(\"freedisk\")).doubleValue(),  Double.compare(((Number) val.get(\"freedisk\")).doubleValue(), 0.0d) > 0);\n    assertTrue(\"heapUsage value is \" + ((Number) val.get(\"heapUsage\")).doubleValue(), Double.compare(((Number) val.get(\"heapUsage\")).doubleValue(), 0.0d) > 0);\n    if (!Constants.WINDOWS)  {\n      // the system load average metrics is not available on windows platform\n      assertTrue(\"sysLoadAvg value is \" + ((Number) val.get(\"sysLoadAvg\")).doubleValue(), Double.compare(((Number) val.get(\"sysLoadAvg\")).doubleValue(), 0.0d) > 0);\n    }\n    // simulator doesn't have Overseer, so just pick a random node\n    String overseerNode = cluster.getSimClusterStateProvider().simGetRandomNode();\n    solrClient.request(CollectionAdminRequest.addRole(overseerNode, \"overseer\"));\n    for (int i = 0; i < 10; i++) {\n      Map<String, Object> data = Utils.getJson(cluster.getDistribStateManager(), ZkStateReader.ROLES);\n      if (i >= 9 && data.isEmpty()) {\n        throw new RuntimeException(\"NO overseer node created\");\n      }\n      cluster.getTimeSource().sleep(100);\n    }\n    val = cluster.getNodeStateProvider().getNodeValues(overseerNode, Arrays.asList(\n        \"nodeRole\",\n        \"ip_1\", \"ip_2\", \"ip_3\", \"ip_4\",\n        \"sysprop.java.version\",\n        \"sysprop.java.vendor\"));\n    assertEquals(\"overseer\", val.get(\"nodeRole\"));\n    assertNotNull(val.get(\"ip_1\"));\n    assertNotNull(val.get(\"ip_2\"));\n    assertNotNull(val.get(\"ip_3\"));\n    assertNotNull(val.get(\"ip_4\"));\n    assertNotNull(val.get(\"sysprop.java.version\"));\n    assertNotNull(val.get(\"sysprop.java.vendor\"));\n  }\n\n","sourceOld":"  public void testDataProvider() throws IOException, SolrServerException, KeeperException, InterruptedException {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudTestUtils.clusterShape(1, 2, false, true));\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n\n    Map<String, Object> val = cluster.getNodeStateProvider().getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\n        \"freedisk\",\n        \"cores\",\n        \"heapUsage\",\n        \"sysLoadAvg\"));\n    assertNotNull(val.get(\"freedisk\"));\n    assertNotNull(val.get(\"heapUsage\"));\n    assertNotNull(val.get(\"sysLoadAvg\"));\n    assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n    assertTrue(\"freedisk value is \" + ((Number) val.get(\"freedisk\")).doubleValue(),  Double.compare(((Number) val.get(\"freedisk\")).doubleValue(), 0.0d) > 0);\n    assertTrue(\"heapUsage value is \" + ((Number) val.get(\"heapUsage\")).doubleValue(), Double.compare(((Number) val.get(\"heapUsage\")).doubleValue(), 0.0d) > 0);\n    if (!Constants.WINDOWS)  {\n      // the system load average metrics is not available on windows platform\n      assertTrue(\"sysLoadAvg value is \" + ((Number) val.get(\"sysLoadAvg\")).doubleValue(), Double.compare(((Number) val.get(\"sysLoadAvg\")).doubleValue(), 0.0d) > 0);\n    }\n    // simulator doesn't have Overseer, so just pick a random node\n    String overseerNode = cluster.getSimClusterStateProvider().simGetRandomNode();\n    solrClient.request(CollectionAdminRequest.addRole(overseerNode, \"overseer\"));\n    for (int i = 0; i < 10; i++) {\n      Map<String, Object> data = Utils.getJson(cluster.getDistribStateManager(), ZkStateReader.ROLES);\n      if (i >= 9 && data.isEmpty()) {\n        throw new RuntimeException(\"NO overseer node created\");\n      }\n      cluster.getTimeSource().sleep(100);\n    }\n    val = cluster.getNodeStateProvider().getNodeValues(overseerNode, Arrays.asList(\n        \"nodeRole\",\n        \"ip_1\", \"ip_2\", \"ip_3\", \"ip_4\",\n        \"sysprop.java.version\",\n        \"sysprop.java.vendor\"));\n    assertEquals(\"overseer\", val.get(\"nodeRole\"));\n    assertNotNull(val.get(\"ip_1\"));\n    assertNotNull(val.get(\"ip_2\"));\n    assertNotNull(val.get(\"ip_3\"));\n    assertNotNull(val.get(\"ip_4\"));\n    assertNotNull(val.get(\"sysprop.java.version\"));\n    assertNotNull(val.get(\"sysprop.java.vendor\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testDataProvider().mjava","sourceNew":null,"sourceOld":"  public void testDataProvider() throws IOException, SolrServerException, KeeperException, InterruptedException {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(solrClient);\n    CloudUtil.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudUtil.clusterShape(1, 2, false, true));\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n\n    Map<String, Object> val = cluster.getNodeStateProvider().getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\n        \"freedisk\",\n        \"cores\",\n        \"heapUsage\",\n        \"sysLoadAvg\"));\n    assertNotNull(val.get(\"freedisk\"));\n    assertNotNull(val.get(\"heapUsage\"));\n    assertNotNull(val.get(\"sysLoadAvg\"));\n    assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n    assertTrue(\"freedisk value is \" + ((Number) val.get(\"freedisk\")).doubleValue(),  Double.compare(((Number) val.get(\"freedisk\")).doubleValue(), 0.0d) > 0);\n    assertTrue(\"heapUsage value is \" + ((Number) val.get(\"heapUsage\")).doubleValue(), Double.compare(((Number) val.get(\"heapUsage\")).doubleValue(), 0.0d) > 0);\n    if (!Constants.WINDOWS)  {\n      // the system load average metrics is not available on windows platform\n      assertTrue(\"sysLoadAvg value is \" + ((Number) val.get(\"sysLoadAvg\")).doubleValue(), Double.compare(((Number) val.get(\"sysLoadAvg\")).doubleValue(), 0.0d) > 0);\n    }\n    // simulator doesn't have Overseer, so just pick a random node\n    String overseerNode = cluster.getSimClusterStateProvider().simGetRandomNode();\n    solrClient.request(CollectionAdminRequest.addRole(overseerNode, \"overseer\"));\n    for (int i = 0; i < 10; i++) {\n      Map<String, Object> data = Utils.getJson(cluster.getDistribStateManager(), ZkStateReader.ROLES);\n      if (i >= 9 && data.isEmpty()) {\n        throw new RuntimeException(\"NO overseer node created\");\n      }\n      cluster.getTimeSource().sleep(100);\n    }\n    val = cluster.getNodeStateProvider().getNodeValues(overseerNode, Arrays.asList(\n        \"nodeRole\",\n        \"ip_1\", \"ip_2\", \"ip_3\", \"ip_4\",\n        \"sysprop.java.version\",\n        \"sysprop.java.vendor\"));\n    assertEquals(\"overseer\", val.get(\"nodeRole\"));\n    assertNotNull(val.get(\"ip_1\"));\n    assertNotNull(val.get(\"ip_2\"));\n    assertNotNull(val.get(\"ip_3\"));\n    assertNotNull(val.get(\"ip_4\"));\n    assertNotNull(val.get(\"sysprop.java.version\"));\n    assertNotNull(val.get(\"sysprop.java.vendor\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc18bc8ea2e2c1e308757ff50671c774438e9f3e":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"a6a5c1c40529f15b445e6720dfde1967e139bff1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["fc18bc8ea2e2c1e308757ff50671c774438e9f3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"fc18bc8ea2e2c1e308757ff50671c774438e9f3e":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"a6a5c1c40529f15b445e6720dfde1967e139bff1":["fc18bc8ea2e2c1e308757ff50671c774438e9f3e"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}