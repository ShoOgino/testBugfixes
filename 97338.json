{"path":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getFuzzyQuery(String,String,float).mjava","commits":[{"id":"36f91bf9cfc9d0c3155edab43359e7670ea8a5af","date":1269580873,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getFuzzyQuery(String,String,float).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getFuzzyQuery(String,String,float).mjava","sourceNew":"  /**\n   * Called when parser parses an input term token that has the fuzzy suffix (~) appended.\n   * <p>\n   * Depending on analyzer and settings, a fuzzy term may (most probably will)\n   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.\n   * <p>\n   * Overrides super class, by passing terms through analyzer.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *\n   * @return Resulting {@link Query} built for the term\n   * @exception ParseException\n   */\n  @Override\n  protected Query getFuzzyQuery(String field, String termStr, float minSimilarity)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the term\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(termStr));\n    TermAttribute termAtt = source.addAttribute(TermAttribute.class);\n    String nextToken = null;\n    boolean multipleTokens = false;\n    \n    try {\n      if (source.incrementToken()) {\n        nextToken = termAtt.term();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      nextToken = null;\n    }\n\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build FuzzyQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added\");\n    }\n\n    return (nextToken == null) ? null : super.getFuzzyQuery(field, nextToken, minSimilarity);\n  }\n\n","sourceOld":"  /**\n   * Called when parser parses an input term token that has the fuzzy suffix (~) appended.\n   * <p>\n   * Depending on analyzer and settings, a fuzzy term may (most probably will)\n   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.\n   * <p>\n   * Overrides super class, by passing terms through analyzer.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *\n   * @return Resulting {@link Query} built for the term\n   * @exception ParseException\n   */\n  @Override\n  protected Query getFuzzyQuery(String field, String termStr, float minSimilarity)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the term\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(termStr));\n    TermAttribute termAtt = source.addAttribute(TermAttribute.class);\n    String nextToken = null;\n    boolean multipleTokens = false;\n    \n    try {\n      if (source.incrementToken()) {\n        nextToken = termAtt.term();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      nextToken = null;\n    }\n\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build FuzzyQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added\");\n    }\n\n    return (nextToken == null) ? null : super.getFuzzyQuery(field, nextToken, minSimilarity);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7347509fad0711ac30cb15a746e9a3830a38ebd","date":1275388513,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getFuzzyQuery(String,String,float).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getFuzzyQuery(String,String,float).mjava","sourceNew":"  /**\n   * Called when parser parses an input term token that has the fuzzy suffix (~) appended.\n   * <p>\n   * Depending on analyzer and settings, a fuzzy term may (most probably will)\n   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.\n   * <p>\n   * Overrides super class, by passing terms through analyzer.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *\n   * @return Resulting {@link Query} built for the term\n   * @exception ParseException\n   */\n  @Override\n  protected Query getFuzzyQuery(String field, String termStr, float minSimilarity)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the term\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(termStr));\n    CharTermAttribute termAtt = source.addAttribute(CharTermAttribute.class);\n    String nextToken = null;\n    boolean multipleTokens = false;\n    \n    try {\n      if (source.incrementToken()) {\n        nextToken = termAtt.toString();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      nextToken = null;\n    }\n\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build FuzzyQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added\");\n    }\n\n    return (nextToken == null) ? null : super.getFuzzyQuery(field, nextToken, minSimilarity);\n  }\n\n","sourceOld":"  /**\n   * Called when parser parses an input term token that has the fuzzy suffix (~) appended.\n   * <p>\n   * Depending on analyzer and settings, a fuzzy term may (most probably will)\n   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.\n   * <p>\n   * Overrides super class, by passing terms through analyzer.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *\n   * @return Resulting {@link Query} built for the term\n   * @exception ParseException\n   */\n  @Override\n  protected Query getFuzzyQuery(String field, String termStr, float minSimilarity)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the term\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(termStr));\n    TermAttribute termAtt = source.addAttribute(TermAttribute.class);\n    String nextToken = null;\n    boolean multipleTokens = false;\n    \n    try {\n      if (source.incrementToken()) {\n        nextToken = termAtt.term();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      nextToken = null;\n    }\n\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build FuzzyQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added\");\n    }\n\n    return (nextToken == null) ? null : super.getFuzzyQuery(field, nextToken, minSimilarity);\n  }\n\n","bugFix":null,"bugIntro":["046829b17e246624c179b94d5a20cb53fa945e87"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4","date":1305207152,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getFuzzyQuery(String,String,float).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getFuzzyQuery(String,String,float).mjava","sourceNew":"  /**\n   * Called when parser parses an input term token that has the fuzzy suffix (~) appended.\n   * <p>\n   * Depending on analyzer and settings, a fuzzy term may (most probably will)\n   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.\n   * <p>\n   * Overrides super class, by passing terms through analyzer.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *\n   * @return Resulting {@link Query} built for the term\n   * @exception ParseException\n   */\n  @Override\n  protected Query getFuzzyQuery(String field, String termStr, float minSimilarity)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the term\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(termStr));\n    CharTermAttribute termAtt = source.addAttribute(CharTermAttribute.class);\n    String nextToken = null;\n    boolean multipleTokens = false;\n    \n    try {\n      source.reset();\n      if (source.incrementToken()) {\n        nextToken = termAtt.toString();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      nextToken = null;\n    }\n\n    try {\n      source.end();\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build FuzzyQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added\");\n    }\n\n    return (nextToken == null) ? null : super.getFuzzyQuery(field, nextToken, minSimilarity);\n  }\n\n","sourceOld":"  /**\n   * Called when parser parses an input term token that has the fuzzy suffix (~) appended.\n   * <p>\n   * Depending on analyzer and settings, a fuzzy term may (most probably will)\n   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.\n   * <p>\n   * Overrides super class, by passing terms through analyzer.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *\n   * @return Resulting {@link Query} built for the term\n   * @exception ParseException\n   */\n  @Override\n  protected Query getFuzzyQuery(String field, String termStr, float minSimilarity)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the term\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(termStr));\n    CharTermAttribute termAtt = source.addAttribute(CharTermAttribute.class);\n    String nextToken = null;\n    boolean multipleTokens = false;\n    \n    try {\n      if (source.incrementToken()) {\n        nextToken = termAtt.toString();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      nextToken = null;\n    }\n\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build FuzzyQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added\");\n    }\n\n    return (nextToken == null) ? null : super.getFuzzyQuery(field, nextToken, minSimilarity);\n  }\n\n","bugFix":null,"bugIntro":["046829b17e246624c179b94d5a20cb53fa945e87"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getFuzzyQuery(String,String,float).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getFuzzyQuery(String,String,float).mjava","sourceNew":"  /**\n   * Called when parser parses an input term token that has the fuzzy suffix (~) appended.\n   * <p>\n   * Depending on analyzer and settings, a fuzzy term may (most probably will)\n   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.\n   * <p>\n   * Overrides super class, by passing terms through analyzer.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *\n   * @return Resulting {@link Query} built for the term\n   * @exception ParseException\n   */\n  @Override\n  protected Query getFuzzyQuery(String field, String termStr, float minSimilarity)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the term\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(termStr));\n    CharTermAttribute termAtt = source.addAttribute(CharTermAttribute.class);\n    String nextToken = null;\n    boolean multipleTokens = false;\n    \n    try {\n      source.reset();\n      if (source.incrementToken()) {\n        nextToken = termAtt.toString();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      nextToken = null;\n    }\n\n    try {\n      source.end();\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build FuzzyQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added\");\n    }\n\n    return (nextToken == null) ? null : super.getFuzzyQuery(field, nextToken, minSimilarity);\n  }\n\n","sourceOld":"  /**\n   * Called when parser parses an input term token that has the fuzzy suffix (~) appended.\n   * <p>\n   * Depending on analyzer and settings, a fuzzy term may (most probably will)\n   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.\n   * <p>\n   * Overrides super class, by passing terms through analyzer.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *\n   * @return Resulting {@link Query} built for the term\n   * @exception ParseException\n   */\n  @Override\n  protected Query getFuzzyQuery(String field, String termStr, float minSimilarity)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the term\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(termStr));\n    CharTermAttribute termAtt = source.addAttribute(CharTermAttribute.class);\n    String nextToken = null;\n    boolean multipleTokens = false;\n    \n    try {\n      if (source.incrementToken()) {\n        nextToken = termAtt.toString();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      nextToken = null;\n    }\n\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build FuzzyQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added\");\n    }\n\n    return (nextToken == null) ? null : super.getFuzzyQuery(field, nextToken, minSimilarity);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00746ad002a54281629e3b6f3eb39833a33f093e","date":1305306799,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getFuzzyQuery(String,String,float).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getFuzzyQuery(String,String,float).mjava","sourceNew":"  /**\n   * Called when parser parses an input term token that has the fuzzy suffix (~) appended.\n   * <p>\n   * Depending on analyzer and settings, a fuzzy term may (most probably will)\n   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.\n   * <p>\n   * Overrides super class, by passing terms through analyzer.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *\n   * @return Resulting {@link Query} built for the term\n   * @exception ParseException\n   */\n  @Override\n  protected Query getFuzzyQuery(String field, String termStr, float minSimilarity)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the term\n    TokenStream source = null;\n    String nextToken = null;\n    boolean multipleTokens = false;\n    \n    try {\n      source = getAnalyzer().reusableTokenStream(field, new StringReader(termStr));\n      CharTermAttribute termAtt = source.addAttribute(CharTermAttribute.class);\n      source.reset();\n      if (source.incrementToken()) {\n        nextToken = termAtt.toString();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      nextToken = null;\n    }\n\n    try {\n      source.end();\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build FuzzyQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added\");\n    }\n\n    return (nextToken == null) ? null : super.getFuzzyQuery(field, nextToken, minSimilarity);\n  }\n\n","sourceOld":"  /**\n   * Called when parser parses an input term token that has the fuzzy suffix (~) appended.\n   * <p>\n   * Depending on analyzer and settings, a fuzzy term may (most probably will)\n   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.\n   * <p>\n   * Overrides super class, by passing terms through analyzer.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *\n   * @return Resulting {@link Query} built for the term\n   * @exception ParseException\n   */\n  @Override\n  protected Query getFuzzyQuery(String field, String termStr, float minSimilarity)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the term\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(termStr));\n    CharTermAttribute termAtt = source.addAttribute(CharTermAttribute.class);\n    String nextToken = null;\n    boolean multipleTokens = false;\n    \n    try {\n      source.reset();\n      if (source.incrementToken()) {\n        nextToken = termAtt.toString();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      nextToken = null;\n    }\n\n    try {\n      source.end();\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build FuzzyQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added\");\n    }\n\n    return (nextToken == null) ? null : super.getFuzzyQuery(field, nextToken, minSimilarity);\n  }\n\n","bugFix":null,"bugIntro":["046829b17e246624c179b94d5a20cb53fa945e87"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getFuzzyQuery(String,String,float).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getFuzzyQuery(String,String,float).mjava","sourceNew":"  /**\n   * Called when parser parses an input term token that has the fuzzy suffix (~) appended.\n   * <p>\n   * Depending on analyzer and settings, a fuzzy term may (most probably will)\n   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.\n   * <p>\n   * Overrides super class, by passing terms through analyzer.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *\n   * @return Resulting {@link Query} built for the term\n   * @exception ParseException\n   */\n  @Override\n  protected Query getFuzzyQuery(String field, String termStr, float minSimilarity)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the term\n    TokenStream source = null;\n    String nextToken = null;\n    boolean multipleTokens = false;\n    \n    try {\n      source = getAnalyzer().reusableTokenStream(field, new StringReader(termStr));\n      CharTermAttribute termAtt = source.addAttribute(CharTermAttribute.class);\n      source.reset();\n      if (source.incrementToken()) {\n        nextToken = termAtt.toString();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      nextToken = null;\n    }\n\n    try {\n      source.end();\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build FuzzyQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added\");\n    }\n\n    return (nextToken == null) ? null : super.getFuzzyQuery(field, nextToken, minSimilarity);\n  }\n\n","sourceOld":"  /**\n   * Called when parser parses an input term token that has the fuzzy suffix (~) appended.\n   * <p>\n   * Depending on analyzer and settings, a fuzzy term may (most probably will)\n   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.\n   * <p>\n   * Overrides super class, by passing terms through analyzer.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *\n   * @return Resulting {@link Query} built for the term\n   * @exception ParseException\n   */\n  @Override\n  protected Query getFuzzyQuery(String field, String termStr, float minSimilarity)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the term\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(termStr));\n    CharTermAttribute termAtt = source.addAttribute(CharTermAttribute.class);\n    String nextToken = null;\n    boolean multipleTokens = false;\n    \n    try {\n      source.reset();\n      if (source.incrementToken()) {\n        nextToken = termAtt.toString();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      nextToken = null;\n    }\n\n    try {\n      source.end();\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build FuzzyQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added\");\n    }\n\n    return (nextToken == null) ? null : super.getFuzzyQuery(field, nextToken, minSimilarity);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getFuzzyQuery(String,String,float).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getFuzzyQuery(String,String,float).mjava","sourceNew":"  /**\n   * Called when parser parses an input term token that has the fuzzy suffix (~) appended.\n   * <p>\n   * Depending on analyzer and settings, a fuzzy term may (most probably will)\n   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.\n   * <p>\n   * Overrides super class, by passing terms through analyzer.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *\n   * @return Resulting {@link Query} built for the term\n   * @exception ParseException\n   */\n  @Override\n  protected Query getFuzzyQuery(String field, String termStr, float minSimilarity)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the term\n    TokenStream source = null;\n    String nextToken = null;\n    boolean multipleTokens = false;\n    \n    try {\n      source = getAnalyzer().reusableTokenStream(field, new StringReader(termStr));\n      CharTermAttribute termAtt = source.addAttribute(CharTermAttribute.class);\n      source.reset();\n      if (source.incrementToken()) {\n        nextToken = termAtt.toString();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      nextToken = null;\n    }\n\n    try {\n      source.end();\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build FuzzyQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added\");\n    }\n\n    return (nextToken == null) ? null : super.getFuzzyQuery(field, nextToken, minSimilarity);\n  }\n\n","sourceOld":"  /**\n   * Called when parser parses an input term token that has the fuzzy suffix (~) appended.\n   * <p>\n   * Depending on analyzer and settings, a fuzzy term may (most probably will)\n   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.\n   * <p>\n   * Overrides super class, by passing terms through analyzer.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *\n   * @return Resulting {@link Query} built for the term\n   * @exception ParseException\n   */\n  @Override\n  protected Query getFuzzyQuery(String field, String termStr, float minSimilarity)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the term\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(termStr));\n    CharTermAttribute termAtt = source.addAttribute(CharTermAttribute.class);\n    String nextToken = null;\n    boolean multipleTokens = false;\n    \n    try {\n      if (source.incrementToken()) {\n        nextToken = termAtt.toString();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      nextToken = null;\n    }\n\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build FuzzyQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added\");\n    }\n\n    return (nextToken == null) ? null : super.getFuzzyQuery(field, nextToken, minSimilarity);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a53a291ad9b1cc050d846b68758c061a55d52734","date":1310437344,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/analyzing/AnalyzingQueryParser#getFuzzyQuery(String,String,float).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getFuzzyQuery(String,String,float).mjava","sourceNew":"  /**\n   * Called when parser parses an input term token that has the fuzzy suffix (~) appended.\n   * <p>\n   * Depending on analyzer and settings, a fuzzy term may (most probably will)\n   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.\n   * <p>\n   * Overrides super class, by passing terms through analyzer.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *\n   * @return Resulting {@link Query} built for the term\n   * @exception ParseException\n   */\n  @Override\n  protected Query getFuzzyQuery(String field, String termStr, float minSimilarity)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the term\n    TokenStream source = null;\n    String nextToken = null;\n    boolean multipleTokens = false;\n    \n    try {\n      source = getAnalyzer().reusableTokenStream(field, new StringReader(termStr));\n      CharTermAttribute termAtt = source.addAttribute(CharTermAttribute.class);\n      source.reset();\n      if (source.incrementToken()) {\n        nextToken = termAtt.toString();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      nextToken = null;\n    }\n\n    try {\n      source.end();\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build FuzzyQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added\");\n    }\n\n    return (nextToken == null) ? null : super.getFuzzyQuery(field, nextToken, minSimilarity);\n  }\n\n","sourceOld":"  /**\n   * Called when parser parses an input term token that has the fuzzy suffix (~) appended.\n   * <p>\n   * Depending on analyzer and settings, a fuzzy term may (most probably will)\n   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.\n   * <p>\n   * Overrides super class, by passing terms through analyzer.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *\n   * @return Resulting {@link Query} built for the term\n   * @exception ParseException\n   */\n  @Override\n  protected Query getFuzzyQuery(String field, String termStr, float minSimilarity)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the term\n    TokenStream source = null;\n    String nextToken = null;\n    boolean multipleTokens = false;\n    \n    try {\n      source = getAnalyzer().reusableTokenStream(field, new StringReader(termStr));\n      CharTermAttribute termAtt = source.addAttribute(CharTermAttribute.class);\n      source.reset();\n      if (source.incrementToken()) {\n        nextToken = termAtt.toString();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      nextToken = null;\n    }\n\n    try {\n      source.end();\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build FuzzyQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added\");\n    }\n\n    return (nextToken == null) ? null : super.getFuzzyQuery(field, nextToken, minSimilarity);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c3a8a449466c1ff7ce2274fe73dab487256964b4":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb","00746ad002a54281629e3b6f3eb39833a33f093e"],"e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a7347509fad0711ac30cb15a746e9a3830a38ebd","00746ad002a54281629e3b6f3eb39833a33f093e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["a7347509fad0711ac30cb15a746e9a3830a38ebd","e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4"],"00746ad002a54281629e3b6f3eb39833a33f093e":["e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4"],"a53a291ad9b1cc050d846b68758c061a55d52734":["00746ad002a54281629e3b6f3eb39833a33f093e"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a53a291ad9b1cc050d846b68758c061a55d52734"]},"commit2Childs":{"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb","00746ad002a54281629e3b6f3eb39833a33f093e"],"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"00746ad002a54281629e3b6f3eb39833a33f093e":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","a53a291ad9b1cc050d846b68758c061a55d52734"],"a53a291ad9b1cc050d846b68758c061a55d52734":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}