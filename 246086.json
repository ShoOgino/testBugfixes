{"path":"lucene/core/src/java/org/apache/lucene/geo/GeoUtils#lineCrossesLine(double,double,double,double,double,double,double,double).mjava","commits":[{"id":"e4fccad460342b1af30cb328cc8297751a218d78","date":1541177339,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/GeoUtils#lineCrossesLine(double,double,double,double,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /** uses orient method to compute whether two line segments cross */\n  public static boolean lineCrossesLine(double a1x, double a1y, double b1x, double b1y, double a2x, double a2y, double b2x, double b2y) {\n    // shortcut: either \"line\" is actually a point\n    if ((a1x == b1x && a1y == b1y) || (a2x == b2x && a2y == b2y)) {\n      return false;\n    }\n\n    if (orient(a2x, a2y, b2x, b2y, a1x, a1y) * orient(a2x, a2y, b2x, b2y, b1x, b1y) <= 0 &&\n        orient(a1x, a1y, b1x, b1y, a2x, a2y) * orient(a1x, a1y, b1x, b1y, b2x, b2y) <= 0) {\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5ee4d410ec4b99dc713f05e20a22e802b89a92f","date":1548973182,"type":4,"author":"Nicholas Knize","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/geo/GeoUtils#lineCrossesLine(double,double,double,double,double,double,double,double).mjava","sourceNew":null,"sourceOld":"  /** uses orient method to compute whether two line segments cross */\n  public static boolean lineCrossesLine(double a1x, double a1y, double b1x, double b1y, double a2x, double a2y, double b2x, double b2y) {\n    // shortcut: either \"line\" is actually a point\n    if ((a1x == b1x && a1y == b1y) || (a2x == b2x && a2y == b2y)) {\n      return false;\n    }\n\n    if (orient(a2x, a2y, b2x, b2y, a1x, a1y) * orient(a2x, a2y, b2x, b2y, b1x, b1y) <= 0 &&\n        orient(a1x, a1y, b1x, b1y, a2x, a2y) * orient(a1x, a1y, b1x, b1y, b2x, b2y) <= 0) {\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dffcd36f1a87df1300807d9580eb05aa37726397","date":1552376454,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/GeoUtils#lineCrossesLine(double,double,double,double,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /** uses orient method to compute whether two line segments cross */\n  public static boolean lineCrossesLine(double a1x, double a1y, double b1x, double b1y, double a2x, double a2y, double b2x, double b2y) {\n    // shortcut: either \"line\" is actually a point\n    if ((a1x == b1x && a1y == b1y) || (a2x == b2x && a2y == b2y)) {\n      return false;\n    }\n\n    if (orient(a2x, a2y, b2x, b2y, a1x, a1y) * orient(a2x, a2y, b2x, b2y, b1x, b1y) <= 0 &&\n        orient(a1x, a1y, b1x, b1y, a2x, a2y) * orient(a1x, a1y, b1x, b1y, b2x, b2y) <= 0) {\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc005279ab64cbf458ccef2ada610bc1a04b6139","date":1554992856,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/GeoUtils#lineCrossesLine(double,double,double,double,double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/GeoUtils#lineCrossesLine(double,double,double,double,double,double,double,double).mjava","sourceNew":"  /** uses orient method to compute whether two line segments cross */\n  public static boolean lineCrossesLine(double a1x, double a1y, double b1x, double b1y, double a2x, double a2y, double b2x, double b2y) {\n    if (orient(a2x, a2y, b2x, b2y, a1x, a1y) * orient(a2x, a2y, b2x, b2y, b1x, b1y) < 0 &&\n        orient(a1x, a1y, b1x, b1y, a2x, a2y) * orient(a1x, a1y, b1x, b1y, b2x, b2y) < 0) {\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /** uses orient method to compute whether two line segments cross */\n  public static boolean lineCrossesLine(double a1x, double a1y, double b1x, double b1y, double a2x, double a2y, double b2x, double b2y) {\n    // shortcut: either \"line\" is actually a point\n    if ((a1x == b1x && a1y == b1y) || (a2x == b2x && a2y == b2y)) {\n      return false;\n    }\n\n    if (orient(a2x, a2y, b2x, b2y, a1x, a1y) * orient(a2x, a2y, b2x, b2y, b1x, b1y) <= 0 &&\n        orient(a1x, a1y, b1x, b1y, a2x, a2y) * orient(a1x, a1y, b1x, b1y, b2x, b2y) <= 0) {\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dffcd36f1a87df1300807d9580eb05aa37726397":["a5ee4d410ec4b99dc713f05e20a22e802b89a92f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e4fccad460342b1af30cb328cc8297751a218d78":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fc005279ab64cbf458ccef2ada610bc1a04b6139":["dffcd36f1a87df1300807d9580eb05aa37726397"],"a5ee4d410ec4b99dc713f05e20a22e802b89a92f":["e4fccad460342b1af30cb328cc8297751a218d78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fc005279ab64cbf458ccef2ada610bc1a04b6139"]},"commit2Childs":{"dffcd36f1a87df1300807d9580eb05aa37726397":["fc005279ab64cbf458ccef2ada610bc1a04b6139"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e4fccad460342b1af30cb328cc8297751a218d78"],"e4fccad460342b1af30cb328cc8297751a218d78":["a5ee4d410ec4b99dc713f05e20a22e802b89a92f"],"fc005279ab64cbf458ccef2ada610bc1a04b6139":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a5ee4d410ec4b99dc713f05e20a22e802b89a92f":["dffcd36f1a87df1300807d9580eb05aa37726397"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}