{"path":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNode().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNode().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNode().mjava","sourceNew":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNode() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs, false);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = 17L;\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = 42L;\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp3/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\", IOContext.DEFAULT);\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\", IOContext.DEFAULT);\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNode() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs, false);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = 17L;\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = 42L;\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp3/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\", IOContext.DEFAULT);\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\", IOContext.DEFAULT);\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"edb74c83fff94196b864e08ca033d92823252cb7","date":1339593164,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNode().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNode().mjava","sourceNew":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNode() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs, false, PackedInts.COMPACT);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = 17L;\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = 42L;\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp3/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\", IOContext.DEFAULT);\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\", IOContext.DEFAULT);\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNode() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs, false);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = 17L;\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = 42L;\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp3/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\", IOContext.DEFAULT);\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\", IOContext.DEFAULT);\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb8af2aec0a8574cf50cad6939d4475179595eca","date":1357675799,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNode().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNode().mjava","sourceNew":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNode() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs, false, PackedInts.COMPACT, true);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = 17L;\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = 42L;\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp3/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\", IOContext.DEFAULT);\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\", IOContext.DEFAULT);\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNode() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs, false, PackedInts.COMPACT);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = 17L;\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = 42L;\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp3/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\", IOContext.DEFAULT);\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\", IOContext.DEFAULT);\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNode().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNode().mjava","sourceNew":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNode() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs, false, PackedInts.COMPACT, true);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = 17L;\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = 42L;\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp3/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\", IOContext.DEFAULT);\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\", IOContext.DEFAULT);\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNode() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs, false, PackedInts.COMPACT);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = 17L;\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = 42L;\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp3/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\", IOContext.DEFAULT);\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\", IOContext.DEFAULT);\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0","date":1358188277,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNode().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNode().mjava","sourceNew":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNode() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs, false, PackedInts.COMPACT, true, 15);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = 17L;\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = 42L;\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp3/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\", IOContext.DEFAULT);\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\", IOContext.DEFAULT);\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNode() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs, false, PackedInts.COMPACT, true);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = 17L;\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = 42L;\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp3/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\", IOContext.DEFAULT);\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\", IOContext.DEFAULT);\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNode().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNode().mjava","sourceNew":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNode() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs, false, PackedInts.COMPACT, true, 15);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = 17L;\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = 42L;\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp3/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\", IOContext.DEFAULT);\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\", IOContext.DEFAULT);\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNode() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs, false, PackedInts.COMPACT, true);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = 17L;\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = 42L;\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp3/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\", IOContext.DEFAULT);\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\", IOContext.DEFAULT);\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b1e6a1c51433ebaa34dc0b76d7ab1876072be39","date":1370266419,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNode().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNode().mjava","sourceNew":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNode() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs, false, PackedInts.COMPACT, true, 15);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = 17L;\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = 42L;\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp3/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\", IOContext.DEFAULT);\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\", IOContext.DEFAULT);\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNode() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs, false, PackedInts.COMPACT, true, 15);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = 17L;\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = 42L;\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp3/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\", IOContext.DEFAULT);\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\", IOContext.DEFAULT);\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNode().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNode().mjava","sourceNew":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNode() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final FST<Long> fst = new FST<>(FST.INPUT_TYPE.BYTE1, outputs, false, PackedInts.COMPACT, true, 15);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = 17L;\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = 42L;\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp3/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\", IOContext.DEFAULT);\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\", IOContext.DEFAULT);\n    final FST<Long> fst2 = new FST<>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNode() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs, false, PackedInts.COMPACT, true, 15);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = 17L;\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = 42L;\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp3/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\", IOContext.DEFAULT);\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\", IOContext.DEFAULT);\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d245db17aaa41b338dae9da5d4edba4dd6f61612","date":1394644847,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNode().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNode().mjava","sourceNew":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNode() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final FST<Long> fst = new FST<>(FST.INPUT_TYPE.BYTE1, outputs, false, PackedInts.COMPACT, true, 15);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = 17L;\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = 42L;\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp3/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n\n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\", IOContext.DEFAULT);\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\", IOContext.DEFAULT);\n    final FST<Long> fst2 = new FST<>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNode() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final FST<Long> fst = new FST<>(FST.INPUT_TYPE.BYTE1, outputs, false, PackedInts.COMPACT, true, 15);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = 17L;\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = 42L;\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp3/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\", IOContext.DEFAULT);\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\", IOContext.DEFAULT);\n    final FST<Long> fst2 = new FST<>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1abb939fb41b2fe4f89fd518f3da288c0213341d","date":1435657417,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNode().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNode().mjava","sourceNew":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNode() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    //final FST<Long> fst = new FST<>(FST.INPUT_TYPE.BYTE1, outputs, false, PackedInts.COMPACT, 15);\n    final FST<Long> fst = b.fst;\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(b, node);\n      rootNode.arcs[0].nextFinalOutput = 17L;\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(b, node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = 42L;\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(b, rootNode));\n\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp3/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n\n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\", IOContext.DEFAULT);\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\", IOContext.DEFAULT);\n    final FST<Long> fst2 = new FST<>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNode() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final FST<Long> fst = new FST<>(FST.INPUT_TYPE.BYTE1, outputs, false, PackedInts.COMPACT, true, 15);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = 17L;\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = 42L;\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp3/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n\n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\", IOContext.DEFAULT);\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\", IOContext.DEFAULT);\n    final FST<Long> fst2 = new FST<>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f5661e6a04d3172e262ad741b717924f2f1b6a5","date":1576244274,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNode().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNode().mjava","sourceNew":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNode() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    final Long nothing = outputs.getNoOutput();\n    final FSTCompiler<Long> fstCompiler = new FSTCompiler<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    //final FST<Long> fst = new FST<>(FST.INPUT_TYPE.BYTE1, outputs, false, PackedInts.COMPACT, 15);\n    final FST<Long> fst = fstCompiler.fst;\n\n    final FSTCompiler.UnCompiledNode<Long> rootNode = new FSTCompiler.UnCompiledNode<>(fstCompiler, 0);\n\n    // Add final stop node\n    {\n      final FSTCompiler.UnCompiledNode<Long> node = new FSTCompiler.UnCompiledNode<>(fstCompiler, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final FSTCompiler.CompiledNode frozen = new FSTCompiler.CompiledNode();\n      frozen.node = fst.addNode(fstCompiler, node);\n      rootNode.arcs[0].nextFinalOutput = 17L;\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final FSTCompiler.UnCompiledNode<Long> node = new FSTCompiler.UnCompiledNode<>(fstCompiler, 0);\n      rootNode.addArc('b', node);\n      final FSTCompiler.CompiledNode frozen = new FSTCompiler.CompiledNode();\n      frozen.node = fst.addNode(fstCompiler, node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = 42L;\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(fstCompiler, rootNode));\n\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp3/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n\n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\", IOContext.DEFAULT);\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\", IOContext.DEFAULT);\n    final FST<Long> fst2 = new FST<>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNode() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    //final FST<Long> fst = new FST<>(FST.INPUT_TYPE.BYTE1, outputs, false, PackedInts.COMPACT, 15);\n    final FST<Long> fst = b.fst;\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(b, node);\n      rootNode.arcs[0].nextFinalOutput = 17L;\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(b, node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = 42L;\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(b, rootNode));\n\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp3/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n\n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\", IOContext.DEFAULT);\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\", IOContext.DEFAULT);\n    final FST<Long> fst2 = new FST<>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","date":1576247714,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNode().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNode().mjava","sourceNew":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNode() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    final Long nothing = outputs.getNoOutput();\n    final FSTCompiler<Long> fstCompiler = new FSTCompiler<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    //final FST<Long> fst = new FST<>(FST.INPUT_TYPE.BYTE1, outputs, false, PackedInts.COMPACT, 15);\n    final FST<Long> fst = fstCompiler.fst;\n\n    final FSTCompiler.UnCompiledNode<Long> rootNode = new FSTCompiler.UnCompiledNode<>(fstCompiler, 0);\n\n    // Add final stop node\n    {\n      final FSTCompiler.UnCompiledNode<Long> node = new FSTCompiler.UnCompiledNode<>(fstCompiler, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final FSTCompiler.CompiledNode frozen = new FSTCompiler.CompiledNode();\n      frozen.node = fst.addNode(fstCompiler, node);\n      rootNode.arcs[0].nextFinalOutput = 17L;\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final FSTCompiler.UnCompiledNode<Long> node = new FSTCompiler.UnCompiledNode<>(fstCompiler, 0);\n      rootNode.addArc('b', node);\n      final FSTCompiler.CompiledNode frozen = new FSTCompiler.CompiledNode();\n      frozen.node = fst.addNode(fstCompiler, node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = 42L;\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(fstCompiler, rootNode));\n\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp3/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n\n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\", IOContext.DEFAULT);\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\", IOContext.DEFAULT);\n    final FST<Long> fst2 = new FST<>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNode() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    //final FST<Long> fst = new FST<>(FST.INPUT_TYPE.BYTE1, outputs, false, PackedInts.COMPACT, 15);\n    final FST<Long> fst = b.fst;\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(b, node);\n      rootNode.arcs[0].nextFinalOutput = 17L;\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(b, node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = 42L;\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(b, rootNode));\n\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp3/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n\n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\", IOContext.DEFAULT);\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\", IOContext.DEFAULT);\n    final FST<Long> fst2 = new FST<>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99f06f5dd087b1829e7b4139e4d014c786b92572","date":1592312728,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNode().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNode().mjava","sourceNew":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNode() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    final Long nothing = outputs.getNoOutput();\n    final FSTCompiler<Long> fstCompiler = new FSTCompiler<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    //final FST<Long> fst = new FST<>(FST.INPUT_TYPE.BYTE1, outputs, false, PackedInts.COMPACT, 15);\n    final FST<Long> fst = fstCompiler.fst;\n\n    final FSTCompiler.UnCompiledNode<Long> rootNode = new FSTCompiler.UnCompiledNode<>(fstCompiler, 0);\n\n    // Add final stop node\n    {\n      final FSTCompiler.UnCompiledNode<Long> node = new FSTCompiler.UnCompiledNode<>(fstCompiler, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final FSTCompiler.CompiledNode frozen = new FSTCompiler.CompiledNode();\n      frozen.node = fst.addNode(fstCompiler, node);\n      rootNode.arcs[0].nextFinalOutput = 17L;\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final FSTCompiler.UnCompiledNode<Long> node = new FSTCompiler.UnCompiledNode<>(fstCompiler, 0);\n      rootNode.addArc('b', node);\n      final FSTCompiler.CompiledNode frozen = new FSTCompiler.CompiledNode();\n      frozen.node = fst.addNode(fstCompiler, node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = 42L;\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(fstCompiler, rootNode));\n\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp3/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n\n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\", IOContext.DEFAULT);\n    fst.save(out, out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\", IOContext.DEFAULT);\n    final FST<Long> fst2 = new FST<>(in, in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNode() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    final Long nothing = outputs.getNoOutput();\n    final FSTCompiler<Long> fstCompiler = new FSTCompiler<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    //final FST<Long> fst = new FST<>(FST.INPUT_TYPE.BYTE1, outputs, false, PackedInts.COMPACT, 15);\n    final FST<Long> fst = fstCompiler.fst;\n\n    final FSTCompiler.UnCompiledNode<Long> rootNode = new FSTCompiler.UnCompiledNode<>(fstCompiler, 0);\n\n    // Add final stop node\n    {\n      final FSTCompiler.UnCompiledNode<Long> node = new FSTCompiler.UnCompiledNode<>(fstCompiler, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final FSTCompiler.CompiledNode frozen = new FSTCompiler.CompiledNode();\n      frozen.node = fst.addNode(fstCompiler, node);\n      rootNode.arcs[0].nextFinalOutput = 17L;\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final FSTCompiler.UnCompiledNode<Long> node = new FSTCompiler.UnCompiledNode<>(fstCompiler, 0);\n      rootNode.addArc('b', node);\n      final FSTCompiler.CompiledNode frozen = new FSTCompiler.CompiledNode();\n      frozen.node = fst.addNode(fstCompiler, node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = 42L;\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(fstCompiler, rootNode));\n\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp3/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n\n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\", IOContext.DEFAULT);\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\", IOContext.DEFAULT);\n    final FST<Long> fst2 = new FST<>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1abb939fb41b2fe4f89fd518f3da288c0213341d":["d245db17aaa41b338dae9da5d4edba4dd6f61612"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6b1e6a1c51433ebaa34dc0b76d7ab1876072be39"],"d245db17aaa41b338dae9da5d4edba4dd6f61612":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0":["fb8af2aec0a8574cf50cad6939d4475179595eca"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["4e6354dd7c71fe122926fc53d7d29f715b1283db","d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"],"99f06f5dd087b1829e7b4139e4d014c786b92572":["0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"fb8af2aec0a8574cf50cad6939d4475179595eca":["edb74c83fff94196b864e08ca033d92823252cb7"],"6b1e6a1c51433ebaa34dc0b76d7ab1876072be39":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"edb74c83fff94196b864e08ca033d92823252cb7":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":["1abb939fb41b2fe4f89fd518f3da288c0213341d","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["1abb939fb41b2fe4f89fd518f3da288c0213341d"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["edb74c83fff94196b864e08ca033d92823252cb7","fb8af2aec0a8574cf50cad6939d4475179595eca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["99f06f5dd087b1829e7b4139e4d014c786b92572"]},"commit2Childs":{"1abb939fb41b2fe4f89fd518f3da288c0213341d":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d245db17aaa41b338dae9da5d4edba4dd6f61612"],"d245db17aaa41b338dae9da5d4edba4dd6f61612":["1abb939fb41b2fe4f89fd518f3da288c0213341d"],"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0":["8917bfede3b4ca30f4305c1e391e9218959cd723","6b1e6a1c51433ebaa34dc0b76d7ab1876072be39"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["edb74c83fff94196b864e08ca033d92823252cb7"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"99f06f5dd087b1829e7b4139e4d014c786b92572":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fb8af2aec0a8574cf50cad6939d4475179595eca":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"6b1e6a1c51433ebaa34dc0b76d7ab1876072be39":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"edb74c83fff94196b864e08ca033d92823252cb7":["fb8af2aec0a8574cf50cad6939d4475179595eca","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":[],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["99f06f5dd087b1829e7b4139e4d014c786b92572","c5db9bff3aeb942c848a2ab8fa4b8b0737377deb"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["8917bfede3b4ca30f4305c1e391e9218959cd723"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8917bfede3b4ca30f4305c1e391e9218959cd723","c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}