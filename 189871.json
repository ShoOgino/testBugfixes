{"path":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingBulkOutOfOrderScorer#score(Collector,int).mjava","commits":[{"id":"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","date":1394564625,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingBulkOutOfOrderScorer#score(Collector,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean score(Collector collector, int max) throws IOException {\n    if (scorer.docID() == -1) {\n      scorer.nextDoc();\n    }\n\n    FakeScorer fake = new FakeScorer();\n    collector.setScorer(fake);\n\n    final int bufferSize = 1 + random.nextInt(100);\n    final int[] docIDs = new int[bufferSize];\n    final float[] scores = new float[bufferSize];\n    final int[] freqs = new int[bufferSize];\n\n    int buffered = 0;\n    int doc = scorer.docID();\n    while (doc < max) {\n      docIDs[buffered] = doc;\n      scores[buffered] = scorer.score();\n      freqs[buffered] = scorer.freq();\n\n      if (++buffered == bufferSize) {\n        shuffle(docIDs, scores, freqs, buffered);\n        flush(docIDs, scores, freqs, buffered, fake, collector);\n        buffered = 0;\n      }\n      doc = scorer.nextDoc();\n    }\n\n    shuffle(docIDs, scores, freqs, buffered);\n    flush(docIDs, scores, freqs, buffered, fake, collector);\n\n    return doc != Scorer.NO_MORE_DOCS;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingBulkOutOfOrderScorer#score(Collector,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer#scoreInRandomOrder(Collector).mjava","sourceNew":"  @Override\n  public boolean score(Collector collector, int max) throws IOException {\n    if (scorer.docID() == -1) {\n      scorer.nextDoc();\n    }\n\n    FakeScorer fake = new FakeScorer();\n    collector.setScorer(fake);\n\n    final int bufferSize = 1 + random.nextInt(100);\n    final int[] docIDs = new int[bufferSize];\n    final float[] scores = new float[bufferSize];\n    final int[] freqs = new int[bufferSize];\n\n    int buffered = 0;\n    int doc = scorer.docID();\n    while (doc < max) {\n      docIDs[buffered] = doc;\n      scores[buffered] = scorer.score();\n      freqs[buffered] = scorer.freq();\n\n      if (++buffered == bufferSize) {\n        shuffle(docIDs, scores, freqs, buffered);\n        flush(docIDs, scores, freqs, buffered, fake, collector);\n        buffered = 0;\n      }\n      doc = scorer.nextDoc();\n    }\n\n    shuffle(docIDs, scores, freqs, buffered);\n    flush(docIDs, scores, freqs, buffered, fake, collector);\n\n    return doc != Scorer.NO_MORE_DOCS;\n  }\n\n","sourceOld":"  private void scoreInRandomOrder(Collector collector) throws IOException {\n    assert docID() == -1; // not started\n    FakeScorer fake = new FakeScorer(this);\n    collector.setScorer(fake);\n\n    final int bufferSize = 1 + random.nextInt(100);\n    final int[] docIDs = new int[bufferSize];\n    final float[] scores = new float[bufferSize];\n    final int[] freqs = new int[bufferSize];\n\n    int buffered = 0;\n    int doc;\n    while ((doc = nextDoc()) != NO_MORE_DOCS) {\n      docIDs[buffered] = doc;\n      scores[buffered] = score();\n      freqs[buffered] = freq();\n\n      if (++buffered == bufferSize) {\n        shuffle(docIDs, scores, freqs, buffered);\n        flush(docIDs, scores, freqs, buffered, fake, collector);\n        buffered = 0;\n      }\n    }\n\n    shuffle(docIDs, scores, freqs, buffered);\n    flush(docIDs, scores, freqs, buffered, fake, collector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae73da626f97850c922c42736f808d0378e165f0","date":1396625460,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingBulkOutOfOrderScorer#score(LeafCollector,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingBulkOutOfOrderScorer#score(Collector,int).mjava","sourceNew":"  @Override\n  public boolean score(LeafCollector collector, int max) throws IOException {\n    if (scorer.docID() == -1) {\n      scorer.nextDoc();\n    }\n\n    FakeScorer fake = new FakeScorer();\n    collector.setScorer(fake);\n\n    final int bufferSize = 1 + random.nextInt(100);\n    final int[] docIDs = new int[bufferSize];\n    final float[] scores = new float[bufferSize];\n    final int[] freqs = new int[bufferSize];\n\n    int buffered = 0;\n    int doc = scorer.docID();\n    while (doc < max) {\n      docIDs[buffered] = doc;\n      scores[buffered] = scorer.score();\n      freqs[buffered] = scorer.freq();\n\n      if (++buffered == bufferSize) {\n        shuffle(docIDs, scores, freqs, buffered);\n        flush(docIDs, scores, freqs, buffered, fake, collector);\n        buffered = 0;\n      }\n      doc = scorer.nextDoc();\n    }\n\n    shuffle(docIDs, scores, freqs, buffered);\n    flush(docIDs, scores, freqs, buffered, fake, collector);\n\n    return doc != Scorer.NO_MORE_DOCS;\n  }\n\n","sourceOld":"  @Override\n  public boolean score(Collector collector, int max) throws IOException {\n    if (scorer.docID() == -1) {\n      scorer.nextDoc();\n    }\n\n    FakeScorer fake = new FakeScorer();\n    collector.setScorer(fake);\n\n    final int bufferSize = 1 + random.nextInt(100);\n    final int[] docIDs = new int[bufferSize];\n    final float[] scores = new float[bufferSize];\n    final int[] freqs = new int[bufferSize];\n\n    int buffered = 0;\n    int doc = scorer.docID();\n    while (doc < max) {\n      docIDs[buffered] = doc;\n      scores[buffered] = scorer.score();\n      freqs[buffered] = scorer.freq();\n\n      if (++buffered == bufferSize) {\n        shuffle(docIDs, scores, freqs, buffered);\n        flush(docIDs, scores, freqs, buffered, fake, collector);\n        buffered = 0;\n      }\n      doc = scorer.nextDoc();\n    }\n\n    shuffle(docIDs, scores, freqs, buffered);\n    flush(docIDs, scores, freqs, buffered, fake, collector);\n\n    return doc != Scorer.NO_MORE_DOCS;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":4,"author":"Dawid Weiss","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingBulkOutOfOrderScorer#score(Collector,int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public boolean score(Collector collector, int max) throws IOException {\n    if (scorer.docID() == -1) {\n      scorer.nextDoc();\n    }\n\n    FakeScorer fake = new FakeScorer();\n    collector.setScorer(fake);\n\n    final int bufferSize = 1 + random.nextInt(100);\n    final int[] docIDs = new int[bufferSize];\n    final float[] scores = new float[bufferSize];\n    final int[] freqs = new int[bufferSize];\n\n    int buffered = 0;\n    int doc = scorer.docID();\n    while (doc < max) {\n      docIDs[buffered] = doc;\n      scores[buffered] = scorer.score();\n      freqs[buffered] = scorer.freq();\n\n      if (++buffered == bufferSize) {\n        shuffle(docIDs, scores, freqs, buffered);\n        flush(docIDs, scores, freqs, buffered, fake, collector);\n        buffered = 0;\n      }\n      doc = scorer.nextDoc();\n    }\n\n    shuffle(docIDs, scores, freqs, buffered);\n    flush(docIDs, scores, freqs, buffered, fake, collector);\n\n    return doc != Scorer.NO_MORE_DOCS;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["acf00221f44c5f08ccea014f2492b53af15ecd66","ae73da626f97850c922c42736f808d0378e165f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae73da626f97850c922c42736f808d0378e165f0":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a58bbbe1c866963764d3f15d3a26a6a85f6c6af4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ae73da626f97850c922c42736f808d0378e165f0"]},"commit2Childs":{"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","acf00221f44c5f08ccea014f2492b53af15ecd66"],"ae73da626f97850c922c42736f808d0378e165f0":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","ae73da626f97850c922c42736f808d0378e165f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}