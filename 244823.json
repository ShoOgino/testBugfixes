{"path":"lucene/classification/src/test/org/apache/lucene/classification/BooleanPerceptronClassifierTest#testBasicUsageWithQuery().mjava","commits":[{"id":"f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e","date":1381993379,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/BooleanPerceptronClassifierTest#testBasicUsageWithQuery().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBasicUsageWithQuery() throws Exception {\n    checkCorrectClassification(new BooleanPerceptronClassifier(), TECHNOLOGY_INPUT, false, new MockAnalyzer(random()), textFieldName, booleanFieldName, new TermQuery(new Term(textFieldName, \"it\")));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"360ff513ddb24a30ffa2111a3ef0f91038803100","date":1430403123,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/BooleanPerceptronClassifierTest#testBasicUsageWithQuery().mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/BooleanPerceptronClassifierTest#testBasicUsageWithQuery().mjava","sourceNew":"  @Test\n  public void testBasicUsageWithQuery() throws Exception {\n    TermQuery query = new TermQuery(new Term(textFieldName, \"it\"));\n    LeafReader leafReader = null;\n    try {\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      leafReader = populateSampleIndex(analyzer);\n      checkCorrectClassification(new BooleanPerceptronClassifier(leafReader, textFieldName, booleanFieldName, analyzer, query, 1, null), TECHNOLOGY_INPUT, false);\n    } finally {\n      if (leafReader != null) {\n        leafReader.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBasicUsageWithQuery() throws Exception {\n    checkCorrectClassification(new BooleanPerceptronClassifier(), TECHNOLOGY_INPUT, false, new MockAnalyzer(random()), textFieldName, booleanFieldName, new TermQuery(new Term(textFieldName, \"it\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fdf5b5fada99884e038af8394cd1d14078f3d852","date":1431450289,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/BooleanPerceptronClassifierTest#testBasicUsageWithQuery().mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/BooleanPerceptronClassifierTest#testBasicUsageWithQuery().mjava","sourceNew":"  @Test\n  public void testBasicUsageWithQuery() throws Exception {\n    TermQuery query = new TermQuery(new Term(textFieldName, \"it\"));\n    LeafReader leafReader = null;\n    try {\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      leafReader = populateSampleIndex(analyzer);\n      checkCorrectClassification(new BooleanPerceptronClassifier(leafReader, analyzer, query, 1, null, booleanFieldName, textFieldName), TECHNOLOGY_INPUT, false);\n    } finally {\n      if (leafReader != null) {\n        leafReader.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBasicUsageWithQuery() throws Exception {\n    TermQuery query = new TermQuery(new Term(textFieldName, \"it\"));\n    LeafReader leafReader = null;\n    try {\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      leafReader = populateSampleIndex(analyzer);\n      checkCorrectClassification(new BooleanPerceptronClassifier(leafReader, textFieldName, booleanFieldName, analyzer, query, 1, null), TECHNOLOGY_INPUT, false);\n    } finally {\n      if (leafReader != null) {\n        leafReader.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba9b7b122d927a15ff4837e3d72876c609fef1b","date":1441232513,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/BooleanPerceptronClassifierTest#testBasicUsageWithQuery().mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/BooleanPerceptronClassifierTest#testBasicUsageWithQuery().mjava","sourceNew":"  @Test\n  public void testBasicUsageWithQuery() throws Exception {\n    TermQuery query = new TermQuery(new Term(textFieldName, \"it\"));\n    LeafReader leafReader = null;\n    try {\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      leafReader = getSampleIndex(analyzer);\n      checkCorrectClassification(new BooleanPerceptronClassifier(leafReader, analyzer, query, 1, null, booleanFieldName, textFieldName), TECHNOLOGY_INPUT, false);\n    } finally {\n      if (leafReader != null) {\n        leafReader.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBasicUsageWithQuery() throws Exception {\n    TermQuery query = new TermQuery(new Term(textFieldName, \"it\"));\n    LeafReader leafReader = null;\n    try {\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      leafReader = populateSampleIndex(analyzer);\n      checkCorrectClassification(new BooleanPerceptronClassifier(leafReader, analyzer, query, 1, null, booleanFieldName, textFieldName), TECHNOLOGY_INPUT, false);\n    } finally {\n      if (leafReader != null) {\n        leafReader.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f47bd829c0cc2c9959c321f4b5ffba15e58fa41","date":1491555560,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/BooleanPerceptronClassifierTest#testBasicUsageWithQuery().mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/BooleanPerceptronClassifierTest#testBasicUsageWithQuery().mjava","sourceNew":"  @Test\n  public void testBasicUsageWithQuery() throws Exception {\n    TermQuery query = new TermQuery(new Term(textFieldName, \"of\"));\n    LeafReader leafReader = null;\n    try {\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      leafReader = getSampleIndex(analyzer);\n      BooleanPerceptronClassifier classifier = new BooleanPerceptronClassifier(leafReader, analyzer, query, 1, null, booleanFieldName, textFieldName);\n      checkCorrectClassification(classifier, TECHNOLOGY_INPUT, false);\n      checkCorrectClassification(classifier, POLITICS_INPUT, true);\n    } finally {\n      if (leafReader != null) {\n        leafReader.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBasicUsageWithQuery() throws Exception {\n    TermQuery query = new TermQuery(new Term(textFieldName, \"it\"));\n    LeafReader leafReader = null;\n    try {\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      leafReader = getSampleIndex(analyzer);\n      checkCorrectClassification(new BooleanPerceptronClassifier(leafReader, analyzer, query, 1, null, booleanFieldName, textFieldName), TECHNOLOGY_INPUT, false);\n    } finally {\n      if (leafReader != null) {\n        leafReader.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/BooleanPerceptronClassifierTest#testBasicUsageWithQuery().mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/BooleanPerceptronClassifierTest#testBasicUsageWithQuery().mjava","sourceNew":"  @Test\n  public void testBasicUsageWithQuery() throws Exception {\n    TermQuery query = new TermQuery(new Term(textFieldName, \"of\"));\n    LeafReader leafReader = null;\n    try {\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      leafReader = getSampleIndex(analyzer);\n      BooleanPerceptronClassifier classifier = new BooleanPerceptronClassifier(leafReader, analyzer, query, 1, null, booleanFieldName, textFieldName);\n      checkCorrectClassification(classifier, TECHNOLOGY_INPUT, false);\n      checkCorrectClassification(classifier, POLITICS_INPUT, true);\n    } finally {\n      if (leafReader != null) {\n        leafReader.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBasicUsageWithQuery() throws Exception {\n    TermQuery query = new TermQuery(new Term(textFieldName, \"it\"));\n    LeafReader leafReader = null;\n    try {\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      leafReader = getSampleIndex(analyzer);\n      checkCorrectClassification(new BooleanPerceptronClassifier(leafReader, analyzer, query, 1, null, booleanFieldName, textFieldName), TECHNOLOGY_INPUT, false);\n    } finally {\n      if (leafReader != null) {\n        leafReader.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["9ba9b7b122d927a15ff4837e3d72876c609fef1b"],"9ba9b7b122d927a15ff4837e3d72876c609fef1b":["fdf5b5fada99884e038af8394cd1d14078f3d852"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f47bd829c0cc2c9959c321f4b5ffba15e58fa41":["9ba9b7b122d927a15ff4837e3d72876c609fef1b"],"f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fdf5b5fada99884e038af8394cd1d14078f3d852":["360ff513ddb24a30ffa2111a3ef0f91038803100"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f47bd829c0cc2c9959c321f4b5ffba15e58fa41"],"360ff513ddb24a30ffa2111a3ef0f91038803100":["f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"9ba9b7b122d927a15ff4837e3d72876c609fef1b":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","0f47bd829c0cc2c9959c321f4b5ffba15e58fa41"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e"],"0f47bd829c0cc2c9959c321f4b5ffba15e58fa41":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e":["360ff513ddb24a30ffa2111a3ef0f91038803100"],"fdf5b5fada99884e038af8394cd1d14078f3d852":["9ba9b7b122d927a15ff4837e3d72876c609fef1b"],"360ff513ddb24a30ffa2111a3ef0f91038803100":["fdf5b5fada99884e038af8394cd1d14078f3d852"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}