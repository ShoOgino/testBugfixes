{"path":"lucene/src/test/org/apache/lucene/index/codecs/lucene40/TestReuseDocsEnum#testReuseDocsEnumSameBitsOrNull().mjava","commits":[{"id":"2fbe641a3ba9e8ab6b19044e4e89b979bfebbed1","date":1324025015,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/lucene40/TestReuseDocsEnum#testReuseDocsEnumSameBitsOrNull().mjava","pathOld":"/dev/null","sourceNew":"  // tests for reuse only if bits are the same either null or the same instance\n  public void testReuseDocsEnumSameBitsOrNull() throws IOException {\n    Directory dir = newDirectory();\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat());\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodec(cp));\n    int numdocs = atLeast(20);\n    createRandomIndex(numdocs, writer, random);\n    writer.commit();\n\n    IndexReader open = IndexReader.open(dir);\n    IndexReader[] sequentialSubReaders = open.getSequentialSubReaders();\n    for (IndexReader indexReader : sequentialSubReaders) {\n      Terms terms = indexReader.terms(\"body\");\n      TermsEnum iterator = terms.iterator(null);\n      IdentityHashMap<DocsEnum, Boolean> enums = new IdentityHashMap<DocsEnum, Boolean>();\n      MatchNoBits bits = new Bits.MatchNoBits(open.maxDoc());\n      DocsEnum docs = null;\n      while ((iterator.next()) != null) {\n        docs = iterator.docs(bits, docs, random.nextBoolean());\n        enums.put(docs, true);\n      }\n      \n      assertEquals(1, enums.size());\n      enums.clear();\n      iterator = terms.iterator(null);\n      docs = null;\n      while ((iterator.next()) != null) {\n        docs = iterator.docs(new Bits.MatchNoBits(open.maxDoc()), docs, random.nextBoolean());\n        enums.put(docs, true);\n      }\n      assertEquals(terms.getUniqueTermCount(), enums.size());  \n      \n      enums.clear();\n      iterator = terms.iterator(null);\n      docs = null;\n      while ((iterator.next()) != null) {\n        docs = iterator.docs(null, docs, random.nextBoolean());\n        enums.put(docs, true);\n      }\n      assertEquals(1, enums.size());  \n    }\n    IOUtils.close(writer, open, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/codecs/lucene40/TestReuseDocsEnum#testReuseDocsEnumSameBitsOrNull().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/lucene40/TestReuseDocsEnum#testReuseDocsEnumSameBitsOrNull().mjava","sourceNew":"  // tests for reuse only if bits are the same either null or the same instance\n  public void testReuseDocsEnumSameBitsOrNull() throws IOException {\n    Directory dir = newDirectory();\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat());\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodec(cp));\n    int numdocs = atLeast(20);\n    createRandomIndex(numdocs, writer, random);\n    writer.commit();\n\n    IndexReader open = IndexReader.open(dir);\n    IndexReader[] sequentialSubReaders = open.getSequentialSubReaders();\n    for (IndexReader indexReader : sequentialSubReaders) {\n      Terms terms = indexReader.terms(\"body\");\n      TermsEnum iterator = terms.iterator(null);\n      IdentityHashMap<DocsEnum, Boolean> enums = new IdentityHashMap<DocsEnum, Boolean>();\n      MatchNoBits bits = new Bits.MatchNoBits(open.maxDoc());\n      DocsEnum docs = null;\n      while ((iterator.next()) != null) {\n        docs = iterator.docs(bits, docs, random.nextBoolean());\n        enums.put(docs, true);\n      }\n      \n      assertEquals(1, enums.size());\n      enums.clear();\n      iterator = terms.iterator(null);\n      docs = null;\n      while ((iterator.next()) != null) {\n        docs = iterator.docs(new Bits.MatchNoBits(open.maxDoc()), docs, random.nextBoolean());\n        enums.put(docs, true);\n      }\n      assertEquals(terms.getUniqueTermCount(), enums.size());  \n      \n      enums.clear();\n      iterator = terms.iterator(null);\n      docs = null;\n      while ((iterator.next()) != null) {\n        docs = iterator.docs(null, docs, random.nextBoolean());\n        enums.put(docs, true);\n      }\n      assertEquals(1, enums.size());  \n    }\n    IOUtils.close(writer, open, dir);\n  }\n\n","sourceOld":"  // tests for reuse only if bits are the same either null or the same instance\n  public void testReuseDocsEnumSameBitsOrNull() throws IOException {\n    Directory dir = newDirectory();\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat());\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodec(cp));\n    int numdocs = atLeast(20);\n    createRandomIndex(numdocs, writer, random);\n    writer.commit();\n\n    IndexReader open = IndexReader.open(dir);\n    IndexReader[] sequentialSubReaders = open.getSequentialSubReaders();\n    for (IndexReader indexReader : sequentialSubReaders) {\n      Terms terms = indexReader.terms(\"body\");\n      TermsEnum iterator = terms.iterator(null);\n      IdentityHashMap<DocsEnum, Boolean> enums = new IdentityHashMap<DocsEnum, Boolean>();\n      MatchNoBits bits = new Bits.MatchNoBits(open.maxDoc());\n      DocsEnum docs = null;\n      while ((iterator.next()) != null) {\n        docs = iterator.docs(bits, docs, random.nextBoolean());\n        enums.put(docs, true);\n      }\n      \n      assertEquals(1, enums.size());\n      enums.clear();\n      iterator = terms.iterator(null);\n      docs = null;\n      while ((iterator.next()) != null) {\n        docs = iterator.docs(new Bits.MatchNoBits(open.maxDoc()), docs, random.nextBoolean());\n        enums.put(docs, true);\n      }\n      assertEquals(terms.getUniqueTermCount(), enums.size());  \n      \n      enums.clear();\n      iterator = terms.iterator(null);\n      docs = null;\n      while ((iterator.next()) != null) {\n        docs = iterator.docs(null, docs, random.nextBoolean());\n        enums.put(docs, true);\n      }\n      assertEquals(1, enums.size());  \n    }\n    IOUtils.close(writer, open, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2fbe641a3ba9e8ab6b19044e4e89b979bfebbed1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["2fbe641a3ba9e8ab6b19044e4e89b979bfebbed1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2fbe641a3ba9e8ab6b19044e4e89b979bfebbed1"],"2fbe641a3ba9e8ab6b19044e4e89b979bfebbed1":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}