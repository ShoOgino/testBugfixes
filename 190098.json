{"path":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#JmxMonitoredMap(String,String,String,JmxConfiguration).mjava","commits":[{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#JmxMonitoredMap(String,String,String,JmxConfiguration).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#JmxMonitoredMap(String,String,JmxConfiguration).mjava","sourceNew":"  public JmxMonitoredMap(String coreName, String coreHashCode, String registryName,\n                         final JmxConfiguration jmxConfig) {\n    this.coreHashCode = coreHashCode;\n    this.registryName = registryName;\n    jmxRootName = (null != jmxConfig.rootName ?\n                   jmxConfig.rootName\n                   : (\"solr\" + (null != coreName ? \"/\" + coreName : \"\")));\n      \n    if (jmxConfig.serviceUrl == null) {\n      List<MBeanServer> servers = null;\n\n      if (jmxConfig.agentId == null) {\n        // Try to find the first MBeanServer\n        servers = MBeanServerFactory.findMBeanServer(null);\n      } else if (jmxConfig.agentId != null) {\n        // Try to find the first MBean server with the given agentId\n        servers = MBeanServerFactory.findMBeanServer(jmxConfig.agentId);\n        // throw Exception if no servers were found with the given agentId\n        if (servers == null || servers.isEmpty())\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"No JMX Servers found with agentId: \" + jmxConfig.agentId);\n      }\n\n      if (servers == null || servers.isEmpty()) {\n        server = null;\n        nameFactory = null;\n        log.debug(\"No JMX servers found, not exposing Solr information with JMX.\");\n        return;\n      }\n      server = servers.get(0);\n      log.info(\"JMX monitoring is enabled. Adding Solr mbeans to JMX Server: \"\n               + server);\n    } else {\n      MBeanServer newServer = null;\n      try {\n        // Create a new MBeanServer with the given serviceUrl\n        newServer = MBeanServerFactory.newMBeanServer();\n        JMXConnectorServer connector = JMXConnectorServerFactory\n                .newJMXConnectorServer(new JMXServiceURL(jmxConfig.serviceUrl),\n                        null, newServer);\n        connector.start();\n        log.info(\"JMX monitoring is enabled at \" + jmxConfig.serviceUrl);\n      } catch (Exception e) {\n        // Release the reference\n        throw new RuntimeException(\"Could not start JMX monitoring \", e);\n      }\n      server = newServer;\n    }\n    nameFactory = new JmxObjectNameFactory(REPORTER_NAME + coreHashCode, registryName);\n  }\n\n","sourceOld":"  public JmxMonitoredMap(String coreName, String coreHashCode,\n                         final JmxConfiguration jmxConfig) {\n    this.coreHashCode = coreHashCode;\n    jmxRootName = (null != jmxConfig.rootName ?\n                   jmxConfig.rootName\n                   : (\"solr\" + (null != coreName ? \"/\" + coreName : \"\")));\n      \n    if (jmxConfig.serviceUrl == null) {\n      List<MBeanServer> servers = null;\n\n      if (jmxConfig.agentId == null) {\n        // Try to find the first MBeanServer\n        servers = MBeanServerFactory.findMBeanServer(null);\n      } else if (jmxConfig.agentId != null) {\n        // Try to find the first MBean server with the given agentId\n        servers = MBeanServerFactory.findMBeanServer(jmxConfig.agentId);\n        // throw Exception if no servers were found with the given agentId\n        if (servers == null || servers.isEmpty())\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"No JMX Servers found with agentId: \" + jmxConfig.agentId);\n      }\n\n      if (servers == null || servers.isEmpty()) {\n        server = null;\n        registryName = null;\n        nameFactory = null;\n        log.debug(\"No JMX servers found, not exposing Solr information with JMX.\");\n        return;\n      }\n      server = servers.get(0);\n      log.info(\"JMX monitoring is enabled. Adding Solr mbeans to JMX Server: \"\n               + server);\n    } else {\n      MBeanServer newServer = null;\n      try {\n        // Create a new MBeanServer with the given serviceUrl\n        newServer = MBeanServerFactory.newMBeanServer();\n        JMXConnectorServer connector = JMXConnectorServerFactory\n                .newJMXConnectorServer(new JMXServiceURL(jmxConfig.serviceUrl),\n                        null, newServer);\n        connector.start();\n        log.info(\"JMX monitoring is enabled at \" + jmxConfig.serviceUrl);\n      } catch (Exception e) {\n        // Release the reference\n        throw new RuntimeException(\"Could not start JMX monitoring \", e);\n      }\n      server = newServer;\n    }\n    registryName = SolrCoreMetricManager.createRegistryName(null, coreName);\n    nameFactory = new JmxObjectNameFactory(REPORTER_NAME + coreHashCode, registryName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#JmxMonitoredMap(String,String,String,JmxConfiguration).mjava","sourceNew":null,"sourceOld":"  public JmxMonitoredMap(String coreName, String coreHashCode, String registryName,\n                         final JmxConfiguration jmxConfig) {\n    this.coreHashCode = coreHashCode;\n    this.registryName = registryName;\n    jmxRootName = (null != jmxConfig.rootName ?\n                   jmxConfig.rootName\n                   : (\"solr\" + (null != coreName ? \"/\" + coreName : \"\")));\n      \n    if (jmxConfig.serviceUrl == null) {\n      List<MBeanServer> servers = null;\n\n      if (jmxConfig.agentId == null) {\n        // Try to find the first MBeanServer\n        servers = MBeanServerFactory.findMBeanServer(null);\n      } else if (jmxConfig.agentId != null) {\n        // Try to find the first MBean server with the given agentId\n        servers = MBeanServerFactory.findMBeanServer(jmxConfig.agentId);\n        // throw Exception if no servers were found with the given agentId\n        if (servers == null || servers.isEmpty())\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"No JMX Servers found with agentId: \" + jmxConfig.agentId);\n      }\n\n      if (servers == null || servers.isEmpty()) {\n        server = null;\n        nameFactory = null;\n        log.debug(\"No JMX servers found, not exposing Solr information with JMX.\");\n        return;\n      }\n      server = servers.get(0);\n      log.info(\"JMX monitoring is enabled. Adding Solr mbeans to JMX Server: \"\n               + server);\n    } else {\n      MBeanServer newServer = null;\n      try {\n        // Create a new MBeanServer with the given serviceUrl\n        newServer = MBeanServerFactory.newMBeanServer();\n        JMXConnectorServer connector = JMXConnectorServerFactory\n                .newJMXConnectorServer(new JMXServiceURL(jmxConfig.serviceUrl),\n                        null, newServer);\n        connector.start();\n        log.info(\"JMX monitoring is enabled at \" + jmxConfig.serviceUrl);\n      } catch (Exception e) {\n        // Release the reference\n        throw new RuntimeException(\"Could not start JMX monitoring \", e);\n      }\n      server = newServer;\n    }\n    nameFactory = new JmxObjectNameFactory(REPORTER_NAME + coreHashCode, registryName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#JmxMonitoredMap(String,String,String,JmxConfiguration).mjava","sourceNew":null,"sourceOld":"  public JmxMonitoredMap(String coreName, String coreHashCode, String registryName,\n                         final JmxConfiguration jmxConfig) {\n    this.coreHashCode = coreHashCode;\n    this.registryName = registryName;\n    jmxRootName = (null != jmxConfig.rootName ?\n                   jmxConfig.rootName\n                   : (\"solr\" + (null != coreName ? \"/\" + coreName : \"\")));\n      \n    if (jmxConfig.serviceUrl == null) {\n      List<MBeanServer> servers = null;\n\n      if (jmxConfig.agentId == null) {\n        // Try to find the first MBeanServer\n        servers = MBeanServerFactory.findMBeanServer(null);\n      } else if (jmxConfig.agentId != null) {\n        // Try to find the first MBean server with the given agentId\n        servers = MBeanServerFactory.findMBeanServer(jmxConfig.agentId);\n        // throw Exception if no servers were found with the given agentId\n        if (servers == null || servers.isEmpty())\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"No JMX Servers found with agentId: \" + jmxConfig.agentId);\n      }\n\n      if (servers == null || servers.isEmpty()) {\n        server = null;\n        nameFactory = null;\n        log.debug(\"No JMX servers found, not exposing Solr information with JMX.\");\n        return;\n      }\n      server = servers.get(0);\n      log.info(\"JMX monitoring is enabled. Adding Solr mbeans to JMX Server: \"\n               + server);\n    } else {\n      MBeanServer newServer = null;\n      try {\n        // Create a new MBeanServer with the given serviceUrl\n        newServer = MBeanServerFactory.newMBeanServer();\n        JMXConnectorServer connector = JMXConnectorServerFactory\n                .newJMXConnectorServer(new JMXServiceURL(jmxConfig.serviceUrl),\n                        null, newServer);\n        connector.start();\n        log.info(\"JMX monitoring is enabled at \" + jmxConfig.serviceUrl);\n      } catch (Exception e) {\n        // Release the reference\n        throw new RuntimeException(\"Could not start JMX monitoring \", e);\n      }\n      server = newServer;\n    }\n    nameFactory = new JmxObjectNameFactory(REPORTER_NAME + coreHashCode, registryName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"816521ebaad5add9cb96bb88c577394e2938c40b":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["816521ebaad5add9cb96bb88c577394e2938c40b"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"816521ebaad5add9cb96bb88c577394e2938c40b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}