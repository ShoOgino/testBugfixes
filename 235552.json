{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSortedMapBackedCache#testNullKeys().mjava","commits":[{"id":"5ca2e21bffe25de677a4ed8bde879968e4c5da6b","date":1347636388,"type":0,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSortedMapBackedCache#testNullKeys().mjava","pathOld":"/dev/null","sourceNew":"\t@Test\n\tpublic void testNullKeys() throws Exception {\n\t  //A null key should just be ignored, but not throw an exception\n\t  DIHCache cache = null;\n\t  try {\n\t    cache = new SortedMapBackedCache();\n\t    Map<String, String> cacheProps = new HashMap<String, String>();\n      cacheProps.put(DIHCacheSupport.CACHE_PRIMARY_KEY, \"a_id\");\n      cache.open(getContext(cacheProps));\n      \n      Map<String,Object> data = new HashMap<String,Object>();\n      data.put(\"a_id\", null);\n      data.put(\"bogus\", \"data\");\n      cache.add(data);\n      \n      Iterator<Map<String, Object>> cacheIter = cache.iterator();\n      while (cacheIter.hasNext()) {\n        Assert.fail(\"cache should be empty.\");\n      }\n      Assert.assertNull(cache.iterator(null));\n      cache.delete(null);      \n\t  } catch (Exception e) {\n\t    throw e;\n    } finally {\n      try {\n        cache.destroy();\n      } catch (Exception ex) {\n      }\n    }\t  \n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSortedMapBackedCache#testNullKeys().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSortedMapBackedCache#testNullKeys().mjava","sourceNew":"  @Test\n  public void testNullKeys() throws Exception {\n    //A null key should just be ignored, but not throw an exception\n    DIHCache cache = null;\n    try {\n      cache = new SortedMapBackedCache();\n      Map<String, String> cacheProps = new HashMap<String, String>();\n      cacheProps.put(DIHCacheSupport.CACHE_PRIMARY_KEY, \"a_id\");\n      cache.open(getContext(cacheProps));\n      \n      Map<String,Object> data = new HashMap<String,Object>();\n      data.put(\"a_id\", null);\n      data.put(\"bogus\", \"data\");\n      cache.add(data);\n      \n      Iterator<Map<String, Object>> cacheIter = cache.iterator();\n      while (cacheIter.hasNext()) {\n        Assert.fail(\"cache should be empty.\");\n      }\n      Assert.assertNull(cache.iterator(null));\n      cache.delete(null);      \n    } catch (Exception e) {\n      throw e;\n    } finally {\n      try {\n        cache.destroy();\n      } catch (Exception ex) {\n      }\n    }    \n  }\n\n","sourceOld":"\t@Test\n\tpublic void testNullKeys() throws Exception {\n\t  //A null key should just be ignored, but not throw an exception\n\t  DIHCache cache = null;\n\t  try {\n\t    cache = new SortedMapBackedCache();\n\t    Map<String, String> cacheProps = new HashMap<String, String>();\n      cacheProps.put(DIHCacheSupport.CACHE_PRIMARY_KEY, \"a_id\");\n      cache.open(getContext(cacheProps));\n      \n      Map<String,Object> data = new HashMap<String,Object>();\n      data.put(\"a_id\", null);\n      data.put(\"bogus\", \"data\");\n      cache.add(data);\n      \n      Iterator<Map<String, Object>> cacheIter = cache.iterator();\n      while (cacheIter.hasNext()) {\n        Assert.fail(\"cache should be empty.\");\n      }\n      Assert.assertNull(cache.iterator(null));\n      cache.delete(null);      \n\t  } catch (Exception e) {\n\t    throw e;\n    } finally {\n      try {\n        cache.destroy();\n      } catch (Exception ex) {\n      }\n    }\t  \n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSortedMapBackedCache#testNullKeys().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSortedMapBackedCache#testNullKeys().mjava","sourceNew":"  @Test\n  public void testNullKeys() throws Exception {\n    //A null key should just be ignored, but not throw an exception\n    DIHCache cache = null;\n    try {\n      cache = new SortedMapBackedCache();\n      Map<String, String> cacheProps = new HashMap<>();\n      cacheProps.put(DIHCacheSupport.CACHE_PRIMARY_KEY, \"a_id\");\n      cache.open(getContext(cacheProps));\n      \n      Map<String,Object> data = new HashMap<>();\n      data.put(\"a_id\", null);\n      data.put(\"bogus\", \"data\");\n      cache.add(data);\n      \n      Iterator<Map<String, Object>> cacheIter = cache.iterator();\n      while (cacheIter.hasNext()) {\n        Assert.fail(\"cache should be empty.\");\n      }\n      Assert.assertNull(cache.iterator(null));\n      cache.delete(null);      \n    } catch (Exception e) {\n      throw e;\n    } finally {\n      try {\n        cache.destroy();\n      } catch (Exception ex) {\n      }\n    }    \n  }\n\n","sourceOld":"  @Test\n  public void testNullKeys() throws Exception {\n    //A null key should just be ignored, but not throw an exception\n    DIHCache cache = null;\n    try {\n      cache = new SortedMapBackedCache();\n      Map<String, String> cacheProps = new HashMap<String, String>();\n      cacheProps.put(DIHCacheSupport.CACHE_PRIMARY_KEY, \"a_id\");\n      cache.open(getContext(cacheProps));\n      \n      Map<String,Object> data = new HashMap<String,Object>();\n      data.put(\"a_id\", null);\n      data.put(\"bogus\", \"data\");\n      cache.add(data);\n      \n      Iterator<Map<String, Object>> cacheIter = cache.iterator();\n      while (cacheIter.hasNext()) {\n        Assert.fail(\"cache should be empty.\");\n      }\n      Assert.assertNull(cache.iterator(null));\n      cache.delete(null);      \n    } catch (Exception e) {\n      throw e;\n    } finally {\n      try {\n        cache.destroy();\n      } catch (Exception ex) {\n      }\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSortedMapBackedCache#testNullKeys().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testNullKeys() throws Exception {\n    //A null key should just be ignored, but not throw an exception\n    DIHCache cache = null;\n    try {\n      cache = new SortedMapBackedCache();\n      Map<String, String> cacheProps = new HashMap<>();\n      cacheProps.put(DIHCacheSupport.CACHE_PRIMARY_KEY, \"a_id\");\n      cache.open(getContext(cacheProps));\n      \n      Map<String,Object> data = new HashMap<>();\n      data.put(\"a_id\", null);\n      data.put(\"bogus\", \"data\");\n      cache.add(data);\n      \n      Iterator<Map<String, Object>> cacheIter = cache.iterator();\n      while (cacheIter.hasNext()) {\n        Assert.fail(\"cache should be empty.\");\n      }\n      Assert.assertNull(cache.iterator(null));\n      cache.delete(null);      \n    } catch (Exception e) {\n      throw e;\n    } finally {\n      try {\n        cache.destroy();\n      } catch (Exception ex) {\n      }\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5ca2e21bffe25de677a4ed8bde879968e4c5da6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["5ca2e21bffe25de677a4ed8bde879968e4c5da6b"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5ca2e21bffe25de677a4ed8bde879968e4c5da6b"],"5ca2e21bffe25de677a4ed8bde879968e4c5da6b":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}