{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","commits":[{"id":"db5a3aeba34624ea274f34df5691d40ca25f2b67","date":1358965297,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    assert false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1982459c2ac4916bf3c0644b801f0cb3e4ee159f","date":1359034079,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    assert false;\n  }  \n\n","sourceOld":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    assert false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f5b43ddb6d3ea6e4dfe2103a0d75679caa01abb","date":1359046870,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    // examine the values to determine best type to use\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    for (BytesRef b : values) {\n      minLength = Math.min(minLength, b.length);\n      maxLength = Math.max(maxLength, b.length);\n    }\n    \n    boolean success = false;\n    IndexOutput data = null;\n    IndexOutput index = null;\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, Integer.toString(field.number), \"dat\");\n    String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name, Integer.toString(field.number), \"idx\");\n    \n    try {\n      data = dir.createOutput(dataName, state.context);\n      index = dir.createOutput(indexName, state.context);\n      if (minLength == maxLength) {\n        // fixed byte[]\n        addFixedSortedBytesField(field, data, index, values, docToOrd, minLength);\n      } else {\n        // var byte[]\n        addVarSortedBytesField(field, data, index, values, docToOrd);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(data, index);\n      } else {\n        IOUtils.closeWhileHandlingException(data, index);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    assert false;\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10e89cbe24422ef92a37fc037a955728de2e12cf","date":1359053475,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    // examine the values to determine best type to use\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    for (BytesRef b : values) {\n      minLength = Math.min(minLength, b.length);\n      maxLength = Math.max(maxLength, b.length);\n    }\n    \n    boolean success = false;\n    IndexOutput data = null;\n    IndexOutput index = null;\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n    \n    try {\n      data = dir.createOutput(dataName, state.context);\n      index = dir.createOutput(indexName, state.context);\n      if (minLength == maxLength) {\n        // fixed byte[]\n        addFixedSortedBytesField(field, data, index, values, docToOrd, minLength);\n      } else {\n        // var byte[]\n        addVarSortedBytesField(field, data, index, values, docToOrd);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(data, index);\n      } else {\n        IOUtils.closeWhileHandlingException(data, index);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    // examine the values to determine best type to use\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    for (BytesRef b : values) {\n      minLength = Math.min(minLength, b.length);\n      maxLength = Math.max(maxLength, b.length);\n    }\n    \n    boolean success = false;\n    IndexOutput data = null;\n    IndexOutput index = null;\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, Integer.toString(field.number), \"dat\");\n    String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name, Integer.toString(field.number), \"idx\");\n    \n    try {\n      data = dir.createOutput(dataName, state.context);\n      index = dir.createOutput(indexName, state.context);\n      if (minLength == maxLength) {\n        // fixed byte[]\n        addFixedSortedBytesField(field, data, index, values, docToOrd, minLength);\n      } else {\n        // var byte[]\n        addVarSortedBytesField(field, data, index, values, docToOrd);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(data, index);\n      } else {\n        IOUtils.closeWhileHandlingException(data, index);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    // examine the values to determine best type to use\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    for (BytesRef b : values) {\n      minLength = Math.min(minLength, b.length);\n      maxLength = Math.max(maxLength, b.length);\n    }\n    \n    boolean success = false;\n    IndexOutput data = null;\n    IndexOutput index = null;\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n    \n    try {\n      data = dir.createOutput(dataName, state.context);\n      index = dir.createOutput(indexName, state.context);\n      if (minLength == maxLength) {\n        // fixed byte[]\n        addFixedSortedBytesField(field, data, index, values, docToOrd, minLength);\n      } else {\n        // var byte[]\n        addVarSortedBytesField(field, data, index, values, docToOrd);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(data, index);\n      } else {\n        IOUtils.closeWhileHandlingException(data, index);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9faa42f41b6adb98daf009cf99a4ee239189e469","date":1376648738,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    // examine the values to determine best type to use\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    for (BytesRef b : values) {\n      minLength = Math.min(minLength, b.length);\n      maxLength = Math.max(maxLength, b.length);\n    }\n    \n    // but dont use fixed if there are missing values (we are simulating how lucene40 wrote dv...)\n    boolean anyMissing = false;\n    for (Number n : docToOrd) {\n      if (n.longValue() == -1) {\n        anyMissing = true;\n        break;\n      }\n    }\n    \n    boolean success = false;\n    IndexOutput data = null;\n    IndexOutput index = null;\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n    \n    try {\n      data = dir.createOutput(dataName, state.context);\n      index = dir.createOutput(indexName, state.context);\n      if (minLength == maxLength && !anyMissing) {\n        // fixed byte[]\n        addFixedSortedBytesField(field, data, index, values, docToOrd, minLength);\n      } else {\n        // var byte[]\n        // three cases for simulating the old writer:\n        // 1. no missing\n        // 2. missing (and empty string in use): remap ord=-1 -> ord=0\n        // 3. missing (and empty string not in use): remap all ords +1, insert empty string into values\n        if (!anyMissing) {\n          addVarSortedBytesField(field, data, index, values, docToOrd);\n        } else if (minLength == 0) {\n          addVarSortedBytesField(field, data, index, values, MissingOrdRemapper.mapMissingToOrd0(docToOrd));\n        } else {\n          addVarSortedBytesField(field, data, index, MissingOrdRemapper.insertEmptyValue(values), MissingOrdRemapper.mapAllOrds(docToOrd));\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(data, index);\n      } else {\n        IOUtils.closeWhileHandlingException(data, index);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    // examine the values to determine best type to use\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    for (BytesRef b : values) {\n      minLength = Math.min(minLength, b.length);\n      maxLength = Math.max(maxLength, b.length);\n    }\n    \n    boolean success = false;\n    IndexOutput data = null;\n    IndexOutput index = null;\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n    \n    try {\n      data = dir.createOutput(dataName, state.context);\n      index = dir.createOutput(indexName, state.context);\n      if (minLength == maxLength) {\n        // fixed byte[]\n        addFixedSortedBytesField(field, data, index, values, docToOrd, minLength);\n      } else {\n        // var byte[]\n        addVarSortedBytesField(field, data, index, values, docToOrd);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(data, index);\n      } else {\n        IOUtils.closeWhileHandlingException(data, index);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    // examine the values to determine best type to use\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    for (BytesRef b : values) {\n      minLength = Math.min(minLength, b.length);\n      maxLength = Math.max(maxLength, b.length);\n    }\n    \n    // but dont use fixed if there are missing values (we are simulating how lucene40 wrote dv...)\n    boolean anyMissing = false;\n    for (Number n : docToOrd) {\n      if (n.longValue() == -1) {\n        anyMissing = true;\n        break;\n      }\n    }\n    \n    boolean success = false;\n    IndexOutput data = null;\n    IndexOutput index = null;\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n    \n    try {\n      data = dir.createOutput(dataName, state.context);\n      index = dir.createOutput(indexName, state.context);\n      if (minLength == maxLength && !anyMissing) {\n        // fixed byte[]\n        addFixedSortedBytesField(field, data, index, values, docToOrd, minLength);\n      } else {\n        // var byte[]\n        // three cases for simulating the old writer:\n        // 1. no missing\n        // 2. missing (and empty string in use): remap ord=-1 -> ord=0\n        // 3. missing (and empty string not in use): remap all ords +1, insert empty string into values\n        if (!anyMissing) {\n          addVarSortedBytesField(field, data, index, values, docToOrd);\n        } else if (minLength == 0) {\n          addVarSortedBytesField(field, data, index, values, MissingOrdRemapper.mapMissingToOrd0(docToOrd));\n        } else {\n          addVarSortedBytesField(field, data, index, MissingOrdRemapper.insertEmptyValue(values), MissingOrdRemapper.mapAllOrds(docToOrd));\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(data, index);\n      } else {\n        IOUtils.closeWhileHandlingException(data, index);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    // examine the values to determine best type to use\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    for (BytesRef b : values) {\n      minLength = Math.min(minLength, b.length);\n      maxLength = Math.max(maxLength, b.length);\n    }\n    \n    boolean success = false;\n    IndexOutput data = null;\n    IndexOutput index = null;\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n    \n    try {\n      data = dir.createOutput(dataName, state.context);\n      index = dir.createOutput(indexName, state.context);\n      if (minLength == maxLength) {\n        // fixed byte[]\n        addFixedSortedBytesField(field, data, index, values, docToOrd, minLength);\n      } else {\n        // var byte[]\n        addVarSortedBytesField(field, data, index, values, docToOrd);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(data, index);\n      } else {\n        IOUtils.closeWhileHandlingException(data, index);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    // examine the values to determine best type to use\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    for (BytesRef b : values) {\n      minLength = Math.min(minLength, b.length);\n      maxLength = Math.max(maxLength, b.length);\n    }\n    \n    // but dont use fixed if there are missing values (we are simulating how lucene40 wrote dv...)\n    boolean anyMissing = false;\n    for (Number n : docToOrd) {\n      if (n.longValue() == -1) {\n        anyMissing = true;\n        break;\n      }\n    }\n    \n    boolean success = false;\n    IndexOutput data = null;\n    IndexOutput index = null;\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n    \n    try {\n      data = dir.createOutput(dataName, state.context);\n      index = dir.createOutput(indexName, state.context);\n      if (minLength == maxLength && !anyMissing) {\n        // fixed byte[]\n        addFixedSortedBytesField(field, data, index, values, docToOrd, minLength);\n      } else {\n        // var byte[]\n        // three cases for simulating the old writer:\n        // 1. no missing\n        // 2. missing (and empty string in use): remap ord=-1 -> ord=0\n        // 3. missing (and empty string not in use): remap all ords +1, insert empty string into values\n        if (!anyMissing) {\n          addVarSortedBytesField(field, data, index, values, docToOrd);\n        } else if (minLength == 0) {\n          addVarSortedBytesField(field, data, index, values, MissingOrdRemapper.mapMissingToOrd0(docToOrd));\n        } else {\n          addVarSortedBytesField(field, data, index, MissingOrdRemapper.insertEmptyValue(values), MissingOrdRemapper.mapAllOrds(docToOrd));\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(data, index);\n      } else {\n        IOUtils.closeWhileHandlingException(data, index);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    // examine the values to determine best type to use\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    for (BytesRef b : values) {\n      minLength = Math.min(minLength, b.length);\n      maxLength = Math.max(maxLength, b.length);\n    }\n    \n    boolean success = false;\n    IndexOutput data = null;\n    IndexOutput index = null;\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n    \n    try {\n      data = dir.createOutput(dataName, state.context);\n      index = dir.createOutput(indexName, state.context);\n      if (minLength == maxLength) {\n        // fixed byte[]\n        addFixedSortedBytesField(field, data, index, values, docToOrd, minLength);\n      } else {\n        // var byte[]\n        addVarSortedBytesField(field, data, index, values, docToOrd);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(data, index);\n      } else {\n        IOUtils.closeWhileHandlingException(data, index);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    // examine the values to determine best type to use\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    for (BytesRef b : values) {\n      minLength = Math.min(minLength, b.length);\n      maxLength = Math.max(maxLength, b.length);\n    }\n    \n    // but dont use fixed if there are missing values (we are simulating how lucene40 wrote dv...)\n    boolean anyMissing = false;\n    for (Number n : docToOrd) {\n      if (n.longValue() == -1) {\n        anyMissing = true;\n        break;\n      }\n    }\n    \n    boolean success = false;\n    IndexOutput data = null;\n    IndexOutput index = null;\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n    \n    try {\n      data = dir.createOutput(dataName, state.context);\n      index = dir.createOutput(indexName, state.context);\n      if (minLength == maxLength && !anyMissing) {\n        // fixed byte[]\n        addFixedSortedBytesField(field, data, index, values, docToOrd, minLength);\n      } else {\n        // var byte[]\n        // three cases for simulating the old writer:\n        // 1. no missing\n        // 2. missing (and empty string in use): remap ord=-1 -> ord=0\n        // 3. missing (and empty string not in use): remap all ords +1, insert empty string into values\n        if (!anyMissing) {\n          addVarSortedBytesField(field, data, index, values, docToOrd);\n        } else if (minLength == 0) {\n          addVarSortedBytesField(field, data, index, values, MissingOrdRemapper.mapMissingToOrd0(docToOrd));\n        } else {\n          addVarSortedBytesField(field, data, index, MissingOrdRemapper.insertEmptyValue(values), MissingOrdRemapper.mapAllOrds(docToOrd));\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(data, index);\n      } else {\n        IOUtils.closeWhileHandlingException(data, index);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    // examine the values to determine best type to use\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    for (BytesRef b : values) {\n      minLength = Math.min(minLength, b.length);\n      maxLength = Math.max(maxLength, b.length);\n    }\n    \n    // but dont use fixed if there are missing values (we are simulating how lucene40 wrote dv...)\n    boolean anyMissing = false;\n    for (Number n : docToOrd) {\n      if (n.longValue() == -1) {\n        anyMissing = true;\n        break;\n      }\n    }\n    \n    boolean success = false;\n    IndexOutput data = null;\n    IndexOutput index = null;\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n    \n    try {\n      data = dir.createOutput(dataName, state.context);\n      index = dir.createOutput(indexName, state.context);\n      if (minLength == maxLength && !anyMissing) {\n        // fixed byte[]\n        addFixedSortedBytesField(field, data, index, values, docToOrd, minLength);\n      } else {\n        // var byte[]\n        // three cases for simulating the old writer:\n        // 1. no missing\n        // 2. missing (and empty string in use): remap ord=-1 -> ord=0\n        // 3. missing (and empty string not in use): remap all ords +1, insert empty string into values\n        if (!anyMissing) {\n          addVarSortedBytesField(field, data, index, values, docToOrd);\n        } else if (minLength == 0) {\n          addVarSortedBytesField(field, data, index, values, MissingOrdRemapper.mapMissingToOrd0(docToOrd));\n        } else {\n          addVarSortedBytesField(field, data, index, MissingOrdRemapper.insertEmptyValue(values), MissingOrdRemapper.mapAllOrds(docToOrd));\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(data, index);\n      } else {\n        IOUtils.closeWhileHandlingException(data, index);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    if (field.getDocValuesGen() != -1) {\n      throw new UnsupportedOperationException(\"4.0 does not support dv updates\");\n    }\n    // examine the values to determine best type to use\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    for (BytesRef b : values) {\n      minLength = Math.min(minLength, b.length);\n      maxLength = Math.max(maxLength, b.length);\n    }\n    \n    // but dont use fixed if there are missing values (we are simulating how lucene40 wrote dv...)\n    boolean anyMissing = false;\n    for (Number n : docToOrd) {\n      if (n.longValue() == -1) {\n        anyMissing = true;\n        break;\n      }\n    }\n    \n    boolean success = false;\n    IndexOutput data = null;\n    IndexOutput index = null;\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n    \n    try {\n      data = dir.createOutput(dataName, state.context);\n      index = dir.createOutput(indexName, state.context);\n      if (minLength == maxLength && !anyMissing) {\n        // fixed byte[]\n        addFixedSortedBytesField(field, data, index, values, docToOrd, minLength);\n      } else {\n        // var byte[]\n        // three cases for simulating the old writer:\n        // 1. no missing\n        // 2. missing (and empty string in use): remap ord=-1 -> ord=0\n        // 3. missing (and empty string not in use): remap all ords +1, insert empty string into values\n        if (!anyMissing) {\n          addVarSortedBytesField(field, data, index, values, docToOrd);\n        } else if (minLength == 0) {\n          addVarSortedBytesField(field, data, index, values, MissingOrdRemapper.mapMissingToOrd0(docToOrd));\n        } else {\n          addVarSortedBytesField(field, data, index, MissingOrdRemapper.insertEmptyValue(values), MissingOrdRemapper.mapAllOrds(docToOrd));\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(data, index);\n      } else {\n        IOUtils.closeWhileHandlingException(data, index);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    // examine the values to determine best type to use\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    for (BytesRef b : values) {\n      minLength = Math.min(minLength, b.length);\n      maxLength = Math.max(maxLength, b.length);\n    }\n    \n    // but dont use fixed if there are missing values (we are simulating how lucene40 wrote dv...)\n    boolean anyMissing = false;\n    for (Number n : docToOrd) {\n      if (n.longValue() == -1) {\n        anyMissing = true;\n        break;\n      }\n    }\n    \n    boolean success = false;\n    IndexOutput data = null;\n    IndexOutput index = null;\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n    \n    try {\n      data = dir.createOutput(dataName, state.context);\n      index = dir.createOutput(indexName, state.context);\n      if (minLength == maxLength && !anyMissing) {\n        // fixed byte[]\n        addFixedSortedBytesField(field, data, index, values, docToOrd, minLength);\n      } else {\n        // var byte[]\n        // three cases for simulating the old writer:\n        // 1. no missing\n        // 2. missing (and empty string in use): remap ord=-1 -> ord=0\n        // 3. missing (and empty string not in use): remap all ords +1, insert empty string into values\n        if (!anyMissing) {\n          addVarSortedBytesField(field, data, index, values, docToOrd);\n        } else if (minLength == 0) {\n          addVarSortedBytesField(field, data, index, values, MissingOrdRemapper.mapMissingToOrd0(docToOrd));\n        } else {\n          addVarSortedBytesField(field, data, index, MissingOrdRemapper.insertEmptyValue(values), MissingOrdRemapper.mapAllOrds(docToOrd));\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(data, index);\n      } else {\n        IOUtils.closeWhileHandlingException(data, index);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9f5b43ddb6d3ea6e4dfe2103a0d75679caa01abb":["1982459c2ac4916bf3c0644b801f0cb3e4ee159f"],"db5a3aeba34624ea274f34df5691d40ca25f2b67":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","10e89cbe24422ef92a37fc037a955728de2e12cf"],"9faa42f41b6adb98daf009cf99a4ee239189e469":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["d4d69c535930b5cce125cff868d40f6373dc27d4","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["d4d69c535930b5cce125cff868d40f6373dc27d4","9faa42f41b6adb98daf009cf99a4ee239189e469"],"1982459c2ac4916bf3c0644b801f0cb3e4ee159f":["db5a3aeba34624ea274f34df5691d40ca25f2b67"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"10e89cbe24422ef92a37fc037a955728de2e12cf":["9f5b43ddb6d3ea6e4dfe2103a0d75679caa01abb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"9f5b43ddb6d3ea6e4dfe2103a0d75679caa01abb":["10e89cbe24422ef92a37fc037a955728de2e12cf"],"db5a3aeba34624ea274f34df5691d40ca25f2b67":["1982459c2ac4916bf3c0644b801f0cb3e4ee159f"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["9faa42f41b6adb98daf009cf99a4ee239189e469","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"9faa42f41b6adb98daf009cf99a4ee239189e469":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["db5a3aeba34624ea274f34df5691d40ca25f2b67","d4d69c535930b5cce125cff868d40f6373dc27d4"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"1982459c2ac4916bf3c0644b801f0cb3e4ee159f":["9f5b43ddb6d3ea6e4dfe2103a0d75679caa01abb"],"10e89cbe24422ef92a37fc037a955728de2e12cf":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}