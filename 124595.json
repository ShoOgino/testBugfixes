{"path":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynLookup#main(String[]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynLookup#main(String[]).mjava","pathOld":"contrib/wordnet/src/java/org/apache/lucene/wordnet/SynLookup#main(String[]).mjava","sourceNew":"\tpublic static void main(String[] args) throws IOException {\n\t\tif (args.length != 2) {\n\t\t\tSystem.out.println(\n\t\t\t\t\t\t\t   \"java org.apache.lucene.wordnet.SynLookup <index path> <word>\");\n\t\t}\n\n\t\tFSDirectory directory = FSDirectory.open(new File(args[0]));\n\t\tIndexSearcher searcher = new IndexSearcher(directory, true);\n\n\t\tString word = args[1];\n\t\tQuery query = new TermQuery(new Term(Syns2Index.F_WORD, word));\n\t\tCountingCollector countingCollector = new CountingCollector();\n\t\tsearcher.search(query, countingCollector);\n\n\t\tif (countingCollector.numHits == 0) {\n\t\t\tSystem.out.println(\"No synonyms found for \" + word);\n\t\t} else {\n\t\t\tSystem.out.println(\"Synonyms found for \\\"\" + word + \"\\\":\");\n\t\t}\n\n\t\tScoreDoc[] hits = searcher.search(query, countingCollector.numHits).scoreDocs;\n\t\t\n\t\tfor (int i = 0; i < hits.length; i++) {\n\t\t\tDocument doc = searcher.doc(hits[i].doc);\n\n\t\t\tString[] values = doc.getValues(Syns2Index.F_SYN);\n\n\t\t\tfor (int j = 0; j < values.length; j++) {\n\t\t\t\tSystem.out.println(values[j]);\n\t\t\t}\n\t\t}\n\n\t\tsearcher.close();\n\t\tdirectory.close();\n\t}\n\n","sourceOld":"\tpublic static void main(String[] args) throws IOException {\n\t\tif (args.length != 2) {\n\t\t\tSystem.out.println(\n\t\t\t\t\t\t\t   \"java org.apache.lucene.wordnet.SynLookup <index path> <word>\");\n\t\t}\n\n\t\tFSDirectory directory = FSDirectory.open(new File(args[0]));\n\t\tIndexSearcher searcher = new IndexSearcher(directory, true);\n\n\t\tString word = args[1];\n\t\tQuery query = new TermQuery(new Term(Syns2Index.F_WORD, word));\n\t\tCountingCollector countingCollector = new CountingCollector();\n\t\tsearcher.search(query, countingCollector);\n\n\t\tif (countingCollector.numHits == 0) {\n\t\t\tSystem.out.println(\"No synonyms found for \" + word);\n\t\t} else {\n\t\t\tSystem.out.println(\"Synonyms found for \\\"\" + word + \"\\\":\");\n\t\t}\n\n\t\tScoreDoc[] hits = searcher.search(query, countingCollector.numHits).scoreDocs;\n\t\t\n\t\tfor (int i = 0; i < hits.length; i++) {\n\t\t\tDocument doc = searcher.doc(hits[i].doc);\n\n\t\t\tString[] values = doc.getValues(Syns2Index.F_SYN);\n\n\t\t\tfor (int j = 0; j < values.length; j++) {\n\t\t\t\tSystem.out.println(values[j]);\n\t\t\t}\n\t\t}\n\n\t\tsearcher.close();\n\t\tdirectory.close();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31fd188d5e34d3af6691f8428fecc2d4665e2d56","date":1309225455,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynLookup#main(String[]).mjava","pathOld":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynLookup#main(String[]).mjava","sourceNew":"\tpublic static void main(String[] args) throws IOException {\n\t\tif (args.length != 2) {\n\t\t\tSystem.out.println(\n\t\t\t\t\t\t\t   \"java org.apache.lucene.wordnet.SynLookup <index path> <word>\");\n\t\t}\n\n\t\tFSDirectory directory = FSDirectory.open(new File(args[0]));\n\t\tIndexSearcher searcher = new IndexSearcher(directory, true);\n\n\t\tString word = args[1];\n\t\tQuery query = new TermQuery(new Term(Syns2Index.F_WORD, word));\n\t\tTotalHitCountCollector countingCollector = new TotalHitCountCollector();\n\t\tsearcher.search(query, countingCollector);\n\n\t\tif (countingCollector.getTotalHits() == 0) {\n\t\t\tSystem.out.println(\"No synonyms found for \" + word);\n\t\t} else {\n\t\t\tSystem.out.println(\"Synonyms found for \\\"\" + word + \"\\\":\");\n\t\t}\n\n\t\tScoreDoc[] hits = searcher.search(query, countingCollector.getTotalHits()).scoreDocs;\n\t\t\n\t\tfor (int i = 0; i < hits.length; i++) {\n\t\t\tDocument doc = searcher.doc(hits[i].doc);\n\n\t\t\tString[] values = doc.getValues(Syns2Index.F_SYN);\n\n\t\t\tfor (int j = 0; j < values.length; j++) {\n\t\t\t\tSystem.out.println(values[j]);\n\t\t\t}\n\t\t}\n\n\t\tsearcher.close();\n\t\tdirectory.close();\n\t}\n\n","sourceOld":"\tpublic static void main(String[] args) throws IOException {\n\t\tif (args.length != 2) {\n\t\t\tSystem.out.println(\n\t\t\t\t\t\t\t   \"java org.apache.lucene.wordnet.SynLookup <index path> <word>\");\n\t\t}\n\n\t\tFSDirectory directory = FSDirectory.open(new File(args[0]));\n\t\tIndexSearcher searcher = new IndexSearcher(directory, true);\n\n\t\tString word = args[1];\n\t\tQuery query = new TermQuery(new Term(Syns2Index.F_WORD, word));\n\t\tCountingCollector countingCollector = new CountingCollector();\n\t\tsearcher.search(query, countingCollector);\n\n\t\tif (countingCollector.numHits == 0) {\n\t\t\tSystem.out.println(\"No synonyms found for \" + word);\n\t\t} else {\n\t\t\tSystem.out.println(\"Synonyms found for \\\"\" + word + \"\\\":\");\n\t\t}\n\n\t\tScoreDoc[] hits = searcher.search(query, countingCollector.numHits).scoreDocs;\n\t\t\n\t\tfor (int i = 0; i < hits.length; i++) {\n\t\t\tDocument doc = searcher.doc(hits[i].doc);\n\n\t\t\tString[] values = doc.getValues(Syns2Index.F_SYN);\n\n\t\t\tfor (int j = 0; j < values.length; j++) {\n\t\t\t\tSystem.out.println(values[j]);\n\t\t\t}\n\t\t}\n\n\t\tsearcher.close();\n\t\tdirectory.close();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynLookup#main(String[]).mjava","pathOld":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynLookup#main(String[]).mjava","sourceNew":"\tpublic static void main(String[] args) throws IOException {\n\t\tif (args.length != 2) {\n\t\t\tSystem.out.println(\n\t\t\t\t\t\t\t   \"java org.apache.lucene.wordnet.SynLookup <index path> <word>\");\n\t\t}\n\n\t\tFSDirectory directory = FSDirectory.open(new File(args[0]));\n\t\tIndexSearcher searcher = new IndexSearcher(directory, true);\n\n\t\tString word = args[1];\n\t\tQuery query = new TermQuery(new Term(Syns2Index.F_WORD, word));\n\t\tTotalHitCountCollector countingCollector = new TotalHitCountCollector();\n\t\tsearcher.search(query, countingCollector);\n\n\t\tif (countingCollector.getTotalHits() == 0) {\n\t\t\tSystem.out.println(\"No synonyms found for \" + word);\n\t\t} else {\n\t\t\tSystem.out.println(\"Synonyms found for \\\"\" + word + \"\\\":\");\n\t\t}\n\n\t\tScoreDoc[] hits = searcher.search(query, countingCollector.getTotalHits()).scoreDocs;\n\t\t\n\t\tfor (int i = 0; i < hits.length; i++) {\n\t\t\tDocument doc = searcher.doc(hits[i].doc);\n\n\t\t\tString[] values = doc.getValues(Syns2Index.F_SYN);\n\n\t\t\tfor (int j = 0; j < values.length; j++) {\n\t\t\t\tSystem.out.println(values[j]);\n\t\t\t}\n\t\t}\n\n\t\tsearcher.close();\n\t\tdirectory.close();\n\t}\n\n","sourceOld":"\tpublic static void main(String[] args) throws IOException {\n\t\tif (args.length != 2) {\n\t\t\tSystem.out.println(\n\t\t\t\t\t\t\t   \"java org.apache.lucene.wordnet.SynLookup <index path> <word>\");\n\t\t}\n\n\t\tFSDirectory directory = FSDirectory.open(new File(args[0]));\n\t\tIndexSearcher searcher = new IndexSearcher(directory, true);\n\n\t\tString word = args[1];\n\t\tQuery query = new TermQuery(new Term(Syns2Index.F_WORD, word));\n\t\tCountingCollector countingCollector = new CountingCollector();\n\t\tsearcher.search(query, countingCollector);\n\n\t\tif (countingCollector.numHits == 0) {\n\t\t\tSystem.out.println(\"No synonyms found for \" + word);\n\t\t} else {\n\t\t\tSystem.out.println(\"Synonyms found for \\\"\" + word + \"\\\":\");\n\t\t}\n\n\t\tScoreDoc[] hits = searcher.search(query, countingCollector.numHits).scoreDocs;\n\t\t\n\t\tfor (int i = 0; i < hits.length; i++) {\n\t\t\tDocument doc = searcher.doc(hits[i].doc);\n\n\t\t\tString[] values = doc.getValues(Syns2Index.F_SYN);\n\n\t\t\tfor (int j = 0; j < values.length; j++) {\n\t\t\t\tSystem.out.println(values[j]);\n\t\t\t}\n\t\t}\n\n\t\tsearcher.close();\n\t\tdirectory.close();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynLookup#main(String[]).mjava","pathOld":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynLookup#main(String[]).mjava","sourceNew":"\tpublic static void main(String[] args) throws IOException {\n\t\tif (args.length != 2) {\n\t\t\tSystem.out.println(\n\t\t\t\t\t\t\t   \"java org.apache.lucene.wordnet.SynLookup <index path> <word>\");\n\t\t}\n\n\t\tFSDirectory directory = FSDirectory.open(new File(args[0]));\n\t\tIndexSearcher searcher = new IndexSearcher(directory, true);\n\n\t\tString word = args[1];\n\t\tQuery query = new TermQuery(new Term(Syns2Index.F_WORD, word));\n\t\tTotalHitCountCollector countingCollector = new TotalHitCountCollector();\n\t\tsearcher.search(query, countingCollector);\n\n\t\tif (countingCollector.getTotalHits() == 0) {\n\t\t\tSystem.out.println(\"No synonyms found for \" + word);\n\t\t} else {\n\t\t\tSystem.out.println(\"Synonyms found for \\\"\" + word + \"\\\":\");\n\t\t}\n\n\t\tScoreDoc[] hits = searcher.search(query, countingCollector.getTotalHits()).scoreDocs;\n\t\t\n\t\tfor (int i = 0; i < hits.length; i++) {\n\t\t\tDocument doc = searcher.doc(hits[i].doc);\n\n\t\t\tString[] values = doc.getValues(Syns2Index.F_SYN);\n\n\t\t\tfor (int j = 0; j < values.length; j++) {\n\t\t\t\tSystem.out.println(values[j]);\n\t\t\t}\n\t\t}\n\n\t\tsearcher.close();\n\t\tdirectory.close();\n\t}\n\n","sourceOld":"\tpublic static void main(String[] args) throws IOException {\n\t\tif (args.length != 2) {\n\t\t\tSystem.out.println(\n\t\t\t\t\t\t\t   \"java org.apache.lucene.wordnet.SynLookup <index path> <word>\");\n\t\t}\n\n\t\tFSDirectory directory = FSDirectory.open(new File(args[0]));\n\t\tIndexSearcher searcher = new IndexSearcher(directory, true);\n\n\t\tString word = args[1];\n\t\tQuery query = new TermQuery(new Term(Syns2Index.F_WORD, word));\n\t\tCountingCollector countingCollector = new CountingCollector();\n\t\tsearcher.search(query, countingCollector);\n\n\t\tif (countingCollector.numHits == 0) {\n\t\t\tSystem.out.println(\"No synonyms found for \" + word);\n\t\t} else {\n\t\t\tSystem.out.println(\"Synonyms found for \\\"\" + word + \"\\\":\");\n\t\t}\n\n\t\tScoreDoc[] hits = searcher.search(query, countingCollector.numHits).scoreDocs;\n\t\t\n\t\tfor (int i = 0; i < hits.length; i++) {\n\t\t\tDocument doc = searcher.doc(hits[i].doc);\n\n\t\t\tString[] values = doc.getValues(Syns2Index.F_SYN);\n\n\t\t\tfor (int j = 0; j < values.length; j++) {\n\t\t\t\tSystem.out.println(values[j]);\n\t\t\t}\n\t\t}\n\n\t\tsearcher.close();\n\t\tdirectory.close();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","date":1310389132,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynLookup#main(String[]).mjava","sourceNew":null,"sourceOld":"\tpublic static void main(String[] args) throws IOException {\n\t\tif (args.length != 2) {\n\t\t\tSystem.out.println(\n\t\t\t\t\t\t\t   \"java org.apache.lucene.wordnet.SynLookup <index path> <word>\");\n\t\t}\n\n\t\tFSDirectory directory = FSDirectory.open(new File(args[0]));\n\t\tIndexSearcher searcher = new IndexSearcher(directory, true);\n\n\t\tString word = args[1];\n\t\tQuery query = new TermQuery(new Term(Syns2Index.F_WORD, word));\n\t\tTotalHitCountCollector countingCollector = new TotalHitCountCollector();\n\t\tsearcher.search(query, countingCollector);\n\n\t\tif (countingCollector.getTotalHits() == 0) {\n\t\t\tSystem.out.println(\"No synonyms found for \" + word);\n\t\t} else {\n\t\t\tSystem.out.println(\"Synonyms found for \\\"\" + word + \"\\\":\");\n\t\t}\n\n\t\tScoreDoc[] hits = searcher.search(query, countingCollector.getTotalHits()).scoreDocs;\n\t\t\n\t\tfor (int i = 0; i < hits.length; i++) {\n\t\t\tDocument doc = searcher.doc(hits[i].doc);\n\n\t\t\tString[] values = doc.getValues(Syns2Index.F_SYN);\n\n\t\t\tfor (int j = 0; j < values.length; j++) {\n\t\t\t\tSystem.out.println(values[j]);\n\t\t\t}\n\t\t}\n\n\t\tsearcher.close();\n\t\tdirectory.close();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"31fd188d5e34d3af6691f8428fecc2d4665e2d56":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2553b00f699380c64959ccb27991289aae87be2e":["9454a6510e2db155fb01faa5c049b06ece95fab9","31fd188d5e34d3af6691f8428fecc2d4665e2d56"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["31fd188d5e34d3af6691f8428fecc2d4665e2d56"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["9454a6510e2db155fb01faa5c049b06ece95fab9","31fd188d5e34d3af6691f8428fecc2d4665e2d56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"31fd188d5e34d3af6691f8428fecc2d4665e2d56":["2553b00f699380c64959ccb27991289aae87be2e","44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"2553b00f699380c64959ccb27991289aae87be2e":[],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["31fd188d5e34d3af6691f8428fecc2d4665e2d56","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}