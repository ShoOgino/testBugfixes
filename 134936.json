{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestOperations#testStringUnion().mjava","commits":[{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestOperations#testStringUnion().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testStringUnion().mjava","sourceNew":"  /** Test string union. */\n  public void testStringUnion() {\n    List<BytesRef> strings = new ArrayList<>();\n    for (int i = RandomInts.randomIntBetween(random(), 0, 1000); --i >= 0;) {\n      strings.add(new BytesRef(TestUtil.randomUnicodeString(random())));\n    }\n\n    Collections.sort(strings);\n    Automaton union = Automata.makeStringUnion(strings);\n    assertTrue(union.isDeterministic());\n    assertTrue(Operations.sameLanguage(union, naiveUnion(strings)));\n  }\n\n","sourceOld":"  /** Test string union. */\n  public void testStringUnion() {\n    List<BytesRef> strings = new ArrayList<>();\n    for (int i = RandomInts.randomIntBetween(random(), 0, 1000); --i >= 0;) {\n      strings.add(new BytesRef(TestUtil.randomUnicodeString(random())));\n    }\n\n    Collections.sort(strings);\n    LightAutomaton union = BasicAutomata.makeStringUnionLight(strings);\n    assertTrue(union.isDeterministic());\n    assertTrue(BasicOperations.sameLanguage(union, naiveUnion(strings)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestOperations#testStringUnion().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testStringUnion().mjava","sourceNew":"  /** Test string union. */\n  public void testStringUnion() {\n    List<BytesRef> strings = new ArrayList<>();\n    for (int i = RandomInts.randomIntBetween(random(), 0, 1000); --i >= 0;) {\n      strings.add(new BytesRef(TestUtil.randomUnicodeString(random())));\n    }\n\n    Collections.sort(strings);\n    Automaton union = Automata.makeStringUnion(strings);\n    assertTrue(union.isDeterministic());\n    assertTrue(Operations.sameLanguage(union, naiveUnion(strings)));\n  }\n\n","sourceOld":"  /** Test string union. */\n  public void testStringUnion() {\n    List<BytesRef> strings = new ArrayList<>();\n    for (int i = RandomInts.randomIntBetween(random(), 0, 1000); --i >= 0;) {\n      strings.add(new BytesRef(TestUtil.randomUnicodeString(random())));\n    }\n\n    Collections.sort(strings);\n    Automaton union = BasicAutomata.makeStringUnion(strings);\n    assertTrue(union.isDeterministic());\n    assertTrue(BasicOperations.sameLanguage(union, naiveUnion(strings)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c128cf81981c0804b2297ab78159a9953f08be3d","date":1404233540,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestOperations#testStringUnion().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestOperations#testStringUnion().mjava","sourceNew":"  /** Test string union. */\n  public void testStringUnion() {\n    List<BytesRef> strings = new ArrayList<>();\n    for (int i = RandomInts.randomIntBetween(random(), 0, 1000); --i >= 0;) {\n      strings.add(new BytesRef(TestUtil.randomUnicodeString(random())));\n    }\n\n    Collections.sort(strings);\n    Automaton union = Automata.makeStringUnion(strings);\n    assertTrue(union.isDeterministic());\n    assertFalse(Operations.hasDeadStatesFromInitial(union));\n    \n    Automaton naiveUnion = naiveUnion(strings);\n    assertTrue(naiveUnion.isDeterministic());\n    assertFalse(Operations.hasDeadStatesFromInitial(naiveUnion));\n\n    \n    assertTrue(Operations.sameLanguage(union, naiveUnion));\n  }\n\n","sourceOld":"  /** Test string union. */\n  public void testStringUnion() {\n    List<BytesRef> strings = new ArrayList<>();\n    for (int i = RandomInts.randomIntBetween(random(), 0, 1000); --i >= 0;) {\n      strings.add(new BytesRef(TestUtil.randomUnicodeString(random())));\n    }\n\n    Collections.sort(strings);\n    Automaton union = Automata.makeStringUnion(strings);\n    assertTrue(union.isDeterministic());\n    assertTrue(Operations.sameLanguage(union, naiveUnion(strings)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6448f67be45147de82a85cd903fec34e8930da75","date":1477041277,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestOperations#testStringUnion().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestOperations#testStringUnion().mjava","sourceNew":"  /** Test string union. */\n  public void testStringUnion() {\n    List<BytesRef> strings = new ArrayList<>();\n    for (int i = RandomNumbers.randomIntBetween(random(), 0, 1000); --i >= 0;) {\n      strings.add(new BytesRef(TestUtil.randomUnicodeString(random())));\n    }\n\n    Collections.sort(strings);\n    Automaton union = Automata.makeStringUnion(strings);\n    assertTrue(union.isDeterministic());\n    assertFalse(Operations.hasDeadStatesFromInitial(union));\n    \n    Automaton naiveUnion = naiveUnion(strings);\n    assertTrue(naiveUnion.isDeterministic());\n    assertFalse(Operations.hasDeadStatesFromInitial(naiveUnion));\n\n    \n    assertTrue(Operations.sameLanguage(union, naiveUnion));\n  }\n\n","sourceOld":"  /** Test string union. */\n  public void testStringUnion() {\n    List<BytesRef> strings = new ArrayList<>();\n    for (int i = RandomInts.randomIntBetween(random(), 0, 1000); --i >= 0;) {\n      strings.add(new BytesRef(TestUtil.randomUnicodeString(random())));\n    }\n\n    Collections.sort(strings);\n    Automaton union = Automata.makeStringUnion(strings);\n    assertTrue(union.isDeterministic());\n    assertFalse(Operations.hasDeadStatesFromInitial(union));\n    \n    Automaton naiveUnion = naiveUnion(strings);\n    assertTrue(naiveUnion.isDeterministic());\n    assertFalse(Operations.hasDeadStatesFromInitial(naiveUnion));\n\n    \n    assertTrue(Operations.sameLanguage(union, naiveUnion));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestOperations#testStringUnion().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestOperations#testStringUnion().mjava","sourceNew":"  /** Test string union. */\n  public void testStringUnion() {\n    List<BytesRef> strings = new ArrayList<>();\n    for (int i = RandomNumbers.randomIntBetween(random(), 0, 1000); --i >= 0;) {\n      strings.add(new BytesRef(TestUtil.randomUnicodeString(random())));\n    }\n\n    Collections.sort(strings);\n    Automaton union = Automata.makeStringUnion(strings);\n    assertTrue(union.isDeterministic());\n    assertFalse(Operations.hasDeadStatesFromInitial(union));\n    \n    Automaton naiveUnion = naiveUnion(strings);\n    assertTrue(naiveUnion.isDeterministic());\n    assertFalse(Operations.hasDeadStatesFromInitial(naiveUnion));\n\n    \n    assertTrue(Operations.sameLanguage(union, naiveUnion));\n  }\n\n","sourceOld":"  /** Test string union. */\n  public void testStringUnion() {\n    List<BytesRef> strings = new ArrayList<>();\n    for (int i = RandomInts.randomIntBetween(random(), 0, 1000); --i >= 0;) {\n      strings.add(new BytesRef(TestUtil.randomUnicodeString(random())));\n    }\n\n    Collections.sort(strings);\n    Automaton union = Automata.makeStringUnion(strings);\n    assertTrue(union.isDeterministic());\n    assertFalse(Operations.hasDeadStatesFromInitial(union));\n    \n    Automaton naiveUnion = naiveUnion(strings);\n    assertTrue(naiveUnion.isDeterministic());\n    assertFalse(Operations.hasDeadStatesFromInitial(naiveUnion));\n\n    \n    assertTrue(Operations.sameLanguage(union, naiveUnion));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c128cf81981c0804b2297ab78159a9953f08be3d":["5c84485629d80d203608e8975a1139de9933cc38"],"6448f67be45147de82a85cd903fec34e8930da75":["c128cf81981c0804b2297ab78159a9953f08be3d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["c128cf81981c0804b2297ab78159a9953f08be3d","6448f67be45147de82a85cd903fec34e8930da75"],"5c84485629d80d203608e8975a1139de9933cc38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6448f67be45147de82a85cd903fec34e8930da75"]},"commit2Childs":{"c128cf81981c0804b2297ab78159a9953f08be3d":["6448f67be45147de82a85cd903fec34e8930da75","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"6448f67be45147de82a85cd903fec34e8930da75":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","5c84485629d80d203608e8975a1139de9933cc38"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"5c84485629d80d203608e8975a1139de9933cc38":["c128cf81981c0804b2297ab78159a9953f08be3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}