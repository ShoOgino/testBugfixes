{"path":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/TestForUtil#testEncodeDecode().mjava","commits":[{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/TestForUtil#testEncodeDecode().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestForUtil#testEncodeDecode().mjava","sourceNew":"  public void testEncodeDecode() throws IOException {\n    final int iterations = RandomNumbers.randomIntBetween(random(), 1, 1000);\n    final float acceptableOverheadRatio = random().nextFloat();\n    final int[] values = new int[iterations * BLOCK_SIZE];\n    for (int i = 0; i < iterations; ++i) {\n      final int bpv = random().nextInt(32);\n      if (bpv == 0) {\n        final int value = RandomNumbers.randomIntBetween(random(), 0, Integer.MAX_VALUE);\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = value;\n        }\n      } else {\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = RandomNumbers.randomIntBetween(random(),\n              0, (int) PackedInts.maxValue(bpv));\n        }\n      }\n    }\n\n    final Directory d = new ByteBuffersDirectory();\n    final long endPointer;\n\n    {\n      // encode\n      IndexOutput out = d.createOutput(\"test.bin\", IOContext.DEFAULT);\n      final ForUtil forUtil = new ForUtil(acceptableOverheadRatio, out);\n      \n      for (int i = 0; i < iterations; ++i) {\n        // Although values after BLOCK_SIZE are garbage, we need to allocate extra bytes to avoid AIOOBE.\n        int[] block = ArrayUtil.grow(ArrayUtil.copyOfSubArray(values, i*BLOCK_SIZE, (i+1)*BLOCK_SIZE));\n        forUtil.writeBlock(ArrayUtil.grow(block, MAX_DATA_SIZE), new byte[MAX_ENCODED_SIZE], out);\n      }\n      endPointer = out.getFilePointer();\n      out.close();\n    }\n\n    {\n      // decode\n      IndexInput in = d.openInput(\"test.bin\", IOContext.READONCE);\n      final ForUtil forUtil = new ForUtil(in);\n      for (int i = 0; i < iterations; ++i) {\n        if (random().nextBoolean()) {\n          forUtil.skipBlock(in);\n          continue;\n        }\n        final int[] restored = new int[MAX_DATA_SIZE];\n        forUtil.readBlock(in, new byte[MAX_ENCODED_SIZE], restored);\n        assertArrayEquals(ArrayUtil.copyOfSubArray(values, i*BLOCK_SIZE, (i+1)*BLOCK_SIZE),\n            ArrayUtil.copyOfSubArray(restored, 0, BLOCK_SIZE));\n      }\n      assertEquals(endPointer, in.getFilePointer());\n      in.close();\n    }\n    \n    d.close();\n  }\n\n","sourceOld":"  public void testEncodeDecode() throws IOException {\n    final int iterations = RandomNumbers.randomIntBetween(random(), 1, 1000);\n    final float acceptableOverheadRatio = random().nextFloat();\n    final int[] values = new int[iterations * BLOCK_SIZE];\n    for (int i = 0; i < iterations; ++i) {\n      final int bpv = random().nextInt(32);\n      if (bpv == 0) {\n        final int value = RandomNumbers.randomIntBetween(random(), 0, Integer.MAX_VALUE);\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = value;\n        }\n      } else {\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = RandomNumbers.randomIntBetween(random(),\n              0, (int) PackedInts.maxValue(bpv));\n        }\n      }\n    }\n\n    final Directory d = new ByteBuffersDirectory();\n    final long endPointer;\n\n    {\n      // encode\n      IndexOutput out = d.createOutput(\"test.bin\", IOContext.DEFAULT);\n      final ForUtil forUtil = new ForUtil(acceptableOverheadRatio, out);\n      \n      for (int i = 0; i < iterations; ++i) {\n        // Although values after BLOCK_SIZE are garbage, we need to allocate extra bytes to avoid AIOOBE.\n        int[] block = ArrayUtil.grow(ArrayUtil.copyOfSubArray(values, i*BLOCK_SIZE, (i+1)*BLOCK_SIZE));\n        forUtil.writeBlock(ArrayUtil.grow(block, MAX_DATA_SIZE), new byte[MAX_ENCODED_SIZE], out);\n      }\n      endPointer = out.getFilePointer();\n      out.close();\n    }\n\n    {\n      // decode\n      IndexInput in = d.openInput(\"test.bin\", IOContext.READONCE);\n      final ForUtil forUtil = new ForUtil(in);\n      for (int i = 0; i < iterations; ++i) {\n        if (random().nextBoolean()) {\n          forUtil.skipBlock(in);\n          continue;\n        }\n        final int[] restored = new int[MAX_DATA_SIZE];\n        forUtil.readBlock(in, new byte[MAX_ENCODED_SIZE], restored);\n        assertArrayEquals(ArrayUtil.copyOfSubArray(values, i*BLOCK_SIZE, (i+1)*BLOCK_SIZE),\n            ArrayUtil.copyOfSubArray(restored, 0, BLOCK_SIZE));\n      }\n      assertEquals(endPointer, in.getFilePointer());\n      in.close();\n    }\n    \n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"]},"commit2Childs":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}