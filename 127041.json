{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/DelegationTokenHttpSolrClient#DelegationTokenHttpSolrClient(String,HttpClient,ResponseParser,boolean,String).mjava","commits":[{"id":"f33385d3dec8980fb74144a1c0826a8752a52265","date":1475520519,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/DelegationTokenHttpSolrClient#DelegationTokenHttpSolrClient(String,HttpClient,ResponseParser,boolean,String).mjava","pathOld":"/dev/null","sourceNew":"  public DelegationTokenHttpSolrClient(String baseURL,\n                                       HttpClient client,\n                                       ResponseParser parser,\n                                       boolean allowCompression,\n                                       String delegationToken) {\n    super(baseURL, client, parser, allowCompression);\n    if (delegationToken == null) {\n      throw new IllegalArgumentException(\"Delegation token cannot be null\");\n    }\n    this.delegationToken = delegationToken;\n    setQueryParams(new TreeSet<>(Arrays.asList(DELEGATION_TOKEN_PARAM)));\n    invariantParams = new ModifiableSolrParams();\n    invariantParams.set(DELEGATION_TOKEN_PARAM, delegationToken);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/DelegationTokenHttpSolrClient#DelegationTokenHttpSolrClient(String,HttpClient,ResponseParser,boolean,String).mjava","pathOld":"/dev/null","sourceNew":"  public DelegationTokenHttpSolrClient(String baseURL,\n                                       HttpClient client,\n                                       ResponseParser parser,\n                                       boolean allowCompression,\n                                       String delegationToken) {\n    super(baseURL, client, parser, allowCompression);\n    if (delegationToken == null) {\n      throw new IllegalArgumentException(\"Delegation token cannot be null\");\n    }\n    this.delegationToken = delegationToken;\n    setQueryParams(new TreeSet<>(Arrays.asList(DELEGATION_TOKEN_PARAM)));\n    invariantParams = new ModifiableSolrParams();\n    invariantParams.set(DELEGATION_TOKEN_PARAM, delegationToken);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8cfe32f552b7e4776be5098105cbd3e11e93792","date":1482161480,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/DelegationTokenHttpSolrClient#DelegationTokenHttpSolrClient(String,HttpClient,ResponseParser,boolean,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/DelegationTokenHttpSolrClient#DelegationTokenHttpSolrClient(String,HttpClient,ResponseParser,boolean,String).mjava","sourceNew":"  /**\n   * This constructor is deprecated in favor of passing delegation token via\n   * {@linkplain org.apache.solr.client.solrj.impl.HttpSolrClient.Builder#withInvariantParams(ModifiableSolrParams)}.\n   *\n   * @param baseURL The base url to communicate with the Solr server\n   * @param client Http client instance to use for communication\n   * @param parser Response parser instance to use to decode response from Solr server\n   * @param allowCompression Should compression be allowed ?\n   * @param delegationToken The delegation token string.\n   */\n  @Deprecated\n  public DelegationTokenHttpSolrClient(String baseURL,\n                                       HttpClient client,\n                                       ResponseParser parser,\n                                       boolean allowCompression,\n                                       String delegationToken) {\n    super(baseURL, client, parser, allowCompression);\n    if (delegationToken == null) {\n      throw new IllegalArgumentException(\"Delegation token cannot be null\");\n    }\n    setQueryParams(new TreeSet<>(Arrays.asList(DELEGATION_TOKEN_PARAM)));\n    invariantParams = new ModifiableSolrParams();\n    invariantParams.set(DELEGATION_TOKEN_PARAM, delegationToken);\n  }\n\n","sourceOld":"  public DelegationTokenHttpSolrClient(String baseURL,\n                                       HttpClient client,\n                                       ResponseParser parser,\n                                       boolean allowCompression,\n                                       String delegationToken) {\n    super(baseURL, client, parser, allowCompression);\n    if (delegationToken == null) {\n      throw new IllegalArgumentException(\"Delegation token cannot be null\");\n    }\n    this.delegationToken = delegationToken;\n    setQueryParams(new TreeSet<>(Arrays.asList(DELEGATION_TOKEN_PARAM)));\n    invariantParams = new ModifiableSolrParams();\n    invariantParams.set(DELEGATION_TOKEN_PARAM, delegationToken);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/DelegationTokenHttpSolrClient#DelegationTokenHttpSolrClient(String,HttpClient,ResponseParser,boolean,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/DelegationTokenHttpSolrClient#DelegationTokenHttpSolrClient(String,HttpClient,ResponseParser,boolean,String).mjava","sourceNew":"  /**\n   * This constructor is deprecated in favor of passing delegation token via\n   * {@linkplain org.apache.solr.client.solrj.impl.HttpSolrClient.Builder#withInvariantParams(ModifiableSolrParams)}.\n   *\n   * @param baseURL The base url to communicate with the Solr server\n   * @param client Http client instance to use for communication\n   * @param parser Response parser instance to use to decode response from Solr server\n   * @param allowCompression Should compression be allowed ?\n   * @param delegationToken The delegation token string.\n   */\n  @Deprecated\n  public DelegationTokenHttpSolrClient(String baseURL,\n                                       HttpClient client,\n                                       ResponseParser parser,\n                                       boolean allowCompression,\n                                       String delegationToken) {\n    super(baseURL, client, parser, allowCompression);\n    if (delegationToken == null) {\n      throw new IllegalArgumentException(\"Delegation token cannot be null\");\n    }\n    setQueryParams(new TreeSet<>(Arrays.asList(DELEGATION_TOKEN_PARAM)));\n    invariantParams = new ModifiableSolrParams();\n    invariantParams.set(DELEGATION_TOKEN_PARAM, delegationToken);\n  }\n\n","sourceOld":"  public DelegationTokenHttpSolrClient(String baseURL,\n                                       HttpClient client,\n                                       ResponseParser parser,\n                                       boolean allowCompression,\n                                       String delegationToken) {\n    super(baseURL, client, parser, allowCompression);\n    if (delegationToken == null) {\n      throw new IllegalArgumentException(\"Delegation token cannot be null\");\n    }\n    this.delegationToken = delegationToken;\n    setQueryParams(new TreeSet<>(Arrays.asList(DELEGATION_TOKEN_PARAM)));\n    invariantParams = new ModifiableSolrParams();\n    invariantParams.set(DELEGATION_TOKEN_PARAM, delegationToken);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63a1978c6710c767fa084741e3d6424840003a62","date":1495850671,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/DelegationTokenHttpSolrClient#DelegationTokenHttpSolrClient(String,HttpClient,ResponseParser,boolean,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/DelegationTokenHttpSolrClient#DelegationTokenHttpSolrClient(String,HttpClient,ResponseParser,boolean,String).mjava","sourceNew":"  /**\n   * Package protected constructor for use by \n   * {@linkplain org.apache.solr.client.solrj.impl.HttpSolrClient.Builder}.\n   * @lucene.internal\n   */\n  DelegationTokenHttpSolrClient(String baseURL,\n                                HttpClient client,\n                                ResponseParser parser,\n                                boolean allowCompression,\n                                String delegationToken) {\n    super(baseURL, client, parser, allowCompression);\n    if (delegationToken == null) {\n      throw new IllegalArgumentException(\"Delegation token cannot be null\");\n    }\n    setQueryParams(new TreeSet<>(Arrays.asList(DELEGATION_TOKEN_PARAM)));\n    invariantParams = new ModifiableSolrParams();\n    invariantParams.set(DELEGATION_TOKEN_PARAM, delegationToken);\n  }\n\n","sourceOld":"  /**\n   * This constructor is deprecated in favor of passing delegation token via\n   * {@linkplain org.apache.solr.client.solrj.impl.HttpSolrClient.Builder#withInvariantParams(ModifiableSolrParams)}.\n   *\n   * @param baseURL The base url to communicate with the Solr server\n   * @param client Http client instance to use for communication\n   * @param parser Response parser instance to use to decode response from Solr server\n   * @param allowCompression Should compression be allowed ?\n   * @param delegationToken The delegation token string.\n   */\n  @Deprecated\n  public DelegationTokenHttpSolrClient(String baseURL,\n                                       HttpClient client,\n                                       ResponseParser parser,\n                                       boolean allowCompression,\n                                       String delegationToken) {\n    super(baseURL, client, parser, allowCompression);\n    if (delegationToken == null) {\n      throw new IllegalArgumentException(\"Delegation token cannot be null\");\n    }\n    setQueryParams(new TreeSet<>(Arrays.asList(DELEGATION_TOKEN_PARAM)));\n    invariantParams = new ModifiableSolrParams();\n    invariantParams.set(DELEGATION_TOKEN_PARAM, delegationToken);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/DelegationTokenHttpSolrClient#DelegationTokenHttpSolrClient(String,HttpClient,ResponseParser,boolean,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/DelegationTokenHttpSolrClient#DelegationTokenHttpSolrClient(String,HttpClient,ResponseParser,boolean,String).mjava","sourceNew":"  /**\n   * Package protected constructor for use by \n   * {@linkplain org.apache.solr.client.solrj.impl.HttpSolrClient.Builder}.\n   * @lucene.internal\n   */\n  DelegationTokenHttpSolrClient(String baseURL,\n                                HttpClient client,\n                                ResponseParser parser,\n                                boolean allowCompression,\n                                String delegationToken) {\n    super(baseURL, client, parser, allowCompression);\n    if (delegationToken == null) {\n      throw new IllegalArgumentException(\"Delegation token cannot be null\");\n    }\n    setQueryParams(new TreeSet<>(Arrays.asList(DELEGATION_TOKEN_PARAM)));\n    invariantParams = new ModifiableSolrParams();\n    invariantParams.set(DELEGATION_TOKEN_PARAM, delegationToken);\n  }\n\n","sourceOld":"  /**\n   * This constructor is deprecated in favor of passing delegation token via\n   * {@linkplain org.apache.solr.client.solrj.impl.HttpSolrClient.Builder#withInvariantParams(ModifiableSolrParams)}.\n   *\n   * @param baseURL The base url to communicate with the Solr server\n   * @param client Http client instance to use for communication\n   * @param parser Response parser instance to use to decode response from Solr server\n   * @param allowCompression Should compression be allowed ?\n   * @param delegationToken The delegation token string.\n   */\n  @Deprecated\n  public DelegationTokenHttpSolrClient(String baseURL,\n                                       HttpClient client,\n                                       ResponseParser parser,\n                                       boolean allowCompression,\n                                       String delegationToken) {\n    super(baseURL, client, parser, allowCompression);\n    if (delegationToken == null) {\n      throw new IllegalArgumentException(\"Delegation token cannot be null\");\n    }\n    setQueryParams(new TreeSet<>(Arrays.asList(DELEGATION_TOKEN_PARAM)));\n    invariantParams = new ModifiableSolrParams();\n    invariantParams.set(DELEGATION_TOKEN_PARAM, delegationToken);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/DelegationTokenHttpSolrClient#DelegationTokenHttpSolrClient(String,HttpClient,ResponseParser,boolean,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/DelegationTokenHttpSolrClient#DelegationTokenHttpSolrClient(String,HttpClient,ResponseParser,boolean,String).mjava","sourceNew":"  /**\n   * Package protected constructor for use by \n   * {@linkplain org.apache.solr.client.solrj.impl.HttpSolrClient.Builder}.\n   * @lucene.internal\n   */\n  DelegationTokenHttpSolrClient(String baseURL,\n                                HttpClient client,\n                                ResponseParser parser,\n                                boolean allowCompression,\n                                String delegationToken) {\n    super(baseURL, client, parser, allowCompression);\n    if (delegationToken == null) {\n      throw new IllegalArgumentException(\"Delegation token cannot be null\");\n    }\n    setQueryParams(new TreeSet<>(Arrays.asList(DELEGATION_TOKEN_PARAM)));\n    invariantParams = new ModifiableSolrParams();\n    invariantParams.set(DELEGATION_TOKEN_PARAM, delegationToken);\n  }\n\n","sourceOld":"  /**\n   * This constructor is deprecated in favor of passing delegation token via\n   * {@linkplain org.apache.solr.client.solrj.impl.HttpSolrClient.Builder#withInvariantParams(ModifiableSolrParams)}.\n   *\n   * @param baseURL The base url to communicate with the Solr server\n   * @param client Http client instance to use for communication\n   * @param parser Response parser instance to use to decode response from Solr server\n   * @param allowCompression Should compression be allowed ?\n   * @param delegationToken The delegation token string.\n   */\n  @Deprecated\n  public DelegationTokenHttpSolrClient(String baseURL,\n                                       HttpClient client,\n                                       ResponseParser parser,\n                                       boolean allowCompression,\n                                       String delegationToken) {\n    super(baseURL, client, parser, allowCompression);\n    if (delegationToken == null) {\n      throw new IllegalArgumentException(\"Delegation token cannot be null\");\n    }\n    setQueryParams(new TreeSet<>(Arrays.asList(DELEGATION_TOKEN_PARAM)));\n    invariantParams = new ModifiableSolrParams();\n    invariantParams.set(DELEGATION_TOKEN_PARAM, delegationToken);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c07dc645ff236a7d51da2a5ef49a948dfbf8610c","date":1498242650,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/DelegationTokenHttpSolrClient#DelegationTokenHttpSolrClient(String,HttpClient,ResponseParser,boolean,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/DelegationTokenHttpSolrClient#DelegationTokenHttpSolrClient(String,HttpClient,ResponseParser,boolean,String).mjava","sourceNew":"  /**\n   * Package protected constructor for use by \n   * {@linkplain org.apache.solr.client.solrj.impl.HttpSolrClient.Builder}.\n   * @lucene.internal\n   * \n   * @deprecated use {@link DelegationTokenHttpSolrClient#DelegationTokenHttpSolrClient(HttpSolrClient.Builder)} instead, as it is a more\n   * extension/subclassing-friendly alternative\n   */\n  @Deprecated\n  DelegationTokenHttpSolrClient(String baseURL,\n                                HttpClient client,\n                                ResponseParser parser,\n                                boolean allowCompression,\n                                String delegationToken) {\n    super(baseURL, client, parser, allowCompression);\n    if (delegationToken == null) {\n      throw new IllegalArgumentException(\"Delegation token cannot be null\");\n    }\n    setQueryParams(new TreeSet<>(Arrays.asList(DELEGATION_TOKEN_PARAM)));\n    invariantParams = new ModifiableSolrParams();\n    invariantParams.set(DELEGATION_TOKEN_PARAM, delegationToken);\n  }\n\n","sourceOld":"  /**\n   * Package protected constructor for use by \n   * {@linkplain org.apache.solr.client.solrj.impl.HttpSolrClient.Builder}.\n   * @lucene.internal\n   */\n  DelegationTokenHttpSolrClient(String baseURL,\n                                HttpClient client,\n                                ResponseParser parser,\n                                boolean allowCompression,\n                                String delegationToken) {\n    super(baseURL, client, parser, allowCompression);\n    if (delegationToken == null) {\n      throw new IllegalArgumentException(\"Delegation token cannot be null\");\n    }\n    setQueryParams(new TreeSet<>(Arrays.asList(DELEGATION_TOKEN_PARAM)));\n    invariantParams = new ModifiableSolrParams();\n    invariantParams.set(DELEGATION_TOKEN_PARAM, delegationToken);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/DelegationTokenHttpSolrClient#DelegationTokenHttpSolrClient(String,HttpClient,ResponseParser,boolean,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/DelegationTokenHttpSolrClient#DelegationTokenHttpSolrClient(String,HttpClient,ResponseParser,boolean,String).mjava","sourceNew":"  /**\n   * Package protected constructor for use by \n   * {@linkplain org.apache.solr.client.solrj.impl.HttpSolrClient.Builder}.\n   * @lucene.internal\n   * \n   * @deprecated use {@link DelegationTokenHttpSolrClient#DelegationTokenHttpSolrClient(HttpSolrClient.Builder)} instead, as it is a more\n   * extension/subclassing-friendly alternative\n   */\n  @Deprecated\n  DelegationTokenHttpSolrClient(String baseURL,\n                                HttpClient client,\n                                ResponseParser parser,\n                                boolean allowCompression,\n                                String delegationToken) {\n    super(baseURL, client, parser, allowCompression);\n    if (delegationToken == null) {\n      throw new IllegalArgumentException(\"Delegation token cannot be null\");\n    }\n    setQueryParams(new TreeSet<>(Arrays.asList(DELEGATION_TOKEN_PARAM)));\n    invariantParams = new ModifiableSolrParams();\n    invariantParams.set(DELEGATION_TOKEN_PARAM, delegationToken);\n  }\n\n","sourceOld":"  /**\n   * Package protected constructor for use by \n   * {@linkplain org.apache.solr.client.solrj.impl.HttpSolrClient.Builder}.\n   * @lucene.internal\n   */\n  DelegationTokenHttpSolrClient(String baseURL,\n                                HttpClient client,\n                                ResponseParser parser,\n                                boolean allowCompression,\n                                String delegationToken) {\n    super(baseURL, client, parser, allowCompression);\n    if (delegationToken == null) {\n      throw new IllegalArgumentException(\"Delegation token cannot be null\");\n    }\n    setQueryParams(new TreeSet<>(Arrays.asList(DELEGATION_TOKEN_PARAM)));\n    invariantParams = new ModifiableSolrParams();\n    invariantParams.set(DELEGATION_TOKEN_PARAM, delegationToken);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/DelegationTokenHttpSolrClient#DelegationTokenHttpSolrClient(String,HttpClient,ResponseParser,boolean,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/DelegationTokenHttpSolrClient#DelegationTokenHttpSolrClient(String,HttpClient,ResponseParser,boolean,String).mjava","sourceNew":"  /**\n   * Package protected constructor for use by \n   * {@linkplain org.apache.solr.client.solrj.impl.HttpSolrClient.Builder}.\n   * @lucene.internal\n   * \n   * @deprecated use {@link DelegationTokenHttpSolrClient#DelegationTokenHttpSolrClient(HttpSolrClient.Builder)} instead, as it is a more\n   * extension/subclassing-friendly alternative\n   */\n  @Deprecated\n  DelegationTokenHttpSolrClient(String baseURL,\n                                HttpClient client,\n                                ResponseParser parser,\n                                boolean allowCompression,\n                                String delegationToken) {\n    super(baseURL, client, parser, allowCompression);\n    if (delegationToken == null) {\n      throw new IllegalArgumentException(\"Delegation token cannot be null\");\n    }\n    setQueryParams(new TreeSet<>(Arrays.asList(DELEGATION_TOKEN_PARAM)));\n    invariantParams = new ModifiableSolrParams();\n    invariantParams.set(DELEGATION_TOKEN_PARAM, delegationToken);\n  }\n\n","sourceOld":"  /**\n   * Package protected constructor for use by \n   * {@linkplain org.apache.solr.client.solrj.impl.HttpSolrClient.Builder}.\n   * @lucene.internal\n   */\n  DelegationTokenHttpSolrClient(String baseURL,\n                                HttpClient client,\n                                ResponseParser parser,\n                                boolean allowCompression,\n                                String delegationToken) {\n    super(baseURL, client, parser, allowCompression);\n    if (delegationToken == null) {\n      throw new IllegalArgumentException(\"Delegation token cannot be null\");\n    }\n    setQueryParams(new TreeSet<>(Arrays.asList(DELEGATION_TOKEN_PARAM)));\n    invariantParams = new ModifiableSolrParams();\n    invariantParams.set(DELEGATION_TOKEN_PARAM, delegationToken);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a8cfe32f552b7e4776be5098105cbd3e11e93792":["f33385d3dec8980fb74144a1c0826a8752a52265"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a8cfe32f552b7e4776be5098105cbd3e11e93792","63a1978c6710c767fa084741e3d6424840003a62"],"63a1978c6710c767fa084741e3d6424840003a62":["a8cfe32f552b7e4776be5098105cbd3e11e93792"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a8cfe32f552b7e4776be5098105cbd3e11e93792"],"f33385d3dec8980fb74144a1c0826a8752a52265":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["e9017cf144952056066919f1ebc7897ff9bd71b1","c07dc645ff236a7d51da2a5ef49a948dfbf8610c"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["a8cfe32f552b7e4776be5098105cbd3e11e93792","63a1978c6710c767fa084741e3d6424840003a62"],"28288370235ed02234a64753cdbf0c6ec096304a":["d1f5728f32a4a256b36cfabd7a2636452f599bb9","c07dc645ff236a7d51da2a5ef49a948dfbf8610c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f33385d3dec8980fb74144a1c0826a8752a52265"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"c07dc645ff236a7d51da2a5ef49a948dfbf8610c":["63a1978c6710c767fa084741e3d6424840003a62"]},"commit2Childs":{"a8cfe32f552b7e4776be5098105cbd3e11e93792":["e9017cf144952056066919f1ebc7897ff9bd71b1","63a1978c6710c767fa084741e3d6424840003a62","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"63a1978c6710c767fa084741e3d6424840003a62":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9","c07dc645ff236a7d51da2a5ef49a948dfbf8610c"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"f33385d3dec8980fb74144a1c0826a8752a52265":["a8cfe32f552b7e4776be5098105cbd3e11e93792","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f33385d3dec8980fb74144a1c0826a8752a52265","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c07dc645ff236a7d51da2a5ef49a948dfbf8610c":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}