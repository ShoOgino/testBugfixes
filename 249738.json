{"path":"lucene/queries/src/java/org/apache/lucene/queries/intervals/MinimumShouldMatchIntervalsSource.MinimumShouldMatchIntervalIterator#nextInterval().mjava","commits":[{"id":"97ee2282ff806e9bc9d705f389cf40451ab81c3e","date":1561721333,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/intervals/MinimumShouldMatchIntervalsSource.MinimumShouldMatchIntervalIterator#nextInterval().mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/MinimumShouldMatchIntervalsSource.MinimumShouldMatchIntervalIterator#nextInterval().mjava","sourceNew":"    @Override\n    public int nextInterval() throws IOException {\n      // first, find a matching interval beyond the current start\n      while (this.proximityQueue.size() == minShouldMatch && proximityQueue.top().start() == start) {\n        IntervalIterator it = proximityQueue.pop();\n        if (it != null && it.nextInterval() != IntervalIterator.NO_MORE_INTERVALS) {\n          backgroundQueue.add(it);\n          IntervalIterator next = backgroundQueue.pop();\n          assert next != null;  // it's just been added!\n          proximityQueue.add(next);\n          updateRightExtreme(next);\n        }\n      }\n      if (this.proximityQueue.size() < minShouldMatch)\n        return start = end = IntervalIterator.NO_MORE_INTERVALS;\n      // then, minimize it\n      do {\n        start = proximityQueue.top().start();\n        firstEnd = proximityQueue.top().end();\n        end = queueEnd;\n        if (proximityQueue.top().end() == end)\n          return start;\n        lead = proximityQueue.pop();\n        if (lead != null) {\n          if (lead.nextInterval() != NO_MORE_INTERVALS) {\n            backgroundQueue.add(lead);\n          }\n          IntervalIterator next = backgroundQueue.pop();\n          if (next != null) {\n            proximityQueue.add(next);\n            updateRightExtreme(next);\n          }\n        }\n      } while (this.proximityQueue.size() == minShouldMatch && end == queueEnd);\n      return start;\n    }\n\n","sourceOld":"    @Override\n    public int nextInterval() throws IOException {\n      // first, find a matching interval beyond the current start\n      while (this.proximityQueue.size() == minShouldMatch && proximityQueue.top().start() == start) {\n        IntervalIterator it = proximityQueue.pop();\n        if (it != null && it.nextInterval() != IntervalIterator.NO_MORE_INTERVALS) {\n          backgroundQueue.add(it);\n          IntervalIterator next = backgroundQueue.pop();\n          assert next != null;  // it's just been added!\n          proximityQueue.add(next);\n          updateRightExtreme(next);\n        }\n      }\n      if (this.proximityQueue.size() < minShouldMatch)\n        return start = end = IntervalIterator.NO_MORE_INTERVALS;\n      // then, minimize it\n      do {\n        start = proximityQueue.top().start();\n        firstEnd = proximityQueue.top().end();\n        end = queueEnd;\n        if (proximityQueue.top().end() == end)\n          return start;\n        lead = proximityQueue.pop();\n        if (lead != null) {\n          if (lead.nextInterval() != NO_MORE_INTERVALS) {\n            backgroundQueue.add(lead);\n          }\n          IntervalIterator next = backgroundQueue.pop();\n          if (next != null) {\n            proximityQueue.add(next);\n            updateRightExtreme(next);\n          }\n        }\n      } while (this.proximityQueue.size() == minShouldMatch && end == queueEnd);\n      return start;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c78dc09f599cd42c186ddd94084249c8db1ede","date":1581000287,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/intervals/MinimumShouldMatchIntervalsSource.MinimumShouldMatchIntervalIterator#nextInterval().mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/intervals/MinimumShouldMatchIntervalsSource.MinimumShouldMatchIntervalIterator#nextInterval().mjava","sourceNew":"    @Override\n    public int nextInterval() throws IOException {\n      // first, find a matching interval beyond the current start\n      while (this.proximityQueue.size() == minShouldMatch && proximityQueue.top().start() == start) {\n        IntervalIterator it = proximityQueue.pop();\n        if (it != null && it.nextInterval() != IntervalIterator.NO_MORE_INTERVALS) {\n          backgroundQueue.add(it);\n          IntervalIterator next = backgroundQueue.pop();\n          assert next != null;  // it's just been added!\n          proximityQueue.add(next);\n          updateRightExtreme(next);\n        }\n      }\n      if (this.proximityQueue.size() < minShouldMatch)\n        return start = end = IntervalIterator.NO_MORE_INTERVALS;\n      // then, minimize it\n      do {\n        start = proximityQueue.top().start();\n        end = queueEnd;\n        slop = width();\n        for (IntervalIterator it : proximityQueue) {\n          slop -= it.width();\n        }\n        if (proximityQueue.top().end() == end)\n          return start;\n        lead = proximityQueue.pop();\n        if (lead != null) {\n          if (lead.nextInterval() != NO_MORE_INTERVALS) {\n            backgroundQueue.add(lead);\n          }\n          IntervalIterator next = backgroundQueue.pop();\n          if (next != null) {\n            proximityQueue.add(next);\n            updateRightExtreme(next);\n          }\n        }\n      } while (this.proximityQueue.size() == minShouldMatch && end == queueEnd);\n      return start;\n    }\n\n","sourceOld":"    @Override\n    public int nextInterval() throws IOException {\n      // first, find a matching interval beyond the current start\n      while (this.proximityQueue.size() == minShouldMatch && proximityQueue.top().start() == start) {\n        IntervalIterator it = proximityQueue.pop();\n        if (it != null && it.nextInterval() != IntervalIterator.NO_MORE_INTERVALS) {\n          backgroundQueue.add(it);\n          IntervalIterator next = backgroundQueue.pop();\n          assert next != null;  // it's just been added!\n          proximityQueue.add(next);\n          updateRightExtreme(next);\n        }\n      }\n      if (this.proximityQueue.size() < minShouldMatch)\n        return start = end = IntervalIterator.NO_MORE_INTERVALS;\n      // then, minimize it\n      do {\n        start = proximityQueue.top().start();\n        firstEnd = proximityQueue.top().end();\n        end = queueEnd;\n        if (proximityQueue.top().end() == end)\n          return start;\n        lead = proximityQueue.pop();\n        if (lead != null) {\n          if (lead.nextInterval() != NO_MORE_INTERVALS) {\n            backgroundQueue.add(lead);\n          }\n          IntervalIterator next = backgroundQueue.pop();\n          if (next != null) {\n            proximityQueue.add(next);\n            updateRightExtreme(next);\n          }\n        }\n      } while (this.proximityQueue.size() == minShouldMatch && end == queueEnd);\n      return start;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"30c78dc09f599cd42c186ddd94084249c8db1ede":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["30c78dc09f599cd42c186ddd94084249c8db1ede"]},"commit2Childs":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["30c78dc09f599cd42c186ddd94084249c8db1ede"],"30c78dc09f599cd42c186ddd94084249c8db1ede":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}