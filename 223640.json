{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/MutablePointsReaderUtils#partition(BKDConfig,int,int,int,MutablePointValues,int,int,int,BytesRef,BytesRef).mjava","commits":[{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":1,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/MutablePointsReaderUtils#partition(BKDConfig,int,int,int,MutablePointValues,int,int,int,BytesRef,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/MutablePointsReaderUtils#partition(int,int,int,int,int,int,MutablePointValues,int,int,int,BytesRef,BytesRef).mjava","sourceNew":"  /** Partition points around {@code mid}. All values on the left must be less\n   *  than or equal to it and all values on the right must be greater than or\n   *  equal to it. */\n  public static void partition(BKDConfig config, int maxDoc, int splitDim, int commonPrefixLen,\n                               MutablePointValues reader, int from, int to, int mid,\n                               BytesRef scratch1, BytesRef scratch2) {\n    final int dimOffset = splitDim * config.bytesPerDim + commonPrefixLen;\n    final int dimCmpBytes = config.bytesPerDim - commonPrefixLen;\n    final int dataCmpBytes = (config.numDims - config.numIndexDims) * config.bytesPerDim + dimCmpBytes;\n    final int bitsPerDocId = PackedInts.bitsRequired(maxDoc - 1);\n    new RadixSelector(dataCmpBytes + (bitsPerDocId + 7) / 8) {\n\n      @Override\n      protected Selector getFallbackSelector(int k) {\n        final int dataStart = (k < dimCmpBytes) ? config.packedIndexBytesLength : config.packedIndexBytesLength + k - dimCmpBytes;\n        final int dataEnd = config.numDims * config.bytesPerDim;\n        return new IntroSelector() {\n\n          final BytesRef pivot = scratch1;\n          int pivotDoc;\n\n          @Override\n          protected void swap(int i, int j) {\n            reader.swap(i, j);\n          }\n\n          @Override\n          protected void setPivot(int i) {\n            reader.getValue(i, pivot);\n            pivotDoc = reader.getDocID(i);\n          }\n\n          @Override\n          protected int comparePivot(int j) {\n            if (k < dimCmpBytes) {\n              reader.getValue(j, scratch2);\n              int cmp = Arrays.compareUnsigned(pivot.bytes, pivot.offset + dimOffset + k, pivot.offset + dimOffset + dimCmpBytes,\n                  scratch2.bytes, scratch2.offset + dimOffset + k, scratch2.offset + dimOffset + dimCmpBytes);\n              if (cmp != 0) {\n                return cmp;\n              }\n            }\n            if (k < dataCmpBytes) {\n              reader.getValue(j, scratch2);\n              int cmp = Arrays.compareUnsigned(pivot.bytes, pivot.offset + dataStart, pivot.offset + dataEnd,\n                  scratch2.bytes, scratch2.offset + dataStart, scratch2.offset + dataEnd);\n              if (cmp != 0) {\n                return cmp;\n              }\n            }\n            return pivotDoc - reader.getDocID(j);\n          }\n        };\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        reader.swap(i, j);\n      }\n\n      @Override\n      protected int byteAt(int i, int k) {\n        if (k < dimCmpBytes) {\n          return Byte.toUnsignedInt(reader.getByteAt(i, dimOffset + k));\n        } else if (k < dataCmpBytes) {\n          return Byte.toUnsignedInt(reader.getByteAt(i, config.packedIndexBytesLength + k - dimCmpBytes));\n        } else {\n          final int shift = bitsPerDocId - ((k - dataCmpBytes + 1) << 3);\n          return (reader.getDocID(i) >>> Math.max(0, shift)) & 0xff;\n        }\n      }\n    }.select(from, to, mid);\n  }\n\n","sourceOld":"  /** Partition points around {@code mid}. All values on the left must be less\n   *  than or equal to it and all values on the right must be greater than or\n   *  equal to it. */\n  public static void partition(int numDataDim, int numIndexDim, int maxDoc, int splitDim, int bytesPerDim, int commonPrefixLen,\n                               MutablePointValues reader, int from, int to, int mid,\n                               BytesRef scratch1, BytesRef scratch2) {\n    final int dimOffset = splitDim * bytesPerDim + commonPrefixLen;\n    final int dimCmpBytes = bytesPerDim - commonPrefixLen;\n    final int dataOffset = numIndexDim * bytesPerDim;\n    final int dataCmpBytes = (numDataDim - numIndexDim) * bytesPerDim + dimCmpBytes;\n    final int bitsPerDocId = PackedInts.bitsRequired(maxDoc - 1);\n    new RadixSelector(dataCmpBytes + (bitsPerDocId + 7) / 8) {\n\n      @Override\n      protected Selector getFallbackSelector(int k) {\n        final int dataStart = (k < dimCmpBytes) ? dataOffset : dataOffset + k - dimCmpBytes;\n        final int dataEnd = numDataDim * bytesPerDim;\n        return new IntroSelector() {\n\n          final BytesRef pivot = scratch1;\n          int pivotDoc;\n\n          @Override\n          protected void swap(int i, int j) {\n            reader.swap(i, j);\n          }\n\n          @Override\n          protected void setPivot(int i) {\n            reader.getValue(i, pivot);\n            pivotDoc = reader.getDocID(i);\n          }\n\n          @Override\n          protected int comparePivot(int j) {\n            if (k < dimCmpBytes) {\n              reader.getValue(j, scratch2);\n              int cmp = Arrays.compareUnsigned(pivot.bytes, pivot.offset + dimOffset + k, pivot.offset + dimOffset + dimCmpBytes,\n                  scratch2.bytes, scratch2.offset + dimOffset + k, scratch2.offset + dimOffset + dimCmpBytes);\n              if (cmp != 0) {\n                return cmp;\n              }\n            }\n            if (k < dataCmpBytes) {\n              reader.getValue(j, scratch2);\n              int cmp = Arrays.compareUnsigned(pivot.bytes, pivot.offset + dataStart, pivot.offset + dataEnd,\n                  scratch2.bytes, scratch2.offset + dataStart, scratch2.offset + dataEnd);\n              if (cmp != 0) {\n                return cmp;\n              }\n            }\n            return pivotDoc - reader.getDocID(j);\n          }\n        };\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        reader.swap(i, j);\n      }\n\n      @Override\n      protected int byteAt(int i, int k) {\n        if (k < dimCmpBytes) {\n          return Byte.toUnsignedInt(reader.getByteAt(i, dimOffset + k));\n        } else if (k < dataCmpBytes) {\n          return Byte.toUnsignedInt(reader.getByteAt(i, dataOffset + k - dimCmpBytes));\n        } else {\n          final int shift = bitsPerDocId - ((k - dataCmpBytes + 1) << 3);\n          return (reader.getDocID(i) >>> Math.max(0, shift)) & 0xff;\n        }\n      }\n    }.select(from, to, mid);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}