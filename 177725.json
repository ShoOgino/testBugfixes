{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/ContextQuery#createWeight(IndexSearcher,boolean).mjava","commits":[{"id":"8c33f6677a2078739058f81eca1df69d12cd62b0","date":1432799589,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/ContextQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    IntsRefBuilder scratch = new IntsRefBuilder();\n    final Map<IntsRef, Float> contextMap = new HashMap<>(contexts.size());\n    final TreeSet<Integer> contextLengths = new TreeSet<>();\n    final CompletionWeight innerWeight = ((CompletionWeight) query.createWeight(searcher, needsScores));\n    Automaton contextsAutomaton = null;\n    Automaton gap = Automata.makeChar(ContextSuggestField.CONTEXT_SEPARATOR);\n    // if separators are preserved the fst contains a SEP_LABEL\n    // behind each gap. To have a matching automaton, we need to\n    // include the SEP_LABEL in the query as well\n    gap = Operations.concatenate(gap, Operations.optional(Automata.makeChar(CompletionAnalyzer.SEP_LABEL)));\n    final Automaton prefixAutomaton = Operations.concatenate(gap, innerWeight.getAutomaton());\n    final Automaton matchAllAutomaton = new RegExp(\".*\").toAutomaton();\n    for (Map.Entry<CharSequence, ContextMetaData> entry : contexts.entrySet()) {\n      Automaton contextAutomaton;\n      if (entry.getKey().equals(\"*\")) {\n        contextAutomaton = Operations.concatenate(matchAllAutomaton, prefixAutomaton);\n      } else {\n        BytesRef ref = new BytesRef(entry.getKey());\n        ContextMetaData contextMetaData = entry.getValue();\n        contextMap.put(IntsRef.deepCopyOf(Util.toIntsRef(ref, scratch)), contextMetaData.boost);\n        contextLengths.add(scratch.length());\n        contextAutomaton = Automata.makeString(entry.getKey().toString());\n        if (contextMetaData.exact) {\n          contextAutomaton = Operations.concatenate(contextAutomaton, prefixAutomaton);\n        } else {\n          contextAutomaton = Operations.concatenate(Arrays.asList(contextAutomaton,\n              matchAllAutomaton,\n              prefixAutomaton));\n        }\n      }\n      if (contextsAutomaton == null) {\n        contextsAutomaton = contextAutomaton;\n      } else {\n        contextsAutomaton = Operations.union(contextsAutomaton, contextAutomaton);\n      }\n    }\n    if (contexts.size() == 0) {\n      addContext(\"*\");\n      contextsAutomaton = Operations.concatenate(matchAllAutomaton, prefixAutomaton);\n    }\n    contextsAutomaton = Operations.determinize(contextsAutomaton, Operations.DEFAULT_MAX_DETERMINIZED_STATES);\n    int[] contextLengthArray = new int[contextLengths.size()];\n    final Iterator<Integer> iterator = contextLengths.descendingIterator();\n    for (int i = 0; iterator.hasNext(); i++) {\n      contextLengthArray[i] = iterator.next();\n    }\n    return new ContextCompletionWeight(searcher.getIndexReader(), this, contextsAutomaton,\n        innerWeight, contextMap, contextLengthArray);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66756ce4574b3c2fdc15740945140daf28792f5f","date":1433261481,"type":3,"author":"Areek Zillur","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/ContextQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/ContextQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    IntsRefBuilder scratch = new IntsRefBuilder();\n    final Map<IntsRef, Float> contextMap = new HashMap<>(contexts.size());\n    final TreeSet<Integer> contextLengths = new TreeSet<>();\n    final CompletionWeight innerWeight = ((CompletionWeight) query.createWeight(searcher, needsScores));\n    Automaton contextsAutomaton = null;\n    Automaton gap = Automata.makeChar(ContextSuggestField.CONTEXT_SEPARATOR);\n    // if separators are preserved the fst contains a SEP_LABEL\n    // behind each gap. To have a matching automaton, we need to\n    // include the SEP_LABEL in the query as well\n    gap = Operations.concatenate(gap, Operations.optional(Automata.makeChar(CompletionAnalyzer.SEP_LABEL)));\n    final Automaton prefixAutomaton = Operations.concatenate(gap, innerWeight.getAutomaton());\n    final Automaton matchAllAutomaton = new RegExp(\".*\").toAutomaton();\n    for (Map.Entry<CharSequence, ContextMetaData> entry : contexts.entrySet()) {\n      Automaton contextAutomaton;\n      if (entry.getKey().equals(\"*\")) {\n        contextAutomaton = Operations.concatenate(matchAllAutomaton, prefixAutomaton);\n      } else {\n        BytesRef ref = new BytesRef(entry.getKey());\n        ContextMetaData contextMetaData = entry.getValue();\n        contextMap.put(IntsRef.deepCopyOf(Util.toIntsRef(ref, scratch)), contextMetaData.boost);\n        contextLengths.add(scratch.length());\n        contextAutomaton = Automata.makeString(entry.getKey().toString());\n        if (contextMetaData.exact) {\n          contextAutomaton = Operations.concatenate(contextAutomaton, prefixAutomaton);\n        } else {\n          contextAutomaton = Operations.concatenate(Arrays.asList(contextAutomaton,\n              matchAllAutomaton,\n              prefixAutomaton));\n        }\n      }\n      if (contextsAutomaton == null) {\n        contextsAutomaton = contextAutomaton;\n      } else {\n        contextsAutomaton = Operations.union(contextsAutomaton, contextAutomaton);\n      }\n    }\n    if (contexts.size() == 0) {\n      addContext(\"*\");\n      contextsAutomaton = Operations.concatenate(matchAllAutomaton, prefixAutomaton);\n    }\n    contextsAutomaton = Operations.determinize(contextsAutomaton, Operations.DEFAULT_MAX_DETERMINIZED_STATES);\n    int[] contextLengthArray = new int[contextLengths.size()];\n    final Iterator<Integer> iterator = contextLengths.descendingIterator();\n    for (int i = 0; iterator.hasNext(); i++) {\n      contextLengthArray[i] = iterator.next();\n    }\n    return new ContextCompletionWeight(this, contextsAutomaton, innerWeight, contextMap, contextLengthArray);\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    IntsRefBuilder scratch = new IntsRefBuilder();\n    final Map<IntsRef, Float> contextMap = new HashMap<>(contexts.size());\n    final TreeSet<Integer> contextLengths = new TreeSet<>();\n    final CompletionWeight innerWeight = ((CompletionWeight) query.createWeight(searcher, needsScores));\n    Automaton contextsAutomaton = null;\n    Automaton gap = Automata.makeChar(ContextSuggestField.CONTEXT_SEPARATOR);\n    // if separators are preserved the fst contains a SEP_LABEL\n    // behind each gap. To have a matching automaton, we need to\n    // include the SEP_LABEL in the query as well\n    gap = Operations.concatenate(gap, Operations.optional(Automata.makeChar(CompletionAnalyzer.SEP_LABEL)));\n    final Automaton prefixAutomaton = Operations.concatenate(gap, innerWeight.getAutomaton());\n    final Automaton matchAllAutomaton = new RegExp(\".*\").toAutomaton();\n    for (Map.Entry<CharSequence, ContextMetaData> entry : contexts.entrySet()) {\n      Automaton contextAutomaton;\n      if (entry.getKey().equals(\"*\")) {\n        contextAutomaton = Operations.concatenate(matchAllAutomaton, prefixAutomaton);\n      } else {\n        BytesRef ref = new BytesRef(entry.getKey());\n        ContextMetaData contextMetaData = entry.getValue();\n        contextMap.put(IntsRef.deepCopyOf(Util.toIntsRef(ref, scratch)), contextMetaData.boost);\n        contextLengths.add(scratch.length());\n        contextAutomaton = Automata.makeString(entry.getKey().toString());\n        if (contextMetaData.exact) {\n          contextAutomaton = Operations.concatenate(contextAutomaton, prefixAutomaton);\n        } else {\n          contextAutomaton = Operations.concatenate(Arrays.asList(contextAutomaton,\n              matchAllAutomaton,\n              prefixAutomaton));\n        }\n      }\n      if (contextsAutomaton == null) {\n        contextsAutomaton = contextAutomaton;\n      } else {\n        contextsAutomaton = Operations.union(contextsAutomaton, contextAutomaton);\n      }\n    }\n    if (contexts.size() == 0) {\n      addContext(\"*\");\n      contextsAutomaton = Operations.concatenate(matchAllAutomaton, prefixAutomaton);\n    }\n    contextsAutomaton = Operations.determinize(contextsAutomaton, Operations.DEFAULT_MAX_DETERMINIZED_STATES);\n    int[] contextLengthArray = new int[contextLengths.size()];\n    final Iterator<Integer> iterator = contextLengths.descendingIterator();\n    for (int i = 0; iterator.hasNext(); i++) {\n      contextLengthArray[i] = iterator.next();\n    }\n    return new ContextCompletionWeight(searcher.getIndexReader(), this, contextsAutomaton,\n        innerWeight, contextMap, contextLengthArray);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3e870f9bab17325ebf91f7500d2c05596634741","date":1438287049,"type":3,"author":"Areek Zillur","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/ContextQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/ContextQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final CompletionWeight innerWeight = ((CompletionWeight) innerQuery.createWeight(searcher, needsScores));\n    // if separators are preserved the fst contains a SEP_LABEL\n    // behind each gap. To have a matching automaton, we need to\n    // include the SEP_LABEL in the query as well\n    Automaton optionalSepLabel = Operations.optional(Automata.makeChar(CompletionAnalyzer.SEP_LABEL));\n    Automaton prefixAutomaton = Operations.concatenate(optionalSepLabel, innerWeight.getAutomaton());\n    Automaton contextsAutomaton = Operations.concatenate(toContextAutomaton(contexts, matchAllContexts), prefixAutomaton);\n    contextsAutomaton = Operations.determinize(contextsAutomaton, Operations.DEFAULT_MAX_DETERMINIZED_STATES);\n\n    final Map<IntsRef, Float> contextMap = new HashMap<>(contexts.size());\n    final TreeSet<Integer> contextLengths = new TreeSet<>();\n    for (Map.Entry<IntsRef, ContextMetaData> entry : contexts.entrySet()) {\n      ContextMetaData contextMetaData = entry.getValue();\n      contextMap.put(entry.getKey(), contextMetaData.boost);\n      contextLengths.add(entry.getKey().length);\n    }\n    int[] contextLengthArray = new int[contextLengths.size()];\n    final Iterator<Integer> iterator = contextLengths.descendingIterator();\n    for (int i = 0; iterator.hasNext(); i++) {\n      contextLengthArray[i] = iterator.next();\n    }\n    return new ContextCompletionWeight(this, contextsAutomaton, innerWeight, contextMap, contextLengthArray);\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    IntsRefBuilder scratch = new IntsRefBuilder();\n    final Map<IntsRef, Float> contextMap = new HashMap<>(contexts.size());\n    final TreeSet<Integer> contextLengths = new TreeSet<>();\n    final CompletionWeight innerWeight = ((CompletionWeight) query.createWeight(searcher, needsScores));\n    Automaton contextsAutomaton = null;\n    Automaton gap = Automata.makeChar(ContextSuggestField.CONTEXT_SEPARATOR);\n    // if separators are preserved the fst contains a SEP_LABEL\n    // behind each gap. To have a matching automaton, we need to\n    // include the SEP_LABEL in the query as well\n    gap = Operations.concatenate(gap, Operations.optional(Automata.makeChar(CompletionAnalyzer.SEP_LABEL)));\n    final Automaton prefixAutomaton = Operations.concatenate(gap, innerWeight.getAutomaton());\n    final Automaton matchAllAutomaton = new RegExp(\".*\").toAutomaton();\n    for (Map.Entry<CharSequence, ContextMetaData> entry : contexts.entrySet()) {\n      Automaton contextAutomaton;\n      if (entry.getKey().equals(\"*\")) {\n        contextAutomaton = Operations.concatenate(matchAllAutomaton, prefixAutomaton);\n      } else {\n        BytesRef ref = new BytesRef(entry.getKey());\n        ContextMetaData contextMetaData = entry.getValue();\n        contextMap.put(IntsRef.deepCopyOf(Util.toIntsRef(ref, scratch)), contextMetaData.boost);\n        contextLengths.add(scratch.length());\n        contextAutomaton = Automata.makeString(entry.getKey().toString());\n        if (contextMetaData.exact) {\n          contextAutomaton = Operations.concatenate(contextAutomaton, prefixAutomaton);\n        } else {\n          contextAutomaton = Operations.concatenate(Arrays.asList(contextAutomaton,\n              matchAllAutomaton,\n              prefixAutomaton));\n        }\n      }\n      if (contextsAutomaton == null) {\n        contextsAutomaton = contextAutomaton;\n      } else {\n        contextsAutomaton = Operations.union(contextsAutomaton, contextAutomaton);\n      }\n    }\n    if (contexts.size() == 0) {\n      addContext(\"*\");\n      contextsAutomaton = Operations.concatenate(matchAllAutomaton, prefixAutomaton);\n    }\n    contextsAutomaton = Operations.determinize(contextsAutomaton, Operations.DEFAULT_MAX_DETERMINIZED_STATES);\n    int[] contextLengthArray = new int[contextLengths.size()];\n    final Iterator<Integer> iterator = contextLengths.descendingIterator();\n    for (int i = 0; iterator.hasNext(); i++) {\n      contextLengthArray[i] = iterator.next();\n    }\n    return new ContextCompletionWeight(this, contextsAutomaton, innerWeight, contextMap, contextLengthArray);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/ContextQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/ContextQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final CompletionWeight innerWeight = ((CompletionWeight) innerQuery.createWeight(searcher, needsScores, boost));\n    // if separators are preserved the fst contains a SEP_LABEL\n    // behind each gap. To have a matching automaton, we need to\n    // include the SEP_LABEL in the query as well\n    Automaton optionalSepLabel = Operations.optional(Automata.makeChar(CompletionAnalyzer.SEP_LABEL));\n    Automaton prefixAutomaton = Operations.concatenate(optionalSepLabel, innerWeight.getAutomaton());\n    Automaton contextsAutomaton = Operations.concatenate(toContextAutomaton(contexts, matchAllContexts), prefixAutomaton);\n    contextsAutomaton = Operations.determinize(contextsAutomaton, Operations.DEFAULT_MAX_DETERMINIZED_STATES);\n\n    final Map<IntsRef, Float> contextMap = new HashMap<>(contexts.size());\n    final TreeSet<Integer> contextLengths = new TreeSet<>();\n    for (Map.Entry<IntsRef, ContextMetaData> entry : contexts.entrySet()) {\n      ContextMetaData contextMetaData = entry.getValue();\n      contextMap.put(entry.getKey(), contextMetaData.boost);\n      contextLengths.add(entry.getKey().length);\n    }\n    int[] contextLengthArray = new int[contextLengths.size()];\n    final Iterator<Integer> iterator = contextLengths.descendingIterator();\n    for (int i = 0; iterator.hasNext(); i++) {\n      contextLengthArray[i] = iterator.next();\n    }\n    return new ContextCompletionWeight(this, contextsAutomaton, innerWeight, contextMap, contextLengthArray);\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final CompletionWeight innerWeight = ((CompletionWeight) innerQuery.createWeight(searcher, needsScores));\n    // if separators are preserved the fst contains a SEP_LABEL\n    // behind each gap. To have a matching automaton, we need to\n    // include the SEP_LABEL in the query as well\n    Automaton optionalSepLabel = Operations.optional(Automata.makeChar(CompletionAnalyzer.SEP_LABEL));\n    Automaton prefixAutomaton = Operations.concatenate(optionalSepLabel, innerWeight.getAutomaton());\n    Automaton contextsAutomaton = Operations.concatenate(toContextAutomaton(contexts, matchAllContexts), prefixAutomaton);\n    contextsAutomaton = Operations.determinize(contextsAutomaton, Operations.DEFAULT_MAX_DETERMINIZED_STATES);\n\n    final Map<IntsRef, Float> contextMap = new HashMap<>(contexts.size());\n    final TreeSet<Integer> contextLengths = new TreeSet<>();\n    for (Map.Entry<IntsRef, ContextMetaData> entry : contexts.entrySet()) {\n      ContextMetaData contextMetaData = entry.getValue();\n      contextMap.put(entry.getKey(), contextMetaData.boost);\n      contextLengths.add(entry.getKey().length);\n    }\n    int[] contextLengthArray = new int[contextLengths.size()];\n    final Iterator<Integer> iterator = contextLengths.descendingIterator();\n    for (int i = 0; iterator.hasNext(); i++) {\n      contextLengthArray[i] = iterator.next();\n    }\n    return new ContextCompletionWeight(this, contextsAutomaton, innerWeight, contextMap, contextLengthArray);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/ContextQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final CompletionWeight innerWeight = ((CompletionWeight) innerQuery.createWeight(searcher, needsScores));\n    // if separators are preserved the fst contains a SEP_LABEL\n    // behind each gap. To have a matching automaton, we need to\n    // include the SEP_LABEL in the query as well\n    Automaton optionalSepLabel = Operations.optional(Automata.makeChar(CompletionAnalyzer.SEP_LABEL));\n    Automaton prefixAutomaton = Operations.concatenate(optionalSepLabel, innerWeight.getAutomaton());\n    Automaton contextsAutomaton = Operations.concatenate(toContextAutomaton(contexts, matchAllContexts), prefixAutomaton);\n    contextsAutomaton = Operations.determinize(contextsAutomaton, Operations.DEFAULT_MAX_DETERMINIZED_STATES);\n\n    final Map<IntsRef, Float> contextMap = new HashMap<>(contexts.size());\n    final TreeSet<Integer> contextLengths = new TreeSet<>();\n    for (Map.Entry<IntsRef, ContextMetaData> entry : contexts.entrySet()) {\n      ContextMetaData contextMetaData = entry.getValue();\n      contextMap.put(entry.getKey(), contextMetaData.boost);\n      contextLengths.add(entry.getKey().length);\n    }\n    int[] contextLengthArray = new int[contextLengths.size()];\n    final Iterator<Integer> iterator = contextLengths.descendingIterator();\n    for (int i = 0; iterator.hasNext(); i++) {\n      contextLengthArray[i] = iterator.next();\n    }\n    return new ContextCompletionWeight(this, contextsAutomaton, innerWeight, contextMap, contextLengthArray);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"66756ce4574b3c2fdc15740945140daf28792f5f":["8c33f6677a2078739058f81eca1df69d12cd62b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["d3e870f9bab17325ebf91f7500d2c05596634741"],"d3e870f9bab17325ebf91f7500d2c05596634741":["66756ce4574b3c2fdc15740945140daf28792f5f"],"8c33f6677a2078739058f81eca1df69d12cd62b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["d3e870f9bab17325ebf91f7500d2c05596634741","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"]},"commit2Childs":{"66756ce4574b3c2fdc15740945140daf28792f5f":["d3e870f9bab17325ebf91f7500d2c05596634741"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c33f6677a2078739058f81eca1df69d12cd62b0"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d3e870f9bab17325ebf91f7500d2c05596634741":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"8c33f6677a2078739058f81eca1df69d12cd62b0":["66756ce4574b3c2fdc15740945140daf28792f5f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}