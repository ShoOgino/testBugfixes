{"path":"solr/core/src/java/org/apache/solr/search/DocSetUtil#collectSortedDocSet(DocSet,IndexReader,Collector).mjava","commits":[{"id":"3661d6742eed69ff6cc30ea2538d572624a7cdf8","date":1472676864,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetUtil#collectSortedDocSet(DocSet,IndexReader,Collector).mjava","pathOld":"/dev/null","sourceNew":"  public static void collectSortedDocSet(DocSet docs, IndexReader reader, Collector collector) throws IOException {\n    // TODO add SortedDocSet sub-interface and take that.\n    // TODO collectUnsortedDocSet: iterate segment, then all docSet per segment.\n\n    final List<LeafReaderContext> leaves = reader.leaves();\n    final Iterator<LeafReaderContext> ctxIt = leaves.iterator();\n    int segBase = 0;\n    int segMax;\n    int adjustedMax = 0;\n    LeafReaderContext ctx = null;\n    LeafCollector leafCollector = null;\n    for (DocIterator docsIt = docs.iterator(); docsIt.hasNext(); ) {\n      final int doc = docsIt.nextDoc();\n      if (doc >= adjustedMax) {\n        do {\n          ctx = ctxIt.next();\n          segBase = ctx.docBase;\n          segMax = ctx.reader().maxDoc();\n          adjustedMax = segBase + segMax;\n        } while (doc >= adjustedMax);\n        leafCollector = collector.getLeafCollector(ctx);\n      }\n      if (doc < segBase) {\n        throw new IllegalStateException(\"algorithm expects sorted DocSet but wasn't: \" + docs.getClass());\n      }\n      leafCollector.collect(doc - segBase);  // per-seg collectors\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f206328a706450934717bec7ccc22ad166fc0","date":1473142172,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetUtil#collectSortedDocSet(DocSet,IndexReader,Collector).mjava","pathOld":"/dev/null","sourceNew":"  public static void collectSortedDocSet(DocSet docs, IndexReader reader, Collector collector) throws IOException {\n    // TODO add SortedDocSet sub-interface and take that.\n    // TODO collectUnsortedDocSet: iterate segment, then all docSet per segment.\n\n    final List<LeafReaderContext> leaves = reader.leaves();\n    final Iterator<LeafReaderContext> ctxIt = leaves.iterator();\n    int segBase = 0;\n    int segMax;\n    int adjustedMax = 0;\n    LeafReaderContext ctx = null;\n    LeafCollector leafCollector = null;\n    for (DocIterator docsIt = docs.iterator(); docsIt.hasNext(); ) {\n      final int doc = docsIt.nextDoc();\n      if (doc >= adjustedMax) {\n        do {\n          ctx = ctxIt.next();\n          segBase = ctx.docBase;\n          segMax = ctx.reader().maxDoc();\n          adjustedMax = segBase + segMax;\n        } while (doc >= adjustedMax);\n        leafCollector = collector.getLeafCollector(ctx);\n      }\n      if (doc < segBase) {\n        throw new IllegalStateException(\"algorithm expects sorted DocSet but wasn't: \" + docs.getClass());\n      }\n      leafCollector.collect(doc - segBase);  // per-seg collectors\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetUtil#collectSortedDocSet(DocSet,IndexReader,Collector).mjava","pathOld":"/dev/null","sourceNew":"  public static void collectSortedDocSet(DocSet docs, IndexReader reader, Collector collector) throws IOException {\n    // TODO add SortedDocSet sub-interface and take that.\n    // TODO collectUnsortedDocSet: iterate segment, then all docSet per segment.\n\n    final List<LeafReaderContext> leaves = reader.leaves();\n    final Iterator<LeafReaderContext> ctxIt = leaves.iterator();\n    int segBase = 0;\n    int segMax;\n    int adjustedMax = 0;\n    LeafReaderContext ctx = null;\n    LeafCollector leafCollector = null;\n    for (DocIterator docsIt = docs.iterator(); docsIt.hasNext(); ) {\n      final int doc = docsIt.nextDoc();\n      if (doc >= adjustedMax) {\n        do {\n          ctx = ctxIt.next();\n          segBase = ctx.docBase;\n          segMax = ctx.reader().maxDoc();\n          adjustedMax = segBase + segMax;\n        } while (doc >= adjustedMax);\n        leafCollector = collector.getLeafCollector(ctx);\n      }\n      if (doc < segBase) {\n        throw new IllegalStateException(\"algorithm expects sorted DocSet but wasn't: \" + docs.getClass());\n      }\n      leafCollector.collect(doc - segBase);  // per-seg collectors\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetUtil#collectSortedDocSet(DocSet,IndexReader,Collector).mjava","pathOld":"/dev/null","sourceNew":"  public static void collectSortedDocSet(DocSet docs, IndexReader reader, Collector collector) throws IOException {\n    // TODO add SortedDocSet sub-interface and take that.\n    // TODO collectUnsortedDocSet: iterate segment, then all docSet per segment.\n\n    final List<LeafReaderContext> leaves = reader.leaves();\n    final Iterator<LeafReaderContext> ctxIt = leaves.iterator();\n    int segBase = 0;\n    int segMax;\n    int adjustedMax = 0;\n    LeafReaderContext ctx = null;\n    LeafCollector leafCollector = null;\n    for (DocIterator docsIt = docs.iterator(); docsIt.hasNext(); ) {\n      final int doc = docsIt.nextDoc();\n      if (doc >= adjustedMax) {\n        do {\n          ctx = ctxIt.next();\n          segBase = ctx.docBase;\n          segMax = ctx.reader().maxDoc();\n          adjustedMax = segBase + segMax;\n        } while (doc >= adjustedMax);\n        leafCollector = collector.getLeafCollector(ctx);\n      }\n      if (doc < segBase) {\n        throw new IllegalStateException(\"algorithm expects sorted DocSet but wasn't: \" + docs.getClass());\n      }\n      leafCollector.collect(doc - segBase);  // per-seg collectors\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3661d6742eed69ff6cc30ea2538d572624a7cdf8"],"3661d6742eed69ff6cc30ea2538d572624a7cdf8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bc8f206328a706450934717bec7ccc22ad166fc0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3661d6742eed69ff6cc30ea2538d572624a7cdf8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","3661d6742eed69ff6cc30ea2538d572624a7cdf8","bc8f206328a706450934717bec7ccc22ad166fc0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3661d6742eed69ff6cc30ea2538d572624a7cdf8":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","bc8f206328a706450934717bec7ccc22ad166fc0"],"bc8f206328a706450934717bec7ccc22ad166fc0":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["bc8f206328a706450934717bec7ccc22ad166fc0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}