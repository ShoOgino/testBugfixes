{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/response/AnalysisResponseBase.TokenInfo#TokenInfo(String,String,String,int,int,int,boolean).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/AnalysisResponseBase.TokenInfo#TokenInfo(String,String,String,int,int,int,boolean).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/AnalysisResponseBase.TokenInfo#TokenInfo(String,String,String,int,int,int,boolean).mjava","sourceNew":"    /**\n     * Constructs a new TokenInfo.\n     *\n     * @param text     The text of the token\n     * @param rawText  The raw text of the token. If the token is stored in the index in a special format (e.g.\n     *                 dates or padded numbers) this argument should hold this value. If the token is stored as is,\n     *                 then this value should be {@code null}.\n     * @param type     The type fo the token (typically either {@code word} or {@code <ALPHANUM>} though it depends\n     *                 on the tokenizer/filter used).\n     * @param start    The start position of the token in the original text where it was extracted from.\n     * @param end      The end position of the token in the original text where it was extracted from.\n     * @param position The position of the token within the token stream.\n     * @param match    Indicates whether this token matches one of the the query tokens.\n     */\n    TokenInfo(String text, String rawText, String type, int start, int end, int position, boolean match) {\n      this.text = text;\n      this.rawText = rawText;\n      this.type = type;\n      this.start = start;\n      this.end = end;\n      this.position = position;\n      this.match = match;\n    }\n\n","sourceOld":"    /**\n     * Constructs a new TokenInfo.\n     *\n     * @param text     The text of the token\n     * @param rawText  The raw text of the token. If the token is stored in the index in a special format (e.g.\n     *                 dates or padded numbers) this argument should hold this value. If the token is stored as is,\n     *                 then this value should be {@code null}.\n     * @param type     The type fo the token (typically either {@code word} or {@code <ALPHANUM>} though it depends\n     *                 on the tokenizer/filter used).\n     * @param start    The start position of the token in the original text where it was extracted from.\n     * @param end      The end position of the token in the original text where it was extracted from.\n     * @param position The position of the token within the token stream.\n     * @param match    Indicates whether this token matches one of the the query tokens.\n     */\n    TokenInfo(String text, String rawText, String type, int start, int end, int position, boolean match) {\n      this.text = text;\n      this.rawText = rawText;\n      this.type = type;\n      this.start = start;\n      this.end = end;\n      this.position = position;\n      this.match = match;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/AnalysisResponseBase.TokenInfo#TokenInfo(String,String,String,int,int,int,boolean).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/AnalysisResponseBase.TokenInfo#TokenInfo(String,String,String,int,int,int,boolean).mjava","sourceNew":"    /**\n     * Constructs a new TokenInfo.\n     *\n     * @param text     The text of the token\n     * @param rawText  The raw text of the token. If the token is stored in the index in a special format (e.g.\n     *                 dates or padded numbers) this argument should hold this value. If the token is stored as is,\n     *                 then this value should be {@code null}.\n     * @param type     The type fo the token (typically either {@code word} or {@code <ALPHANUM>} though it depends\n     *                 on the tokenizer/filter used).\n     * @param start    The start position of the token in the original text where it was extracted from.\n     * @param end      The end position of the token in the original text where it was extracted from.\n     * @param position The position of the token within the token stream.\n     * @param match    Indicates whether this token matches one of the the query tokens.\n     */\n    TokenInfo(String text, String rawText, String type, int start, int end, int position, boolean match) {\n      this.text = text;\n      this.rawText = rawText;\n      this.type = type;\n      this.start = start;\n      this.end = end;\n      this.position = position;\n      this.match = match;\n    }\n\n","sourceOld":"    /**\n     * Constructs a new TokenInfo.\n     *\n     * @param text     The text of the token\n     * @param rawText  The raw text of the token. If the token is stored in the index in a special format (e.g.\n     *                 dates or padded numbers) this argument should hold this value. If the token is stored as is,\n     *                 then this value should be {@code null}.\n     * @param type     The type fo the token (typically either {@code word} or {@code <ALPHANUM>} though it depends\n     *                 on the tokenizer/filter used).\n     * @param start    The start position of the token in the original text where it was extracted from.\n     * @param end      The end position of the token in the original text where it was extracted from.\n     * @param position The position of the token within the token stream.\n     * @param match    Indicates whether this token matches one of the the query tokens.\n     */\n    TokenInfo(String text, String rawText, String type, int start, int end, int position, boolean match) {\n      this.text = text;\n      this.rawText = rawText;\n      this.type = type;\n      this.start = start;\n      this.end = end;\n      this.position = position;\n      this.match = match;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/AnalysisResponseBase.TokenInfo#TokenInfo(String,String,String,int,int,int,boolean).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/AnalysisResponseBase.TokenInfo#TokenInfo(String,String,String,int,int,int,boolean).mjava","sourceNew":"    /**\n     * Constructs a new TokenInfo.\n     *\n     * @param text     The text of the token\n     * @param rawText  The raw text of the token. If the token is stored in the index in a special format (e.g.\n     *                 dates or padded numbers) this argument should hold this value. If the token is stored as is,\n     *                 then this value should be {@code null}.\n     * @param type     The type fo the token (typically either {@code word} or {@code <ALPHANUM>} though it depends\n     *                 on the tokenizer/filter used).\n     * @param start    The start position of the token in the original text where it was extracted from.\n     * @param end      The end position of the token in the original text where it was extracted from.\n     * @param position The position of the token within the token stream.\n     * @param match    Indicates whether this token matches one of the the query tokens.\n     */\n    TokenInfo(String text, String rawText, String type, int start, int end, int position, boolean match) {\n      this.text = text;\n      this.rawText = rawText;\n      this.type = type;\n      this.start = start;\n      this.end = end;\n      this.position = position;\n      this.match = match;\n    }\n\n","sourceOld":"    /**\n     * Constructs a new TokenInfo.\n     *\n     * @param text     The text of the token\n     * @param rawText  The raw text of the token. If the token is stored in the index in a special format (e.g.\n     *                 dates or padded numbers) this argument should hold this value. If the token is stored as is,\n     *                 then this value should be {@code null}.\n     * @param type     The type fo the token (typically either {@code word} or {@code <ALPHANUM>} though it depends\n     *                 on the tokenizer/filter used).\n     * @param start    The start position of the token in the original text where it was extracted from.\n     * @param end      The end position of the token in the original text where it was extracted from.\n     * @param position The position of the token within the token stream.\n     * @param match    Indicates whether this token matches one of the the query tokens.\n     */\n    TokenInfo(String text, String rawText, String type, int start, int end, int position, boolean match) {\n      this.text = text;\n      this.rawText = rawText;\n      this.type = type;\n      this.start = start;\n      this.end = end;\n      this.position = position;\n      this.match = match;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3570e776df3671c1bce4f54b07bf03ca5a2c23de","date":1593033351,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/AnalysisResponseBase.TokenInfo#TokenInfo(String,String,String,int,int,int,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/AnalysisResponseBase.TokenInfo#TokenInfo(String,String,String,int,int,int,boolean).mjava","sourceNew":"    /**\n     * Constructs a new TokenInfo.\n     *\n     * @param text     The text of the token\n     * @param rawText  The raw text of the token. If the token is stored in the index in a special format (e.g.\n     *                 dates or padded numbers) this argument should hold this value. If the token is stored as is,\n     *                 then this value should be {@code null}.\n     * @param type     The type fo the token (typically either {@code word} or {@code <ALPHANUM>} though it depends\n     *                 on the tokenizer/filter used).\n     * @param start    The start position of the token in the original text where it was extracted from.\n     * @param end      The end position of the token in the original text where it was extracted from.\n     * @param position The position of the token within the token stream.\n     * @param match    Indicates whether this token matches one of the query tokens.\n     */\n    TokenInfo(String text, String rawText, String type, int start, int end, int position, boolean match) {\n      this.text = text;\n      this.rawText = rawText;\n      this.type = type;\n      this.start = start;\n      this.end = end;\n      this.position = position;\n      this.match = match;\n    }\n\n","sourceOld":"    /**\n     * Constructs a new TokenInfo.\n     *\n     * @param text     The text of the token\n     * @param rawText  The raw text of the token. If the token is stored in the index in a special format (e.g.\n     *                 dates or padded numbers) this argument should hold this value. If the token is stored as is,\n     *                 then this value should be {@code null}.\n     * @param type     The type fo the token (typically either {@code word} or {@code <ALPHANUM>} though it depends\n     *                 on the tokenizer/filter used).\n     * @param start    The start position of the token in the original text where it was extracted from.\n     * @param end      The end position of the token in the original text where it was extracted from.\n     * @param position The position of the token within the token stream.\n     * @param match    Indicates whether this token matches one of the the query tokens.\n     */\n    TokenInfo(String text, String rawText, String type, int start, int end, int position, boolean match) {\n      this.text = text;\n      this.rawText = rawText;\n      this.type = type;\n      this.start = start;\n      this.end = end;\n      this.position = position;\n      this.match = match;\n    }\n\n","bugFix":["68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3570e776df3671c1bce4f54b07bf03ca5a2c23de":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3570e776df3671c1bce4f54b07bf03ca5a2c23de"]},"commit2Childs":{"3570e776df3671c1bce4f54b07bf03ca5a2c23de":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["3570e776df3671c1bce4f54b07bf03ca5a2c23de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}