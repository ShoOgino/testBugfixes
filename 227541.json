{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/VariableResolver#resolve(String).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/VariableResolver#resolve(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/VariableResolver#resolve(String).mjava","sourceNew":"  /**\n   * Resolves a given value with a name\n   *\n   * @param name the String to be resolved\n   * @return an Object which is the result of evaluation of given name\n   */\n  public abstract Object resolve(String name);\n\n","sourceOld":"  /**\n   * Resolves a given value with a name\n   *\n   * @param name the String to be resolved\n   * @return an Object which is the result of evaluation of given name\n   */\n  public abstract Object resolve(String name);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/VariableResolver#resolve(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/VariableResolver#resolve(String).mjava","sourceNew":"  /**\n   * Resolves a given value with a name\n   *\n   * @param name the String to be resolved\n   * @return an Object which is the result of evaluation of given name\n   */\n  public abstract Object resolve(String name);\n\n","sourceOld":"  /**\n   * Resolves a given value with a name\n   *\n   * @param name the String to be resolved\n   * @return an Object which is the result of evaluation of given name\n   */\n  public abstract Object resolve(String name);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c7b0ae5716b6c2044195a818e9ae58205175659","date":1353342230,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/VariableResolver#resolve(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/VariableResolver#resolve(String).mjava","sourceNew":"  /**\n   * Resolves a given value with a name\n   * \n   * @param name\n   *          the String to be resolved\n   * @return an Object which is the result of evaluation of given name\n   */\n  public Object resolve(String name) {\n    Object r = null;\n    if (name != null) {\n      String[] nameParts = DOT_PATTERN.split(name);\n      Map<String,Object> currentLevel = currentLevelMap(nameParts,\n          rootNamespace, false);\n      r = currentLevel.get(nameParts[nameParts.length - 1]);\n      if (r == null && name.startsWith(FUNCTIONS_NAMESPACE)\n          && name.length() > FUNCTIONS_NAMESPACE.length()) {\n        return resolveEvaluator(name);\n      }\n      if (r == null) {\n        r = System.getProperty(name);\n      }\n    }\n    return r == null ? \"\" : r;\n  }\n\n","sourceOld":"  /**\n   * Resolves a given value with a name\n   *\n   * @param name the String to be resolved\n   * @return an Object which is the result of evaluation of given name\n   */\n  public abstract Object resolve(String name);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d30d20145e9c54b7890711c3307fade007068e9f","date":1354032746,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/VariableResolver#resolve(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/VariableResolver#resolve(String).mjava","sourceNew":"  /**\n   * Resolves a given value with a name\n   * \n   * @param name\n   *          the String to be resolved\n   * @return an Object which is the result of evaluation of given name\n   */\n  public Object resolve(String name) {\n    Object r = null;\n    if (name != null) {\n      String[] nameParts = DOT_PATTERN.split(name);\n      Map<String,Object> currentLevel = currentLevelMap(nameParts,\n          rootNamespace, false);\n      r = currentLevel.get(nameParts[nameParts.length - 1]);\n      if (r == null && name.startsWith(FUNCTIONS_NAMESPACE)\n          && name.length() > FUNCTIONS_NAMESPACE.length()) {\n        return resolveEvaluator(FUNCTIONS_NAMESPACE, name);\n      }\n      if (r == null && name.startsWith(FUNCTIONS_NAMESPACE_SHORT)\n          && name.length() > FUNCTIONS_NAMESPACE_SHORT.length()) {\n        return resolveEvaluator(FUNCTIONS_NAMESPACE_SHORT, name);\n      }\n      if (r == null) {\n        r = System.getProperty(name);\n      }\n    }\n    return r == null ? \"\" : r;\n  }\n\n","sourceOld":"  /**\n   * Resolves a given value with a name\n   * \n   * @param name\n   *          the String to be resolved\n   * @return an Object which is the result of evaluation of given name\n   */\n  public Object resolve(String name) {\n    Object r = null;\n    if (name != null) {\n      String[] nameParts = DOT_PATTERN.split(name);\n      Map<String,Object> currentLevel = currentLevelMap(nameParts,\n          rootNamespace, false);\n      r = currentLevel.get(nameParts[nameParts.length - 1]);\n      if (r == null && name.startsWith(FUNCTIONS_NAMESPACE)\n          && name.length() > FUNCTIONS_NAMESPACE.length()) {\n        return resolveEvaluator(name);\n      }\n      if (r == null) {\n        r = System.getProperty(name);\n      }\n    }\n    return r == null ? \"\" : r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/VariableResolver#resolve(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/VariableResolver#resolve(String).mjava","sourceNew":"  /**\n   * Resolves a given value with a name\n   * \n   * @param name\n   *          the String to be resolved\n   * @return an Object which is the result of evaluation of given name\n   */\n  public Object resolve(String name) {\n    Object r = null;\n    if (name != null) {\n      String[] nameParts = DOT_PATTERN.split(name);\n      Map<String,Object> currentLevel = currentLevelMap(nameParts,\n          rootNamespace, false);\n      r = currentLevel.get(nameParts[nameParts.length - 1]);\n      if (r == null && name.startsWith(FUNCTIONS_NAMESPACE)\n          && name.length() > FUNCTIONS_NAMESPACE.length()) {\n        return resolveEvaluator(FUNCTIONS_NAMESPACE, name);\n      }\n      if (r == null && name.startsWith(FUNCTIONS_NAMESPACE_SHORT)\n          && name.length() > FUNCTIONS_NAMESPACE_SHORT.length()) {\n        return resolveEvaluator(FUNCTIONS_NAMESPACE_SHORT, name);\n      }\n      if (r == null) {\n        r = System.getProperty(name);\n      }\n    }\n    return r == null ? \"\" : r;\n  }\n\n","sourceOld":"  /**\n   * Resolves a given value with a name\n   *\n   * @param name the String to be resolved\n   * @return an Object which is the result of evaluation of given name\n   */\n  public abstract Object resolve(String name);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba58b751368f9b74be72216b17abfb47ecb18588","date":1363023437,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/VariableResolver#resolve(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/VariableResolver#resolve(String).mjava","sourceNew":"  /**\n   * Resolves a given value with a name\n   * \n   * @param name\n   *          the String to be resolved\n   * @return an Object which is the result of evaluation of given name\n   */\n  public Object resolve(String name) {\n    Object r = null;\n    if (name != null) {\n      String[] nameParts = DOT_PATTERN.split(name);\n      CurrentLevel cr = currentLevelMap(nameParts,\n          rootNamespace, false);\n      Map<String,Object> currentLevel = cr.map;\n      r = currentLevel.get(nameParts[nameParts.length - 1]);\n      if (r == null && name.startsWith(FUNCTIONS_NAMESPACE)\n          && name.length() > FUNCTIONS_NAMESPACE.length()) {\n        return resolveEvaluator(FUNCTIONS_NAMESPACE, name);\n      }\n      if (r == null && name.startsWith(FUNCTIONS_NAMESPACE_SHORT)\n          && name.length() > FUNCTIONS_NAMESPACE_SHORT.length()) {\n        return resolveEvaluator(FUNCTIONS_NAMESPACE_SHORT, name);\n      }\n      if (r == null) {\n        StringBuilder sb = new StringBuilder();\n        for(int i=cr.level ; i<nameParts.length ; i++) {\n          if(sb.length()>0) {\n            sb.append(\".\");\n          }\n          sb.append(nameParts[i]);\n        }\n        r = cr.map.get(sb.toString());\n      }      \n      if (r == null) {\n        r = System.getProperty(name);\n      }\n    }\n    return r == null ? \"\" : r;\n  }\n\n","sourceOld":"  /**\n   * Resolves a given value with a name\n   * \n   * @param name\n   *          the String to be resolved\n   * @return an Object which is the result of evaluation of given name\n   */\n  public Object resolve(String name) {\n    Object r = null;\n    if (name != null) {\n      String[] nameParts = DOT_PATTERN.split(name);\n      Map<String,Object> currentLevel = currentLevelMap(nameParts,\n          rootNamespace, false);\n      r = currentLevel.get(nameParts[nameParts.length - 1]);\n      if (r == null && name.startsWith(FUNCTIONS_NAMESPACE)\n          && name.length() > FUNCTIONS_NAMESPACE.length()) {\n        return resolveEvaluator(FUNCTIONS_NAMESPACE, name);\n      }\n      if (r == null && name.startsWith(FUNCTIONS_NAMESPACE_SHORT)\n          && name.length() > FUNCTIONS_NAMESPACE_SHORT.length()) {\n        return resolveEvaluator(FUNCTIONS_NAMESPACE_SHORT, name);\n      }\n      if (r == null) {\n        r = System.getProperty(name);\n      }\n    }\n    return r == null ? \"\" : r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/VariableResolver#resolve(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Resolves a given value with a name\n   * \n   * @param name\n   *          the String to be resolved\n   * @return an Object which is the result of evaluation of given name\n   */\n  public Object resolve(String name) {\n    Object r = null;\n    if (name != null) {\n      String[] nameParts = DOT_PATTERN.split(name);\n      CurrentLevel cr = currentLevelMap(nameParts,\n          rootNamespace, false);\n      Map<String,Object> currentLevel = cr.map;\n      r = currentLevel.get(nameParts[nameParts.length - 1]);\n      if (r == null && name.startsWith(FUNCTIONS_NAMESPACE)\n          && name.length() > FUNCTIONS_NAMESPACE.length()) {\n        return resolveEvaluator(FUNCTIONS_NAMESPACE, name);\n      }\n      if (r == null && name.startsWith(FUNCTIONS_NAMESPACE_SHORT)\n          && name.length() > FUNCTIONS_NAMESPACE_SHORT.length()) {\n        return resolveEvaluator(FUNCTIONS_NAMESPACE_SHORT, name);\n      }\n      if (r == null) {\n        StringBuilder sb = new StringBuilder();\n        for(int i=cr.level ; i<nameParts.length ; i++) {\n          if(sb.length()>0) {\n            sb.append(\".\");\n          }\n          sb.append(nameParts[i]);\n        }\n        r = cr.map.get(sb.toString());\n      }      \n      if (r == null) {\n        r = System.getProperty(name);\n      }\n    }\n    return r == null ? \"\" : r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba58b751368f9b74be72216b17abfb47ecb18588":["d30d20145e9c54b7890711c3307fade007068e9f"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["ba58b751368f9b74be72216b17abfb47ecb18588"],"7c7b0ae5716b6c2044195a818e9ae58205175659":["c26f00b574427b55127e869b935845554afde1fa"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["c26f00b574427b55127e869b935845554afde1fa","d30d20145e9c54b7890711c3307fade007068e9f"],"d30d20145e9c54b7890711c3307fade007068e9f":["7c7b0ae5716b6c2044195a818e9ae58205175659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"ba58b751368f9b74be72216b17abfb47ecb18588":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c7b0ae5716b6c2044195a818e9ae58205175659":["d30d20145e9c54b7890711c3307fade007068e9f"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["7c7b0ae5716b6c2044195a818e9ae58205175659","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"d30d20145e9c54b7890711c3307fade007068e9f":["ba58b751368f9b74be72216b17abfb47ecb18588","407687e67faf6e1f02a211ca078d8e3eed631027"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}