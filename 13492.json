{"path":"solr/core/src/java/org/apache/solr/servlet/MultipartRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/MultipartRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/MultipartRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"  public SolrParams parseParamsAndFillStreams( \n      final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n  {\n    if( !ServletFileUpload.isMultipartContent(req) ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Not multipart content! \"+req.getContentType() );\n    }\n    \n    MultiMapSolrParams params = SolrRequestParsers.parseQueryString( req.getQueryString() );\n    \n    // Create a factory for disk-based file items\n    DiskFileItemFactory factory = new DiskFileItemFactory();\n\n    // Set factory constraints\n    // TODO - configure factory.setSizeThreshold(yourMaxMemorySize);\n    // TODO - configure factory.setRepository(yourTempDirectory);\n\n    // Create a new file upload handler\n    ServletFileUpload upload = new ServletFileUpload(factory);\n    upload.setSizeMax( uploadLimitKB*1024 );\n\n    // Parse the request\n    List items = upload.parseRequest(req);\n    Iterator iter = items.iterator();\n    while (iter.hasNext()) {\n        FileItem item = (FileItem) iter.next();\n\n        // If its a form field, put it in our parameter map\n        if (item.isFormField()) {\n          MultiMapSolrParams.addParam( \n            item.getFieldName(), \n            item.getString(), params.getMap() );\n        }\n        // Only add it if it actually has something...\n        else if( item.getSize() > 0 ) { \n          streams.add( new FileItemContentStream( item ) );\n        }\n    }\n    return params;\n  }\n\n","sourceOld":"  public SolrParams parseParamsAndFillStreams( \n      final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n  {\n    if( !ServletFileUpload.isMultipartContent(req) ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Not multipart content! \"+req.getContentType() );\n    }\n    \n    MultiMapSolrParams params = SolrRequestParsers.parseQueryString( req.getQueryString() );\n    \n    // Create a factory for disk-based file items\n    DiskFileItemFactory factory = new DiskFileItemFactory();\n\n    // Set factory constraints\n    // TODO - configure factory.setSizeThreshold(yourMaxMemorySize);\n    // TODO - configure factory.setRepository(yourTempDirectory);\n\n    // Create a new file upload handler\n    ServletFileUpload upload = new ServletFileUpload(factory);\n    upload.setSizeMax( uploadLimitKB*1024 );\n\n    // Parse the request\n    List items = upload.parseRequest(req);\n    Iterator iter = items.iterator();\n    while (iter.hasNext()) {\n        FileItem item = (FileItem) iter.next();\n\n        // If its a form field, put it in our parameter map\n        if (item.isFormField()) {\n          MultiMapSolrParams.addParam( \n            item.getFieldName(), \n            item.getString(), params.getMap() );\n        }\n        // Only add it if it actually has something...\n        else if( item.getSize() > 0 ) { \n          streams.add( new FileItemContentStream( item ) );\n        }\n    }\n    return params;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/MultipartRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/MultipartRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"  public SolrParams parseParamsAndFillStreams( \n      final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n  {\n    if( !ServletFileUpload.isMultipartContent(req) ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Not multipart content! \"+req.getContentType() );\n    }\n    \n    MultiMapSolrParams params = SolrRequestParsers.parseQueryString( req.getQueryString() );\n    \n    // Create a factory for disk-based file items\n    DiskFileItemFactory factory = new DiskFileItemFactory();\n\n    // Set factory constraints\n    // TODO - configure factory.setSizeThreshold(yourMaxMemorySize);\n    // TODO - configure factory.setRepository(yourTempDirectory);\n\n    // Create a new file upload handler\n    ServletFileUpload upload = new ServletFileUpload(factory);\n    upload.setSizeMax( uploadLimitKB*1024 );\n\n    // Parse the request\n    List items = upload.parseRequest(req);\n    Iterator iter = items.iterator();\n    while (iter.hasNext()) {\n        FileItem item = (FileItem) iter.next();\n\n        // If its a form field, put it in our parameter map\n        if (item.isFormField()) {\n          MultiMapSolrParams.addParam( \n            item.getFieldName(), \n            item.getString(), params.getMap() );\n        }\n        // Only add it if it actually has something...\n        else if( item.getSize() > 0 ) { \n          streams.add( new FileItemContentStream( item ) );\n        }\n    }\n    return params;\n  }\n\n","sourceOld":"  public SolrParams parseParamsAndFillStreams( \n      final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n  {\n    if( !ServletFileUpload.isMultipartContent(req) ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Not multipart content! \"+req.getContentType() );\n    }\n    \n    MultiMapSolrParams params = SolrRequestParsers.parseQueryString( req.getQueryString() );\n    \n    // Create a factory for disk-based file items\n    DiskFileItemFactory factory = new DiskFileItemFactory();\n\n    // Set factory constraints\n    // TODO - configure factory.setSizeThreshold(yourMaxMemorySize);\n    // TODO - configure factory.setRepository(yourTempDirectory);\n\n    // Create a new file upload handler\n    ServletFileUpload upload = new ServletFileUpload(factory);\n    upload.setSizeMax( uploadLimitKB*1024 );\n\n    // Parse the request\n    List items = upload.parseRequest(req);\n    Iterator iter = items.iterator();\n    while (iter.hasNext()) {\n        FileItem item = (FileItem) iter.next();\n\n        // If its a form field, put it in our parameter map\n        if (item.isFormField()) {\n          MultiMapSolrParams.addParam( \n            item.getFieldName(), \n            item.getString(), params.getMap() );\n        }\n        // Only add it if it actually has something...\n        else if( item.getSize() > 0 ) { \n          streams.add( new FileItemContentStream( item ) );\n        }\n    }\n    return params;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/MultipartRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/MultipartRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"  public SolrParams parseParamsAndFillStreams( \n      final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n  {\n    if( !ServletFileUpload.isMultipartContent(req) ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Not multipart content! \"+req.getContentType() );\n    }\n    \n    MultiMapSolrParams params = SolrRequestParsers.parseQueryString( req.getQueryString() );\n    \n    // Create a factory for disk-based file items\n    DiskFileItemFactory factory = new DiskFileItemFactory();\n\n    // Set factory constraints\n    // TODO - configure factory.setSizeThreshold(yourMaxMemorySize);\n    // TODO - configure factory.setRepository(yourTempDirectory);\n\n    // Create a new file upload handler\n    ServletFileUpload upload = new ServletFileUpload(factory);\n    upload.setSizeMax( uploadLimitKB*1024 );\n\n    // Parse the request\n    List items = upload.parseRequest(req);\n    Iterator iter = items.iterator();\n    while (iter.hasNext()) {\n        FileItem item = (FileItem) iter.next();\n\n        // If its a form field, put it in our parameter map\n        if (item.isFormField()) {\n          MultiMapSolrParams.addParam( \n            item.getFieldName(), \n            item.getString(), params.getMap() );\n        }\n        // Only add it if it actually has something...\n        else if( item.getSize() > 0 ) { \n          streams.add( new FileItemContentStream( item ) );\n        }\n    }\n    return params;\n  }\n\n","sourceOld":"  public SolrParams parseParamsAndFillStreams( \n      final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n  {\n    if( !ServletFileUpload.isMultipartContent(req) ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Not multipart content! \"+req.getContentType() );\n    }\n    \n    MultiMapSolrParams params = SolrRequestParsers.parseQueryString( req.getQueryString() );\n    \n    // Create a factory for disk-based file items\n    DiskFileItemFactory factory = new DiskFileItemFactory();\n\n    // Set factory constraints\n    // TODO - configure factory.setSizeThreshold(yourMaxMemorySize);\n    // TODO - configure factory.setRepository(yourTempDirectory);\n\n    // Create a new file upload handler\n    ServletFileUpload upload = new ServletFileUpload(factory);\n    upload.setSizeMax( uploadLimitKB*1024 );\n\n    // Parse the request\n    List items = upload.parseRequest(req);\n    Iterator iter = items.iterator();\n    while (iter.hasNext()) {\n        FileItem item = (FileItem) iter.next();\n\n        // If its a form field, put it in our parameter map\n        if (item.isFormField()) {\n          MultiMapSolrParams.addParam( \n            item.getFieldName(), \n            item.getString(), params.getMap() );\n        }\n        // Only add it if it actually has something...\n        else if( item.getSize() > 0 ) { \n          streams.add( new FileItemContentStream( item ) );\n        }\n    }\n    return params;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ae36ac6ff9f1747176a1596521bdf0a23edeff1","date":1316525881,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/MultipartRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/MultipartRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"  public SolrParams parseParamsAndFillStreams( \n      final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n  {\n    if( !ServletFileUpload.isMultipartContent(req) ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Not multipart content! \"+req.getContentType() );\n    }\n    \n    MultiMapSolrParams params = SolrRequestParsers.parseQueryString( req.getQueryString() );\n    \n    // Create a factory for disk-based file items\n    DiskFileItemFactory factory = new DiskFileItemFactory();\n\n    // Set factory constraints\n    // TODO - configure factory.setSizeThreshold(yourMaxMemorySize);\n    // TODO - configure factory.setRepository(yourTempDirectory);\n\n    // Create a new file upload handler\n    ServletFileUpload upload = new ServletFileUpload(factory);\n    upload.setSizeMax( uploadLimitKB*1024 );\n\n    // Parse the request\n    List items = upload.parseRequest(req);\n    Iterator iter = items.iterator();\n    while (iter.hasNext()) {\n        FileItem item = (FileItem) iter.next();\n\n        // If its a form field, put it in our parameter map\n        if (item.isFormField()) {\n          MultiMapSolrParams.addParam( \n            item.getFieldName(), \n            item.getString(), params.getMap() );\n        }\n        // Add the stream\n        else { \n          streams.add( new FileItemContentStream( item ) );\n        }\n    }\n    return params;\n  }\n\n","sourceOld":"  public SolrParams parseParamsAndFillStreams( \n      final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n  {\n    if( !ServletFileUpload.isMultipartContent(req) ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Not multipart content! \"+req.getContentType() );\n    }\n    \n    MultiMapSolrParams params = SolrRequestParsers.parseQueryString( req.getQueryString() );\n    \n    // Create a factory for disk-based file items\n    DiskFileItemFactory factory = new DiskFileItemFactory();\n\n    // Set factory constraints\n    // TODO - configure factory.setSizeThreshold(yourMaxMemorySize);\n    // TODO - configure factory.setRepository(yourTempDirectory);\n\n    // Create a new file upload handler\n    ServletFileUpload upload = new ServletFileUpload(factory);\n    upload.setSizeMax( uploadLimitKB*1024 );\n\n    // Parse the request\n    List items = upload.parseRequest(req);\n    Iterator iter = items.iterator();\n    while (iter.hasNext()) {\n        FileItem item = (FileItem) iter.next();\n\n        // If its a form field, put it in our parameter map\n        if (item.isFormField()) {\n          MultiMapSolrParams.addParam( \n            item.getFieldName(), \n            item.getString(), params.getMap() );\n        }\n        // Only add it if it actually has something...\n        else if( item.getSize() > 0 ) { \n          streams.add( new FileItemContentStream( item ) );\n        }\n    }\n    return params;\n  }\n\n","bugFix":["d80013b5e260def972025c93a0b08524f9c38f49"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/MultipartRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/MultipartRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"  @Override\n  public SolrParams parseParamsAndFillStreams( \n      final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n  {\n    if( !ServletFileUpload.isMultipartContent(req) ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Not multipart content! \"+req.getContentType() );\n    }\n    \n    MultiMapSolrParams params = SolrRequestParsers.parseQueryString( req.getQueryString() );\n    \n    // Create a factory for disk-based file items\n    DiskFileItemFactory factory = new DiskFileItemFactory();\n\n    // Set factory constraints\n    // TODO - configure factory.setSizeThreshold(yourMaxMemorySize);\n    // TODO - configure factory.setRepository(yourTempDirectory);\n\n    // Create a new file upload handler\n    ServletFileUpload upload = new ServletFileUpload(factory);\n    upload.setSizeMax( uploadLimitKB*1024 );\n\n    // Parse the request\n    List items = upload.parseRequest(req);\n    Iterator iter = items.iterator();\n    while (iter.hasNext()) {\n        FileItem item = (FileItem) iter.next();\n\n        // If its a form field, put it in our parameter map\n        if (item.isFormField()) {\n          MultiMapSolrParams.addParam( \n            item.getFieldName(), \n            item.getString(), params.getMap() );\n        }\n        // Add the stream\n        else { \n          streams.add( new FileItemContentStream( item ) );\n        }\n    }\n    return params;\n  }\n\n","sourceOld":"  public SolrParams parseParamsAndFillStreams( \n      final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n  {\n    if( !ServletFileUpload.isMultipartContent(req) ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Not multipart content! \"+req.getContentType() );\n    }\n    \n    MultiMapSolrParams params = SolrRequestParsers.parseQueryString( req.getQueryString() );\n    \n    // Create a factory for disk-based file items\n    DiskFileItemFactory factory = new DiskFileItemFactory();\n\n    // Set factory constraints\n    // TODO - configure factory.setSizeThreshold(yourMaxMemorySize);\n    // TODO - configure factory.setRepository(yourTempDirectory);\n\n    // Create a new file upload handler\n    ServletFileUpload upload = new ServletFileUpload(factory);\n    upload.setSizeMax( uploadLimitKB*1024 );\n\n    // Parse the request\n    List items = upload.parseRequest(req);\n    Iterator iter = items.iterator();\n    while (iter.hasNext()) {\n        FileItem item = (FileItem) iter.next();\n\n        // If its a form field, put it in our parameter map\n        if (item.isFormField()) {\n          MultiMapSolrParams.addParam( \n            item.getFieldName(), \n            item.getString(), params.getMap() );\n        }\n        // Add the stream\n        else { \n          streams.add( new FileItemContentStream( item ) );\n        }\n    }\n    return params;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7d0565444d6381434fbff66cecf07da249f2bb4","date":1357484111,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/MultipartRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/MultipartRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"  @Override\n  public SolrParams parseParamsAndFillStreams( \n      final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n  {\n    if( !ServletFileUpload.isMultipartContent(req) ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Not multipart content! \"+req.getContentType() );\n    }\n    \n    MultiMapSolrParams params = SolrRequestParsers.parseQueryString( req.getQueryString() );\n    \n    // Create a factory for disk-based file items\n    DiskFileItemFactory factory = new DiskFileItemFactory();\n\n    // Set factory constraints\n    // TODO - configure factory.setSizeThreshold(yourMaxMemorySize);\n    // TODO - configure factory.setRepository(yourTempDirectory);\n\n    // Create a new file upload handler\n    ServletFileUpload upload = new ServletFileUpload(factory);\n    upload.setSizeMax( ((long) uploadLimitKB) * 1024L );\n\n    // Parse the request\n    List items = upload.parseRequest(req);\n    Iterator iter = items.iterator();\n    while (iter.hasNext()) {\n        FileItem item = (FileItem) iter.next();\n\n        // If its a form field, put it in our parameter map\n        if (item.isFormField()) {\n          MultiMapSolrParams.addParam( \n            item.getFieldName(), \n            item.getString(), params.getMap() );\n        }\n        // Add the stream\n        else { \n          streams.add( new FileItemContentStream( item ) );\n        }\n    }\n    return params;\n  }\n\n","sourceOld":"  @Override\n  public SolrParams parseParamsAndFillStreams( \n      final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n  {\n    if( !ServletFileUpload.isMultipartContent(req) ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Not multipart content! \"+req.getContentType() );\n    }\n    \n    MultiMapSolrParams params = SolrRequestParsers.parseQueryString( req.getQueryString() );\n    \n    // Create a factory for disk-based file items\n    DiskFileItemFactory factory = new DiskFileItemFactory();\n\n    // Set factory constraints\n    // TODO - configure factory.setSizeThreshold(yourMaxMemorySize);\n    // TODO - configure factory.setRepository(yourTempDirectory);\n\n    // Create a new file upload handler\n    ServletFileUpload upload = new ServletFileUpload(factory);\n    upload.setSizeMax( uploadLimitKB*1024 );\n\n    // Parse the request\n    List items = upload.parseRequest(req);\n    Iterator iter = items.iterator();\n    while (iter.hasNext()) {\n        FileItem item = (FileItem) iter.next();\n\n        // If its a form field, put it in our parameter map\n        if (item.isFormField()) {\n          MultiMapSolrParams.addParam( \n            item.getFieldName(), \n            item.getString(), params.getMap() );\n        }\n        // Add the stream\n        else { \n          streams.add( new FileItemContentStream( item ) );\n        }\n    }\n    return params;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/MultipartRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/MultipartRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"  @Override\n  public SolrParams parseParamsAndFillStreams( \n      final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n  {\n    if( !ServletFileUpload.isMultipartContent(req) ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Not multipart content! \"+req.getContentType() );\n    }\n    \n    MultiMapSolrParams params = SolrRequestParsers.parseQueryString( req.getQueryString() );\n    \n    // Create a factory for disk-based file items\n    DiskFileItemFactory factory = new DiskFileItemFactory();\n\n    // Set factory constraints\n    // TODO - configure factory.setSizeThreshold(yourMaxMemorySize);\n    // TODO - configure factory.setRepository(yourTempDirectory);\n\n    // Create a new file upload handler\n    ServletFileUpload upload = new ServletFileUpload(factory);\n    upload.setSizeMax( ((long) uploadLimitKB) * 1024L );\n\n    // Parse the request\n    List items = upload.parseRequest(req);\n    Iterator iter = items.iterator();\n    while (iter.hasNext()) {\n        FileItem item = (FileItem) iter.next();\n\n        // If its a form field, put it in our parameter map\n        if (item.isFormField()) {\n          MultiMapSolrParams.addParam( \n            item.getFieldName(), \n            item.getString(), params.getMap() );\n        }\n        // Add the stream\n        else { \n          streams.add( new FileItemContentStream( item ) );\n        }\n    }\n    return params;\n  }\n\n","sourceOld":"  public SolrParams parseParamsAndFillStreams( \n      final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n  {\n    if( !ServletFileUpload.isMultipartContent(req) ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Not multipart content! \"+req.getContentType() );\n    }\n    \n    MultiMapSolrParams params = SolrRequestParsers.parseQueryString( req.getQueryString() );\n    \n    // Create a factory for disk-based file items\n    DiskFileItemFactory factory = new DiskFileItemFactory();\n\n    // Set factory constraints\n    // TODO - configure factory.setSizeThreshold(yourMaxMemorySize);\n    // TODO - configure factory.setRepository(yourTempDirectory);\n\n    // Create a new file upload handler\n    ServletFileUpload upload = new ServletFileUpload(factory);\n    upload.setSizeMax( uploadLimitKB*1024 );\n\n    // Parse the request\n    List items = upload.parseRequest(req);\n    Iterator iter = items.iterator();\n    while (iter.hasNext()) {\n        FileItem item = (FileItem) iter.next();\n\n        // If its a form field, put it in our parameter map\n        if (item.isFormField()) {\n          MultiMapSolrParams.addParam( \n            item.getFieldName(), \n            item.getString(), params.getMap() );\n        }\n        // Add the stream\n        else { \n          streams.add( new FileItemContentStream( item ) );\n        }\n    }\n    return params;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/MultipartRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/MultipartRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"  @Override\n  public SolrParams parseParamsAndFillStreams( \n      final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n  {\n    if( !ServletFileUpload.isMultipartContent(req) ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Not multipart content! \"+req.getContentType() );\n    }\n    \n    MultiMapSolrParams params = SolrRequestParsers.parseQueryString( req.getQueryString() );\n    \n    // Create a factory for disk-based file items\n    DiskFileItemFactory factory = new DiskFileItemFactory();\n\n    // Set factory constraints\n    // TODO - configure factory.setSizeThreshold(yourMaxMemorySize);\n    // TODO - configure factory.setRepository(yourTempDirectory);\n\n    // Create a new file upload handler\n    ServletFileUpload upload = new ServletFileUpload(factory);\n    upload.setSizeMax( ((long) uploadLimitKB) * 1024L );\n\n    // Parse the request\n    List items = upload.parseRequest(req);\n    Iterator iter = items.iterator();\n    while (iter.hasNext()) {\n        FileItem item = (FileItem) iter.next();\n\n        // If its a form field, put it in our parameter map\n        if (item.isFormField()) {\n          MultiMapSolrParams.addParam( \n            item.getFieldName(), \n            item.getString(), params.getMap() );\n        }\n        // Add the stream\n        else { \n          streams.add( new FileItemContentStream( item ) );\n        }\n    }\n    return params;\n  }\n\n","sourceOld":"  @Override\n  public SolrParams parseParamsAndFillStreams( \n      final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n  {\n    if( !ServletFileUpload.isMultipartContent(req) ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Not multipart content! \"+req.getContentType() );\n    }\n    \n    MultiMapSolrParams params = SolrRequestParsers.parseQueryString( req.getQueryString() );\n    \n    // Create a factory for disk-based file items\n    DiskFileItemFactory factory = new DiskFileItemFactory();\n\n    // Set factory constraints\n    // TODO - configure factory.setSizeThreshold(yourMaxMemorySize);\n    // TODO - configure factory.setRepository(yourTempDirectory);\n\n    // Create a new file upload handler\n    ServletFileUpload upload = new ServletFileUpload(factory);\n    upload.setSizeMax( ((long) uploadLimitKB) * 1024L );\n\n    // Parse the request\n    List items = upload.parseRequest(req);\n    Iterator iter = items.iterator();\n    while (iter.hasNext()) {\n        FileItem item = (FileItem) iter.next();\n\n        // If its a form field, put it in our parameter map\n        if (item.isFormField()) {\n          MultiMapSolrParams.addParam( \n            item.getFieldName(), \n            item.getString(), params.getMap() );\n        }\n        // Add the stream\n        else { \n          streams.add( new FileItemContentStream( item ) );\n        }\n    }\n    return params;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d9ecbe4fecfad4689ea50a5ece2b815854aacdf","date":1374966910,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/servlet/MultipartRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public SolrParams parseParamsAndFillStreams( \n      final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n  {\n    if( !ServletFileUpload.isMultipartContent(req) ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Not multipart content! \"+req.getContentType() );\n    }\n    \n    MultiMapSolrParams params = SolrRequestParsers.parseQueryString( req.getQueryString() );\n    \n    // Create a factory for disk-based file items\n    DiskFileItemFactory factory = new DiskFileItemFactory();\n\n    // Set factory constraints\n    // TODO - configure factory.setSizeThreshold(yourMaxMemorySize);\n    // TODO - configure factory.setRepository(yourTempDirectory);\n\n    // Create a new file upload handler\n    ServletFileUpload upload = new ServletFileUpload(factory);\n    upload.setSizeMax( ((long) uploadLimitKB) * 1024L );\n\n    // Parse the request\n    List items = upload.parseRequest(req);\n    Iterator iter = items.iterator();\n    while (iter.hasNext()) {\n        FileItem item = (FileItem) iter.next();\n\n        // If its a form field, put it in our parameter map\n        if (item.isFormField()) {\n          MultiMapSolrParams.addParam( \n            item.getFieldName(), \n            item.getString(), params.getMap() );\n        }\n        // Add the stream\n        else { \n          streams.add( new FileItemContentStream( item ) );\n        }\n    }\n    return params;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/servlet/MultipartRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public SolrParams parseParamsAndFillStreams( \n      final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n  {\n    if( !ServletFileUpload.isMultipartContent(req) ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Not multipart content! \"+req.getContentType() );\n    }\n    \n    MultiMapSolrParams params = SolrRequestParsers.parseQueryString( req.getQueryString() );\n    \n    // Create a factory for disk-based file items\n    DiskFileItemFactory factory = new DiskFileItemFactory();\n\n    // Set factory constraints\n    // TODO - configure factory.setSizeThreshold(yourMaxMemorySize);\n    // TODO - configure factory.setRepository(yourTempDirectory);\n\n    // Create a new file upload handler\n    ServletFileUpload upload = new ServletFileUpload(factory);\n    upload.setSizeMax( ((long) uploadLimitKB) * 1024L );\n\n    // Parse the request\n    List items = upload.parseRequest(req);\n    Iterator iter = items.iterator();\n    while (iter.hasNext()) {\n        FileItem item = (FileItem) iter.next();\n\n        // If its a form field, put it in our parameter map\n        if (item.isFormField()) {\n          MultiMapSolrParams.addParam( \n            item.getFieldName(), \n            item.getString(), params.getMap() );\n        }\n        // Add the stream\n        else { \n          streams.add( new FileItemContentStream( item ) );\n        }\n    }\n    return params;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["5ae36ac6ff9f1747176a1596521bdf0a23edeff1","c7d0565444d6381434fbff66cecf07da249f2bb4"],"c7d0565444d6381434fbff66cecf07da249f2bb4":["7530de27b87b961b51f01bd1299b7004d46e8823"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["08970e5b8411182a29412c177eff67ec1110095b","8d9ecbe4fecfad4689ea50a5ece2b815854aacdf"],"5ae36ac6ff9f1747176a1596521bdf0a23edeff1":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"8d9ecbe4fecfad4689ea50a5ece2b815854aacdf":["08970e5b8411182a29412c177eff67ec1110095b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7530de27b87b961b51f01bd1299b7004d46e8823":["5ae36ac6ff9f1747176a1596521bdf0a23edeff1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8d9ecbe4fecfad4689ea50a5ece2b815854aacdf"],"08970e5b8411182a29412c177eff67ec1110095b":["c7d0565444d6381434fbff66cecf07da249f2bb4"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"c7d0565444d6381434fbff66cecf07da249f2bb4":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","08970e5b8411182a29412c177eff67ec1110095b"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"5ae36ac6ff9f1747176a1596521bdf0a23edeff1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["5ae36ac6ff9f1747176a1596521bdf0a23edeff1"],"8d9ecbe4fecfad4689ea50a5ece2b815854aacdf":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["c7d0565444d6381434fbff66cecf07da249f2bb4"],"08970e5b8411182a29412c177eff67ec1110095b":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","8d9ecbe4fecfad4689ea50a5ece2b815854aacdf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}