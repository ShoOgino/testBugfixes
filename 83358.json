{"path":"solr/core/src/java/org/apache/solr/update/processor/AddSchemaFieldsUpdateProcessorFactory#parseTypeMappings(NamedList).mjava","commits":[{"id":"fe3edda347939cc6859dbf4287e84f3e8e4bb939","date":1372696449,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/AddSchemaFieldsUpdateProcessorFactory#parseTypeMappings(NamedList).mjava","pathOld":"/dev/null","sourceNew":"  private static List<TypeMapping> parseTypeMappings(NamedList args) {\n    List<TypeMapping> typeMappings = new ArrayList<TypeMapping>();\n    List<Object> typeMappingsParams = args.getAll(TYPE_MAPPING_PARAM);\n    for (Object typeMappingObj : typeMappingsParams) {\n      if (null == typeMappingObj) {\n        throw new SolrException(SERVER_ERROR, \"'\" + TYPE_MAPPING_PARAM + \"' init param cannot be null\");\n      }\n      if ( ! (typeMappingObj instanceof NamedList) ) {\n        throw new SolrException(SERVER_ERROR, \"'\" + TYPE_MAPPING_PARAM + \"' init param must be a <lst>\");\n      }\n      NamedList typeMappingNamedList = (NamedList)typeMappingObj;\n\n      Object fieldTypeObj = typeMappingNamedList.remove(FIELD_TYPE_PARAM);\n      if (null == fieldTypeObj) {\n        throw new SolrException(SERVER_ERROR,\n            \"Each '\" + TYPE_MAPPING_PARAM + \"' <lst/> must contain a '\" + FIELD_TYPE_PARAM + \"' <str>\");\n      }\n      if ( ! (fieldTypeObj instanceof CharSequence)) {\n        throw new SolrException(SERVER_ERROR, \"'\" + FIELD_TYPE_PARAM + \"' init param must be a <str>\");\n      }\n      if (null != typeMappingNamedList.get(FIELD_TYPE_PARAM)) {\n        throw new SolrException(SERVER_ERROR,\n            \"Each '\" + TYPE_MAPPING_PARAM + \"' <lst/> must contain a '\" + FIELD_TYPE_PARAM + \"' <str>\");\n      }\n      String fieldType = fieldTypeObj.toString();\n\n      Collection<String> valueClasses\n          = FieldMutatingUpdateProcessorFactory.oneOrMany(typeMappingNamedList, VALUE_CLASS_PARAM);\n      if (valueClasses.isEmpty()) {\n        throw new SolrException(SERVER_ERROR, \n            \"Each '\" + TYPE_MAPPING_PARAM + \"' <lst/> must contain at least one '\" + VALUE_CLASS_PARAM + \"' <str>\");\n      }\n      typeMappings.add(new TypeMapping(fieldType, valueClasses));\n\n      if (0 != typeMappingNamedList.size()) {\n        throw new SolrException(SERVER_ERROR, \n            \"Unexpected '\" + TYPE_MAPPING_PARAM + \"' init sub-param(s): '\" + typeMappingNamedList.toString() + \"'\");\n      }\n      args.remove(TYPE_MAPPING_PARAM);\n    }\n    return typeMappings;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a70b5355a56e9fd1404a59fee055bd79dafa7634","date":1373899537,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/AddSchemaFieldsUpdateProcessorFactory#parseTypeMappings(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/AddSchemaFieldsUpdateProcessorFactory#parseTypeMappings(NamedList).mjava","sourceNew":"  private static List<TypeMapping> parseTypeMappings(NamedList args) {\n    List<TypeMapping> typeMappings = new ArrayList<TypeMapping>();\n    List<Object> typeMappingsParams = args.getAll(TYPE_MAPPING_PARAM);\n    for (Object typeMappingObj : typeMappingsParams) {\n      if (null == typeMappingObj) {\n        throw new SolrException(SERVER_ERROR, \"'\" + TYPE_MAPPING_PARAM + \"' init param cannot be null\");\n      }\n      if ( ! (typeMappingObj instanceof NamedList) ) {\n        throw new SolrException(SERVER_ERROR, \"'\" + TYPE_MAPPING_PARAM + \"' init param must be a <lst>\");\n      }\n      NamedList typeMappingNamedList = (NamedList)typeMappingObj;\n\n      Object fieldTypeObj = typeMappingNamedList.remove(FIELD_TYPE_PARAM);\n      if (null == fieldTypeObj) {\n        throw new SolrException(SERVER_ERROR,\n            \"Each '\" + TYPE_MAPPING_PARAM + \"' <lst/> must contain a '\" + FIELD_TYPE_PARAM + \"' <str>\");\n      }\n      if ( ! (fieldTypeObj instanceof CharSequence)) {\n        throw new SolrException(SERVER_ERROR, \"'\" + FIELD_TYPE_PARAM + \"' init param must be a <str>\");\n      }\n      if (null != typeMappingNamedList.get(FIELD_TYPE_PARAM)) {\n        throw new SolrException(SERVER_ERROR,\n            \"Each '\" + TYPE_MAPPING_PARAM + \"' <lst/> may contain only one '\" + FIELD_TYPE_PARAM + \"' <str>\");\n      }\n      String fieldType = fieldTypeObj.toString();\n\n      Collection<String> valueClasses\n          = FieldMutatingUpdateProcessorFactory.oneOrMany(typeMappingNamedList, VALUE_CLASS_PARAM);\n      if (valueClasses.isEmpty()) {\n        throw new SolrException(SERVER_ERROR, \n            \"Each '\" + TYPE_MAPPING_PARAM + \"' <lst/> must contain at least one '\" + VALUE_CLASS_PARAM + \"' <str>\");\n      }\n      typeMappings.add(new TypeMapping(fieldType, valueClasses));\n\n      if (0 != typeMappingNamedList.size()) {\n        throw new SolrException(SERVER_ERROR, \n            \"Unexpected '\" + TYPE_MAPPING_PARAM + \"' init sub-param(s): '\" + typeMappingNamedList.toString() + \"'\");\n      }\n      args.remove(TYPE_MAPPING_PARAM);\n    }\n    return typeMappings;\n  }\n\n","sourceOld":"  private static List<TypeMapping> parseTypeMappings(NamedList args) {\n    List<TypeMapping> typeMappings = new ArrayList<TypeMapping>();\n    List<Object> typeMappingsParams = args.getAll(TYPE_MAPPING_PARAM);\n    for (Object typeMappingObj : typeMappingsParams) {\n      if (null == typeMappingObj) {\n        throw new SolrException(SERVER_ERROR, \"'\" + TYPE_MAPPING_PARAM + \"' init param cannot be null\");\n      }\n      if ( ! (typeMappingObj instanceof NamedList) ) {\n        throw new SolrException(SERVER_ERROR, \"'\" + TYPE_MAPPING_PARAM + \"' init param must be a <lst>\");\n      }\n      NamedList typeMappingNamedList = (NamedList)typeMappingObj;\n\n      Object fieldTypeObj = typeMappingNamedList.remove(FIELD_TYPE_PARAM);\n      if (null == fieldTypeObj) {\n        throw new SolrException(SERVER_ERROR,\n            \"Each '\" + TYPE_MAPPING_PARAM + \"' <lst/> must contain a '\" + FIELD_TYPE_PARAM + \"' <str>\");\n      }\n      if ( ! (fieldTypeObj instanceof CharSequence)) {\n        throw new SolrException(SERVER_ERROR, \"'\" + FIELD_TYPE_PARAM + \"' init param must be a <str>\");\n      }\n      if (null != typeMappingNamedList.get(FIELD_TYPE_PARAM)) {\n        throw new SolrException(SERVER_ERROR,\n            \"Each '\" + TYPE_MAPPING_PARAM + \"' <lst/> must contain a '\" + FIELD_TYPE_PARAM + \"' <str>\");\n      }\n      String fieldType = fieldTypeObj.toString();\n\n      Collection<String> valueClasses\n          = FieldMutatingUpdateProcessorFactory.oneOrMany(typeMappingNamedList, VALUE_CLASS_PARAM);\n      if (valueClasses.isEmpty()) {\n        throw new SolrException(SERVER_ERROR, \n            \"Each '\" + TYPE_MAPPING_PARAM + \"' <lst/> must contain at least one '\" + VALUE_CLASS_PARAM + \"' <str>\");\n      }\n      typeMappings.add(new TypeMapping(fieldType, valueClasses));\n\n      if (0 != typeMappingNamedList.size()) {\n        throw new SolrException(SERVER_ERROR, \n            \"Unexpected '\" + TYPE_MAPPING_PARAM + \"' init sub-param(s): '\" + typeMappingNamedList.toString() + \"'\");\n      }\n      args.remove(TYPE_MAPPING_PARAM);\n    }\n    return typeMappings;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/AddSchemaFieldsUpdateProcessorFactory#parseTypeMappings(NamedList).mjava","pathOld":"/dev/null","sourceNew":"  private static List<TypeMapping> parseTypeMappings(NamedList args) {\n    List<TypeMapping> typeMappings = new ArrayList<TypeMapping>();\n    List<Object> typeMappingsParams = args.getAll(TYPE_MAPPING_PARAM);\n    for (Object typeMappingObj : typeMappingsParams) {\n      if (null == typeMappingObj) {\n        throw new SolrException(SERVER_ERROR, \"'\" + TYPE_MAPPING_PARAM + \"' init param cannot be null\");\n      }\n      if ( ! (typeMappingObj instanceof NamedList) ) {\n        throw new SolrException(SERVER_ERROR, \"'\" + TYPE_MAPPING_PARAM + \"' init param must be a <lst>\");\n      }\n      NamedList typeMappingNamedList = (NamedList)typeMappingObj;\n\n      Object fieldTypeObj = typeMappingNamedList.remove(FIELD_TYPE_PARAM);\n      if (null == fieldTypeObj) {\n        throw new SolrException(SERVER_ERROR,\n            \"Each '\" + TYPE_MAPPING_PARAM + \"' <lst/> must contain a '\" + FIELD_TYPE_PARAM + \"' <str>\");\n      }\n      if ( ! (fieldTypeObj instanceof CharSequence)) {\n        throw new SolrException(SERVER_ERROR, \"'\" + FIELD_TYPE_PARAM + \"' init param must be a <str>\");\n      }\n      if (null != typeMappingNamedList.get(FIELD_TYPE_PARAM)) {\n        throw new SolrException(SERVER_ERROR,\n            \"Each '\" + TYPE_MAPPING_PARAM + \"' <lst/> may contain only one '\" + FIELD_TYPE_PARAM + \"' <str>\");\n      }\n      String fieldType = fieldTypeObj.toString();\n\n      Collection<String> valueClasses\n          = FieldMutatingUpdateProcessorFactory.oneOrMany(typeMappingNamedList, VALUE_CLASS_PARAM);\n      if (valueClasses.isEmpty()) {\n        throw new SolrException(SERVER_ERROR, \n            \"Each '\" + TYPE_MAPPING_PARAM + \"' <lst/> must contain at least one '\" + VALUE_CLASS_PARAM + \"' <str>\");\n      }\n      typeMappings.add(new TypeMapping(fieldType, valueClasses));\n\n      if (0 != typeMappingNamedList.size()) {\n        throw new SolrException(SERVER_ERROR, \n            \"Unexpected '\" + TYPE_MAPPING_PARAM + \"' init sub-param(s): '\" + typeMappingNamedList.toString() + \"'\");\n      }\n      args.remove(TYPE_MAPPING_PARAM);\n    }\n    return typeMappings;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ae0c36347d7586e501169851eb8fe2ad2b8f0dd","date":1380757525,"type":3,"author":"Shawn Heisey","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/AddSchemaFieldsUpdateProcessorFactory#parseTypeMappings(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/AddSchemaFieldsUpdateProcessorFactory#parseTypeMappings(NamedList).mjava","sourceNew":"  private static List<TypeMapping> parseTypeMappings(NamedList args) {\n    List<TypeMapping> typeMappings = new ArrayList<TypeMapping>();\n    List<Object> typeMappingsParams = args.getAll(TYPE_MAPPING_PARAM);\n    for (Object typeMappingObj : typeMappingsParams) {\n      if (null == typeMappingObj) {\n        throw new SolrException(SERVER_ERROR, \"'\" + TYPE_MAPPING_PARAM + \"' init param cannot be null\");\n      }\n      if ( ! (typeMappingObj instanceof NamedList) ) {\n        throw new SolrException(SERVER_ERROR, \"'\" + TYPE_MAPPING_PARAM + \"' init param must be a <lst>\");\n      }\n      NamedList typeMappingNamedList = (NamedList)typeMappingObj;\n\n      Object fieldTypeObj = typeMappingNamedList.remove(FIELD_TYPE_PARAM);\n      if (null == fieldTypeObj) {\n        throw new SolrException(SERVER_ERROR,\n            \"Each '\" + TYPE_MAPPING_PARAM + \"' <lst/> must contain a '\" + FIELD_TYPE_PARAM + \"' <str>\");\n      }\n      if ( ! (fieldTypeObj instanceof CharSequence)) {\n        throw new SolrException(SERVER_ERROR, \"'\" + FIELD_TYPE_PARAM + \"' init param must be a <str>\");\n      }\n      if (null != typeMappingNamedList.get(FIELD_TYPE_PARAM)) {\n        throw new SolrException(SERVER_ERROR,\n            \"Each '\" + TYPE_MAPPING_PARAM + \"' <lst/> may contain only one '\" + FIELD_TYPE_PARAM + \"' <str>\");\n      }\n      String fieldType = fieldTypeObj.toString();\n\n      Collection<String> valueClasses\n          = typeMappingNamedList.removeConfigArgs(VALUE_CLASS_PARAM);\n      if (valueClasses.isEmpty()) {\n        throw new SolrException(SERVER_ERROR, \n            \"Each '\" + TYPE_MAPPING_PARAM + \"' <lst/> must contain at least one '\" + VALUE_CLASS_PARAM + \"' <str>\");\n      }\n      typeMappings.add(new TypeMapping(fieldType, valueClasses));\n\n      if (0 != typeMappingNamedList.size()) {\n        throw new SolrException(SERVER_ERROR, \n            \"Unexpected '\" + TYPE_MAPPING_PARAM + \"' init sub-param(s): '\" + typeMappingNamedList.toString() + \"'\");\n      }\n      args.remove(TYPE_MAPPING_PARAM);\n    }\n    return typeMappings;\n  }\n\n","sourceOld":"  private static List<TypeMapping> parseTypeMappings(NamedList args) {\n    List<TypeMapping> typeMappings = new ArrayList<TypeMapping>();\n    List<Object> typeMappingsParams = args.getAll(TYPE_MAPPING_PARAM);\n    for (Object typeMappingObj : typeMappingsParams) {\n      if (null == typeMappingObj) {\n        throw new SolrException(SERVER_ERROR, \"'\" + TYPE_MAPPING_PARAM + \"' init param cannot be null\");\n      }\n      if ( ! (typeMappingObj instanceof NamedList) ) {\n        throw new SolrException(SERVER_ERROR, \"'\" + TYPE_MAPPING_PARAM + \"' init param must be a <lst>\");\n      }\n      NamedList typeMappingNamedList = (NamedList)typeMappingObj;\n\n      Object fieldTypeObj = typeMappingNamedList.remove(FIELD_TYPE_PARAM);\n      if (null == fieldTypeObj) {\n        throw new SolrException(SERVER_ERROR,\n            \"Each '\" + TYPE_MAPPING_PARAM + \"' <lst/> must contain a '\" + FIELD_TYPE_PARAM + \"' <str>\");\n      }\n      if ( ! (fieldTypeObj instanceof CharSequence)) {\n        throw new SolrException(SERVER_ERROR, \"'\" + FIELD_TYPE_PARAM + \"' init param must be a <str>\");\n      }\n      if (null != typeMappingNamedList.get(FIELD_TYPE_PARAM)) {\n        throw new SolrException(SERVER_ERROR,\n            \"Each '\" + TYPE_MAPPING_PARAM + \"' <lst/> may contain only one '\" + FIELD_TYPE_PARAM + \"' <str>\");\n      }\n      String fieldType = fieldTypeObj.toString();\n\n      Collection<String> valueClasses\n          = FieldMutatingUpdateProcessorFactory.oneOrMany(typeMappingNamedList, VALUE_CLASS_PARAM);\n      if (valueClasses.isEmpty()) {\n        throw new SolrException(SERVER_ERROR, \n            \"Each '\" + TYPE_MAPPING_PARAM + \"' <lst/> must contain at least one '\" + VALUE_CLASS_PARAM + \"' <str>\");\n      }\n      typeMappings.add(new TypeMapping(fieldType, valueClasses));\n\n      if (0 != typeMappingNamedList.size()) {\n        throw new SolrException(SERVER_ERROR, \n            \"Unexpected '\" + TYPE_MAPPING_PARAM + \"' init sub-param(s): '\" + typeMappingNamedList.toString() + \"'\");\n      }\n      args.remove(TYPE_MAPPING_PARAM);\n    }\n    return typeMappings;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/AddSchemaFieldsUpdateProcessorFactory#parseTypeMappings(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/AddSchemaFieldsUpdateProcessorFactory#parseTypeMappings(NamedList).mjava","sourceNew":"  private static List<TypeMapping> parseTypeMappings(NamedList args) {\n    List<TypeMapping> typeMappings = new ArrayList<>();\n    List<Object> typeMappingsParams = args.getAll(TYPE_MAPPING_PARAM);\n    for (Object typeMappingObj : typeMappingsParams) {\n      if (null == typeMappingObj) {\n        throw new SolrException(SERVER_ERROR, \"'\" + TYPE_MAPPING_PARAM + \"' init param cannot be null\");\n      }\n      if ( ! (typeMappingObj instanceof NamedList) ) {\n        throw new SolrException(SERVER_ERROR, \"'\" + TYPE_MAPPING_PARAM + \"' init param must be a <lst>\");\n      }\n      NamedList typeMappingNamedList = (NamedList)typeMappingObj;\n\n      Object fieldTypeObj = typeMappingNamedList.remove(FIELD_TYPE_PARAM);\n      if (null == fieldTypeObj) {\n        throw new SolrException(SERVER_ERROR,\n            \"Each '\" + TYPE_MAPPING_PARAM + \"' <lst/> must contain a '\" + FIELD_TYPE_PARAM + \"' <str>\");\n      }\n      if ( ! (fieldTypeObj instanceof CharSequence)) {\n        throw new SolrException(SERVER_ERROR, \"'\" + FIELD_TYPE_PARAM + \"' init param must be a <str>\");\n      }\n      if (null != typeMappingNamedList.get(FIELD_TYPE_PARAM)) {\n        throw new SolrException(SERVER_ERROR,\n            \"Each '\" + TYPE_MAPPING_PARAM + \"' <lst/> may contain only one '\" + FIELD_TYPE_PARAM + \"' <str>\");\n      }\n      String fieldType = fieldTypeObj.toString();\n\n      Collection<String> valueClasses\n          = typeMappingNamedList.removeConfigArgs(VALUE_CLASS_PARAM);\n      if (valueClasses.isEmpty()) {\n        throw new SolrException(SERVER_ERROR, \n            \"Each '\" + TYPE_MAPPING_PARAM + \"' <lst/> must contain at least one '\" + VALUE_CLASS_PARAM + \"' <str>\");\n      }\n      typeMappings.add(new TypeMapping(fieldType, valueClasses));\n\n      if (0 != typeMappingNamedList.size()) {\n        throw new SolrException(SERVER_ERROR, \n            \"Unexpected '\" + TYPE_MAPPING_PARAM + \"' init sub-param(s): '\" + typeMappingNamedList.toString() + \"'\");\n      }\n      args.remove(TYPE_MAPPING_PARAM);\n    }\n    return typeMappings;\n  }\n\n","sourceOld":"  private static List<TypeMapping> parseTypeMappings(NamedList args) {\n    List<TypeMapping> typeMappings = new ArrayList<TypeMapping>();\n    List<Object> typeMappingsParams = args.getAll(TYPE_MAPPING_PARAM);\n    for (Object typeMappingObj : typeMappingsParams) {\n      if (null == typeMappingObj) {\n        throw new SolrException(SERVER_ERROR, \"'\" + TYPE_MAPPING_PARAM + \"' init param cannot be null\");\n      }\n      if ( ! (typeMappingObj instanceof NamedList) ) {\n        throw new SolrException(SERVER_ERROR, \"'\" + TYPE_MAPPING_PARAM + \"' init param must be a <lst>\");\n      }\n      NamedList typeMappingNamedList = (NamedList)typeMappingObj;\n\n      Object fieldTypeObj = typeMappingNamedList.remove(FIELD_TYPE_PARAM);\n      if (null == fieldTypeObj) {\n        throw new SolrException(SERVER_ERROR,\n            \"Each '\" + TYPE_MAPPING_PARAM + \"' <lst/> must contain a '\" + FIELD_TYPE_PARAM + \"' <str>\");\n      }\n      if ( ! (fieldTypeObj instanceof CharSequence)) {\n        throw new SolrException(SERVER_ERROR, \"'\" + FIELD_TYPE_PARAM + \"' init param must be a <str>\");\n      }\n      if (null != typeMappingNamedList.get(FIELD_TYPE_PARAM)) {\n        throw new SolrException(SERVER_ERROR,\n            \"Each '\" + TYPE_MAPPING_PARAM + \"' <lst/> may contain only one '\" + FIELD_TYPE_PARAM + \"' <str>\");\n      }\n      String fieldType = fieldTypeObj.toString();\n\n      Collection<String> valueClasses\n          = typeMappingNamedList.removeConfigArgs(VALUE_CLASS_PARAM);\n      if (valueClasses.isEmpty()) {\n        throw new SolrException(SERVER_ERROR, \n            \"Each '\" + TYPE_MAPPING_PARAM + \"' <lst/> must contain at least one '\" + VALUE_CLASS_PARAM + \"' <str>\");\n      }\n      typeMappings.add(new TypeMapping(fieldType, valueClasses));\n\n      if (0 != typeMappingNamedList.size()) {\n        throw new SolrException(SERVER_ERROR, \n            \"Unexpected '\" + TYPE_MAPPING_PARAM + \"' init sub-param(s): '\" + typeMappingNamedList.toString() + \"'\");\n      }\n      args.remove(TYPE_MAPPING_PARAM);\n    }\n    return typeMappings;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b377fd91b7578d0c02b259b5112d667e4d5f8e6","date":1499349411,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/AddSchemaFieldsUpdateProcessorFactory#parseTypeMappings(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/AddSchemaFieldsUpdateProcessorFactory#parseTypeMappings(NamedList).mjava","sourceNew":"  private static List<TypeMapping> parseTypeMappings(NamedList args) {\n    List<TypeMapping> typeMappings = new ArrayList<>();\n    List<Object> typeMappingsParams = args.getAll(TYPE_MAPPING_PARAM);\n    for (Object typeMappingObj : typeMappingsParams) {\n      if (null == typeMappingObj) {\n        throw new SolrException(SERVER_ERROR, \"'\" + TYPE_MAPPING_PARAM + \"' init param cannot be null\");\n      }\n      if ( ! (typeMappingObj instanceof NamedList) ) {\n        throw new SolrException(SERVER_ERROR, \"'\" + TYPE_MAPPING_PARAM + \"' init param must be a <lst>\");\n      }\n      NamedList typeMappingNamedList = (NamedList)typeMappingObj;\n\n      Object fieldTypeObj = typeMappingNamedList.remove(FIELD_TYPE_PARAM);\n      if (null == fieldTypeObj) {\n        throw new SolrException(SERVER_ERROR,\n            \"Each '\" + TYPE_MAPPING_PARAM + \"' <lst/> must contain a '\" + FIELD_TYPE_PARAM + \"' <str>\");\n      }\n      if ( ! (fieldTypeObj instanceof CharSequence)) {\n        throw new SolrException(SERVER_ERROR, \"'\" + FIELD_TYPE_PARAM + \"' init param must be a <str>\");\n      }\n      if (null != typeMappingNamedList.get(FIELD_TYPE_PARAM)) {\n        throw new SolrException(SERVER_ERROR,\n            \"Each '\" + TYPE_MAPPING_PARAM + \"' <lst/> may contain only one '\" + FIELD_TYPE_PARAM + \"' <str>\");\n      }\n      String fieldType = fieldTypeObj.toString();\n\n      Collection<String> valueClasses\n          = typeMappingNamedList.removeConfigArgs(VALUE_CLASS_PARAM);\n      if (valueClasses.isEmpty()) {\n        throw new SolrException(SERVER_ERROR, \n            \"Each '\" + TYPE_MAPPING_PARAM + \"' <lst/> must contain at least one '\" + VALUE_CLASS_PARAM + \"' <str>\");\n      }\n\n      // isDefault (optional)\n      Boolean isDefault = false;\n      Object isDefaultObj = typeMappingNamedList.remove(IS_DEFAULT_PARAM);\n      if (null != isDefaultObj) {\n        if ( ! (isDefaultObj instanceof Boolean)) {\n          throw new SolrException(SERVER_ERROR, \"'\" + IS_DEFAULT_PARAM + \"' init param must be a <bool>\");\n        }\n        if (null != typeMappingNamedList.get(IS_DEFAULT_PARAM)) {\n          throw new SolrException(SERVER_ERROR,\n              \"Each '\" + COPY_FIELD_PARAM + \"' <lst/> may contain only one '\" + IS_DEFAULT_PARAM + \"' <bool>\");\n        }\n        isDefault = Boolean.parseBoolean(isDefaultObj.toString());\n      }\n      \n      Collection<CopyFieldDef> copyFieldDefs = new ArrayList<>(); \n      while (typeMappingNamedList.get(COPY_FIELD_PARAM) != null) {\n        Object copyFieldObj = typeMappingNamedList.remove(COPY_FIELD_PARAM);\n        if ( ! (copyFieldObj instanceof NamedList)) {\n          throw new SolrException(SERVER_ERROR, \"'\" + COPY_FIELD_PARAM + \"' init param must be a <lst>\");\n        }\n        NamedList copyFieldNamedList = (NamedList)copyFieldObj;\n        // dest\n        Object destObj = copyFieldNamedList.remove(DEST_PARAM);\n        if (null == destObj) {\n          throw new SolrException(SERVER_ERROR,\n              \"Each '\" + COPY_FIELD_PARAM + \"' <lst/> must contain a '\" + DEST_PARAM + \"' <str>\");\n        }\n        if ( ! (destObj instanceof CharSequence)) {\n          throw new SolrException(SERVER_ERROR, \"'\" + COPY_FIELD_PARAM + \"' init param must be a <str>\");\n        }\n        if (null != copyFieldNamedList.get(COPY_FIELD_PARAM)) {\n          throw new SolrException(SERVER_ERROR,\n              \"Each '\" + COPY_FIELD_PARAM + \"' <lst/> may contain only one '\" + COPY_FIELD_PARAM + \"' <str>\");\n        }\n        String dest = destObj.toString();\n        // maxChars (optional)\n        Integer maxChars = 0;\n        Object maxCharsObj = copyFieldNamedList.remove(MAX_CHARS_PARAM);\n        if (null != maxCharsObj) {\n          if ( ! (maxCharsObj instanceof Integer)) {\n            throw new SolrException(SERVER_ERROR, \"'\" + MAX_CHARS_PARAM + \"' init param must be a <int>\");\n          }\n          if (null != copyFieldNamedList.get(MAX_CHARS_PARAM)) {\n            throw new SolrException(SERVER_ERROR,\n                \"Each '\" + COPY_FIELD_PARAM + \"' <lst/> may contain only one '\" + MAX_CHARS_PARAM + \"' <str>\");\n          }\n          maxChars = Integer.parseInt(maxCharsObj.toString());\n        }\n        copyFieldDefs.add(new CopyFieldDef(dest, maxChars));\n      }\n      typeMappings.add(new TypeMapping(fieldType, valueClasses, isDefault, copyFieldDefs));\n      \n      if (0 != typeMappingNamedList.size()) {\n        throw new SolrException(SERVER_ERROR, \n            \"Unexpected '\" + TYPE_MAPPING_PARAM + \"' init sub-param(s): '\" + typeMappingNamedList.toString() + \"'\");\n      }\n      args.remove(TYPE_MAPPING_PARAM);\n    }\n    return typeMappings;\n  }\n\n","sourceOld":"  private static List<TypeMapping> parseTypeMappings(NamedList args) {\n    List<TypeMapping> typeMappings = new ArrayList<>();\n    List<Object> typeMappingsParams = args.getAll(TYPE_MAPPING_PARAM);\n    for (Object typeMappingObj : typeMappingsParams) {\n      if (null == typeMappingObj) {\n        throw new SolrException(SERVER_ERROR, \"'\" + TYPE_MAPPING_PARAM + \"' init param cannot be null\");\n      }\n      if ( ! (typeMappingObj instanceof NamedList) ) {\n        throw new SolrException(SERVER_ERROR, \"'\" + TYPE_MAPPING_PARAM + \"' init param must be a <lst>\");\n      }\n      NamedList typeMappingNamedList = (NamedList)typeMappingObj;\n\n      Object fieldTypeObj = typeMappingNamedList.remove(FIELD_TYPE_PARAM);\n      if (null == fieldTypeObj) {\n        throw new SolrException(SERVER_ERROR,\n            \"Each '\" + TYPE_MAPPING_PARAM + \"' <lst/> must contain a '\" + FIELD_TYPE_PARAM + \"' <str>\");\n      }\n      if ( ! (fieldTypeObj instanceof CharSequence)) {\n        throw new SolrException(SERVER_ERROR, \"'\" + FIELD_TYPE_PARAM + \"' init param must be a <str>\");\n      }\n      if (null != typeMappingNamedList.get(FIELD_TYPE_PARAM)) {\n        throw new SolrException(SERVER_ERROR,\n            \"Each '\" + TYPE_MAPPING_PARAM + \"' <lst/> may contain only one '\" + FIELD_TYPE_PARAM + \"' <str>\");\n      }\n      String fieldType = fieldTypeObj.toString();\n\n      Collection<String> valueClasses\n          = typeMappingNamedList.removeConfigArgs(VALUE_CLASS_PARAM);\n      if (valueClasses.isEmpty()) {\n        throw new SolrException(SERVER_ERROR, \n            \"Each '\" + TYPE_MAPPING_PARAM + \"' <lst/> must contain at least one '\" + VALUE_CLASS_PARAM + \"' <str>\");\n      }\n      typeMappings.add(new TypeMapping(fieldType, valueClasses));\n\n      if (0 != typeMappingNamedList.size()) {\n        throw new SolrException(SERVER_ERROR, \n            \"Unexpected '\" + TYPE_MAPPING_PARAM + \"' init sub-param(s): '\" + typeMappingNamedList.toString() + \"'\");\n      }\n      args.remove(TYPE_MAPPING_PARAM);\n    }\n    return typeMappings;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73d8d559120669b47658108d818b637df5456ea","date":1499401413,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/AddSchemaFieldsUpdateProcessorFactory#parseTypeMappings(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/AddSchemaFieldsUpdateProcessorFactory#parseTypeMappings(NamedList).mjava","sourceNew":"  private static List<TypeMapping> parseTypeMappings(NamedList args) {\n    List<TypeMapping> typeMappings = new ArrayList<>();\n    List<Object> typeMappingsParams = args.getAll(TYPE_MAPPING_PARAM);\n    for (Object typeMappingObj : typeMappingsParams) {\n      if (null == typeMappingObj) {\n        throw new SolrException(SERVER_ERROR, \"'\" + TYPE_MAPPING_PARAM + \"' init param cannot be null\");\n      }\n      if ( ! (typeMappingObj instanceof NamedList) ) {\n        throw new SolrException(SERVER_ERROR, \"'\" + TYPE_MAPPING_PARAM + \"' init param must be a <lst>\");\n      }\n      NamedList typeMappingNamedList = (NamedList)typeMappingObj;\n\n      Object fieldTypeObj = typeMappingNamedList.remove(FIELD_TYPE_PARAM);\n      if (null == fieldTypeObj) {\n        throw new SolrException(SERVER_ERROR,\n            \"Each '\" + TYPE_MAPPING_PARAM + \"' <lst/> must contain a '\" + FIELD_TYPE_PARAM + \"' <str>\");\n      }\n      if ( ! (fieldTypeObj instanceof CharSequence)) {\n        throw new SolrException(SERVER_ERROR, \"'\" + FIELD_TYPE_PARAM + \"' init param must be a <str>\");\n      }\n      if (null != typeMappingNamedList.get(FIELD_TYPE_PARAM)) {\n        throw new SolrException(SERVER_ERROR,\n            \"Each '\" + TYPE_MAPPING_PARAM + \"' <lst/> may contain only one '\" + FIELD_TYPE_PARAM + \"' <str>\");\n      }\n      String fieldType = fieldTypeObj.toString();\n\n      Collection<String> valueClasses\n          = typeMappingNamedList.removeConfigArgs(VALUE_CLASS_PARAM);\n      if (valueClasses.isEmpty()) {\n        throw new SolrException(SERVER_ERROR, \n            \"Each '\" + TYPE_MAPPING_PARAM + \"' <lst/> must contain at least one '\" + VALUE_CLASS_PARAM + \"' <str>\");\n      }\n\n      // isDefault (optional)\n      Boolean isDefault = false;\n      Object isDefaultObj = typeMappingNamedList.remove(IS_DEFAULT_PARAM);\n      if (null != isDefaultObj) {\n        if ( ! (isDefaultObj instanceof Boolean)) {\n          throw new SolrException(SERVER_ERROR, \"'\" + IS_DEFAULT_PARAM + \"' init param must be a <bool>\");\n        }\n        if (null != typeMappingNamedList.get(IS_DEFAULT_PARAM)) {\n          throw new SolrException(SERVER_ERROR,\n              \"Each '\" + COPY_FIELD_PARAM + \"' <lst/> may contain only one '\" + IS_DEFAULT_PARAM + \"' <bool>\");\n        }\n        isDefault = Boolean.parseBoolean(isDefaultObj.toString());\n      }\n      \n      Collection<CopyFieldDef> copyFieldDefs = new ArrayList<>(); \n      while (typeMappingNamedList.get(COPY_FIELD_PARAM) != null) {\n        Object copyFieldObj = typeMappingNamedList.remove(COPY_FIELD_PARAM);\n        if ( ! (copyFieldObj instanceof NamedList)) {\n          throw new SolrException(SERVER_ERROR, \"'\" + COPY_FIELD_PARAM + \"' init param must be a <lst>\");\n        }\n        NamedList copyFieldNamedList = (NamedList)copyFieldObj;\n        // dest\n        Object destObj = copyFieldNamedList.remove(DEST_PARAM);\n        if (null == destObj) {\n          throw new SolrException(SERVER_ERROR,\n              \"Each '\" + COPY_FIELD_PARAM + \"' <lst/> must contain a '\" + DEST_PARAM + \"' <str>\");\n        }\n        if ( ! (destObj instanceof CharSequence)) {\n          throw new SolrException(SERVER_ERROR, \"'\" + COPY_FIELD_PARAM + \"' init param must be a <str>\");\n        }\n        if (null != copyFieldNamedList.get(COPY_FIELD_PARAM)) {\n          throw new SolrException(SERVER_ERROR,\n              \"Each '\" + COPY_FIELD_PARAM + \"' <lst/> may contain only one '\" + COPY_FIELD_PARAM + \"' <str>\");\n        }\n        String dest = destObj.toString();\n        // maxChars (optional)\n        Integer maxChars = 0;\n        Object maxCharsObj = copyFieldNamedList.remove(MAX_CHARS_PARAM);\n        if (null != maxCharsObj) {\n          if ( ! (maxCharsObj instanceof Integer)) {\n            throw new SolrException(SERVER_ERROR, \"'\" + MAX_CHARS_PARAM + \"' init param must be a <int>\");\n          }\n          if (null != copyFieldNamedList.get(MAX_CHARS_PARAM)) {\n            throw new SolrException(SERVER_ERROR,\n                \"Each '\" + COPY_FIELD_PARAM + \"' <lst/> may contain only one '\" + MAX_CHARS_PARAM + \"' <str>\");\n          }\n          maxChars = Integer.parseInt(maxCharsObj.toString());\n        }\n        copyFieldDefs.add(new CopyFieldDef(dest, maxChars));\n      }\n      typeMappings.add(new TypeMapping(fieldType, valueClasses, isDefault, copyFieldDefs));\n      \n      if (0 != typeMappingNamedList.size()) {\n        throw new SolrException(SERVER_ERROR, \n            \"Unexpected '\" + TYPE_MAPPING_PARAM + \"' init sub-param(s): '\" + typeMappingNamedList.toString() + \"'\");\n      }\n      args.remove(TYPE_MAPPING_PARAM);\n    }\n    return typeMappings;\n  }\n\n","sourceOld":"  private static List<TypeMapping> parseTypeMappings(NamedList args) {\n    List<TypeMapping> typeMappings = new ArrayList<>();\n    List<Object> typeMappingsParams = args.getAll(TYPE_MAPPING_PARAM);\n    for (Object typeMappingObj : typeMappingsParams) {\n      if (null == typeMappingObj) {\n        throw new SolrException(SERVER_ERROR, \"'\" + TYPE_MAPPING_PARAM + \"' init param cannot be null\");\n      }\n      if ( ! (typeMappingObj instanceof NamedList) ) {\n        throw new SolrException(SERVER_ERROR, \"'\" + TYPE_MAPPING_PARAM + \"' init param must be a <lst>\");\n      }\n      NamedList typeMappingNamedList = (NamedList)typeMappingObj;\n\n      Object fieldTypeObj = typeMappingNamedList.remove(FIELD_TYPE_PARAM);\n      if (null == fieldTypeObj) {\n        throw new SolrException(SERVER_ERROR,\n            \"Each '\" + TYPE_MAPPING_PARAM + \"' <lst/> must contain a '\" + FIELD_TYPE_PARAM + \"' <str>\");\n      }\n      if ( ! (fieldTypeObj instanceof CharSequence)) {\n        throw new SolrException(SERVER_ERROR, \"'\" + FIELD_TYPE_PARAM + \"' init param must be a <str>\");\n      }\n      if (null != typeMappingNamedList.get(FIELD_TYPE_PARAM)) {\n        throw new SolrException(SERVER_ERROR,\n            \"Each '\" + TYPE_MAPPING_PARAM + \"' <lst/> may contain only one '\" + FIELD_TYPE_PARAM + \"' <str>\");\n      }\n      String fieldType = fieldTypeObj.toString();\n\n      Collection<String> valueClasses\n          = typeMappingNamedList.removeConfigArgs(VALUE_CLASS_PARAM);\n      if (valueClasses.isEmpty()) {\n        throw new SolrException(SERVER_ERROR, \n            \"Each '\" + TYPE_MAPPING_PARAM + \"' <lst/> must contain at least one '\" + VALUE_CLASS_PARAM + \"' <str>\");\n      }\n      typeMappings.add(new TypeMapping(fieldType, valueClasses));\n\n      if (0 != typeMappingNamedList.size()) {\n        throw new SolrException(SERVER_ERROR, \n            \"Unexpected '\" + TYPE_MAPPING_PARAM + \"' init sub-param(s): '\" + typeMappingNamedList.toString() + \"'\");\n      }\n      args.remove(TYPE_MAPPING_PARAM);\n    }\n    return typeMappings;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"018a36ff4088cb91ab12cbe44f696d81d1fadd77","date":1591657414,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/AddSchemaFieldsUpdateProcessorFactory#parseTypeMappings(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/AddSchemaFieldsUpdateProcessorFactory#parseTypeMappings(NamedList).mjava","sourceNew":"  private static List<TypeMapping> parseTypeMappings(@SuppressWarnings({\"rawtypes\"})NamedList args) {\n    List<TypeMapping> typeMappings = new ArrayList<>();\n    @SuppressWarnings({\"unchecked\"})\n    List<Object> typeMappingsParams = args.getAll(TYPE_MAPPING_PARAM);\n    for (Object typeMappingObj : typeMappingsParams) {\n      if (null == typeMappingObj) {\n        throw new SolrException(SERVER_ERROR, \"'\" + TYPE_MAPPING_PARAM + \"' init param cannot be null\");\n      }\n      if ( ! (typeMappingObj instanceof NamedList) ) {\n        throw new SolrException(SERVER_ERROR, \"'\" + TYPE_MAPPING_PARAM + \"' init param must be a <lst>\");\n      }\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList typeMappingNamedList = (NamedList)typeMappingObj;\n\n      Object fieldTypeObj = typeMappingNamedList.remove(FIELD_TYPE_PARAM);\n      if (null == fieldTypeObj) {\n        throw new SolrException(SERVER_ERROR,\n            \"Each '\" + TYPE_MAPPING_PARAM + \"' <lst/> must contain a '\" + FIELD_TYPE_PARAM + \"' <str>\");\n      }\n      if ( ! (fieldTypeObj instanceof CharSequence)) {\n        throw new SolrException(SERVER_ERROR, \"'\" + FIELD_TYPE_PARAM + \"' init param must be a <str>\");\n      }\n      if (null != typeMappingNamedList.get(FIELD_TYPE_PARAM)) {\n        throw new SolrException(SERVER_ERROR,\n            \"Each '\" + TYPE_MAPPING_PARAM + \"' <lst/> may contain only one '\" + FIELD_TYPE_PARAM + \"' <str>\");\n      }\n      String fieldType = fieldTypeObj.toString();\n\n      @SuppressWarnings({\"unchecked\"})\n      Collection<String> valueClasses\n          = typeMappingNamedList.removeConfigArgs(VALUE_CLASS_PARAM);\n      if (valueClasses.isEmpty()) {\n        throw new SolrException(SERVER_ERROR, \n            \"Each '\" + TYPE_MAPPING_PARAM + \"' <lst/> must contain at least one '\" + VALUE_CLASS_PARAM + \"' <str>\");\n      }\n\n      // isDefault (optional)\n      Boolean isDefault = false;\n      Object isDefaultObj = typeMappingNamedList.remove(IS_DEFAULT_PARAM);\n      if (null != isDefaultObj) {\n        if ( ! (isDefaultObj instanceof Boolean)) {\n          throw new SolrException(SERVER_ERROR, \"'\" + IS_DEFAULT_PARAM + \"' init param must be a <bool>\");\n        }\n        if (null != typeMappingNamedList.get(IS_DEFAULT_PARAM)) {\n          throw new SolrException(SERVER_ERROR,\n              \"Each '\" + COPY_FIELD_PARAM + \"' <lst/> may contain only one '\" + IS_DEFAULT_PARAM + \"' <bool>\");\n        }\n        isDefault = Boolean.parseBoolean(isDefaultObj.toString());\n      }\n      \n      Collection<CopyFieldDef> copyFieldDefs = new ArrayList<>(); \n      while (typeMappingNamedList.get(COPY_FIELD_PARAM) != null) {\n        Object copyFieldObj = typeMappingNamedList.remove(COPY_FIELD_PARAM);\n        if ( ! (copyFieldObj instanceof NamedList)) {\n          throw new SolrException(SERVER_ERROR, \"'\" + COPY_FIELD_PARAM + \"' init param must be a <lst>\");\n        }\n        @SuppressWarnings({\"rawtypes\"})\n        NamedList copyFieldNamedList = (NamedList)copyFieldObj;\n        // dest\n        Object destObj = copyFieldNamedList.remove(DEST_PARAM);\n        if (null == destObj) {\n          throw new SolrException(SERVER_ERROR,\n              \"Each '\" + COPY_FIELD_PARAM + \"' <lst/> must contain a '\" + DEST_PARAM + \"' <str>\");\n        }\n        if ( ! (destObj instanceof CharSequence)) {\n          throw new SolrException(SERVER_ERROR, \"'\" + COPY_FIELD_PARAM + \"' init param must be a <str>\");\n        }\n        if (null != copyFieldNamedList.get(COPY_FIELD_PARAM)) {\n          throw new SolrException(SERVER_ERROR,\n              \"Each '\" + COPY_FIELD_PARAM + \"' <lst/> may contain only one '\" + COPY_FIELD_PARAM + \"' <str>\");\n        }\n        String dest = destObj.toString();\n        // maxChars (optional)\n        Integer maxChars = 0;\n        Object maxCharsObj = copyFieldNamedList.remove(MAX_CHARS_PARAM);\n        if (null != maxCharsObj) {\n          if ( ! (maxCharsObj instanceof Integer)) {\n            throw new SolrException(SERVER_ERROR, \"'\" + MAX_CHARS_PARAM + \"' init param must be a <int>\");\n          }\n          if (null != copyFieldNamedList.get(MAX_CHARS_PARAM)) {\n            throw new SolrException(SERVER_ERROR,\n                \"Each '\" + COPY_FIELD_PARAM + \"' <lst/> may contain only one '\" + MAX_CHARS_PARAM + \"' <str>\");\n          }\n          maxChars = Integer.parseInt(maxCharsObj.toString());\n        }\n        copyFieldDefs.add(new CopyFieldDef(dest, maxChars));\n      }\n      typeMappings.add(new TypeMapping(fieldType, valueClasses, isDefault, copyFieldDefs));\n      \n      if (0 != typeMappingNamedList.size()) {\n        throw new SolrException(SERVER_ERROR, \n            \"Unexpected '\" + TYPE_MAPPING_PARAM + \"' init sub-param(s): '\" + typeMappingNamedList.toString() + \"'\");\n      }\n      args.remove(TYPE_MAPPING_PARAM);\n    }\n    return typeMappings;\n  }\n\n","sourceOld":"  private static List<TypeMapping> parseTypeMappings(NamedList args) {\n    List<TypeMapping> typeMappings = new ArrayList<>();\n    List<Object> typeMappingsParams = args.getAll(TYPE_MAPPING_PARAM);\n    for (Object typeMappingObj : typeMappingsParams) {\n      if (null == typeMappingObj) {\n        throw new SolrException(SERVER_ERROR, \"'\" + TYPE_MAPPING_PARAM + \"' init param cannot be null\");\n      }\n      if ( ! (typeMappingObj instanceof NamedList) ) {\n        throw new SolrException(SERVER_ERROR, \"'\" + TYPE_MAPPING_PARAM + \"' init param must be a <lst>\");\n      }\n      NamedList typeMappingNamedList = (NamedList)typeMappingObj;\n\n      Object fieldTypeObj = typeMappingNamedList.remove(FIELD_TYPE_PARAM);\n      if (null == fieldTypeObj) {\n        throw new SolrException(SERVER_ERROR,\n            \"Each '\" + TYPE_MAPPING_PARAM + \"' <lst/> must contain a '\" + FIELD_TYPE_PARAM + \"' <str>\");\n      }\n      if ( ! (fieldTypeObj instanceof CharSequence)) {\n        throw new SolrException(SERVER_ERROR, \"'\" + FIELD_TYPE_PARAM + \"' init param must be a <str>\");\n      }\n      if (null != typeMappingNamedList.get(FIELD_TYPE_PARAM)) {\n        throw new SolrException(SERVER_ERROR,\n            \"Each '\" + TYPE_MAPPING_PARAM + \"' <lst/> may contain only one '\" + FIELD_TYPE_PARAM + \"' <str>\");\n      }\n      String fieldType = fieldTypeObj.toString();\n\n      Collection<String> valueClasses\n          = typeMappingNamedList.removeConfigArgs(VALUE_CLASS_PARAM);\n      if (valueClasses.isEmpty()) {\n        throw new SolrException(SERVER_ERROR, \n            \"Each '\" + TYPE_MAPPING_PARAM + \"' <lst/> must contain at least one '\" + VALUE_CLASS_PARAM + \"' <str>\");\n      }\n\n      // isDefault (optional)\n      Boolean isDefault = false;\n      Object isDefaultObj = typeMappingNamedList.remove(IS_DEFAULT_PARAM);\n      if (null != isDefaultObj) {\n        if ( ! (isDefaultObj instanceof Boolean)) {\n          throw new SolrException(SERVER_ERROR, \"'\" + IS_DEFAULT_PARAM + \"' init param must be a <bool>\");\n        }\n        if (null != typeMappingNamedList.get(IS_DEFAULT_PARAM)) {\n          throw new SolrException(SERVER_ERROR,\n              \"Each '\" + COPY_FIELD_PARAM + \"' <lst/> may contain only one '\" + IS_DEFAULT_PARAM + \"' <bool>\");\n        }\n        isDefault = Boolean.parseBoolean(isDefaultObj.toString());\n      }\n      \n      Collection<CopyFieldDef> copyFieldDefs = new ArrayList<>(); \n      while (typeMappingNamedList.get(COPY_FIELD_PARAM) != null) {\n        Object copyFieldObj = typeMappingNamedList.remove(COPY_FIELD_PARAM);\n        if ( ! (copyFieldObj instanceof NamedList)) {\n          throw new SolrException(SERVER_ERROR, \"'\" + COPY_FIELD_PARAM + \"' init param must be a <lst>\");\n        }\n        NamedList copyFieldNamedList = (NamedList)copyFieldObj;\n        // dest\n        Object destObj = copyFieldNamedList.remove(DEST_PARAM);\n        if (null == destObj) {\n          throw new SolrException(SERVER_ERROR,\n              \"Each '\" + COPY_FIELD_PARAM + \"' <lst/> must contain a '\" + DEST_PARAM + \"' <str>\");\n        }\n        if ( ! (destObj instanceof CharSequence)) {\n          throw new SolrException(SERVER_ERROR, \"'\" + COPY_FIELD_PARAM + \"' init param must be a <str>\");\n        }\n        if (null != copyFieldNamedList.get(COPY_FIELD_PARAM)) {\n          throw new SolrException(SERVER_ERROR,\n              \"Each '\" + COPY_FIELD_PARAM + \"' <lst/> may contain only one '\" + COPY_FIELD_PARAM + \"' <str>\");\n        }\n        String dest = destObj.toString();\n        // maxChars (optional)\n        Integer maxChars = 0;\n        Object maxCharsObj = copyFieldNamedList.remove(MAX_CHARS_PARAM);\n        if (null != maxCharsObj) {\n          if ( ! (maxCharsObj instanceof Integer)) {\n            throw new SolrException(SERVER_ERROR, \"'\" + MAX_CHARS_PARAM + \"' init param must be a <int>\");\n          }\n          if (null != copyFieldNamedList.get(MAX_CHARS_PARAM)) {\n            throw new SolrException(SERVER_ERROR,\n                \"Each '\" + COPY_FIELD_PARAM + \"' <lst/> may contain only one '\" + MAX_CHARS_PARAM + \"' <str>\");\n          }\n          maxChars = Integer.parseInt(maxCharsObj.toString());\n        }\n        copyFieldDefs.add(new CopyFieldDef(dest, maxChars));\n      }\n      typeMappings.add(new TypeMapping(fieldType, valueClasses, isDefault, copyFieldDefs));\n      \n      if (0 != typeMappingNamedList.size()) {\n        throw new SolrException(SERVER_ERROR, \n            \"Unexpected '\" + TYPE_MAPPING_PARAM + \"' init sub-param(s): '\" + typeMappingNamedList.toString() + \"'\");\n      }\n      args.remove(TYPE_MAPPING_PARAM);\n    }\n    return typeMappings;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4b377fd91b7578d0c02b259b5112d667e4d5f8e6":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3ae0c36347d7586e501169851eb8fe2ad2b8f0dd"],"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["4b377fd91b7578d0c02b259b5112d667e4d5f8e6"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a70b5355a56e9fd1404a59fee055bd79dafa7634"],"fe3edda347939cc6859dbf4287e84f3e8e4bb939":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e73d8d559120669b47658108d818b637df5456ea":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","4b377fd91b7578d0c02b259b5112d667e4d5f8e6"],"a70b5355a56e9fd1404a59fee055bd79dafa7634":["fe3edda347939cc6859dbf4287e84f3e8e4bb939"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["018a36ff4088cb91ab12cbe44f696d81d1fadd77"],"3ae0c36347d7586e501169851eb8fe2ad2b8f0dd":["a70b5355a56e9fd1404a59fee055bd79dafa7634"]},"commit2Childs":{"4b377fd91b7578d0c02b259b5112d667e4d5f8e6":["018a36ff4088cb91ab12cbe44f696d81d1fadd77","e73d8d559120669b47658108d818b637df5456ea"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4b377fd91b7578d0c02b259b5112d667e4d5f8e6","e73d8d559120669b47658108d818b637df5456ea"],"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","fe3edda347939cc6859dbf4287e84f3e8e4bb939"],"fe3edda347939cc6859dbf4287e84f3e8e4bb939":["a70b5355a56e9fd1404a59fee055bd79dafa7634"],"e73d8d559120669b47658108d818b637df5456ea":[],"a70b5355a56e9fd1404a59fee055bd79dafa7634":["37a0f60745e53927c4c876cfe5b5a58170f0646c","3ae0c36347d7586e501169851eb8fe2ad2b8f0dd"],"3ae0c36347d7586e501169851eb8fe2ad2b8f0dd":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","e73d8d559120669b47658108d818b637df5456ea","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}