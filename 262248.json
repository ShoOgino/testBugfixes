{"path":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField#memSize().mjava","commits":[{"id":"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","date":1426480823,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField#memSize().mjava","pathOld":"solr/core/src/java/org/apache/solr/request/UnInvertedField#memSize().mjava","sourceNew":"  public long memSize() {\n    // can cache the mem size since it shouldn't change\n    if (memsz!=0) return memsz;\n    long sz = super.ramBytesUsed();\n    sz += 8*8 + 32; // local fields\n    sz += bigTerms.size() * 64;\n    for (TopTerm tt : bigTerms.values()) {\n      sz += tt.memSize();\n    }\n    if (maxTermCounts != null)\n      sz += maxTermCounts.length * 4;\n    if (indexedTermsArray != null) {\n      // assume 8 byte references?\n      sz += 8+8+8+8+(indexedTermsArray.length<<3)+sizeOfIndexedStrings;\n    }\n    memsz = sz;\n    return sz;\n  }\n\n","sourceOld":"  public long memSize() {\n    // can cache the mem size since it shouldn't change\n    if (memsz!=0) return memsz;\n    long sz = super.ramBytesUsed();\n    sz += 8*8 + 32; // local fields\n    sz += bigTerms.size() * 64;\n    for (TopTerm tt : bigTerms.values()) {\n      sz += tt.memSize();\n    }\n    if (maxTermCounts != null)\n      sz += maxTermCounts.length * 4;\n    if (indexedTermsArray != null) {\n      // assume 8 byte references?\n      sz += 8+8+8+8+(indexedTermsArray.length<<3)+sizeOfIndexedStrings;\n    }\n    memsz = sz;\n    return sz;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":1,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField#memSize().mjava","pathOld":"solr/core/src/java/org/apache/solr/request/UnInvertedField#memSize().mjava","sourceNew":"  public long memSize() {\n    // can cache the mem size since it shouldn't change\n    if (memsz!=0) return memsz;\n    long sz = super.ramBytesUsed();\n    sz += 8*8 + 32; // local fields\n    sz += bigTerms.size() * 64;\n    for (TopTerm tt : bigTerms.values()) {\n      sz += tt.memSize();\n    }\n    if (maxTermCounts != null)\n      sz += maxTermCounts.length * 4;\n    if (indexedTermsArray != null) {\n      // assume 8 byte references?\n      sz += 8+8+8+8+(indexedTermsArray.length<<3)+sizeOfIndexedStrings;\n    }\n    memsz = sz;\n    return sz;\n  }\n\n","sourceOld":"  public long memSize() {\n    // can cache the mem size since it shouldn't change\n    if (memsz!=0) return memsz;\n    long sz = super.ramBytesUsed();\n    sz += 8*8 + 32; // local fields\n    sz += bigTerms.size() * 64;\n    for (TopTerm tt : bigTerms.values()) {\n      sz += tt.memSize();\n    }\n    if (maxTermCounts != null)\n      sz += maxTermCounts.length * 4;\n    if (indexedTermsArray != null) {\n      // assume 8 byte references?\n      sz += 8+8+8+8+(indexedTermsArray.length<<3)+sizeOfIndexedStrings;\n    }\n    memsz = sz;\n    return sz;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac981db60ef979233b3438ec49ddae82e8cc4697","date":1503407558,"type":3,"author":"Toke Eskildsen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField#memSize().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField#memSize().mjava","sourceNew":"  public long memSize() {\n    // can cache the mem size since it shouldn't change\n    if (memsz!=0) return memsz;\n    long sz = super.ramBytesUsed();\n    sz += 8*8 + 32; // local fields\n    sz += bigTerms.size() * 64;\n    for (TopTerm tt : bigTerms.values()) {\n      sz += tt.memSize();\n    }\n    if (maxTermCounts != null)\n      sz += maxTermCounts.length * 4;\n    memsz = sz;\n    return sz;\n  }\n\n","sourceOld":"  public long memSize() {\n    // can cache the mem size since it shouldn't change\n    if (memsz!=0) return memsz;\n    long sz = super.ramBytesUsed();\n    sz += 8*8 + 32; // local fields\n    sz += bigTerms.size() * 64;\n    for (TopTerm tt : bigTerms.values()) {\n      sz += tt.memSize();\n    }\n    if (maxTermCounts != null)\n      sz += maxTermCounts.length * 4;\n    if (indexedTermsArray != null) {\n      // assume 8 byte references?\n      sz += 8+8+8+8+(indexedTermsArray.length<<3)+sizeOfIndexedStrings;\n    }\n    memsz = sz;\n    return sz;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField#memSize().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField#memSize().mjava","sourceNew":"  public long memSize() {\n    // can cache the mem size since it shouldn't change\n    if (memsz!=0) return memsz;\n    long sz = super.ramBytesUsed();\n    sz += 8*8 + 32; // local fields\n    sz += bigTerms.size() * 64;\n    for (TopTerm tt : bigTerms.values()) {\n      sz += tt.memSize();\n    }\n    if (maxTermCounts != null)\n      sz += maxTermCounts.length * 4;\n    memsz = sz;\n    return sz;\n  }\n\n","sourceOld":"  public long memSize() {\n    // can cache the mem size since it shouldn't change\n    if (memsz!=0) return memsz;\n    long sz = super.ramBytesUsed();\n    sz += 8*8 + 32; // local fields\n    sz += bigTerms.size() * 64;\n    for (TopTerm tt : bigTerms.values()) {\n      sz += tt.memSize();\n    }\n    if (maxTermCounts != null)\n      sz += maxTermCounts.length * 4;\n    if (indexedTermsArray != null) {\n      // assume 8 byte references?\n      sz += 8+8+8+8+(indexedTermsArray.length<<3)+sizeOfIndexedStrings;\n    }\n    memsz = sz;\n    return sz;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","ac981db60ef979233b3438ec49ddae82e8cc4697"],"ac981db60ef979233b3438ec49ddae82e8cc4697":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ac981db60ef979233b3438ec49ddae82e8cc4697"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"ac981db60ef979233b3438ec49ddae82e8cc4697":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","3a7809d1d753b67f48b1a706e17034bf8b624ea3","ac981db60ef979233b3438ec49ddae82e8cc4697"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}