{"path":"solr/src/java/org/apache/solr/search/SpatialFilterQParser#parse().mjava","commits":[{"id":"5f900d5ce814fc22ea498d3303d1f833f5bf320c","date":1278720761,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SpatialFilterQParser#parse().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Query parse() throws ParseException {\n    //if more than one, we need to treat them as a point...\n    //TODO: Should we accept multiple fields\n    String[] fields = localParams.getParams(CommonParams.FL);\n    if (fields == null || fields.length == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, CommonParams.FL + \" is not properly specified\");\n    }\n    String pointStr = params.get(SpatialParams.POINT);\n    if (pointStr == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, SpatialParams.POINT + \" is not properly specified\");\n    }\n\n    double dist = params.getDouble(SpatialParams.DISTANCE, -1);\n    if (dist < 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, SpatialParams.DISTANCE + \" must be >= 0\");\n    }\n    IndexSchema schema = req.getSchema();\n\n    String measStr = localParams.get(SpatialParams.MEASURE);\n    //TODO: Need to do something with Measures\n    Query result = null;\n    //fields is valid at this point\n    if (fields.length == 1) {\n      SchemaField sf = schema.getField(fields[0]);\n      FieldType type = sf.getType();\n\n      if (type instanceof SpatialQueryable) {\n        double radius = localParams.getDouble(SpatialParams.SPHERE_RADIUS, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n        SpatialOptions opts = new SpatialOptions(pointStr, dist, sf, measStr, radius, DistanceUnits.KILOMETERS);\n        result = ((SpatialQueryable)type).createSpatialQuery(this, opts);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The field \" + fields[0]\n                + \" does not support spatial filtering\");\n      }\n    } else {// fields.length > 1\n      //TODO: Not sure about this just yet, is there a way to delegate, or do we just have a helper class?\n      //Seems like we could just use FunctionQuery, but then what about scoring\n      /*List<ValueSource> sources = new ArrayList<ValueSource>(fields.length);\n      for (String field : fields) {\n        SchemaField sf = schema.getField(field);\n        sources.add(sf.getType().getValueSource(sf, this));\n      }\n      MultiValueSource vs = new VectorValueSource(sources);\n      ValueSourceRangeFilter rf = new ValueSourceRangeFilter(vs, \"0\", String.valueOf(dist), true, true);\n      result = new SolrConstantScoreQuery(rf);*/\n    }\n\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/SpatialFilterQParser#parse().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Query parse() throws ParseException {\n    //if more than one, we need to treat them as a point...\n    //TODO: Should we accept multiple fields\n    String[] fields = localParams.getParams(CommonParams.FL);\n    if (fields == null || fields.length == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, CommonParams.FL + \" is not properly specified\");\n    }\n    String pointStr = params.get(SpatialParams.POINT);\n    if (pointStr == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, SpatialParams.POINT + \" is not properly specified\");\n    }\n\n    double dist = params.getDouble(SpatialParams.DISTANCE, -1);\n    if (dist < 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, SpatialParams.DISTANCE + \" must be >= 0\");\n    }\n    IndexSchema schema = req.getSchema();\n\n    String measStr = localParams.get(SpatialParams.MEASURE);\n    //TODO: Need to do something with Measures\n    Query result = null;\n    //fields is valid at this point\n    if (fields.length == 1) {\n      SchemaField sf = schema.getField(fields[0]);\n      FieldType type = sf.getType();\n\n      if (type instanceof SpatialQueryable) {\n        double radius = localParams.getDouble(SpatialParams.SPHERE_RADIUS, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n        SpatialOptions opts = new SpatialOptions(pointStr, dist, sf, measStr, radius, DistanceUnits.KILOMETERS);\n        result = ((SpatialQueryable)type).createSpatialQuery(this, opts);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The field \" + fields[0]\n                + \" does not support spatial filtering\");\n      }\n    } else {// fields.length > 1\n      //TODO: Not sure about this just yet, is there a way to delegate, or do we just have a helper class?\n      //Seems like we could just use FunctionQuery, but then what about scoring\n      /*List<ValueSource> sources = new ArrayList<ValueSource>(fields.length);\n      for (String field : fields) {\n        SchemaField sf = schema.getField(field);\n        sources.add(sf.getType().getValueSource(sf, this));\n      }\n      MultiValueSource vs = new VectorValueSource(sources);\n      ValueSourceRangeFilter rf = new ValueSourceRangeFilter(vs, \"0\", String.valueOf(dist), true, true);\n      result = new SolrConstantScoreQuery(rf);*/\n    }\n\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31e8d007ac801c41317768454fc5a2cef7f18583","date":1285271995,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SpatialFilterQParser#parse().mjava","pathOld":"solr/src/java/org/apache/solr/search/SpatialFilterQParser#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws ParseException {\n    //if more than one, we need to treat them as a point...\n    //TODO: Should we accept multiple fields\n    String[] fields = localParams.getParams(CommonParams.FL);\n    if (fields == null || fields.length == 0) {\n      String field = getParam(SpatialParams.FIELD);\n      if (field == null)\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \" missing field for spatial request\");\n      fields = new String[] {field};\n    }\n    \n    String pointStr = getParam(SpatialParams.POINT);\n    if (pointStr == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, SpatialParams.POINT + \" is not properly specified\");\n    }\n\n    double dist = -1;\n    String distS = getParam(SpatialParams.DISTANCE);\n    if (distS != null) dist = Double.parseDouble(distS);\n\n    if (dist < 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, SpatialParams.DISTANCE + \" must be >= 0\");\n    }\n\n    String measStr = localParams.get(SpatialParams.MEASURE);\n    //TODO: Need to do something with Measures\n    Query result = null;\n    //fields is valid at this point\n    if (fields.length == 1) {\n      SchemaField sf = req.getSchema().getField(fields[0]);\n      FieldType type = sf.getType();\n\n      if (type instanceof SpatialQueryable) {\n        double radius = localParams.getDouble(SpatialParams.SPHERE_RADIUS, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n        SpatialOptions opts = new SpatialOptions(pointStr, dist, sf, measStr, radius, DistanceUnits.KILOMETERS);\n        result = ((SpatialQueryable)type).createSpatialQuery(this, opts);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The field \" + fields[0]\n                + \" does not support spatial filtering\");\n      }\n    } else {// fields.length > 1\n      //TODO: Not sure about this just yet, is there a way to delegate, or do we just have a helper class?\n      //Seems like we could just use FunctionQuery, but then what about scoring\n      /*List<ValueSource> sources = new ArrayList<ValueSource>(fields.length);\n      for (String field : fields) {\n        SchemaField sf = schema.getField(field);\n        sources.add(sf.getType().getValueSource(sf, this));\n      }\n      MultiValueSource vs = new VectorValueSource(sources);\n      ValueSourceRangeFilter rf = new ValueSourceRangeFilter(vs, \"0\", String.valueOf(dist), true, true);\n      result = new SolrConstantScoreQuery(rf);*/\n    }\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws ParseException {\n    //if more than one, we need to treat them as a point...\n    //TODO: Should we accept multiple fields\n    String[] fields = localParams.getParams(CommonParams.FL);\n    if (fields == null || fields.length == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, CommonParams.FL + \" is not properly specified\");\n    }\n    String pointStr = params.get(SpatialParams.POINT);\n    if (pointStr == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, SpatialParams.POINT + \" is not properly specified\");\n    }\n\n    double dist = params.getDouble(SpatialParams.DISTANCE, -1);\n    if (dist < 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, SpatialParams.DISTANCE + \" must be >= 0\");\n    }\n    IndexSchema schema = req.getSchema();\n\n    String measStr = localParams.get(SpatialParams.MEASURE);\n    //TODO: Need to do something with Measures\n    Query result = null;\n    //fields is valid at this point\n    if (fields.length == 1) {\n      SchemaField sf = schema.getField(fields[0]);\n      FieldType type = sf.getType();\n\n      if (type instanceof SpatialQueryable) {\n        double radius = localParams.getDouble(SpatialParams.SPHERE_RADIUS, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n        SpatialOptions opts = new SpatialOptions(pointStr, dist, sf, measStr, radius, DistanceUnits.KILOMETERS);\n        result = ((SpatialQueryable)type).createSpatialQuery(this, opts);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The field \" + fields[0]\n                + \" does not support spatial filtering\");\n      }\n    } else {// fields.length > 1\n      //TODO: Not sure about this just yet, is there a way to delegate, or do we just have a helper class?\n      //Seems like we could just use FunctionQuery, but then what about scoring\n      /*List<ValueSource> sources = new ArrayList<ValueSource>(fields.length);\n      for (String field : fields) {\n        SchemaField sf = schema.getField(field);\n        sources.add(sf.getType().getValueSource(sf, this));\n      }\n      MultiValueSource vs = new VectorValueSource(sources);\n      ValueSourceRangeFilter rf = new ValueSourceRangeFilter(vs, \"0\", String.valueOf(dist), true, true);\n      result = new SolrConstantScoreQuery(rf);*/\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b785b1f61f30f94f0708b16d7f2eee3ee23194ef","date":1285384789,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SpatialFilterQParser#parse().mjava","pathOld":"solr/src/java/org/apache/solr/search/SpatialFilterQParser#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws ParseException {\n    //if more than one, we need to treat them as a point...\n    //TODO: Should we accept multiple fields\n    String[] fields = localParams.getParams(CommonParams.FL);\n    if (fields == null || fields.length == 0) {\n      String field = getParam(SpatialParams.FIELD);\n      if (field == null)\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \" missing field for spatial request\");\n      fields = new String[] {field};\n    }\n    \n    String pointStr = getParam(SpatialParams.POINT);\n    if (pointStr == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, SpatialParams.POINT + \" is not properly specified\");\n    }\n\n    double dist = -1;\n    String distS = getParam(SpatialParams.DISTANCE);\n    if (distS != null) dist = Double.parseDouble(distS);\n\n    if (dist < 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, SpatialParams.DISTANCE + \" must be >= 0\");\n    }\n\n    String measStr = localParams.get(SpatialParams.MEASURE);\n    //TODO: Need to do something with Measures\n    Query result = null;\n    //fields is valid at this point\n    if (fields.length == 1) {\n      SchemaField sf = req.getSchema().getField(fields[0]);\n      FieldType type = sf.getType();\n\n      if (type instanceof SpatialQueryable) {\n        double radius = localParams.getDouble(SpatialParams.SPHERE_RADIUS, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n        SpatialOptions opts = new SpatialOptions(pointStr, dist, sf, measStr, radius, DistanceUnits.KILOMETERS);\n        opts.bbox = bbox;\n        result = ((SpatialQueryable)type).createSpatialQuery(this, opts);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The field \" + fields[0]\n                + \" does not support spatial filtering\");\n      }\n    } else {// fields.length > 1\n      //TODO: Not sure about this just yet, is there a way to delegate, or do we just have a helper class?\n      //Seems like we could just use FunctionQuery, but then what about scoring\n      /*List<ValueSource> sources = new ArrayList<ValueSource>(fields.length);\n      for (String field : fields) {\n        SchemaField sf = schema.getField(field);\n        sources.add(sf.getType().getValueSource(sf, this));\n      }\n      MultiValueSource vs = new VectorValueSource(sources);\n      ValueSourceRangeFilter rf = new ValueSourceRangeFilter(vs, \"0\", String.valueOf(dist), true, true);\n      result = new SolrConstantScoreQuery(rf);*/\n    }\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws ParseException {\n    //if more than one, we need to treat them as a point...\n    //TODO: Should we accept multiple fields\n    String[] fields = localParams.getParams(CommonParams.FL);\n    if (fields == null || fields.length == 0) {\n      String field = getParam(SpatialParams.FIELD);\n      if (field == null)\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \" missing field for spatial request\");\n      fields = new String[] {field};\n    }\n    \n    String pointStr = getParam(SpatialParams.POINT);\n    if (pointStr == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, SpatialParams.POINT + \" is not properly specified\");\n    }\n\n    double dist = -1;\n    String distS = getParam(SpatialParams.DISTANCE);\n    if (distS != null) dist = Double.parseDouble(distS);\n\n    if (dist < 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, SpatialParams.DISTANCE + \" must be >= 0\");\n    }\n\n    String measStr = localParams.get(SpatialParams.MEASURE);\n    //TODO: Need to do something with Measures\n    Query result = null;\n    //fields is valid at this point\n    if (fields.length == 1) {\n      SchemaField sf = req.getSchema().getField(fields[0]);\n      FieldType type = sf.getType();\n\n      if (type instanceof SpatialQueryable) {\n        double radius = localParams.getDouble(SpatialParams.SPHERE_RADIUS, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n        SpatialOptions opts = new SpatialOptions(pointStr, dist, sf, measStr, radius, DistanceUnits.KILOMETERS);\n        result = ((SpatialQueryable)type).createSpatialQuery(this, opts);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The field \" + fields[0]\n                + \" does not support spatial filtering\");\n      }\n    } else {// fields.length > 1\n      //TODO: Not sure about this just yet, is there a way to delegate, or do we just have a helper class?\n      //Seems like we could just use FunctionQuery, but then what about scoring\n      /*List<ValueSource> sources = new ArrayList<ValueSource>(fields.length);\n      for (String field : fields) {\n        SchemaField sf = schema.getField(field);\n        sources.add(sf.getType().getValueSource(sf, this));\n      }\n      MultiValueSource vs = new VectorValueSource(sources);\n      ValueSourceRangeFilter rf = new ValueSourceRangeFilter(vs, \"0\", String.valueOf(dist), true, true);\n      result = new SolrConstantScoreQuery(rf);*/\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a88da65f7210ad629e64c0553232a63d5d1bdc7c","date":1285779929,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SpatialFilterQParser#parse().mjava","pathOld":"solr/src/java/org/apache/solr/search/SpatialFilterQParser#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws ParseException {\n    //if more than one, we need to treat them as a point...\n    //TODO: Should we accept multiple fields\n    String[] fields = localParams.getParams(\"f\");\n    if (fields == null || fields.length == 0) {\n      String field = getParam(SpatialParams.FIELD);\n      if (field == null)\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \" missing sfield for spatial request\");\n      fields = new String[] {field};\n    }\n    \n    String pointStr = getParam(SpatialParams.POINT);\n    if (pointStr == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, SpatialParams.POINT + \" missing.\");\n    }\n\n    double dist = -1;\n    String distS = getParam(SpatialParams.DISTANCE);\n    if (distS != null) dist = Double.parseDouble(distS);\n\n    if (dist < 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, SpatialParams.DISTANCE + \" must be >= 0\");\n    }\n\n    String measStr = localParams.get(SpatialParams.MEASURE);\n    //TODO: Need to do something with Measures\n    Query result = null;\n    //fields is valid at this point\n    if (fields.length == 1) {\n      SchemaField sf = req.getSchema().getField(fields[0]);\n      FieldType type = sf.getType();\n\n      if (type instanceof SpatialQueryable) {\n        double radius = localParams.getDouble(SpatialParams.SPHERE_RADIUS, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n        SpatialOptions opts = new SpatialOptions(pointStr, dist, sf, measStr, radius, DistanceUnits.KILOMETERS);\n        opts.bbox = bbox;\n        result = ((SpatialQueryable)type).createSpatialQuery(this, opts);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The field \" + fields[0]\n                + \" does not support spatial filtering\");\n      }\n    } else {// fields.length > 1\n      //TODO: Not sure about this just yet, is there a way to delegate, or do we just have a helper class?\n      //Seems like we could just use FunctionQuery, but then what about scoring\n      /*List<ValueSource> sources = new ArrayList<ValueSource>(fields.length);\n      for (String field : fields) {\n        SchemaField sf = schema.getField(field);\n        sources.add(sf.getType().getValueSource(sf, this));\n      }\n      MultiValueSource vs = new VectorValueSource(sources);\n      ValueSourceRangeFilter rf = new ValueSourceRangeFilter(vs, \"0\", String.valueOf(dist), true, true);\n      result = new SolrConstantScoreQuery(rf);*/\n    }\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws ParseException {\n    //if more than one, we need to treat them as a point...\n    //TODO: Should we accept multiple fields\n    String[] fields = localParams.getParams(CommonParams.FL);\n    if (fields == null || fields.length == 0) {\n      String field = getParam(SpatialParams.FIELD);\n      if (field == null)\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \" missing field for spatial request\");\n      fields = new String[] {field};\n    }\n    \n    String pointStr = getParam(SpatialParams.POINT);\n    if (pointStr == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, SpatialParams.POINT + \" is not properly specified\");\n    }\n\n    double dist = -1;\n    String distS = getParam(SpatialParams.DISTANCE);\n    if (distS != null) dist = Double.parseDouble(distS);\n\n    if (dist < 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, SpatialParams.DISTANCE + \" must be >= 0\");\n    }\n\n    String measStr = localParams.get(SpatialParams.MEASURE);\n    //TODO: Need to do something with Measures\n    Query result = null;\n    //fields is valid at this point\n    if (fields.length == 1) {\n      SchemaField sf = req.getSchema().getField(fields[0]);\n      FieldType type = sf.getType();\n\n      if (type instanceof SpatialQueryable) {\n        double radius = localParams.getDouble(SpatialParams.SPHERE_RADIUS, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n        SpatialOptions opts = new SpatialOptions(pointStr, dist, sf, measStr, radius, DistanceUnits.KILOMETERS);\n        opts.bbox = bbox;\n        result = ((SpatialQueryable)type).createSpatialQuery(this, opts);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The field \" + fields[0]\n                + \" does not support spatial filtering\");\n      }\n    } else {// fields.length > 1\n      //TODO: Not sure about this just yet, is there a way to delegate, or do we just have a helper class?\n      //Seems like we could just use FunctionQuery, but then what about scoring\n      /*List<ValueSource> sources = new ArrayList<ValueSource>(fields.length);\n      for (String field : fields) {\n        SchemaField sf = schema.getField(field);\n        sources.add(sf.getType().getValueSource(sf, this));\n      }\n      MultiValueSource vs = new VectorValueSource(sources);\n      ValueSourceRangeFilter rf = new ValueSourceRangeFilter(vs, \"0\", String.valueOf(dist), true, true);\n      result = new SolrConstantScoreQuery(rf);*/\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/SpatialFilterQParser#parse().mjava","pathOld":"solr/src/java/org/apache/solr/search/SpatialFilterQParser#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws ParseException {\n    //if more than one, we need to treat them as a point...\n    //TODO: Should we accept multiple fields\n    String[] fields = localParams.getParams(\"f\");\n    if (fields == null || fields.length == 0) {\n      String field = getParam(SpatialParams.FIELD);\n      if (field == null)\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \" missing sfield for spatial request\");\n      fields = new String[] {field};\n    }\n    \n    String pointStr = getParam(SpatialParams.POINT);\n    if (pointStr == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, SpatialParams.POINT + \" missing.\");\n    }\n\n    double dist = -1;\n    String distS = getParam(SpatialParams.DISTANCE);\n    if (distS != null) dist = Double.parseDouble(distS);\n\n    if (dist < 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, SpatialParams.DISTANCE + \" must be >= 0\");\n    }\n\n    String measStr = localParams.get(SpatialParams.MEASURE);\n    //TODO: Need to do something with Measures\n    Query result = null;\n    //fields is valid at this point\n    if (fields.length == 1) {\n      SchemaField sf = req.getSchema().getField(fields[0]);\n      FieldType type = sf.getType();\n\n      if (type instanceof SpatialQueryable) {\n        double radius = localParams.getDouble(SpatialParams.SPHERE_RADIUS, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n        SpatialOptions opts = new SpatialOptions(pointStr, dist, sf, measStr, radius, DistanceUnits.KILOMETERS);\n        opts.bbox = bbox;\n        result = ((SpatialQueryable)type).createSpatialQuery(this, opts);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The field \" + fields[0]\n                + \" does not support spatial filtering\");\n      }\n    } else {// fields.length > 1\n      //TODO: Not sure about this just yet, is there a way to delegate, or do we just have a helper class?\n      //Seems like we could just use FunctionQuery, but then what about scoring\n      /*List<ValueSource> sources = new ArrayList<ValueSource>(fields.length);\n      for (String field : fields) {\n        SchemaField sf = schema.getField(field);\n        sources.add(sf.getType().getValueSource(sf, this));\n      }\n      MultiValueSource vs = new VectorValueSource(sources);\n      ValueSourceRangeFilter rf = new ValueSourceRangeFilter(vs, \"0\", String.valueOf(dist), true, true);\n      result = new SolrConstantScoreQuery(rf);*/\n    }\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws ParseException {\n    //if more than one, we need to treat them as a point...\n    //TODO: Should we accept multiple fields\n    String[] fields = localParams.getParams(CommonParams.FL);\n    if (fields == null || fields.length == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, CommonParams.FL + \" is not properly specified\");\n    }\n    String pointStr = params.get(SpatialParams.POINT);\n    if (pointStr == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, SpatialParams.POINT + \" is not properly specified\");\n    }\n\n    double dist = params.getDouble(SpatialParams.DISTANCE, -1);\n    if (dist < 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, SpatialParams.DISTANCE + \" must be >= 0\");\n    }\n    IndexSchema schema = req.getSchema();\n\n    String measStr = localParams.get(SpatialParams.MEASURE);\n    //TODO: Need to do something with Measures\n    Query result = null;\n    //fields is valid at this point\n    if (fields.length == 1) {\n      SchemaField sf = schema.getField(fields[0]);\n      FieldType type = sf.getType();\n\n      if (type instanceof SpatialQueryable) {\n        double radius = localParams.getDouble(SpatialParams.SPHERE_RADIUS, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n        SpatialOptions opts = new SpatialOptions(pointStr, dist, sf, measStr, radius, DistanceUnits.KILOMETERS);\n        result = ((SpatialQueryable)type).createSpatialQuery(this, opts);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The field \" + fields[0]\n                + \" does not support spatial filtering\");\n      }\n    } else {// fields.length > 1\n      //TODO: Not sure about this just yet, is there a way to delegate, or do we just have a helper class?\n      //Seems like we could just use FunctionQuery, but then what about scoring\n      /*List<ValueSource> sources = new ArrayList<ValueSource>(fields.length);\n      for (String field : fields) {\n        SchemaField sf = schema.getField(field);\n        sources.add(sf.getType().getValueSource(sf, this));\n      }\n      MultiValueSource vs = new VectorValueSource(sources);\n      ValueSourceRangeFilter rf = new ValueSourceRangeFilter(vs, \"0\", String.valueOf(dist), true, true);\n      result = new SolrConstantScoreQuery(rf);*/\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SpatialFilterQParser#parse().mjava","pathOld":"solr/src/java/org/apache/solr/search/SpatialFilterQParser#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws ParseException {\n    //if more than one, we need to treat them as a point...\n    //TODO: Should we accept multiple fields\n    String[] fields = localParams.getParams(\"f\");\n    if (fields == null || fields.length == 0) {\n      String field = getParam(SpatialParams.FIELD);\n      if (field == null)\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \" missing sfield for spatial request\");\n      fields = new String[] {field};\n    }\n    \n    String pointStr = getParam(SpatialParams.POINT);\n    if (pointStr == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, SpatialParams.POINT + \" missing.\");\n    }\n\n    double dist = -1;\n    String distS = getParam(SpatialParams.DISTANCE);\n    if (distS != null) dist = Double.parseDouble(distS);\n\n    if (dist < 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, SpatialParams.DISTANCE + \" must be >= 0\");\n    }\n\n    String measStr = localParams.get(SpatialParams.MEASURE);\n    //TODO: Need to do something with Measures\n    Query result = null;\n    //fields is valid at this point\n    if (fields.length == 1) {\n      SchemaField sf = req.getSchema().getField(fields[0]);\n      FieldType type = sf.getType();\n\n      if (type instanceof SpatialQueryable) {\n        double radius = localParams.getDouble(SpatialParams.SPHERE_RADIUS, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n        SpatialOptions opts = new SpatialOptions(pointStr, dist, sf, measStr, radius, DistanceUnits.KILOMETERS);\n        opts.bbox = bbox;\n        result = ((SpatialQueryable)type).createSpatialQuery(this, opts);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The field \" + fields[0]\n                + \" does not support spatial filtering\");\n      }\n    } else {// fields.length > 1\n      //TODO: Not sure about this just yet, is there a way to delegate, or do we just have a helper class?\n      //Seems like we could just use FunctionQuery, but then what about scoring\n      /*List<ValueSource> sources = new ArrayList<ValueSource>(fields.length);\n      for (String field : fields) {\n        SchemaField sf = schema.getField(field);\n        sources.add(sf.getType().getValueSource(sf, this));\n      }\n      MultiValueSource vs = new VectorValueSource(sources);\n      ValueSourceRangeFilter rf = new ValueSourceRangeFilter(vs, \"0\", String.valueOf(dist), true, true);\n      result = new SolrConstantScoreQuery(rf);*/\n    }\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws ParseException {\n    //if more than one, we need to treat them as a point...\n    //TODO: Should we accept multiple fields\n    String[] fields = localParams.getParams(\"f\");\n    if (fields == null || fields.length == 0) {\n      String field = getParam(SpatialParams.FIELD);\n      if (field == null)\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \" missing sfield for spatial request\");\n      fields = new String[] {field};\n    }\n    \n    String pointStr = getParam(SpatialParams.POINT);\n    if (pointStr == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, SpatialParams.POINT + \" missing.\");\n    }\n\n    double dist = -1;\n    String distS = getParam(SpatialParams.DISTANCE);\n    if (distS != null) dist = Double.parseDouble(distS);\n\n    if (dist < 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, SpatialParams.DISTANCE + \" must be >= 0\");\n    }\n\n    String measStr = localParams.get(SpatialParams.MEASURE);\n    //TODO: Need to do something with Measures\n    Query result = null;\n    //fields is valid at this point\n    if (fields.length == 1) {\n      SchemaField sf = req.getSchema().getField(fields[0]);\n      FieldType type = sf.getType();\n\n      if (type instanceof SpatialQueryable) {\n        double radius = localParams.getDouble(SpatialParams.SPHERE_RADIUS, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n        SpatialOptions opts = new SpatialOptions(pointStr, dist, sf, measStr, radius, DistanceUnits.KILOMETERS);\n        opts.bbox = bbox;\n        result = ((SpatialQueryable)type).createSpatialQuery(this, opts);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The field \" + fields[0]\n                + \" does not support spatial filtering\");\n      }\n    } else {// fields.length > 1\n      //TODO: Not sure about this just yet, is there a way to delegate, or do we just have a helper class?\n      //Seems like we could just use FunctionQuery, but then what about scoring\n      /*List<ValueSource> sources = new ArrayList<ValueSource>(fields.length);\n      for (String field : fields) {\n        SchemaField sf = schema.getField(field);\n        sources.add(sf.getType().getValueSource(sf, this));\n      }\n      MultiValueSource vs = new VectorValueSource(sources);\n      ValueSourceRangeFilter rf = new ValueSourceRangeFilter(vs, \"0\", String.valueOf(dist), true, true);\n      result = new SolrConstantScoreQuery(rf);*/\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SpatialFilterQParser#parse().mjava","pathOld":"solr/src/java/org/apache/solr/search/SpatialFilterQParser#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws ParseException {\n    //if more than one, we need to treat them as a point...\n    //TODO: Should we accept multiple fields\n    String[] fields = localParams.getParams(\"f\");\n    if (fields == null || fields.length == 0) {\n      String field = getParam(SpatialParams.FIELD);\n      if (field == null)\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \" missing sfield for spatial request\");\n      fields = new String[] {field};\n    }\n    \n    String pointStr = getParam(SpatialParams.POINT);\n    if (pointStr == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, SpatialParams.POINT + \" missing.\");\n    }\n\n    double dist = -1;\n    String distS = getParam(SpatialParams.DISTANCE);\n    if (distS != null) dist = Double.parseDouble(distS);\n\n    if (dist < 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, SpatialParams.DISTANCE + \" must be >= 0\");\n    }\n\n    String measStr = localParams.get(SpatialParams.MEASURE);\n    //TODO: Need to do something with Measures\n    Query result = null;\n    //fields is valid at this point\n    if (fields.length == 1) {\n      SchemaField sf = req.getSchema().getField(fields[0]);\n      FieldType type = sf.getType();\n\n      if (type instanceof SpatialQueryable) {\n        double radius = localParams.getDouble(SpatialParams.SPHERE_RADIUS, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n        SpatialOptions opts = new SpatialOptions(pointStr, dist, sf, measStr, radius, DistanceUnits.KILOMETERS);\n        opts.bbox = bbox;\n        result = ((SpatialQueryable)type).createSpatialQuery(this, opts);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The field \" + fields[0]\n                + \" does not support spatial filtering\");\n      }\n    } else {// fields.length > 1\n      //TODO: Not sure about this just yet, is there a way to delegate, or do we just have a helper class?\n      //Seems like we could just use FunctionQuery, but then what about scoring\n      /*List<ValueSource> sources = new ArrayList<ValueSource>(fields.length);\n      for (String field : fields) {\n        SchemaField sf = schema.getField(field);\n        sources.add(sf.getType().getValueSource(sf, this));\n      }\n      MultiValueSource vs = new VectorValueSource(sources);\n      ValueSourceRangeFilter rf = new ValueSourceRangeFilter(vs, \"0\", String.valueOf(dist), true, true);\n      result = new SolrConstantScoreQuery(rf);*/\n    }\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws ParseException {\n    //if more than one, we need to treat them as a point...\n    //TODO: Should we accept multiple fields\n    String[] fields = localParams.getParams(\"f\");\n    if (fields == null || fields.length == 0) {\n      String field = getParam(SpatialParams.FIELD);\n      if (field == null)\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \" missing sfield for spatial request\");\n      fields = new String[] {field};\n    }\n    \n    String pointStr = getParam(SpatialParams.POINT);\n    if (pointStr == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, SpatialParams.POINT + \" missing.\");\n    }\n\n    double dist = -1;\n    String distS = getParam(SpatialParams.DISTANCE);\n    if (distS != null) dist = Double.parseDouble(distS);\n\n    if (dist < 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, SpatialParams.DISTANCE + \" must be >= 0\");\n    }\n\n    String measStr = localParams.get(SpatialParams.MEASURE);\n    //TODO: Need to do something with Measures\n    Query result = null;\n    //fields is valid at this point\n    if (fields.length == 1) {\n      SchemaField sf = req.getSchema().getField(fields[0]);\n      FieldType type = sf.getType();\n\n      if (type instanceof SpatialQueryable) {\n        double radius = localParams.getDouble(SpatialParams.SPHERE_RADIUS, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n        SpatialOptions opts = new SpatialOptions(pointStr, dist, sf, measStr, radius, DistanceUnits.KILOMETERS);\n        opts.bbox = bbox;\n        result = ((SpatialQueryable)type).createSpatialQuery(this, opts);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The field \" + fields[0]\n                + \" does not support spatial filtering\");\n      }\n    } else {// fields.length > 1\n      //TODO: Not sure about this just yet, is there a way to delegate, or do we just have a helper class?\n      //Seems like we could just use FunctionQuery, but then what about scoring\n      /*List<ValueSource> sources = new ArrayList<ValueSource>(fields.length);\n      for (String field : fields) {\n        SchemaField sf = schema.getField(field);\n        sources.add(sf.getType().getValueSource(sf, this));\n      }\n      MultiValueSource vs = new VectorValueSource(sources);\n      ValueSourceRangeFilter rf = new ValueSourceRangeFilter(vs, \"0\", String.valueOf(dist), true, true);\n      result = new SolrConstantScoreQuery(rf);*/\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SpatialFilterQParser#parse().mjava","pathOld":"solr/src/java/org/apache/solr/search/SpatialFilterQParser#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws ParseException {\n    //if more than one, we need to treat them as a point...\n    //TODO: Should we accept multiple fields\n    String[] fields = localParams.getParams(\"f\");\n    if (fields == null || fields.length == 0) {\n      String field = getParam(SpatialParams.FIELD);\n      if (field == null)\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \" missing sfield for spatial request\");\n      fields = new String[] {field};\n    }\n    \n    String pointStr = getParam(SpatialParams.POINT);\n    if (pointStr == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, SpatialParams.POINT + \" missing.\");\n    }\n\n    double dist = -1;\n    String distS = getParam(SpatialParams.DISTANCE);\n    if (distS != null) dist = Double.parseDouble(distS);\n\n    if (dist < 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, SpatialParams.DISTANCE + \" must be >= 0\");\n    }\n\n    String measStr = localParams.get(SpatialParams.MEASURE);\n    //TODO: Need to do something with Measures\n    Query result = null;\n    //fields is valid at this point\n    if (fields.length == 1) {\n      SchemaField sf = req.getSchema().getField(fields[0]);\n      FieldType type = sf.getType();\n\n      if (type instanceof SpatialQueryable) {\n        double radius = localParams.getDouble(SpatialParams.SPHERE_RADIUS, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n        SpatialOptions opts = new SpatialOptions(pointStr, dist, sf, measStr, radius, DistanceUnits.KILOMETERS);\n        opts.bbox = bbox;\n        result = ((SpatialQueryable)type).createSpatialQuery(this, opts);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The field \" + fields[0]\n                + \" does not support spatial filtering\");\n      }\n    } else {// fields.length > 1\n      //TODO: Not sure about this just yet, is there a way to delegate, or do we just have a helper class?\n      //Seems like we could just use FunctionQuery, but then what about scoring\n      /*List<ValueSource> sources = new ArrayList<ValueSource>(fields.length);\n      for (String field : fields) {\n        SchemaField sf = schema.getField(field);\n        sources.add(sf.getType().getValueSource(sf, this));\n      }\n      MultiValueSource vs = new VectorValueSource(sources);\n      ValueSourceRangeFilter rf = new ValueSourceRangeFilter(vs, \"0\", String.valueOf(dist), true, true);\n      result = new SolrConstantScoreQuery(rf);*/\n    }\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws ParseException {\n    //if more than one, we need to treat them as a point...\n    //TODO: Should we accept multiple fields\n    String[] fields = localParams.getParams(\"f\");\n    if (fields == null || fields.length == 0) {\n      String field = getParam(SpatialParams.FIELD);\n      if (field == null)\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \" missing sfield for spatial request\");\n      fields = new String[] {field};\n    }\n    \n    String pointStr = getParam(SpatialParams.POINT);\n    if (pointStr == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, SpatialParams.POINT + \" missing.\");\n    }\n\n    double dist = -1;\n    String distS = getParam(SpatialParams.DISTANCE);\n    if (distS != null) dist = Double.parseDouble(distS);\n\n    if (dist < 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, SpatialParams.DISTANCE + \" must be >= 0\");\n    }\n\n    String measStr = localParams.get(SpatialParams.MEASURE);\n    //TODO: Need to do something with Measures\n    Query result = null;\n    //fields is valid at this point\n    if (fields.length == 1) {\n      SchemaField sf = req.getSchema().getField(fields[0]);\n      FieldType type = sf.getType();\n\n      if (type instanceof SpatialQueryable) {\n        double radius = localParams.getDouble(SpatialParams.SPHERE_RADIUS, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n        SpatialOptions opts = new SpatialOptions(pointStr, dist, sf, measStr, radius, DistanceUnits.KILOMETERS);\n        opts.bbox = bbox;\n        result = ((SpatialQueryable)type).createSpatialQuery(this, opts);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The field \" + fields[0]\n                + \" does not support spatial filtering\");\n      }\n    } else {// fields.length > 1\n      //TODO: Not sure about this just yet, is there a way to delegate, or do we just have a helper class?\n      //Seems like we could just use FunctionQuery, but then what about scoring\n      /*List<ValueSource> sources = new ArrayList<ValueSource>(fields.length);\n      for (String field : fields) {\n        SchemaField sf = schema.getField(field);\n        sources.add(sf.getType().getValueSource(sf, this));\n      }\n      MultiValueSource vs = new VectorValueSource(sources);\n      ValueSourceRangeFilter rf = new ValueSourceRangeFilter(vs, \"0\", String.valueOf(dist), true, true);\n      result = new SolrConstantScoreQuery(rf);*/\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5f900d5ce814fc22ea498d3303d1f833f5bf320c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a88da65f7210ad629e64c0553232a63d5d1bdc7c"],"c26f00b574427b55127e869b935845554afde1fa":["a88da65f7210ad629e64c0553232a63d5d1bdc7c","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"31e8d007ac801c41317768454fc5a2cef7f18583":["5f900d5ce814fc22ea498d3303d1f833f5bf320c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a88da65f7210ad629e64c0553232a63d5d1bdc7c"],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5f900d5ce814fc22ea498d3303d1f833f5bf320c"],"b785b1f61f30f94f0708b16d7f2eee3ee23194ef":["31e8d007ac801c41317768454fc5a2cef7f18583"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","a88da65f7210ad629e64c0553232a63d5d1bdc7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"a88da65f7210ad629e64c0553232a63d5d1bdc7c":["b785b1f61f30f94f0708b16d7f2eee3ee23194ef"]},"commit2Childs":{"5f900d5ce814fc22ea498d3303d1f833f5bf320c":["31e8d007ac801c41317768454fc5a2cef7f18583","5f4e87790277826a2aea119328600dfb07761f32"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f900d5ce814fc22ea498d3303d1f833f5bf320c","5f4e87790277826a2aea119328600dfb07761f32"],"31e8d007ac801c41317768454fc5a2cef7f18583":["b785b1f61f30f94f0708b16d7f2eee3ee23194ef"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"b785b1f61f30f94f0708b16d7f2eee3ee23194ef":["a88da65f7210ad629e64c0553232a63d5d1bdc7c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"a88da65f7210ad629e64c0553232a63d5d1bdc7c":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}