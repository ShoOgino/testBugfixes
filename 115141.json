{"path":"lucene/core/src/java/org/apache/lucene/index/TermContext#TermContext(IndexReaderContext).mjava","commits":[{"id":"bcce0e518c0546269a896ca6124ba4313059185f","date":1340381078,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermContext#TermContext(IndexReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/TermContext#TermContext(IndexReaderContext).mjava","sourceNew":"  /**\n   * Creates an empty {@link TermContext} from a {@link IndexReaderContext}\n   */\n  public TermContext(IndexReaderContext context) {\n    assert context != null && context.isTopLevel;\n    topReaderContext = context;\n    docFreq = 0;\n    final int len;\n    if (context.leaves() == null) {\n      len = 1;\n    } else {\n      len = context.leaves().size();\n    }\n    states = new TermState[len];\n  }\n\n","sourceOld":"  /**\n   * Creates an empty {@link TermContext} from a {@link IndexReaderContext}\n   */\n  public TermContext(IndexReaderContext context) {\n    assert context != null && context.isTopLevel;\n    topReaderContext = context;\n    docFreq = 0;\n    final int len;\n    if (context.leaves() == null) {\n      len = 1;\n    } else {\n      len = context.leaves().size();\n    }\n    states = new TermState[len];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermContext#TermContext(IndexReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/TermContext#TermContext(IndexReaderContext).mjava","sourceNew":"  /**\n   * Creates an empty {@link TermContext} from a {@link IndexReaderContext}\n   */\n  public TermContext(IndexReaderContext context) {\n    assert context != null && context.isTopLevel;\n    topReaderContext = context;\n    docFreq = 0;\n    final int len;\n    if (context.leaves() == null) {\n      len = 1;\n    } else {\n      len = context.leaves().size();\n    }\n    states = new TermState[len];\n  }\n\n","sourceOld":"  /**\n   * Creates an empty {@link TermContext} from a {@link IndexReaderContext}\n   */\n  public TermContext(IndexReaderContext context) {\n    assert context != null && context.isTopLevel;\n    topReaderContext = context;\n    docFreq = 0;\n    final int len;\n    if (context.leaves() == null) {\n      len = 1;\n    } else {\n      len = context.leaves().size();\n    }\n    states = new TermState[len];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"365f98746545c0785c9778597f8558f5f91db4ad","date":1429195989,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermContext#TermContext(IndexReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermContext#TermContext(IndexReaderContext).mjava","sourceNew":"  /**\n   * Creates an empty {@link TermContext} from a {@link IndexReaderContext}\n   */\n  public TermContext(IndexReaderContext context) {\n    assert context != null && context.isTopLevel;\n    topReaderContext = context;\n    docFreq = 0;\n    totalTermFreq = 0;\n    final int len;\n    if (context.leaves() == null) {\n      len = 1;\n    } else {\n      len = context.leaves().size();\n    }\n    states = new TermState[len];\n  }\n\n","sourceOld":"  /**\n   * Creates an empty {@link TermContext} from a {@link IndexReaderContext}\n   */\n  public TermContext(IndexReaderContext context) {\n    assert context != null && context.isTopLevel;\n    topReaderContext = context;\n    docFreq = 0;\n    final int len;\n    if (context.leaves() == null) {\n      len = 1;\n    } else {\n      len = context.leaves().size();\n    }\n    states = new TermState[len];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bd3db3e8f35bef1d4d3f0411933b3190297302a","date":1485357107,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermContext#TermContext(IndexReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermContext#TermContext(IndexReaderContext).mjava","sourceNew":"  /**\n   * Creates an empty {@link TermContext} from a {@link IndexReaderContext}\n   */\n  public TermContext(IndexReaderContext context) {\n    assert context != null && context.isTopLevel;\n    topReaderContextIdentity = context.identity;\n    docFreq = 0;\n    totalTermFreq = 0;\n    final int len;\n    if (context.leaves() == null) {\n      len = 1;\n    } else {\n      len = context.leaves().size();\n    }\n    states = new TermState[len];\n  }\n\n","sourceOld":"  /**\n   * Creates an empty {@link TermContext} from a {@link IndexReaderContext}\n   */\n  public TermContext(IndexReaderContext context) {\n    assert context != null && context.isTopLevel;\n    topReaderContext = context;\n    docFreq = 0;\n    totalTermFreq = 0;\n    final int len;\n    if (context.leaves() == null) {\n      len = 1;\n    } else {\n      len = context.leaves().size();\n    }\n    states = new TermState[len];\n  }\n\n","bugFix":["fa1a999d6674423e5c4ac858b410283f6fe03f20"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermContext#TermContext(IndexReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermContext#TermContext(IndexReaderContext).mjava","sourceNew":"  /**\n   * Creates an empty {@link TermContext} from a {@link IndexReaderContext}\n   */\n  public TermContext(IndexReaderContext context) {\n    assert context != null && context.isTopLevel;\n    topReaderContextIdentity = context.identity;\n    docFreq = 0;\n    totalTermFreq = 0;\n    final int len;\n    if (context.leaves() == null) {\n      len = 1;\n    } else {\n      len = context.leaves().size();\n    }\n    states = new TermState[len];\n  }\n\n","sourceOld":"  /**\n   * Creates an empty {@link TermContext} from a {@link IndexReaderContext}\n   */\n  public TermContext(IndexReaderContext context) {\n    assert context != null && context.isTopLevel;\n    topReaderContext = context;\n    docFreq = 0;\n    totalTermFreq = 0;\n    final int len;\n    if (context.leaves() == null) {\n      len = 1;\n    } else {\n      len = context.leaves().size();\n    }\n    states = new TermState[len];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6e9f769521480a623f897c0d59089b919fa4239","date":1515161835,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermStates#TermStates(Term,IndexReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermContext#TermContext(IndexReaderContext).mjava","sourceNew":"  private TermStates(Term term, IndexReaderContext context) {\n    assert context != null && context.isTopLevel;\n    topReaderContextIdentity = context.identity;\n    docFreq = 0;\n    totalTermFreq = 0;\n    final int len;\n    if (context.leaves() == null) {\n      len = 1;\n    } else {\n      len = context.leaves().size();\n    }\n    states = new TermState[len];\n    this.term = term;\n  }\n\n","sourceOld":"  /**\n   * Creates an empty {@link TermContext} from a {@link IndexReaderContext}\n   */\n  public TermContext(IndexReaderContext context) {\n    assert context != null && context.isTopLevel;\n    topReaderContextIdentity = context.identity;\n    docFreq = 0;\n    totalTermFreq = 0;\n    final int len;\n    if (context.leaves() == null) {\n      len = 1;\n    } else {\n      len = context.leaves().size();\n    }\n    states = new TermState[len];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermContext#TermContext(IndexReaderContext).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates an empty {@link TermContext} from a {@link IndexReaderContext}\n   */\n  public TermContext(IndexReaderContext context) {\n    assert context != null && context.isTopLevel;\n    topReaderContextIdentity = context.identity;\n    docFreq = 0;\n    totalTermFreq = 0;\n    final int len;\n    if (context.leaves() == null) {\n      len = 1;\n    } else {\n      len = context.leaves().size();\n    }\n    states = new TermState[len];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["3bd3db3e8f35bef1d4d3f0411933b3190297302a","a6e9f769521480a623f897c0d59089b919fa4239"],"a6e9f769521480a623f897c0d59089b919fa4239":["3bd3db3e8f35bef1d4d3f0411933b3190297302a"],"598b5d23aa7c9732bf473c21a9cd309c44599394":["365f98746545c0785c9778597f8558f5f91db4ad","3bd3db3e8f35bef1d4d3f0411933b3190297302a"],"bcce0e518c0546269a896ca6124ba4313059185f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"365f98746545c0785c9778597f8558f5f91db4ad":["bcce0e518c0546269a896ca6124ba4313059185f"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bcce0e518c0546269a896ca6124ba4313059185f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3bd3db3e8f35bef1d4d3f0411933b3190297302a":["365f98746545c0785c9778597f8558f5f91db4ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a6e9f769521480a623f897c0d59089b919fa4239":["b94236357aaa22b76c10629851fe4e376e0cea82"],"598b5d23aa7c9732bf473c21a9cd309c44599394":[],"bcce0e518c0546269a896ca6124ba4313059185f":["365f98746545c0785c9778597f8558f5f91db4ad","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"365f98746545c0785c9778597f8558f5f91db4ad":["598b5d23aa7c9732bf473c21a9cd309c44599394","3bd3db3e8f35bef1d4d3f0411933b3190297302a"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bcce0e518c0546269a896ca6124ba4313059185f","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"3bd3db3e8f35bef1d4d3f0411933b3190297302a":["b94236357aaa22b76c10629851fe4e376e0cea82","a6e9f769521480a623f897c0d59089b919fa4239","598b5d23aa7c9732bf473c21a9cd309c44599394"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["598b5d23aa7c9732bf473c21a9cd309c44599394","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}