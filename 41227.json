{"path":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/JavaCharStream#ExpandBuff(boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/JavaCharStream#ExpandBuff(boolean).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/JavaCharStream#ExpandBuff(boolean).mjava","sourceNew":"  protected void ExpandBuff(boolean wrapAround)\n  {\n    char[] newbuffer = new char[bufsize + 2048];\n    int newbufline[] = new int[bufsize + 2048];\n    int newbufcolumn[] = new int[bufsize + 2048];\n\n    try\n    {\n      if (wrapAround)\n      {\n        System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);\n        System.arraycopy(buffer, 0, newbuffer, bufsize - tokenBegin, bufpos);\n        buffer = newbuffer;\n\n        System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);\n        System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);\n        bufline = newbufline;\n\n        System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);\n        System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);\n        bufcolumn = newbufcolumn;\n\n        bufpos += (bufsize - tokenBegin);\n    }\n    else\n    {\n        System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);\n        buffer = newbuffer;\n\n        System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);\n        bufline = newbufline;\n\n        System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);\n        bufcolumn = newbufcolumn;\n\n        bufpos -= tokenBegin;\n      }\n    }\n    catch (Throwable t)\n    {\n      throw new Error(t.getMessage());\n    }\n\n    available = (bufsize += 2048);\n    tokenBegin = 0;\n  }\n\n","sourceOld":"  protected void ExpandBuff(boolean wrapAround)\n  {\n    char[] newbuffer = new char[bufsize + 2048];\n    int newbufline[] = new int[bufsize + 2048];\n    int newbufcolumn[] = new int[bufsize + 2048];\n\n    try\n    {\n      if (wrapAround)\n      {\n        System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);\n        System.arraycopy(buffer, 0, newbuffer, bufsize - tokenBegin, bufpos);\n        buffer = newbuffer;\n\n        System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);\n        System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);\n        bufline = newbufline;\n\n        System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);\n        System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);\n        bufcolumn = newbufcolumn;\n\n        bufpos += (bufsize - tokenBegin);\n    }\n    else\n    {\n        System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);\n        buffer = newbuffer;\n\n        System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);\n        bufline = newbufline;\n\n        System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);\n        bufcolumn = newbufcolumn;\n\n        bufpos -= tokenBegin;\n      }\n    }\n    catch (Throwable t)\n    {\n      throw new Error(t.getMessage());\n    }\n\n    available = (bufsize += 2048);\n    tokenBegin = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f03d60547476e008d3d993cd26872c1157f19cf","date":1270899773,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/JavaCharStream#ExpandBuff(boolean).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/JavaCharStream#ExpandBuff(boolean).mjava","sourceNew":"  protected void ExpandBuff(boolean wrapAround)\r\n  {\r\n     char[] newbuffer = new char[bufsize + 2048];\r\n     int newbufline[] = new int[bufsize + 2048];\r\n     int newbufcolumn[] = new int[bufsize + 2048];\r\n\r\n     try\r\n     {\r\n        if (wrapAround)\r\n        {\r\n           System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);\r\n           System.arraycopy(buffer, 0, newbuffer,\r\n                                             bufsize - tokenBegin, bufpos);\r\n           buffer = newbuffer;\r\n\r\n           System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);\r\n           System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);\r\n           bufline = newbufline;\r\n\r\n           System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);\r\n           System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);\r\n           bufcolumn = newbufcolumn;\r\n\r\n           bufpos += (bufsize - tokenBegin);\r\n        }\r\n        else\r\n        {\r\n           System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);\r\n           buffer = newbuffer;\r\n\r\n           System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);\r\n           bufline = newbufline;\r\n\r\n           System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);\r\n           bufcolumn = newbufcolumn;\r\n\r\n           bufpos -= tokenBegin;\r\n        }\r\n     }\r\n     catch (Throwable t)\r\n     {\r\n        throw new Error(t.getMessage());\r\n     }\r\n\r\n     available = (bufsize += 2048);\r\n     tokenBegin = 0;\r\n  }\r\n\n","sourceOld":"  protected void ExpandBuff(boolean wrapAround)\n  {\n    char[] newbuffer = new char[bufsize + 2048];\n    int newbufline[] = new int[bufsize + 2048];\n    int newbufcolumn[] = new int[bufsize + 2048];\n\n    try\n    {\n      if (wrapAround)\n      {\n        System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);\n        System.arraycopy(buffer, 0, newbuffer, bufsize - tokenBegin, bufpos);\n        buffer = newbuffer;\n\n        System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);\n        System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);\n        bufline = newbufline;\n\n        System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);\n        System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);\n        bufcolumn = newbufcolumn;\n\n        bufpos += (bufsize - tokenBegin);\n    }\n    else\n    {\n        System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);\n        buffer = newbuffer;\n\n        System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);\n        bufline = newbufline;\n\n        System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);\n        bufcolumn = newbufcolumn;\n\n        bufpos -= tokenBegin;\n      }\n    }\n    catch (Throwable t)\n    {\n      throw new Error(t.getMessage());\n    }\n\n    available = (bufsize += 2048);\n    tokenBegin = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b","date":1270900166,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/JavaCharStream#ExpandBuff(boolean).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/JavaCharStream#ExpandBuff(boolean).mjava","sourceNew":"  protected void ExpandBuff(boolean wrapAround)\n  {\n     char[] newbuffer = new char[bufsize + 2048];\n     int newbufline[] = new int[bufsize + 2048];\n     int newbufcolumn[] = new int[bufsize + 2048];\n\n     try\n     {\n        if (wrapAround)\n        {\n           System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);\n           System.arraycopy(buffer, 0, newbuffer,\n                                             bufsize - tokenBegin, bufpos);\n           buffer = newbuffer;\n\n           System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);\n           System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);\n           bufline = newbufline;\n\n           System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);\n           System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);\n           bufcolumn = newbufcolumn;\n\n           bufpos += (bufsize - tokenBegin);\n        }\n        else\n        {\n           System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);\n           buffer = newbuffer;\n\n           System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);\n           bufline = newbufline;\n\n           System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);\n           bufcolumn = newbufcolumn;\n\n           bufpos -= tokenBegin;\n        }\n     }\n     catch (Throwable t)\n     {\n        throw new Error(t.getMessage());\n     }\n\n     available = (bufsize += 2048);\n     tokenBegin = 0;\n  }\n\n","sourceOld":"  protected void ExpandBuff(boolean wrapAround)\r\n  {\r\n     char[] newbuffer = new char[bufsize + 2048];\r\n     int newbufline[] = new int[bufsize + 2048];\r\n     int newbufcolumn[] = new int[bufsize + 2048];\r\n\r\n     try\r\n     {\r\n        if (wrapAround)\r\n        {\r\n           System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);\r\n           System.arraycopy(buffer, 0, newbuffer,\r\n                                             bufsize - tokenBegin, bufpos);\r\n           buffer = newbuffer;\r\n\r\n           System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);\r\n           System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);\r\n           bufline = newbufline;\r\n\r\n           System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);\r\n           System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);\r\n           bufcolumn = newbufcolumn;\r\n\r\n           bufpos += (bufsize - tokenBegin);\r\n        }\r\n        else\r\n        {\r\n           System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);\r\n           buffer = newbuffer;\r\n\r\n           System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);\r\n           bufline = newbufline;\r\n\r\n           System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);\r\n           bufcolumn = newbufcolumn;\r\n\r\n           bufpos -= tokenBegin;\r\n        }\r\n     }\r\n     catch (Throwable t)\r\n     {\r\n        throw new Error(t.getMessage());\r\n     }\r\n\r\n     available = (bufsize += 2048);\r\n     tokenBegin = 0;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/JavaCharStream#ExpandBuff(boolean).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/JavaCharStream#ExpandBuff(boolean).mjava","sourceNew":"  protected void ExpandBuff(boolean wrapAround)\n  {\n     char[] newbuffer = new char[bufsize + 2048];\n     int newbufline[] = new int[bufsize + 2048];\n     int newbufcolumn[] = new int[bufsize + 2048];\n\n     try\n     {\n        if (wrapAround)\n        {\n           System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);\n           System.arraycopy(buffer, 0, newbuffer,\n                                             bufsize - tokenBegin, bufpos);\n           buffer = newbuffer;\n\n           System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);\n           System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);\n           bufline = newbufline;\n\n           System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);\n           System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);\n           bufcolumn = newbufcolumn;\n\n           bufpos += (bufsize - tokenBegin);\n        }\n        else\n        {\n           System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);\n           buffer = newbuffer;\n\n           System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);\n           bufline = newbufline;\n\n           System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);\n           bufcolumn = newbufcolumn;\n\n           bufpos -= tokenBegin;\n        }\n     }\n     catch (Throwable t)\n     {\n        throw new Error(t.getMessage());\n     }\n\n     available = (bufsize += 2048);\n     tokenBegin = 0;\n  }\n\n","sourceOld":"  protected void ExpandBuff(boolean wrapAround)\n  {\n     char[] newbuffer = new char[bufsize + 2048];\n     int newbufline[] = new int[bufsize + 2048];\n     int newbufcolumn[] = new int[bufsize + 2048];\n\n     try\n     {\n        if (wrapAround)\n        {\n           System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);\n           System.arraycopy(buffer, 0, newbuffer,\n                                             bufsize - tokenBegin, bufpos);\n           buffer = newbuffer;\n\n           System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);\n           System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);\n           bufline = newbufline;\n\n           System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);\n           System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);\n           bufcolumn = newbufcolumn;\n\n           bufpos += (bufsize - tokenBegin);\n        }\n        else\n        {\n           System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);\n           buffer = newbuffer;\n\n           System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);\n           bufline = newbufline;\n\n           System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);\n           bufcolumn = newbufcolumn;\n\n           bufpos -= tokenBegin;\n        }\n     }\n     catch (Throwable t)\n     {\n        throw new Error(t.getMessage());\n     }\n\n     available = (bufsize += 2048);\n     tokenBegin = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b":["1f03d60547476e008d3d993cd26872c1157f19cf"],"1f03d60547476e008d3d993cd26872c1157f19cf":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"1f03d60547476e008d3d993cd26872c1157f19cf":["f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1f03d60547476e008d3d993cd26872c1157f19cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}