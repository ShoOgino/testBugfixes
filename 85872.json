{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader#init(IndexInput,SegmentReadState).mjava","commits":[{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":2,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader#init(IndexInput,SegmentReadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#init(IndexInput).mjava","sourceNew":"  @Override\n  public void init(IndexInput termsIn, SegmentReadState state) throws IOException {\n    // Make sure we are talking to the matching postings writer\n    CodecUtil.checkSegmentHeader(termsIn,\n                                 Lucene50PostingsWriter.TERMS_CODEC,\n                                 Lucene50PostingsWriter.VERSION_START,\n                                 Lucene50PostingsWriter.VERSION_CURRENT,\n                                 state.segmentInfo.getId(),\n                                 state.segmentSuffix);\n    final int indexBlockSize = termsIn.readVInt();\n    if (indexBlockSize != BLOCK_SIZE) {\n      throw new IllegalStateException(\"index-time BLOCK_SIZE (\" + indexBlockSize + \") != read-time BLOCK_SIZE (\" + BLOCK_SIZE + \")\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(IndexInput termsIn) throws IOException {\n    // Make sure we are talking to the matching postings writer\n    CodecUtil.checkHeader(termsIn,\n                          Lucene41PostingsWriter.TERMS_CODEC,\n                          Lucene41PostingsWriter.VERSION_START,\n                          Lucene41PostingsWriter.VERSION_CURRENT);\n    final int indexBlockSize = termsIn.readVInt();\n    if (indexBlockSize != BLOCK_SIZE) {\n      throw new IllegalStateException(\"index-time BLOCK_SIZE (\" + indexBlockSize + \") != read-time BLOCK_SIZE (\" + BLOCK_SIZE + \")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41474419488c9bf7affce00196d7010a7c3dcfdf","date":1413900484,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader#init(IndexInput,SegmentReadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader#init(IndexInput,SegmentReadState).mjava","sourceNew":"  @Override\n  public void init(IndexInput termsIn, SegmentReadState state) throws IOException {\n    // Make sure we are talking to the matching postings writer\n    CodecUtil.checkSegmentHeader(termsIn, TERMS_CODEC, VERSION_START, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n    final int indexBlockSize = termsIn.readVInt();\n    if (indexBlockSize != BLOCK_SIZE) {\n      throw new IllegalStateException(\"index-time BLOCK_SIZE (\" + indexBlockSize + \") != read-time BLOCK_SIZE (\" + BLOCK_SIZE + \")\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(IndexInput termsIn, SegmentReadState state) throws IOException {\n    // Make sure we are talking to the matching postings writer\n    CodecUtil.checkSegmentHeader(termsIn,\n                                 Lucene50PostingsWriter.TERMS_CODEC,\n                                 Lucene50PostingsWriter.VERSION_START,\n                                 Lucene50PostingsWriter.VERSION_CURRENT,\n                                 state.segmentInfo.getId(),\n                                 state.segmentSuffix);\n    final int indexBlockSize = termsIn.readVInt();\n    if (indexBlockSize != BLOCK_SIZE) {\n      throw new IllegalStateException(\"index-time BLOCK_SIZE (\" + indexBlockSize + \") != read-time BLOCK_SIZE (\" + BLOCK_SIZE + \")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3384e6013a93e4d11b7d75388693f8d0388602bf","date":1413951663,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader#init(IndexInput,SegmentReadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader#init(IndexInput,SegmentReadState).mjava","sourceNew":"  @Override\n  public void init(IndexInput termsIn, SegmentReadState state) throws IOException {\n    // Make sure we are talking to the matching postings writer\n    CodecUtil.checkIndexHeader(termsIn, TERMS_CODEC, VERSION_START, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n    final int indexBlockSize = termsIn.readVInt();\n    if (indexBlockSize != BLOCK_SIZE) {\n      throw new IllegalStateException(\"index-time BLOCK_SIZE (\" + indexBlockSize + \") != read-time BLOCK_SIZE (\" + BLOCK_SIZE + \")\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(IndexInput termsIn, SegmentReadState state) throws IOException {\n    // Make sure we are talking to the matching postings writer\n    CodecUtil.checkSegmentHeader(termsIn, TERMS_CODEC, VERSION_START, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n    final int indexBlockSize = termsIn.readVInt();\n    if (indexBlockSize != BLOCK_SIZE) {\n      throw new IllegalStateException(\"index-time BLOCK_SIZE (\" + indexBlockSize + \") != read-time BLOCK_SIZE (\" + BLOCK_SIZE + \")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":2,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader#init(IndexInput,SegmentReadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#init(IndexInput).mjava","sourceNew":"  @Override\n  public void init(IndexInput termsIn, SegmentReadState state) throws IOException {\n    // Make sure we are talking to the matching postings writer\n    CodecUtil.checkIndexHeader(termsIn, TERMS_CODEC, VERSION_START, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n    final int indexBlockSize = termsIn.readVInt();\n    if (indexBlockSize != BLOCK_SIZE) {\n      throw new IllegalStateException(\"index-time BLOCK_SIZE (\" + indexBlockSize + \") != read-time BLOCK_SIZE (\" + BLOCK_SIZE + \")\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(IndexInput termsIn) throws IOException {\n    // Make sure we are talking to the matching postings writer\n    CodecUtil.checkHeader(termsIn,\n                          Lucene41PostingsWriter.TERMS_CODEC,\n                          Lucene41PostingsWriter.VERSION_START,\n                          Lucene41PostingsWriter.VERSION_CURRENT);\n    final int indexBlockSize = termsIn.readVInt();\n    if (indexBlockSize != BLOCK_SIZE) {\n      throw new IllegalStateException(\"index-time BLOCK_SIZE (\" + indexBlockSize + \") != read-time BLOCK_SIZE (\" + BLOCK_SIZE + \")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader#init(IndexInput,SegmentReadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader#init(IndexInput,SegmentReadState).mjava","sourceNew":"  @Override\n  public void init(IndexInput termsIn, SegmentReadState state) throws IOException {\n    // Make sure we are talking to the matching postings writer\n    CodecUtil.checkIndexHeader(termsIn, TERMS_CODEC, VERSION_START, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n    final int indexBlockSize = termsIn.readVInt();\n    if (indexBlockSize != BLOCK_SIZE) {\n      throw new IllegalStateException(\"index-time BLOCK_SIZE (\" + indexBlockSize + \") != read-time BLOCK_SIZE (\" + BLOCK_SIZE + \")\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(IndexInput termsIn, SegmentReadState state) throws IOException {\n    // Make sure we are talking to the matching postings writer\n    CodecUtil.checkIndexHeader(termsIn, TERMS_CODEC, VERSION_START, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n    final int indexBlockSize = termsIn.readVInt();\n    if (indexBlockSize != BLOCK_SIZE) {\n      throw new IllegalStateException(\"index-time BLOCK_SIZE (\" + indexBlockSize + \") != read-time BLOCK_SIZE (\" + BLOCK_SIZE + \")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":6,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene84/Lucene84PostingsReader#init(IndexInput,SegmentReadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader#init(IndexInput,SegmentReadState).mjava","sourceNew":"  @Override\n  public void init(IndexInput termsIn, SegmentReadState state) throws IOException {\n    // Make sure we are talking to the matching postings writer\n    CodecUtil.checkIndexHeader(termsIn, TERMS_CODEC, VERSION_START, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n    final int indexBlockSize = termsIn.readVInt();\n    if (indexBlockSize != BLOCK_SIZE) {\n      throw new IllegalStateException(\"index-time BLOCK_SIZE (\" + indexBlockSize + \") != read-time BLOCK_SIZE (\" + BLOCK_SIZE + \")\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(IndexInput termsIn, SegmentReadState state) throws IOException {\n    // Make sure we are talking to the matching postings writer\n    CodecUtil.checkIndexHeader(termsIn, TERMS_CODEC, VERSION_START, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n    final int indexBlockSize = termsIn.readVInt();\n    if (indexBlockSize != BLOCK_SIZE) {\n      throw new IllegalStateException(\"index-time BLOCK_SIZE (\" + indexBlockSize + \") != read-time BLOCK_SIZE (\" + BLOCK_SIZE + \")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99eb4a732d1a908f4636ace52928876136bf1896":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3384e6013a93e4d11b7d75388693f8d0388602bf":["41474419488c9bf7affce00196d7010a7c3dcfdf"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3384e6013a93e4d11b7d75388693f8d0388602bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"41474419488c9bf7affce00196d7010a7c3dcfdf":["99eb4a732d1a908f4636ace52928876136bf1896"]},"commit2Childs":{"99eb4a732d1a908f4636ace52928876136bf1896":["41474419488c9bf7affce00196d7010a7c3dcfdf"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"41474419488c9bf7affce00196d7010a7c3dcfdf":["3384e6013a93e4d11b7d75388693f8d0388602bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}