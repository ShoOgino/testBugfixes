{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#getCollectionList(ClusterState,String).mjava","commits":[{"id":"1cfa38e36fa296bb93d77df7d5556257dffa4535","date":1362635543,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#getCollectionList(ClusterState,String).mjava","pathOld":"/dev/null","sourceNew":"  private Set<String> getCollectionList(ClusterState clusterState,\n      String collection) {\n    // Extract each comma separated collection name and store in a List.\n    List<String> rawCollectionsList = StrUtils.splitSmart(collection, \",\", true);\n    Set<String> collectionsList = new HashSet<String>();\n    // validate collections\n    for (String collectionName : rawCollectionsList) {\n      if (!clusterState.getCollections().contains(collectionName)) {\n        Aliases aliases = zkStateReader.getAliases();\n        String alias = aliases.getCollectionAlias(collectionName);\n        if (alias != null) {\n          List<String> aliasList = StrUtils.splitSmart(alias, \",\", true); \n          collectionsList.addAll(aliasList);\n          continue;\n        }\n        \n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + collectionName);\n      }\n      \n      collectionsList.add(collectionName);\n    }\n    return collectionsList;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["403b6d8b3e6cec80048e9cfc481bbffdd57517bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#getCollectionList(ClusterState,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#getCollectionList(ClusterState,String).mjava","sourceNew":"  private Set<String> getCollectionList(ClusterState clusterState,\n      String collection) {\n    // Extract each comma separated collection name and store in a List.\n    List<String> rawCollectionsList = StrUtils.splitSmart(collection, \",\", true);\n    Set<String> collectionsList = new HashSet<>();\n    // validate collections\n    for (String collectionName : rawCollectionsList) {\n      if (!clusterState.getCollections().contains(collectionName)) {\n        Aliases aliases = zkStateReader.getAliases();\n        String alias = aliases.getCollectionAlias(collectionName);\n        if (alias != null) {\n          List<String> aliasList = StrUtils.splitSmart(alias, \",\", true); \n          collectionsList.addAll(aliasList);\n          continue;\n        }\n        \n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + collectionName);\n      }\n      \n      collectionsList.add(collectionName);\n    }\n    return collectionsList;\n  }\n\n","sourceOld":"  private Set<String> getCollectionList(ClusterState clusterState,\n      String collection) {\n    // Extract each comma separated collection name and store in a List.\n    List<String> rawCollectionsList = StrUtils.splitSmart(collection, \",\", true);\n    Set<String> collectionsList = new HashSet<String>();\n    // validate collections\n    for (String collectionName : rawCollectionsList) {\n      if (!clusterState.getCollections().contains(collectionName)) {\n        Aliases aliases = zkStateReader.getAliases();\n        String alias = aliases.getCollectionAlias(collectionName);\n        if (alias != null) {\n          List<String> aliasList = StrUtils.splitSmart(alias, \",\", true); \n          collectionsList.addAll(aliasList);\n          continue;\n        }\n        \n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + collectionName);\n      }\n      \n      collectionsList.add(collectionName);\n    }\n    return collectionsList;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0622fbd990643ae4cacb693db6a0c82cf8916ae2","date":1397637446,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#getCollectionList(ClusterState,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#getCollectionList(ClusterState,String).mjava","sourceNew":"  protected Set<String> getCollectionList(ClusterState clusterState,\n                                          String collection) {\n    // Extract each comma separated collection name and store in a List.\n    Set<String> collectionsList = new HashSet<String>();\n    // validate collections\n    List<String> rawCollectionsList = (collection != null) ? StrUtils.splitSmart(collection, \",\", true) : null;\n    if (rawCollectionsList != null) {\n      for (String collectionName : rawCollectionsList) {\n        if (!clusterState.hasCollection(collectionName)) {\n          Aliases aliases = zkStateReader.getAliases();\n          String alias = aliases.getCollectionAlias(collectionName);\n          if (alias != null) {\n            List<String> aliasList = StrUtils.splitSmart(alias, \",\", true);\n            collectionsList.addAll(aliasList);\n            continue;\n          }\n\n          DocCollection docCollection = getDocCollection(clusterState, collection);\n          if (docCollection == null) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + collectionName);\n          }\n        }\n\n        collectionsList.add(collectionName);\n      }\n    }\n    return collectionsList;\n  }\n\n","sourceOld":"  private Set<String> getCollectionList(ClusterState clusterState,\n      String collection) {\n    // Extract each comma separated collection name and store in a List.\n    List<String> rawCollectionsList = StrUtils.splitSmart(collection, \",\", true);\n    Set<String> collectionsList = new HashSet<>();\n    // validate collections\n    for (String collectionName : rawCollectionsList) {\n      if (!clusterState.getCollections().contains(collectionName)) {\n        Aliases aliases = zkStateReader.getAliases();\n        String alias = aliases.getCollectionAlias(collectionName);\n        if (alias != null) {\n          List<String> aliasList = StrUtils.splitSmart(alias, \",\", true); \n          collectionsList.addAll(aliasList);\n          continue;\n        }\n        \n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + collectionName);\n      }\n      \n      collectionsList.add(collectionName);\n    }\n    return collectionsList;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a5a233896b7f16ac9b4ed601ef8207d98f1f0500","date":1398857046,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#getCollectionList(ClusterState,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#getCollectionList(ClusterState,String).mjava","sourceNew":"  private Set<String> getCollectionList(ClusterState clusterState,\n      String collection) {\n    // Extract each comma separated collection name and store in a List.\n    List<String> rawCollectionsList = StrUtils.splitSmart(collection, \",\", true);\n    Set<String> collectionsList = new HashSet<>();\n    // validate collections\n    for (String collectionName : rawCollectionsList) {\n      if (!clusterState.getCollections().contains(collectionName)) {\n        Aliases aliases = zkStateReader.getAliases();\n        String alias = aliases.getCollectionAlias(collectionName);\n        if (alias != null) {\n          List<String> aliasList = StrUtils.splitSmart(alias, \",\", true); \n          collectionsList.addAll(aliasList);\n          continue;\n        }\n        \n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + collectionName);\n      }\n      \n      collectionsList.add(collectionName);\n    }\n    return collectionsList;\n  }\n\n","sourceOld":"  protected Set<String> getCollectionList(ClusterState clusterState,\n                                          String collection) {\n    // Extract each comma separated collection name and store in a List.\n    Set<String> collectionsList = new HashSet<String>();\n    // validate collections\n    List<String> rawCollectionsList = (collection != null) ? StrUtils.splitSmart(collection, \",\", true) : null;\n    if (rawCollectionsList != null) {\n      for (String collectionName : rawCollectionsList) {\n        if (!clusterState.hasCollection(collectionName)) {\n          Aliases aliases = zkStateReader.getAliases();\n          String alias = aliases.getCollectionAlias(collectionName);\n          if (alias != null) {\n            List<String> aliasList = StrUtils.splitSmart(alias, \",\", true);\n            collectionsList.addAll(aliasList);\n            continue;\n          }\n\n          DocCollection docCollection = getDocCollection(clusterState, collection);\n          if (docCollection == null) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + collectionName);\n          }\n        }\n\n        collectionsList.add(collectionName);\n      }\n    }\n    return collectionsList;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6f693ed86f289b2e42b46684409b3997f2c264a","date":1404319832,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#getCollectionList(ClusterState,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#getCollectionList(ClusterState,String).mjava","sourceNew":"  private Set<String> getCollectionList(ClusterState clusterState,\n      String collection) {\n    // Extract each comma separated collection name and store in a List.\n    List<String> rawCollectionsList = StrUtils.splitSmart(collection, \",\", true);\n    Set<String> collectionsList = new HashSet<>();\n    // validate collections\n    for (String collectionName : rawCollectionsList) {\n      if (!clusterState.getCollections().contains(collectionName)) {\n        Aliases aliases = zkStateReader.getAliases();\n        String alias = aliases.getCollectionAlias(collectionName);\n        if (alias != null) {\n          List<String> aliasList = StrUtils.splitSmart(alias, \",\", true);\n          collectionsList.addAll(aliasList);\n          continue;\n        }\n\n        DocCollection docCollection = getDocCollection(clusterState, collection);\n        if (docCollection == null) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + collectionName);\n        }\n      }\n\n      collectionsList.add(collectionName);\n    }\n    return collectionsList;\n  }\n\n","sourceOld":"  private Set<String> getCollectionList(ClusterState clusterState,\n      String collection) {\n    // Extract each comma separated collection name and store in a List.\n    List<String> rawCollectionsList = StrUtils.splitSmart(collection, \",\", true);\n    Set<String> collectionsList = new HashSet<>();\n    // validate collections\n    for (String collectionName : rawCollectionsList) {\n      if (!clusterState.getCollections().contains(collectionName)) {\n        Aliases aliases = zkStateReader.getAliases();\n        String alias = aliases.getCollectionAlias(collectionName);\n        if (alias != null) {\n          List<String> aliasList = StrUtils.splitSmart(alias, \",\", true); \n          collectionsList.addAll(aliasList);\n          continue;\n        }\n        \n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + collectionName);\n      }\n      \n      collectionsList.add(collectionName);\n    }\n    return collectionsList;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f4c07fa58a256dccf8b95364855fd5e9ad4d1401","date":1404386015,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#getCollectionList(ClusterState,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#getCollectionList(ClusterState,String).mjava","sourceNew":"  private Set<String> getCollectionList(ClusterState clusterState,\n      String collection) {\n    // Extract each comma separated collection name and store in a List.\n    List<String> rawCollectionsList = StrUtils.splitSmart(collection, \",\", true);\n    Set<String> collectionsList = new HashSet<>();\n    // validate collections\n    for (String collectionName : rawCollectionsList) {\n      if (!clusterState.getCollections().contains(collectionName)) {\n        Aliases aliases = zkStateReader.getAliases();\n        String alias = aliases.getCollectionAlias(collectionName);\n        if (alias != null) {\n          List<String> aliasList = StrUtils.splitSmart(alias, \",\", true); \n          collectionsList.addAll(aliasList);\n          continue;\n        }\n        \n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + collectionName);\n      }\n      \n      collectionsList.add(collectionName);\n    }\n    return collectionsList;\n  }\n\n","sourceOld":"  private Set<String> getCollectionList(ClusterState clusterState,\n      String collection) {\n    // Extract each comma separated collection name and store in a List.\n    List<String> rawCollectionsList = StrUtils.splitSmart(collection, \",\", true);\n    Set<String> collectionsList = new HashSet<>();\n    // validate collections\n    for (String collectionName : rawCollectionsList) {\n      if (!clusterState.getCollections().contains(collectionName)) {\n        Aliases aliases = zkStateReader.getAliases();\n        String alias = aliases.getCollectionAlias(collectionName);\n        if (alias != null) {\n          List<String> aliasList = StrUtils.splitSmart(alias, \",\", true);\n          collectionsList.addAll(aliasList);\n          continue;\n        }\n\n        DocCollection docCollection = getDocCollection(clusterState, collection);\n        if (docCollection == null) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + collectionName);\n        }\n      }\n\n      collectionsList.add(collectionName);\n    }\n    return collectionsList;\n  }\n\n","bugFix":null,"bugIntro":["403b6d8b3e6cec80048e9cfc481bbffdd57517bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9279b175e5e66258442d2123a50f052219a9cc1b","date":1410531077,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#getCollectionList(ClusterState,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#getCollectionList(ClusterState,String).mjava","sourceNew":"  private Set<String> getCollectionList(ClusterState clusterState,\n      String collection) {\n    // Extract each comma separated collection name and store in a List.\n    List<String> rawCollectionsList = StrUtils.splitSmart(collection, \",\", true);\n    Set<String> collectionsList = new HashSet<>();\n    // validate collections\n    for (String collectionName : rawCollectionsList) {\n      if (!clusterState.getCollections().contains(collectionName)) {\n        Aliases aliases = zkStateReader.getAliases();\n        String alias = aliases.getCollectionAlias(collectionName);\n        if (alias != null) {\n          List<String> aliasList = StrUtils.splitSmart(alias, \",\", true); \n          collectionsList.addAll(aliasList);\n          continue;\n        }\n\n        DocCollection docCollection = getDocCollection(clusterState, collection);\n        if (docCollection == null) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + collectionName);\n        }\n      }\n\n      collectionsList.add(collectionName);\n    }\n    return collectionsList;\n  }\n\n","sourceOld":"  private Set<String> getCollectionList(ClusterState clusterState,\n      String collection) {\n    // Extract each comma separated collection name and store in a List.\n    List<String> rawCollectionsList = StrUtils.splitSmart(collection, \",\", true);\n    Set<String> collectionsList = new HashSet<>();\n    // validate collections\n    for (String collectionName : rawCollectionsList) {\n      if (!clusterState.getCollections().contains(collectionName)) {\n        Aliases aliases = zkStateReader.getAliases();\n        String alias = aliases.getCollectionAlias(collectionName);\n        if (alias != null) {\n          List<String> aliasList = StrUtils.splitSmart(alias, \",\", true); \n          collectionsList.addAll(aliasList);\n          continue;\n        }\n        \n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + collectionName);\n      }\n      \n      collectionsList.add(collectionName);\n    }\n    return collectionsList;\n  }\n\n","bugFix":null,"bugIntro":["403b6d8b3e6cec80048e9cfc481bbffdd57517bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"403b6d8b3e6cec80048e9cfc481bbffdd57517bb","date":1410598299,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#getCollectionList(ClusterState,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#getCollectionList(ClusterState,String).mjava","sourceNew":"  private Set<String> getCollectionList(ClusterState clusterState,\n      String collection) {\n    // Extract each comma separated collection name and store in a List.\n    List<String> rawCollectionsList = StrUtils.splitSmart(collection, \",\", true);\n    Set<String> collectionsList = new HashSet<>();\n    // validate collections\n    for (String collectionName : rawCollectionsList) {\n      if (!clusterState.getCollections().contains(collectionName)) {\n        Aliases aliases = zkStateReader.getAliases();\n        String alias = aliases.getCollectionAlias(collectionName);\n        if (alias != null) {\n          List<String> aliasList = StrUtils.splitSmart(alias, \",\", true);\n          collectionsList.addAll(aliasList);\n          continue;\n        }\n\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + collectionName);\n        }\n\n      collectionsList.add(collectionName);\n    }\n    return collectionsList;\n  }\n\n","sourceOld":"  private Set<String> getCollectionList(ClusterState clusterState,\n      String collection) {\n    // Extract each comma separated collection name and store in a List.\n    List<String> rawCollectionsList = StrUtils.splitSmart(collection, \",\", true);\n    Set<String> collectionsList = new HashSet<>();\n    // validate collections\n    for (String collectionName : rawCollectionsList) {\n      if (!clusterState.getCollections().contains(collectionName)) {\n        Aliases aliases = zkStateReader.getAliases();\n        String alias = aliases.getCollectionAlias(collectionName);\n        if (alias != null) {\n          List<String> aliasList = StrUtils.splitSmart(alias, \",\", true); \n          collectionsList.addAll(aliasList);\n          continue;\n        }\n\n        DocCollection docCollection = getDocCollection(clusterState, collection);\n        if (docCollection == null) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + collectionName);\n        }\n      }\n\n      collectionsList.add(collectionName);\n    }\n    return collectionsList;\n  }\n\n","bugFix":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401","1cfa38e36fa296bb93d77df7d5556257dffa4535","9279b175e5e66258442d2123a50f052219a9cc1b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getCollectionList(ClusterState,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#getCollectionList(ClusterState,String).mjava","sourceNew":"  private Set<String> getCollectionList(ClusterState clusterState,\n      String collection) {\n    // Extract each comma separated collection name and store in a List.\n    List<String> rawCollectionsList = StrUtils.splitSmart(collection, \",\", true);\n    Set<String> collectionsList = new HashSet<>();\n    // validate collections\n    for (String collectionName : rawCollectionsList) {\n      if (!clusterState.getCollections().contains(collectionName)) {\n        Aliases aliases = zkStateReader.getAliases();\n        String alias = aliases.getCollectionAlias(collectionName);\n        if (alias != null) {\n          List<String> aliasList = StrUtils.splitSmart(alias, \",\", true);\n          collectionsList.addAll(aliasList);\n          continue;\n        }\n\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + collectionName);\n        }\n\n      collectionsList.add(collectionName);\n    }\n    return collectionsList;\n  }\n\n","sourceOld":"  private Set<String> getCollectionList(ClusterState clusterState,\n      String collection) {\n    // Extract each comma separated collection name and store in a List.\n    List<String> rawCollectionsList = StrUtils.splitSmart(collection, \",\", true);\n    Set<String> collectionsList = new HashSet<>();\n    // validate collections\n    for (String collectionName : rawCollectionsList) {\n      if (!clusterState.getCollections().contains(collectionName)) {\n        Aliases aliases = zkStateReader.getAliases();\n        String alias = aliases.getCollectionAlias(collectionName);\n        if (alias != null) {\n          List<String> aliasList = StrUtils.splitSmart(alias, \",\", true);\n          collectionsList.addAll(aliasList);\n          continue;\n        }\n\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + collectionName);\n        }\n\n      collectionsList.add(collectionName);\n    }\n    return collectionsList;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"403b6d8b3e6cec80048e9cfc481bbffdd57517bb":["9279b175e5e66258442d2123a50f052219a9cc1b"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1cfa38e36fa296bb93d77df7d5556257dffa4535"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"1cfa38e36fa296bb93d77df7d5556257dffa4535":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"bafca15d8e408346a67f4282ad1143b88023893b":["403b6d8b3e6cec80048e9cfc481bbffdd57517bb"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"],"9279b175e5e66258442d2123a50f052219a9cc1b":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"]},"commit2Childs":{"403b6d8b3e6cec80048e9cfc481bbffdd57517bb":["bafca15d8e408346a67f4282ad1143b88023893b"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"1cfa38e36fa296bb93d77df7d5556257dffa4535":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1cfa38e36fa296bb93d77df7d5556257dffa4535"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["9279b175e5e66258442d2123a50f052219a9cc1b"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"9279b175e5e66258442d2123a50f052219a9cc1b":["403b6d8b3e6cec80048e9cfc481bbffdd57517bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}