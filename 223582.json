{"path":"solr/core/src/test/org/apache/solr/search/TestPseudoReturnFields#testMultiValued().mjava","commits":[{"id":"fc86ee203e41326b19776b964d255b47ccf0d126","date":1352774468,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestPseudoReturnFields#testMultiValued().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMultiValued() throws Exception {\n    // the response writers used to consult isMultiValued on the field\n    // but this doesn't work when you alias a single valued field to\n    // a multi valued field (the field value is copied first, then\n    // if the type lookup is done again later, we get the wrong thing). SOLR-4036\n\n    assertJQ(req(\"q\",\"id:42\", \"fl\",\"val_ss:val_i, val2_ss:10\")\n        ,\"/response/docs==[{'val2_ss':10,'val_ss':1}]\"\n    );\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"42\", \"fl\",\"val_ss:val_i, val2_ss:10\")\n        ,\"/doc=={'val2_ss':10,'val_ss':1}\"\n    );\n\n    // also check real-time-get from transaction log\n    assertU(adoc(\"id\", \"42\", \"val_i\", \"1\", \"ssto\", \"X\", \"subject\", \"aaa\"));\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"42\", \"fl\",\"val_ss:val_i, val2_ss:10\")\n        ,\"/doc=={'val2_ss':10,'val_ss':1}\"\n    );\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["934e1c7ca2823f3ec2758cc0f0912eac404856f2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestPseudoReturnFields#testMultiValued().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMultiValued() throws Exception {\n    // the response writers used to consult isMultiValued on the field\n    // but this doesn't work when you alias a single valued field to\n    // a multi valued field (the field value is copied first, then\n    // if the type lookup is done again later, we get the wrong thing). SOLR-4036\n\n    assertJQ(req(\"q\",\"id:42\", \"fl\",\"val_ss:val_i, val2_ss:10\")\n        ,\"/response/docs==[{'val2_ss':10,'val_ss':1}]\"\n    );\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"42\", \"fl\",\"val_ss:val_i, val2_ss:10\")\n        ,\"/doc=={'val2_ss':10,'val_ss':1}\"\n    );\n\n    // also check real-time-get from transaction log\n    assertU(adoc(\"id\", \"42\", \"val_i\", \"1\", \"ssto\", \"X\", \"subject\", \"aaa\"));\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"42\", \"fl\",\"val_ss:val_i, val2_ss:10\")\n        ,\"/doc=={'val2_ss':10,'val_ss':1}\"\n    );\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f1e9141a6da84d05f8f4915094fe2a0943cb7b6","date":1365123334,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestPseudoReturnFields#testMultiValued().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestPseudoReturnFields#testMultiValued().mjava","sourceNew":"  @Test\n  public void testMultiValued() throws Exception {\n    // the response writers used to consult isMultiValued on the field\n    // but this doesn't work when you alias a single valued field to\n    // a multi valued field (the field value is copied first, then\n    // if the type lookup is done again later, we get the wrong thing). SOLR-4036\n\n    // score as psuedo field - precondition checks\n    for (String name : new String[] {\"score\", \"val_ss\"}) {\n      SchemaField sf = h.getCore().getSchema().getFieldOrNull(name);\n      assertNotNull(\"Test depends on a (dynamic) field mtching '\"+name+\n                    \"', schema was changed out from under us!\",sf);\n      assertTrue(\"Test depends on a multivalued dynamic field matching '\"+name+\n                 \"', schema was changed out from under us!\", sf.multiValued());\n    }\n\n    // score as psuedo field\n    assertJQ(req(\"q\",\"*:*\", \"fq\", \"id:42\", \"fl\",\"id,score\")\n             ,\"/response/docs==[{'id':'42','score':1.0}]\");\n    \n    // single value int using alias that matches multivalued dynamic field\n    assertJQ(req(\"q\",\"id:42\", \"fl\",\"val_ss:val_i, val2_ss:10\")\n        ,\"/response/docs==[{'val2_ss':10,'val_ss':1}]\"\n    );\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"42\", \"fl\",\"val_ss:val_i, val2_ss:10\")\n        ,\"/doc=={'val2_ss':10,'val_ss':1}\"\n    );\n\n    // also check real-time-get from transaction log\n    assertU(adoc(\"id\", \"42\", \"val_i\", \"1\", \"ssto\", \"X\", \"subject\", \"aaa\"));\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"42\", \"fl\",\"val_ss:val_i, val2_ss:10\")\n        ,\"/doc=={'val2_ss':10,'val_ss':1}\"\n    );\n\n  }\n\n","sourceOld":"  @Test\n  public void testMultiValued() throws Exception {\n    // the response writers used to consult isMultiValued on the field\n    // but this doesn't work when you alias a single valued field to\n    // a multi valued field (the field value is copied first, then\n    // if the type lookup is done again later, we get the wrong thing). SOLR-4036\n\n    assertJQ(req(\"q\",\"id:42\", \"fl\",\"val_ss:val_i, val2_ss:10\")\n        ,\"/response/docs==[{'val2_ss':10,'val_ss':1}]\"\n    );\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"42\", \"fl\",\"val_ss:val_i, val2_ss:10\")\n        ,\"/doc=={'val2_ss':10,'val_ss':1}\"\n    );\n\n    // also check real-time-get from transaction log\n    assertU(adoc(\"id\", \"42\", \"val_i\", \"1\", \"ssto\", \"X\", \"subject\", \"aaa\"));\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"42\", \"fl\",\"val_ss:val_i, val2_ss:10\")\n        ,\"/doc=={'val2_ss':10,'val_ss':1}\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestPseudoReturnFields#testMultiValued().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestPseudoReturnFields#testMultiValued().mjava","sourceNew":"  @Test\n  public void testMultiValued() throws Exception {\n    // the response writers used to consult isMultiValued on the field\n    // but this doesn't work when you alias a single valued field to\n    // a multi valued field (the field value is copied first, then\n    // if the type lookup is done again later, we get the wrong thing). SOLR-4036\n\n    // score as psuedo field - precondition checks\n    for (String name : new String[] {\"score\", \"val_ss\"}) {\n      SchemaField sf = h.getCore().getLatestSchema().getFieldOrNull(name);\n      assertNotNull(\"Test depends on a (dynamic) field mtching '\"+name+\n                    \"', schema was changed out from under us!\",sf);\n      assertTrue(\"Test depends on a multivalued dynamic field matching '\"+name+\n                 \"', schema was changed out from under us!\", sf.multiValued());\n    }\n\n    // score as psuedo field\n    assertJQ(req(\"q\",\"*:*\", \"fq\", \"id:42\", \"fl\",\"id,score\")\n             ,\"/response/docs==[{'id':'42','score':1.0}]\");\n    \n    // single value int using alias that matches multivalued dynamic field\n    assertJQ(req(\"q\",\"id:42\", \"fl\",\"val_ss:val_i, val2_ss:10\")\n        ,\"/response/docs==[{'val2_ss':10,'val_ss':1}]\"\n    );\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"42\", \"fl\",\"val_ss:val_i, val2_ss:10\")\n        ,\"/doc=={'val2_ss':10,'val_ss':1}\"\n    );\n\n    // also check real-time-get from transaction log\n    assertU(adoc(\"id\", \"42\", \"val_i\", \"1\", \"ssto\", \"X\", \"subject\", \"aaa\"));\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"42\", \"fl\",\"val_ss:val_i, val2_ss:10\")\n        ,\"/doc=={'val2_ss':10,'val_ss':1}\"\n    );\n\n  }\n\n","sourceOld":"  @Test\n  public void testMultiValued() throws Exception {\n    // the response writers used to consult isMultiValued on the field\n    // but this doesn't work when you alias a single valued field to\n    // a multi valued field (the field value is copied first, then\n    // if the type lookup is done again later, we get the wrong thing). SOLR-4036\n\n    // score as psuedo field - precondition checks\n    for (String name : new String[] {\"score\", \"val_ss\"}) {\n      SchemaField sf = h.getCore().getSchema().getFieldOrNull(name);\n      assertNotNull(\"Test depends on a (dynamic) field mtching '\"+name+\n                    \"', schema was changed out from under us!\",sf);\n      assertTrue(\"Test depends on a multivalued dynamic field matching '\"+name+\n                 \"', schema was changed out from under us!\", sf.multiValued());\n    }\n\n    // score as psuedo field\n    assertJQ(req(\"q\",\"*:*\", \"fq\", \"id:42\", \"fl\",\"id,score\")\n             ,\"/response/docs==[{'id':'42','score':1.0}]\");\n    \n    // single value int using alias that matches multivalued dynamic field\n    assertJQ(req(\"q\",\"id:42\", \"fl\",\"val_ss:val_i, val2_ss:10\")\n        ,\"/response/docs==[{'val2_ss':10,'val_ss':1}]\"\n    );\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"42\", \"fl\",\"val_ss:val_i, val2_ss:10\")\n        ,\"/doc=={'val2_ss':10,'val_ss':1}\"\n    );\n\n    // also check real-time-get from transaction log\n    assertU(adoc(\"id\", \"42\", \"val_i\", \"1\", \"ssto\", \"X\", \"subject\", \"aaa\"));\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"42\", \"fl\",\"val_ss:val_i, val2_ss:10\")\n        ,\"/doc=={'val2_ss':10,'val_ss':1}\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"934e1c7ca2823f3ec2758cc0f0912eac404856f2","date":1467837741,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestPseudoReturnFields#testMultiValued().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestPseudoReturnFields#testMultiValued().mjava","sourceNew":"  public void testMultiValued() throws Exception {\n    // the response writers used to consult isMultiValued on the field\n    // but this doesn't work when you alias a single valued field to\n    // a multi valued field (the field value is copied first, then\n    // if the type lookup is done again later, we get the wrong thing). SOLR-4036\n\n    // score as psuedo field - precondition checks\n    for (String name : new String[] {\"score\", \"val_ss\"}) {\n      SchemaField sf = h.getCore().getLatestSchema().getFieldOrNull(name);\n      assertNotNull(\"Test depends on a (dynamic) field mtching '\"+name+\n                    \"', schema was changed out from under us!\",sf);\n      assertTrue(\"Test depends on a multivalued dynamic field matching '\"+name+\n                 \"', schema was changed out from under us!\", sf.multiValued());\n    }\n\n    // score as psuedo field\n    assertJQ(req(\"q\",\"*:*\", \"fq\", \"id:42\", \"fl\",\"id,score\")\n             ,\"/response/docs==[{'id':'42','score':1.0}]\");\n    \n    // single value int using alias that matches multivalued dynamic field\n    assertJQ(req(\"q\",\"id:42\", \"fl\",\"val_ss:val_i, val2_ss:10\")\n        ,\"/response/docs==[{'val2_ss':10,'val_ss':1}]\"\n    );\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"42\", \"fl\",\"val_ss:val_i, val2_ss:10\")\n        ,\"/doc=={'val2_ss':10,'val_ss':1}\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testMultiValued() throws Exception {\n    // the response writers used to consult isMultiValued on the field\n    // but this doesn't work when you alias a single valued field to\n    // a multi valued field (the field value is copied first, then\n    // if the type lookup is done again later, we get the wrong thing). SOLR-4036\n\n    // score as psuedo field - precondition checks\n    for (String name : new String[] {\"score\", \"val_ss\"}) {\n      SchemaField sf = h.getCore().getLatestSchema().getFieldOrNull(name);\n      assertNotNull(\"Test depends on a (dynamic) field mtching '\"+name+\n                    \"', schema was changed out from under us!\",sf);\n      assertTrue(\"Test depends on a multivalued dynamic field matching '\"+name+\n                 \"', schema was changed out from under us!\", sf.multiValued());\n    }\n\n    // score as psuedo field\n    assertJQ(req(\"q\",\"*:*\", \"fq\", \"id:42\", \"fl\",\"id,score\")\n             ,\"/response/docs==[{'id':'42','score':1.0}]\");\n    \n    // single value int using alias that matches multivalued dynamic field\n    assertJQ(req(\"q\",\"id:42\", \"fl\",\"val_ss:val_i, val2_ss:10\")\n        ,\"/response/docs==[{'val2_ss':10,'val_ss':1}]\"\n    );\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"42\", \"fl\",\"val_ss:val_i, val2_ss:10\")\n        ,\"/doc=={'val2_ss':10,'val_ss':1}\"\n    );\n\n    // also check real-time-get from transaction log\n    assertU(adoc(\"id\", \"42\", \"val_i\", \"1\", \"ssto\", \"X\", \"subject\", \"aaa\"));\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"42\", \"fl\",\"val_ss:val_i, val2_ss:10\")\n        ,\"/doc=={'val2_ss':10,'val_ss':1}\"\n    );\n\n  }\n\n","bugFix":["fc86ee203e41326b19776b964d255b47ccf0d126"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestPseudoReturnFields#testMultiValued().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestPseudoReturnFields#testMultiValued().mjava","sourceNew":"  public void testMultiValued() throws Exception {\n    // the response writers used to consult isMultiValued on the field\n    // but this doesn't work when you alias a single valued field to\n    // a multi valued field (the field value is copied first, then\n    // if the type lookup is done again later, we get the wrong thing). SOLR-4036\n\n    // score as psuedo field - precondition checks\n    for (String name : new String[] {\"score\", \"val_ss\"}) {\n      SchemaField sf = h.getCore().getLatestSchema().getFieldOrNull(name);\n      assertNotNull(\"Test depends on a (dynamic) field mtching '\"+name+\n                    \"', schema was changed out from under us!\",sf);\n      assertTrue(\"Test depends on a multivalued dynamic field matching '\"+name+\n                 \"', schema was changed out from under us!\", sf.multiValued());\n    }\n\n    // score as psuedo field\n    assertJQ(req(\"q\",\"*:*\", \"fq\", \"id:42\", \"fl\",\"id,score\")\n             ,\"/response/docs==[{'id':'42','score':1.0}]\");\n    \n    // single value int using alias that matches multivalued dynamic field\n    assertJQ(req(\"q\",\"id:42\", \"fl\",\"val_ss:val_i, val2_ss:10\")\n        ,\"/response/docs==[{'val2_ss':10,'val_ss':1}]\"\n    );\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"42\", \"fl\",\"val_ss:val_i, val2_ss:10\")\n        ,\"/doc=={'val2_ss':10,'val_ss':1}\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testMultiValued() throws Exception {\n    // the response writers used to consult isMultiValued on the field\n    // but this doesn't work when you alias a single valued field to\n    // a multi valued field (the field value is copied first, then\n    // if the type lookup is done again later, we get the wrong thing). SOLR-4036\n\n    // score as psuedo field - precondition checks\n    for (String name : new String[] {\"score\", \"val_ss\"}) {\n      SchemaField sf = h.getCore().getLatestSchema().getFieldOrNull(name);\n      assertNotNull(\"Test depends on a (dynamic) field mtching '\"+name+\n                    \"', schema was changed out from under us!\",sf);\n      assertTrue(\"Test depends on a multivalued dynamic field matching '\"+name+\n                 \"', schema was changed out from under us!\", sf.multiValued());\n    }\n\n    // score as psuedo field\n    assertJQ(req(\"q\",\"*:*\", \"fq\", \"id:42\", \"fl\",\"id,score\")\n             ,\"/response/docs==[{'id':'42','score':1.0}]\");\n    \n    // single value int using alias that matches multivalued dynamic field\n    assertJQ(req(\"q\",\"id:42\", \"fl\",\"val_ss:val_i, val2_ss:10\")\n        ,\"/response/docs==[{'val2_ss':10,'val_ss':1}]\"\n    );\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"42\", \"fl\",\"val_ss:val_i, val2_ss:10\")\n        ,\"/doc=={'val2_ss':10,'val_ss':1}\"\n    );\n\n    // also check real-time-get from transaction log\n    assertU(adoc(\"id\", \"42\", \"val_i\", \"1\", \"ssto\", \"X\", \"subject\", \"aaa\"));\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"42\", \"fl\",\"val_ss:val_i, val2_ss:10\")\n        ,\"/doc=={'val2_ss':10,'val_ss':1}\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"934e1c7ca2823f3ec2758cc0f0912eac404856f2":["08970e5b8411182a29412c177eff67ec1110095b"],"3f1e9141a6da84d05f8f4915094fe2a0943cb7b6":["fc86ee203e41326b19776b964d255b47ccf0d126"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fc86ee203e41326b19776b964d255b47ccf0d126"],"fc86ee203e41326b19776b964d255b47ccf0d126":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["08970e5b8411182a29412c177eff67ec1110095b","934e1c7ca2823f3ec2758cc0f0912eac404856f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["934e1c7ca2823f3ec2758cc0f0912eac404856f2"],"08970e5b8411182a29412c177eff67ec1110095b":["3f1e9141a6da84d05f8f4915094fe2a0943cb7b6"]},"commit2Childs":{"934e1c7ca2823f3ec2758cc0f0912eac404856f2":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3f1e9141a6da84d05f8f4915094fe2a0943cb7b6":["08970e5b8411182a29412c177eff67ec1110095b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["407687e67faf6e1f02a211ca078d8e3eed631027","fc86ee203e41326b19776b964d255b47ccf0d126"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"fc86ee203e41326b19776b964d255b47ccf0d126":["3f1e9141a6da84d05f8f4915094fe2a0943cb7b6","407687e67faf6e1f02a211ca078d8e3eed631027"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"08970e5b8411182a29412c177eff67ec1110095b":["934e1c7ca2823f3ec2758cc0f0912eac404856f2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}