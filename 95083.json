{"path":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTreeTermsWriter#TempBlockTreeTermsWriter(SegmentWriteState,TempPostingsWriterBase,int,int).mjava","commits":[{"id":"6d01ed6d1df51191983f4dd157aedf5f4650e2b3","date":1376572546,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTreeTermsWriter#TempBlockTreeTermsWriter(SegmentWriteState,TempPostingsWriterBase,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTermsWriter#TempBlockTermsWriter(SegmentWriteState,TempPostingsWriterBase,int,int).mjava","sourceNew":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public TempBlockTreeTermsWriter(\n                              SegmentWriteState state,\n                              TempPostingsWriterBase postingsWriter,\n                              int minItemsInBlock,\n                              int maxItemsInBlock)\n    throws IOException\n  {\n    if (minItemsInBlock <= 1) {\n      throw new IllegalArgumentException(\"minItemsInBlock must be >= 2; got \" + minItemsInBlock);\n    }\n    if (maxItemsInBlock <= 0) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= 1; got \" + maxItemsInBlock);\n    }\n    if (minItemsInBlock > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= minItemsInBlock; got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n    if (2*(minItemsInBlock-1) > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be at least 2*(minItemsInBlock-1); got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      writeHeader(out);\n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      writeIndexHeader(indexOut);\n\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.start(out);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","sourceOld":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public TempBlockTermsWriter(\n                              SegmentWriteState state,\n                              TempPostingsWriterBase postingsWriter,\n                              int minItemsInBlock,\n                              int maxItemsInBlock)\n    throws IOException\n  {\n    if (minItemsInBlock <= 1) {\n      throw new IllegalArgumentException(\"minItemsInBlock must be >= 2; got \" + minItemsInBlock);\n    }\n    if (maxItemsInBlock <= 0) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= 1; got \" + maxItemsInBlock);\n    }\n    if (minItemsInBlock > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= minItemsInBlock; got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n    if (2*(minItemsInBlock-1) > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be at least 2*(minItemsInBlock-1); got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      writeHeader(out);\n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      writeIndexHeader(indexOut);\n\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.start(out);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abfc4a4873131874a50c6f6e3deb59a743ee1f44","date":1376737165,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTreeTermsWriter#TempBlockTreeTermsWriter(SegmentWriteState,TempPostingsWriterBase,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTreeTermsWriter#TempBlockTreeTermsWriter(SegmentWriteState,TempPostingsWriterBase,int,int).mjava","sourceNew":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public TempBlockTreeTermsWriter(\n                              SegmentWriteState state,\n                              TempPostingsWriterBase postingsWriter,\n                              int minItemsInBlock,\n                              int maxItemsInBlock)\n    throws IOException\n  {\n    if (minItemsInBlock <= 1) {\n      throw new IllegalArgumentException(\"minItemsInBlock must be >= 2; got \" + minItemsInBlock);\n    }\n    if (maxItemsInBlock <= 0) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= 1; got \" + maxItemsInBlock);\n    }\n    if (minItemsInBlock > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= minItemsInBlock; got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n    if (2*(minItemsInBlock-1) > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be at least 2*(minItemsInBlock-1); got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      writeHeader(out);\n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      writeIndexHeader(indexOut);\n\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.init(out);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","sourceOld":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public TempBlockTreeTermsWriter(\n                              SegmentWriteState state,\n                              TempPostingsWriterBase postingsWriter,\n                              int minItemsInBlock,\n                              int maxItemsInBlock)\n    throws IOException\n  {\n    if (minItemsInBlock <= 1) {\n      throw new IllegalArgumentException(\"minItemsInBlock must be >= 2; got \" + minItemsInBlock);\n    }\n    if (maxItemsInBlock <= 0) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= 1; got \" + maxItemsInBlock);\n    }\n    if (minItemsInBlock > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= minItemsInBlock; got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n    if (2*(minItemsInBlock-1) > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be at least 2*(minItemsInBlock-1); got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      writeHeader(out);\n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      writeIndexHeader(indexOut);\n\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.start(out);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTreeTermsWriter#TempBlockTreeTermsWriter(SegmentWriteState,TempPostingsWriterBase,int,int).mjava","sourceNew":null,"sourceOld":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public TempBlockTreeTermsWriter(\n                              SegmentWriteState state,\n                              TempPostingsWriterBase postingsWriter,\n                              int minItemsInBlock,\n                              int maxItemsInBlock)\n    throws IOException\n  {\n    if (minItemsInBlock <= 1) {\n      throw new IllegalArgumentException(\"minItemsInBlock must be >= 2; got \" + minItemsInBlock);\n    }\n    if (maxItemsInBlock <= 0) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= 1; got \" + maxItemsInBlock);\n    }\n    if (minItemsInBlock > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= minItemsInBlock; got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n    if (2*(minItemsInBlock-1) > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be at least 2*(minItemsInBlock-1); got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      writeHeader(out);\n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      writeIndexHeader(indexOut);\n\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.init(out);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"abfc4a4873131874a50c6f6e3deb59a743ee1f44":["6d01ed6d1df51191983f4dd157aedf5f4650e2b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["abfc4a4873131874a50c6f6e3deb59a743ee1f44"],"6d01ed6d1df51191983f4dd157aedf5f4650e2b3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"abfc4a4873131874a50c6f6e3deb59a743ee1f44":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6d01ed6d1df51191983f4dd157aedf5f4650e2b3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":[],"6d01ed6d1df51191983f4dd157aedf5f4650e2b3":["abfc4a4873131874a50c6f6e3deb59a743ee1f44"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}