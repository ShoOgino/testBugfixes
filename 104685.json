{"path":"lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList#checkSkipTo(PostingsEnum,int,int).mjava","commits":[{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList#checkSkipTo(PostingsEnum,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList#checkSkipTo(DocsAndPositionsEnum,int,int).mjava","sourceNew":"  public void checkSkipTo(PostingsEnum tp, int target, int maxCounter) throws IOException {\n    tp.advance(target);\n    if (maxCounter < counter) {\n      fail(\"Too many bytes read: \" + counter + \" vs \" + maxCounter);\n    }\n\n    assertEquals(\"Wrong document \" + tp.docID() + \" after skipTo target \" + target, target, tp.docID());\n    assertEquals(\"Frequency is not 1: \" + tp.freq(), 1,tp.freq());\n    tp.nextPosition();\n    BytesRef b = tp.getPayload();\n    assertEquals(1, b.length);\n    assertEquals(\"Wrong payload for the target \" + target + \": \" + b.bytes[b.offset], (byte) target, b.bytes[b.offset]);\n  }\n\n","sourceOld":"  public void checkSkipTo(DocsAndPositionsEnum tp, int target, int maxCounter) throws IOException {\n    tp.advance(target);\n    if (maxCounter < counter) {\n      fail(\"Too many bytes read: \" + counter + \" vs \" + maxCounter);\n    }\n\n    assertEquals(\"Wrong document \" + tp.docID() + \" after skipTo target \" + target, target, tp.docID());\n    assertEquals(\"Frequency is not 1: \" + tp.freq(), 1,tp.freq());\n    tp.nextPosition();\n    BytesRef b = tp.getPayload();\n    assertEquals(1, b.length);\n    assertEquals(\"Wrong payload for the target \" + target + \": \" + b.bytes[b.offset], (byte) target, b.bytes[b.offset]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"51f5280f31484820499077f41fcdfe92d527d9dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["51f5280f31484820499077f41fcdfe92d527d9dc"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["51f5280f31484820499077f41fcdfe92d527d9dc"],"51f5280f31484820499077f41fcdfe92d527d9dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}