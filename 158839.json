{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testSuggestionsRebalanceOnly().mjava","commits":[{"id":"6428b274f6593f368c4f838379620e7f5d196d65","date":1537799661,"type":0,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testSuggestionsRebalanceOnly().mjava","pathOld":"/dev/null","sourceNew":"  public void testSuggestionsRebalanceOnly() throws IOException {\n    String conf = \" {\" +\n        \"    'cluster-preferences':[{\" +\n        \"      'minimize':'cores',\" +\n        \"      'precision':1},\" +\n        \"      {'maximize':'freedisk','precision':100},\" +\n        \"      {'minimize':'sysLoadAvg','precision':10}],\" +\n        \"    'cluster-policy':[\" +\n        \"{'replica':'<5','shard':'#EACH','sysprop.zone':['east','west']}]}\";\n    Map<String, Object> m = (Map<String, Object>) loadFromResource(\"testSuggestionsRebalanceOnly.json\");\n    SolrCloudManager cloudManagerFromDiagnostics = createCloudManagerFromDiagnostics(m);\n    AutoScalingConfig autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(conf));\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(autoScalingConfig, cloudManagerFromDiagnostics);\n\n    assertEquals(2, suggestions.size());\n    assertEquals(\"improvement\", suggestions.get(0)._get(\"type\",null));\n    assertEquals(\"127.0.0.1:63229_solr\", suggestions.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n    assertEquals(\"improvement\", suggestions.get(1)._get( \"type\",null));\n    assertEquals(\"127.0.0.1:63219_solr\", suggestions.get(1)._get(\"operation/command/move-replica/targetNode\", null));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe52ff382a90016f1f6f34f2a026c4749eebb1b8","date":1541503646,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testSuggestionsRebalanceOnly().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testSuggestionsRebalanceOnly().mjava","sourceNew":"  public void testSuggestionsRebalanceOnly() {\n    String conf = \" {\" +\n        \"    'cluster-preferences':[{\" +\n        \"      'minimize':'cores',\" +\n        \"      'precision':1},\" +\n        \"      {'maximize':'freedisk','precision':100},\" +\n        \"      {'minimize':'sysLoadAvg','precision':10}],\" +\n        \"    'cluster-policy':[\" +\n        \"{'replica':'<5','shard':'#EACH','sysprop.zone':['east','west']}]}\";\n    Map<String, Object> m = (Map<String, Object>) loadFromResource(\"testSuggestionsRebalanceOnly.json\");\n    SolrCloudManager cloudManagerFromDiagnostics = createCloudManagerFromDiagnostics(m);\n    AutoScalingConfig autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(conf));\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(autoScalingConfig, cloudManagerFromDiagnostics);\n\n    assertEquals(2, suggestions.size());\n    assertEquals(\"improvement\", suggestions.get(0)._get(\"type\",null));\n    assertEquals(\"127.0.0.1:63229_solr\", suggestions.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n    assertEquals(\"improvement\", suggestions.get(1)._get( \"type\",null));\n    assertEquals(\"127.0.0.1:63219_solr\", suggestions.get(1)._get(\"operation/command/move-replica/targetNode\", null));\n  }\n\n","sourceOld":"  public void testSuggestionsRebalanceOnly() throws IOException {\n    String conf = \" {\" +\n        \"    'cluster-preferences':[{\" +\n        \"      'minimize':'cores',\" +\n        \"      'precision':1},\" +\n        \"      {'maximize':'freedisk','precision':100},\" +\n        \"      {'minimize':'sysLoadAvg','precision':10}],\" +\n        \"    'cluster-policy':[\" +\n        \"{'replica':'<5','shard':'#EACH','sysprop.zone':['east','west']}]}\";\n    Map<String, Object> m = (Map<String, Object>) loadFromResource(\"testSuggestionsRebalanceOnly.json\");\n    SolrCloudManager cloudManagerFromDiagnostics = createCloudManagerFromDiagnostics(m);\n    AutoScalingConfig autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(conf));\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(autoScalingConfig, cloudManagerFromDiagnostics);\n\n    assertEquals(2, suggestions.size());\n    assertEquals(\"improvement\", suggestions.get(0)._get(\"type\",null));\n    assertEquals(\"127.0.0.1:63229_solr\", suggestions.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n    assertEquals(\"improvement\", suggestions.get(1)._get( \"type\",null));\n    assertEquals(\"127.0.0.1:63219_solr\", suggestions.get(1)._get(\"operation/command/move-replica/targetNode\", null));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ddd9a76400512cda8f22bbc69e3d8b85672a91a","date":1559288755,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testSuggestionsRebalanceOnly().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testSuggestionsRebalanceOnly().mjava","sourceNew":"  public void testSuggestionsRebalanceOnly() {\n    String conf = \" {\" +\n        \"    'cluster-preferences':[{\" +\n        \"      'minimize':'cores',\" +\n        \"      'precision':1},\" +\n        \"      {'maximize':'freedisk','precision':100},\" +\n        \"      {'minimize':'sysLoadAvg','precision':10}],\" +\n        \"    'cluster-policy':[\" +\n        \"{'replica':'<5','shard':'#EACH','sysprop.zone':['east','west']}]}\";\n    if(useNodeset){\n      conf = \" {\" +\n          \"    'cluster-preferences':[{\" +\n          \"      'minimize':'cores',\" +\n          \"      'precision':1},\" +\n          \"      {'maximize':'freedisk','precision':100},\" +\n          \"      {'minimize':'sysLoadAvg','precision':10}],\" +\n          \"    'cluster-policy':[\" +\n          \"{'replica':'<5','shard':'#EACH', nodeset:{'sysprop.zone':['east','west']}}]}\";\n\n    }\n    Map<String, Object> m = (Map<String, Object>) loadFromResource(\"testSuggestionsRebalanceOnly.json\");\n    SolrCloudManager cloudManagerFromDiagnostics = createCloudManagerFromDiagnostics(m);\n    AutoScalingConfig autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(conf));\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(autoScalingConfig, cloudManagerFromDiagnostics);\n\n    assertEquals(2, suggestions.size());\n    assertEquals(\"improvement\", suggestions.get(0)._get(\"type\",null));\n    assertEquals(\"127.0.0.1:63229_solr\", suggestions.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n    assertEquals(\"improvement\", suggestions.get(1)._get( \"type\",null));\n    assertEquals(\"127.0.0.1:63219_solr\", suggestions.get(1)._get(\"operation/command/move-replica/targetNode\", null));\n  }\n\n","sourceOld":"  public void testSuggestionsRebalanceOnly() {\n    String conf = \" {\" +\n        \"    'cluster-preferences':[{\" +\n        \"      'minimize':'cores',\" +\n        \"      'precision':1},\" +\n        \"      {'maximize':'freedisk','precision':100},\" +\n        \"      {'minimize':'sysLoadAvg','precision':10}],\" +\n        \"    'cluster-policy':[\" +\n        \"{'replica':'<5','shard':'#EACH','sysprop.zone':['east','west']}]}\";\n    Map<String, Object> m = (Map<String, Object>) loadFromResource(\"testSuggestionsRebalanceOnly.json\");\n    SolrCloudManager cloudManagerFromDiagnostics = createCloudManagerFromDiagnostics(m);\n    AutoScalingConfig autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(conf));\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(autoScalingConfig, cloudManagerFromDiagnostics);\n\n    assertEquals(2, suggestions.size());\n    assertEquals(\"improvement\", suggestions.get(0)._get(\"type\",null));\n    assertEquals(\"127.0.0.1:63229_solr\", suggestions.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n    assertEquals(\"improvement\", suggestions.get(1)._get( \"type\",null));\n    assertEquals(\"127.0.0.1:63219_solr\", suggestions.get(1)._get(\"operation/command/move-replica/targetNode\", null));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58af973abe9f7c0faa777c1a6285fc7f72c171c5","date":1559329541,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testSuggestionsRebalanceOnly().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testSuggestionsRebalanceOnly().mjava","sourceNew":"  public void testSuggestionsRebalanceOnly() {\n    String conf = \" {\" +\n        \"    'cluster-preferences':[{\" +\n        \"      'minimize':'cores',\" +\n        \"      'precision':1},\" +\n        \"      {'maximize':'freedisk','precision':100},\" +\n        \"      {'minimize':'sysLoadAvg','precision':10}],\" +\n        \"    'cluster-policy':[\" +\n        \"{'replica':'<5','shard':'#EACH','sysprop.zone':['east','west']}]}\";\n    if(useNodeset){\n      conf = \" {\" +\n          \"    'cluster-preferences':[{\" +\n          \"      'minimize':'cores',\" +\n          \"      'precision':1},\" +\n          \"      {'maximize':'freedisk','precision':100},\" +\n          \"      {'minimize':'sysLoadAvg','precision':10}],\" +\n          \"    'cluster-policy':[\" +\n          \"{'replica':'<5','shard':'#EACH', nodeset:{'sysprop.zone':['east','west']}}]}\";\n\n    }\n    Map<String, Object> m = (Map<String, Object>) loadFromResource(\"testSuggestionsRebalanceOnly.json\");\n    SolrCloudManager cloudManagerFromDiagnostics = createCloudManagerFromDiagnostics(m);\n    AutoScalingConfig autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(conf));\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(autoScalingConfig, cloudManagerFromDiagnostics);\n\n    assertEquals(2, suggestions.size());\n    assertEquals(\"improvement\", suggestions.get(0)._get(\"type\",null));\n    assertEquals(\"127.0.0.1:63229_solr\", suggestions.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n    assertEquals(\"improvement\", suggestions.get(1)._get( \"type\",null));\n    assertEquals(\"127.0.0.1:63219_solr\", suggestions.get(1)._get(\"operation/command/move-replica/targetNode\", null));\n  }\n\n","sourceOld":"  public void testSuggestionsRebalanceOnly() {\n    String conf = \" {\" +\n        \"    'cluster-preferences':[{\" +\n        \"      'minimize':'cores',\" +\n        \"      'precision':1},\" +\n        \"      {'maximize':'freedisk','precision':100},\" +\n        \"      {'minimize':'sysLoadAvg','precision':10}],\" +\n        \"    'cluster-policy':[\" +\n        \"{'replica':'<5','shard':'#EACH','sysprop.zone':['east','west']}]}\";\n    Map<String, Object> m = (Map<String, Object>) loadFromResource(\"testSuggestionsRebalanceOnly.json\");\n    SolrCloudManager cloudManagerFromDiagnostics = createCloudManagerFromDiagnostics(m);\n    AutoScalingConfig autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(conf));\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(autoScalingConfig, cloudManagerFromDiagnostics);\n\n    assertEquals(2, suggestions.size());\n    assertEquals(\"improvement\", suggestions.get(0)._get(\"type\",null));\n    assertEquals(\"127.0.0.1:63229_solr\", suggestions.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n    assertEquals(\"improvement\", suggestions.get(1)._get( \"type\",null));\n    assertEquals(\"127.0.0.1:63219_solr\", suggestions.get(1)._get(\"operation/command/move-replica/targetNode\", null));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testSuggestionsRebalanceOnly().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testSuggestionsRebalanceOnly().mjava","sourceNew":"  public void testSuggestionsRebalanceOnly() {\n    String conf = \" {\" +\n        \"    'cluster-preferences':[{\" +\n        \"      'minimize':'cores',\" +\n        \"      'precision':1},\" +\n        \"      {'maximize':'freedisk','precision':100},\" +\n        \"      {'minimize':'sysLoadAvg','precision':10}],\" +\n        \"    'cluster-policy':[\" +\n        \"{'replica':'<5','shard':'#EACH','sysprop.zone':['east','west']}]}\";\n    if(useNodeset){\n      conf = \" {\" +\n          \"    'cluster-preferences':[{\" +\n          \"      'minimize':'cores',\" +\n          \"      'precision':1},\" +\n          \"      {'maximize':'freedisk','precision':100},\" +\n          \"      {'minimize':'sysLoadAvg','precision':10}],\" +\n          \"    'cluster-policy':[\" +\n          \"{'replica':'<5','shard':'#EACH', nodeset:{'sysprop.zone':['east','west']}}]}\";\n\n    }\n    @SuppressWarnings({\"unchecked\"})\n    Map<String, Object> m = (Map<String, Object>) loadFromResource(\"testSuggestionsRebalanceOnly.json\");\n    SolrCloudManager cloudManagerFromDiagnostics = createCloudManagerFromDiagnostics(m);\n    @SuppressWarnings({\"unchecked\"})\n    AutoScalingConfig autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(conf));\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(autoScalingConfig, cloudManagerFromDiagnostics);\n\n    assertEquals(2, suggestions.size());\n    assertEquals(\"improvement\", suggestions.get(0)._get(\"type\",null));\n    assertEquals(\"127.0.0.1:63229_solr\", suggestions.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n    assertEquals(\"improvement\", suggestions.get(1)._get( \"type\",null));\n    assertEquals(\"127.0.0.1:63219_solr\", suggestions.get(1)._get(\"operation/command/move-replica/targetNode\", null));\n  }\n\n","sourceOld":"  public void testSuggestionsRebalanceOnly() {\n    String conf = \" {\" +\n        \"    'cluster-preferences':[{\" +\n        \"      'minimize':'cores',\" +\n        \"      'precision':1},\" +\n        \"      {'maximize':'freedisk','precision':100},\" +\n        \"      {'minimize':'sysLoadAvg','precision':10}],\" +\n        \"    'cluster-policy':[\" +\n        \"{'replica':'<5','shard':'#EACH','sysprop.zone':['east','west']}]}\";\n    if(useNodeset){\n      conf = \" {\" +\n          \"    'cluster-preferences':[{\" +\n          \"      'minimize':'cores',\" +\n          \"      'precision':1},\" +\n          \"      {'maximize':'freedisk','precision':100},\" +\n          \"      {'minimize':'sysLoadAvg','precision':10}],\" +\n          \"    'cluster-policy':[\" +\n          \"{'replica':'<5','shard':'#EACH', nodeset:{'sysprop.zone':['east','west']}}]}\";\n\n    }\n    Map<String, Object> m = (Map<String, Object>) loadFromResource(\"testSuggestionsRebalanceOnly.json\");\n    SolrCloudManager cloudManagerFromDiagnostics = createCloudManagerFromDiagnostics(m);\n    AutoScalingConfig autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(conf));\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(autoScalingConfig, cloudManagerFromDiagnostics);\n\n    assertEquals(2, suggestions.size());\n    assertEquals(\"improvement\", suggestions.get(0)._get(\"type\",null));\n    assertEquals(\"127.0.0.1:63229_solr\", suggestions.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n    assertEquals(\"improvement\", suggestions.get(1)._get( \"type\",null));\n    assertEquals(\"127.0.0.1:63219_solr\", suggestions.get(1)._get(\"operation/command/move-replica/targetNode\", null));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testSuggestionsRebalanceOnly().mjava","sourceNew":null,"sourceOld":"  public void testSuggestionsRebalanceOnly() {\n    String conf = \" {\" +\n        \"    'cluster-preferences':[{\" +\n        \"      'minimize':'cores',\" +\n        \"      'precision':1},\" +\n        \"      {'maximize':'freedisk','precision':100},\" +\n        \"      {'minimize':'sysLoadAvg','precision':10}],\" +\n        \"    'cluster-policy':[\" +\n        \"{'replica':'<5','shard':'#EACH','sysprop.zone':['east','west']}]}\";\n    if(useNodeset){\n      conf = \" {\" +\n          \"    'cluster-preferences':[{\" +\n          \"      'minimize':'cores',\" +\n          \"      'precision':1},\" +\n          \"      {'maximize':'freedisk','precision':100},\" +\n          \"      {'minimize':'sysLoadAvg','precision':10}],\" +\n          \"    'cluster-policy':[\" +\n          \"{'replica':'<5','shard':'#EACH', nodeset:{'sysprop.zone':['east','west']}}]}\";\n\n    }\n    @SuppressWarnings({\"unchecked\"})\n    Map<String, Object> m = (Map<String, Object>) loadFromResource(\"testSuggestionsRebalanceOnly.json\");\n    SolrCloudManager cloudManagerFromDiagnostics = createCloudManagerFromDiagnostics(m);\n    @SuppressWarnings({\"unchecked\"})\n    AutoScalingConfig autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(conf));\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(autoScalingConfig, cloudManagerFromDiagnostics);\n\n    assertEquals(2, suggestions.size());\n    assertEquals(\"improvement\", suggestions.get(0)._get(\"type\",null));\n    assertEquals(\"127.0.0.1:63229_solr\", suggestions.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n    assertEquals(\"improvement\", suggestions.get(1)._get( \"type\",null));\n    assertEquals(\"127.0.0.1:63219_solr\", suggestions.get(1)._get(\"operation/command/move-replica/targetNode\", null));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"3f504512a03d978990cbff30db0522b354e846db":["9ba1b632c041956c93c41aa1143d16a567014891"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":["fe52ff382a90016f1f6f34f2a026c4749eebb1b8","9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"9ddd9a76400512cda8f22bbc69e3d8b85672a91a":["fe52ff382a90016f1f6f34f2a026c4749eebb1b8"],"fe52ff382a90016f1f6f34f2a026c4749eebb1b8":["6428b274f6593f368c4f838379620e7f5d196d65"],"6428b274f6593f368c4f838379620e7f5d196d65":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6428b274f6593f368c4f838379620e7f5d196d65"],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":[],"9ddd9a76400512cda8f22bbc69e3d8b85672a91a":["9ba1b632c041956c93c41aa1143d16a567014891","58af973abe9f7c0faa777c1a6285fc7f72c171c5"],"fe52ff382a90016f1f6f34f2a026c4749eebb1b8":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"6428b274f6593f368c4f838379620e7f5d196d65":["fe52ff382a90016f1f6f34f2a026c4749eebb1b8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}