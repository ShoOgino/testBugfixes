{"path":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,DocWrapper,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,DocWrapper,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, DocWrapper doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessorWrapper entityProcessor = getEntityProcessor(entity);\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    entityProcessor.init(ctx);\n    Context.CURRENT_CONTEXT.set(ctx);\n    \n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (requestParameters.start + requestParameters.rows)) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name), vr);\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n            if (seenDocCount > requestParameters.start + requestParameters.rows) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow, doc);\n            addFields(entity, doc, arow, vr);\n          }\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc, null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n          /*The child entities would have changed the CURRENT_CONTEXT. So when they are done, set it back to the old.\n           *\n           */\n          Context.CURRENT_CONTEXT.set(ctx);\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              LOG.error(\"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n            Context.CURRENT_CONTEXT.remove();\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n      entityProcessor.destroy();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,DocWrapper,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, DocWrapper doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessorWrapper entityProcessor = getEntityProcessor(entity);\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    entityProcessor.init(ctx);\n    Context.CURRENT_CONTEXT.set(ctx);\n    \n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (requestParameters.start + requestParameters.rows)) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name), vr);\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n            if (seenDocCount > requestParameters.start + requestParameters.rows) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow, doc);\n            addFields(entity, doc, arow, vr);\n          }\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc, null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n          /*The child entities would have changed the CURRENT_CONTEXT. So when they are done, set it back to the old.\n           *\n           */\n          Context.CURRENT_CONTEXT.set(ctx);\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              LOG.error(\"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n            Context.CURRENT_CONTEXT.remove();\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n      entityProcessor.destroy();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,DocWrapper,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,DocWrapper,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, DocWrapper doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessorWrapper entityProcessor = getEntityProcessor(entity);\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    entityProcessor.init(ctx);\n    Context.CURRENT_CONTEXT.set(ctx);\n    \n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (requestParameters.start + requestParameters.rows)) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name), vr);\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n            if (seenDocCount > requestParameters.start + requestParameters.rows) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow, doc);\n            addFields(entity, doc, arow, vr);\n          }\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc, null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n          /*The child entities would have changed the CURRENT_CONTEXT. So when they are done, set it back to the old.\n           *\n           */\n          Context.CURRENT_CONTEXT.set(ctx);\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              LOG.error(\"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n            Context.CURRENT_CONTEXT.remove();\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n      entityProcessor.destroy();\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, DocWrapper doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessorWrapper entityProcessor = getEntityProcessor(entity);\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    entityProcessor.init(ctx);\n    Context.CURRENT_CONTEXT.set(ctx);\n    \n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (requestParameters.start + requestParameters.rows)) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name), vr);\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n            if (seenDocCount > requestParameters.start + requestParameters.rows) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow, doc);\n            addFields(entity, doc, arow, vr);\n          }\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc, null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n          /*The child entities would have changed the CURRENT_CONTEXT. So when they are done, set it back to the old.\n           *\n           */\n          Context.CURRENT_CONTEXT.set(ctx);\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              LOG.error(\"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n            Context.CURRENT_CONTEXT.remove();\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n      entityProcessor.destroy();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,DocWrapper,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, DocWrapper doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessorWrapper entityProcessor = getEntityProcessor(entity);\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    entityProcessor.init(ctx);\n    Context.CURRENT_CONTEXT.set(ctx);\n    \n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (requestParameters.start + requestParameters.rows)) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name), vr);\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n            if (seenDocCount > requestParameters.start + requestParameters.rows) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow, doc);\n            addFields(entity, doc, arow, vr);\n          }\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc, null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n          /*The child entities would have changed the CURRENT_CONTEXT. So when they are done, set it back to the old.\n           *\n           */\n          Context.CURRENT_CONTEXT.set(ctx);\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              LOG.error(\"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n            Context.CURRENT_CONTEXT.remove();\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n      entityProcessor.destroy();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5871a631b6817f1cef161749ceffdc037e67558a","date":1291133429,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,DocWrapper,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,DocWrapper,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, DocWrapper doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessorWrapper entityProcessor = getEntityProcessor(entity);\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    entityProcessor.init(ctx);\n    Context.CURRENT_CONTEXT.set(ctx);\n    \n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (requestParameters.start + requestParameters.rows)) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name), vr);\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n            if (seenDocCount > requestParameters.start + requestParameters.rows) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow, doc);\n            addFields(entity, doc, arow, vr);\n          }\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc,\n                  child.isDocRoot ? pk : null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n          /*The child entities would have changed the CURRENT_CONTEXT. So when they are done, set it back to the old.\n           *\n           */\n          Context.CURRENT_CONTEXT.set(ctx);\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              LOG.error(\"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n            Context.CURRENT_CONTEXT.remove();\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n      entityProcessor.destroy();\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, DocWrapper doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessorWrapper entityProcessor = getEntityProcessor(entity);\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    entityProcessor.init(ctx);\n    Context.CURRENT_CONTEXT.set(ctx);\n    \n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (requestParameters.start + requestParameters.rows)) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name), vr);\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n            if (seenDocCount > requestParameters.start + requestParameters.rows) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow, doc);\n            addFields(entity, doc, arow, vr);\n          }\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc, null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n          /*The child entities would have changed the CURRENT_CONTEXT. So when they are done, set it back to the old.\n           *\n           */\n          Context.CURRENT_CONTEXT.set(ctx);\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              LOG.error(\"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n            Context.CURRENT_CONTEXT.remove();\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n      entityProcessor.destroy();\n    }\n  }\n\n","bugFix":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,DocWrapper,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,DocWrapper,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, DocWrapper doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessorWrapper entityProcessor = getEntityProcessor(entity);\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    entityProcessor.init(ctx);\n    Context.CURRENT_CONTEXT.set(ctx);\n    \n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (requestParameters.start + requestParameters.rows)) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name), vr);\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n            if (seenDocCount > requestParameters.start + requestParameters.rows) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow, doc);\n            addFields(entity, doc, arow, vr);\n          }\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc,\n                  child.isDocRoot ? pk : null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n          /*The child entities would have changed the CURRENT_CONTEXT. So when they are done, set it back to the old.\n           *\n           */\n          Context.CURRENT_CONTEXT.set(ctx);\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              LOG.error(\"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n            Context.CURRENT_CONTEXT.remove();\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n      entityProcessor.destroy();\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, DocWrapper doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessorWrapper entityProcessor = getEntityProcessor(entity);\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    entityProcessor.init(ctx);\n    Context.CURRENT_CONTEXT.set(ctx);\n    \n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (requestParameters.start + requestParameters.rows)) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name), vr);\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n            if (seenDocCount > requestParameters.start + requestParameters.rows) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow, doc);\n            addFields(entity, doc, arow, vr);\n          }\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc, null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n          /*The child entities would have changed the CURRENT_CONTEXT. So when they are done, set it back to the old.\n           *\n           */\n          Context.CURRENT_CONTEXT.set(ctx);\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              LOG.error(\"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n            Context.CURRENT_CONTEXT.remove();\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n      entityProcessor.destroy();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,DocWrapper,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,DocWrapper,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, DocWrapper doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessorWrapper entityProcessor = getEntityProcessor(entity);\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    entityProcessor.init(ctx);\n    Context.CURRENT_CONTEXT.set(ctx);\n    \n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (requestParameters.start + requestParameters.rows)) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name), vr);\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n            if (seenDocCount > requestParameters.start + requestParameters.rows) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow, doc);\n            addFields(entity, doc, arow, vr);\n          }\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc,\n                  child.isDocRoot ? pk : null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n          /*The child entities would have changed the CURRENT_CONTEXT. So when they are done, set it back to the old.\n           *\n           */\n          Context.CURRENT_CONTEXT.set(ctx);\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              LOG.error(\"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n            Context.CURRENT_CONTEXT.remove();\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n      entityProcessor.destroy();\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, DocWrapper doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessorWrapper entityProcessor = getEntityProcessor(entity);\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    entityProcessor.init(ctx);\n    Context.CURRENT_CONTEXT.set(ctx);\n    \n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (requestParameters.start + requestParameters.rows)) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name), vr);\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n            if (seenDocCount > requestParameters.start + requestParameters.rows) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow, doc);\n            addFields(entity, doc, arow, vr);\n          }\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc, null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n          /*The child entities would have changed the CURRENT_CONTEXT. So when they are done, set it back to the old.\n           *\n           */\n          Context.CURRENT_CONTEXT.set(ctx);\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              LOG.error(\"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n            Context.CURRENT_CONTEXT.remove();\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n      entityProcessor.destroy();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a95193d2e784a099537d5b5c9936d4e72796a3d","date":1297945571,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,DocWrapper,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,DocWrapper,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, DocWrapper doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessorWrapper entityProcessor = getEntityProcessor(entity);\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    entityProcessor.init(ctx);\n    Context.CURRENT_CONTEXT.set(ctx);\n    \n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (requestParameters.start + requestParameters.rows)) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name), vr);\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n            if (seenDocCount > requestParameters.start + requestParameters.rows) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow, doc);\n            addFields(entity, doc, arow, vr);\n          }\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc,\n                  child.isDocRoot ? pk : null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n          /*The child entities would have changed the CURRENT_CONTEXT. So when they are done, set it back to the old.\n           *\n           */\n          Context.CURRENT_CONTEXT.set(ctx);\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              SolrException.log(LOG, \"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n            Context.CURRENT_CONTEXT.remove();\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n      entityProcessor.destroy();\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, DocWrapper doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessorWrapper entityProcessor = getEntityProcessor(entity);\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    entityProcessor.init(ctx);\n    Context.CURRENT_CONTEXT.set(ctx);\n    \n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (requestParameters.start + requestParameters.rows)) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name), vr);\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n            if (seenDocCount > requestParameters.start + requestParameters.rows) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow, doc);\n            addFields(entity, doc, arow, vr);\n          }\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc,\n                  child.isDocRoot ? pk : null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n          /*The child entities would have changed the CURRENT_CONTEXT. So when they are done, set it back to the old.\n           *\n           */\n          Context.CURRENT_CONTEXT.set(ctx);\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              LOG.error(\"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n            Context.CURRENT_CONTEXT.remove();\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n      entityProcessor.destroy();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,DocWrapper,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,DocWrapper,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, DocWrapper doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessorWrapper entityProcessor = getEntityProcessor(entity);\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    entityProcessor.init(ctx);\n    Context.CURRENT_CONTEXT.set(ctx);\n    \n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (requestParameters.start + requestParameters.rows)) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name), vr);\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n            if (seenDocCount > requestParameters.start + requestParameters.rows) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow, doc);\n            addFields(entity, doc, arow, vr);\n          }\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc,\n                  child.isDocRoot ? pk : null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n          /*The child entities would have changed the CURRENT_CONTEXT. So when they are done, set it back to the old.\n           *\n           */\n          Context.CURRENT_CONTEXT.set(ctx);\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              SolrException.log(LOG, \"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n            Context.CURRENT_CONTEXT.remove();\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n      entityProcessor.destroy();\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, DocWrapper doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessorWrapper entityProcessor = getEntityProcessor(entity);\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    entityProcessor.init(ctx);\n    Context.CURRENT_CONTEXT.set(ctx);\n    \n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (requestParameters.start + requestParameters.rows)) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name), vr);\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n            if (seenDocCount > requestParameters.start + requestParameters.rows) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow, doc);\n            addFields(entity, doc, arow, vr);\n          }\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc,\n                  child.isDocRoot ? pk : null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n          /*The child entities would have changed the CURRENT_CONTEXT. So when they are done, set it back to the old.\n           *\n           */\n          Context.CURRENT_CONTEXT.set(ctx);\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              LOG.error(\"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n            Context.CURRENT_CONTEXT.remove();\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n      entityProcessor.destroy();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,DocWrapper,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,DocWrapper,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, DocWrapper doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessorWrapper entityProcessor = getEntityProcessor(entity);\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    entityProcessor.init(ctx);\n    Context.CURRENT_CONTEXT.set(ctx);\n    \n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (requestParameters.start + requestParameters.rows)) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name), vr);\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n            if (seenDocCount > requestParameters.start + requestParameters.rows) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow, doc);\n            addFields(entity, doc, arow, vr);\n          }\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc,\n                  child.isDocRoot ? pk : null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n          /*The child entities would have changed the CURRENT_CONTEXT. So when they are done, set it back to the old.\n           *\n           */\n          Context.CURRENT_CONTEXT.set(ctx);\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              SolrException.log(LOG, \"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n            Context.CURRENT_CONTEXT.remove();\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n      entityProcessor.destroy();\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, DocWrapper doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessorWrapper entityProcessor = getEntityProcessor(entity);\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    entityProcessor.init(ctx);\n    Context.CURRENT_CONTEXT.set(ctx);\n    \n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (requestParameters.start + requestParameters.rows)) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name), vr);\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n            if (seenDocCount > requestParameters.start + requestParameters.rows) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow, doc);\n            addFields(entity, doc, arow, vr);\n          }\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc,\n                  child.isDocRoot ? pk : null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n          /*The child entities would have changed the CURRENT_CONTEXT. So when they are done, set it back to the old.\n           *\n           */\n          Context.CURRENT_CONTEXT.set(ctx);\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              LOG.error(\"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n            Context.CURRENT_CONTEXT.remove();\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n      entityProcessor.destroy();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,DocWrapper,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,DocWrapper,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, DocWrapper doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessorWrapper entityProcessor = getEntityProcessor(entity);\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    entityProcessor.init(ctx);\n    Context.CURRENT_CONTEXT.set(ctx);\n    \n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (requestParameters.start + requestParameters.rows)) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name), vr);\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n            if (seenDocCount > requestParameters.start + requestParameters.rows) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow, doc);\n            addFields(entity, doc, arow, vr);\n          }\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc,\n                  child.isDocRoot ? pk : null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n          /*The child entities would have changed the CURRENT_CONTEXT. So when they are done, set it back to the old.\n           *\n           */\n          Context.CURRENT_CONTEXT.set(ctx);\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              SolrException.log(LOG, \"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n            Context.CURRENT_CONTEXT.remove();\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n      entityProcessor.destroy();\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, DocWrapper doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessorWrapper entityProcessor = getEntityProcessor(entity);\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    entityProcessor.init(ctx);\n    Context.CURRENT_CONTEXT.set(ctx);\n    \n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (requestParameters.start + requestParameters.rows)) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name), vr);\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n            if (seenDocCount > requestParameters.start + requestParameters.rows) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow, doc);\n            addFields(entity, doc, arow, vr);\n          }\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc,\n                  child.isDocRoot ? pk : null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n          /*The child entities would have changed the CURRENT_CONTEXT. So when they are done, set it back to the old.\n           *\n           */\n          Context.CURRENT_CONTEXT.set(ctx);\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              SolrException.log(LOG, \"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n            Context.CURRENT_CONTEXT.remove();\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n      entityProcessor.destroy();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,DocWrapper,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,DocWrapper,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, DocWrapper doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessorWrapper entityProcessor = getEntityProcessor(entity);\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    entityProcessor.init(ctx);\n    Context.CURRENT_CONTEXT.set(ctx);\n    \n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (requestParameters.start + requestParameters.rows)) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name), vr);\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n            if (seenDocCount > requestParameters.start + requestParameters.rows) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow, doc);\n            addFields(entity, doc, arow, vr);\n          }\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc,\n                  child.isDocRoot ? pk : null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n          /*The child entities would have changed the CURRENT_CONTEXT. So when they are done, set it back to the old.\n           *\n           */\n          Context.CURRENT_CONTEXT.set(ctx);\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              SolrException.log(LOG, \"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n            Context.CURRENT_CONTEXT.remove();\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n      entityProcessor.destroy();\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, DocWrapper doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessorWrapper entityProcessor = getEntityProcessor(entity);\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    entityProcessor.init(ctx);\n    Context.CURRENT_CONTEXT.set(ctx);\n    \n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (requestParameters.start + requestParameters.rows)) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name), vr);\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n            if (seenDocCount > requestParameters.start + requestParameters.rows) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow, doc);\n            addFields(entity, doc, arow, vr);\n          }\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc,\n                  child.isDocRoot ? pk : null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n          /*The child entities would have changed the CURRENT_CONTEXT. So when they are done, set it back to the old.\n           *\n           */\n          Context.CURRENT_CONTEXT.set(ctx);\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              SolrException.log(LOG, \"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n            Context.CURRENT_CONTEXT.remove();\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n      entityProcessor.destroy();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["3bb13258feba31ab676502787ab2e1779f129b7a","8a95193d2e784a099537d5b5c9936d4e72796a3d"],"8a95193d2e784a099537d5b5c9936d4e72796a3d":["5871a631b6817f1cef161749ceffdc037e67558a"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["8a95193d2e784a099537d5b5c9936d4e72796a3d","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","5871a631b6817f1cef161749ceffdc037e67558a"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"5871a631b6817f1cef161749ceffdc037e67558a":["1da8d55113b689b06716246649de6f62430f15c0"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["8a95193d2e784a099537d5b5c9936d4e72796a3d","8a95193d2e784a099537d5b5c9936d4e72796a3d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8a95193d2e784a099537d5b5c9936d4e72796a3d"],"3bb13258feba31ab676502787ab2e1779f129b7a":["1da8d55113b689b06716246649de6f62430f15c0","5871a631b6817f1cef161749ceffdc037e67558a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"8a95193d2e784a099537d5b5c9936d4e72796a3d":["f1bdbf92da222965b46c0a942c3857ba56e5c638","c26f00b574427b55127e869b935845554afde1fa","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"1da8d55113b689b06716246649de6f62430f15c0":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","5871a631b6817f1cef161749ceffdc037e67558a","3bb13258feba31ab676502787ab2e1779f129b7a"],"5871a631b6817f1cef161749ceffdc037e67558a":["8a95193d2e784a099537d5b5c9936d4e72796a3d","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"3bb13258feba31ab676502787ab2e1779f129b7a":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}