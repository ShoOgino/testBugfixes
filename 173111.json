{"path":"src/test/org/apache/lucene/search/TestMultiSearcher#testNormalization(int,String).mjava","commits":[{"id":"1c88b3d0bf235942b9ead3322cac5fcee1e732d8","date":1133977717,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiSearcher#testNormalization(int,String).mjava","pathOld":"/dev/null","sourceNew":"    private void testNormalization(int nDocs, String message) throws IOException {\n        Query query=new TermQuery(new Term(\"contents\", \"doc0\"));\n        \n        RAMDirectory ramDirectory1;\n        IndexSearcher indexSearcher1;\n        Hits hits;\n        \n        ramDirectory1=new RAMDirectory();\n        \n        // First put the documents in the same index\n        initIndex(ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(ramDirectory1, nDocs, false, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1);\n        \n        hits=indexSearcher1.search(query);\n        \n        assertEquals(message, 2, hits.length());\n        \n        assertEquals(message, 1, hits.score(0), 1e-6); // hits.score(0) is 0.594535 if only a single document is in first index\n        \n        // Store the scores for use later\n        float[] scores={ hits.score(0), hits.score(1) };\n        \n        assertTrue(message, scores[0] > scores[1]);\n        \n        indexSearcher1.close();\n        ramDirectory1.close();\n        hits=null;\n        \n        \n        \n        RAMDirectory ramDirectory2;\n        IndexSearcher indexSearcher2;\n        \n        ramDirectory1=new RAMDirectory();\n        ramDirectory2=new RAMDirectory();\n        \n        // Now put the documents in a different index\n        initIndex(ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(ramDirectory2, nDocs, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1);\n        indexSearcher2=new IndexSearcher(ramDirectory2);\n        \n        Searcher searcher=getMultiSearcherInstance(new Searcher[] { indexSearcher1, indexSearcher2 });\n        \n        hits=searcher.search(query);\n        \n        assertEquals(message, 2, hits.length());\n        \n        // The scores should be the same (within reason)\n        assertEquals(message, scores[0], hits.score(0), 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits.score(1), 1e-6); // This will a document from ramDirectory2\n        \n        \n        \n        // Adding a Sort.RELEVANCE object should not change anything\n        hits=searcher.search(query, Sort.RELEVANCE);\n        \n        assertEquals(message, 2, hits.length());\n        \n        assertEquals(message, scores[0], hits.score(0), 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits.score(1), 1e-6); // This will a document from ramDirectory2\n        \n        searcher.close();\n        \n        ramDirectory1.close();\n        ramDirectory2.close();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d72db039743bd6a2da9be6306f57c71654ca1bf6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d72db039743bd6a2da9be6306f57c71654ca1bf6","date":1173217255,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiSearcher#testNormalization(int,String).mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiSearcher#testNormalization(int,String).mjava","sourceNew":"    private void testNormalization(int nDocs, String message) throws IOException {\n        Query query=new TermQuery(new Term(\"contents\", \"doc0\"));\n        \n        RAMDirectory ramDirectory1;\n        IndexSearcher indexSearcher1;\n        Hits hits;\n        \n        ramDirectory1=new MockRAMDirectory();\n        \n        // First put the documents in the same index\n        initIndex(ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(ramDirectory1, nDocs, false, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1);\n        \n        hits=indexSearcher1.search(query);\n        \n        assertEquals(message, 2, hits.length());\n        \n        assertEquals(message, 1, hits.score(0), 1e-6); // hits.score(0) is 0.594535 if only a single document is in first index\n        \n        // Store the scores for use later\n        float[] scores={ hits.score(0), hits.score(1) };\n        \n        assertTrue(message, scores[0] > scores[1]);\n        \n        indexSearcher1.close();\n        ramDirectory1.close();\n        hits=null;\n        \n        \n        \n        RAMDirectory ramDirectory2;\n        IndexSearcher indexSearcher2;\n        \n        ramDirectory1=new MockRAMDirectory();\n        ramDirectory2=new MockRAMDirectory();\n        \n        // Now put the documents in a different index\n        initIndex(ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(ramDirectory2, nDocs, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1);\n        indexSearcher2=new IndexSearcher(ramDirectory2);\n        \n        Searcher searcher=getMultiSearcherInstance(new Searcher[] { indexSearcher1, indexSearcher2 });\n        \n        hits=searcher.search(query);\n        \n        assertEquals(message, 2, hits.length());\n        \n        // The scores should be the same (within reason)\n        assertEquals(message, scores[0], hits.score(0), 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits.score(1), 1e-6); // This will a document from ramDirectory2\n        \n        \n        \n        // Adding a Sort.RELEVANCE object should not change anything\n        hits=searcher.search(query, Sort.RELEVANCE);\n        \n        assertEquals(message, 2, hits.length());\n        \n        assertEquals(message, scores[0], hits.score(0), 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits.score(1), 1e-6); // This will a document from ramDirectory2\n        \n        searcher.close();\n        \n        ramDirectory1.close();\n        ramDirectory2.close();\n    }\n\n","sourceOld":"    private void testNormalization(int nDocs, String message) throws IOException {\n        Query query=new TermQuery(new Term(\"contents\", \"doc0\"));\n        \n        RAMDirectory ramDirectory1;\n        IndexSearcher indexSearcher1;\n        Hits hits;\n        \n        ramDirectory1=new RAMDirectory();\n        \n        // First put the documents in the same index\n        initIndex(ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(ramDirectory1, nDocs, false, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1);\n        \n        hits=indexSearcher1.search(query);\n        \n        assertEquals(message, 2, hits.length());\n        \n        assertEquals(message, 1, hits.score(0), 1e-6); // hits.score(0) is 0.594535 if only a single document is in first index\n        \n        // Store the scores for use later\n        float[] scores={ hits.score(0), hits.score(1) };\n        \n        assertTrue(message, scores[0] > scores[1]);\n        \n        indexSearcher1.close();\n        ramDirectory1.close();\n        hits=null;\n        \n        \n        \n        RAMDirectory ramDirectory2;\n        IndexSearcher indexSearcher2;\n        \n        ramDirectory1=new RAMDirectory();\n        ramDirectory2=new RAMDirectory();\n        \n        // Now put the documents in a different index\n        initIndex(ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(ramDirectory2, nDocs, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1);\n        indexSearcher2=new IndexSearcher(ramDirectory2);\n        \n        Searcher searcher=getMultiSearcherInstance(new Searcher[] { indexSearcher1, indexSearcher2 });\n        \n        hits=searcher.search(query);\n        \n        assertEquals(message, 2, hits.length());\n        \n        // The scores should be the same (within reason)\n        assertEquals(message, scores[0], hits.score(0), 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits.score(1), 1e-6); // This will a document from ramDirectory2\n        \n        \n        \n        // Adding a Sort.RELEVANCE object should not change anything\n        hits=searcher.search(query, Sort.RELEVANCE);\n        \n        assertEquals(message, 2, hits.length());\n        \n        assertEquals(message, scores[0], hits.score(0), 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits.score(1), 1e-6); // This will a document from ramDirectory2\n        \n        searcher.close();\n        \n        ramDirectory1.close();\n        ramDirectory2.close();\n    }\n\n","bugFix":["1c88b3d0bf235942b9ead3322cac5fcee1e732d8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiSearcher#testNormalization(int,String).mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiSearcher#testNormalization(int,String).mjava","sourceNew":"    private void testNormalization(int nDocs, String message) throws IOException {\n        Query query=new TermQuery(new Term(\"contents\", \"doc0\"));\n        \n        RAMDirectory ramDirectory1;\n        IndexSearcher indexSearcher1;\n        ScoreDoc[] hits;\n        \n        ramDirectory1=new MockRAMDirectory();\n        \n        // First put the documents in the same index\n        initIndex(ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(ramDirectory1, nDocs, false, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1);\n        \n        hits=indexSearcher1.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // Store the scores for use later\n        float[] scores={ hits[0].score, hits[1].score };\n        \n        assertTrue(message, scores[0] > scores[1]);\n        \n        indexSearcher1.close();\n        ramDirectory1.close();\n        hits=null;\n        \n        \n        \n        RAMDirectory ramDirectory2;\n        IndexSearcher indexSearcher2;\n        \n        ramDirectory1=new MockRAMDirectory();\n        ramDirectory2=new MockRAMDirectory();\n        \n        // Now put the documents in a different index\n        initIndex(ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(ramDirectory2, nDocs, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1);\n        indexSearcher2=new IndexSearcher(ramDirectory2);\n        \n        Searcher searcher=getMultiSearcherInstance(new Searcher[] { indexSearcher1, indexSearcher2 });\n        \n        hits=searcher.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // The scores should be the same (within reason)\n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        \n        \n        // Adding a Sort.RELEVANCE object should not change anything\n        hits=searcher.search(query, null, 1000, Sort.RELEVANCE).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        searcher.close();\n        \n        ramDirectory1.close();\n        ramDirectory2.close();\n    }\n\n","sourceOld":"    private void testNormalization(int nDocs, String message) throws IOException {\n        Query query=new TermQuery(new Term(\"contents\", \"doc0\"));\n        \n        RAMDirectory ramDirectory1;\n        IndexSearcher indexSearcher1;\n        Hits hits;\n        \n        ramDirectory1=new MockRAMDirectory();\n        \n        // First put the documents in the same index\n        initIndex(ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(ramDirectory1, nDocs, false, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1);\n        \n        hits=indexSearcher1.search(query);\n        \n        assertEquals(message, 2, hits.length());\n        \n        assertEquals(message, 1, hits.score(0), 1e-6); // hits.score(0) is 0.594535 if only a single document is in first index\n        \n        // Store the scores for use later\n        float[] scores={ hits.score(0), hits.score(1) };\n        \n        assertTrue(message, scores[0] > scores[1]);\n        \n        indexSearcher1.close();\n        ramDirectory1.close();\n        hits=null;\n        \n        \n        \n        RAMDirectory ramDirectory2;\n        IndexSearcher indexSearcher2;\n        \n        ramDirectory1=new MockRAMDirectory();\n        ramDirectory2=new MockRAMDirectory();\n        \n        // Now put the documents in a different index\n        initIndex(ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(ramDirectory2, nDocs, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1);\n        indexSearcher2=new IndexSearcher(ramDirectory2);\n        \n        Searcher searcher=getMultiSearcherInstance(new Searcher[] { indexSearcher1, indexSearcher2 });\n        \n        hits=searcher.search(query);\n        \n        assertEquals(message, 2, hits.length());\n        \n        // The scores should be the same (within reason)\n        assertEquals(message, scores[0], hits.score(0), 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits.score(1), 1e-6); // This will a document from ramDirectory2\n        \n        \n        \n        // Adding a Sort.RELEVANCE object should not change anything\n        hits=searcher.search(query, Sort.RELEVANCE);\n        \n        assertEquals(message, 2, hits.length());\n        \n        assertEquals(message, scores[0], hits.score(0), 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits.score(1), 1e-6); // This will a document from ramDirectory2\n        \n        searcher.close();\n        \n        ramDirectory1.close();\n        ramDirectory2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3965529a7891904512492d9c6a0c4dc6323899bc","date":1243970180,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiSearcher#testNormalization(int,String).mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiSearcher#testNormalization(int,String).mjava","sourceNew":"    private void testNormalization(int nDocs, String message) throws IOException {\n        Query query=new TermQuery(new Term(\"contents\", \"doc0\"));\n        \n        RAMDirectory ramDirectory1;\n        IndexSearcher indexSearcher1;\n        ScoreDoc[] hits;\n        \n        ramDirectory1=new MockRAMDirectory();\n        \n        // First put the documents in the same index\n        initIndex(ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(ramDirectory1, nDocs, false, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        \n        hits=indexSearcher1.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // Store the scores for use later\n        float[] scores={ hits[0].score, hits[1].score };\n        \n        assertTrue(message, scores[0] > scores[1]);\n        \n        indexSearcher1.close();\n        ramDirectory1.close();\n        hits=null;\n        \n        \n        \n        RAMDirectory ramDirectory2;\n        IndexSearcher indexSearcher2;\n        \n        ramDirectory1=new MockRAMDirectory();\n        ramDirectory2=new MockRAMDirectory();\n        \n        // Now put the documents in a different index\n        initIndex(ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(ramDirectory2, nDocs, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        indexSearcher2=new IndexSearcher(ramDirectory2);\n        indexSearcher2.setDefaultFieldSortScoring(true, true);\n        \n        Searcher searcher=getMultiSearcherInstance(new Searcher[] { indexSearcher1, indexSearcher2 });\n        \n        hits=searcher.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // The scores should be the same (within reason)\n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        \n        \n        // Adding a Sort.RELEVANCE object should not change anything\n        hits=searcher.search(query, null, 1000, Sort.RELEVANCE).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        searcher.close();\n        \n        ramDirectory1.close();\n        ramDirectory2.close();\n    }\n\n","sourceOld":"    private void testNormalization(int nDocs, String message) throws IOException {\n        Query query=new TermQuery(new Term(\"contents\", \"doc0\"));\n        \n        RAMDirectory ramDirectory1;\n        IndexSearcher indexSearcher1;\n        ScoreDoc[] hits;\n        \n        ramDirectory1=new MockRAMDirectory();\n        \n        // First put the documents in the same index\n        initIndex(ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(ramDirectory1, nDocs, false, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1);\n        \n        hits=indexSearcher1.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // Store the scores for use later\n        float[] scores={ hits[0].score, hits[1].score };\n        \n        assertTrue(message, scores[0] > scores[1]);\n        \n        indexSearcher1.close();\n        ramDirectory1.close();\n        hits=null;\n        \n        \n        \n        RAMDirectory ramDirectory2;\n        IndexSearcher indexSearcher2;\n        \n        ramDirectory1=new MockRAMDirectory();\n        ramDirectory2=new MockRAMDirectory();\n        \n        // Now put the documents in a different index\n        initIndex(ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(ramDirectory2, nDocs, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1);\n        indexSearcher2=new IndexSearcher(ramDirectory2);\n        \n        Searcher searcher=getMultiSearcherInstance(new Searcher[] { indexSearcher1, indexSearcher2 });\n        \n        hits=searcher.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // The scores should be the same (within reason)\n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        \n        \n        // Adding a Sort.RELEVANCE object should not change anything\n        hits=searcher.search(query, null, 1000, Sort.RELEVANCE).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        searcher.close();\n        \n        ramDirectory1.close();\n        ramDirectory2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiSearcher#testNormalization(int,String).mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiSearcher#testNormalization(int,String).mjava","sourceNew":"    private void testNormalization(int nDocs, String message) throws IOException {\n        Query query=new TermQuery(new Term(\"contents\", \"doc0\"));\n        \n        RAMDirectory ramDirectory1;\n        IndexSearcher indexSearcher1;\n        ScoreDoc[] hits;\n        \n        ramDirectory1=new MockRAMDirectory();\n        \n        // First put the documents in the same index\n        initIndex(ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(ramDirectory1, nDocs, false, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1, true);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        \n        hits=indexSearcher1.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // Store the scores for use later\n        float[] scores={ hits[0].score, hits[1].score };\n        \n        assertTrue(message, scores[0] > scores[1]);\n        \n        indexSearcher1.close();\n        ramDirectory1.close();\n        hits=null;\n        \n        \n        \n        RAMDirectory ramDirectory2;\n        IndexSearcher indexSearcher2;\n        \n        ramDirectory1=new MockRAMDirectory();\n        ramDirectory2=new MockRAMDirectory();\n        \n        // Now put the documents in a different index\n        initIndex(ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(ramDirectory2, nDocs, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1, true);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        indexSearcher2=new IndexSearcher(ramDirectory2, true);\n        indexSearcher2.setDefaultFieldSortScoring(true, true);\n        \n        Searcher searcher=getMultiSearcherInstance(new Searcher[] { indexSearcher1, indexSearcher2 });\n        \n        hits=searcher.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // The scores should be the same (within reason)\n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        \n        \n        // Adding a Sort.RELEVANCE object should not change anything\n        hits=searcher.search(query, null, 1000, Sort.RELEVANCE).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        searcher.close();\n        \n        ramDirectory1.close();\n        ramDirectory2.close();\n    }\n\n","sourceOld":"    private void testNormalization(int nDocs, String message) throws IOException {\n        Query query=new TermQuery(new Term(\"contents\", \"doc0\"));\n        \n        RAMDirectory ramDirectory1;\n        IndexSearcher indexSearcher1;\n        ScoreDoc[] hits;\n        \n        ramDirectory1=new MockRAMDirectory();\n        \n        // First put the documents in the same index\n        initIndex(ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(ramDirectory1, nDocs, false, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        \n        hits=indexSearcher1.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // Store the scores for use later\n        float[] scores={ hits[0].score, hits[1].score };\n        \n        assertTrue(message, scores[0] > scores[1]);\n        \n        indexSearcher1.close();\n        ramDirectory1.close();\n        hits=null;\n        \n        \n        \n        RAMDirectory ramDirectory2;\n        IndexSearcher indexSearcher2;\n        \n        ramDirectory1=new MockRAMDirectory();\n        ramDirectory2=new MockRAMDirectory();\n        \n        // Now put the documents in a different index\n        initIndex(ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(ramDirectory2, nDocs, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        indexSearcher2=new IndexSearcher(ramDirectory2);\n        indexSearcher2.setDefaultFieldSortScoring(true, true);\n        \n        Searcher searcher=getMultiSearcherInstance(new Searcher[] { indexSearcher1, indexSearcher2 });\n        \n        hits=searcher.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // The scores should be the same (within reason)\n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        \n        \n        // Adding a Sort.RELEVANCE object should not change anything\n        hits=searcher.search(query, null, 1000, Sort.RELEVANCE).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        searcher.close();\n        \n        ramDirectory1.close();\n        ramDirectory2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/TestMultiSearcher#testNormalization(int,String).mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiSearcher#testNormalization(int,String).mjava","sourceNew":"    private void testNormalization(int nDocs, String message) throws IOException {\n        Query query=new TermQuery(new Term(\"contents\", \"doc0\"));\n        \n        RAMDirectory ramDirectory1;\n        IndexSearcher indexSearcher1;\n        ScoreDoc[] hits;\n        \n        ramDirectory1=new MockRAMDirectory();\n        \n        // First put the documents in the same index\n        initIndex(ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(ramDirectory1, nDocs, false, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1, true);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        \n        hits=indexSearcher1.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // Store the scores for use later\n        float[] scores={ hits[0].score, hits[1].score };\n        \n        assertTrue(message, scores[0] > scores[1]);\n        \n        indexSearcher1.close();\n        ramDirectory1.close();\n        hits=null;\n        \n        \n        \n        RAMDirectory ramDirectory2;\n        IndexSearcher indexSearcher2;\n        \n        ramDirectory1=new MockRAMDirectory();\n        ramDirectory2=new MockRAMDirectory();\n        \n        // Now put the documents in a different index\n        initIndex(ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(ramDirectory2, nDocs, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1, true);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        indexSearcher2=new IndexSearcher(ramDirectory2, true);\n        indexSearcher2.setDefaultFieldSortScoring(true, true);\n        \n        Searcher searcher=getMultiSearcherInstance(new Searcher[] { indexSearcher1, indexSearcher2 });\n        \n        hits=searcher.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // The scores should be the same (within reason)\n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        \n        \n        // Adding a Sort.RELEVANCE object should not change anything\n        hits=searcher.search(query, null, 1000, Sort.RELEVANCE).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        searcher.close();\n        \n        ramDirectory1.close();\n        ramDirectory2.close();\n    }\n\n","sourceOld":"    private void testNormalization(int nDocs, String message) throws IOException {\n        Query query=new TermQuery(new Term(\"contents\", \"doc0\"));\n        \n        RAMDirectory ramDirectory1;\n        IndexSearcher indexSearcher1;\n        ScoreDoc[] hits;\n        \n        ramDirectory1=new MockRAMDirectory();\n        \n        // First put the documents in the same index\n        initIndex(ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(ramDirectory1, nDocs, false, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        \n        hits=indexSearcher1.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // Store the scores for use later\n        float[] scores={ hits[0].score, hits[1].score };\n        \n        assertTrue(message, scores[0] > scores[1]);\n        \n        indexSearcher1.close();\n        ramDirectory1.close();\n        hits=null;\n        \n        \n        \n        RAMDirectory ramDirectory2;\n        IndexSearcher indexSearcher2;\n        \n        ramDirectory1=new MockRAMDirectory();\n        ramDirectory2=new MockRAMDirectory();\n        \n        // Now put the documents in a different index\n        initIndex(ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(ramDirectory2, nDocs, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        indexSearcher2=new IndexSearcher(ramDirectory2);\n        indexSearcher2.setDefaultFieldSortScoring(true, true);\n        \n        Searcher searcher=getMultiSearcherInstance(new Searcher[] { indexSearcher1, indexSearcher2 });\n        \n        hits=searcher.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // The scores should be the same (within reason)\n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        \n        \n        // Adding a Sort.RELEVANCE object should not change anything\n        hits=searcher.search(query, null, 1000, Sort.RELEVANCE).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        searcher.close();\n        \n        ramDirectory1.close();\n        ramDirectory2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testNormalization(int,String).mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiSearcher#testNormalization(int,String).mjava","sourceNew":"    private void testNormalization(int nDocs, String message) throws IOException {\n        Query query=new TermQuery(new Term(\"contents\", \"doc0\"));\n        \n        RAMDirectory ramDirectory1;\n        IndexSearcher indexSearcher1;\n        ScoreDoc[] hits;\n        \n        ramDirectory1=new MockRAMDirectory();\n        \n        // First put the documents in the same index\n        initIndex(ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(ramDirectory1, nDocs, false, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1, true);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        \n        hits=indexSearcher1.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // Store the scores for use later\n        float[] scores={ hits[0].score, hits[1].score };\n        \n        assertTrue(message, scores[0] > scores[1]);\n        \n        indexSearcher1.close();\n        ramDirectory1.close();\n        hits=null;\n        \n        \n        \n        RAMDirectory ramDirectory2;\n        IndexSearcher indexSearcher2;\n        \n        ramDirectory1=new MockRAMDirectory();\n        ramDirectory2=new MockRAMDirectory();\n        \n        // Now put the documents in a different index\n        initIndex(ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(ramDirectory2, nDocs, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1, true);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        indexSearcher2=new IndexSearcher(ramDirectory2, true);\n        indexSearcher2.setDefaultFieldSortScoring(true, true);\n        \n        Searcher searcher=getMultiSearcherInstance(new Searcher[] { indexSearcher1, indexSearcher2 });\n        \n        hits=searcher.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // The scores should be the same (within reason)\n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        \n        \n        // Adding a Sort.RELEVANCE object should not change anything\n        hits=searcher.search(query, null, 1000, Sort.RELEVANCE).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        searcher.close();\n        \n        ramDirectory1.close();\n        ramDirectory2.close();\n    }\n\n","sourceOld":"    private void testNormalization(int nDocs, String message) throws IOException {\n        Query query=new TermQuery(new Term(\"contents\", \"doc0\"));\n        \n        RAMDirectory ramDirectory1;\n        IndexSearcher indexSearcher1;\n        ScoreDoc[] hits;\n        \n        ramDirectory1=new MockRAMDirectory();\n        \n        // First put the documents in the same index\n        initIndex(ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(ramDirectory1, nDocs, false, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1, true);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        \n        hits=indexSearcher1.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // Store the scores for use later\n        float[] scores={ hits[0].score, hits[1].score };\n        \n        assertTrue(message, scores[0] > scores[1]);\n        \n        indexSearcher1.close();\n        ramDirectory1.close();\n        hits=null;\n        \n        \n        \n        RAMDirectory ramDirectory2;\n        IndexSearcher indexSearcher2;\n        \n        ramDirectory1=new MockRAMDirectory();\n        ramDirectory2=new MockRAMDirectory();\n        \n        // Now put the documents in a different index\n        initIndex(ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(ramDirectory2, nDocs, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1, true);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        indexSearcher2=new IndexSearcher(ramDirectory2, true);\n        indexSearcher2.setDefaultFieldSortScoring(true, true);\n        \n        Searcher searcher=getMultiSearcherInstance(new Searcher[] { indexSearcher1, indexSearcher2 });\n        \n        hits=searcher.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // The scores should be the same (within reason)\n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        \n        \n        // Adding a Sort.RELEVANCE object should not change anything\n        hits=searcher.search(query, null, 1000, Sort.RELEVANCE).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        searcher.close();\n        \n        ramDirectory1.close();\n        ramDirectory2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3965529a7891904512492d9c6a0c4dc6323899bc":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["3965529a7891904512492d9c6a0c4dc6323899bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["3965529a7891904512492d9c6a0c4dc6323899bc","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["d72db039743bd6a2da9be6306f57c71654ca1bf6"],"d72db039743bd6a2da9be6306f57c71654ca1bf6":["1c88b3d0bf235942b9ead3322cac5fcee1e732d8"],"1c88b3d0bf235942b9ead3322cac5fcee1e732d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0a046c0c310bc77931fc8441bd920053b607dd14"]},"commit2Childs":{"3965529a7891904512492d9c6a0c4dc6323899bc":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1c88b3d0bf235942b9ead3322cac5fcee1e732d8"],"0a046c0c310bc77931fc8441bd920053b607dd14":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["3965529a7891904512492d9c6a0c4dc6323899bc"],"d72db039743bd6a2da9be6306f57c71654ca1bf6":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"1c88b3d0bf235942b9ead3322cac5fcee1e732d8":["d72db039743bd6a2da9be6306f57c71654ca1bf6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}