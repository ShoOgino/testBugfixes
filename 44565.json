{"path":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstDirectory#duellReaders(CompositeReader,LeafReader).mjava","commits":[{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstDirectory#duellReaders(CompositeReader,LeafReader).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#duellReaders(CompositeReader,LeafReader).mjava","sourceNew":"  private void duellReaders(CompositeReader other, LeafReader memIndexReader)\n      throws IOException {\n    Fields memFields = memIndexReader.getTermVectors(0);\n    for (String field : FieldInfos.getIndexedFields(other)) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = MultiDocValues.getNormValues(other, field);\n        NumericDocValues memNormValues = memIndexReader.getNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(0, normValues.nextDoc());\n          assertEquals(0, memNormValues.nextDoc());\n          assertEquals(normValues.longValue(), memNormValues.longValue());\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator();\n        TermsEnum memTermsIter = memTerms.iterator();\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null, PostingsEnum.ALL);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null, PostingsEnum.ALL);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n\n                if (iwTerms.hasPayloads()) {\n                  assertEquals(iwDocsAndPos.getPayload(), memDocsAndPos.getPayload());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","sourceOld":"  private void duellReaders(CompositeReader other, LeafReader memIndexReader)\n      throws IOException {\n    Fields memFields = memIndexReader.getTermVectors(0);\n    for (String field : FieldInfos.getIndexedFields(other)) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = MultiDocValues.getNormValues(other, field);\n        NumericDocValues memNormValues = memIndexReader.getNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(0, normValues.nextDoc());\n          assertEquals(0, memNormValues.nextDoc());\n          assertEquals(normValues.longValue(), memNormValues.longValue());\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator();\n        TermsEnum memTermsIter = memTerms.iterator();\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null, PostingsEnum.ALL);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null, PostingsEnum.ALL);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n\n                if (iwTerms.hasPayloads()) {\n                  assertEquals(iwDocsAndPos.getPayload(), memDocsAndPos.getPayload());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d77dafd89756a5161d244985903e3487ca109182":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d77dafd89756a5161d244985903e3487ca109182"],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}