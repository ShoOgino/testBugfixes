{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/WildcardQueryNodeProcessor#analyzeWildcard(Analyzer,String,String).mjava","commits":[{"id":"ea4107f60b9f95623c16025c9c247412ff809092","date":1468333987,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/WildcardQueryNodeProcessor#analyzeWildcard(Analyzer,String,String).mjava","pathOld":"/dev/null","sourceNew":"  // because we call utf8ToString, this will only work with the default TermToBytesRefAttribute\n  private static String analyzeWildcard(Analyzer a, String field, String wildcard) {\n    // best effort to not pass the wildcard characters through #normalize\n    Matcher wildcardMatcher = WILDCARD_PATTERN.matcher(wildcard);\n    StringBuilder sb = new StringBuilder();\n    int last = 0;\n\n    while (wildcardMatcher.find()){\n      // continue if escaped char\n      if (wildcardMatcher.group(1) != null){\n        continue;\n      }\n\n      if (wildcardMatcher.start() > 0){\n        String chunk = wildcard.substring(last, wildcardMatcher.start());\n        BytesRef normalized = a.normalize(field, chunk);\n        sb.append(normalized.utf8ToString());\n      }\n      //append the wildcard character\n      sb.append(wildcardMatcher.group(2));\n\n      last = wildcardMatcher.end();\n    }\n    if (last < wildcard.length()){\n      String chunk = wildcard.substring(last);\n      BytesRef normalized = a.normalize(field, chunk);\n      sb.append(normalized.utf8ToString());\n    }\n    return sb.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/WildcardQueryNodeProcessor#analyzeWildcard(Analyzer,String,String).mjava","pathOld":"/dev/null","sourceNew":"  // because we call utf8ToString, this will only work with the default TermToBytesRefAttribute\n  private static String analyzeWildcard(Analyzer a, String field, String wildcard) {\n    // best effort to not pass the wildcard characters through #normalize\n    Matcher wildcardMatcher = WILDCARD_PATTERN.matcher(wildcard);\n    StringBuilder sb = new StringBuilder();\n    int last = 0;\n\n    while (wildcardMatcher.find()){\n      // continue if escaped char\n      if (wildcardMatcher.group(1) != null){\n        continue;\n      }\n\n      if (wildcardMatcher.start() > 0){\n        String chunk = wildcard.substring(last, wildcardMatcher.start());\n        BytesRef normalized = a.normalize(field, chunk);\n        sb.append(normalized.utf8ToString());\n      }\n      //append the wildcard character\n      sb.append(wildcardMatcher.group(2));\n\n      last = wildcardMatcher.end();\n    }\n    if (last < wildcard.length()){\n      String chunk = wildcard.substring(last);\n      BytesRef normalized = a.normalize(field, chunk);\n      sb.append(normalized.utf8ToString());\n    }\n    return sb.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ea4107f60b9f95623c16025c9c247412ff809092":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ea4107f60b9f95623c16025c9c247412ff809092"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ea4107f60b9f95623c16025c9c247412ff809092"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ea4107f60b9f95623c16025c9c247412ff809092","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"ea4107f60b9f95623c16025c9c247412ff809092":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}