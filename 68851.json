{"path":"lucene/core/src/test/org/apache/lucene/index/TestFieldUpdatesBuffer#testUpdateShareValuesBinary().mjava","commits":[{"id":"28211671436f185419b3f7e53ccfc3911441ab65","date":1544026960,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldUpdatesBuffer#testUpdateShareValuesBinary().mjava","pathOld":"/dev/null","sourceNew":"  public void testUpdateShareValuesBinary() throws IOException {\n    Counter counter = Counter.newCounter();\n    boolean valueForThree = random().nextBoolean();\n    DocValuesUpdate.BinaryDocValuesUpdate update =\n        new DocValuesUpdate.BinaryDocValuesUpdate(new Term(\"id\", \"0\"), \"enabled\", new BytesRef(\"\"));\n    FieldUpdatesBuffer buffer = new FieldUpdatesBuffer(counter, update, Integer.MAX_VALUE);\n    buffer.addUpdate(new Term(\"id\", \"1\"), new BytesRef(\"\"), Integer.MAX_VALUE);\n    buffer.addUpdate(new Term(\"id\", \"2\"), new BytesRef(\"\"), Integer.MAX_VALUE);\n    if (valueForThree) {\n      buffer.addUpdate(new Term(\"id\", \"3\"), new BytesRef(\"\"), Integer.MAX_VALUE);\n    } else {\n      buffer.addNoValue(new Term(\"id\", \"3\"), Integer.MAX_VALUE);\n    }\n    buffer.addUpdate(new Term(\"id\", \"4\"), new BytesRef(\"\"), Integer.MAX_VALUE);\n    FieldUpdatesBuffer.BufferedUpdateIterator iterator = buffer.iterator();\n    FieldUpdatesBuffer.BufferedUpdate value;\n    int count = 0;\n    while ((value = iterator.next()) != null) {\n      boolean hasValue = count != 3 || valueForThree;\n      assertEquals(\"\" + (count++), value.termValue.utf8ToString());\n      assertEquals(\"id\", value.termField);\n      assertEquals(hasValue, value.hasValue);\n      if (hasValue) {\n        assertEquals(new BytesRef(\"\"), value.binaryValue);\n      } else {\n        assertNull(value.binaryValue);\n      }\n      assertEquals(Integer.MAX_VALUE, value.docUpTo);\n    }\n    assertFalse(buffer.isNumeric());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb0b91dbd7ffa9329d88b6cf6d606e542fed61d8","date":1582222690,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldUpdatesBuffer#testUpdateShareValuesBinary().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldUpdatesBuffer#testUpdateShareValuesBinary().mjava","sourceNew":"  public void testUpdateShareValuesBinary() throws IOException {\n    Counter counter = Counter.newCounter();\n    boolean valueForThree = random().nextBoolean();\n    DocValuesUpdate.BinaryDocValuesUpdate update =\n        new DocValuesUpdate.BinaryDocValuesUpdate(new Term(\"id\", \"0\"), \"enabled\", new BytesRef(\"\"));\n    FieldUpdatesBuffer buffer = new FieldUpdatesBuffer(counter, update, Integer.MAX_VALUE);\n    buffer.addUpdate(new Term(\"id\", \"1\"), new BytesRef(\"\"), Integer.MAX_VALUE);\n    buffer.addUpdate(new Term(\"id\", \"2\"), new BytesRef(\"\"), Integer.MAX_VALUE);\n    if (valueForThree) {\n      buffer.addUpdate(new Term(\"id\", \"3\"), new BytesRef(\"\"), Integer.MAX_VALUE);\n    } else {\n      buffer.addNoValue(new Term(\"id\", \"3\"), Integer.MAX_VALUE);\n    }\n    buffer.addUpdate(new Term(\"id\", \"4\"), new BytesRef(\"\"), Integer.MAX_VALUE);\n    buffer.finish();\n    FieldUpdatesBuffer.BufferedUpdateIterator iterator = buffer.iterator();\n    FieldUpdatesBuffer.BufferedUpdate value;\n    int count = 0;\n    while ((value = iterator.next()) != null) {\n      boolean hasValue = count != 3 || valueForThree;\n      assertEquals(\"\" + (count++), value.termValue.utf8ToString());\n      assertEquals(\"id\", value.termField);\n      assertEquals(hasValue, value.hasValue);\n      if (hasValue) {\n        assertEquals(new BytesRef(\"\"), value.binaryValue);\n      } else {\n        assertNull(value.binaryValue);\n      }\n      assertEquals(Integer.MAX_VALUE, value.docUpTo);\n    }\n    assertFalse(buffer.isNumeric());\n  }\n\n","sourceOld":"  public void testUpdateShareValuesBinary() throws IOException {\n    Counter counter = Counter.newCounter();\n    boolean valueForThree = random().nextBoolean();\n    DocValuesUpdate.BinaryDocValuesUpdate update =\n        new DocValuesUpdate.BinaryDocValuesUpdate(new Term(\"id\", \"0\"), \"enabled\", new BytesRef(\"\"));\n    FieldUpdatesBuffer buffer = new FieldUpdatesBuffer(counter, update, Integer.MAX_VALUE);\n    buffer.addUpdate(new Term(\"id\", \"1\"), new BytesRef(\"\"), Integer.MAX_VALUE);\n    buffer.addUpdate(new Term(\"id\", \"2\"), new BytesRef(\"\"), Integer.MAX_VALUE);\n    if (valueForThree) {\n      buffer.addUpdate(new Term(\"id\", \"3\"), new BytesRef(\"\"), Integer.MAX_VALUE);\n    } else {\n      buffer.addNoValue(new Term(\"id\", \"3\"), Integer.MAX_VALUE);\n    }\n    buffer.addUpdate(new Term(\"id\", \"4\"), new BytesRef(\"\"), Integer.MAX_VALUE);\n    FieldUpdatesBuffer.BufferedUpdateIterator iterator = buffer.iterator();\n    FieldUpdatesBuffer.BufferedUpdate value;\n    int count = 0;\n    while ((value = iterator.next()) != null) {\n      boolean hasValue = count != 3 || valueForThree;\n      assertEquals(\"\" + (count++), value.termValue.utf8ToString());\n      assertEquals(\"id\", value.termField);\n      assertEquals(hasValue, value.hasValue);\n      if (hasValue) {\n        assertEquals(new BytesRef(\"\"), value.binaryValue);\n      } else {\n        assertNull(value.binaryValue);\n      }\n      assertEquals(Integer.MAX_VALUE, value.docUpTo);\n    }\n    assertFalse(buffer.isNumeric());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb0b91dbd7ffa9329d88b6cf6d606e542fed61d8":["28211671436f185419b3f7e53ccfc3911441ab65"],"28211671436f185419b3f7e53ccfc3911441ab65":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb0b91dbd7ffa9329d88b6cf6d606e542fed61d8"]},"commit2Childs":{"fb0b91dbd7ffa9329d88b6cf6d606e542fed61d8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"28211671436f185419b3f7e53ccfc3911441ab65":["fb0b91dbd7ffa9329d88b6cf6d606e542fed61d8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["28211671436f185419b3f7e53ccfc3911441ab65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}