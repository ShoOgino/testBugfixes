{"path":"modules/join/src/test/org/apache/lucene/search/TestBlockJoin#compareHits(IndexReader,IndexReader,TopDocs,TopGroups[Integer]).mjava","commits":[{"id":"97e30c53fd81463c6ccd52402c91a6548cf42acb","date":1309296018,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/join/src/test/org/apache/lucene/search/TestBlockJoin#compareHits(IndexReader,IndexReader,TopDocs,TopGroups[Integer]).mjava","pathOld":"/dev/null","sourceNew":"  private void compareHits(IndexReader r, IndexReader joinR, TopDocs results, TopGroups<Integer> joinResults) throws Exception {\n    // results is 'complete'; joinResults is a subset\n    int resultUpto = 0;\n    int joinGroupUpto = 0;\n\n    final ScoreDoc[] hits = results.scoreDocs;\n    final GroupDocs<Integer>[] groupDocs = joinResults.groups;\n\n    while(joinGroupUpto < groupDocs.length) {\n      final GroupDocs<Integer> group = groupDocs[joinGroupUpto++];\n      final ScoreDoc[] groupHits = group.scoreDocs;\n      assertNotNull(group.groupValue);\n      final Document parentDoc = joinR.document(group.groupValue);\n      final String parentID = parentDoc.get(\"parentID\");\n      //System.out.println(\"GROUP groupDoc=\" + group.groupDoc + \" parent=\" + parentDoc);\n      assertNotNull(parentID);\n      assertTrue(groupHits.length > 0);\n      for(int hitIDX=0;hitIDX<groupHits.length;hitIDX++) {\n        final Document nonJoinHit = r.document(hits[resultUpto++].doc);\n        final Document joinHit = joinR.document(groupHits[hitIDX].doc);\n        assertEquals(parentID,\n                     nonJoinHit.get(\"parentID\"));\n        assertEquals(joinHit.get(\"childID\"),\n                     nonJoinHit.get(\"childID\"));\n      }\n\n      if (joinGroupUpto < groupDocs.length) {\n        // Advance non-join hit to the next parentID:\n        //System.out.println(\"  next joingroupUpto=\" + joinGroupUpto + \" gd.length=\" + groupDocs.length + \" parentID=\" + parentID);\n        while(true) {\n          assertTrue(resultUpto < hits.length);\n          if (!parentID.equals(r.document(hits[resultUpto].doc).get(\"parentID\"))) {\n            break;\n          }\n          resultUpto++;\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/join/src/test/org/apache/lucene/search/TestBlockJoin#compareHits(IndexReader,IndexReader,TopDocs,TopGroups[Integer]).mjava","pathOld":"/dev/null","sourceNew":"  private void compareHits(IndexReader r, IndexReader joinR, TopDocs results, TopGroups<Integer> joinResults) throws Exception {\n    // results is 'complete'; joinResults is a subset\n    int resultUpto = 0;\n    int joinGroupUpto = 0;\n\n    final ScoreDoc[] hits = results.scoreDocs;\n    final GroupDocs<Integer>[] groupDocs = joinResults.groups;\n\n    while(joinGroupUpto < groupDocs.length) {\n      final GroupDocs<Integer> group = groupDocs[joinGroupUpto++];\n      final ScoreDoc[] groupHits = group.scoreDocs;\n      assertNotNull(group.groupValue);\n      final Document parentDoc = joinR.document(group.groupValue);\n      final String parentID = parentDoc.get(\"parentID\");\n      //System.out.println(\"GROUP groupDoc=\" + group.groupDoc + \" parent=\" + parentDoc);\n      assertNotNull(parentID);\n      assertTrue(groupHits.length > 0);\n      for(int hitIDX=0;hitIDX<groupHits.length;hitIDX++) {\n        final Document nonJoinHit = r.document(hits[resultUpto++].doc);\n        final Document joinHit = joinR.document(groupHits[hitIDX].doc);\n        assertEquals(parentID,\n                     nonJoinHit.get(\"parentID\"));\n        assertEquals(joinHit.get(\"childID\"),\n                     nonJoinHit.get(\"childID\"));\n      }\n\n      if (joinGroupUpto < groupDocs.length) {\n        // Advance non-join hit to the next parentID:\n        //System.out.println(\"  next joingroupUpto=\" + joinGroupUpto + \" gd.length=\" + groupDocs.length + \" parentID=\" + parentID);\n        while(true) {\n          assertTrue(resultUpto < hits.length);\n          if (!parentID.equals(r.document(hits[resultUpto].doc).get(\"parentID\"))) {\n            break;\n          }\n          resultUpto++;\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/join/src/test/org/apache/lucene/search/TestBlockJoin#compareHits(IndexReader,IndexReader,TopDocs,TopGroups[Integer]).mjava","pathOld":"/dev/null","sourceNew":"  private void compareHits(IndexReader r, IndexReader joinR, TopDocs results, TopGroups<Integer> joinResults) throws Exception {\n    // results is 'complete'; joinResults is a subset\n    int resultUpto = 0;\n    int joinGroupUpto = 0;\n\n    final ScoreDoc[] hits = results.scoreDocs;\n    final GroupDocs<Integer>[] groupDocs = joinResults.groups;\n\n    while(joinGroupUpto < groupDocs.length) {\n      final GroupDocs<Integer> group = groupDocs[joinGroupUpto++];\n      final ScoreDoc[] groupHits = group.scoreDocs;\n      assertNotNull(group.groupValue);\n      final Document parentDoc = joinR.document(group.groupValue);\n      final String parentID = parentDoc.get(\"parentID\");\n      //System.out.println(\"GROUP groupDoc=\" + group.groupDoc + \" parent=\" + parentDoc);\n      assertNotNull(parentID);\n      assertTrue(groupHits.length > 0);\n      for(int hitIDX=0;hitIDX<groupHits.length;hitIDX++) {\n        final Document nonJoinHit = r.document(hits[resultUpto++].doc);\n        final Document joinHit = joinR.document(groupHits[hitIDX].doc);\n        assertEquals(parentID,\n                     nonJoinHit.get(\"parentID\"));\n        assertEquals(joinHit.get(\"childID\"),\n                     nonJoinHit.get(\"childID\"));\n      }\n\n      if (joinGroupUpto < groupDocs.length) {\n        // Advance non-join hit to the next parentID:\n        //System.out.println(\"  next joingroupUpto=\" + joinGroupUpto + \" gd.length=\" + groupDocs.length + \" parentID=\" + parentID);\n        while(true) {\n          assertTrue(resultUpto < hits.length);\n          if (!parentID.equals(r.document(hits[resultUpto].doc).get(\"parentID\"))) {\n            break;\n          }\n          resultUpto++;\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f76ccdfca879f9e8881676ce0fb611f44c0f07a2","date":1322905997,"type":5,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#compareHits(IndexReader,IndexReader,TopDocs,TopGroups[Integer]).mjava","pathOld":"modules/join/src/test/org/apache/lucene/search/TestBlockJoin#compareHits(IndexReader,IndexReader,TopDocs,TopGroups[Integer]).mjava","sourceNew":"  private void compareHits(IndexReader r, IndexReader joinR, TopDocs results, TopGroups<Integer> joinResults) throws Exception {\n    // results is 'complete'; joinResults is a subset\n    int resultUpto = 0;\n    int joinGroupUpto = 0;\n\n    final ScoreDoc[] hits = results.scoreDocs;\n    final GroupDocs<Integer>[] groupDocs = joinResults.groups;\n\n    while(joinGroupUpto < groupDocs.length) {\n      final GroupDocs<Integer> group = groupDocs[joinGroupUpto++];\n      final ScoreDoc[] groupHits = group.scoreDocs;\n      assertNotNull(group.groupValue);\n      final Document parentDoc = joinR.document(group.groupValue);\n      final String parentID = parentDoc.get(\"parentID\");\n      //System.out.println(\"GROUP groupDoc=\" + group.groupDoc + \" parent=\" + parentDoc);\n      assertNotNull(parentID);\n      assertTrue(groupHits.length > 0);\n      for(int hitIDX=0;hitIDX<groupHits.length;hitIDX++) {\n        final Document nonJoinHit = r.document(hits[resultUpto++].doc);\n        final Document joinHit = joinR.document(groupHits[hitIDX].doc);\n        assertEquals(parentID,\n                     nonJoinHit.get(\"parentID\"));\n        assertEquals(joinHit.get(\"childID\"),\n                     nonJoinHit.get(\"childID\"));\n      }\n\n      if (joinGroupUpto < groupDocs.length) {\n        // Advance non-join hit to the next parentID:\n        //System.out.println(\"  next joingroupUpto=\" + joinGroupUpto + \" gd.length=\" + groupDocs.length + \" parentID=\" + parentID);\n        while(true) {\n          assertTrue(resultUpto < hits.length);\n          if (!parentID.equals(r.document(hits[resultUpto].doc).get(\"parentID\"))) {\n            break;\n          }\n          resultUpto++;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void compareHits(IndexReader r, IndexReader joinR, TopDocs results, TopGroups<Integer> joinResults) throws Exception {\n    // results is 'complete'; joinResults is a subset\n    int resultUpto = 0;\n    int joinGroupUpto = 0;\n\n    final ScoreDoc[] hits = results.scoreDocs;\n    final GroupDocs<Integer>[] groupDocs = joinResults.groups;\n\n    while(joinGroupUpto < groupDocs.length) {\n      final GroupDocs<Integer> group = groupDocs[joinGroupUpto++];\n      final ScoreDoc[] groupHits = group.scoreDocs;\n      assertNotNull(group.groupValue);\n      final Document parentDoc = joinR.document(group.groupValue);\n      final String parentID = parentDoc.get(\"parentID\");\n      //System.out.println(\"GROUP groupDoc=\" + group.groupDoc + \" parent=\" + parentDoc);\n      assertNotNull(parentID);\n      assertTrue(groupHits.length > 0);\n      for(int hitIDX=0;hitIDX<groupHits.length;hitIDX++) {\n        final Document nonJoinHit = r.document(hits[resultUpto++].doc);\n        final Document joinHit = joinR.document(groupHits[hitIDX].doc);\n        assertEquals(parentID,\n                     nonJoinHit.get(\"parentID\"));\n        assertEquals(joinHit.get(\"childID\"),\n                     nonJoinHit.get(\"childID\"));\n      }\n\n      if (joinGroupUpto < groupDocs.length) {\n        // Advance non-join hit to the next parentID:\n        //System.out.println(\"  next joingroupUpto=\" + joinGroupUpto + \" gd.length=\" + groupDocs.length + \" parentID=\" + parentID);\n        while(true) {\n          assertTrue(resultUpto < hits.length);\n          if (!parentID.equals(r.document(hits[resultUpto].doc).get(\"parentID\"))) {\n            break;\n          }\n          resultUpto++;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97e30c53fd81463c6ccd52402c91a6548cf42acb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f76ccdfca879f9e8881676ce0fb611f44c0f07a2":["97e30c53fd81463c6ccd52402c91a6548cf42acb"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","97e30c53fd81463c6ccd52402c91a6548cf42acb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","97e30c53fd81463c6ccd52402c91a6548cf42acb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f76ccdfca879f9e8881676ce0fb611f44c0f07a2"]},"commit2Childs":{"97e30c53fd81463c6ccd52402c91a6548cf42acb":["f76ccdfca879f9e8881676ce0fb611f44c0f07a2","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["97e30c53fd81463c6ccd52402c91a6548cf42acb","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"f76ccdfca879f9e8881676ce0fb611f44c0f07a2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}