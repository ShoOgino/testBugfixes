{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simMoveReplica(ZkNodeProps,NamedList).mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simMoveReplica(ZkNodeProps,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Move replica. This uses a similar algorithm as {@link org.apache.solr.cloud.MoveReplicaCmd#moveNormalReplica(ClusterState, NamedList, String, String, DocCollection, Replica, Slice, int, boolean)}.\n   * @param message operation details\n   * @param results operation results.\n   */\n  public void simMoveReplica(ZkNodeProps message, NamedList results) throws Exception {\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collection = message.getStr(COLLECTION_PROP);\n    String targetNode = message.getStr(\"targetNode\");\n    ClusterState clusterState = getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    String replicaName = message.getStr(REPLICA_PROP);\n    Replica replica = coll.getReplica(replicaName);\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" replica: \" + replicaName + \" does not exist\");\n    }\n    Slice slice = null;\n    for (Slice s : coll.getSlices()) {\n      if (s.getReplicas().contains(replica)) {\n        slice = s;\n      }\n    }\n    if (slice == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Replica has no 'slice' property! : \" + replica);\n    }\n\n    opDelay(collection, CollectionParams.CollectionAction.MOVEREPLICA.name());\n\n    // TODO: for now simulate moveNormalReplica sequence, where we first add new replica and then delete the old one\n\n    String newSolrCoreName = Assign.buildSolrCoreName(stateManager, coll, slice.getName(), replica.getType());\n    String coreNodeName = Assign.assignCoreNodeName(stateManager, coll);\n    ReplicaInfo newReplica = new ReplicaInfo(coreNodeName, newSolrCoreName, collection, slice.getName(), replica.getType(), targetNode, null);\n    LOG.debug(\"-- new replica: \" + newReplica);\n    // xxx should run leader election here already?\n    simAddReplica(targetNode, newReplica, false);\n    // this will trigger leader election\n    simRemoveReplica(replica.getNodeName(), replica.getName());\n    results.add(\"success\", \"\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simMoveReplica(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simMoveReplica(ZkNodeProps,NamedList).mjava","sourceNew":"  /**\n   * Move replica. This uses a similar algorithm as {@link org.apache.solr.cloud.api.collections.MoveReplicaCmd#moveNormalReplica(ClusterState, NamedList, String, String, DocCollection, Replica, Slice, int, boolean)}.\n   * @param message operation details\n   * @param results operation results.\n   */\n  public void simMoveReplica(ZkNodeProps message, NamedList results) throws Exception {\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collection = message.getStr(COLLECTION_PROP);\n    String targetNode = message.getStr(\"targetNode\");\n    ClusterState clusterState = getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    String replicaName = message.getStr(REPLICA_PROP);\n    Replica replica = coll.getReplica(replicaName);\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" replica: \" + replicaName + \" does not exist\");\n    }\n    Slice slice = null;\n    for (Slice s : coll.getSlices()) {\n      if (s.getReplicas().contains(replica)) {\n        slice = s;\n      }\n    }\n    if (slice == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Replica has no 'slice' property! : \" + replica);\n    }\n\n    opDelay(collection, CollectionParams.CollectionAction.MOVEREPLICA.name());\n\n    // TODO: for now simulate moveNormalReplica sequence, where we first add new replica and then delete the old one\n\n    String newSolrCoreName = Assign.buildSolrCoreName(stateManager, coll, slice.getName(), replica.getType());\n    String coreNodeName = Assign.assignCoreNodeName(stateManager, coll);\n    ReplicaInfo newReplica = new ReplicaInfo(coreNodeName, newSolrCoreName, collection, slice.getName(), replica.getType(), targetNode, null);\n    LOG.debug(\"-- new replica: \" + newReplica);\n    // xxx should run leader election here already?\n    simAddReplica(targetNode, newReplica, false);\n    // this will trigger leader election\n    simRemoveReplica(replica.getNodeName(), replica.getName());\n    results.add(\"success\", \"\");\n  }\n\n","sourceOld":"  /**\n   * Move replica. This uses a similar algorithm as {@link org.apache.solr.cloud.MoveReplicaCmd#moveNormalReplica(ClusterState, NamedList, String, String, DocCollection, Replica, Slice, int, boolean)}.\n   * @param message operation details\n   * @param results operation results.\n   */\n  public void simMoveReplica(ZkNodeProps message, NamedList results) throws Exception {\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collection = message.getStr(COLLECTION_PROP);\n    String targetNode = message.getStr(\"targetNode\");\n    ClusterState clusterState = getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    String replicaName = message.getStr(REPLICA_PROP);\n    Replica replica = coll.getReplica(replicaName);\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" replica: \" + replicaName + \" does not exist\");\n    }\n    Slice slice = null;\n    for (Slice s : coll.getSlices()) {\n      if (s.getReplicas().contains(replica)) {\n        slice = s;\n      }\n    }\n    if (slice == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Replica has no 'slice' property! : \" + replica);\n    }\n\n    opDelay(collection, CollectionParams.CollectionAction.MOVEREPLICA.name());\n\n    // TODO: for now simulate moveNormalReplica sequence, where we first add new replica and then delete the old one\n\n    String newSolrCoreName = Assign.buildSolrCoreName(stateManager, coll, slice.getName(), replica.getType());\n    String coreNodeName = Assign.assignCoreNodeName(stateManager, coll);\n    ReplicaInfo newReplica = new ReplicaInfo(coreNodeName, newSolrCoreName, collection, slice.getName(), replica.getType(), targetNode, null);\n    LOG.debug(\"-- new replica: \" + newReplica);\n    // xxx should run leader election here already?\n    simAddReplica(targetNode, newReplica, false);\n    // this will trigger leader election\n    simRemoveReplica(replica.getNodeName(), replica.getName());\n    results.add(\"success\", \"\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simMoveReplica(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simMoveReplica(ZkNodeProps,NamedList).mjava","sourceNew":"  /**\n   * Move replica. This uses a similar algorithm as {@link org.apache.solr.cloud.api.collections.MoveReplicaCmd#moveNormalReplica(ClusterState, NamedList, String, String, DocCollection, Replica, Slice, int, boolean)}.\n   * @param message operation details\n   * @param results operation results.\n   */\n  public void simMoveReplica(ZkNodeProps message, NamedList results) throws Exception {\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collection = message.getStr(COLLECTION_PROP);\n    String targetNode = message.getStr(\"targetNode\");\n    ClusterState clusterState = getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    String replicaName = message.getStr(REPLICA_PROP);\n    Replica replica = coll.getReplica(replicaName);\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" replica: \" + replicaName + \" does not exist\");\n    }\n    Slice slice = null;\n    for (Slice s : coll.getSlices()) {\n      if (s.getReplicas().contains(replica)) {\n        slice = s;\n      }\n    }\n    if (slice == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Replica has no 'slice' property! : \" + replica);\n    }\n\n    opDelay(collection, CollectionParams.CollectionAction.MOVEREPLICA.name());\n\n    // TODO: for now simulate moveNormalReplica sequence, where we first add new replica and then delete the old one\n\n    String newSolrCoreName = Assign.buildSolrCoreName(stateManager, coll, slice.getName(), replica.getType());\n    String coreNodeName = Assign.assignCoreNodeName(stateManager, coll);\n    ReplicaInfo newReplica = new ReplicaInfo(coreNodeName, newSolrCoreName, collection, slice.getName(), replica.getType(), targetNode, null);\n    LOG.debug(\"-- new replica: \" + newReplica);\n    // xxx should run leader election here already?\n    simAddReplica(targetNode, newReplica, false);\n    // this will trigger leader election\n    simRemoveReplica(replica.getNodeName(), replica.getName());\n    results.add(\"success\", \"\");\n  }\n\n","sourceOld":"  /**\n   * Move replica. This uses a similar algorithm as {@link org.apache.solr.cloud.MoveReplicaCmd#moveNormalReplica(ClusterState, NamedList, String, String, DocCollection, Replica, Slice, int, boolean)}.\n   * @param message operation details\n   * @param results operation results.\n   */\n  public void simMoveReplica(ZkNodeProps message, NamedList results) throws Exception {\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collection = message.getStr(COLLECTION_PROP);\n    String targetNode = message.getStr(\"targetNode\");\n    ClusterState clusterState = getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    String replicaName = message.getStr(REPLICA_PROP);\n    Replica replica = coll.getReplica(replicaName);\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" replica: \" + replicaName + \" does not exist\");\n    }\n    Slice slice = null;\n    for (Slice s : coll.getSlices()) {\n      if (s.getReplicas().contains(replica)) {\n        slice = s;\n      }\n    }\n    if (slice == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Replica has no 'slice' property! : \" + replica);\n    }\n\n    opDelay(collection, CollectionParams.CollectionAction.MOVEREPLICA.name());\n\n    // TODO: for now simulate moveNormalReplica sequence, where we first add new replica and then delete the old one\n\n    String newSolrCoreName = Assign.buildSolrCoreName(stateManager, coll, slice.getName(), replica.getType());\n    String coreNodeName = Assign.assignCoreNodeName(stateManager, coll);\n    ReplicaInfo newReplica = new ReplicaInfo(coreNodeName, newSolrCoreName, collection, slice.getName(), replica.getType(), targetNode, null);\n    LOG.debug(\"-- new replica: \" + newReplica);\n    // xxx should run leader election here already?\n    simAddReplica(targetNode, newReplica, false);\n    // this will trigger leader election\n    simRemoveReplica(replica.getNodeName(), replica.getName());\n    results.add(\"success\", \"\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"042b92cf48996255bedb0c3c4bf772d7e06e4dea","date":1534272102,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simMoveReplica(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simMoveReplica(ZkNodeProps,NamedList).mjava","sourceNew":"  /**\n   * Move replica. This uses a similar algorithm as {@link org.apache.solr.cloud.api.collections.MoveReplicaCmd#moveNormalReplica(ClusterState, NamedList, String, String, DocCollection, Replica, Slice, int, boolean)}.\n   * @param message operation details\n   * @param results operation results.\n   */\n  public void simMoveReplica(ZkNodeProps message, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collection = message.getStr(COLLECTION_PROP);\n    String targetNode = message.getStr(\"targetNode\");\n    ClusterState clusterState = getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    String replicaName = message.getStr(REPLICA_PROP);\n    Replica replica = coll.getReplica(replicaName);\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" replica: \" + replicaName + \" does not exist\");\n    }\n    Slice slice = null;\n    for (Slice s : coll.getSlices()) {\n      if (s.getReplicas().contains(replica)) {\n        slice = s;\n      }\n    }\n    if (slice == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Replica has no 'slice' property! : \" + replica);\n    }\n\n    opDelay(collection, CollectionParams.CollectionAction.MOVEREPLICA.name());\n\n    // TODO: for now simulate moveNormalReplica sequence, where we first add new replica and then delete the old one\n\n    String newSolrCoreName = Assign.buildSolrCoreName(stateManager, coll, slice.getName(), replica.getType());\n    String coreNodeName = Assign.assignCoreNodeName(stateManager, coll);\n    ReplicaInfo newReplica = new ReplicaInfo(coreNodeName, newSolrCoreName, collection, slice.getName(), replica.getType(), targetNode, null);\n    LOG.debug(\"-- new replica: \" + newReplica);\n    // xxx should run leader election here already?\n    simAddReplica(targetNode, newReplica, false);\n    // this will trigger leader election\n    simRemoveReplica(replica.getNodeName(), replica.getName());\n    results.add(\"success\", \"\");\n  }\n\n","sourceOld":"  /**\n   * Move replica. This uses a similar algorithm as {@link org.apache.solr.cloud.api.collections.MoveReplicaCmd#moveNormalReplica(ClusterState, NamedList, String, String, DocCollection, Replica, Slice, int, boolean)}.\n   * @param message operation details\n   * @param results operation results.\n   */\n  public void simMoveReplica(ZkNodeProps message, NamedList results) throws Exception {\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collection = message.getStr(COLLECTION_PROP);\n    String targetNode = message.getStr(\"targetNode\");\n    ClusterState clusterState = getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    String replicaName = message.getStr(REPLICA_PROP);\n    Replica replica = coll.getReplica(replicaName);\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" replica: \" + replicaName + \" does not exist\");\n    }\n    Slice slice = null;\n    for (Slice s : coll.getSlices()) {\n      if (s.getReplicas().contains(replica)) {\n        slice = s;\n      }\n    }\n    if (slice == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Replica has no 'slice' property! : \" + replica);\n    }\n\n    opDelay(collection, CollectionParams.CollectionAction.MOVEREPLICA.name());\n\n    // TODO: for now simulate moveNormalReplica sequence, where we first add new replica and then delete the old one\n\n    String newSolrCoreName = Assign.buildSolrCoreName(stateManager, coll, slice.getName(), replica.getType());\n    String coreNodeName = Assign.assignCoreNodeName(stateManager, coll);\n    ReplicaInfo newReplica = new ReplicaInfo(coreNodeName, newSolrCoreName, collection, slice.getName(), replica.getType(), targetNode, null);\n    LOG.debug(\"-- new replica: \" + newReplica);\n    // xxx should run leader election here already?\n    simAddReplica(targetNode, newReplica, false);\n    // this will trigger leader election\n    simRemoveReplica(replica.getNodeName(), replica.getName());\n    results.add(\"success\", \"\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simMoveReplica(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simMoveReplica(ZkNodeProps,NamedList).mjava","sourceNew":"  /**\n   * Move replica. This uses a similar algorithm as {@link org.apache.solr.cloud.api.collections.MoveReplicaCmd#moveNormalReplica(ClusterState, NamedList, String, String, DocCollection, Replica, Slice, int, boolean)}.\n   * @param message operation details\n   * @param results operation results.\n   */\n  public void simMoveReplica(ZkNodeProps message, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collection = message.getStr(COLLECTION_PROP);\n    String targetNode = message.getStr(\"targetNode\");\n    ClusterState clusterState = getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    String replicaName = message.getStr(REPLICA_PROP);\n    Replica replica = coll.getReplica(replicaName);\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" replica: \" + replicaName + \" does not exist\");\n    }\n    Slice slice = null;\n    for (Slice s : coll.getSlices()) {\n      if (s.getReplicas().contains(replica)) {\n        slice = s;\n      }\n    }\n    if (slice == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Replica has no 'slice' property! : \" + replica);\n    }\n\n    opDelay(collection, CollectionParams.CollectionAction.MOVEREPLICA.name());\n\n    // TODO: for now simulate moveNormalReplica sequence, where we first add new replica and then delete the old one\n\n    String newSolrCoreName = Assign.buildSolrCoreName(stateManager, coll, slice.getName(), replica.getType());\n    String coreNodeName = Assign.assignCoreNodeName(stateManager, coll);\n    ReplicaInfo newReplica = new ReplicaInfo(coreNodeName, newSolrCoreName, collection, slice.getName(), replica.getType(), targetNode, null);\n    log.debug(\"-- new replica: \" + newReplica);\n    // xxx should run leader election here already?\n    simAddReplica(targetNode, newReplica, false);\n    // this will trigger leader election\n    simRemoveReplica(replica.getNodeName(), replica.getName());\n    results.add(\"success\", \"\");\n  }\n\n","sourceOld":"  /**\n   * Move replica. This uses a similar algorithm as {@link org.apache.solr.cloud.api.collections.MoveReplicaCmd#moveNormalReplica(ClusterState, NamedList, String, String, DocCollection, Replica, Slice, int, boolean)}.\n   * @param message operation details\n   * @param results operation results.\n   */\n  public void simMoveReplica(ZkNodeProps message, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collection = message.getStr(COLLECTION_PROP);\n    String targetNode = message.getStr(\"targetNode\");\n    ClusterState clusterState = getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    String replicaName = message.getStr(REPLICA_PROP);\n    Replica replica = coll.getReplica(replicaName);\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" replica: \" + replicaName + \" does not exist\");\n    }\n    Slice slice = null;\n    for (Slice s : coll.getSlices()) {\n      if (s.getReplicas().contains(replica)) {\n        slice = s;\n      }\n    }\n    if (slice == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Replica has no 'slice' property! : \" + replica);\n    }\n\n    opDelay(collection, CollectionParams.CollectionAction.MOVEREPLICA.name());\n\n    // TODO: for now simulate moveNormalReplica sequence, where we first add new replica and then delete the old one\n\n    String newSolrCoreName = Assign.buildSolrCoreName(stateManager, coll, slice.getName(), replica.getType());\n    String coreNodeName = Assign.assignCoreNodeName(stateManager, coll);\n    ReplicaInfo newReplica = new ReplicaInfo(coreNodeName, newSolrCoreName, collection, slice.getName(), replica.getType(), targetNode, null);\n    LOG.debug(\"-- new replica: \" + newReplica);\n    // xxx should run leader election here already?\n    simAddReplica(targetNode, newReplica, false);\n    // this will trigger leader election\n    simRemoveReplica(replica.getNodeName(), replica.getName());\n    results.add(\"success\", \"\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simMoveReplica(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simMoveReplica(ZkNodeProps,NamedList).mjava","sourceNew":"  /**\n   * Move replica. This uses a similar algorithm as {@link org.apache.solr.cloud.api.collections.MoveReplicaCmd} <code>moveNormalReplica(...)</code> method.\n   * @param message operation details\n   * @param results operation results.\n   */\n  public void simMoveReplica(ZkNodeProps message, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collection = message.getStr(COLLECTION_PROP);\n    String targetNode = message.getStr(\"targetNode\");\n    ClusterState clusterState = getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    String replicaName = message.getStr(REPLICA_PROP);\n    Replica replica = coll.getReplica(replicaName);\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" replica: \" + replicaName + \" does not exist\");\n    }\n    Slice slice = null;\n    for (Slice s : coll.getSlices()) {\n      if (s.getReplicas().contains(replica)) {\n        slice = s;\n      }\n    }\n    if (slice == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Replica has no 'slice' property! : \" + replica);\n    }\n\n    opDelay(collection, CollectionParams.CollectionAction.MOVEREPLICA.name());\n\n    // TODO: for now simulate moveNormalReplica sequence, where we first add new replica and then delete the old one\n\n    String newSolrCoreName = Assign.buildSolrCoreName(stateManager, coll, slice.getName(), replica.getType());\n    String coreNodeName = Assign.assignCoreNodeName(stateManager, coll);\n    ReplicaInfo newReplica = new ReplicaInfo(coreNodeName, newSolrCoreName, collection, slice.getName(), replica.getType(), targetNode, null);\n    log.debug(\"-- new replica: \" + newReplica);\n    // xxx should run leader election here already?\n    simAddReplica(targetNode, newReplica, false);\n    // this will trigger leader election\n    simRemoveReplica(replica.getNodeName(), replica.getName());\n    results.add(\"success\", \"\");\n  }\n\n","sourceOld":"  /**\n   * Move replica. This uses a similar algorithm as {@link org.apache.solr.cloud.api.collections.MoveReplicaCmd#moveNormalReplica(ClusterState, NamedList, String, String, DocCollection, Replica, Slice, int, boolean)}.\n   * @param message operation details\n   * @param results operation results.\n   */\n  public void simMoveReplica(ZkNodeProps message, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collection = message.getStr(COLLECTION_PROP);\n    String targetNode = message.getStr(\"targetNode\");\n    ClusterState clusterState = getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    String replicaName = message.getStr(REPLICA_PROP);\n    Replica replica = coll.getReplica(replicaName);\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" replica: \" + replicaName + \" does not exist\");\n    }\n    Slice slice = null;\n    for (Slice s : coll.getSlices()) {\n      if (s.getReplicas().contains(replica)) {\n        slice = s;\n      }\n    }\n    if (slice == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Replica has no 'slice' property! : \" + replica);\n    }\n\n    opDelay(collection, CollectionParams.CollectionAction.MOVEREPLICA.name());\n\n    // TODO: for now simulate moveNormalReplica sequence, where we first add new replica and then delete the old one\n\n    String newSolrCoreName = Assign.buildSolrCoreName(stateManager, coll, slice.getName(), replica.getType());\n    String coreNodeName = Assign.assignCoreNodeName(stateManager, coll);\n    ReplicaInfo newReplica = new ReplicaInfo(coreNodeName, newSolrCoreName, collection, slice.getName(), replica.getType(), targetNode, null);\n    log.debug(\"-- new replica: \" + newReplica);\n    // xxx should run leader election here already?\n    simAddReplica(targetNode, newReplica, false);\n    // this will trigger leader election\n    simRemoveReplica(replica.getNodeName(), replica.getName());\n    results.add(\"success\", \"\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["b94236357aaa22b76c10629851fe4e376e0cea82"],"b94236357aaa22b76c10629851fe4e376e0cea82":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"]},"commit2Childs":{"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"b94236357aaa22b76c10629851fe4e376e0cea82":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}