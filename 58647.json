{"path":"lucene/core/src/java/org/apache/lucene/index/BaseCompositeReader#numDocs().mjava","commits":[{"id":"fdea49117913baff3ee1b0bb8d2c7d148e210e72","date":1331056250,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BaseCompositeReader#numDocs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BaseMultiReader#numDocs().mjava","sourceNew":"  @Override\n  public final int numDocs() {\n    // Don't call ensureOpen() here (it could affect performance)\n    return numDocs;\n  }\n\n","sourceOld":"  @Override\n  public final int numDocs() {\n    // Don't call ensureOpen() here (it could affect performance)\n    return numDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":1,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BaseCompositeReader#numDocs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BaseMultiReader#numDocs().mjava","sourceNew":"  @Override\n  public final int numDocs() {\n    // Don't call ensureOpen() here (it could affect performance)\n    return numDocs;\n  }\n\n","sourceOld":"  @Override\n  public final int numDocs() {\n    // Don't call ensureOpen() here (it could affect performance)\n    return numDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"847bd9a78f79c81e9f9a2a64410c4805e6501143","date":1571071678,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BaseCompositeReader#numDocs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BaseCompositeReader#numDocs().mjava","sourceNew":"  @Override\n  public final int numDocs() {\n    // Don't call ensureOpen() here (it could affect performance)\n    // We want to compute numDocs() lazily so that creating a wrapper that hides\n    // some documents isn't slow at wrapping time, but on the first time that\n    // numDocs() is called. This can help as there are lots of use-cases of a\n    // reader that don't involve calling numDocs().\n    // However it's not crucial to make sure that we don't call numDocs() more\n    // than once on the sub readers, since they likely cache numDocs() anyway,\n    // hence the opaque read.\n    // http://gee.cs.oswego.edu/dl/html/j9mm.html#opaquesec.\n    int numDocs = this.numDocs.getOpaque();\n    if (numDocs == -1) {\n      numDocs = 0;\n      for (IndexReader r : subReaders) {\n        numDocs += r.numDocs();\n      }\n      assert numDocs >= 0;\n      this.numDocs.set(numDocs);\n    }\n    return numDocs;\n  }\n\n","sourceOld":"  @Override\n  public final int numDocs() {\n    // Don't call ensureOpen() here (it could affect performance)\n    return numDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BaseCompositeReader#numDocs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BaseCompositeReader#numDocs().mjava","sourceNew":"  @Override\n  public final int numDocs() {\n    // Don't call ensureOpen() here (it could affect performance)\n    // We want to compute numDocs() lazily so that creating a wrapper that hides\n    // some documents isn't slow at wrapping time, but on the first time that\n    // numDocs() is called. This can help as there are lots of use-cases of a\n    // reader that don't involve calling numDocs().\n    // However it's not crucial to make sure that we don't call numDocs() more\n    // than once on the sub readers, since they likely cache numDocs() anyway,\n    // hence the opaque read.\n    // http://gee.cs.oswego.edu/dl/html/j9mm.html#opaquesec.\n    int numDocs = this.numDocs.getOpaque();\n    if (numDocs == -1) {\n      numDocs = 0;\n      for (IndexReader r : subReaders) {\n        numDocs += r.numDocs();\n      }\n      assert numDocs >= 0;\n      this.numDocs.set(numDocs);\n    }\n    return numDocs;\n  }\n\n","sourceOld":"  @Override\n  public final int numDocs() {\n    // Don't call ensureOpen() here (it could affect performance)\n    return numDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fdea49117913baff3ee1b0bb8d2c7d148e210e72":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fdea49117913baff3ee1b0bb8d2c7d148e210e72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"847bd9a78f79c81e9f9a2a64410c4805e6501143":["fdea49117913baff3ee1b0bb8d2c7d148e210e72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["847bd9a78f79c81e9f9a2a64410c4805e6501143"],"b0b597c65628ca9e73913a07e81691f8229bae35":["fdea49117913baff3ee1b0bb8d2c7d148e210e72","847bd9a78f79c81e9f9a2a64410c4805e6501143"]},"commit2Childs":{"fdea49117913baff3ee1b0bb8d2c7d148e210e72":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","847bd9a78f79c81e9f9a2a64410c4805e6501143","b0b597c65628ca9e73913a07e81691f8229bae35"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fdea49117913baff3ee1b0bb8d2c7d148e210e72","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"847bd9a78f79c81e9f9a2a64410c4805e6501143":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}