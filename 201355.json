{"path":"lucene/core/src/java/org/apache/lucene/search/Weight.DefaultBulkScorer#score(LeafCollector,int,int).mjava","commits":[{"id":"e166cc9c5f45f78a8dd02332b5ac100221063fd8","date":1421678965,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Weight.DefaultBulkScorer#score(LeafCollector,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Weight.DefaultBulkScorer#score(LeafCollector,int).mjava","sourceNew":"    @Override\n    public int score(LeafCollector collector, int min, int max) throws IOException {\n      // TODO: this may be sort of weird, when we are\n      // embedded in a BooleanScorer, because we are\n      // called for every chunk of 2048 documents.  But,\n      // then, scorer is a FakeScorer in that case, so any\n      // Collector doing something \"interesting\" in\n      // setScorer will be forced to use BS2 anyways:\n      collector.setScorer(scorer);\n      if (scorer.docID() == -1 && min == 0 && max == DocIdSetIterator.NO_MORE_DOCS) {\n        scoreAll(collector, scorer);\n        return DocIdSetIterator.NO_MORE_DOCS;\n      } else {\n        int doc = scorer.docID();\n        if (doc < min) {\n          doc = scorer.advance(min);\n        }\n        return scoreRange(collector, scorer, doc, max);\n      }\n    }\n\n","sourceOld":"    @Override\n    public boolean score(LeafCollector collector, int max) throws IOException {\n      // TODO: this may be sort of weird, when we are\n      // embedded in a BooleanScorer, because we are\n      // called for every chunk of 2048 documents.  But,\n      // then, scorer is a FakeScorer in that case, so any\n      // Collector doing something \"interesting\" in\n      // setScorer will be forced to use BS2 anyways:\n      collector.setScorer(scorer);\n      if (max == DocIdSetIterator.NO_MORE_DOCS) {\n        scoreAll(collector, scorer);\n        return false;\n      } else {\n        int doc = scorer.docID();\n        if (doc < 0) {\n          doc = scorer.nextDoc();\n        }\n        return scoreRange(collector, scorer, doc, max);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Weight.DefaultBulkScorer#score(LeafCollector,Bits,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Weight.DefaultBulkScorer#score(LeafCollector,int,int).mjava","sourceNew":"    @Override\n    public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n      collector.setScorer(scorer);\n      final TwoPhaseIterator twoPhase = scorer.asTwoPhaseIterator();\n      if (scorer.docID() == -1 && min == 0 && max == DocIdSetIterator.NO_MORE_DOCS) {\n        scoreAll(collector, scorer, twoPhase, acceptDocs);\n        return DocIdSetIterator.NO_MORE_DOCS;\n      } else {\n        int doc = scorer.docID();\n        if (doc < min) {\n          if (twoPhase == null) {\n            doc = scorer.advance(min);\n          } else {\n            doc = twoPhase.approximation().advance(min);\n          }\n        }\n        return scoreRange(collector, scorer, twoPhase, acceptDocs, doc, max);\n      }\n    }\n\n","sourceOld":"    @Override\n    public int score(LeafCollector collector, int min, int max) throws IOException {\n      // TODO: this may be sort of weird, when we are\n      // embedded in a BooleanScorer, because we are\n      // called for every chunk of 2048 documents.  But,\n      // then, scorer is a FakeScorer in that case, so any\n      // Collector doing something \"interesting\" in\n      // setScorer will be forced to use BS2 anyways:\n      collector.setScorer(scorer);\n      if (scorer.docID() == -1 && min == 0 && max == DocIdSetIterator.NO_MORE_DOCS) {\n        scoreAll(collector, scorer);\n        return DocIdSetIterator.NO_MORE_DOCS;\n      } else {\n        int doc = scorer.docID();\n        if (doc < min) {\n          doc = scorer.advance(min);\n        }\n        return scoreRange(collector, scorer, doc, max);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["e166cc9c5f45f78a8dd02332b5ac100221063fd8"],"e166cc9c5f45f78a8dd02332b5ac100221063fd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4464508ee83288c8c4585b533f9faaa93aa314"]},"commit2Childs":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e166cc9c5f45f78a8dd02332b5ac100221063fd8":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e166cc9c5f45f78a8dd02332b5ac100221063fd8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}