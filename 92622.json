{"path":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet#approximateCardinality().mjava","commits":[{"id":"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0","date":1412077943,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet#approximateCardinality().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return an approximation of the cardinality of this set, assuming that bits\n   * are uniformly distributed. This operation runs in constant time.\n   */\n  public int approximateCardinality() {\n    // this is basically the linear counting algorithm\n    final int totalLongs = (length + 63) >>> 6; // total number of longs in the space\n    assert totalLongs >= nonZeroLongCount;\n    final int zeroLongs = totalLongs - nonZeroLongCount; // number of longs that are zeros\n    // No need to guard against division by zero, it will return +Infinity and things will work as expected\n    final long estimate = Math.round(totalLongs * Math.log((double) totalLongs / zeroLongs));\n    return (int) Math.min(length, estimate);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet#approximateCardinality().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return an approximation of the cardinality of this set, assuming that bits\n   * are uniformly distributed. This operation runs in constant time.\n   */\n  public int approximateCardinality() {\n    // this is basically the linear counting algorithm\n    final int totalLongs = (length + 63) >>> 6; // total number of longs in the space\n    assert totalLongs >= nonZeroLongCount;\n    final int zeroLongs = totalLongs - nonZeroLongCount; // number of longs that are zeros\n    // No need to guard against division by zero, it will return +Infinity and things will work as expected\n    final long estimate = Math.round(totalLongs * Math.log((double) totalLongs / zeroLongs));\n    return (int) Math.min(length, estimate);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e","date":1414135939,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet#approximateCardinality().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet#approximateCardinality().mjava","sourceNew":"  @Override\n  public int approximateCardinality() {\n    // we are assuming that bits are uniformly set and use the linear counting\n    // algorithm to estimate the number of bits that are set based on the number\n    // of longs that are different from zero\n    final int totalLongs = (length + 63) >>> 6; // total number of longs in the space\n    assert totalLongs >= nonZeroLongCount;\n    final int zeroLongs = totalLongs - nonZeroLongCount; // number of longs that are zeros\n    // No need to guard against division by zero, it will return +Infinity and things will work as expected\n    final long estimate = Math.round(totalLongs * Math.log((double) totalLongs / zeroLongs));\n    return (int) Math.min(length, estimate);\n  }\n\n","sourceOld":"  /**\n   * Return an approximation of the cardinality of this set, assuming that bits\n   * are uniformly distributed. This operation runs in constant time.\n   */\n  public int approximateCardinality() {\n    // this is basically the linear counting algorithm\n    final int totalLongs = (length + 63) >>> 6; // total number of longs in the space\n    assert totalLongs >= nonZeroLongCount;\n    final int zeroLongs = totalLongs - nonZeroLongCount; // number of longs that are zeros\n    // No need to guard against division by zero, it will return +Infinity and things will work as expected\n    final long estimate = Math.round(totalLongs * Math.log((double) totalLongs / zeroLongs));\n    return (int) Math.min(length, estimate);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9a47902d6207303f5ed3e7aaca62ca33433af66","59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0":["d9a47902d6207303f5ed3e7aaca62ca33433af66","0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}