{"path":"src/java/org/apache/lucene/index/DocumentsWriter#resetPostingsData().mjava","commits":[{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter#resetPostingsData().mjava","pathOld":"/dev/null","sourceNew":"  /** Reset after a flush */\n  private void resetPostingsData() throws IOException {\n    // All ThreadStates should be idle when we are called\n    assert allThreadsIdle();\n    for(int i=0;i<threadStates.length;i++) {\n      threadStates[i].resetPostings();\n      threadStates[i].numThreads = 0;\n    }\n    threadBindings.clear();\n    numBytesUsed = 0;\n    balanceRAM();\n    postingsIsFull = false;\n    flushPending = false;\n    segment = null;\n    hasNorms = false;\n    numDocsInRAM = 0;\n    nextDocID = 0;\n    nextWriteDocID = 0;\n    files = null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["176324efd1eab6bd44a6d81c27c9b3a1a175ba3d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6754b3085e8633adf1ed1ac8bac35fb34a06cf97","date":1183575801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter#resetPostingsData().mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#resetPostingsData().mjava","sourceNew":"  /** Reset after a flush */\n  private void resetPostingsData() throws IOException {\n    // All ThreadStates should be idle when we are called\n    assert allThreadsIdle();\n    for(int i=0;i<threadStates.length;i++) {\n      threadStates[i].resetPostings();\n      threadStates[i].numThreads = 0;\n    }\n    threadBindings.clear();\n    numBytesUsed = 0;\n    balanceRAM();\n    postingsIsFull = false;\n    flushPending = false;\n    segment = null;\n    numDocsInRAM = 0;\n    nextDocID = 0;\n    nextWriteDocID = 0;\n    files = null;\n  }\n\n","sourceOld":"  /** Reset after a flush */\n  private void resetPostingsData() throws IOException {\n    // All ThreadStates should be idle when we are called\n    assert allThreadsIdle();\n    for(int i=0;i<threadStates.length;i++) {\n      threadStates[i].resetPostings();\n      threadStates[i].numThreads = 0;\n    }\n    threadBindings.clear();\n    numBytesUsed = 0;\n    balanceRAM();\n    postingsIsFull = false;\n    flushPending = false;\n    segment = null;\n    hasNorms = false;\n    numDocsInRAM = 0;\n    nextDocID = 0;\n    nextWriteDocID = 0;\n    files = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2558ddf9e14a97bc597f5b72bb3ecb5b7f6bba8e","date":1191352543,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter#resetPostingsData().mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#resetPostingsData().mjava","sourceNew":"  /** Reset after a flush */\n  private void resetPostingsData() throws IOException {\n    // All ThreadStates should be idle when we are called\n    assert allThreadsIdle();\n    for(int i=0;i<threadStates.length;i++) {\n      threadStates[i].resetPostings();\n      threadStates[i].numThreads = 0;\n    }\n    threadBindings.clear();\n    numBytesUsed = 0;\n    balanceRAM();\n    bufferIsFull = false;\n    flushPending = false;\n    segment = null;\n    numDocsInRAM = 0;\n    nextDocID = 0;\n    nextWriteDocID = 0;\n    files = null;\n  }\n\n","sourceOld":"  /** Reset after a flush */\n  private void resetPostingsData() throws IOException {\n    // All ThreadStates should be idle when we are called\n    assert allThreadsIdle();\n    for(int i=0;i<threadStates.length;i++) {\n      threadStates[i].resetPostings();\n      threadStates[i].numThreads = 0;\n    }\n    threadBindings.clear();\n    numBytesUsed = 0;\n    balanceRAM();\n    postingsIsFull = false;\n    flushPending = false;\n    segment = null;\n    numDocsInRAM = 0;\n    nextDocID = 0;\n    nextWriteDocID = 0;\n    files = null;\n  }\n\n","bugFix":null,"bugIntro":["176324efd1eab6bd44a6d81c27c9b3a1a175ba3d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"176324efd1eab6bd44a6d81c27c9b3a1a175ba3d","date":1202734547,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter#resetPostingsData().mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#resetPostingsData().mjava","sourceNew":"  /** Reset after a flush */\n  private void resetPostingsData() throws IOException {\n    // All ThreadStates should be idle when we are called\n    assert allThreadsIdle();\n    threadBindings.clear();\n    segment = null;\n    numDocsInRAM = 0;\n    nextDocID = 0;\n    nextWriteDocID = 0;\n    files = null;\n    balanceRAM();\n    bufferIsFull = false;\n    flushPending = false;\n    for(int i=0;i<threadStates.length;i++) {\n      threadStates[i].numThreads = 0;\n      threadStates[i].resetPostings();\n    }\n    numBytesUsed = 0;\n  }\n\n","sourceOld":"  /** Reset after a flush */\n  private void resetPostingsData() throws IOException {\n    // All ThreadStates should be idle when we are called\n    assert allThreadsIdle();\n    for(int i=0;i<threadStates.length;i++) {\n      threadStates[i].resetPostings();\n      threadStates[i].numThreads = 0;\n    }\n    threadBindings.clear();\n    numBytesUsed = 0;\n    balanceRAM();\n    bufferIsFull = false;\n    flushPending = false;\n    segment = null;\n    numDocsInRAM = 0;\n    nextDocID = 0;\n    nextWriteDocID = 0;\n    files = null;\n  }\n\n","bugFix":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c","2558ddf9e14a97bc597f5b72bb3ecb5b7f6bba8e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter#doAfterFlush().mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#resetPostingsData().mjava","sourceNew":"  /** Reset after a flush */\n  private void doAfterFlush() throws IOException {\n    // All ThreadStates should be idle when we are called\n    assert allThreadsIdle();\n    threadBindings.clear();\n    waitQueue.reset();\n    segment = null;\n    numDocsInRAM = 0;\n    nextDocID = 0;\n    bufferIsFull = false;\n    flushPending = false;\n    for(int i=0;i<threadStates.length;i++)\n      threadStates[i].doAfterFlush();\n    numBytesUsed = 0;\n  }\n\n","sourceOld":"  /** Reset after a flush */\n  private void resetPostingsData() throws IOException {\n    // All ThreadStates should be idle when we are called\n    assert allThreadsIdle();\n    threadBindings.clear();\n    segment = null;\n    numDocsInRAM = 0;\n    nextDocID = 0;\n    nextWriteDocID = 0;\n    files = null;\n    balanceRAM();\n    bufferIsFull = false;\n    flushPending = false;\n    for(int i=0;i<threadStates.length;i++) {\n      threadStates[i].numThreads = 0;\n      threadStates[i].resetPostings();\n    }\n    numBytesUsed = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"176324efd1eab6bd44a6d81c27c9b3a1a175ba3d":["2558ddf9e14a97bc597f5b72bb3ecb5b7f6bba8e"],"6754b3085e8633adf1ed1ac8bac35fb34a06cf97":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2558ddf9e14a97bc597f5b72bb3ecb5b7f6bba8e":["6754b3085e8633adf1ed1ac8bac35fb34a06cf97"],"5350389bf83287111f7760b9e3db3af8e3648474":["176324efd1eab6bd44a6d81c27c9b3a1a175ba3d"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5350389bf83287111f7760b9e3db3af8e3648474"]},"commit2Childs":{"176324efd1eab6bd44a6d81c27c9b3a1a175ba3d":["5350389bf83287111f7760b9e3db3af8e3648474"],"6754b3085e8633adf1ed1ac8bac35fb34a06cf97":["2558ddf9e14a97bc597f5b72bb3ecb5b7f6bba8e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"2558ddf9e14a97bc597f5b72bb3ecb5b7f6bba8e":["176324efd1eab6bd44a6d81c27c9b3a1a175ba3d"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["6754b3085e8633adf1ed1ac8bac35fb34a06cf97"],"5350389bf83287111f7760b9e3db3af8e3648474":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}