{"path":"solr/core/src/java/org/apache/solr/update/SolrIndexSplitter.SplittingQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","commits":[{"id":"20c968c14aace7cf49843bf2c1fafc7fd3845659","date":1533133859,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexSplitter.SplittingQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          RTimerTree t = timings.sub(\"findDocsToDelete\");\n          t.resume();\n          FixedBitSet set = findDocsToDelete(context);\n          t.pause();\n          log.info(\"### partition=\" + partition + \", leaf=\" + context + \", maxDoc=\" + context.reader().maxDoc() +\n          \", numDels=\" + context.reader().numDeletedDocs() + \", setLen=\" + set.length() + \", setCard=\" + set.cardinality());\n          Bits liveDocs = context.reader().getLiveDocs();\n          if (liveDocs != null) {\n            // check that we don't delete already deleted docs\n            FixedBitSet dels = FixedBitSet.copyOf(liveDocs);\n            dels.flip(0, dels.length());\n            dels.and(set);\n            if (dels.cardinality() > 0) {\n              log.error(\"### INVALID DELS \" + dels.cardinality());\n            }\n          }\n          return new ConstantScoreScorer(this, score(), new BitSetIterator(set, set.length()));\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return false;\n        }\n\n        @Override\n        public String toString() {\n          return \"weight(shardSplittingQuery,part\" + partition + \")\";\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c226b0eeb8b028f572020f459851a663a2c064e","date":1542377651,"type":3,"author":"Christophe Bismuth","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexSplitter.SplittingQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexSplitter.SplittingQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          RTimerTree t = timings.sub(\"findDocsToDelete\");\n          t.resume();\n          FixedBitSet set = findDocsToDelete(context);\n          t.pause();\n          log.info(\"### partition=\" + partition + \", leaf=\" + context + \", maxDoc=\" + context.reader().maxDoc() +\n          \", numDels=\" + context.reader().numDeletedDocs() + \", setLen=\" + set.length() + \", setCard=\" + set.cardinality());\n          Bits liveDocs = context.reader().getLiveDocs();\n          if (liveDocs != null) {\n            // check that we don't delete already deleted docs\n            FixedBitSet dels = FixedBitSet.copyOf(liveDocs);\n            dels.flip(0, dels.length());\n            dels.and(set);\n            if (dels.cardinality() > 0) {\n              log.error(\"### INVALID DELS \" + dels.cardinality());\n            }\n          }\n          return new ConstantScoreScorer(this, score(), scoreMode, new BitSetIterator(set, set.length()));\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return false;\n        }\n\n        @Override\n        public String toString() {\n          return \"weight(shardSplittingQuery,part\" + partition + \")\";\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          RTimerTree t = timings.sub(\"findDocsToDelete\");\n          t.resume();\n          FixedBitSet set = findDocsToDelete(context);\n          t.pause();\n          log.info(\"### partition=\" + partition + \", leaf=\" + context + \", maxDoc=\" + context.reader().maxDoc() +\n          \", numDels=\" + context.reader().numDeletedDocs() + \", setLen=\" + set.length() + \", setCard=\" + set.cardinality());\n          Bits liveDocs = context.reader().getLiveDocs();\n          if (liveDocs != null) {\n            // check that we don't delete already deleted docs\n            FixedBitSet dels = FixedBitSet.copyOf(liveDocs);\n            dels.flip(0, dels.length());\n            dels.and(set);\n            if (dels.cardinality() > 0) {\n              log.error(\"### INVALID DELS \" + dels.cardinality());\n            }\n          }\n          return new ConstantScoreScorer(this, score(), new BitSetIterator(set, set.length()));\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return false;\n        }\n\n        @Override\n        public String toString() {\n          return \"weight(shardSplittingQuery,part\" + partition + \")\";\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"740d649f013f07efbeb73ca854f106c60166e7c0","date":1587431295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexSplitter.SplittingQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexSplitter.SplittingQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          RTimerTree t = timings.sub(\"findDocsToDelete\");\n          t.resume();\n          FixedBitSet set = findDocsToDelete(context);\n          t.pause();\n          if (log.isInfoEnabled()) {\n            log.info(\"### partition={}, leaf={}, maxDoc={}, numDels={}, setLen={}, setCard={}\"\n            , partition, context, context.reader().maxDoc()\n            ,context.reader().numDeletedDocs(), set.length(), set.cardinality());\n          }\n          Bits liveDocs = context.reader().getLiveDocs();\n          if (liveDocs != null) {\n            // check that we don't delete already deleted docs\n            FixedBitSet dels = FixedBitSet.copyOf(liveDocs);\n            dels.flip(0, dels.length());\n            dels.and(set);\n            if (dels.cardinality() > 0) {\n              log.error(\"### INVALID DELS {}\", dels.cardinality());\n            }\n          }\n          return new ConstantScoreScorer(this, score(), scoreMode, new BitSetIterator(set, set.length()));\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return false;\n        }\n\n        @Override\n        public String toString() {\n          return \"weight(shardSplittingQuery,part\" + partition + \")\";\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          RTimerTree t = timings.sub(\"findDocsToDelete\");\n          t.resume();\n          FixedBitSet set = findDocsToDelete(context);\n          t.pause();\n          log.info(\"### partition=\" + partition + \", leaf=\" + context + \", maxDoc=\" + context.reader().maxDoc() +\n          \", numDels=\" + context.reader().numDeletedDocs() + \", setLen=\" + set.length() + \", setCard=\" + set.cardinality());\n          Bits liveDocs = context.reader().getLiveDocs();\n          if (liveDocs != null) {\n            // check that we don't delete already deleted docs\n            FixedBitSet dels = FixedBitSet.copyOf(liveDocs);\n            dels.flip(0, dels.length());\n            dels.and(set);\n            if (dels.cardinality() > 0) {\n              log.error(\"### INVALID DELS \" + dels.cardinality());\n            }\n          }\n          return new ConstantScoreScorer(this, score(), scoreMode, new BitSetIterator(set, set.length()));\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return false;\n        }\n\n        @Override\n        public String toString() {\n          return \"weight(shardSplittingQuery,part\" + partition + \")\";\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"740d649f013f07efbeb73ca854f106c60166e7c0":["9c226b0eeb8b028f572020f459851a663a2c064e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9c226b0eeb8b028f572020f459851a663a2c064e":["20c968c14aace7cf49843bf2c1fafc7fd3845659"],"20c968c14aace7cf49843bf2c1fafc7fd3845659":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["740d649f013f07efbeb73ca854f106c60166e7c0"]},"commit2Childs":{"740d649f013f07efbeb73ca854f106c60166e7c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["20c968c14aace7cf49843bf2c1fafc7fd3845659"],"9c226b0eeb8b028f572020f459851a663a2c064e":["740d649f013f07efbeb73ca854f106c60166e7c0"],"20c968c14aace7cf49843bf2c1fafc7fd3845659":["9c226b0eeb8b028f572020f459851a663a2c064e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}