{"path":"lucene/monitor/src/test/org/apache/lucene/monitor/TestQueryTermComparators#testHigherWeightsArePreferred().mjava","commits":[{"id":"7c529b189e09de25455d82ebd7260748cf11ee14","date":1560415257,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/monitor/src/test/org/apache/lucene/monitor/TestQueryTermComparators#testHigherWeightsArePreferred().mjava","pathOld":"/dev/null","sourceNew":"  public void testHigherWeightsArePreferred() {\n\n    QueryTree node1 = QueryTree.term(new Term(\"f\", \"foo\"), 1);\n    QueryTree node2 = QueryTree.term(new Term(\"f\", \"foobar\"), 1.5);\n\n    QueryTree conjunction = QueryTree.conjunction(node1, node2);\n    Set<Term> terms = new HashSet<>();\n    conjunction.collectTerms((f, b) -> terms.add(new Term(f, b)));\n    Set<Term> expected = Collections.singleton(new Term(\"f\", \"foobar\"));\n    assertEquals(expected, terms);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7c529b189e09de25455d82ebd7260748cf11ee14":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7c529b189e09de25455d82ebd7260748cf11ee14"]},"commit2Childs":{"7c529b189e09de25455d82ebd7260748cf11ee14":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c529b189e09de25455d82ebd7260748cf11ee14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}