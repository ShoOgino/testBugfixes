{"path":"lucene/core/src/java/org/apache/lucene/store/RAMInputStream#slice(String,long,long).mjava","commits":[{"id":"e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3","date":1400334249,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RAMInputStream#slice(String,long,long).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: improve this, kinda stupid\n  @Override\n  public IndexInput slice(String sliceDescription, long offset, long length) throws IOException {\n    return BufferedIndexInput.wrap(sliceDescription, this, offset, length);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["18efbc72c32221d05cd225926b1cbab767337ed0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RAMInputStream#slice(String,long,long).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: improve this, kinda stupid\n  @Override\n  public IndexInput slice(String sliceDescription, long offset, long length) throws IOException {\n    return BufferedIndexInput.wrap(sliceDescription, this, offset, length);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"18efbc72c32221d05cd225926b1cbab767337ed0","date":1405497626,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RAMInputStream#slice(String,long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/RAMInputStream#slice(String,long,long).mjava","sourceNew":"  @Override\n  public IndexInput slice(String sliceDescription, final long offset, final long length) throws IOException {\n    if (offset < 0 || length < 0 || offset + length > this.length) {\n      throw new IllegalArgumentException(\"slice() \" + sliceDescription + \" out of bounds: \"  + this);\n    }\n    final String newResourceDescription = (sliceDescription == null) ? toString() : (toString() + \" [slice=\" + sliceDescription + \"]\");\n    return new RAMInputStream(newResourceDescription, file, offset + length) {\n      {\n        seek(0L);\n      }\n      \n      @Override\n      public void seek(long pos) throws IOException {\n        if (pos < 0L) {\n          throw new IllegalArgumentException(\"Seeking to negative position: \" + this);\n        }\n        super.seek(pos + offset);\n      }\n      \n      @Override\n      public long getFilePointer() {\n        return super.getFilePointer() - offset;\n      }\n\n      @Override\n      public long length() {\n        return super.length() - offset;\n      }\n\n      @Override\n      public IndexInput slice(String sliceDescription, long ofs, long len) throws IOException {\n        return super.slice(sliceDescription, offset + ofs, len);\n      }\n    };\n  }\n\n","sourceOld":"  // TODO: improve this, kinda stupid\n  @Override\n  public IndexInput slice(String sliceDescription, long offset, long length) throws IOException {\n    return BufferedIndexInput.wrap(sliceDescription, this, offset, length);\n  }\n\n","bugFix":["e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3"],"bugIntro":["54f1af08a87af1f14572b41c90f55de83d083077","7bdf5317fc9c595685174d4aaf2f25deb8eb19ae"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54f1af08a87af1f14572b41c90f55de83d083077","date":1425143806,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RAMInputStream#slice(String,long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/RAMInputStream#slice(String,long,long).mjava","sourceNew":"  @Override\n  public IndexInput slice(String sliceDescription, final long offset, final long length) throws IOException {\n    if (offset < 0 || length < 0 || offset + length > this.length) {\n      throw new IllegalArgumentException(\"slice() \" + sliceDescription + \" out of bounds: \"  + this);\n    }\n    return new RAMInputStream(getFullSliceDescription(sliceDescription), file, offset + length) {\n      {\n        seek(0L);\n      }\n      \n      @Override\n      public void seek(long pos) throws IOException {\n        if (pos < 0L) {\n          throw new IllegalArgumentException(\"Seeking to negative position: \" + this);\n        }\n        super.seek(pos + offset);\n      }\n      \n      @Override\n      public long getFilePointer() {\n        return super.getFilePointer() - offset;\n      }\n\n      @Override\n      public long length() {\n        return super.length() - offset;\n      }\n\n      @Override\n      public IndexInput slice(String sliceDescription, long ofs, long len) throws IOException {\n        return super.slice(sliceDescription, offset + ofs, len);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public IndexInput slice(String sliceDescription, final long offset, final long length) throws IOException {\n    if (offset < 0 || length < 0 || offset + length > this.length) {\n      throw new IllegalArgumentException(\"slice() \" + sliceDescription + \" out of bounds: \"  + this);\n    }\n    final String newResourceDescription = (sliceDescription == null) ? toString() : (toString() + \" [slice=\" + sliceDescription + \"]\");\n    return new RAMInputStream(newResourceDescription, file, offset + length) {\n      {\n        seek(0L);\n      }\n      \n      @Override\n      public void seek(long pos) throws IOException {\n        if (pos < 0L) {\n          throw new IllegalArgumentException(\"Seeking to negative position: \" + this);\n        }\n        super.seek(pos + offset);\n      }\n      \n      @Override\n      public long getFilePointer() {\n        return super.getFilePointer() - offset;\n      }\n\n      @Override\n      public long length() {\n        return super.length() - offset;\n      }\n\n      @Override\n      public IndexInput slice(String sliceDescription, long ofs, long len) throws IOException {\n        return super.slice(sliceDescription, offset + ofs, len);\n      }\n    };\n  }\n\n","bugFix":["18efbc72c32221d05cd225926b1cbab767337ed0"],"bugIntro":["7bdf5317fc9c595685174d4aaf2f25deb8eb19ae"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RAMInputStream#slice(String,long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/RAMInputStream#slice(String,long,long).mjava","sourceNew":"  @Override\n  public IndexInput slice(String sliceDescription, final long offset, final long length) throws IOException {\n    if (offset < 0 || length < 0 || offset + length > this.length) {\n      throw new IllegalArgumentException(\"slice() \" + sliceDescription + \" out of bounds: \"  + this);\n    }\n    return new RAMInputStream(getFullSliceDescription(sliceDescription), file, offset + length) {\n      {\n        seek(0L);\n      }\n      \n      @Override\n      public void seek(long pos) throws IOException {\n        if (pos < 0L) {\n          throw new IllegalArgumentException(\"Seeking to negative position: \" + this);\n        }\n        super.seek(pos + offset);\n      }\n      \n      @Override\n      public long getFilePointer() {\n        return super.getFilePointer() - offset;\n      }\n\n      @Override\n      public long length() {\n        return super.length() - offset;\n      }\n\n      @Override\n      public IndexInput slice(String sliceDescription, long ofs, long len) throws IOException {\n        return super.slice(sliceDescription, offset + ofs, len);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public IndexInput slice(String sliceDescription, final long offset, final long length) throws IOException {\n    if (offset < 0 || length < 0 || offset + length > this.length) {\n      throw new IllegalArgumentException(\"slice() \" + sliceDescription + \" out of bounds: \"  + this);\n    }\n    final String newResourceDescription = (sliceDescription == null) ? toString() : (toString() + \" [slice=\" + sliceDescription + \"]\");\n    return new RAMInputStream(newResourceDescription, file, offset + length) {\n      {\n        seek(0L);\n      }\n      \n      @Override\n      public void seek(long pos) throws IOException {\n        if (pos < 0L) {\n          throw new IllegalArgumentException(\"Seeking to negative position: \" + this);\n        }\n        super.seek(pos + offset);\n      }\n      \n      @Override\n      public long getFilePointer() {\n        return super.getFilePointer() - offset;\n      }\n\n      @Override\n      public long length() {\n        return super.length() - offset;\n      }\n\n      @Override\n      public IndexInput slice(String sliceDescription, long ofs, long len) throws IOException {\n        return super.slice(sliceDescription, offset + ofs, len);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7bdf5317fc9c595685174d4aaf2f25deb8eb19ae","date":1453654393,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RAMInputStream#slice(String,long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/RAMInputStream#slice(String,long,long).mjava","sourceNew":"  @Override\n  public IndexInput slice(String sliceDescription, final long offset, final long sliceLength) throws IOException {\n    if (offset < 0 || sliceLength < 0 || offset + sliceLength > this.length) {\n      throw new IllegalArgumentException(\"slice() \" + sliceDescription + \" out of bounds: \"  + this);\n    }\n    return new RAMInputStream(getFullSliceDescription(sliceDescription), file, offset + sliceLength) {\n      {\n        seek(0L);\n      }\n      \n      @Override\n      public void seek(long pos) throws IOException {\n        if (pos < 0L) {\n          throw new IllegalArgumentException(\"Seeking to negative position: \" + this);\n        }\n        super.seek(pos + offset);\n      }\n      \n      @Override\n      public long getFilePointer() {\n        return super.getFilePointer() - offset;\n      }\n\n      @Override\n      public long length() {\n        return sliceLength;\n      }\n\n      @Override\n      public IndexInput slice(String sliceDescription, long ofs, long len) throws IOException {\n        return super.slice(sliceDescription, offset + ofs, len);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public IndexInput slice(String sliceDescription, final long offset, final long length) throws IOException {\n    if (offset < 0 || length < 0 || offset + length > this.length) {\n      throw new IllegalArgumentException(\"slice() \" + sliceDescription + \" out of bounds: \"  + this);\n    }\n    return new RAMInputStream(getFullSliceDescription(sliceDescription), file, offset + length) {\n      {\n        seek(0L);\n      }\n      \n      @Override\n      public void seek(long pos) throws IOException {\n        if (pos < 0L) {\n          throw new IllegalArgumentException(\"Seeking to negative position: \" + this);\n        }\n        super.seek(pos + offset);\n      }\n      \n      @Override\n      public long getFilePointer() {\n        return super.getFilePointer() - offset;\n      }\n\n      @Override\n      public long length() {\n        return super.length() - offset;\n      }\n\n      @Override\n      public IndexInput slice(String sliceDescription, long ofs, long len) throws IOException {\n        return super.slice(sliceDescription, offset + ofs, len);\n      }\n    };\n  }\n\n","bugFix":["18efbc72c32221d05cd225926b1cbab767337ed0","54f1af08a87af1f14572b41c90f55de83d083077"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/RAMInputStream#slice(String,long,long).mjava","sourceNew":null,"sourceOld":"  @Override\n  public IndexInput slice(String sliceDescription, final long offset, final long sliceLength) throws IOException {\n    if (offset < 0 || sliceLength < 0 || offset + sliceLength > this.length) {\n      throw new IllegalArgumentException(\"slice() \" + sliceDescription + \" out of bounds: \"  + this);\n    }\n    return new RAMInputStream(getFullSliceDescription(sliceDescription), file, offset + sliceLength) {\n      {\n        seek(0L);\n      }\n      \n      @Override\n      public void seek(long pos) throws IOException {\n        if (pos < 0L) {\n          throw new IllegalArgumentException(\"Seeking to negative position: \" + this);\n        }\n        super.seek(pos + offset);\n      }\n      \n      @Override\n      public long getFilePointer() {\n        return super.getFilePointer() - offset;\n      }\n\n      @Override\n      public long length() {\n        return sliceLength;\n      }\n\n      @Override\n      public IndexInput slice(String sliceDescription, long ofs, long len) throws IOException {\n        return super.slice(sliceDescription, offset + ofs, len);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"18efbc72c32221d05cd225926b1cbab767337ed0":["e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["18efbc72c32221d05cd225926b1cbab767337ed0","54f1af08a87af1f14572b41c90f55de83d083077"],"e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d77dafd89756a5161d244985903e3487ca109182":["7bdf5317fc9c595685174d4aaf2f25deb8eb19ae"],"54f1af08a87af1f14572b41c90f55de83d083077":["18efbc72c32221d05cd225926b1cbab767337ed0"],"7bdf5317fc9c595685174d4aaf2f25deb8eb19ae":["54f1af08a87af1f14572b41c90f55de83d083077"],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"]},"commit2Childs":{"18efbc72c32221d05cd225926b1cbab767337ed0":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","54f1af08a87af1f14572b41c90f55de83d083077"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3":["18efbc72c32221d05cd225926b1cbab767337ed0","56572ec06f1407c066d6b7399413178b33176cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3","56572ec06f1407c066d6b7399413178b33176cd8"],"54f1af08a87af1f14572b41c90f55de83d083077":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7bdf5317fc9c595685174d4aaf2f25deb8eb19ae"],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7bdf5317fc9c595685174d4aaf2f25deb8eb19ae":["d77dafd89756a5161d244985903e3487ca109182"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}