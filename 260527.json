{"path":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet#testCopyJDKSet().mjava","commits":[{"id":"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","date":1465936684,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet#testCopyJDKSet().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testCopyJDKSet().mjava","sourceNew":"  /**\n   * Test the static #copy() function with a JDK {@link Set} as a source\n   */\n  public void testCopyJDKSet() {\n    Set<String> set = new HashSet<>();\n\n    List<String> stopwords = Arrays.asList(TEST_STOP_WORDS);\n    List<String> stopwordsUpper = new ArrayList<>();\n    for (String string : stopwords) {\n      stopwordsUpper.add(string.toUpperCase(Locale.ROOT));\n    }\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n\n    CharArraySet copy = CharArraySet.copy(set);\n\n    assertEquals(set.size(), copy.size());\n    assertEquals(set.size(), copy.size());\n\n    assertTrue(copy.containsAll(stopwords));\n    for (String string : stopwordsUpper) {\n      assertFalse(copy.contains(string));\n    }\n    \n    List<String> newWords = new ArrayList<>();\n    for (String string : stopwords) {\n      newWords.add(string+\"_1\");\n    }\n    copy.addAll(newWords);\n    \n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(newWords));\n    // new added terms are not in the source set\n    for (String string : newWords) {\n      assertFalse(set.contains(string));  \n    }\n  }\n\n","sourceOld":"  /**\n   * Test the static #copy() function with a JDK {@link Set} as a source\n   */\n  public void testCopyJDKSet() {\n    Set<String> set = new HashSet<>();\n\n    List<String> stopwords = Arrays.asList(TEST_STOP_WORDS);\n    List<String> stopwordsUpper = new ArrayList<>();\n    for (String string : stopwords) {\n      stopwordsUpper.add(string.toUpperCase(Locale.ROOT));\n    }\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n\n    CharArraySet copy = CharArraySet.copy(set);\n\n    assertEquals(set.size(), copy.size());\n    assertEquals(set.size(), copy.size());\n\n    assertTrue(copy.containsAll(stopwords));\n    for (String string : stopwordsUpper) {\n      assertFalse(copy.contains(string));\n    }\n    \n    List<String> newWords = new ArrayList<>();\n    for (String string : stopwords) {\n      newWords.add(string+\"_1\");\n    }\n    copy.addAll(newWords);\n    \n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(newWords));\n    // new added terms are not in the source set\n    for (String string : newWords) {\n      assertFalse(set.contains(string));  \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet#testCopyJDKSet().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testCopyJDKSet().mjava","sourceNew":"  /**\n   * Test the static #copy() function with a JDK {@link Set} as a source\n   */\n  public void testCopyJDKSet() {\n    Set<String> set = new HashSet<>();\n\n    List<String> stopwords = Arrays.asList(TEST_STOP_WORDS);\n    List<String> stopwordsUpper = new ArrayList<>();\n    for (String string : stopwords) {\n      stopwordsUpper.add(string.toUpperCase(Locale.ROOT));\n    }\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n\n    CharArraySet copy = CharArraySet.copy(set);\n\n    assertEquals(set.size(), copy.size());\n    assertEquals(set.size(), copy.size());\n\n    assertTrue(copy.containsAll(stopwords));\n    for (String string : stopwordsUpper) {\n      assertFalse(copy.contains(string));\n    }\n    \n    List<String> newWords = new ArrayList<>();\n    for (String string : stopwords) {\n      newWords.add(string+\"_1\");\n    }\n    copy.addAll(newWords);\n    \n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(newWords));\n    // new added terms are not in the source set\n    for (String string : newWords) {\n      assertFalse(set.contains(string));  \n    }\n  }\n\n","sourceOld":"  /**\n   * Test the static #copy() function with a JDK {@link Set} as a source\n   */\n  public void testCopyJDKSet() {\n    Set<String> set = new HashSet<>();\n\n    List<String> stopwords = Arrays.asList(TEST_STOP_WORDS);\n    List<String> stopwordsUpper = new ArrayList<>();\n    for (String string : stopwords) {\n      stopwordsUpper.add(string.toUpperCase(Locale.ROOT));\n    }\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n\n    CharArraySet copy = CharArraySet.copy(set);\n\n    assertEquals(set.size(), copy.size());\n    assertEquals(set.size(), copy.size());\n\n    assertTrue(copy.containsAll(stopwords));\n    for (String string : stopwordsUpper) {\n      assertFalse(copy.contains(string));\n    }\n    \n    List<String> newWords = new ArrayList<>();\n    for (String string : stopwords) {\n      newWords.add(string+\"_1\");\n    }\n    copy.addAll(newWords);\n    \n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(newWords));\n    // new added terms are not in the source set\n    for (String string : newWords) {\n      assertFalse(set.contains(string));  \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}