{"path":"contrib/analyzers/src/test/org/apache/lucene/analysis/cn/TestSmartChineseAnalyzer#assertAnalyzesTo(Analyzer,String,String[],int[],int[],String[]).mjava","commits":[{"id":"673accc9b41e365926e68fc3a1d8c06240542492","date":1245426756,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/analyzers/src/test/org/apache/lucene/analysis/cn/TestSmartChineseAnalyzer#assertAnalyzesTo(Analyzer,String,String[],int[],int[],String[]).mjava","pathOld":"/dev/null","sourceNew":"  public void assertAnalyzesTo(Analyzer a, String input, String[] output, int startOffsets[], int endOffsets[], String types[])\n  throws Exception {\n\n  TokenStream ts = a.tokenStream(\"dummy\", new StringReader(input));\n          final Token reusableToken = new Token();\n  for (int i = 0; i < output.length; i++) {\n      Token nextToken = ts.next(reusableToken);\n      assertNotNull(nextToken);\n      assertEquals(nextToken.term(), output[i]);\n      if (startOffsets != null)\n          assertEquals(nextToken.startOffset(), startOffsets[i]);\n      if (endOffsets != null)\n          assertEquals(nextToken.endOffset(), endOffsets[i]);\n      if (types != null)\n          assertEquals(nextToken.type(), types[i]);\n  }\n  assertNull(ts.next(reusableToken));\n  ts.close();\n}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/smartcn/src/test/org/apache/lucene/analysis/cn/TestSmartChineseAnalyzer#assertAnalyzesTo(Analyzer,String,String[],int[],int[],String[]).mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/cn/TestSmartChineseAnalyzer#assertAnalyzesTo(Analyzer,String,String[],int[],int[],String[]).mjava","sourceNew":"  public void assertAnalyzesTo(Analyzer a, String input, String[] output, int startOffsets[], int endOffsets[], String types[])\n  throws Exception {\n\n  TokenStream ts = a.tokenStream(\"dummy\", new StringReader(input));\n          final Token reusableToken = new Token();\n  for (int i = 0; i < output.length; i++) {\n      Token nextToken = ts.next(reusableToken);\n      assertNotNull(nextToken);\n      assertEquals(nextToken.term(), output[i]);\n      if (startOffsets != null)\n          assertEquals(nextToken.startOffset(), startOffsets[i]);\n      if (endOffsets != null)\n          assertEquals(nextToken.endOffset(), endOffsets[i]);\n      if (types != null)\n          assertEquals(nextToken.type(), types[i]);\n  }\n  assertNull(ts.next(reusableToken));\n  ts.close();\n}\n\n","sourceOld":"  public void assertAnalyzesTo(Analyzer a, String input, String[] output, int startOffsets[], int endOffsets[], String types[])\n  throws Exception {\n\n  TokenStream ts = a.tokenStream(\"dummy\", new StringReader(input));\n          final Token reusableToken = new Token();\n  for (int i = 0; i < output.length; i++) {\n      Token nextToken = ts.next(reusableToken);\n      assertNotNull(nextToken);\n      assertEquals(nextToken.term(), output[i]);\n      if (startOffsets != null)\n          assertEquals(nextToken.startOffset(), startOffsets[i]);\n      if (endOffsets != null)\n          assertEquals(nextToken.endOffset(), endOffsets[i]);\n      if (types != null)\n          assertEquals(nextToken.type(), types[i]);\n  }\n  assertNull(ts.next(reusableToken));\n  ts.close();\n}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["673accc9b41e365926e68fc3a1d8c06240542492"],"673accc9b41e365926e68fc3a1d8c06240542492":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd745d580729e528151b58aeda87ef82f1b95c9b"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"673accc9b41e365926e68fc3a1d8c06240542492":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["673accc9b41e365926e68fc3a1d8c06240542492"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}