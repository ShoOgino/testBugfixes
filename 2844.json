{"path":"src/java/org/apache/lucene/index/DocumentWriter#addPosition(String,String,int,Payload,TermVectorOffsetInfo).mjava","commits":[{"id":"8522ae207a56c6db28ca06fe6cc33e70911c3600","date":1173935743,"type":1,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentWriter#addPosition(String,String,int,Payload,TermVectorOffsetInfo).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentWriter#addPosition(String,String,int,TermVectorOffsetInfo).mjava","sourceNew":"  private final void addPosition(String field, String text, int position, Payload payload, TermVectorOffsetInfo offset) {\n    termBuffer.set(field, text);\n    //System.out.println(\"Offset: \" + offset);\n    Posting ti = (Posting) postingTable.get(termBuffer);\n    if (ti != null) {\t\t\t\t  // word seen before\n      int freq = ti.freq;\n      if (ti.positions.length == freq) {\t  // positions array is full\n        int[] newPositions = new int[freq * 2];\t  // double size\n        int[] positions = ti.positions;\n        System.arraycopy(positions, 0, newPositions, 0, freq);\n        ti.positions = newPositions;\n        \n        if (ti.payloads != null) {\n          // the current field stores payloads\n          Payload[] newPayloads = new Payload[freq * 2];  // grow payloads array\n          Payload[] payloads = ti.payloads;\n          System.arraycopy(payloads, 0, newPayloads, 0, payloads.length);\n          ti.payloads = newPayloads;\n        }\n      }\n      ti.positions[freq] = position;\t\t  // add new position\n\n      if (payload != null) {\n        if (ti.payloads == null) {\n          // lazily allocate payload array\n          ti.payloads = new Payload[ti.positions.length];\n        }\n        ti.payloads[freq] = payload;\n      }\n      \n      if (offset != null) {\n        if (ti.offsets.length == freq){\n          TermVectorOffsetInfo [] newOffsets = new TermVectorOffsetInfo[freq*2];\n          TermVectorOffsetInfo [] offsets = ti.offsets;\n          System.arraycopy(offsets, 0, newOffsets, 0, freq);\n          ti.offsets = newOffsets;\n        }\n        ti.offsets[freq] = offset;\n      }\n      ti.freq = freq + 1;\t\t\t  // update frequency\n    } else {\t\t\t\t\t  // word not seen before\n      Term term = new Term(field, text, false);\n      postingTable.put(term, new Posting(term, position, payload, offset));\n    }\n  }\n\n","sourceOld":"  private final void addPosition(String field, String text, int position, TermVectorOffsetInfo offset) {\n    termBuffer.set(field, text);\n    //System.out.println(\"Offset: \" + offset);\n    Posting ti = (Posting) postingTable.get(termBuffer);\n    if (ti != null) {\t\t\t\t  // word seen before\n      int freq = ti.freq;\n      if (ti.positions.length == freq) {\t  // positions array is full\n        int[] newPositions = new int[freq * 2];\t  // double size\n        int[] positions = ti.positions;\n        System.arraycopy(positions, 0, newPositions, 0, freq);\n        ti.positions = newPositions;\n      }\n      ti.positions[freq] = position;\t\t  // add new position\n\n      if (offset != null) {\n        if (ti.offsets.length == freq){\n          TermVectorOffsetInfo [] newOffsets = new TermVectorOffsetInfo[freq*2];\n          TermVectorOffsetInfo [] offsets = ti.offsets;\n          System.arraycopy(offsets, 0, newOffsets, 0, freq);\n          ti.offsets = newOffsets;\n        }\n        ti.offsets[freq] = offset;\n      }\n      ti.freq = freq + 1;\t\t\t  // update frequency\n    } else {\t\t\t\t\t  // word not seen before\n      Term term = new Term(field, text, false);\n      postingTable.put(term, new Posting(term, position, offset));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b20bed3506d9b128ea30a7a62e2a8b1d7df697b0","date":1185569419,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/DocumentWriter#addPosition(String,String,int,Payload,TermVectorOffsetInfo).mjava","sourceNew":null,"sourceOld":"  private final void addPosition(String field, String text, int position, Payload payload, TermVectorOffsetInfo offset) {\n    termBuffer.set(field, text);\n    //System.out.println(\"Offset: \" + offset);\n    Posting ti = (Posting) postingTable.get(termBuffer);\n    if (ti != null) {\t\t\t\t  // word seen before\n      int freq = ti.freq;\n      if (ti.positions.length == freq) {\t  // positions array is full\n        int[] newPositions = new int[freq * 2];\t  // double size\n        int[] positions = ti.positions;\n        System.arraycopy(positions, 0, newPositions, 0, freq);\n        ti.positions = newPositions;\n        \n        if (ti.payloads != null) {\n          // the current field stores payloads\n          Payload[] newPayloads = new Payload[freq * 2];  // grow payloads array\n          Payload[] payloads = ti.payloads;\n          System.arraycopy(payloads, 0, newPayloads, 0, payloads.length);\n          ti.payloads = newPayloads;\n        }\n      }\n      ti.positions[freq] = position;\t\t  // add new position\n\n      if (payload != null) {\n        if (ti.payloads == null) {\n          // lazily allocate payload array\n          ti.payloads = new Payload[ti.positions.length];\n        }\n        ti.payloads[freq] = payload;\n      }\n      \n      if (offset != null) {\n        if (ti.offsets.length == freq){\n          TermVectorOffsetInfo [] newOffsets = new TermVectorOffsetInfo[freq*2];\n          TermVectorOffsetInfo [] offsets = ti.offsets;\n          System.arraycopy(offsets, 0, newOffsets, 0, freq);\n          ti.offsets = newOffsets;\n        }\n        ti.offsets[freq] = offset;\n      }\n      ti.freq = freq + 1;\t\t\t  // update frequency\n    } else {\t\t\t\t\t  // word not seen before\n      Term term = new Term(field, text, false);\n      postingTable.put(term, new Posting(term, position, payload, offset));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8522ae207a56c6db28ca06fe6cc33e70911c3600":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b20bed3506d9b128ea30a7a62e2a8b1d7df697b0":["8522ae207a56c6db28ca06fe6cc33e70911c3600"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b20bed3506d9b128ea30a7a62e2a8b1d7df697b0"]},"commit2Childs":{"8522ae207a56c6db28ca06fe6cc33e70911c3600":["b20bed3506d9b128ea30a7a62e2a8b1d7df697b0"],"b20bed3506d9b128ea30a7a62e2a8b1d7df697b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8522ae207a56c6db28ca06fe6cc33e70911c3600"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}