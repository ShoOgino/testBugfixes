{"path":"src/test/org/apache/solr/handler/SpellCheckerRequestHandlerTest#testSpellCheck_05_buildDictionary().mjava","commits":[{"id":"071bae97f774d86dca206e837de23a56b71c8b29","date":1194291554,"type":0,"author":"Mike Klaas","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/SpellCheckerRequestHandlerTest#testSpellCheck_05_buildDictionary().mjava","pathOld":"/dev/null","sourceNew":"  public void testSpellCheck_05_buildDictionary() {\n    lrf = h.getRequestFactory(\"spellchecker\", 0, 20 );\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"sp.query.accuracy\",\".9\");\n\n    assertU(\"Add some words to the Spell Check Index:\",\n      adoc(\"id\",  \"100\",\n             \"spell\", \"solr cat cart\"));\n    assertU(adoc(\"id\",  \"101\",\n                   \"spell\", \"cat cart\"));\n    assertU(adoc(\"id\",  \"102\",\n                   \"spell\", \"cat cart\"));\n    assertU(adoc(\"id\",  \"103\",\n                   \"spell\", \"cat cart carp\"));\n    assertU(adoc(\"id\",  \"104\",\n                   \"spell\", \"cat car cant\"));\n    assertU(adoc(\"id\",  \"105\",\n                   \"spell\", \"cat catnip\"));\n    assertU(adoc(\"id\",  \"106\",\n                   \"spell\", \"cat cattails\"));\n    assertU(adoc(\"id\",  \"107\",\n                   \"spell\", \"cat cod\"));\n    assertU(adoc(\"id\",  \"108\",\n                   \"spell\", \"cat corn\"));\n    assertU(adoc(\"id\",  \"109\",\n                   \"spell\", \"cat cot\"));\n    assertU(commit());\n    assertU(optimize());\n\n    lrf.args.put(\"sp.dictionary.threshold\", \"0.20\");\n    lrf.args.put(\"cmd\",\"rebuild\");\n    assertQ(\"Need to first build the index:\",\n            req(\"cat\")\n            ,\"//str[@name='cmdExecuted'][.='rebuild']\"\n            ,\"//str[@name='words'][.='cat']\"\n            ,\"//str[@name='exist'][.='true']\"\n            );\n\n    lrf.args.clear();\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"sp.query.accuracy\",\".9\");\n\n    assertQ(\"Confirm index contains only words above threshold\",\n            req(\"cat\")\n            ,\"//str[@name='words'][.='cat']\"\n            ,\"//str[@name='exist'][.='true']\"\n            );\n\n    assertQ(\"Confirm index contains only words above threshold\",\n            req(\"cart\")\n            ,\"//str[@name='words'][.='cart']\"\n            ,\"//str[@name='exist'][.='true']\"\n            );\n\n    assertQ(\"Confirm index contains only words above threshold\",\n            req(\"cod\")\n            ,\"//str[@name='words'][.='cod']\"\n            ,\"//str[@name='exist'][.='false']\"\n            );\n\n    assertQ(\"Confirm index contains only words above threshold\",\n            req(\"corn\")\n            ,\"//str[@name='words'][.='corn']\"\n            ,\"//str[@name='exist'][.='false']\"\n            );\n\n    lrf.args.clear();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/SpellCheckerRequestHandlerTest#testSpellCheck_05_buildDictionary().mjava","pathOld":"src/test/org/apache/solr/handler/SpellCheckerRequestHandlerTest#testSpellCheck_05_buildDictionary().mjava","sourceNew":"  public void testSpellCheck_05_buildDictionary() {\n    lrf = h.getRequestFactory(\"spellchecker\", 0, 20 );\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"sp.query.accuracy\",\".9\");\n\n    assertU(\"Add some words to the Spell Check Index:\",\n      adoc(\"id\",  \"100\",\n             \"spell\", \"solr cat cart\"));\n    assertU(adoc(\"id\",  \"101\",\n                   \"spell\", \"cat cart\"));\n    assertU(adoc(\"id\",  \"102\",\n                   \"spell\", \"cat cart\"));\n    assertU(adoc(\"id\",  \"103\",\n                   \"spell\", \"cat cart carp\"));\n    assertU(adoc(\"id\",  \"104\",\n                   \"spell\", \"cat car cant\"));\n    assertU(adoc(\"id\",  \"105\",\n                   \"spell\", \"cat catnip\"));\n    assertU(adoc(\"id\",  \"106\",\n                   \"spell\", \"cat cattails\"));\n    assertU(adoc(\"id\",  \"107\",\n                   \"spell\", \"cat cod\"));\n    assertU(adoc(\"id\",  \"108\",\n                   \"spell\", \"cat corn\"));\n    assertU(adoc(\"id\",  \"109\",\n                   \"spell\", \"cat cot\"));\n    assertU(commit());\n    assertU(optimize());\n\n    lrf.args.put(\"sp.dictionary.threshold\", \"0.20\");\n    lrf.args.put(\"cmd\",\"rebuild\");\n    assertQ(\"Need to first build the index:\",\n            req(\"cat\")\n            ,\"//str[@name='cmdExecuted'][.='rebuild']\"\n            ,\"//str[@name='words'][.='cat']\"\n            ,\"//str[@name='exist'][.='true']\"\n            );\n\n    lrf.args.clear();\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"sp.query.accuracy\",\".9\");\n\n    assertQ(\"Confirm index contains only words above threshold\",\n            req(\"cat\")\n            ,\"//str[@name='words'][.='cat']\"\n            ,\"//str[@name='exist'][.='true']\"\n            );\n\n    assertQ(\"Confirm index contains only words above threshold\",\n            req(\"cart\")\n            ,\"//str[@name='words'][.='cart']\"\n            ,\"//str[@name='exist'][.='true']\"\n            );\n\n    assertQ(\"Confirm index contains only words above threshold\",\n            req(\"cod\")\n            ,\"//str[@name='words'][.='cod']\"\n            ,\"//str[@name='exist'][.='false']\"\n            );\n\n    assertQ(\"Confirm index contains only words above threshold\",\n            req(\"corn\")\n            ,\"//str[@name='words'][.='corn']\"\n            ,\"//str[@name='exist'][.='false']\"\n            );\n\n    lrf.args.clear();\n  }\n\n","sourceOld":"  public void testSpellCheck_05_buildDictionary() {\n    lrf = h.getRequestFactory(\"spellchecker\", 0, 20 );\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"sp.query.accuracy\",\".9\");\n\n    assertU(\"Add some words to the Spell Check Index:\",\n      adoc(\"id\",  \"100\",\n             \"spell\", \"solr cat cart\"));\n    assertU(adoc(\"id\",  \"101\",\n                   \"spell\", \"cat cart\"));\n    assertU(adoc(\"id\",  \"102\",\n                   \"spell\", \"cat cart\"));\n    assertU(adoc(\"id\",  \"103\",\n                   \"spell\", \"cat cart carp\"));\n    assertU(adoc(\"id\",  \"104\",\n                   \"spell\", \"cat car cant\"));\n    assertU(adoc(\"id\",  \"105\",\n                   \"spell\", \"cat catnip\"));\n    assertU(adoc(\"id\",  \"106\",\n                   \"spell\", \"cat cattails\"));\n    assertU(adoc(\"id\",  \"107\",\n                   \"spell\", \"cat cod\"));\n    assertU(adoc(\"id\",  \"108\",\n                   \"spell\", \"cat corn\"));\n    assertU(adoc(\"id\",  \"109\",\n                   \"spell\", \"cat cot\"));\n    assertU(commit());\n    assertU(optimize());\n\n    lrf.args.put(\"sp.dictionary.threshold\", \"0.20\");\n    lrf.args.put(\"cmd\",\"rebuild\");\n    assertQ(\"Need to first build the index:\",\n            req(\"cat\")\n            ,\"//str[@name='cmdExecuted'][.='rebuild']\"\n            ,\"//str[@name='words'][.='cat']\"\n            ,\"//str[@name='exist'][.='true']\"\n            );\n\n    lrf.args.clear();\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"sp.query.accuracy\",\".9\");\n\n    assertQ(\"Confirm index contains only words above threshold\",\n            req(\"cat\")\n            ,\"//str[@name='words'][.='cat']\"\n            ,\"//str[@name='exist'][.='true']\"\n            );\n\n    assertQ(\"Confirm index contains only words above threshold\",\n            req(\"cart\")\n            ,\"//str[@name='words'][.='cart']\"\n            ,\"//str[@name='exist'][.='true']\"\n            );\n\n    assertQ(\"Confirm index contains only words above threshold\",\n            req(\"cod\")\n            ,\"//str[@name='words'][.='cod']\"\n            ,\"//str[@name='exist'][.='false']\"\n            );\n\n    assertQ(\"Confirm index contains only words above threshold\",\n            req(\"corn\")\n            ,\"//str[@name='words'][.='corn']\"\n            ,\"//str[@name='exist'][.='false']\"\n            );\n\n    lrf.args.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"071bae97f774d86dca206e837de23a56b71c8b29":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["071bae97f774d86dca206e837de23a56b71c8b29"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"071bae97f774d86dca206e837de23a56b71c8b29":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["071bae97f774d86dca206e837de23a56b71c8b29"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}