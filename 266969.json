{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFrozenUpdates(FrozenBufferedUpdates).mjava","commits":[{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFrozenUpdates(FrozenBufferedUpdates).mjava","pathOld":"/dev/null","sourceNew":"  synchronized void publishFrozenUpdates(FrozenBufferedUpdates packet) {\n    assert packet != null && packet.any();\n    synchronized (bufferedUpdatesStream) {\n      bufferedUpdatesStream.push(packet);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFrozenUpdates(FrozenBufferedUpdates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFrozenUpdates(FrozenBufferedUpdates).mjava","sourceNew":"  synchronized void publishFrozenUpdates(FrozenBufferedUpdates packet) throws IOException {\n    assert packet != null && packet.any();\n    bufferedUpdatesStream.push(packet);\n    docWriter.putEvent(new DocumentsWriter.ResolveUpdatesEvent(packet));\n  }\n\n","sourceOld":"  synchronized void publishFrozenUpdates(FrozenBufferedUpdates packet) {\n    assert packet != null && packet.any();\n    synchronized (bufferedUpdatesStream) {\n      bufferedUpdatesStream.push(packet);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFrozenUpdates(FrozenBufferedUpdates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFrozenUpdates(FrozenBufferedUpdates).mjava","sourceNew":"  synchronized void publishFrozenUpdates(FrozenBufferedUpdates packet) throws IOException {\n    assert packet != null && packet.any();\n    bufferedUpdatesStream.push(packet);\n    docWriter.putEvent(new DocumentsWriter.ResolveUpdatesEvent(packet));\n  }\n\n","sourceOld":"  synchronized void publishFrozenUpdates(FrozenBufferedUpdates packet) {\n    assert packet != null && packet.any();\n    synchronized (bufferedUpdatesStream) {\n      bufferedUpdatesStream.push(packet);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFrozenUpdates(FrozenBufferedUpdates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFrozenUpdates(FrozenBufferedUpdates).mjava","sourceNew":"  synchronized void publishFrozenUpdates(FrozenBufferedUpdates packet) throws IOException {\n    assert packet != null && packet.any();\n    bufferedUpdatesStream.push(packet);\n    docWriter.putEvent(new DocumentsWriter.ResolveUpdatesEvent(packet));\n  }\n\n","sourceOld":"  synchronized void publishFrozenUpdates(FrozenBufferedUpdates packet) {\n    assert packet != null && packet.any();\n    synchronized (bufferedUpdatesStream) {\n      bufferedUpdatesStream.push(packet);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86a2e8a56b368d37ef3ba7180541fa317d6fd6c7","date":1524496660,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFrozenUpdates(FrozenBufferedUpdates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFrozenUpdates(FrozenBufferedUpdates).mjava","sourceNew":"  synchronized void publishFrozenUpdates(FrozenBufferedUpdates packet) throws IOException {\n    assert packet != null && packet.any();\n    bufferedUpdatesStream.push(packet);\n    eventQueue.add(new ResolveUpdatesEvent(packet));\n  }\n\n","sourceOld":"  synchronized void publishFrozenUpdates(FrozenBufferedUpdates packet) throws IOException {\n    assert packet != null && packet.any();\n    bufferedUpdatesStream.push(packet);\n    docWriter.putEvent(new DocumentsWriter.ResolveUpdatesEvent(packet));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b8498afacfc8322268ca0d659d274fcce08d557","date":1524577248,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFrozenUpdates(FrozenBufferedUpdates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFrozenUpdates(FrozenBufferedUpdates).mjava","sourceNew":"  synchronized long publishFrozenUpdates(FrozenBufferedUpdates packet) {\n    assert packet != null && packet.any();\n    long nextGen = bufferedUpdatesStream.push(packet);\n    // Do this as an event so it applies higher in the stack when we are not holding DocumentsWriterFlushQueue.purgeLock:\n    eventQueue.add(w -> {\n      try {\n        packet.apply(w);\n      } catch (Throwable t) {\n        try {\n          w.onTragicEvent(t, \"applyUpdatesPacket\");\n        } catch (Throwable t1) {\n          t.addSuppressed(t1);\n        }\n        throw t;\n      }\n      w.flushDeletesCount.incrementAndGet();\n    });\n    return nextGen;\n  }\n\n","sourceOld":"  synchronized void publishFrozenUpdates(FrozenBufferedUpdates packet) throws IOException {\n    assert packet != null && packet.any();\n    bufferedUpdatesStream.push(packet);\n    eventQueue.add(new ResolveUpdatesEvent(packet));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"72332a99ce230f8edf8404d6043ac18a0e26dfeb","date":1542806419,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFrozenUpdates(FrozenBufferedUpdates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFrozenUpdates(FrozenBufferedUpdates).mjava","sourceNew":"  synchronized long publishFrozenUpdates(FrozenBufferedUpdates packet) {\n    assert packet != null && packet.any();\n    long nextGen = bufferedUpdatesStream.push(packet);\n    // Do this as an event so it applies higher in the stack when we are not holding DocumentsWriterFlushQueue.purgeLock:\n    eventQueue.add(w -> {\n      try {\n        // we call tryApply here since we don't want to block if a refresh or a flush is already applying the\n        // packet. The flush will retry this packet anyway to ensure all of them are applied\n        packet.tryApply(w);\n      } catch (Throwable t) {\n        try {\n          w.onTragicEvent(t, \"applyUpdatesPacket\");\n        } catch (Throwable t1) {\n          t.addSuppressed(t1);\n        }\n        throw t;\n      }\n      w.flushDeletesCount.incrementAndGet();\n    });\n    return nextGen;\n  }\n\n","sourceOld":"  synchronized long publishFrozenUpdates(FrozenBufferedUpdates packet) {\n    assert packet != null && packet.any();\n    long nextGen = bufferedUpdatesStream.push(packet);\n    // Do this as an event so it applies higher in the stack when we are not holding DocumentsWriterFlushQueue.purgeLock:\n    eventQueue.add(w -> {\n      try {\n        packet.apply(w);\n      } catch (Throwable t) {\n        try {\n          w.onTragicEvent(t, \"applyUpdatesPacket\");\n        } catch (Throwable t1) {\n          t.addSuppressed(t1);\n        }\n        throw t;\n      }\n      w.flushDeletesCount.incrementAndGet();\n    });\n    return nextGen;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f21f1920c232db2352489eed260fe5c1f39e5a0","date":1587748041,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFrozenUpdates(FrozenBufferedUpdates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFrozenUpdates(FrozenBufferedUpdates).mjava","sourceNew":"  synchronized long publishFrozenUpdates(FrozenBufferedUpdates packet) {\n    assert packet != null && packet.any();\n    long nextGen = bufferedUpdatesStream.push(packet);\n    // Do this as an event so it applies higher in the stack when we are not holding DocumentsWriterFlushQueue.purgeLock:\n    eventQueue.add(w -> {\n      try {\n        // we call tryApply here since we don't want to block if a refresh or a flush is already applying the\n        // packet. The flush will retry this packet anyway to ensure all of them are applied\n        tryApply(packet);\n      } catch (Throwable t) {\n        try {\n          w.onTragicEvent(t, \"applyUpdatesPacket\");\n        } catch (Throwable t1) {\n          t.addSuppressed(t1);\n        }\n        throw t;\n      }\n      w.flushDeletesCount.incrementAndGet();\n    });\n    return nextGen;\n  }\n\n","sourceOld":"  synchronized long publishFrozenUpdates(FrozenBufferedUpdates packet) {\n    assert packet != null && packet.any();\n    long nextGen = bufferedUpdatesStream.push(packet);\n    // Do this as an event so it applies higher in the stack when we are not holding DocumentsWriterFlushQueue.purgeLock:\n    eventQueue.add(w -> {\n      try {\n        // we call tryApply here since we don't want to block if a refresh or a flush is already applying the\n        // packet. The flush will retry this packet anyway to ensure all of them are applied\n        packet.tryApply(w);\n      } catch (Throwable t) {\n        try {\n          w.onTragicEvent(t, \"applyUpdatesPacket\");\n        } catch (Throwable t1) {\n          t.addSuppressed(t1);\n        }\n        throw t;\n      }\n      w.flushDeletesCount.incrementAndGet();\n    });\n    return nextGen;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2","date":1588002560,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFrozenUpdates(FrozenBufferedUpdates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFrozenUpdates(FrozenBufferedUpdates).mjava","sourceNew":"  private synchronized long publishFrozenUpdates(FrozenBufferedUpdates packet) {\n    assert packet != null && packet.any();\n    long nextGen = bufferedUpdatesStream.push(packet);\n    // Do this as an event so it applies higher in the stack when we are not holding DocumentsWriterFlushQueue.purgeLock:\n    eventQueue.add(w -> {\n      try {\n        // we call tryApply here since we don't want to block if a refresh or a flush is already applying the\n        // packet. The flush will retry this packet anyway to ensure all of them are applied\n        tryApply(packet);\n      } catch (Throwable t) {\n        try {\n          w.onTragicEvent(t, \"applyUpdatesPacket\");\n        } catch (Throwable t1) {\n          t.addSuppressed(t1);\n        }\n        throw t;\n      }\n      w.flushDeletesCount.incrementAndGet();\n    });\n    return nextGen;\n  }\n\n","sourceOld":"  synchronized long publishFrozenUpdates(FrozenBufferedUpdates packet) {\n    assert packet != null && packet.any();\n    long nextGen = bufferedUpdatesStream.push(packet);\n    // Do this as an event so it applies higher in the stack when we are not holding DocumentsWriterFlushQueue.purgeLock:\n    eventQueue.add(w -> {\n      try {\n        // we call tryApply here since we don't want to block if a refresh or a flush is already applying the\n        // packet. The flush will retry this packet anyway to ensure all of them are applied\n        tryApply(packet);\n      } catch (Throwable t) {\n        try {\n          w.onTragicEvent(t, \"applyUpdatesPacket\");\n        } catch (Throwable t1) {\n          t.addSuppressed(t1);\n        }\n        throw t;\n      }\n      w.flushDeletesCount.incrementAndGet();\n    });\n    return nextGen;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6b8498afacfc8322268ca0d659d274fcce08d557":["86a2e8a56b368d37ef3ba7180541fa317d6fd6c7"],"9f21f1920c232db2352489eed260fe5c1f39e5a0":["72332a99ce230f8edf8404d6043ac18a0e26dfeb"],"86a2e8a56b368d37ef3ba7180541fa317d6fd6c7":["28288370235ed02234a64753cdbf0c6ec096304a"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2":["9f21f1920c232db2352489eed260fe5c1f39e5a0"],"72332a99ce230f8edf8404d6043ac18a0e26dfeb":["6b8498afacfc8322268ca0d659d274fcce08d557"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2"]},"commit2Childs":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"6b8498afacfc8322268ca0d659d274fcce08d557":["72332a99ce230f8edf8404d6043ac18a0e26dfeb"],"9f21f1920c232db2352489eed260fe5c1f39e5a0":["8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2"],"86a2e8a56b368d37ef3ba7180541fa317d6fd6c7":["6b8498afacfc8322268ca0d659d274fcce08d557"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"72332a99ce230f8edf8404d6043ac18a0e26dfeb":["9f21f1920c232db2352489eed260fe5c1f39e5a0"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["86a2e8a56b368d37ef3ba7180541fa317d6fd6c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}