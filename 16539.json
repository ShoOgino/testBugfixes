{"path":"modules/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.SV#setNextReader(AtomicReaderContext).mjava","commits":[{"id":"369f44b665973d5aa5fc7d0f2a75ffad475d21ee","date":1331157468,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.SV#setNextReader(AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    public void setNextReader(AtomicReaderContext context) throws IOException {\n      if (segmentFacetCounts != null) {\n        segmentResults.add(createSegmentResult());\n      }\n\n      groupFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      facetFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), facetField);\n      segmentFacetCounts = new int[facetFieldTermsIndex.numOrd()];\n      segmentTotalCount = 0;\n\n      segmentGroupedFacetHits.clear();\n      for (GroupedFacetHit groupedFacetHit : groupedFacetHits) {\n        int facetOrd = facetFieldTermsIndex.binarySearchLookup(groupedFacetHit.facetValue, spare);\n        if (facetOrd < 0) {\n          continue;\n        }\n\n        int groupOrd = groupFieldTermsIndex.binarySearchLookup(groupedFacetHit.groupValue, spare);\n        if (groupOrd < 0) {\n          continue;\n        }\n\n        int segmentGroupedFacetsIndex = (groupOrd * facetFieldTermsIndex.numOrd()) + facetOrd;\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n      }\n\n      if (facetPrefix != null) {\n        startFacetOrd = facetFieldTermsIndex.binarySearchLookup(facetPrefix, spare);\n        if (startFacetOrd < 0) {\n          // Points to the ord one higher than facetPrefix\n          startFacetOrd = -startFacetOrd - 1;\n        }\n        BytesRef facetEndPrefix = BytesRef.deepCopyOf(facetPrefix);\n        facetEndPrefix.append(UnicodeUtil.BIG_TERM);\n        endFacetOrd = facetFieldTermsIndex.binarySearchLookup(facetEndPrefix, spare);\n        endFacetOrd = -endFacetOrd - 1; // Points to the ord one higher than facetEndPrefix\n      } else {\n        startFacetOrd = 0;\n        endFacetOrd = facetFieldTermsIndex.numOrd();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.SV#setNextReader(AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    public void setNextReader(AtomicReaderContext context) throws IOException {\n      if (segmentFacetCounts != null) {\n        segmentResults.add(createSegmentResult());\n      }\n\n      groupFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      facetFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), facetField);\n      segmentFacetCounts = new int[facetFieldTermsIndex.numOrd()];\n      segmentTotalCount = 0;\n\n      segmentGroupedFacetHits.clear();\n      for (GroupedFacetHit groupedFacetHit : groupedFacetHits) {\n        int facetOrd = facetFieldTermsIndex.binarySearchLookup(groupedFacetHit.facetValue, spare);\n        if (facetOrd < 0) {\n          continue;\n        }\n\n        int groupOrd = groupFieldTermsIndex.binarySearchLookup(groupedFacetHit.groupValue, spare);\n        if (groupOrd < 0) {\n          continue;\n        }\n\n        int segmentGroupedFacetsIndex = (groupOrd * facetFieldTermsIndex.numOrd()) + facetOrd;\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n      }\n\n      if (facetPrefix != null) {\n        startFacetOrd = facetFieldTermsIndex.binarySearchLookup(facetPrefix, spare);\n        if (startFacetOrd < 0) {\n          // Points to the ord one higher than facetPrefix\n          startFacetOrd = -startFacetOrd - 1;\n        }\n        BytesRef facetEndPrefix = BytesRef.deepCopyOf(facetPrefix);\n        facetEndPrefix.append(UnicodeUtil.BIG_TERM);\n        endFacetOrd = facetFieldTermsIndex.binarySearchLookup(facetEndPrefix, spare);\n        endFacetOrd = -endFacetOrd - 1; // Points to the ord one higher than facetEndPrefix\n      } else {\n        startFacetOrd = 0;\n        endFacetOrd = facetFieldTermsIndex.numOrd();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.SV#setNextReader(AtomicReaderContext).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.SV#setNextReader(AtomicReaderContext).mjava","sourceNew":"    public void setNextReader(AtomicReaderContext context) throws IOException {\n      if (segmentFacetCounts != null) {\n        segmentResults.add(createSegmentResult());\n      }\n\n      groupFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      facetFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), facetField);\n      segmentFacetCounts = new int[facetFieldTermsIndex.numOrd()];\n      segmentTotalCount = 0;\n\n      segmentGroupedFacetHits.clear();\n      for (GroupedFacetHit groupedFacetHit : groupedFacetHits) {\n        int facetOrd = facetFieldTermsIndex.binarySearchLookup(groupedFacetHit.facetValue, spare);\n        if (facetOrd < 0) {\n          continue;\n        }\n\n        int groupOrd = groupFieldTermsIndex.binarySearchLookup(groupedFacetHit.groupValue, spare);\n        if (groupOrd < 0) {\n          continue;\n        }\n\n        int segmentGroupedFacetsIndex = (groupOrd * facetFieldTermsIndex.numOrd()) + facetOrd;\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n      }\n\n      if (facetPrefix != null) {\n        startFacetOrd = facetFieldTermsIndex.binarySearchLookup(facetPrefix, spare);\n        if (startFacetOrd < 0) {\n          // Points to the ord one higher than facetPrefix\n          startFacetOrd = -startFacetOrd - 1;\n        }\n        BytesRef facetEndPrefix = BytesRef.deepCopyOf(facetPrefix);\n        facetEndPrefix.append(UnicodeUtil.BIG_TERM);\n        endFacetOrd = facetFieldTermsIndex.binarySearchLookup(facetEndPrefix, spare);\n        endFacetOrd = -endFacetOrd - 1; // Points to the ord one higher than facetEndPrefix\n      } else {\n        startFacetOrd = 0;\n        endFacetOrd = facetFieldTermsIndex.numOrd();\n      }\n    }\n\n","sourceOld":"    public void setNextReader(AtomicReaderContext context) throws IOException {\n      if (segmentFacetCounts != null) {\n        segmentResults.add(createSegmentResult());\n      }\n\n      groupFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      facetFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), facetField);\n      segmentFacetCounts = new int[facetFieldTermsIndex.numOrd()];\n      segmentTotalCount = 0;\n\n      segmentGroupedFacetHits.clear();\n      for (GroupedFacetHit groupedFacetHit : groupedFacetHits) {\n        int facetOrd = facetFieldTermsIndex.binarySearchLookup(groupedFacetHit.facetValue, spare);\n        if (facetOrd < 0) {\n          continue;\n        }\n\n        int groupOrd = groupFieldTermsIndex.binarySearchLookup(groupedFacetHit.groupValue, spare);\n        if (groupOrd < 0) {\n          continue;\n        }\n\n        int segmentGroupedFacetsIndex = (groupOrd * facetFieldTermsIndex.numOrd()) + facetOrd;\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n      }\n\n      if (facetPrefix != null) {\n        startFacetOrd = facetFieldTermsIndex.binarySearchLookup(facetPrefix, spare);\n        if (startFacetOrd < 0) {\n          // Points to the ord one higher than facetPrefix\n          startFacetOrd = -startFacetOrd - 1;\n        }\n        BytesRef facetEndPrefix = BytesRef.deepCopyOf(facetPrefix);\n        facetEndPrefix.append(UnicodeUtil.BIG_TERM);\n        endFacetOrd = facetFieldTermsIndex.binarySearchLookup(facetEndPrefix, spare);\n        endFacetOrd = -endFacetOrd - 1; // Points to the ord one higher than facetEndPrefix\n      } else {\n        startFacetOrd = 0;\n        endFacetOrd = facetFieldTermsIndex.numOrd();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","369f44b665973d5aa5fc7d0f2a75ffad475d21ee"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["369f44b665973d5aa5fc7d0f2a75ffad475d21ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"369f44b665973d5aa5fc7d0f2a75ffad475d21ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","369f44b665973d5aa5fc7d0f2a75ffad475d21ee"],"369f44b665973d5aa5fc7d0f2a75ffad475d21ee":["38e3b736c7ca086d61b7dbb841c905ee115490da","b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}