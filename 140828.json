{"path":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader.FieldReader.SegmentTermsEnum#next().mjava","commits":[{"id":"99cf56f3a650b908f7017a72f9d23940418f8a52","date":1284891529,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader.FieldReader.SegmentTermsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardTermsDictReader.FieldReader.SegmentTermsEnum#next().mjava","sourceNew":"      @Override\n      public BytesRef next() throws IOException {\n\n        if (seekPending) {\n          seekPending = false;\n          in.seek(state.filePointer);\n        }\n        \n        if (state.ord >= numTerms-1) {\n          return null;\n        }\n\n        bytesReader.read();\n        state.docFreq = in.readVInt();\n\n        // TODO: would be cleaner, but space-wasting, to\n        // simply record a bit into each index entry as to\n        // whether it's an index entry or not, rather than\n        // re-compute that information... or, possibly store\n        // a \"how many terms until next index entry\" in each\n        // index entry, but that'd require some tricky\n        // lookahead work when writing the index\n        postingsReader.readTerm(in,\n                                fieldInfo, state,\n                                fieldIndexReader.isIndexTerm(1+state.ord, state.docFreq, false));\n\n        state.ord++;\n\n        return bytesReader.term;\n      }\n\n","sourceOld":"      @Override\n      public BytesRef next() throws IOException {\n\n        if (seekPending) {\n          seekPending = false;\n          in.seek(state.filePointer);\n        }\n        \n        if (state.ord >= numTerms-1) {\n          return null;\n        }\n\n        bytesReader.read();\n        state.docFreq = in.readVInt();\n\n        // TODO: would be cleaner, but space-wasting, to\n        // simply record a bit into each index entry as to\n        // whether it's an index entry or not, rather than\n        // re-compute that information... or, possibly store\n        // a \"how many terms until next index entry\" in each\n        // index entry, but that'd require some tricky\n        // lookahead work when writing the index\n        postingsReader.readTerm(in,\n                                fieldInfo, state,\n                                fieldIndexReader.isIndexTerm(1+state.ord, state.docFreq, false));\n\n        state.ord++;\n\n        return bytesReader.term;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader.FieldReader.SegmentTermsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardTermsDictReader.FieldReader.SegmentTermsEnum#next().mjava","sourceNew":"      @Override\n      public BytesRef next() throws IOException {\n\n        if (seekPending) {\n          seekPending = false;\n          in.seek(state.filePointer);\n        }\n        \n        if (state.ord >= numTerms-1) {\n          return null;\n        }\n\n        bytesReader.read();\n        state.docFreq = in.readVInt();\n\n        // TODO: would be cleaner, but space-wasting, to\n        // simply record a bit into each index entry as to\n        // whether it's an index entry or not, rather than\n        // re-compute that information... or, possibly store\n        // a \"how many terms until next index entry\" in each\n        // index entry, but that'd require some tricky\n        // lookahead work when writing the index\n        postingsReader.readTerm(in,\n                                fieldInfo, state,\n                                fieldIndexReader.isIndexTerm(1+state.ord, state.docFreq, false));\n\n        state.ord++;\n\n        return bytesReader.term;\n      }\n\n","sourceOld":"      @Override\n      public BytesRef next() throws IOException {\n\n        if (seekPending) {\n          seekPending = false;\n          in.seek(state.filePointer);\n        }\n        \n        if (state.ord >= numTerms-1) {\n          return null;\n        }\n\n        bytesReader.read();\n        state.docFreq = in.readVInt();\n\n        // TODO: would be cleaner, but space-wasting, to\n        // simply record a bit into each index entry as to\n        // whether it's an index entry or not, rather than\n        // re-compute that information... or, possibly store\n        // a \"how many terms until next index entry\" in each\n        // index entry, but that'd require some tricky\n        // lookahead work when writing the index\n        postingsReader.readTerm(in,\n                                fieldInfo, state,\n                                fieldIndexReader.isIndexTerm(1+state.ord, state.docFreq, false));\n\n        state.ord++;\n\n        return bytesReader.term;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader.FieldReader.SegmentTermsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader.FieldReader.SegmentTermsEnum#next().mjava","sourceNew":"      @Override\n      public BytesRef next() throws IOException {\n\n        if (seekPending) {\n          seekPending = false;\n          in.seek(state.filePointer);\n          indexEnum.seek(bytesReader.term);\n          didIndexNext = false;\n        }\n        \n        if (!bytesReader.read()) {\n          //System.out.println(\"te.next end!\");\n          positioned = false;\n          return null;\n        }\n\n        final byte b = in.readByte();\n        isIndexTerm = (b & 0x80) != 0;\n\n        if ((b & 0x40) == 0) {\n          // Fast case -- docFreq fits in 6 bits\n          state.docFreq = b & 0x3F;\n        } else {\n          state.docFreq = (in.readVInt() << 6) | (b & 0x3F);\n        }\n\n        postingsReader.readTerm(in,\n                                fieldInfo, state,\n                                isIndexTerm);\n        state.ord++;\n        positioned = true;\n\n        //System.out.println(\"te.next term=\" + bytesReader.term.utf8ToString());\n        return bytesReader.term;\n      }\n\n","sourceOld":"      @Override\n      public BytesRef next() throws IOException {\n\n        if (seekPending) {\n          seekPending = false;\n          in.seek(state.filePointer);\n        }\n        \n        if (state.ord >= numTerms-1) {\n          return null;\n        }\n\n        bytesReader.read();\n        state.docFreq = in.readVInt();\n\n        // TODO: would be cleaner, but space-wasting, to\n        // simply record a bit into each index entry as to\n        // whether it's an index entry or not, rather than\n        // re-compute that information... or, possibly store\n        // a \"how many terms until next index entry\" in each\n        // index entry, but that'd require some tricky\n        // lookahead work when writing the index\n        postingsReader.readTerm(in,\n                                fieldInfo, state,\n                                fieldIndexReader.isIndexTerm(1+state.ord, state.docFreq, false));\n\n        state.ord++;\n\n        return bytesReader.term;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader.FieldReader.SegmentTermsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader.FieldReader.SegmentTermsEnum#next().mjava","sourceNew":"      @Override\n      public BytesRef next() throws IOException {\n\n        if (seekPending) {\n          seekPending = false;\n          in.seek(state.filePointer);\n          indexEnum.seek(bytesReader.term);\n          didIndexNext = false;\n        }\n        \n        if (!bytesReader.read()) {\n          //System.out.println(\"te.next end!\");\n          positioned = false;\n          return null;\n        }\n\n        final byte b = in.readByte();\n        isIndexTerm = (b & 0x80) != 0;\n\n        if ((b & 0x40) == 0) {\n          // Fast case -- docFreq fits in 6 bits\n          state.docFreq = b & 0x3F;\n        } else {\n          state.docFreq = (in.readVInt() << 6) | (b & 0x3F);\n        }\n\n        postingsReader.readTerm(in,\n                                fieldInfo, state,\n                                isIndexTerm);\n        state.ord++;\n        positioned = true;\n\n        //System.out.println(\"te.next term=\" + bytesReader.term.utf8ToString());\n        return bytesReader.term;\n      }\n\n","sourceOld":"      @Override\n      public BytesRef next() throws IOException {\n\n        if (seekPending) {\n          seekPending = false;\n          in.seek(state.filePointer);\n        }\n        \n        if (state.ord >= numTerms-1) {\n          return null;\n        }\n\n        bytesReader.read();\n        state.docFreq = in.readVInt();\n\n        // TODO: would be cleaner, but space-wasting, to\n        // simply record a bit into each index entry as to\n        // whether it's an index entry or not, rather than\n        // re-compute that information... or, possibly store\n        // a \"how many terms until next index entry\" in each\n        // index entry, but that'd require some tricky\n        // lookahead work when writing the index\n        postingsReader.readTerm(in,\n                                fieldInfo, state,\n                                fieldIndexReader.isIndexTerm(1+state.ord, state.docFreq, false));\n\n        state.ord++;\n\n        return bytesReader.term;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa1a999d6674423e5c4ac858b410283f6fe03f20","date":1294868331,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader.FieldReader.SegmentTermsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader.FieldReader.SegmentTermsEnum#next().mjava","sourceNew":"      @Override\n      public BytesRef next() throws IOException {\n\n        if (seekPending) {\n          seekPending = false;\n          in.seek(state.filePointer);\n          indexEnum.seek(bytesReader.term);\n          didIndexNext = false;\n        }\n        \n        if (!bytesReader.read()) {\n          //System.out.println(\"te.next end!\");\n          positioned = false;\n          return null;\n        }\n\n        final byte b = in.readByte();\n        isIndexTerm = (b & 0x80) != 0;\n\n        if ((b & 0x40) == 0) {\n          // Fast case -- docFreq fits in 6 bits\n          state.docFreq = b & 0x3F;\n        } else {\n          state.docFreq = (in.readVInt() << 6) | (b & 0x3F);\n        }\n\n        postingsReader.readTerm(in,\n                                fieldInfo, state,\n                                isIndexTerm);\n        if (doOrd) {\n          state.ord++;\n        }\n        positioned = true;\n\n        //System.out.println(\"te.next term=\" + bytesReader.term.utf8ToString());\n        return bytesReader.term;\n      }\n\n","sourceOld":"      @Override\n      public BytesRef next() throws IOException {\n\n        if (seekPending) {\n          seekPending = false;\n          in.seek(state.filePointer);\n          indexEnum.seek(bytesReader.term);\n          didIndexNext = false;\n        }\n        \n        if (!bytesReader.read()) {\n          //System.out.println(\"te.next end!\");\n          positioned = false;\n          return null;\n        }\n\n        final byte b = in.readByte();\n        isIndexTerm = (b & 0x80) != 0;\n\n        if ((b & 0x40) == 0) {\n          // Fast case -- docFreq fits in 6 bits\n          state.docFreq = b & 0x3F;\n        } else {\n          state.docFreq = (in.readVInt() << 6) | (b & 0x3F);\n        }\n\n        postingsReader.readTerm(in,\n                                fieldInfo, state,\n                                isIndexTerm);\n        state.ord++;\n        positioned = true;\n\n        //System.out.println(\"te.next term=\" + bytesReader.term.utf8ToString());\n        return bytesReader.term;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader.FieldReader.SegmentTermsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader.FieldReader.SegmentTermsEnum#next().mjava","sourceNew":"      @Override\n      public BytesRef next() throws IOException {\n\n        if (seekPending) {\n          seekPending = false;\n          in.seek(state.filePointer);\n          indexEnum.seek(bytesReader.term);\n          didIndexNext = false;\n        }\n        \n        if (!bytesReader.read()) {\n          //System.out.println(\"te.next end!\");\n          positioned = false;\n          return null;\n        }\n\n        final byte b = in.readByte();\n        isIndexTerm = (b & 0x80) != 0;\n\n        if ((b & 0x40) == 0) {\n          // Fast case -- docFreq fits in 6 bits\n          state.docFreq = b & 0x3F;\n        } else {\n          state.docFreq = (in.readVInt() << 6) | (b & 0x3F);\n        }\n\n        postingsReader.readTerm(in,\n                                fieldInfo, state,\n                                isIndexTerm);\n        if (doOrd) {\n          state.ord++;\n        }\n        positioned = true;\n\n        //System.out.println(\"te.next term=\" + bytesReader.term.utf8ToString());\n        return bytesReader.term;\n      }\n\n","sourceOld":"      @Override\n      public BytesRef next() throws IOException {\n\n        if (seekPending) {\n          seekPending = false;\n          in.seek(state.filePointer);\n        }\n        \n        if (state.ord >= numTerms-1) {\n          return null;\n        }\n\n        bytesReader.read();\n        state.docFreq = in.readVInt();\n\n        // TODO: would be cleaner, but space-wasting, to\n        // simply record a bit into each index entry as to\n        // whether it's an index entry or not, rather than\n        // re-compute that information... or, possibly store\n        // a \"how many terms until next index entry\" in each\n        // index entry, but that'd require some tricky\n        // lookahead work when writing the index\n        postingsReader.readTerm(in,\n                                fieldInfo, state,\n                                fieldIndexReader.isIndexTerm(1+state.ord, state.docFreq, false));\n\n        state.ord++;\n\n        return bytesReader.term;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ecd298fdc085e7eba27afa7fae58df1ba1a2808","date":1295102557,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader.FieldReader.SegmentTermsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader.FieldReader.SegmentTermsEnum#next().mjava","sourceNew":"      @Override\n      public BytesRef next() throws IOException {\n\n        if (seekPending) {\n          seekPending = false;\n          in.seek(state.filePointer);\n          indexEnum.seek(bytesReader.term);\n          didIndexNext = false;\n        }\n        \n        if (!bytesReader.read()) {\n          //System.out.println(\"te.next end!\");\n          positioned = false;\n          return null;\n        }\n\n        final byte b = in.readByte();\n        isIndexTerm = (b & 0x80) != 0;\n\n        if ((b & 0x40) == 0) {\n          // Fast case -- docFreq fits in 6 bits\n          state.docFreq = b & 0x3F;\n        } else {\n          state.docFreq = (in.readVInt() << 6) | (b & 0x3F);\n        }\n\n        if (!fieldInfo.omitTermFreqAndPositions) {\n          state.totalTermFreq = state.docFreq + in.readVLong();\n        }\n\n        postingsReader.readTerm(in,\n                                fieldInfo, state,\n                                isIndexTerm);\n        if (doOrd) {\n          state.ord++;\n        }\n        positioned = true;\n\n        //System.out.println(\"te.next term=\" + bytesReader.term.utf8ToString());\n        return bytesReader.term;\n      }\n\n","sourceOld":"      @Override\n      public BytesRef next() throws IOException {\n\n        if (seekPending) {\n          seekPending = false;\n          in.seek(state.filePointer);\n          indexEnum.seek(bytesReader.term);\n          didIndexNext = false;\n        }\n        \n        if (!bytesReader.read()) {\n          //System.out.println(\"te.next end!\");\n          positioned = false;\n          return null;\n        }\n\n        final byte b = in.readByte();\n        isIndexTerm = (b & 0x80) != 0;\n\n        if ((b & 0x40) == 0) {\n          // Fast case -- docFreq fits in 6 bits\n          state.docFreq = b & 0x3F;\n        } else {\n          state.docFreq = (in.readVInt() << 6) | (b & 0x3F);\n        }\n\n        postingsReader.readTerm(in,\n                                fieldInfo, state,\n                                isIndexTerm);\n        if (doOrd) {\n          state.ord++;\n        }\n        positioned = true;\n\n        //System.out.println(\"te.next term=\" + bytesReader.term.utf8ToString());\n        return bytesReader.term;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16843358872ed92ba92888ab99df297550b9a36a","date":1295144724,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader.FieldReader.SegmentTermsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader.FieldReader.SegmentTermsEnum#next().mjava","sourceNew":"      @Override\n      public BytesRef next() throws IOException {\n\n        if (seekPending) {\n          seekPending = false;\n          in.seek(state.filePointer);\n          indexEnum.seek(bytesReader.term);\n          didIndexNext = false;\n        }\n        \n        if (!bytesReader.read()) {\n          //System.out.println(\"te.next end!\");\n          positioned = false;\n          return null;\n        }\n\n        final byte b = in.readByte();\n        isIndexTerm = (b & 0x80) != 0;\n\n        if ((b & 0x40) == 0) {\n          // Fast case -- docFreq fits in 6 bits\n          state.docFreq = b & 0x3F;\n        } else {\n          state.docFreq = (in.readVInt() << 6) | (b & 0x3F);\n        }\n\n        if (!fieldInfo.omitTermFreqAndPositions) {\n          state.totalTermFreq = state.docFreq + in.readVLong();\n        }\n\n        postingsReader.readTerm(in,\n                                fieldInfo, state,\n                                isIndexTerm);\n        if (doOrd) {\n          state.ord++;\n        }\n        positioned = true;\n\n        //System.out.println(\"te.next term=\" + bytesReader.term.utf8ToString());\n        return bytesReader.term;\n      }\n\n","sourceOld":"      @Override\n      public BytesRef next() throws IOException {\n\n        if (seekPending) {\n          seekPending = false;\n          in.seek(state.filePointer);\n          indexEnum.seek(bytesReader.term);\n          didIndexNext = false;\n        }\n        \n        if (!bytesReader.read()) {\n          //System.out.println(\"te.next end!\");\n          positioned = false;\n          return null;\n        }\n\n        final byte b = in.readByte();\n        isIndexTerm = (b & 0x80) != 0;\n\n        if ((b & 0x40) == 0) {\n          // Fast case -- docFreq fits in 6 bits\n          state.docFreq = b & 0x3F;\n        } else {\n          state.docFreq = (in.readVInt() << 6) | (b & 0x3F);\n        }\n\n        postingsReader.readTerm(in,\n                                fieldInfo, state,\n                                isIndexTerm);\n        if (doOrd) {\n          state.ord++;\n        }\n        positioned = true;\n\n        //System.out.println(\"te.next term=\" + bytesReader.term.utf8ToString());\n        return bytesReader.term;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1add9ddc0005b07550d4350720aac22dc9886b3","date":1295549635,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader.FieldReader.SegmentTermsEnum#next().mjava","sourceNew":null,"sourceOld":"      @Override\n      public BytesRef next() throws IOException {\n\n        if (seekPending) {\n          seekPending = false;\n          in.seek(state.filePointer);\n          indexEnum.seek(bytesReader.term);\n          didIndexNext = false;\n        }\n        \n        if (!bytesReader.read()) {\n          //System.out.println(\"te.next end!\");\n          positioned = false;\n          return null;\n        }\n\n        final byte b = in.readByte();\n        isIndexTerm = (b & 0x80) != 0;\n\n        if ((b & 0x40) == 0) {\n          // Fast case -- docFreq fits in 6 bits\n          state.docFreq = b & 0x3F;\n        } else {\n          state.docFreq = (in.readVInt() << 6) | (b & 0x3F);\n        }\n\n        if (!fieldInfo.omitTermFreqAndPositions) {\n          state.totalTermFreq = state.docFreq + in.readVLong();\n        }\n\n        postingsReader.readTerm(in,\n                                fieldInfo, state,\n                                isIndexTerm);\n        if (doOrd) {\n          state.ord++;\n        }\n        positioned = true;\n\n        //System.out.println(\"te.next term=\" + bytesReader.term.utf8ToString());\n        return bytesReader.term;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader.FieldReader.SegmentTermsEnum#next().mjava","sourceNew":null,"sourceOld":"      @Override\n      public BytesRef next() throws IOException {\n\n        if (seekPending) {\n          seekPending = false;\n          in.seek(state.filePointer);\n          indexEnum.seek(bytesReader.term);\n          didIndexNext = false;\n        }\n        \n        if (!bytesReader.read()) {\n          //System.out.println(\"te.next end!\");\n          positioned = false;\n          return null;\n        }\n\n        final byte b = in.readByte();\n        isIndexTerm = (b & 0x80) != 0;\n\n        if ((b & 0x40) == 0) {\n          // Fast case -- docFreq fits in 6 bits\n          state.docFreq = b & 0x3F;\n        } else {\n          state.docFreq = (in.readVInt() << 6) | (b & 0x3F);\n        }\n\n        if (!fieldInfo.omitTermFreqAndPositions) {\n          state.totalTermFreq = state.docFreq + in.readVLong();\n        }\n\n        postingsReader.readTerm(in,\n                                fieldInfo, state,\n                                isIndexTerm);\n        if (doOrd) {\n          state.ord++;\n        }\n        positioned = true;\n\n        //System.out.println(\"te.next term=\" + bytesReader.term.utf8ToString());\n        return bytesReader.term;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader.FieldReader.SegmentTermsEnum#next().mjava","sourceNew":null,"sourceOld":"      @Override\n      public BytesRef next() throws IOException {\n\n        if (seekPending) {\n          seekPending = false;\n          in.seek(state.filePointer);\n          indexEnum.seek(bytesReader.term);\n          didIndexNext = false;\n        }\n        \n        if (!bytesReader.read()) {\n          //System.out.println(\"te.next end!\");\n          positioned = false;\n          return null;\n        }\n\n        final byte b = in.readByte();\n        isIndexTerm = (b & 0x80) != 0;\n\n        if ((b & 0x40) == 0) {\n          // Fast case -- docFreq fits in 6 bits\n          state.docFreq = b & 0x3F;\n        } else {\n          state.docFreq = (in.readVInt() << 6) | (b & 0x3F);\n        }\n\n        postingsReader.readTerm(in,\n                                fieldInfo, state,\n                                isIndexTerm);\n        state.ord++;\n        positioned = true;\n\n        //System.out.println(\"te.next term=\" + bytesReader.term.utf8ToString());\n        return bytesReader.term;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["99cf56f3a650b908f7017a72f9d23940418f8a52","56da903869515527852ee21ea7ef7bfe414cd40d"],"16843358872ed92ba92888ab99df297550b9a36a":["868da859b43505d9d2a023bfeae6dd0c795f5295","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","99cf56f3a650b908f7017a72f9d23940418f8a52"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["16843358872ed92ba92888ab99df297550b9a36a","b1add9ddc0005b07550d4350720aac22dc9886b3"],"56da903869515527852ee21ea7ef7bfe414cd40d":["99cf56f3a650b908f7017a72f9d23940418f8a52"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","b1add9ddc0005b07550d4350720aac22dc9886b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["56da903869515527852ee21ea7ef7bfe414cd40d"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","fa1a999d6674423e5c4ac858b410283f6fe03f20"],"6ecd298fdc085e7eba27afa7fae58df1ba1a2808":["fa1a999d6674423e5c4ac858b410283f6fe03f20"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b1add9ddc0005b07550d4350720aac22dc9886b3"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"16843358872ed92ba92888ab99df297550b9a36a":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["e79a6d080bdd5b2a8f56342cf571b5476de04180","29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"56da903869515527852ee21ea7ef7bfe414cd40d":["70ad682703b8585f5d0a637efec044d57ec05efb","fa1a999d6674423e5c4ac858b410283f6fe03f20"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","99cf56f3a650b908f7017a72f9d23940418f8a52"],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["868da859b43505d9d2a023bfeae6dd0c795f5295","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["16843358872ed92ba92888ab99df297550b9a36a"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["70ad682703b8585f5d0a637efec044d57ec05efb","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","56da903869515527852ee21ea7ef7bfe414cd40d"],"6ecd298fdc085e7eba27afa7fae58df1ba1a2808":["16843358872ed92ba92888ab99df297550b9a36a","b1add9ddc0005b07550d4350720aac22dc9886b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e79a6d080bdd5b2a8f56342cf571b5476de04180","29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}