{"path":"src/test/org/apache/solr/util/SolrPluginUtilsTest#testDocModifier().mjava","commits":[{"id":"afabe5bcb5f6e1f562673b9cdd9f5d550ad095e8","date":1250620150,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/util/SolrPluginUtilsTest#testDocModifier().mjava","pathOld":"/dev/null","sourceNew":"  public void testDocModifier() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"val_t\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"val_t\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"val_t\", \"quick brown fox\"));\n    commit();\n    SolrIndexSearcher srchr = h.getCore().getSearcher().get();\n    SolrIndexSearcher.QueryResult qr = new SolrIndexSearcher.QueryResult();\n    SolrIndexSearcher.QueryCommand cmd = new SolrIndexSearcher.QueryCommand();\n    cmd.setQuery(new MatchAllDocsQuery());\n    qr = srchr.search(qr, cmd);\n\n    DocList docs = qr.getDocList();\n    Set<String> fields = new HashSet<String>();\n    fields.add(\"val_t\");\n\n    SolrDocumentModifier docMod = new SolrDocumentModifier() {\n      public void process(SolrDocument doc) {\n        doc.addField(\"junk\", \"foo\");\n      }\n    };\n\n    SolrDocumentList list = SolrPluginUtils.docListToSolrDocumentList(docs, srchr, fields, docMod, null);\n    assertTrue(\"list Size: \" + list.size() + \" is not: \" + docs.size(), list.size() == docs.size());\n    for (SolrDocument document : list) {\n      assertNotNull(document.get(\"junk\"));\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["cfa31dc111e7187af45764aea5c8f9ab89275e8a","cfa31dc111e7187af45764aea5c8f9ab89275e8a","cfa31dc111e7187af45764aea5c8f9ab89275e8a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ca0759b72726fa1c9e01f190aca788835d3fde80","date":1250699004,"type":5,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/util/SolrPluginUtilsTest#testDocListConversion().mjava","pathOld":"src/test/org/apache/solr/util/SolrPluginUtilsTest#testDocModifier().mjava","sourceNew":"  public void testDocListConversion() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"val_t\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"val_t\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"val_t\", \"quick brown fox\"));\n    commit();\n    SolrIndexSearcher srchr = h.getCore().getSearcher().get();\n    SolrIndexSearcher.QueryResult qr = new SolrIndexSearcher.QueryResult();\n    SolrIndexSearcher.QueryCommand cmd = new SolrIndexSearcher.QueryCommand();\n    cmd.setQuery(new MatchAllDocsQuery());\n    qr = srchr.search(qr, cmd);\n\n    DocList docs = qr.getDocList();\n    Set<String> fields = new HashSet<String>();\n    fields.add(\"val_t\");\n\n\n    SolrDocumentList list = SolrPluginUtils.docListToSolrDocumentList(docs, srchr, fields, null);\n    assertTrue(\"list Size: \" + list.size() + \" is not: \" + docs.size(), list.size() == docs.size());\n    for (SolrDocument document : list) {\n      assertNotNull(document.get(\"val_t\"));\n    }\n\n  }\n\n","sourceOld":"  public void testDocModifier() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"val_t\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"val_t\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"val_t\", \"quick brown fox\"));\n    commit();\n    SolrIndexSearcher srchr = h.getCore().getSearcher().get();\n    SolrIndexSearcher.QueryResult qr = new SolrIndexSearcher.QueryResult();\n    SolrIndexSearcher.QueryCommand cmd = new SolrIndexSearcher.QueryCommand();\n    cmd.setQuery(new MatchAllDocsQuery());\n    qr = srchr.search(qr, cmd);\n\n    DocList docs = qr.getDocList();\n    Set<String> fields = new HashSet<String>();\n    fields.add(\"val_t\");\n\n    SolrDocumentModifier docMod = new SolrDocumentModifier() {\n      public void process(SolrDocument doc) {\n        doc.addField(\"junk\", \"foo\");\n      }\n    };\n\n    SolrDocumentList list = SolrPluginUtils.docListToSolrDocumentList(docs, srchr, fields, docMod, null);\n    assertTrue(\"list Size: \" + list.size() + \" is not: \" + docs.size(), list.size() == docs.size());\n    for (SolrDocument document : list) {\n      assertNotNull(document.get(\"junk\"));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["cfa31dc111e7187af45764aea5c8f9ab89275e8a","cfa31dc111e7187af45764aea5c8f9ab89275e8a","cfa31dc111e7187af45764aea5c8f9ab89275e8a"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"afabe5bcb5f6e1f562673b9cdd9f5d550ad095e8":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ca0759b72726fa1c9e01f190aca788835d3fde80":["afabe5bcb5f6e1f562673b9cdd9f5d550ad095e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"afabe5bcb5f6e1f562673b9cdd9f5d550ad095e8":["ca0759b72726fa1c9e01f190aca788835d3fde80"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["afabe5bcb5f6e1f562673b9cdd9f5d550ad095e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ca0759b72726fa1c9e01f190aca788835d3fde80":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ca0759b72726fa1c9e01f190aca788835d3fde80","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}