{"path":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum.Frame#decodeMetaData().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum.Frame#decodeMetaData().mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum.Frame#decodeMetaData().mjava","sourceNew":"        public void decodeMetaData() throws IOException {\n\n          //if (DEBUG) System.out.println(\"\\nBTTR.decodeMetadata seg=\" + segment + \" mdUpto=\" + metaDataUpto + \" vs termBlockOrd=\" + state.termBlockOrd);\n\n          // lazily catch up on metadata decode:\n          final int limit = getTermBlockOrd();\n          assert limit > 0;\n\n          // We must set/incr state.termCount because\n          // postings impl can look at this\n          state.termBlockOrd = metaDataUpto;\n      \n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n            state.docFreq = statsReader.readVInt();\n            //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n              state.totalTermFreq = state.docFreq + statsReader.readVLong();\n              //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n\n            postingsReader.nextTerm(fieldInfo, state);\n            metaDataUpto++;\n            state.termBlockOrd++;\n          }\n        }\n\n","sourceOld":"        public void decodeMetaData() throws IOException {\n\n          //if (DEBUG) System.out.println(\"\\nBTTR.decodeMetadata seg=\" + segment + \" mdUpto=\" + metaDataUpto + \" vs termBlockOrd=\" + state.termBlockOrd);\n\n          // lazily catch up on metadata decode:\n          final int limit = getTermBlockOrd();\n          assert limit > 0;\n\n          // We must set/incr state.termCount because\n          // postings impl can look at this\n          state.termBlockOrd = metaDataUpto;\n      \n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n            state.docFreq = statsReader.readVInt();\n            //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n              state.totalTermFreq = state.docFreq + statsReader.readVLong();\n              //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n\n            postingsReader.nextTerm(fieldInfo, state);\n            metaDataUpto++;\n            state.termBlockOrd++;\n          }\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76923f6a33f2c4bec7f584e3f251261afe7ea276","date":1337149711,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum.Frame#decodeMetaData().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum.Frame#decodeMetaData().mjava","sourceNew":"        public void decodeMetaData() throws IOException {\n\n          //if (DEBUG) System.out.println(\"\\nBTTR.decodeMetadata seg=\" + segment + \" mdUpto=\" + metaDataUpto + \" vs termBlockOrd=\" + state.termBlockOrd);\n\n          // lazily catch up on metadata decode:\n          final int limit = getTermBlockOrd();\n          assert limit > 0;\n\n          // We must set/incr state.termCount because\n          // postings impl can look at this\n          state.termBlockOrd = metaDataUpto;\n      \n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n            state.docFreq = statsReader.readVInt();\n            //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n              state.totalTermFreq = state.docFreq + statsReader.readVLong();\n              //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n\n            postingsReader.nextTerm(fieldInfo, state);\n            metaDataUpto++;\n            state.termBlockOrd++;\n          }\n        }\n\n","sourceOld":"        public void decodeMetaData() throws IOException {\n\n          //if (DEBUG) System.out.println(\"\\nBTTR.decodeMetadata seg=\" + segment + \" mdUpto=\" + metaDataUpto + \" vs termBlockOrd=\" + state.termBlockOrd);\n\n          // lazily catch up on metadata decode:\n          final int limit = getTermBlockOrd();\n          assert limit > 0;\n\n          // We must set/incr state.termCount because\n          // postings impl can look at this\n          state.termBlockOrd = metaDataUpto;\n      \n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n            state.docFreq = statsReader.readVInt();\n            //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n              state.totalTermFreq = state.docFreq + statsReader.readVLong();\n              //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n\n            postingsReader.nextTerm(fieldInfo, state);\n            metaDataUpto++;\n            state.termBlockOrd++;\n          }\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum.Frame#decodeMetaData().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum.Frame#decodeMetaData().mjava","sourceNew":"        public void decodeMetaData() throws IOException {\n\n          //if (DEBUG) System.out.println(\"\\nBTTR.decodeMetadata seg=\" + segment + \" mdUpto=\" + metaDataUpto + \" vs termBlockOrd=\" + state.termBlockOrd);\n\n          // lazily catch up on metadata decode:\n          final int limit = getTermBlockOrd();\n          assert limit > 0;\n\n          // We must set/incr state.termCount because\n          // postings impl can look at this\n          state.termBlockOrd = metaDataUpto;\n      \n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n            state.docFreq = statsReader.readVInt();\n            //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n              state.totalTermFreq = state.docFreq + statsReader.readVLong();\n              //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n\n            postingsReader.nextTerm(fieldInfo, state);\n            metaDataUpto++;\n            state.termBlockOrd++;\n          }\n        }\n\n","sourceOld":"        public void decodeMetaData() throws IOException {\n\n          //if (DEBUG) System.out.println(\"\\nBTTR.decodeMetadata seg=\" + segment + \" mdUpto=\" + metaDataUpto + \" vs termBlockOrd=\" + state.termBlockOrd);\n\n          // lazily catch up on metadata decode:\n          final int limit = getTermBlockOrd();\n          assert limit > 0;\n\n          // We must set/incr state.termCount because\n          // postings impl can look at this\n          state.termBlockOrd = metaDataUpto;\n      \n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n            state.docFreq = statsReader.readVInt();\n            //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n              state.totalTermFreq = state.docFreq + statsReader.readVLong();\n              //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n\n            postingsReader.nextTerm(fieldInfo, state);\n            metaDataUpto++;\n            state.termBlockOrd++;\n          }\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","date":1377268487,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum.Frame#decodeMetaData().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum.Frame#decodeMetaData().mjava","sourceNew":"        public void decodeMetaData() throws IOException {\n\n          //if (DEBUG) System.out.println(\"\\nBTTR.decodeMetadata seg=\" + segment + \" mdUpto=\" + metaDataUpto + \" vs termBlockOrd=\" + state.termBlockOrd);\n\n          // lazily catch up on metadata decode:\n          final int limit = getTermBlockOrd();\n          boolean absolute = metaDataUpto == 0;\n          assert limit > 0;\n\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n\n            // stats\n            state.docFreq = statsReader.readVInt();\n            //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n              state.totalTermFreq = state.docFreq + statsReader.readVLong();\n              //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n            // metadata \n            for (int i = 0; i < longsSize; i++) {\n              longs[i] = bytesReader.readVLong();\n            }\n            postingsReader.decodeTerm(longs, bytesReader, fieldInfo, state, absolute);\n\n            metaDataUpto++;\n            absolute = false;\n          }\n          state.termBlockOrd = metaDataUpto;\n        }\n\n","sourceOld":"        public void decodeMetaData() throws IOException {\n\n          //if (DEBUG) System.out.println(\"\\nBTTR.decodeMetadata seg=\" + segment + \" mdUpto=\" + metaDataUpto + \" vs termBlockOrd=\" + state.termBlockOrd);\n\n          // lazily catch up on metadata decode:\n          final int limit = getTermBlockOrd();\n          assert limit > 0;\n\n          // We must set/incr state.termCount because\n          // postings impl can look at this\n          state.termBlockOrd = metaDataUpto;\n      \n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n            state.docFreq = statsReader.readVInt();\n            //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n              state.totalTermFreq = state.docFreq + statsReader.readVLong();\n              //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n\n            postingsReader.nextTerm(fieldInfo, state);\n            metaDataUpto++;\n            state.termBlockOrd++;\n          }\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum.Frame#decodeMetaData().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum.Frame#decodeMetaData().mjava","sourceNew":"        public void decodeMetaData() throws IOException {\n\n          //if (DEBUG) System.out.println(\"\\nBTTR.decodeMetadata seg=\" + segment + \" mdUpto=\" + metaDataUpto + \" vs termBlockOrd=\" + state.termBlockOrd);\n\n          // lazily catch up on metadata decode:\n          final int limit = getTermBlockOrd();\n          boolean absolute = metaDataUpto == 0;\n          assert limit > 0;\n\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n\n            // stats\n            state.docFreq = statsReader.readVInt();\n            //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n              state.totalTermFreq = state.docFreq + statsReader.readVLong();\n              //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n            // metadata \n            for (int i = 0; i < longsSize; i++) {\n              longs[i] = bytesReader.readVLong();\n            }\n            postingsReader.decodeTerm(longs, bytesReader, fieldInfo, state, absolute);\n\n            metaDataUpto++;\n            absolute = false;\n          }\n          state.termBlockOrd = metaDataUpto;\n        }\n\n","sourceOld":"        public void decodeMetaData() throws IOException {\n\n          //if (DEBUG) System.out.println(\"\\nBTTR.decodeMetadata seg=\" + segment + \" mdUpto=\" + metaDataUpto + \" vs termBlockOrd=\" + state.termBlockOrd);\n\n          // lazily catch up on metadata decode:\n          final int limit = getTermBlockOrd();\n          assert limit > 0;\n\n          // We must set/incr state.termCount because\n          // postings impl can look at this\n          state.termBlockOrd = metaDataUpto;\n      \n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n            state.docFreq = statsReader.readVInt();\n            //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n              state.totalTermFreq = state.docFreq + statsReader.readVLong();\n              //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n\n            postingsReader.nextTerm(fieldInfo, state);\n            metaDataUpto++;\n            state.termBlockOrd++;\n          }\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ad80176d91a6f70fe93880e43dfd697dc4e63ed","date":1400176913,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsReader.FieldReader.SegmentTermsEnum.Frame#decodeMetaData().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum.Frame#decodeMetaData().mjava","sourceNew":"        public void decodeMetaData() throws IOException {\n\n          //if (DEBUG) System.out.println(\"\\nBTTR.decodeMetadata seg=\" + segment + \" mdUpto=\" + metaDataUpto + \" vs termBlockOrd=\" + state.termBlockOrd);\n\n          // lazily catch up on metadata decode:\n          final int limit = getTermBlockOrd();\n          boolean absolute = metaDataUpto == 0;\n          assert limit > 0;\n\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n\n            // stats\n            state.docFreq = statsReader.readVInt();\n            //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n              state.totalTermFreq = state.docFreq + statsReader.readVLong();\n              //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n            // metadata \n            for (int i = 0; i < longsSize; i++) {\n              longs[i] = bytesReader.readVLong();\n            }\n            postingsReader.decodeTerm(longs, bytesReader, fieldInfo, state, absolute);\n\n            metaDataUpto++;\n            absolute = false;\n          }\n          state.termBlockOrd = metaDataUpto;\n        }\n\n","sourceOld":"        public void decodeMetaData() throws IOException {\n\n          //if (DEBUG) System.out.println(\"\\nBTTR.decodeMetadata seg=\" + segment + \" mdUpto=\" + metaDataUpto + \" vs termBlockOrd=\" + state.termBlockOrd);\n\n          // lazily catch up on metadata decode:\n          final int limit = getTermBlockOrd();\n          boolean absolute = metaDataUpto == 0;\n          assert limit > 0;\n\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n\n            // stats\n            state.docFreq = statsReader.readVInt();\n            //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n              state.totalTermFreq = state.docFreq + statsReader.readVLong();\n              //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n            // metadata \n            for (int i = 0; i < longsSize; i++) {\n              longs[i] = bytesReader.readVLong();\n            }\n            postingsReader.decodeTerm(longs, bytesReader, fieldInfo, state, absolute);\n\n            metaDataUpto++;\n            absolute = false;\n          }\n          state.termBlockOrd = metaDataUpto;\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum.Frame#decodeMetaData().mjava","sourceNew":null,"sourceOld":"        public void decodeMetaData() throws IOException {\n\n          //if (DEBUG) System.out.println(\"\\nBTTR.decodeMetadata seg=\" + segment + \" mdUpto=\" + metaDataUpto + \" vs termBlockOrd=\" + state.termBlockOrd);\n\n          // lazily catch up on metadata decode:\n          final int limit = getTermBlockOrd();\n          boolean absolute = metaDataUpto == 0;\n          assert limit > 0;\n\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n\n            // stats\n            state.docFreq = statsReader.readVInt();\n            //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n              state.totalTermFreq = state.docFreq + statsReader.readVLong();\n              //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n            // metadata \n            for (int i = 0; i < longsSize; i++) {\n              longs[i] = bytesReader.readVLong();\n            }\n            postingsReader.decodeTerm(longs, bytesReader, fieldInfo, state, absolute);\n\n            metaDataUpto++;\n            absolute = false;\n          }\n          state.termBlockOrd = metaDataUpto;\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["2f948dd442d23baa6cbb28daf77c8db78b351329","5ad80176d91a6f70fe93880e43dfd697dc4e63ed"],"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","76923f6a33f2c4bec7f584e3f251261afe7ea276"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2f948dd442d23baa6cbb28daf77c8db78b351329":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d637064d608752565d4f9f41b2497dfdfdde50e"]},"commit2Childs":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","2f948dd442d23baa6cbb28daf77c8db78b351329"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["76923f6a33f2c4bec7f584e3f251261afe7ea276","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["4d637064d608752565d4f9f41b2497dfdfdde50e","5ad80176d91a6f70fe93880e43dfd697dc4e63ed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}