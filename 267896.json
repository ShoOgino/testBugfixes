{"path":"lucene/core/src/test/org/apache/lucene/index/TestReaderPool#testPoolReaders().mjava","commits":[{"id":"1926100d9b67becc9701c54266fee3ba7878a5f0","date":1524472150,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestReaderPool#testPoolReaders().mjava","pathOld":"/dev/null","sourceNew":"  public void testPoolReaders() throws IOException {\n    Directory directory = newDirectory();\n    FieldInfos.FieldNumbers fieldNumbers = buildIndex(directory);\n    StandardDirectoryReader reader = (StandardDirectoryReader) DirectoryReader.open(directory);\n    SegmentInfos segmentInfos = reader.segmentInfos.clone();\n\n    ReaderPool pool = new ReaderPool(directory, directory, segmentInfos, fieldNumbers, () -> 0l, null, null, null);\n    SegmentCommitInfo commitInfo = RandomPicks.randomFrom(random(), segmentInfos.asList());\n    assertFalse(pool.isReaderPoolingEnabled());\n    pool.release(pool.get(commitInfo, true), random().nextBoolean());\n    assertNull(pool.get(commitInfo, false));\n    // now start pooling\n    pool.enableReaderPooling();\n    assertTrue(pool.isReaderPoolingEnabled());\n    pool.release(pool.get(commitInfo, true), random().nextBoolean());\n    assertNotNull(pool.get(commitInfo, false));\n    assertSame(pool.get(commitInfo, false), pool.get(commitInfo, false));\n    pool.drop(commitInfo);\n    long ramBytesUsed = 0;\n    assertEquals(0, pool.ramBytesUsed());\n    for (SegmentCommitInfo info : segmentInfos) {\n      pool.release(pool.get(info, true), random().nextBoolean());\n      assertEquals(\" used: \" + ramBytesUsed + \" actual: \" + pool.ramBytesUsed(), 0, pool.ramBytesUsed());\n      ramBytesUsed = pool.ramBytesUsed();\n      assertSame(pool.get(info, false), pool.get(info, false));\n    }\n    assertNotSame(0, pool.ramBytesUsed());\n    pool.dropAll();\n    for (SegmentCommitInfo info : segmentInfos) {\n      assertNull(pool.get(info, false));\n    }\n    assertEquals(0, pool.ramBytesUsed());\n    IOUtils.close(pool, reader, directory);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"763da4a9605e47013078edc323b9d4b608f0f9e0","date":1555353576,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestReaderPool#testPoolReaders().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestReaderPool#testPoolReaders().mjava","sourceNew":"  public void testPoolReaders() throws IOException {\n    Directory directory = newDirectory();\n    FieldInfos.FieldNumbers fieldNumbers = buildIndex(directory);\n    StandardDirectoryReader reader = (StandardDirectoryReader) DirectoryReader.open(directory);\n    SegmentInfos segmentInfos = reader.segmentInfos.clone();\n\n    ReaderPool pool = new ReaderPool(directory, directory, segmentInfos, fieldNumbers, () -> 0l, null, null, null, Collections.emptyMap());\n    SegmentCommitInfo commitInfo = RandomPicks.randomFrom(random(), segmentInfos.asList());\n    assertFalse(pool.isReaderPoolingEnabled());\n    pool.release(pool.get(commitInfo, true), random().nextBoolean());\n    assertNull(pool.get(commitInfo, false));\n    // now start pooling\n    pool.enableReaderPooling();\n    assertTrue(pool.isReaderPoolingEnabled());\n    pool.release(pool.get(commitInfo, true), random().nextBoolean());\n    assertNotNull(pool.get(commitInfo, false));\n    assertSame(pool.get(commitInfo, false), pool.get(commitInfo, false));\n    pool.drop(commitInfo);\n    long ramBytesUsed = 0;\n    assertEquals(0, pool.ramBytesUsed());\n    for (SegmentCommitInfo info : segmentInfos) {\n      pool.release(pool.get(info, true), random().nextBoolean());\n      assertEquals(\" used: \" + ramBytesUsed + \" actual: \" + pool.ramBytesUsed(), 0, pool.ramBytesUsed());\n      ramBytesUsed = pool.ramBytesUsed();\n      assertSame(pool.get(info, false), pool.get(info, false));\n    }\n    assertNotSame(0, pool.ramBytesUsed());\n    pool.dropAll();\n    for (SegmentCommitInfo info : segmentInfos) {\n      assertNull(pool.get(info, false));\n    }\n    assertEquals(0, pool.ramBytesUsed());\n    IOUtils.close(pool, reader, directory);\n  }\n\n","sourceOld":"  public void testPoolReaders() throws IOException {\n    Directory directory = newDirectory();\n    FieldInfos.FieldNumbers fieldNumbers = buildIndex(directory);\n    StandardDirectoryReader reader = (StandardDirectoryReader) DirectoryReader.open(directory);\n    SegmentInfos segmentInfos = reader.segmentInfos.clone();\n\n    ReaderPool pool = new ReaderPool(directory, directory, segmentInfos, fieldNumbers, () -> 0l, null, null, null);\n    SegmentCommitInfo commitInfo = RandomPicks.randomFrom(random(), segmentInfos.asList());\n    assertFalse(pool.isReaderPoolingEnabled());\n    pool.release(pool.get(commitInfo, true), random().nextBoolean());\n    assertNull(pool.get(commitInfo, false));\n    // now start pooling\n    pool.enableReaderPooling();\n    assertTrue(pool.isReaderPoolingEnabled());\n    pool.release(pool.get(commitInfo, true), random().nextBoolean());\n    assertNotNull(pool.get(commitInfo, false));\n    assertSame(pool.get(commitInfo, false), pool.get(commitInfo, false));\n    pool.drop(commitInfo);\n    long ramBytesUsed = 0;\n    assertEquals(0, pool.ramBytesUsed());\n    for (SegmentCommitInfo info : segmentInfos) {\n      pool.release(pool.get(info, true), random().nextBoolean());\n      assertEquals(\" used: \" + ramBytesUsed + \" actual: \" + pool.ramBytesUsed(), 0, pool.ramBytesUsed());\n      ramBytesUsed = pool.ramBytesUsed();\n      assertSame(pool.get(info, false), pool.get(info, false));\n    }\n    assertNotSame(0, pool.ramBytesUsed());\n    pool.dropAll();\n    for (SegmentCommitInfo info : segmentInfos) {\n      assertNull(pool.get(info, false));\n    }\n    assertEquals(0, pool.ramBytesUsed());\n    IOUtils.close(pool, reader, directory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4e83191a3e02851a0b67e5335e6922f3e9ea86d","date":1583489709,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestReaderPool#testPoolReaders().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestReaderPool#testPoolReaders().mjava","sourceNew":"  public void testPoolReaders() throws IOException {\n    Directory directory = newDirectory();\n    FieldInfos.FieldNumbers fieldNumbers = buildIndex(directory);\n    StandardDirectoryReader reader = (StandardDirectoryReader) DirectoryReader.open(directory);\n    SegmentInfos segmentInfos = reader.segmentInfos.clone();\n\n    ReaderPool pool = new ReaderPool(directory, directory, segmentInfos, fieldNumbers, () -> 0l, null, null, null);\n    SegmentCommitInfo commitInfo = RandomPicks.randomFrom(random(), segmentInfos.asList());\n    assertFalse(pool.isReaderPoolingEnabled());\n    pool.release(pool.get(commitInfo, true), random().nextBoolean());\n    assertNull(pool.get(commitInfo, false));\n    // now start pooling\n    pool.enableReaderPooling();\n    assertTrue(pool.isReaderPoolingEnabled());\n    pool.release(pool.get(commitInfo, true), random().nextBoolean());\n    assertNotNull(pool.get(commitInfo, false));\n    assertSame(pool.get(commitInfo, false), pool.get(commitInfo, false));\n    pool.drop(commitInfo);\n    long ramBytesUsed = 0;\n    assertEquals(0, pool.ramBytesUsed());\n    for (SegmentCommitInfo info : segmentInfos) {\n      pool.release(pool.get(info, true), random().nextBoolean());\n      assertEquals(\" used: \" + ramBytesUsed + \" actual: \" + pool.ramBytesUsed(), 0, pool.ramBytesUsed());\n      ramBytesUsed = pool.ramBytesUsed();\n      assertSame(pool.get(info, false), pool.get(info, false));\n    }\n    assertNotSame(0, pool.ramBytesUsed());\n    pool.dropAll();\n    for (SegmentCommitInfo info : segmentInfos) {\n      assertNull(pool.get(info, false));\n    }\n    assertEquals(0, pool.ramBytesUsed());\n    IOUtils.close(pool, reader, directory);\n  }\n\n","sourceOld":"  public void testPoolReaders() throws IOException {\n    Directory directory = newDirectory();\n    FieldInfos.FieldNumbers fieldNumbers = buildIndex(directory);\n    StandardDirectoryReader reader = (StandardDirectoryReader) DirectoryReader.open(directory);\n    SegmentInfos segmentInfos = reader.segmentInfos.clone();\n\n    ReaderPool pool = new ReaderPool(directory, directory, segmentInfos, fieldNumbers, () -> 0l, null, null, null, Collections.emptyMap());\n    SegmentCommitInfo commitInfo = RandomPicks.randomFrom(random(), segmentInfos.asList());\n    assertFalse(pool.isReaderPoolingEnabled());\n    pool.release(pool.get(commitInfo, true), random().nextBoolean());\n    assertNull(pool.get(commitInfo, false));\n    // now start pooling\n    pool.enableReaderPooling();\n    assertTrue(pool.isReaderPoolingEnabled());\n    pool.release(pool.get(commitInfo, true), random().nextBoolean());\n    assertNotNull(pool.get(commitInfo, false));\n    assertSame(pool.get(commitInfo, false), pool.get(commitInfo, false));\n    pool.drop(commitInfo);\n    long ramBytesUsed = 0;\n    assertEquals(0, pool.ramBytesUsed());\n    for (SegmentCommitInfo info : segmentInfos) {\n      pool.release(pool.get(info, true), random().nextBoolean());\n      assertEquals(\" used: \" + ramBytesUsed + \" actual: \" + pool.ramBytesUsed(), 0, pool.ramBytesUsed());\n      ramBytesUsed = pool.ramBytesUsed();\n      assertSame(pool.get(info, false), pool.get(info, false));\n    }\n    assertNotSame(0, pool.ramBytesUsed());\n    pool.dropAll();\n    for (SegmentCommitInfo info : segmentInfos) {\n      assertNull(pool.get(info, false));\n    }\n    assertEquals(0, pool.ramBytesUsed());\n    IOUtils.close(pool, reader, directory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"763da4a9605e47013078edc323b9d4b608f0f9e0":["1926100d9b67becc9701c54266fee3ba7878a5f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1926100d9b67becc9701c54266fee3ba7878a5f0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a4e83191a3e02851a0b67e5335e6922f3e9ea86d"],"a4e83191a3e02851a0b67e5335e6922f3e9ea86d":["763da4a9605e47013078edc323b9d4b608f0f9e0"]},"commit2Childs":{"763da4a9605e47013078edc323b9d4b608f0f9e0":["a4e83191a3e02851a0b67e5335e6922f3e9ea86d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1926100d9b67becc9701c54266fee3ba7878a5f0"],"1926100d9b67becc9701c54266fee3ba7878a5f0":["763da4a9605e47013078edc323b9d4b608f0f9e0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"a4e83191a3e02851a0b67e5335e6922f3e9ea86d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}