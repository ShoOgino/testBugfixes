{"path":"src/test/org/apache/lucene/search/RemoteCachingWrapperFilterHelper#bits(IndexReader).mjava","commits":[{"id":"203bc84a5a9461a17a2a8e136f872bf4657aaee4","date":1176138824,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/RemoteCachingWrapperFilterHelper#bits(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  public BitSet bits(IndexReader reader) throws IOException {\n    Filter cachedFilter = FilterManager.getInstance().getFilter(filter);\n    \n    TestCase.assertNotNull(\"Filter should not be null\", cachedFilter);\n    if (!shouldHaveCache) {\n      TestCase.assertSame(\"First time filter should be the same \", filter, cachedFilter);\n    } else {\n      TestCase.assertNotSame(\"We should have a cached version of the filter\", filter, cachedFilter);\n    }\n    \n    if (filter instanceof CachingWrapperFilterHelper) {\n      ((CachingWrapperFilterHelper)cachedFilter).setShouldHaveCache(shouldHaveCache);\n    }\n    return cachedFilter.bits(reader);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52ce7e961a8217faac8128e3c8fe67819eefdde9","date":1201979043,"type":5,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/RemoteCachingWrapperFilterHelper#getDocIdSet(IndexReader).mjava","pathOld":"src/test/org/apache/lucene/search/RemoteCachingWrapperFilterHelper#bits(IndexReader).mjava","sourceNew":"  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    Filter cachedFilter = FilterManager.getInstance().getFilter(filter);\n    \n    TestCase.assertNotNull(\"Filter should not be null\", cachedFilter);\n    if (!shouldHaveCache) {\n      TestCase.assertSame(\"First time filter should be the same \", filter, cachedFilter);\n    } else {\n      TestCase.assertNotSame(\"We should have a cached version of the filter\", filter, cachedFilter);\n    }\n    \n    if (filter instanceof CachingWrapperFilterHelper) {\n      ((CachingWrapperFilterHelper)cachedFilter).setShouldHaveCache(shouldHaveCache);\n    }\n    return cachedFilter.getDocIdSet(reader);\n  }\n\n","sourceOld":"  public BitSet bits(IndexReader reader) throws IOException {\n    Filter cachedFilter = FilterManager.getInstance().getFilter(filter);\n    \n    TestCase.assertNotNull(\"Filter should not be null\", cachedFilter);\n    if (!shouldHaveCache) {\n      TestCase.assertSame(\"First time filter should be the same \", filter, cachedFilter);\n    } else {\n      TestCase.assertNotSame(\"We should have a cached version of the filter\", filter, cachedFilter);\n    }\n    \n    if (filter instanceof CachingWrapperFilterHelper) {\n      ((CachingWrapperFilterHelper)cachedFilter).setShouldHaveCache(shouldHaveCache);\n    }\n    return cachedFilter.bits(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"52ce7e961a8217faac8128e3c8fe67819eefdde9":["203bc84a5a9461a17a2a8e136f872bf4657aaee4"],"203bc84a5a9461a17a2a8e136f872bf4657aaee4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["52ce7e961a8217faac8128e3c8fe67819eefdde9"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["203bc84a5a9461a17a2a8e136f872bf4657aaee4"],"52ce7e961a8217faac8128e3c8fe67819eefdde9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"203bc84a5a9461a17a2a8e136f872bf4657aaee4":["52ce7e961a8217faac8128e3c8fe67819eefdde9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}