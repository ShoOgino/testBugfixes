{"path":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#testDiscardShouldClauses().mjava","commits":[{"id":"f3b18b7e0f913460bf896d65b6de19fad9cdf6fb","date":1557385218,"type":0,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#testDiscardShouldClauses().mjava","pathOld":"/dev/null","sourceNew":"  public void testDiscardShouldClauses() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery.Builder query1 = new BooleanQuery.Builder();\n    query1.add(new TermQuery(new Term(\"field\", \"a\")), Occur.MUST);\n    query1.add(new TermQuery(new Term(\"field\", \"b\")), Occur.SHOULD);\n\n    query1.setMinimumNumberShouldMatch(0);\n\n    Weight weight = searcher.createWeight(searcher.rewrite(query1.build()), ScoreMode.COMPLETE_NO_SCORES, 1);\n\n    Query rewrittenQuery1 = weight.getQuery();\n\n    assertTrue(rewrittenQuery1 instanceof BooleanQuery);\n\n    BooleanQuery booleanRewrittenQuery1 = (BooleanQuery) rewrittenQuery1;\n\n    for (BooleanClause clause : booleanRewrittenQuery1.clauses()) {\n      assertNotEquals(clause.getOccur(), Occur.SHOULD);\n    }\n\n    BooleanQuery.Builder query2 = new BooleanQuery.Builder();\n    query2.add(new TermQuery(new Term(\"field\", \"a\")), Occur.MUST);\n    query2.add(new TermQuery(new Term(\"field\", \"b\")), Occur.SHOULD);\n    query2.add(new TermQuery(new Term(\"field\", \"c\")), Occur.FILTER);\n\n    query2.setMinimumNumberShouldMatch(0);\n\n    weight = searcher.createWeight(searcher.rewrite(query2.build()), ScoreMode.COMPLETE_NO_SCORES, 1);\n\n    Query rewrittenQuery2 = weight.getQuery();\n\n    assertTrue(rewrittenQuery2 instanceof BooleanQuery);\n\n    BooleanQuery booleanRewrittenQuery2 = (BooleanQuery) rewrittenQuery1;\n\n    for (BooleanClause clause : booleanRewrittenQuery2.clauses()) {\n      assertNotEquals(clause.getOccur(), Occur.SHOULD);\n    }\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f3b18b7e0f913460bf896d65b6de19fad9cdf6fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f3b18b7e0f913460bf896d65b6de19fad9cdf6fb"]},"commit2Childs":{"f3b18b7e0f913460bf896d65b6de19fad9cdf6fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f3b18b7e0f913460bf896d65b6de19fad9cdf6fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}