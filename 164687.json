{"path":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#randomTestString(int).mjava","commits":[{"id":"6a617b59fd276a5d672bc7269a3d2108331d1bdd","date":1299698369,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#randomTestString(int).mjava","pathOld":"/dev/null","sourceNew":"  private String randomTestString(int maxLength) {\n    // we can't just use _TestUtil.randomUnicodeString() or we might get 0xfffe etc\n    // (considered invalid by XML)\n    \n    int size = random.nextInt(maxLength);\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < size; i++) {\n      switch(random.nextInt(4)) {\n        case 0: /* single byte */ \n          sb.append('a'); \n          break;\n        case 1: /* two bytes */\n          sb.append('\\u0645');\n          break;\n        case 2: /* three bytes */\n          sb.append('\\u092a');\n          break;\n        case 3: /* four bytes */\n          sb.appendCodePoint(0x29B05);\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#randomTestString(int).mjava","pathOld":"/dev/null","sourceNew":"  private String randomTestString(int maxLength) {\n    // we can't just use _TestUtil.randomUnicodeString() or we might get 0xfffe etc\n    // (considered invalid by XML)\n    \n    int size = random.nextInt(maxLength);\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < size; i++) {\n      switch(random.nextInt(4)) {\n        case 0: /* single byte */ \n          sb.append('a'); \n          break;\n        case 1: /* two bytes */\n          sb.append('\\u0645');\n          break;\n        case 2: /* three bytes */\n          sb.append('\\u092a');\n          break;\n        case 3: /* four bytes */\n          sb.appendCodePoint(0x29B05);\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#randomTestString(int).mjava","pathOld":"/dev/null","sourceNew":"  private String randomTestString(int maxLength) {\n    // we can't just use _TestUtil.randomUnicodeString() or we might get 0xfffe etc\n    // (considered invalid by XML)\n    \n    int size = random.nextInt(maxLength);\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < size; i++) {\n      switch(random.nextInt(4)) {\n        case 0: /* single byte */ \n          sb.append('a'); \n          break;\n        case 1: /* two bytes */\n          sb.append('\\u0645');\n          break;\n        case 2: /* three bytes */\n          sb.append('\\u092a');\n          break;\n        case 3: /* four bytes */\n          sb.appendCodePoint(0x29B05);\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#randomTestString(int).mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#randomTestString(int).mjava","sourceNew":"  private String randomTestString(int maxLength) {\n    // we can't just use _TestUtil.randomUnicodeString() or we might get 0xfffe etc\n    // (considered invalid by XML)\n    \n    int size = random.nextInt(maxLength);\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < size; i++) {\n      switch(random.nextInt(4)) {\n        case 0: /* single byte */ \n          sb.append('a'); \n          break;\n        case 1: /* two bytes */\n          sb.append('\\u0645');\n          break;\n        case 2: /* three bytes */\n          sb.append('\\u092a');\n          break;\n        case 3: /* four bytes */\n          sb.appendCodePoint(0x29B05);\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  private String randomTestString(int maxLength) {\n    // we can't just use _TestUtil.randomUnicodeString() or we might get 0xfffe etc\n    // (considered invalid by XML)\n    \n    int size = random.nextInt(maxLength);\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < size; i++) {\n      switch(random.nextInt(4)) {\n        case 0: /* single byte */ \n          sb.append('a'); \n          break;\n        case 1: /* two bytes */\n          sb.append('\\u0645');\n          break;\n        case 2: /* three bytes */\n          sb.append('\\u092a');\n          break;\n        case 3: /* four bytes */\n          sb.appendCodePoint(0x29B05);\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#randomTestString(int).mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#randomTestString(int).mjava","sourceNew":"  private String randomTestString(int maxLength) {\n    // we can't just use _TestUtil.randomUnicodeString() or we might get 0xfffe etc\n    // (considered invalid by XML)\n    \n    int size = random.nextInt(maxLength);\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < size; i++) {\n      switch(random.nextInt(4)) {\n        case 0: /* single byte */ \n          sb.append('a'); \n          break;\n        case 1: /* two bytes */\n          sb.append('\\u0645');\n          break;\n        case 2: /* three bytes */\n          sb.append('\\u092a');\n          break;\n        case 3: /* four bytes */\n          sb.appendCodePoint(0x29B05);\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  private String randomTestString(int maxLength) {\n    // we can't just use _TestUtil.randomUnicodeString() or we might get 0xfffe etc\n    // (considered invalid by XML)\n    \n    int size = random.nextInt(maxLength);\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < size; i++) {\n      switch(random.nextInt(4)) {\n        case 0: /* single byte */ \n          sb.append('a'); \n          break;\n        case 1: /* two bytes */\n          sb.append('\\u0645');\n          break;\n        case 2: /* three bytes */\n          sb.append('\\u092a');\n          break;\n        case 3: /* four bytes */\n          sb.appendCodePoint(0x29B05);\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#randomTestString(int).mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#randomTestString(int).mjava","sourceNew":"  private String randomTestString(int maxLength) {\n    // we can't just use _TestUtil.randomUnicodeString() or we might get 0xfffe etc\n    // (considered invalid by XML)\n    \n    int size = random.nextInt(maxLength);\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < size; i++) {\n      switch(random.nextInt(4)) {\n        case 0: /* single byte */ \n          sb.append('a'); \n          break;\n        case 1: /* two bytes */\n          sb.append('\\u0645');\n          break;\n        case 2: /* three bytes */\n          sb.append('\\u092a');\n          break;\n        case 3: /* four bytes */\n          sb.appendCodePoint(0x29B05);\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  private String randomTestString(int maxLength) {\n    // we can't just use _TestUtil.randomUnicodeString() or we might get 0xfffe etc\n    // (considered invalid by XML)\n    \n    int size = random.nextInt(maxLength);\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < size; i++) {\n      switch(random.nextInt(4)) {\n        case 0: /* single byte */ \n          sb.append('a'); \n          break;\n        case 1: /* two bytes */\n          sb.append('\\u0645');\n          break;\n        case 2: /* three bytes */\n          sb.append('\\u092a');\n          break;\n        case 3: /* four bytes */\n          sb.appendCodePoint(0x29B05);\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6a617b59fd276a5d672bc7269a3d2108331d1bdd"],"6a617b59fd276a5d672bc7269a3d2108331d1bdd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["6a617b59fd276a5d672bc7269a3d2108331d1bdd"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6a617b59fd276a5d672bc7269a3d2108331d1bdd"],"c26f00b574427b55127e869b935845554afde1fa":["6a617b59fd276a5d672bc7269a3d2108331d1bdd","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["6a617b59fd276a5d672bc7269a3d2108331d1bdd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"6a617b59fd276a5d672bc7269a3d2108331d1bdd":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","c903c3d15906a3da96b8c0c2fb704491005fdbdb","d619839baa8ce5503e496b94a9e42ad6f079293f","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","6a617b59fd276a5d672bc7269a3d2108331d1bdd","d619839baa8ce5503e496b94a9e42ad6f079293f"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}