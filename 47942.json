{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ConcatenateGraphFilter#ConcatenateGraphFilter(TokenStream,boolean,boolean,int).mjava","commits":[{"id":"9e45ad199e1b1a4bbc15c1c08dcd73dc08fa927a","date":1528168051,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ConcatenateGraphFilter#ConcatenateGraphFilter(TokenStream,boolean,boolean,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a token stream to convert <code>input</code> to a token stream\n   * of accepted strings by its token stream graph.\n   *\n   * @param inputTokenStream The input/incoming TokenStream\n   * @param preserveSep Whether {@link #SEP_LABEL} should separate the input tokens in the concatenated token\n   * @param preservePositionIncrements Whether to add an empty token for missing positions.\n   *                                   The effect is a consecutive {@link #SEP_LABEL}.\n   *                                   When false, it's as if there were no missing positions\n   *                                     (we pretend the surrounding tokens were adjacent).\n   * @param maxGraphExpansions If the tokenStream graph has more than this many possible paths through, then we'll throw\n   *                           {@link TooComplexToDeterminizeException} to preserve the stability and memory of the\n   *                           machine.\n   * @throws TooComplexToDeterminizeException if the tokenStream graph has more than {@code maxGraphExpansions}\n   *         expansions\n   *\n   */\n  public ConcatenateGraphFilter(TokenStream inputTokenStream, boolean preserveSep, boolean preservePositionIncrements, int maxGraphExpansions) {\n    // Don't call the super(input) ctor - this is a true delegate and has a new attribute source since we consume\n    // the input stream entirely in the first call to incrementToken\n    this.inputTokenStream = inputTokenStream;\n    this.preserveSep = preserveSep;\n    this.preservePositionIncrements = preservePositionIncrements;\n    this.maxGraphExpansions = maxGraphExpansions;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ConcatenateGraphFilter#ConcatenateGraphFilter(TokenStream,boolean,boolean,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a token stream to convert <code>input</code> to a token stream\n   * of accepted strings by its token stream graph.\n   *\n   * @param inputTokenStream The input/incoming TokenStream\n   * @param preserveSep Whether {@link #SEP_LABEL} should separate the input tokens in the concatenated token\n   * @param preservePositionIncrements Whether to add an empty token for missing positions.\n   *                                   The effect is a consecutive {@link #SEP_LABEL}.\n   *                                   When false, it's as if there were no missing positions\n   *                                     (we pretend the surrounding tokens were adjacent).\n   * @param maxGraphExpansions If the tokenStream graph has more than this many possible paths through, then we'll throw\n   *                           {@link TooComplexToDeterminizeException} to preserve the stability and memory of the\n   *                           machine.\n   * @throws TooComplexToDeterminizeException if the tokenStream graph has more than {@code maxGraphExpansions}\n   *         expansions\n   *\n   */\n  public ConcatenateGraphFilter(TokenStream inputTokenStream, boolean preserveSep, boolean preservePositionIncrements, int maxGraphExpansions) {\n    // Don't call the super(input) ctor - this is a true delegate and has a new attribute source since we consume\n    // the input stream entirely in the first call to incrementToken\n    this.inputTokenStream = inputTokenStream;\n    this.preserveSep = preserveSep;\n    this.preservePositionIncrements = preservePositionIncrements;\n    this.maxGraphExpansions = maxGraphExpansions;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ConcatenateGraphFilter#ConcatenateGraphFilter(TokenStream,boolean,boolean,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a token stream to convert <code>input</code> to a token stream\n   * of accepted strings by its token stream graph.\n   *\n   * @param inputTokenStream The input/incoming TokenStream\n   * @param preserveSep Whether {@link #SEP_LABEL} should separate the input tokens in the concatenated token\n   * @param preservePositionIncrements Whether to add an empty token for missing positions.\n   *                                   The effect is a consecutive {@link #SEP_LABEL}.\n   *                                   When false, it's as if there were no missing positions\n   *                                     (we pretend the surrounding tokens were adjacent).\n   * @param maxGraphExpansions If the tokenStream graph has more than this many possible paths through, then we'll throw\n   *                           {@link TooComplexToDeterminizeException} to preserve the stability and memory of the\n   *                           machine.\n   * @throws TooComplexToDeterminizeException if the tokenStream graph has more than {@code maxGraphExpansions}\n   *         expansions\n   *\n   */\n  public ConcatenateGraphFilter(TokenStream inputTokenStream, boolean preserveSep, boolean preservePositionIncrements, int maxGraphExpansions) {\n    // Don't call the super(input) ctor - this is a true delegate and has a new attribute source since we consume\n    // the input stream entirely in the first call to incrementToken\n    this.inputTokenStream = inputTokenStream;\n    this.preserveSep = preserveSep;\n    this.preservePositionIncrements = preservePositionIncrements;\n    this.maxGraphExpansions = maxGraphExpansions;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5533de9a942219a587ac7abed8c65796531dc16d","date":1573756010,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ConcatenateGraphFilter#ConcatenateGraphFilter(TokenStream,boolean,boolean,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ConcatenateGraphFilter#ConcatenateGraphFilter(TokenStream,boolean,boolean,int).mjava","sourceNew":"  /**\n   * Calls {@link #ConcatenateGraphFilter(org.apache.lucene.analysis.TokenStream, java.lang.Character, boolean, int)}\n   * @param preserveSep Whether {@link #SEP_LABEL} should separate the input tokens in the concatenated token\n   */\n  public ConcatenateGraphFilter(TokenStream inputTokenStream, boolean preserveSep, boolean preservePositionIncrements, int maxGraphExpansions) {\n    this(inputTokenStream, (preserveSep) ? DEFAULT_TOKEN_SEPARATOR : null, preservePositionIncrements, maxGraphExpansions);\n  }\n\n","sourceOld":"  /**\n   * Creates a token stream to convert <code>input</code> to a token stream\n   * of accepted strings by its token stream graph.\n   *\n   * @param inputTokenStream The input/incoming TokenStream\n   * @param preserveSep Whether {@link #SEP_LABEL} should separate the input tokens in the concatenated token\n   * @param preservePositionIncrements Whether to add an empty token for missing positions.\n   *                                   The effect is a consecutive {@link #SEP_LABEL}.\n   *                                   When false, it's as if there were no missing positions\n   *                                     (we pretend the surrounding tokens were adjacent).\n   * @param maxGraphExpansions If the tokenStream graph has more than this many possible paths through, then we'll throw\n   *                           {@link TooComplexToDeterminizeException} to preserve the stability and memory of the\n   *                           machine.\n   * @throws TooComplexToDeterminizeException if the tokenStream graph has more than {@code maxGraphExpansions}\n   *         expansions\n   *\n   */\n  public ConcatenateGraphFilter(TokenStream inputTokenStream, boolean preserveSep, boolean preservePositionIncrements, int maxGraphExpansions) {\n    // Don't call the super(input) ctor - this is a true delegate and has a new attribute source since we consume\n    // the input stream entirely in the first call to incrementToken\n    this.inputTokenStream = inputTokenStream;\n    this.preserveSep = preserveSep;\n    this.preservePositionIncrements = preservePositionIncrements;\n    this.maxGraphExpansions = maxGraphExpansions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5533de9a942219a587ac7abed8c65796531dc16d":["9e45ad199e1b1a4bbc15c1c08dcd73dc08fa927a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9e45ad199e1b1a4bbc15c1c08dcd73dc08fa927a"],"9e45ad199e1b1a4bbc15c1c08dcd73dc08fa927a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f592209545c71895260367152601e9200399776d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9e45ad199e1b1a4bbc15c1c08dcd73dc08fa927a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5533de9a942219a587ac7abed8c65796531dc16d"]},"commit2Childs":{"5533de9a942219a587ac7abed8c65796531dc16d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b70042a8a492f7054d480ccdd2be9796510d4327","9e45ad199e1b1a4bbc15c1c08dcd73dc08fa927a","f592209545c71895260367152601e9200399776d"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"9e45ad199e1b1a4bbc15c1c08dcd73dc08fa927a":["5533de9a942219a587ac7abed8c65796531dc16d","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"f592209545c71895260367152601e9200399776d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}