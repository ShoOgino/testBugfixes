{"path":"lucene/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(MergeState,DocValues[]).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(MergeState,DocValues[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DocValuesConsumer#merge(MergeState,DocValues[]).mjava","sourceNew":"  /**\n   * Merges the given {@link org.apache.lucene.index.MergeState} into\n   * this {@link DocValuesConsumer}.\n   * \n   * @param mergeState\n   *          the state to merge\n   * @param docValues docValues array containing one instance per reader (\n   *          {@link org.apache.lucene.index.MergeState#readers}) or <code>null</code> if the reader has\n   *          no {@link DocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public void merge(MergeState mergeState, DocValues[] docValues) throws IOException {\n    assert mergeState != null;\n    boolean hasMerged = false;\n    for(int readerIDX=0;readerIDX<mergeState.readers.size();readerIDX++) {\n      final org.apache.lucene.index.MergeState.IndexReaderAndLiveDocs reader = mergeState.readers.get(readerIDX);\n      if (docValues[readerIDX] != null) {\n        hasMerged = true;\n        merge(new SingleSubMergeState(docValues[readerIDX], mergeState.docBase[readerIDX], reader.reader.maxDoc(),\n                                    reader.liveDocs));\n      }\n    }\n    // only finish if no exception is thrown!\n    if (hasMerged) {\n      finish(mergeState.mergedDocCount);\n    }\n  }\n\n","sourceOld":"  /**\n   * Merges the given {@link org.apache.lucene.index.MergeState} into\n   * this {@link DocValuesConsumer}.\n   * \n   * @param mergeState\n   *          the state to merge\n   * @param docValues docValues array containing one instance per reader (\n   *          {@link org.apache.lucene.index.MergeState#readers}) or <code>null</code> if the reader has\n   *          no {@link DocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public void merge(MergeState mergeState, DocValues[] docValues) throws IOException {\n    assert mergeState != null;\n    boolean hasMerged = false;\n    for(int readerIDX=0;readerIDX<mergeState.readers.size();readerIDX++) {\n      final org.apache.lucene.index.MergeState.IndexReaderAndLiveDocs reader = mergeState.readers.get(readerIDX);\n      if (docValues[readerIDX] != null) {\n        hasMerged = true;\n        merge(new SingleSubMergeState(docValues[readerIDX], mergeState.docBase[readerIDX], reader.reader.maxDoc(),\n                                    reader.liveDocs));\n      }\n    }\n    // only finish if no exception is thrown!\n    if (hasMerged) {\n      finish(mergeState.mergedDocCount);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6e3376a314fcc2b31bc46d399c2ff23552b78d6","date":1325780477,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(MergeState,DocValues[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(MergeState,DocValues[]).mjava","sourceNew":"  /**\n   * Merges the given {@link org.apache.lucene.index.MergeState} into\n   * this {@link DocValuesConsumer}.\n   * \n   * @param mergeState\n   *          the state to merge\n   * @param docValues docValues array containing one instance per reader (\n   *          {@link org.apache.lucene.index.MergeState#readers}) or <code>null</code> if the reader has\n   *          no {@link DocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public void merge(MergeState mergeState, DocValues[] docValues) throws IOException {\n    assert mergeState != null;\n    boolean hasMerged = false;\n    for(int readerIDX=0;readerIDX<mergeState.readers.size();readerIDX++) {\n      final org.apache.lucene.index.MergeState.IndexReaderAndLiveDocs reader = mergeState.readers.get(readerIDX);\n      if (docValues[readerIDX] != null) {\n        hasMerged = true;\n        merge(new SingleSubMergeState(docValues[readerIDX], mergeState.docBase[readerIDX], reader.reader.maxDoc(),\n                                    reader.liveDocs));\n        mergeState.checkAbort.work(reader.reader.maxDoc());\n      }\n    }\n    // only finish if no exception is thrown!\n    if (hasMerged) {\n      finish(mergeState.mergedDocCount);\n    }\n  }\n\n","sourceOld":"  /**\n   * Merges the given {@link org.apache.lucene.index.MergeState} into\n   * this {@link DocValuesConsumer}.\n   * \n   * @param mergeState\n   *          the state to merge\n   * @param docValues docValues array containing one instance per reader (\n   *          {@link org.apache.lucene.index.MergeState#readers}) or <code>null</code> if the reader has\n   *          no {@link DocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public void merge(MergeState mergeState, DocValues[] docValues) throws IOException {\n    assert mergeState != null;\n    boolean hasMerged = false;\n    for(int readerIDX=0;readerIDX<mergeState.readers.size();readerIDX++) {\n      final org.apache.lucene.index.MergeState.IndexReaderAndLiveDocs reader = mergeState.readers.get(readerIDX);\n      if (docValues[readerIDX] != null) {\n        hasMerged = true;\n        merge(new SingleSubMergeState(docValues[readerIDX], mergeState.docBase[readerIDX], reader.reader.maxDoc(),\n                                    reader.liveDocs));\n      }\n    }\n    // only finish if no exception is thrown!\n    if (hasMerged) {\n      finish(mergeState.mergedDocCount);\n    }\n  }\n\n","bugFix":null,"bugIntro":["c95a819869502635864dac0a788f874787e3395b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa0f44f887719e97183771e977cfc4bfb485b766","date":1326668713,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(MergeState,DocValues[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(MergeState,DocValues[]).mjava","sourceNew":"  /**\n   * Merges the given {@link org.apache.lucene.index.MergeState} into\n   * this {@link DocValuesConsumer}.\n   * \n   * @param mergeState\n   *          the state to merge\n   * @param docValues docValues array containing one instance per reader (\n   *          {@link org.apache.lucene.index.MergeState#readers}) or <code>null</code> if the reader has\n   *          no {@link DocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public void merge(MergeState mergeState, DocValues[] docValues) throws IOException {\n    assert mergeState != null;\n    boolean hasMerged = false;\n    for(int readerIDX=0;readerIDX<mergeState.readers.size();readerIDX++) {\n      final org.apache.lucene.index.MergeState.IndexReaderAndLiveDocs reader = mergeState.readers.get(readerIDX);\n      if (docValues[readerIDX] != null) {\n        hasMerged = true;\n        merge(docValues[readerIDX], mergeState.docBase[readerIDX],\n              reader.reader.maxDoc(), reader.liveDocs);\n        mergeState.checkAbort.work(reader.reader.maxDoc());\n      }\n    }\n    // only finish if no exception is thrown!\n    if (hasMerged) {\n      finish(mergeState.mergedDocCount);\n    }\n  }\n\n","sourceOld":"  /**\n   * Merges the given {@link org.apache.lucene.index.MergeState} into\n   * this {@link DocValuesConsumer}.\n   * \n   * @param mergeState\n   *          the state to merge\n   * @param docValues docValues array containing one instance per reader (\n   *          {@link org.apache.lucene.index.MergeState#readers}) or <code>null</code> if the reader has\n   *          no {@link DocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public void merge(MergeState mergeState, DocValues[] docValues) throws IOException {\n    assert mergeState != null;\n    boolean hasMerged = false;\n    for(int readerIDX=0;readerIDX<mergeState.readers.size();readerIDX++) {\n      final org.apache.lucene.index.MergeState.IndexReaderAndLiveDocs reader = mergeState.readers.get(readerIDX);\n      if (docValues[readerIDX] != null) {\n        hasMerged = true;\n        merge(new SingleSubMergeState(docValues[readerIDX], mergeState.docBase[readerIDX], reader.reader.maxDoc(),\n                                    reader.liveDocs));\n        mergeState.checkAbort.work(reader.reader.maxDoc());\n      }\n    }\n    // only finish if no exception is thrown!\n    if (hasMerged) {\n      finish(mergeState.mergedDocCount);\n    }\n  }\n\n","bugFix":["32aca6bb0a6aa0a1813e7d035ac0e039f54269f4","f9efc72acdea22f5285be0a808f8bba51bb8e367"],"bugIntro":["c95a819869502635864dac0a788f874787e3395b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(MergeState,DocValues[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(MergeState,DocValues[]).mjava","sourceNew":"  /**\n   * Merges the given {@link org.apache.lucene.index.MergeState} into\n   * this {@link DocValuesConsumer}.\n   * \n   * @param mergeState\n   *          the state to merge\n   * @param docValues docValues array containing one instance per reader (\n   *          {@link org.apache.lucene.index.MergeState#readers}) or <code>null</code> if the reader has\n   *          no {@link DocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public void merge(MergeState mergeState, DocValues[] docValues) throws IOException {\n    assert mergeState != null;\n    boolean hasMerged = false;\n    for(int readerIDX=0;readerIDX<mergeState.readers.size();readerIDX++) {\n      final org.apache.lucene.index.MergeState.IndexReaderAndLiveDocs reader = mergeState.readers.get(readerIDX);\n      if (docValues[readerIDX] != null) {\n        hasMerged = true;\n        merge(docValues[readerIDX], mergeState.docBase[readerIDX],\n              reader.reader.maxDoc(), reader.liveDocs);\n        mergeState.checkAbort.work(reader.reader.maxDoc());\n      }\n    }\n    // only finish if no exception is thrown!\n    if (hasMerged) {\n      finish(mergeState.mergedDocCount);\n    }\n  }\n\n","sourceOld":"  /**\n   * Merges the given {@link org.apache.lucene.index.MergeState} into\n   * this {@link DocValuesConsumer}.\n   * \n   * @param mergeState\n   *          the state to merge\n   * @param docValues docValues array containing one instance per reader (\n   *          {@link org.apache.lucene.index.MergeState#readers}) or <code>null</code> if the reader has\n   *          no {@link DocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public void merge(MergeState mergeState, DocValues[] docValues) throws IOException {\n    assert mergeState != null;\n    boolean hasMerged = false;\n    for(int readerIDX=0;readerIDX<mergeState.readers.size();readerIDX++) {\n      final org.apache.lucene.index.MergeState.IndexReaderAndLiveDocs reader = mergeState.readers.get(readerIDX);\n      if (docValues[readerIDX] != null) {\n        hasMerged = true;\n        merge(docValues[readerIDX], mergeState.docBase[readerIDX],\n              reader.reader.maxDoc(), reader.liveDocs);\n        mergeState.checkAbort.work(reader.reader.maxDoc());\n      }\n    }\n    // only finish if no exception is thrown!\n    if (hasMerged) {\n      finish(mergeState.mergedDocCount);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fa0f44f887719e97183771e977cfc4bfb485b766"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa0f44f887719e97183771e977cfc4bfb485b766":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"fa0f44f887719e97183771e977cfc4bfb485b766":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["fa0f44f887719e97183771e977cfc4bfb485b766"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}