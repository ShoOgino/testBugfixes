{"path":"backwards/src/java/org/apache/lucene/analysis/Token#clone(char[],int,int,int,int).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/analysis/Token#clone(char[],int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Makes a clone, but replaces the term buffer &\n   * start/end offset in the process.  This is more\n   * efficient than doing a full clone (and then calling\n   * setTermBuffer) because it saves a wasted copy of the old\n   * termBuffer. */\n  public Token clone(char[] newTermBuffer, int newTermOffset, int newTermLength, int newStartOffset, int newEndOffset) {\n    final Token t = new Token(newTermBuffer, newTermOffset, newTermLength, newStartOffset, newEndOffset);\n    t.positionIncrement = positionIncrement;\n    t.flags = flags;\n    t.type = type;\n    if (payload != null)\n      t.payload = (Payload) payload.clone();\n    return t;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/analysis/Token#clone(char[],int,int,int,int).mjava","pathOld":"backwards/src/java/org/apache/lucene/analysis/Token#clone(char[],int,int,int,int).mjava","sourceNew":"  /** Makes a clone, but replaces the term buffer &\n   * start/end offset in the process.  This is more\n   * efficient than doing a full clone (and then calling\n   * setTermBuffer) because it saves a wasted copy of the old\n   * termBuffer. */\n  public Token clone(char[] newTermBuffer, int newTermOffset, int newTermLength, int newStartOffset, int newEndOffset) {\n    final Token t = new Token(newTermBuffer, newTermOffset, newTermLength, newStartOffset, newEndOffset);\n    t.positionIncrement = positionIncrement;\n    t.flags = flags;\n    t.type = type;\n    if (payload != null)\n      t.payload = (Payload) payload.clone();\n    return t;\n  }\n\n","sourceOld":"  /** Makes a clone, but replaces the term buffer &\n   * start/end offset in the process.  This is more\n   * efficient than doing a full clone (and then calling\n   * setTermBuffer) because it saves a wasted copy of the old\n   * termBuffer. */\n  public Token clone(char[] newTermBuffer, int newTermOffset, int newTermLength, int newStartOffset, int newEndOffset) {\n    final Token t = new Token(newTermBuffer, newTermOffset, newTermLength, newStartOffset, newEndOffset);\n    t.positionIncrement = positionIncrement;\n    t.flags = flags;\n    t.type = type;\n    if (payload != null)\n      t.payload = (Payload) payload.clone();\n    return t;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":6,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/analysis/Token#clone(char[],int,int,int,int).mjava","pathOld":"backwards/src/java/org/apache/lucene/analysis/Token#clone(char[],int,int,int,int).mjava","sourceNew":"  /** Makes a clone, but replaces the term buffer &\n   * start/end offset in the process.  This is more\n   * efficient than doing a full clone (and then calling\n   * setTermBuffer) because it saves a wasted copy of the old\n   * termBuffer. */\n  public Token clone(char[] newTermBuffer, int newTermOffset, int newTermLength, int newStartOffset, int newEndOffset) {\n    final Token t = new Token(newTermBuffer, newTermOffset, newTermLength, newStartOffset, newEndOffset);\n    t.positionIncrement = positionIncrement;\n    t.flags = flags;\n    t.type = type;\n    if (payload != null)\n      t.payload = (Payload) payload.clone();\n    return t;\n  }\n\n","sourceOld":"  /** Makes a clone, but replaces the term buffer &\n   * start/end offset in the process.  This is more\n   * efficient than doing a full clone (and then calling\n   * setTermBuffer) because it saves a wasted copy of the old\n   * termBuffer. */\n  public Token clone(char[] newTermBuffer, int newTermOffset, int newTermLength, int newStartOffset, int newEndOffset) {\n    final Token t = new Token(newTermBuffer, newTermOffset, newTermLength, newStartOffset, newEndOffset);\n    t.positionIncrement = positionIncrement;\n    t.flags = flags;\n    t.type = type;\n    if (payload != null)\n      t.payload = (Payload) payload.clone();\n    return t;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}