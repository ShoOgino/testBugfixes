{"path":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#splitSmart(String,String,boolean).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#splitSmart(String,String,boolean).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/StrUtils#splitSmart(String,String,boolean).mjava","sourceNew":"  /** Splits a backslash escaped string on the separator.\n   * <p>\n   * Current backslash escaping supported:\n   * <br> \\n \\t \\r \\b \\f are escaped the same as a Java String\n   * <br> Other characters following a backslash are produced verbatim (\\c => c)\n   *\n   * @param s  the string to split\n   * @param separator the separator to split on\n   * @param decode decode backslash escaping\n   */\n  public static List<String> splitSmart(String s, String separator, boolean decode) {\n    ArrayList<String> lst = new ArrayList<String>(2);\n    StringBuilder sb = new StringBuilder();\n    int pos=0, end=s.length();\n    while (pos < end) {\n      if (s.startsWith(separator,pos)) {\n        if (sb.length() > 0) {\n          lst.add(sb.toString());\n          sb=new StringBuilder();\n        }\n        pos+=separator.length();\n        continue;\n      }\n\n      char ch = s.charAt(pos++);\n      if (ch=='\\\\') {\n        if (!decode) sb.append(ch);\n        if (pos>=end) break;  // ERROR, or let it go?\n        ch = s.charAt(pos++);\n        if (decode) {\n          switch(ch) {\n            case 'n' : ch='\\n'; break;\n            case 't' : ch='\\t'; break;\n            case 'r' : ch='\\r'; break;\n            case 'b' : ch='\\b'; break;\n            case 'f' : ch='\\f'; break;\n          }\n        }\n      }\n\n      sb.append(ch);\n    }\n\n    if (sb.length() > 0) {\n      lst.add(sb.toString());\n    }\n\n    return lst;\n  }\n\n","sourceOld":"  /** Splits a backslash escaped string on the separator.\n   * <p>\n   * Current backslash escaping supported:\n   * <br> \\n \\t \\r \\b \\f are escaped the same as a Java String\n   * <br> Other characters following a backslash are produced verbatim (\\c => c)\n   *\n   * @param s  the string to split\n   * @param separator the separator to split on\n   * @param decode decode backslash escaping\n   */\n  public static List<String> splitSmart(String s, String separator, boolean decode) {\n    ArrayList<String> lst = new ArrayList<String>(2);\n    StringBuilder sb = new StringBuilder();\n    int pos=0, end=s.length();\n    while (pos < end) {\n      if (s.startsWith(separator,pos)) {\n        if (sb.length() > 0) {\n          lst.add(sb.toString());\n          sb=new StringBuilder();\n        }\n        pos+=separator.length();\n        continue;\n      }\n\n      char ch = s.charAt(pos++);\n      if (ch=='\\\\') {\n        if (!decode) sb.append(ch);\n        if (pos>=end) break;  // ERROR, or let it go?\n        ch = s.charAt(pos++);\n        if (decode) {\n          switch(ch) {\n            case 'n' : ch='\\n'; break;\n            case 't' : ch='\\t'; break;\n            case 'r' : ch='\\r'; break;\n            case 'b' : ch='\\b'; break;\n            case 'f' : ch='\\f'; break;\n          }\n        }\n      }\n\n      sb.append(ch);\n    }\n\n    if (sb.length() > 0) {\n      lst.add(sb.toString());\n    }\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#splitSmart(String,String,boolean).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/StrUtils#splitSmart(String,String,boolean).mjava","sourceNew":"  /** Splits a backslash escaped string on the separator.\n   * <p>\n   * Current backslash escaping supported:\n   * <br> \\n \\t \\r \\b \\f are escaped the same as a Java String\n   * <br> Other characters following a backslash are produced verbatim (\\c => c)\n   *\n   * @param s  the string to split\n   * @param separator the separator to split on\n   * @param decode decode backslash escaping\n   */\n  public static List<String> splitSmart(String s, String separator, boolean decode) {\n    ArrayList<String> lst = new ArrayList<String>(2);\n    StringBuilder sb = new StringBuilder();\n    int pos=0, end=s.length();\n    while (pos < end) {\n      if (s.startsWith(separator,pos)) {\n        if (sb.length() > 0) {\n          lst.add(sb.toString());\n          sb=new StringBuilder();\n        }\n        pos+=separator.length();\n        continue;\n      }\n\n      char ch = s.charAt(pos++);\n      if (ch=='\\\\') {\n        if (!decode) sb.append(ch);\n        if (pos>=end) break;  // ERROR, or let it go?\n        ch = s.charAt(pos++);\n        if (decode) {\n          switch(ch) {\n            case 'n' : ch='\\n'; break;\n            case 't' : ch='\\t'; break;\n            case 'r' : ch='\\r'; break;\n            case 'b' : ch='\\b'; break;\n            case 'f' : ch='\\f'; break;\n          }\n        }\n      }\n\n      sb.append(ch);\n    }\n\n    if (sb.length() > 0) {\n      lst.add(sb.toString());\n    }\n\n    return lst;\n  }\n\n","sourceOld":"  /** Splits a backslash escaped string on the separator.\n   * <p>\n   * Current backslash escaping supported:\n   * <br> \\n \\t \\r \\b \\f are escaped the same as a Java String\n   * <br> Other characters following a backslash are produced verbatim (\\c => c)\n   *\n   * @param s  the string to split\n   * @param separator the separator to split on\n   * @param decode decode backslash escaping\n   */\n  public static List<String> splitSmart(String s, String separator, boolean decode) {\n    ArrayList<String> lst = new ArrayList<String>(2);\n    StringBuilder sb = new StringBuilder();\n    int pos=0, end=s.length();\n    while (pos < end) {\n      if (s.startsWith(separator,pos)) {\n        if (sb.length() > 0) {\n          lst.add(sb.toString());\n          sb=new StringBuilder();\n        }\n        pos+=separator.length();\n        continue;\n      }\n\n      char ch = s.charAt(pos++);\n      if (ch=='\\\\') {\n        if (!decode) sb.append(ch);\n        if (pos>=end) break;  // ERROR, or let it go?\n        ch = s.charAt(pos++);\n        if (decode) {\n          switch(ch) {\n            case 'n' : ch='\\n'; break;\n            case 't' : ch='\\t'; break;\n            case 'r' : ch='\\r'; break;\n            case 'b' : ch='\\b'; break;\n            case 'f' : ch='\\f'; break;\n          }\n        }\n      }\n\n      sb.append(ch);\n    }\n\n    if (sb.length() > 0) {\n      lst.add(sb.toString());\n    }\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#splitSmart(String,String,boolean).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/StrUtils#splitSmart(String,String,boolean).mjava","sourceNew":"  /** Splits a backslash escaped string on the separator.\n   * <p>\n   * Current backslash escaping supported:\n   * <br> \\n \\t \\r \\b \\f are escaped the same as a Java String\n   * <br> Other characters following a backslash are produced verbatim (\\c => c)\n   *\n   * @param s  the string to split\n   * @param separator the separator to split on\n   * @param decode decode backslash escaping\n   */\n  public static List<String> splitSmart(String s, String separator, boolean decode) {\n    ArrayList<String> lst = new ArrayList<String>(2);\n    StringBuilder sb = new StringBuilder();\n    int pos=0, end=s.length();\n    while (pos < end) {\n      if (s.startsWith(separator,pos)) {\n        if (sb.length() > 0) {\n          lst.add(sb.toString());\n          sb=new StringBuilder();\n        }\n        pos+=separator.length();\n        continue;\n      }\n\n      char ch = s.charAt(pos++);\n      if (ch=='\\\\') {\n        if (!decode) sb.append(ch);\n        if (pos>=end) break;  // ERROR, or let it go?\n        ch = s.charAt(pos++);\n        if (decode) {\n          switch(ch) {\n            case 'n' : ch='\\n'; break;\n            case 't' : ch='\\t'; break;\n            case 'r' : ch='\\r'; break;\n            case 'b' : ch='\\b'; break;\n            case 'f' : ch='\\f'; break;\n          }\n        }\n      }\n\n      sb.append(ch);\n    }\n\n    if (sb.length() > 0) {\n      lst.add(sb.toString());\n    }\n\n    return lst;\n  }\n\n","sourceOld":"  /** Splits a backslash escaped string on the separator.\n   * <p>\n   * Current backslash escaping supported:\n   * <br> \\n \\t \\r \\b \\f are escaped the same as a Java String\n   * <br> Other characters following a backslash are produced verbatim (\\c => c)\n   *\n   * @param s  the string to split\n   * @param separator the separator to split on\n   * @param decode decode backslash escaping\n   */\n  public static List<String> splitSmart(String s, String separator, boolean decode) {\n    ArrayList<String> lst = new ArrayList<String>(2);\n    StringBuilder sb = new StringBuilder();\n    int pos=0, end=s.length();\n    while (pos < end) {\n      if (s.startsWith(separator,pos)) {\n        if (sb.length() > 0) {\n          lst.add(sb.toString());\n          sb=new StringBuilder();\n        }\n        pos+=separator.length();\n        continue;\n      }\n\n      char ch = s.charAt(pos++);\n      if (ch=='\\\\') {\n        if (!decode) sb.append(ch);\n        if (pos>=end) break;  // ERROR, or let it go?\n        ch = s.charAt(pos++);\n        if (decode) {\n          switch(ch) {\n            case 'n' : ch='\\n'; break;\n            case 't' : ch='\\t'; break;\n            case 'r' : ch='\\r'; break;\n            case 'b' : ch='\\b'; break;\n            case 'f' : ch='\\f'; break;\n          }\n        }\n      }\n\n      sb.append(ch);\n    }\n\n    if (sb.length() > 0) {\n      lst.add(sb.toString());\n    }\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#splitSmart(String,String,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#splitSmart(String,String,boolean).mjava","sourceNew":"  /** Splits a backslash escaped string on the separator.\n   * <p>\n   * Current backslash escaping supported:\n   * <br> \\n \\t \\r \\b \\f are escaped the same as a Java String\n   * <br> Other characters following a backslash are produced verbatim (\\c => c)\n   *\n   * @param s  the string to split\n   * @param separator the separator to split on\n   * @param decode decode backslash escaping\n   */\n  public static List<String> splitSmart(String s, String separator, boolean decode) {\n    ArrayList<String> lst = new ArrayList<>(2);\n    StringBuilder sb = new StringBuilder();\n    int pos=0, end=s.length();\n    while (pos < end) {\n      if (s.startsWith(separator,pos)) {\n        if (sb.length() > 0) {\n          lst.add(sb.toString());\n          sb=new StringBuilder();\n        }\n        pos+=separator.length();\n        continue;\n      }\n\n      char ch = s.charAt(pos++);\n      if (ch=='\\\\') {\n        if (!decode) sb.append(ch);\n        if (pos>=end) break;  // ERROR, or let it go?\n        ch = s.charAt(pos++);\n        if (decode) {\n          switch(ch) {\n            case 'n' : ch='\\n'; break;\n            case 't' : ch='\\t'; break;\n            case 'r' : ch='\\r'; break;\n            case 'b' : ch='\\b'; break;\n            case 'f' : ch='\\f'; break;\n          }\n        }\n      }\n\n      sb.append(ch);\n    }\n\n    if (sb.length() > 0) {\n      lst.add(sb.toString());\n    }\n\n    return lst;\n  }\n\n","sourceOld":"  /** Splits a backslash escaped string on the separator.\n   * <p>\n   * Current backslash escaping supported:\n   * <br> \\n \\t \\r \\b \\f are escaped the same as a Java String\n   * <br> Other characters following a backslash are produced verbatim (\\c => c)\n   *\n   * @param s  the string to split\n   * @param separator the separator to split on\n   * @param decode decode backslash escaping\n   */\n  public static List<String> splitSmart(String s, String separator, boolean decode) {\n    ArrayList<String> lst = new ArrayList<String>(2);\n    StringBuilder sb = new StringBuilder();\n    int pos=0, end=s.length();\n    while (pos < end) {\n      if (s.startsWith(separator,pos)) {\n        if (sb.length() > 0) {\n          lst.add(sb.toString());\n          sb=new StringBuilder();\n        }\n        pos+=separator.length();\n        continue;\n      }\n\n      char ch = s.charAt(pos++);\n      if (ch=='\\\\') {\n        if (!decode) sb.append(ch);\n        if (pos>=end) break;  // ERROR, or let it go?\n        ch = s.charAt(pos++);\n        if (decode) {\n          switch(ch) {\n            case 'n' : ch='\\n'; break;\n            case 't' : ch='\\t'; break;\n            case 'r' : ch='\\r'; break;\n            case 'b' : ch='\\b'; break;\n            case 'f' : ch='\\f'; break;\n          }\n        }\n      }\n\n      sb.append(ch);\n    }\n\n    if (sb.length() > 0) {\n      lst.add(sb.toString());\n    }\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","date":1423508552,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#splitSmart(String,String,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#splitSmart(String,String,boolean).mjava","sourceNew":"  /** Splits a backslash escaped string on the separator.\n   * <p>\n   * Current backslash escaping supported:\n   * <br> \\n \\t \\r \\b \\f are escaped the same as a Java String\n   * <br> Other characters following a backslash are produced verbatim (\\c =&gt; c)\n   *\n   * @param s  the string to split\n   * @param separator the separator to split on\n   * @param decode decode backslash escaping\n   */\n  public static List<String> splitSmart(String s, String separator, boolean decode) {\n    ArrayList<String> lst = new ArrayList<>(2);\n    StringBuilder sb = new StringBuilder();\n    int pos=0, end=s.length();\n    while (pos < end) {\n      if (s.startsWith(separator,pos)) {\n        if (sb.length() > 0) {\n          lst.add(sb.toString());\n          sb=new StringBuilder();\n        }\n        pos+=separator.length();\n        continue;\n      }\n\n      char ch = s.charAt(pos++);\n      if (ch=='\\\\') {\n        if (!decode) sb.append(ch);\n        if (pos>=end) break;  // ERROR, or let it go?\n        ch = s.charAt(pos++);\n        if (decode) {\n          switch(ch) {\n            case 'n' : ch='\\n'; break;\n            case 't' : ch='\\t'; break;\n            case 'r' : ch='\\r'; break;\n            case 'b' : ch='\\b'; break;\n            case 'f' : ch='\\f'; break;\n          }\n        }\n      }\n\n      sb.append(ch);\n    }\n\n    if (sb.length() > 0) {\n      lst.add(sb.toString());\n    }\n\n    return lst;\n  }\n\n","sourceOld":"  /** Splits a backslash escaped string on the separator.\n   * <p>\n   * Current backslash escaping supported:\n   * <br> \\n \\t \\r \\b \\f are escaped the same as a Java String\n   * <br> Other characters following a backslash are produced verbatim (\\c => c)\n   *\n   * @param s  the string to split\n   * @param separator the separator to split on\n   * @param decode decode backslash escaping\n   */\n  public static List<String> splitSmart(String s, String separator, boolean decode) {\n    ArrayList<String> lst = new ArrayList<>(2);\n    StringBuilder sb = new StringBuilder();\n    int pos=0, end=s.length();\n    while (pos < end) {\n      if (s.startsWith(separator,pos)) {\n        if (sb.length() > 0) {\n          lst.add(sb.toString());\n          sb=new StringBuilder();\n        }\n        pos+=separator.length();\n        continue;\n      }\n\n      char ch = s.charAt(pos++);\n      if (ch=='\\\\') {\n        if (!decode) sb.append(ch);\n        if (pos>=end) break;  // ERROR, or let it go?\n        ch = s.charAt(pos++);\n        if (decode) {\n          switch(ch) {\n            case 'n' : ch='\\n'; break;\n            case 't' : ch='\\t'; break;\n            case 'r' : ch='\\r'; break;\n            case 'b' : ch='\\b'; break;\n            case 'f' : ch='\\f'; break;\n          }\n        }\n      }\n\n      sb.append(ch);\n    }\n\n    if (sb.length() > 0) {\n      lst.add(sb.toString());\n    }\n\n    return lst;\n  }\n\n","bugFix":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b824daa61db3f30b91a22213d6c04e1fa2e2b06","date":1508385744,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#splitSmart(String,String,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#splitSmart(String,String,boolean).mjava","sourceNew":"  /** Splits a backslash escaped string on the separator.\n   * <p>\n   * Current backslash escaping supported:\n   * <br> \\n \\t \\r \\b \\f are escaped the same as a Java String\n   * <br> Other characters following a backslash are produced verbatim (\\c =&gt; c)\n   *\n   * @param s  the string to split\n   * @param separator the separator to split on\n   * @param decode decode backslash escaping\n   * @return not null\n   */\n  public static List<String> splitSmart(String s, String separator, boolean decode) {\n    ArrayList<String> lst = new ArrayList<>(2);\n    StringBuilder sb = new StringBuilder();\n    int pos=0, end=s.length();\n    while (pos < end) {\n      if (s.startsWith(separator,pos)) {\n        if (sb.length() > 0) {\n          lst.add(sb.toString());\n          sb=new StringBuilder();\n        }\n        pos+=separator.length();\n        continue;\n      }\n\n      char ch = s.charAt(pos++);\n      if (ch=='\\\\') {\n        if (!decode) sb.append(ch);\n        if (pos>=end) break;  // ERROR, or let it go?\n        ch = s.charAt(pos++);\n        if (decode) {\n          switch(ch) {\n            case 'n' : ch='\\n'; break;\n            case 't' : ch='\\t'; break;\n            case 'r' : ch='\\r'; break;\n            case 'b' : ch='\\b'; break;\n            case 'f' : ch='\\f'; break;\n          }\n        }\n      }\n\n      sb.append(ch);\n    }\n\n    if (sb.length() > 0) {\n      lst.add(sb.toString());\n    }\n\n    return lst;\n  }\n\n","sourceOld":"  /** Splits a backslash escaped string on the separator.\n   * <p>\n   * Current backslash escaping supported:\n   * <br> \\n \\t \\r \\b \\f are escaped the same as a Java String\n   * <br> Other characters following a backslash are produced verbatim (\\c =&gt; c)\n   *\n   * @param s  the string to split\n   * @param separator the separator to split on\n   * @param decode decode backslash escaping\n   */\n  public static List<String> splitSmart(String s, String separator, boolean decode) {\n    ArrayList<String> lst = new ArrayList<>(2);\n    StringBuilder sb = new StringBuilder();\n    int pos=0, end=s.length();\n    while (pos < end) {\n      if (s.startsWith(separator,pos)) {\n        if (sb.length() > 0) {\n          lst.add(sb.toString());\n          sb=new StringBuilder();\n        }\n        pos+=separator.length();\n        continue;\n      }\n\n      char ch = s.charAt(pos++);\n      if (ch=='\\\\') {\n        if (!decode) sb.append(ch);\n        if (pos>=end) break;  // ERROR, or let it go?\n        ch = s.charAt(pos++);\n        if (decode) {\n          switch(ch) {\n            case 'n' : ch='\\n'; break;\n            case 't' : ch='\\t'; break;\n            case 'r' : ch='\\r'; break;\n            case 'b' : ch='\\b'; break;\n            case 'f' : ch='\\f'; break;\n          }\n        }\n      }\n\n      sb.append(ch);\n    }\n\n    if (sb.length() > 0) {\n      lst.add(sb.toString());\n    }\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8476949555f799dff381770c01cfad051a264487","date":1570505073,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#splitSmart(String,String,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#splitSmart(String,String,boolean).mjava","sourceNew":"  /**\n   * Splits a backslash escaped string on the separator.\n   * <p>\n   * Current backslash escaping supported:\n   * <br> \\n \\t \\r \\b \\f are escaped the same as a Java String\n   * <br> Other characters following a backslash are produced verbatim (\\c =&gt; c)\n   *\n   * @param s         the string to split\n   * @param separator the separator to split on\n   * @param decode    decode backslash escaping\n   * @return not null\n   */\n  public static List<String> splitSmart(String s, String separator, boolean decode) {\n    ArrayList<String> lst = new ArrayList<>(2);\n    StringBuilder sb = new StringBuilder();\n    int pos = 0, end = s.length();\n    while (pos < end) {\n      if (s.startsWith(separator, pos)) {\n        if (sb.length() > 0) {\n          lst.add(sb.toString());\n          sb = new StringBuilder();\n        }\n        pos += separator.length();\n        continue;\n      }\n\n      char ch = s.charAt(pos++);\n      if (ch == '\\\\') {\n        if (!decode) sb.append(ch);\n        if (pos >= end) break;  // ERROR, or let it go?\n        ch = s.charAt(pos++);\n        if (decode) {\n          switch (ch) {\n            case 'n':\n              ch = '\\n';\n              break;\n            case 't':\n              ch = '\\t';\n              break;\n            case 'r':\n              ch = '\\r';\n              break;\n            case 'b':\n              ch = '\\b';\n              break;\n            case 'f':\n              ch = '\\f';\n              break;\n          }\n        }\n      }\n\n      sb.append(ch);\n    }\n\n    if (sb.length() > 0) {\n      lst.add(sb.toString());\n    }\n\n    return lst;\n  }\n\n","sourceOld":"  /** Splits a backslash escaped string on the separator.\n   * <p>\n   * Current backslash escaping supported:\n   * <br> \\n \\t \\r \\b \\f are escaped the same as a Java String\n   * <br> Other characters following a backslash are produced verbatim (\\c =&gt; c)\n   *\n   * @param s  the string to split\n   * @param separator the separator to split on\n   * @param decode decode backslash escaping\n   * @return not null\n   */\n  public static List<String> splitSmart(String s, String separator, boolean decode) {\n    ArrayList<String> lst = new ArrayList<>(2);\n    StringBuilder sb = new StringBuilder();\n    int pos=0, end=s.length();\n    while (pos < end) {\n      if (s.startsWith(separator,pos)) {\n        if (sb.length() > 0) {\n          lst.add(sb.toString());\n          sb=new StringBuilder();\n        }\n        pos+=separator.length();\n        continue;\n      }\n\n      char ch = s.charAt(pos++);\n      if (ch=='\\\\') {\n        if (!decode) sb.append(ch);\n        if (pos>=end) break;  // ERROR, or let it go?\n        ch = s.charAt(pos++);\n        if (decode) {\n          switch(ch) {\n            case 'n' : ch='\\n'; break;\n            case 't' : ch='\\t'; break;\n            case 'r' : ch='\\r'; break;\n            case 'b' : ch='\\b'; break;\n            case 'f' : ch='\\f'; break;\n          }\n        }\n      }\n\n      sb.append(ch);\n    }\n\n    if (sb.length() > 0) {\n      lst.add(sb.toString());\n    }\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#splitSmart(String,String,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#splitSmart(String,String,boolean).mjava","sourceNew":"  /**\n   * Splits a backslash escaped string on the separator.\n   * <p>\n   * Current backslash escaping supported:\n   * <br> \\n \\t \\r \\b \\f are escaped the same as a Java String\n   * <br> Other characters following a backslash are produced verbatim (\\c =&gt; c)\n   *\n   * @param s         the string to split\n   * @param separator the separator to split on\n   * @param decode    decode backslash escaping\n   * @return not null\n   */\n  public static List<String> splitSmart(String s, String separator, boolean decode) {\n    ArrayList<String> lst = new ArrayList<>(2);\n    StringBuilder sb = new StringBuilder();\n    int pos = 0, end = s.length();\n    while (pos < end) {\n      if (s.startsWith(separator, pos)) {\n        if (sb.length() > 0) {\n          lst.add(sb.toString());\n          sb = new StringBuilder();\n        }\n        pos += separator.length();\n        continue;\n      }\n\n      char ch = s.charAt(pos++);\n      if (ch == '\\\\') {\n        if (!decode) sb.append(ch);\n        if (pos >= end) break;  // ERROR, or let it go?\n        ch = s.charAt(pos++);\n        if (decode) {\n          switch (ch) {\n            case 'n':\n              ch = '\\n';\n              break;\n            case 't':\n              ch = '\\t';\n              break;\n            case 'r':\n              ch = '\\r';\n              break;\n            case 'b':\n              ch = '\\b';\n              break;\n            case 'f':\n              ch = '\\f';\n              break;\n          }\n        }\n      }\n\n      sb.append(ch);\n    }\n\n    if (sb.length() > 0) {\n      lst.add(sb.toString());\n    }\n\n    return lst;\n  }\n\n","sourceOld":"  /** Splits a backslash escaped string on the separator.\n   * <p>\n   * Current backslash escaping supported:\n   * <br> \\n \\t \\r \\b \\f are escaped the same as a Java String\n   * <br> Other characters following a backslash are produced verbatim (\\c =&gt; c)\n   *\n   * @param s  the string to split\n   * @param separator the separator to split on\n   * @param decode decode backslash escaping\n   * @return not null\n   */\n  public static List<String> splitSmart(String s, String separator, boolean decode) {\n    ArrayList<String> lst = new ArrayList<>(2);\n    StringBuilder sb = new StringBuilder();\n    int pos=0, end=s.length();\n    while (pos < end) {\n      if (s.startsWith(separator,pos)) {\n        if (sb.length() > 0) {\n          lst.add(sb.toString());\n          sb=new StringBuilder();\n        }\n        pos+=separator.length();\n        continue;\n      }\n\n      char ch = s.charAt(pos++);\n      if (ch=='\\\\') {\n        if (!decode) sb.append(ch);\n        if (pos>=end) break;  // ERROR, or let it go?\n        ch = s.charAt(pos++);\n        if (decode) {\n          switch(ch) {\n            case 'n' : ch='\\n'; break;\n            case 't' : ch='\\t'; break;\n            case 'r' : ch='\\r'; break;\n            case 'b' : ch='\\b'; break;\n            case 'f' : ch='\\f'; break;\n          }\n        }\n      }\n\n      sb.append(ch);\n    }\n\n    if (sb.length() > 0) {\n      lst.add(sb.toString());\n    }\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c26f00b574427b55127e869b935845554afde1fa"],"6b824daa61db3f30b91a22213d6c04e1fa2e2b06":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8476949555f799dff381770c01cfad051a264487":["6b824daa61db3f30b91a22213d6c04e1fa2e2b06"],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8476949555f799dff381770c01cfad051a264487"],"b0b597c65628ca9e73913a07e81691f8229bae35":["6b824daa61db3f30b91a22213d6c04e1fa2e2b06","8476949555f799dff381770c01cfad051a264487"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"6b824daa61db3f30b91a22213d6c04e1fa2e2b06":["8476949555f799dff381770c01cfad051a264487","b0b597c65628ca9e73913a07e81691f8229bae35"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"8476949555f799dff381770c01cfad051a264487":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["6b824daa61db3f30b91a22213d6c04e1fa2e2b06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}