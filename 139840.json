{"path":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testCreateDocFrequencyMap().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testCreateDocFrequencyMap().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiSearcher#testCreateDocFrequencyMap().mjava","sourceNew":"    public void testCreateDocFrequencyMap() throws IOException{\n      RAMDirectory dir1 = new RAMDirectory();\n      RAMDirectory dir2 = new RAMDirectory();\n      Term template = new Term(\"contents\") ;\n      String[] contents  = {\"a\", \"b\", \"c\"};\n      HashSet<Term> termsSet = new HashSet<Term>();\n      for (int i = 0; i < contents.length; i++) {\n        initIndex(dir1, i+10, i==0, contents[i]); \n        initIndex(dir2, i+5, i==0, contents[i]);\n        termsSet.add(template.createTerm(contents[i]));\n      }\n      IndexSearcher searcher1 = new IndexSearcher(dir1, true);\n      IndexSearcher searcher2 = new IndexSearcher(dir2, true);\n      MultiSearcher multiSearcher = getMultiSearcherInstance(new Searcher[]{searcher1, searcher2});\n      Map<Term,Integer> docFrequencyMap = multiSearcher.createDocFrequencyMap(termsSet);\n      assertEquals(3, docFrequencyMap.size());\n      for (int i = 0; i < contents.length; i++) {\n        assertEquals(Integer.valueOf((i*2) +15), docFrequencyMap.get(template.createTerm(contents[i])));\n      }\n    }\n\n","sourceOld":"    public void testCreateDocFrequencyMap() throws IOException{\n      RAMDirectory dir1 = new RAMDirectory();\n      RAMDirectory dir2 = new RAMDirectory();\n      Term template = new Term(\"contents\") ;\n      String[] contents  = {\"a\", \"b\", \"c\"};\n      HashSet<Term> termsSet = new HashSet<Term>();\n      for (int i = 0; i < contents.length; i++) {\n        initIndex(dir1, i+10, i==0, contents[i]); \n        initIndex(dir2, i+5, i==0, contents[i]);\n        termsSet.add(template.createTerm(contents[i]));\n      }\n      IndexSearcher searcher1 = new IndexSearcher(dir1, true);\n      IndexSearcher searcher2 = new IndexSearcher(dir2, true);\n      MultiSearcher multiSearcher = getMultiSearcherInstance(new Searcher[]{searcher1, searcher2});\n      Map<Term,Integer> docFrequencyMap = multiSearcher.createDocFrequencyMap(termsSet);\n      assertEquals(3, docFrequencyMap.size());\n      for (int i = 0; i < contents.length; i++) {\n        assertEquals(Integer.valueOf((i*2) +15), docFrequencyMap.get(template.createTerm(contents[i])));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testCreateDocFrequencyMap().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testCreateDocFrequencyMap().mjava","sourceNew":"    public void testCreateDocFrequencyMap() throws IOException{\n      MockRAMDirectory dir1 = new MockRAMDirectory();\n      MockRAMDirectory dir2 = new MockRAMDirectory();\n      Term template = new Term(\"contents\") ;\n      String[] contents  = {\"a\", \"b\", \"c\"};\n      HashSet<Term> termsSet = new HashSet<Term>();\n      for (int i = 0; i < contents.length; i++) {\n        initIndex(dir1, i+10, i==0, contents[i]); \n        initIndex(dir2, i+5, i==0, contents[i]);\n        termsSet.add(template.createTerm(contents[i]));\n      }\n      IndexSearcher searcher1 = new IndexSearcher(dir1, true);\n      IndexSearcher searcher2 = new IndexSearcher(dir2, true);\n      MultiSearcher multiSearcher = getMultiSearcherInstance(new Searcher[]{searcher1, searcher2});\n      Map<Term,Integer> docFrequencyMap = multiSearcher.createDocFrequencyMap(termsSet);\n      assertEquals(3, docFrequencyMap.size());\n      for (int i = 0; i < contents.length; i++) {\n        assertEquals(Integer.valueOf((i*2) +15), docFrequencyMap.get(template.createTerm(contents[i])));\n      }\n    }\n\n","sourceOld":"    public void testCreateDocFrequencyMap() throws IOException{\n      RAMDirectory dir1 = new RAMDirectory();\n      RAMDirectory dir2 = new RAMDirectory();\n      Term template = new Term(\"contents\") ;\n      String[] contents  = {\"a\", \"b\", \"c\"};\n      HashSet<Term> termsSet = new HashSet<Term>();\n      for (int i = 0; i < contents.length; i++) {\n        initIndex(dir1, i+10, i==0, contents[i]); \n        initIndex(dir2, i+5, i==0, contents[i]);\n        termsSet.add(template.createTerm(contents[i]));\n      }\n      IndexSearcher searcher1 = new IndexSearcher(dir1, true);\n      IndexSearcher searcher2 = new IndexSearcher(dir2, true);\n      MultiSearcher multiSearcher = getMultiSearcherInstance(new Searcher[]{searcher1, searcher2});\n      Map<Term,Integer> docFrequencyMap = multiSearcher.createDocFrequencyMap(termsSet);\n      assertEquals(3, docFrequencyMap.size());\n      for (int i = 0; i < contents.length; i++) {\n        assertEquals(Integer.valueOf((i*2) +15), docFrequencyMap.get(template.createTerm(contents[i])));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testCreateDocFrequencyMap().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testCreateDocFrequencyMap().mjava","sourceNew":"    public void testCreateDocFrequencyMap() throws IOException{\n      MockRAMDirectory dir1 = newDirectory(random);\n      MockRAMDirectory dir2 = newDirectory(random);\n      Term template = new Term(\"contents\") ;\n      String[] contents  = {\"a\", \"b\", \"c\"};\n      HashSet<Term> termsSet = new HashSet<Term>();\n      for (int i = 0; i < contents.length; i++) {\n        initIndex(random, dir1, i+10, i==0, contents[i]); \n        initIndex(random, dir2, i+5, i==0, contents[i]);\n        termsSet.add(template.createTerm(contents[i]));\n      }\n      IndexSearcher searcher1 = new IndexSearcher(dir1, true);\n      IndexSearcher searcher2 = new IndexSearcher(dir2, true);\n      MultiSearcher multiSearcher = getMultiSearcherInstance(new Searcher[]{searcher1, searcher2});\n      Map<Term,Integer> docFrequencyMap = multiSearcher.createDocFrequencyMap(termsSet);\n      assertEquals(3, docFrequencyMap.size());\n      for (int i = 0; i < contents.length; i++) {\n        assertEquals(Integer.valueOf((i*2) +15), docFrequencyMap.get(template.createTerm(contents[i])));\n      }\n      multiSearcher.close();\n      searcher1.close();\n      searcher2.close();\n      dir1.close();\n      dir2.close();\n    }\n\n","sourceOld":"    public void testCreateDocFrequencyMap() throws IOException{\n      MockRAMDirectory dir1 = new MockRAMDirectory();\n      MockRAMDirectory dir2 = new MockRAMDirectory();\n      Term template = new Term(\"contents\") ;\n      String[] contents  = {\"a\", \"b\", \"c\"};\n      HashSet<Term> termsSet = new HashSet<Term>();\n      for (int i = 0; i < contents.length; i++) {\n        initIndex(dir1, i+10, i==0, contents[i]); \n        initIndex(dir2, i+5, i==0, contents[i]);\n        termsSet.add(template.createTerm(contents[i]));\n      }\n      IndexSearcher searcher1 = new IndexSearcher(dir1, true);\n      IndexSearcher searcher2 = new IndexSearcher(dir2, true);\n      MultiSearcher multiSearcher = getMultiSearcherInstance(new Searcher[]{searcher1, searcher2});\n      Map<Term,Integer> docFrequencyMap = multiSearcher.createDocFrequencyMap(termsSet);\n      assertEquals(3, docFrequencyMap.size());\n      for (int i = 0; i < contents.length; i++) {\n        assertEquals(Integer.valueOf((i*2) +15), docFrequencyMap.get(template.createTerm(contents[i])));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testCreateDocFrequencyMap().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testCreateDocFrequencyMap().mjava","sourceNew":"    public void testCreateDocFrequencyMap() throws IOException{\n      Directory dir1 = newDirectory(random);\n      Directory dir2 = newDirectory(random);\n      Term template = new Term(\"contents\") ;\n      String[] contents  = {\"a\", \"b\", \"c\"};\n      HashSet<Term> termsSet = new HashSet<Term>();\n      for (int i = 0; i < contents.length; i++) {\n        initIndex(random, dir1, i+10, i==0, contents[i]); \n        initIndex(random, dir2, i+5, i==0, contents[i]);\n        termsSet.add(template.createTerm(contents[i]));\n      }\n      IndexSearcher searcher1 = new IndexSearcher(dir1, true);\n      IndexSearcher searcher2 = new IndexSearcher(dir2, true);\n      MultiSearcher multiSearcher = getMultiSearcherInstance(new Searcher[]{searcher1, searcher2});\n      Map<Term,Integer> docFrequencyMap = multiSearcher.createDocFrequencyMap(termsSet);\n      assertEquals(3, docFrequencyMap.size());\n      for (int i = 0; i < contents.length; i++) {\n        assertEquals(Integer.valueOf((i*2) +15), docFrequencyMap.get(template.createTerm(contents[i])));\n      }\n      multiSearcher.close();\n      searcher1.close();\n      searcher2.close();\n      dir1.close();\n      dir2.close();\n    }\n\n","sourceOld":"    public void testCreateDocFrequencyMap() throws IOException{\n      MockRAMDirectory dir1 = newDirectory(random);\n      MockRAMDirectory dir2 = newDirectory(random);\n      Term template = new Term(\"contents\") ;\n      String[] contents  = {\"a\", \"b\", \"c\"};\n      HashSet<Term> termsSet = new HashSet<Term>();\n      for (int i = 0; i < contents.length; i++) {\n        initIndex(random, dir1, i+10, i==0, contents[i]); \n        initIndex(random, dir2, i+5, i==0, contents[i]);\n        termsSet.add(template.createTerm(contents[i]));\n      }\n      IndexSearcher searcher1 = new IndexSearcher(dir1, true);\n      IndexSearcher searcher2 = new IndexSearcher(dir2, true);\n      MultiSearcher multiSearcher = getMultiSearcherInstance(new Searcher[]{searcher1, searcher2});\n      Map<Term,Integer> docFrequencyMap = multiSearcher.createDocFrequencyMap(termsSet);\n      assertEquals(3, docFrequencyMap.size());\n      for (int i = 0; i < contents.length; i++) {\n        assertEquals(Integer.valueOf((i*2) +15), docFrequencyMap.get(template.createTerm(contents[i])));\n      }\n      multiSearcher.close();\n      searcher1.close();\n      searcher2.close();\n      dir1.close();\n      dir2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testCreateDocFrequencyMap().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testCreateDocFrequencyMap().mjava","sourceNew":"    public void testCreateDocFrequencyMap() throws IOException{\n      Directory dir1 = newDirectory();\n      Directory dir2 = newDirectory();\n      Term template = new Term(\"contents\") ;\n      String[] contents  = {\"a\", \"b\", \"c\"};\n      HashSet<Term> termsSet = new HashSet<Term>();\n      for (int i = 0; i < contents.length; i++) {\n        initIndex(random, dir1, i+10, i==0, contents[i]); \n        initIndex(random, dir2, i+5, i==0, contents[i]);\n        termsSet.add(template.createTerm(contents[i]));\n      }\n      IndexSearcher searcher1 = new IndexSearcher(dir1, true);\n      IndexSearcher searcher2 = new IndexSearcher(dir2, true);\n      MultiSearcher multiSearcher = getMultiSearcherInstance(new Searcher[]{searcher1, searcher2});\n      Map<Term,Integer> docFrequencyMap = multiSearcher.createDocFrequencyMap(termsSet);\n      assertEquals(3, docFrequencyMap.size());\n      for (int i = 0; i < contents.length; i++) {\n        assertEquals(Integer.valueOf((i*2) +15), docFrequencyMap.get(template.createTerm(contents[i])));\n      }\n      multiSearcher.close();\n      searcher1.close();\n      searcher2.close();\n      dir1.close();\n      dir2.close();\n    }\n\n","sourceOld":"    public void testCreateDocFrequencyMap() throws IOException{\n      Directory dir1 = newDirectory(random);\n      Directory dir2 = newDirectory(random);\n      Term template = new Term(\"contents\") ;\n      String[] contents  = {\"a\", \"b\", \"c\"};\n      HashSet<Term> termsSet = new HashSet<Term>();\n      for (int i = 0; i < contents.length; i++) {\n        initIndex(random, dir1, i+10, i==0, contents[i]); \n        initIndex(random, dir2, i+5, i==0, contents[i]);\n        termsSet.add(template.createTerm(contents[i]));\n      }\n      IndexSearcher searcher1 = new IndexSearcher(dir1, true);\n      IndexSearcher searcher2 = new IndexSearcher(dir2, true);\n      MultiSearcher multiSearcher = getMultiSearcherInstance(new Searcher[]{searcher1, searcher2});\n      Map<Term,Integer> docFrequencyMap = multiSearcher.createDocFrequencyMap(termsSet);\n      assertEquals(3, docFrequencyMap.size());\n      for (int i = 0; i < contents.length; i++) {\n        assertEquals(Integer.valueOf((i*2) +15), docFrequencyMap.get(template.createTerm(contents[i])));\n      }\n      multiSearcher.close();\n      searcher1.close();\n      searcher2.close();\n      dir1.close();\n      dir2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testCreateDocFrequencyMap().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testCreateDocFrequencyMap().mjava","sourceNew":"    public void testCreateDocFrequencyMap() throws IOException{\n      Directory dir1 = newDirectory();\n      Directory dir2 = newDirectory();\n      Term template = new Term(\"contents\") ;\n      String[] contents  = {\"a\", \"b\", \"c\"};\n      HashSet<Term> termsSet = new HashSet<Term>();\n      for (int i = 0; i < contents.length; i++) {\n        initIndex(random, dir1, i+10, i==0, contents[i]); \n        initIndex(random, dir2, i+5, i==0, contents[i]);\n        termsSet.add(template.createTerm(contents[i]));\n      }\n      IndexSearcher searcher1 = new IndexSearcher(dir1, true);\n      IndexSearcher searcher2 = new IndexSearcher(dir2, true);\n      MultiSearcher multiSearcher = getMultiSearcherInstance(new Searcher[]{searcher1, searcher2});\n      Map<Term,Integer> docFrequencyMap = multiSearcher.createDocFrequencyMap(termsSet);\n      assertEquals(3, docFrequencyMap.size());\n      for (int i = 0; i < contents.length; i++) {\n        assertEquals(Integer.valueOf((i*2) +15), docFrequencyMap.get(template.createTerm(contents[i])));\n      }\n      multiSearcher.close();\n      searcher1.close();\n      searcher2.close();\n      dir1.close();\n      dir2.close();\n    }\n\n","sourceOld":"    public void testCreateDocFrequencyMap() throws IOException{\n      RAMDirectory dir1 = new RAMDirectory();\n      RAMDirectory dir2 = new RAMDirectory();\n      Term template = new Term(\"contents\") ;\n      String[] contents  = {\"a\", \"b\", \"c\"};\n      HashSet<Term> termsSet = new HashSet<Term>();\n      for (int i = 0; i < contents.length; i++) {\n        initIndex(dir1, i+10, i==0, contents[i]); \n        initIndex(dir2, i+5, i==0, contents[i]);\n        termsSet.add(template.createTerm(contents[i]));\n      }\n      IndexSearcher searcher1 = new IndexSearcher(dir1, true);\n      IndexSearcher searcher2 = new IndexSearcher(dir2, true);\n      MultiSearcher multiSearcher = getMultiSearcherInstance(new Searcher[]{searcher1, searcher2});\n      Map<Term,Integer> docFrequencyMap = multiSearcher.createDocFrequencyMap(termsSet);\n      assertEquals(3, docFrequencyMap.size());\n      for (int i = 0; i < contents.length; i++) {\n        assertEquals(Integer.valueOf((i*2) +15), docFrequencyMap.get(template.createTerm(contents[i])));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testCreateDocFrequencyMap().mjava","sourceNew":null,"sourceOld":"    public void testCreateDocFrequencyMap() throws IOException{\n      Directory dir1 = newDirectory();\n      Directory dir2 = newDirectory();\n      Term template = new Term(\"contents\") ;\n      String[] contents  = {\"a\", \"b\", \"c\"};\n      HashSet<Term> termsSet = new HashSet<Term>();\n      for (int i = 0; i < contents.length; i++) {\n        initIndex(random, dir1, i+10, i==0, contents[i]); \n        initIndex(random, dir2, i+5, i==0, contents[i]);\n        termsSet.add(template.createTerm(contents[i]));\n      }\n      IndexSearcher searcher1 = new IndexSearcher(dir1, true);\n      IndexSearcher searcher2 = new IndexSearcher(dir2, true);\n      MultiSearcher multiSearcher = getMultiSearcherInstance(new Searcher[]{searcher1, searcher2});\n      Map<Term,Integer> docFrequencyMap = multiSearcher.createDocFrequencyMap(termsSet);\n      assertEquals(3, docFrequencyMap.size());\n      for (int i = 0; i < contents.length; i++) {\n        assertEquals(Integer.valueOf((i*2) +15), docFrequencyMap.get(template.createTerm(contents[i])));\n      }\n      multiSearcher.close();\n      searcher1.close();\n      searcher2.close();\n      dir1.close();\n      dir2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testCreateDocFrequencyMap().mjava","sourceNew":null,"sourceOld":"    public void testCreateDocFrequencyMap() throws IOException{\n      Directory dir1 = newDirectory();\n      Directory dir2 = newDirectory();\n      Term template = new Term(\"contents\") ;\n      String[] contents  = {\"a\", \"b\", \"c\"};\n      HashSet<Term> termsSet = new HashSet<Term>();\n      for (int i = 0; i < contents.length; i++) {\n        initIndex(random, dir1, i+10, i==0, contents[i]); \n        initIndex(random, dir2, i+5, i==0, contents[i]);\n        termsSet.add(template.createTerm(contents[i]));\n      }\n      IndexSearcher searcher1 = new IndexSearcher(dir1, true);\n      IndexSearcher searcher2 = new IndexSearcher(dir2, true);\n      MultiSearcher multiSearcher = getMultiSearcherInstance(new Searcher[]{searcher1, searcher2});\n      Map<Term,Integer> docFrequencyMap = multiSearcher.createDocFrequencyMap(termsSet);\n      assertEquals(3, docFrequencyMap.size());\n      for (int i = 0; i < contents.length; i++) {\n        assertEquals(Integer.valueOf((i*2) +15), docFrequencyMap.get(template.createTerm(contents[i])));\n      }\n      multiSearcher.close();\n      searcher1.close();\n      searcher2.close();\n      dir1.close();\n      dir2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testCreateDocFrequencyMap().mjava","sourceNew":null,"sourceOld":"    public void testCreateDocFrequencyMap() throws IOException{\n      Directory dir1 = newDirectory();\n      Directory dir2 = newDirectory();\n      Term template = new Term(\"contents\") ;\n      String[] contents  = {\"a\", \"b\", \"c\"};\n      HashSet<Term> termsSet = new HashSet<Term>();\n      for (int i = 0; i < contents.length; i++) {\n        initIndex(random, dir1, i+10, i==0, contents[i]); \n        initIndex(random, dir2, i+5, i==0, contents[i]);\n        termsSet.add(template.createTerm(contents[i]));\n      }\n      IndexSearcher searcher1 = new IndexSearcher(dir1, true);\n      IndexSearcher searcher2 = new IndexSearcher(dir2, true);\n      MultiSearcher multiSearcher = getMultiSearcherInstance(new Searcher[]{searcher1, searcher2});\n      Map<Term,Integer> docFrequencyMap = multiSearcher.createDocFrequencyMap(termsSet);\n      assertEquals(3, docFrequencyMap.size());\n      for (int i = 0; i < contents.length; i++) {\n        assertEquals(Integer.valueOf((i*2) +15), docFrequencyMap.get(template.createTerm(contents[i])));\n      }\n      multiSearcher.close();\n      searcher1.close();\n      searcher2.close();\n      dir1.close();\n      dir2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["1f653cfcf159baeaafe5d01682a911e95bba4012","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","1f653cfcf159baeaafe5d01682a911e95bba4012"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}