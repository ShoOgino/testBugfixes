{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/request/V2Request#getContentWriter(String).mjava","commits":[{"id":"33138637f13378b80c31543ed4d8c44c00269c1d","date":1509606571,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/V2Request#getContentWriter(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public RequestWriter.ContentWriter getContentWriter(String s) {\n    if (v2Calls.get() != null) v2Calls.get().incrementAndGet();\n    if (payload == null) return null;\n    return new RequestWriter.ContentWriter() {\n      @Override\n      public void write(OutputStream os) throws IOException {\n        if (payload instanceof String) {\n          os.write(((String) payload).getBytes(StandardCharsets.UTF_8));\n        } else {\n          if (useBinary) {\n            new JavaBinCodec().marshal(payload, os);\n          } else {\n            byte[] b = Utils.toJSON(payload);\n            os.write(b);\n          }\n        }\n      }\n\n      @Override\n      public String getContentType() {\n        if (payload instanceof String) return \"application/json\";\n        return useBinary ? \"application/javabin\" : \"application/json\";\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0b2a87a0a56ee3348c1c40d20544efd1583fb24f","date":1510039612,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/V2Request#getContentWriter(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/V2Request#getContentWriter(String).mjava","sourceNew":"  @Override\n  public RequestWriter.ContentWriter getContentWriter(String s) {\n    if (v2Calls.get() != null) v2Calls.get().incrementAndGet();\n    if (payload == null) return null;\n    if (payload instanceof String) {\n      return new RequestWriter.StringPayloadContentWriter((String) payload, JSON_MIME);\n\n    }\n    return new RequestWriter.ContentWriter() {\n      @Override\n      public void write(OutputStream os) throws IOException {\n        if (useBinary) {\n          new JavaBinCodec().marshal(payload, os);\n        } else {\n          byte[] b = Utils.toJSON(payload);\n          os.write(b);\n        }\n      }\n\n      @Override\n      public String getContentType() {\n        return useBinary ? JAVABIN_MIME : JSON_MIME;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public RequestWriter.ContentWriter getContentWriter(String s) {\n    if (v2Calls.get() != null) v2Calls.get().incrementAndGet();\n    if (payload == null) return null;\n    return new RequestWriter.ContentWriter() {\n      @Override\n      public void write(OutputStream os) throws IOException {\n        if (payload instanceof String) {\n          os.write(((String) payload).getBytes(StandardCharsets.UTF_8));\n        } else {\n          if (useBinary) {\n            new JavaBinCodec().marshal(payload, os);\n          } else {\n            byte[] b = Utils.toJSON(payload);\n            os.write(b);\n          }\n        }\n      }\n\n      @Override\n      public String getContentType() {\n        if (payload instanceof String) return \"application/json\";\n        return useBinary ? \"application/javabin\" : \"application/json\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/V2Request#getContentWriter(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/V2Request#getContentWriter(String).mjava","sourceNew":"  @Override\n  public RequestWriter.ContentWriter getContentWriter(String s) {\n    if (v2Calls.get() != null) v2Calls.get().incrementAndGet();\n    if (payload == null) return null;\n    if (payload instanceof String) {\n      return new RequestWriter.StringPayloadContentWriter((String) payload, JSON_MIME);\n\n    }\n    return new RequestWriter.ContentWriter() {\n      @Override\n      public void write(OutputStream os) throws IOException {\n        if (useBinary) {\n          new JavaBinCodec().marshal(payload, os);\n        } else {\n          byte[] b = Utils.toJSON(payload);\n          os.write(b);\n        }\n      }\n\n      @Override\n      public String getContentType() {\n        return useBinary ? JAVABIN_MIME : JSON_MIME;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public RequestWriter.ContentWriter getContentWriter(String s) {\n    if (v2Calls.get() != null) v2Calls.get().incrementAndGet();\n    if (payload == null) return null;\n    return new RequestWriter.ContentWriter() {\n      @Override\n      public void write(OutputStream os) throws IOException {\n        if (payload instanceof String) {\n          os.write(((String) payload).getBytes(StandardCharsets.UTF_8));\n        } else {\n          if (useBinary) {\n            new JavaBinCodec().marshal(payload, os);\n          } else {\n            byte[] b = Utils.toJSON(payload);\n            os.write(b);\n          }\n        }\n      }\n\n      @Override\n      public String getContentType() {\n        if (payload instanceof String) return \"application/json\";\n        return useBinary ? \"application/javabin\" : \"application/json\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"061081e87f853ad5aa1f3ccf8a5187a37a2c0c60","date":1527258339,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/V2Request#getContentWriter(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/V2Request#getContentWriter(String).mjava","sourceNew":"  @Override\n  public RequestWriter.ContentWriter getContentWriter(String s) {\n    if (v2Calls.get() != null) v2Calls.get().incrementAndGet();\n    if (payload == null) return null;\n    if (payload instanceof String) {\n      return new RequestWriter.StringPayloadContentWriter((String) payload, JSON_MIME);\n    }\n    if (payload instanceof Map) {\n      payload = Utils.getDeepCopy((Map) payload, 5);\n    }\n    return new RequestWriter.ContentWriter() {\n      @Override\n      public void write(OutputStream os) throws IOException {\n        if (useBinary) {\n          new JavaBinCodec().marshal(payload, os);\n        } else {\n          byte[] b = Utils.toJSON(payload);\n          os.write(b);\n        }\n      }\n\n      @Override\n      public String getContentType() {\n        return useBinary ? JAVABIN_MIME : JSON_MIME;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public RequestWriter.ContentWriter getContentWriter(String s) {\n    if (v2Calls.get() != null) v2Calls.get().incrementAndGet();\n    if (payload == null) return null;\n    if (payload instanceof String) {\n      return new RequestWriter.StringPayloadContentWriter((String) payload, JSON_MIME);\n\n    }\n    return new RequestWriter.ContentWriter() {\n      @Override\n      public void write(OutputStream os) throws IOException {\n        if (useBinary) {\n          new JavaBinCodec().marshal(payload, os);\n        } else {\n          byte[] b = Utils.toJSON(payload);\n          os.write(b);\n        }\n      }\n\n      @Override\n      public String getContentType() {\n        return useBinary ? JAVABIN_MIME : JSON_MIME;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1a22c4da9c47def40b5b95474f637bb7b8da392","date":1528603500,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/V2Request#getContentWriter(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/V2Request#getContentWriter(String).mjava","sourceNew":"  @Override\n  public RequestWriter.ContentWriter getContentWriter(String s) {\n    if (v2Calls.get() != null) v2Calls.get().incrementAndGet();\n    if (payload == null) return null;\n    if (payload instanceof String) {\n      return new RequestWriter.StringPayloadContentWriter((String) payload, JSON_MIME);\n    }\n    return new RequestWriter.ContentWriter() {\n      @Override\n      public void write(OutputStream os) throws IOException {\n        if (useBinary) {\n          new JavaBinCodec().marshal(payload, os);\n        } else {\n          Utils.toJSON(payload, os, false);\n        }\n      }\n\n      @Override\n      public String getContentType() {\n        return useBinary ? JAVABIN_MIME : JSON_MIME;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public RequestWriter.ContentWriter getContentWriter(String s) {\n    if (v2Calls.get() != null) v2Calls.get().incrementAndGet();\n    if (payload == null) return null;\n    if (payload instanceof String) {\n      return new RequestWriter.StringPayloadContentWriter((String) payload, JSON_MIME);\n    }\n    if (payload instanceof Map) {\n      payload = Utils.getDeepCopy((Map) payload, 5);\n    }\n    return new RequestWriter.ContentWriter() {\n      @Override\n      public void write(OutputStream os) throws IOException {\n        if (useBinary) {\n          new JavaBinCodec().marshal(payload, os);\n        } else {\n          byte[] b = Utils.toJSON(payload);\n          os.write(b);\n        }\n      }\n\n      @Override\n      public String getContentType() {\n        return useBinary ? JAVABIN_MIME : JSON_MIME;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["042da0877b8e28fd372a8ed80d11c4506a466ad7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/V2Request#getContentWriter(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/V2Request#getContentWriter(String).mjava","sourceNew":"  @Override\n  public RequestWriter.ContentWriter getContentWriter(String s) {\n    if (v2Calls.get() != null) v2Calls.get().incrementAndGet();\n    if (payload == null) return null;\n    if (payload instanceof String) {\n      return new RequestWriter.StringPayloadContentWriter((String) payload, JSON_MIME);\n    }\n    return new RequestWriter.ContentWriter() {\n      @Override\n      public void write(OutputStream os) throws IOException {\n        if (useBinary) {\n          new JavaBinCodec().marshal(payload, os);\n        } else {\n          Utils.toJSON(payload, os, false);\n        }\n      }\n\n      @Override\n      public String getContentType() {\n        return useBinary ? JAVABIN_MIME : JSON_MIME;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public RequestWriter.ContentWriter getContentWriter(String s) {\n    if (v2Calls.get() != null) v2Calls.get().incrementAndGet();\n    if (payload == null) return null;\n    if (payload instanceof String) {\n      return new RequestWriter.StringPayloadContentWriter((String) payload, JSON_MIME);\n    }\n    if (payload instanceof Map) {\n      payload = Utils.getDeepCopy((Map) payload, 5);\n    }\n    return new RequestWriter.ContentWriter() {\n      @Override\n      public void write(OutputStream os) throws IOException {\n        if (useBinary) {\n          new JavaBinCodec().marshal(payload, os);\n        } else {\n          byte[] b = Utils.toJSON(payload);\n          os.write(b);\n        }\n      }\n\n      @Override\n      public String getContentType() {\n        return useBinary ? JAVABIN_MIME : JSON_MIME;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/V2Request#getContentWriter(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/V2Request#getContentWriter(String).mjava","sourceNew":"  @Override\n  public RequestWriter.ContentWriter getContentWriter(String s) {\n    if (v2Calls.get() != null) v2Calls.get().incrementAndGet();\n    if (payload == null) return null;\n    if (payload instanceof String) {\n      return new RequestWriter.StringPayloadContentWriter((String) payload, JSON_MIME);\n    }\n    return new RequestWriter.ContentWriter() {\n      @Override\n      public void write(OutputStream os) throws IOException {\n        if (useBinary) {\n          new JavaBinCodec().marshal(payload, os);\n        } else {\n          Utils.toJSON(payload, os, false);\n        }\n      }\n\n      @Override\n      public String getContentType() {\n        return useBinary ? JAVABIN_MIME : JSON_MIME;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public RequestWriter.ContentWriter getContentWriter(String s) {\n    if (v2Calls.get() != null) v2Calls.get().incrementAndGet();\n    if (payload == null) return null;\n    if (payload instanceof String) {\n      return new RequestWriter.StringPayloadContentWriter((String) payload, JSON_MIME);\n    }\n    if (payload instanceof Map) {\n      payload = Utils.getDeepCopy((Map) payload, 5);\n    }\n    return new RequestWriter.ContentWriter() {\n      @Override\n      public void write(OutputStream os) throws IOException {\n        if (useBinary) {\n          new JavaBinCodec().marshal(payload, os);\n        } else {\n          byte[] b = Utils.toJSON(payload);\n          os.write(b);\n        }\n      }\n\n      @Override\n      public String getContentType() {\n        return useBinary ? JAVABIN_MIME : JSON_MIME;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"042da0877b8e28fd372a8ed80d11c4506a466ad7","date":1534516670,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/V2Request#getContentWriter(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/V2Request#getContentWriter(String).mjava","sourceNew":"  @Override\n  public RequestWriter.ContentWriter getContentWriter(String s) {\n    if (v2Calls.get() != null) v2Calls.get().incrementAndGet();\n    if (payload == null) return null;\n    if (payload instanceof String) {\n      return new RequestWriter.StringPayloadContentWriter((String) payload, JSON_MIME);\n    }\n    return new RequestWriter.ContentWriter() {\n      @Override\n      public void write(OutputStream os) throws IOException {\n        if (useBinary) {\n          new JavaBinCodec().marshal(payload, os);\n        } else {\n          Utils.writeJson(payload, os, false);\n        }\n      }\n\n      @Override\n      public String getContentType() {\n        return useBinary ? JAVABIN_MIME : JSON_MIME;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public RequestWriter.ContentWriter getContentWriter(String s) {\n    if (v2Calls.get() != null) v2Calls.get().incrementAndGet();\n    if (payload == null) return null;\n    if (payload instanceof String) {\n      return new RequestWriter.StringPayloadContentWriter((String) payload, JSON_MIME);\n    }\n    return new RequestWriter.ContentWriter() {\n      @Override\n      public void write(OutputStream os) throws IOException {\n        if (useBinary) {\n          new JavaBinCodec().marshal(payload, os);\n        } else {\n          Utils.toJSON(payload, os, false);\n        }\n      }\n\n      @Override\n      public String getContentType() {\n        return useBinary ? JAVABIN_MIME : JSON_MIME;\n      }\n    };\n  }\n\n","bugFix":["c1a22c4da9c47def40b5b95474f637bb7b8da392"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8476949555f799dff381770c01cfad051a264487","date":1570505073,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/V2Request#getContentWriter(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/V2Request#getContentWriter(String).mjava","sourceNew":"  @Override\n  public RequestWriter.ContentWriter getContentWriter(String s) {\n    if (v2Calls.get() != null) v2Calls.get().incrementAndGet();\n    if (payload == null) return null;\n    if (payload instanceof String) {\n      return new RequestWriter.StringPayloadContentWriter((String) payload, JSON_MIME);\n    }\n    return new RequestWriter.ContentWriter() {\n      @Override\n      public void write(OutputStream os) throws IOException {\n        if (payload instanceof ByteBuffer) {\n          ByteBuffer b = (ByteBuffer) payload;\n          os.write(b.array(), b.arrayOffset(), b.limit());\n          return;\n        }\n        if (payload instanceof InputStream) {\n          IOUtils.copy((InputStream) payload, os);\n          return;\n        }\n        if (useBinary) {\n          new JavaBinCodec().marshal(payload, os);\n        } else {\n          Utils.writeJson(payload, os, false);\n        }\n      }\n\n      @Override\n      public String getContentType() {\n        if (mimeType != null) return mimeType;\n        return useBinary ? JAVABIN_MIME : JSON_MIME;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public RequestWriter.ContentWriter getContentWriter(String s) {\n    if (v2Calls.get() != null) v2Calls.get().incrementAndGet();\n    if (payload == null) return null;\n    if (payload instanceof String) {\n      return new RequestWriter.StringPayloadContentWriter((String) payload, JSON_MIME);\n    }\n    return new RequestWriter.ContentWriter() {\n      @Override\n      public void write(OutputStream os) throws IOException {\n        if (useBinary) {\n          new JavaBinCodec().marshal(payload, os);\n        } else {\n          Utils.writeJson(payload, os, false);\n        }\n      }\n\n      @Override\n      public String getContentType() {\n        return useBinary ? JAVABIN_MIME : JSON_MIME;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/V2Request#getContentWriter(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/V2Request#getContentWriter(String).mjava","sourceNew":"  @Override\n  public RequestWriter.ContentWriter getContentWriter(String s) {\n    if (v2Calls.get() != null) v2Calls.get().incrementAndGet();\n    if (payload == null) return null;\n    if (payload instanceof String) {\n      return new RequestWriter.StringPayloadContentWriter((String) payload, JSON_MIME);\n    }\n    return new RequestWriter.ContentWriter() {\n      @Override\n      public void write(OutputStream os) throws IOException {\n        if (payload instanceof ByteBuffer) {\n          ByteBuffer b = (ByteBuffer) payload;\n          os.write(b.array(), b.arrayOffset(), b.limit());\n          return;\n        }\n        if (payload instanceof InputStream) {\n          IOUtils.copy((InputStream) payload, os);\n          return;\n        }\n        if (useBinary) {\n          new JavaBinCodec().marshal(payload, os);\n        } else {\n          Utils.writeJson(payload, os, false);\n        }\n      }\n\n      @Override\n      public String getContentType() {\n        if (mimeType != null) return mimeType;\n        return useBinary ? JAVABIN_MIME : JSON_MIME;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public RequestWriter.ContentWriter getContentWriter(String s) {\n    if (v2Calls.get() != null) v2Calls.get().incrementAndGet();\n    if (payload == null) return null;\n    if (payload instanceof String) {\n      return new RequestWriter.StringPayloadContentWriter((String) payload, JSON_MIME);\n    }\n    return new RequestWriter.ContentWriter() {\n      @Override\n      public void write(OutputStream os) throws IOException {\n        if (useBinary) {\n          new JavaBinCodec().marshal(payload, os);\n        } else {\n          Utils.writeJson(payload, os, false);\n        }\n      }\n\n      @Override\n      public String getContentType() {\n        return useBinary ? JAVABIN_MIME : JSON_MIME;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c1a22c4da9c47def40b5b95474f637bb7b8da392":["061081e87f853ad5aa1f3ccf8a5187a37a2c0c60"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["061081e87f853ad5aa1f3ccf8a5187a37a2c0c60","c1a22c4da9c47def40b5b95474f637bb7b8da392"],"061081e87f853ad5aa1f3ccf8a5187a37a2c0c60":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["33138637f13378b80c31543ed4d8c44c00269c1d","0b2a87a0a56ee3348c1c40d20544efd1583fb24f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0b2a87a0a56ee3348c1c40d20544efd1583fb24f":["33138637f13378b80c31543ed4d8c44c00269c1d"],"8476949555f799dff381770c01cfad051a264487":["042da0877b8e28fd372a8ed80d11c4506a466ad7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8476949555f799dff381770c01cfad051a264487"],"042da0877b8e28fd372a8ed80d11c4506a466ad7":["c1a22c4da9c47def40b5b95474f637bb7b8da392"],"33138637f13378b80c31543ed4d8c44c00269c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b0b597c65628ca9e73913a07e81691f8229bae35":["042da0877b8e28fd372a8ed80d11c4506a466ad7","8476949555f799dff381770c01cfad051a264487"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["061081e87f853ad5aa1f3ccf8a5187a37a2c0c60","c1a22c4da9c47def40b5b95474f637bb7b8da392"]},"commit2Childs":{"c1a22c4da9c47def40b5b95474f637bb7b8da392":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","042da0877b8e28fd372a8ed80d11c4506a466ad7","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"061081e87f853ad5aa1f3ccf8a5187a37a2c0c60":["c1a22c4da9c47def40b5b95474f637bb7b8da392","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["061081e87f853ad5aa1f3ccf8a5187a37a2c0c60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["33138637f13378b80c31543ed4d8c44c00269c1d"],"0b2a87a0a56ee3348c1c40d20544efd1583fb24f":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"8476949555f799dff381770c01cfad051a264487":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"33138637f13378b80c31543ed4d8c44c00269c1d":["d523b8189b211dd1630166aa77b8c88bb48b3fcc","0b2a87a0a56ee3348c1c40d20544efd1583fb24f"],"042da0877b8e28fd372a8ed80d11c4506a466ad7":["8476949555f799dff381770c01cfad051a264487","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}