{"path":"lucene/core/src/test/org/apache/lucene/index/TestSumDocFreq#testSumDocFreq().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSumDocFreq#testSumDocFreq().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSumDocFreq#testSumDocFreq().mjava","sourceNew":"  public void testSumDocFreq() throws Exception {\n    final int numDocs = atLeast(500);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    \n    Document doc = new Document();\n    Field id = newField(\"id\", \"\", StringField.TYPE_UNSTORED);\n    Field field1 = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(id);\n    doc.add(field1);\n    doc.add(field2);\n    for (int i = 0; i < numDocs; i++) {\n      id.setValue(\"\" + i);\n      char ch1 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      char ch2 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      field1.setValue(\"\" + ch1 + \" \" + ch2);\n      ch1 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      ch2 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      field2.setValue(\"\" + ch1 + \" \" + ch2);\n      writer.addDocument(doc);\n    }\n    \n    IndexReader ir = writer.getReader();\n    \n    assertSumDocFreq(ir);    \n    ir.close();\n    \n    int numDeletions = atLeast(20);\n    for (int i = 0; i < numDeletions; i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\" + random.nextInt(numDocs)));\n    }\n    writer.forceMerge(1);\n    writer.close();\n    \n    ir = IndexReader.open(dir);\n    assertSumDocFreq(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSumDocFreq() throws Exception {\n    final int numDocs = atLeast(500);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    \n    Document doc = new Document();\n    Field id = newField(\"id\", \"\", StringField.TYPE_UNSTORED);\n    Field field1 = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(id);\n    doc.add(field1);\n    doc.add(field2);\n    for (int i = 0; i < numDocs; i++) {\n      id.setValue(\"\" + i);\n      char ch1 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      char ch2 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      field1.setValue(\"\" + ch1 + \" \" + ch2);\n      ch1 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      ch2 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      field2.setValue(\"\" + ch1 + \" \" + ch2);\n      writer.addDocument(doc);\n    }\n    \n    IndexReader ir = writer.getReader();\n    \n    assertSumDocFreq(ir);    \n    ir.close();\n    \n    int numDeletions = atLeast(20);\n    for (int i = 0; i < numDeletions; i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\" + random.nextInt(numDocs)));\n    }\n    writer.forceMerge(1);\n    writer.close();\n    \n    ir = IndexReader.open(dir);\n    assertSumDocFreq(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a78a90fc9701e511308346ea29f4f5e548bb39fe","date":1329489995,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSumDocFreq#testSumDocFreq().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSumDocFreq#testSumDocFreq().mjava","sourceNew":"  public void testSumDocFreq() throws Exception {\n    final int numDocs = atLeast(500);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    \n    Document doc = new Document();\n    Field id = newField(\"id\", \"\", StringField.TYPE_UNSTORED);\n    Field field1 = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(id);\n    doc.add(field1);\n    doc.add(field2);\n    for (int i = 0; i < numDocs; i++) {\n      id.setStringValue(\"\" + i);\n      char ch1 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      char ch2 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      field1.setStringValue(\"\" + ch1 + \" \" + ch2);\n      ch1 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      ch2 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      field2.setStringValue(\"\" + ch1 + \" \" + ch2);\n      writer.addDocument(doc);\n    }\n    \n    IndexReader ir = writer.getReader();\n    \n    assertSumDocFreq(ir);    \n    ir.close();\n    \n    int numDeletions = atLeast(20);\n    for (int i = 0; i < numDeletions; i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\" + random.nextInt(numDocs)));\n    }\n    writer.forceMerge(1);\n    writer.close();\n    \n    ir = IndexReader.open(dir);\n    assertSumDocFreq(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSumDocFreq() throws Exception {\n    final int numDocs = atLeast(500);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    \n    Document doc = new Document();\n    Field id = newField(\"id\", \"\", StringField.TYPE_UNSTORED);\n    Field field1 = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(id);\n    doc.add(field1);\n    doc.add(field2);\n    for (int i = 0; i < numDocs; i++) {\n      id.setValue(\"\" + i);\n      char ch1 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      char ch2 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      field1.setValue(\"\" + ch1 + \" \" + ch2);\n      ch1 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      ch2 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      field2.setValue(\"\" + ch1 + \" \" + ch2);\n      writer.addDocument(doc);\n    }\n    \n    IndexReader ir = writer.getReader();\n    \n    assertSumDocFreq(ir);    \n    ir.close();\n    \n    int numDeletions = atLeast(20);\n    for (int i = 0; i < numDeletions; i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\" + random.nextInt(numDocs)));\n    }\n    writer.forceMerge(1);\n    writer.close();\n    \n    ir = IndexReader.open(dir);\n    assertSumDocFreq(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":["b71ea07770e7c3ef7094844aff049e1c1ffa9e10","f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSumDocFreq#testSumDocFreq().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSumDocFreq#testSumDocFreq().mjava","sourceNew":"  public void testSumDocFreq() throws Exception {\n    final int numDocs = atLeast(500);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    Field id = newField(\"id\", \"\", StringField.TYPE_UNSTORED);\n    Field field1 = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(id);\n    doc.add(field1);\n    doc.add(field2);\n    for (int i = 0; i < numDocs; i++) {\n      id.setStringValue(\"\" + i);\n      char ch1 = (char) _TestUtil.nextInt(random(), 'a', 'z');\n      char ch2 = (char) _TestUtil.nextInt(random(), 'a', 'z');\n      field1.setStringValue(\"\" + ch1 + \" \" + ch2);\n      ch1 = (char) _TestUtil.nextInt(random(), 'a', 'z');\n      ch2 = (char) _TestUtil.nextInt(random(), 'a', 'z');\n      field2.setStringValue(\"\" + ch1 + \" \" + ch2);\n      writer.addDocument(doc);\n    }\n    \n    IndexReader ir = writer.getReader();\n    \n    assertSumDocFreq(ir);    \n    ir.close();\n    \n    int numDeletions = atLeast(20);\n    for (int i = 0; i < numDeletions; i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\" + random().nextInt(numDocs)));\n    }\n    writer.forceMerge(1);\n    writer.close();\n    \n    ir = IndexReader.open(dir);\n    assertSumDocFreq(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSumDocFreq() throws Exception {\n    final int numDocs = atLeast(500);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    \n    Document doc = new Document();\n    Field id = newField(\"id\", \"\", StringField.TYPE_UNSTORED);\n    Field field1 = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(id);\n    doc.add(field1);\n    doc.add(field2);\n    for (int i = 0; i < numDocs; i++) {\n      id.setStringValue(\"\" + i);\n      char ch1 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      char ch2 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      field1.setStringValue(\"\" + ch1 + \" \" + ch2);\n      ch1 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      ch2 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      field2.setStringValue(\"\" + ch1 + \" \" + ch2);\n      writer.addDocument(doc);\n    }\n    \n    IndexReader ir = writer.getReader();\n    \n    assertSumDocFreq(ir);    \n    ir.close();\n    \n    int numDeletions = atLeast(20);\n    for (int i = 0; i < numDeletions; i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\" + random.nextInt(numDocs)));\n    }\n    writer.forceMerge(1);\n    writer.close();\n    \n    ir = IndexReader.open(dir);\n    assertSumDocFreq(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSumDocFreq#testSumDocFreq().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSumDocFreq#testSumDocFreq().mjava","sourceNew":"  public void testSumDocFreq() throws Exception {\n    final int numDocs = atLeast(500);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    Field id = newField(\"id\", \"\", StringField.TYPE_UNSTORED);\n    Field field1 = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(id);\n    doc.add(field1);\n    doc.add(field2);\n    for (int i = 0; i < numDocs; i++) {\n      id.setStringValue(\"\" + i);\n      char ch1 = (char) _TestUtil.nextInt(random(), 'a', 'z');\n      char ch2 = (char) _TestUtil.nextInt(random(), 'a', 'z');\n      field1.setStringValue(\"\" + ch1 + \" \" + ch2);\n      ch1 = (char) _TestUtil.nextInt(random(), 'a', 'z');\n      ch2 = (char) _TestUtil.nextInt(random(), 'a', 'z');\n      field2.setStringValue(\"\" + ch1 + \" \" + ch2);\n      writer.addDocument(doc);\n    }\n    \n    IndexReader ir = writer.getReader();\n    \n    assertSumDocFreq(ir);    \n    ir.close();\n    \n    int numDeletions = atLeast(20);\n    for (int i = 0; i < numDeletions; i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\" + random().nextInt(numDocs)));\n    }\n    writer.forceMerge(1);\n    writer.close();\n    \n    ir = DirectoryReader.open(dir);\n    assertSumDocFreq(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSumDocFreq() throws Exception {\n    final int numDocs = atLeast(500);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    Field id = newField(\"id\", \"\", StringField.TYPE_UNSTORED);\n    Field field1 = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(id);\n    doc.add(field1);\n    doc.add(field2);\n    for (int i = 0; i < numDocs; i++) {\n      id.setStringValue(\"\" + i);\n      char ch1 = (char) _TestUtil.nextInt(random(), 'a', 'z');\n      char ch2 = (char) _TestUtil.nextInt(random(), 'a', 'z');\n      field1.setStringValue(\"\" + ch1 + \" \" + ch2);\n      ch1 = (char) _TestUtil.nextInt(random(), 'a', 'z');\n      ch2 = (char) _TestUtil.nextInt(random(), 'a', 'z');\n      field2.setStringValue(\"\" + ch1 + \" \" + ch2);\n      writer.addDocument(doc);\n    }\n    \n    IndexReader ir = writer.getReader();\n    \n    assertSumDocFreq(ir);    \n    ir.close();\n    \n    int numDeletions = atLeast(20);\n    for (int i = 0; i < numDeletions; i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\" + random().nextInt(numDocs)));\n    }\n    writer.forceMerge(1);\n    writer.close();\n    \n    ir = IndexReader.open(dir);\n    assertSumDocFreq(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSumDocFreq#testSumDocFreq().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSumDocFreq#testSumDocFreq().mjava","sourceNew":"  public void testSumDocFreq() throws Exception {\n    final int numDocs = atLeast(500);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    Field id = newStringField(\"id\", \"\", Field.Store.NO);\n    Field field1 = newTextField(\"foo\", \"\", Field.Store.NO);\n    Field field2 = newTextField(\"bar\", \"\", Field.Store.NO);\n    doc.add(id);\n    doc.add(field1);\n    doc.add(field2);\n    for (int i = 0; i < numDocs; i++) {\n      id.setStringValue(\"\" + i);\n      char ch1 = (char) _TestUtil.nextInt(random(), 'a', 'z');\n      char ch2 = (char) _TestUtil.nextInt(random(), 'a', 'z');\n      field1.setStringValue(\"\" + ch1 + \" \" + ch2);\n      ch1 = (char) _TestUtil.nextInt(random(), 'a', 'z');\n      ch2 = (char) _TestUtil.nextInt(random(), 'a', 'z');\n      field2.setStringValue(\"\" + ch1 + \" \" + ch2);\n      writer.addDocument(doc);\n    }\n    \n    IndexReader ir = writer.getReader();\n    \n    assertSumDocFreq(ir);    \n    ir.close();\n    \n    int numDeletions = atLeast(20);\n    for (int i = 0; i < numDeletions; i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\" + random().nextInt(numDocs)));\n    }\n    writer.forceMerge(1);\n    writer.close();\n    \n    ir = DirectoryReader.open(dir);\n    assertSumDocFreq(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSumDocFreq() throws Exception {\n    final int numDocs = atLeast(500);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    Field id = newField(\"id\", \"\", StringField.TYPE_UNSTORED);\n    Field field1 = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(id);\n    doc.add(field1);\n    doc.add(field2);\n    for (int i = 0; i < numDocs; i++) {\n      id.setStringValue(\"\" + i);\n      char ch1 = (char) _TestUtil.nextInt(random(), 'a', 'z');\n      char ch2 = (char) _TestUtil.nextInt(random(), 'a', 'z');\n      field1.setStringValue(\"\" + ch1 + \" \" + ch2);\n      ch1 = (char) _TestUtil.nextInt(random(), 'a', 'z');\n      ch2 = (char) _TestUtil.nextInt(random(), 'a', 'z');\n      field2.setStringValue(\"\" + ch1 + \" \" + ch2);\n      writer.addDocument(doc);\n    }\n    \n    IndexReader ir = writer.getReader();\n    \n    assertSumDocFreq(ir);    \n    ir.close();\n    \n    int numDeletions = atLeast(20);\n    for (int i = 0; i < numDeletions; i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\" + random().nextInt(numDocs)));\n    }\n    writer.forceMerge(1);\n    writer.close();\n    \n    ir = DirectoryReader.open(dir);\n    assertSumDocFreq(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":["b71ea07770e7c3ef7094844aff049e1c1ffa9e10","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSumDocFreq#testSumDocFreq().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSumDocFreq#testSumDocFreq().mjava","sourceNew":"  public void testSumDocFreq() throws Exception {\n    final int numDocs = atLeast(500);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    Field id = newStringField(\"id\", \"\", Field.Store.NO);\n    Field field1 = newTextField(\"foo\", \"\", Field.Store.NO);\n    Field field2 = newTextField(\"bar\", \"\", Field.Store.NO);\n    doc.add(id);\n    doc.add(field1);\n    doc.add(field2);\n    for (int i = 0; i < numDocs; i++) {\n      id.setStringValue(\"\" + i);\n      char ch1 = (char) TestUtil.nextInt(random(), 'a', 'z');\n      char ch2 = (char) TestUtil.nextInt(random(), 'a', 'z');\n      field1.setStringValue(\"\" + ch1 + \" \" + ch2);\n      ch1 = (char) TestUtil.nextInt(random(), 'a', 'z');\n      ch2 = (char) TestUtil.nextInt(random(), 'a', 'z');\n      field2.setStringValue(\"\" + ch1 + \" \" + ch2);\n      writer.addDocument(doc);\n    }\n    \n    IndexReader ir = writer.getReader();\n    \n    assertSumDocFreq(ir);    \n    ir.close();\n    \n    int numDeletions = atLeast(20);\n    for (int i = 0; i < numDeletions; i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\" + random().nextInt(numDocs)));\n    }\n    writer.forceMerge(1);\n    writer.close();\n    \n    ir = DirectoryReader.open(dir);\n    assertSumDocFreq(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSumDocFreq() throws Exception {\n    final int numDocs = atLeast(500);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    Field id = newStringField(\"id\", \"\", Field.Store.NO);\n    Field field1 = newTextField(\"foo\", \"\", Field.Store.NO);\n    Field field2 = newTextField(\"bar\", \"\", Field.Store.NO);\n    doc.add(id);\n    doc.add(field1);\n    doc.add(field2);\n    for (int i = 0; i < numDocs; i++) {\n      id.setStringValue(\"\" + i);\n      char ch1 = (char) _TestUtil.nextInt(random(), 'a', 'z');\n      char ch2 = (char) _TestUtil.nextInt(random(), 'a', 'z');\n      field1.setStringValue(\"\" + ch1 + \" \" + ch2);\n      ch1 = (char) _TestUtil.nextInt(random(), 'a', 'z');\n      ch2 = (char) _TestUtil.nextInt(random(), 'a', 'z');\n      field2.setStringValue(\"\" + ch1 + \" \" + ch2);\n      writer.addDocument(doc);\n    }\n    \n    IndexReader ir = writer.getReader();\n    \n    assertSumDocFreq(ir);    \n    ir.close();\n    \n    int numDeletions = atLeast(20);\n    for (int i = 0; i < numDeletions; i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\" + random().nextInt(numDocs)));\n    }\n    writer.forceMerge(1);\n    writer.close();\n    \n    ir = DirectoryReader.open(dir);\n    assertSumDocFreq(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSumDocFreq#testSumDocFreq().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSumDocFreq#testSumDocFreq().mjava","sourceNew":"  public void testSumDocFreq() throws Exception {\n    final int numDocs = atLeast(500);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    Field id = newStringField(\"id\", \"\", Field.Store.NO);\n    Field field1 = newTextField(\"foo\", \"\", Field.Store.NO);\n    Field field2 = newTextField(\"bar\", \"\", Field.Store.NO);\n    doc.add(id);\n    doc.add(field1);\n    doc.add(field2);\n    for (int i = 0; i < numDocs; i++) {\n      id.setStringValue(\"\" + i);\n      char ch1 = (char) TestUtil.nextInt(random(), 'a', 'z');\n      char ch2 = (char) TestUtil.nextInt(random(), 'a', 'z');\n      field1.setStringValue(\"\" + ch1 + \" \" + ch2);\n      ch1 = (char) TestUtil.nextInt(random(), 'a', 'z');\n      ch2 = (char) TestUtil.nextInt(random(), 'a', 'z');\n      field2.setStringValue(\"\" + ch1 + \" \" + ch2);\n      writer.addDocument(doc);\n    }\n    \n    IndexReader ir = writer.getReader();\n    \n    assertSumDocFreq(ir);    \n    ir.close();\n    \n    int numDeletions = atLeast(20);\n    for (int i = 0; i < numDeletions; i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\" + random().nextInt(numDocs)));\n    }\n    writer.forceMerge(1);\n    writer.shutdown();\n    \n    ir = DirectoryReader.open(dir);\n    assertSumDocFreq(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSumDocFreq() throws Exception {\n    final int numDocs = atLeast(500);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    Field id = newStringField(\"id\", \"\", Field.Store.NO);\n    Field field1 = newTextField(\"foo\", \"\", Field.Store.NO);\n    Field field2 = newTextField(\"bar\", \"\", Field.Store.NO);\n    doc.add(id);\n    doc.add(field1);\n    doc.add(field2);\n    for (int i = 0; i < numDocs; i++) {\n      id.setStringValue(\"\" + i);\n      char ch1 = (char) TestUtil.nextInt(random(), 'a', 'z');\n      char ch2 = (char) TestUtil.nextInt(random(), 'a', 'z');\n      field1.setStringValue(\"\" + ch1 + \" \" + ch2);\n      ch1 = (char) TestUtil.nextInt(random(), 'a', 'z');\n      ch2 = (char) TestUtil.nextInt(random(), 'a', 'z');\n      field2.setStringValue(\"\" + ch1 + \" \" + ch2);\n      writer.addDocument(doc);\n    }\n    \n    IndexReader ir = writer.getReader();\n    \n    assertSumDocFreq(ir);    \n    ir.close();\n    \n    int numDeletions = atLeast(20);\n    for (int i = 0; i < numDeletions; i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\" + random().nextInt(numDocs)));\n    }\n    writer.forceMerge(1);\n    writer.close();\n    \n    ir = DirectoryReader.open(dir);\n    assertSumDocFreq(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSumDocFreq#testSumDocFreq().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSumDocFreq#testSumDocFreq().mjava","sourceNew":"  public void testSumDocFreq() throws Exception {\n    final int numDocs = atLeast(500);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    Field id = newStringField(\"id\", \"\", Field.Store.NO);\n    Field field1 = newTextField(\"foo\", \"\", Field.Store.NO);\n    Field field2 = newTextField(\"bar\", \"\", Field.Store.NO);\n    doc.add(id);\n    doc.add(field1);\n    doc.add(field2);\n    for (int i = 0; i < numDocs; i++) {\n      id.setStringValue(\"\" + i);\n      char ch1 = (char) TestUtil.nextInt(random(), 'a', 'z');\n      char ch2 = (char) TestUtil.nextInt(random(), 'a', 'z');\n      field1.setStringValue(\"\" + ch1 + \" \" + ch2);\n      ch1 = (char) TestUtil.nextInt(random(), 'a', 'z');\n      ch2 = (char) TestUtil.nextInt(random(), 'a', 'z');\n      field2.setStringValue(\"\" + ch1 + \" \" + ch2);\n      writer.addDocument(doc);\n    }\n    \n    IndexReader ir = writer.getReader();\n    \n    assertSumDocFreq(ir);    \n    ir.close();\n    \n    int numDeletions = atLeast(20);\n    for (int i = 0; i < numDeletions; i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\" + random().nextInt(numDocs)));\n    }\n    writer.forceMerge(1);\n    writer.close();\n    \n    ir = DirectoryReader.open(dir);\n    assertSumDocFreq(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSumDocFreq() throws Exception {\n    final int numDocs = atLeast(500);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    Field id = newStringField(\"id\", \"\", Field.Store.NO);\n    Field field1 = newTextField(\"foo\", \"\", Field.Store.NO);\n    Field field2 = newTextField(\"bar\", \"\", Field.Store.NO);\n    doc.add(id);\n    doc.add(field1);\n    doc.add(field2);\n    for (int i = 0; i < numDocs; i++) {\n      id.setStringValue(\"\" + i);\n      char ch1 = (char) TestUtil.nextInt(random(), 'a', 'z');\n      char ch2 = (char) TestUtil.nextInt(random(), 'a', 'z');\n      field1.setStringValue(\"\" + ch1 + \" \" + ch2);\n      ch1 = (char) TestUtil.nextInt(random(), 'a', 'z');\n      ch2 = (char) TestUtil.nextInt(random(), 'a', 'z');\n      field2.setStringValue(\"\" + ch1 + \" \" + ch2);\n      writer.addDocument(doc);\n    }\n    \n    IndexReader ir = writer.getReader();\n    \n    assertSumDocFreq(ir);    \n    ir.close();\n    \n    int numDeletions = atLeast(20);\n    for (int i = 0; i < numDeletions; i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\" + random().nextInt(numDocs)));\n    }\n    writer.forceMerge(1);\n    writer.shutdown();\n    \n    ir = DirectoryReader.open(dir);\n    assertSumDocFreq(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"6613659748fe4411a7dcf85266e55db1f95f7315":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["6613659748fe4411a7dcf85266e55db1f95f7315"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d0ef034a4f10871667ae75181537775ddcf8ade4"]},"commit2Childs":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["6613659748fe4411a7dcf85266e55db1f95f7315"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"6613659748fe4411a7dcf85266e55db1f95f7315":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}