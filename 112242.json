{"path":"lucene/backwards/src/java/org/apache/lucene/search/function/CustomScoreQuery#customScore(int,float,float[]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/function/CustomScoreQuery#customScore(int,float,float[]).mjava","pathOld":"backwards/src/java/org/apache/lucene/search/function/CustomScoreQuery#customScore(int,float,float[]).mjava","sourceNew":"  /**\n   * Compute a custom score by the subQuery score and a number of \n   * ValueSourceQuery scores.\n   * @deprecated The doc is relative to the current reader, which is\n   * unknown to CustomScoreQuery when using per-segment search (since Lucene 2.9).\n   * Please override {@link #getCustomScoreProvider} and return a subclass\n   * of {@link CustomScoreProvider} for the given {@link IndexReader}.\n   * @see CustomScoreProvider#customScore(int,float,float[])\n   */\n  @Deprecated\n  public float customScore(int doc, float subQueryScore, float valSrcScores[]) {\n    if (valSrcScores.length == 1) {\n      return customScore(doc, subQueryScore, valSrcScores[0]);\n    }\n    if (valSrcScores.length == 0) {\n      return customScore(doc, subQueryScore, 1);\n    }\n    float score = subQueryScore;\n    for(int i = 0; i < valSrcScores.length; i++) {\n      score *= valSrcScores[i];\n    }\n    return score;\n  }\n\n","sourceOld":"  /**\n   * Compute a custom score by the subQuery score and a number of \n   * ValueSourceQuery scores.\n   * @deprecated The doc is relative to the current reader, which is\n   * unknown to CustomScoreQuery when using per-segment search (since Lucene 2.9).\n   * Please override {@link #getCustomScoreProvider} and return a subclass\n   * of {@link CustomScoreProvider} for the given {@link IndexReader}.\n   * @see CustomScoreProvider#customScore(int,float,float[])\n   */\n  @Deprecated\n  public float customScore(int doc, float subQueryScore, float valSrcScores[]) {\n    if (valSrcScores.length == 1) {\n      return customScore(doc, subQueryScore, valSrcScores[0]);\n    }\n    if (valSrcScores.length == 0) {\n      return customScore(doc, subQueryScore, 1);\n    }\n    float score = subQueryScore;\n    for(int i = 0; i < valSrcScores.length; i++) {\n      score *= valSrcScores[i];\n    }\n    return score;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/search/function/CustomScoreQuery#customScore(int,float,float[]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Compute a custom score by the subQuery score and a number of \n   * ValueSourceQuery scores.\n   * @deprecated The doc is relative to the current reader, which is\n   * unknown to CustomScoreQuery when using per-segment search (since Lucene 2.9).\n   * Please override {@link #getCustomScoreProvider} and return a subclass\n   * of {@link CustomScoreProvider} for the given {@link IndexReader}.\n   * @see CustomScoreProvider#customScore(int,float,float[])\n   */\n  @Deprecated\n  public float customScore(int doc, float subQueryScore, float valSrcScores[]) {\n    if (valSrcScores.length == 1) {\n      return customScore(doc, subQueryScore, valSrcScores[0]);\n    }\n    if (valSrcScores.length == 0) {\n      return customScore(doc, subQueryScore, 1);\n    }\n    float score = subQueryScore;\n    for(int i = 0; i < valSrcScores.length; i++) {\n      score *= valSrcScores[i];\n    }\n    return score;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}