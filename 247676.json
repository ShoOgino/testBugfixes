{"path":"src/test/org/apache/lucene/search/TestDocIdSet#testNullDocIdSet().mjava","commits":[{"id":"8d6c98c690b593cea727f68742684c979ead1a0a","date":1248688202,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDocIdSet#testNullDocIdSet().mjava","pathOld":"/dev/null","sourceNew":"  public void testNullDocIdSet() throws Exception {\n    // Tests that if a Filter produces a null DocIdSet, which is given to\n    // IndexSearcher, everything works fine. This came up in LUCENE-1754.\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.NO, Index.NOT_ANALYZED_NO_NORMS));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // First verify the document is searchable.\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    Assert.assertEquals(1, searcher.search(new MatchAllDocsQuery(), 10).totalHits);\n    \n    // Now search w/ a Filter which returns a null DocIdSet\n    Filter f = new Filter() {\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        return null;\n      }\n    };\n    \n    Assert.assertEquals(0, searcher.search(new MatchAllDocsQuery(), f, 10).totalHits);\n    searcher.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDocIdSet#testNullDocIdSet().mjava","pathOld":"src/test/org/apache/lucene/search/TestDocIdSet#testNullDocIdSet().mjava","sourceNew":"  public void testNullDocIdSet() throws Exception {\n    // Tests that if a Filter produces a null DocIdSet, which is given to\n    // IndexSearcher, everything works fine. This came up in LUCENE-1754.\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.NO, Index.NOT_ANALYZED_NO_NORMS));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // First verify the document is searchable.\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    Assert.assertEquals(1, searcher.search(new MatchAllDocsQuery(), 10).totalHits);\n    \n    // Now search w/ a Filter which returns a null DocIdSet\n    Filter f = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        return null;\n      }\n    };\n    \n    Assert.assertEquals(0, searcher.search(new MatchAllDocsQuery(), f, 10).totalHits);\n    searcher.close();\n  }\n\n","sourceOld":"  public void testNullDocIdSet() throws Exception {\n    // Tests that if a Filter produces a null DocIdSet, which is given to\n    // IndexSearcher, everything works fine. This came up in LUCENE-1754.\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.NO, Index.NOT_ANALYZED_NO_NORMS));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // First verify the document is searchable.\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    Assert.assertEquals(1, searcher.search(new MatchAllDocsQuery(), 10).totalHits);\n    \n    // Now search w/ a Filter which returns a null DocIdSet\n    Filter f = new Filter() {\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        return null;\n      }\n    };\n    \n    Assert.assertEquals(0, searcher.search(new MatchAllDocsQuery(), f, 10).totalHits);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDocIdSet#testNullDocIdSet().mjava","pathOld":"src/test/org/apache/lucene/search/TestDocIdSet#testNullDocIdSet().mjava","sourceNew":"  public void testNullDocIdSet() throws Exception {\n    // Tests that if a Filter produces a null DocIdSet, which is given to\n    // IndexSearcher, everything works fine. This came up in LUCENE-1754.\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.NO, Index.NOT_ANALYZED_NO_NORMS));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // First verify the document is searchable.\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    Assert.assertEquals(1, searcher.search(new MatchAllDocsQuery(), 10).totalHits);\n    \n    // Now search w/ a Filter which returns a null DocIdSet\n    Filter f = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        return null;\n      }\n    };\n    \n    Assert.assertEquals(0, searcher.search(new MatchAllDocsQuery(), f, 10).totalHits);\n    searcher.close();\n  }\n\n","sourceOld":"  public void testNullDocIdSet() throws Exception {\n    // Tests that if a Filter produces a null DocIdSet, which is given to\n    // IndexSearcher, everything works fine. This came up in LUCENE-1754.\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.NO, Index.NOT_ANALYZED_NO_NORMS));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // First verify the document is searchable.\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    Assert.assertEquals(1, searcher.search(new MatchAllDocsQuery(), 10).totalHits);\n    \n    // Now search w/ a Filter which returns a null DocIdSet\n    Filter f = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        return null;\n      }\n    };\n    \n    Assert.assertEquals(0, searcher.search(new MatchAllDocsQuery(), f, 10).totalHits);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDocIdSet#testNullDocIdSet().mjava","pathOld":"src/test/org/apache/lucene/search/TestDocIdSet#testNullDocIdSet().mjava","sourceNew":"  public void testNullDocIdSet() throws Exception {\n    // Tests that if a Filter produces a null DocIdSet, which is given to\n    // IndexSearcher, everything works fine. This came up in LUCENE-1754.\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.NO, Index.NOT_ANALYZED_NO_NORMS));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // First verify the document is searchable.\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    Assert.assertEquals(1, searcher.search(new MatchAllDocsQuery(), 10).totalHits);\n    \n    // Now search w/ a Filter which returns a null DocIdSet\n    Filter f = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        return null;\n      }\n    };\n    \n    Assert.assertEquals(0, searcher.search(new MatchAllDocsQuery(), f, 10).totalHits);\n    searcher.close();\n  }\n\n","sourceOld":"  public void testNullDocIdSet() throws Exception {\n    // Tests that if a Filter produces a null DocIdSet, which is given to\n    // IndexSearcher, everything works fine. This came up in LUCENE-1754.\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.NO, Index.NOT_ANALYZED_NO_NORMS));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // First verify the document is searchable.\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    Assert.assertEquals(1, searcher.search(new MatchAllDocsQuery(), 10).totalHits);\n    \n    // Now search w/ a Filter which returns a null DocIdSet\n    Filter f = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        return null;\n      }\n    };\n    \n    Assert.assertEquals(0, searcher.search(new MatchAllDocsQuery(), f, 10).totalHits);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDocIdSet#testNullDocIdSet().mjava","pathOld":"src/test/org/apache/lucene/search/TestDocIdSet#testNullDocIdSet().mjava","sourceNew":"  public void testNullDocIdSet() throws Exception {\n    // Tests that if a Filter produces a null DocIdSet, which is given to\n    // IndexSearcher, everything works fine. This came up in LUCENE-1754.\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.NO, Index.NOT_ANALYZED_NO_NORMS));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // First verify the document is searchable.\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    Assert.assertEquals(1, searcher.search(new MatchAllDocsQuery(), 10).totalHits);\n    \n    // Now search w/ a Filter which returns a null DocIdSet\n    Filter f = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        return null;\n      }\n    };\n    \n    Assert.assertEquals(0, searcher.search(new MatchAllDocsQuery(), f, 10).totalHits);\n    searcher.close();\n  }\n\n","sourceOld":"  public void testNullDocIdSet() throws Exception {\n    // Tests that if a Filter produces a null DocIdSet, which is given to\n    // IndexSearcher, everything works fine. This came up in LUCENE-1754.\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.NO, Index.NOT_ANALYZED_NO_NORMS));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // First verify the document is searchable.\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    Assert.assertEquals(1, searcher.search(new MatchAllDocsQuery(), 10).totalHits);\n    \n    // Now search w/ a Filter which returns a null DocIdSet\n    Filter f = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        return null;\n      }\n    };\n    \n    Assert.assertEquals(0, searcher.search(new MatchAllDocsQuery(), f, 10).totalHits);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDocIdSet#testNullDocIdSet().mjava","pathOld":"src/test/org/apache/lucene/search/TestDocIdSet#testNullDocIdSet().mjava","sourceNew":"  public void testNullDocIdSet() throws Exception {\n    // Tests that if a Filter produces a null DocIdSet, which is given to\n    // IndexSearcher, everything works fine. This came up in LUCENE-1754.\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.NO, Index.NOT_ANALYZED_NO_NORMS));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // First verify the document is searchable.\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    Assert.assertEquals(1, searcher.search(new MatchAllDocsQuery(), 10).totalHits);\n    \n    // Now search w/ a Filter which returns a null DocIdSet\n    Filter f = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        return null;\n      }\n    };\n    \n    Assert.assertEquals(0, searcher.search(new MatchAllDocsQuery(), f, 10).totalHits);\n    searcher.close();\n  }\n\n","sourceOld":"  public void testNullDocIdSet() throws Exception {\n    // Tests that if a Filter produces a null DocIdSet, which is given to\n    // IndexSearcher, everything works fine. This came up in LUCENE-1754.\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.NO, Index.NOT_ANALYZED_NO_NORMS));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // First verify the document is searchable.\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    Assert.assertEquals(1, searcher.search(new MatchAllDocsQuery(), 10).totalHits);\n    \n    // Now search w/ a Filter which returns a null DocIdSet\n    Filter f = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        return null;\n      }\n    };\n    \n    Assert.assertEquals(0, searcher.search(new MatchAllDocsQuery(), f, 10).totalHits);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDocIdSet#testNullDocIdSet().mjava","pathOld":"src/test/org/apache/lucene/search/TestDocIdSet#testNullDocIdSet().mjava","sourceNew":"  public void testNullDocIdSet() throws Exception {\n    // Tests that if a Filter produces a null DocIdSet, which is given to\n    // IndexSearcher, everything works fine. This came up in LUCENE-1754.\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.NO, Index.NOT_ANALYZED_NO_NORMS));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // First verify the document is searchable.\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    Assert.assertEquals(1, searcher.search(new MatchAllDocsQuery(), 10).totalHits);\n    \n    // Now search w/ a Filter which returns a null DocIdSet\n    Filter f = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        return null;\n      }\n    };\n    \n    Assert.assertEquals(0, searcher.search(new MatchAllDocsQuery(), f, 10).totalHits);\n    searcher.close();\n  }\n\n","sourceOld":"  public void testNullDocIdSet() throws Exception {\n    // Tests that if a Filter produces a null DocIdSet, which is given to\n    // IndexSearcher, everything works fine. This came up in LUCENE-1754.\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.NO, Index.NOT_ANALYZED_NO_NORMS));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // First verify the document is searchable.\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    Assert.assertEquals(1, searcher.search(new MatchAllDocsQuery(), 10).totalHits);\n    \n    // Now search w/ a Filter which returns a null DocIdSet\n    Filter f = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        return null;\n      }\n    };\n    \n    Assert.assertEquals(0, searcher.search(new MatchAllDocsQuery(), f, 10).totalHits);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDocIdSet#testNullDocIdSet().mjava","pathOld":"src/test/org/apache/lucene/search/TestDocIdSet#testNullDocIdSet().mjava","sourceNew":"  public void testNullDocIdSet() throws Exception {\n    // Tests that if a Filter produces a null DocIdSet, which is given to\n    // IndexSearcher, everything works fine. This came up in LUCENE-1754.\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.NO, Index.NOT_ANALYZED_NO_NORMS));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // First verify the document is searchable.\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    Assert.assertEquals(1, searcher.search(new MatchAllDocsQuery(), 10).totalHits);\n    \n    // Now search w/ a Filter which returns a null DocIdSet\n    Filter f = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        return null;\n      }\n    };\n    \n    Assert.assertEquals(0, searcher.search(new MatchAllDocsQuery(), f, 10).totalHits);\n    searcher.close();\n  }\n\n","sourceOld":"  public void testNullDocIdSet() throws Exception {\n    // Tests that if a Filter produces a null DocIdSet, which is given to\n    // IndexSearcher, everything works fine. This came up in LUCENE-1754.\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.NO, Index.NOT_ANALYZED_NO_NORMS));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // First verify the document is searchable.\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    Assert.assertEquals(1, searcher.search(new MatchAllDocsQuery(), 10).totalHits);\n    \n    // Now search w/ a Filter which returns a null DocIdSet\n    Filter f = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        return null;\n      }\n    };\n    \n    Assert.assertEquals(0, searcher.search(new MatchAllDocsQuery(), f, 10).totalHits);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["8d6c98c690b593cea727f68742684c979ead1a0a"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"8d6c98c690b593cea727f68742684c979ead1a0a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8d6c98c690b593cea727f68742684c979ead1a0a"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"8d6c98c690b593cea727f68742684c979ead1a0a":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}