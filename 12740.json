{"path":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(String,String,InputStream).mjava","commits":[{"id":"abbfb3ad1f90df8ebf4751c8e72b2756ace50699","date":1190497478,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(String,String,InputStream).mjava","pathOld":"/dev/null","sourceNew":"  /** Creates a configuration instance from an input stream. */\n  public SolrConfig(String instanceDir, String file, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException \n  {\n    super(instanceDir, file, is, \"/config/\");\n    this.configFile = file;\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",-1);\n    \n    pingQueryParams = readPingQueryParams(this);\n    Config.log.info(\"Loaded SolrConfig: \" + file);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec628d32b44029bcaff6eff712394bae325c0555","date":1196899701,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(String,String,InputStream).mjava","pathOld":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(String,String,InputStream).mjava","sourceNew":"  /** Creates a configuration instance from an input stream. */\n  public SolrConfig(String instanceDir, String file, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException \n  {\n    super(instanceDir, file, is, \"/config/\");\n    this.configFile = file;\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n    Config.log.info(\"Loaded SolrConfig: \" + file);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","sourceOld":"  /** Creates a configuration instance from an input stream. */\n  public SolrConfig(String instanceDir, String file, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException \n  {\n    super(instanceDir, file, is, \"/config/\");\n    this.configFile = file;\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",-1);\n    \n    pingQueryParams = readPingQueryParams(this);\n    Config.log.info(\"Loaded SolrConfig: \" + file);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"048361614025800e582bfc7a7b0329dc6fd6a95e","date":1196999392,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(String,String,InputStream).mjava","pathOld":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(String,String,InputStream).mjava","sourceNew":"  /** Creates a configuration instance from an input stream. */\n  public SolrConfig(String instanceDir, String file, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    this(new SolrResourceLoader(instanceDir), file, is);\n  }\n\n","sourceOld":"  /** Creates a configuration instance from an input stream. */\n  public SolrConfig(String instanceDir, String file, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException \n  {\n    super(instanceDir, file, is, \"/config/\");\n    this.configFile = file;\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n    Config.log.info(\"Loaded SolrConfig: \" + file);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dc6ab6902f8f70ae43365947ccf44c25986906d","date":1204603577,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(String,String,InputStream).mjava","pathOld":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(String,String,InputStream).mjava","sourceNew":"  /** Creates a configuration instance from an instance directory, configuration name and stream.\n   *@param instanceDir the directory used to create the resource loader\n   *@param name the configuration name used by the loader if the stream is null\n   *@param is the configuration stream \n   */\n  public SolrConfig(String instanceDir, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    this(new SolrResourceLoader(instanceDir), name, is);\n  }\n\n","sourceOld":"  /** Creates a configuration instance from an input stream. */\n  public SolrConfig(String instanceDir, String file, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    this(new SolrResourceLoader(instanceDir), file, is);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrConfig#SolrConfig(String,String,InputStream).mjava","pathOld":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(String,String,InputStream).mjava","sourceNew":"  /** Creates a configuration instance from an instance directory, configuration name and stream.\n   *@param instanceDir the directory used to create the resource loader\n   *@param name the configuration name used by the loader if the stream is null\n   *@param is the configuration stream \n   */\n  public SolrConfig(String instanceDir, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    this(new SolrResourceLoader(instanceDir), name, is);\n  }\n\n","sourceOld":"  /** Creates a configuration instance from an instance directory, configuration name and stream.\n   *@param instanceDir the directory used to create the resource loader\n   *@param name the configuration name used by the loader if the stream is null\n   *@param is the configuration stream \n   */\n  public SolrConfig(String instanceDir, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    this(new SolrResourceLoader(instanceDir), name, is);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec628d32b44029bcaff6eff712394bae325c0555":["abbfb3ad1f90df8ebf4751c8e72b2756ace50699"],"048361614025800e582bfc7a7b0329dc6fd6a95e":["ec628d32b44029bcaff6eff712394bae325c0555"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6dc6ab6902f8f70ae43365947ccf44c25986906d":["048361614025800e582bfc7a7b0329dc6fd6a95e"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["6dc6ab6902f8f70ae43365947ccf44c25986906d"],"abbfb3ad1f90df8ebf4751c8e72b2756ace50699":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ec628d32b44029bcaff6eff712394bae325c0555":["048361614025800e582bfc7a7b0329dc6fd6a95e"],"048361614025800e582bfc7a7b0329dc6fd6a95e":["6dc6ab6902f8f70ae43365947ccf44c25986906d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6dc6ab6902f8f70ae43365947ccf44c25986906d":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["abbfb3ad1f90df8ebf4751c8e72b2756ace50699"],"abbfb3ad1f90df8ebf4751c8e72b2756ace50699":["ec628d32b44029bcaff6eff712394bae325c0555"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}