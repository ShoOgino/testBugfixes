{"path":"lucene/src/java/org/apache/lucene/codecs/Codec#files(Directory,SegmentInfo,Set[String]).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/Codec#files(Directory,SegmentInfo,Set[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/Codec#files(Directory,SegmentInfo,Set[String]).mjava","sourceNew":"  public void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException {\n    postingsFormat().files(dir, info, \"\", files);\n    storedFieldsFormat().files(dir, info, files);\n    termVectorsFormat().files(dir, info, files);\n    fieldInfosFormat().files(dir, info, files);\n    // TODO: segmentInfosFormat should be allowed to declare additional files\n    // if it wants, in addition to segments_N\n    docValuesFormat().files(dir, info, files);\n    normsFormat().files(dir, info, files);\n  }\n\n","sourceOld":"  public void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException {\n    postingsFormat().files(dir, info, \"\", files);\n    storedFieldsFormat().files(dir, info, files);\n    termVectorsFormat().files(dir, info, files);\n    fieldInfosFormat().files(dir, info, files);\n    // TODO: segmentInfosFormat should be allowed to declare additional files\n    // if it wants, in addition to segments_N\n    docValuesFormat().files(dir, info, files);\n    normsFormat().files(dir, info, files);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ba9ffd44d8bb5da8ec3bde72213edae72f01cc","date":1327762788,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/Codec#files(Directory,SegmentInfo,Set[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/Codec#files(Directory,SegmentInfo,Set[String]).mjava","sourceNew":"  /** Populates <code>files</code> with all filenames needed for \n   * the <code>info</code> segment.\n   */\n  public void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException {\n    assert (dir instanceof CompoundFileDirectory) == false;\n    postingsFormat().files(dir, info, \"\", files);\n    storedFieldsFormat().files(dir, info, files);\n    termVectorsFormat().files(dir, info, files);\n    fieldInfosFormat().files(dir, info, files);\n    // TODO: segmentInfosFormat should be allowed to declare additional files\n    // if it wants, in addition to segments_N\n    docValuesFormat().files(dir, info, files);\n    normsFormat().files(dir, info, files);\n  }\n\n","sourceOld":"  public void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException {\n    postingsFormat().files(dir, info, \"\", files);\n    storedFieldsFormat().files(dir, info, files);\n    termVectorsFormat().files(dir, info, files);\n    fieldInfosFormat().files(dir, info, files);\n    // TODO: segmentInfosFormat should be allowed to declare additional files\n    // if it wants, in addition to segments_N\n    docValuesFormat().files(dir, info, files);\n    normsFormat().files(dir, info, files);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31","date":1327836826,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/codecs/Codec#files(Directory,SegmentInfo,Set[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/Codec#files(Directory,SegmentInfo,Set[String]).mjava","sourceNew":"  /** Populates <code>files</code> with all filenames needed for \n   * the <code>info</code> segment.\n   */\n  public void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException {\n    assert (dir instanceof CompoundFileDirectory) == false;\n    postingsFormat().files(dir, info, \"\", files);\n    storedFieldsFormat().files(dir, info, files);\n    termVectorsFormat().files(dir, info, files);\n    fieldInfosFormat().files(dir, info, files);\n    // TODO: segmentInfosFormat should be allowed to declare additional files\n    // if it wants, in addition to segments_N\n    docValuesFormat().files(dir, info, files);\n    normsFormat().files(dir, info, files);\n  }\n\n","sourceOld":"  public void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException {\n    postingsFormat().files(dir, info, \"\", files);\n    storedFieldsFormat().files(dir, info, files);\n    termVectorsFormat().files(dir, info, files);\n    fieldInfosFormat().files(dir, info, files);\n    // TODO: segmentInfosFormat should be allowed to declare additional files\n    // if it wants, in addition to segments_N\n    docValuesFormat().files(dir, info, files);\n    normsFormat().files(dir, info, files);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/codecs/Codec#files(Directory,SegmentInfo,Set[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/Codec#files(Directory,SegmentInfo,Set[String]).mjava","sourceNew":"  /** Populates <code>files</code> with all filenames needed for \n   * the <code>info</code> segment.\n   */\n  public void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException {\n    assert (dir instanceof CompoundFileDirectory) == false;\n    postingsFormat().files(dir, info, \"\", files);\n    storedFieldsFormat().files(dir, info, files);\n    termVectorsFormat().files(dir, info, files);\n    fieldInfosFormat().files(dir, info, files);\n    // TODO: segmentInfosFormat should be allowed to declare additional files\n    // if it wants, in addition to segments_N\n    docValuesFormat().files(dir, info, files);\n    normsFormat().files(dir, info, files);\n  }\n\n","sourceOld":"  public void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException {\n    postingsFormat().files(dir, info, \"\", files);\n    storedFieldsFormat().files(dir, info, files);\n    termVectorsFormat().files(dir, info, files);\n    fieldInfosFormat().files(dir, info, files);\n    // TODO: segmentInfosFormat should be allowed to declare additional files\n    // if it wants, in addition to segments_N\n    docValuesFormat().files(dir, info, files);\n    normsFormat().files(dir, info, files);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4eedfa4412feb41bebd1d683a30ae438ca27452","date":1327840352,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/Codec#files(Directory,SegmentInfo,Set[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/Codec#files(Directory,SegmentInfo,Set[String]).mjava","sourceNew":"  /** Populates <code>files</code> with all filenames needed for \n   * the <code>info</code> segment.\n   */\n  public void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException {\n    if (info.getUseCompoundFile()) {\n      files.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n      // nocommit: get this out of here: 3.x codec should override this\n      String version = info.getVersion();\n      if (version != null && StringHelper.getVersionComparator().compare(\"4.0\", version) <= 0) {\n        files.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n      }\n    } else {\n      postingsFormat().files(dir, info, \"\", files);\n      storedFieldsFormat().files(dir, info, files);\n      termVectorsFormat().files(dir, info, files);\n      fieldInfosFormat().files(dir, info, files);\n      // TODO: segmentInfosFormat should be allowed to declare additional files\n      // if it wants, in addition to segments_N\n      docValuesFormat().files(dir, info, files);\n      normsFormat().files(dir, info, files);\n    }\n  }\n\n","sourceOld":"  /** Populates <code>files</code> with all filenames needed for \n   * the <code>info</code> segment.\n   */\n  public void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException {\n    assert (dir instanceof CompoundFileDirectory) == false;\n    postingsFormat().files(dir, info, \"\", files);\n    storedFieldsFormat().files(dir, info, files);\n    termVectorsFormat().files(dir, info, files);\n    fieldInfosFormat().files(dir, info, files);\n    // TODO: segmentInfosFormat should be allowed to declare additional files\n    // if it wants, in addition to segments_N\n    docValuesFormat().files(dir, info, files);\n    normsFormat().files(dir, info, files);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55a853d2a2eb8b25e894cc7c401842e2bfb7fda3","date":1327841017,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/Codec#files(Directory,SegmentInfo,Set[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/Codec#files(Directory,SegmentInfo,Set[String]).mjava","sourceNew":"  /** Populates <code>files</code> with all filenames needed for \n   * the <code>info</code> segment.\n   */\n  public void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException {\n    if (info.getUseCompoundFile()) {\n      files.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n      files.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n    } else {\n      postingsFormat().files(dir, info, \"\", files);\n      storedFieldsFormat().files(dir, info, files);\n      termVectorsFormat().files(dir, info, files);\n      fieldInfosFormat().files(dir, info, files);\n      // TODO: segmentInfosFormat should be allowed to declare additional files\n      // if it wants, in addition to segments_N\n      docValuesFormat().files(dir, info, files);\n      normsFormat().files(dir, info, files);\n    }\n  }\n\n","sourceOld":"  /** Populates <code>files</code> with all filenames needed for \n   * the <code>info</code> segment.\n   */\n  public void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException {\n    if (info.getUseCompoundFile()) {\n      files.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n      // nocommit: get this out of here: 3.x codec should override this\n      String version = info.getVersion();\n      if (version != null && StringHelper.getVersionComparator().compare(\"4.0\", version) <= 0) {\n        files.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n      }\n    } else {\n      postingsFormat().files(dir, info, \"\", files);\n      storedFieldsFormat().files(dir, info, files);\n      termVectorsFormat().files(dir, info, files);\n      fieldInfosFormat().files(dir, info, files);\n      // TODO: segmentInfosFormat should be allowed to declare additional files\n      // if it wants, in addition to segments_N\n      docValuesFormat().files(dir, info, files);\n      normsFormat().files(dir, info, files);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78977ccc47b451a8e645b77504e2ef0a05e4b1a3","date":1327846052,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/Codec#files(SegmentInfo,Set[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/Codec#files(Directory,SegmentInfo,Set[String]).mjava","sourceNew":"  /** Populates <code>files</code> with all filenames needed for \n   * the <code>info</code> segment.\n   */\n  public void files(SegmentInfo info, Set<String> files) throws IOException {\n    if (info.getUseCompoundFile()) {\n      files.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n      files.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n    } else {\n      postingsFormat().files(info, \"\", files);\n      storedFieldsFormat().files(info, files);\n      termVectorsFormat().files(info, files);\n      fieldInfosFormat().files(info, files);\n      // TODO: segmentInfosFormat should be allowed to declare additional files\n      // if it wants, in addition to segments_N\n      docValuesFormat().files(info, files);\n      normsFormat().files(info, files);\n    }\n  }\n\n","sourceOld":"  /** Populates <code>files</code> with all filenames needed for \n   * the <code>info</code> segment.\n   */\n  public void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException {\n    if (info.getUseCompoundFile()) {\n      files.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n      files.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n    } else {\n      postingsFormat().files(dir, info, \"\", files);\n      storedFieldsFormat().files(dir, info, files);\n      termVectorsFormat().files(dir, info, files);\n      fieldInfosFormat().files(dir, info, files);\n      // TODO: segmentInfosFormat should be allowed to declare additional files\n      // if it wants, in addition to segments_N\n      docValuesFormat().files(dir, info, files);\n      normsFormat().files(dir, info, files);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"296df632fd63421ea20756fa11ad36fbc6f4c8a9","date":1327957998,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/codecs/Codec#files(Directory,SegmentInfo,Set[String]).mjava","sourceNew":null,"sourceOld":"  /** Populates <code>files</code> with all filenames needed for \n   * the <code>info</code> segment.\n   */\n  public void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException {\n    assert (dir instanceof CompoundFileDirectory) == false;\n    postingsFormat().files(dir, info, \"\", files);\n    storedFieldsFormat().files(dir, info, files);\n    termVectorsFormat().files(dir, info, files);\n    fieldInfosFormat().files(dir, info, files);\n    // TODO: segmentInfosFormat should be allowed to declare additional files\n    // if it wants, in addition to segments_N\n    docValuesFormat().files(dir, info, files);\n    normsFormat().files(dir, info, files);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"410e066f093e407222d9681429d209084e783149","date":1327958394,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/codecs/Codec#files(Directory,SegmentInfo,Set[String]).mjava","sourceNew":null,"sourceOld":"  /** Populates <code>files</code> with all filenames needed for \n   * the <code>info</code> segment.\n   */\n  public void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException {\n    assert (dir instanceof CompoundFileDirectory) == false;\n    postingsFormat().files(dir, info, \"\", files);\n    storedFieldsFormat().files(dir, info, files);\n    termVectorsFormat().files(dir, info, files);\n    fieldInfosFormat().files(dir, info, files);\n    // TODO: segmentInfosFormat should be allowed to declare additional files\n    // if it wants, in addition to segments_N\n    docValuesFormat().files(dir, info, files);\n    normsFormat().files(dir, info, files);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55a853d2a2eb8b25e894cc7c401842e2bfb7fda3":["e4eedfa4412feb41bebd1d683a30ae438ca27452"],"e4eedfa4412feb41bebd1d683a30ae438ca27452":["09ba9ffd44d8bb5da8ec3bde72213edae72f01cc"],"410e066f093e407222d9681429d209084e783149":["fd92b8bcc88e969302510acf77bd6970da3994c4","296df632fd63421ea20756fa11ad36fbc6f4c8a9"],"09ba9ffd44d8bb5da8ec3bde72213edae72f01cc":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd92b8bcc88e969302510acf77bd6970da3994c4":["a0ae5e3ed1232483b7b8a014f175a5fe43595982","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31":["a0ae5e3ed1232483b7b8a014f175a5fe43595982","09ba9ffd44d8bb5da8ec3bde72213edae72f01cc"],"78977ccc47b451a8e645b77504e2ef0a05e4b1a3":["55a853d2a2eb8b25e894cc7c401842e2bfb7fda3"],"296df632fd63421ea20756fa11ad36fbc6f4c8a9":["c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31","78977ccc47b451a8e645b77504e2ef0a05e4b1a3"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["296df632fd63421ea20756fa11ad36fbc6f4c8a9"]},"commit2Childs":{"55a853d2a2eb8b25e894cc7c401842e2bfb7fda3":["78977ccc47b451a8e645b77504e2ef0a05e4b1a3"],"e4eedfa4412feb41bebd1d683a30ae438ca27452":["55a853d2a2eb8b25e894cc7c401842e2bfb7fda3"],"410e066f093e407222d9681429d209084e783149":[],"09ba9ffd44d8bb5da8ec3bde72213edae72f01cc":["e4eedfa4412feb41bebd1d683a30ae438ca27452","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["410e066f093e407222d9681429d209084e783149"],"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31":["fd92b8bcc88e969302510acf77bd6970da3994c4","296df632fd63421ea20756fa11ad36fbc6f4c8a9"],"78977ccc47b451a8e645b77504e2ef0a05e4b1a3":["296df632fd63421ea20756fa11ad36fbc6f4c8a9"],"296df632fd63421ea20756fa11ad36fbc6f4c8a9":["410e066f093e407222d9681429d209084e783149","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["09ba9ffd44d8bb5da8ec3bde72213edae72f01cc","fd92b8bcc88e969302510acf77bd6970da3994c4","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["410e066f093e407222d9681429d209084e783149","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}