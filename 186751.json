{"path":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#SynonymWeight(Query,IndexSearcher,ScoreMode,float).mjava","commits":[{"id":"2f2c13220a828a78007cedb364e22dd8986ed650","date":1527233410,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#SynonymWeight(Query,IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#SynonymWeight(Query,IndexSearcher,float).mjava","sourceNew":"    SynonymWeight(Query query, IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      super(query);\n      assert scoreMode.needsScores();\n      this.scoreMode = scoreMode;\n      CollectionStatistics collectionStats = searcher.collectionStatistics(terms[0].field());\n      long docFreq = 0;\n      long totalTermFreq = 0;\n      termStates = new TermStates[terms.length];\n      for (int i = 0; i < termStates.length; i++) {\n        termStates[i] = TermStates.build(searcher.getTopReaderContext(), terms[i], true);\n        TermStatistics termStats = searcher.termStatistics(terms[i], termStates[i]);\n        if (termStats != null) {\n          docFreq = Math.max(termStats.docFreq(), docFreq);\n          totalTermFreq += termStats.totalTermFreq();\n        }\n      }\n      this.similarity = searcher.getSimilarity();\n      if (docFreq > 0) {\n        TermStatistics pseudoStats = new TermStatistics(new BytesRef(\"synonym pseudo-term\"), docFreq, totalTermFreq);\n        this.simWeight = similarity.scorer(boost, collectionStats, pseudoStats);\n      } else {\n        this.simWeight = null; // no terms exist at all, we won't use similarity\n      }\n    }\n\n","sourceOld":"    SynonymWeight(Query query, IndexSearcher searcher, float boost) throws IOException {\n      super(query);\n      CollectionStatistics collectionStats = searcher.collectionStatistics(terms[0].field());\n      long docFreq = 0;\n      long totalTermFreq = 0;\n      termStates = new TermStates[terms.length];\n      for (int i = 0; i < termStates.length; i++) {\n        termStates[i] = TermStates.build(searcher.getTopReaderContext(), terms[i], true);\n        TermStatistics termStats = searcher.termStatistics(terms[i], termStates[i]);\n        if (termStats != null) {\n          docFreq = Math.max(termStats.docFreq(), docFreq);\n          totalTermFreq += termStats.totalTermFreq();\n        }\n      }\n      this.similarity = searcher.getSimilarity();\n      if (docFreq > 0) {\n        TermStatistics pseudoStats = new TermStatistics(new BytesRef(\"synonym pseudo-term\"), docFreq, totalTermFreq);\n        this.simWeight = similarity.scorer(boost, collectionStats, pseudoStats);\n      } else {\n        this.simWeight = null; // no terms exist at all, we won't use similarity\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df25592b82060bc1c800e87bf019444bf0ddf9d4","date":1552296011,"type":3,"author":"jimczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#SynonymWeight(Query,IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#SynonymWeight(Query,IndexSearcher,ScoreMode,float).mjava","sourceNew":"    SynonymWeight(Query query, IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      super(query);\n      assert scoreMode.needsScores();\n      this.scoreMode = scoreMode;\n      CollectionStatistics collectionStats = searcher.collectionStatistics(terms[0].term.field());\n      long docFreq = 0;\n      long totalTermFreq = 0;\n      termStates = new TermStates[terms.length];\n      for (int i = 0; i < termStates.length; i++) {\n        termStates[i] = TermStates.build(searcher.getTopReaderContext(), terms[i].term, true);\n        TermStatistics termStats = searcher.termStatistics(terms[i].term, termStates[i]);\n        if (termStats != null) {\n          docFreq = Math.max(termStats.docFreq(), docFreq);\n          totalTermFreq += termStats.totalTermFreq();\n        }\n      }\n      this.similarity = searcher.getSimilarity();\n      if (docFreq > 0) {\n        TermStatistics pseudoStats = new TermStatistics(new BytesRef(\"synonym pseudo-term\"), docFreq, totalTermFreq);\n        this.simWeight = similarity.scorer(boost, collectionStats, pseudoStats);\n      } else {\n        this.simWeight = null; // no terms exist at all, we won't use similarity\n      }\n    }\n\n","sourceOld":"    SynonymWeight(Query query, IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      super(query);\n      assert scoreMode.needsScores();\n      this.scoreMode = scoreMode;\n      CollectionStatistics collectionStats = searcher.collectionStatistics(terms[0].field());\n      long docFreq = 0;\n      long totalTermFreq = 0;\n      termStates = new TermStates[terms.length];\n      for (int i = 0; i < termStates.length; i++) {\n        termStates[i] = TermStates.build(searcher.getTopReaderContext(), terms[i], true);\n        TermStatistics termStats = searcher.termStatistics(terms[i], termStates[i]);\n        if (termStats != null) {\n          docFreq = Math.max(termStats.docFreq(), docFreq);\n          totalTermFreq += termStats.totalTermFreq();\n        }\n      }\n      this.similarity = searcher.getSimilarity();\n      if (docFreq > 0) {\n        TermStatistics pseudoStats = new TermStatistics(new BytesRef(\"synonym pseudo-term\"), docFreq, totalTermFreq);\n        this.simWeight = similarity.scorer(boost, collectionStats, pseudoStats);\n      } else {\n        this.simWeight = null; // no terms exist at all, we won't use similarity\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19238c4860c45945f1b1e39032e056ce9e266152","date":1568753304,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#SynonymWeight(Query,IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#SynonymWeight(Query,IndexSearcher,ScoreMode,float).mjava","sourceNew":"    SynonymWeight(Query query, IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      super(query);\n      assert scoreMode.needsScores();\n      this.scoreMode = scoreMode;\n      CollectionStatistics collectionStats = searcher.collectionStatistics(terms[0].term.field());\n      long docFreq = 0;\n      long totalTermFreq = 0;\n      termStates = new TermStates[terms.length];\n      for (int i = 0; i < termStates.length; i++) {\n        TermStates ts =  TermStates.build(searcher.getTopReaderContext(), terms[i].term, true);\n        termStates[i] = ts;\n        if (ts.docFreq() > 0) {\n          TermStatistics termStats = searcher.termStatistics(terms[i].term, ts.docFreq(), ts.totalTermFreq());\n          docFreq = Math.max(termStats.docFreq(), docFreq);\n          totalTermFreq += termStats.totalTermFreq();\n        }\n      }\n      this.similarity = searcher.getSimilarity();\n      if (docFreq > 0) {\n        TermStatistics pseudoStats = new TermStatistics(new BytesRef(\"synonym pseudo-term\"), docFreq, totalTermFreq);\n        this.simWeight = similarity.scorer(boost, collectionStats, pseudoStats);\n      } else {\n        this.simWeight = null; // no terms exist at all, we won't use similarity\n      }\n    }\n\n","sourceOld":"    SynonymWeight(Query query, IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      super(query);\n      assert scoreMode.needsScores();\n      this.scoreMode = scoreMode;\n      CollectionStatistics collectionStats = searcher.collectionStatistics(terms[0].term.field());\n      long docFreq = 0;\n      long totalTermFreq = 0;\n      termStates = new TermStates[terms.length];\n      for (int i = 0; i < termStates.length; i++) {\n        termStates[i] = TermStates.build(searcher.getTopReaderContext(), terms[i].term, true);\n        TermStatistics termStats = searcher.termStatistics(terms[i].term, termStates[i]);\n        if (termStats != null) {\n          docFreq = Math.max(termStats.docFreq(), docFreq);\n          totalTermFreq += termStats.totalTermFreq();\n        }\n      }\n      this.similarity = searcher.getSimilarity();\n      if (docFreq > 0) {\n        TermStatistics pseudoStats = new TermStatistics(new BytesRef(\"synonym pseudo-term\"), docFreq, totalTermFreq);\n        this.simWeight = similarity.scorer(boost, collectionStats, pseudoStats);\n      } else {\n        this.simWeight = null; // no terms exist at all, we won't use similarity\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"19238c4860c45945f1b1e39032e056ce9e266152":["df25592b82060bc1c800e87bf019444bf0ddf9d4"],"df25592b82060bc1c800e87bf019444bf0ddf9d4":["2f2c13220a828a78007cedb364e22dd8986ed650"],"2f2c13220a828a78007cedb364e22dd8986ed650":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19238c4860c45945f1b1e39032e056ce9e266152"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2f2c13220a828a78007cedb364e22dd8986ed650"],"19238c4860c45945f1b1e39032e056ce9e266152":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"df25592b82060bc1c800e87bf019444bf0ddf9d4":["19238c4860c45945f1b1e39032e056ce9e266152"],"2f2c13220a828a78007cedb364e22dd8986ed650":["df25592b82060bc1c800e87bf019444bf0ddf9d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}