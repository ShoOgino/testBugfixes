{"path":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geohash/GeoHashDistanceFilter#getDocIdSet(ReaderContext).mjava","commits":[{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geohash/GeoHashDistanceFilter#getDocIdSet(ReaderContext).mjava","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geohash/GeoHashDistanceFilter#getDocIdSet(IndexReader).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(ReaderContext context) throws IOException {\n\n    final DocTerms geoHashValues = FieldCache.DEFAULT.getTerms(context.reader, geoHashField);\n    final BytesRef br = new BytesRef();\n\n    final int docBase = nextDocBase;\n    nextDocBase += context.reader.maxDoc();\n\n    return new FilteredDocIdSet(startingFilter.getDocIdSet(context)) {\n      @Override\n      public boolean match(int doc) {\n\n        // TODO: cutover to BytesRef so we don't have to\n        // make String here\n        String geoHash = geoHashValues.getTerm(doc, br).utf8ToString();\n        double[] coords = GeoHashUtils.decode(geoHash);\n        double x = coords[0];\n        double y = coords[1];\n      \n        // round off lat / longs if necessary\n        //      x = DistanceHandler.getPrecision(x, precise);\n        //      y = DistanceHandler.getPrecision(y, precise);\n        Double cachedDistance = distanceLookupCache.get(geoHash);\n        double d;\n      \n        if (cachedDistance != null) {\n          d = cachedDistance.doubleValue();\n        } else {\n          d = DistanceUtils.getDistanceMi(lat, lng, x, y);\n          distanceLookupCache.put(geoHash, d);\n        }\n\n        if (d < distance){\n          distances.put(doc+docBase, d);\n          return true;\n        } else {\n          return false;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n\n    final DocTerms geoHashValues = FieldCache.DEFAULT.getTerms(reader, geoHashField);\n    final BytesRef br = new BytesRef();\n\n    final int docBase = nextDocBase;\n    nextDocBase += reader.maxDoc();\n\n    return new FilteredDocIdSet(startingFilter.getDocIdSet(reader)) {\n      @Override\n      public boolean match(int doc) {\n\n        // TODO: cutover to BytesRef so we don't have to\n        // make String here\n        String geoHash = geoHashValues.getTerm(doc, br).utf8ToString();\n        double[] coords = GeoHashUtils.decode(geoHash);\n        double x = coords[0];\n        double y = coords[1];\n      \n        // round off lat / longs if necessary\n        //      x = DistanceHandler.getPrecision(x, precise);\n        //      y = DistanceHandler.getPrecision(y, precise);\n        Double cachedDistance = distanceLookupCache.get(geoHash);\n        double d;\n      \n        if (cachedDistance != null) {\n          d = cachedDistance.doubleValue();\n        } else {\n          d = DistanceUtils.getDistanceMi(lat, lng, x, y);\n          distanceLookupCache.put(geoHash, d);\n        }\n\n        if (d < distance){\n          distances.put(doc+docBase, d);\n          return true;\n        } else {\n          return false;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","date":1294747166,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geohash/GeoHashDistanceFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geohash/GeoHashDistanceFilter#getDocIdSet(ReaderContext).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n\n    final DocTerms geoHashValues = FieldCache.DEFAULT.getTerms(context.reader, geoHashField);\n    final BytesRef br = new BytesRef();\n\n    final int docBase = nextDocBase;\n    nextDocBase += context.reader.maxDoc();\n\n    return new FilteredDocIdSet(startingFilter.getDocIdSet(context)) {\n      @Override\n      public boolean match(int doc) {\n\n        // TODO: cutover to BytesRef so we don't have to\n        // make String here\n        String geoHash = geoHashValues.getTerm(doc, br).utf8ToString();\n        double[] coords = GeoHashUtils.decode(geoHash);\n        double x = coords[0];\n        double y = coords[1];\n      \n        // round off lat / longs if necessary\n        //      x = DistanceHandler.getPrecision(x, precise);\n        //      y = DistanceHandler.getPrecision(y, precise);\n        Double cachedDistance = distanceLookupCache.get(geoHash);\n        double d;\n      \n        if (cachedDistance != null) {\n          d = cachedDistance.doubleValue();\n        } else {\n          d = DistanceUtils.getDistanceMi(lat, lng, x, y);\n          distanceLookupCache.put(geoHash, d);\n        }\n\n        if (d < distance){\n          distances.put(doc+docBase, d);\n          return true;\n        } else {\n          return false;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(ReaderContext context) throws IOException {\n\n    final DocTerms geoHashValues = FieldCache.DEFAULT.getTerms(context.reader, geoHashField);\n    final BytesRef br = new BytesRef();\n\n    final int docBase = nextDocBase;\n    nextDocBase += context.reader.maxDoc();\n\n    return new FilteredDocIdSet(startingFilter.getDocIdSet(context)) {\n      @Override\n      public boolean match(int doc) {\n\n        // TODO: cutover to BytesRef so we don't have to\n        // make String here\n        String geoHash = geoHashValues.getTerm(doc, br).utf8ToString();\n        double[] coords = GeoHashUtils.decode(geoHash);\n        double x = coords[0];\n        double y = coords[1];\n      \n        // round off lat / longs if necessary\n        //      x = DistanceHandler.getPrecision(x, precise);\n        //      y = DistanceHandler.getPrecision(y, precise);\n        Double cachedDistance = distanceLookupCache.get(geoHash);\n        double d;\n      \n        if (cachedDistance != null) {\n          d = cachedDistance.doubleValue();\n        } else {\n          d = DistanceUtils.getDistanceMi(lat, lng, x, y);\n          distanceLookupCache.put(geoHash, d);\n        }\n\n        if (d < distance){\n          distances.put(doc+docBase, d);\n          return true;\n        } else {\n          return false;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"]},"commit2Childs":{"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}