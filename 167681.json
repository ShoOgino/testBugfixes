{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestLucene40PostingsReader#fieldValue(int).mjava","commits":[{"id":"e028427c37d768e47ed47abe3c52e0004ae71fa3","date":1339590654,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestLucene40PostingsReader#fieldValue(int).mjava","pathOld":"/dev/null","sourceNew":"  String fieldValue(int maxTF) {\n    ArrayList<String> shuffled = new ArrayList<String>();\n    StringBuilder sb = new StringBuilder();\n    int i = random().nextInt(terms.length);\n    while (i < terms.length) {\n      int tf =  _TestUtil.nextInt(random(), 1, maxTF);\n      for (int j = 0; j < tf; j++) {\n        shuffled.add(terms[i]);\n      }\n      i++;\n    }\n    Collections.shuffle(shuffled, random());\n    for (String term : shuffled) {\n      sb.append(term);\n      sb.append(' ');\n    }\n    return sb.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestLucene40PostingsReader#fieldValue(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestLucene40PostingsReader#fieldValue(int).mjava","sourceNew":"  String fieldValue(int maxTF) {\n    ArrayList<String> shuffled = new ArrayList<String>();\n    StringBuilder sb = new StringBuilder();\n    int i = random().nextInt(terms.length);\n    while (i < terms.length) {\n      int tf =  TestUtil.nextInt(random(), 1, maxTF);\n      for (int j = 0; j < tf; j++) {\n        shuffled.add(terms[i]);\n      }\n      i++;\n    }\n    Collections.shuffle(shuffled, random());\n    for (String term : shuffled) {\n      sb.append(term);\n      sb.append(' ');\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  String fieldValue(int maxTF) {\n    ArrayList<String> shuffled = new ArrayList<String>();\n    StringBuilder sb = new StringBuilder();\n    int i = random().nextInt(terms.length);\n    while (i < terms.length) {\n      int tf =  _TestUtil.nextInt(random(), 1, maxTF);\n      for (int j = 0; j < tf; j++) {\n        shuffled.add(terms[i]);\n      }\n      i++;\n    }\n    Collections.shuffle(shuffled, random());\n    for (String term : shuffled) {\n      sb.append(term);\n      sb.append(' ');\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestLucene40PostingsReader#fieldValue(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestLucene40PostingsReader#fieldValue(int).mjava","sourceNew":"  String fieldValue(int maxTF) {\n    ArrayList<String> shuffled = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n    int i = random().nextInt(terms.length);\n    while (i < terms.length) {\n      int tf =  TestUtil.nextInt(random(), 1, maxTF);\n      for (int j = 0; j < tf; j++) {\n        shuffled.add(terms[i]);\n      }\n      i++;\n    }\n    Collections.shuffle(shuffled, random());\n    for (String term : shuffled) {\n      sb.append(term);\n      sb.append(' ');\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  String fieldValue(int maxTF) {\n    ArrayList<String> shuffled = new ArrayList<String>();\n    StringBuilder sb = new StringBuilder();\n    int i = random().nextInt(terms.length);\n    while (i < terms.length) {\n      int tf =  TestUtil.nextInt(random(), 1, maxTF);\n      for (int j = 0; j < tf; j++) {\n        shuffled.add(terms[i]);\n      }\n      i++;\n    }\n    Collections.shuffle(shuffled, random());\n    for (String term : shuffled) {\n      sb.append(term);\n      sb.append(' ');\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/TestLucene40PostingsReader#fieldValue(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestLucene40PostingsReader#fieldValue(int).mjava","sourceNew":"  String fieldValue(int maxTF) {\n    ArrayList<String> shuffled = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n    int i = random().nextInt(terms.length);\n    while (i < terms.length) {\n      int tf =  TestUtil.nextInt(random(), 1, maxTF);\n      for (int j = 0; j < tf; j++) {\n        shuffled.add(terms[i]);\n      }\n      i++;\n    }\n    Collections.shuffle(shuffled, random());\n    for (String term : shuffled) {\n      sb.append(term);\n      sb.append(' ');\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  String fieldValue(int maxTF) {\n    ArrayList<String> shuffled = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n    int i = random().nextInt(terms.length);\n    while (i < terms.length) {\n      int tf =  TestUtil.nextInt(random(), 1, maxTF);\n      for (int j = 0; j < tf; j++) {\n        shuffled.add(terms[i]);\n      }\n      i++;\n    }\n    Collections.shuffle(shuffled, random());\n    for (String term : shuffled) {\n      sb.append(term);\n      sb.append(' ');\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/TestLucene40PostingsReader#fieldValue(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestLucene40PostingsReader#fieldValue(int).mjava","sourceNew":"  String fieldValue(int maxTF) {\n    ArrayList<String> shuffled = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n    int i = random().nextInt(terms.length);\n    while (i < terms.length) {\n      int tf =  TestUtil.nextInt(random(), 1, maxTF);\n      for (int j = 0; j < tf; j++) {\n        shuffled.add(terms[i]);\n      }\n      i++;\n    }\n    Collections.shuffle(shuffled, random());\n    for (String term : shuffled) {\n      sb.append(term);\n      sb.append(' ');\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  String fieldValue(int maxTF) {\n    ArrayList<String> shuffled = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n    int i = random().nextInt(terms.length);\n    while (i < terms.length) {\n      int tf =  TestUtil.nextInt(random(), 1, maxTF);\n      for (int j = 0; j < tf; j++) {\n        shuffled.add(terms[i]);\n      }\n      i++;\n    }\n    Collections.shuffle(shuffled, random());\n    for (String term : shuffled) {\n      sb.append(term);\n      sb.append(' ');\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6613659748fe4411a7dcf85266e55db1f95f7315"],"e028427c37d768e47ed47abe3c52e0004ae71fa3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6613659748fe4411a7dcf85266e55db1f95f7315":["e028427c37d768e47ed47abe3c52e0004ae71fa3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"e028427c37d768e47ed47abe3c52e0004ae71fa3":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e028427c37d768e47ed47abe3c52e0004ae71fa3"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}