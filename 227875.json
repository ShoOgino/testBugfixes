{"path":"lucene/src/test/org/apache/lucene/search/TestSort#testReverseSort().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testReverseSort().mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#testReverseSort().mjava","sourceNew":"  // test sorts in reverse\n  public void testReverseSort() throws Exception {\n    sort.setSort (new SortField (null, SortField.SCORE, true), SortField.FIELD_DOC );\n    assertMatches (full, queryX, sort, \"IEGCA\");\n    assertMatches (full, queryY, sort, \"JFHDB\");\n\n    sort.setSort (new SortField (null, SortField.DOC, true));\n    assertMatches (full, queryX, sort, \"IGECA\");\n    assertMatches (full, queryY, sort, \"JHFDB\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryX, sort, \"CAEGI\");\n    assertMatches (full, queryY, sort, \"BJFHD\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryX, sort, \"AECIG\");\n    assertMatches (full, queryY, sort, \"BFJHD\");\n\n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryX, sort, \"CEGIA\");\n    assertMatches (full, queryY, sort, \"BFHJD\");\n  }\n\n","sourceOld":"  // test sorts in reverse\n  public void testReverseSort() throws Exception {\n    sort.setSort (new SortField (null, SortField.SCORE, true), SortField.FIELD_DOC );\n    assertMatches (full, queryX, sort, \"IEGCA\");\n    assertMatches (full, queryY, sort, \"JFHDB\");\n\n    sort.setSort (new SortField (null, SortField.DOC, true));\n    assertMatches (full, queryX, sort, \"IGECA\");\n    assertMatches (full, queryY, sort, \"JHFDB\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryX, sort, \"CAEGI\");\n    assertMatches (full, queryY, sort, \"BJFHD\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryX, sort, \"AECIG\");\n    assertMatches (full, queryY, sort, \"BFJHD\");\n\n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryX, sort, \"CEGIA\");\n    assertMatches (full, queryY, sort, \"BFHJD\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9235b9d4454a46c066cda47fed7ca0a34e614529","date":1304414372,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testReverseSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testReverseSort().mjava","sourceNew":"  // test sorts in reverse\n  public void testReverseSort() throws Exception {\n    sort.setSort (new SortField (null, SortField.SCORE, true), SortField.FIELD_DOC );\n    assertMatches (full, queryX, sort, \"IEGCA\");\n    assertMatches (full, queryY, sort, \"JFHDB\");\n\n    sort.setSort (new SortField (null, SortField.DOC, true));\n    assertMatches (full, queryX, sort, \"IGECA\");\n    assertMatches (full, queryY, sort, \"JHFDB\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryX, sort, \"CAEGI\");\n    assertMatches (full, queryY, sort, \"BJFHD\");\n    \n    sort.setSort (useDocValues(new SortField (\"int\", SortField.INT, true)) );\n    assertMatches (full, queryX, sort, \"CAEGI\");\n    assertMatches (full, queryY, sort, \"BJFHD\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryX, sort, \"AECIG\");\n    assertMatches (full, queryY, sort, \"BFJHD\");\n    \n    sort.setSort (useDocValues(new SortField (\"float\", SortField.FLOAT, true)) );\n    assertMatches (full, queryX, sort, \"AECIG\");\n    assertMatches (full, queryY, sort, \"BFJHD\");\n\n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryX, sort, \"CEGIA\");\n    assertMatches (full, queryY, sort, \"BFHJD\");\n  }\n\n","sourceOld":"  // test sorts in reverse\n  public void testReverseSort() throws Exception {\n    sort.setSort (new SortField (null, SortField.SCORE, true), SortField.FIELD_DOC );\n    assertMatches (full, queryX, sort, \"IEGCA\");\n    assertMatches (full, queryY, sort, \"JFHDB\");\n\n    sort.setSort (new SortField (null, SortField.DOC, true));\n    assertMatches (full, queryX, sort, \"IGECA\");\n    assertMatches (full, queryY, sort, \"JHFDB\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryX, sort, \"CAEGI\");\n    assertMatches (full, queryY, sort, \"BJFHD\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryX, sort, \"AECIG\");\n    assertMatches (full, queryY, sort, \"BFJHD\");\n\n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryX, sort, \"CEGIA\");\n    assertMatches (full, queryY, sort, \"BFHJD\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0cedee4c69436d5334e8f35463bf232084ff2fa3","date":1304587337,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testReverseSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testReverseSort().mjava","sourceNew":"  // test sorts in reverse\n  public void testReverseSort() throws Exception {\n    sort.setSort (new SortField (null, SortField.SCORE, true), SortField.FIELD_DOC );\n    assertMatches (full, queryX, sort, \"IEGCA\");\n    assertMatches (full, queryY, sort, \"JFHDB\");\n\n    sort.setSort (new SortField (null, SortField.DOC, true));\n    assertMatches (full, queryX, sort, \"IGECA\");\n    assertMatches (full, queryY, sort, \"JHFDB\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryX, sort, \"CAEGI\");\n    assertMatches (full, queryY, sort, \"BJFHD\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryX, sort, \"AECIG\");\n    assertMatches (full, queryY, sort, \"BFJHD\");\n    \n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryX, sort, \"CEGIA\");\n    assertMatches (full, queryY, sort, \"BFHJD\");\n    \n    if (supportsDocValues) {\n      sort.setSort (useDocValues(new SortField (\"int\", SortField.INT, true)) );\n      assertMatches (full, queryX, sort, \"CAEGI\");\n      assertMatches (full, queryY, sort, \"BJFHD\");\n    \n      sort.setSort (useDocValues(new SortField (\"float\", SortField.FLOAT, true)) );\n      assertMatches (full, queryX, sort, \"AECIG\");\n      assertMatches (full, queryY, sort, \"BFJHD\");\n    }\n  }\n\n","sourceOld":"  // test sorts in reverse\n  public void testReverseSort() throws Exception {\n    sort.setSort (new SortField (null, SortField.SCORE, true), SortField.FIELD_DOC );\n    assertMatches (full, queryX, sort, \"IEGCA\");\n    assertMatches (full, queryY, sort, \"JFHDB\");\n\n    sort.setSort (new SortField (null, SortField.DOC, true));\n    assertMatches (full, queryX, sort, \"IGECA\");\n    assertMatches (full, queryY, sort, \"JHFDB\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryX, sort, \"CAEGI\");\n    assertMatches (full, queryY, sort, \"BJFHD\");\n    \n    sort.setSort (useDocValues(new SortField (\"int\", SortField.INT, true)) );\n    assertMatches (full, queryX, sort, \"CAEGI\");\n    assertMatches (full, queryY, sort, \"BJFHD\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryX, sort, \"AECIG\");\n    assertMatches (full, queryY, sort, \"BFJHD\");\n    \n    sort.setSort (useDocValues(new SortField (\"float\", SortField.FLOAT, true)) );\n    assertMatches (full, queryX, sort, \"AECIG\");\n    assertMatches (full, queryY, sort, \"BFJHD\");\n\n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryX, sort, \"CEGIA\");\n    assertMatches (full, queryY, sort, \"BFHJD\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testReverseSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testReverseSort().mjava","sourceNew":"  // test sorts in reverse\n  public void testReverseSort() throws Exception {\n    sort.setSort (new SortField (null, SortField.SCORE, true), SortField.FIELD_DOC );\n    assertMatches (full, queryX, sort, \"IEGCA\");\n    assertMatches (full, queryY, sort, \"JFHDB\");\n\n    sort.setSort (new SortField (null, SortField.DOC, true));\n    assertMatches (full, queryX, sort, \"IGECA\");\n    assertMatches (full, queryY, sort, \"JHFDB\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryX, sort, \"CAEGI\");\n    assertMatches (full, queryY, sort, \"BJFHD\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryX, sort, \"AECIG\");\n    assertMatches (full, queryY, sort, \"BFJHD\");\n    \n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryX, sort, \"CEGIA\");\n    assertMatches (full, queryY, sort, \"BFHJD\");\n    \n    if (supportsDocValues) {\n      sort.setSort (useDocValues(new SortField (\"int\", SortField.INT, true)) );\n      assertMatches (full, queryX, sort, \"CAEGI\");\n      assertMatches (full, queryY, sort, \"BJFHD\");\n    \n      sort.setSort (useDocValues(new SortField (\"float\", SortField.FLOAT, true)) );\n      assertMatches (full, queryX, sort, \"AECIG\");\n      assertMatches (full, queryY, sort, \"BFJHD\");\n    }\n  }\n\n","sourceOld":"  // test sorts in reverse\n  public void testReverseSort() throws Exception {\n    sort.setSort (new SortField (null, SortField.SCORE, true), SortField.FIELD_DOC );\n    assertMatches (full, queryX, sort, \"IEGCA\");\n    assertMatches (full, queryY, sort, \"JFHDB\");\n\n    sort.setSort (new SortField (null, SortField.DOC, true));\n    assertMatches (full, queryX, sort, \"IGECA\");\n    assertMatches (full, queryY, sort, \"JHFDB\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryX, sort, \"CAEGI\");\n    assertMatches (full, queryY, sort, \"BJFHD\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryX, sort, \"AECIG\");\n    assertMatches (full, queryY, sort, \"BFJHD\");\n\n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryX, sort, \"CEGIA\");\n    assertMatches (full, queryY, sort, \"BFHJD\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testReverseSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testReverseSort().mjava","sourceNew":"  // test sorts in reverse\n  public void testReverseSort() throws Exception {\n    sort.setSort (new SortField (null, SortField.SCORE, true), SortField.FIELD_DOC );\n    assertMatches (full, queryX, sort, \"IEGCA\");\n    assertMatches (full, queryY, sort, \"JFHDB\");\n\n    sort.setSort (new SortField (null, SortField.DOC, true));\n    assertMatches (full, queryX, sort, \"IGECA\");\n    assertMatches (full, queryY, sort, \"JHFDB\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryX, sort, \"CAEGI\");\n    assertMatches (full, queryY, sort, \"BJFHD\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryX, sort, \"AECIG\");\n    assertMatches (full, queryY, sort, \"BFJHD\");\n    \n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryX, sort, \"CEGIA\");\n    assertMatches (full, queryY, sort, \"BFHJD\");\n    \n    if (supportsDocValues) {\n      sort.setSort (useDocValues(new SortField (\"int\", SortField.INT, true)) );\n      assertMatches (full, queryX, sort, \"CAEGI\");\n      assertMatches (full, queryY, sort, \"BJFHD\");\n    \n      sort.setSort (useDocValues(new SortField (\"float\", SortField.FLOAT, true)) );\n      assertMatches (full, queryX, sort, \"AECIG\");\n      assertMatches (full, queryY, sort, \"BFJHD\");\n    }\n  }\n\n","sourceOld":"  // test sorts in reverse\n  public void testReverseSort() throws Exception {\n    sort.setSort (new SortField (null, SortField.SCORE, true), SortField.FIELD_DOC );\n    assertMatches (full, queryX, sort, \"IEGCA\");\n    assertMatches (full, queryY, sort, \"JFHDB\");\n\n    sort.setSort (new SortField (null, SortField.DOC, true));\n    assertMatches (full, queryX, sort, \"IGECA\");\n    assertMatches (full, queryY, sort, \"JHFDB\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryX, sort, \"CAEGI\");\n    assertMatches (full, queryY, sort, \"BJFHD\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryX, sort, \"AECIG\");\n    assertMatches (full, queryY, sort, \"BFJHD\");\n\n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryX, sort, \"CEGIA\");\n    assertMatches (full, queryY, sort, \"BFHJD\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"090a0320e4de4a3674376aef96b9701f47564f86","date":1308707325,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testReverseSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testReverseSort().mjava","sourceNew":"  // test sorts in reverse\n  public void testReverseSort() throws Exception {\n    sort.setSort (new SortField (null, SortField.Type.SCORE, true), SortField.FIELD_DOC );\n    assertMatches (full, queryX, sort, \"IEGCA\");\n    assertMatches (full, queryY, sort, \"JFHDB\");\n\n    sort.setSort (new SortField (null, SortField.Type.DOC, true));\n    assertMatches (full, queryX, sort, \"IGECA\");\n    assertMatches (full, queryY, sort, \"JHFDB\");\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT, true) );\n    assertMatches (full, queryX, sort, \"CAEGI\");\n    assertMatches (full, queryY, sort, \"BJFHD\");\n\n    sort.setSort (new SortField (\"float\", SortField.Type.FLOAT, true) );\n    assertMatches (full, queryX, sort, \"AECIG\");\n    assertMatches (full, queryY, sort, \"BFJHD\");\n    \n    sort.setSort (new SortField (\"string\", SortField.Type.STRING, true) );\n    assertMatches (full, queryX, sort, \"CEGIA\");\n    assertMatches (full, queryY, sort, \"BFHJD\");\n    \n    if (supportsDocValues) {\n      sort.setSort (useDocValues(new SortField (\"int\", SortField.Type.INT, true)) );\n      assertMatches (full, queryX, sort, \"CAEGI\");\n      assertMatches (full, queryY, sort, \"BJFHD\");\n    \n      sort.setSort (useDocValues(new SortField (\"float\", SortField.Type.FLOAT, true)) );\n      assertMatches (full, queryX, sort, \"AECIG\");\n      assertMatches (full, queryY, sort, \"BFJHD\");\n    }\n  }\n\n","sourceOld":"  // test sorts in reverse\n  public void testReverseSort() throws Exception {\n    sort.setSort (new SortField (null, SortField.SCORE, true), SortField.FIELD_DOC );\n    assertMatches (full, queryX, sort, \"IEGCA\");\n    assertMatches (full, queryY, sort, \"JFHDB\");\n\n    sort.setSort (new SortField (null, SortField.DOC, true));\n    assertMatches (full, queryX, sort, \"IGECA\");\n    assertMatches (full, queryY, sort, \"JHFDB\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryX, sort, \"CAEGI\");\n    assertMatches (full, queryY, sort, \"BJFHD\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryX, sort, \"AECIG\");\n    assertMatches (full, queryY, sort, \"BFJHD\");\n    \n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryX, sort, \"CEGIA\");\n    assertMatches (full, queryY, sort, \"BFHJD\");\n    \n    if (supportsDocValues) {\n      sort.setSort (useDocValues(new SortField (\"int\", SortField.INT, true)) );\n      assertMatches (full, queryX, sort, \"CAEGI\");\n      assertMatches (full, queryY, sort, \"BJFHD\");\n    \n      sort.setSort (useDocValues(new SortField (\"float\", SortField.FLOAT, true)) );\n      assertMatches (full, queryX, sort, \"AECIG\");\n      assertMatches (full, queryY, sort, \"BFJHD\");\n    }\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testReverseSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testReverseSort().mjava","sourceNew":"  // test sorts in reverse\n  public void testReverseSort() throws Exception {\n    sort.setSort (new SortField (null, SortField.Type.SCORE, true), SortField.FIELD_DOC );\n    assertMatches (full, queryX, sort, \"IEGCA\");\n    assertMatches (full, queryY, sort, \"JFHDB\");\n\n    sort.setSort (new SortField (null, SortField.Type.DOC, true));\n    assertMatches (full, queryX, sort, \"IGECA\");\n    assertMatches (full, queryY, sort, \"JHFDB\");\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT, true) );\n    assertMatches (full, queryX, sort, \"CAEGI\");\n    assertMatches (full, queryY, sort, \"BJFHD\");\n\n    sort.setSort (new SortField (\"float\", SortField.Type.FLOAT, true) );\n    assertMatches (full, queryX, sort, \"AECIG\");\n    assertMatches (full, queryY, sort, \"BFJHD\");\n    \n    sort.setSort (new SortField (\"string\", SortField.Type.STRING, true) );\n    assertMatches (full, queryX, sort, \"CEGIA\");\n    assertMatches (full, queryY, sort, \"BFHJD\");\n    \n    if (supportsDocValues) {\n      sort.setSort (useDocValues(new SortField (\"int\", SortField.Type.INT, true)) );\n      assertMatches (full, queryX, sort, \"CAEGI\");\n      assertMatches (full, queryY, sort, \"BJFHD\");\n    \n      sort.setSort (useDocValues(new SortField (\"float\", SortField.Type.FLOAT, true)) );\n      assertMatches (full, queryX, sort, \"AECIG\");\n      assertMatches (full, queryY, sort, \"BFJHD\");\n    }\n  }\n\n","sourceOld":"  // test sorts in reverse\n  public void testReverseSort() throws Exception {\n    sort.setSort (new SortField (null, SortField.SCORE, true), SortField.FIELD_DOC );\n    assertMatches (full, queryX, sort, \"IEGCA\");\n    assertMatches (full, queryY, sort, \"JFHDB\");\n\n    sort.setSort (new SortField (null, SortField.DOC, true));\n    assertMatches (full, queryX, sort, \"IGECA\");\n    assertMatches (full, queryY, sort, \"JHFDB\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryX, sort, \"CAEGI\");\n    assertMatches (full, queryY, sort, \"BJFHD\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryX, sort, \"AECIG\");\n    assertMatches (full, queryY, sort, \"BFJHD\");\n    \n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryX, sort, \"CEGIA\");\n    assertMatches (full, queryY, sort, \"BFHJD\");\n    \n    if (supportsDocValues) {\n      sort.setSort (useDocValues(new SortField (\"int\", SortField.INT, true)) );\n      assertMatches (full, queryX, sort, \"CAEGI\");\n      assertMatches (full, queryY, sort, \"BJFHD\");\n    \n      sort.setSort (useDocValues(new SortField (\"float\", SortField.FLOAT, true)) );\n      assertMatches (full, queryX, sort, \"AECIG\");\n      assertMatches (full, queryY, sort, \"BFJHD\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testReverseSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testReverseSort().mjava","sourceNew":"  // test sorts in reverse\n  public void testReverseSort() throws Exception {\n    sort.setSort (new SortField (null, SortField.Type.SCORE, true), SortField.FIELD_DOC );\n    assertMatches (full, queryX, sort, \"IEGCA\");\n    assertMatches (full, queryY, sort, \"JFHDB\");\n\n    sort.setSort (new SortField (null, SortField.Type.DOC, true));\n    assertMatches (full, queryX, sort, \"IGECA\");\n    assertMatches (full, queryY, sort, \"JHFDB\");\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT, true) );\n    assertMatches (full, queryX, sort, \"CAEGI\");\n    assertMatches (full, queryY, sort, \"BJFHD\");\n\n    sort.setSort (new SortField (\"float\", SortField.Type.FLOAT, true) );\n    assertMatches (full, queryX, sort, \"AECIG\");\n    assertMatches (full, queryY, sort, \"BFJHD\");\n    \n    sort.setSort (new SortField (\"string\", SortField.Type.STRING, true) );\n    assertMatches (full, queryX, sort, \"CEGIA\");\n    assertMatches (full, queryY, sort, \"BFHJD\");\n    \n    if (supportsDocValues) {\n      sort.setSort (useDocValues(new SortField (\"int\", SortField.Type.INT, true)) );\n      assertMatches (full, queryX, sort, \"CAEGI\");\n      assertMatches (full, queryY, sort, \"BJFHD\");\n    \n      sort.setSort (useDocValues(new SortField (\"float\", SortField.Type.FLOAT, true)) );\n      assertMatches (full, queryX, sort, \"AECIG\");\n      assertMatches (full, queryY, sort, \"BFJHD\");\n    }\n  }\n\n","sourceOld":"  // test sorts in reverse\n  public void testReverseSort() throws Exception {\n    sort.setSort (new SortField (null, SortField.SCORE, true), SortField.FIELD_DOC );\n    assertMatches (full, queryX, sort, \"IEGCA\");\n    assertMatches (full, queryY, sort, \"JFHDB\");\n\n    sort.setSort (new SortField (null, SortField.DOC, true));\n    assertMatches (full, queryX, sort, \"IGECA\");\n    assertMatches (full, queryY, sort, \"JHFDB\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryX, sort, \"CAEGI\");\n    assertMatches (full, queryY, sort, \"BJFHD\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryX, sort, \"AECIG\");\n    assertMatches (full, queryY, sort, \"BFJHD\");\n    \n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryX, sort, \"CEGIA\");\n    assertMatches (full, queryY, sort, \"BFHJD\");\n    \n    if (supportsDocValues) {\n      sort.setSort (useDocValues(new SortField (\"int\", SortField.INT, true)) );\n      assertMatches (full, queryX, sort, \"CAEGI\");\n      assertMatches (full, queryY, sort, \"BJFHD\");\n    \n      sort.setSort (useDocValues(new SortField (\"float\", SortField.FLOAT, true)) );\n      assertMatches (full, queryX, sort, \"AECIG\");\n      assertMatches (full, queryY, sort, \"BFJHD\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28088b0a688977b79dec2cc9119cff2fb4aab7ee","date":1321197996,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testReverseSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testReverseSort().mjava","sourceNew":"  // test sorts in reverse\n  public void testReverseSort() throws Exception {\n    sort.setSort (new SortField (null, SortField.Type.SCORE, true), SortField.FIELD_DOC );\n    assertMatches (full, queryX, sort, \"IEGCA\");\n    assertMatches (full, queryY, sort, \"JFHDB\");\n\n    sort.setSort (new SortField (null, SortField.Type.DOC, true));\n    assertMatches (full, queryX, sort, \"IGECA\");\n    assertMatches (full, queryY, sort, \"JHFDB\");\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT, true) );\n    assertMatches (full, queryX, sort, \"CAEGI\");\n    assertMatches (full, queryY, sort, \"BJFHD\");\n\n    sort.setSort (new SortField (\"float\", SortField.Type.FLOAT, true) );\n    assertMatches (full, queryX, sort, \"AECIG\");\n    assertMatches (full, queryY, sort, \"BFJHD\");\n    \n    sort.setSort (new SortField (\"string\", SortField.Type.STRING, true) );\n    assertMatches (full, queryX, sort, \"CEGIA\");\n    assertMatches (full, queryY, sort, \"BFHJD\");\n    \n    if (supportsDocValues) {\n      sort.setSort (useDocValues(new SortField (\"int\", SortField.Type.INT, true)) );\n      assertMatches (full, queryX, sort, \"CAEGI\");\n      assertMatches (full, queryY, sort, \"BJFHD\");\n    \n      sort.setSort (useDocValues(new SortField (\"float\", SortField.Type.FLOAT, true)) );\n      assertMatches (full, queryX, sort, \"AECIG\");\n      assertMatches (full, queryY, sort, \"BFJHD\");\n\n      sort.setSort (useDocValues(new SortField (\"string\", getDVStringSortType(), true)) );\n      assertMatches (full, queryX, sort, \"CEGIA\");\n      assertMatches (full, queryY, sort, \"BFHJD\");\n    }\n  }\n\n","sourceOld":"  // test sorts in reverse\n  public void testReverseSort() throws Exception {\n    sort.setSort (new SortField (null, SortField.Type.SCORE, true), SortField.FIELD_DOC );\n    assertMatches (full, queryX, sort, \"IEGCA\");\n    assertMatches (full, queryY, sort, \"JFHDB\");\n\n    sort.setSort (new SortField (null, SortField.Type.DOC, true));\n    assertMatches (full, queryX, sort, \"IGECA\");\n    assertMatches (full, queryY, sort, \"JHFDB\");\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT, true) );\n    assertMatches (full, queryX, sort, \"CAEGI\");\n    assertMatches (full, queryY, sort, \"BJFHD\");\n\n    sort.setSort (new SortField (\"float\", SortField.Type.FLOAT, true) );\n    assertMatches (full, queryX, sort, \"AECIG\");\n    assertMatches (full, queryY, sort, \"BFJHD\");\n    \n    sort.setSort (new SortField (\"string\", SortField.Type.STRING, true) );\n    assertMatches (full, queryX, sort, \"CEGIA\");\n    assertMatches (full, queryY, sort, \"BFHJD\");\n    \n    if (supportsDocValues) {\n      sort.setSort (useDocValues(new SortField (\"int\", SortField.Type.INT, true)) );\n      assertMatches (full, queryX, sort, \"CAEGI\");\n      assertMatches (full, queryY, sort, \"BJFHD\");\n    \n      sort.setSort (useDocValues(new SortField (\"float\", SortField.Type.FLOAT, true)) );\n      assertMatches (full, queryX, sort, \"AECIG\");\n      assertMatches (full, queryY, sort, \"BFJHD\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testReverseSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testReverseSort().mjava","sourceNew":"  // test sorts in reverse\n  public void testReverseSort() throws Exception {\n    sort.setSort (new SortField (null, SortField.Type.SCORE, true), SortField.FIELD_DOC );\n    assertMatches (full, queryX, sort, \"IEGCA\");\n    assertMatches (full, queryY, sort, \"JFHDB\");\n\n    sort.setSort (new SortField (null, SortField.Type.DOC, true));\n    assertMatches (full, queryX, sort, \"IGECA\");\n    assertMatches (full, queryY, sort, \"JHFDB\");\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT, true) );\n    assertMatches (full, queryX, sort, \"CAEGI\");\n    assertMatches (full, queryY, sort, \"BJFHD\");\n\n    sort.setSort (new SortField (\"float\", SortField.Type.FLOAT, true) );\n    assertMatches (full, queryX, sort, \"AECIG\");\n    assertMatches (full, queryY, sort, \"BFJHD\");\n    \n    sort.setSort (new SortField (\"string\", SortField.Type.STRING, true) );\n    assertMatches (full, queryX, sort, \"CEGIA\");\n    assertMatches (full, queryY, sort, \"BFHJD\");\n    \n    if (supportsDocValues) {\n      sort.setSort (useDocValues(new SortField (\"int\", SortField.Type.INT, true)) );\n      assertMatches (full, queryX, sort, \"CAEGI\");\n      assertMatches (full, queryY, sort, \"BJFHD\");\n    \n      sort.setSort (useDocValues(new SortField (\"float\", SortField.Type.FLOAT, true)) );\n      assertMatches (full, queryX, sort, \"AECIG\");\n      assertMatches (full, queryY, sort, \"BFJHD\");\n\n      sort.setSort (useDocValues(new SortField (\"string\", getDVStringSortType(), true)) );\n      assertMatches (full, queryX, sort, \"CEGIA\");\n      assertMatches (full, queryY, sort, \"BFHJD\");\n    }\n  }\n\n","sourceOld":"  // test sorts in reverse\n  public void testReverseSort() throws Exception {\n    sort.setSort (new SortField (null, SortField.Type.SCORE, true), SortField.FIELD_DOC );\n    assertMatches (full, queryX, sort, \"IEGCA\");\n    assertMatches (full, queryY, sort, \"JFHDB\");\n\n    sort.setSort (new SortField (null, SortField.Type.DOC, true));\n    assertMatches (full, queryX, sort, \"IGECA\");\n    assertMatches (full, queryY, sort, \"JHFDB\");\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT, true) );\n    assertMatches (full, queryX, sort, \"CAEGI\");\n    assertMatches (full, queryY, sort, \"BJFHD\");\n\n    sort.setSort (new SortField (\"float\", SortField.Type.FLOAT, true) );\n    assertMatches (full, queryX, sort, \"AECIG\");\n    assertMatches (full, queryY, sort, \"BFJHD\");\n    \n    sort.setSort (new SortField (\"string\", SortField.Type.STRING, true) );\n    assertMatches (full, queryX, sort, \"CEGIA\");\n    assertMatches (full, queryY, sort, \"BFHJD\");\n    \n    if (supportsDocValues) {\n      sort.setSort (useDocValues(new SortField (\"int\", SortField.Type.INT, true)) );\n      assertMatches (full, queryX, sort, \"CAEGI\");\n      assertMatches (full, queryY, sort, \"BJFHD\");\n    \n      sort.setSort (useDocValues(new SortField (\"float\", SortField.Type.FLOAT, true)) );\n      assertMatches (full, queryX, sort, \"AECIG\");\n      assertMatches (full, queryY, sort, \"BFJHD\");\n\n      sort.setSort (useDocValues(new SortField (\"string\", getDVStringSortType(), true)) );\n      assertMatches (full, queryX, sort, \"CEGIA\");\n      assertMatches (full, queryY, sort, \"BFHJD\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["9454a6510e2db155fb01faa5c049b06ece95fab9","2e8d7ba2175f47e280231533f7d3016249cea88b"],"9235b9d4454a46c066cda47fed7ca0a34e614529":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["9454a6510e2db155fb01faa5c049b06ece95fab9","0cedee4c69436d5334e8f35463bf232084ff2fa3"],"0cedee4c69436d5334e8f35463bf232084ff2fa3":["9235b9d4454a46c066cda47fed7ca0a34e614529"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["28088b0a688977b79dec2cc9119cff2fb4aab7ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28088b0a688977b79dec2cc9119cff2fb4aab7ee":["090a0320e4de4a3674376aef96b9701f47564f86"],"2553b00f699380c64959ccb27991289aae87be2e":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","090a0320e4de4a3674376aef96b9701f47564f86"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["2e8d7ba2175f47e280231533f7d3016249cea88b","090a0320e4de4a3674376aef96b9701f47564f86"],"090a0320e4de4a3674376aef96b9701f47564f86":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["2553b00f699380c64959ccb27991289aae87be2e"],"9235b9d4454a46c066cda47fed7ca0a34e614529":["0cedee4c69436d5334e8f35463bf232084ff2fa3"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","d083e83f225b11e5fdd900e83d26ddb385b6955c","090a0320e4de4a3674376aef96b9701f47564f86"],"0cedee4c69436d5334e8f35463bf232084ff2fa3":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"28088b0a688977b79dec2cc9119cff2fb4aab7ee":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2553b00f699380c64959ccb27991289aae87be2e":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"090a0320e4de4a3674376aef96b9701f47564f86":["28088b0a688977b79dec2cc9119cff2fb4aab7ee","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","9235b9d4454a46c066cda47fed7ca0a34e614529","2e8d7ba2175f47e280231533f7d3016249cea88b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}