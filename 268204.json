{"path":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid#index(int,int).mjava","commits":[{"id":"82235a501cff963da53cb98d86009e33e15cf47f","date":1459788663,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid#index(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns grid index of lat/lon, or -1 if the value is outside of the bounding box. */\n  private int index(int latitude, int longitude) {\n    if (latitude < minLat || latitude > maxLat || longitude < minLon || longitude > maxLon) {\n      return -1; // outside of bounding box range\n    }\n    \n    long latRel = latitude - (long) minLat;\n    long lonRel = longitude - (long) minLon;\n    \n    int latIndex = (int) (latRel / latPerCell);\n    int lonIndex = (int) (lonRel / lonPerCell);\n    return latIndex * GRID_SIZE + lonIndex;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09af2c9610ce53a4b25fd99344299b40318a4a1a","date":1459876565,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid#index(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns grid index of lat/lon, or -1 if the value is outside of the bounding box. */\n  private int index(int latitude, int longitude) {\n    if (latitude < minLat || latitude > maxLat || longitude < minLon || longitude > maxLon) {\n      return -1; // outside of bounding box range\n    }\n    \n    long latRel = latitude - (long) minLat;\n    long lonRel = longitude - (long) minLon;\n    \n    int latIndex = (int) (latRel / latPerCell);\n    int lonIndex = (int) (lonRel / lonPerCell);\n    return latIndex * GRID_SIZE + lonIndex;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b354f9ab8013d7a8ec8c652cef5f86f635c8443b","date":1460558006,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid#index(int,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid#index(int,int).mjava","sourceNew":"  /** Returns grid index of lat/lon, or -1 if the value is outside of the bounding box. */\n  private int index(int latitude, int longitude) {\n    if (latitude < minLat || latitude > maxLat || longitude < minLon || longitude > maxLon) {\n      return -1; // outside of bounding box range\n    }\n    \n    long latRel = latitude - (long) minLat;\n    long lonRel = longitude - (long) minLon;\n    \n    int latIndex = (int) (latRel / latPerCell);\n    assert latIndex < GRID_SIZE;\n    int lonIndex = (int) (lonRel / lonPerCell);\n    assert lonIndex < GRID_SIZE;\n    return latIndex * GRID_SIZE + lonIndex;\n  }\n\n","sourceOld":"  /** Returns grid index of lat/lon, or -1 if the value is outside of the bounding box. */\n  private int index(int latitude, int longitude) {\n    if (latitude < minLat || latitude > maxLat || longitude < minLon || longitude > maxLon) {\n      return -1; // outside of bounding box range\n    }\n    \n    long latRel = latitude - (long) minLat;\n    long lonRel = longitude - (long) minLon;\n    \n    int latIndex = (int) (latRel / latPerCell);\n    int lonIndex = (int) (lonRel / lonPerCell);\n    return latIndex * GRID_SIZE + lonIndex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ea9249ab9a9f76eb4132ceb4631d15315721f6a","date":1460578553,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid#index(int,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid#index(int,int).mjava","sourceNew":"  /** Returns grid index of lat/lon, or -1 if the value is outside of the bounding box. */\n  private int index(int latitude, int longitude) {\n    if (latitude < minLat || latitude > maxLat || longitude < minLon || longitude > maxLon) {\n      return -1; // outside of bounding box range\n    }\n    \n    long latRel = latitude - (long) minLat;\n    long lonRel = longitude - (long) minLon;\n    \n    int latIndex = (int) (latRel / latPerCell);\n    assert latIndex < GRID_SIZE;\n    int lonIndex = (int) (lonRel / lonPerCell);\n    assert lonIndex < GRID_SIZE;\n    return latIndex * GRID_SIZE + lonIndex;\n  }\n\n","sourceOld":"  /** Returns grid index of lat/lon, or -1 if the value is outside of the bounding box. */\n  private int index(int latitude, int longitude) {\n    if (latitude < minLat || latitude > maxLat || longitude < minLon || longitude > maxLon) {\n      return -1; // outside of bounding box range\n    }\n    \n    long latRel = latitude - (long) minLat;\n    long lonRel = longitude - (long) minLon;\n    \n    int latIndex = (int) (latRel / latPerCell);\n    int lonIndex = (int) (lonRel / lonPerCell);\n    return latIndex * GRID_SIZE + lonIndex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"925fce43f3bac029d912b9b7de03c789e258a333","date":1461612714,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid#index(int,int).mjava","sourceNew":null,"sourceOld":"  /** Returns grid index of lat/lon, or -1 if the value is outside of the bounding box. */\n  private int index(int latitude, int longitude) {\n    if (latitude < minLat || latitude > maxLat || longitude < minLon || longitude > maxLon) {\n      return -1; // outside of bounding box range\n    }\n    \n    long latRel = latitude - (long) minLat;\n    long lonRel = longitude - (long) minLon;\n    \n    int latIndex = (int) (latRel / latPerCell);\n    assert latIndex < GRID_SIZE;\n    int lonIndex = (int) (lonRel / lonPerCell);\n    assert lonIndex < GRID_SIZE;\n    return latIndex * GRID_SIZE + lonIndex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid#index(int,int).mjava","sourceNew":null,"sourceOld":"  /** Returns grid index of lat/lon, or -1 if the value is outside of the bounding box. */\n  private int index(int latitude, int longitude) {\n    if (latitude < minLat || latitude > maxLat || longitude < minLon || longitude > maxLon) {\n      return -1; // outside of bounding box range\n    }\n    \n    long latRel = latitude - (long) minLat;\n    long lonRel = longitude - (long) minLon;\n    \n    int latIndex = (int) (latRel / latPerCell);\n    assert latIndex < GRID_SIZE;\n    int lonIndex = (int) (lonRel / lonPerCell);\n    assert lonIndex < GRID_SIZE;\n    return latIndex * GRID_SIZE + lonIndex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"82235a501cff963da53cb98d86009e33e15cf47f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09af2c9610ce53a4b25fd99344299b40318a4a1a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","82235a501cff963da53cb98d86009e33e15cf47f"],"b354f9ab8013d7a8ec8c652cef5f86f635c8443b":["82235a501cff963da53cb98d86009e33e15cf47f"],"9ea9249ab9a9f76eb4132ceb4631d15315721f6a":["82235a501cff963da53cb98d86009e33e15cf47f","b354f9ab8013d7a8ec8c652cef5f86f635c8443b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["9ea9249ab9a9f76eb4132ceb4631d15315721f6a","925fce43f3bac029d912b9b7de03c789e258a333"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"925fce43f3bac029d912b9b7de03c789e258a333":["9ea9249ab9a9f76eb4132ceb4631d15315721f6a"]},"commit2Childs":{"82235a501cff963da53cb98d86009e33e15cf47f":["09af2c9610ce53a4b25fd99344299b40318a4a1a","b354f9ab8013d7a8ec8c652cef5f86f635c8443b","9ea9249ab9a9f76eb4132ceb4631d15315721f6a"],"09af2c9610ce53a4b25fd99344299b40318a4a1a":[],"b354f9ab8013d7a8ec8c652cef5f86f635c8443b":["9ea9249ab9a9f76eb4132ceb4631d15315721f6a"],"9ea9249ab9a9f76eb4132ceb4631d15315721f6a":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","925fce43f3bac029d912b9b7de03c789e258a333"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["82235a501cff963da53cb98d86009e33e15cf47f","09af2c9610ce53a4b25fd99344299b40318a4a1a"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"925fce43f3bac029d912b9b7de03c789e258a333":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09af2c9610ce53a4b25fd99344299b40318a4a1a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}