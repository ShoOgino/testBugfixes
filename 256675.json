{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#createSolrCore(String,String,String,String,String,String).mjava","commits":[{"id":"0ad7bdba3e91cf3373cda2e52239cb761fc0b452","date":1408019547,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#createSolrCore(String,String,String,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private boolean createSolrCore(final String collection,\n      final String createUrl, final String dataDir, final String ulogDir,\n      final String coreNodeName, final String coreName) {\n    HttpSolrServer server = null;\n    try {\n      log.debug(\"create url={}\", createUrl);\n      server = new HttpSolrServer(createUrl);\n      server.setConnectionTimeout(30000);\n      server.setSoTimeout(60000);\n      Create createCmd = new Create();\n      createCmd.setCollection(collection);\n      createCmd.setCoreNodeName(coreNodeName);\n      // TODO: how do we ensure unique coreName\n      // for now, the collections API will use unique names\n      createCmd.setCoreName(coreName);\n      createCmd.setDataDir(dataDir);\n      createCmd.setUlogDir(ulogDir);\n      server.request(createCmd);\n    } catch (Exception e) {\n      SolrException.log(log, \"Exception trying to create new replica on \" + createUrl, e);\n      return false;\n    } finally {\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#createSolrCore(String,String,String,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#createSolrCore(String,String,String,String,String,String).mjava","sourceNew":"  private boolean createSolrCore(final String collection,\n      final String createUrl, final String dataDir, final String ulogDir,\n      final String coreNodeName, final String coreName) {\n    HttpSolrClient server = null;\n    try {\n      log.debug(\"create url={}\", createUrl);\n      server = new HttpSolrClient(createUrl);\n      server.setConnectionTimeout(30000);\n      server.setSoTimeout(60000);\n      Create createCmd = new Create();\n      createCmd.setCollection(collection);\n      createCmd.setCoreNodeName(coreNodeName);\n      // TODO: how do we ensure unique coreName\n      // for now, the collections API will use unique names\n      createCmd.setCoreName(coreName);\n      createCmd.setDataDir(dataDir);\n      createCmd.setUlogDir(ulogDir);\n      server.request(createCmd);\n    } catch (Exception e) {\n      SolrException.log(log, \"Exception trying to create new replica on \" + createUrl, e);\n      return false;\n    } finally {\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean createSolrCore(final String collection,\n      final String createUrl, final String dataDir, final String ulogDir,\n      final String coreNodeName, final String coreName) {\n    HttpSolrServer server = null;\n    try {\n      log.debug(\"create url={}\", createUrl);\n      server = new HttpSolrServer(createUrl);\n      server.setConnectionTimeout(30000);\n      server.setSoTimeout(60000);\n      Create createCmd = new Create();\n      createCmd.setCollection(collection);\n      createCmd.setCoreNodeName(coreNodeName);\n      // TODO: how do we ensure unique coreName\n      // for now, the collections API will use unique names\n      createCmd.setCoreName(coreName);\n      createCmd.setDataDir(dataDir);\n      createCmd.setUlogDir(ulogDir);\n      server.request(createCmd);\n    } catch (Exception e) {\n      SolrException.log(log, \"Exception trying to create new replica on \" + createUrl, e);\n      return false;\n    } finally {\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#createSolrCore(String,String,String,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#createSolrCore(String,String,String,String,String,String).mjava","sourceNew":"  private boolean createSolrCore(final String collection,\n      final String createUrl, final String dataDir, final String ulogDir,\n      final String coreNodeName, final String coreName) {\n\n    try (HttpSolrClient client = new HttpSolrClient(createUrl)) {\n      log.debug(\"create url={}\", createUrl);\n      client.setConnectionTimeout(30000);\n      client.setSoTimeout(60000);\n      Create createCmd = new Create();\n      createCmd.setCollection(collection);\n      createCmd.setCoreNodeName(coreNodeName);\n      // TODO: how do we ensure unique coreName\n      // for now, the collections API will use unique names\n      createCmd.setCoreName(coreName);\n      createCmd.setDataDir(dataDir);\n      createCmd.setUlogDir(ulogDir);\n      client.request(createCmd);\n    } catch (Exception e) {\n      SolrException.log(log, \"Exception trying to create new replica on \" + createUrl, e);\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean createSolrCore(final String collection,\n      final String createUrl, final String dataDir, final String ulogDir,\n      final String coreNodeName, final String coreName) {\n    HttpSolrClient server = null;\n    try {\n      log.debug(\"create url={}\", createUrl);\n      server = new HttpSolrClient(createUrl);\n      server.setConnectionTimeout(30000);\n      server.setSoTimeout(60000);\n      Create createCmd = new Create();\n      createCmd.setCollection(collection);\n      createCmd.setCoreNodeName(coreNodeName);\n      // TODO: how do we ensure unique coreName\n      // for now, the collections API will use unique names\n      createCmd.setCoreName(coreName);\n      createCmd.setDataDir(dataDir);\n      createCmd.setUlogDir(ulogDir);\n      server.request(createCmd);\n    } catch (Exception e) {\n      SolrException.log(log, \"Exception trying to create new replica on \" + createUrl, e);\n      return false;\n    } finally {\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#createSolrCore(String,String,String,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#createSolrCore(String,String,String,String,String,String).mjava","sourceNew":"  private boolean createSolrCore(final String collection,\n      final String createUrl, final String dataDir, final String ulogDir,\n      final String coreNodeName, final String coreName) {\n\n    try (HttpSolrClient client = new HttpSolrClient.Builder(createUrl).build()) {\n      log.debug(\"create url={}\", createUrl);\n      client.setConnectionTimeout(30000);\n      client.setSoTimeout(60000);\n      Create createCmd = new Create();\n      createCmd.setCollection(collection);\n      createCmd.setCoreNodeName(coreNodeName);\n      // TODO: how do we ensure unique coreName\n      // for now, the collections API will use unique names\n      createCmd.setCoreName(coreName);\n      createCmd.setDataDir(dataDir);\n      createCmd.setUlogDir(ulogDir);\n      client.request(createCmd);\n    } catch (Exception e) {\n      SolrException.log(log, \"Exception trying to create new replica on \" + createUrl, e);\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean createSolrCore(final String collection,\n      final String createUrl, final String dataDir, final String ulogDir,\n      final String coreNodeName, final String coreName) {\n\n    try (HttpSolrClient client = new HttpSolrClient(createUrl)) {\n      log.debug(\"create url={}\", createUrl);\n      client.setConnectionTimeout(30000);\n      client.setSoTimeout(60000);\n      Create createCmd = new Create();\n      createCmd.setCollection(collection);\n      createCmd.setCoreNodeName(coreNodeName);\n      // TODO: how do we ensure unique coreName\n      // for now, the collections API will use unique names\n      createCmd.setCoreName(coreName);\n      createCmd.setDataDir(dataDir);\n      createCmd.setUlogDir(ulogDir);\n      client.request(createCmd);\n    } catch (Exception e) {\n      SolrException.log(log, \"Exception trying to create new replica on \" + createUrl, e);\n      return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#createSolrCore(String,String,String,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#createSolrCore(String,String,String,String,String,String).mjava","sourceNew":"  private boolean createSolrCore(final String collection,\n      final String createUrl, final String dataDir, final String ulogDir,\n      final String coreNodeName, final String coreName) {\n\n    try (HttpSolrClient client = new HttpSolrClient.Builder(createUrl).build()) {\n      log.debug(\"create url={}\", createUrl);\n      client.setConnectionTimeout(30000);\n      client.setSoTimeout(60000);\n      Create createCmd = new Create();\n      createCmd.setCollection(collection);\n      createCmd.setCoreNodeName(coreNodeName);\n      // TODO: how do we ensure unique coreName\n      // for now, the collections API will use unique names\n      createCmd.setCoreName(coreName);\n      createCmd.setDataDir(dataDir);\n      createCmd.setUlogDir(ulogDir);\n      client.request(createCmd);\n    } catch (Exception e) {\n      SolrException.log(log, \"Exception trying to create new replica on \" + createUrl, e);\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean createSolrCore(final String collection,\n      final String createUrl, final String dataDir, final String ulogDir,\n      final String coreNodeName, final String coreName) {\n\n    try (HttpSolrClient client = new HttpSolrClient(createUrl)) {\n      log.debug(\"create url={}\", createUrl);\n      client.setConnectionTimeout(30000);\n      client.setSoTimeout(60000);\n      Create createCmd = new Create();\n      createCmd.setCollection(collection);\n      createCmd.setCoreNodeName(coreNodeName);\n      // TODO: how do we ensure unique coreName\n      // for now, the collections API will use unique names\n      createCmd.setCoreName(coreName);\n      createCmd.setDataDir(dataDir);\n      createCmd.setUlogDir(ulogDir);\n      client.request(createCmd);\n    } catch (Exception e) {\n      SolrException.log(log, \"Exception trying to create new replica on \" + createUrl, e);\n      return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e748d9ee3a1515b2ea3903d067f1f39fffdd083f","date":1467898648,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#createSolrCore(String,String,String,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#createSolrCore(String,String,String,String,String,String).mjava","sourceNew":"  private boolean createSolrCore(final String collection,\n      final String createUrl, final String dataDir, final String ulogDir,\n      final String coreNodeName, final String coreName) {\n\n    try (HttpSolrClient client = new HttpSolrClient.Builder(createUrl).build()) {\n      log.debug(\"create url={}\", createUrl);\n      client.setConnectionTimeout(30000);\n      client.setSoTimeout(60000);\n      Create createCmd = new Create();\n      createCmd.setCollection(collection);\n      createCmd.setCoreNodeName(coreNodeName);\n      // TODO: how do we ensure unique coreName\n      // for now, the collections API will use unique names\n      createCmd.setCoreName(coreName);\n      createCmd.setDataDir(dataDir);\n      createCmd.setUlogDir(ulogDir.substring(0, ulogDir.length() - \"/tlog\".length()));\n      client.request(createCmd);\n    } catch (Exception e) {\n      SolrException.log(log, \"Exception trying to create new replica on \" + createUrl, e);\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean createSolrCore(final String collection,\n      final String createUrl, final String dataDir, final String ulogDir,\n      final String coreNodeName, final String coreName) {\n\n    try (HttpSolrClient client = new HttpSolrClient.Builder(createUrl).build()) {\n      log.debug(\"create url={}\", createUrl);\n      client.setConnectionTimeout(30000);\n      client.setSoTimeout(60000);\n      Create createCmd = new Create();\n      createCmd.setCollection(collection);\n      createCmd.setCoreNodeName(coreNodeName);\n      // TODO: how do we ensure unique coreName\n      // for now, the collections API will use unique names\n      createCmd.setCoreName(coreName);\n      createCmd.setDataDir(dataDir);\n      createCmd.setUlogDir(ulogDir);\n      client.request(createCmd);\n    } catch (Exception e) {\n      SolrException.log(log, \"Exception trying to create new replica on \" + createUrl, e);\n      return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#createSolrCore(String,String,String,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#createSolrCore(String,String,String,String,String,String).mjava","sourceNew":"  private boolean createSolrCore(final String collection,\n      final String createUrl, final String dataDir, final String ulogDir,\n      final String coreNodeName, final String coreName) {\n\n    try (HttpSolrClient client = new HttpSolrClient.Builder(createUrl).build()) {\n      log.debug(\"create url={}\", createUrl);\n      client.setConnectionTimeout(30000);\n      client.setSoTimeout(60000);\n      Create createCmd = new Create();\n      createCmd.setCollection(collection);\n      createCmd.setCoreNodeName(coreNodeName);\n      // TODO: how do we ensure unique coreName\n      // for now, the collections API will use unique names\n      createCmd.setCoreName(coreName);\n      createCmd.setDataDir(dataDir);\n      createCmd.setUlogDir(ulogDir.substring(0, ulogDir.length() - \"/tlog\".length()));\n      client.request(createCmd);\n    } catch (Exception e) {\n      SolrException.log(log, \"Exception trying to create new replica on \" + createUrl, e);\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean createSolrCore(final String collection,\n      final String createUrl, final String dataDir, final String ulogDir,\n      final String coreNodeName, final String coreName) {\n\n    try (HttpSolrClient client = new HttpSolrClient.Builder(createUrl).build()) {\n      log.debug(\"create url={}\", createUrl);\n      client.setConnectionTimeout(30000);\n      client.setSoTimeout(60000);\n      Create createCmd = new Create();\n      createCmd.setCollection(collection);\n      createCmd.setCoreNodeName(coreNodeName);\n      // TODO: how do we ensure unique coreName\n      // for now, the collections API will use unique names\n      createCmd.setCoreName(coreName);\n      createCmd.setDataDir(dataDir);\n      createCmd.setUlogDir(ulogDir);\n      client.request(createCmd);\n    } catch (Exception e) {\n      SolrException.log(log, \"Exception trying to create new replica on \" + createUrl, e);\n      return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"579fab47a447cb68f742b3ea201e3398f84daaef","date":1489485666,"type":5,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#createSolrCore(String,String,String,String,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#createSolrCore(String,String,String,String,String,String).mjava","sourceNew":"  private boolean createSolrCore(final String collection,\n      final String createUrl, final String dataDir, final String ulogDir,\n      final String coreNodeName, final String coreName, final String shardId) {\n\n    try (HttpSolrClient client = new HttpSolrClient.Builder(createUrl).build()) {\n      log.debug(\"create url={}\", createUrl);\n      client.setConnectionTimeout(30000);\n      client.setSoTimeout(60000);\n      Create createCmd = new Create();\n      createCmd.setCollection(collection);\n      createCmd.setCoreNodeName(coreNodeName);\n      // TODO: how do we ensure unique coreName\n      // for now, the collections API will use unique names\n      createCmd.setShardId(shardId);\n      createCmd.setCoreName(coreName);\n      createCmd.setDataDir(dataDir);\n      createCmd.setUlogDir(ulogDir.substring(0, ulogDir.length() - \"/tlog\".length()));\n      client.request(createCmd);\n    } catch (Exception e) {\n      SolrException.log(log, \"Exception trying to create new replica on \" + createUrl, e);\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean createSolrCore(final String collection,\n      final String createUrl, final String dataDir, final String ulogDir,\n      final String coreNodeName, final String coreName) {\n\n    try (HttpSolrClient client = new HttpSolrClient.Builder(createUrl).build()) {\n      log.debug(\"create url={}\", createUrl);\n      client.setConnectionTimeout(30000);\n      client.setSoTimeout(60000);\n      Create createCmd = new Create();\n      createCmd.setCollection(collection);\n      createCmd.setCoreNodeName(coreNodeName);\n      // TODO: how do we ensure unique coreName\n      // for now, the collections API will use unique names\n      createCmd.setCoreName(coreName);\n      createCmd.setDataDir(dataDir);\n      createCmd.setUlogDir(ulogDir.substring(0, ulogDir.length() - \"/tlog\".length()));\n      client.request(createCmd);\n    } catch (Exception e) {\n      SolrException.log(log, \"Exception trying to create new replica on \" + createUrl, e);\n      return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ae3ad2b3d171060b5f8d2780f38b1dae608e02d","date":1489651910,"type":5,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#createSolrCore(String,String,String,String,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#createSolrCore(String,String,String,String,String,String).mjava","sourceNew":"  private boolean createSolrCore(final String collection,\n      final String createUrl, final String dataDir, final String ulogDir,\n      final String coreNodeName, final String coreName, final String shardId) {\n\n    try (HttpSolrClient client = new HttpSolrClient.Builder(createUrl).build()) {\n      log.debug(\"create url={}\", createUrl);\n      client.setConnectionTimeout(30000);\n      client.setSoTimeout(60000);\n      Create createCmd = new Create();\n      createCmd.setCollection(collection);\n      createCmd.setCoreNodeName(coreNodeName);\n      // TODO: how do we ensure unique coreName\n      // for now, the collections API will use unique names\n      createCmd.setShardId(shardId);\n      createCmd.setCoreName(coreName);\n      createCmd.setDataDir(dataDir);\n      createCmd.setUlogDir(ulogDir.substring(0, ulogDir.length() - \"/tlog\".length()));\n      client.request(createCmd);\n    } catch (Exception e) {\n      SolrException.log(log, \"Exception trying to create new replica on \" + createUrl, e);\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean createSolrCore(final String collection,\n      final String createUrl, final String dataDir, final String ulogDir,\n      final String coreNodeName, final String coreName) {\n\n    try (HttpSolrClient client = new HttpSolrClient.Builder(createUrl).build()) {\n      log.debug(\"create url={}\", createUrl);\n      client.setConnectionTimeout(30000);\n      client.setSoTimeout(60000);\n      Create createCmd = new Create();\n      createCmd.setCollection(collection);\n      createCmd.setCoreNodeName(coreNodeName);\n      // TODO: how do we ensure unique coreName\n      // for now, the collections API will use unique names\n      createCmd.setCoreName(coreName);\n      createCmd.setDataDir(dataDir);\n      createCmd.setUlogDir(ulogDir.substring(0, ulogDir.length() - \"/tlog\".length()));\n      client.request(createCmd);\n    } catch (Exception e) {\n      SolrException.log(log, \"Exception trying to create new replica on \" + createUrl, e);\n      return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#createSolrCore(String,String,String,String,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#createSolrCore(String,String,String,String,String,String).mjava","sourceNew":"  private boolean createSolrCore(final String collection,\n      final String createUrl, final String dataDir, final String ulogDir,\n      final String coreNodeName, final String coreName, final String shardId) {\n\n    try (HttpSolrClient client = new HttpSolrClient.Builder(createUrl).build()) {\n      log.debug(\"create url={}\", createUrl);\n      client.setConnectionTimeout(30000);\n      client.setSoTimeout(60000);\n      Create createCmd = new Create();\n      createCmd.setCollection(collection);\n      createCmd.setCoreNodeName(coreNodeName);\n      // TODO: how do we ensure unique coreName\n      // for now, the collections API will use unique names\n      createCmd.setShardId(shardId);\n      createCmd.setCoreName(coreName);\n      createCmd.setDataDir(dataDir);\n      createCmd.setUlogDir(ulogDir.substring(0, ulogDir.length() - \"/tlog\".length()));\n      client.request(createCmd);\n    } catch (Exception e) {\n      SolrException.log(log, \"Exception trying to create new replica on \" + createUrl, e);\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean createSolrCore(final String collection,\n      final String createUrl, final String dataDir, final String ulogDir,\n      final String coreNodeName, final String coreName) {\n\n    try (HttpSolrClient client = new HttpSolrClient.Builder(createUrl).build()) {\n      log.debug(\"create url={}\", createUrl);\n      client.setConnectionTimeout(30000);\n      client.setSoTimeout(60000);\n      Create createCmd = new Create();\n      createCmd.setCollection(collection);\n      createCmd.setCoreNodeName(coreNodeName);\n      // TODO: how do we ensure unique coreName\n      // for now, the collections API will use unique names\n      createCmd.setCoreName(coreName);\n      createCmd.setDataDir(dataDir);\n      createCmd.setUlogDir(ulogDir.substring(0, ulogDir.length() - \"/tlog\".length()));\n      client.request(createCmd);\n    } catch (Exception e) {\n      SolrException.log(log, \"Exception trying to create new replica on \" + createUrl, e);\n      return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"579fab47a447cb68f742b3ea201e3398f84daaef":["e748d9ee3a1515b2ea3903d067f1f39fffdd083f"],"6ae3ad2b3d171060b5f8d2780f38b1dae608e02d":["e748d9ee3a1515b2ea3903d067f1f39fffdd083f"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["cc3b13b430571c2e169f98fe38e1e7666f88522d","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"ab68488225b6a6c357dda72ed11dedca9914a192":["e748d9ee3a1515b2ea3903d067f1f39fffdd083f","6ae3ad2b3d171060b5f8d2780f38b1dae608e02d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","e748d9ee3a1515b2ea3903d067f1f39fffdd083f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["579fab47a447cb68f742b3ea201e3398f84daaef"],"e748d9ee3a1515b2ea3903d067f1f39fffdd083f":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"]},"commit2Childs":{"579fab47a447cb68f742b3ea201e3398f84daaef":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6ae3ad2b3d171060b5f8d2780f38b1dae608e02d":["ab68488225b6a6c357dda72ed11dedca9914a192"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["bafca15d8e408346a67f4282ad1143b88023893b"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e748d9ee3a1515b2ea3903d067f1f39fffdd083f"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"bafca15d8e408346a67f4282ad1143b88023893b":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"ab68488225b6a6c357dda72ed11dedca9914a192":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"e748d9ee3a1515b2ea3903d067f1f39fffdd083f":["579fab47a447cb68f742b3ea201e3398f84daaef","6ae3ad2b3d171060b5f8d2780f38b1dae608e02d","ab68488225b6a6c357dda72ed11dedca9914a192","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ab68488225b6a6c357dda72ed11dedca9914a192","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}