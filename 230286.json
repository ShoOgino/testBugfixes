{"path":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanOptionalWithTiebreaker().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanOptionalWithTiebreaker().mjava","pathOld":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanOptionalWithTiebreaker().mjava","sourceNew":"    public void testBooleanOptionalWithTiebreaker() throws Exception {\n\n        BooleanQuery q = new BooleanQuery();\n        {\n            DisjunctionMaxQuery q1 = new DisjunctionMaxQuery(0.01f);\n            q1.add(tq(\"hed\",\"albino\"));\n            q1.add(tq(\"dek\",\"albino\"));\n            q.add(q1, BooleanClause.Occur.SHOULD);//false,false);\n        }\n        {\n            DisjunctionMaxQuery q2 = new DisjunctionMaxQuery(0.01f);\n            q2.add(tq(\"hed\",\"elephant\"));\n            q2.add(tq(\"dek\",\"elephant\"));\n            q.add(q2, BooleanClause.Occur.SHOULD);//false,false);\n        }\n        QueryUtils.check(q,s);\n\n\n        ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n\n        try {\n\n            assertEquals(\"4 docs should match \" + q.toString(),\n                         4, h.length);\n\n            float score0 = h[0].score;\n            float score1 = h[1].score;\n            float score2 = h[2].score;\n            float score3 = h[3].score;\n\n            String doc0 = s.doc(h[0].doc).get(\"id\");\n            String doc1 = s.doc(h[1].doc).get(\"id\");\n            String doc2 = s.doc(h[2].doc).get(\"id\");\n            String doc3 = s.doc(h[3].doc).get(\"id\");            \n\n            assertTrue(\"doc0 should be d2 or d4: \" + doc0,\n                       doc0.equals(\"d2\") || doc0.equals(\"d4\"));\n            assertTrue(\"doc1 should be d2 or d4: \" + doc0,\n                       doc1.equals(\"d2\") || doc1.equals(\"d4\"));\n            assertEquals(\"score0 and score1 should match\",\n                         score0, score1, SCORE_COMP_THRESH);\n            assertEquals(\"wrong third\", \"d3\", doc2);\n            assertTrue(\"d3 does not have worse score then d2 and d4: \" +\n                       score1 + \" >? \" + score2,\n                       score1 > score2);\n\n            assertEquals(\"wrong fourth\", \"d1\", doc3);\n            assertTrue(\"d1 does not have worse score then d3: \" +\n                       score2 + \" >? \" + score3,\n                       score2 > score3);\n\n        } catch (Error e) {\n            printHits(\"testBooleanOptionalWithTiebreaker\",h, s);\n            throw e;\n        }\n\n    }\n\n","sourceOld":"    public void testBooleanOptionalWithTiebreaker() throws Exception {\n\n        BooleanQuery q = new BooleanQuery();\n        {\n            DisjunctionMaxQuery q1 = new DisjunctionMaxQuery(0.01f);\n            q1.add(tq(\"hed\",\"albino\"));\n            q1.add(tq(\"dek\",\"albino\"));\n            q.add(q1, BooleanClause.Occur.SHOULD);//false,false);\n        }\n        {\n            DisjunctionMaxQuery q2 = new DisjunctionMaxQuery(0.01f);\n            q2.add(tq(\"hed\",\"elephant\"));\n            q2.add(tq(\"dek\",\"elephant\"));\n            q.add(q2, BooleanClause.Occur.SHOULD);//false,false);\n        }\n        QueryUtils.check(q,s);\n\n\n        ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n\n        try {\n\n            assertEquals(\"4 docs should match \" + q.toString(),\n                         4, h.length);\n\n            float score0 = h[0].score;\n            float score1 = h[1].score;\n            float score2 = h[2].score;\n            float score3 = h[3].score;\n\n            String doc0 = s.doc(h[0].doc).get(\"id\");\n            String doc1 = s.doc(h[1].doc).get(\"id\");\n            String doc2 = s.doc(h[2].doc).get(\"id\");\n            String doc3 = s.doc(h[3].doc).get(\"id\");            \n\n            assertTrue(\"doc0 should be d2 or d4: \" + doc0,\n                       doc0.equals(\"d2\") || doc0.equals(\"d4\"));\n            assertTrue(\"doc1 should be d2 or d4: \" + doc0,\n                       doc1.equals(\"d2\") || doc1.equals(\"d4\"));\n            assertEquals(\"score0 and score1 should match\",\n                         score0, score1, SCORE_COMP_THRESH);\n            assertEquals(\"wrong third\", \"d3\", doc2);\n            assertTrue(\"d3 does not have worse score then d2 and d4: \" +\n                       score1 + \" >? \" + score2,\n                       score1 > score2);\n\n            assertEquals(\"wrong fourth\", \"d1\", doc3);\n            assertTrue(\"d1 does not have worse score then d3: \" +\n                       score2 + \" >? \" + score3,\n                       score2 > score3);\n\n        } catch (Error e) {\n            printHits(\"testBooleanOptionalWithTiebreaker\",h, s);\n            throw e;\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanOptionalWithTiebreaker().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanOptionalWithTiebreaker().mjava","sourceNew":"  public void testBooleanOptionalWithTiebreaker() throws Exception {\n    \n    BooleanQuery q = new BooleanQuery();\n    {\n      DisjunctionMaxQuery q1 = new DisjunctionMaxQuery(0.01f);\n      q1.add(tq(\"hed\", \"albino\"));\n      q1.add(tq(\"dek\", \"albino\"));\n      q.add(q1, BooleanClause.Occur.SHOULD);// false,false);\n    }\n    {\n      DisjunctionMaxQuery q2 = new DisjunctionMaxQuery(0.01f);\n      q2.add(tq(\"hed\", \"elephant\"));\n      q2.add(tq(\"dek\", \"elephant\"));\n      q.add(q2, BooleanClause.Occur.SHOULD);// false,false);\n    }\n    QueryUtils.check(q, s);\n    \n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    \n    try {\n      \n      assertEquals(\"4 docs should match \" + q.toString(), 4, h.length);\n      \n      float score0 = h[0].score;\n      float score1 = h[1].score;\n      float score2 = h[2].score;\n      float score3 = h[3].score;\n      \n      String doc0 = s.doc(h[0].doc).get(\"id\");\n      String doc1 = s.doc(h[1].doc).get(\"id\");\n      String doc2 = s.doc(h[2].doc).get(\"id\");\n      String doc3 = s.doc(h[3].doc).get(\"id\");\n      \n      assertTrue(\"doc0 should be d2 or d4: \" + doc0, doc0.equals(\"d2\")\n          || doc0.equals(\"d4\"));\n      assertTrue(\"doc1 should be d2 or d4: \" + doc0, doc1.equals(\"d2\")\n          || doc1.equals(\"d4\"));\n      assertEquals(\"score0 and score1 should match\", score0, score1,\n          SCORE_COMP_THRESH);\n      assertEquals(\"wrong third\", \"d3\", doc2);\n      assertTrue(\"d3 does not have worse score then d2 and d4: \" + score1\n          + \" >? \" + score2, score1 > score2);\n      \n      assertEquals(\"wrong fourth\", \"d1\", doc3);\n      assertTrue(\"d1 does not have worse score then d3: \" + score2 + \" >? \"\n          + score3, score2 > score3);\n      \n    } catch (Error e) {\n      printHits(\"testBooleanOptionalWithTiebreaker\", h, s);\n      throw e;\n    }\n    \n  }\n\n","sourceOld":"    public void testBooleanOptionalWithTiebreaker() throws Exception {\n\n        BooleanQuery q = new BooleanQuery();\n        {\n            DisjunctionMaxQuery q1 = new DisjunctionMaxQuery(0.01f);\n            q1.add(tq(\"hed\",\"albino\"));\n            q1.add(tq(\"dek\",\"albino\"));\n            q.add(q1, BooleanClause.Occur.SHOULD);//false,false);\n        }\n        {\n            DisjunctionMaxQuery q2 = new DisjunctionMaxQuery(0.01f);\n            q2.add(tq(\"hed\",\"elephant\"));\n            q2.add(tq(\"dek\",\"elephant\"));\n            q.add(q2, BooleanClause.Occur.SHOULD);//false,false);\n        }\n        QueryUtils.check(q,s);\n\n\n        ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n\n        try {\n\n            assertEquals(\"4 docs should match \" + q.toString(),\n                         4, h.length);\n\n            float score0 = h[0].score;\n            float score1 = h[1].score;\n            float score2 = h[2].score;\n            float score3 = h[3].score;\n\n            String doc0 = s.doc(h[0].doc).get(\"id\");\n            String doc1 = s.doc(h[1].doc).get(\"id\");\n            String doc2 = s.doc(h[2].doc).get(\"id\");\n            String doc3 = s.doc(h[3].doc).get(\"id\");            \n\n            assertTrue(\"doc0 should be d2 or d4: \" + doc0,\n                       doc0.equals(\"d2\") || doc0.equals(\"d4\"));\n            assertTrue(\"doc1 should be d2 or d4: \" + doc0,\n                       doc1.equals(\"d2\") || doc1.equals(\"d4\"));\n            assertEquals(\"score0 and score1 should match\",\n                         score0, score1, SCORE_COMP_THRESH);\n            assertEquals(\"wrong third\", \"d3\", doc2);\n            assertTrue(\"d3 does not have worse score then d2 and d4: \" +\n                       score1 + \" >? \" + score2,\n                       score1 > score2);\n\n            assertEquals(\"wrong fourth\", \"d1\", doc3);\n            assertTrue(\"d1 does not have worse score then d3: \" +\n                       score2 + \" >? \" + score3,\n                       score2 > score3);\n\n        } catch (Error e) {\n            printHits(\"testBooleanOptionalWithTiebreaker\",h, s);\n            throw e;\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanOptionalWithTiebreaker().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanOptionalWithTiebreaker().mjava","sourceNew":"  public void testBooleanOptionalWithTiebreaker() throws Exception {\n    \n    BooleanQuery q = new BooleanQuery();\n    {\n      DisjunctionMaxQuery q1 = new DisjunctionMaxQuery(0.01f);\n      q1.add(tq(\"hed\", \"albino\"));\n      q1.add(tq(\"dek\", \"albino\"));\n      q.add(q1, BooleanClause.Occur.SHOULD);// false,false);\n    }\n    {\n      DisjunctionMaxQuery q2 = new DisjunctionMaxQuery(0.01f);\n      q2.add(tq(\"hed\", \"elephant\"));\n      q2.add(tq(\"dek\", \"elephant\"));\n      q.add(q2, BooleanClause.Occur.SHOULD);// false,false);\n    }\n    QueryUtils.check(q, s);\n    \n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    \n    try {\n      \n      assertEquals(\"4 docs should match \" + q.toString(), 4, h.length);\n      \n      float score0 = h[0].score;\n      float score1 = h[1].score;\n      float score2 = h[2].score;\n      float score3 = h[3].score;\n      \n      String doc0 = s.doc(h[0].doc).get(\"id\");\n      String doc1 = s.doc(h[1].doc).get(\"id\");\n      String doc2 = s.doc(h[2].doc).get(\"id\");\n      String doc3 = s.doc(h[3].doc).get(\"id\");\n      \n      assertTrue(\"doc0 should be d2 or d4: \" + doc0, doc0.equals(\"d2\")\n          || doc0.equals(\"d4\"));\n      assertTrue(\"doc1 should be d2 or d4: \" + doc0, doc1.equals(\"d2\")\n          || doc1.equals(\"d4\"));\n      assertEquals(\"score0 and score1 should match\", score0, score1,\n          SCORE_COMP_THRESH);\n      assertEquals(\"wrong third\", \"d3\", doc2);\n      assertTrue(\"d3 does not have worse score then d2 and d4: \" + score1\n          + \" >? \" + score2, score1 > score2);\n      \n      assertEquals(\"wrong fourth\", \"d1\", doc3);\n      assertTrue(\"d1 does not have worse score then d3: \" + score2 + \" >? \"\n          + score3, score2 > score3);\n      \n    } catch (Error e) {\n      printHits(\"testBooleanOptionalWithTiebreaker\", h, s);\n      throw e;\n    }\n    \n  }\n\n","sourceOld":"    public void testBooleanOptionalWithTiebreaker() throws Exception {\n\n        BooleanQuery q = new BooleanQuery();\n        {\n            DisjunctionMaxQuery q1 = new DisjunctionMaxQuery(0.01f);\n            q1.add(tq(\"hed\",\"albino\"));\n            q1.add(tq(\"dek\",\"albino\"));\n            q.add(q1, BooleanClause.Occur.SHOULD);//false,false);\n        }\n        {\n            DisjunctionMaxQuery q2 = new DisjunctionMaxQuery(0.01f);\n            q2.add(tq(\"hed\",\"elephant\"));\n            q2.add(tq(\"dek\",\"elephant\"));\n            q.add(q2, BooleanClause.Occur.SHOULD);//false,false);\n        }\n        QueryUtils.check(q,s);\n\n\n        ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n\n        try {\n\n            assertEquals(\"4 docs should match \" + q.toString(),\n                         4, h.length);\n\n            float score0 = h[0].score;\n            float score1 = h[1].score;\n            float score2 = h[2].score;\n            float score3 = h[3].score;\n\n            String doc0 = s.doc(h[0].doc).get(\"id\");\n            String doc1 = s.doc(h[1].doc).get(\"id\");\n            String doc2 = s.doc(h[2].doc).get(\"id\");\n            String doc3 = s.doc(h[3].doc).get(\"id\");            \n\n            assertTrue(\"doc0 should be d2 or d4: \" + doc0,\n                       doc0.equals(\"d2\") || doc0.equals(\"d4\"));\n            assertTrue(\"doc1 should be d2 or d4: \" + doc0,\n                       doc1.equals(\"d2\") || doc1.equals(\"d4\"));\n            assertEquals(\"score0 and score1 should match\",\n                         score0, score1, SCORE_COMP_THRESH);\n            assertEquals(\"wrong third\", \"d3\", doc2);\n            assertTrue(\"d3 does not have worse score then d2 and d4: \" +\n                       score1 + \" >? \" + score2,\n                       score1 > score2);\n\n            assertEquals(\"wrong fourth\", \"d1\", doc3);\n            assertTrue(\"d1 does not have worse score then d3: \" +\n                       score2 + \" >? \" + score3,\n                       score2 > score3);\n\n        } catch (Error e) {\n            printHits(\"testBooleanOptionalWithTiebreaker\",h, s);\n            throw e;\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53a31399f2471493d67b19a95c028a74e0113b6a","date":1289817072,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanOptionalWithTiebreaker().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanOptionalWithTiebreaker().mjava","sourceNew":"  public void testBooleanOptionalWithTiebreaker() throws Exception {\n    \n    BooleanQuery q = new BooleanQuery();\n    {\n      DisjunctionMaxQuery q1 = new DisjunctionMaxQuery(0.01f);\n      q1.add(tq(\"hed\", \"albino\"));\n      q1.add(tq(\"dek\", \"albino\"));\n      q.add(q1, BooleanClause.Occur.SHOULD);// false,false);\n    }\n    {\n      DisjunctionMaxQuery q2 = new DisjunctionMaxQuery(0.01f);\n      q2.add(tq(\"hed\", \"elephant\"));\n      q2.add(tq(\"dek\", \"elephant\"));\n      q.add(q2, BooleanClause.Occur.SHOULD);// false,false);\n    }\n    QueryUtils.check(random, q, s);\n    \n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    \n    try {\n      \n      assertEquals(\"4 docs should match \" + q.toString(), 4, h.length);\n      \n      float score0 = h[0].score;\n      float score1 = h[1].score;\n      float score2 = h[2].score;\n      float score3 = h[3].score;\n      \n      String doc0 = s.doc(h[0].doc).get(\"id\");\n      String doc1 = s.doc(h[1].doc).get(\"id\");\n      String doc2 = s.doc(h[2].doc).get(\"id\");\n      String doc3 = s.doc(h[3].doc).get(\"id\");\n      \n      assertTrue(\"doc0 should be d2 or d4: \" + doc0, doc0.equals(\"d2\")\n          || doc0.equals(\"d4\"));\n      assertTrue(\"doc1 should be d2 or d4: \" + doc0, doc1.equals(\"d2\")\n          || doc1.equals(\"d4\"));\n      assertEquals(\"score0 and score1 should match\", score0, score1,\n          SCORE_COMP_THRESH);\n      assertEquals(\"wrong third\", \"d3\", doc2);\n      assertTrue(\"d3 does not have worse score then d2 and d4: \" + score1\n          + \" >? \" + score2, score1 > score2);\n      \n      assertEquals(\"wrong fourth\", \"d1\", doc3);\n      assertTrue(\"d1 does not have worse score then d3: \" + score2 + \" >? \"\n          + score3, score2 > score3);\n      \n    } catch (Error e) {\n      printHits(\"testBooleanOptionalWithTiebreaker\", h, s);\n      throw e;\n    }\n    \n  }\n\n","sourceOld":"  public void testBooleanOptionalWithTiebreaker() throws Exception {\n    \n    BooleanQuery q = new BooleanQuery();\n    {\n      DisjunctionMaxQuery q1 = new DisjunctionMaxQuery(0.01f);\n      q1.add(tq(\"hed\", \"albino\"));\n      q1.add(tq(\"dek\", \"albino\"));\n      q.add(q1, BooleanClause.Occur.SHOULD);// false,false);\n    }\n    {\n      DisjunctionMaxQuery q2 = new DisjunctionMaxQuery(0.01f);\n      q2.add(tq(\"hed\", \"elephant\"));\n      q2.add(tq(\"dek\", \"elephant\"));\n      q.add(q2, BooleanClause.Occur.SHOULD);// false,false);\n    }\n    QueryUtils.check(q, s);\n    \n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    \n    try {\n      \n      assertEquals(\"4 docs should match \" + q.toString(), 4, h.length);\n      \n      float score0 = h[0].score;\n      float score1 = h[1].score;\n      float score2 = h[2].score;\n      float score3 = h[3].score;\n      \n      String doc0 = s.doc(h[0].doc).get(\"id\");\n      String doc1 = s.doc(h[1].doc).get(\"id\");\n      String doc2 = s.doc(h[2].doc).get(\"id\");\n      String doc3 = s.doc(h[3].doc).get(\"id\");\n      \n      assertTrue(\"doc0 should be d2 or d4: \" + doc0, doc0.equals(\"d2\")\n          || doc0.equals(\"d4\"));\n      assertTrue(\"doc1 should be d2 or d4: \" + doc0, doc1.equals(\"d2\")\n          || doc1.equals(\"d4\"));\n      assertEquals(\"score0 and score1 should match\", score0, score1,\n          SCORE_COMP_THRESH);\n      assertEquals(\"wrong third\", \"d3\", doc2);\n      assertTrue(\"d3 does not have worse score then d2 and d4: \" + score1\n          + \" >? \" + score2, score1 > score2);\n      \n      assertEquals(\"wrong fourth\", \"d1\", doc3);\n      assertTrue(\"d1 does not have worse score then d3: \" + score2 + \" >? \"\n          + score3, score2 > score3);\n      \n    } catch (Error e) {\n      printHits(\"testBooleanOptionalWithTiebreaker\", h, s);\n      throw e;\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanOptionalWithTiebreaker().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanOptionalWithTiebreaker().mjava","sourceNew":"  public void testBooleanOptionalWithTiebreaker() throws Exception {\n    \n    BooleanQuery q = new BooleanQuery();\n    {\n      DisjunctionMaxQuery q1 = new DisjunctionMaxQuery(0.01f);\n      q1.add(tq(\"hed\", \"albino\"));\n      q1.add(tq(\"dek\", \"albino\"));\n      q.add(q1, BooleanClause.Occur.SHOULD);// false,false);\n    }\n    {\n      DisjunctionMaxQuery q2 = new DisjunctionMaxQuery(0.01f);\n      q2.add(tq(\"hed\", \"elephant\"));\n      q2.add(tq(\"dek\", \"elephant\"));\n      q.add(q2, BooleanClause.Occur.SHOULD);// false,false);\n    }\n    QueryUtils.check(random, q, s);\n    \n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    \n    try {\n      \n      assertEquals(\"4 docs should match \" + q.toString(), 4, h.length);\n      \n      float score0 = h[0].score;\n      float score1 = h[1].score;\n      float score2 = h[2].score;\n      float score3 = h[3].score;\n      \n      String doc0 = s.doc(h[0].doc).get(\"id\");\n      String doc1 = s.doc(h[1].doc).get(\"id\");\n      String doc2 = s.doc(h[2].doc).get(\"id\");\n      String doc3 = s.doc(h[3].doc).get(\"id\");\n      \n      assertTrue(\"doc0 should be d2 or d4: \" + doc0, doc0.equals(\"d2\")\n          || doc0.equals(\"d4\"));\n      assertTrue(\"doc1 should be d2 or d4: \" + doc0, doc1.equals(\"d2\")\n          || doc1.equals(\"d4\"));\n      assertEquals(\"score0 and score1 should match\", score0, score1,\n          SCORE_COMP_THRESH);\n      assertEquals(\"wrong third\", \"d3\", doc2);\n      assertTrue(\"d3 does not have worse score then d2 and d4: \" + score1\n          + \" >? \" + score2, score1 > score2);\n      \n      assertEquals(\"wrong fourth\", \"d1\", doc3);\n      assertTrue(\"d1 does not have worse score then d3: \" + score2 + \" >? \"\n          + score3, score2 > score3);\n      \n    } catch (Error e) {\n      printHits(\"testBooleanOptionalWithTiebreaker\", h, s);\n      throw e;\n    }\n    \n  }\n\n","sourceOld":"  public void testBooleanOptionalWithTiebreaker() throws Exception {\n    \n    BooleanQuery q = new BooleanQuery();\n    {\n      DisjunctionMaxQuery q1 = new DisjunctionMaxQuery(0.01f);\n      q1.add(tq(\"hed\", \"albino\"));\n      q1.add(tq(\"dek\", \"albino\"));\n      q.add(q1, BooleanClause.Occur.SHOULD);// false,false);\n    }\n    {\n      DisjunctionMaxQuery q2 = new DisjunctionMaxQuery(0.01f);\n      q2.add(tq(\"hed\", \"elephant\"));\n      q2.add(tq(\"dek\", \"elephant\"));\n      q.add(q2, BooleanClause.Occur.SHOULD);// false,false);\n    }\n    QueryUtils.check(q, s);\n    \n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    \n    try {\n      \n      assertEquals(\"4 docs should match \" + q.toString(), 4, h.length);\n      \n      float score0 = h[0].score;\n      float score1 = h[1].score;\n      float score2 = h[2].score;\n      float score3 = h[3].score;\n      \n      String doc0 = s.doc(h[0].doc).get(\"id\");\n      String doc1 = s.doc(h[1].doc).get(\"id\");\n      String doc2 = s.doc(h[2].doc).get(\"id\");\n      String doc3 = s.doc(h[3].doc).get(\"id\");\n      \n      assertTrue(\"doc0 should be d2 or d4: \" + doc0, doc0.equals(\"d2\")\n          || doc0.equals(\"d4\"));\n      assertTrue(\"doc1 should be d2 or d4: \" + doc0, doc1.equals(\"d2\")\n          || doc1.equals(\"d4\"));\n      assertEquals(\"score0 and score1 should match\", score0, score1,\n          SCORE_COMP_THRESH);\n      assertEquals(\"wrong third\", \"d3\", doc2);\n      assertTrue(\"d3 does not have worse score then d2 and d4: \" + score1\n          + \" >? \" + score2, score1 > score2);\n      \n      assertEquals(\"wrong fourth\", \"d1\", doc3);\n      assertTrue(\"d1 does not have worse score then d3: \" + score2 + \" >? \"\n          + score3, score2 > score3);\n      \n    } catch (Error e) {\n      printHits(\"testBooleanOptionalWithTiebreaker\", h, s);\n      throw e;\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanOptionalWithTiebreaker().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanOptionalWithTiebreaker().mjava","sourceNew":"  public void testBooleanOptionalWithTiebreaker() throws Exception {\n    \n    BooleanQuery q = new BooleanQuery();\n    {\n      DisjunctionMaxQuery q1 = new DisjunctionMaxQuery(0.01f);\n      q1.add(tq(\"hed\", \"albino\"));\n      q1.add(tq(\"dek\", \"albino\"));\n      q.add(q1, BooleanClause.Occur.SHOULD);// false,false);\n    }\n    {\n      DisjunctionMaxQuery q2 = new DisjunctionMaxQuery(0.01f);\n      q2.add(tq(\"hed\", \"elephant\"));\n      q2.add(tq(\"dek\", \"elephant\"));\n      q.add(q2, BooleanClause.Occur.SHOULD);// false,false);\n    }\n    QueryUtils.check(random, q, s);\n    \n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    \n    try {\n      \n      assertEquals(\"4 docs should match \" + q.toString(), 4, h.length);\n      \n      float score0 = h[0].score;\n      float score1 = h[1].score;\n      float score2 = h[2].score;\n      float score3 = h[3].score;\n      \n      String doc0 = s.doc(h[0].doc).get(\"id\");\n      String doc1 = s.doc(h[1].doc).get(\"id\");\n      String doc2 = s.doc(h[2].doc).get(\"id\");\n      String doc3 = s.doc(h[3].doc).get(\"id\");\n      \n      assertTrue(\"doc0 should be d2 or d4: \" + doc0, doc0.equals(\"d2\")\n          || doc0.equals(\"d4\"));\n      assertTrue(\"doc1 should be d2 or d4: \" + doc0, doc1.equals(\"d2\")\n          || doc1.equals(\"d4\"));\n      assertEquals(\"score0 and score1 should match\", score0, score1,\n          SCORE_COMP_THRESH);\n      assertEquals(\"wrong third\", \"d3\", doc2);\n      assertTrue(\"d3 does not have worse score then d2 and d4: \" + score1\n          + \" >? \" + score2, score1 > score2);\n      \n      assertEquals(\"wrong fourth\", \"d1\", doc3);\n      assertTrue(\"d1 does not have worse score then d3: \" + score2 + \" >? \"\n          + score3, score2 > score3);\n      \n    } catch (Error e) {\n      printHits(\"testBooleanOptionalWithTiebreaker\", h, s);\n      throw e;\n    }\n    \n  }\n\n","sourceOld":"  public void testBooleanOptionalWithTiebreaker() throws Exception {\n    \n    BooleanQuery q = new BooleanQuery();\n    {\n      DisjunctionMaxQuery q1 = new DisjunctionMaxQuery(0.01f);\n      q1.add(tq(\"hed\", \"albino\"));\n      q1.add(tq(\"dek\", \"albino\"));\n      q.add(q1, BooleanClause.Occur.SHOULD);// false,false);\n    }\n    {\n      DisjunctionMaxQuery q2 = new DisjunctionMaxQuery(0.01f);\n      q2.add(tq(\"hed\", \"elephant\"));\n      q2.add(tq(\"dek\", \"elephant\"));\n      q.add(q2, BooleanClause.Occur.SHOULD);// false,false);\n    }\n    QueryUtils.check(q, s);\n    \n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    \n    try {\n      \n      assertEquals(\"4 docs should match \" + q.toString(), 4, h.length);\n      \n      float score0 = h[0].score;\n      float score1 = h[1].score;\n      float score2 = h[2].score;\n      float score3 = h[3].score;\n      \n      String doc0 = s.doc(h[0].doc).get(\"id\");\n      String doc1 = s.doc(h[1].doc).get(\"id\");\n      String doc2 = s.doc(h[2].doc).get(\"id\");\n      String doc3 = s.doc(h[3].doc).get(\"id\");\n      \n      assertTrue(\"doc0 should be d2 or d4: \" + doc0, doc0.equals(\"d2\")\n          || doc0.equals(\"d4\"));\n      assertTrue(\"doc1 should be d2 or d4: \" + doc0, doc1.equals(\"d2\")\n          || doc1.equals(\"d4\"));\n      assertEquals(\"score0 and score1 should match\", score0, score1,\n          SCORE_COMP_THRESH);\n      assertEquals(\"wrong third\", \"d3\", doc2);\n      assertTrue(\"d3 does not have worse score then d2 and d4: \" + score1\n          + \" >? \" + score2, score1 > score2);\n      \n      assertEquals(\"wrong fourth\", \"d1\", doc3);\n      assertTrue(\"d1 does not have worse score then d3: \" + score2 + \" >? \"\n          + score3, score2 > score3);\n      \n    } catch (Error e) {\n      printHits(\"testBooleanOptionalWithTiebreaker\", h, s);\n      throw e;\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanOptionalWithTiebreaker().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanOptionalWithTiebreaker().mjava","sourceNew":"  public void testBooleanOptionalWithTiebreaker() throws Exception {\n    \n    BooleanQuery q = new BooleanQuery();\n    {\n      DisjunctionMaxQuery q1 = new DisjunctionMaxQuery(0.01f);\n      q1.add(tq(\"hed\", \"albino\"));\n      q1.add(tq(\"dek\", \"albino\"));\n      q.add(q1, BooleanClause.Occur.SHOULD);// false,false);\n    }\n    {\n      DisjunctionMaxQuery q2 = new DisjunctionMaxQuery(0.01f);\n      q2.add(tq(\"hed\", \"elephant\"));\n      q2.add(tq(\"dek\", \"elephant\"));\n      q.add(q2, BooleanClause.Occur.SHOULD);// false,false);\n    }\n    QueryUtils.check(random, q, s);\n    \n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    \n    try {\n      \n      assertEquals(\"4 docs should match \" + q.toString(), 4, h.length);\n      \n      float score0 = h[0].score;\n      float score1 = h[1].score;\n      float score2 = h[2].score;\n      float score3 = h[3].score;\n      \n      String doc0 = s.doc(h[0].doc).get(\"id\");\n      String doc1 = s.doc(h[1].doc).get(\"id\");\n      String doc2 = s.doc(h[2].doc).get(\"id\");\n      String doc3 = s.doc(h[3].doc).get(\"id\");\n      \n      assertTrue(\"doc0 should be d2 or d4: \" + doc0, doc0.equals(\"d2\")\n          || doc0.equals(\"d4\"));\n      assertTrue(\"doc1 should be d2 or d4: \" + doc0, doc1.equals(\"d2\")\n          || doc1.equals(\"d4\"));\n      assertEquals(\"score0 and score1 should match\", score0, score1,\n          SCORE_COMP_THRESH);\n      assertEquals(\"wrong third\", \"d3\", doc2);\n      assertTrue(\"d3 does not have worse score then d2 and d4: \" + score1\n          + \" >? \" + score2, score1 > score2);\n      \n      assertEquals(\"wrong fourth\", \"d1\", doc3);\n      assertTrue(\"d1 does not have worse score then d3: \" + score2 + \" >? \"\n          + score3, score2 > score3);\n      \n    } catch (Error e) {\n      printHits(\"testBooleanOptionalWithTiebreaker\", h, s);\n      throw e;\n    }\n    \n  }\n\n","sourceOld":"  public void testBooleanOptionalWithTiebreaker() throws Exception {\n    \n    BooleanQuery q = new BooleanQuery();\n    {\n      DisjunctionMaxQuery q1 = new DisjunctionMaxQuery(0.01f);\n      q1.add(tq(\"hed\", \"albino\"));\n      q1.add(tq(\"dek\", \"albino\"));\n      q.add(q1, BooleanClause.Occur.SHOULD);// false,false);\n    }\n    {\n      DisjunctionMaxQuery q2 = new DisjunctionMaxQuery(0.01f);\n      q2.add(tq(\"hed\", \"elephant\"));\n      q2.add(tq(\"dek\", \"elephant\"));\n      q.add(q2, BooleanClause.Occur.SHOULD);// false,false);\n    }\n    QueryUtils.check(random, q, s);\n    \n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    \n    try {\n      \n      assertEquals(\"4 docs should match \" + q.toString(), 4, h.length);\n      \n      float score0 = h[0].score;\n      float score1 = h[1].score;\n      float score2 = h[2].score;\n      float score3 = h[3].score;\n      \n      String doc0 = s.doc(h[0].doc).get(\"id\");\n      String doc1 = s.doc(h[1].doc).get(\"id\");\n      String doc2 = s.doc(h[2].doc).get(\"id\");\n      String doc3 = s.doc(h[3].doc).get(\"id\");\n      \n      assertTrue(\"doc0 should be d2 or d4: \" + doc0, doc0.equals(\"d2\")\n          || doc0.equals(\"d4\"));\n      assertTrue(\"doc1 should be d2 or d4: \" + doc0, doc1.equals(\"d2\")\n          || doc1.equals(\"d4\"));\n      assertEquals(\"score0 and score1 should match\", score0, score1,\n          SCORE_COMP_THRESH);\n      assertEquals(\"wrong third\", \"d3\", doc2);\n      assertTrue(\"d3 does not have worse score then d2 and d4: \" + score1\n          + \" >? \" + score2, score1 > score2);\n      \n      assertEquals(\"wrong fourth\", \"d1\", doc3);\n      assertTrue(\"d1 does not have worse score then d3: \" + score2 + \" >? \"\n          + score3, score2 > score3);\n      \n    } catch (Error e) {\n      printHits(\"testBooleanOptionalWithTiebreaker\", h, s);\n      throw e;\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c084e47df29de3330311d69dabf515ceaa989512":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"53a31399f2471493d67b19a95c028a74e0113b6a":["c084e47df29de3330311d69dabf515ceaa989512"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["c084e47df29de3330311d69dabf515ceaa989512","53a31399f2471493d67b19a95c028a74e0113b6a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["53a31399f2471493d67b19a95c028a74e0113b6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","c084e47df29de3330311d69dabf515ceaa989512"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","53a31399f2471493d67b19a95c028a74e0113b6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c084e47df29de3330311d69dabf515ceaa989512":["53a31399f2471493d67b19a95c028a74e0113b6a","9ab1f5591dc05f1f2b5407d809c9699f75554a32","5f4e87790277826a2aea119328600dfb07761f32"],"53a31399f2471493d67b19a95c028a74e0113b6a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c084e47df29de3330311d69dabf515ceaa989512","5f4e87790277826a2aea119328600dfb07761f32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}