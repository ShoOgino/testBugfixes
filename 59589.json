{"path":"solr/core/src/java/org/apache/solr/update/processor/MaxFieldValueUpdateProcessorFactory#pickSubset(Collection).mjava","commits":[{"id":"0fe315da7da741707dc353df10d90080d24f19c5","date":1328822447,"type":1,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/MaxFieldValueUpdateProcessorFactory#pickSubset(Collection).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/MaxFieldValueUpdateProcessorFactory#pickSubset(Collection[Object]).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Collection pickSubset(Collection values) {\n    Collection result = values;\n    try {\n      result = Collections.singletonList\n        (Collections.max((Collection)values));\n    } catch (ClassCastException e) {\n      /* NOOP */\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Collection<Object> pickSubset(Collection<Object> values) {\n    Collection<Object> result = values;\n    try {\n      result = Collections.singletonList\n        (Collections.max((Collection)values));\n    } catch (ClassCastException e) {\n      /* NOOP */\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97011c9e96db3532a253bad154535c9d0f8c1006","date":1328834634,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/MaxFieldValueUpdateProcessorFactory#pickSubset(Collection).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/MaxFieldValueUpdateProcessorFactory#pickSubset(Collection).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Collection pickSubset(Collection values) {\n    Collection result = values;\n    try {\n      result = Collections.singletonList\n        (Collections.max((Collection)values));\n    } catch (ClassCastException e) {\n      throw new SolrException\n        (BAD_REQUEST, \n         \"Field values are not mutually comparable: \" + e.getMessage(), e);\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Collection pickSubset(Collection values) {\n    Collection result = values;\n    try {\n      result = Collections.singletonList\n        (Collections.max((Collection)values));\n    } catch (ClassCastException e) {\n      /* NOOP */\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"399d5903979ca52514d2bc7e3a362e1c45885c94","date":1333042474,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/MaxFieldValueUpdateProcessorFactory#pickSubset(Collection).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/MaxFieldValueUpdateProcessorFactory#pickSubset(Collection).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Collection pickSubset(Collection values) {\n    Collection result = values;\n    try {\n      result = Collections.singletonList\n        (Collections.max(values));\n    } catch (ClassCastException e) {\n      throw new SolrException\n        (BAD_REQUEST, \n         \"Field values are not mutually comparable: \" + e.getMessage(), e);\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Collection pickSubset(Collection values) {\n    Collection result = values;\n    try {\n      result = Collections.singletonList\n        (Collections.max((Collection)values));\n    } catch (ClassCastException e) {\n      throw new SolrException\n        (BAD_REQUEST, \n         \"Field values are not mutually comparable: \" + e.getMessage(), e);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c1ca350a30f47355b5b27ad048195d462059727","date":1416523641,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/MaxFieldValueUpdateProcessorFactory#pickSubset(Collection).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/MaxFieldValueUpdateProcessorFactory#pickSubset(Collection).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Collection pickSubset(Collection values) {\n    Collection result = values;\n    try {\n      // NOTE: max must be put into a temp local in order to avoid ecj errors for javadoc lint\n      Object max = Collections.max(values);\n      result = Collections.singletonList(max);\n    } catch (ClassCastException e) {\n      throw new SolrException\n        (BAD_REQUEST, \n         \"Field values are not mutually comparable: \" + e.getMessage(), e);\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Collection pickSubset(Collection values) {\n    Collection result = values;\n    try {\n      result = Collections.singletonList\n        (Collections.max(values));\n    } catch (ClassCastException e) {\n      throw new SolrException\n        (BAD_REQUEST, \n         \"Field values are not mutually comparable: \" + e.getMessage(), e);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90294f61f1156e3708019cde37e7069bafc5151","date":1416530088,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/MaxFieldValueUpdateProcessorFactory#pickSubset(Collection).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/MaxFieldValueUpdateProcessorFactory#pickSubset(Collection).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Collection pickSubset(Collection values) {\n    Collection result = values;\n    try {\n      result = Collections.singletonList(Collections.max(values));\n    } catch (ClassCastException e) {\n      throw new SolrException\n        (BAD_REQUEST, \n         \"Field values are not mutually comparable: \" + e.getMessage(), e);\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Collection pickSubset(Collection values) {\n    Collection result = values;\n    try {\n      // NOTE: max must be put into a temp local in order to avoid ecj errors for javadoc lint\n      Object max = Collections.max(values);\n      result = Collections.singletonList(max);\n    } catch (ClassCastException e) {\n      throw new SolrException\n        (BAD_REQUEST, \n         \"Field values are not mutually comparable: \" + e.getMessage(), e);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e40d330ea7c711163302325e49a2c3d752cbcd4","date":1416557423,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/MaxFieldValueUpdateProcessorFactory#pickSubset(Collection).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/MaxFieldValueUpdateProcessorFactory#pickSubset(Collection).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Collection pickSubset(Collection values) {\n    Collection result = values;\n    try {\n      // NOTE: the extra cast to Object is needed to prevent compile\n      // errors on Eclipse Compiler (ecj) used for javadoc lint\n      result = Collections.singletonList((Object) Collections.max(values));\n    } catch (ClassCastException e) {\n      throw new SolrException\n        (BAD_REQUEST, \n         \"Field values are not mutually comparable: \" + e.getMessage(), e);\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Collection pickSubset(Collection values) {\n    Collection result = values;\n    try {\n      result = Collections.singletonList(Collections.max(values));\n    } catch (ClassCastException e) {\n      throw new SolrException\n        (BAD_REQUEST, \n         \"Field values are not mutually comparable: \" + e.getMessage(), e);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5ad8cb078811acf9ef38ece78171f1bfe5786de","date":1474538499,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/MaxFieldValueUpdateProcessorFactory#pickSubset(Collection).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/MaxFieldValueUpdateProcessorFactory#pickSubset(Collection).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Collection pickSubset(Collection values) {\n    Collection result = values;\n    try {\n      // NOTE: the extra cast to Object is needed to prevent compile\n      // errors on Eclipse Compiler (ecj) used for javadoc lint\n      result = Collections.singletonList(Collections.max(values));\n    } catch (ClassCastException e) {\n      throw new SolrException\n        (BAD_REQUEST, \n         \"Field values are not mutually comparable: \" + e.getMessage(), e);\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Collection pickSubset(Collection values) {\n    Collection result = values;\n    try {\n      // NOTE: the extra cast to Object is needed to prevent compile\n      // errors on Eclipse Compiler (ecj) used for javadoc lint\n      result = Collections.singletonList((Object) Collections.max(values));\n    } catch (ClassCastException e) {\n      throw new SolrException\n        (BAD_REQUEST, \n         \"Field values are not mutually comparable: \" + e.getMessage(), e);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b387c5af38364d13deae3568dedc5858e67eaf9b","date":1474542781,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/MaxFieldValueUpdateProcessorFactory#pickSubset(Collection).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/MaxFieldValueUpdateProcessorFactory#pickSubset(Collection).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Collection pickSubset(Collection values) {\n    Collection result = values;\n    try {\n      // NOTE: the extra cast to Object is needed to prevent compile\n      // errors on Eclipse Compiler (ecj) used for javadoc lint\n      result = Collections.singletonList((Object) Collections.max(values));\n    } catch (ClassCastException e) {\n      throw new SolrException\n        (BAD_REQUEST, \n         \"Field values are not mutually comparable: \" + e.getMessage(), e);\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Collection pickSubset(Collection values) {\n    Collection result = values;\n    try {\n      // NOTE: the extra cast to Object is needed to prevent compile\n      // errors on Eclipse Compiler (ecj) used for javadoc lint\n      result = Collections.singletonList(Collections.max(values));\n    } catch (ClassCastException e) {\n      throw new SolrException\n        (BAD_REQUEST, \n         \"Field values are not mutually comparable: \" + e.getMessage(), e);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"018a36ff4088cb91ab12cbe44f696d81d1fadd77","date":1591657414,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/MaxFieldValueUpdateProcessorFactory#pickSubset(Collection).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/MaxFieldValueUpdateProcessorFactory#pickSubset(Collection).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public Collection pickSubset(Collection values) {\n    Collection result = values;\n    try {\n      // NOTE: the extra cast to Object is needed to prevent compile\n      // errors on Eclipse Compiler (ecj) used for javadoc lint\n      result = Collections.singletonList((Object) Collections.max(values));\n    } catch (ClassCastException e) {\n      throw new SolrException\n        (BAD_REQUEST, \n         \"Field values are not mutually comparable: \" + e.getMessage(), e);\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Collection pickSubset(Collection values) {\n    Collection result = values;\n    try {\n      // NOTE: the extra cast to Object is needed to prevent compile\n      // errors on Eclipse Compiler (ecj) used for javadoc lint\n      result = Collections.singletonList((Object) Collections.max(values));\n    } catch (ClassCastException e) {\n      throw new SolrException\n        (BAD_REQUEST, \n         \"Field values are not mutually comparable: \" + e.getMessage(), e);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd25fa3647fa73152703b8dccb4fb5f43633de20","date":1592060458,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/MaxFieldValueUpdateProcessorFactory#pickSubset(Collection).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/MaxFieldValueUpdateProcessorFactory#pickSubset(Collection).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\"})\n  public Collection<Object> pickSubset(@SuppressWarnings({\"rawtypes\"})Collection values) {\n    @SuppressWarnings({\"rawtypes\"})\n    Collection result = values;\n    try {\n      // NOTE: the extra cast to Object is needed to prevent compile\n      // errors on Eclipse Compiler (ecj) used for javadoc lint\n      result = Collections.singletonList((Object) Collections.max(values));\n    } catch (ClassCastException e) {\n      throw new SolrException\n        (BAD_REQUEST, \n         \"Field values are not mutually comparable: \" + e.getMessage(), e);\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public Collection pickSubset(Collection values) {\n    Collection result = values;\n    try {\n      // NOTE: the extra cast to Object is needed to prevent compile\n      // errors on Eclipse Compiler (ecj) used for javadoc lint\n      result = Collections.singletonList((Object) Collections.max(values));\n    } catch (ClassCastException e) {\n      throw new SolrException\n        (BAD_REQUEST, \n         \"Field values are not mutually comparable: \" + e.getMessage(), e);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e40d330ea7c711163302325e49a2c3d752cbcd4":["d90294f61f1156e3708019cde37e7069bafc5151"],"2c1ca350a30f47355b5b27ad048195d462059727":["399d5903979ca52514d2bc7e3a362e1c45885c94"],"d90294f61f1156e3708019cde37e7069bafc5151":["2c1ca350a30f47355b5b27ad048195d462059727"],"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["1e40d330ea7c711163302325e49a2c3d752cbcd4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"97011c9e96db3532a253bad154535c9d0f8c1006":["0fe315da7da741707dc353df10d90080d24f19c5"],"399d5903979ca52514d2bc7e3a362e1c45885c94":["97011c9e96db3532a253bad154535c9d0f8c1006"],"0fe315da7da741707dc353df10d90080d24f19c5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b387c5af38364d13deae3568dedc5858e67eaf9b":["c5ad8cb078811acf9ef38ece78171f1bfe5786de"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["018a36ff4088cb91ab12cbe44f696d81d1fadd77"],"c5ad8cb078811acf9ef38ece78171f1bfe5786de":["1e40d330ea7c711163302325e49a2c3d752cbcd4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd25fa3647fa73152703b8dccb4fb5f43633de20"]},"commit2Childs":{"1e40d330ea7c711163302325e49a2c3d752cbcd4":["018a36ff4088cb91ab12cbe44f696d81d1fadd77","c5ad8cb078811acf9ef38ece78171f1bfe5786de"],"2c1ca350a30f47355b5b27ad048195d462059727":["d90294f61f1156e3708019cde37e7069bafc5151"],"d90294f61f1156e3708019cde37e7069bafc5151":["1e40d330ea7c711163302325e49a2c3d752cbcd4"],"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0fe315da7da741707dc353df10d90080d24f19c5"],"97011c9e96db3532a253bad154535c9d0f8c1006":["399d5903979ca52514d2bc7e3a362e1c45885c94"],"399d5903979ca52514d2bc7e3a362e1c45885c94":["2c1ca350a30f47355b5b27ad048195d462059727"],"0fe315da7da741707dc353df10d90080d24f19c5":["97011c9e96db3532a253bad154535c9d0f8c1006"],"b387c5af38364d13deae3568dedc5858e67eaf9b":[],"c5ad8cb078811acf9ef38ece78171f1bfe5786de":["b387c5af38364d13deae3568dedc5858e67eaf9b"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b387c5af38364d13deae3568dedc5858e67eaf9b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}