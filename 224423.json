{"path":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleTemporaryFilesCleanup#getPerTestClassTempDir().mjava","commits":[{"id":"4a9c941a7004ea2e95b10aa67dafa319ff8d8c19","date":1400739326,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleTemporaryFilesCleanup#getPerTestClassTempDir().mjava","pathOld":"/dev/null","sourceNew":"  final File getPerTestClassTempDir() {\n    if (tempDirBase == null) {\n      RandomizedContext ctx = RandomizedContext.current();\n      Class<?> clazz = ctx.getTargetClass();\n      String prefix = clazz.getName();\n      prefix = prefix.replaceFirst(\"^org.apache.lucene.\", \"lucene.\");\n      prefix = prefix.replaceFirst(\"^org.apache.solr.\", \"solr.\");\n\n      int attempt = 0;\n      File f;\n      do {\n        if (attempt++ >= TEMP_NAME_RETRY_THRESHOLD) {\n          throw new RuntimeException(\n              \"Failed to get a temporary name too many times, check your temp directory and consider manually cleaning it: \"\n                + javaTempDir.getAbsolutePath());            \n        }\n        f = new File(javaTempDir, prefix + \"-\" + ctx.getRunnerSeedAsString() \n              + \"-\" + String.format(Locale.ENGLISH, \"%03d\", attempt));\n      } while (!f.mkdirs());\n\n      tempDirBase = f;\n      registerToRemoveAfterSuite(tempDirBase);\n    }\n    return tempDirBase;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleTemporaryFilesCleanup#getPerTestClassTempDir().mjava","pathOld":"/dev/null","sourceNew":"  final File getPerTestClassTempDir() {\n    if (tempDirBase == null) {\n      RandomizedContext ctx = RandomizedContext.current();\n      Class<?> clazz = ctx.getTargetClass();\n      String prefix = clazz.getName();\n      prefix = prefix.replaceFirst(\"^org.apache.lucene.\", \"lucene.\");\n      prefix = prefix.replaceFirst(\"^org.apache.solr.\", \"solr.\");\n\n      int attempt = 0;\n      File f;\n      do {\n        if (attempt++ >= TEMP_NAME_RETRY_THRESHOLD) {\n          throw new RuntimeException(\n              \"Failed to get a temporary name too many times, check your temp directory and consider manually cleaning it: \"\n                + javaTempDir.getAbsolutePath());            \n        }\n        f = new File(javaTempDir, prefix + \"-\" + ctx.getRunnerSeedAsString() \n              + \"-\" + String.format(Locale.ENGLISH, \"%03d\", attempt));\n      } while (!f.mkdirs());\n\n      tempDirBase = f;\n      registerToRemoveAfterSuite(tempDirBase);\n    }\n    return tempDirBase;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleTemporaryFilesCleanup#getPerTestClassTempDir().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleTemporaryFilesCleanup#getPerTestClassTempDir().mjava","sourceNew":"  final Path getPerTestClassTempDir() {\n    if (tempDirBase == null) {\n      RandomizedContext ctx = RandomizedContext.current();\n      Class<?> clazz = ctx.getTargetClass();\n      String prefix = clazz.getName();\n      prefix = prefix.replaceFirst(\"^org.apache.lucene.\", \"lucene.\");\n      prefix = prefix.replaceFirst(\"^org.apache.solr.\", \"solr.\");\n\n      int attempt = 0;\n      Path f;\n      boolean success = false;\n      do {\n        if (attempt++ >= TEMP_NAME_RETRY_THRESHOLD) {\n          throw new RuntimeException(\n              \"Failed to get a temporary name too many times, check your temp directory and consider manually cleaning it: \"\n                + javaTempDir.toAbsolutePath());            \n        }\n        f = javaTempDir.resolve(prefix + \"-\" + ctx.getRunnerSeedAsString() \n              + \"-\" + String.format(Locale.ENGLISH, \"%03d\", attempt));\n        try {\n          Files.createDirectory(f);\n          success = true;\n        } catch (IOException ignore) {}\n      } while (!success);\n\n      tempDirBase = f;\n      registerToRemoveAfterSuite(tempDirBase);\n    }\n    return tempDirBase;\n  }\n\n","sourceOld":"  final File getPerTestClassTempDir() {\n    if (tempDirBase == null) {\n      RandomizedContext ctx = RandomizedContext.current();\n      Class<?> clazz = ctx.getTargetClass();\n      String prefix = clazz.getName();\n      prefix = prefix.replaceFirst(\"^org.apache.lucene.\", \"lucene.\");\n      prefix = prefix.replaceFirst(\"^org.apache.solr.\", \"solr.\");\n\n      int attempt = 0;\n      File f;\n      do {\n        if (attempt++ >= TEMP_NAME_RETRY_THRESHOLD) {\n          throw new RuntimeException(\n              \"Failed to get a temporary name too many times, check your temp directory and consider manually cleaning it: \"\n                + javaTempDir.getAbsolutePath());            \n        }\n        f = new File(javaTempDir, prefix + \"-\" + ctx.getRunnerSeedAsString() \n              + \"-\" + String.format(Locale.ENGLISH, \"%03d\", attempt));\n      } while (!f.mkdirs());\n\n      tempDirBase = f;\n      registerToRemoveAfterSuite(tempDirBase);\n    }\n    return tempDirBase;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5aac8da64209f86d7f6a99097054063cffc5340","date":1420471895,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleTemporaryFilesCleanup#getPerTestClassTempDir().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleTemporaryFilesCleanup#getPerTestClassTempDir().mjava","sourceNew":"  final Path getPerTestClassTempDir() {\n    if (tempDirBase == null) {\n      RandomizedContext ctx = RandomizedContext.current();\n      Class<?> clazz = ctx.getTargetClass();\n      String prefix = clazz.getName();\n      prefix = prefix.replaceFirst(\"^org.apache.lucene.\", \"lucene.\");\n      prefix = prefix.replaceFirst(\"^org.apache.solr.\", \"solr.\");\n\n      int attempt = 0;\n      Path f;\n      boolean success = false;\n      do {\n        if (attempt++ >= TEMP_NAME_RETRY_THRESHOLD) {\n          throw new RuntimeException(\n              \"Failed to get a temporary name too many times, check your temp directory and consider manually cleaning it: \"\n                + javaTempDir.toAbsolutePath());            \n        }\n        f = javaTempDir.resolve(prefix + \" \" + ctx.getRunnerSeedAsString() \n              + \"-\" + String.format(Locale.ENGLISH, \"%03d\", attempt));\n        try {\n          Files.createDirectory(f);\n          success = true;\n        } catch (IOException ignore) {}\n      } while (!success);\n\n      tempDirBase = f;\n      registerToRemoveAfterSuite(tempDirBase);\n    }\n    return tempDirBase;\n  }\n\n","sourceOld":"  final Path getPerTestClassTempDir() {\n    if (tempDirBase == null) {\n      RandomizedContext ctx = RandomizedContext.current();\n      Class<?> clazz = ctx.getTargetClass();\n      String prefix = clazz.getName();\n      prefix = prefix.replaceFirst(\"^org.apache.lucene.\", \"lucene.\");\n      prefix = prefix.replaceFirst(\"^org.apache.solr.\", \"solr.\");\n\n      int attempt = 0;\n      Path f;\n      boolean success = false;\n      do {\n        if (attempt++ >= TEMP_NAME_RETRY_THRESHOLD) {\n          throw new RuntimeException(\n              \"Failed to get a temporary name too many times, check your temp directory and consider manually cleaning it: \"\n                + javaTempDir.toAbsolutePath());            \n        }\n        f = javaTempDir.resolve(prefix + \"-\" + ctx.getRunnerSeedAsString() \n              + \"-\" + String.format(Locale.ENGLISH, \"%03d\", attempt));\n        try {\n          Files.createDirectory(f);\n          success = true;\n        } catch (IOException ignore) {}\n      } while (!success);\n\n      tempDirBase = f;\n      registerToRemoveAfterSuite(tempDirBase);\n    }\n    return tempDirBase;\n  }\n\n","bugFix":null,"bugIntro":["da59c6d3748d1a2a9d1a58a69f70383622d68379"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"da59c6d3748d1a2a9d1a58a69f70383622d68379","date":1433873890,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleTemporaryFilesCleanup#getPerTestClassTempDir().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleTemporaryFilesCleanup#getPerTestClassTempDir().mjava","sourceNew":"  final Path getPerTestClassTempDir() {\n    if (tempDirBase == null) {\n      RandomizedContext ctx = RandomizedContext.current();\n      Class<?> clazz = ctx.getTargetClass();\n      String prefix = clazz.getName();\n      prefix = prefix.replaceFirst(\"^org.apache.lucene.\", \"lucene.\");\n      prefix = prefix.replaceFirst(\"^org.apache.solr.\", \"solr.\");\n\n      int attempt = 0;\n      Path f;\n      boolean success = false;\n      do {\n        if (attempt++ >= TEMP_NAME_RETRY_THRESHOLD) {\n          throw new RuntimeException(\n              \"Failed to get a temporary name too many times, check your temp directory and consider manually cleaning it: \"\n                + javaTempDir.toAbsolutePath());            \n        }\n        f = javaTempDir.resolve(prefix + \"_\" + ctx.getRunnerSeedAsString() \n              + \"-\" + String.format(Locale.ENGLISH, \"%03d\", attempt));\n        try {\n          Files.createDirectory(f);\n          success = true;\n        } catch (IOException ignore) {}\n      } while (!success);\n\n      tempDirBase = f;\n      registerToRemoveAfterSuite(tempDirBase);\n    }\n    return tempDirBase;\n  }\n\n","sourceOld":"  final Path getPerTestClassTempDir() {\n    if (tempDirBase == null) {\n      RandomizedContext ctx = RandomizedContext.current();\n      Class<?> clazz = ctx.getTargetClass();\n      String prefix = clazz.getName();\n      prefix = prefix.replaceFirst(\"^org.apache.lucene.\", \"lucene.\");\n      prefix = prefix.replaceFirst(\"^org.apache.solr.\", \"solr.\");\n\n      int attempt = 0;\n      Path f;\n      boolean success = false;\n      do {\n        if (attempt++ >= TEMP_NAME_RETRY_THRESHOLD) {\n          throw new RuntimeException(\n              \"Failed to get a temporary name too many times, check your temp directory and consider manually cleaning it: \"\n                + javaTempDir.toAbsolutePath());            \n        }\n        f = javaTempDir.resolve(prefix + \" \" + ctx.getRunnerSeedAsString() \n              + \"-\" + String.format(Locale.ENGLISH, \"%03d\", attempt));\n        try {\n          Files.createDirectory(f);\n          success = true;\n        } catch (IOException ignore) {}\n      } while (!success);\n\n      tempDirBase = f;\n      registerToRemoveAfterSuite(tempDirBase);\n    }\n    return tempDirBase;\n  }\n\n","bugFix":["e5aac8da64209f86d7f6a99097054063cffc5340"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleTemporaryFilesCleanup#getPerTestClassTempDir().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleTemporaryFilesCleanup#getPerTestClassTempDir().mjava","sourceNew":"  Path getPerTestClassTempDir() {\n    if (tempDirBase == null) {\n      RandomizedContext ctx = RandomizedContext.current();\n      Class<?> clazz = ctx.getTargetClass();\n      String prefix = clazz.getName();\n      prefix = prefix.replaceFirst(\"^org.apache.lucene.\", \"lucene.\");\n      prefix = prefix.replaceFirst(\"^org.apache.solr.\", \"solr.\");\n\n      int attempt = 0;\n      Path f;\n      boolean success = false;\n      do {\n        if (attempt++ >= TEMP_NAME_RETRY_THRESHOLD) {\n          throw new RuntimeException(\n              \"Failed to get a temporary name too many times, check your temp directory and consider manually cleaning it: \"\n                + javaTempDir.toAbsolutePath());            \n        }\n        f = javaTempDir.resolve(prefix + \"_\" + ctx.getRunnerSeedAsString() \n              + \"-\" + String.format(Locale.ENGLISH, \"%03d\", attempt));\n        try {\n          Files.createDirectory(f);\n          success = true;\n        } catch (IOException ignore) {}\n      } while (!success);\n\n      tempDirBase = f;\n      registerToRemoveAfterSuite(tempDirBase);\n    }\n    return tempDirBase;\n  }\n\n","sourceOld":"  final Path getPerTestClassTempDir() {\n    if (tempDirBase == null) {\n      RandomizedContext ctx = RandomizedContext.current();\n      Class<?> clazz = ctx.getTargetClass();\n      String prefix = clazz.getName();\n      prefix = prefix.replaceFirst(\"^org.apache.lucene.\", \"lucene.\");\n      prefix = prefix.replaceFirst(\"^org.apache.solr.\", \"solr.\");\n\n      int attempt = 0;\n      Path f;\n      boolean success = false;\n      do {\n        if (attempt++ >= TEMP_NAME_RETRY_THRESHOLD) {\n          throw new RuntimeException(\n              \"Failed to get a temporary name too many times, check your temp directory and consider manually cleaning it: \"\n                + javaTempDir.toAbsolutePath());            \n        }\n        f = javaTempDir.resolve(prefix + \"_\" + ctx.getRunnerSeedAsString() \n              + \"-\" + String.format(Locale.ENGLISH, \"%03d\", attempt));\n        try {\n          Files.createDirectory(f);\n          success = true;\n        } catch (IOException ignore) {}\n      } while (!success);\n\n      tempDirBase = f;\n      registerToRemoveAfterSuite(tempDirBase);\n    }\n    return tempDirBase;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da59c6d3748d1a2a9d1a58a69f70383622d68379":["e5aac8da64209f86d7f6a99097054063cffc5340"],"e5aac8da64209f86d7f6a99097054063cffc5340":["f4abec28b874149a7223e32cc7a01704c27790de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7605579001505896d48b07160075a5c8b8e128e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4a9c941a7004ea2e95b10aa67dafa319ff8d8c19"],"f4abec28b874149a7223e32cc7a01704c27790de":["4a9c941a7004ea2e95b10aa67dafa319ff8d8c19"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["da59c6d3748d1a2a9d1a58a69f70383622d68379"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"4a9c941a7004ea2e95b10aa67dafa319ff8d8c19":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"da59c6d3748d1a2a9d1a58a69f70383622d68379":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"e5aac8da64209f86d7f6a99097054063cffc5340":["da59c6d3748d1a2a9d1a58a69f70383622d68379"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b7605579001505896d48b07160075a5c8b8e128e","4a9c941a7004ea2e95b10aa67dafa319ff8d8c19"],"b7605579001505896d48b07160075a5c8b8e128e":[],"f4abec28b874149a7223e32cc7a01704c27790de":["e5aac8da64209f86d7f6a99097054063cffc5340"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4a9c941a7004ea2e95b10aa67dafa319ff8d8c19":["b7605579001505896d48b07160075a5c8b8e128e","f4abec28b874149a7223e32cc7a01704c27790de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}