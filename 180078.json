{"path":"solr/solrj/src/java/org/apache/solr/common/params/SolrParams#toSolrParams(NamedList).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/params/SolrParams#toSolrParams(NamedList).mjava","pathOld":"solr/src/common/org/apache/solr/common/params/SolrParams#toSolrParams(NamedList).mjava","sourceNew":"  /** Create SolrParams from NamedList. */\n  public static SolrParams toSolrParams(NamedList params) {\n    // if no keys are repeated use the faster MapSolrParams\n    HashMap<String,String> map = new HashMap<String,String>();\n    for (int i=0; i<params.size(); i++) {\n      String prev = map.put(params.getName(i), params.getVal(i).toString());\n      if (prev!=null) return new MultiMapSolrParams(toMultiMap(params));\n    }\n    return new MapSolrParams(map);\n  }\n\n","sourceOld":"  /** Create SolrParams from NamedList. */\n  public static SolrParams toSolrParams(NamedList params) {\n    // if no keys are repeated use the faster MapSolrParams\n    HashMap<String,String> map = new HashMap<String,String>();\n    for (int i=0; i<params.size(); i++) {\n      String prev = map.put(params.getName(i), params.getVal(i).toString());\n      if (prev!=null) return new MultiMapSolrParams(toMultiMap(params));\n    }\n    return new MapSolrParams(map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/params/SolrParams#toSolrParams(NamedList).mjava","pathOld":"solr/src/common/org/apache/solr/common/params/SolrParams#toSolrParams(NamedList).mjava","sourceNew":"  /** Create SolrParams from NamedList. */\n  public static SolrParams toSolrParams(NamedList params) {\n    // if no keys are repeated use the faster MapSolrParams\n    HashMap<String,String> map = new HashMap<String,String>();\n    for (int i=0; i<params.size(); i++) {\n      String prev = map.put(params.getName(i), params.getVal(i).toString());\n      if (prev!=null) return new MultiMapSolrParams(toMultiMap(params));\n    }\n    return new MapSolrParams(map);\n  }\n\n","sourceOld":"  /** Create SolrParams from NamedList. */\n  public static SolrParams toSolrParams(NamedList params) {\n    // if no keys are repeated use the faster MapSolrParams\n    HashMap<String,String> map = new HashMap<String,String>();\n    for (int i=0; i<params.size(); i++) {\n      String prev = map.put(params.getName(i), params.getVal(i).toString());\n      if (prev!=null) return new MultiMapSolrParams(toMultiMap(params));\n    }\n    return new MapSolrParams(map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/params/SolrParams#toSolrParams(NamedList).mjava","pathOld":"solr/src/common/org/apache/solr/common/params/SolrParams#toSolrParams(NamedList).mjava","sourceNew":"  /** Create SolrParams from NamedList. */\n  public static SolrParams toSolrParams(NamedList params) {\n    // if no keys are repeated use the faster MapSolrParams\n    HashMap<String,String> map = new HashMap<String,String>();\n    for (int i=0; i<params.size(); i++) {\n      String prev = map.put(params.getName(i), params.getVal(i).toString());\n      if (prev!=null) return new MultiMapSolrParams(toMultiMap(params));\n    }\n    return new MapSolrParams(map);\n  }\n\n","sourceOld":"  /** Create SolrParams from NamedList. */\n  public static SolrParams toSolrParams(NamedList params) {\n    // if no keys are repeated use the faster MapSolrParams\n    HashMap<String,String> map = new HashMap<String,String>();\n    for (int i=0; i<params.size(); i++) {\n      String prev = map.put(params.getName(i), params.getVal(i).toString());\n      if (prev!=null) return new MultiMapSolrParams(toMultiMap(params));\n    }\n    return new MapSolrParams(map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/params/SolrParams#toSolrParams(NamedList).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/params/SolrParams#toSolrParams(NamedList).mjava","sourceNew":"  /** Create SolrParams from NamedList. */\n  public static SolrParams toSolrParams(NamedList params) {\n    // if no keys are repeated use the faster MapSolrParams\n    HashMap<String,String> map = new HashMap<>();\n    for (int i=0; i<params.size(); i++) {\n      String prev = map.put(params.getName(i), params.getVal(i).toString());\n      if (prev!=null) return new MultiMapSolrParams(toMultiMap(params));\n    }\n    return new MapSolrParams(map);\n  }\n\n","sourceOld":"  /** Create SolrParams from NamedList. */\n  public static SolrParams toSolrParams(NamedList params) {\n    // if no keys are repeated use the faster MapSolrParams\n    HashMap<String,String> map = new HashMap<String,String>();\n    for (int i=0; i<params.size(); i++) {\n      String prev = map.put(params.getName(i), params.getVal(i).toString());\n      if (prev!=null) return new MultiMapSolrParams(toMultiMap(params));\n    }\n    return new MapSolrParams(map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","date":1426480823,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/params/SolrParams#toSolrParams(NamedList).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/params/SolrParams#toSolrParams(NamedList).mjava","sourceNew":"  /** Create SolrParams from NamedList. */\n  public static SolrParams toSolrParams(NamedList params) {\n    // always use MultiMap for easier processing further down the chain\n    return new MultiMapSolrParams(toMultiMap(params));\n  }\n\n","sourceOld":"  /** Create SolrParams from NamedList. */\n  public static SolrParams toSolrParams(NamedList params) {\n    // if no keys are repeated use the faster MapSolrParams\n    HashMap<String,String> map = new HashMap<>();\n    for (int i=0; i<params.size(); i++) {\n      String prev = map.put(params.getName(i), params.getVal(i).toString());\n      if (prev!=null) return new MultiMapSolrParams(toMultiMap(params));\n    }\n    return new MapSolrParams(map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/params/SolrParams#toSolrParams(NamedList).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/params/SolrParams#toSolrParams(NamedList).mjava","sourceNew":"  /** Create SolrParams from NamedList. */\n  public static SolrParams toSolrParams(NamedList params) {\n    // always use MultiMap for easier processing further down the chain\n    return new MultiMapSolrParams(toMultiMap(params));\n  }\n\n","sourceOld":"  /** Create SolrParams from NamedList. */\n  public static SolrParams toSolrParams(NamedList params) {\n    // if no keys are repeated use the faster MapSolrParams\n    HashMap<String,String> map = new HashMap<>();\n    for (int i=0; i<params.size(); i++) {\n      String prev = map.put(params.getName(i), params.getVal(i).toString());\n      if (prev!=null) return new MultiMapSolrParams(toMultiMap(params));\n    }\n    return new MapSolrParams(map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"129e5b874f99ae4e04f39c337c940dda690f2d38","date":1524504409,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/params/SolrParams#toSolrParams(NamedList).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/params/SolrParams#toSolrParams(NamedList).mjava","sourceNew":"  /**\n   * Create SolrParams from NamedList.\n   * @deprecated Use {@link NamedList#toSolrParams()}.\n   */\n  @Deprecated //move to NamedList to allow easier flow\n  public static SolrParams toSolrParams(NamedList params) {\n    return params.toSolrParams();\n  }\n\n","sourceOld":"  /** Create SolrParams from NamedList. */\n  public static SolrParams toSolrParams(NamedList params) {\n    // always use MultiMap for easier processing further down the chain\n    return new MultiMapSolrParams(toMultiMap(params));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76","date":1591450217,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/params/SolrParams#toSolrParams(NamedList).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/params/SolrParams#toSolrParams(NamedList).mjava","sourceNew":"  /**\n   * Create SolrParams from NamedList.\n   * @deprecated Use {@link NamedList#toSolrParams()}.\n   */\n  @Deprecated //move to NamedList to allow easier flow\n  public static SolrParams toSolrParams(@SuppressWarnings({\"rawtypes\"})NamedList params) {\n    return params.toSolrParams();\n  }\n\n","sourceOld":"  /**\n   * Create SolrParams from NamedList.\n   * @deprecated Use {@link NamedList#toSolrParams()}.\n   */\n  @Deprecated //move to NamedList to allow easier flow\n  public static SolrParams toSolrParams(NamedList params) {\n    return params.toSolrParams();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c26f00b574427b55127e869b935845554afde1fa"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76":["129e5b874f99ae4e04f39c337c940dda690f2d38"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"129e5b874f99ae4e04f39c337c940dda690f2d38":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"129e5b874f99ae4e04f39c337c940dda690f2d38":["8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","129e5b874f99ae4e04f39c337c940dda690f2d38"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}