{"path":"src/java/org/apache/lucene/search/function/CustomScoreQuery#customScore(int,float,float).mjava","commits":[{"id":"3f74570911bfdb9f7b01948745dcd67c69676c0e","date":1181060975,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/function/CustomScoreQuery#customScore(int,float,float).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Compute a custom score by the subQuery score and the ValueSourceQuery score.\n   * <p> \n   * Subclasses can override this method to modify the custom score.\n   * <p>\n   * The default computation herein is:\n   * <pre>\n   *     ModifiedScore = valSrcScore * subQueryScore.\n   * </pre>\n   * \n   * @param doc id of scored doc. \n   * @param subQueryScore score of that doc by the subQuery.\n   * @param valSrcScore score of that doc by the ValueSourceQuery.\n   * @return custom score.\n   */\n  public float customScore(int doc, float subQueryScore, float valSrcScore) {\n    return valSrcScore * subQueryScore;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["87778e49fc2a9683c4dc9217a451004dc7edf6da","87778e49fc2a9683c4dc9217a451004dc7edf6da","87778e49fc2a9683c4dc9217a451004dc7edf6da"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"89fe79450a321df64750e98df6442d2c4d30da52","date":1197527307,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/function/CustomScoreQuery#customScore(int,float,float).mjava","pathOld":"src/java/org/apache/lucene/search/function/CustomScoreQuery#customScore(int,float,float).mjava","sourceNew":"  /**\n   * Compute a custom score by the subQuery score and the ValueSourceQuery score.\n   * <p> \n   * Subclasses can override this method to modify the custom score.\n   * <p>\n   * If your custom scoring is different than the default herein you \n   * should override at least one of the two customScore() methods.\n   * If the number of ValueSourceQueries is always &lt; 2 it is \n   * sufficient to override this costomScore() method, which is simpler. \n   * <p>\n   * The default computation herein is:\n   * <pre>\n   *     ModifiedScore = valSrcScore * subQueryScore\n   * </pre>\n   * \n   * @param doc id of scored doc. \n   * @param subQueryScore score of that doc by the subQuery.\n   * @param valSrcScore score of that doc by the ValueSourceQuery.\n   * @return custom score.\n   */\n  public float customScore(int doc, float subQueryScore, float valSrcScore) {\n\t\treturn subQueryScore * valSrcScore;\n\t}\n\n","sourceOld":"  /**\n   * Compute a custom score by the subQuery score and the ValueSourceQuery score.\n   * <p> \n   * Subclasses can override this method to modify the custom score.\n   * <p>\n   * The default computation herein is:\n   * <pre>\n   *     ModifiedScore = valSrcScore * subQueryScore.\n   * </pre>\n   * \n   * @param doc id of scored doc. \n   * @param subQueryScore score of that doc by the subQuery.\n   * @param valSrcScore score of that doc by the ValueSourceQuery.\n   * @return custom score.\n   */\n  public float customScore(int doc, float subQueryScore, float valSrcScore) {\n    return valSrcScore * subQueryScore;\n  }\n\n","bugFix":null,"bugIntro":["87778e49fc2a9683c4dc9217a451004dc7edf6da","87778e49fc2a9683c4dc9217a451004dc7edf6da","87778e49fc2a9683c4dc9217a451004dc7edf6da"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dc9d6e5105d53eb1e16d7786185b78581f04adaf","date":1240588291,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/function/CustomScoreQuery#customScore(int,float,float).mjava","pathOld":"src/java/org/apache/lucene/search/function/CustomScoreQuery#customScore(int,float,float).mjava","sourceNew":"  /**\n   * Compute a custom score by the subQuery score and the ValueSourceQuery score.\n   * <p> \n   * Subclasses can override this method to modify the custom score.\n   * <p>\n   * If your custom scoring is different than the default herein you \n   * should override at least one of the two customScore() methods.\n   * If the number of ValueSourceQueries is always &lt; 2 it is \n   * sufficient to override this customScore() method, which is simpler. \n   * <p>\n   * The default computation herein is a multiplication of the two scores:\n   * <pre>\n   *     ModifiedScore = subQueryScore * valSrcScore\n   * </pre>\n   * \n   * @param doc id of scored doc. \n   * @param subQueryScore score of that doc by the subQuery.\n   * @param valSrcScore score of that doc by the ValueSourceQuery.\n   * @return custom score.\n   */\n  public float customScore(int doc, float subQueryScore, float valSrcScore) {\n    return subQueryScore * valSrcScore;\n  }\n\n","sourceOld":"  /**\n   * Compute a custom score by the subQuery score and the ValueSourceQuery score.\n   * <p> \n   * Subclasses can override this method to modify the custom score.\n   * <p>\n   * If your custom scoring is different than the default herein you \n   * should override at least one of the two customScore() methods.\n   * If the number of ValueSourceQueries is always &lt; 2 it is \n   * sufficient to override this costomScore() method, which is simpler. \n   * <p>\n   * The default computation herein is:\n   * <pre>\n   *     ModifiedScore = valSrcScore * subQueryScore\n   * </pre>\n   * \n   * @param doc id of scored doc. \n   * @param subQueryScore score of that doc by the subQuery.\n   * @param valSrcScore score of that doc by the ValueSourceQuery.\n   * @return custom score.\n   */\n  public float customScore(int doc, float subQueryScore, float valSrcScore) {\n\t\treturn subQueryScore * valSrcScore;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f5d8d97303550346f85fd577f90d64cf196cebd1","date":1262890343,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/function/CustomScoreQuery#customScore(int,float,float).mjava","pathOld":"src/java/org/apache/lucene/search/function/CustomScoreQuery#customScore(int,float,float).mjava","sourceNew":"  /**\n   * Compute a custom score by the subQuery score and the ValueSourceQuery score.\n   * <p> \n   * Subclasses can override this method to modify the custom score.\n   * <p>\n   * If your custom scoring is different than the default herein you \n   * should override at least one of the two customScore() methods.\n   * If the number of ValueSourceQueries is always &lt; 2 it is \n   * sufficient to override this customScore() method, which is simpler. \n   * <p>\n   * The default computation herein is a multiplication of the two scores:\n   * <pre>\n   *     ModifiedScore = subQueryScore * valSrcScore\n   * </pre>\n   *\n   * <p><b>NOTE</b>: The doc is relative to the current\n   * reader, last passed to {@link #setNextReader}.\n   * \n   * @param doc id of scored doc. \n   * @param subQueryScore score of that doc by the subQuery.\n   * @param valSrcScore score of that doc by the ValueSourceQuery.\n   * @return custom score.\n   */\n  public float customScore(int doc, float subQueryScore, float valSrcScore) {\n    return subQueryScore * valSrcScore;\n  }\n\n","sourceOld":"  /**\n   * Compute a custom score by the subQuery score and the ValueSourceQuery score.\n   * <p> \n   * Subclasses can override this method to modify the custom score.\n   * <p>\n   * If your custom scoring is different than the default herein you \n   * should override at least one of the two customScore() methods.\n   * If the number of ValueSourceQueries is always &lt; 2 it is \n   * sufficient to override this customScore() method, which is simpler. \n   * <p>\n   * The default computation herein is a multiplication of the two scores:\n   * <pre>\n   *     ModifiedScore = subQueryScore * valSrcScore\n   * </pre>\n   * \n   * @param doc id of scored doc. \n   * @param subQueryScore score of that doc by the subQuery.\n   * @param valSrcScore score of that doc by the ValueSourceQuery.\n   * @return custom score.\n   */\n  public float customScore(int doc, float subQueryScore, float valSrcScore) {\n    return subQueryScore * valSrcScore;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"affefdda19991b74568e601456baad0c8e5c2f65","date":1266776825,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/function/CustomScoreProvider#customScore(int,float,float).mjava","pathOld":"src/java/org/apache/lucene/search/function/CustomScoreQuery#customScore(int,float,float).mjava","sourceNew":"  /**\n   * Compute a custom score by the subQuery score and the ValueSourceQuery score.\n   * <p> \n   * Subclasses can override this method to modify the custom score.\n   * <p>\n   * If your custom scoring is different than the default herein you \n   * should override at least one of the two customScore() methods.\n   * If the number of ValueSourceQueries is always &lt; 2 it is \n   * sufficient to override this customScore() method, which is simpler. \n   * <p>\n   * The default computation herein is a multiplication of the two scores:\n   * <pre>\n   *     ModifiedScore = subQueryScore * valSrcScore\n   * </pre>\n   *\n   * @param doc id of scored doc. \n   * @param subQueryScore score of that doc by the subQuery.\n   * @param valSrcScore score of that doc by the ValueSourceQuery.\n   * @return custom score.\n   */\n  public float customScore(int doc, float subQueryScore, float valSrcScore) throws IOException {\n    return subQueryScore * valSrcScore;\n  }\n\n","sourceOld":"  /**\n   * Compute a custom score by the subQuery score and the ValueSourceQuery score.\n   * <p> \n   * Subclasses can override this method to modify the custom score.\n   * <p>\n   * If your custom scoring is different than the default herein you \n   * should override at least one of the two customScore() methods.\n   * If the number of ValueSourceQueries is always &lt; 2 it is \n   * sufficient to override this customScore() method, which is simpler. \n   * <p>\n   * The default computation herein is a multiplication of the two scores:\n   * <pre>\n   *     ModifiedScore = subQueryScore * valSrcScore\n   * </pre>\n   *\n   * <p><b>NOTE</b>: The doc is relative to the current\n   * reader, last passed to {@link #setNextReader}.\n   * \n   * @param doc id of scored doc. \n   * @param subQueryScore score of that doc by the subQuery.\n   * @param valSrcScore score of that doc by the ValueSourceQuery.\n   * @return custom score.\n   */\n  public float customScore(int doc, float subQueryScore, float valSrcScore) {\n    return subQueryScore * valSrcScore;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"dc9d6e5105d53eb1e16d7786185b78581f04adaf":["89fe79450a321df64750e98df6442d2c4d30da52"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3f74570911bfdb9f7b01948745dcd67c69676c0e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"affefdda19991b74568e601456baad0c8e5c2f65":["f5d8d97303550346f85fd577f90d64cf196cebd1"],"89fe79450a321df64750e98df6442d2c4d30da52":["3f74570911bfdb9f7b01948745dcd67c69676c0e"],"f5d8d97303550346f85fd577f90d64cf196cebd1":["dc9d6e5105d53eb1e16d7786185b78581f04adaf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["affefdda19991b74568e601456baad0c8e5c2f65"]},"commit2Childs":{"dc9d6e5105d53eb1e16d7786185b78581f04adaf":["f5d8d97303550346f85fd577f90d64cf196cebd1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f74570911bfdb9f7b01948745dcd67c69676c0e"],"3f74570911bfdb9f7b01948745dcd67c69676c0e":["89fe79450a321df64750e98df6442d2c4d30da52"],"89fe79450a321df64750e98df6442d2c4d30da52":["dc9d6e5105d53eb1e16d7786185b78581f04adaf"],"affefdda19991b74568e601456baad0c8e5c2f65":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f5d8d97303550346f85fd577f90d64cf196cebd1":["affefdda19991b74568e601456baad0c8e5c2f65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}