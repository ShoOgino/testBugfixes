{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/simple/SimpleQueryParser#buildQueryTree(State,Query).mjava","commits":[{"id":"fdc91c6aee685b616507b9e44fcc69315b8a9e6c","date":1384275771,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/simple/SimpleQueryParser#buildQueryTree(State,Query).mjava","pathOld":"/dev/null","sourceNew":"  // buildQueryTree should be called after a term, phrase, or subquery\n  // is consumed to be added to our existing query tree\n  // this method will only add to the existing tree if the branch contained in state is not null\n  private void buildQueryTree(State state, Query branch) {\n    if (branch != null) {\n      // modify our branch to a BooleanQuery wrapper for not\n      // this is necessary any time a term, phrase, or subquery is negated\n      if (state.not % 2 == 1) {\n        BooleanQuery nq = new BooleanQuery();\n        nq.add(branch, BooleanClause.Occur.MUST_NOT);\n        nq.add(new MatchAllDocsQuery(), BooleanClause.Occur.SHOULD);\n        branch = nq;\n      }\n\n      // first term (or phrase or subquery) found and will begin our query tree\n      if (state.top == null) {\n        state.top = branch;\n      } else {\n        // more than one term (or phrase or subquery) found\n        // set currentOperation to the default if no other operation is explicitly set\n        if (state.currentOperation == null) {\n          state.currentOperation = defaultOperator;\n        }\n\n        // operational change requiring a new parent node\n        // this occurs if the previous operation is not the same as current operation\n        // because the previous operation must be evaluated separately to preserve\n        // the proper precedence and the current operation will take over as the top of the tree\n        if (state.previousOperation != state.currentOperation) {\n          BooleanQuery bq = new BooleanQuery();\n          bq.add(state.top, state.currentOperation);\n          state.top = bq;\n        }\n\n        // reset all of the state for reuse\n        ((BooleanQuery)state.top).add(branch, state.currentOperation);\n        state.previousOperation = state.currentOperation;\n      }\n\n      // reset the current operation as it was intended to be applied to\n      // the incoming term (or phrase or subquery) even if branch was null\n      // due to other possible errors\n      state.currentOperation = null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/simple/SimpleQueryParser#buildQueryTree(State,Query).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/simple/SimpleQueryParser#buildQueryTree(State,Query).mjava","sourceNew":"  // buildQueryTree should be called after a term, phrase, or subquery\n  // is consumed to be added to our existing query tree\n  // this method will only add to the existing tree if the branch contained in state is not null\n  private void buildQueryTree(State state, Query branch) {\n    if (branch != null) {\n      // modify our branch to a BooleanQuery wrapper for not\n      // this is necessary any time a term, phrase, or subquery is negated\n      if (state.not % 2 == 1) {\n        BooleanQuery.Builder nq = new BooleanQuery.Builder();\n        nq.add(branch, BooleanClause.Occur.MUST_NOT);\n        nq.add(new MatchAllDocsQuery(), BooleanClause.Occur.SHOULD);\n        branch = nq.build();\n      }\n\n      // first term (or phrase or subquery) found and will begin our query tree\n      if (state.top == null) {\n        state.top = branch;\n      } else {\n        // more than one term (or phrase or subquery) found\n        // set currentOperation to the default if no other operation is explicitly set\n        if (state.currentOperation == null) {\n          state.currentOperation = defaultOperator;\n        }\n\n        // operational change requiring a new parent node\n        // this occurs if the previous operation is not the same as current operation\n        // because the previous operation must be evaluated separately to preserve\n        // the proper precedence and the current operation will take over as the top of the tree\n        if (state.previousOperation != state.currentOperation) {\n          BooleanQuery.Builder bq = new BooleanQuery.Builder();\n          bq.add(state.top, state.currentOperation);\n          state.top = bq.build();\n        }\n\n        // reset all of the state for reuse\n        state.top = addClause((BooleanQuery) state.top, branch, state.currentOperation);\n        state.previousOperation = state.currentOperation;\n      }\n\n      // reset the current operation as it was intended to be applied to\n      // the incoming term (or phrase or subquery) even if branch was null\n      // due to other possible errors\n      state.currentOperation = null;\n    }\n  }\n\n","sourceOld":"  // buildQueryTree should be called after a term, phrase, or subquery\n  // is consumed to be added to our existing query tree\n  // this method will only add to the existing tree if the branch contained in state is not null\n  private void buildQueryTree(State state, Query branch) {\n    if (branch != null) {\n      // modify our branch to a BooleanQuery wrapper for not\n      // this is necessary any time a term, phrase, or subquery is negated\n      if (state.not % 2 == 1) {\n        BooleanQuery nq = new BooleanQuery();\n        nq.add(branch, BooleanClause.Occur.MUST_NOT);\n        nq.add(new MatchAllDocsQuery(), BooleanClause.Occur.SHOULD);\n        branch = nq;\n      }\n\n      // first term (or phrase or subquery) found and will begin our query tree\n      if (state.top == null) {\n        state.top = branch;\n      } else {\n        // more than one term (or phrase or subquery) found\n        // set currentOperation to the default if no other operation is explicitly set\n        if (state.currentOperation == null) {\n          state.currentOperation = defaultOperator;\n        }\n\n        // operational change requiring a new parent node\n        // this occurs if the previous operation is not the same as current operation\n        // because the previous operation must be evaluated separately to preserve\n        // the proper precedence and the current operation will take over as the top of the tree\n        if (state.previousOperation != state.currentOperation) {\n          BooleanQuery bq = new BooleanQuery();\n          bq.add(state.top, state.currentOperation);\n          state.top = bq;\n        }\n\n        // reset all of the state for reuse\n        ((BooleanQuery)state.top).add(branch, state.currentOperation);\n        state.previousOperation = state.currentOperation;\n      }\n\n      // reset the current operation as it was intended to be applied to\n      // the incoming term (or phrase or subquery) even if branch was null\n      // due to other possible errors\n      state.currentOperation = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["fdc91c6aee685b616507b9e44fcc69315b8a9e6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fdc91c6aee685b616507b9e44fcc69315b8a9e6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fdc91c6aee685b616507b9e44fcc69315b8a9e6c"],"fdc91c6aee685b616507b9e44fcc69315b8a9e6c":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}