{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#registerCollectionStateWatcher(String,CollectionStateWatcher).mjava","commits":[{"id":"5b4df85b7268ca40452d6c01343d8eb00ed1f70a","date":1463171656,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#registerCollectionStateWatcher(String,CollectionStateWatcher).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Register a CollectionStateWatcher to be called when the state of a collection changes\n   *\n   * A given CollectionStateWatcher will be only called once.  If you want to have a persistent watcher,\n   * it should register itself again in its {@link CollectionStateWatcher#onStateChanged(Set, DocCollection)}\n   * method.\n   */\n  public void registerCollectionStateWatcher(String collection, CollectionStateWatcher stateWatcher) {\n    AtomicBoolean watchSet = new AtomicBoolean(false);\n    collectionWatches.compute(collection, (k, v) -> {\n      if (v == null) {\n        v = new CollectionWatch();\n        watchSet.set(true);\n      }\n      v.stateWatchers.add(stateWatcher);\n      return v;\n    });\n    if (watchSet.get()) {\n      new StateWatcher(collection).refreshAndWatch();\n      synchronized (getUpdateLock()) {\n        constructState();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#registerCollectionStateWatcher(String,CollectionStateWatcher).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Register a CollectionStateWatcher to be called when the state of a collection changes\n   *\n   * A given CollectionStateWatcher will be only called once.  If you want to have a persistent watcher,\n   * it should register itself again in its {@link CollectionStateWatcher#onStateChanged(Set, DocCollection)}\n   * method.\n   */\n  public void registerCollectionStateWatcher(String collection, CollectionStateWatcher stateWatcher) {\n    AtomicBoolean watchSet = new AtomicBoolean(false);\n    collectionWatches.compute(collection, (k, v) -> {\n      if (v == null) {\n        v = new CollectionWatch();\n        watchSet.set(true);\n      }\n      v.stateWatchers.add(stateWatcher);\n      return v;\n    });\n    if (watchSet.get()) {\n      new StateWatcher(collection).refreshAndWatch();\n      synchronized (getUpdateLock()) {\n        constructState();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cd4080fba20c774e4183c2ceb96ede05e5fb779","date":1463477646,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#registerCollectionStateWatcher(String,CollectionStateWatcher).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#registerCollectionStateWatcher(String,CollectionStateWatcher).mjava","sourceNew":"  /**\n   * Register a CollectionStateWatcher to be called when the state of a collection changes\n   */\n  public void registerCollectionStateWatcher(String collection, CollectionStateWatcher stateWatcher) {\n    AtomicBoolean watchSet = new AtomicBoolean(false);\n    collectionWatches.compute(collection, (k, v) -> {\n      if (v == null) {\n        v = new CollectionWatch();\n        watchSet.set(true);\n      }\n      v.stateWatchers.add(stateWatcher);\n      return v;\n    });\n    if (watchSet.get()) {\n      new StateWatcher(collection).refreshAndWatch();\n      synchronized (getUpdateLock()) {\n        constructState();\n      }\n    }\n    else {\n      DocCollection state = clusterState.getCollectionOrNull(collection);\n      if (stateWatcher.onStateChanged(liveNodes, state) == true) {\n        removeCollectionStateWatcher(collection, stateWatcher);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Register a CollectionStateWatcher to be called when the state of a collection changes\n   *\n   * A given CollectionStateWatcher will be only called once.  If you want to have a persistent watcher,\n   * it should register itself again in its {@link CollectionStateWatcher#onStateChanged(Set, DocCollection)}\n   * method.\n   */\n  public void registerCollectionStateWatcher(String collection, CollectionStateWatcher stateWatcher) {\n    AtomicBoolean watchSet = new AtomicBoolean(false);\n    collectionWatches.compute(collection, (k, v) -> {\n      if (v == null) {\n        v = new CollectionWatch();\n        watchSet.set(true);\n      }\n      v.stateWatchers.add(stateWatcher);\n      return v;\n    });\n    if (watchSet.get()) {\n      new StateWatcher(collection).refreshAndWatch();\n      synchronized (getUpdateLock()) {\n        constructState();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#registerCollectionStateWatcher(String,CollectionStateWatcher).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Register a CollectionStateWatcher to be called when the state of a collection changes\n   */\n  public void registerCollectionStateWatcher(String collection, CollectionStateWatcher stateWatcher) {\n    AtomicBoolean watchSet = new AtomicBoolean(false);\n    collectionWatches.compute(collection, (k, v) -> {\n      if (v == null) {\n        v = new CollectionWatch();\n        watchSet.set(true);\n      }\n      v.stateWatchers.add(stateWatcher);\n      return v;\n    });\n    if (watchSet.get()) {\n      new StateWatcher(collection).refreshAndWatch();\n      synchronized (getUpdateLock()) {\n        constructState();\n      }\n    }\n    else {\n      DocCollection state = clusterState.getCollectionOrNull(collection);\n      if (stateWatcher.onStateChanged(liveNodes, state) == true) {\n        removeCollectionStateWatcher(collection, stateWatcher);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14ebce138cd0e2e76c0ab6e22f4e612ace9da0dc","date":1464963170,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#registerCollectionStateWatcher(String,CollectionStateWatcher).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#registerCollectionStateWatcher(String,CollectionStateWatcher).mjava","sourceNew":"  /**\n   * Register a CollectionStateWatcher to be called when the state of a collection changes\n   */\n  public void registerCollectionStateWatcher(String collection, CollectionStateWatcher stateWatcher) {\n    AtomicBoolean watchSet = new AtomicBoolean(false);\n    collectionWatches.compute(collection, (k, v) -> {\n      if (v == null) {\n        v = new CollectionWatch();\n        watchSet.set(true);\n      }\n      v.stateWatchers.add(stateWatcher);\n      return v;\n    });\n\n    if (watchSet.get()) {\n      new StateWatcher(collection).refreshAndWatch();\n      synchronized (getUpdateLock()) {\n        constructState();\n      }\n    }\n\n    DocCollection state = clusterState.getCollectionOrNull(collection);\n    if (stateWatcher.onStateChanged(liveNodes, state) == true) {\n      removeCollectionStateWatcher(collection, stateWatcher);\n    }\n  }\n\n","sourceOld":"  /**\n   * Register a CollectionStateWatcher to be called when the state of a collection changes\n   */\n  public void registerCollectionStateWatcher(String collection, CollectionStateWatcher stateWatcher) {\n    AtomicBoolean watchSet = new AtomicBoolean(false);\n    collectionWatches.compute(collection, (k, v) -> {\n      if (v == null) {\n        v = new CollectionWatch();\n        watchSet.set(true);\n      }\n      v.stateWatchers.add(stateWatcher);\n      return v;\n    });\n    if (watchSet.get()) {\n      new StateWatcher(collection).refreshAndWatch();\n      synchronized (getUpdateLock()) {\n        constructState();\n      }\n    }\n    else {\n      DocCollection state = clusterState.getCollectionOrNull(collection);\n      if (stateWatcher.onStateChanged(liveNodes, state) == true) {\n        removeCollectionStateWatcher(collection, stateWatcher);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14ed55f2bfbc6da6c47312889f4946f1ace920e7","date":1465034744,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#registerCollectionStateWatcher(String,CollectionStateWatcher).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#registerCollectionStateWatcher(String,CollectionStateWatcher).mjava","sourceNew":"  /**\n   * Register a CollectionStateWatcher to be called when the state of a collection changes\n   */\n  public void registerCollectionStateWatcher(String collection, CollectionStateWatcher stateWatcher) {\n    AtomicBoolean watchSet = new AtomicBoolean(false);\n    collectionWatches.compute(collection, (k, v) -> {\n      if (v == null) {\n        v = new CollectionWatch();\n        watchSet.set(true);\n      }\n      v.stateWatchers.add(stateWatcher);\n      return v;\n    });\n    if (watchSet.get()) {\n      new StateWatcher(collection).refreshAndWatch();\n      synchronized (getUpdateLock()) {\n        constructState();\n      }\n    }\n    else {\n      DocCollection state = clusterState.getCollectionOrNull(collection);\n      if (stateWatcher.onStateChanged(liveNodes, state) == true) {\n        removeCollectionStateWatcher(collection, stateWatcher);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Register a CollectionStateWatcher to be called when the state of a collection changes\n   */\n  public void registerCollectionStateWatcher(String collection, CollectionStateWatcher stateWatcher) {\n    AtomicBoolean watchSet = new AtomicBoolean(false);\n    collectionWatches.compute(collection, (k, v) -> {\n      if (v == null) {\n        v = new CollectionWatch();\n        watchSet.set(true);\n      }\n      v.stateWatchers.add(stateWatcher);\n      return v;\n    });\n\n    if (watchSet.get()) {\n      new StateWatcher(collection).refreshAndWatch();\n      synchronized (getUpdateLock()) {\n        constructState();\n      }\n    }\n\n    DocCollection state = clusterState.getCollectionOrNull(collection);\n    if (stateWatcher.onStateChanged(liveNodes, state) == true) {\n      removeCollectionStateWatcher(collection, stateWatcher);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f","date":1467384467,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#registerCollectionStateWatcher(String,CollectionStateWatcher).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#registerCollectionStateWatcher(String,CollectionStateWatcher).mjava","sourceNew":"  /**\n   * Register a CollectionStateWatcher to be called when the state of a collection changes\n   */\n  public void registerCollectionStateWatcher(String collection, CollectionStateWatcher stateWatcher) {\n    AtomicBoolean watchSet = new AtomicBoolean(false);\n    collectionWatches.compute(collection, (k, v) -> {\n      if (v == null) {\n        v = new CollectionWatch();\n        watchSet.set(true);\n      }\n      v.stateWatchers.add(stateWatcher);\n      return v;\n    });\n\n    if (watchSet.get()) {\n      new StateWatcher(collection).refreshAndWatch();\n    }\n    \n    DocCollection state = clusterState.getCollectionOrNull(collection);\n    if (stateWatcher.onStateChanged(liveNodes, state) == true) {\n      removeCollectionStateWatcher(collection, stateWatcher);\n    }\n  }\n\n","sourceOld":"  /**\n   * Register a CollectionStateWatcher to be called when the state of a collection changes\n   */\n  public void registerCollectionStateWatcher(String collection, CollectionStateWatcher stateWatcher) {\n    AtomicBoolean watchSet = new AtomicBoolean(false);\n    collectionWatches.compute(collection, (k, v) -> {\n      if (v == null) {\n        v = new CollectionWatch();\n        watchSet.set(true);\n      }\n      v.stateWatchers.add(stateWatcher);\n      return v;\n    });\n    if (watchSet.get()) {\n      new StateWatcher(collection).refreshAndWatch();\n      synchronized (getUpdateLock()) {\n        constructState();\n      }\n    }\n    else {\n      DocCollection state = clusterState.getCollectionOrNull(collection);\n      if (stateWatcher.onStateChanged(liveNodes, state) == true) {\n        removeCollectionStateWatcher(collection, stateWatcher);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#registerCollectionStateWatcher(String,CollectionStateWatcher).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Register a CollectionStateWatcher to be called when the state of a collection changes\n   */\n  public void registerCollectionStateWatcher(String collection, CollectionStateWatcher stateWatcher) {\n    AtomicBoolean watchSet = new AtomicBoolean(false);\n    collectionWatches.compute(collection, (k, v) -> {\n      if (v == null) {\n        v = new CollectionWatch();\n        watchSet.set(true);\n      }\n      v.stateWatchers.add(stateWatcher);\n      return v;\n    });\n\n    if (watchSet.get()) {\n      new StateWatcher(collection).refreshAndWatch();\n    }\n    \n    DocCollection state = clusterState.getCollectionOrNull(collection);\n    if (stateWatcher.onStateChanged(liveNodes, state) == true) {\n      removeCollectionStateWatcher(collection, stateWatcher);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de3459a54b4c8751d9ef19b035577e2418064be7","date":1520297996,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#registerCollectionStateWatcher(String,CollectionStateWatcher).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#registerCollectionStateWatcher(String,CollectionStateWatcher).mjava","sourceNew":"  /**\n   * Register a CollectionStateWatcher to be called when the state of a collection changes\n   */\n  public void registerCollectionStateWatcher(String collection, CollectionStateWatcher stateWatcher) {\n    AtomicBoolean watchSet = new AtomicBoolean(false);\n    collectionWatches.compute(collection, (k, v) -> {\n      if (v == null) {\n        v = new CollectionWatch<>();\n        watchSet.set(true);\n      }\n      v.stateWatchers.add(stateWatcher);\n      return v;\n    });\n\n    if (watchSet.get()) {\n      new StateWatcher(collection).refreshAndWatch();\n    }\n    \n    DocCollection state = clusterState.getCollectionOrNull(collection);\n    if (stateWatcher.onStateChanged(liveNodes, state) == true) {\n      removeCollectionStateWatcher(collection, stateWatcher);\n    }\n  }\n\n","sourceOld":"  /**\n   * Register a CollectionStateWatcher to be called when the state of a collection changes\n   */\n  public void registerCollectionStateWatcher(String collection, CollectionStateWatcher stateWatcher) {\n    AtomicBoolean watchSet = new AtomicBoolean(false);\n    collectionWatches.compute(collection, (k, v) -> {\n      if (v == null) {\n        v = new CollectionWatch();\n        watchSet.set(true);\n      }\n      v.stateWatchers.add(stateWatcher);\n      return v;\n    });\n\n    if (watchSet.get()) {\n      new StateWatcher(collection).refreshAndWatch();\n    }\n    \n    DocCollection state = clusterState.getCollectionOrNull(collection);\n    if (stateWatcher.onStateChanged(liveNodes, state) == true) {\n      removeCollectionStateWatcher(collection, stateWatcher);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8c7f17e23a807049d8e2f0cb429977d5130befa","date":1524005824,"type":3,"author":"Houston Putman","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#registerCollectionStateWatcher(String,CollectionStateWatcher).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#registerCollectionStateWatcher(String,CollectionStateWatcher).mjava","sourceNew":"  /**\n   * Register a CollectionStateWatcher to be called when the state of a collection changes\n   */\n  public void registerCollectionStateWatcher(String collection, CollectionStateWatcher stateWatcher) {\n    AtomicBoolean watchSet = new AtomicBoolean(false);\n    collectionWatches.compute(collection, (k, v) -> {\n      if (v == null) {\n        v = new CollectionWatch<>();\n        watchSet.set(true);\n      }\n      v.stateWatchers.add(stateWatcher);\n      return v;\n    });\n\n    if (watchSet.get()) {\n      new StateWatcher(collection).refreshAndWatch();\n    }\n\n    DocCollection state = clusterState.getCollectionOrNull(collection);\n    if (stateWatcher.onStateChanged(liveNodes, state) == true) {\n      removeCollectionStateWatcher(collection, stateWatcher);\n    }\n  }\n\n","sourceOld":"  /**\n   * Register a CollectionStateWatcher to be called when the state of a collection changes\n   */\n  public void registerCollectionStateWatcher(String collection, CollectionStateWatcher stateWatcher) {\n    AtomicBoolean watchSet = new AtomicBoolean(false);\n    collectionWatches.compute(collection, (k, v) -> {\n      if (v == null) {\n        v = new CollectionWatch<>();\n        watchSet.set(true);\n      }\n      v.stateWatchers.add(stateWatcher);\n      return v;\n    });\n\n    if (watchSet.get()) {\n      new StateWatcher(collection).refreshAndWatch();\n    }\n    \n    DocCollection state = clusterState.getCollectionOrNull(collection);\n    if (stateWatcher.onStateChanged(liveNodes, state) == true) {\n      removeCollectionStateWatcher(collection, stateWatcher);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b366e7dd3172289251a86be96031af4002cd19c","date":1560790783,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#registerCollectionStateWatcher(String,CollectionStateWatcher).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#registerCollectionStateWatcher(String,CollectionStateWatcher).mjava","sourceNew":"  /**\n   * Register a CollectionStateWatcher to be called when the state of a collection changes \n   * <em>or</em> the set of live nodes changes.\n   *\n   * <p>\n   * The Watcher will automatically be removed when it's \n   * <code>onStateChanged</code> returns <code>true</code>\n   * </p>\n   *\n   * <p>\n   * This is method is just syntactic sugar for registering both a {@link DocCollectionWatcher} and \n   * a {@link LiveNodesListener}.  Callers that only care about one or the other (but not both) are \n   * encouraged to use the more specific methods register methods as it may reduce the number of \n   * ZooKeeper watchers needed, and reduce the amount of network/cpu used.\n   * </p>\n   *\n   * @see #registerDocCollectionWatcher\n   * @see #registerLiveNodesListener\n   */\n  public void registerCollectionStateWatcher(String collection, CollectionStateWatcher stateWatcher) {\n    final DocCollectionAndLiveNodesWatcherWrapper wrapper\n      = new DocCollectionAndLiveNodesWatcherWrapper(collection, stateWatcher);\n    \n    registerDocCollectionWatcher(collection, wrapper);\n    registerLiveNodesListener(wrapper);\n\n    DocCollection state = clusterState.getCollectionOrNull(collection);\n    if (stateWatcher.onStateChanged(liveNodes, state) == true) {\n      removeCollectionStateWatcher(collection, stateWatcher);\n    }\n  }\n\n","sourceOld":"  /**\n   * Register a CollectionStateWatcher to be called when the state of a collection changes\n   */\n  public void registerCollectionStateWatcher(String collection, CollectionStateWatcher stateWatcher) {\n    AtomicBoolean watchSet = new AtomicBoolean(false);\n    collectionWatches.compute(collection, (k, v) -> {\n      if (v == null) {\n        v = new CollectionWatch<>();\n        watchSet.set(true);\n      }\n      v.stateWatchers.add(stateWatcher);\n      return v;\n    });\n\n    if (watchSet.get()) {\n      new StateWatcher(collection).refreshAndWatch();\n    }\n\n    DocCollection state = clusterState.getCollectionOrNull(collection);\n    if (stateWatcher.onStateChanged(liveNodes, state) == true) {\n      removeCollectionStateWatcher(collection, stateWatcher);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#registerCollectionStateWatcher(String,CollectionStateWatcher).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#registerCollectionStateWatcher(String,CollectionStateWatcher).mjava","sourceNew":"  /**\n   * Register a CollectionStateWatcher to be called when the state of a collection changes\n   * <em>or</em> the set of live nodes changes.\n   *\n   * <p>\n   * The Watcher will automatically be removed when it's\n   * <code>onStateChanged</code> returns <code>true</code>\n   * </p>\n   *\n   * <p>\n   * This is method is just syntactic sugar for registering both a {@link DocCollectionWatcher} and\n   * a {@link LiveNodesListener}.  Callers that only care about one or the other (but not both) are\n   * encouraged to use the more specific methods register methods as it may reduce the number of\n   * ZooKeeper watchers needed, and reduce the amount of network/cpu used.\n   * </p>\n   *\n   * @see #registerDocCollectionWatcher\n   * @see #registerLiveNodesListener\n   */\n  public void registerCollectionStateWatcher(String collection, CollectionStateWatcher stateWatcher) {\n    final DocCollectionAndLiveNodesWatcherWrapper wrapper\n        = new DocCollectionAndLiveNodesWatcherWrapper(collection, stateWatcher);\n\n    registerDocCollectionWatcher(collection, wrapper);\n    registerLiveNodesListener(wrapper);\n\n    DocCollection state = clusterState.getCollectionOrNull(collection);\n    if (stateWatcher.onStateChanged(liveNodes, state) == true) {\n      removeCollectionStateWatcher(collection, stateWatcher);\n    }\n  }\n\n","sourceOld":"  /**\n   * Register a CollectionStateWatcher to be called when the state of a collection changes \n   * <em>or</em> the set of live nodes changes.\n   *\n   * <p>\n   * The Watcher will automatically be removed when it's \n   * <code>onStateChanged</code> returns <code>true</code>\n   * </p>\n   *\n   * <p>\n   * This is method is just syntactic sugar for registering both a {@link DocCollectionWatcher} and \n   * a {@link LiveNodesListener}.  Callers that only care about one or the other (but not both) are \n   * encouraged to use the more specific methods register methods as it may reduce the number of \n   * ZooKeeper watchers needed, and reduce the amount of network/cpu used.\n   * </p>\n   *\n   * @see #registerDocCollectionWatcher\n   * @see #registerLiveNodesListener\n   */\n  public void registerCollectionStateWatcher(String collection, CollectionStateWatcher stateWatcher) {\n    final DocCollectionAndLiveNodesWatcherWrapper wrapper\n      = new DocCollectionAndLiveNodesWatcherWrapper(collection, stateWatcher);\n    \n    registerDocCollectionWatcher(collection, wrapper);\n    registerLiveNodesListener(wrapper);\n\n    DocCollection state = clusterState.getCollectionOrNull(collection);\n    if (stateWatcher.onStateChanged(liveNodes, state) == true) {\n      removeCollectionStateWatcher(collection, stateWatcher);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"14ed55f2bfbc6da6c47312889f4946f1ace920e7":["14ebce138cd0e2e76c0ab6e22f4e612ace9da0dc"],"14ebce138cd0e2e76c0ab6e22f4e612ace9da0dc":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"7b366e7dd3172289251a86be96031af4002cd19c":["c8c7f17e23a807049d8e2f0cb429977d5130befa"],"0ad30c6a479e764150a3316e57263319775f1df2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5b4df85b7268ca40452d6c01343d8eb00ed1f70a"],"b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f":["14ed55f2bfbc6da6c47312889f4946f1ace920e7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5cd4080fba20c774e4183c2ceb96ede05e5fb779"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["7b366e7dd3172289251a86be96031af4002cd19c"],"5cd4080fba20c774e4183c2ceb96ede05e5fb779":["0ad30c6a479e764150a3316e57263319775f1df2"],"de3459a54b4c8751d9ef19b035577e2418064be7":["b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8c7f17e23a807049d8e2f0cb429977d5130befa":["de3459a54b4c8751d9ef19b035577e2418064be7"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2668c99990e4c94a78bac005aa682b7c5986d23a"]},"commit2Childs":{"14ed55f2bfbc6da6c47312889f4946f1ace920e7":["b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f"],"14ebce138cd0e2e76c0ab6e22f4e612ace9da0dc":["14ed55f2bfbc6da6c47312889f4946f1ace920e7"],"7b366e7dd3172289251a86be96031af4002cd19c":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"0ad30c6a479e764150a3316e57263319775f1df2":["5cd4080fba20c774e4183c2ceb96ede05e5fb779"],"b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","de3459a54b4c8751d9ef19b035577e2418064be7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["14ebce138cd0e2e76c0ab6e22f4e612ace9da0dc"],"5cd4080fba20c774e4183c2ceb96ede05e5fb779":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"de3459a54b4c8751d9ef19b035577e2418064be7":["c8c7f17e23a807049d8e2f0cb429977d5130befa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","5b4df85b7268ca40452d6c01343d8eb00ed1f70a"],"c8c7f17e23a807049d8e2f0cb429977d5130befa":["7b366e7dd3172289251a86be96031af4002cd19c"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["0ad30c6a479e764150a3316e57263319775f1df2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}