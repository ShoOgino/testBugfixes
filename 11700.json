{"path":"solr/core/src/java/org/apache/solr/search/LFUCache#setResourceLimit(String,Object).mjava","commits":[{"id":"ce13e934d6cfdcc82d51e85de460cf9790e97566","date":1563877281,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LFUCache#setResourceLimit(String,Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public synchronized void setResourceLimit(String limitName, Object val) {\n    if (TIME_DECAY_PARAM.equals(limitName) || CLEANUP_THREAD_PARAM.equals(limitName)) {\n      Boolean value;\n      try {\n        value = Boolean.parseBoolean(String.valueOf(val));\n      } catch (Exception e) {\n        throw new IllegalArgumentException(\"Invalid value of boolean limit '\" + limitName + \"': \" + val);\n      }\n      switch (limitName) {\n        case TIME_DECAY_PARAM:\n          timeDecay = value;\n          cache.setTimeDecay(timeDecay);\n          break;\n        case CLEANUP_THREAD_PARAM:\n          cleanupThread = value;\n          cache.setRunCleanupThread(cleanupThread);\n          break;\n      }\n    } else {\n      Number value;\n      try {\n        value = Long.parseLong(String.valueOf(val));\n      } catch (Exception e) {\n        throw new IllegalArgumentException(\"Invalid new value for numeric limit '\" + limitName +\"': \" + val);\n      }\n      if (value.intValue() <= 1 || value.longValue() > Integer.MAX_VALUE) {\n        throw new IllegalArgumentException(\"Out of range new value for numeric limit '\" + limitName +\"': \" + value);\n      }\n      switch (limitName) {\n        case SIZE_PARAM:\n          sizeLimit = value.intValue();\n          checkAndAdjustLimits();\n          cache.setUpperWaterMark(sizeLimit);\n          cache.setLowerWaterMark(minSizeLimit);\n          break;\n        case MIN_SIZE_PARAM:\n          minSizeLimit = value.intValue();\n          checkAndAdjustLimits();\n          cache.setUpperWaterMark(sizeLimit);\n          cache.setLowerWaterMark(minSizeLimit);\n          break;\n        case ACCEPTABLE_SIZE_PARAM:\n          acceptableSize = value.intValue();\n          acceptableSize = Math.max(minSizeLimit, acceptableSize);\n          cache.setAcceptableWaterMark(acceptableSize);\n          break;\n        case AUTOWARM_COUNT_PARAM:\n          autowarmCount = value.intValue();\n          break;\n        case SHOW_ITEMS_PARAM:\n          showItems = value.intValue();\n          break;\n        default:\n          throw new IllegalArgumentException(\"Unsupported numeric limit '\" + limitName + \"'\");\n      }\n    }\n    description = generateDescription();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e33a2e75ecee8b06fba2bd570c0fb9273962bc7","date":1565791119,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/LFUCache#setResourceLimit(String,Object).mjava","sourceNew":null,"sourceOld":"  @Override\n  public synchronized void setResourceLimit(String limitName, Object val) {\n    if (TIME_DECAY_PARAM.equals(limitName) || CLEANUP_THREAD_PARAM.equals(limitName)) {\n      Boolean value;\n      try {\n        value = Boolean.parseBoolean(String.valueOf(val));\n      } catch (Exception e) {\n        throw new IllegalArgumentException(\"Invalid value of boolean limit '\" + limitName + \"': \" + val);\n      }\n      switch (limitName) {\n        case TIME_DECAY_PARAM:\n          timeDecay = value;\n          cache.setTimeDecay(timeDecay);\n          break;\n        case CLEANUP_THREAD_PARAM:\n          cleanupThread = value;\n          cache.setRunCleanupThread(cleanupThread);\n          break;\n      }\n    } else {\n      Number value;\n      try {\n        value = Long.parseLong(String.valueOf(val));\n      } catch (Exception e) {\n        throw new IllegalArgumentException(\"Invalid new value for numeric limit '\" + limitName +\"': \" + val);\n      }\n      if (value.intValue() <= 1 || value.longValue() > Integer.MAX_VALUE) {\n        throw new IllegalArgumentException(\"Out of range new value for numeric limit '\" + limitName +\"': \" + value);\n      }\n      switch (limitName) {\n        case SIZE_PARAM:\n          sizeLimit = value.intValue();\n          checkAndAdjustLimits();\n          cache.setUpperWaterMark(sizeLimit);\n          cache.setLowerWaterMark(minSizeLimit);\n          break;\n        case MIN_SIZE_PARAM:\n          minSizeLimit = value.intValue();\n          checkAndAdjustLimits();\n          cache.setUpperWaterMark(sizeLimit);\n          cache.setLowerWaterMark(minSizeLimit);\n          break;\n        case ACCEPTABLE_SIZE_PARAM:\n          acceptableSize = value.intValue();\n          acceptableSize = Math.max(minSizeLimit, acceptableSize);\n          cache.setAcceptableWaterMark(acceptableSize);\n          break;\n        case AUTOWARM_COUNT_PARAM:\n          autowarmCount = value.intValue();\n          break;\n        case SHOW_ITEMS_PARAM:\n          showItems = value.intValue();\n          break;\n        default:\n          throw new IllegalArgumentException(\"Unsupported numeric limit '\" + limitName + \"'\");\n      }\n    }\n    description = generateDescription();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ce13e934d6cfdcc82d51e85de460cf9790e97566":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e33a2e75ecee8b06fba2bd570c0fb9273962bc7":["ce13e934d6cfdcc82d51e85de460cf9790e97566"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e33a2e75ecee8b06fba2bd570c0fb9273962bc7"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ce13e934d6cfdcc82d51e85de460cf9790e97566"],"ce13e934d6cfdcc82d51e85de460cf9790e97566":["0e33a2e75ecee8b06fba2bd570c0fb9273962bc7"],"0e33a2e75ecee8b06fba2bd570c0fb9273962bc7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}