{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CategoryPathUtils#hashCodeOfSerialized(CharBlockArray,int).mjava","commits":[{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CategoryPathUtils#hashCodeOfSerialized(CharBlockArray,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Calculates a hash function of a path that serialized with\n   * {@link #serialize(CategoryPath, CharBlockArray)}.\n   */\n  public static int hashCodeOfSerialized(CharBlockArray charBlockArray, int offset) {\n    int length = (short) charBlockArray.charAt(offset++);\n    if (length == 0) {\n      return 0;\n    }\n    \n    int hash = length;\n    for (int i = 0; i < length; i++) {\n      int len = (short) charBlockArray.charAt(offset++);\n      hash = hash * 31 + charBlockArray.subSequence(offset, offset + len).hashCode();\n      offset += len;\n    }\n    return hash;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["95dac0f45251471041578dd8de89dfc7fbb28f8b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"705a9844b3594be2e8f7e978e7462ec1767a7630","date":1357540205,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CategoryPathUtils#hashCodeOfSerialized(CharBlockArray,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CategoryPathUtils#hashCodeOfSerialized(CharBlockArray,int).mjava","sourceNew":"  /**\n   * Calculates a hash function of a path that was serialized with\n   * {@link #serialize(CategoryPath, CharBlockArray)}.\n   */\n  public static int hashCodeOfSerialized(CharBlockArray charBlockArray, int offset) {\n    int length = (short) charBlockArray.charAt(offset++);\n    if (length == 0) {\n      return 0;\n    }\n    \n    int hash = length;\n    for (int i = 0; i < length; i++) {\n      int len = (short) charBlockArray.charAt(offset++);\n      hash = hash * 31 + charBlockArray.subSequence(offset, offset + len).hashCode();\n      offset += len;\n    }\n    return hash;\n  }\n\n","sourceOld":"  /**\n   * Calculates a hash function of a path that serialized with\n   * {@link #serialize(CategoryPath, CharBlockArray)}.\n   */\n  public static int hashCodeOfSerialized(CharBlockArray charBlockArray, int offset) {\n    int length = (short) charBlockArray.charAt(offset++);\n    if (length == 0) {\n      return 0;\n    }\n    \n    int hash = length;\n    for (int i = 0; i < length; i++) {\n      int len = (short) charBlockArray.charAt(offset++);\n      hash = hash * 31 + charBlockArray.subSequence(offset, offset + len).hashCode();\n      offset += len;\n    }\n    return hash;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CategoryPathUtils#hashCodeOfSerialized(CharBlockArray,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Calculates a hash function of a path that was serialized with\n   * {@link #serialize(CategoryPath, CharBlockArray)}.\n   */\n  public static int hashCodeOfSerialized(CharBlockArray charBlockArray, int offset) {\n    int length = (short) charBlockArray.charAt(offset++);\n    if (length == 0) {\n      return 0;\n    }\n    \n    int hash = length;\n    for (int i = 0; i < length; i++) {\n      int len = (short) charBlockArray.charAt(offset++);\n      hash = hash * 31 + charBlockArray.subSequence(offset, offset + len).hashCode();\n      offset += len;\n    }\n    return hash;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95dac0f45251471041578dd8de89dfc7fbb28f8b","date":1370889677,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CategoryPathUtils#hashCodeOfSerialized(CharBlockArray,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CategoryPathUtils#hashCodeOfSerialized(CharBlockArray,int).mjava","sourceNew":"  /**\n   * Calculates a hash function of a path that was serialized with\n   * {@link #serialize(CategoryPath, CharBlockArray)}.\n   */\n  public static int hashCodeOfSerialized(CharBlockArray charBlockArray, int offset) {\n    int length = charBlockArray.charAt(offset++);\n    if (length == 0) {\n      return 0;\n    }\n    \n    int hash = length;\n    for (int i = 0; i < length; i++) {\n      int len = charBlockArray.charAt(offset++);\n      hash = hash * 31 + charBlockArray.subSequence(offset, offset + len).hashCode();\n      offset += len;\n    }\n    return hash;\n  }\n\n","sourceOld":"  /**\n   * Calculates a hash function of a path that was serialized with\n   * {@link #serialize(CategoryPath, CharBlockArray)}.\n   */\n  public static int hashCodeOfSerialized(CharBlockArray charBlockArray, int offset) {\n    int length = (short) charBlockArray.charAt(offset++);\n    if (length == 0) {\n      return 0;\n    }\n    \n    int hash = length;\n    for (int i = 0; i < length; i++) {\n      int len = (short) charBlockArray.charAt(offset++);\n      hash = hash * 31 + charBlockArray.subSequence(offset, offset + len).hashCode();\n      offset += len;\n    }\n    return hash;\n  }\n\n","bugFix":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CategoryPathUtils#hashCodeOfSerialized(CharBlockArray,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CategoryPathUtils#hashCodeOfSerialized(CharBlockArray,int).mjava","sourceNew":"  /**\n   * Calculates a hash function of a path that was serialized with\n   * {@link #serialize(FacetLabel, CharBlockArray)}.\n   */\n  public static int hashCodeOfSerialized(CharBlockArray charBlockArray, int offset) {\n    int length = charBlockArray.charAt(offset++);\n    if (length == 0) {\n      return 0;\n    }\n    \n    int hash = length;\n    for (int i = 0; i < length; i++) {\n      int len = charBlockArray.charAt(offset++);\n      hash = hash * 31 + charBlockArray.subSequence(offset, offset + len).hashCode();\n      offset += len;\n    }\n    return hash;\n  }\n\n","sourceOld":"  /**\n   * Calculates a hash function of a path that was serialized with\n   * {@link #serialize(CategoryPath, CharBlockArray)}.\n   */\n  public static int hashCodeOfSerialized(CharBlockArray charBlockArray, int offset) {\n    int length = charBlockArray.charAt(offset++);\n    if (length == 0) {\n      return 0;\n    }\n    \n    int hash = length;\n    for (int i = 0; i < length; i++) {\n      int len = charBlockArray.charAt(offset++);\n      hash = hash * 31 + charBlockArray.subSequence(offset, offset + len).hashCode();\n      offset += len;\n    }\n    return hash;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cad50ed6659649a0edef71b8cf56280b0bdadd7","date":1385496862,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/CategoryPathUtils#hashCodeOfSerialized(CharBlockArray,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CategoryPathUtils#hashCodeOfSerialized(CharBlockArray,int).mjava","sourceNew":"  /**\n   * Calculates a hash function of a path that was serialized with\n   * {@link #serialize(FacetLabel, CharBlockArray)}.\n   */\n  public static int hashCodeOfSerialized(CharBlockArray charBlockArray, int offset) {\n    int length = charBlockArray.charAt(offset++);\n    if (length == 0) {\n      return 0;\n    }\n    \n    int hash = length;\n    for (int i = 0; i < length; i++) {\n      int len = charBlockArray.charAt(offset++);\n      hash = hash * 31 + charBlockArray.subSequence(offset, offset + len).hashCode();\n      offset += len;\n    }\n    return hash;\n  }\n\n","sourceOld":"  /**\n   * Calculates a hash function of a path that was serialized with\n   * {@link #serialize(FacetLabel, CharBlockArray)}.\n   */\n  public static int hashCodeOfSerialized(CharBlockArray charBlockArray, int offset) {\n    int length = charBlockArray.charAt(offset++);\n    if (length == 0) {\n      return 0;\n    }\n    \n    int hash = length;\n    for (int i = 0; i < length; i++) {\n      int len = charBlockArray.charAt(offset++);\n      hash = hash * 31 + charBlockArray.subSequence(offset, offset + len).hashCode();\n      offset += len;\n    }\n    return hash;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CategoryPathUtils#hashCodeOfSerialized(CharBlockArray,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Calculates a hash function of a path that was serialized with\n   * {@link #serialize(CategoryPath, CharBlockArray)}.\n   */\n  public static int hashCodeOfSerialized(CharBlockArray charBlockArray, int offset) {\n    int length = charBlockArray.charAt(offset++);\n    if (length == 0) {\n      return 0;\n    }\n    \n    int hash = length;\n    for (int i = 0; i < length; i++) {\n      int len = charBlockArray.charAt(offset++);\n      hash = hash * 31 + charBlockArray.subSequence(offset, offset + len).hashCode();\n      offset += len;\n    }\n    return hash;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","705a9844b3594be2e8f7e978e7462ec1767a7630"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cad50ed6659649a0edef71b8cf56280b0bdadd7":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"95dac0f45251471041578dd8de89dfc7fbb28f8b":["705a9844b3594be2e8f7e978e7462ec1767a7630"],"705a9844b3594be2e8f7e978e7462ec1767a7630":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["95dac0f45251471041578dd8de89dfc7fbb28f8b","5cad50ed6659649a0edef71b8cf56280b0bdadd7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["95dac0f45251471041578dd8de89dfc7fbb28f8b"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["705a9844b3594be2e8f7e978e7462ec1767a7630"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"5cad50ed6659649a0edef71b8cf56280b0bdadd7":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"95dac0f45251471041578dd8de89dfc7fbb28f8b":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"705a9844b3594be2e8f7e978e7462ec1767a7630":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","95dac0f45251471041578dd8de89dfc7fbb28f8b"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["5cad50ed6659649a0edef71b8cf56280b0bdadd7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}