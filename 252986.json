{"path":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader#docs(FieldInfo,BlockTermState,Bits,DocsEnum,boolean).mjava","commits":[{"id":"872cff1d3a554e0cd64014cd97f88d3002b0f491","date":1323024658,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader#docs(FieldInfo,BlockTermState,Bits,DocsEnum,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader#docs(FieldInfo,BlockTermState,Bits,DocsEnum).mjava","sourceNew":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n    SegmentDocsEnum docsEnum;\n    if (needsFreqs && fieldInfo.indexOptions == IndexOptions.DOCS_ONLY) {\n      return null;\n    } else if (reuse == null || !(reuse instanceof SegmentDocsEnum)) {\n      docsEnum = new SegmentDocsEnum(freqIn);\n    } else {\n      docsEnum = (SegmentDocsEnum) reuse;\n      if (docsEnum.startFreqIn != freqIn) {\n        // If you are using ParellelReader, and pass in a\n        // reused DocsEnum, it could have come from another\n        // reader also using standard codec\n        docsEnum = new SegmentDocsEnum(freqIn);\n      }\n    }\n    // if (DEBUG) System.out.println(\"SPR.docs ts=\" + termState);\n    return docsEnum.reset(fieldInfo, (StandardTermState) termState, liveDocs);\n  }\n\n","sourceOld":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, DocsEnum reuse) throws IOException {\n    SegmentDocsEnum docsEnum;\n    if (reuse == null || !(reuse instanceof SegmentDocsEnum)) {\n      docsEnum = new SegmentDocsEnum(freqIn);\n    } else {\n      docsEnum = (SegmentDocsEnum) reuse;\n      if (docsEnum.startFreqIn != freqIn) {\n        // If you are using ParellelReader, and pass in a\n        // reused DocsEnum, it could have come from another\n        // reader also using standard codec\n        docsEnum = new SegmentDocsEnum(freqIn);\n      }\n    }\n    // if (DEBUG) System.out.println(\"SPR.docs ts=\" + termState);\n    return docsEnum.reset(fieldInfo, (StandardTermState) termState, liveDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b65b350ca9588f9fc76ce7d6804160d06c45ff42","date":1323026297,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader#docs(FieldInfo,BlockTermState,Bits,DocsEnum,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader#docs(FieldInfo,BlockTermState,Bits,DocsEnum).mjava","sourceNew":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n    SegmentDocsEnum docsEnum;\n    if (needsFreqs && fieldInfo.indexOptions == IndexOptions.DOCS_ONLY) {\n      return null;\n    } else if (reuse == null || !(reuse instanceof SegmentDocsEnum)) {\n      docsEnum = new SegmentDocsEnum(freqIn);\n    } else {\n      docsEnum = (SegmentDocsEnum) reuse;\n      if (docsEnum.startFreqIn != freqIn) {\n        // If you are using ParellelReader, and pass in a\n        // reused DocsEnum, it could have come from another\n        // reader also using standard codec\n        docsEnum = new SegmentDocsEnum(freqIn);\n      }\n    }\n    // if (DEBUG) System.out.println(\"SPR.docs ts=\" + termState);\n    return docsEnum.reset(fieldInfo, (StandardTermState) termState, liveDocs);\n  }\n\n","sourceOld":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, DocsEnum reuse) throws IOException {\n    SegmentDocsEnum docsEnum;\n    if (reuse == null || !(reuse instanceof SegmentDocsEnum)) {\n      docsEnum = new SegmentDocsEnum(freqIn);\n    } else {\n      docsEnum = (SegmentDocsEnum) reuse;\n      if (docsEnum.startFreqIn != freqIn) {\n        // If you are using ParellelReader, and pass in a\n        // reused DocsEnum, it could have come from another\n        // reader also using standard codec\n        docsEnum = new SegmentDocsEnum(freqIn);\n      }\n    }\n    // if (DEBUG) System.out.println(\"SPR.docs ts=\" + termState);\n    return docsEnum.reset(fieldInfo, (StandardTermState) termState, liveDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fbe641a3ba9e8ab6b19044e4e89b979bfebbed1","date":1324025015,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader#docs(FieldInfo,BlockTermState,Bits,DocsEnum,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader#docs(FieldInfo,BlockTermState,Bits,DocsEnum,boolean).mjava","sourceNew":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n    if (needsFreqs && fieldInfo.indexOptions == IndexOptions.DOCS_ONLY) {\n      return null;\n    } else if (canReuse(reuse, liveDocs)) {\n      // if (DEBUG) System.out.println(\"SPR.docs ts=\" + termState);\n      return ((SegmentDocsEnumBase) reuse).reset(fieldInfo, (StandardTermState)termState);\n    }\n    return newDocsEnum(liveDocs, fieldInfo, (StandardTermState)termState);\n  }\n\n","sourceOld":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n    SegmentDocsEnum docsEnum;\n    if (needsFreqs && fieldInfo.indexOptions == IndexOptions.DOCS_ONLY) {\n      return null;\n    } else if (reuse == null || !(reuse instanceof SegmentDocsEnum)) {\n      docsEnum = new SegmentDocsEnum(freqIn);\n    } else {\n      docsEnum = (SegmentDocsEnum) reuse;\n      if (docsEnum.startFreqIn != freqIn) {\n        // If you are using ParellelReader, and pass in a\n        // reused DocsEnum, it could have come from another\n        // reader also using standard codec\n        docsEnum = new SegmentDocsEnum(freqIn);\n      }\n    }\n    // if (DEBUG) System.out.println(\"SPR.docs ts=\" + termState);\n    return docsEnum.reset(fieldInfo, (StandardTermState) termState, liveDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#docs(FieldInfo,BlockTermState,Bits,DocsEnum,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader#docs(FieldInfo,BlockTermState,Bits,DocsEnum,boolean).mjava","sourceNew":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n    if (needsFreqs && fieldInfo.indexOptions == IndexOptions.DOCS_ONLY) {\n      return null;\n    } else if (canReuse(reuse, liveDocs)) {\n      // if (DEBUG) System.out.println(\"SPR.docs ts=\" + termState);\n      return ((SegmentDocsEnumBase) reuse).reset(fieldInfo, (StandardTermState)termState);\n    }\n    return newDocsEnum(liveDocs, fieldInfo, (StandardTermState)termState);\n  }\n\n","sourceOld":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n    if (needsFreqs && fieldInfo.indexOptions == IndexOptions.DOCS_ONLY) {\n      return null;\n    } else if (canReuse(reuse, liveDocs)) {\n      // if (DEBUG) System.out.println(\"SPR.docs ts=\" + termState);\n      return ((SegmentDocsEnumBase) reuse).reset(fieldInfo, (StandardTermState)termState);\n    }\n    return newDocsEnum(liveDocs, fieldInfo, (StandardTermState)termState);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2fbe641a3ba9e8ab6b19044e4e89b979bfebbed1":["872cff1d3a554e0cd64014cd97f88d3002b0f491"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["2fbe641a3ba9e8ab6b19044e4e89b979bfebbed1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"b65b350ca9588f9fc76ce7d6804160d06c45ff42":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"2fbe641a3ba9e8ab6b19044e4e89b979bfebbed1":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","2fbe641a3ba9e8ab6b19044e4e89b979bfebbed1"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}