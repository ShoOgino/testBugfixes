{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,SolrInputDocument,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","commits":[{"id":"157728c1f42b384dfc049157cc95adc767da3415","date":1224572739,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,SolrInputDocument,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,SolrWriter.SolrDoc,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, SolrInputDocument doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessor entityProcessor = getEntityProcessor(entity, dataImporter.getCore());\n    DataSource ds = entity.dataSrc;\n    if (verboseDebug) {\n      ds = DebugLogger.wrapDs(ds);\n    }\n    ContextImpl ctx = new ContextImpl(entity, vr, ds,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            requestParameters.requestParams, session, parentCtx, dataImporter);\n    entityProcessor.init(ctx);\n\n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            if (ctx.getDocSession() != null)\n              ctx.getDocSession().clear();\n            else\n              ctx.setDocSession(new HashMap<String, Object>());\n            doc = new SolrInputDocument();\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name));\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null)\n            break;\n\n          if (arow.containsKey(DOC_BOOST)) {\n            setDocumentBoost(doc, arow);\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (entity.fields != null && doc != null) {\n            addFields(entity, doc, arow);\n          }\n          if (isRoot)\n            vr.removeNamespace(null);\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc, null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            boolean result = writer.upload(doc);\n            doc = null;\n            if (result)\n              importStatistics.docCount.incrementAndGet();\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n            } else {\n              LOG.error( \"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, SolrWriter.SolrDoc doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessor entityProcessor = getEntityProcessor(entity, dataImporter.getCore());\n    DataSource ds = entity.dataSrc;\n    if (verboseDebug) {\n      ds = DebugLogger.wrapDs(ds);\n    }\n    ContextImpl ctx = new ContextImpl(entity, vr, ds,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            requestParameters.requestParams, session, parentCtx, dataImporter);\n    entityProcessor.init(ctx);\n\n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            if (ctx.getDocSession() != null)\n              ctx.getDocSession().clear();\n            else\n              ctx.setDocSession(new HashMap<String, Object>());\n            doc = writer.getSolrDocInstance();\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name));\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null)\n            break;\n\n          if (arow.containsKey(DOC_BOOST)) {\n            setDocumentBoost(doc, arow);\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (entity.fields != null && doc != null) {\n            addFields(entity, doc, arow);\n          }\n          if (isRoot)\n            vr.removeNamespace(null);\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc, null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            boolean result = writer.upload(doc);\n            doc = null;\n            if (result)\n              importStatistics.docCount.incrementAndGet();\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n            } else {\n              LOG.error( \"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29df09ecb6b96d58f34447be89f88a0c067fb3a9","date":1225344078,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,SolrInputDocument,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,SolrInputDocument,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, SolrInputDocument doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessor entityProcessor = getEntityProcessor(entity, dataImporter.getCore());\n    DataSource ds = entity.dataSrc;\n    if (verboseDebug) {\n      ds = DebugLogger.wrapDs(ds);\n    }\n    ContextImpl ctx = new ContextImpl(entity, vr, ds,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            requestParameters.requestParams, session, parentCtx, dataImporter);\n    entityProcessor.init(ctx);\n\n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            if (ctx.getDocSession() != null)\n              ctx.getDocSession().clear();\n            else\n              ctx.setDocSession(new HashMap<String, Object>());\n            doc = new SolrInputDocument();\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name));\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null)\n            break;\n\n          if (arow.containsKey(DOC_BOOST)) {\n            setDocumentBoost(doc, arow);\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (entity.fields != null && doc != null) {\n            addFields(entity, doc, arow);\n          }\n          if (isRoot)\n            vr.removeNamespace(null);\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc, null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            boolean result = writer.upload(doc);\n            doc = null;\n            if (result)\n              importStatistics.docCount.incrementAndGet();\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n            } else {\n              LOG.error(\"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, SolrInputDocument doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessor entityProcessor = getEntityProcessor(entity, dataImporter.getCore());\n    DataSource ds = entity.dataSrc;\n    if (verboseDebug) {\n      ds = DebugLogger.wrapDs(ds);\n    }\n    ContextImpl ctx = new ContextImpl(entity, vr, ds,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            requestParameters.requestParams, session, parentCtx, dataImporter);\n    entityProcessor.init(ctx);\n\n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            if (ctx.getDocSession() != null)\n              ctx.getDocSession().clear();\n            else\n              ctx.setDocSession(new HashMap<String, Object>());\n            doc = new SolrInputDocument();\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name));\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null)\n            break;\n\n          if (arow.containsKey(DOC_BOOST)) {\n            setDocumentBoost(doc, arow);\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (entity.fields != null && doc != null) {\n            addFields(entity, doc, arow);\n          }\n          if (isRoot)\n            vr.removeNamespace(null);\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc, null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            boolean result = writer.upload(doc);\n            doc = null;\n            if (result)\n              importStatistics.docCount.incrementAndGet();\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n            } else {\n              LOG.error( \"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","bugFix":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"33c5df47ecbf734182bdfec8f59154a8dbecc2e3","date":1226037101,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,SolrInputDocument,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,SolrInputDocument,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, SolrInputDocument doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessor entityProcessor = getEntityProcessor(entity, dataImporter.getCore());\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    entityProcessor.init(ctx);\n\n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            if (ctx.getDocSession() != null)\n              ctx.getDocSession().clear();\n            else\n              ctx.setDocSession(new HashMap<String, Object>());\n            doc = new SolrInputDocument();\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name));\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null)\n            break;\n\n          if (arow.containsKey(DOC_BOOST)) {\n            setDocumentBoost(doc, arow);\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (entity.fields != null && doc != null) {\n            addFields(entity, doc, arow);\n          }\n          if (isRoot)\n            vr.removeNamespace(null);\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc, null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            boolean result = writer.upload(doc);\n            doc = null;\n            if (result)\n              importStatistics.docCount.incrementAndGet();\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n            } else {\n              LOG.error(\"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, SolrInputDocument doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessor entityProcessor = getEntityProcessor(entity, dataImporter.getCore());\n    DataSource ds = entity.dataSrc;\n    if (verboseDebug) {\n      ds = DebugLogger.wrapDs(ds);\n    }\n    ContextImpl ctx = new ContextImpl(entity, vr, ds,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            requestParameters.requestParams, session, parentCtx, dataImporter);\n    entityProcessor.init(ctx);\n\n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            if (ctx.getDocSession() != null)\n              ctx.getDocSession().clear();\n            else\n              ctx.setDocSession(new HashMap<String, Object>());\n            doc = new SolrInputDocument();\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name));\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null)\n            break;\n\n          if (arow.containsKey(DOC_BOOST)) {\n            setDocumentBoost(doc, arow);\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (entity.fields != null && doc != null) {\n            addFields(entity, doc, arow);\n          }\n          if (isRoot)\n            vr.removeNamespace(null);\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc, null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            boolean result = writer.upload(doc);\n            doc = null;\n            if (result)\n              importStatistics.docCount.incrementAndGet();\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n            } else {\n              LOG.error(\"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","bugFix":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9c2d909a1a598832c7b19a641282afc434d521e0","date":1226910389,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,SolrInputDocument,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,SolrInputDocument,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, SolrInputDocument doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessor entityProcessor = getEntityProcessor(entity, dataImporter.getCore());\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    entityProcessor.init(ctx);\n\n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            if (ctx.getDocSession() != null)\n              ctx.getDocSession().clear();\n            else\n              ctx.setDocSession(new HashMap<String, Object>());\n            doc = new SolrInputDocument();\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name));\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null)\n            break;\n\n          if (arow.containsKey(DOC_BOOST)) {\n            setDocumentBoost(doc, arow);\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (entity.fields != null && doc != null) {\n            addFields(entity, doc, arow);\n          }\n          if (isRoot)\n            vr.removeNamespace(null);\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc, null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            boolean result = writer.upload(doc);\n            doc = null;\n            if (result)\n              importStatistics.docCount.incrementAndGet();\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n            } else {\n              LOG.error(\"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, SolrInputDocument doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessor entityProcessor = getEntityProcessor(entity, dataImporter.getCore());\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    entityProcessor.init(ctx);\n\n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            if (ctx.getDocSession() != null)\n              ctx.getDocSession().clear();\n            else\n              ctx.setDocSession(new HashMap<String, Object>());\n            doc = new SolrInputDocument();\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name));\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null)\n            break;\n\n          if (arow.containsKey(DOC_BOOST)) {\n            setDocumentBoost(doc, arow);\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (entity.fields != null && doc != null) {\n            addFields(entity, doc, arow);\n          }\n          if (isRoot)\n            vr.removeNamespace(null);\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc, null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            boolean result = writer.upload(doc);\n            doc = null;\n            if (result)\n              importStatistics.docCount.incrementAndGet();\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n            } else {\n              LOG.error(\"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dfc8d8c033e2239995c45b976c90c18559da31e","date":1235021328,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,SolrInputDocument,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,SolrInputDocument,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, SolrInputDocument doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessor entityProcessor = getEntityProcessor(entity, dataImporter.getCore());\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    vr.context = ctx;\n    entityProcessor.init(ctx);\n\n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            if (ctx.getDocSession() != null)\n              ctx.getDocSession().clear();\n            else\n              ctx.setDocSession(new HashMap<String, Object>());\n            doc = new SolrInputDocument();\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name));\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null)\n            break;\n\n          if (arow.containsKey(DOC_BOOST)) {\n            setDocumentBoost(doc, arow);\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (entity.fields != null && doc != null) {\n            addFields(entity, doc, arow);\n          }\n          if (isRoot)\n            vr.removeNamespace(null);\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc, null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            boolean result = writer.upload(doc);\n            doc = null;\n            if (result)\n              importStatistics.docCount.incrementAndGet();\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n            } else {\n              LOG.error(\"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, SolrInputDocument doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessor entityProcessor = getEntityProcessor(entity, dataImporter.getCore());\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    entityProcessor.init(ctx);\n\n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            if (ctx.getDocSession() != null)\n              ctx.getDocSession().clear();\n            else\n              ctx.setDocSession(new HashMap<String, Object>());\n            doc = new SolrInputDocument();\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name));\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null)\n            break;\n\n          if (arow.containsKey(DOC_BOOST)) {\n            setDocumentBoost(doc, arow);\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (entity.fields != null && doc != null) {\n            addFields(entity, doc, arow);\n          }\n          if (isRoot)\n            vr.removeNamespace(null);\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc, null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            boolean result = writer.upload(doc);\n            doc = null;\n            if (result)\n              importStatistics.docCount.incrementAndGet();\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n            } else {\n              LOG.error(\"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"35d71c83578c6e08733e7a584ca744c7c66d60a6","date":1235022186,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,SolrInputDocument,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,SolrInputDocument,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, SolrInputDocument doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessor entityProcessor = getEntityProcessor(entity, dataImporter.getCore());\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    entityProcessor.init(ctx);\n\n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            if (ctx.getDocSession() != null)\n              ctx.getDocSession().clear();\n            else\n              ctx.setDocSession(new HashMap<String, Object>());\n            doc = new SolrInputDocument();\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name));\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null)\n            break;\n\n          if (arow.containsKey(DOC_BOOST)) {\n            setDocumentBoost(doc, arow);\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (entity.fields != null && doc != null) {\n            addFields(entity, doc, arow);\n          }\n          if (isRoot)\n            vr.removeNamespace(null);\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc, null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            boolean result = writer.upload(doc);\n            doc = null;\n            if (result)\n              importStatistics.docCount.incrementAndGet();\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n            } else {\n              LOG.error(\"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, SolrInputDocument doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessor entityProcessor = getEntityProcessor(entity, dataImporter.getCore());\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    vr.context = ctx;\n    entityProcessor.init(ctx);\n\n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            if (ctx.getDocSession() != null)\n              ctx.getDocSession().clear();\n            else\n              ctx.setDocSession(new HashMap<String, Object>());\n            doc = new SolrInputDocument();\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name));\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null)\n            break;\n\n          if (arow.containsKey(DOC_BOOST)) {\n            setDocumentBoost(doc, arow);\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (entity.fields != null && doc != null) {\n            addFields(entity, doc, arow);\n          }\n          if (isRoot)\n            vr.removeNamespace(null);\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc, null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            boolean result = writer.upload(doc);\n            doc = null;\n            if (result)\n              importStatistics.docCount.incrementAndGet();\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n            } else {\n              LOG.error(\"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6790eacb669f6201b7b8dc4e0f342f2262592aa","date":1235039109,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,SolrInputDocument,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,SolrInputDocument,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, SolrInputDocument doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessor entityProcessor = getEntityProcessor(entity, dataImporter.getCore());\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    vr.context = ctx;\n    entityProcessor.init(ctx);\n\n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            if (ctx.getDocSession() != null)\n              ctx.getDocSession().clear();\n            else\n              ctx.setDocSession(new HashMap<String, Object>());\n            doc = new SolrInputDocument();\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name));\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null)\n            break;\n\n          if (arow.containsKey(DOC_BOOST)) {\n            setDocumentBoost(doc, arow);\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (entity.fields != null && doc != null) {\n            addFields(entity, doc, arow);\n          }\n          if (isRoot)\n            vr.removeNamespace(null);\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc, null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            boolean result = writer.upload(doc);\n            doc = null;\n            if (result)\n              importStatistics.docCount.incrementAndGet();\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n            } else {\n              LOG.error(\"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, SolrInputDocument doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessor entityProcessor = getEntityProcessor(entity, dataImporter.getCore());\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    entityProcessor.init(ctx);\n\n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            if (ctx.getDocSession() != null)\n              ctx.getDocSession().clear();\n            else\n              ctx.setDocSession(new HashMap<String, Object>());\n            doc = new SolrInputDocument();\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name));\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null)\n            break;\n\n          if (arow.containsKey(DOC_BOOST)) {\n            setDocumentBoost(doc, arow);\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (entity.fields != null && doc != null) {\n            addFields(entity, doc, arow);\n          }\n          if (isRoot)\n            vr.removeNamespace(null);\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc, null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            boolean result = writer.upload(doc);\n            doc = null;\n            if (result)\n              importStatistics.docCount.incrementAndGet();\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n            } else {\n              LOG.error(\"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"00e13feee5c0e49640da959c282367763b8bdbde","date":1235044794,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,SolrInputDocument,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,SolrInputDocument,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, SolrInputDocument doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessor entityProcessor = getEntityProcessor(entity, dataImporter.getCore());\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    vr.context = ctx;\n    entityProcessor.init(ctx);\n\n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            if (ctx.getDocSession() != null)\n              ctx.getDocSession().clear();\n            else\n              ctx.setDocSession(new HashMap<String, Object>());\n            doc = new SolrInputDocument();\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name));\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null)\n            break;\n\n          if (arow.containsKey(DOC_BOOST)) {\n            setDocumentBoost(doc, arow);\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n            if (seenDocCount > requestParameters.start + requestParameters.rows)  {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (entity.fields != null && doc != null) {\n            addFields(entity, doc, arow);\n          }\n          if (isRoot)\n            vr.removeNamespace(null);\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc, null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            boolean result = writer.upload(doc);\n            doc = null;\n            if (result)\n              importStatistics.docCount.incrementAndGet();\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n            } else {\n              LOG.error(\"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, SolrInputDocument doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessor entityProcessor = getEntityProcessor(entity, dataImporter.getCore());\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    vr.context = ctx;\n    entityProcessor.init(ctx);\n\n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            if (ctx.getDocSession() != null)\n              ctx.getDocSession().clear();\n            else\n              ctx.setDocSession(new HashMap<String, Object>());\n            doc = new SolrInputDocument();\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name));\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null)\n            break;\n\n          if (arow.containsKey(DOC_BOOST)) {\n            setDocumentBoost(doc, arow);\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (entity.fields != null && doc != null) {\n            addFields(entity, doc, arow);\n          }\n          if (isRoot)\n            vr.removeNamespace(null);\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc, null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            boolean result = writer.upload(doc);\n            doc = null;\n            if (result)\n              importStatistics.docCount.incrementAndGet();\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n            } else {\n              LOG.error(\"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5850c9b195a2c8b5a2ef6d4775d905dfcd1eca1d","date":1235123016,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,SolrInputDocument,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,SolrInputDocument,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, SolrInputDocument doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessor entityProcessor = getEntityProcessor(entity, dataImporter.getCore());\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    vr.context = ctx;\n    entityProcessor.init(ctx);\n\n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            if (ctx.getDocSession() != null)\n              ctx.getDocSession().clear();\n            else\n              ctx.setDocSession(new HashMap<String, Object>());\n            doc = new SolrInputDocument();\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name));\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null)\n            break;\n\n          if (arow.containsKey(DOC_BOOST)) {\n            setDocumentBoost(doc, arow);\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n            if (seenDocCount > requestParameters.start + requestParameters.rows) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (entity.fields != null && doc != null) {\n            addFields(entity, doc, arow);\n          }\n          if (isRoot)\n            vr.removeNamespace(null);\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc, null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            boolean result = writer.upload(doc);\n            doc = null;\n            if (result)\n              importStatistics.docCount.incrementAndGet();\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n            } else {\n              LOG.error(\"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, SolrInputDocument doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessor entityProcessor = getEntityProcessor(entity, dataImporter.getCore());\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    vr.context = ctx;\n    entityProcessor.init(ctx);\n\n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            if (ctx.getDocSession() != null)\n              ctx.getDocSession().clear();\n            else\n              ctx.setDocSession(new HashMap<String, Object>());\n            doc = new SolrInputDocument();\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name));\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null)\n            break;\n\n          if (arow.containsKey(DOC_BOOST)) {\n            setDocumentBoost(doc, arow);\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n            if (seenDocCount > requestParameters.start + requestParameters.rows)  {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (entity.fields != null && doc != null) {\n            addFields(entity, doc, arow);\n          }\n          if (isRoot)\n            vr.removeNamespace(null);\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc, null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            boolean result = writer.upload(doc);\n            doc = null;\n            if (result)\n              importStatistics.docCount.incrementAndGet();\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n            } else {\n              LOG.error(\"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cda565f1dbc96f12de5c399b6d48418f0e79be5","date":1236799070,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,SolrInputDocument,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,SolrInputDocument,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, SolrInputDocument doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessor entityProcessor = getEntityProcessor(entity);\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    vr.context = ctx;\n    entityProcessor.init(ctx);\n\n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            if (ctx.getDocSession() != null)\n              ctx.getDocSession().clear();\n            else\n              ctx.setDocSession(new HashMap<String, Object>());\n            doc = new SolrInputDocument();\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name));\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null)\n            break;\n\n          if (arow.containsKey(DOC_BOOST)) {\n            setDocumentBoost(doc, arow);\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n            if (seenDocCount > requestParameters.start + requestParameters.rows) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (entity.fields != null && doc != null) {\n            addFields(entity, doc, arow);\n          }\n          if (isRoot)\n            vr.removeNamespace(null);\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc, null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            boolean result = writer.upload(doc);\n            doc = null;\n            if (result)\n              importStatistics.docCount.incrementAndGet();\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n            } else {\n              LOG.error(\"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, SolrInputDocument doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessor entityProcessor = getEntityProcessor(entity, dataImporter.getCore());\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    vr.context = ctx;\n    entityProcessor.init(ctx);\n\n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            if (ctx.getDocSession() != null)\n              ctx.getDocSession().clear();\n            else\n              ctx.setDocSession(new HashMap<String, Object>());\n            doc = new SolrInputDocument();\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name));\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null)\n            break;\n\n          if (arow.containsKey(DOC_BOOST)) {\n            setDocumentBoost(doc, arow);\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n            if (seenDocCount > requestParameters.start + requestParameters.rows) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (entity.fields != null && doc != null) {\n            addFields(entity, doc, arow);\n          }\n          if (isRoot)\n            vr.removeNamespace(null);\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc, null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            boolean result = writer.upload(doc);\n            doc = null;\n            if (result)\n              importStatistics.docCount.incrementAndGet();\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n            } else {\n              LOG.error(\"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"be21b70688b510ce9b71baca540e637755819715","date":1237458453,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,SolrInputDocument,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,SolrInputDocument,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, SolrInputDocument doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessor entityProcessor = getEntityProcessor(entity);\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    vr.context = ctx;\n    entityProcessor.init(ctx);\n\n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            if (ctx.getDocSession() != null)\n              ctx.getDocSession().clear();\n            else\n              ctx.setDocSession(new HashMap<String, Object>());\n            doc = new SolrInputDocument();\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name));\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null)\n            break;\n\n          if (arow.containsKey(DOC_BOOST)) {\n            setDocumentBoost(doc, arow);\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n            if (seenDocCount > requestParameters.start + requestParameters.rows) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (entity.fields != null && doc != null) {\n            addFields(entity, doc, arow);\n          }\n          if (isRoot)\n            vr.removeNamespace(null);\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc, null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              doc = null;\n              if (result)\n                importStatistics.docCount.incrementAndGet();\n            }\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n            } else {\n              LOG.error(\"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, SolrInputDocument doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessor entityProcessor = getEntityProcessor(entity);\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    vr.context = ctx;\n    entityProcessor.init(ctx);\n\n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            if (ctx.getDocSession() != null)\n              ctx.getDocSession().clear();\n            else\n              ctx.setDocSession(new HashMap<String, Object>());\n            doc = new SolrInputDocument();\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name));\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null)\n            break;\n\n          if (arow.containsKey(DOC_BOOST)) {\n            setDocumentBoost(doc, arow);\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n            if (seenDocCount > requestParameters.start + requestParameters.rows) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (entity.fields != null && doc != null) {\n            addFields(entity, doc, arow);\n          }\n          if (isRoot)\n            vr.removeNamespace(null);\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc, null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            boolean result = writer.upload(doc);\n            doc = null;\n            if (result)\n              importStatistics.docCount.incrementAndGet();\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n            } else {\n              LOG.error(\"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8388f9c1189f751eac28894de3b56d55286dd5d8","date":1239613259,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,SolrInputDocument,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,SolrInputDocument,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, SolrInputDocument doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessor entityProcessor = getEntityProcessor(entity);\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    vr.context = ctx;\n    entityProcessor.init(ctx);\n\n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            if (ctx.getDocSession() != null)\n              ctx.getDocSession().clear();\n            else\n              ctx.setDocSession(new HashMap<String, Object>());\n            doc = new SolrInputDocument();\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name));\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null)\n            break;\n\n          if (arow.containsKey(DOC_BOOST)) {\n            setDocumentBoost(doc, arow);\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n            if (seenDocCount > requestParameters.start + requestParameters.rows) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow);\n            addFields(entity, doc, arow);\n          }\n          if (isRoot)\n            vr.removeNamespace(null);\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc, null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              doc = null;\n              if (result)\n                importStatistics.docCount.incrementAndGet();\n            }\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n            } else {\n              LOG.error(\"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, SolrInputDocument doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessor entityProcessor = getEntityProcessor(entity);\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    vr.context = ctx;\n    entityProcessor.init(ctx);\n\n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            if (ctx.getDocSession() != null)\n              ctx.getDocSession().clear();\n            else\n              ctx.setDocSession(new HashMap<String, Object>());\n            doc = new SolrInputDocument();\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name));\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null)\n            break;\n\n          if (arow.containsKey(DOC_BOOST)) {\n            setDocumentBoost(doc, arow);\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n            if (seenDocCount > requestParameters.start + requestParameters.rows) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (entity.fields != null && doc != null) {\n            addFields(entity, doc, arow);\n          }\n          if (isRoot)\n            vr.removeNamespace(null);\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc, null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              doc = null;\n              if (result)\n                importStatistics.docCount.incrementAndGet();\n            }\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n            } else {\n              LOG.error(\"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"758fdd153bb361b47f22db79ace6af6f6b7b9330","date":1240213015,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,SolrInputDocument,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,SolrInputDocument,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, SolrInputDocument doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessor entityProcessor = getEntityProcessor(entity);\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    vr.context = ctx;\n    entityProcessor.init(ctx);\n\n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            if (ctx.getDocSession() != null)\n              ctx.getDocSession().clear();\n            else\n              ctx.setDocSession(new HashMap<String, Object>());\n            doc = new SolrInputDocument();\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name));\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null) {\n            entityProcessor.destroy();\n            break;            \n          }\n\n          if (arow.containsKey(DOC_BOOST)) {\n            setDocumentBoost(doc, arow);\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n            if (seenDocCount > requestParameters.start + requestParameters.rows) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow);\n            addFields(entity, doc, arow);\n          }\n          if (isRoot)\n            vr.removeNamespace(null);\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc, null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              doc = null;\n              if (result)\n                importStatistics.docCount.incrementAndGet();\n            }\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n            } else {\n              LOG.error(\"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, SolrInputDocument doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessor entityProcessor = getEntityProcessor(entity);\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    vr.context = ctx;\n    entityProcessor.init(ctx);\n\n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            if (ctx.getDocSession() != null)\n              ctx.getDocSession().clear();\n            else\n              ctx.setDocSession(new HashMap<String, Object>());\n            doc = new SolrInputDocument();\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name));\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null)\n            break;\n\n          if (arow.containsKey(DOC_BOOST)) {\n            setDocumentBoost(doc, arow);\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n            if (seenDocCount > requestParameters.start + requestParameters.rows) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow);\n            addFields(entity, doc, arow);\n          }\n          if (isRoot)\n            vr.removeNamespace(null);\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc, null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              doc = null;\n              if (result)\n                importStatistics.docCount.incrementAndGet();\n            }\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n            } else {\n              LOG.error(\"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"18b5e8b70d18c7d8fb665bb1abd1154166882745","date":1240851346,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,DocWrapper,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,SolrInputDocument,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, DocWrapper doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessorWrapper entityProcessor = getEntityProcessor(entity);\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    vr.context = ctx;\n    entityProcessor.init(ctx);\n\n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name));\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null) {\n            entityProcessor.destroy();\n            break;            \n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n            if (seenDocCount > requestParameters.start + requestParameters.rows) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow, doc);\n            addFields(entity, doc, arow);\n          }\n          if (isRoot)\n            vr.removeNamespace(null);\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc, null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              doc = null;\n              if (result)\n                importStatistics.docCount.incrementAndGet();\n            }\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n            } else {\n              LOG.error(\"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, SolrInputDocument doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessor entityProcessor = getEntityProcessor(entity);\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    vr.context = ctx;\n    entityProcessor.init(ctx);\n\n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            if (ctx.getDocSession() != null)\n              ctx.getDocSession().clear();\n            else\n              ctx.setDocSession(new HashMap<String, Object>());\n            doc = new SolrInputDocument();\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name));\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null) {\n            entityProcessor.destroy();\n            break;            \n          }\n\n          if (arow.containsKey(DOC_BOOST)) {\n            setDocumentBoost(doc, arow);\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n            if (seenDocCount > requestParameters.start + requestParameters.rows) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow);\n            addFields(entity, doc, arow);\n          }\n          if (isRoot)\n            vr.removeNamespace(null);\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc, null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              doc = null;\n              if (result)\n                importStatistics.docCount.incrementAndGet();\n            }\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n            } else {\n              LOG.error(\"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"5850c9b195a2c8b5a2ef6d4775d905dfcd1eca1d":["00e13feee5c0e49640da959c282367763b8bdbde"],"8388f9c1189f751eac28894de3b56d55286dd5d8":["be21b70688b510ce9b71baca540e637755819715"],"00e13feee5c0e49640da959c282367763b8bdbde":["a6790eacb669f6201b7b8dc4e0f342f2262592aa"],"be21b70688b510ce9b71baca540e637755819715":["1cda565f1dbc96f12de5c399b6d48418f0e79be5"],"a6790eacb669f6201b7b8dc4e0f342f2262592aa":["35d71c83578c6e08733e7a584ca744c7c66d60a6"],"18b5e8b70d18c7d8fb665bb1abd1154166882745":["758fdd153bb361b47f22db79ace6af6f6b7b9330"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7dfc8d8c033e2239995c45b976c90c18559da31e":["9c2d909a1a598832c7b19a641282afc434d521e0"],"758fdd153bb361b47f22db79ace6af6f6b7b9330":["8388f9c1189f751eac28894de3b56d55286dd5d8"],"9c2d909a1a598832c7b19a641282afc434d521e0":["33c5df47ecbf734182bdfec8f59154a8dbecc2e3"],"1cda565f1dbc96f12de5c399b6d48418f0e79be5":["5850c9b195a2c8b5a2ef6d4775d905dfcd1eca1d"],"35d71c83578c6e08733e7a584ca744c7c66d60a6":["7dfc8d8c033e2239995c45b976c90c18559da31e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"29df09ecb6b96d58f34447be89f88a0c067fb3a9":["157728c1f42b384dfc049157cc95adc767da3415"],"33c5df47ecbf734182bdfec8f59154a8dbecc2e3":["29df09ecb6b96d58f34447be89f88a0c067fb3a9"],"157728c1f42b384dfc049157cc95adc767da3415":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5850c9b195a2c8b5a2ef6d4775d905dfcd1eca1d":["1cda565f1dbc96f12de5c399b6d48418f0e79be5"],"00e13feee5c0e49640da959c282367763b8bdbde":["5850c9b195a2c8b5a2ef6d4775d905dfcd1eca1d"],"8388f9c1189f751eac28894de3b56d55286dd5d8":["758fdd153bb361b47f22db79ace6af6f6b7b9330"],"be21b70688b510ce9b71baca540e637755819715":["8388f9c1189f751eac28894de3b56d55286dd5d8"],"a6790eacb669f6201b7b8dc4e0f342f2262592aa":["00e13feee5c0e49640da959c282367763b8bdbde"],"18b5e8b70d18c7d8fb665bb1abd1154166882745":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["157728c1f42b384dfc049157cc95adc767da3415"],"7dfc8d8c033e2239995c45b976c90c18559da31e":["35d71c83578c6e08733e7a584ca744c7c66d60a6"],"758fdd153bb361b47f22db79ace6af6f6b7b9330":["18b5e8b70d18c7d8fb665bb1abd1154166882745"],"9c2d909a1a598832c7b19a641282afc434d521e0":["7dfc8d8c033e2239995c45b976c90c18559da31e"],"1cda565f1dbc96f12de5c399b6d48418f0e79be5":["be21b70688b510ce9b71baca540e637755819715"],"35d71c83578c6e08733e7a584ca744c7c66d60a6":["a6790eacb669f6201b7b8dc4e0f342f2262592aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29df09ecb6b96d58f34447be89f88a0c067fb3a9":["33c5df47ecbf734182bdfec8f59154a8dbecc2e3"],"33c5df47ecbf734182bdfec8f59154a8dbecc2e3":["9c2d909a1a598832c7b19a641282afc434d521e0"],"157728c1f42b384dfc049157cc95adc767da3415":["29df09ecb6b96d58f34447be89f88a0c067fb3a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["18b5e8b70d18c7d8fb665bb1abd1154166882745","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}