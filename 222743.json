{"path":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleSplitShardAction(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"0beaed456aa3358e5e4a99ea2aea994ef6c81de3","date":1365434191,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleSplitShardAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  private void handleSplitShardAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.info(\"Splitting shard : \" + req.getParamString());\n    String name = req.getParams().required().get(\"collection\");\n    // TODO : add support for multiple shards\n    String shard = req.getParams().required().get(\"shard\");\n    // TODO : add support for shard range\n\n    Map<String,Object> props = new HashMap<String,Object>();\n    props.put(Overseer.QUEUE_OPERATION, OverseerCollectionProcessor.SPLITSHARD);\n    props.put(\"collection\", name);\n    props.put(ZkStateReader.SHARD_ID_PROP, shard);\n\n    ZkNodeProps m = new ZkNodeProps(props);\n\n    // todo remove this hack\n    DEFAULT_ZK_TIMEOUT *= 5;\n    handleResponse(OverseerCollectionProcessor.SPLITSHARD, m, rsp);\n    DEFAULT_ZK_TIMEOUT /= 5;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ee5a5186e7187cd42c6f7ff64b6e7206a780325","date":1372914261,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleSplitShardAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleSplitShardAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleSplitShardAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.info(\"Splitting shard : \" + req.getParamString());\n    String name = req.getParams().required().get(\"collection\");\n    // TODO : add support for multiple shards\n    String shard = req.getParams().required().get(\"shard\");\n    // TODO : add support for shard range\n\n    Map<String,Object> props = new HashMap<String,Object>();\n    props.put(Overseer.QUEUE_OPERATION, OverseerCollectionProcessor.SPLITSHARD);\n    props.put(\"collection\", name);\n    props.put(ZkStateReader.SHARD_ID_PROP, shard);\n\n    ZkNodeProps m = new ZkNodeProps(props);\n\n    handleResponse(OverseerCollectionProcessor.SPLITSHARD, m, rsp, DEFAULT_ZK_TIMEOUT * 5);\n  }\n\n","sourceOld":"  private void handleSplitShardAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.info(\"Splitting shard : \" + req.getParamString());\n    String name = req.getParams().required().get(\"collection\");\n    // TODO : add support for multiple shards\n    String shard = req.getParams().required().get(\"shard\");\n    // TODO : add support for shard range\n\n    Map<String,Object> props = new HashMap<String,Object>();\n    props.put(Overseer.QUEUE_OPERATION, OverseerCollectionProcessor.SPLITSHARD);\n    props.put(\"collection\", name);\n    props.put(ZkStateReader.SHARD_ID_PROP, shard);\n\n    ZkNodeProps m = new ZkNodeProps(props);\n\n    // todo remove this hack\n    DEFAULT_ZK_TIMEOUT *= 5;\n    handleResponse(OverseerCollectionProcessor.SPLITSHARD, m, rsp);\n    DEFAULT_ZK_TIMEOUT /= 5;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleSplitShardAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleSplitShardAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleSplitShardAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.info(\"Splitting shard : \" + req.getParamString());\n    String name = req.getParams().required().get(\"collection\");\n    // TODO : add support for multiple shards\n    String shard = req.getParams().required().get(\"shard\");\n    // TODO : add support for shard range\n\n    Map<String,Object> props = new HashMap<String,Object>();\n    props.put(Overseer.QUEUE_OPERATION, OverseerCollectionProcessor.SPLITSHARD);\n    props.put(\"collection\", name);\n    props.put(ZkStateReader.SHARD_ID_PROP, shard);\n\n    ZkNodeProps m = new ZkNodeProps(props);\n\n    handleResponse(OverseerCollectionProcessor.SPLITSHARD, m, rsp, DEFAULT_ZK_TIMEOUT * 5);\n  }\n\n","sourceOld":"  private void handleSplitShardAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.info(\"Splitting shard : \" + req.getParamString());\n    String name = req.getParams().required().get(\"collection\");\n    // TODO : add support for multiple shards\n    String shard = req.getParams().required().get(\"shard\");\n    // TODO : add support for shard range\n\n    Map<String,Object> props = new HashMap<String,Object>();\n    props.put(Overseer.QUEUE_OPERATION, OverseerCollectionProcessor.SPLITSHARD);\n    props.put(\"collection\", name);\n    props.put(ZkStateReader.SHARD_ID_PROP, shard);\n\n    ZkNodeProps m = new ZkNodeProps(props);\n\n    // todo remove this hack\n    DEFAULT_ZK_TIMEOUT *= 5;\n    handleResponse(OverseerCollectionProcessor.SPLITSHARD, m, rsp);\n    DEFAULT_ZK_TIMEOUT /= 5;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e73db80cda3387e197641256d964f8c1c3992c7","date":1380978036,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleSplitShardAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleSplitShardAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleSplitShardAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.info(\"Splitting shard : \" + req.getParamString());\n    String name = req.getParams().required().get(\"collection\");\n    // TODO : add support for multiple shards\n    String shard = req.getParams().required().get(\"shard\");\n    String rangesStr = req.getParams().get(CoreAdminParams.RANGES);\n\n    Map<String,Object> props = new HashMap<String,Object>();\n    props.put(Overseer.QUEUE_OPERATION, OverseerCollectionProcessor.SPLITSHARD);\n    props.put(\"collection\", name);\n    props.put(ZkStateReader.SHARD_ID_PROP, shard);\n    if (rangesStr != null)  {\n      props.put(CoreAdminParams.RANGES, rangesStr);\n    }\n\n    ZkNodeProps m = new ZkNodeProps(props);\n\n    handleResponse(OverseerCollectionProcessor.SPLITSHARD, m, rsp, DEFAULT_ZK_TIMEOUT * 5);\n  }\n\n","sourceOld":"  private void handleSplitShardAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.info(\"Splitting shard : \" + req.getParamString());\n    String name = req.getParams().required().get(\"collection\");\n    // TODO : add support for multiple shards\n    String shard = req.getParams().required().get(\"shard\");\n    // TODO : add support for shard range\n\n    Map<String,Object> props = new HashMap<String,Object>();\n    props.put(Overseer.QUEUE_OPERATION, OverseerCollectionProcessor.SPLITSHARD);\n    props.put(\"collection\", name);\n    props.put(ZkStateReader.SHARD_ID_PROP, shard);\n\n    ZkNodeProps m = new ZkNodeProps(props);\n\n    handleResponse(OverseerCollectionProcessor.SPLITSHARD, m, rsp, DEFAULT_ZK_TIMEOUT * 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9d5abf772262a05c74afddcadc95c4bdab07f1f","date":1381747682,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleSplitShardAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleSplitShardAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleSplitShardAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.info(\"Splitting shard : \" + req.getParamString());\n    String name = req.getParams().required().get(\"collection\");\n    // TODO : add support for multiple shards\n    String shard = req.getParams().get(\"shard\");\n    String rangesStr = req.getParams().get(CoreAdminParams.RANGES);\n    String splitKey = req.getParams().get(\"split.key\");\n\n    if (splitKey == null && shard == null) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Missing required parameter: shard\");\n    }\n    if (splitKey != null && shard != null)  {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n          \"Only one of 'shard' or 'split.key' should be specified\");\n    }\n    if (splitKey != null && rangesStr != null)  {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n          \"Only one of 'ranges' or 'split.key' should be specified\");\n    }\n\n    Map<String,Object> props = new HashMap<String,Object>();\n    props.put(Overseer.QUEUE_OPERATION, OverseerCollectionProcessor.SPLITSHARD);\n    props.put(\"collection\", name);\n    if (shard != null)  {\n      props.put(ZkStateReader.SHARD_ID_PROP, shard);\n    }\n    if (splitKey != null) {\n      props.put(\"split.key\", splitKey);\n    }\n    if (rangesStr != null)  {\n      props.put(CoreAdminParams.RANGES, rangesStr);\n    }\n\n    ZkNodeProps m = new ZkNodeProps(props);\n\n    handleResponse(OverseerCollectionProcessor.SPLITSHARD, m, rsp, DEFAULT_ZK_TIMEOUT * 5);\n  }\n\n","sourceOld":"  private void handleSplitShardAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.info(\"Splitting shard : \" + req.getParamString());\n    String name = req.getParams().required().get(\"collection\");\n    // TODO : add support for multiple shards\n    String shard = req.getParams().required().get(\"shard\");\n    String rangesStr = req.getParams().get(CoreAdminParams.RANGES);\n\n    Map<String,Object> props = new HashMap<String,Object>();\n    props.put(Overseer.QUEUE_OPERATION, OverseerCollectionProcessor.SPLITSHARD);\n    props.put(\"collection\", name);\n    props.put(ZkStateReader.SHARD_ID_PROP, shard);\n    if (rangesStr != null)  {\n      props.put(CoreAdminParams.RANGES, rangesStr);\n    }\n\n    ZkNodeProps m = new ZkNodeProps(props);\n\n    handleResponse(OverseerCollectionProcessor.SPLITSHARD, m, rsp, DEFAULT_ZK_TIMEOUT * 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b711ca2887ae3fda68611cbb78c1b389fa9833be","date":1384985717,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleSplitShardAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleSplitShardAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleSplitShardAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.info(\"Splitting shard : \" + req.getParamString());\n    String name = req.getParams().required().get(\"collection\");\n    // TODO : add support for multiple shards\n    String shard = req.getParams().get(\"shard\");\n    String rangesStr = req.getParams().get(CoreAdminParams.RANGES);\n    String splitKey = req.getParams().get(\"split.key\");\n\n    if (splitKey == null && shard == null) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Missing required parameter: shard\");\n    }\n    if (splitKey != null && shard != null)  {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n          \"Only one of 'shard' or 'split.key' should be specified\");\n    }\n    if (splitKey != null && rangesStr != null)  {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n          \"Only one of 'ranges' or 'split.key' should be specified\");\n    }\n\n    Map<String,Object> props = new HashMap<String,Object>();\n    props.put(Overseer.QUEUE_OPERATION, OverseerCollectionProcessor.SPLITSHARD);\n    props.put(\"collection\", name);\n    if (shard != null)  {\n      props.put(ZkStateReader.SHARD_ID_PROP, shard);\n    }\n    if (splitKey != null) {\n      props.put(\"split.key\", splitKey);\n    }\n    if (rangesStr != null)  {\n      props.put(CoreAdminParams.RANGES, rangesStr);\n    }\n    copyPropertiesIfNotNull(req.getParams(), props);\n\n    ZkNodeProps m = new ZkNodeProps(props);\n\n    handleResponse(OverseerCollectionProcessor.SPLITSHARD, m, rsp, DEFAULT_ZK_TIMEOUT * 5);\n  }\n\n","sourceOld":"  private void handleSplitShardAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.info(\"Splitting shard : \" + req.getParamString());\n    String name = req.getParams().required().get(\"collection\");\n    // TODO : add support for multiple shards\n    String shard = req.getParams().get(\"shard\");\n    String rangesStr = req.getParams().get(CoreAdminParams.RANGES);\n    String splitKey = req.getParams().get(\"split.key\");\n\n    if (splitKey == null && shard == null) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Missing required parameter: shard\");\n    }\n    if (splitKey != null && shard != null)  {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n          \"Only one of 'shard' or 'split.key' should be specified\");\n    }\n    if (splitKey != null && rangesStr != null)  {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n          \"Only one of 'ranges' or 'split.key' should be specified\");\n    }\n\n    Map<String,Object> props = new HashMap<String,Object>();\n    props.put(Overseer.QUEUE_OPERATION, OverseerCollectionProcessor.SPLITSHARD);\n    props.put(\"collection\", name);\n    if (shard != null)  {\n      props.put(ZkStateReader.SHARD_ID_PROP, shard);\n    }\n    if (splitKey != null) {\n      props.put(\"split.key\", splitKey);\n    }\n    if (rangesStr != null)  {\n      props.put(CoreAdminParams.RANGES, rangesStr);\n    }\n\n    ZkNodeProps m = new ZkNodeProps(props);\n\n    handleResponse(OverseerCollectionProcessor.SPLITSHARD, m, rsp, DEFAULT_ZK_TIMEOUT * 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleSplitShardAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleSplitShardAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleSplitShardAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.info(\"Splitting shard : \" + req.getParamString());\n    String name = req.getParams().required().get(\"collection\");\n    // TODO : add support for multiple shards\n    String shard = req.getParams().get(\"shard\");\n    String rangesStr = req.getParams().get(CoreAdminParams.RANGES);\n    String splitKey = req.getParams().get(\"split.key\");\n\n    if (splitKey == null && shard == null) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Missing required parameter: shard\");\n    }\n    if (splitKey != null && shard != null)  {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n          \"Only one of 'shard' or 'split.key' should be specified\");\n    }\n    if (splitKey != null && rangesStr != null)  {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n          \"Only one of 'ranges' or 'split.key' should be specified\");\n    }\n\n    Map<String,Object> props = new HashMap<String,Object>();\n    props.put(Overseer.QUEUE_OPERATION, OverseerCollectionProcessor.SPLITSHARD);\n    props.put(\"collection\", name);\n    if (shard != null)  {\n      props.put(ZkStateReader.SHARD_ID_PROP, shard);\n    }\n    if (splitKey != null) {\n      props.put(\"split.key\", splitKey);\n    }\n    if (rangesStr != null)  {\n      props.put(CoreAdminParams.RANGES, rangesStr);\n    }\n    copyPropertiesIfNotNull(req.getParams(), props);\n\n    ZkNodeProps m = new ZkNodeProps(props);\n\n    handleResponse(OverseerCollectionProcessor.SPLITSHARD, m, rsp, DEFAULT_ZK_TIMEOUT * 5);\n  }\n\n","sourceOld":"  private void handleSplitShardAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.info(\"Splitting shard : \" + req.getParamString());\n    String name = req.getParams().required().get(\"collection\");\n    // TODO : add support for multiple shards\n    String shard = req.getParams().get(\"shard\");\n    String rangesStr = req.getParams().get(CoreAdminParams.RANGES);\n    String splitKey = req.getParams().get(\"split.key\");\n\n    if (splitKey == null && shard == null) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Missing required parameter: shard\");\n    }\n    if (splitKey != null && shard != null)  {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n          \"Only one of 'shard' or 'split.key' should be specified\");\n    }\n    if (splitKey != null && rangesStr != null)  {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n          \"Only one of 'ranges' or 'split.key' should be specified\");\n    }\n\n    Map<String,Object> props = new HashMap<String,Object>();\n    props.put(Overseer.QUEUE_OPERATION, OverseerCollectionProcessor.SPLITSHARD);\n    props.put(\"collection\", name);\n    if (shard != null)  {\n      props.put(ZkStateReader.SHARD_ID_PROP, shard);\n    }\n    if (splitKey != null) {\n      props.put(\"split.key\", splitKey);\n    }\n    if (rangesStr != null)  {\n      props.put(CoreAdminParams.RANGES, rangesStr);\n    }\n\n    ZkNodeProps m = new ZkNodeProps(props);\n\n    handleResponse(OverseerCollectionProcessor.SPLITSHARD, m, rsp, DEFAULT_ZK_TIMEOUT * 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleSplitShardAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleSplitShardAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleSplitShardAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.info(\"Splitting shard : \" + req.getParamString());\n    String name = req.getParams().required().get(\"collection\");\n    // TODO : add support for multiple shards\n    String shard = req.getParams().get(\"shard\");\n    String rangesStr = req.getParams().get(CoreAdminParams.RANGES);\n    String splitKey = req.getParams().get(\"split.key\");\n\n    if (splitKey == null && shard == null) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Missing required parameter: shard\");\n    }\n    if (splitKey != null && shard != null)  {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n          \"Only one of 'shard' or 'split.key' should be specified\");\n    }\n    if (splitKey != null && rangesStr != null)  {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n          \"Only one of 'ranges' or 'split.key' should be specified\");\n    }\n\n    Map<String,Object> props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, OverseerCollectionProcessor.SPLITSHARD);\n    props.put(\"collection\", name);\n    if (shard != null)  {\n      props.put(ZkStateReader.SHARD_ID_PROP, shard);\n    }\n    if (splitKey != null) {\n      props.put(\"split.key\", splitKey);\n    }\n    if (rangesStr != null)  {\n      props.put(CoreAdminParams.RANGES, rangesStr);\n    }\n    copyPropertiesIfNotNull(req.getParams(), props);\n\n    ZkNodeProps m = new ZkNodeProps(props);\n\n    handleResponse(OverseerCollectionProcessor.SPLITSHARD, m, rsp, DEFAULT_ZK_TIMEOUT * 5);\n  }\n\n","sourceOld":"  private void handleSplitShardAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.info(\"Splitting shard : \" + req.getParamString());\n    String name = req.getParams().required().get(\"collection\");\n    // TODO : add support for multiple shards\n    String shard = req.getParams().get(\"shard\");\n    String rangesStr = req.getParams().get(CoreAdminParams.RANGES);\n    String splitKey = req.getParams().get(\"split.key\");\n\n    if (splitKey == null && shard == null) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Missing required parameter: shard\");\n    }\n    if (splitKey != null && shard != null)  {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n          \"Only one of 'shard' or 'split.key' should be specified\");\n    }\n    if (splitKey != null && rangesStr != null)  {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n          \"Only one of 'ranges' or 'split.key' should be specified\");\n    }\n\n    Map<String,Object> props = new HashMap<String,Object>();\n    props.put(Overseer.QUEUE_OPERATION, OverseerCollectionProcessor.SPLITSHARD);\n    props.put(\"collection\", name);\n    if (shard != null)  {\n      props.put(ZkStateReader.SHARD_ID_PROP, shard);\n    }\n    if (splitKey != null) {\n      props.put(\"split.key\", splitKey);\n    }\n    if (rangesStr != null)  {\n      props.put(CoreAdminParams.RANGES, rangesStr);\n    }\n    copyPropertiesIfNotNull(req.getParams(), props);\n\n    ZkNodeProps m = new ZkNodeProps(props);\n\n    handleResponse(OverseerCollectionProcessor.SPLITSHARD, m, rsp, DEFAULT_ZK_TIMEOUT * 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"058f5a3debcfa0ea477da3eabb4cbe2ec0fac211","date":1394784078,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleSplitShardAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleSplitShardAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleSplitShardAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.info(\"Splitting shard : \" + req.getParamString());\n    String name = req.getParams().required().get(\"collection\");\n    // TODO : add support for multiple shards\n    String shard = req.getParams().get(\"shard\");\n    String rangesStr = req.getParams().get(CoreAdminParams.RANGES);\n    String splitKey = req.getParams().get(\"split.key\");\n\n    if (splitKey == null && shard == null) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Missing required parameter: shard\");\n    }\n    if (splitKey != null && shard != null)  {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n          \"Only one of 'shard' or 'split.key' should be specified\");\n    }\n    if (splitKey != null && rangesStr != null)  {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n          \"Only one of 'ranges' or 'split.key' should be specified\");\n    }\n\n    Map<String,Object> props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, OverseerCollectionProcessor.SPLITSHARD);\n    props.put(\"collection\", name);\n    if (shard != null)  {\n      props.put(ZkStateReader.SHARD_ID_PROP, shard);\n    }\n    if (splitKey != null) {\n      props.put(\"split.key\", splitKey);\n    }\n    if (rangesStr != null)  {\n      props.put(CoreAdminParams.RANGES, rangesStr);\n    }\n\n    if (req.getParams().get(ASYNC) != null)\n      props.put(ASYNC, req.getParams().get(ASYNC));\n\n    copyPropertiesIfNotNull(req.getParams(), props);\n\n    ZkNodeProps m = new ZkNodeProps(props);\n\n    handleResponse(OverseerCollectionProcessor.SPLITSHARD, m, rsp, DEFAULT_ZK_TIMEOUT * 5);\n  }\n\n","sourceOld":"  private void handleSplitShardAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.info(\"Splitting shard : \" + req.getParamString());\n    String name = req.getParams().required().get(\"collection\");\n    // TODO : add support for multiple shards\n    String shard = req.getParams().get(\"shard\");\n    String rangesStr = req.getParams().get(CoreAdminParams.RANGES);\n    String splitKey = req.getParams().get(\"split.key\");\n\n    if (splitKey == null && shard == null) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Missing required parameter: shard\");\n    }\n    if (splitKey != null && shard != null)  {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n          \"Only one of 'shard' or 'split.key' should be specified\");\n    }\n    if (splitKey != null && rangesStr != null)  {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n          \"Only one of 'ranges' or 'split.key' should be specified\");\n    }\n\n    Map<String,Object> props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, OverseerCollectionProcessor.SPLITSHARD);\n    props.put(\"collection\", name);\n    if (shard != null)  {\n      props.put(ZkStateReader.SHARD_ID_PROP, shard);\n    }\n    if (splitKey != null) {\n      props.put(\"split.key\", splitKey);\n    }\n    if (rangesStr != null)  {\n      props.put(CoreAdminParams.RANGES, rangesStr);\n    }\n    copyPropertiesIfNotNull(req.getParams(), props);\n\n    ZkNodeProps m = new ZkNodeProps(props);\n\n    handleResponse(OverseerCollectionProcessor.SPLITSHARD, m, rsp, DEFAULT_ZK_TIMEOUT * 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c688f7052130cef7bd419c85e3c5be214f7b9e","date":1411018984,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleSplitShardAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleSplitShardAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleSplitShardAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.info(\"Splitting shard : \" + req.getParamString());\n    String name = req.getParams().required().get(\"collection\");\n    // TODO : add support for multiple shards\n    String shard = req.getParams().get(\"shard\");\n    String rangesStr = req.getParams().get(CoreAdminParams.RANGES);\n    String splitKey = req.getParams().get(\"split.key\");\n\n    if (splitKey == null && shard == null) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Missing required parameter: shard\");\n    }\n    if (splitKey != null && shard != null)  {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n          \"Only one of 'shard' or 'split.key' should be specified\");\n    }\n    if (splitKey != null && rangesStr != null)  {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n          \"Only one of 'ranges' or 'split.key' should be specified\");\n    }\n\n    Map<String,Object> props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, SPLITSHARD.toLower());\n    props.put(\"collection\", name);\n    if (shard != null)  {\n      props.put(ZkStateReader.SHARD_ID_PROP, shard);\n    }\n    if (splitKey != null) {\n      props.put(\"split.key\", splitKey);\n    }\n    if (rangesStr != null)  {\n      props.put(CoreAdminParams.RANGES, rangesStr);\n    }\n\n    if (req.getParams().get(ASYNC) != null)\n      props.put(ASYNC, req.getParams().get(ASYNC));\n\n    copyPropertiesIfNotNull(req.getParams(), props);\n\n    ZkNodeProps m = new ZkNodeProps(props);\n\n    handleResponse(SPLITSHARD.toLower(), m, rsp, DEFAULT_ZK_TIMEOUT * 5);\n  }\n\n","sourceOld":"  private void handleSplitShardAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.info(\"Splitting shard : \" + req.getParamString());\n    String name = req.getParams().required().get(\"collection\");\n    // TODO : add support for multiple shards\n    String shard = req.getParams().get(\"shard\");\n    String rangesStr = req.getParams().get(CoreAdminParams.RANGES);\n    String splitKey = req.getParams().get(\"split.key\");\n\n    if (splitKey == null && shard == null) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Missing required parameter: shard\");\n    }\n    if (splitKey != null && shard != null)  {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n          \"Only one of 'shard' or 'split.key' should be specified\");\n    }\n    if (splitKey != null && rangesStr != null)  {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n          \"Only one of 'ranges' or 'split.key' should be specified\");\n    }\n\n    Map<String,Object> props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, OverseerCollectionProcessor.SPLITSHARD);\n    props.put(\"collection\", name);\n    if (shard != null)  {\n      props.put(ZkStateReader.SHARD_ID_PROP, shard);\n    }\n    if (splitKey != null) {\n      props.put(\"split.key\", splitKey);\n    }\n    if (rangesStr != null)  {\n      props.put(CoreAdminParams.RANGES, rangesStr);\n    }\n\n    if (req.getParams().get(ASYNC) != null)\n      props.put(ASYNC, req.getParams().get(ASYNC));\n\n    copyPropertiesIfNotNull(req.getParams(), props);\n\n    ZkNodeProps m = new ZkNodeProps(props);\n\n    handleResponse(OverseerCollectionProcessor.SPLITSHARD, m, rsp, DEFAULT_ZK_TIMEOUT * 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ebd3a557326ef3eab85b73a8cff781f7d801248","date":1431620752,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleSplitShardAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  private void handleSplitShardAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.info(\"Splitting shard : \" + req.getParamString());\n    String name = req.getParams().required().get(\"collection\");\n    // TODO : add support for multiple shards\n    String shard = req.getParams().get(\"shard\");\n    String rangesStr = req.getParams().get(CoreAdminParams.RANGES);\n    String splitKey = req.getParams().get(\"split.key\");\n\n    if (splitKey == null && shard == null) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Missing required parameter: shard\");\n    }\n    if (splitKey != null && shard != null)  {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n          \"Only one of 'shard' or 'split.key' should be specified\");\n    }\n    if (splitKey != null && rangesStr != null)  {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n          \"Only one of 'ranges' or 'split.key' should be specified\");\n    }\n\n    Map<String,Object> props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, SPLITSHARD.toLower());\n    props.put(\"collection\", name);\n    if (shard != null)  {\n      props.put(ZkStateReader.SHARD_ID_PROP, shard);\n    }\n    if (splitKey != null) {\n      props.put(\"split.key\", splitKey);\n    }\n    if (rangesStr != null)  {\n      props.put(CoreAdminParams.RANGES, rangesStr);\n    }\n\n    if (req.getParams().get(ASYNC) != null)\n      props.put(ASYNC, req.getParams().get(ASYNC));\n\n    copyPropertiesIfNotNull(req.getParams(), props);\n\n    ZkNodeProps m = new ZkNodeProps(props);\n\n    handleResponse(SPLITSHARD.toLower(), m, rsp, DEFAULT_ZK_TIMEOUT * 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b711ca2887ae3fda68611cbb78c1b389fa9833be"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["0beaed456aa3358e5e4a99ea2aea994ef6c81de3","4ee5a5186e7187cd42c6f7ff64b6e7206a780325"],"058f5a3debcfa0ea477da3eabb4cbe2ec0fac211":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"9ebd3a557326ef3eab85b73a8cff781f7d801248":["30c688f7052130cef7bd419c85e3c5be214f7b9e"],"0beaed456aa3358e5e4a99ea2aea994ef6c81de3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"30c688f7052130cef7bd419c85e3c5be214f7b9e":["058f5a3debcfa0ea477da3eabb4cbe2ec0fac211"],"b711ca2887ae3fda68611cbb78c1b389fa9833be":["d9d5abf772262a05c74afddcadc95c4bdab07f1f"],"2e73db80cda3387e197641256d964f8c1c3992c7":["4ee5a5186e7187cd42c6f7ff64b6e7206a780325"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d9d5abf772262a05c74afddcadc95c4bdab07f1f":["2e73db80cda3387e197641256d964f8c1c3992c7"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["d9d5abf772262a05c74afddcadc95c4bdab07f1f","b711ca2887ae3fda68611cbb78c1b389fa9833be"],"4ee5a5186e7187cd42c6f7ff64b6e7206a780325":["0beaed456aa3358e5e4a99ea2aea994ef6c81de3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ebd3a557326ef3eab85b73a8cff781f7d801248"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["058f5a3debcfa0ea477da3eabb4cbe2ec0fac211"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"058f5a3debcfa0ea477da3eabb4cbe2ec0fac211":["30c688f7052130cef7bd419c85e3c5be214f7b9e"],"9ebd3a557326ef3eab85b73a8cff781f7d801248":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0beaed456aa3358e5e4a99ea2aea994ef6c81de3":["37a0f60745e53927c4c876cfe5b5a58170f0646c","4ee5a5186e7187cd42c6f7ff64b6e7206a780325"],"b711ca2887ae3fda68611cbb78c1b389fa9833be":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"30c688f7052130cef7bd419c85e3c5be214f7b9e":["9ebd3a557326ef3eab85b73a8cff781f7d801248"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0beaed456aa3358e5e4a99ea2aea994ef6c81de3"],"2e73db80cda3387e197641256d964f8c1c3992c7":["d9d5abf772262a05c74afddcadc95c4bdab07f1f"],"d9d5abf772262a05c74afddcadc95c4bdab07f1f":["b711ca2887ae3fda68611cbb78c1b389fa9833be","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"4ee5a5186e7187cd42c6f7ff64b6e7206a780325":["37a0f60745e53927c4c876cfe5b5a58170f0646c","2e73db80cda3387e197641256d964f8c1c3992c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}