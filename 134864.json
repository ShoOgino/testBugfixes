{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#measure(Callable[Integer]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#measure(Callable[Integer]).mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#measure(Callable[Integer]).mjava","sourceNew":"  /**\n   * Do the measurements.\n   */\n  private BenchmarkResult measure(Callable<Integer> callable) {\n    final double NANOS_PER_MS = 1000000;\n\n    try {\n      List<Double> times = new ArrayList<Double>();\n      for (int i = 0; i < warmup + rounds; i++) {\n          final long start = System.nanoTime();\n          guard = callable.call().intValue();\n          times.add((System.nanoTime() - start) / NANOS_PER_MS);\n      }\n      return new BenchmarkResult(times, warmup, rounds);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Do the measurements.\n   */\n  private BenchmarkResult measure(Callable<Integer> callable) {\n    final double NANOS_PER_MS = 1000000;\n\n    try {\n      List<Double> times = new ArrayList<Double>();\n      for (int i = 0; i < warmup + rounds; i++) {\n          final long start = System.nanoTime();\n          guard = callable.call().intValue();\n          times.add((System.nanoTime() - start) / NANOS_PER_MS);\n      }\n      return new BenchmarkResult(times, warmup, rounds);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc41b743423981e7ec17a024ce7e107096e472fe","date":1349975327,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#measure(Callable[Integer]).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#measure(Callable[Integer]).mjava","sourceNew":"  /**\n   * Do the measurements.\n   */\n  private BenchmarkResult measure(Callable<Integer> callable) {\n    final double NANOS_PER_MS = 1000000;\n\n    try {\n      List<Double> times = new ArrayList<Double>();\n      for (int i = 0; i < warmup + rounds; i++) {\n          final long start = System.nanoTime();\n          guard = callable.call().intValue();\n          times.add((System.nanoTime() - start) / NANOS_PER_MS);\n      }\n      return new BenchmarkResult(times, warmup, rounds);\n    } catch (Exception e) {\n      e.printStackTrace();\n      throw new RuntimeException(e);\n      \n    }\n  }\n\n","sourceOld":"  /**\n   * Do the measurements.\n   */\n  private BenchmarkResult measure(Callable<Integer> callable) {\n    final double NANOS_PER_MS = 1000000;\n\n    try {\n      List<Double> times = new ArrayList<Double>();\n      for (int i = 0; i < warmup + rounds; i++) {\n          final long start = System.nanoTime();\n          guard = callable.call().intValue();\n          times.add((System.nanoTime() - start) / NANOS_PER_MS);\n      }\n      return new BenchmarkResult(times, warmup, rounds);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b","date":1351615637,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#measure(Callable[Integer]).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#measure(Callable[Integer]).mjava","sourceNew":"  /**\n   * Do the measurements.\n   */\n  private BenchmarkResult measure(Callable<Integer> callable) {\n    final double NANOS_PER_MS = 1000000;\n\n    try {\n      List<Double> times = new ArrayList<Double>();\n      for (int i = 0; i < warmup + rounds; i++) {\n          final long start = System.nanoTime();\n          guard = callable.call().intValue();\n          times.add((System.nanoTime() - start) / NANOS_PER_MS);\n      }\n      return new BenchmarkResult(times, warmup, rounds);\n    } catch (Exception e) {\n      e.printStackTrace();\n      throw new RuntimeException(e);\n      \n    }\n  }\n\n","sourceOld":"  /**\n   * Do the measurements.\n   */\n  private BenchmarkResult measure(Callable<Integer> callable) {\n    final double NANOS_PER_MS = 1000000;\n\n    try {\n      List<Double> times = new ArrayList<Double>();\n      for (int i = 0; i < warmup + rounds; i++) {\n          final long start = System.nanoTime();\n          guard = callable.call().intValue();\n          times.add((System.nanoTime() - start) / NANOS_PER_MS);\n      }\n      return new BenchmarkResult(times, warmup, rounds);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#measure(Callable[Integer]).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#measure(Callable[Integer]).mjava","sourceNew":"  /**\n   * Do the measurements.\n   */\n  private BenchmarkResult measure(Callable<Integer> callable) {\n    final double NANOS_PER_MS = 1000000;\n\n    try {\n      List<Double> times = new ArrayList<>();\n      for (int i = 0; i < warmup + rounds; i++) {\n          final long start = System.nanoTime();\n          guard = callable.call().intValue();\n          times.add((System.nanoTime() - start) / NANOS_PER_MS);\n      }\n      return new BenchmarkResult(times, warmup, rounds);\n    } catch (Exception e) {\n      e.printStackTrace();\n      throw new RuntimeException(e);\n      \n    }\n  }\n\n","sourceOld":"  /**\n   * Do the measurements.\n   */\n  private BenchmarkResult measure(Callable<Integer> callable) {\n    final double NANOS_PER_MS = 1000000;\n\n    try {\n      List<Double> times = new ArrayList<Double>();\n      for (int i = 0; i < warmup + rounds; i++) {\n          final long start = System.nanoTime();\n          guard = callable.call().intValue();\n          times.add((System.nanoTime() - start) / NANOS_PER_MS);\n      }\n      return new BenchmarkResult(times, warmup, rounds);\n    } catch (Exception e) {\n      e.printStackTrace();\n      throw new RuntimeException(e);\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","cc41b743423981e7ec17a024ce7e107096e472fe"],"cc41b743423981e7ec17a024ce7e107096e472fe":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b","cc41b743423981e7ec17a024ce7e107096e472fe"],"cc41b743423981e7ec17a024ce7e107096e472fe":["4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}