{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterProperties#setClusterProperty(String,Object).mjava","commits":[{"id":"413f18c5620cf37b9bb2dfa7d3071bfa08b69a0d","date":1550526365,"type":1,"author":"shalinmangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterProperties#setClusterProperty(String,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterProperties#setClusterProperty(String,String).mjava","sourceNew":"  /**\n   * This method sets a cluster property.\n   *\n   * @param propertyName  The property name to be set.\n   * @param propertyValue The value of the property, could also be a nested structure.\n   * @throws IOException if there is an error writing data to the cluster\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void setClusterProperty(String propertyName, Object propertyValue) throws IOException {\n\n    validatePropertyName(propertyName);\n\n    for (; ; ) {\n      Stat s = new Stat();\n      try {\n        if (client.exists(ZkStateReader.CLUSTER_PROPS, true)) {\n          Map properties = (Map) Utils.fromJSON(client.getData(ZkStateReader.CLUSTER_PROPS, null, s, true));\n          if (propertyValue == null) {\n            //Don't update ZK unless absolutely necessary.\n            if (properties.get(propertyName) != null) {\n              properties.remove(propertyName);\n              client.setData(ZkStateReader.CLUSTER_PROPS, Utils.toJSON(properties), s.getVersion(), true);\n            }\n          } else {\n            //Don't update ZK unless absolutely necessary.\n            if (!propertyValue.equals(properties.get(propertyName))) {\n              properties.put(propertyName, propertyValue);\n              client.setData(ZkStateReader.CLUSTER_PROPS, Utils.toJSON(properties), s.getVersion(), true);\n            }\n          }\n        } else {\n          Map properties = new LinkedHashMap();\n          properties.put(propertyName, propertyValue);\n          client.create(ZkStateReader.CLUSTER_PROPS, Utils.toJSON(properties), CreateMode.PERSISTENT, true);\n        }\n      } catch (KeeperException.BadVersionException | KeeperException.NodeExistsException e) {\n        //race condition\n        continue;\n      } catch (InterruptedException | KeeperException e) {\n        throw new IOException(\"Error setting cluster property\", SolrZkClient.checkInterrupted(e));\n      }\n      break;\n    }\n  }\n\n","sourceOld":"  /**\n   * This method sets a cluster property.\n   *\n   * @param propertyName  The property name to be set.\n   * @param propertyValue The value of the property.\n   * @throws IOException if there is an error writing data to the cluster\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void setClusterProperty(String propertyName, String propertyValue) throws IOException {\n\n    validatePropertyName(propertyName);\n\n    for (; ; ) {\n      Stat s = new Stat();\n      try {\n        if (client.exists(ZkStateReader.CLUSTER_PROPS, true)) {\n          Map properties = (Map) Utils.fromJSON(client.getData(ZkStateReader.CLUSTER_PROPS, null, s, true));\n          if (propertyValue == null) {\n            //Don't update ZK unless absolutely necessary.\n            if (properties.get(propertyName) != null) {\n              properties.remove(propertyName);\n              client.setData(ZkStateReader.CLUSTER_PROPS, Utils.toJSON(properties), s.getVersion(), true);\n            }\n          } else {\n            //Don't update ZK unless absolutely necessary.\n            if (!propertyValue.equals(properties.get(propertyName))) {\n              properties.put(propertyName, propertyValue);\n              client.setData(ZkStateReader.CLUSTER_PROPS, Utils.toJSON(properties), s.getVersion(), true);\n            }\n          }\n        } else {\n          Map properties = new LinkedHashMap();\n          properties.put(propertyName, propertyValue);\n          client.create(ZkStateReader.CLUSTER_PROPS, Utils.toJSON(properties), CreateMode.PERSISTENT, true);\n        }\n      } catch (KeeperException.BadVersionException | KeeperException.NodeExistsException e) {\n        //race condition\n        continue;\n      } catch (InterruptedException | KeeperException e) {\n        throw new IOException(\"Error setting cluster property\", SolrZkClient.checkInterrupted(e));\n      }\n      break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76","date":1591450217,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterProperties#setClusterProperty(String,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterProperties#setClusterProperty(String,Object).mjava","sourceNew":"  /**\n   * This method sets a cluster property.\n   *\n   * @param propertyName  The property name to be set.\n   * @param propertyValue The value of the property, could also be a nested structure.\n   * @throws IOException if there is an error writing data to the cluster\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void setClusterProperty(String propertyName, Object propertyValue) throws IOException {\n\n    validatePropertyName(propertyName);\n\n    for (; ; ) {\n      Stat s = new Stat();\n      try {\n        if (client.exists(ZkStateReader.CLUSTER_PROPS, true)) {\n          @SuppressWarnings({\"rawtypes\"})\n          Map properties = (Map) Utils.fromJSON(client.getData(ZkStateReader.CLUSTER_PROPS, null, s, true));\n          if (propertyValue == null) {\n            //Don't update ZK unless absolutely necessary.\n            if (properties.get(propertyName) != null) {\n              properties.remove(propertyName);\n              client.setData(ZkStateReader.CLUSTER_PROPS, Utils.toJSON(properties), s.getVersion(), true);\n            }\n          } else {\n            //Don't update ZK unless absolutely necessary.\n            if (!propertyValue.equals(properties.get(propertyName))) {\n              properties.put(propertyName, propertyValue);\n              client.setData(ZkStateReader.CLUSTER_PROPS, Utils.toJSON(properties), s.getVersion(), true);\n            }\n          }\n        } else {\n          @SuppressWarnings({\"rawtypes\"})\n          Map properties = new LinkedHashMap();\n          properties.put(propertyName, propertyValue);\n          client.create(ZkStateReader.CLUSTER_PROPS, Utils.toJSON(properties), CreateMode.PERSISTENT, true);\n        }\n      } catch (KeeperException.BadVersionException | KeeperException.NodeExistsException e) {\n        //race condition\n        continue;\n      } catch (InterruptedException | KeeperException e) {\n        throw new IOException(\"Error setting cluster property\", SolrZkClient.checkInterrupted(e));\n      }\n      break;\n    }\n  }\n\n","sourceOld":"  /**\n   * This method sets a cluster property.\n   *\n   * @param propertyName  The property name to be set.\n   * @param propertyValue The value of the property, could also be a nested structure.\n   * @throws IOException if there is an error writing data to the cluster\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void setClusterProperty(String propertyName, Object propertyValue) throws IOException {\n\n    validatePropertyName(propertyName);\n\n    for (; ; ) {\n      Stat s = new Stat();\n      try {\n        if (client.exists(ZkStateReader.CLUSTER_PROPS, true)) {\n          Map properties = (Map) Utils.fromJSON(client.getData(ZkStateReader.CLUSTER_PROPS, null, s, true));\n          if (propertyValue == null) {\n            //Don't update ZK unless absolutely necessary.\n            if (properties.get(propertyName) != null) {\n              properties.remove(propertyName);\n              client.setData(ZkStateReader.CLUSTER_PROPS, Utils.toJSON(properties), s.getVersion(), true);\n            }\n          } else {\n            //Don't update ZK unless absolutely necessary.\n            if (!propertyValue.equals(properties.get(propertyName))) {\n              properties.put(propertyName, propertyValue);\n              client.setData(ZkStateReader.CLUSTER_PROPS, Utils.toJSON(properties), s.getVersion(), true);\n            }\n          }\n        } else {\n          Map properties = new LinkedHashMap();\n          properties.put(propertyName, propertyValue);\n          client.create(ZkStateReader.CLUSTER_PROPS, Utils.toJSON(properties), CreateMode.PERSISTENT, true);\n        }\n      } catch (KeeperException.BadVersionException | KeeperException.NodeExistsException e) {\n        //race condition\n        continue;\n      } catch (InterruptedException | KeeperException e) {\n        throw new IOException(\"Error setting cluster property\", SolrZkClient.checkInterrupted(e));\n      }\n      break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76":["413f18c5620cf37b9bb2dfa7d3071bfa08b69a0d"],"413f18c5620cf37b9bb2dfa7d3071bfa08b69a0d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76"]},"commit2Childs":{"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"413f18c5620cf37b9bb2dfa7d3071bfa08b69a0d":["8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["413f18c5620cf37b9bb2dfa7d3071bfa08b69a0d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}