{"path":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#createCluster().mjava","commits":[{"id":"c72f6f0907682b825869d7878ba72d8259dabc91","date":1480192617,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#createCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void createCluster() throws Exception {\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    configureCluster(2)\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-managed\").resolve(\"conf\"))\n        .configure();\n\n    // Need enough shards that we have some shards that don't have any docs on them.\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf1\", 4, 1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n\n    fieldsToTestSingle =\n        Collections.unmodifiableList(Stream.of(\n            new FieldProps(\"intField\", \"int\", 1),\n            new FieldProps(\"longField\", \"long\", 1),\n            new FieldProps(\"doubleField\", \"double\", 1),\n            new FieldProps(\"floatField\", \"float\", 1),\n            new FieldProps(\"dateField\", \"date\", 1),\n            new FieldProps(\"stringField\", \"string\", 1),\n            new FieldProps(\"boolField\", \"boolean\", 1)\n        ).collect(Collectors.toList()));\n\n    fieldsToTestMulti =\n        Collections.unmodifiableList(Stream.of(\n            new FieldProps(\"intFieldMulti\", \"int\", 5),\n            new FieldProps(\"longFieldMulti\", \"long\", 5),\n            new FieldProps(\"doubleFieldMulti\", \"double\", 5),\n            new FieldProps(\"floatFieldMulti\", \"float\", 5),\n            new FieldProps(\"dateFieldMulti\", \"date\", 5),\n            new FieldProps(\"stringFieldMulti\", \"string\", 5),\n            new FieldProps(\"boolFieldMulti\", \"boolean\", 2)\n        ).collect(Collectors.toList()));\n\n    // Fields to test for grouping and sorting with sortMinssingFirst/Last.\n    fieldsToTestGroupSortFirst =\n        Collections.unmodifiableList(Stream.of(\n            new FieldProps(\"intGSF\", \"int\"),\n            new FieldProps(\"longGSF\", \"long\"),\n            new FieldProps(\"doubleGSF\", \"double\"),\n            new FieldProps(\"floatGSF\", \"float\"),\n            new FieldProps(\"dateGSF\", \"date\"),\n            new FieldProps(\"stringGSF\", \"string\"),\n            new FieldProps(\"boolGSF\", \"boolean\")\n        ).collect(Collectors.toList()));\n\n    fieldsToTestGroupSortLast =\n        Collections.unmodifiableList(Stream.of(\n            new FieldProps(\"intGSL\", \"int\"),\n            new FieldProps(\"longGSL\", \"long\"),\n            new FieldProps(\"doubleGSL\", \"double\"),\n            new FieldProps(\"floatGSL\", \"float\"),\n            new FieldProps(\"dateGSL\", \"date\"),\n            new FieldProps(\"stringGSL\", \"string\"),\n            new FieldProps(\"boolGSL\", \"boolean\")\n        ).collect(Collectors.toList()));\n\n    List<Update> updateList = new ArrayList<>(fieldsToTestSingle.size() +\n        fieldsToTestMulti.size() + fieldsToTestGroupSortFirst.size() + fieldsToTestGroupSortLast.size() +\n        4);\n\n    updateList.add(getType(\"name\", \"float\", \"class\", \"solr.TrieFloatField\", \"precisionStep\", \"0\"));\n\n    updateList.add(getType(\"name\", \"double\", \"class\", \"solr.TrieDoubleField\", \"precisionStep\", \"0\"));\n\n    updateList.add(getType(\"name\", \"date\", \"class\", \"solr.TrieDateField\", \"precisionStep\", \"0\"));\n\n    updateList.add(getType(\"name\", \"boolean\", \"class\", \"solr.BoolField\"));\n\n\n    // Add a field for each of the types we want to the schema.\n\n    defineFields(updateList, fieldsToTestSingle, false);\n    defineFields(updateList, fieldsToTestMulti, true);\n    defineFields(updateList, fieldsToTestGroupSortFirst, false, \"sorMissingFirst\", \"true\");\n    defineFields(updateList, fieldsToTestGroupSortLast, false, \"sorMissingLast\", \"true\");\n\n\n    MultiUpdate multiUpdateRequest = new MultiUpdate(updateList);\n    SchemaResponse.UpdateResponse multipleUpdatesResponse = multiUpdateRequest.process(cluster.getSolrClient(), COLLECTION);\n    assertNull(\"Error adding fields\", multipleUpdatesResponse.getResponse().get(\"errors\"));\n\n    cluster.getSolrClient().setDefaultCollection(COLLECTION);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","0e7ddedf744427dad36befd57a11188002f735f9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#createCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void createCluster() throws Exception {\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    configureCluster(2)\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-managed\").resolve(\"conf\"))\n        .configure();\n\n    // Need enough shards that we have some shards that don't have any docs on them.\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf1\", 4, 1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n\n    fieldsToTestSingle =\n        Collections.unmodifiableList(Stream.of(\n            new FieldProps(\"intField\", \"int\", 1),\n            new FieldProps(\"longField\", \"long\", 1),\n            new FieldProps(\"doubleField\", \"double\", 1),\n            new FieldProps(\"floatField\", \"float\", 1),\n            new FieldProps(\"dateField\", \"date\", 1),\n            new FieldProps(\"stringField\", \"string\", 1),\n            new FieldProps(\"boolField\", \"boolean\", 1)\n        ).collect(Collectors.toList()));\n\n    fieldsToTestMulti =\n        Collections.unmodifiableList(Stream.of(\n            new FieldProps(\"intFieldMulti\", \"int\", 5),\n            new FieldProps(\"longFieldMulti\", \"long\", 5),\n            new FieldProps(\"doubleFieldMulti\", \"double\", 5),\n            new FieldProps(\"floatFieldMulti\", \"float\", 5),\n            new FieldProps(\"dateFieldMulti\", \"date\", 5),\n            new FieldProps(\"stringFieldMulti\", \"string\", 5),\n            new FieldProps(\"boolFieldMulti\", \"boolean\", 2)\n        ).collect(Collectors.toList()));\n\n    // Fields to test for grouping and sorting with sortMinssingFirst/Last.\n    fieldsToTestGroupSortFirst =\n        Collections.unmodifiableList(Stream.of(\n            new FieldProps(\"intGSF\", \"int\"),\n            new FieldProps(\"longGSF\", \"long\"),\n            new FieldProps(\"doubleGSF\", \"double\"),\n            new FieldProps(\"floatGSF\", \"float\"),\n            new FieldProps(\"dateGSF\", \"date\"),\n            new FieldProps(\"stringGSF\", \"string\"),\n            new FieldProps(\"boolGSF\", \"boolean\")\n        ).collect(Collectors.toList()));\n\n    fieldsToTestGroupSortLast =\n        Collections.unmodifiableList(Stream.of(\n            new FieldProps(\"intGSL\", \"int\"),\n            new FieldProps(\"longGSL\", \"long\"),\n            new FieldProps(\"doubleGSL\", \"double\"),\n            new FieldProps(\"floatGSL\", \"float\"),\n            new FieldProps(\"dateGSL\", \"date\"),\n            new FieldProps(\"stringGSL\", \"string\"),\n            new FieldProps(\"boolGSL\", \"boolean\")\n        ).collect(Collectors.toList()));\n\n    List<Update> updateList = new ArrayList<>(fieldsToTestSingle.size() +\n        fieldsToTestMulti.size() + fieldsToTestGroupSortFirst.size() + fieldsToTestGroupSortLast.size() +\n        4);\n\n    updateList.add(getType(\"name\", \"float\", \"class\", \"solr.TrieFloatField\", \"precisionStep\", \"0\"));\n\n    updateList.add(getType(\"name\", \"double\", \"class\", \"solr.TrieDoubleField\", \"precisionStep\", \"0\"));\n\n    updateList.add(getType(\"name\", \"date\", \"class\", \"solr.TrieDateField\", \"precisionStep\", \"0\"));\n\n    updateList.add(getType(\"name\", \"boolean\", \"class\", \"solr.BoolField\"));\n\n\n    // Add a field for each of the types we want to the schema.\n\n    defineFields(updateList, fieldsToTestSingle, false);\n    defineFields(updateList, fieldsToTestMulti, true);\n    defineFields(updateList, fieldsToTestGroupSortFirst, false, \"sorMissingFirst\", \"true\");\n    defineFields(updateList, fieldsToTestGroupSortLast, false, \"sorMissingLast\", \"true\");\n\n\n    MultiUpdate multiUpdateRequest = new MultiUpdate(updateList);\n    SchemaResponse.UpdateResponse multipleUpdatesResponse = multiUpdateRequest.process(cluster.getSolrClient(), COLLECTION);\n    assertNull(\"Error adding fields\", multipleUpdatesResponse.getResponse().get(\"errors\"));\n\n    cluster.getSolrClient().setDefaultCollection(COLLECTION);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"931cb705e783c7f07cdb110a0cb03bad79fe1b2b","date":1480386986,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#createCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void createCluster() throws Exception {\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    configureCluster(2)\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-managed\").resolve(\"conf\"))\n        .configure();\n\n    // Need enough shards that we have some shards that don't have any docs on them.\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf1\", 4, 1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n\n    fieldsToTestSingle =\n        Collections.unmodifiableList(Stream.of(\n            new FieldProps(\"intField\", \"int\", 1),\n            new FieldProps(\"longField\", \"long\", 1),\n            new FieldProps(\"doubleField\", \"double\", 1),\n            new FieldProps(\"floatField\", \"float\", 1),\n            new FieldProps(\"dateField\", \"date\", 1),\n            new FieldProps(\"stringField\", \"string\", 1),\n            new FieldProps(\"boolField\", \"boolean\", 1)\n        ).collect(Collectors.toList()));\n\n    fieldsToTestMulti =\n        Collections.unmodifiableList(Stream.of(\n            new FieldProps(\"intFieldMulti\", \"int\", 5),\n            new FieldProps(\"longFieldMulti\", \"long\", 5),\n            new FieldProps(\"doubleFieldMulti\", \"double\", 5),\n            new FieldProps(\"floatFieldMulti\", \"float\", 5),\n            new FieldProps(\"dateFieldMulti\", \"date\", 5),\n            new FieldProps(\"stringFieldMulti\", \"string\", 5),\n            new FieldProps(\"boolFieldMulti\", \"boolean\", 2)\n        ).collect(Collectors.toList()));\n\n    // Fields to test for grouping and sorting with sortMinssingFirst/Last.\n    fieldsToTestGroupSortFirst =\n        Collections.unmodifiableList(Stream.of(\n            new FieldProps(\"intGSF\", \"int\"),\n            new FieldProps(\"longGSF\", \"long\"),\n            new FieldProps(\"doubleGSF\", \"double\"),\n            new FieldProps(\"floatGSF\", \"float\"),\n            new FieldProps(\"dateGSF\", \"date\"),\n            new FieldProps(\"stringGSF\", \"string\"),\n            new FieldProps(\"boolGSF\", \"boolean\")\n        ).collect(Collectors.toList()));\n\n    fieldsToTestGroupSortLast =\n        Collections.unmodifiableList(Stream.of(\n            new FieldProps(\"intGSL\", \"int\"),\n            new FieldProps(\"longGSL\", \"long\"),\n            new FieldProps(\"doubleGSL\", \"double\"),\n            new FieldProps(\"floatGSL\", \"float\"),\n            new FieldProps(\"dateGSL\", \"date\"),\n            new FieldProps(\"stringGSL\", \"string\"),\n            new FieldProps(\"boolGSL\", \"boolean\")\n        ).collect(Collectors.toList()));\n\n    List<Update> updateList = new ArrayList<>(fieldsToTestSingle.size() +\n        fieldsToTestMulti.size() + fieldsToTestGroupSortFirst.size() + fieldsToTestGroupSortLast.size() +\n        4);\n\n    updateList.add(getType(\"name\", \"float\", \"class\", \"solr.TrieFloatField\", \"precisionStep\", \"0\"));\n\n    updateList.add(getType(\"name\", \"double\", \"class\", \"solr.TrieDoubleField\", \"precisionStep\", \"0\"));\n\n    updateList.add(getType(\"name\", \"date\", \"class\", \"solr.TrieDateField\", \"precisionStep\", \"0\"));\n\n    updateList.add(getType(\"name\", \"boolean\", \"class\", \"solr.BoolField\"));\n\n\n    // Add a field for each of the types we want to the schema.\n\n    defineFields(updateList, fieldsToTestSingle, false);\n    defineFields(updateList, fieldsToTestMulti, true);\n    defineFields(updateList, fieldsToTestGroupSortFirst, false, \"sorMissingFirst\", \"true\");\n    defineFields(updateList, fieldsToTestGroupSortLast, false, \"sorMissingLast\", \"true\");\n\n\n    MultiUpdate multiUpdateRequest = new MultiUpdate(updateList);\n    SchemaResponse.UpdateResponse multipleUpdatesResponse = multiUpdateRequest.process(cluster.getSolrClient(), COLLECTION);\n    assertNull(\"Error adding fields\", multipleUpdatesResponse.getResponse().get(\"errors\"));\n\n    cluster.getSolrClient().setDefaultCollection(COLLECTION);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e7ddedf744427dad36befd57a11188002f735f9","date":1481407395,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#createCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#createCluster().mjava","sourceNew":"  @BeforeClass\n  public static void createCluster() throws Exception {\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    configureCluster(2)\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-managed\").resolve(\"conf\"))\n        .configure();\n\n    // Need enough shards that we have some shards that don't have any docs on them.\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf1\", 4, 1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n\n    fieldsToTestSingle =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intField\", \"int\", 1),\n            new FieldProps(\"longField\", \"long\", 1),\n            new FieldProps(\"doubleField\", \"double\", 1),\n            new FieldProps(\"floatField\", \"float\", 1),\n            new FieldProps(\"dateField\", \"date\", 1),\n            new FieldProps(\"stringField\", \"string\", 1),\n            new FieldProps(\"boolField\", \"boolean\", 1)\n        ));\n\n    fieldsToTestMulti =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intFieldMulti\", \"int\", 5),\n            new FieldProps(\"longFieldMulti\", \"long\", 5),\n            new FieldProps(\"doubleFieldMulti\", \"double\", 5),\n            new FieldProps(\"floatFieldMulti\", \"float\", 5),\n            new FieldProps(\"dateFieldMulti\", \"date\", 5),\n            new FieldProps(\"stringFieldMulti\", \"string\", 5),\n            new FieldProps(\"boolFieldMulti\", \"boolean\", 2)\n        ));\n\n    // Fields to test for grouping and sorting with sortMinssingFirst/Last.\n    fieldsToTestGroupSortFirst =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSF\", \"int\"),\n            new FieldProps(\"longGSF\", \"long\"),\n            new FieldProps(\"doubleGSF\", \"double\"),\n            new FieldProps(\"floatGSF\", \"float\"),\n            new FieldProps(\"dateGSF\", \"date\"),\n            new FieldProps(\"stringGSF\", \"string\"),\n            new FieldProps(\"boolGSF\", \"boolean\")\n        ));\n\n    fieldsToTestGroupSortLast =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSL\", \"int\"),\n            new FieldProps(\"longGSL\", \"long\"),\n            new FieldProps(\"doubleGSL\", \"double\"),\n            new FieldProps(\"floatGSL\", \"float\"),\n            new FieldProps(\"dateGSL\", \"date\"),\n            new FieldProps(\"stringGSL\", \"string\"),\n            new FieldProps(\"boolGSL\", \"boolean\")\n        ));\n\n    List<Update> updateList = new ArrayList<>(fieldsToTestSingle.size() +\n        fieldsToTestMulti.size() + fieldsToTestGroupSortFirst.size() + fieldsToTestGroupSortLast.size() +\n        4);\n\n    updateList.add(getType(\"name\", \"float\", \"class\", \"solr.TrieFloatField\", \"precisionStep\", \"0\"));\n\n    updateList.add(getType(\"name\", \"double\", \"class\", \"solr.TrieDoubleField\", \"precisionStep\", \"0\"));\n\n    updateList.add(getType(\"name\", \"date\", \"class\", \"solr.TrieDateField\", \"precisionStep\", \"0\"));\n\n    updateList.add(getType(\"name\", \"boolean\", \"class\", \"solr.BoolField\"));\n\n\n    // Add a field for each of the types we want to the schema.\n\n    defineFields(updateList, fieldsToTestSingle, false);\n    defineFields(updateList, fieldsToTestMulti, true);\n    defineFields(updateList, fieldsToTestGroupSortFirst, false, \"sorMissingFirst\", \"true\");\n    defineFields(updateList, fieldsToTestGroupSortLast, false, \"sorMissingLast\", \"true\");\n\n\n    MultiUpdate multiUpdateRequest = new MultiUpdate(updateList);\n    SchemaResponse.UpdateResponse multipleUpdatesResponse = multiUpdateRequest.process(cluster.getSolrClient(), COLLECTION);\n    assertNull(\"Error adding fields\", multipleUpdatesResponse.getResponse().get(\"errors\"));\n\n    cluster.getSolrClient().setDefaultCollection(COLLECTION);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void createCluster() throws Exception {\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    configureCluster(2)\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-managed\").resolve(\"conf\"))\n        .configure();\n\n    // Need enough shards that we have some shards that don't have any docs on them.\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf1\", 4, 1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n\n    fieldsToTestSingle =\n        Collections.unmodifiableList(Stream.of(\n            new FieldProps(\"intField\", \"int\", 1),\n            new FieldProps(\"longField\", \"long\", 1),\n            new FieldProps(\"doubleField\", \"double\", 1),\n            new FieldProps(\"floatField\", \"float\", 1),\n            new FieldProps(\"dateField\", \"date\", 1),\n            new FieldProps(\"stringField\", \"string\", 1),\n            new FieldProps(\"boolField\", \"boolean\", 1)\n        ).collect(Collectors.toList()));\n\n    fieldsToTestMulti =\n        Collections.unmodifiableList(Stream.of(\n            new FieldProps(\"intFieldMulti\", \"int\", 5),\n            new FieldProps(\"longFieldMulti\", \"long\", 5),\n            new FieldProps(\"doubleFieldMulti\", \"double\", 5),\n            new FieldProps(\"floatFieldMulti\", \"float\", 5),\n            new FieldProps(\"dateFieldMulti\", \"date\", 5),\n            new FieldProps(\"stringFieldMulti\", \"string\", 5),\n            new FieldProps(\"boolFieldMulti\", \"boolean\", 2)\n        ).collect(Collectors.toList()));\n\n    // Fields to test for grouping and sorting with sortMinssingFirst/Last.\n    fieldsToTestGroupSortFirst =\n        Collections.unmodifiableList(Stream.of(\n            new FieldProps(\"intGSF\", \"int\"),\n            new FieldProps(\"longGSF\", \"long\"),\n            new FieldProps(\"doubleGSF\", \"double\"),\n            new FieldProps(\"floatGSF\", \"float\"),\n            new FieldProps(\"dateGSF\", \"date\"),\n            new FieldProps(\"stringGSF\", \"string\"),\n            new FieldProps(\"boolGSF\", \"boolean\")\n        ).collect(Collectors.toList()));\n\n    fieldsToTestGroupSortLast =\n        Collections.unmodifiableList(Stream.of(\n            new FieldProps(\"intGSL\", \"int\"),\n            new FieldProps(\"longGSL\", \"long\"),\n            new FieldProps(\"doubleGSL\", \"double\"),\n            new FieldProps(\"floatGSL\", \"float\"),\n            new FieldProps(\"dateGSL\", \"date\"),\n            new FieldProps(\"stringGSL\", \"string\"),\n            new FieldProps(\"boolGSL\", \"boolean\")\n        ).collect(Collectors.toList()));\n\n    List<Update> updateList = new ArrayList<>(fieldsToTestSingle.size() +\n        fieldsToTestMulti.size() + fieldsToTestGroupSortFirst.size() + fieldsToTestGroupSortLast.size() +\n        4);\n\n    updateList.add(getType(\"name\", \"float\", \"class\", \"solr.TrieFloatField\", \"precisionStep\", \"0\"));\n\n    updateList.add(getType(\"name\", \"double\", \"class\", \"solr.TrieDoubleField\", \"precisionStep\", \"0\"));\n\n    updateList.add(getType(\"name\", \"date\", \"class\", \"solr.TrieDateField\", \"precisionStep\", \"0\"));\n\n    updateList.add(getType(\"name\", \"boolean\", \"class\", \"solr.BoolField\"));\n\n\n    // Add a field for each of the types we want to the schema.\n\n    defineFields(updateList, fieldsToTestSingle, false);\n    defineFields(updateList, fieldsToTestMulti, true);\n    defineFields(updateList, fieldsToTestGroupSortFirst, false, \"sorMissingFirst\", \"true\");\n    defineFields(updateList, fieldsToTestGroupSortLast, false, \"sorMissingLast\", \"true\");\n\n\n    MultiUpdate multiUpdateRequest = new MultiUpdate(updateList);\n    SchemaResponse.UpdateResponse multipleUpdatesResponse = multiUpdateRequest.process(cluster.getSolrClient(), COLLECTION);\n    assertNull(\"Error adding fields\", multipleUpdatesResponse.getResponse().get(\"errors\"));\n\n    cluster.getSolrClient().setDefaultCollection(COLLECTION);\n  }\n\n","bugFix":["c72f6f0907682b825869d7878ba72d8259dabc91"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#createCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#createCluster().mjava","sourceNew":"  @BeforeClass\n  public static void createCluster() throws Exception {\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    configureCluster(2)\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-managed\").resolve(\"conf\"))\n        .configure();\n\n    // Need enough shards that we have some shards that don't have any docs on them.\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf1\", 4, 1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n\n    fieldsToTestSingle =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intField\", \"int\", 1),\n            new FieldProps(\"longField\", \"long\", 1),\n            new FieldProps(\"doubleField\", \"double\", 1),\n            new FieldProps(\"floatField\", \"float\", 1),\n            new FieldProps(\"dateField\", \"date\", 1),\n            new FieldProps(\"stringField\", \"string\", 1),\n            new FieldProps(\"boolField\", \"boolean\", 1)\n        ));\n\n    fieldsToTestMulti =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intFieldMulti\", \"int\", 5),\n            new FieldProps(\"longFieldMulti\", \"long\", 5),\n            new FieldProps(\"doubleFieldMulti\", \"double\", 5),\n            new FieldProps(\"floatFieldMulti\", \"float\", 5),\n            new FieldProps(\"dateFieldMulti\", \"date\", 5),\n            new FieldProps(\"stringFieldMulti\", \"string\", 5),\n            new FieldProps(\"boolFieldMulti\", \"boolean\", 2)\n        ));\n\n    // Fields to test for grouping and sorting with sortMinssingFirst/Last.\n    fieldsToTestGroupSortFirst =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSF\", \"int\"),\n            new FieldProps(\"longGSF\", \"long\"),\n            new FieldProps(\"doubleGSF\", \"double\"),\n            new FieldProps(\"floatGSF\", \"float\"),\n            new FieldProps(\"dateGSF\", \"date\"),\n            new FieldProps(\"stringGSF\", \"string\"),\n            new FieldProps(\"boolGSF\", \"boolean\")\n        ));\n\n    fieldsToTestGroupSortLast =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSL\", \"int\"),\n            new FieldProps(\"longGSL\", \"long\"),\n            new FieldProps(\"doubleGSL\", \"double\"),\n            new FieldProps(\"floatGSL\", \"float\"),\n            new FieldProps(\"dateGSL\", \"date\"),\n            new FieldProps(\"stringGSL\", \"string\"),\n            new FieldProps(\"boolGSL\", \"boolean\")\n        ));\n\n    List<Update> updateList = new ArrayList<>(fieldsToTestSingle.size() +\n        fieldsToTestMulti.size() + fieldsToTestGroupSortFirst.size() + fieldsToTestGroupSortLast.size() +\n        4);\n\n    updateList.add(getType(\"name\", \"float\", \"class\", \"solr.TrieFloatField\", \"precisionStep\", \"0\"));\n\n    updateList.add(getType(\"name\", \"double\", \"class\", \"solr.TrieDoubleField\", \"precisionStep\", \"0\"));\n\n    updateList.add(getType(\"name\", \"date\", \"class\", \"solr.TrieDateField\", \"precisionStep\", \"0\"));\n\n    updateList.add(getType(\"name\", \"boolean\", \"class\", \"solr.BoolField\"));\n\n\n    // Add a field for each of the types we want to the schema.\n\n    defineFields(updateList, fieldsToTestSingle, false);\n    defineFields(updateList, fieldsToTestMulti, true);\n    defineFields(updateList, fieldsToTestGroupSortFirst, false, \"sorMissingFirst\", \"true\");\n    defineFields(updateList, fieldsToTestGroupSortLast, false, \"sorMissingLast\", \"true\");\n\n\n    MultiUpdate multiUpdateRequest = new MultiUpdate(updateList);\n    SchemaResponse.UpdateResponse multipleUpdatesResponse = multiUpdateRequest.process(cluster.getSolrClient(), COLLECTION);\n    assertNull(\"Error adding fields\", multipleUpdatesResponse.getResponse().get(\"errors\"));\n\n    cluster.getSolrClient().setDefaultCollection(COLLECTION);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void createCluster() throws Exception {\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    configureCluster(2)\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-managed\").resolve(\"conf\"))\n        .configure();\n\n    // Need enough shards that we have some shards that don't have any docs on them.\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf1\", 4, 1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n\n    fieldsToTestSingle =\n        Collections.unmodifiableList(Stream.of(\n            new FieldProps(\"intField\", \"int\", 1),\n            new FieldProps(\"longField\", \"long\", 1),\n            new FieldProps(\"doubleField\", \"double\", 1),\n            new FieldProps(\"floatField\", \"float\", 1),\n            new FieldProps(\"dateField\", \"date\", 1),\n            new FieldProps(\"stringField\", \"string\", 1),\n            new FieldProps(\"boolField\", \"boolean\", 1)\n        ).collect(Collectors.toList()));\n\n    fieldsToTestMulti =\n        Collections.unmodifiableList(Stream.of(\n            new FieldProps(\"intFieldMulti\", \"int\", 5),\n            new FieldProps(\"longFieldMulti\", \"long\", 5),\n            new FieldProps(\"doubleFieldMulti\", \"double\", 5),\n            new FieldProps(\"floatFieldMulti\", \"float\", 5),\n            new FieldProps(\"dateFieldMulti\", \"date\", 5),\n            new FieldProps(\"stringFieldMulti\", \"string\", 5),\n            new FieldProps(\"boolFieldMulti\", \"boolean\", 2)\n        ).collect(Collectors.toList()));\n\n    // Fields to test for grouping and sorting with sortMinssingFirst/Last.\n    fieldsToTestGroupSortFirst =\n        Collections.unmodifiableList(Stream.of(\n            new FieldProps(\"intGSF\", \"int\"),\n            new FieldProps(\"longGSF\", \"long\"),\n            new FieldProps(\"doubleGSF\", \"double\"),\n            new FieldProps(\"floatGSF\", \"float\"),\n            new FieldProps(\"dateGSF\", \"date\"),\n            new FieldProps(\"stringGSF\", \"string\"),\n            new FieldProps(\"boolGSF\", \"boolean\")\n        ).collect(Collectors.toList()));\n\n    fieldsToTestGroupSortLast =\n        Collections.unmodifiableList(Stream.of(\n            new FieldProps(\"intGSL\", \"int\"),\n            new FieldProps(\"longGSL\", \"long\"),\n            new FieldProps(\"doubleGSL\", \"double\"),\n            new FieldProps(\"floatGSL\", \"float\"),\n            new FieldProps(\"dateGSL\", \"date\"),\n            new FieldProps(\"stringGSL\", \"string\"),\n            new FieldProps(\"boolGSL\", \"boolean\")\n        ).collect(Collectors.toList()));\n\n    List<Update> updateList = new ArrayList<>(fieldsToTestSingle.size() +\n        fieldsToTestMulti.size() + fieldsToTestGroupSortFirst.size() + fieldsToTestGroupSortLast.size() +\n        4);\n\n    updateList.add(getType(\"name\", \"float\", \"class\", \"solr.TrieFloatField\", \"precisionStep\", \"0\"));\n\n    updateList.add(getType(\"name\", \"double\", \"class\", \"solr.TrieDoubleField\", \"precisionStep\", \"0\"));\n\n    updateList.add(getType(\"name\", \"date\", \"class\", \"solr.TrieDateField\", \"precisionStep\", \"0\"));\n\n    updateList.add(getType(\"name\", \"boolean\", \"class\", \"solr.BoolField\"));\n\n\n    // Add a field for each of the types we want to the schema.\n\n    defineFields(updateList, fieldsToTestSingle, false);\n    defineFields(updateList, fieldsToTestMulti, true);\n    defineFields(updateList, fieldsToTestGroupSortFirst, false, \"sorMissingFirst\", \"true\");\n    defineFields(updateList, fieldsToTestGroupSortLast, false, \"sorMissingLast\", \"true\");\n\n\n    MultiUpdate multiUpdateRequest = new MultiUpdate(updateList);\n    SchemaResponse.UpdateResponse multipleUpdatesResponse = multiUpdateRequest.process(cluster.getSolrClient(), COLLECTION);\n    assertNull(\"Error adding fields\", multipleUpdatesResponse.getResponse().get(\"errors\"));\n\n    cluster.getSolrClient().setDefaultCollection(COLLECTION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94a0eda7dbad12579530df39279403d27344ebcb","date":1500511909,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#createCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#createCluster().mjava","sourceNew":"  @BeforeClass\n  public static void createCluster() throws Exception {\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    configureCluster(2)\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-managed\").resolve(\"conf\"))\n        .configure();\n\n    // Need enough shards that we have some shards that don't have any docs on them.\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf1\", 4, 1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n\n    fieldsToTestSingle =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intField\", \"int\", 1),\n            new FieldProps(\"longField\", \"long\", 1),\n            new FieldProps(\"doubleField\", \"double\", 1),\n            new FieldProps(\"floatField\", \"float\", 1),\n            new FieldProps(\"dateField\", \"date\", 1),\n            new FieldProps(\"stringField\", \"string\", 1),\n            new FieldProps(\"boolField\", \"boolean\", 1)\n        ));\n\n    fieldsToTestMulti =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intFieldMulti\", \"int\", 5),\n            new FieldProps(\"longFieldMulti\", \"long\", 5),\n            new FieldProps(\"doubleFieldMulti\", \"double\", 5),\n            new FieldProps(\"floatFieldMulti\", \"float\", 5),\n            new FieldProps(\"dateFieldMulti\", \"date\", 5),\n            new FieldProps(\"stringFieldMulti\", \"string\", 5),\n            new FieldProps(\"boolFieldMulti\", \"boolean\", 2)\n        ));\n\n    // Fields to test for grouping and sorting with sortMinssingFirst/Last.\n    fieldsToTestGroupSortFirst =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSF\", \"int\"),\n            new FieldProps(\"longGSF\", \"long\"),\n            new FieldProps(\"doubleGSF\", \"double\"),\n            new FieldProps(\"floatGSF\", \"float\"),\n            new FieldProps(\"dateGSF\", \"date\"),\n            new FieldProps(\"stringGSF\", \"string\"),\n            new FieldProps(\"boolGSF\", \"boolean\")\n        ));\n\n    fieldsToTestGroupSortLast =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSL\", \"int\"),\n            new FieldProps(\"longGSL\", \"long\"),\n            new FieldProps(\"doubleGSL\", \"double\"),\n            new FieldProps(\"floatGSL\", \"float\"),\n            new FieldProps(\"dateGSL\", \"date\"),\n            new FieldProps(\"stringGSL\", \"string\"),\n            new FieldProps(\"boolGSL\", \"boolean\")\n        ));\n\n    List<Update> updateList = new ArrayList<>(fieldsToTestSingle.size() +\n        fieldsToTestMulti.size() + fieldsToTestGroupSortFirst.size() + fieldsToTestGroupSortLast.size() +\n        4);\n\n    updateList.add(getType(\"name\", \"float\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Float.class)));\n\n    updateList.add(getType(\"name\", \"double\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Double.class)));\n\n    updateList.add(getType(\"name\", \"date\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Date.class)));\n\n    updateList.add(getType(\"name\", \"boolean\", \"class\", \"solr.BoolField\"));\n\n\n    // Add a field for each of the types we want to the schema.\n\n    defineFields(updateList, fieldsToTestSingle, false);\n    defineFields(updateList, fieldsToTestMulti, true);\n    defineFields(updateList, fieldsToTestGroupSortFirst, false, \"sorMissingFirst\", \"true\");\n    defineFields(updateList, fieldsToTestGroupSortLast, false, \"sorMissingLast\", \"true\");\n\n\n    MultiUpdate multiUpdateRequest = new MultiUpdate(updateList);\n    SchemaResponse.UpdateResponse multipleUpdatesResponse = multiUpdateRequest.process(cluster.getSolrClient(), COLLECTION);\n    assertNull(\"Error adding fields\", multipleUpdatesResponse.getResponse().get(\"errors\"));\n\n    cluster.getSolrClient().setDefaultCollection(COLLECTION);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void createCluster() throws Exception {\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    configureCluster(2)\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-managed\").resolve(\"conf\"))\n        .configure();\n\n    // Need enough shards that we have some shards that don't have any docs on them.\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf1\", 4, 1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n\n    fieldsToTestSingle =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intField\", \"int\", 1),\n            new FieldProps(\"longField\", \"long\", 1),\n            new FieldProps(\"doubleField\", \"double\", 1),\n            new FieldProps(\"floatField\", \"float\", 1),\n            new FieldProps(\"dateField\", \"date\", 1),\n            new FieldProps(\"stringField\", \"string\", 1),\n            new FieldProps(\"boolField\", \"boolean\", 1)\n        ));\n\n    fieldsToTestMulti =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intFieldMulti\", \"int\", 5),\n            new FieldProps(\"longFieldMulti\", \"long\", 5),\n            new FieldProps(\"doubleFieldMulti\", \"double\", 5),\n            new FieldProps(\"floatFieldMulti\", \"float\", 5),\n            new FieldProps(\"dateFieldMulti\", \"date\", 5),\n            new FieldProps(\"stringFieldMulti\", \"string\", 5),\n            new FieldProps(\"boolFieldMulti\", \"boolean\", 2)\n        ));\n\n    // Fields to test for grouping and sorting with sortMinssingFirst/Last.\n    fieldsToTestGroupSortFirst =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSF\", \"int\"),\n            new FieldProps(\"longGSF\", \"long\"),\n            new FieldProps(\"doubleGSF\", \"double\"),\n            new FieldProps(\"floatGSF\", \"float\"),\n            new FieldProps(\"dateGSF\", \"date\"),\n            new FieldProps(\"stringGSF\", \"string\"),\n            new FieldProps(\"boolGSF\", \"boolean\")\n        ));\n\n    fieldsToTestGroupSortLast =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSL\", \"int\"),\n            new FieldProps(\"longGSL\", \"long\"),\n            new FieldProps(\"doubleGSL\", \"double\"),\n            new FieldProps(\"floatGSL\", \"float\"),\n            new FieldProps(\"dateGSL\", \"date\"),\n            new FieldProps(\"stringGSL\", \"string\"),\n            new FieldProps(\"boolGSL\", \"boolean\")\n        ));\n\n    List<Update> updateList = new ArrayList<>(fieldsToTestSingle.size() +\n        fieldsToTestMulti.size() + fieldsToTestGroupSortFirst.size() + fieldsToTestGroupSortLast.size() +\n        4);\n\n    updateList.add(getType(\"name\", \"float\", \"class\", \"solr.TrieFloatField\", \"precisionStep\", \"0\"));\n\n    updateList.add(getType(\"name\", \"double\", \"class\", \"solr.TrieDoubleField\", \"precisionStep\", \"0\"));\n\n    updateList.add(getType(\"name\", \"date\", \"class\", \"solr.TrieDateField\", \"precisionStep\", \"0\"));\n\n    updateList.add(getType(\"name\", \"boolean\", \"class\", \"solr.BoolField\"));\n\n\n    // Add a field for each of the types we want to the schema.\n\n    defineFields(updateList, fieldsToTestSingle, false);\n    defineFields(updateList, fieldsToTestMulti, true);\n    defineFields(updateList, fieldsToTestGroupSortFirst, false, \"sorMissingFirst\", \"true\");\n    defineFields(updateList, fieldsToTestGroupSortLast, false, \"sorMissingLast\", \"true\");\n\n\n    MultiUpdate multiUpdateRequest = new MultiUpdate(updateList);\n    SchemaResponse.UpdateResponse multipleUpdatesResponse = multiUpdateRequest.process(cluster.getSolrClient(), COLLECTION);\n    assertNull(\"Error adding fields\", multipleUpdatesResponse.getResponse().get(\"errors\"));\n\n    cluster.getSolrClient().setDefaultCollection(COLLECTION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#createCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#createCluster().mjava","sourceNew":"  @BeforeClass\n  public static void createCluster() throws Exception {\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    configureCluster(2)\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-managed\").resolve(\"conf\"))\n        .configure();\n\n    // Need enough shards that we have some shards that don't have any docs on them.\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf1\", 4, 1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n\n    fieldsToTestSingle =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intField\", \"int\", 1),\n            new FieldProps(\"longField\", \"long\", 1),\n            new FieldProps(\"doubleField\", \"double\", 1),\n            new FieldProps(\"floatField\", \"float\", 1),\n            new FieldProps(\"dateField\", \"date\", 1),\n            new FieldProps(\"stringField\", \"string\", 1),\n            new FieldProps(\"boolField\", \"boolean\", 1)\n        ));\n\n    fieldsToTestMulti =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intFieldMulti\", \"int\", 5),\n            new FieldProps(\"longFieldMulti\", \"long\", 5),\n            new FieldProps(\"doubleFieldMulti\", \"double\", 5),\n            new FieldProps(\"floatFieldMulti\", \"float\", 5),\n            new FieldProps(\"dateFieldMulti\", \"date\", 5),\n            new FieldProps(\"stringFieldMulti\", \"string\", 5),\n            new FieldProps(\"boolFieldMulti\", \"boolean\", 2)\n        ));\n\n    // Fields to test for grouping and sorting with sortMinssingFirst/Last.\n    fieldsToTestGroupSortFirst =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSF\", \"int\"),\n            new FieldProps(\"longGSF\", \"long\"),\n            new FieldProps(\"doubleGSF\", \"double\"),\n            new FieldProps(\"floatGSF\", \"float\"),\n            new FieldProps(\"dateGSF\", \"date\"),\n            new FieldProps(\"stringGSF\", \"string\"),\n            new FieldProps(\"boolGSF\", \"boolean\")\n        ));\n\n    fieldsToTestGroupSortLast =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSL\", \"int\"),\n            new FieldProps(\"longGSL\", \"long\"),\n            new FieldProps(\"doubleGSL\", \"double\"),\n            new FieldProps(\"floatGSL\", \"float\"),\n            new FieldProps(\"dateGSL\", \"date\"),\n            new FieldProps(\"stringGSL\", \"string\"),\n            new FieldProps(\"boolGSL\", \"boolean\")\n        ));\n\n    List<Update> updateList = new ArrayList<>(fieldsToTestSingle.size() +\n        fieldsToTestMulti.size() + fieldsToTestGroupSortFirst.size() + fieldsToTestGroupSortLast.size() +\n        4);\n\n    updateList.add(getType(\"name\", \"float\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Float.class)));\n\n    updateList.add(getType(\"name\", \"double\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Double.class)));\n\n    updateList.add(getType(\"name\", \"date\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Date.class)));\n\n    updateList.add(getType(\"name\", \"boolean\", \"class\", \"solr.BoolField\"));\n\n\n    // Add a field for each of the types we want to the schema.\n\n    defineFields(updateList, fieldsToTestSingle, false);\n    defineFields(updateList, fieldsToTestMulti, true);\n    defineFields(updateList, fieldsToTestGroupSortFirst, false, \"sorMissingFirst\", \"true\");\n    defineFields(updateList, fieldsToTestGroupSortLast, false, \"sorMissingLast\", \"true\");\n\n\n    MultiUpdate multiUpdateRequest = new MultiUpdate(updateList);\n    SchemaResponse.UpdateResponse multipleUpdatesResponse = multiUpdateRequest.process(cluster.getSolrClient(), COLLECTION);\n    assertNull(\"Error adding fields\", multipleUpdatesResponse.getResponse().get(\"errors\"));\n\n    cluster.getSolrClient().setDefaultCollection(COLLECTION);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void createCluster() throws Exception {\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    configureCluster(2)\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-managed\").resolve(\"conf\"))\n        .configure();\n\n    // Need enough shards that we have some shards that don't have any docs on them.\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf1\", 4, 1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n\n    fieldsToTestSingle =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intField\", \"int\", 1),\n            new FieldProps(\"longField\", \"long\", 1),\n            new FieldProps(\"doubleField\", \"double\", 1),\n            new FieldProps(\"floatField\", \"float\", 1),\n            new FieldProps(\"dateField\", \"date\", 1),\n            new FieldProps(\"stringField\", \"string\", 1),\n            new FieldProps(\"boolField\", \"boolean\", 1)\n        ));\n\n    fieldsToTestMulti =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intFieldMulti\", \"int\", 5),\n            new FieldProps(\"longFieldMulti\", \"long\", 5),\n            new FieldProps(\"doubleFieldMulti\", \"double\", 5),\n            new FieldProps(\"floatFieldMulti\", \"float\", 5),\n            new FieldProps(\"dateFieldMulti\", \"date\", 5),\n            new FieldProps(\"stringFieldMulti\", \"string\", 5),\n            new FieldProps(\"boolFieldMulti\", \"boolean\", 2)\n        ));\n\n    // Fields to test for grouping and sorting with sortMinssingFirst/Last.\n    fieldsToTestGroupSortFirst =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSF\", \"int\"),\n            new FieldProps(\"longGSF\", \"long\"),\n            new FieldProps(\"doubleGSF\", \"double\"),\n            new FieldProps(\"floatGSF\", \"float\"),\n            new FieldProps(\"dateGSF\", \"date\"),\n            new FieldProps(\"stringGSF\", \"string\"),\n            new FieldProps(\"boolGSF\", \"boolean\")\n        ));\n\n    fieldsToTestGroupSortLast =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSL\", \"int\"),\n            new FieldProps(\"longGSL\", \"long\"),\n            new FieldProps(\"doubleGSL\", \"double\"),\n            new FieldProps(\"floatGSL\", \"float\"),\n            new FieldProps(\"dateGSL\", \"date\"),\n            new FieldProps(\"stringGSL\", \"string\"),\n            new FieldProps(\"boolGSL\", \"boolean\")\n        ));\n\n    List<Update> updateList = new ArrayList<>(fieldsToTestSingle.size() +\n        fieldsToTestMulti.size() + fieldsToTestGroupSortFirst.size() + fieldsToTestGroupSortLast.size() +\n        4);\n\n    updateList.add(getType(\"name\", \"float\", \"class\", \"solr.TrieFloatField\", \"precisionStep\", \"0\"));\n\n    updateList.add(getType(\"name\", \"double\", \"class\", \"solr.TrieDoubleField\", \"precisionStep\", \"0\"));\n\n    updateList.add(getType(\"name\", \"date\", \"class\", \"solr.TrieDateField\", \"precisionStep\", \"0\"));\n\n    updateList.add(getType(\"name\", \"boolean\", \"class\", \"solr.BoolField\"));\n\n\n    // Add a field for each of the types we want to the schema.\n\n    defineFields(updateList, fieldsToTestSingle, false);\n    defineFields(updateList, fieldsToTestMulti, true);\n    defineFields(updateList, fieldsToTestGroupSortFirst, false, \"sorMissingFirst\", \"true\");\n    defineFields(updateList, fieldsToTestGroupSortLast, false, \"sorMissingLast\", \"true\");\n\n\n    MultiUpdate multiUpdateRequest = new MultiUpdate(updateList);\n    SchemaResponse.UpdateResponse multipleUpdatesResponse = multiUpdateRequest.process(cluster.getSolrClient(), COLLECTION);\n    assertNull(\"Error adding fields\", multipleUpdatesResponse.getResponse().get(\"errors\"));\n\n    cluster.getSolrClient().setDefaultCollection(COLLECTION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#createCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#createCluster().mjava","sourceNew":"  @Before\n  public void createCluster() throws Exception {\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    configureCluster(2)\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-managed\").resolve(\"conf\"))\n        .configure();\n\n    // Need enough shards that we have some shards that don't have any docs on them.\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf1\", 4, 1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(COLLECTION, 4, 4);\n\n    fieldsToTestSingle =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intField\", \"int\", 1),\n            new FieldProps(\"longField\", \"long\", 1),\n            new FieldProps(\"doubleField\", \"double\", 1),\n            new FieldProps(\"floatField\", \"float\", 1),\n            new FieldProps(\"dateField\", \"date\", 1),\n            new FieldProps(\"stringField\", \"string\", 1),\n            new FieldProps(\"boolField\", \"boolean\", 1)\n        ));\n\n    fieldsToTestMulti =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intFieldMulti\", \"int\", 5),\n            new FieldProps(\"longFieldMulti\", \"long\", 5),\n            new FieldProps(\"doubleFieldMulti\", \"double\", 5),\n            new FieldProps(\"floatFieldMulti\", \"float\", 5),\n            new FieldProps(\"dateFieldMulti\", \"date\", 5),\n            new FieldProps(\"stringFieldMulti\", \"string\", 5),\n            new FieldProps(\"boolFieldMulti\", \"boolean\", 2)\n        ));\n\n    // Fields to test for grouping and sorting with sortMinssingFirst/Last.\n    fieldsToTestGroupSortFirst =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSF\", \"int\"),\n            new FieldProps(\"longGSF\", \"long\"),\n            new FieldProps(\"doubleGSF\", \"double\"),\n            new FieldProps(\"floatGSF\", \"float\"),\n            new FieldProps(\"dateGSF\", \"date\"),\n            new FieldProps(\"stringGSF\", \"string\"),\n            new FieldProps(\"boolGSF\", \"boolean\")\n        ));\n\n    fieldsToTestGroupSortLast =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSL\", \"int\"),\n            new FieldProps(\"longGSL\", \"long\"),\n            new FieldProps(\"doubleGSL\", \"double\"),\n            new FieldProps(\"floatGSL\", \"float\"),\n            new FieldProps(\"dateGSL\", \"date\"),\n            new FieldProps(\"stringGSL\", \"string\"),\n            new FieldProps(\"boolGSL\", \"boolean\")\n        ));\n\n    List<Update> updateList = new ArrayList<>(fieldsToTestSingle.size() +\n        fieldsToTestMulti.size() + fieldsToTestGroupSortFirst.size() + fieldsToTestGroupSortLast.size() +\n        4);\n\n    updateList.add(getType(\"name\", \"float\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Float.class)));\n\n    updateList.add(getType(\"name\", \"double\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Double.class)));\n\n    updateList.add(getType(\"name\", \"date\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Date.class)));\n\n    updateList.add(getType(\"name\", \"boolean\", \"class\", \"solr.BoolField\"));\n\n\n    // Add a field for each of the types we want to the schema.\n\n    defineFields(updateList, fieldsToTestSingle, false);\n    defineFields(updateList, fieldsToTestMulti, true);\n    defineFields(updateList, fieldsToTestGroupSortFirst, false, \"sorMissingFirst\", \"true\");\n    defineFields(updateList, fieldsToTestGroupSortLast, false, \"sorMissingLast\", \"true\");\n\n\n    MultiUpdate multiUpdateRequest = new MultiUpdate(updateList);\n    SchemaResponse.UpdateResponse multipleUpdatesResponse = multiUpdateRequest.process(cluster.getSolrClient(), COLLECTION);\n    assertNull(\"Error adding fields\", multipleUpdatesResponse.getResponse().get(\"errors\"));\n\n    cluster.getSolrClient().setDefaultCollection(COLLECTION);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void createCluster() throws Exception {\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    configureCluster(2)\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-managed\").resolve(\"conf\"))\n        .configure();\n\n    // Need enough shards that we have some shards that don't have any docs on them.\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf1\", 4, 1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n\n    fieldsToTestSingle =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intField\", \"int\", 1),\n            new FieldProps(\"longField\", \"long\", 1),\n            new FieldProps(\"doubleField\", \"double\", 1),\n            new FieldProps(\"floatField\", \"float\", 1),\n            new FieldProps(\"dateField\", \"date\", 1),\n            new FieldProps(\"stringField\", \"string\", 1),\n            new FieldProps(\"boolField\", \"boolean\", 1)\n        ));\n\n    fieldsToTestMulti =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intFieldMulti\", \"int\", 5),\n            new FieldProps(\"longFieldMulti\", \"long\", 5),\n            new FieldProps(\"doubleFieldMulti\", \"double\", 5),\n            new FieldProps(\"floatFieldMulti\", \"float\", 5),\n            new FieldProps(\"dateFieldMulti\", \"date\", 5),\n            new FieldProps(\"stringFieldMulti\", \"string\", 5),\n            new FieldProps(\"boolFieldMulti\", \"boolean\", 2)\n        ));\n\n    // Fields to test for grouping and sorting with sortMinssingFirst/Last.\n    fieldsToTestGroupSortFirst =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSF\", \"int\"),\n            new FieldProps(\"longGSF\", \"long\"),\n            new FieldProps(\"doubleGSF\", \"double\"),\n            new FieldProps(\"floatGSF\", \"float\"),\n            new FieldProps(\"dateGSF\", \"date\"),\n            new FieldProps(\"stringGSF\", \"string\"),\n            new FieldProps(\"boolGSF\", \"boolean\")\n        ));\n\n    fieldsToTestGroupSortLast =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSL\", \"int\"),\n            new FieldProps(\"longGSL\", \"long\"),\n            new FieldProps(\"doubleGSL\", \"double\"),\n            new FieldProps(\"floatGSL\", \"float\"),\n            new FieldProps(\"dateGSL\", \"date\"),\n            new FieldProps(\"stringGSL\", \"string\"),\n            new FieldProps(\"boolGSL\", \"boolean\")\n        ));\n\n    List<Update> updateList = new ArrayList<>(fieldsToTestSingle.size() +\n        fieldsToTestMulti.size() + fieldsToTestGroupSortFirst.size() + fieldsToTestGroupSortLast.size() +\n        4);\n\n    updateList.add(getType(\"name\", \"float\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Float.class)));\n\n    updateList.add(getType(\"name\", \"double\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Double.class)));\n\n    updateList.add(getType(\"name\", \"date\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Date.class)));\n\n    updateList.add(getType(\"name\", \"boolean\", \"class\", \"solr.BoolField\"));\n\n\n    // Add a field for each of the types we want to the schema.\n\n    defineFields(updateList, fieldsToTestSingle, false);\n    defineFields(updateList, fieldsToTestMulti, true);\n    defineFields(updateList, fieldsToTestGroupSortFirst, false, \"sorMissingFirst\", \"true\");\n    defineFields(updateList, fieldsToTestGroupSortLast, false, \"sorMissingLast\", \"true\");\n\n\n    MultiUpdate multiUpdateRequest = new MultiUpdate(updateList);\n    SchemaResponse.UpdateResponse multipleUpdatesResponse = multiUpdateRequest.process(cluster.getSolrClient(), COLLECTION);\n    assertNull(\"Error adding fields\", multipleUpdatesResponse.getResponse().get(\"errors\"));\n\n    cluster.getSolrClient().setDefaultCollection(COLLECTION);\n  }\n\n","bugFix":["c72f6f0907682b825869d7878ba72d8259dabc91"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab3edb4bdcf1695b3c43f8584d7473f9516a34e4","date":1550862271,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#createCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#createCluster().mjava","sourceNew":"  @Before\n  public void createCluster() throws Exception {\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    configureCluster(2)\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-managed\").resolve(\"conf\"))\n        .configure();\n\n    // Need enough shards that we have some shards that don't have any docs on them.\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf1\", 4, 1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(COLLECTION, 4, 4);\n\n    fieldsToTestSingle =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intField\", \"int\", 1),\n            new FieldProps(\"longField\", \"long\", 1),\n            new FieldProps(\"doubleField\", \"double\", 1),\n            new FieldProps(\"floatField\", \"float\", 1),\n            new FieldProps(\"dateField\", \"date\", 1),\n            new FieldProps(\"stringField\", \"string\", 1),\n            new FieldProps(\"boolField\", \"boolean\", 1),\n            new FieldProps(\"sortableText\", \"sortabletext\", 1)\n        ));\n\n    fieldsToTestMulti =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intFieldMulti\", \"int\", 5),\n            new FieldProps(\"longFieldMulti\", \"long\", 5),\n            new FieldProps(\"doubleFieldMulti\", \"double\", 5),\n            new FieldProps(\"floatFieldMulti\", \"float\", 5),\n            new FieldProps(\"dateFieldMulti\", \"date\", 5),\n            new FieldProps(\"stringFieldMulti\", \"string\", 5),\n            new FieldProps(\"boolFieldMulti\", \"boolean\", 2),\n            new FieldProps(\"sortableFieldMulti\", \"sortabletext\", 5)\n        ));\n\n    // Fields to test for grouping and sorting with sortMissingFirst/Last.\n    fieldsToTestGroupSortFirst =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSF\", \"int\"),\n            new FieldProps(\"longGSF\", \"long\"),\n            new FieldProps(\"doubleGSF\", \"double\"),\n            new FieldProps(\"floatGSF\", \"float\"),\n            new FieldProps(\"dateGSF\", \"date\"),\n            new FieldProps(\"stringGSF\", \"string\"),\n            new FieldProps(\"boolGSF\", \"boolean\"),\n            new FieldProps(\"sortableGSF\", \"sortabletext\")\n        ));\n\n    fieldsToTestGroupSortLast =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSL\", \"int\"),\n            new FieldProps(\"longGSL\", \"long\"),\n            new FieldProps(\"doubleGSL\", \"double\"),\n            new FieldProps(\"floatGSL\", \"float\"),\n            new FieldProps(\"dateGSL\", \"date\"),\n            new FieldProps(\"stringGSL\", \"string\"),\n            new FieldProps(\"boolGSL\", \"boolean\"),\n            new FieldProps(\"sortableGSL\", \"sortabletext\")\n        ));\n\n    List<Update> updateList = new ArrayList<>(fieldsToTestSingle.size() +\n        fieldsToTestMulti.size() + fieldsToTestGroupSortFirst.size() + fieldsToTestGroupSortLast.size() +\n        4);\n\n    updateList.add(getType(\"name\", \"float\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Float.class)));\n\n    updateList.add(getType(\"name\", \"double\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Double.class)));\n\n    updateList.add(getType(\"name\", \"date\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Date.class)));\n\n    updateList.add(getType(\"name\", \"boolean\", \"class\", \"solr.BoolField\"));\n\n\n    // Add a field for each of the types we want to the schema.\n\n    defineFields(updateList, fieldsToTestSingle, false);\n    defineFields(updateList, fieldsToTestMulti, true);\n    defineFields(updateList, fieldsToTestGroupSortFirst, false, \"sorMissingFirst\", \"true\");\n    defineFields(updateList, fieldsToTestGroupSortLast, false, \"sorMissingLast\", \"true\");\n\n\n    MultiUpdate multiUpdateRequest = new MultiUpdate(updateList);\n    SchemaResponse.UpdateResponse multipleUpdatesResponse = multiUpdateRequest.process(cluster.getSolrClient(), COLLECTION);\n    assertNull(\"Error adding fields\", multipleUpdatesResponse.getResponse().get(\"errors\"));\n\n    cluster.getSolrClient().setDefaultCollection(COLLECTION);\n  }\n\n","sourceOld":"  @Before\n  public void createCluster() throws Exception {\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    configureCluster(2)\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-managed\").resolve(\"conf\"))\n        .configure();\n\n    // Need enough shards that we have some shards that don't have any docs on them.\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf1\", 4, 1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(COLLECTION, 4, 4);\n\n    fieldsToTestSingle =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intField\", \"int\", 1),\n            new FieldProps(\"longField\", \"long\", 1),\n            new FieldProps(\"doubleField\", \"double\", 1),\n            new FieldProps(\"floatField\", \"float\", 1),\n            new FieldProps(\"dateField\", \"date\", 1),\n            new FieldProps(\"stringField\", \"string\", 1),\n            new FieldProps(\"boolField\", \"boolean\", 1)\n        ));\n\n    fieldsToTestMulti =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intFieldMulti\", \"int\", 5),\n            new FieldProps(\"longFieldMulti\", \"long\", 5),\n            new FieldProps(\"doubleFieldMulti\", \"double\", 5),\n            new FieldProps(\"floatFieldMulti\", \"float\", 5),\n            new FieldProps(\"dateFieldMulti\", \"date\", 5),\n            new FieldProps(\"stringFieldMulti\", \"string\", 5),\n            new FieldProps(\"boolFieldMulti\", \"boolean\", 2)\n        ));\n\n    // Fields to test for grouping and sorting with sortMinssingFirst/Last.\n    fieldsToTestGroupSortFirst =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSF\", \"int\"),\n            new FieldProps(\"longGSF\", \"long\"),\n            new FieldProps(\"doubleGSF\", \"double\"),\n            new FieldProps(\"floatGSF\", \"float\"),\n            new FieldProps(\"dateGSF\", \"date\"),\n            new FieldProps(\"stringGSF\", \"string\"),\n            new FieldProps(\"boolGSF\", \"boolean\")\n        ));\n\n    fieldsToTestGroupSortLast =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSL\", \"int\"),\n            new FieldProps(\"longGSL\", \"long\"),\n            new FieldProps(\"doubleGSL\", \"double\"),\n            new FieldProps(\"floatGSL\", \"float\"),\n            new FieldProps(\"dateGSL\", \"date\"),\n            new FieldProps(\"stringGSL\", \"string\"),\n            new FieldProps(\"boolGSL\", \"boolean\")\n        ));\n\n    List<Update> updateList = new ArrayList<>(fieldsToTestSingle.size() +\n        fieldsToTestMulti.size() + fieldsToTestGroupSortFirst.size() + fieldsToTestGroupSortLast.size() +\n        4);\n\n    updateList.add(getType(\"name\", \"float\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Float.class)));\n\n    updateList.add(getType(\"name\", \"double\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Double.class)));\n\n    updateList.add(getType(\"name\", \"date\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Date.class)));\n\n    updateList.add(getType(\"name\", \"boolean\", \"class\", \"solr.BoolField\"));\n\n\n    // Add a field for each of the types we want to the schema.\n\n    defineFields(updateList, fieldsToTestSingle, false);\n    defineFields(updateList, fieldsToTestMulti, true);\n    defineFields(updateList, fieldsToTestGroupSortFirst, false, \"sorMissingFirst\", \"true\");\n    defineFields(updateList, fieldsToTestGroupSortLast, false, \"sorMissingLast\", \"true\");\n\n\n    MultiUpdate multiUpdateRequest = new MultiUpdate(updateList);\n    SchemaResponse.UpdateResponse multipleUpdatesResponse = multiUpdateRequest.process(cluster.getSolrClient(), COLLECTION);\n    assertNull(\"Error adding fields\", multipleUpdatesResponse.getResponse().get(\"errors\"));\n\n    cluster.getSolrClient().setDefaultCollection(COLLECTION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4","date":1551083645,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#createCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#createCluster().mjava","sourceNew":"  @Before\n  public void createCluster() throws Exception {\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    configureCluster(2)\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-managed\").resolve(\"conf\"))\n        .configure();\n\n    // Need enough shards that we have some shards that don't have any docs on them.\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf1\", 4, 1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(COLLECTION, 4, 4);\n\n    fieldsToTestSingle =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intField\", \"int\", 1),\n            new FieldProps(\"longField\", \"long\", 1),\n            new FieldProps(\"doubleField\", \"double\", 1),\n            new FieldProps(\"floatField\", \"float\", 1),\n            new FieldProps(\"dateField\", \"date\", 1),\n            new FieldProps(\"stringField\", \"string\", 1),\n            new FieldProps(\"boolField\", \"boolean\", 1),\n            new FieldProps(\"sortableText\", \"sortabletext\", 1)\n        ));\n\n    fieldsToTestMulti =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intFieldMulti\", \"int\", 5),\n            new FieldProps(\"longFieldMulti\", \"long\", 5),\n            new FieldProps(\"doubleFieldMulti\", \"double\", 5),\n            new FieldProps(\"floatFieldMulti\", \"float\", 5),\n            new FieldProps(\"dateFieldMulti\", \"date\", 5),\n            new FieldProps(\"stringFieldMulti\", \"string\", 5),\n            new FieldProps(\"boolFieldMulti\", \"boolean\", 2),\n            new FieldProps(\"sortableFieldMulti\", \"sortabletext\", 5)\n        ));\n\n    // Fields to test for grouping and sorting with sortMissingFirst/Last.\n    fieldsToTestGroupSortFirst =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSF\", \"int\"),\n            new FieldProps(\"longGSF\", \"long\"),\n            new FieldProps(\"doubleGSF\", \"double\"),\n            new FieldProps(\"floatGSF\", \"float\"),\n            new FieldProps(\"dateGSF\", \"date\"),\n            new FieldProps(\"stringGSF\", \"string\"),\n            new FieldProps(\"boolGSF\", \"boolean\"),\n            new FieldProps(\"sortableGSF\", \"sortabletext\")\n        ));\n\n    fieldsToTestGroupSortLast =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSL\", \"int\"),\n            new FieldProps(\"longGSL\", \"long\"),\n            new FieldProps(\"doubleGSL\", \"double\"),\n            new FieldProps(\"floatGSL\", \"float\"),\n            new FieldProps(\"dateGSL\", \"date\"),\n            new FieldProps(\"stringGSL\", \"string\"),\n            new FieldProps(\"boolGSL\", \"boolean\"),\n            new FieldProps(\"sortableGSL\", \"sortabletext\")\n        ));\n\n    List<Update> updateList = new ArrayList<>(fieldsToTestSingle.size() +\n        fieldsToTestMulti.size() + fieldsToTestGroupSortFirst.size() + fieldsToTestGroupSortLast.size() +\n        4);\n\n    updateList.add(getType(\"name\", \"float\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Float.class)));\n\n    updateList.add(getType(\"name\", \"double\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Double.class)));\n\n    updateList.add(getType(\"name\", \"date\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Date.class)));\n\n    updateList.add(getType(\"name\", \"boolean\", \"class\", \"solr.BoolField\"));\n\n\n    // Add a field for each of the types we want to the schema.\n\n    defineFields(updateList, fieldsToTestSingle, false);\n    defineFields(updateList, fieldsToTestMulti, true);\n    defineFields(updateList, fieldsToTestGroupSortFirst, false, \"sorMissingFirst\", \"true\");\n    defineFields(updateList, fieldsToTestGroupSortLast, false, \"sorMissingLast\", \"true\");\n\n\n    MultiUpdate multiUpdateRequest = new MultiUpdate(updateList);\n    SchemaResponse.UpdateResponse multipleUpdatesResponse = multiUpdateRequest.process(cluster.getSolrClient(), COLLECTION);\n    assertNull(\"Error adding fields\", multipleUpdatesResponse.getResponse().get(\"errors\"));\n\n    cluster.getSolrClient().setDefaultCollection(COLLECTION);\n  }\n\n","sourceOld":"  @Before\n  public void createCluster() throws Exception {\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    configureCluster(2)\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-managed\").resolve(\"conf\"))\n        .configure();\n\n    // Need enough shards that we have some shards that don't have any docs on them.\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf1\", 4, 1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(COLLECTION, 4, 4);\n\n    fieldsToTestSingle =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intField\", \"int\", 1),\n            new FieldProps(\"longField\", \"long\", 1),\n            new FieldProps(\"doubleField\", \"double\", 1),\n            new FieldProps(\"floatField\", \"float\", 1),\n            new FieldProps(\"dateField\", \"date\", 1),\n            new FieldProps(\"stringField\", \"string\", 1),\n            new FieldProps(\"boolField\", \"boolean\", 1)\n        ));\n\n    fieldsToTestMulti =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intFieldMulti\", \"int\", 5),\n            new FieldProps(\"longFieldMulti\", \"long\", 5),\n            new FieldProps(\"doubleFieldMulti\", \"double\", 5),\n            new FieldProps(\"floatFieldMulti\", \"float\", 5),\n            new FieldProps(\"dateFieldMulti\", \"date\", 5),\n            new FieldProps(\"stringFieldMulti\", \"string\", 5),\n            new FieldProps(\"boolFieldMulti\", \"boolean\", 2)\n        ));\n\n    // Fields to test for grouping and sorting with sortMinssingFirst/Last.\n    fieldsToTestGroupSortFirst =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSF\", \"int\"),\n            new FieldProps(\"longGSF\", \"long\"),\n            new FieldProps(\"doubleGSF\", \"double\"),\n            new FieldProps(\"floatGSF\", \"float\"),\n            new FieldProps(\"dateGSF\", \"date\"),\n            new FieldProps(\"stringGSF\", \"string\"),\n            new FieldProps(\"boolGSF\", \"boolean\")\n        ));\n\n    fieldsToTestGroupSortLast =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSL\", \"int\"),\n            new FieldProps(\"longGSL\", \"long\"),\n            new FieldProps(\"doubleGSL\", \"double\"),\n            new FieldProps(\"floatGSL\", \"float\"),\n            new FieldProps(\"dateGSL\", \"date\"),\n            new FieldProps(\"stringGSL\", \"string\"),\n            new FieldProps(\"boolGSL\", \"boolean\")\n        ));\n\n    List<Update> updateList = new ArrayList<>(fieldsToTestSingle.size() +\n        fieldsToTestMulti.size() + fieldsToTestGroupSortFirst.size() + fieldsToTestGroupSortLast.size() +\n        4);\n\n    updateList.add(getType(\"name\", \"float\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Float.class)));\n\n    updateList.add(getType(\"name\", \"double\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Double.class)));\n\n    updateList.add(getType(\"name\", \"date\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Date.class)));\n\n    updateList.add(getType(\"name\", \"boolean\", \"class\", \"solr.BoolField\"));\n\n\n    // Add a field for each of the types we want to the schema.\n\n    defineFields(updateList, fieldsToTestSingle, false);\n    defineFields(updateList, fieldsToTestMulti, true);\n    defineFields(updateList, fieldsToTestGroupSortFirst, false, \"sorMissingFirst\", \"true\");\n    defineFields(updateList, fieldsToTestGroupSortLast, false, \"sorMissingLast\", \"true\");\n\n\n    MultiUpdate multiUpdateRequest = new MultiUpdate(updateList);\n    SchemaResponse.UpdateResponse multipleUpdatesResponse = multiUpdateRequest.process(cluster.getSolrClient(), COLLECTION);\n    assertNull(\"Error adding fields\", multipleUpdatesResponse.getResponse().get(\"errors\"));\n\n    cluster.getSolrClient().setDefaultCollection(COLLECTION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c344401c324a00bc10cacfb90598738235a4decb","date":1556461561,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#createCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#createCluster().mjava","sourceNew":"  @BeforeClass\n  public static void createCluster() throws Exception {\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    configureCluster(2)\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-managed\").resolve(\"conf\"))\n        .configure();\n\n    // Need enough shards that we have some shards that don't have any docs on them.\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf1\", 4, 1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(COLLECTION, 4, 4);\n\n    fieldsToTestSingle =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intField\", \"int\", 1),\n            new FieldProps(\"longField\", \"long\", 1),\n            new FieldProps(\"doubleField\", \"double\", 1),\n            new FieldProps(\"floatField\", \"float\", 1),\n            new FieldProps(\"dateField\", \"date\", 1),\n            new FieldProps(\"stringField\", \"string\", 1),\n            new FieldProps(\"boolField\", \"boolean\", 1),\n            new FieldProps(\"sortableText\", \"sortabletext\", 1)\n        ));\n\n    fieldsToTestMulti =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intFieldMulti\", \"int\", 5),\n            new FieldProps(\"longFieldMulti\", \"long\", 5),\n            new FieldProps(\"doubleFieldMulti\", \"double\", 5),\n            new FieldProps(\"floatFieldMulti\", \"float\", 5),\n            new FieldProps(\"dateFieldMulti\", \"date\", 5),\n            new FieldProps(\"stringFieldMulti\", \"string\", 5),\n            new FieldProps(\"boolFieldMulti\", \"boolean\", 2),\n            new FieldProps(\"sortableFieldMulti\", \"sortabletext\", 5)\n        ));\n\n    // Fields to test for grouping and sorting with sortMissingFirst/Last.\n    fieldsToTestGroupSortFirst =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSF\", \"int\"),\n            new FieldProps(\"longGSF\", \"long\"),\n            new FieldProps(\"doubleGSF\", \"double\"),\n            new FieldProps(\"floatGSF\", \"float\"),\n            new FieldProps(\"dateGSF\", \"date\"),\n            new FieldProps(\"stringGSF\", \"string\"),\n            new FieldProps(\"boolGSF\", \"boolean\"),\n            new FieldProps(\"sortableGSF\", \"sortabletext\")\n        ));\n\n    fieldsToTestGroupSortLast =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSL\", \"int\"),\n            new FieldProps(\"longGSL\", \"long\"),\n            new FieldProps(\"doubleGSL\", \"double\"),\n            new FieldProps(\"floatGSL\", \"float\"),\n            new FieldProps(\"dateGSL\", \"date\"),\n            new FieldProps(\"stringGSL\", \"string\"),\n            new FieldProps(\"boolGSL\", \"boolean\"),\n            new FieldProps(\"sortableGSL\", \"sortabletext\")\n        ));\n\n    List<Update> updateList = new ArrayList<>(fieldsToTestSingle.size() +\n        fieldsToTestMulti.size() + fieldsToTestGroupSortFirst.size() + fieldsToTestGroupSortLast.size() +\n        4);\n\n    updateList.add(getType(\"name\", \"float\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Float.class)));\n\n    updateList.add(getType(\"name\", \"double\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Double.class)));\n\n    updateList.add(getType(\"name\", \"date\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Date.class)));\n\n    updateList.add(getType(\"name\", \"boolean\", \"class\", \"solr.BoolField\"));\n\n\n    // Add a field for each of the types we want to the schema.\n\n    defineFields(updateList, fieldsToTestSingle, false);\n    defineFields(updateList, fieldsToTestMulti, true);\n    defineFields(updateList, fieldsToTestGroupSortFirst, false, \"sorMissingFirst\", \"true\");\n    defineFields(updateList, fieldsToTestGroupSortLast, false, \"sorMissingLast\", \"true\");\n\n\n    MultiUpdate multiUpdateRequest = new MultiUpdate(updateList);\n    SchemaResponse.UpdateResponse multipleUpdatesResponse = multiUpdateRequest.process(cluster.getSolrClient(), COLLECTION);\n    assertNull(\"Error adding fields\", multipleUpdatesResponse.getResponse().get(\"errors\"));\n\n    cluster.getSolrClient().setDefaultCollection(COLLECTION);\n  }\n\n","sourceOld":"  @Before\n  public void createCluster() throws Exception {\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    configureCluster(2)\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-managed\").resolve(\"conf\"))\n        .configure();\n\n    // Need enough shards that we have some shards that don't have any docs on them.\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf1\", 4, 1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(COLLECTION, 4, 4);\n\n    fieldsToTestSingle =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intField\", \"int\", 1),\n            new FieldProps(\"longField\", \"long\", 1),\n            new FieldProps(\"doubleField\", \"double\", 1),\n            new FieldProps(\"floatField\", \"float\", 1),\n            new FieldProps(\"dateField\", \"date\", 1),\n            new FieldProps(\"stringField\", \"string\", 1),\n            new FieldProps(\"boolField\", \"boolean\", 1),\n            new FieldProps(\"sortableText\", \"sortabletext\", 1)\n        ));\n\n    fieldsToTestMulti =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intFieldMulti\", \"int\", 5),\n            new FieldProps(\"longFieldMulti\", \"long\", 5),\n            new FieldProps(\"doubleFieldMulti\", \"double\", 5),\n            new FieldProps(\"floatFieldMulti\", \"float\", 5),\n            new FieldProps(\"dateFieldMulti\", \"date\", 5),\n            new FieldProps(\"stringFieldMulti\", \"string\", 5),\n            new FieldProps(\"boolFieldMulti\", \"boolean\", 2),\n            new FieldProps(\"sortableFieldMulti\", \"sortabletext\", 5)\n        ));\n\n    // Fields to test for grouping and sorting with sortMissingFirst/Last.\n    fieldsToTestGroupSortFirst =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSF\", \"int\"),\n            new FieldProps(\"longGSF\", \"long\"),\n            new FieldProps(\"doubleGSF\", \"double\"),\n            new FieldProps(\"floatGSF\", \"float\"),\n            new FieldProps(\"dateGSF\", \"date\"),\n            new FieldProps(\"stringGSF\", \"string\"),\n            new FieldProps(\"boolGSF\", \"boolean\"),\n            new FieldProps(\"sortableGSF\", \"sortabletext\")\n        ));\n\n    fieldsToTestGroupSortLast =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSL\", \"int\"),\n            new FieldProps(\"longGSL\", \"long\"),\n            new FieldProps(\"doubleGSL\", \"double\"),\n            new FieldProps(\"floatGSL\", \"float\"),\n            new FieldProps(\"dateGSL\", \"date\"),\n            new FieldProps(\"stringGSL\", \"string\"),\n            new FieldProps(\"boolGSL\", \"boolean\"),\n            new FieldProps(\"sortableGSL\", \"sortabletext\")\n        ));\n\n    List<Update> updateList = new ArrayList<>(fieldsToTestSingle.size() +\n        fieldsToTestMulti.size() + fieldsToTestGroupSortFirst.size() + fieldsToTestGroupSortLast.size() +\n        4);\n\n    updateList.add(getType(\"name\", \"float\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Float.class)));\n\n    updateList.add(getType(\"name\", \"double\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Double.class)));\n\n    updateList.add(getType(\"name\", \"date\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Date.class)));\n\n    updateList.add(getType(\"name\", \"boolean\", \"class\", \"solr.BoolField\"));\n\n\n    // Add a field for each of the types we want to the schema.\n\n    defineFields(updateList, fieldsToTestSingle, false);\n    defineFields(updateList, fieldsToTestMulti, true);\n    defineFields(updateList, fieldsToTestGroupSortFirst, false, \"sorMissingFirst\", \"true\");\n    defineFields(updateList, fieldsToTestGroupSortLast, false, \"sorMissingLast\", \"true\");\n\n\n    MultiUpdate multiUpdateRequest = new MultiUpdate(updateList);\n    SchemaResponse.UpdateResponse multipleUpdatesResponse = multiUpdateRequest.process(cluster.getSolrClient(), COLLECTION);\n    assertNull(\"Error adding fields\", multipleUpdatesResponse.getResponse().get(\"errors\"));\n\n    cluster.getSolrClient().setDefaultCollection(COLLECTION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#createCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#createCluster().mjava","sourceNew":"  @BeforeClass\n  public static void createCluster() throws Exception {\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    configureCluster(2)\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-managed\").resolve(\"conf\"))\n        .configure();\n\n    // Need enough shards that we have some shards that don't have any docs on them.\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf1\", 4, 1)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(COLLECTION, 4, 4);\n\n    fieldsToTestSingle =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intField\", \"int\", 1),\n            new FieldProps(\"longField\", \"long\", 1),\n            new FieldProps(\"doubleField\", \"double\", 1),\n            new FieldProps(\"floatField\", \"float\", 1),\n            new FieldProps(\"dateField\", \"date\", 1),\n            new FieldProps(\"stringField\", \"string\", 1),\n            new FieldProps(\"boolField\", \"boolean\", 1),\n            new FieldProps(\"sortableText\", \"sortabletext\", 1)\n        ));\n\n    fieldsToTestMulti =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intFieldMulti\", \"int\", 5),\n            new FieldProps(\"longFieldMulti\", \"long\", 5),\n            new FieldProps(\"doubleFieldMulti\", \"double\", 5),\n            new FieldProps(\"floatFieldMulti\", \"float\", 5),\n            new FieldProps(\"dateFieldMulti\", \"date\", 5),\n            new FieldProps(\"stringFieldMulti\", \"string\", 5),\n            new FieldProps(\"boolFieldMulti\", \"boolean\", 2),\n            new FieldProps(\"sortableFieldMulti\", \"sortabletext\", 5)\n        ));\n\n    // Fields to test for grouping and sorting with sortMissingFirst/Last.\n    fieldsToTestGroupSortFirst =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSF\", \"int\"),\n            new FieldProps(\"longGSF\", \"long\"),\n            new FieldProps(\"doubleGSF\", \"double\"),\n            new FieldProps(\"floatGSF\", \"float\"),\n            new FieldProps(\"dateGSF\", \"date\"),\n            new FieldProps(\"stringGSF\", \"string\"),\n            new FieldProps(\"boolGSF\", \"boolean\"),\n            new FieldProps(\"sortableGSF\", \"sortabletext\")\n        ));\n\n    fieldsToTestGroupSortLast =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSL\", \"int\"),\n            new FieldProps(\"longGSL\", \"long\"),\n            new FieldProps(\"doubleGSL\", \"double\"),\n            new FieldProps(\"floatGSL\", \"float\"),\n            new FieldProps(\"dateGSL\", \"date\"),\n            new FieldProps(\"stringGSL\", \"string\"),\n            new FieldProps(\"boolGSL\", \"boolean\"),\n            new FieldProps(\"sortableGSL\", \"sortabletext\")\n        ));\n\n    List<Update> updateList = new ArrayList<>(fieldsToTestSingle.size() +\n        fieldsToTestMulti.size() + fieldsToTestGroupSortFirst.size() + fieldsToTestGroupSortLast.size() +\n        4);\n\n    updateList.add(getType(\"name\", \"float\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Float.class)));\n\n    updateList.add(getType(\"name\", \"double\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Double.class)));\n\n    updateList.add(getType(\"name\", \"date\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Date.class)));\n\n    updateList.add(getType(\"name\", \"boolean\", \"class\", \"solr.BoolField\"));\n\n\n    // Add a field for each of the types we want to the schema.\n\n    defineFields(updateList, fieldsToTestSingle, false);\n    defineFields(updateList, fieldsToTestMulti, true);\n    defineFields(updateList, fieldsToTestGroupSortFirst, false, \"sorMissingFirst\", \"true\");\n    defineFields(updateList, fieldsToTestGroupSortLast, false, \"sorMissingLast\", \"true\");\n\n\n    MultiUpdate multiUpdateRequest = new MultiUpdate(updateList);\n    SchemaResponse.UpdateResponse multipleUpdatesResponse = multiUpdateRequest.process(cluster.getSolrClient(), COLLECTION);\n    assertNull(\"Error adding fields\", multipleUpdatesResponse.getResponse().get(\"errors\"));\n\n    cluster.getSolrClient().setDefaultCollection(COLLECTION);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void createCluster() throws Exception {\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    configureCluster(2)\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-managed\").resolve(\"conf\"))\n        .configure();\n\n    // Need enough shards that we have some shards that don't have any docs on them.\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf1\", 4, 1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(COLLECTION, 4, 4);\n\n    fieldsToTestSingle =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intField\", \"int\", 1),\n            new FieldProps(\"longField\", \"long\", 1),\n            new FieldProps(\"doubleField\", \"double\", 1),\n            new FieldProps(\"floatField\", \"float\", 1),\n            new FieldProps(\"dateField\", \"date\", 1),\n            new FieldProps(\"stringField\", \"string\", 1),\n            new FieldProps(\"boolField\", \"boolean\", 1),\n            new FieldProps(\"sortableText\", \"sortabletext\", 1)\n        ));\n\n    fieldsToTestMulti =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intFieldMulti\", \"int\", 5),\n            new FieldProps(\"longFieldMulti\", \"long\", 5),\n            new FieldProps(\"doubleFieldMulti\", \"double\", 5),\n            new FieldProps(\"floatFieldMulti\", \"float\", 5),\n            new FieldProps(\"dateFieldMulti\", \"date\", 5),\n            new FieldProps(\"stringFieldMulti\", \"string\", 5),\n            new FieldProps(\"boolFieldMulti\", \"boolean\", 2),\n            new FieldProps(\"sortableFieldMulti\", \"sortabletext\", 5)\n        ));\n\n    // Fields to test for grouping and sorting with sortMissingFirst/Last.\n    fieldsToTestGroupSortFirst =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSF\", \"int\"),\n            new FieldProps(\"longGSF\", \"long\"),\n            new FieldProps(\"doubleGSF\", \"double\"),\n            new FieldProps(\"floatGSF\", \"float\"),\n            new FieldProps(\"dateGSF\", \"date\"),\n            new FieldProps(\"stringGSF\", \"string\"),\n            new FieldProps(\"boolGSF\", \"boolean\"),\n            new FieldProps(\"sortableGSF\", \"sortabletext\")\n        ));\n\n    fieldsToTestGroupSortLast =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSL\", \"int\"),\n            new FieldProps(\"longGSL\", \"long\"),\n            new FieldProps(\"doubleGSL\", \"double\"),\n            new FieldProps(\"floatGSL\", \"float\"),\n            new FieldProps(\"dateGSL\", \"date\"),\n            new FieldProps(\"stringGSL\", \"string\"),\n            new FieldProps(\"boolGSL\", \"boolean\"),\n            new FieldProps(\"sortableGSL\", \"sortabletext\")\n        ));\n\n    List<Update> updateList = new ArrayList<>(fieldsToTestSingle.size() +\n        fieldsToTestMulti.size() + fieldsToTestGroupSortFirst.size() + fieldsToTestGroupSortLast.size() +\n        4);\n\n    updateList.add(getType(\"name\", \"float\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Float.class)));\n\n    updateList.add(getType(\"name\", \"double\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Double.class)));\n\n    updateList.add(getType(\"name\", \"date\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Date.class)));\n\n    updateList.add(getType(\"name\", \"boolean\", \"class\", \"solr.BoolField\"));\n\n\n    // Add a field for each of the types we want to the schema.\n\n    defineFields(updateList, fieldsToTestSingle, false);\n    defineFields(updateList, fieldsToTestMulti, true);\n    defineFields(updateList, fieldsToTestGroupSortFirst, false, \"sorMissingFirst\", \"true\");\n    defineFields(updateList, fieldsToTestGroupSortLast, false, \"sorMissingLast\", \"true\");\n\n\n    MultiUpdate multiUpdateRequest = new MultiUpdate(updateList);\n    SchemaResponse.UpdateResponse multipleUpdatesResponse = multiUpdateRequest.process(cluster.getSolrClient(), COLLECTION);\n    assertNull(\"Error adding fields\", multipleUpdatesResponse.getResponse().get(\"errors\"));\n\n    cluster.getSolrClient().setDefaultCollection(COLLECTION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"94a0eda7dbad12579530df39279403d27344ebcb":["0e7ddedf744427dad36befd57a11188002f735f9"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["94a0eda7dbad12579530df39279403d27344ebcb"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["0e7ddedf744427dad36befd57a11188002f735f9","94a0eda7dbad12579530df39279403d27344ebcb"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["c344401c324a00bc10cacfb90598738235a4decb"],"ab3edb4bdcf1695b3c43f8584d7473f9516a34e4":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"727bb765ff2542275f6d31f67be18d7104bae148":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c72f6f0907682b825869d7878ba72d8259dabc91"],"c72f6f0907682b825869d7878ba72d8259dabc91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e7ddedf744427dad36befd57a11188002f735f9":["931cb705e783c7f07cdb110a0cb03bad79fe1b2b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["727bb765ff2542275f6d31f67be18d7104bae148","0e7ddedf744427dad36befd57a11188002f735f9"],"931cb705e783c7f07cdb110a0cb03bad79fe1b2b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c72f6f0907682b825869d7878ba72d8259dabc91"],"c344401c324a00bc10cacfb90598738235a4decb":["0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","ab3edb4bdcf1695b3c43f8584d7473f9516a34e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"94a0eda7dbad12579530df39279403d27344ebcb":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","936cdd5882761db3b844afd6f84ab81cbb011a75"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["ab3edb4bdcf1695b3c43f8584d7473f9516a34e4","0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab3edb4bdcf1695b3c43f8584d7473f9516a34e4":["0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"727bb765ff2542275f6d31f67be18d7104bae148":["9856095f7afb5a607bf5e65077615ed91273508c"],"c72f6f0907682b825869d7878ba72d8259dabc91":["727bb765ff2542275f6d31f67be18d7104bae148","931cb705e783c7f07cdb110a0cb03bad79fe1b2b"],"0e7ddedf744427dad36befd57a11188002f735f9":["94a0eda7dbad12579530df39279403d27344ebcb","936cdd5882761db3b844afd6f84ab81cbb011a75","9856095f7afb5a607bf5e65077615ed91273508c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["727bb765ff2542275f6d31f67be18d7104bae148","c72f6f0907682b825869d7878ba72d8259dabc91","931cb705e783c7f07cdb110a0cb03bad79fe1b2b"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"931cb705e783c7f07cdb110a0cb03bad79fe1b2b":["0e7ddedf744427dad36befd57a11188002f735f9"],"c344401c324a00bc10cacfb90598738235a4decb":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4":["c344401c324a00bc10cacfb90598738235a4decb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}