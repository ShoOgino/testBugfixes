{"path":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#SynonymWeight(Query,IndexSearcher,float).mjava","commits":[{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#SynonymWeight(Query,IndexSearcher,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#SynonymWeight(Query,IndexSearcher).mjava","sourceNew":"    SynonymWeight(Query query, IndexSearcher searcher, float boost) throws IOException {\n      super(query);\n      CollectionStatistics collectionStats = searcher.collectionStatistics(terms[0].field());\n      long docFreq = 0;\n      long totalTermFreq = 0;\n      termContexts = new TermContext[terms.length];\n      for (int i = 0; i < termContexts.length; i++) {\n        termContexts[i] = TermContext.build(searcher.getTopReaderContext(), terms[i]);\n        TermStatistics termStats = searcher.termStatistics(terms[i], termContexts[i]);\n        docFreq = Math.max(termStats.docFreq(), docFreq);\n        if (termStats.totalTermFreq() == -1) {\n          totalTermFreq = -1;\n        } else if (totalTermFreq != -1) {\n          totalTermFreq += termStats.totalTermFreq();\n        }\n      }\n      TermStatistics pseudoStats = new TermStatistics(null, docFreq, totalTermFreq);\n      this.similarity = searcher.getSimilarity(true);\n      this.simWeight = similarity.computeWeight(boost, collectionStats, pseudoStats);\n    }\n\n","sourceOld":"    SynonymWeight(Query query, IndexSearcher searcher) throws IOException {\n      super(query);\n      CollectionStatistics collectionStats = searcher.collectionStatistics(terms[0].field());\n      long docFreq = 0;\n      long totalTermFreq = 0;\n      termContexts = new TermContext[terms.length];\n      for (int i = 0; i < termContexts.length; i++) {\n        termContexts[i] = TermContext.build(searcher.getTopReaderContext(), terms[i]);\n        TermStatistics termStats = searcher.termStatistics(terms[i], termContexts[i]);\n        docFreq = Math.max(termStats.docFreq(), docFreq);\n        if (termStats.totalTermFreq() == -1) {\n          totalTermFreq = -1;\n        } else if (totalTermFreq != -1) {\n          totalTermFreq += termStats.totalTermFreq();\n        }\n      }\n      TermStatistics pseudoStats = new TermStatistics(null, docFreq, totalTermFreq);\n      this.similarity = searcher.getSimilarity(true);\n      this.simWeight = similarity.computeWeight(collectionStats, pseudoStats);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#SynonymWeight(Query,IndexSearcher,float).mjava","pathOld":"/dev/null","sourceNew":"    SynonymWeight(Query query, IndexSearcher searcher, float boost) throws IOException {\n      super(query);\n      CollectionStatistics collectionStats = searcher.collectionStatistics(terms[0].field());\n      long docFreq = 0;\n      long totalTermFreq = 0;\n      termContexts = new TermContext[terms.length];\n      for (int i = 0; i < termContexts.length; i++) {\n        termContexts[i] = TermContext.build(searcher.getTopReaderContext(), terms[i]);\n        TermStatistics termStats = searcher.termStatistics(terms[i], termContexts[i]);\n        docFreq = Math.max(termStats.docFreq(), docFreq);\n        if (termStats.totalTermFreq() == -1) {\n          totalTermFreq = -1;\n        } else if (totalTermFreq != -1) {\n          totalTermFreq += termStats.totalTermFreq();\n        }\n      }\n      TermStatistics pseudoStats = new TermStatistics(null, docFreq, totalTermFreq);\n      this.similarity = searcher.getSimilarity(true);\n      this.simWeight = similarity.computeWeight(boost, collectionStats, pseudoStats);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3119ed4143b91eaf5ac74a4dc4625f5036d472c","date":1509409932,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#SynonymWeight(Query,IndexSearcher,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#SynonymWeight(Query,IndexSearcher,float).mjava","sourceNew":"    SynonymWeight(Query query, IndexSearcher searcher, float boost) throws IOException {\n      super(query);\n      CollectionStatistics collectionStats = searcher.collectionStatistics(terms[0].field());\n      long docFreq = 0;\n      long totalTermFreq = 0;\n      termContexts = new TermContext[terms.length];\n      for (int i = 0; i < termContexts.length; i++) {\n        termContexts[i] = TermContext.build(searcher.getTopReaderContext(), terms[i]);\n        TermStatistics termStats = searcher.termStatistics(terms[i], termContexts[i]);\n        if (termStats != null) {\n          docFreq = Math.max(termStats.docFreq(), docFreq);\n          if (termStats.totalTermFreq() == -1) {\n            totalTermFreq = -1;\n          } else if (totalTermFreq != -1) {\n            totalTermFreq += termStats.totalTermFreq();\n          }\n        }\n      }\n      this.similarity = searcher.getSimilarity(true);\n      if (docFreq > 0) {\n        TermStatistics pseudoStats = new TermStatistics(new BytesRef(\"synonym pseudo-term\"), docFreq, totalTermFreq);\n        this.simWeight = similarity.computeWeight(boost, collectionStats, pseudoStats);\n      } else {\n        this.simWeight = null; // no terms exist at all, we won't use similarity\n      }\n    }\n\n","sourceOld":"    SynonymWeight(Query query, IndexSearcher searcher, float boost) throws IOException {\n      super(query);\n      CollectionStatistics collectionStats = searcher.collectionStatistics(terms[0].field());\n      long docFreq = 0;\n      long totalTermFreq = 0;\n      termContexts = new TermContext[terms.length];\n      for (int i = 0; i < termContexts.length; i++) {\n        termContexts[i] = TermContext.build(searcher.getTopReaderContext(), terms[i]);\n        TermStatistics termStats = searcher.termStatistics(terms[i], termContexts[i]);\n        docFreq = Math.max(termStats.docFreq(), docFreq);\n        if (termStats.totalTermFreq() == -1) {\n          totalTermFreq = -1;\n        } else if (totalTermFreq != -1) {\n          totalTermFreq += termStats.totalTermFreq();\n        }\n      }\n      TermStatistics pseudoStats = new TermStatistics(null, docFreq, totalTermFreq);\n      this.similarity = searcher.getSimilarity(true);\n      this.simWeight = similarity.computeWeight(boost, collectionStats, pseudoStats);\n    }\n\n","bugFix":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"086ffe31d8fba0110227db122974163709ecc1b4","date":1509678141,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#SynonymWeight(Query,IndexSearcher,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#SynonymWeight(Query,IndexSearcher,float).mjava","sourceNew":"    SynonymWeight(Query query, IndexSearcher searcher, float boost) throws IOException {\n      super(query);\n      CollectionStatistics collectionStats = searcher.collectionStatistics(terms[0].field());\n      long docFreq = 0;\n      long totalTermFreq = 0;\n      termContexts = new TermContext[terms.length];\n      for (int i = 0; i < termContexts.length; i++) {\n        termContexts[i] = TermContext.build(searcher.getTopReaderContext(), terms[i]);\n        TermStatistics termStats = searcher.termStatistics(terms[i], termContexts[i]);\n        if (termStats != null) {\n          docFreq = Math.max(termStats.docFreq(), docFreq);\n          totalTermFreq += termStats.totalTermFreq();\n        }\n      }\n      this.similarity = searcher.getSimilarity(true);\n      if (docFreq > 0) {\n        TermStatistics pseudoStats = new TermStatistics(new BytesRef(\"synonym pseudo-term\"), docFreq, totalTermFreq);\n        this.simWeight = similarity.computeWeight(boost, collectionStats, pseudoStats);\n      } else {\n        this.simWeight = null; // no terms exist at all, we won't use similarity\n      }\n    }\n\n","sourceOld":"    SynonymWeight(Query query, IndexSearcher searcher, float boost) throws IOException {\n      super(query);\n      CollectionStatistics collectionStats = searcher.collectionStatistics(terms[0].field());\n      long docFreq = 0;\n      long totalTermFreq = 0;\n      termContexts = new TermContext[terms.length];\n      for (int i = 0; i < termContexts.length; i++) {\n        termContexts[i] = TermContext.build(searcher.getTopReaderContext(), terms[i]);\n        TermStatistics termStats = searcher.termStatistics(terms[i], termContexts[i]);\n        if (termStats != null) {\n          docFreq = Math.max(termStats.docFreq(), docFreq);\n          if (termStats.totalTermFreq() == -1) {\n            totalTermFreq = -1;\n          } else if (totalTermFreq != -1) {\n            totalTermFreq += termStats.totalTermFreq();\n          }\n        }\n      }\n      this.similarity = searcher.getSimilarity(true);\n      if (docFreq > 0) {\n        TermStatistics pseudoStats = new TermStatistics(new BytesRef(\"synonym pseudo-term\"), docFreq, totalTermFreq);\n        this.simWeight = similarity.computeWeight(boost, collectionStats, pseudoStats);\n      } else {\n        this.simWeight = null; // no terms exist at all, we won't use similarity\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#SynonymWeight(Query,IndexSearcher,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#SynonymWeight(Query,IndexSearcher,float).mjava","sourceNew":"    SynonymWeight(Query query, IndexSearcher searcher, float boost) throws IOException {\n      super(query);\n      CollectionStatistics collectionStats = searcher.collectionStatistics(terms[0].field());\n      long docFreq = 0;\n      long totalTermFreq = 0;\n      termContexts = new TermContext[terms.length];\n      for (int i = 0; i < termContexts.length; i++) {\n        termContexts[i] = TermContext.build(searcher.getTopReaderContext(), terms[i]);\n        TermStatistics termStats = searcher.termStatistics(terms[i], termContexts[i]);\n        if (termStats != null) {\n          docFreq = Math.max(termStats.docFreq(), docFreq);\n          totalTermFreq += termStats.totalTermFreq();\n        }\n      }\n      this.similarity = searcher.getSimilarity(true);\n      if (docFreq > 0) {\n        TermStatistics pseudoStats = new TermStatistics(new BytesRef(\"synonym pseudo-term\"), docFreq, totalTermFreq);\n        this.simWeight = similarity.computeWeight(boost, collectionStats, pseudoStats);\n      } else {\n        this.simWeight = null; // no terms exist at all, we won't use similarity\n      }\n    }\n\n","sourceOld":"    SynonymWeight(Query query, IndexSearcher searcher, float boost) throws IOException {\n      super(query);\n      CollectionStatistics collectionStats = searcher.collectionStatistics(terms[0].field());\n      long docFreq = 0;\n      long totalTermFreq = 0;\n      termContexts = new TermContext[terms.length];\n      for (int i = 0; i < termContexts.length; i++) {\n        termContexts[i] = TermContext.build(searcher.getTopReaderContext(), terms[i]);\n        TermStatistics termStats = searcher.termStatistics(terms[i], termContexts[i]);\n        if (termStats != null) {\n          docFreq = Math.max(termStats.docFreq(), docFreq);\n          if (termStats.totalTermFreq() == -1) {\n            totalTermFreq = -1;\n          } else if (totalTermFreq != -1) {\n            totalTermFreq += termStats.totalTermFreq();\n          }\n        }\n      }\n      this.similarity = searcher.getSimilarity(true);\n      if (docFreq > 0) {\n        TermStatistics pseudoStats = new TermStatistics(new BytesRef(\"synonym pseudo-term\"), docFreq, totalTermFreq);\n        this.simWeight = similarity.computeWeight(boost, collectionStats, pseudoStats);\n      } else {\n        this.simWeight = null; // no terms exist at all, we won't use similarity\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68d6cb7f0f019661a784bd0e5a21e85b5f812af6","date":1515075216,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#SynonymWeight(Query,IndexSearcher,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#SynonymWeight(Query,IndexSearcher,float).mjava","sourceNew":"    SynonymWeight(Query query, IndexSearcher searcher, float boost) throws IOException {\n      super(query);\n      CollectionStatistics collectionStats = searcher.collectionStatistics(terms[0].field());\n      long docFreq = 0;\n      long totalTermFreq = 0;\n      termContexts = new TermContext[terms.length];\n      for (int i = 0; i < termContexts.length; i++) {\n        termContexts[i] = TermContext.build(searcher.getTopReaderContext(), terms[i]);\n        TermStatistics termStats = searcher.termStatistics(terms[i], termContexts[i]);\n        if (termStats != null) {\n          docFreq = Math.max(termStats.docFreq(), docFreq);\n          totalTermFreq += termStats.totalTermFreq();\n        }\n      }\n      this.similarity = searcher.getSimilarity();\n      if (docFreq > 0) {\n        TermStatistics pseudoStats = new TermStatistics(new BytesRef(\"synonym pseudo-term\"), docFreq, totalTermFreq);\n        this.simWeight = similarity.scorer(boost, collectionStats, pseudoStats);\n      } else {\n        this.simWeight = null; // no terms exist at all, we won't use similarity\n      }\n    }\n\n","sourceOld":"    SynonymWeight(Query query, IndexSearcher searcher, float boost) throws IOException {\n      super(query);\n      CollectionStatistics collectionStats = searcher.collectionStatistics(terms[0].field());\n      long docFreq = 0;\n      long totalTermFreq = 0;\n      termContexts = new TermContext[terms.length];\n      for (int i = 0; i < termContexts.length; i++) {\n        termContexts[i] = TermContext.build(searcher.getTopReaderContext(), terms[i]);\n        TermStatistics termStats = searcher.termStatistics(terms[i], termContexts[i]);\n        if (termStats != null) {\n          docFreq = Math.max(termStats.docFreq(), docFreq);\n          totalTermFreq += termStats.totalTermFreq();\n        }\n      }\n      this.similarity = searcher.getSimilarity(true);\n      if (docFreq > 0) {\n        TermStatistics pseudoStats = new TermStatistics(new BytesRef(\"synonym pseudo-term\"), docFreq, totalTermFreq);\n        this.simWeight = similarity.computeWeight(boost, collectionStats, pseudoStats);\n      } else {\n        this.simWeight = null; // no terms exist at all, we won't use similarity\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6e9f769521480a623f897c0d59089b919fa4239","date":1515161835,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#SynonymWeight(Query,IndexSearcher,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#SynonymWeight(Query,IndexSearcher,float).mjava","sourceNew":"    SynonymWeight(Query query, IndexSearcher searcher, float boost) throws IOException {\n      super(query);\n      CollectionStatistics collectionStats = searcher.collectionStatistics(terms[0].field());\n      long docFreq = 0;\n      long totalTermFreq = 0;\n      termStates = new TermStates[terms.length];\n      for (int i = 0; i < termStates.length; i++) {\n        termStates[i] = TermStates.build(searcher.getTopReaderContext(), terms[i], true);\n        TermStatistics termStats = searcher.termStatistics(terms[i], termStates[i]);\n        if (termStats != null) {\n          docFreq = Math.max(termStats.docFreq(), docFreq);\n          totalTermFreq += termStats.totalTermFreq();\n        }\n      }\n      this.similarity = searcher.getSimilarity();\n      if (docFreq > 0) {\n        TermStatistics pseudoStats = new TermStatistics(new BytesRef(\"synonym pseudo-term\"), docFreq, totalTermFreq);\n        this.simWeight = similarity.scorer(boost, collectionStats, pseudoStats);\n      } else {\n        this.simWeight = null; // no terms exist at all, we won't use similarity\n      }\n    }\n\n","sourceOld":"    SynonymWeight(Query query, IndexSearcher searcher, float boost) throws IOException {\n      super(query);\n      CollectionStatistics collectionStats = searcher.collectionStatistics(terms[0].field());\n      long docFreq = 0;\n      long totalTermFreq = 0;\n      termContexts = new TermContext[terms.length];\n      for (int i = 0; i < termContexts.length; i++) {\n        termContexts[i] = TermContext.build(searcher.getTopReaderContext(), terms[i]);\n        TermStatistics termStats = searcher.termStatistics(terms[i], termContexts[i]);\n        if (termStats != null) {\n          docFreq = Math.max(termStats.docFreq(), docFreq);\n          totalTermFreq += termStats.totalTermFreq();\n        }\n      }\n      this.similarity = searcher.getSimilarity();\n      if (docFreq > 0) {\n        TermStatistics pseudoStats = new TermStatistics(new BytesRef(\"synonym pseudo-term\"), docFreq, totalTermFreq);\n        this.simWeight = similarity.scorer(boost, collectionStats, pseudoStats);\n      } else {\n        this.simWeight = null; // no terms exist at all, we won't use similarity\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#SynonymWeight(Query,IndexSearcher,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#SynonymWeight(Query,IndexSearcher,float).mjava","sourceNew":"    SynonymWeight(Query query, IndexSearcher searcher, float boost) throws IOException {\n      super(query);\n      CollectionStatistics collectionStats = searcher.collectionStatistics(terms[0].field());\n      long docFreq = 0;\n      long totalTermFreq = 0;\n      termStates = new TermStates[terms.length];\n      for (int i = 0; i < termStates.length; i++) {\n        termStates[i] = TermStates.build(searcher.getTopReaderContext(), terms[i], true);\n        TermStatistics termStats = searcher.termStatistics(terms[i], termStates[i]);\n        if (termStats != null) {\n          docFreq = Math.max(termStats.docFreq(), docFreq);\n          totalTermFreq += termStats.totalTermFreq();\n        }\n      }\n      this.similarity = searcher.getSimilarity();\n      if (docFreq > 0) {\n        TermStatistics pseudoStats = new TermStatistics(new BytesRef(\"synonym pseudo-term\"), docFreq, totalTermFreq);\n        this.simWeight = similarity.scorer(boost, collectionStats, pseudoStats);\n      } else {\n        this.simWeight = null; // no terms exist at all, we won't use similarity\n      }\n    }\n\n","sourceOld":"    SynonymWeight(Query query, IndexSearcher searcher, float boost) throws IOException {\n      super(query);\n      CollectionStatistics collectionStats = searcher.collectionStatistics(terms[0].field());\n      long docFreq = 0;\n      long totalTermFreq = 0;\n      termContexts = new TermContext[terms.length];\n      for (int i = 0; i < termContexts.length; i++) {\n        termContexts[i] = TermContext.build(searcher.getTopReaderContext(), terms[i]);\n        TermStatistics termStats = searcher.termStatistics(terms[i], termContexts[i]);\n        if (termStats != null) {\n          docFreq = Math.max(termStats.docFreq(), docFreq);\n          totalTermFreq += termStats.totalTermFreq();\n        }\n      }\n      this.similarity = searcher.getSimilarity(true);\n      if (docFreq > 0) {\n        TermStatistics pseudoStats = new TermStatistics(new BytesRef(\"synonym pseudo-term\"), docFreq, totalTermFreq);\n        this.simWeight = similarity.computeWeight(boost, collectionStats, pseudoStats);\n      } else {\n        this.simWeight = null; // no terms exist at all, we won't use similarity\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f2c13220a828a78007cedb364e22dd8986ed650","date":1527233410,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#SynonymWeight(Query,IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#SynonymWeight(Query,IndexSearcher,float).mjava","sourceNew":"    SynonymWeight(Query query, IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      super(query);\n      assert scoreMode.needsScores();\n      this.scoreMode = scoreMode;\n      CollectionStatistics collectionStats = searcher.collectionStatistics(terms[0].field());\n      long docFreq = 0;\n      long totalTermFreq = 0;\n      termStates = new TermStates[terms.length];\n      for (int i = 0; i < termStates.length; i++) {\n        termStates[i] = TermStates.build(searcher.getTopReaderContext(), terms[i], true);\n        TermStatistics termStats = searcher.termStatistics(terms[i], termStates[i]);\n        if (termStats != null) {\n          docFreq = Math.max(termStats.docFreq(), docFreq);\n          totalTermFreq += termStats.totalTermFreq();\n        }\n      }\n      this.similarity = searcher.getSimilarity();\n      if (docFreq > 0) {\n        TermStatistics pseudoStats = new TermStatistics(new BytesRef(\"synonym pseudo-term\"), docFreq, totalTermFreq);\n        this.simWeight = similarity.scorer(boost, collectionStats, pseudoStats);\n      } else {\n        this.simWeight = null; // no terms exist at all, we won't use similarity\n      }\n    }\n\n","sourceOld":"    SynonymWeight(Query query, IndexSearcher searcher, float boost) throws IOException {\n      super(query);\n      CollectionStatistics collectionStats = searcher.collectionStatistics(terms[0].field());\n      long docFreq = 0;\n      long totalTermFreq = 0;\n      termStates = new TermStates[terms.length];\n      for (int i = 0; i < termStates.length; i++) {\n        termStates[i] = TermStates.build(searcher.getTopReaderContext(), terms[i], true);\n        TermStatistics termStats = searcher.termStatistics(terms[i], termStates[i]);\n        if (termStats != null) {\n          docFreq = Math.max(termStats.docFreq(), docFreq);\n          totalTermFreq += termStats.totalTermFreq();\n        }\n      }\n      this.similarity = searcher.getSimilarity();\n      if (docFreq > 0) {\n        TermStatistics pseudoStats = new TermStatistics(new BytesRef(\"synonym pseudo-term\"), docFreq, totalTermFreq);\n        this.simWeight = similarity.scorer(boost, collectionStats, pseudoStats);\n      } else {\n        this.simWeight = null; // no terms exist at all, we won't use similarity\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["d523b8189b211dd1630166aa77b8c88bb48b3fcc","a6e9f769521480a623f897c0d59089b919fa4239"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"086ffe31d8fba0110227db122974163709ecc1b4":["c3119ed4143b91eaf5ac74a4dc4625f5036d472c"],"a6e9f769521480a623f897c0d59089b919fa4239":["68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["c3119ed4143b91eaf5ac74a4dc4625f5036d472c","086ffe31d8fba0110227db122974163709ecc1b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2f2c13220a828a78007cedb364e22dd8986ed650":["b94236357aaa22b76c10629851fe4e376e0cea82"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2f2c13220a828a78007cedb364e22dd8986ed650"],"c3119ed4143b91eaf5ac74a4dc4625f5036d472c":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["2f2c13220a828a78007cedb364e22dd8986ed650"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["a6e9f769521480a623f897c0d59089b919fa4239"],"a6e9f769521480a623f897c0d59089b919fa4239":["b94236357aaa22b76c10629851fe4e376e0cea82"],"086ffe31d8fba0110227db122974163709ecc1b4":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["b94236357aaa22b76c10629851fe4e376e0cea82","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","c3119ed4143b91eaf5ac74a4dc4625f5036d472c"],"2f2c13220a828a78007cedb364e22dd8986ed650":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"c3119ed4143b91eaf5ac74a4dc4625f5036d472c":["086ffe31d8fba0110227db122974163709ecc1b4","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}