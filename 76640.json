{"path":"contrib/queries/src/test/org/apache/lucene/search/trie/TestLongTrieRangeQuery#testRandomTrieAndClassicRangeQuery(int).mjava","commits":[{"id":"c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc","date":1239886708,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/trie/TestLongTrieRangeQuery#testRandomTrieAndClassicRangeQuery(int).mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/trie/TestLongTrieRangeFilter#testRandomTrieAndClassicRangeQuery(int).mjava","sourceNew":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"field\"+precisionStep;\n    int termCountT=0,termCountC=0;\n    for (int i=0; i<50; i++) {\n      long lower=(long)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      long upper=(long)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      LongTrieRangeQuery tq=new LongTrieRangeQuery(field, precisionStep, new Long(lower), new Long(upper), true, true);\n      RangeQuery cq=new RangeQuery(field, TrieUtils.longToPrefixCoded(lower), TrieUtils.longToPrefixCoded(upper), true, true);\n      cq.setConstantScoreRewrite(true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for LongTrieRangeQuery and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test exclusive range\n      tq=new LongTrieRangeQuery(field, precisionStep, new Long(lower), new Long(upper), false, false);\n      cq=new RangeQuery(field, TrieUtils.longToPrefixCoded(lower), TrieUtils.longToPrefixCoded(upper), false, false);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for LongTrieRangeQuery and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test left exclusive range\n      tq=new LongTrieRangeQuery(field, precisionStep, new Long(lower), new Long(upper), false, true);\n      cq=new RangeQuery(field, TrieUtils.longToPrefixCoded(lower), TrieUtils.longToPrefixCoded(upper), false, true);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for LongTrieRangeQuery and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test right exclusive range\n      tq=new LongTrieRangeQuery(field, precisionStep, new Long(lower), new Long(upper), true, false);\n      cq=new RangeQuery(field, TrieUtils.longToPrefixCoded(lower), TrieUtils.longToPrefixCoded(upper), true, false);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for LongTrieRangeQuery and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n    }\n    System.out.println(\"Average number of terms during random search on '\" + field + \"':\");\n    System.out.println(\" Trie query: \" + (((double)termCountT)/(50*4)));\n    System.out.println(\" Classical query: \" + (((double)termCountC)/(50*4)));\n  }\n\n","sourceOld":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"field\"+precisionStep;\n    int termCount=0;\n    for (int i=0; i<50; i++) {\n      long lower=(long)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      long upper=(long)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      LongTrieRangeFilter tf=new LongTrieRangeFilter(field, precisionStep, new Long(lower), new Long(upper), true, true);\n      RangeQuery cq=new RangeQuery(field, TrieUtils.longToPrefixCoded(lower), TrieUtils.longToPrefixCoded(upper), true, true);\n      cq.setConstantScoreRewrite(true);\n      TopDocs tTopDocs = searcher.search(tf.asQuery(), 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for LongTrieRangeFilter and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCount += tf.getLastNumberOfTerms();\n      // test exclusive range\n      tf=new LongTrieRangeFilter(field, precisionStep, new Long(lower), new Long(upper), false, false);\n      cq=new RangeQuery(field, TrieUtils.longToPrefixCoded(lower), TrieUtils.longToPrefixCoded(upper), false, false);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tf.asQuery(), 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for LongTrieRangeFilter and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCount += tf.getLastNumberOfTerms();\n      // test left exclusive range\n      tf=new LongTrieRangeFilter(field, precisionStep, new Long(lower), new Long(upper), false, true);\n      cq=new RangeQuery(field, TrieUtils.longToPrefixCoded(lower), TrieUtils.longToPrefixCoded(upper), false, true);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tf.asQuery(), 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for LongTrieRangeFilter and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCount += tf.getLastNumberOfTerms();\n      // test right exclusive range\n      tf=new LongTrieRangeFilter(field, precisionStep, new Long(lower), new Long(upper), true, false);\n      cq=new RangeQuery(field, TrieUtils.longToPrefixCoded(lower), TrieUtils.longToPrefixCoded(upper), true, false);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tf.asQuery(), 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for LongTrieRangeFilter and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCount += tf.getLastNumberOfTerms();\n    }\n    System.out.println(\"Average number of terms during random search on '\" + field + \"': \" + (((double)termCount)/(50*4)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7997e20249c312f7420d4e348cde0a36c22d9a8c","date":1245413812,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/queries/src/test/org/apache/lucene/search/trie/TestLongTrieRangeQuery#testRandomTrieAndClassicRangeQuery(int).mjava","sourceNew":null,"sourceOld":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"field\"+precisionStep;\n    int termCountT=0,termCountC=0;\n    for (int i=0; i<50; i++) {\n      long lower=(long)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      long upper=(long)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      LongTrieRangeQuery tq=new LongTrieRangeQuery(field, precisionStep, new Long(lower), new Long(upper), true, true);\n      RangeQuery cq=new RangeQuery(field, TrieUtils.longToPrefixCoded(lower), TrieUtils.longToPrefixCoded(upper), true, true);\n      cq.setConstantScoreRewrite(true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for LongTrieRangeQuery and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test exclusive range\n      tq=new LongTrieRangeQuery(field, precisionStep, new Long(lower), new Long(upper), false, false);\n      cq=new RangeQuery(field, TrieUtils.longToPrefixCoded(lower), TrieUtils.longToPrefixCoded(upper), false, false);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for LongTrieRangeQuery and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test left exclusive range\n      tq=new LongTrieRangeQuery(field, precisionStep, new Long(lower), new Long(upper), false, true);\n      cq=new RangeQuery(field, TrieUtils.longToPrefixCoded(lower), TrieUtils.longToPrefixCoded(upper), false, true);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for LongTrieRangeQuery and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test right exclusive range\n      tq=new LongTrieRangeQuery(field, precisionStep, new Long(lower), new Long(upper), true, false);\n      cq=new RangeQuery(field, TrieUtils.longToPrefixCoded(lower), TrieUtils.longToPrefixCoded(upper), true, false);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for LongTrieRangeQuery and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n    }\n    System.out.println(\"Average number of terms during random search on '\" + field + \"':\");\n    System.out.println(\" Trie query: \" + (((double)termCountT)/(50*4)));\n    System.out.println(\" Classical query: \" + (((double)termCountC)/(50*4)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7997e20249c312f7420d4e348cde0a36c22d9a8c":["c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7997e20249c312f7420d4e348cde0a36c22d9a8c"]},"commit2Childs":{"7997e20249c312f7420d4e348cde0a36c22d9a8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc"],"c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc":["7997e20249c312f7420d4e348cde0a36c22d9a8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}