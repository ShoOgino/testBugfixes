{"path":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishFlush(FlushedSegment,FrozenBufferedDeletes).mjava","commits":[{"id":"7d45e9e2ad7f57776540627c78f5e22e469ccdc1","date":1302784878,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishFlush(FlushedSegment,FrozenBufferedDeletes).mjava","pathOld":"/dev/null","sourceNew":"  private void finishFlush(FlushedSegment newSegment, FrozenBufferedDeletes bufferedDeletes)\n      throws IOException {\n    // this is eventually finishing the flushed segment and publishing it to the IndexWriter\n    if (newSegment == null) {\n      assert bufferedDeletes != null;\n      if (bufferedDeletes != null && bufferedDeletes.any()) {\n        indexWriter.bufferedDeletesStream.push(bufferedDeletes);\n        if (infoStream != null) {\n          message(\"flush: push buffered deletes: \" + bufferedDeletes);\n        }\n      }\n    } else {\n      publishFlushedSegment(newSegment, bufferedDeletes);  \n    }\n    \n    \n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a1c3710e755dc60691ac0d7fe23c9fcba0537bdc","33e096accda90a8bd2279f890efe2e287f47c743"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f6f4cae61e16730201371ab7e9912721c19324e7","date":1303199575,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishFlush(FlushedSegment,FrozenBufferedDeletes).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishFlush(FlushedSegment,FrozenBufferedDeletes).mjava","sourceNew":"  private void finishFlush(FlushedSegment newSegment, FrozenBufferedDeletes bufferedDeletes)\n      throws IOException {\n    // Finish the flushed segment and publish it to IndexWriter\n    if (newSegment == null) {\n      assert bufferedDeletes != null;\n      if (bufferedDeletes != null && bufferedDeletes.any()) {\n        indexWriter.bufferedDeletesStream.push(bufferedDeletes);\n        if (infoStream != null) {\n          message(\"flush: push buffered deletes: \" + bufferedDeletes);\n        }\n      }\n    } else {\n      publishFlushedSegment(newSegment, bufferedDeletes);  \n    }\n  }\n\n","sourceOld":"  private void finishFlush(FlushedSegment newSegment, FrozenBufferedDeletes bufferedDeletes)\n      throws IOException {\n    // this is eventually finishing the flushed segment and publishing it to the IndexWriter\n    if (newSegment == null) {\n      assert bufferedDeletes != null;\n      if (bufferedDeletes != null && bufferedDeletes.any()) {\n        indexWriter.bufferedDeletesStream.push(bufferedDeletes);\n        if (infoStream != null) {\n          message(\"flush: push buffered deletes: \" + bufferedDeletes);\n        }\n      }\n    } else {\n      publishFlushedSegment(newSegment, bufferedDeletes);  \n    }\n    \n    \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishFlush(FlushedSegment,FrozenBufferedDeletes).mjava","pathOld":"/dev/null","sourceNew":"  private void finishFlush(FlushedSegment newSegment, FrozenBufferedDeletes bufferedDeletes)\n      throws IOException {\n    // Finish the flushed segment and publish it to IndexWriter\n    if (newSegment == null) {\n      assert bufferedDeletes != null;\n      if (bufferedDeletes != null && bufferedDeletes.any()) {\n        indexWriter.bufferedDeletesStream.push(bufferedDeletes);\n        if (infoStream != null) {\n          message(\"flush: push buffered deletes: \" + bufferedDeletes);\n        }\n      }\n    } else {\n      publishFlushedSegment(newSegment, bufferedDeletes);  \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishFlush(FlushedSegment,FrozenBufferedDeletes).mjava","pathOld":"/dev/null","sourceNew":"  private void finishFlush(FlushedSegment newSegment, FrozenBufferedDeletes bufferedDeletes)\n      throws IOException {\n    // Finish the flushed segment and publish it to IndexWriter\n    if (newSegment == null) {\n      assert bufferedDeletes != null;\n      if (bufferedDeletes != null && bufferedDeletes.any()) {\n        indexWriter.bufferedDeletesStream.push(bufferedDeletes);\n        if (infoStream != null) {\n          message(\"flush: push buffered deletes: \" + bufferedDeletes);\n        }\n      }\n    } else {\n      publishFlushedSegment(newSegment, bufferedDeletes);  \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishFlush(FlushedSegment,FrozenBufferedDeletes).mjava","pathOld":"/dev/null","sourceNew":"  private void finishFlush(FlushedSegment newSegment, FrozenBufferedDeletes bufferedDeletes)\n      throws IOException {\n    // Finish the flushed segment and publish it to IndexWriter\n    if (newSegment == null) {\n      assert bufferedDeletes != null;\n      if (bufferedDeletes != null && bufferedDeletes.any()) {\n        indexWriter.bufferedDeletesStream.push(bufferedDeletes);\n        if (infoStream != null) {\n          message(\"flush: push buffered deletes: \" + bufferedDeletes);\n        }\n      }\n    } else {\n      publishFlushedSegment(newSegment, bufferedDeletes);  \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1c3710e755dc60691ac0d7fe23c9fcba0537bdc","date":1320437768,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishFlush(FlushedSegment,FrozenBufferedDeletes).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishFlush(FlushedSegment,FrozenBufferedDeletes).mjava","sourceNew":"  private void finishFlush(FlushedSegment newSegment, FrozenBufferedDeletes bufferedDeletes)\n      throws IOException {\n    // Finish the flushed segment and publish it to IndexWriter\n    if (newSegment == null) {\n      assert bufferedDeletes != null;\n      if (bufferedDeletes != null && bufferedDeletes.any()) {\n        indexWriter.publishFrozenDeletes(bufferedDeletes);\n        if (infoStream != null) {\n          message(\"flush: push buffered deletes: \" + bufferedDeletes);\n        }\n      }\n    } else {\n      publishFlushedSegment(newSegment, bufferedDeletes);  \n    }\n  }\n\n","sourceOld":"  private void finishFlush(FlushedSegment newSegment, FrozenBufferedDeletes bufferedDeletes)\n      throws IOException {\n    // Finish the flushed segment and publish it to IndexWriter\n    if (newSegment == null) {\n      assert bufferedDeletes != null;\n      if (bufferedDeletes != null && bufferedDeletes.any()) {\n        indexWriter.bufferedDeletesStream.push(bufferedDeletes);\n        if (infoStream != null) {\n          message(\"flush: push buffered deletes: \" + bufferedDeletes);\n        }\n      }\n    } else {\n      publishFlushedSegment(newSegment, bufferedDeletes);  \n    }\n  }\n\n","bugFix":["7d45e9e2ad7f57776540627c78f5e22e469ccdc1"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishFlush(FlushedSegment,FrozenBufferedDeletes).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishFlush(FlushedSegment,FrozenBufferedDeletes).mjava","sourceNew":"  private void finishFlush(FlushedSegment newSegment, FrozenBufferedDeletes bufferedDeletes)\n      throws IOException {\n    // Finish the flushed segment and publish it to IndexWriter\n    if (newSegment == null) {\n      assert bufferedDeletes != null;\n      if (bufferedDeletes != null && bufferedDeletes.any()) {\n        indexWriter.publishFrozenDeletes(bufferedDeletes);\n        if (infoStream != null) {\n          infoStream.message(\"DW\", \"flush: push buffered deletes: \" + bufferedDeletes);\n        }\n      }\n    } else {\n      publishFlushedSegment(newSegment, bufferedDeletes);  \n    }\n  }\n\n","sourceOld":"  private void finishFlush(FlushedSegment newSegment, FrozenBufferedDeletes bufferedDeletes)\n      throws IOException {\n    // Finish the flushed segment and publish it to IndexWriter\n    if (newSegment == null) {\n      assert bufferedDeletes != null;\n      if (bufferedDeletes != null && bufferedDeletes.any()) {\n        indexWriter.publishFrozenDeletes(bufferedDeletes);\n        if (infoStream != null) {\n          message(\"flush: push buffered deletes: \" + bufferedDeletes);\n        }\n      }\n    } else {\n      publishFlushedSegment(newSegment, bufferedDeletes);  \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"58c6bbc222f074c844e736e6fb23647e3db9cfe3","date":1322743940,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishFlush(FlushedSegment,FrozenBufferedDeletes).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishFlush(FlushedSegment,FrozenBufferedDeletes).mjava","sourceNew":"  private void finishFlush(FlushedSegment newSegment, FrozenBufferedDeletes bufferedDeletes)\n      throws IOException {\n    // Finish the flushed segment and publish it to IndexWriter\n    if (newSegment == null) {\n      assert bufferedDeletes != null;\n      if (bufferedDeletes != null && bufferedDeletes.any()) {\n        indexWriter.publishFrozenDeletes(bufferedDeletes);\n        if (infoStream.isEnabled(\"DW\")) {\n          infoStream.message(\"DW\", \"flush: push buffered deletes: \" + bufferedDeletes);\n        }\n      }\n    } else {\n      publishFlushedSegment(newSegment, bufferedDeletes);  \n    }\n  }\n\n","sourceOld":"  private void finishFlush(FlushedSegment newSegment, FrozenBufferedDeletes bufferedDeletes)\n      throws IOException {\n    // Finish the flushed segment and publish it to IndexWriter\n    if (newSegment == null) {\n      assert bufferedDeletes != null;\n      if (bufferedDeletes != null && bufferedDeletes.any()) {\n        indexWriter.publishFrozenDeletes(bufferedDeletes);\n        if (infoStream != null) {\n          infoStream.message(\"DW\", \"flush: push buffered deletes: \" + bufferedDeletes);\n        }\n      }\n    } else {\n      publishFlushedSegment(newSegment, bufferedDeletes);  \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"33e096accda90a8bd2279f890efe2e287f47c743","date":1326726424,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishFlush(FlushedSegment,FrozenBufferedDeletes).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishFlush(FlushedSegment,FrozenBufferedDeletes).mjava","sourceNew":"  void finishFlush(FlushedSegment newSegment, FrozenBufferedDeletes bufferedDeletes)\n      throws IOException {\n    // Finish the flushed segment and publish it to IndexWriter\n    if (newSegment == null) {\n      assert bufferedDeletes != null;\n      if (bufferedDeletes != null && bufferedDeletes.any()) {\n        indexWriter.publishFrozenDeletes(bufferedDeletes);\n        if (infoStream.isEnabled(\"DW\")) {\n          infoStream.message(\"DW\", \"flush: push buffered deletes: \" + bufferedDeletes);\n        }\n      }\n    } else {\n      publishFlushedSegment(newSegment, bufferedDeletes);  \n    }\n  }\n\n","sourceOld":"  private void finishFlush(FlushedSegment newSegment, FrozenBufferedDeletes bufferedDeletes)\n      throws IOException {\n    // Finish the flushed segment and publish it to IndexWriter\n    if (newSegment == null) {\n      assert bufferedDeletes != null;\n      if (bufferedDeletes != null && bufferedDeletes.any()) {\n        indexWriter.publishFrozenDeletes(bufferedDeletes);\n        if (infoStream.isEnabled(\"DW\")) {\n          infoStream.message(\"DW\", \"flush: push buffered deletes: \" + bufferedDeletes);\n        }\n      }\n    } else {\n      publishFlushedSegment(newSegment, bufferedDeletes);  \n    }\n  }\n\n","bugFix":["7d45e9e2ad7f57776540627c78f5e22e469ccdc1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#finishFlush(FlushedSegment,FrozenBufferedDeletes).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishFlush(FlushedSegment,FrozenBufferedDeletes).mjava","sourceNew":"  void finishFlush(FlushedSegment newSegment, FrozenBufferedDeletes bufferedDeletes)\n      throws IOException {\n    // Finish the flushed segment and publish it to IndexWriter\n    if (newSegment == null) {\n      assert bufferedDeletes != null;\n      if (bufferedDeletes != null && bufferedDeletes.any()) {\n        indexWriter.publishFrozenDeletes(bufferedDeletes);\n        if (infoStream.isEnabled(\"DW\")) {\n          infoStream.message(\"DW\", \"flush: push buffered deletes: \" + bufferedDeletes);\n        }\n      }\n    } else {\n      publishFlushedSegment(newSegment, bufferedDeletes);  \n    }\n  }\n\n","sourceOld":"  void finishFlush(FlushedSegment newSegment, FrozenBufferedDeletes bufferedDeletes)\n      throws IOException {\n    // Finish the flushed segment and publish it to IndexWriter\n    if (newSegment == null) {\n      assert bufferedDeletes != null;\n      if (bufferedDeletes != null && bufferedDeletes.any()) {\n        indexWriter.publishFrozenDeletes(bufferedDeletes);\n        if (infoStream.isEnabled(\"DW\")) {\n          infoStream.message(\"DW\", \"flush: push buffered deletes: \" + bufferedDeletes);\n        }\n      }\n    } else {\n      publishFlushedSegment(newSegment, bufferedDeletes);  \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7d45e9e2ad7f57776540627c78f5e22e469ccdc1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["06584e6e98d592b34e1329b384182f368d2025e8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["33e096accda90a8bd2279f890efe2e287f47c743"],"06584e6e98d592b34e1329b384182f368d2025e8":["a1c3710e755dc60691ac0d7fe23c9fcba0537bdc"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a1c3710e755dc60691ac0d7fe23c9fcba0537bdc":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f6f4cae61e16730201371ab7e9912721c19324e7"],"f6f4cae61e16730201371ab7e9912721c19324e7":["7d45e9e2ad7f57776540627c78f5e22e469ccdc1"],"33e096accda90a8bd2279f890efe2e287f47c743":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7d45e9e2ad7f57776540627c78f5e22e469ccdc1":["f6f4cae61e16730201371ab7e9912721c19324e7"],"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["33e096accda90a8bd2279f890efe2e287f47c743"],"06584e6e98d592b34e1329b384182f368d2025e8":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7d45e9e2ad7f57776540627c78f5e22e469ccdc1","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a1c3710e755dc60691ac0d7fe23c9fcba0537bdc":["06584e6e98d592b34e1329b384182f368d2025e8"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a3776dccca01c11e7046323cfad46a3b4a471233","a1c3710e755dc60691ac0d7fe23c9fcba0537bdc","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"f6f4cae61e16730201371ab7e9912721c19324e7":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"33e096accda90a8bd2279f890efe2e287f47c743":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}