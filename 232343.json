{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#MemoryDocValuesProducer(MemoryDocValuesProducer).mjava","commits":[{"id":"bc8f80fee115148a0e4a0574560be06b494de821","date":1412069872,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#MemoryDocValuesProducer(MemoryDocValuesProducer).mjava","pathOld":"/dev/null","sourceNew":"  // clone for merge: when merging we don't do any instances.put()s\n  MemoryDocValuesProducer(MemoryDocValuesProducer original) throws IOException {\n    assert Thread.holdsLock(original);\n    numerics.putAll(original.numerics);\n    binaries.putAll(original.binaries);\n    fsts.putAll(original.fsts);\n    sortedSets.putAll(original.sortedSets);\n    sortedNumerics.putAll(original.sortedNumerics);\n    data = original.data.clone();\n    \n    numericInstances.putAll(original.numericInstances);\n    pagedBytesInstances.putAll(original.pagedBytesInstances);\n    fstInstances.putAll(original.fstInstances);\n    docsWithFieldInstances.putAll(original.docsWithFieldInstances);\n    addresses.putAll(original.addresses);\n    \n    numericInfo.putAll(original.numericInfo);\n    \n    numEntries = original.numEntries;\n    maxDoc = original.maxDoc;\n    ramBytesUsed = new AtomicLong(original.ramBytesUsed.get());\n    version = original.version;\n    merging = true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#MemoryDocValuesProducer(MemoryDocValuesProducer).mjava","pathOld":"/dev/null","sourceNew":"  // clone for merge: when merging we don't do any instances.put()s\n  MemoryDocValuesProducer(MemoryDocValuesProducer original) throws IOException {\n    assert Thread.holdsLock(original);\n    numerics.putAll(original.numerics);\n    binaries.putAll(original.binaries);\n    fsts.putAll(original.fsts);\n    sortedSets.putAll(original.sortedSets);\n    sortedNumerics.putAll(original.sortedNumerics);\n    data = original.data.clone();\n    \n    numericInstances.putAll(original.numericInstances);\n    pagedBytesInstances.putAll(original.pagedBytesInstances);\n    fstInstances.putAll(original.fstInstances);\n    docsWithFieldInstances.putAll(original.docsWithFieldInstances);\n    addresses.putAll(original.addresses);\n    \n    numericInfo.putAll(original.numericInfo);\n    \n    numEntries = original.numEntries;\n    maxDoc = original.maxDoc;\n    ramBytesUsed = new AtomicLong(original.ramBytesUsed.get());\n    version = original.version;\n    merging = true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24f89e8a6aac05753cde4c83d62a74356098200d","date":1525768331,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#MemoryDocValuesProducer(MemoryDocValuesProducer).mjava","sourceNew":null,"sourceOld":"  // clone for merge: when merging we don't do any instances.put()s\n  MemoryDocValuesProducer(MemoryDocValuesProducer original) throws IOException {\n    assert Thread.holdsLock(original);\n    numerics.putAll(original.numerics);\n    binaries.putAll(original.binaries);\n    fsts.putAll(original.fsts);\n    sortedSets.putAll(original.sortedSets);\n    sortedNumerics.putAll(original.sortedNumerics);\n    data = original.data.clone();\n    \n    numericInstances.putAll(original.numericInstances);\n    pagedBytesInstances.putAll(original.pagedBytesInstances);\n    fstInstances.putAll(original.fstInstances);\n    docsWithFieldInstances.putAll(original.docsWithFieldInstances);\n    addresses.putAll(original.addresses);\n    \n    numericInfo.putAll(original.numericInfo);\n    \n    numEntries = original.numEntries;\n    maxDoc = original.maxDoc;\n    ramBytesUsed = new AtomicLong(original.ramBytesUsed.get());\n    version = original.version;\n    merging = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bc8f80fee115148a0e4a0574560be06b494de821":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"24f89e8a6aac05753cde4c83d62a74356098200d":["9bb9a29a5e71a90295f175df8919802993142c9a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bc8f80fee115148a0e4a0574560be06b494de821"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["24f89e8a6aac05753cde4c83d62a74356098200d"]},"commit2Childs":{"bc8f80fee115148a0e4a0574560be06b494de821":["9bb9a29a5e71a90295f175df8919802993142c9a"],"24f89e8a6aac05753cde4c83d62a74356098200d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9bb9a29a5e71a90295f175df8919802993142c9a":["24f89e8a6aac05753cde4c83d62a74356098200d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bc8f80fee115148a0e4a0574560be06b494de821","9bb9a29a5e71a90295f175df8919802993142c9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}