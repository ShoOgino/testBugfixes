{"path":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/PayloadFilteredTermIntervalsSource#matches(String,LeafReaderContext,int).mjava","commits":[{"id":"6a89baad4cff5e4827dfb236be940e03a3f748d7","date":1552902060,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/PayloadFilteredTermIntervalsSource#matches(String,LeafReaderContext,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public MatchesIterator matches(String field, LeafReaderContext ctx, int doc) throws IOException {\n    Terms terms = ctx.reader().terms(field);\n    if (terms == null)\n      return null;\n    if (terms.hasPositions() == false) {\n      throw new IllegalArgumentException(\"Cannot create an IntervalIterator over field \" + field + \" because it has no indexed positions\");\n    }\n    if (terms.hasPayloads() == false) {\n      throw new IllegalArgumentException(\"Cannot create a payload-filtered iterator over field \" + field + \" because it has no indexed payloads\");\n    }\n    TermsEnum te = terms.iterator();\n    if (te.seekExact(term) == false) {\n      return null;\n    }\n    return matches(te, doc);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97ee2282ff806e9bc9d705f389cf40451ab81c3e","date":1561721333,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/intervals/PayloadFilteredTermIntervalsSource#matches(String,LeafReaderContext,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/PayloadFilteredTermIntervalsSource#matches(String,LeafReaderContext,int).mjava","sourceNew":"  @Override\n  public MatchesIterator matches(String field, LeafReaderContext ctx, int doc) throws IOException {\n    Terms terms = ctx.reader().terms(field);\n    if (terms == null)\n      return null;\n    if (terms.hasPositions() == false) {\n      throw new IllegalArgumentException(\"Cannot create an IntervalIterator over field \" + field + \" because it has no indexed positions\");\n    }\n    if (terms.hasPayloads() == false) {\n      throw new IllegalArgumentException(\"Cannot create a payload-filtered iterator over field \" + field + \" because it has no indexed payloads\");\n    }\n    TermsEnum te = terms.iterator();\n    if (te.seekExact(term) == false) {\n      return null;\n    }\n    return matches(te, doc);\n  }\n\n","sourceOld":"  @Override\n  public MatchesIterator matches(String field, LeafReaderContext ctx, int doc) throws IOException {\n    Terms terms = ctx.reader().terms(field);\n    if (terms == null)\n      return null;\n    if (terms.hasPositions() == false) {\n      throw new IllegalArgumentException(\"Cannot create an IntervalIterator over field \" + field + \" because it has no indexed positions\");\n    }\n    if (terms.hasPayloads() == false) {\n      throw new IllegalArgumentException(\"Cannot create a payload-filtered iterator over field \" + field + \" because it has no indexed payloads\");\n    }\n    TermsEnum te = terms.iterator();\n    if (te.seekExact(term) == false) {\n      return null;\n    }\n    return matches(te, doc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["6a89baad4cff5e4827dfb236be940e03a3f748d7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6a89baad4cff5e4827dfb236be940e03a3f748d7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"]},"commit2Childs":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6a89baad4cff5e4827dfb236be940e03a3f748d7"],"6a89baad4cff5e4827dfb236be940e03a3f748d7":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}