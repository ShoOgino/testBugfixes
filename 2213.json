{"path":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testUseRewrittenQueryAsCacheKey().mjava","commits":[{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testUseRewrittenQueryAsCacheKey().mjava","pathOld":"/dev/null","sourceNew":"  public void testUseRewrittenQueryAsCacheKey() throws IOException {\n    final Query expectedCacheKey = new TermQuery(new Term(\"foo\", \"bar\"));\n    final BooleanQuery query = new BooleanQuery();\n    final Query sub = expectedCacheKey.clone();\n    sub.setBoost(42);\n    query.add(sub, Occur.MUST);\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000);\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.YES));\n    w.addDocument(doc);\n    w.commit();\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final QueryCachingPolicy policy = new QueryCachingPolicy() {\n\n      @Override\n      public boolean shouldCache(Query query, LeafReaderContext context) throws IOException {\n        assertEquals(expectedCacheKey, QueryCache.cacheKey(query));\n        return true;\n      }\n\n      @Override\n      public void onUse(Query query) {\n        assertEquals(expectedCacheKey, QueryCache.cacheKey(query));\n      }\n    };\n\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(policy);\n    searcher.search(query, new TotalHitCountCollector());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testUseRewrittenQueryAsCacheKey().mjava","pathOld":"/dev/null","sourceNew":"  public void testUseRewrittenQueryAsCacheKey() throws IOException {\n    final Query expectedCacheKey = new TermQuery(new Term(\"foo\", \"bar\"));\n    final BooleanQuery query = new BooleanQuery();\n    final Query sub = expectedCacheKey.clone();\n    sub.setBoost(42);\n    query.add(sub, Occur.MUST);\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000);\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.YES));\n    w.addDocument(doc);\n    w.commit();\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final QueryCachingPolicy policy = new QueryCachingPolicy() {\n\n      @Override\n      public boolean shouldCache(Query query, LeafReaderContext context) throws IOException {\n        assertEquals(expectedCacheKey, QueryCache.cacheKey(query));\n        return true;\n      }\n\n      @Override\n      public void onUse(Query query) {\n        assertEquals(expectedCacheKey, QueryCache.cacheKey(query));\n      }\n    };\n\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(policy);\n    searcher.search(query, new TotalHitCountCollector());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testUseRewrittenQueryAsCacheKey().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testUseRewrittenQueryAsCacheKey().mjava","sourceNew":"  public void testUseRewrittenQueryAsCacheKey() throws IOException {\n    final Query expectedCacheKey = new TermQuery(new Term(\"foo\", \"bar\"));\n    final BooleanQuery.Builder query = new BooleanQuery.Builder();\n    final Query sub = expectedCacheKey.clone();\n    sub.setBoost(42);\n    query.add(sub, Occur.MUST);\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000);\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.YES));\n    w.addDocument(doc);\n    w.commit();\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final QueryCachingPolicy policy = new QueryCachingPolicy() {\n\n      @Override\n      public boolean shouldCache(Query query, LeafReaderContext context) throws IOException {\n        assertEquals(expectedCacheKey, QueryCache.cacheKey(query));\n        return true;\n      }\n\n      @Override\n      public void onUse(Query query) {\n        assertEquals(expectedCacheKey, QueryCache.cacheKey(query));\n      }\n    };\n\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(policy);\n    searcher.search(query.build(), new TotalHitCountCollector());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUseRewrittenQueryAsCacheKey() throws IOException {\n    final Query expectedCacheKey = new TermQuery(new Term(\"foo\", \"bar\"));\n    final BooleanQuery query = new BooleanQuery();\n    final Query sub = expectedCacheKey.clone();\n    sub.setBoost(42);\n    query.add(sub, Occur.MUST);\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000);\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.YES));\n    w.addDocument(doc);\n    w.commit();\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final QueryCachingPolicy policy = new QueryCachingPolicy() {\n\n      @Override\n      public boolean shouldCache(Query query, LeafReaderContext context) throws IOException {\n        assertEquals(expectedCacheKey, QueryCache.cacheKey(query));\n        return true;\n      }\n\n      @Override\n      public void onUse(Query query) {\n        assertEquals(expectedCacheKey, QueryCache.cacheKey(query));\n      }\n    };\n\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(policy);\n    searcher.search(query, new TotalHitCountCollector());\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testUseRewrittenQueryAsCacheKey().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testUseRewrittenQueryAsCacheKey().mjava","sourceNew":"  public void testUseRewrittenQueryAsCacheKey() throws IOException {\n    final Query expectedCacheKey = new TermQuery(new Term(\"foo\", \"bar\"));\n    final BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new BoostQuery(expectedCacheKey, 42f), Occur.MUST);\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000);\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.YES));\n    w.addDocument(doc);\n    w.commit();\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final QueryCachingPolicy policy = new QueryCachingPolicy() {\n\n      @Override\n      public boolean shouldCache(Query query, LeafReaderContext context) throws IOException {\n        assertEquals(expectedCacheKey, query);\n        return true;\n      }\n\n      @Override\n      public void onUse(Query query) {\n        assertEquals(expectedCacheKey, query);\n      }\n    };\n\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(policy);\n    searcher.search(query.build(), new TotalHitCountCollector());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUseRewrittenQueryAsCacheKey() throws IOException {\n    final Query expectedCacheKey = new TermQuery(new Term(\"foo\", \"bar\"));\n    final BooleanQuery.Builder query = new BooleanQuery.Builder();\n    final Query sub = expectedCacheKey.clone();\n    sub.setBoost(42);\n    query.add(sub, Occur.MUST);\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000);\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.YES));\n    w.addDocument(doc);\n    w.commit();\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final QueryCachingPolicy policy = new QueryCachingPolicy() {\n\n      @Override\n      public boolean shouldCache(Query query, LeafReaderContext context) throws IOException {\n        assertEquals(expectedCacheKey, QueryCache.cacheKey(query));\n        return true;\n      }\n\n      @Override\n      public void onUse(Query query) {\n        assertEquals(expectedCacheKey, QueryCache.cacheKey(query));\n      }\n    };\n\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(policy);\n    searcher.search(query.build(), new TotalHitCountCollector());\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aac61ee5b4492f174e60bd54939aba9539906edf","date":1461245473,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testUseRewrittenQueryAsCacheKey().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testUseRewrittenQueryAsCacheKey().mjava","sourceNew":"  public void testUseRewrittenQueryAsCacheKey() throws IOException {\n    final Query expectedCacheKey = new TermQuery(new Term(\"foo\", \"bar\"));\n    final BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new BoostQuery(expectedCacheKey, 42f), Occur.MUST);\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> random().nextBoolean());\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.YES));\n    w.addDocument(doc);\n    w.commit();\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final QueryCachingPolicy policy = new QueryCachingPolicy() {\n\n      @Override\n      public boolean shouldCache(Query query, LeafReaderContext context) throws IOException {\n        assertEquals(expectedCacheKey, query);\n        return true;\n      }\n\n      @Override\n      public void onUse(Query query) {\n        assertEquals(expectedCacheKey, query);\n      }\n    };\n\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(policy);\n    searcher.search(query.build(), new TotalHitCountCollector());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUseRewrittenQueryAsCacheKey() throws IOException {\n    final Query expectedCacheKey = new TermQuery(new Term(\"foo\", \"bar\"));\n    final BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new BoostQuery(expectedCacheKey, 42f), Occur.MUST);\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000);\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.YES));\n    w.addDocument(doc);\n    w.commit();\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final QueryCachingPolicy policy = new QueryCachingPolicy() {\n\n      @Override\n      public boolean shouldCache(Query query, LeafReaderContext context) throws IOException {\n        assertEquals(expectedCacheKey, query);\n        return true;\n      }\n\n      @Override\n      public void onUse(Query query) {\n        assertEquals(expectedCacheKey, query);\n      }\n    };\n\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(policy);\n    searcher.search(query.build(), new TotalHitCountCollector());\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25f40dbcd244dc82447a23719db34376cdcc9cfe","date":1461323366,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testUseRewrittenQueryAsCacheKey().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testUseRewrittenQueryAsCacheKey().mjava","sourceNew":"  public void testUseRewrittenQueryAsCacheKey() throws IOException {\n    final Query expectedCacheKey = new TermQuery(new Term(\"foo\", \"bar\"));\n    final BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new BoostQuery(expectedCacheKey, 42f), Occur.MUST);\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> random().nextBoolean());\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.YES));\n    w.addDocument(doc);\n    w.commit();\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final QueryCachingPolicy policy = new QueryCachingPolicy() {\n\n      @Override\n      public boolean shouldCache(Query query) throws IOException {\n        assertEquals(expectedCacheKey, query);\n        return true;\n      }\n\n      @Override\n      public void onUse(Query query) {\n        assertEquals(expectedCacheKey, query);\n      }\n    };\n\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(policy);\n    searcher.search(query.build(), new TotalHitCountCollector());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUseRewrittenQueryAsCacheKey() throws IOException {\n    final Query expectedCacheKey = new TermQuery(new Term(\"foo\", \"bar\"));\n    final BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new BoostQuery(expectedCacheKey, 42f), Occur.MUST);\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> random().nextBoolean());\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.YES));\n    w.addDocument(doc);\n    w.commit();\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final QueryCachingPolicy policy = new QueryCachingPolicy() {\n\n      @Override\n      public boolean shouldCache(Query query, LeafReaderContext context) throws IOException {\n        assertEquals(expectedCacheKey, query);\n        return true;\n      }\n\n      @Override\n      public void onUse(Query query) {\n        assertEquals(expectedCacheKey, query);\n      }\n    };\n\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(policy);\n    searcher.search(query.build(), new TotalHitCountCollector());\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testUseRewrittenQueryAsCacheKey().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testUseRewrittenQueryAsCacheKey().mjava","sourceNew":"  public void testUseRewrittenQueryAsCacheKey() throws IOException {\n    final Query expectedCacheKey = new TermQuery(new Term(\"foo\", \"bar\"));\n    final BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new BoostQuery(expectedCacheKey, 42f), Occur.MUST);\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> random().nextBoolean());\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.YES));\n    w.addDocument(doc);\n    w.commit();\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final QueryCachingPolicy policy = new QueryCachingPolicy() {\n\n      @Override\n      public boolean shouldCache(Query query) throws IOException {\n        assertEquals(expectedCacheKey, query);\n        return true;\n      }\n\n      @Override\n      public void onUse(Query query) {\n        assertEquals(expectedCacheKey, query);\n      }\n    };\n\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(policy);\n    searcher.search(query.build(), new TotalHitCountCollector());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUseRewrittenQueryAsCacheKey() throws IOException {\n    final Query expectedCacheKey = new TermQuery(new Term(\"foo\", \"bar\"));\n    final BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new BoostQuery(expectedCacheKey, 42f), Occur.MUST);\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> random().nextBoolean());\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.YES));\n    w.addDocument(doc);\n    w.commit();\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final QueryCachingPolicy policy = new QueryCachingPolicy() {\n\n      @Override\n      public boolean shouldCache(Query query, LeafReaderContext context) throws IOException {\n        assertEquals(expectedCacheKey, query);\n        return true;\n      }\n\n      @Override\n      public void onUse(Query query) {\n        assertEquals(expectedCacheKey, query);\n      }\n    };\n\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(policy);\n    searcher.search(query.build(), new TotalHitCountCollector());\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7732a106554be0db3e03ac5211e46f6e0c285b8","date":1511975378,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testUseRewrittenQueryAsCacheKey().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testUseRewrittenQueryAsCacheKey().mjava","sourceNew":"  public void testUseRewrittenQueryAsCacheKey() throws IOException {\n    final Query expectedCacheKey = new TermQuery(new Term(\"foo\", \"bar\"));\n    final BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new BoostQuery(expectedCacheKey, 42f), Occur.MUST);\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> random().nextBoolean(), Float.POSITIVE_INFINITY);\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.YES));\n    w.addDocument(doc);\n    w.commit();\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final QueryCachingPolicy policy = new QueryCachingPolicy() {\n\n      @Override\n      public boolean shouldCache(Query query) throws IOException {\n        assertEquals(expectedCacheKey, query);\n        return true;\n      }\n\n      @Override\n      public void onUse(Query query) {\n        assertEquals(expectedCacheKey, query);\n      }\n    };\n\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(policy);\n    searcher.search(query.build(), new TotalHitCountCollector());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUseRewrittenQueryAsCacheKey() throws IOException {\n    final Query expectedCacheKey = new TermQuery(new Term(\"foo\", \"bar\"));\n    final BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new BoostQuery(expectedCacheKey, 42f), Occur.MUST);\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> random().nextBoolean());\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.YES));\n    w.addDocument(doc);\n    w.commit();\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final QueryCachingPolicy policy = new QueryCachingPolicy() {\n\n      @Override\n      public boolean shouldCache(Query query) throws IOException {\n        assertEquals(expectedCacheKey, query);\n        return true;\n      }\n\n      @Override\n      public void onUse(Query query) {\n        assertEquals(expectedCacheKey, query);\n      }\n    };\n\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(policy);\n    searcher.search(query.build(), new TotalHitCountCollector());\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testUseRewrittenQueryAsCacheKey().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testUseRewrittenQueryAsCacheKey().mjava","sourceNew":"  public void testUseRewrittenQueryAsCacheKey() throws IOException {\n    final Query expectedCacheKey = new TermQuery(new Term(\"foo\", \"bar\"));\n    final BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new BoostQuery(expectedCacheKey, 42f), Occur.MUST);\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> random().nextBoolean(), Float.POSITIVE_INFINITY);\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.YES));\n    w.addDocument(doc);\n    w.commit();\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final QueryCachingPolicy policy = new QueryCachingPolicy() {\n\n      @Override\n      public boolean shouldCache(Query query) throws IOException {\n        assertEquals(expectedCacheKey, query);\n        return true;\n      }\n\n      @Override\n      public void onUse(Query query) {\n        assertEquals(expectedCacheKey, query);\n      }\n    };\n\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(policy);\n    searcher.search(query.build(), new TotalHitCountCollector());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUseRewrittenQueryAsCacheKey() throws IOException {\n    final Query expectedCacheKey = new TermQuery(new Term(\"foo\", \"bar\"));\n    final BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new BoostQuery(expectedCacheKey, 42f), Occur.MUST);\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> random().nextBoolean());\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.YES));\n    w.addDocument(doc);\n    w.commit();\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final QueryCachingPolicy policy = new QueryCachingPolicy() {\n\n      @Override\n      public boolean shouldCache(Query query) throws IOException {\n        assertEquals(expectedCacheKey, query);\n        return true;\n      }\n\n      @Override\n      public void onUse(Query query) {\n        assertEquals(expectedCacheKey, query);\n      }\n    };\n\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(policy);\n    searcher.search(query.build(), new TotalHitCountCollector());\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"789fb338d3c53b4478938723d60f6623e764ca38","date":1521535944,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testUseRewrittenQueryAsCacheKey().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testUseRewrittenQueryAsCacheKey().mjava","sourceNew":"  public void testUseRewrittenQueryAsCacheKey() throws IOException {\n    final Query expectedCacheKey = new TermQuery(new Term(\"foo\", \"bar\"));\n    final BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new BoostQuery(expectedCacheKey, 42f), Occur.MUST);\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> random().nextBoolean());\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.YES));\n    w.addDocument(doc);\n    w.commit();\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final QueryCachingPolicy policy = new QueryCachingPolicy() {\n\n      @Override\n      public boolean shouldCache(Query query) throws IOException {\n        assertEquals(expectedCacheKey, query);\n        return true;\n      }\n\n      @Override\n      public void onUse(Query query) {\n        assertEquals(expectedCacheKey, query);\n      }\n    };\n\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(policy);\n    searcher.search(query.build(), new TotalHitCountCollector());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUseRewrittenQueryAsCacheKey() throws IOException {\n    final Query expectedCacheKey = new TermQuery(new Term(\"foo\", \"bar\"));\n    final BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new BoostQuery(expectedCacheKey, 42f), Occur.MUST);\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> random().nextBoolean(), Float.POSITIVE_INFINITY);\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.YES));\n    w.addDocument(doc);\n    w.commit();\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final QueryCachingPolicy policy = new QueryCachingPolicy() {\n\n      @Override\n      public boolean shouldCache(Query query) throws IOException {\n        assertEquals(expectedCacheKey, query);\n        return true;\n      }\n\n      @Override\n      public void onUse(Query query) {\n        assertEquals(expectedCacheKey, query);\n      }\n    };\n\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(policy);\n    searcher.search(query.build(), new TotalHitCountCollector());\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","date":1521731438,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testUseRewrittenQueryAsCacheKey().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testUseRewrittenQueryAsCacheKey().mjava","sourceNew":"  public void testUseRewrittenQueryAsCacheKey() throws IOException {\n    final Query expectedCacheKey = new TermQuery(new Term(\"foo\", \"bar\"));\n    final BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new BoostQuery(expectedCacheKey, 42f), Occur.MUST);\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> random().nextBoolean());\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.YES));\n    w.addDocument(doc);\n    w.commit();\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final QueryCachingPolicy policy = new QueryCachingPolicy() {\n\n      @Override\n      public boolean shouldCache(Query query) throws IOException {\n        assertEquals(expectedCacheKey, query);\n        return true;\n      }\n\n      @Override\n      public void onUse(Query query) {\n        assertEquals(expectedCacheKey, query);\n      }\n    };\n\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(policy);\n    searcher.search(query.build(), new TotalHitCountCollector());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUseRewrittenQueryAsCacheKey() throws IOException {\n    final Query expectedCacheKey = new TermQuery(new Term(\"foo\", \"bar\"));\n    final BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new BoostQuery(expectedCacheKey, 42f), Occur.MUST);\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> random().nextBoolean(), Float.POSITIVE_INFINITY);\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.YES));\n    w.addDocument(doc);\n    w.commit();\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final QueryCachingPolicy policy = new QueryCachingPolicy() {\n\n      @Override\n      public boolean shouldCache(Query query) throws IOException {\n        assertEquals(expectedCacheKey, query);\n        return true;\n      }\n\n      @Override\n      public void onUse(Query query) {\n        assertEquals(expectedCacheKey, query);\n      }\n    };\n\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(policy);\n    searcher.search(query.build(), new TotalHitCountCollector());\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5754bd6f04f13b67e9575f8b226a0303c31c7d5","date":1573506453,"type":3,"author":"ginger","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testUseRewrittenQueryAsCacheKey().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testUseRewrittenQueryAsCacheKey().mjava","sourceNew":"  public void testUseRewrittenQueryAsCacheKey() throws IOException {\n    final Query expectedCacheKey = new TermQuery(new Term(\"foo\", \"bar\"));\n    final BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new BoostQuery(expectedCacheKey, 42f), Occur.MUST);\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> random().nextBoolean(), Float.POSITIVE_INFINITY);\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.YES));\n    w.addDocument(doc);\n    w.commit();\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final QueryCachingPolicy policy = new QueryCachingPolicy() {\n\n      @Override\n      public boolean shouldCache(Query query) throws IOException {\n        assertEquals(expectedCacheKey, query);\n        return true;\n      }\n\n      @Override\n      public void onUse(Query query) {\n        assertEquals(expectedCacheKey, query);\n      }\n    };\n\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(policy);\n    searcher.search(query.build(), new TotalHitCountCollector());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUseRewrittenQueryAsCacheKey() throws IOException {\n    final Query expectedCacheKey = new TermQuery(new Term(\"foo\", \"bar\"));\n    final BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new BoostQuery(expectedCacheKey, 42f), Occur.MUST);\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> random().nextBoolean());\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.YES));\n    w.addDocument(doc);\n    w.commit();\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final QueryCachingPolicy policy = new QueryCachingPolicy() {\n\n      @Override\n      public boolean shouldCache(Query query) throws IOException {\n        assertEquals(expectedCacheKey, query);\n        return true;\n      }\n\n      @Override\n      public void onUse(Query query) {\n        assertEquals(expectedCacheKey, query);\n      }\n    };\n\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(policy);\n    searcher.search(query.build(), new TotalHitCountCollector());\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["1aad05eeff7818b0833c02ac6b743aa72054963b","789fb338d3c53b4478938723d60f6623e764ca38"],"aac61ee5b4492f174e60bd54939aba9539906edf":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["aac61ee5b4492f174e60bd54939aba9539906edf","25f40dbcd244dc82447a23719db34376cdcc9cfe"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"b5754bd6f04f13b67e9575f8b226a0303c31c7d5":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"c7732a106554be0db3e03ac5211e46f6e0c285b8":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","c7732a106554be0db3e03ac5211e46f6e0c285b8"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"789fb338d3c53b4478938723d60f6623e764ca38":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"25f40dbcd244dc82447a23719db34376cdcc9cfe":["aac61ee5b4492f174e60bd54939aba9539906edf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5754bd6f04f13b67e9575f8b226a0303c31c7d5"]},"commit2Childs":{"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["b5754bd6f04f13b67e9575f8b226a0303c31c7d5"],"aac61ee5b4492f174e60bd54939aba9539906edf":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","25f40dbcd244dc82447a23719db34376cdcc9cfe"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["c7732a106554be0db3e03ac5211e46f6e0c285b8","1aad05eeff7818b0833c02ac6b743aa72054963b"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["aac61ee5b4492f174e60bd54939aba9539906edf"],"b5754bd6f04f13b67e9575f8b226a0303c31c7d5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c7732a106554be0db3e03ac5211e46f6e0c285b8":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","789fb338d3c53b4478938723d60f6623e764ca38"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"789fb338d3c53b4478938723d60f6623e764ca38":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60596f28be69b10c37a56a303c2dbea07b2ca4ba","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"25f40dbcd244dc82447a23719db34376cdcc9cfe":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}