{"path":"lucene/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesSimple().mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      DocValuesField valuesField = new DocValuesField(\"docId\");\n      valuesField.setInt(i);\n      doc.add(valuesField);\n      doc.add(new TextField(\"docId\", \"\" + i));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    IndexReader reader = IndexReader.open(dir, 1);\n    assertEquals(1, reader.getSequentialSubReaders().length);\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiDocValues.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      DocValuesField valuesField = new DocValuesField(\"docId\");\n      valuesField.setInt(i);\n      doc.add(valuesField);\n      doc.add(new TextField(\"docId\", \"\" + i));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    IndexReader reader = IndexReader.open(dir, 1);\n    assertEquals(1, reader.getSequentialSubReaders().length);\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiDocValues.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa0f44f887719e97183771e977cfc4bfb485b766","date":1326668713,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new DocValuesField(\"docId\", i, DocValues.Type.VAR_INTS));\n      doc.add(new TextField(\"docId\", \"\" + i));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    IndexReader reader = IndexReader.open(dir, 1);\n    assertEquals(1, reader.getSequentialSubReaders().length);\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiDocValues.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      DocValuesField valuesField = new DocValuesField(\"docId\");\n      valuesField.setInt(i);\n      doc.add(valuesField);\n      doc.add(new TextField(\"docId\", \"\" + i));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    IndexReader reader = IndexReader.open(dir, 1);\n    assertEquals(1, reader.getSequentialSubReaders().length);\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiDocValues.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":["1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4"],"bugIntro":["cd659803551ebd8ca09b9e4ad7abd18d3d558f9d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868186558eb3a854ce7e720a52bb445795d54910","date":1327853682,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new DocValuesField(\"docId\", i, DocValues.Type.VAR_INTS));\n      doc.add(new TextField(\"docId\", \"\" + i));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir, 1);\n    assertEquals(1, reader.getSequentialSubReaders().length);\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiDocValues.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new DocValuesField(\"docId\", i, DocValues.Type.VAR_INTS));\n      doc.add(new TextField(\"docId\", \"\" + i));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    IndexReader reader = IndexReader.open(dir, 1);\n    assertEquals(1, reader.getSequentialSubReaders().length);\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiDocValues.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new DocValuesField(\"docId\", i, DocValues.Type.VAR_INTS));\n      doc.add(new TextField(\"docId\", \"\" + i));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir, 1);\n    assertEquals(1, reader.getSequentialSubReaders().length);\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiDocValues.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new DocValuesField(\"docId\", i, DocValues.Type.VAR_INTS));\n      doc.add(new TextField(\"docId\", \"\" + i));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    IndexReader reader = IndexReader.open(dir, 1);\n    assertEquals(1, reader.getSequentialSubReaders().length);\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiDocValues.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new DocValuesField(\"docId\", i, DocValues.Type.VAR_INTS));\n      doc.add(new TextField(\"docId\", \"\" + i));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir, 1);\n    assertEquals(1, reader.getSequentialSubReaders().length);\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiDocValues.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new DocValuesField(\"docId\", i, DocValues.Type.VAR_INTS));\n      doc.add(new TextField(\"docId\", \"\" + i));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir, 1);\n    assertEquals(1, reader.getSequentialSubReaders().length);\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiDocValues.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa0f44f887719e97183771e977cfc4bfb485b766":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["fa0f44f887719e97183771e977cfc4bfb485b766","868186558eb3a854ce7e720a52bb445795d54910"],"868186558eb3a854ce7e720a52bb445795d54910":["fa0f44f887719e97183771e977cfc4bfb485b766"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"fa0f44f887719e97183771e977cfc4bfb485b766":["5cab9a86bd67202d20b6adc463008c8e982b070a","868186558eb3a854ce7e720a52bb445795d54910"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["fa0f44f887719e97183771e977cfc4bfb485b766"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"868186558eb3a854ce7e720a52bb445795d54910":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}