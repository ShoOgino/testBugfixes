{"path":"lucene/src/java/org/apache/lucene/index/IndexReader#deleteDocuments(Term).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#deleteDocuments(Term).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#deleteDocuments(Term).mjava","sourceNew":"  /** Deletes all documents that have a given <code>term</code> indexed.\n   * This is useful if one uses a document field to hold a unique ID string for\n   * the document.  Then to delete such a document, one merely constructs a\n   * term with the appropriate field and the unique ID string as its text and\n   * passes it to this method.\n   * See {@link #deleteDocument(int)} for information about when this deletion will \n   * become effective.\n   *\n   * @return the number of documents deleted\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public int deleteDocuments(Term term) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    TermDocs docs = termDocs(term);\n    if (docs == null) return 0;\n    int n = 0;\n    try {\n      while (docs.next()) {\n        deleteDocument(docs.doc());\n        n++;\n      }\n    } finally {\n      docs.close();\n    }\n    return n;\n  }\n\n","sourceOld":"  /** Deletes all documents that have a given <code>term</code> indexed.\n   * This is useful if one uses a document field to hold a unique ID string for\n   * the document.  Then to delete such a document, one merely constructs a\n   * term with the appropriate field and the unique ID string as its text and\n   * passes it to this method.\n   * See {@link #deleteDocument(int)} for information about when this deletion will \n   * become effective.\n   *\n   * @return the number of documents deleted\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public int deleteDocuments(Term term) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    TermDocs docs = termDocs(term);\n    if (docs == null) return 0;\n    int n = 0;\n    try {\n      while (docs.next()) {\n        deleteDocument(docs.doc());\n        n++;\n      }\n    } finally {\n      docs.close();\n    }\n    return n;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#deleteDocuments(Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#deleteDocuments(Term).mjava","sourceNew":"  /** Deletes all documents that have a given <code>term</code> indexed.\n   * This is useful if one uses a document field to hold a unique ID string for\n   * the document.  Then to delete such a document, one merely constructs a\n   * term with the appropriate field and the unique ID string as its text and\n   * passes it to this method.\n   * See {@link #deleteDocument(int)} for information about when this deletion will \n   * become effective.\n   *\n   * @return the number of documents deleted\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public int deleteDocuments(Term term) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    DocsEnum docs = MultiFields.getTermDocsEnum(this,\n                                                MultiFields.getDeletedDocs(this),\n                                                term.field(),\n                                                new BytesRef(term.text()));\n    if (docs == null) return 0;\n    int n = 0;\n    int doc;\n    while ((doc = docs.nextDoc()) != docs.NO_MORE_DOCS) {\n      deleteDocument(doc);\n      n++;\n    }\n    return n;\n  }\n\n","sourceOld":"  /** Deletes all documents that have a given <code>term</code> indexed.\n   * This is useful if one uses a document field to hold a unique ID string for\n   * the document.  Then to delete such a document, one merely constructs a\n   * term with the appropriate field and the unique ID string as its text and\n   * passes it to this method.\n   * See {@link #deleteDocument(int)} for information about when this deletion will \n   * become effective.\n   *\n   * @return the number of documents deleted\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public int deleteDocuments(Term term) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    TermDocs docs = termDocs(term);\n    if (docs == null) return 0;\n    int n = 0;\n    try {\n      while (docs.next()) {\n        deleteDocument(docs.doc());\n        n++;\n      }\n    } finally {\n      docs.close();\n    }\n    return n;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f29ba80b723649f5feb7e37afe1a558dd2c1304","date":1278318805,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#deleteDocuments(Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#deleteDocuments(Term).mjava","sourceNew":"  /** Deletes all documents that have a given <code>term</code> indexed.\n   * This is useful if one uses a document field to hold a unique ID string for\n   * the document.  Then to delete such a document, one merely constructs a\n   * term with the appropriate field and the unique ID string as its text and\n   * passes it to this method.\n   * See {@link #deleteDocument(int)} for information about when this deletion will \n   * become effective.\n   *\n   * @return the number of documents deleted\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public int deleteDocuments(Term term) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    DocsEnum docs = MultiFields.getTermDocsEnum(this,\n                                                MultiFields.getDeletedDocs(this),\n                                                term.field(),\n                                                term.bytes());\n    if (docs == null) return 0;\n    int n = 0;\n    int doc;\n    while ((doc = docs.nextDoc()) != docs.NO_MORE_DOCS) {\n      deleteDocument(doc);\n      n++;\n    }\n    return n;\n  }\n\n","sourceOld":"  /** Deletes all documents that have a given <code>term</code> indexed.\n   * This is useful if one uses a document field to hold a unique ID string for\n   * the document.  Then to delete such a document, one merely constructs a\n   * term with the appropriate field and the unique ID string as its text and\n   * passes it to this method.\n   * See {@link #deleteDocument(int)} for information about when this deletion will \n   * become effective.\n   *\n   * @return the number of documents deleted\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public int deleteDocuments(Term term) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    DocsEnum docs = MultiFields.getTermDocsEnum(this,\n                                                MultiFields.getDeletedDocs(this),\n                                                term.field(),\n                                                new BytesRef(term.text()));\n    if (docs == null) return 0;\n    int n = 0;\n    int doc;\n    while ((doc = docs.nextDoc()) != docs.NO_MORE_DOCS) {\n      deleteDocument(doc);\n      n++;\n    }\n    return n;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#deleteDocuments(Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#deleteDocuments(Term).mjava","sourceNew":"  /** Deletes all documents that have a given <code>term</code> indexed.\n   * This is useful if one uses a document field to hold a unique ID string for\n   * the document.  Then to delete such a document, one merely constructs a\n   * term with the appropriate field and the unique ID string as its text and\n   * passes it to this method.\n   * See {@link #deleteDocument(int)} for information about when this deletion will \n   * become effective.\n   *\n   * @return the number of documents deleted\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public int deleteDocuments(Term term) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    DocsEnum docs = MultiFields.getTermDocsEnum(this,\n                                                MultiFields.getDeletedDocs(this),\n                                                term.field(),\n                                                term.bytes());\n    if (docs == null) return 0;\n    int n = 0;\n    int doc;\n    while ((doc = docs.nextDoc()) != docs.NO_MORE_DOCS) {\n      deleteDocument(doc);\n      n++;\n    }\n    return n;\n  }\n\n","sourceOld":"  /** Deletes all documents that have a given <code>term</code> indexed.\n   * This is useful if one uses a document field to hold a unique ID string for\n   * the document.  Then to delete such a document, one merely constructs a\n   * term with the appropriate field and the unique ID string as its text and\n   * passes it to this method.\n   * See {@link #deleteDocument(int)} for information about when this deletion will \n   * become effective.\n   *\n   * @return the number of documents deleted\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public int deleteDocuments(Term term) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    TermDocs docs = termDocs(term);\n    if (docs == null) return 0;\n    int n = 0;\n    try {\n      while (docs.next()) {\n        deleteDocument(docs.doc());\n        n++;\n      }\n    } finally {\n      docs.close();\n    }\n    return n;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39f3757037aa8f710c0cbf9a76a332de735f58b0","date":1288384416,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#deleteDocuments(Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#deleteDocuments(Term).mjava","sourceNew":"  /** Deletes all documents that have a given <code>term</code> indexed.\n   * This is useful if one uses a document field to hold a unique ID string for\n   * the document.  Then to delete such a document, one merely constructs a\n   * term with the appropriate field and the unique ID string as its text and\n   * passes it to this method.\n   * See {@link #deleteDocument(int)} for information about when this deletion will \n   * become effective.\n   *\n   * @return the number of documents deleted\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public int deleteDocuments(Term term) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    DocsEnum docs = MultiFields.getTermDocsEnum(this,\n                                                MultiFields.getDeletedDocs(this),\n                                                term.field(),\n                                                term.bytes());\n    if (docs == null) return 0;\n    int n = 0;\n    int doc;\n    while ((doc = docs.nextDoc()) != DocsEnum.NO_MORE_DOCS) {\n      deleteDocument(doc);\n      n++;\n    }\n    return n;\n  }\n\n","sourceOld":"  /** Deletes all documents that have a given <code>term</code> indexed.\n   * This is useful if one uses a document field to hold a unique ID string for\n   * the document.  Then to delete such a document, one merely constructs a\n   * term with the appropriate field and the unique ID string as its text and\n   * passes it to this method.\n   * See {@link #deleteDocument(int)} for information about when this deletion will \n   * become effective.\n   *\n   * @return the number of documents deleted\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public int deleteDocuments(Term term) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    DocsEnum docs = MultiFields.getTermDocsEnum(this,\n                                                MultiFields.getDeletedDocs(this),\n                                                term.field(),\n                                                term.bytes());\n    if (docs == null) return 0;\n    int n = 0;\n    int doc;\n    while ((doc = docs.nextDoc()) != docs.NO_MORE_DOCS) {\n      deleteDocument(doc);\n      n++;\n    }\n    return n;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#deleteDocuments(Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#deleteDocuments(Term).mjava","sourceNew":"  /** Deletes all documents that have a given <code>term</code> indexed.\n   * This is useful if one uses a document field to hold a unique ID string for\n   * the document.  Then to delete such a document, one merely constructs a\n   * term with the appropriate field and the unique ID string as its text and\n   * passes it to this method.\n   * See {@link #deleteDocument(int)} for information about when this deletion will \n   * become effective.\n   *\n   * @return the number of documents deleted\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public int deleteDocuments(Term term) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    DocsEnum docs = MultiFields.getTermDocsEnum(this,\n                                                MultiFields.getDeletedDocs(this),\n                                                term.field(),\n                                                term.bytes());\n    if (docs == null) return 0;\n    int n = 0;\n    int doc;\n    while ((doc = docs.nextDoc()) != DocsEnum.NO_MORE_DOCS) {\n      deleteDocument(doc);\n      n++;\n    }\n    return n;\n  }\n\n","sourceOld":"  /** Deletes all documents that have a given <code>term</code> indexed.\n   * This is useful if one uses a document field to hold a unique ID string for\n   * the document.  Then to delete such a document, one merely constructs a\n   * term with the appropriate field and the unique ID string as its text and\n   * passes it to this method.\n   * See {@link #deleteDocument(int)} for information about when this deletion will \n   * become effective.\n   *\n   * @return the number of documents deleted\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public int deleteDocuments(Term term) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    DocsEnum docs = MultiFields.getTermDocsEnum(this,\n                                                MultiFields.getDeletedDocs(this),\n                                                term.field(),\n                                                term.bytes());\n    if (docs == null) return 0;\n    int n = 0;\n    int doc;\n    while ((doc = docs.nextDoc()) != docs.NO_MORE_DOCS) {\n      deleteDocument(doc);\n      n++;\n    }\n    return n;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#deleteDocuments(Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#deleteDocuments(Term).mjava","sourceNew":"  /** Deletes all documents that have a given <code>term</code> indexed.\n   * This is useful if one uses a document field to hold a unique ID string for\n   * the document.  Then to delete such a document, one merely constructs a\n   * term with the appropriate field and the unique ID string as its text and\n   * passes it to this method.\n   * See {@link #deleteDocument(int)} for information about when this deletion will \n   * become effective.\n   *\n   * @return the number of documents deleted\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public int deleteDocuments(Term term) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    DocsEnum docs = MultiFields.getTermDocsEnum(this,\n                                                MultiFields.getDeletedDocs(this),\n                                                term.field(),\n                                                term.bytes());\n    if (docs == null) return 0;\n    int n = 0;\n    int doc;\n    while ((doc = docs.nextDoc()) != DocsEnum.NO_MORE_DOCS) {\n      deleteDocument(doc);\n      n++;\n    }\n    return n;\n  }\n\n","sourceOld":"  /** Deletes all documents that have a given <code>term</code> indexed.\n   * This is useful if one uses a document field to hold a unique ID string for\n   * the document.  Then to delete such a document, one merely constructs a\n   * term with the appropriate field and the unique ID string as its text and\n   * passes it to this method.\n   * See {@link #deleteDocument(int)} for information about when this deletion will \n   * become effective.\n   *\n   * @return the number of documents deleted\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public int deleteDocuments(Term term) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    DocsEnum docs = MultiFields.getTermDocsEnum(this,\n                                                MultiFields.getDeletedDocs(this),\n                                                term.field(),\n                                                term.bytes());\n    if (docs == null) return 0;\n    int n = 0;\n    int doc;\n    while ((doc = docs.nextDoc()) != docs.NO_MORE_DOCS) {\n      deleteDocument(doc);\n      n++;\n    }\n    return n;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#deleteDocuments(Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#deleteDocuments(Term).mjava","sourceNew":"  /** Deletes all documents that have a given <code>term</code> indexed.\n   * This is useful if one uses a document field to hold a unique ID string for\n   * the document.  Then to delete such a document, one merely constructs a\n   * term with the appropriate field and the unique ID string as its text and\n   * passes it to this method.\n   * See {@link #deleteDocument(int)} for information about when this deletion will \n   * become effective.\n   *\n   * @return the number of documents deleted\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public int deleteDocuments(Term term) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    DocsEnum docs = MultiFields.getTermDocsEnum(this,\n                                                MultiFields.getLiveDocs(this),\n                                                term.field(),\n                                                term.bytes());\n    if (docs == null) return 0;\n    int n = 0;\n    int doc;\n    while ((doc = docs.nextDoc()) != DocsEnum.NO_MORE_DOCS) {\n      deleteDocument(doc);\n      n++;\n    }\n    return n;\n  }\n\n","sourceOld":"  /** Deletes all documents that have a given <code>term</code> indexed.\n   * This is useful if one uses a document field to hold a unique ID string for\n   * the document.  Then to delete such a document, one merely constructs a\n   * term with the appropriate field and the unique ID string as its text and\n   * passes it to this method.\n   * See {@link #deleteDocument(int)} for information about when this deletion will \n   * become effective.\n   *\n   * @return the number of documents deleted\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public int deleteDocuments(Term term) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    DocsEnum docs = MultiFields.getTermDocsEnum(this,\n                                                MultiFields.getDeletedDocs(this),\n                                                term.field(),\n                                                term.bytes());\n    if (docs == null) return 0;\n    int n = 0;\n    int doc;\n    while ((doc = docs.nextDoc()) != DocsEnum.NO_MORE_DOCS) {\n      deleteDocument(doc);\n      n++;\n    }\n    return n;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#deleteDocuments(Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#deleteDocuments(Term).mjava","sourceNew":"  /** Deletes all documents that have a given <code>term</code> indexed.\n   * This is useful if one uses a document field to hold a unique ID string for\n   * the document.  Then to delete such a document, one merely constructs a\n   * term with the appropriate field and the unique ID string as its text and\n   * passes it to this method.\n   * See {@link #deleteDocument(int)} for information about when this deletion will \n   * become effective.\n   *\n   * @return the number of documents deleted\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public int deleteDocuments(Term term) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    DocsEnum docs = MultiFields.getTermDocsEnum(this,\n                                                MultiFields.getLiveDocs(this),\n                                                term.field(),\n                                                term.bytes());\n    if (docs == null) return 0;\n    int n = 0;\n    int doc;\n    while ((doc = docs.nextDoc()) != DocsEnum.NO_MORE_DOCS) {\n      deleteDocument(doc);\n      n++;\n    }\n    return n;\n  }\n\n","sourceOld":"  /** Deletes all documents that have a given <code>term</code> indexed.\n   * This is useful if one uses a document field to hold a unique ID string for\n   * the document.  Then to delete such a document, one merely constructs a\n   * term with the appropriate field and the unique ID string as its text and\n   * passes it to this method.\n   * See {@link #deleteDocument(int)} for information about when this deletion will \n   * become effective.\n   *\n   * @return the number of documents deleted\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public int deleteDocuments(Term term) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    DocsEnum docs = MultiFields.getTermDocsEnum(this,\n                                                MultiFields.getDeletedDocs(this),\n                                                term.field(),\n                                                term.bytes());\n    if (docs == null) return 0;\n    int n = 0;\n    int doc;\n    while ((doc = docs.nextDoc()) != DocsEnum.NO_MORE_DOCS) {\n      deleteDocument(doc);\n      n++;\n    }\n    return n;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#deleteDocuments(Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#deleteDocuments(Term).mjava","sourceNew":"  /** Deletes all documents that have a given <code>term</code> indexed.\n   * This is useful if one uses a document field to hold a unique ID string for\n   * the document.  Then to delete such a document, one merely constructs a\n   * term with the appropriate field and the unique ID string as its text and\n   * passes it to this method.\n   * See {@link #deleteDocument(int)} for information about when this deletion will \n   * become effective.\n   *\n   * @return the number of documents deleted\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public int deleteDocuments(Term term) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    DocsEnum docs = MultiFields.getTermDocsEnum(this,\n                                                MultiFields.getLiveDocs(this),\n                                                term.field(),\n                                                term.bytes());\n    if (docs == null) return 0;\n    int n = 0;\n    int doc;\n    while ((doc = docs.nextDoc()) != DocsEnum.NO_MORE_DOCS) {\n      deleteDocument(doc);\n      n++;\n    }\n    return n;\n  }\n\n","sourceOld":"  /** Deletes all documents that have a given <code>term</code> indexed.\n   * This is useful if one uses a document field to hold a unique ID string for\n   * the document.  Then to delete such a document, one merely constructs a\n   * term with the appropriate field and the unique ID string as its text and\n   * passes it to this method.\n   * See {@link #deleteDocument(int)} for information about when this deletion will \n   * become effective.\n   *\n   * @return the number of documents deleted\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public int deleteDocuments(Term term) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    DocsEnum docs = MultiFields.getTermDocsEnum(this,\n                                                MultiFields.getDeletedDocs(this),\n                                                term.field(),\n                                                term.bytes());\n    if (docs == null) return 0;\n    int n = 0;\n    int doc;\n    while ((doc = docs.nextDoc()) != DocsEnum.NO_MORE_DOCS) {\n      deleteDocument(doc);\n      n++;\n    }\n    return n;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75ec8c9aaa10ac00b30fd4c2465409770c838f7b","date":1323020115,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#deleteDocuments(Term).mjava","sourceNew":null,"sourceOld":"  /** Deletes all documents that have a given <code>term</code> indexed.\n   * This is useful if one uses a document field to hold a unique ID string for\n   * the document.  Then to delete such a document, one merely constructs a\n   * term with the appropriate field and the unique ID string as its text and\n   * passes it to this method.\n   * See {@link #deleteDocument(int)} for information about when this deletion will \n   * become effective.\n   *\n   * @return the number of documents deleted\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public int deleteDocuments(Term term) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    DocsEnum docs = MultiFields.getTermDocsEnum(this,\n                                                MultiFields.getLiveDocs(this),\n                                                term.field(),\n                                                term.bytes());\n    if (docs == null) return 0;\n    int n = 0;\n    int doc;\n    while ((doc = docs.nextDoc()) != DocsEnum.NO_MORE_DOCS) {\n      deleteDocument(doc);\n      n++;\n    }\n    return n;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"872cff1d3a554e0cd64014cd97f88d3002b0f491","date":1323024658,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#deleteDocuments(Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#deleteDocuments(Term).mjava","sourceNew":"  /** Deletes all documents that have a given <code>term</code> indexed.\n   * This is useful if one uses a document field to hold a unique ID string for\n   * the document.  Then to delete such a document, one merely constructs a\n   * term with the appropriate field and the unique ID string as its text and\n   * passes it to this method.\n   * See {@link #deleteDocument(int)} for information about when this deletion will \n   * become effective.\n   *\n   * @return the number of documents deleted\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public int deleteDocuments(Term term) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    DocsEnum docs = MultiFields.getTermDocsEnum(this,\n                                                MultiFields.getLiveDocs(this),\n                                                term.field(),\n                                                term.bytes(),\n                                                false);\n    if (docs == null) {\n      return 0;\n    }\n    int n = 0;\n    int doc;\n    while ((doc = docs.nextDoc()) != DocsEnum.NO_MORE_DOCS) {\n      deleteDocument(doc);\n      n++;\n    }\n    return n;\n  }\n\n","sourceOld":"  /** Deletes all documents that have a given <code>term</code> indexed.\n   * This is useful if one uses a document field to hold a unique ID string for\n   * the document.  Then to delete such a document, one merely constructs a\n   * term with the appropriate field and the unique ID string as its text and\n   * passes it to this method.\n   * See {@link #deleteDocument(int)} for information about when this deletion will \n   * become effective.\n   *\n   * @return the number of documents deleted\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public int deleteDocuments(Term term) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    DocsEnum docs = MultiFields.getTermDocsEnum(this,\n                                                MultiFields.getLiveDocs(this),\n                                                term.field(),\n                                                term.bytes());\n    if (docs == null) return 0;\n    int n = 0;\n    int doc;\n    while ((doc = docs.nextDoc()) != DocsEnum.NO_MORE_DOCS) {\n      deleteDocument(doc);\n      n++;\n    }\n    return n;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#deleteDocuments(Term).mjava","sourceNew":null,"sourceOld":"  /** Deletes all documents that have a given <code>term</code> indexed.\n   * This is useful if one uses a document field to hold a unique ID string for\n   * the document.  Then to delete such a document, one merely constructs a\n   * term with the appropriate field and the unique ID string as its text and\n   * passes it to this method.\n   * See {@link #deleteDocument(int)} for information about when this deletion will \n   * become effective.\n   *\n   * @return the number of documents deleted\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public int deleteDocuments(Term term) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    DocsEnum docs = MultiFields.getTermDocsEnum(this,\n                                                MultiFields.getLiveDocs(this),\n                                                term.field(),\n                                                term.bytes(),\n                                                false);\n    if (docs == null) {\n      return 0;\n    }\n    int n = 0;\n    int doc;\n    while ((doc = docs.nextDoc()) != DocsEnum.NO_MORE_DOCS) {\n      deleteDocument(doc);\n      n++;\n    }\n    return n;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#deleteDocuments(Term).mjava","sourceNew":null,"sourceOld":"  /** Deletes all documents that have a given <code>term</code> indexed.\n   * This is useful if one uses a document field to hold a unique ID string for\n   * the document.  Then to delete such a document, one merely constructs a\n   * term with the appropriate field and the unique ID string as its text and\n   * passes it to this method.\n   * See {@link #deleteDocument(int)} for information about when this deletion will \n   * become effective.\n   *\n   * @return the number of documents deleted\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public int deleteDocuments(Term term) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    DocsEnum docs = MultiFields.getTermDocsEnum(this,\n                                                MultiFields.getLiveDocs(this),\n                                                term.field(),\n                                                term.bytes(),\n                                                false);\n    if (docs == null) {\n      return 0;\n    }\n    int n = 0;\n    int doc;\n    while ((doc = docs.nextDoc()) != DocsEnum.NO_MORE_DOCS) {\n      deleteDocument(doc);\n      n++;\n    }\n    return n;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"39f3757037aa8f710c0cbf9a76a332de735f58b0":["4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["872cff1d3a554e0cd64014cd97f88d3002b0f491","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["2dadf0f3286a34a0fee6e788ffce88624bf2984e","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["2dadf0f3286a34a0fee6e788ffce88624bf2984e","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28427ef110c4c5bf5b4057731b83110bd1e13724":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["872cff1d3a554e0cd64014cd97f88d3002b0f491","75ec8c9aaa10ac00b30fd4c2465409770c838f7b"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["5f4e87790277826a2aea119328600dfb07761f32","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["39f3757037aa8f710c0cbf9a76a332de735f58b0","5f4e87790277826a2aea119328600dfb07761f32","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"39f3757037aa8f710c0cbf9a76a332de735f58b0":[],"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["75ec8c9aaa10ac00b30fd4c2465409770c838f7b","872cff1d3a554e0cd64014cd97f88d3002b0f491","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"5f4e87790277826a2aea119328600dfb07761f32":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["5f4e87790277826a2aea119328600dfb07761f32","28427ef110c4c5bf5b4057731b83110bd1e13724"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["39f3757037aa8f710c0cbf9a76a332de735f58b0","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}