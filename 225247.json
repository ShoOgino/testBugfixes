{"path":"src/test/org/apache/lucene/store/MockRAMDirectory#close().mjava","commits":[{"id":"d72db039743bd6a2da9be6306f57c71654ca1bf6","date":1173217255,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/MockRAMDirectory#close().mjava","pathOld":"/dev/null","sourceNew":"  public void close() {\n    if (openFiles == null) {\n      openFiles = new HashMap();\n    }\n    synchronized(openFiles) {\n      if (noDeleteOpenFile && openFiles.size() > 0) {\n        // RuntimeException instead of IOException because\n        // super() does not throw IOException currently:\n        throw new RuntimeException(\"MockRAMDirectory: cannot close: there are still open files: \" + openFiles);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c65000dee855f8d7329bd4f6310cb44af4d63bd3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c65000dee855f8d7329bd4f6310cb44af4d63bd3","date":1242673652,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/MockRAMDirectory#close().mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMDirectory#close().mjava","sourceNew":"  public synchronized void close() {\n    if (openFiles == null) {\n      openFiles = new HashMap();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockRAMDirectory: cannot close: there are still open files: \" + openFiles);\n    }\n  }\n\n","sourceOld":"  public void close() {\n    if (openFiles == null) {\n      openFiles = new HashMap();\n    }\n    synchronized(openFiles) {\n      if (noDeleteOpenFile && openFiles.size() > 0) {\n        // RuntimeException instead of IOException because\n        // super() does not throw IOException currently:\n        throw new RuntimeException(\"MockRAMDirectory: cannot close: there are still open files: \" + openFiles);\n      }\n    }\n  }\n\n","bugFix":["d72db039743bd6a2da9be6306f57c71654ca1bf6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/MockRAMDirectory#close().mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMDirectory#close().mjava","sourceNew":"  @Override\n  public synchronized void close() {\n    if (openFiles == null) {\n      openFiles = new HashMap();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockRAMDirectory: cannot close: there are still open files: \" + openFiles);\n    }\n  }\n\n","sourceOld":"  public synchronized void close() {\n    if (openFiles == null) {\n      openFiles = new HashMap();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockRAMDirectory: cannot close: there are still open files: \" + openFiles);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/MockRAMDirectory#close().mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMDirectory#close().mjava","sourceNew":"  @Override\n  public synchronized void close() {\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockRAMDirectory: cannot close: there are still open files: \" + openFiles);\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized void close() {\n    if (openFiles == null) {\n      openFiles = new HashMap();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockRAMDirectory: cannot close: there are still open files: \" + openFiles);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/MockRAMDirectory#close().mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMDirectory#close().mjava","sourceNew":"  @Override\n  public synchronized void close() {\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockRAMDirectory: cannot close: there are still open files: \" + openFiles);\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized void close() {\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockRAMDirectory: cannot close: there are still open files: \" + openFiles);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["c65000dee855f8d7329bd4f6310cb44af4d63bd3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c65000dee855f8d7329bd4f6310cb44af4d63bd3":["d72db039743bd6a2da9be6306f57c71654ca1bf6"],"d72db039743bd6a2da9be6306f57c71654ca1bf6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"]},"commit2Childs":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d72db039743bd6a2da9be6306f57c71654ca1bf6"],"c65000dee855f8d7329bd4f6310cb44af4d63bd3":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"d72db039743bd6a2da9be6306f57c71654ca1bf6":["c65000dee855f8d7329bd4f6310cb44af4d63bd3"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}