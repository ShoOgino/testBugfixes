{"path":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer#score().mjava","commits":[{"id":"66ad19eb69be5720d673695d38a1f5a0fed70c06","date":1366664507,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer#score().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public float score() throws IOException {\n    assert iterating();\n    final float score = in.score();\n    assert !Float.isNaN(score);\n    assert !Float.isNaN(score);\n    return score;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b52f4d438f568f7beafda3cf347790a4bfe32928"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b52f4d438f568f7beafda3cf347790a4bfe32928","date":1425545677,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer#score().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer#score().mjava","sourceNew":"  @Override\n  public float score() throws IOException {\n    assert iterating();\n    final float score = in.score();\n    assert !Float.isNaN(score) : \"NaN score for in=\"+in;\n    return score;\n  }\n\n","sourceOld":"  @Override\n  public float score() throws IOException {\n    assert iterating();\n    final float score = in.score();\n    assert !Float.isNaN(score);\n    assert !Float.isNaN(score);\n    return score;\n  }\n\n","bugFix":["66ad19eb69be5720d673695d38a1f5a0fed70c06"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer#score().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer#score().mjava","sourceNew":"  @Override\n  public float score() throws IOException {\n    assert iterating();\n    final float score = in.score();\n    assert !Float.isNaN(score) : \"NaN score for in=\"+in;\n    return score;\n  }\n\n","sourceOld":"  @Override\n  public float score() throws IOException {\n    assert iterating();\n    final float score = in.score();\n    assert !Float.isNaN(score);\n    assert !Float.isNaN(score);\n    return score;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ab7a7b7d9840c6df78aaf2d36b9e8765da1069c","date":1433506692,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer#score().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer#score().mjava","sourceNew":"  @Override\n  public float score() throws IOException {\n    assert needsScores;\n    assert iterating();\n    final float score = in.score();\n    assert !Float.isNaN(score) : \"NaN score for in=\"+in;\n    return score;\n  }\n\n","sourceOld":"  @Override\n  public float score() throws IOException {\n    assert iterating();\n    final float score = in.score();\n    assert !Float.isNaN(score) : \"NaN score for in=\"+in;\n    return score;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb","date":1512565563,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer#score().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer#score().mjava","sourceNew":"  @Override\n  public float score() throws IOException {\n    assert needsScores;\n    assert iterating();\n    final float score = in.score();\n    assert !Float.isNaN(score) : \"NaN score for in=\"+in;\n    assert Float.compare(score, 0f) >= 0 : score;\n    return score;\n  }\n\n","sourceOld":"  @Override\n  public float score() throws IOException {\n    assert needsScores;\n    assert iterating();\n    final float score = in.score();\n    assert !Float.isNaN(score) : \"NaN score for in=\"+in;\n    return score;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer#score().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer#score().mjava","sourceNew":"  @Override\n  public float score() throws IOException {\n    assert scoreMode.needsScores();\n    assert iterating();\n    final float score = in.score();\n    assert !Float.isNaN(score) : \"NaN score for in=\"+in;\n    assert score <= maxScore();\n    assert Float.compare(score, 0f) >= 0 : score;\n    return score;\n  }\n\n","sourceOld":"  @Override\n  public float score() throws IOException {\n    assert needsScores;\n    assert iterating();\n    final float score = in.score();\n    assert !Float.isNaN(score) : \"NaN score for in=\"+in;\n    assert Float.compare(score, 0f) >= 0 : score;\n    return score;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer#score().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer#score().mjava","sourceNew":"  @Override\n  public float score() throws IOException {\n    assert scoreMode.needsScores();\n    assert iterating();\n    final float score = in.score();\n    assert !Float.isNaN(score) : \"NaN score for in=\"+in;\n    assert score <= maxScore();\n    assert Float.compare(score, 0f) >= 0 : score;\n    return score;\n  }\n\n","sourceOld":"  @Override\n  public float score() throws IOException {\n    assert needsScores;\n    assert iterating();\n    final float score = in.score();\n    assert !Float.isNaN(score) : \"NaN score for in=\"+in;\n    assert Float.compare(score, 0f) >= 0 : score;\n    return score;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"523cc6563c99a55527ef7993efc5413c6648852d","date":1518704038,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer#score().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer#score().mjava","sourceNew":"  @Override\n  public float score() throws IOException {\n    assert scoreMode.needsScores();\n    assert iterating() : state;\n    final float score = in.score();\n    assert !Float.isNaN(score) : \"NaN score for in=\"+in;\n    assert score <= getMaxScore(DocIdSetIterator.NO_MORE_DOCS);\n    assert Float.compare(score, 0f) >= 0 : score;\n    return score;\n  }\n\n","sourceOld":"  @Override\n  public float score() throws IOException {\n    assert scoreMode.needsScores();\n    assert iterating();\n    final float score = in.score();\n    assert !Float.isNaN(score) : \"NaN score for in=\"+in;\n    assert score <= maxScore();\n    assert Float.compare(score, 0f) >= 0 : score;\n    return score;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f25661e6b280f7f43061f1dfa718c09b0bf8266","date":1525275738,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer#score().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer#score().mjava","sourceNew":"  @Override\n  public float score() throws IOException {\n    assert scoreMode.needsScores();\n    assert iterating() : state;\n    final float score = in.score();\n    assert !Float.isNaN(score) : \"NaN score for in=\"+in;\n    assert lastShallowTarget == -1 || score <= getMaxScore(docID());\n    assert Float.compare(score, 0f) >= 0 : score;\n    return score;\n  }\n\n","sourceOld":"  @Override\n  public float score() throws IOException {\n    assert scoreMode.needsScores();\n    assert iterating() : state;\n    final float score = in.score();\n    assert !Float.isNaN(score) : \"NaN score for in=\"+in;\n    assert score <= getMaxScore(DocIdSetIterator.NO_MORE_DOCS);\n    assert Float.compare(score, 0f) >= 0 : score;\n    return score;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"66ad19eb69be5720d673695d38a1f5a0fed70c06":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["66ad19eb69be5720d673695d38a1f5a0fed70c06","b52f4d438f568f7beafda3cf347790a4bfe32928"],"784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb":["0ab7a7b7d9840c6df78aaf2d36b9e8765da1069c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ab7a7b7d9840c6df78aaf2d36b9e8765da1069c":["b52f4d438f568f7beafda3cf347790a4bfe32928"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb"],"523cc6563c99a55527ef7993efc5413c6648852d":["417142ff08fda9cf0b72d5133e63097a166c6458"],"b52f4d438f568f7beafda3cf347790a4bfe32928":["66ad19eb69be5720d673695d38a1f5a0fed70c06"],"9f25661e6b280f7f43061f1dfa718c09b0bf8266":["523cc6563c99a55527ef7993efc5413c6648852d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9f25661e6b280f7f43061f1dfa718c09b0bf8266"],"417142ff08fda9cf0b72d5133e63097a166c6458":["784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"66ad19eb69be5720d673695d38a1f5a0fed70c06":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b52f4d438f568f7beafda3cf347790a4bfe32928"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["66ad19eb69be5720d673695d38a1f5a0fed70c06"],"0ab7a7b7d9840c6df78aaf2d36b9e8765da1069c":["784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"b52f4d438f568f7beafda3cf347790a4bfe32928":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0ab7a7b7d9840c6df78aaf2d36b9e8765da1069c"],"523cc6563c99a55527ef7993efc5413c6648852d":["9f25661e6b280f7f43061f1dfa718c09b0bf8266"],"9f25661e6b280f7f43061f1dfa718c09b0bf8266":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"417142ff08fda9cf0b72d5133e63097a166c6458":["523cc6563c99a55527ef7993efc5413c6648852d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}