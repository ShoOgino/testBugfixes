{"path":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#accept(BytesRef).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#accept(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/AutomatonTermsEnum#accept(BytesRef).mjava","sourceNew":"  /**\n   * Returns true if the term matches the automaton. Also stashes away the term\n   * to assist with smart enumeration.\n   */\n  @Override\n  protected AcceptStatus accept(final BytesRef term) {\n    if (commonSuffixRef == null || StringHelper.endsWith(term, commonSuffixRef)) {\n      if (runAutomaton.run(term.bytes, term.offset, term.length))\n        return linear ? AcceptStatus.YES : AcceptStatus.YES_AND_SEEK;\n      else\n        return (linear && termComp.compare(term, linearUpperBound) < 0) ? \n            AcceptStatus.NO : AcceptStatus.NO_AND_SEEK;\n    } else {\n      return (linear && termComp.compare(term, linearUpperBound) < 0) ? \n          AcceptStatus.NO : AcceptStatus.NO_AND_SEEK;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns true if the term matches the automaton. Also stashes away the term\n   * to assist with smart enumeration.\n   */\n  @Override\n  protected AcceptStatus accept(final BytesRef term) {\n    if (commonSuffixRef == null || StringHelper.endsWith(term, commonSuffixRef)) {\n      if (runAutomaton.run(term.bytes, term.offset, term.length))\n        return linear ? AcceptStatus.YES : AcceptStatus.YES_AND_SEEK;\n      else\n        return (linear && termComp.compare(term, linearUpperBound) < 0) ? \n            AcceptStatus.NO : AcceptStatus.NO_AND_SEEK;\n    } else {\n      return (linear && termComp.compare(term, linearUpperBound) < 0) ? \n          AcceptStatus.NO : AcceptStatus.NO_AND_SEEK;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","date":1379624229,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#accept(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#accept(BytesRef).mjava","sourceNew":"  /**\n   * Returns true if the term matches the automaton. Also stashes away the term\n   * to assist with smart enumeration.\n   */\n  @Override\n  protected AcceptStatus accept(final BytesRef term) {\n    if (commonSuffixRef == null || StringHelper.endsWith(term, commonSuffixRef)) {\n      if (runAutomaton.run(term.bytes, term.offset, term.length))\n        return linear ? AcceptStatus.YES : AcceptStatus.YES_AND_SEEK;\n      else\n        return (linear && term.compareTo(linearUpperBound) < 0) ? \n            AcceptStatus.NO : AcceptStatus.NO_AND_SEEK;\n    } else {\n      return (linear && term.compareTo(linearUpperBound) < 0) ? \n          AcceptStatus.NO : AcceptStatus.NO_AND_SEEK;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns true if the term matches the automaton. Also stashes away the term\n   * to assist with smart enumeration.\n   */\n  @Override\n  protected AcceptStatus accept(final BytesRef term) {\n    if (commonSuffixRef == null || StringHelper.endsWith(term, commonSuffixRef)) {\n      if (runAutomaton.run(term.bytes, term.offset, term.length))\n        return linear ? AcceptStatus.YES : AcceptStatus.YES_AND_SEEK;\n      else\n        return (linear && termComp.compare(term, linearUpperBound) < 0) ? \n            AcceptStatus.NO : AcceptStatus.NO_AND_SEEK;\n    } else {\n      return (linear && termComp.compare(term, linearUpperBound) < 0) ? \n          AcceptStatus.NO : AcceptStatus.NO_AND_SEEK;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}