{"path":"src/java/org/apache/solr/request/BinaryResponseWriter.Resolver#writeDocList(DocList,JavaBinCodec).mjava","commits":[{"id":"18a1b51b47d1035bf90ecfc7d16c739fe983647a","date":1229928361,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/request/BinaryResponseWriter.Resolver#writeDocList(DocList,JavaBinCodec).mjava","pathOld":"src/java/org/apache/solr/request/BinaryResponseWriter.Resolver#writeDocList(DocList,NamedListCodec).mjava","sourceNew":"    public void writeDocList(DocList ids, JavaBinCodec codec) throws IOException {\n      codec.writeTag(JavaBinCodec.SOLRDOCLST);\n      List l = new ArrayList(3);\n      l.add((long) ids.matches());\n      l.add((long) ids.offset());\n      Float maxScore = null;\n      if (includeScore && ids.hasScores()) {\n        maxScore = ids.maxScore();\n      }\n      l.add(maxScore);\n      codec.writeArray(l);\n\n      int sz = ids.size();\n      codec.writeTag(JavaBinCodec.ARR, sz);\n\n      DocIterator iterator = ids.iterator();\n      for (int i = 0; i < sz; i++) {\n        int id = iterator.nextDoc();\n        Document doc = searcher.doc(id, returnFields);\n\n        SolrDocument sdoc = getDoc(doc);\n\n        if (includeScore && ids.hasScores()) {\n          sdoc.addField(\"score\", iterator.score());\n        }\n\n        codec.writeSolrDocument(sdoc);\n      }\n    }\n\n","sourceOld":"    public void writeDocList(DocList ids, NamedListCodec codec) throws IOException {\n      codec.writeTag(NamedListCodec.SOLRDOCLST);\n      List l = new ArrayList(3);\n      l.add((long) ids.matches());\n      l.add((long) ids.offset());\n      Float maxScore = null;\n      if (includeScore && ids.hasScores()) {\n        maxScore = ids.maxScore();\n      }\n      l.add(maxScore);\n      codec.writeArray(l);\n\n      int sz = ids.size();\n      codec.writeTag(NamedListCodec.ARR, sz);\n\n      DocIterator iterator = ids.iterator();\n      for (int i = 0; i < sz; i++) {\n        int id = iterator.nextDoc();\n        Document doc = searcher.doc(id, returnFields);\n\n        SolrDocument sdoc = getDoc(doc);\n\n        if (includeScore && ids.hasScores()) {\n          sdoc.addField(\"score\", iterator.score());\n        }\n\n        codec.writeSolrDocument(sdoc);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61d1ac2bc9e901a9771cfa04bcdb36477cee4ecf","date":1245648868,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/request/BinaryResponseWriter.Resolver#writeDocList(DocList,JavaBinCodec).mjava","pathOld":"src/java/org/apache/solr/request/BinaryResponseWriter.Resolver#writeDocList(DocList,JavaBinCodec).mjava","sourceNew":"    public void writeDocList(DocList ids, JavaBinCodec codec) throws IOException {\n      codec.writeTag(JavaBinCodec.SOLRDOCLST);\n      List l = new ArrayList(3);\n      l.add((long) ids.matches());\n      l.add((long) ids.offset());\n      Float maxScore = null;\n      if (includeScore && ids.hasScores()) {\n        maxScore = ids.maxScore();\n      }\n      l.add(maxScore);\n      codec.writeArray(l);\n\n      int sz = ids.size();\n      codec.writeTag(JavaBinCodec.ARR, sz);\n      if(searcher == null) searcher = solrQueryRequest.getSearcher();\n      if(schema == null) schema = solrQueryRequest.getSchema(); \n      DocIterator iterator = ids.iterator();\n      for (int i = 0; i < sz; i++) {\n        int id = iterator.nextDoc();\n        Document doc = searcher.doc(id, returnFields);\n\n        SolrDocument sdoc = getDoc(doc);\n\n        if (includeScore && ids.hasScores()) {\n          sdoc.addField(\"score\", iterator.score());\n        }\n\n        codec.writeSolrDocument(sdoc);\n      }\n    }\n\n","sourceOld":"    public void writeDocList(DocList ids, JavaBinCodec codec) throws IOException {\n      codec.writeTag(JavaBinCodec.SOLRDOCLST);\n      List l = new ArrayList(3);\n      l.add((long) ids.matches());\n      l.add((long) ids.offset());\n      Float maxScore = null;\n      if (includeScore && ids.hasScores()) {\n        maxScore = ids.maxScore();\n      }\n      l.add(maxScore);\n      codec.writeArray(l);\n\n      int sz = ids.size();\n      codec.writeTag(JavaBinCodec.ARR, sz);\n\n      DocIterator iterator = ids.iterator();\n      for (int i = 0; i < sz; i++) {\n        int id = iterator.nextDoc();\n        Document doc = searcher.doc(id, returnFields);\n\n        SolrDocument sdoc = getDoc(doc);\n\n        if (includeScore && ids.hasScores()) {\n          sdoc.addField(\"score\", iterator.score());\n        }\n\n        codec.writeSolrDocument(sdoc);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10b17ff7ad534c3b34a34944d80a87d217011d9c","date":1263262796,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeDocList(DocList,JavaBinCodec).mjava","pathOld":"src/java/org/apache/solr/request/BinaryResponseWriter.Resolver#writeDocList(DocList,JavaBinCodec).mjava","sourceNew":"    public void writeDocList(DocList ids, JavaBinCodec codec) throws IOException {\n      codec.writeTag(JavaBinCodec.SOLRDOCLST);\n      List l = new ArrayList(3);\n      l.add((long) ids.matches());\n      l.add((long) ids.offset());\n      Float maxScore = null;\n      if (includeScore && ids.hasScores()) {\n        maxScore = ids.maxScore();\n      }\n      l.add(maxScore);\n      codec.writeArray(l);\n\n      int sz = ids.size();\n      codec.writeTag(JavaBinCodec.ARR, sz);\n      if(searcher == null) searcher = solrQueryRequest.getSearcher();\n      if(schema == null) schema = solrQueryRequest.getSchema(); \n      DocIterator iterator = ids.iterator();\n      for (int i = 0; i < sz; i++) {\n        int id = iterator.nextDoc();\n        Document doc = searcher.doc(id, returnFields);\n\n        SolrDocument sdoc = getDoc(doc);\n\n        if (includeScore && ids.hasScores()) {\n          sdoc.addField(\"score\", iterator.score());\n        }\n\n        codec.writeSolrDocument(sdoc);\n      }\n    }\n\n","sourceOld":"    public void writeDocList(DocList ids, JavaBinCodec codec) throws IOException {\n      codec.writeTag(JavaBinCodec.SOLRDOCLST);\n      List l = new ArrayList(3);\n      l.add((long) ids.matches());\n      l.add((long) ids.offset());\n      Float maxScore = null;\n      if (includeScore && ids.hasScores()) {\n        maxScore = ids.maxScore();\n      }\n      l.add(maxScore);\n      codec.writeArray(l);\n\n      int sz = ids.size();\n      codec.writeTag(JavaBinCodec.ARR, sz);\n      if(searcher == null) searcher = solrQueryRequest.getSearcher();\n      if(schema == null) schema = solrQueryRequest.getSchema(); \n      DocIterator iterator = ids.iterator();\n      for (int i = 0; i < sz; i++) {\n        int id = iterator.nextDoc();\n        Document doc = searcher.doc(id, returnFields);\n\n        SolrDocument sdoc = getDoc(doc);\n\n        if (includeScore && ids.hasScores()) {\n          sdoc.addField(\"score\", iterator.score());\n        }\n\n        codec.writeSolrDocument(sdoc);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"61d1ac2bc9e901a9771cfa04bcdb36477cee4ecf":["18a1b51b47d1035bf90ecfc7d16c739fe983647a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"18a1b51b47d1035bf90ecfc7d16c739fe983647a":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"10b17ff7ad534c3b34a34944d80a87d217011d9c":["61d1ac2bc9e901a9771cfa04bcdb36477cee4ecf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"61d1ac2bc9e901a9771cfa04bcdb36477cee4ecf":["10b17ff7ad534c3b34a34944d80a87d217011d9c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["18a1b51b47d1035bf90ecfc7d16c739fe983647a"],"18a1b51b47d1035bf90ecfc7d16c739fe983647a":["61d1ac2bc9e901a9771cfa04bcdb36477cee4ecf"],"10b17ff7ad534c3b34a34944d80a87d217011d9c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["10b17ff7ad534c3b34a34944d80a87d217011d9c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}