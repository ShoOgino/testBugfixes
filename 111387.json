{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/custom/TestCustomAnalyzer#testNormalization().mjava","commits":[{"id":"ea4107f60b9f95623c16025c9c247412ff809092","date":1468333987,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/custom/TestCustomAnalyzer#testNormalization().mjava","pathOld":"/dev/null","sourceNew":"  public void testNormalization() throws IOException {\n    CustomAnalyzer analyzer1 = CustomAnalyzer.builder()\n        // none of these components are multi-term aware so they should not be applied\n        .withTokenizer(DummyTokenizerFactory.class, Collections.emptyMap())\n        .addCharFilter(DummyCharFilterFactory.class, Collections.emptyMap())\n        .addTokenFilter(DummyTokenFilterFactory.class, Collections.emptyMap())\n        .build();\n    assertEquals(new BytesRef(\"0À\"), analyzer1.normalize(\"dummy\", \"0À\"));\n\n    CustomAnalyzer analyzer2 = CustomAnalyzer.builder()\n        // these components are multi-term aware so they should be applied\n        .withTokenizer(DummyMultiTermAwareTokenizerFactory.class, Collections.emptyMap())\n        .addCharFilter(DummyMultiTermAwareCharFilterFactory.class, Collections.emptyMap())\n        .addTokenFilter(DummyMultiTermAwareTokenFilterFactory.class, Collections.emptyMap())\n        .build();\n    assertEquals(new BytesRef(\"2A\"), analyzer2.normalize(\"dummy\", \"0À\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/custom/TestCustomAnalyzer#testNormalization().mjava","pathOld":"/dev/null","sourceNew":"  public void testNormalization() throws IOException {\n    CustomAnalyzer analyzer1 = CustomAnalyzer.builder()\n        // none of these components are multi-term aware so they should not be applied\n        .withTokenizer(DummyTokenizerFactory.class, Collections.emptyMap())\n        .addCharFilter(DummyCharFilterFactory.class, Collections.emptyMap())\n        .addTokenFilter(DummyTokenFilterFactory.class, Collections.emptyMap())\n        .build();\n    assertEquals(new BytesRef(\"0À\"), analyzer1.normalize(\"dummy\", \"0À\"));\n\n    CustomAnalyzer analyzer2 = CustomAnalyzer.builder()\n        // these components are multi-term aware so they should be applied\n        .withTokenizer(DummyMultiTermAwareTokenizerFactory.class, Collections.emptyMap())\n        .addCharFilter(DummyMultiTermAwareCharFilterFactory.class, Collections.emptyMap())\n        .addTokenFilter(DummyMultiTermAwareTokenFilterFactory.class, Collections.emptyMap())\n        .build();\n    assertEquals(new BytesRef(\"2A\"), analyzer2.normalize(\"dummy\", \"0À\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e322d5186d76764c8638aa79f72fd42a5aed70ef","date":1542622177,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/custom/TestCustomAnalyzer#testNormalization().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/custom/TestCustomAnalyzer#testNormalization().mjava","sourceNew":"  public void testNormalization() throws IOException {\n    CustomAnalyzer analyzer1 = CustomAnalyzer.builder()\n        // none of these components are multi-term aware so they should not be applied\n        .withTokenizer(DummyTokenizerFactory.class, Collections.emptyMap())\n        .addCharFilter(DummyCharFilterFactory.class, Collections.emptyMap())\n        .addTokenFilter(DummyTokenFilterFactory.class, Collections.emptyMap())\n        .build();\n    assertEquals(new BytesRef(\"0À\"), analyzer1.normalize(\"dummy\", \"0À\"));\n\n    CustomAnalyzer analyzer2 = CustomAnalyzer.builder()\n        // this component in not multi-term aware so it should not be applied\n        .withTokenizer(DummyTokenizerFactory.class, Collections.emptyMap())\n        // these components are multi-term aware so they should be applied\n        .addCharFilter(DummyMultiTermAwareCharFilterFactory.class, Collections.emptyMap())\n        .addTokenFilter(DummyMultiTermAwareTokenFilterFactory.class, Collections.emptyMap())\n        .build();\n    assertEquals(new BytesRef(\"1A\"), analyzer2.normalize(\"dummy\", \"0À\"));\n  }\n\n","sourceOld":"  public void testNormalization() throws IOException {\n    CustomAnalyzer analyzer1 = CustomAnalyzer.builder()\n        // none of these components are multi-term aware so they should not be applied\n        .withTokenizer(DummyTokenizerFactory.class, Collections.emptyMap())\n        .addCharFilter(DummyCharFilterFactory.class, Collections.emptyMap())\n        .addTokenFilter(DummyTokenFilterFactory.class, Collections.emptyMap())\n        .build();\n    assertEquals(new BytesRef(\"0À\"), analyzer1.normalize(\"dummy\", \"0À\"));\n\n    CustomAnalyzer analyzer2 = CustomAnalyzer.builder()\n        // these components are multi-term aware so they should be applied\n        .withTokenizer(DummyMultiTermAwareTokenizerFactory.class, Collections.emptyMap())\n        .addCharFilter(DummyMultiTermAwareCharFilterFactory.class, Collections.emptyMap())\n        .addTokenFilter(DummyMultiTermAwareTokenFilterFactory.class, Collections.emptyMap())\n        .build();\n    assertEquals(new BytesRef(\"2A\"), analyzer2.normalize(\"dummy\", \"0À\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e322d5186d76764c8638aa79f72fd42a5aed70ef":["ea4107f60b9f95623c16025c9c247412ff809092"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ea4107f60b9f95623c16025c9c247412ff809092":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ea4107f60b9f95623c16025c9c247412ff809092"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e322d5186d76764c8638aa79f72fd42a5aed70ef"]},"commit2Childs":{"e322d5186d76764c8638aa79f72fd42a5aed70ef":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ea4107f60b9f95623c16025c9c247412ff809092","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"ea4107f60b9f95623c16025c9c247412ff809092":["e322d5186d76764c8638aa79f72fd42a5aed70ef","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}