{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory#WordDelimiterFilterFactory(Map[String,String]).mjava","commits":[{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory#WordDelimiterFilterFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory#init(Map[String,String]).mjava","sourceNew":"  /** Creates a new WordDelimiterFilterFactory */\n  public WordDelimiterFilterFactory(Map<String, String> args) {\n    super(args);\n    int flags = 0;\n    if (getInt(args, \"generateWordParts\", 1) != 0) {\n      flags |= GENERATE_WORD_PARTS;\n    }\n    if (getInt(args, \"generateNumberParts\", 1) != 0) {\n      flags |= GENERATE_NUMBER_PARTS;\n    }\n    if (getInt(args, \"catenateWords\", 0) != 0) {\n      flags |= CATENATE_WORDS;\n    }\n    if (getInt(args, \"catenateNumbers\", 0) != 0) {\n      flags |= CATENATE_NUMBERS;\n    }\n    if (getInt(args, \"catenateAll\", 0) != 0) {\n      flags |= CATENATE_ALL;\n    }\n    if (getInt(args, \"splitOnCaseChange\", 1) != 0) {\n      flags |= SPLIT_ON_CASE_CHANGE;\n    }\n    if (getInt(args, \"splitOnNumerics\", 1) != 0) {\n      flags |= SPLIT_ON_NUMERICS;\n    }\n    if (getInt(args, \"preserveOriginal\", 0) != 0) {\n      flags |= PRESERVE_ORIGINAL;\n    }\n    if (getInt(args, \"stemEnglishPossessive\", 1) != 0) {\n      flags |= STEM_ENGLISH_POSSESSIVE;\n    }\n    wordFiles = args.remove(PROTECTED_TOKENS);\n    types = args.remove(TYPES);\n    this.flags = flags;\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    if (getInt(\"generateWordParts\", 1) != 0) {\n      flags |= GENERATE_WORD_PARTS;\n    }\n    if (getInt(\"generateNumberParts\", 1) != 0) {\n      flags |= GENERATE_NUMBER_PARTS;\n    }\n    if (getInt(\"catenateWords\", 0) != 0) {\n      flags |= CATENATE_WORDS;\n    }\n    if (getInt(\"catenateNumbers\", 0) != 0) {\n      flags |= CATENATE_NUMBERS;\n    }\n    if (getInt(\"catenateAll\", 0) != 0) {\n      flags |= CATENATE_ALL;\n    }\n    if (getInt(\"splitOnCaseChange\", 1) != 0) {\n      flags |= SPLIT_ON_CASE_CHANGE;\n    }\n    if (getInt(\"splitOnNumerics\", 1) != 0) {\n      flags |= SPLIT_ON_NUMERICS;\n    }\n    if (getInt(\"preserveOriginal\", 0) != 0) {\n      flags |= PRESERVE_ORIGINAL;\n    }\n    if (getInt(\"stemEnglishPossessive\", 1) != 0) {\n      flags |= STEM_ENGLISH_POSSESSIVE;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dcae30df9fe9300569835aef42ec65802c7c0afb","date":1364859933,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory#WordDelimiterFilterFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory#WordDelimiterFilterFactory(Map[String,String]).mjava","sourceNew":"  /** Creates a new WordDelimiterFilterFactory */\n  public WordDelimiterFilterFactory(Map<String, String> args) {\n    super(args);\n    int flags = 0;\n    if (getInt(args, \"generateWordParts\", 1) != 0) {\n      flags |= GENERATE_WORD_PARTS;\n    }\n    if (getInt(args, \"generateNumberParts\", 1) != 0) {\n      flags |= GENERATE_NUMBER_PARTS;\n    }\n    if (getInt(args, \"catenateWords\", 0) != 0) {\n      flags |= CATENATE_WORDS;\n    }\n    if (getInt(args, \"catenateNumbers\", 0) != 0) {\n      flags |= CATENATE_NUMBERS;\n    }\n    if (getInt(args, \"catenateAll\", 0) != 0) {\n      flags |= CATENATE_ALL;\n    }\n    if (getInt(args, \"splitOnCaseChange\", 1) != 0) {\n      flags |= SPLIT_ON_CASE_CHANGE;\n    }\n    if (getInt(args, \"splitOnNumerics\", 1) != 0) {\n      flags |= SPLIT_ON_NUMERICS;\n    }\n    if (getInt(args, \"preserveOriginal\", 0) != 0) {\n      flags |= PRESERVE_ORIGINAL;\n    }\n    if (getInt(args, \"stemEnglishPossessive\", 1) != 0) {\n      flags |= STEM_ENGLISH_POSSESSIVE;\n    }\n    wordFiles = get(args, PROTECTED_TOKENS);\n    types = get(args, TYPES);\n    this.flags = flags;\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  /** Creates a new WordDelimiterFilterFactory */\n  public WordDelimiterFilterFactory(Map<String, String> args) {\n    super(args);\n    int flags = 0;\n    if (getInt(args, \"generateWordParts\", 1) != 0) {\n      flags |= GENERATE_WORD_PARTS;\n    }\n    if (getInt(args, \"generateNumberParts\", 1) != 0) {\n      flags |= GENERATE_NUMBER_PARTS;\n    }\n    if (getInt(args, \"catenateWords\", 0) != 0) {\n      flags |= CATENATE_WORDS;\n    }\n    if (getInt(args, \"catenateNumbers\", 0) != 0) {\n      flags |= CATENATE_NUMBERS;\n    }\n    if (getInt(args, \"catenateAll\", 0) != 0) {\n      flags |= CATENATE_ALL;\n    }\n    if (getInt(args, \"splitOnCaseChange\", 1) != 0) {\n      flags |= SPLIT_ON_CASE_CHANGE;\n    }\n    if (getInt(args, \"splitOnNumerics\", 1) != 0) {\n      flags |= SPLIT_ON_NUMERICS;\n    }\n    if (getInt(args, \"preserveOriginal\", 0) != 0) {\n      flags |= PRESERVE_ORIGINAL;\n    }\n    if (getInt(args, \"stemEnglishPossessive\", 1) != 0) {\n      flags |= STEM_ENGLISH_POSSESSIVE;\n    }\n    wordFiles = args.remove(PROTECTED_TOKENS);\n    types = args.remove(TYPES);\n    this.flags = flags;\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c85fa43e6918808743daa7847ba0264373af687f","date":1395166336,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory#WordDelimiterFilterFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory#WordDelimiterFilterFactory(Map[String,String]).mjava","sourceNew":"  /** Creates a new WordDelimiterFilterFactory */\n  public WordDelimiterFilterFactory(Map<String, String> args) {\n    super(args);\n    assureMatchVersion();\n    int flags = 0;\n    if (getInt(args, \"generateWordParts\", 1) != 0) {\n      flags |= GENERATE_WORD_PARTS;\n    }\n    if (getInt(args, \"generateNumberParts\", 1) != 0) {\n      flags |= GENERATE_NUMBER_PARTS;\n    }\n    if (getInt(args, \"catenateWords\", 0) != 0) {\n      flags |= CATENATE_WORDS;\n    }\n    if (getInt(args, \"catenateNumbers\", 0) != 0) {\n      flags |= CATENATE_NUMBERS;\n    }\n    if (getInt(args, \"catenateAll\", 0) != 0) {\n      flags |= CATENATE_ALL;\n    }\n    if (getInt(args, \"splitOnCaseChange\", 1) != 0) {\n      flags |= SPLIT_ON_CASE_CHANGE;\n    }\n    if (getInt(args, \"splitOnNumerics\", 1) != 0) {\n      flags |= SPLIT_ON_NUMERICS;\n    }\n    if (getInt(args, \"preserveOriginal\", 0) != 0) {\n      flags |= PRESERVE_ORIGINAL;\n    }\n    if (getInt(args, \"stemEnglishPossessive\", 1) != 0) {\n      flags |= STEM_ENGLISH_POSSESSIVE;\n    }\n    wordFiles = get(args, PROTECTED_TOKENS);\n    types = get(args, TYPES);\n    this.flags = flags;\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  /** Creates a new WordDelimiterFilterFactory */\n  public WordDelimiterFilterFactory(Map<String, String> args) {\n    super(args);\n    int flags = 0;\n    if (getInt(args, \"generateWordParts\", 1) != 0) {\n      flags |= GENERATE_WORD_PARTS;\n    }\n    if (getInt(args, \"generateNumberParts\", 1) != 0) {\n      flags |= GENERATE_NUMBER_PARTS;\n    }\n    if (getInt(args, \"catenateWords\", 0) != 0) {\n      flags |= CATENATE_WORDS;\n    }\n    if (getInt(args, \"catenateNumbers\", 0) != 0) {\n      flags |= CATENATE_NUMBERS;\n    }\n    if (getInt(args, \"catenateAll\", 0) != 0) {\n      flags |= CATENATE_ALL;\n    }\n    if (getInt(args, \"splitOnCaseChange\", 1) != 0) {\n      flags |= SPLIT_ON_CASE_CHANGE;\n    }\n    if (getInt(args, \"splitOnNumerics\", 1) != 0) {\n      flags |= SPLIT_ON_NUMERICS;\n    }\n    if (getInt(args, \"preserveOriginal\", 0) != 0) {\n      flags |= PRESERVE_ORIGINAL;\n    }\n    if (getInt(args, \"stemEnglishPossessive\", 1) != 0) {\n      flags |= STEM_ENGLISH_POSSESSIVE;\n    }\n    wordFiles = get(args, PROTECTED_TOKENS);\n    types = get(args, TYPES);\n    this.flags = flags;\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":null,"bugIntro":["623b5245fbd9d5af9f458826ba9ed3d6212db24d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"623b5245fbd9d5af9f458826ba9ed3d6212db24d","date":1421078865,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory#WordDelimiterFilterFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory#WordDelimiterFilterFactory(Map[String,String]).mjava","sourceNew":"  /** Creates a new WordDelimiterFilterFactory */\n  public WordDelimiterFilterFactory(Map<String, String> args) {\n    super(args);\n    int flags = 0;\n    if (getInt(args, \"generateWordParts\", 1) != 0) {\n      flags |= GENERATE_WORD_PARTS;\n    }\n    if (getInt(args, \"generateNumberParts\", 1) != 0) {\n      flags |= GENERATE_NUMBER_PARTS;\n    }\n    if (getInt(args, \"catenateWords\", 0) != 0) {\n      flags |= CATENATE_WORDS;\n    }\n    if (getInt(args, \"catenateNumbers\", 0) != 0) {\n      flags |= CATENATE_NUMBERS;\n    }\n    if (getInt(args, \"catenateAll\", 0) != 0) {\n      flags |= CATENATE_ALL;\n    }\n    if (getInt(args, \"splitOnCaseChange\", 1) != 0) {\n      flags |= SPLIT_ON_CASE_CHANGE;\n    }\n    if (getInt(args, \"splitOnNumerics\", 1) != 0) {\n      flags |= SPLIT_ON_NUMERICS;\n    }\n    if (getInt(args, \"preserveOriginal\", 0) != 0) {\n      flags |= PRESERVE_ORIGINAL;\n    }\n    if (getInt(args, \"stemEnglishPossessive\", 1) != 0) {\n      flags |= STEM_ENGLISH_POSSESSIVE;\n    }\n    wordFiles = get(args, PROTECTED_TOKENS);\n    types = get(args, TYPES);\n    this.flags = flags;\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  /** Creates a new WordDelimiterFilterFactory */\n  public WordDelimiterFilterFactory(Map<String, String> args) {\n    super(args);\n    assureMatchVersion();\n    int flags = 0;\n    if (getInt(args, \"generateWordParts\", 1) != 0) {\n      flags |= GENERATE_WORD_PARTS;\n    }\n    if (getInt(args, \"generateNumberParts\", 1) != 0) {\n      flags |= GENERATE_NUMBER_PARTS;\n    }\n    if (getInt(args, \"catenateWords\", 0) != 0) {\n      flags |= CATENATE_WORDS;\n    }\n    if (getInt(args, \"catenateNumbers\", 0) != 0) {\n      flags |= CATENATE_NUMBERS;\n    }\n    if (getInt(args, \"catenateAll\", 0) != 0) {\n      flags |= CATENATE_ALL;\n    }\n    if (getInt(args, \"splitOnCaseChange\", 1) != 0) {\n      flags |= SPLIT_ON_CASE_CHANGE;\n    }\n    if (getInt(args, \"splitOnNumerics\", 1) != 0) {\n      flags |= SPLIT_ON_NUMERICS;\n    }\n    if (getInt(args, \"preserveOriginal\", 0) != 0) {\n      flags |= PRESERVE_ORIGINAL;\n    }\n    if (getInt(args, \"stemEnglishPossessive\", 1) != 0) {\n      flags |= STEM_ENGLISH_POSSESSIVE;\n    }\n    wordFiles = get(args, PROTECTED_TOKENS);\n    types = get(args, TYPES);\n    this.flags = flags;\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":["c85fa43e6918808743daa7847ba0264373af687f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory#WordDelimiterFilterFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory#WordDelimiterFilterFactory(Map[String,String]).mjava","sourceNew":"  /** Creates a new WordDelimiterFilterFactory */\n  public WordDelimiterFilterFactory(Map<String, String> args) {\n    super(args);\n    int flags = 0;\n    if (getInt(args, \"generateWordParts\", 1) != 0) {\n      flags |= org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter.GENERATE_WORD_PARTS;\n    }\n    if (getInt(args, \"generateNumberParts\", 1) != 0) {\n      flags |= org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter.GENERATE_NUMBER_PARTS;\n    }\n    if (getInt(args, \"catenateWords\", 0) != 0) {\n      flags |= org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter.CATENATE_WORDS;\n    }\n    if (getInt(args, \"catenateNumbers\", 0) != 0) {\n      flags |= org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter.CATENATE_NUMBERS;\n    }\n    if (getInt(args, \"catenateAll\", 0) != 0) {\n      flags |= org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter.CATENATE_ALL;\n    }\n    if (getInt(args, \"splitOnCaseChange\", 1) != 0) {\n      flags |= org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter.SPLIT_ON_CASE_CHANGE;\n    }\n    if (getInt(args, \"splitOnNumerics\", 1) != 0) {\n      flags |= org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter.SPLIT_ON_NUMERICS;\n    }\n    if (getInt(args, \"preserveOriginal\", 0) != 0) {\n      flags |= org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter.PRESERVE_ORIGINAL;\n    }\n    if (getInt(args, \"stemEnglishPossessive\", 1) != 0) {\n      flags |= org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter.STEM_ENGLISH_POSSESSIVE;\n    }\n    wordFiles = get(args, PROTECTED_TOKENS);\n    types = get(args, TYPES);\n    this.flags = flags;\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  /** Creates a new WordDelimiterFilterFactory */\n  public WordDelimiterFilterFactory(Map<String, String> args) {\n    super(args);\n    int flags = 0;\n    if (getInt(args, \"generateWordParts\", 1) != 0) {\n      flags |= GENERATE_WORD_PARTS;\n    }\n    if (getInt(args, \"generateNumberParts\", 1) != 0) {\n      flags |= GENERATE_NUMBER_PARTS;\n    }\n    if (getInt(args, \"catenateWords\", 0) != 0) {\n      flags |= CATENATE_WORDS;\n    }\n    if (getInt(args, \"catenateNumbers\", 0) != 0) {\n      flags |= CATENATE_NUMBERS;\n    }\n    if (getInt(args, \"catenateAll\", 0) != 0) {\n      flags |= CATENATE_ALL;\n    }\n    if (getInt(args, \"splitOnCaseChange\", 1) != 0) {\n      flags |= SPLIT_ON_CASE_CHANGE;\n    }\n    if (getInt(args, \"splitOnNumerics\", 1) != 0) {\n      flags |= SPLIT_ON_NUMERICS;\n    }\n    if (getInt(args, \"preserveOriginal\", 0) != 0) {\n      flags |= PRESERVE_ORIGINAL;\n    }\n    if (getInt(args, \"stemEnglishPossessive\", 1) != 0) {\n      flags |= STEM_ENGLISH_POSSESSIVE;\n    }\n    wordFiles = get(args, PROTECTED_TOKENS);\n    types = get(args, TYPES);\n    this.flags = flags;\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory#WordDelimiterFilterFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory#WordDelimiterFilterFactory(Map[String,String]).mjava","sourceNew":"  /** Creates a new WordDelimiterFilterFactory */\n  public WordDelimiterFilterFactory(Map<String, String> args) {\n    super(args);\n    int flags = 0;\n    if (getInt(args, \"generateWordParts\", 1) != 0) {\n      flags |= GENERATE_WORD_PARTS;\n    }\n    if (getInt(args, \"generateNumberParts\", 1) != 0) {\n      flags |= GENERATE_NUMBER_PARTS;\n    }\n    if (getInt(args, \"catenateWords\", 0) != 0) {\n      flags |= CATENATE_WORDS;\n    }\n    if (getInt(args, \"catenateNumbers\", 0) != 0) {\n      flags |= CATENATE_NUMBERS;\n    }\n    if (getInt(args, \"catenateAll\", 0) != 0) {\n      flags |= CATENATE_ALL;\n    }\n    if (getInt(args, \"splitOnCaseChange\", 1) != 0) {\n      flags |= SPLIT_ON_CASE_CHANGE;\n    }\n    if (getInt(args, \"splitOnNumerics\", 1) != 0) {\n      flags |= SPLIT_ON_NUMERICS;\n    }\n    if (getInt(args, \"preserveOriginal\", 0) != 0) {\n      flags |= PRESERVE_ORIGINAL;\n    }\n    if (getInt(args, \"stemEnglishPossessive\", 1) != 0) {\n      flags |= STEM_ENGLISH_POSSESSIVE;\n    }\n    wordFiles = get(args, PROTECTED_TOKENS);\n    types = get(args, TYPES);\n    this.flags = flags;\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  /** Creates a new WordDelimiterFilterFactory */\n  public WordDelimiterFilterFactory(Map<String, String> args) {\n    super(args);\n    int flags = 0;\n    if (getInt(args, \"generateWordParts\", 1) != 0) {\n      flags |= org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter.GENERATE_WORD_PARTS;\n    }\n    if (getInt(args, \"generateNumberParts\", 1) != 0) {\n      flags |= org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter.GENERATE_NUMBER_PARTS;\n    }\n    if (getInt(args, \"catenateWords\", 0) != 0) {\n      flags |= org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter.CATENATE_WORDS;\n    }\n    if (getInt(args, \"catenateNumbers\", 0) != 0) {\n      flags |= org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter.CATENATE_NUMBERS;\n    }\n    if (getInt(args, \"catenateAll\", 0) != 0) {\n      flags |= org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter.CATENATE_ALL;\n    }\n    if (getInt(args, \"splitOnCaseChange\", 1) != 0) {\n      flags |= org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter.SPLIT_ON_CASE_CHANGE;\n    }\n    if (getInt(args, \"splitOnNumerics\", 1) != 0) {\n      flags |= org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter.SPLIT_ON_NUMERICS;\n    }\n    if (getInt(args, \"preserveOriginal\", 0) != 0) {\n      flags |= org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter.PRESERVE_ORIGINAL;\n    }\n    if (getInt(args, \"stemEnglishPossessive\", 1) != 0) {\n      flags |= org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter.STEM_ENGLISH_POSSESSIVE;\n    }\n    wordFiles = get(args, PROTECTED_TOKENS);\n    types = get(args, TYPES);\n    this.flags = flags;\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["623b5245fbd9d5af9f458826ba9ed3d6212db24d"],"dcae30df9fe9300569835aef42ec65802c7c0afb":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"623b5245fbd9d5af9f458826ba9ed3d6212db24d":["c85fa43e6918808743daa7847ba0264373af687f"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c85fa43e6918808743daa7847ba0264373af687f":["dcae30df9fe9300569835aef42ec65802c7c0afb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"]},"commit2Childs":{"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"dcae30df9fe9300569835aef42ec65802c7c0afb":["c85fa43e6918808743daa7847ba0264373af687f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"623b5245fbd9d5af9f458826ba9ed3d6212db24d":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["dcae30df9fe9300569835aef42ec65802c7c0afb"],"c85fa43e6918808743daa7847ba0264373af687f":["623b5245fbd9d5af9f458826ba9ed3d6212db24d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}