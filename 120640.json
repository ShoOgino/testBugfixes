{"path":"lucene/core/src/java/org/apache/lucene/util/packed/AbstractPagedMutable#resize(long).mjava","commits":[{"id":"c8ee441d3e61e4669e10566a8d028a41333642b7","date":1371579547,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/AbstractPagedMutable#resize(long).mjava","pathOld":"/dev/null","sourceNew":"  /** Create a new copy of size <code>newSize</code> based on the content of\n   *  this buffer. This method is much more efficient than creating a new\n   *  instance and copying values one by one. */\n  public final T resize(long newSize) {\n    final T copy = newUnfilledCopy(newSize);\n    final int numCommonPages = Math.min(copy.subMutables.length, subMutables.length);\n    final long[] copyBuffer = new long[1024];\n    for (int i = 0; i < copy.subMutables.length; ++i) {\n      final int valueCount = i == copy.subMutables.length - 1 ? lastPageSize(newSize) : pageSize();\n      final int bpv = i < numCommonPages ? subMutables[i].getBitsPerValue() : this.bitsPerValue;\n      copy.subMutables[i] = newMutable(valueCount, bpv);\n      if (i < numCommonPages) {\n        final int copyLength = Math.min(valueCount, subMutables[i].size());\n        PackedInts.copy(subMutables[i], 0, copy.subMutables[i], 0, copyLength, copyBuffer);\n      }\n    }\n    return copy;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/AbstractPagedMutable#resize(long).mjava","pathOld":"/dev/null","sourceNew":"  /** Create a new copy of size <code>newSize</code> based on the content of\n   *  this buffer. This method is much more efficient than creating a new\n   *  instance and copying values one by one. */\n  public final T resize(long newSize) {\n    final T copy = newUnfilledCopy(newSize);\n    final int numCommonPages = Math.min(copy.subMutables.length, subMutables.length);\n    final long[] copyBuffer = new long[1024];\n    for (int i = 0; i < copy.subMutables.length; ++i) {\n      final int valueCount = i == copy.subMutables.length - 1 ? lastPageSize(newSize) : pageSize();\n      final int bpv = i < numCommonPages ? subMutables[i].getBitsPerValue() : this.bitsPerValue;\n      copy.subMutables[i] = newMutable(valueCount, bpv);\n      if (i < numCommonPages) {\n        final int copyLength = Math.min(valueCount, subMutables[i].size());\n        PackedInts.copy(subMutables[i], 0, copy.subMutables[i], 0, copyLength, copyBuffer);\n      }\n    }\n    return copy;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8ee441d3e61e4669e10566a8d028a41333642b7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8ee441d3e61e4669e10566a8d028a41333642b7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c8ee441d3e61e4669e10566a8d028a41333642b7"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","c8ee441d3e61e4669e10566a8d028a41333642b7"],"c8ee441d3e61e4669e10566a8d028a41333642b7":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}