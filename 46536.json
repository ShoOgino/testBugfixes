{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/QuadPrefixTree#build(double,double,int,List[Cell],StringBuilder,Shape,int).mjava","commits":[{"id":"8259c159da2de2e8528524fb76b244b46cbded59","date":1364478249,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/QuadPrefixTree#build(double,double,int,List[Cell],StringBuilder,Shape,int).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/QuadPrefixTree#build(double,double,int,List[Node],StringBuilder,Shape,int).mjava","sourceNew":"  private void build(\n      double x,\n      double y,\n      int level,\n      List<Cell> matches,\n      StringBuilder str,\n      Shape shape,\n      int maxLevel) {\n    assert str.length() == level;\n    double w = levelW[level] / 2;\n    double h = levelH[level] / 2;\n\n    // Z-Order\n    // http://en.wikipedia.org/wiki/Z-order_%28curve%29\n    checkBattenberg('A', x - w, y + h, level, matches, str, shape, maxLevel);\n    checkBattenberg('B', x + w, y + h, level, matches, str, shape, maxLevel);\n    checkBattenberg('C', x - w, y - h, level, matches, str, shape, maxLevel);\n    checkBattenberg('D', x + w, y - h, level, matches, str, shape, maxLevel);\n\n    // possibly consider hilbert curve\n    // http://en.wikipedia.org/wiki/Hilbert_curve\n    // http://blog.notdot.net/2009/11/Damn-Cool-Algorithms-Spatial-indexing-with-Quadtrees-and-Hilbert-Curves\n    // if we actually use the range property in the query, this could be useful\n  }\n\n","sourceOld":"  private void build(\n      double x,\n      double y,\n      int level,\n      List<Node> matches,\n      StringBuilder str,\n      Shape shape,\n      int maxLevel) {\n    assert str.length() == level;\n    double w = levelW[level] / 2;\n    double h = levelH[level] / 2;\n\n    // Z-Order\n    // http://en.wikipedia.org/wiki/Z-order_%28curve%29\n    checkBattenberg('A', x - w, y + h, level, matches, str, shape, maxLevel);\n    checkBattenberg('B', x + w, y + h, level, matches, str, shape, maxLevel);\n    checkBattenberg('C', x - w, y - h, level, matches, str, shape, maxLevel);\n    checkBattenberg('D', x + w, y - h, level, matches, str, shape, maxLevel);\n\n    // possibly consider hilbert curve\n    // http://en.wikipedia.org/wiki/Hilbert_curve\n    // http://blog.notdot.net/2009/11/Damn-Cool-Algorithms-Spatial-indexing-with-Quadtrees-and-Hilbert-Curves\n    // if we actually use the range property in the query, this could be useful\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4de14be4bd1b857ba37ca138b61c4661c6d1bed3","date":1396628861,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/QuadPrefixTree#build(double,double,int,List[Cell],BytesRef,Shape,int).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/QuadPrefixTree#build(double,double,int,List[Cell],StringBuilder,Shape,int).mjava","sourceNew":"  private void build(\n      double x,\n      double y,\n      int level,\n      List<Cell> matches,\n      BytesRef str,\n      Shape shape,\n      int maxLevel) {\n    assert str.length == level;\n    double w = levelW[level] / 2;\n    double h = levelH[level] / 2;\n\n    // Z-Order\n    // http://en.wikipedia.org/wiki/Z-order_%28curve%29\n    checkBattenberg('A', x - w, y + h, level, matches, str, shape, maxLevel);\n    checkBattenberg('B', x + w, y + h, level, matches, str, shape, maxLevel);\n    checkBattenberg('C', x - w, y - h, level, matches, str, shape, maxLevel);\n    checkBattenberg('D', x + w, y - h, level, matches, str, shape, maxLevel);\n\n    // possibly consider hilbert curve\n    // http://en.wikipedia.org/wiki/Hilbert_curve\n    // http://blog.notdot.net/2009/11/Damn-Cool-Algorithms-Spatial-indexing-with-Quadtrees-and-Hilbert-Curves\n    // if we actually use the range property in the query, this could be useful\n  }\n\n","sourceOld":"  private void build(\n      double x,\n      double y,\n      int level,\n      List<Cell> matches,\n      StringBuilder str,\n      Shape shape,\n      int maxLevel) {\n    assert str.length() == level;\n    double w = levelW[level] / 2;\n    double h = levelH[level] / 2;\n\n    // Z-Order\n    // http://en.wikipedia.org/wiki/Z-order_%28curve%29\n    checkBattenberg('A', x - w, y + h, level, matches, str, shape, maxLevel);\n    checkBattenberg('B', x + w, y + h, level, matches, str, shape, maxLevel);\n    checkBattenberg('C', x - w, y - h, level, matches, str, shape, maxLevel);\n    checkBattenberg('D', x + w, y - h, level, matches, str, shape, maxLevel);\n\n    // possibly consider hilbert curve\n    // http://en.wikipedia.org/wiki/Hilbert_curve\n    // http://blog.notdot.net/2009/11/Damn-Cool-Algorithms-Spatial-indexing-with-Quadtrees-and-Hilbert-Curves\n    // if we actually use the range property in the query, this could be useful\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":5,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/QuadPrefixTree#build(double,double,int,List[Cell],BytesRef,Shape,int).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/QuadPrefixTree#build(double,double,int,List[Cell],StringBuilder,Shape,int).mjava","sourceNew":"  private void build(\n      double x,\n      double y,\n      int level,\n      List<Cell> matches,\n      BytesRef str,\n      Shape shape,\n      int maxLevel) {\n    assert str.length == level;\n    double w = levelW[level] / 2;\n    double h = levelH[level] / 2;\n\n    // Z-Order\n    // http://en.wikipedia.org/wiki/Z-order_%28curve%29\n    checkBattenberg('A', x - w, y + h, level, matches, str, shape, maxLevel);\n    checkBattenberg('B', x + w, y + h, level, matches, str, shape, maxLevel);\n    checkBattenberg('C', x - w, y - h, level, matches, str, shape, maxLevel);\n    checkBattenberg('D', x + w, y - h, level, matches, str, shape, maxLevel);\n\n    // possibly consider hilbert curve\n    // http://en.wikipedia.org/wiki/Hilbert_curve\n    // http://blog.notdot.net/2009/11/Damn-Cool-Algorithms-Spatial-indexing-with-Quadtrees-and-Hilbert-Curves\n    // if we actually use the range property in the query, this could be useful\n  }\n\n","sourceOld":"  private void build(\n      double x,\n      double y,\n      int level,\n      List<Cell> matches,\n      StringBuilder str,\n      Shape shape,\n      int maxLevel) {\n    assert str.length() == level;\n    double w = levelW[level] / 2;\n    double h = levelH[level] / 2;\n\n    // Z-Order\n    // http://en.wikipedia.org/wiki/Z-order_%28curve%29\n    checkBattenberg('A', x - w, y + h, level, matches, str, shape, maxLevel);\n    checkBattenberg('B', x + w, y + h, level, matches, str, shape, maxLevel);\n    checkBattenberg('C', x - w, y - h, level, matches, str, shape, maxLevel);\n    checkBattenberg('D', x + w, y - h, level, matches, str, shape, maxLevel);\n\n    // possibly consider hilbert curve\n    // http://en.wikipedia.org/wiki/Hilbert_curve\n    // http://blog.notdot.net/2009/11/Damn-Cool-Algorithms-Spatial-indexing-with-Quadtrees-and-Hilbert-Curves\n    // if we actually use the range property in the query, this could be useful\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["8259c159da2de2e8528524fb76b244b46cbded59","4de14be4bd1b857ba37ca138b61c4661c6d1bed3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4de14be4bd1b857ba37ca138b61c4661c6d1bed3":["8259c159da2de2e8528524fb76b244b46cbded59"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4de14be4bd1b857ba37ca138b61c4661c6d1bed3"],"8259c159da2de2e8528524fb76b244b46cbded59":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8259c159da2de2e8528524fb76b244b46cbded59"],"4de14be4bd1b857ba37ca138b61c4661c6d1bed3":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8259c159da2de2e8528524fb76b244b46cbded59":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","4de14be4bd1b857ba37ca138b61c4661c6d1bed3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}