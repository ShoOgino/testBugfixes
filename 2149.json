{"path":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","commits":[{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl#nextTerm(FieldInfo,BlockTermState).mjava","sourceNew":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    //System.out.println(\"PR nextTerm\");\n    PulsingTermState termState = (PulsingTermState) _termState;\n\n    // if we have positions, its total TF, otherwise its computed based on docFreq.\n    long count = fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS ? termState.totalTermFreq : termState.docFreq;\n    //System.out.println(\"  count=\" + count + \" threshold=\" + maxPositions);\n\n    if (count <= maxPositions) {\n\n      // Inlined into terms dict -- just read the byte[] blob in,\n      // but don't decode it now (we only decode when a DocsEnum\n      // or D&PEnum is pulled):\n      termState.postingsSize = termState.inlinedBytesReader.readVInt();\n      if (termState.postings == null || termState.postings.length < termState.postingsSize) {\n        termState.postings = new byte[ArrayUtil.oversize(termState.postingsSize, 1)];\n      }\n      // TODO: sort of silly to copy from one big byte[]\n      // (the blob holding all inlined terms' blobs for\n      // current term block) into another byte[] (just the\n      // blob for this term)...\n      termState.inlinedBytesReader.readBytes(termState.postings, 0, termState.postingsSize);\n      //System.out.println(\"  inlined bytes=\" + termState.postingsSize);\n    } else {\n      //System.out.println(\"  not inlined\");\n      termState.postingsSize = -1;\n      // TODO: should we do full copyFrom?  much heavier...?\n      termState.wrappedTermState.docFreq = termState.docFreq;\n      termState.wrappedTermState.totalTermFreq = termState.totalTermFreq;\n      wrappedPostingsReader.nextTerm(fieldInfo, termState.wrappedTermState);\n      termState.wrappedTermState.termBlockOrd++;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    //System.out.println(\"PR nextTerm\");\n    PulsingTermState termState = (PulsingTermState) _termState;\n\n    // if we have positions, its total TF, otherwise its computed based on docFreq.\n    long count = fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS ? termState.totalTermFreq : termState.docFreq;\n    //System.out.println(\"  count=\" + count + \" threshold=\" + maxPositions);\n\n    if (count <= maxPositions) {\n      //System.out.println(\"  inlined pos=\" + termState.inlinedBytesReader.getPosition());\n\n      // Inlined into terms dict -- just read the byte[] blob in,\n      // but don't decode it now (we only decode when a DocsEnum\n      // or D&PEnum is pulled):\n      termState.postingsSize = termState.inlinedBytesReader.readVInt();\n      if (termState.postings == null || termState.postings.length < termState.postingsSize) {\n        termState.postings = new byte[ArrayUtil.oversize(termState.postingsSize, 1)];\n      }\n      // TODO: sort of silly to copy from one big byte[]\n      // (the blob holding all inlined terms' blobs for\n      // current term block) into another byte[] (just the\n      // blob for this term)...\n      termState.inlinedBytesReader.readBytes(termState.postings, 0, termState.postingsSize);\n    } else {\n      //System.out.println(\"  not inlined\");\n      termState.postingsSize = -1;\n      // TODO: should we do full copyFrom?  much heavier...?\n      termState.wrappedTermState.docFreq = termState.docFreq;\n      termState.wrappedTermState.totalTermFreq = termState.totalTermFreq;\n      wrappedPostingsReader.nextTerm(fieldInfo, termState.wrappedTermState);\n      termState.wrappedTermState.termCount++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","sourceNew":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    //System.out.println(\"PR nextTerm\");\n    PulsingTermState termState = (PulsingTermState) _termState;\n\n    // if we have positions, its total TF, otherwise its computed based on docFreq.\n    long count = fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS ? termState.totalTermFreq : termState.docFreq;\n    //System.out.println(\"  count=\" + count + \" threshold=\" + maxPositions);\n\n    if (count <= maxPositions) {\n\n      // Inlined into terms dict -- just read the byte[] blob in,\n      // but don't decode it now (we only decode when a DocsEnum\n      // or D&PEnum is pulled):\n      termState.postingsSize = termState.inlinedBytesReader.readVInt();\n      if (termState.postings == null || termState.postings.length < termState.postingsSize) {\n        termState.postings = new byte[ArrayUtil.oversize(termState.postingsSize, 1)];\n      }\n      // TODO: sort of silly to copy from one big byte[]\n      // (the blob holding all inlined terms' blobs for\n      // current term block) into another byte[] (just the\n      // blob for this term)...\n      termState.inlinedBytesReader.readBytes(termState.postings, 0, termState.postingsSize);\n      //System.out.println(\"  inlined bytes=\" + termState.postingsSize);\n    } else {\n      //System.out.println(\"  not inlined\");\n      termState.postingsSize = -1;\n      // TODO: should we do full copyFrom?  much heavier...?\n      termState.wrappedTermState.docFreq = termState.docFreq;\n      termState.wrappedTermState.totalTermFreq = termState.totalTermFreq;\n      wrappedPostingsReader.nextTerm(fieldInfo, termState.wrappedTermState);\n      termState.wrappedTermState.termBlockOrd++;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    //System.out.println(\"PR nextTerm\");\n    PulsingTermState termState = (PulsingTermState) _termState;\n\n    // if we have positions, its total TF, otherwise its computed based on docFreq.\n    long count = fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS ? termState.totalTermFreq : termState.docFreq;\n    //System.out.println(\"  count=\" + count + \" threshold=\" + maxPositions);\n\n    if (count <= maxPositions) {\n\n      // Inlined into terms dict -- just read the byte[] blob in,\n      // but don't decode it now (we only decode when a DocsEnum\n      // or D&PEnum is pulled):\n      termState.postingsSize = termState.inlinedBytesReader.readVInt();\n      if (termState.postings == null || termState.postings.length < termState.postingsSize) {\n        termState.postings = new byte[ArrayUtil.oversize(termState.postingsSize, 1)];\n      }\n      // TODO: sort of silly to copy from one big byte[]\n      // (the blob holding all inlined terms' blobs for\n      // current term block) into another byte[] (just the\n      // blob for this term)...\n      termState.inlinedBytesReader.readBytes(termState.postings, 0, termState.postingsSize);\n      //System.out.println(\"  inlined bytes=\" + termState.postingsSize);\n    } else {\n      //System.out.println(\"  not inlined\");\n      termState.postingsSize = -1;\n      // TODO: should we do full copyFrom?  much heavier...?\n      termState.wrappedTermState.docFreq = termState.docFreq;\n      termState.wrappedTermState.totalTermFreq = termState.totalTermFreq;\n      wrappedPostingsReader.nextTerm(fieldInfo, termState.wrappedTermState);\n      termState.wrappedTermState.termBlockOrd++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}