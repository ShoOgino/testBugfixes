{"path":"src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermEnum#termCompare(Term).mjava","commits":[{"id":"53b6c192847de8643a5da505cc433cbf8476a175","date":1245413392,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermEnum#termCompare(Term).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Compares if current upper bound is reached,\n     * this also updates the term count for statistics.\n     * In contrast to {@link FilteredTermEnum}, a return value\n     * of <code>false</code> ends iterating the current enum\n     * and forwards to the next sub-range.\n     */\n    //@Override\n    protected boolean termCompare(Term term) {\n      return (term.field() == field && term.text().compareTo(currentUpperBound) <= 0);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70a9e462a51fd525218b83cdc33329f5ee00ca20","date":1254431499,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermEnum#termCompare(Term).mjava","pathOld":"src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermEnum#termCompare(Term).mjava","sourceNew":"    /**\n     * Compares if current upper bound is reached,\n     * this also updates the term count for statistics.\n     * In contrast to {@link FilteredTermEnum}, a return value\n     * of <code>false</code> ends iterating the current enum\n     * and forwards to the next sub-range.\n     */\n    @Override\n    protected boolean termCompare(Term term) {\n      return (term.field() == field && term.text().compareTo(currentUpperBound) <= 0);\n    }\n\n","sourceOld":"    /**\n     * Compares if current upper bound is reached,\n     * this also updates the term count for statistics.\n     * In contrast to {@link FilteredTermEnum}, a return value\n     * of <code>false</code> ends iterating the current enum\n     * and forwards to the next sub-range.\n     */\n    //@Override\n    protected boolean termCompare(Term term) {\n      return (term.field() == field && term.text().compareTo(currentUpperBound) <= 0);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e59605f4857b1bf510b5fe3f776e4216a3385e1","date":1259572520,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermEnum#termCompare(Term).mjava","pathOld":"src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermEnum#termCompare(Term).mjava","sourceNew":"    /**\n     * Compares if current upper bound is reached.\n     * In contrast to {@link FilteredTermEnum}, a return value\n     * of <code>false</code> ends iterating the current enum\n     * and forwards to the next sub-range.\n     */\n    @Override\n    protected boolean termCompare(Term term) {\n      return (term.field() == field && term.text().compareTo(currentUpperBound) <= 0);\n    }\n\n","sourceOld":"    /**\n     * Compares if current upper bound is reached,\n     * this also updates the term count for statistics.\n     * In contrast to {@link FilteredTermEnum}, a return value\n     * of <code>false</code> ends iterating the current enum\n     * and forwards to the next sub-range.\n     */\n    @Override\n    protected boolean termCompare(Term term) {\n      return (term.field() == field && term.text().compareTo(currentUpperBound) <= 0);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermEnum#termCompare(Term).mjava","pathOld":"src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermEnum#termCompare(Term).mjava","sourceNew":"    /**\n     * Compares if current upper bound is reached.\n     * In contrast to {@link FilteredTermEnum}, a return value\n     * of <code>false</code> ends iterating the current enum\n     * and forwards to the next sub-range.\n     */\n    @Override\n    protected boolean termCompare(Term term) {\n      return (term.field() == field && term.text().compareTo(currentUpperBound) <= 0);\n    }\n\n","sourceOld":"    /**\n     * Compares if current upper bound is reached.\n     * In contrast to {@link FilteredTermEnum}, a return value\n     * of <code>false</code> ends iterating the current enum\n     * and forwards to the next sub-range.\n     */\n    @Override\n    protected boolean termCompare(Term term) {\n      return (term.field() == field && term.text().compareTo(currentUpperBound) <= 0);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"70a9e462a51fd525218b83cdc33329f5ee00ca20":["53b6c192847de8643a5da505cc433cbf8476a175"],"53b6c192847de8643a5da505cc433cbf8476a175":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2e59605f4857b1bf510b5fe3f776e4216a3385e1":["70a9e462a51fd525218b83cdc33329f5ee00ca20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["2e59605f4857b1bf510b5fe3f776e4216a3385e1"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["53b6c192847de8643a5da505cc433cbf8476a175"],"70a9e462a51fd525218b83cdc33329f5ee00ca20":["2e59605f4857b1bf510b5fe3f776e4216a3385e1"],"53b6c192847de8643a5da505cc433cbf8476a175":["70a9e462a51fd525218b83cdc33329f5ee00ca20"],"2e59605f4857b1bf510b5fe3f776e4216a3385e1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}