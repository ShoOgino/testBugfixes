{"path":"backwards/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEqualsAndHash().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEqualsAndHash().mjava","pathOld":"/dev/null","sourceNew":"  public void testEqualsAndHash() throws Exception {\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test1\", 4, 10, 20, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test2\", 4, 10, 20, false, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test3\", 4, 10, 20, true, false));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test4\", 4, 10, 20, false, false));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test5\", 4, 10, null, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test6\", 4, null, 20, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test7\", 4, null, null, true, true));\n    QueryUtils.checkEqual(\n      NumericRangeQuery.newIntRange(\"test8\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test8\", 4, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test9\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test9\", 8, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test10a\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test10b\", 4, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test11\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test11\", 4, 20, 10, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test12\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test12\", 4, 10, 20, false, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test13\", 4, 10, 20, true, true), \n      NumericRangeQuery.newFloatRange(\"test13\", 4, 10f, 20f, true, true)\n    );\n    // the following produces a hash collision, because Long and Integer have the same hashcode, so only test equality:\n    Query q1 = NumericRangeQuery.newIntRange(\"test14\", 4, 10, 20, true, true);\n    Query q2 = NumericRangeQuery.newLongRange(\"test14\", 4, 10L, 20L, true, true);\n    assertFalse(q1.equals(q2));\n    assertFalse(q2.equals(q1));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEqualsAndHash().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEqualsAndHash().mjava","sourceNew":"  public void testEqualsAndHash() throws Exception {\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test1\", 4, 10, 20, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test2\", 4, 10, 20, false, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test3\", 4, 10, 20, true, false));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test4\", 4, 10, 20, false, false));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test5\", 4, 10, null, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test6\", 4, null, 20, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test7\", 4, null, null, true, true));\n    QueryUtils.checkEqual(\n      NumericRangeQuery.newIntRange(\"test8\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test8\", 4, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test9\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test9\", 8, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test10a\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test10b\", 4, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test11\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test11\", 4, 20, 10, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test12\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test12\", 4, 10, 20, false, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test13\", 4, 10, 20, true, true), \n      NumericRangeQuery.newFloatRange(\"test13\", 4, 10f, 20f, true, true)\n    );\n    // the following produces a hash collision, because Long and Integer have the same hashcode, so only test equality:\n    Query q1 = NumericRangeQuery.newIntRange(\"test14\", 4, 10, 20, true, true);\n    Query q2 = NumericRangeQuery.newLongRange(\"test14\", 4, 10L, 20L, true, true);\n    assertFalse(q1.equals(q2));\n    assertFalse(q2.equals(q1));\n  }\n\n","sourceOld":"  public void testEqualsAndHash() throws Exception {\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test1\", 4, 10, 20, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test2\", 4, 10, 20, false, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test3\", 4, 10, 20, true, false));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test4\", 4, 10, 20, false, false));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test5\", 4, 10, null, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test6\", 4, null, 20, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test7\", 4, null, null, true, true));\n    QueryUtils.checkEqual(\n      NumericRangeQuery.newIntRange(\"test8\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test8\", 4, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test9\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test9\", 8, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test10a\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test10b\", 4, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test11\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test11\", 4, 20, 10, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test12\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test12\", 4, 10, 20, false, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test13\", 4, 10, 20, true, true), \n      NumericRangeQuery.newFloatRange(\"test13\", 4, 10f, 20f, true, true)\n    );\n    // the following produces a hash collision, because Long and Integer have the same hashcode, so only test equality:\n    Query q1 = NumericRangeQuery.newIntRange(\"test14\", 4, 10, 20, true, true);\n    Query q2 = NumericRangeQuery.newLongRange(\"test14\", 4, 10L, 20L, true, true);\n    assertFalse(q1.equals(q2));\n    assertFalse(q2.equals(q1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}