{"path":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#verify(LeafReader,int[][],BytesRef[],BytesRef).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#verify(LeafReader,int[][],BytesRef[],BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  private void verify(LeafReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r, r.getLiveDocs(),\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            TestUtil.nextInt(random(), 2, 10));\n                                            \n\n    final NumericDocValues docIDToID = FieldCache.DEFAULT.getNumerics(r, \"id\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (dto.numTerms() == 0) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    SortedSetDocValues iter = dto.iterator(r);\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID.get(docID) + \")\");\n      }\n      iter.setDocument(docID);\n      final int[] answers = idToOrds[(int) docIDToID.get(docID)];\n      int upto = 0;\n      long ord;\n      while ((ord = iter.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        te.seekExact(ord);\n        final BytesRef expected = termsArray[answers[upto++]];\n        if (VERBOSE) {\n          System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n        }\n        assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + ord, expected, te.term());\n      }\n      assertEquals(answers.length, upto);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8c146731a64debc22c115bbf11ee1a060aa7ea02"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#verify(LeafReader,int[][],BytesRef[],BytesRef).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#verify(LeafReader,int[][],BytesRef[],BytesRef).mjava","sourceNew":"  private void verify(LeafReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r, r.getLiveDocs(),\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            TestUtil.nextInt(random(), 2, 10));\n                                            \n\n    final NumericDocValues docIDToID = FieldCache.DEFAULT.getNumerics(r, \"id\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator();\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (dto.numTerms() == 0) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    SortedSetDocValues iter = dto.iterator(r);\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID.get(docID) + \")\");\n      }\n      iter.setDocument(docID);\n      final int[] answers = idToOrds[(int) docIDToID.get(docID)];\n      int upto = 0;\n      long ord;\n      while ((ord = iter.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        te.seekExact(ord);\n        final BytesRef expected = termsArray[answers[upto++]];\n        if (VERBOSE) {\n          System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n        }\n        assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + ord, expected, te.term());\n      }\n      assertEquals(answers.length, upto);\n    }\n  }\n\n","sourceOld":"  private void verify(LeafReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r, r.getLiveDocs(),\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            TestUtil.nextInt(random(), 2, 10));\n                                            \n\n    final NumericDocValues docIDToID = FieldCache.DEFAULT.getNumerics(r, \"id\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (dto.numTerms() == 0) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    SortedSetDocValues iter = dto.iterator(r);\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID.get(docID) + \")\");\n      }\n      iter.setDocument(docID);\n      final int[] answers = idToOrds[(int) docIDToID.get(docID)];\n      int upto = 0;\n      long ord;\n      while ((ord = iter.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        te.seekExact(ord);\n        final BytesRef expected = termsArray[answers[upto++]];\n        if (VERBOSE) {\n          System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n        }\n        assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + ord, expected, te.term());\n      }\n      assertEquals(answers.length, upto);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8c146731a64debc22c115bbf11ee1a060aa7ea02","date":1457616596,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#verify(LeafReader,int[][],BytesRef[],BytesRef).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#verify(LeafReader,int[][],BytesRef[],BytesRef).mjava","sourceNew":"  private void verify(LeafReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r, r.getLiveDocs(),\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            TestUtil.nextInt(random(), 2, 10));\n                                            \n\n    final NumericDocValues docIDToID = FieldCache.DEFAULT.getNumerics(r, \"id\", FieldCache.LEGACY_INT_PARSER, false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator();\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (dto.numTerms() == 0) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    SortedSetDocValues iter = dto.iterator(r);\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID.get(docID) + \")\");\n      }\n      iter.setDocument(docID);\n      final int[] answers = idToOrds[(int) docIDToID.get(docID)];\n      int upto = 0;\n      long ord;\n      while ((ord = iter.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        te.seekExact(ord);\n        final BytesRef expected = termsArray[answers[upto++]];\n        if (VERBOSE) {\n          System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n        }\n        assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + ord, expected, te.term());\n      }\n      assertEquals(answers.length, upto);\n    }\n  }\n\n","sourceOld":"  private void verify(LeafReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r, r.getLiveDocs(),\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            TestUtil.nextInt(random(), 2, 10));\n                                            \n\n    final NumericDocValues docIDToID = FieldCache.DEFAULT.getNumerics(r, \"id\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator();\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (dto.numTerms() == 0) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    SortedSetDocValues iter = dto.iterator(r);\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID.get(docID) + \")\");\n      }\n      iter.setDocument(docID);\n      final int[] answers = idToOrds[(int) docIDToID.get(docID)];\n      int upto = 0;\n      long ord;\n      while ((ord = iter.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        te.seekExact(ord);\n        final BytesRef expected = termsArray[answers[upto++]];\n        if (VERBOSE) {\n          System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n        }\n        assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + ord, expected, te.term());\n      }\n      assertEquals(answers.length, upto);\n    }\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestDocTermOrds#verify(LeafReader,int[][],BytesRef[],BytesRef).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#verify(LeafReader,int[][],BytesRef[],BytesRef).mjava","sourceNew":"  private void verify(LeafReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r, r.getLiveDocs(),\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            TestUtil.nextInt(random(), 2, 10));\n                                            \n\n    final NumericDocValues docIDToID = FieldCache.DEFAULT.getNumerics(r, \"id\", FieldCache.LEGACY_INT_PARSER, false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator();\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (dto.numTerms() == 0) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    SortedSetDocValues iter = dto.iterator(r);\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID.get(docID) + \")\");\n      }\n      iter.setDocument(docID);\n      final int[] answers = idToOrds[(int) docIDToID.get(docID)];\n      int upto = 0;\n      long ord;\n      while ((ord = iter.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        te.seekExact(ord);\n        final BytesRef expected = termsArray[answers[upto++]];\n        if (VERBOSE) {\n          System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n        }\n        assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + ord, expected, te.term());\n      }\n      assertEquals(answers.length, upto);\n    }\n  }\n\n","sourceOld":"  private void verify(LeafReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r, r.getLiveDocs(),\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            TestUtil.nextInt(random(), 2, 10));\n                                            \n\n    final NumericDocValues docIDToID = FieldCache.DEFAULT.getNumerics(r, \"id\", FieldCache.LEGACY_INT_PARSER, false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator();\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (dto.numTerms() == 0) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    SortedSetDocValues iter = dto.iterator(r);\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID.get(docID) + \")\");\n      }\n      iter.setDocument(docID);\n      final int[] answers = idToOrds[(int) docIDToID.get(docID)];\n      int upto = 0;\n      long ord;\n      while ((ord = iter.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        te.seekExact(ord);\n        final BytesRef expected = termsArray[answers[upto++]];\n        if (VERBOSE) {\n          System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n        }\n        assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + ord, expected, te.term());\n      }\n      assertEquals(answers.length, upto);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestDocTermOrds#verify(LeafReader,int[][],BytesRef[],BytesRef).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#verify(LeafReader,int[][],BytesRef[],BytesRef).mjava","sourceNew":"  private void verify(LeafReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r, r.getLiveDocs(),\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            TestUtil.nextInt(random(), 2, 10));\n                                            \n\n    final NumericDocValues docIDToID = FieldCache.DEFAULT.getNumerics(r, \"id\", FieldCache.LEGACY_INT_PARSER, false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator();\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (dto.numTerms() == 0) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    SortedSetDocValues iter = dto.iterator(r);\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID.get(docID) + \")\");\n      }\n      iter.setDocument(docID);\n      final int[] answers = idToOrds[(int) docIDToID.get(docID)];\n      int upto = 0;\n      long ord;\n      while ((ord = iter.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        te.seekExact(ord);\n        final BytesRef expected = termsArray[answers[upto++]];\n        if (VERBOSE) {\n          System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n        }\n        assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + ord, expected, te.term());\n      }\n      assertEquals(answers.length, upto);\n    }\n  }\n\n","sourceOld":"  private void verify(LeafReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r, r.getLiveDocs(),\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            TestUtil.nextInt(random(), 2, 10));\n                                            \n\n    final NumericDocValues docIDToID = FieldCache.DEFAULT.getNumerics(r, \"id\", FieldCache.LEGACY_INT_PARSER, false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator();\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (dto.numTerms() == 0) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    SortedSetDocValues iter = dto.iterator(r);\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID.get(docID) + \")\");\n      }\n      iter.setDocument(docID);\n      final int[] answers = idToOrds[(int) docIDToID.get(docID)];\n      int upto = 0;\n      long ord;\n      while ((ord = iter.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        te.seekExact(ord);\n        final BytesRef expected = termsArray[answers[upto++]];\n        if (VERBOSE) {\n          System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n        }\n        assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + ord, expected, te.term());\n      }\n      assertEquals(answers.length, upto);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestDocTermOrds#verify(LeafReader,int[][],BytesRef[],BytesRef).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#verify(LeafReader,int[][],BytesRef[],BytesRef).mjava","sourceNew":"  private void verify(LeafReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r, r.getLiveDocs(),\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            TestUtil.nextInt(random(), 2, 10));\n                                            \n\n    final NumericDocValues docIDToID = FieldCache.DEFAULT.getNumerics(r, \"id\", FieldCache.LEGACY_INT_PARSER, false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator();\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (dto.numTerms() == 0) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    SortedSetDocValues iter = dto.iterator(r);\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID.get(docID) + \")\");\n      }\n      iter.setDocument(docID);\n      final int[] answers = idToOrds[(int) docIDToID.get(docID)];\n      int upto = 0;\n      long ord;\n      while ((ord = iter.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        te.seekExact(ord);\n        final BytesRef expected = termsArray[answers[upto++]];\n        if (VERBOSE) {\n          System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n        }\n        assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + ord, expected, te.term());\n      }\n      assertEquals(answers.length, upto);\n    }\n  }\n\n","sourceOld":"  private void verify(LeafReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r, r.getLiveDocs(),\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            TestUtil.nextInt(random(), 2, 10));\n                                            \n\n    final NumericDocValues docIDToID = FieldCache.DEFAULT.getNumerics(r, \"id\", FieldCache.LEGACY_INT_PARSER, false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator();\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (dto.numTerms() == 0) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    SortedSetDocValues iter = dto.iterator(r);\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID.get(docID) + \")\");\n      }\n      iter.setDocument(docID);\n      final int[] answers = idToOrds[(int) docIDToID.get(docID)];\n      int upto = 0;\n      long ord;\n      while ((ord = iter.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        te.seekExact(ord);\n        final BytesRef expected = termsArray[answers[upto++]];\n        if (VERBOSE) {\n          System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n        }\n        assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + ord, expected, te.term());\n      }\n      assertEquals(answers.length, upto);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#verify(LeafReader,int[][],BytesRef[],BytesRef).mjava","sourceNew":null,"sourceOld":"  private void verify(LeafReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r, r.getLiveDocs(),\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            TestUtil.nextInt(random(), 2, 10));\n                                            \n\n    final NumericDocValues docIDToID = FieldCache.DEFAULT.getNumerics(r, \"id\", FieldCache.LEGACY_INT_PARSER, false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator();\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (dto.numTerms() == 0) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    SortedSetDocValues iter = dto.iterator(r);\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID.get(docID) + \")\");\n      }\n      iter.setDocument(docID);\n      final int[] answers = idToOrds[(int) docIDToID.get(docID)];\n      int upto = 0;\n      long ord;\n      while ((ord = iter.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        te.seekExact(ord);\n        final BytesRef expected = termsArray[answers[upto++]];\n        if (VERBOSE) {\n          System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n        }\n        assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + ord, expected, te.term());\n      }\n      assertEquals(answers.length, upto);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a076c3c721f685b7559308fdc2cd72d91bba67e5":["8c146731a64debc22c115bbf11ee1a060aa7ea02"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["8c146731a64debc22c115bbf11ee1a060aa7ea02","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83870855d82aba6819217abeff5a40779dbb28b4":["8c146731a64debc22c115bbf11ee1a060aa7ea02","0e121d43b5a10f2df530f406f935102656e9c4e8"],"8c146731a64debc22c115bbf11ee1a060aa7ea02":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["8c146731a64debc22c115bbf11ee1a060aa7ea02","0e121d43b5a10f2df530f406f935102656e9c4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e121d43b5a10f2df530f406f935102656e9c4e8"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["8c146731a64debc22c115bbf11ee1a060aa7ea02"],"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"8c146731a64debc22c115bbf11ee1a060aa7ea02":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}