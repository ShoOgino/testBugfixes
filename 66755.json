{"path":"solr/src/java/org/apache/solr/spelling/PossibilityIterator#PossibilityIterator(Map[Token,LinkedHashMap[String,Integer]],int,int).mjava","commits":[{"id":"31aff65a420ac3dfd25611e2c4a99d38b7dd60e9","date":1307387688,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/spelling/PossibilityIterator#PossibilityIterator(Map[Token,LinkedHashMap[String,Integer]],int,int).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/PossibilityIterator#PossibilityIterator(Map[Token,LinkedHashMap[String,Integer]]).mjava","sourceNew":"\t/**\n\t * <p>\n\t * We assume here that the passed-in inner LinkedHashMaps are already sorted\n\t * in order of \"Best Possible Correction\".\n\t * </p>\n\t * \n\t * @param suggestions\n\t */\n\tpublic PossibilityIterator(Map<Token, LinkedHashMap<String, Integer>> suggestions, int maximumRequiredSuggestions, int maxEvaluations) {\n\t\tfor (Map.Entry<Token, LinkedHashMap<String, Integer>> entry : suggestions.entrySet()) {\n\t\t\tToken token = entry.getKey();\n\t\t\tList<SpellCheckCorrection> possibleCorrections = new ArrayList<SpellCheckCorrection>();\n\t\t\tfor (Map.Entry<String, Integer> entry1 : entry.getValue().entrySet()) {\n\t\t\t\tSpellCheckCorrection correction = new SpellCheckCorrection();\n\t\t\t\tcorrection.setOriginal(token);\n\t\t\t\tcorrection.setCorrection(entry1.getKey());\n\t\t\t\tcorrection.setNumberOfOccurences(entry1.getValue());\n\t\t\t\tpossibleCorrections.add(correction);\n\t\t\t}\n\t\t\tpossibilityList.add(possibleCorrections);\n\t\t}\n\n\t\tint wrapSize = possibilityList.size();\n\t\tif (wrapSize == 0) {\n\t\t\tdone = true;\n\t\t} else {\n\t\t\tcorrectionIndex = new int[wrapSize];\n\t\t\tfor (int i = 0; i < wrapSize; i++) {\n\t\t\t\tint suggestSize = possibilityList.get(i).size();\n\t\t\t\tif (suggestSize == 0) {\n\t\t\t\t\tdone = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcorrectionIndex[i] = 0;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong count = 0;\n\t\tPriorityQueue<RankedSpellPossibility> rankedPossibilities = new PriorityQueue<RankedSpellPossibility>();\t\t\n\t\twhile (count < maxEvaluations && internalHasNext()) {\n\t\t\tRankedSpellPossibility rsp = internalNext();\n\t\t\tcount++;\t\t\t\n\t\t\t\n\t\t\tif(rankedPossibilities.size() >= maximumRequiredSuggestions && rsp.getRank() >= rankedPossibilities.peek().getRank()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\trankedPossibilities.offer(rsp);\n\t\t\tif(rankedPossibilities.size() > maximumRequiredSuggestions) {\n\t\t\t\trankedPossibilities.poll();\n\t\t\t}\n\t\t}\n\t\t\n\t\tRankedSpellPossibility[] rpArr = new RankedSpellPossibility[rankedPossibilities.size()];\n\t\tfor(int i=rankedPossibilities.size() - 1  ; i>=0 ; i--) {\n\t\t\trpArr[i] = rankedPossibilities.remove();\n\t\t}\n\t\trankedPossibilityIterator = Arrays.asList(rpArr).iterator();\t\t\n\t}\n\n","sourceOld":"\t/**\n\t * <p>\n\t * We assume here that the passed-in inner LinkedHashMaps are already sorted\n\t * in order of \"Best Possible Correction\".\n\t * </p>\n\t * \n\t * @param suggestions\n\t */\n\tpublic PossibilityIterator(Map<Token, LinkedHashMap<String, Integer>> suggestions) {\n\t\tfor (Map.Entry<Token, LinkedHashMap<String, Integer>> entry : suggestions.entrySet()) {\n\t\t\tToken token = entry.getKey();\n\t\t\tList<SpellCheckCorrection> possibleCorrections = new ArrayList<SpellCheckCorrection>();\n\t\t\tfor (Map.Entry<String, Integer> entry1 : entry.getValue().entrySet()) {\n\t\t\t\tSpellCheckCorrection correction = new SpellCheckCorrection();\n\t\t\t\tcorrection.setOriginal(token);\n\t\t\t\tcorrection.setCorrection(entry1.getKey());\n\t\t\t\tcorrection.setNumberOfOccurences(entry1.getValue());\n\t\t\t\tpossibleCorrections.add(correction);\n\t\t\t}\n\t\t\tpossibilityList.add(possibleCorrections);\n\t\t}\n\n\t\tint wrapSize = possibilityList.size();\n\t\tif (wrapSize == 0) {\n\t\t\tdone = true;\n\t\t} else {\n\t\t\tcorrectionIndex = new int[wrapSize];\n\t\t\tfor (int i = 0; i < wrapSize; i++) {\n\t\t\t\tint suggestSize = possibilityList.get(i).size();\n\t\t\t\tif (suggestSize == 0) {\n\t\t\t\t\tdone = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcorrectionIndex[i] = 0;\n\t\t\t}\n\t\t}\n\n\t\twhile (internalHasNext()) {\n\t\t\trankedPossibilityList.add(internalNext());\n\t\t}\n\t\tCollections.sort(rankedPossibilityList);\n\t\trankedPossibilityIterator = rankedPossibilityList.iterator();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/spelling/PossibilityIterator#PossibilityIterator(Map[Token,LinkedHashMap[String,Integer]],int,int).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/PossibilityIterator#PossibilityIterator(Map[Token,LinkedHashMap[String,Integer]]).mjava","sourceNew":"\t/**\n\t * <p>\n\t * We assume here that the passed-in inner LinkedHashMaps are already sorted\n\t * in order of \"Best Possible Correction\".\n\t * </p>\n\t * \n\t * @param suggestions\n\t */\n\tpublic PossibilityIterator(Map<Token, LinkedHashMap<String, Integer>> suggestions, int maximumRequiredSuggestions, int maxEvaluations) {\n\t\tfor (Map.Entry<Token, LinkedHashMap<String, Integer>> entry : suggestions.entrySet()) {\n\t\t\tToken token = entry.getKey();\n\t\t\tList<SpellCheckCorrection> possibleCorrections = new ArrayList<SpellCheckCorrection>();\n\t\t\tfor (Map.Entry<String, Integer> entry1 : entry.getValue().entrySet()) {\n\t\t\t\tSpellCheckCorrection correction = new SpellCheckCorrection();\n\t\t\t\tcorrection.setOriginal(token);\n\t\t\t\tcorrection.setCorrection(entry1.getKey());\n\t\t\t\tcorrection.setNumberOfOccurences(entry1.getValue());\n\t\t\t\tpossibleCorrections.add(correction);\n\t\t\t}\n\t\t\tpossibilityList.add(possibleCorrections);\n\t\t}\n\n\t\tint wrapSize = possibilityList.size();\n\t\tif (wrapSize == 0) {\n\t\t\tdone = true;\n\t\t} else {\n\t\t\tcorrectionIndex = new int[wrapSize];\n\t\t\tfor (int i = 0; i < wrapSize; i++) {\n\t\t\t\tint suggestSize = possibilityList.get(i).size();\n\t\t\t\tif (suggestSize == 0) {\n\t\t\t\t\tdone = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcorrectionIndex[i] = 0;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong count = 0;\n\t\tPriorityQueue<RankedSpellPossibility> rankedPossibilities = new PriorityQueue<RankedSpellPossibility>();\t\t\n\t\twhile (count < maxEvaluations && internalHasNext()) {\n\t\t\tRankedSpellPossibility rsp = internalNext();\n\t\t\tcount++;\t\t\t\n\t\t\t\n\t\t\tif(rankedPossibilities.size() >= maximumRequiredSuggestions && rsp.getRank() >= rankedPossibilities.peek().getRank()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\trankedPossibilities.offer(rsp);\n\t\t\tif(rankedPossibilities.size() > maximumRequiredSuggestions) {\n\t\t\t\trankedPossibilities.poll();\n\t\t\t}\n\t\t}\n\t\t\n\t\tRankedSpellPossibility[] rpArr = new RankedSpellPossibility[rankedPossibilities.size()];\n\t\tfor(int i=rankedPossibilities.size() - 1  ; i>=0 ; i--) {\n\t\t\trpArr[i] = rankedPossibilities.remove();\n\t\t}\n\t\trankedPossibilityIterator = Arrays.asList(rpArr).iterator();\t\t\n\t}\n\n","sourceOld":"\t/**\n\t * <p>\n\t * We assume here that the passed-in inner LinkedHashMaps are already sorted\n\t * in order of \"Best Possible Correction\".\n\t * </p>\n\t * \n\t * @param suggestions\n\t */\n\tpublic PossibilityIterator(Map<Token, LinkedHashMap<String, Integer>> suggestions) {\n\t\tfor (Map.Entry<Token, LinkedHashMap<String, Integer>> entry : suggestions.entrySet()) {\n\t\t\tToken token = entry.getKey();\n\t\t\tList<SpellCheckCorrection> possibleCorrections = new ArrayList<SpellCheckCorrection>();\n\t\t\tfor (Map.Entry<String, Integer> entry1 : entry.getValue().entrySet()) {\n\t\t\t\tSpellCheckCorrection correction = new SpellCheckCorrection();\n\t\t\t\tcorrection.setOriginal(token);\n\t\t\t\tcorrection.setCorrection(entry1.getKey());\n\t\t\t\tcorrection.setNumberOfOccurences(entry1.getValue());\n\t\t\t\tpossibleCorrections.add(correction);\n\t\t\t}\n\t\t\tpossibilityList.add(possibleCorrections);\n\t\t}\n\n\t\tint wrapSize = possibilityList.size();\n\t\tif (wrapSize == 0) {\n\t\t\tdone = true;\n\t\t} else {\n\t\t\tcorrectionIndex = new int[wrapSize];\n\t\t\tfor (int i = 0; i < wrapSize; i++) {\n\t\t\t\tint suggestSize = possibilityList.get(i).size();\n\t\t\t\tif (suggestSize == 0) {\n\t\t\t\t\tdone = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcorrectionIndex[i] = 0;\n\t\t\t}\n\t\t}\n\n\t\twhile (internalHasNext()) {\n\t\t\trankedPossibilityList.add(internalNext());\n\t\t}\n\t\tCollections.sort(rankedPossibilityList);\n\t\trankedPossibilityIterator = rankedPossibilityList.iterator();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/spelling/PossibilityIterator#PossibilityIterator(Map[Token,LinkedHashMap[String,Integer]],int,int).mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t * <p>\n\t * We assume here that the passed-in inner LinkedHashMaps are already sorted\n\t * in order of \"Best Possible Correction\".\n\t * </p>\n\t * \n\t * @param suggestions\n\t */\n\tpublic PossibilityIterator(Map<Token, LinkedHashMap<String, Integer>> suggestions, int maximumRequiredSuggestions, int maxEvaluations) {\n\t\tfor (Map.Entry<Token, LinkedHashMap<String, Integer>> entry : suggestions.entrySet()) {\n\t\t\tToken token = entry.getKey();\n\t\t\tList<SpellCheckCorrection> possibleCorrections = new ArrayList<SpellCheckCorrection>();\n\t\t\tfor (Map.Entry<String, Integer> entry1 : entry.getValue().entrySet()) {\n\t\t\t\tSpellCheckCorrection correction = new SpellCheckCorrection();\n\t\t\t\tcorrection.setOriginal(token);\n\t\t\t\tcorrection.setCorrection(entry1.getKey());\n\t\t\t\tcorrection.setNumberOfOccurences(entry1.getValue());\n\t\t\t\tpossibleCorrections.add(correction);\n\t\t\t}\n\t\t\tpossibilityList.add(possibleCorrections);\n\t\t}\n\n\t\tint wrapSize = possibilityList.size();\n\t\tif (wrapSize == 0) {\n\t\t\tdone = true;\n\t\t} else {\n\t\t\tcorrectionIndex = new int[wrapSize];\n\t\t\tfor (int i = 0; i < wrapSize; i++) {\n\t\t\t\tint suggestSize = possibilityList.get(i).size();\n\t\t\t\tif (suggestSize == 0) {\n\t\t\t\t\tdone = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcorrectionIndex[i] = 0;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong count = 0;\n\t\tPriorityQueue<RankedSpellPossibility> rankedPossibilities = new PriorityQueue<RankedSpellPossibility>();\t\t\n\t\twhile (count < maxEvaluations && internalHasNext()) {\n\t\t\tRankedSpellPossibility rsp = internalNext();\n\t\t\tcount++;\t\t\t\n\t\t\t\n\t\t\tif(rankedPossibilities.size() >= maximumRequiredSuggestions && rsp.getRank() >= rankedPossibilities.peek().getRank()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\trankedPossibilities.offer(rsp);\n\t\t\tif(rankedPossibilities.size() > maximumRequiredSuggestions) {\n\t\t\t\trankedPossibilities.poll();\n\t\t\t}\n\t\t}\n\t\t\n\t\tRankedSpellPossibility[] rpArr = new RankedSpellPossibility[rankedPossibilities.size()];\n\t\tfor(int i=rankedPossibilities.size() - 1  ; i>=0 ; i--) {\n\t\t\trpArr[i] = rankedPossibilities.remove();\n\t\t}\n\t\trankedPossibilityIterator = Arrays.asList(rpArr).iterator();\t\t\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/PossibilityIterator#PossibilityIterator(Map[Token,LinkedHashMap[String,Integer]],int,int).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/PossibilityIterator#PossibilityIterator(Map[Token,LinkedHashMap[String,Integer]],int,int).mjava","sourceNew":"\t/**\n\t * <p>\n\t * We assume here that the passed-in inner LinkedHashMaps are already sorted\n\t * in order of \"Best Possible Correction\".\n\t * </p>\n\t * \n\t * @param suggestions\n\t */\n\tpublic PossibilityIterator(Map<Token, LinkedHashMap<String, Integer>> suggestions, int maximumRequiredSuggestions, int maxEvaluations) {\n\t\tfor (Map.Entry<Token, LinkedHashMap<String, Integer>> entry : suggestions.entrySet()) {\n\t\t\tToken token = entry.getKey();\n\t\t\tList<SpellCheckCorrection> possibleCorrections = new ArrayList<SpellCheckCorrection>();\n\t\t\tfor (Map.Entry<String, Integer> entry1 : entry.getValue().entrySet()) {\n\t\t\t\tSpellCheckCorrection correction = new SpellCheckCorrection();\n\t\t\t\tcorrection.setOriginal(token);\n\t\t\t\tcorrection.setCorrection(entry1.getKey());\n\t\t\t\tcorrection.setNumberOfOccurences(entry1.getValue());\n\t\t\t\tpossibleCorrections.add(correction);\n\t\t\t}\n\t\t\tpossibilityList.add(possibleCorrections);\n\t\t}\n\n\t\tint wrapSize = possibilityList.size();\n\t\tif (wrapSize == 0) {\n\t\t\tdone = true;\n\t\t} else {\n\t\t\tcorrectionIndex = new int[wrapSize];\n\t\t\tfor (int i = 0; i < wrapSize; i++) {\n\t\t\t\tint suggestSize = possibilityList.get(i).size();\n\t\t\t\tif (suggestSize == 0) {\n\t\t\t\t\tdone = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcorrectionIndex[i] = 0;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong count = 0;\n\t\tPriorityQueue<RankedSpellPossibility> rankedPossibilities = new PriorityQueue<RankedSpellPossibility>();\t\t\n\t\twhile (count < maxEvaluations && internalHasNext()) {\n\t\t\tRankedSpellPossibility rsp = internalNext();\n\t\t\tcount++;\t\t\t\n\t\t\t\n\t\t\tif(rankedPossibilities.size() >= maximumRequiredSuggestions && rsp.getRank() >= rankedPossibilities.peek().getRank()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\trankedPossibilities.offer(rsp);\n\t\t\tif(rankedPossibilities.size() > maximumRequiredSuggestions) {\n\t\t\t\trankedPossibilities.poll();\n\t\t\t}\n\t\t}\n\t\t\n\t\tRankedSpellPossibility[] rpArr = new RankedSpellPossibility[rankedPossibilities.size()];\n\t\tfor(int i=rankedPossibilities.size() - 1  ; i>=0 ; i--) {\n\t\t\trpArr[i] = rankedPossibilities.remove();\n\t\t}\n\t\trankedPossibilityIterator = Arrays.asList(rpArr).iterator();\t\t\n\t}\n\n","sourceOld":"\t/**\n\t * <p>\n\t * We assume here that the passed-in inner LinkedHashMaps are already sorted\n\t * in order of \"Best Possible Correction\".\n\t * </p>\n\t * \n\t * @param suggestions\n\t */\n\tpublic PossibilityIterator(Map<Token, LinkedHashMap<String, Integer>> suggestions, int maximumRequiredSuggestions, int maxEvaluations) {\n\t\tfor (Map.Entry<Token, LinkedHashMap<String, Integer>> entry : suggestions.entrySet()) {\n\t\t\tToken token = entry.getKey();\n\t\t\tList<SpellCheckCorrection> possibleCorrections = new ArrayList<SpellCheckCorrection>();\n\t\t\tfor (Map.Entry<String, Integer> entry1 : entry.getValue().entrySet()) {\n\t\t\t\tSpellCheckCorrection correction = new SpellCheckCorrection();\n\t\t\t\tcorrection.setOriginal(token);\n\t\t\t\tcorrection.setCorrection(entry1.getKey());\n\t\t\t\tcorrection.setNumberOfOccurences(entry1.getValue());\n\t\t\t\tpossibleCorrections.add(correction);\n\t\t\t}\n\t\t\tpossibilityList.add(possibleCorrections);\n\t\t}\n\n\t\tint wrapSize = possibilityList.size();\n\t\tif (wrapSize == 0) {\n\t\t\tdone = true;\n\t\t} else {\n\t\t\tcorrectionIndex = new int[wrapSize];\n\t\t\tfor (int i = 0; i < wrapSize; i++) {\n\t\t\t\tint suggestSize = possibilityList.get(i).size();\n\t\t\t\tif (suggestSize == 0) {\n\t\t\t\t\tdone = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcorrectionIndex[i] = 0;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong count = 0;\n\t\tPriorityQueue<RankedSpellPossibility> rankedPossibilities = new PriorityQueue<RankedSpellPossibility>();\t\t\n\t\twhile (count < maxEvaluations && internalHasNext()) {\n\t\t\tRankedSpellPossibility rsp = internalNext();\n\t\t\tcount++;\t\t\t\n\t\t\t\n\t\t\tif(rankedPossibilities.size() >= maximumRequiredSuggestions && rsp.getRank() >= rankedPossibilities.peek().getRank()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\trankedPossibilities.offer(rsp);\n\t\t\tif(rankedPossibilities.size() > maximumRequiredSuggestions) {\n\t\t\t\trankedPossibilities.poll();\n\t\t\t}\n\t\t}\n\t\t\n\t\tRankedSpellPossibility[] rpArr = new RankedSpellPossibility[rankedPossibilities.size()];\n\t\tfor(int i=rankedPossibilities.size() - 1  ; i>=0 ; i--) {\n\t\t\trpArr[i] = rankedPossibilities.remove();\n\t\t}\n\t\trankedPossibilityIterator = Arrays.asList(rpArr).iterator();\t\t\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/PossibilityIterator#PossibilityIterator(Map[Token,LinkedHashMap[String,Integer]],int,int).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/PossibilityIterator#PossibilityIterator(Map[Token,LinkedHashMap[String,Integer]],int,int).mjava","sourceNew":"\t/**\n\t * <p>\n\t * We assume here that the passed-in inner LinkedHashMaps are already sorted\n\t * in order of \"Best Possible Correction\".\n\t * </p>\n\t * \n\t * @param suggestions\n\t */\n\tpublic PossibilityIterator(Map<Token, LinkedHashMap<String, Integer>> suggestions, int maximumRequiredSuggestions, int maxEvaluations) {\n\t\tfor (Map.Entry<Token, LinkedHashMap<String, Integer>> entry : suggestions.entrySet()) {\n\t\t\tToken token = entry.getKey();\n\t\t\tList<SpellCheckCorrection> possibleCorrections = new ArrayList<SpellCheckCorrection>();\n\t\t\tfor (Map.Entry<String, Integer> entry1 : entry.getValue().entrySet()) {\n\t\t\t\tSpellCheckCorrection correction = new SpellCheckCorrection();\n\t\t\t\tcorrection.setOriginal(token);\n\t\t\t\tcorrection.setCorrection(entry1.getKey());\n\t\t\t\tcorrection.setNumberOfOccurences(entry1.getValue());\n\t\t\t\tpossibleCorrections.add(correction);\n\t\t\t}\n\t\t\tpossibilityList.add(possibleCorrections);\n\t\t}\n\n\t\tint wrapSize = possibilityList.size();\n\t\tif (wrapSize == 0) {\n\t\t\tdone = true;\n\t\t} else {\n\t\t\tcorrectionIndex = new int[wrapSize];\n\t\t\tfor (int i = 0; i < wrapSize; i++) {\n\t\t\t\tint suggestSize = possibilityList.get(i).size();\n\t\t\t\tif (suggestSize == 0) {\n\t\t\t\t\tdone = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcorrectionIndex[i] = 0;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong count = 0;\n\t\tPriorityQueue<RankedSpellPossibility> rankedPossibilities = new PriorityQueue<RankedSpellPossibility>();\t\t\n\t\twhile (count < maxEvaluations && internalHasNext()) {\n\t\t\tRankedSpellPossibility rsp = internalNext();\n\t\t\tcount++;\t\t\t\n\t\t\t\n\t\t\tif(rankedPossibilities.size() >= maximumRequiredSuggestions && rsp.getRank() >= rankedPossibilities.peek().getRank()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\trankedPossibilities.offer(rsp);\n\t\t\tif(rankedPossibilities.size() > maximumRequiredSuggestions) {\n\t\t\t\trankedPossibilities.poll();\n\t\t\t}\n\t\t}\n\t\t\n\t\tRankedSpellPossibility[] rpArr = new RankedSpellPossibility[rankedPossibilities.size()];\n\t\tfor(int i=rankedPossibilities.size() - 1  ; i>=0 ; i--) {\n\t\t\trpArr[i] = rankedPossibilities.remove();\n\t\t}\n\t\trankedPossibilityIterator = Arrays.asList(rpArr).iterator();\t\t\n\t}\n\n","sourceOld":"\t/**\n\t * <p>\n\t * We assume here that the passed-in inner LinkedHashMaps are already sorted\n\t * in order of \"Best Possible Correction\".\n\t * </p>\n\t * \n\t * @param suggestions\n\t */\n\tpublic PossibilityIterator(Map<Token, LinkedHashMap<String, Integer>> suggestions, int maximumRequiredSuggestions, int maxEvaluations) {\n\t\tfor (Map.Entry<Token, LinkedHashMap<String, Integer>> entry : suggestions.entrySet()) {\n\t\t\tToken token = entry.getKey();\n\t\t\tList<SpellCheckCorrection> possibleCorrections = new ArrayList<SpellCheckCorrection>();\n\t\t\tfor (Map.Entry<String, Integer> entry1 : entry.getValue().entrySet()) {\n\t\t\t\tSpellCheckCorrection correction = new SpellCheckCorrection();\n\t\t\t\tcorrection.setOriginal(token);\n\t\t\t\tcorrection.setCorrection(entry1.getKey());\n\t\t\t\tcorrection.setNumberOfOccurences(entry1.getValue());\n\t\t\t\tpossibleCorrections.add(correction);\n\t\t\t}\n\t\t\tpossibilityList.add(possibleCorrections);\n\t\t}\n\n\t\tint wrapSize = possibilityList.size();\n\t\tif (wrapSize == 0) {\n\t\t\tdone = true;\n\t\t} else {\n\t\t\tcorrectionIndex = new int[wrapSize];\n\t\t\tfor (int i = 0; i < wrapSize; i++) {\n\t\t\t\tint suggestSize = possibilityList.get(i).size();\n\t\t\t\tif (suggestSize == 0) {\n\t\t\t\t\tdone = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcorrectionIndex[i] = 0;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong count = 0;\n\t\tPriorityQueue<RankedSpellPossibility> rankedPossibilities = new PriorityQueue<RankedSpellPossibility>();\t\t\n\t\twhile (count < maxEvaluations && internalHasNext()) {\n\t\t\tRankedSpellPossibility rsp = internalNext();\n\t\t\tcount++;\t\t\t\n\t\t\t\n\t\t\tif(rankedPossibilities.size() >= maximumRequiredSuggestions && rsp.getRank() >= rankedPossibilities.peek().getRank()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\trankedPossibilities.offer(rsp);\n\t\t\tif(rankedPossibilities.size() > maximumRequiredSuggestions) {\n\t\t\t\trankedPossibilities.poll();\n\t\t\t}\n\t\t}\n\t\t\n\t\tRankedSpellPossibility[] rpArr = new RankedSpellPossibility[rankedPossibilities.size()];\n\t\tfor(int i=rankedPossibilities.size() - 1  ; i>=0 ; i--) {\n\t\t\trpArr[i] = rankedPossibilities.remove();\n\t\t}\n\t\trankedPossibilityIterator = Arrays.asList(rpArr).iterator();\t\t\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/spelling/PossibilityIterator#PossibilityIterator(Map[Token,LinkedHashMap[String,Integer]],int,int).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/PossibilityIterator#PossibilityIterator(Map[Token,LinkedHashMap[String,Integer]],int,int).mjava","sourceNew":"\t/**\n\t * <p>\n\t * We assume here that the passed-in inner LinkedHashMaps are already sorted\n\t * in order of \"Best Possible Correction\".\n\t * </p>\n\t * \n\t * @param suggestions\n\t */\n\tpublic PossibilityIterator(Map<Token, LinkedHashMap<String, Integer>> suggestions, int maximumRequiredSuggestions, int maxEvaluations) {\n\t\tfor (Map.Entry<Token, LinkedHashMap<String, Integer>> entry : suggestions.entrySet()) {\n\t\t\tToken token = entry.getKey();\n\t\t\tList<SpellCheckCorrection> possibleCorrections = new ArrayList<SpellCheckCorrection>();\n\t\t\tfor (Map.Entry<String, Integer> entry1 : entry.getValue().entrySet()) {\n\t\t\t\tSpellCheckCorrection correction = new SpellCheckCorrection();\n\t\t\t\tcorrection.setOriginal(token);\n\t\t\t\tcorrection.setCorrection(entry1.getKey());\n\t\t\t\tcorrection.setNumberOfOccurences(entry1.getValue());\n\t\t\t\tpossibleCorrections.add(correction);\n\t\t\t}\n\t\t\tpossibilityList.add(possibleCorrections);\n\t\t}\n\n\t\tint wrapSize = possibilityList.size();\n\t\tif (wrapSize == 0) {\n\t\t\tdone = true;\n\t\t} else {\n\t\t\tcorrectionIndex = new int[wrapSize];\n\t\t\tfor (int i = 0; i < wrapSize; i++) {\n\t\t\t\tint suggestSize = possibilityList.get(i).size();\n\t\t\t\tif (suggestSize == 0) {\n\t\t\t\t\tdone = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcorrectionIndex[i] = 0;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong count = 0;\n\t\tPriorityQueue<RankedSpellPossibility> rankedPossibilities = new PriorityQueue<RankedSpellPossibility>();\t\t\n\t\twhile (count < maxEvaluations && internalHasNext()) {\n\t\t\tRankedSpellPossibility rsp = internalNext();\n\t\t\tcount++;\t\t\t\n\t\t\t\n\t\t\tif(rankedPossibilities.size() >= maximumRequiredSuggestions && rsp.getRank() >= rankedPossibilities.peek().getRank()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\trankedPossibilities.offer(rsp);\n\t\t\tif(rankedPossibilities.size() > maximumRequiredSuggestions) {\n\t\t\t\trankedPossibilities.poll();\n\t\t\t}\n\t\t}\n\t\t\n\t\tRankedSpellPossibility[] rpArr = new RankedSpellPossibility[rankedPossibilities.size()];\n\t\tfor(int i=rankedPossibilities.size() - 1  ; i>=0 ; i--) {\n\t\t\trpArr[i] = rankedPossibilities.remove();\n\t\t}\n\t\trankedPossibilityIterator = Arrays.asList(rpArr).iterator();\t\t\n\t}\n\n","sourceOld":"\t/**\n\t * <p>\n\t * We assume here that the passed-in inner LinkedHashMaps are already sorted\n\t * in order of \"Best Possible Correction\".\n\t * </p>\n\t * \n\t * @param suggestions\n\t */\n\tpublic PossibilityIterator(Map<Token, LinkedHashMap<String, Integer>> suggestions, int maximumRequiredSuggestions, int maxEvaluations) {\n\t\tfor (Map.Entry<Token, LinkedHashMap<String, Integer>> entry : suggestions.entrySet()) {\n\t\t\tToken token = entry.getKey();\n\t\t\tList<SpellCheckCorrection> possibleCorrections = new ArrayList<SpellCheckCorrection>();\n\t\t\tfor (Map.Entry<String, Integer> entry1 : entry.getValue().entrySet()) {\n\t\t\t\tSpellCheckCorrection correction = new SpellCheckCorrection();\n\t\t\t\tcorrection.setOriginal(token);\n\t\t\t\tcorrection.setCorrection(entry1.getKey());\n\t\t\t\tcorrection.setNumberOfOccurences(entry1.getValue());\n\t\t\t\tpossibleCorrections.add(correction);\n\t\t\t}\n\t\t\tpossibilityList.add(possibleCorrections);\n\t\t}\n\n\t\tint wrapSize = possibilityList.size();\n\t\tif (wrapSize == 0) {\n\t\t\tdone = true;\n\t\t} else {\n\t\t\tcorrectionIndex = new int[wrapSize];\n\t\t\tfor (int i = 0; i < wrapSize; i++) {\n\t\t\t\tint suggestSize = possibilityList.get(i).size();\n\t\t\t\tif (suggestSize == 0) {\n\t\t\t\t\tdone = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcorrectionIndex[i] = 0;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong count = 0;\n\t\tPriorityQueue<RankedSpellPossibility> rankedPossibilities = new PriorityQueue<RankedSpellPossibility>();\t\t\n\t\twhile (count < maxEvaluations && internalHasNext()) {\n\t\t\tRankedSpellPossibility rsp = internalNext();\n\t\t\tcount++;\t\t\t\n\t\t\t\n\t\t\tif(rankedPossibilities.size() >= maximumRequiredSuggestions && rsp.getRank() >= rankedPossibilities.peek().getRank()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\trankedPossibilities.offer(rsp);\n\t\t\tif(rankedPossibilities.size() > maximumRequiredSuggestions) {\n\t\t\t\trankedPossibilities.poll();\n\t\t\t}\n\t\t}\n\t\t\n\t\tRankedSpellPossibility[] rpArr = new RankedSpellPossibility[rankedPossibilities.size()];\n\t\tfor(int i=rankedPossibilities.size() - 1  ; i>=0 ; i--) {\n\t\t\trpArr[i] = rankedPossibilities.remove();\n\t\t}\n\t\trankedPossibilityIterator = Arrays.asList(rpArr).iterator();\t\t\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","31aff65a420ac3dfd25611e2c4a99d38b7dd60e9"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"31aff65a420ac3dfd25611e2c4a99d38b7dd60e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["31aff65a420ac3dfd25611e2c4a99d38b7dd60e9","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","31aff65a420ac3dfd25611e2c4a99d38b7dd60e9"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["31aff65a420ac3dfd25611e2c4a99d38b7dd60e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"31aff65a420ac3dfd25611e2c4a99d38b7dd60e9":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","c26f00b574427b55127e869b935845554afde1fa","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","31aff65a420ac3dfd25611e2c4a99d38b7dd60e9","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}