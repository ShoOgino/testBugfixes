{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#getLeafDocs(Cell,Bits).mjava","commits":[{"id":"69da1c397a55d488a19e555c8da635417e2dfd47","date":1365020983,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#getLeafDocs(Cell,Bits).mjava","pathOld":"/dev/null","sourceNew":"    private SmallDocSet getLeafDocs(Cell leafCell, Bits acceptContains) throws IOException {\n      assert new BytesRef(leafCell.getTokenBytes()).equals(termBytes);\n\n      BytesRef nextTerm = termsEnum.next();\n      if (nextTerm == null) {\n        termsEnum = null;//signals all done\n        return null;\n      }\n      nextCell = grid.getCell(nextTerm.bytes, nextTerm.offset, nextTerm.length, nextCell);\n      if (nextCell.getLevel() == leafCell.getLevel() && nextCell.isLeaf()) {\n        return collectDocs(acceptContains);\n      } else {\n        return null;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0378a5fb14e1ef14d663bd48cdb3ba29a9053be9","date":1371743283,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#getLeafDocs(Cell,Bits).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#getLeafDocs(Cell,Bits).mjava","sourceNew":"    private SmallDocSet getLeafDocs(Cell leafCell, Bits acceptContains) throws IOException {\n      assert new BytesRef(leafCell.getTokenBytes()).equals(termBytes);\n      assert ! leafCell.equals(lastLeaf);//don't call for same leaf again\n      lastLeaf = leafCell;\n\n      BytesRef nextTerm = termsEnum.next();\n      if (nextTerm == null) {\n        termsEnum = null;//signals all done\n        return null;\n      }\n      nextCell = grid.getCell(nextTerm.bytes, nextTerm.offset, nextTerm.length, nextCell);\n      if (nextCell.getLevel() == leafCell.getLevel() && nextCell.isLeaf()) {\n        return collectDocs(acceptContains);\n      } else {\n        return null;\n      }\n    }\n\n","sourceOld":"    private SmallDocSet getLeafDocs(Cell leafCell, Bits acceptContains) throws IOException {\n      assert new BytesRef(leafCell.getTokenBytes()).equals(termBytes);\n\n      BytesRef nextTerm = termsEnum.next();\n      if (nextTerm == null) {\n        termsEnum = null;//signals all done\n        return null;\n      }\n      nextCell = grid.getCell(nextTerm.bytes, nextTerm.offset, nextTerm.length, nextCell);\n      if (nextCell.getLevel() == leafCell.getLevel() && nextCell.isLeaf()) {\n        return collectDocs(acceptContains);\n      } else {\n        return null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#getLeafDocs(Cell,Bits).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#getLeafDocs(Cell,Bits).mjava","sourceNew":"    private SmallDocSet getLeafDocs(Cell leafCell, Bits acceptContains) throws IOException {\n      assert new BytesRef(leafCell.getTokenBytes()).equals(termBytes);\n      assert ! leafCell.equals(lastLeaf);//don't call for same leaf again\n      lastLeaf = leafCell;\n\n      BytesRef nextTerm = termsEnum.next();\n      if (nextTerm == null) {\n        termsEnum = null;//signals all done\n        return null;\n      }\n      nextCell = grid.getCell(nextTerm.bytes, nextTerm.offset, nextTerm.length, nextCell);\n      if (nextCell.getLevel() == leafCell.getLevel() && nextCell.isLeaf()) {\n        return collectDocs(acceptContains);\n      } else {\n        return null;\n      }\n    }\n\n","sourceOld":"    private SmallDocSet getLeafDocs(Cell leafCell, Bits acceptContains) throws IOException {\n      assert new BytesRef(leafCell.getTokenBytes()).equals(termBytes);\n\n      BytesRef nextTerm = termsEnum.next();\n      if (nextTerm == null) {\n        termsEnum = null;//signals all done\n        return null;\n      }\n      nextCell = grid.getCell(nextTerm.bytes, nextTerm.offset, nextTerm.length, nextCell);\n      if (nextCell.getLevel() == leafCell.getLevel() && nextCell.isLeaf()) {\n        return collectDocs(acceptContains);\n      } else {\n        return null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"656f7931e8a3dc60676fe66839b7fa03afbe8098","date":1374722646,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#getLeafDocs(Cell,Bits).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#getLeafDocs(Cell,Bits).mjava","sourceNew":"    private SmallDocSet getLeafDocs(Cell leafCell, Bits acceptContains) throws IOException {\n      assert new BytesRef(leafCell.getTokenBytes()).equals(termBytes);\n      assert ! leafCell.equals(lastLeaf);//don't call for same leaf again\n      lastLeaf = leafCell;\n\n      if (termsEnum == null)\n        return null;\n      BytesRef nextTerm = termsEnum.next();\n      if (nextTerm == null) {\n        termsEnum = null;//signals all done\n        return null;\n      }\n      nextCell = grid.getCell(nextTerm.bytes, nextTerm.offset, nextTerm.length, nextCell);\n      if (nextCell.getLevel() == leafCell.getLevel() && nextCell.isLeaf()) {\n        return collectDocs(acceptContains);\n      } else {\n        return null;\n      }\n    }\n\n","sourceOld":"    private SmallDocSet getLeafDocs(Cell leafCell, Bits acceptContains) throws IOException {\n      assert new BytesRef(leafCell.getTokenBytes()).equals(termBytes);\n      assert ! leafCell.equals(lastLeaf);//don't call for same leaf again\n      lastLeaf = leafCell;\n\n      BytesRef nextTerm = termsEnum.next();\n      if (nextTerm == null) {\n        termsEnum = null;//signals all done\n        return null;\n      }\n      nextCell = grid.getCell(nextTerm.bytes, nextTerm.offset, nextTerm.length, nextCell);\n      if (nextCell.getLevel() == leafCell.getLevel() && nextCell.isLeaf()) {\n        return collectDocs(acceptContains);\n      } else {\n        return null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#getLeafDocs(Cell,Bits).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#getLeafDocs(Cell,Bits).mjava","sourceNew":"    private SmallDocSet getLeafDocs(Cell leafCell, Bits acceptContains) throws IOException {\n      assert new BytesRef(leafCell.getTokenBytes()).equals(termBytes);\n      assert ! leafCell.equals(lastLeaf);//don't call for same leaf again\n      lastLeaf = leafCell;\n\n      if (termsEnum == null)\n        return null;\n      BytesRef nextTerm = termsEnum.next();\n      if (nextTerm == null) {\n        termsEnum = null;//signals all done\n        return null;\n      }\n      nextCell = grid.getCell(nextTerm.bytes, nextTerm.offset, nextTerm.length, nextCell);\n      if (nextCell.getLevel() == leafCell.getLevel() && nextCell.isLeaf()) {\n        return collectDocs(acceptContains);\n      } else {\n        return null;\n      }\n    }\n\n","sourceOld":"    private SmallDocSet getLeafDocs(Cell leafCell, Bits acceptContains) throws IOException {\n      assert new BytesRef(leafCell.getTokenBytes()).equals(termBytes);\n      assert ! leafCell.equals(lastLeaf);//don't call for same leaf again\n      lastLeaf = leafCell;\n\n      BytesRef nextTerm = termsEnum.next();\n      if (nextTerm == null) {\n        termsEnum = null;//signals all done\n        return null;\n      }\n      nextCell = grid.getCell(nextTerm.bytes, nextTerm.offset, nextTerm.length, nextCell);\n      if (nextCell.getLevel() == leafCell.getLevel() && nextCell.isLeaf()) {\n        return collectDocs(acceptContains);\n      } else {\n        return null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4de14be4bd1b857ba37ca138b61c4661c6d1bed3","date":1396628861,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#getLeafDocs(Cell,Bits).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#getLeafDocs(Cell,Bits).mjava","sourceNew":"    private SmallDocSet getLeafDocs(Cell leafCell, Bits acceptContains) throws IOException {\n      assert leafCell.getTokenBytesNoLeaf(null).equals(termBytes);\n      assert ! leafCell.equals(lastLeaf);//don't call for same leaf again\n      lastLeaf = leafCell;\n\n      if (termsEnum == null)\n        return null;\n      BytesRef nextTerm = termsEnum.next();\n      if (nextTerm == null) {\n        termsEnum = null;//signals all done\n        return null;\n      }\n      nextCell = grid.getCell(nextTerm.bytes, nextTerm.offset, nextTerm.length, nextCell);\n      if (nextCell.getLevel() == leafCell.getLevel() && nextCell.isLeaf()) {\n        return collectDocs(acceptContains);\n      } else {\n        return null;\n      }\n    }\n\n","sourceOld":"    private SmallDocSet getLeafDocs(Cell leafCell, Bits acceptContains) throws IOException {\n      assert new BytesRef(leafCell.getTokenBytes()).equals(termBytes);\n      assert ! leafCell.equals(lastLeaf);//don't call for same leaf again\n      lastLeaf = leafCell;\n\n      if (termsEnum == null)\n        return null;\n      BytesRef nextTerm = termsEnum.next();\n      if (nextTerm == null) {\n        termsEnum = null;//signals all done\n        return null;\n      }\n      nextCell = grid.getCell(nextTerm.bytes, nextTerm.offset, nextTerm.length, nextCell);\n      if (nextCell.getLevel() == leafCell.getLevel() && nextCell.isLeaf()) {\n        return collectDocs(acceptContains);\n      } else {\n        return null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#getLeafDocs(Cell,Bits).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#getLeafDocs(Cell,Bits).mjava","sourceNew":"    private SmallDocSet getLeafDocs(Cell leafCell, Bits acceptContains) throws IOException {\n      assert leafCell.getTokenBytesNoLeaf(null).equals(termBytes);\n      assert ! leafCell.equals(lastLeaf);//don't call for same leaf again\n      lastLeaf = leafCell;\n\n      if (termsEnum == null)\n        return null;\n      BytesRef nextTerm = termsEnum.next();\n      if (nextTerm == null) {\n        termsEnum = null;//signals all done\n        return null;\n      }\n      nextCell = grid.getCell(nextTerm.bytes, nextTerm.offset, nextTerm.length, nextCell);\n      if (nextCell.getLevel() == leafCell.getLevel() && nextCell.isLeaf()) {\n        return collectDocs(acceptContains);\n      } else {\n        return null;\n      }\n    }\n\n","sourceOld":"    private SmallDocSet getLeafDocs(Cell leafCell, Bits acceptContains) throws IOException {\n      assert new BytesRef(leafCell.getTokenBytes()).equals(termBytes);\n      assert ! leafCell.equals(lastLeaf);//don't call for same leaf again\n      lastLeaf = leafCell;\n\n      if (termsEnum == null)\n        return null;\n      BytesRef nextTerm = termsEnum.next();\n      if (nextTerm == null) {\n        termsEnum = null;//signals all done\n        return null;\n      }\n      nextCell = grid.getCell(nextTerm.bytes, nextTerm.offset, nextTerm.length, nextCell);\n      if (nextCell.getLevel() == leafCell.getLevel() && nextCell.isLeaf()) {\n        return collectDocs(acceptContains);\n      } else {\n        return null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6","date":1397789149,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#getLeafDocs(Cell,Bits).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#getLeafDocs(Cell,Bits).mjava","sourceNew":"    private SmallDocSet getLeafDocs(Cell leafCell, Bits acceptContains) throws IOException {\n      assert leafCell.getTokenBytesNoLeaf(null).equals(termBytes);\n      assert ! leafCell.equals(lastLeaf);//don't call for same leaf again\n      lastLeaf = leafCell;\n\n      if (termsEnum == null)\n        return null;\n      BytesRef nextTerm = termsEnum.next();\n      if (nextTerm == null) {\n        termsEnum = null;//signals all done\n        return null;\n      }\n      nextCell.readCell(nextTerm);\n      assert leafCell.isPrefixOf(nextCell);\n      if (nextCell.getLevel() == leafCell.getLevel() && nextCell.isLeaf()) {\n        return collectDocs(acceptContains);\n      } else {\n        return null;\n      }\n    }\n\n","sourceOld":"    private SmallDocSet getLeafDocs(Cell leafCell, Bits acceptContains) throws IOException {\n      assert leafCell.getTokenBytesNoLeaf(null).equals(termBytes);\n      assert ! leafCell.equals(lastLeaf);//don't call for same leaf again\n      lastLeaf = leafCell;\n\n      if (termsEnum == null)\n        return null;\n      BytesRef nextTerm = termsEnum.next();\n      if (nextTerm == null) {\n        termsEnum = null;//signals all done\n        return null;\n      }\n      nextCell = grid.getCell(nextTerm.bytes, nextTerm.offset, nextTerm.length, nextCell);\n      if (nextCell.getLevel() == leafCell.getLevel() && nextCell.isLeaf()) {\n        return collectDocs(acceptContains);\n      } else {\n        return null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6c7011603e29f861f395fd2799b2ac2aa6e46da","date":1399596428,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#getLeafDocs(Cell,Bits).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#getLeafDocs(Cell,Bits).mjava","sourceNew":"    private SmallDocSet getLeafDocs(Cell leafCell, Bits acceptContains) throws IOException {\n      assert leafCell.getTokenBytesNoLeaf(null).equals(termBytes);\n      assert ! leafCell.equals(lastLeaf);//don't call for same leaf again\n      lastLeaf = leafCell;\n\n      if (termsEnum == null)\n        return null;\n      BytesRef nextTerm = termsEnum.next();\n      if (nextTerm == null) {\n        termsEnum = null;//signals all done\n        return null;\n      }\n      nextCell = grid.readCell(nextTerm, nextCell);\n      assert leafCell.isPrefixOf(nextCell);\n      if (nextCell.getLevel() == leafCell.getLevel() && nextCell.isLeaf()) {\n        return collectDocs(acceptContains);\n      } else {\n        return null;\n      }\n    }\n\n","sourceOld":"    private SmallDocSet getLeafDocs(Cell leafCell, Bits acceptContains) throws IOException {\n      assert leafCell.getTokenBytesNoLeaf(null).equals(termBytes);\n      assert ! leafCell.equals(lastLeaf);//don't call for same leaf again\n      lastLeaf = leafCell;\n\n      if (termsEnum == null)\n        return null;\n      BytesRef nextTerm = termsEnum.next();\n      if (nextTerm == null) {\n        termsEnum = null;//signals all done\n        return null;\n      }\n      nextCell.readCell(nextTerm);\n      assert leafCell.isPrefixOf(nextCell);\n      if (nextCell.getLevel() == leafCell.getLevel() && nextCell.isLeaf()) {\n        return collectDocs(acceptContains);\n      } else {\n        return null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52a496588fdabf2930f84b7839253fef004251f","date":1400016188,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#getLeafDocs(Cell,Bits).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#getLeafDocs(Cell,Bits).mjava","sourceNew":"    /** Gets docs on the leaf of the given cell, _if_ there is a leaf cell, otherwise null. */\n    private SmallDocSet getLeafDocs(Cell cell, Bits acceptContains) throws IOException {\n      assert cell.getTokenBytesNoLeaf(null).equals(termBytes);\n\n      if (termsEnum == null)\n        return null;\n      BytesRef nextTerm = termsEnum.next();\n      if (nextTerm == null) {\n        termsEnum = null;//signals all done\n        return null;\n      }\n      nextCell = grid.readCell(nextTerm, nextCell);\n      assert cell.isPrefixOf(nextCell);\n      if (nextCell.getLevel() == cell.getLevel() && nextCell.isLeaf()) {\n        return collectDocs(acceptContains);\n      } else {\n        return null;\n      }\n    }\n\n","sourceOld":"    private SmallDocSet getLeafDocs(Cell leafCell, Bits acceptContains) throws IOException {\n      assert leafCell.getTokenBytesNoLeaf(null).equals(termBytes);\n      assert ! leafCell.equals(lastLeaf);//don't call for same leaf again\n      lastLeaf = leafCell;\n\n      if (termsEnum == null)\n        return null;\n      BytesRef nextTerm = termsEnum.next();\n      if (nextTerm == null) {\n        termsEnum = null;//signals all done\n        return null;\n      }\n      nextCell = grid.readCell(nextTerm, nextCell);\n      assert leafCell.isPrefixOf(nextCell);\n      if (nextCell.getLevel() == leafCell.getLevel() && nextCell.isLeaf()) {\n        return collectDocs(acceptContains);\n      } else {\n        return null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a957bf27202eab1c9ddabc5aa30c7a0db04bbf36","date":1400053604,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#getLeafDocs(Cell,Bits).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#getLeafDocs(Cell,Bits).mjava","sourceNew":"    /** Gets docs on the leaf of the given cell, _if_ there is a leaf cell, otherwise null. */\n    private SmallDocSet getLeafDocs(Cell cell, Bits acceptContains) throws IOException {\n      assert cell.getTokenBytesNoLeaf(null).equals(termBytes);\n\n      if (termsEnum == null)\n        return null;\n      BytesRef nextTerm = termsEnum.next();\n      if (nextTerm == null) {\n        termsEnum = null;//signals all done\n        return null;\n      }\n      nextCell = grid.readCell(nextTerm, nextCell);\n      assert cell.isPrefixOf(nextCell);\n      if (nextCell.getLevel() == cell.getLevel() && nextCell.isLeaf()) {\n        return collectDocs(acceptContains);\n      } else {\n        return null;\n      }\n    }\n\n","sourceOld":"    private SmallDocSet getLeafDocs(Cell leafCell, Bits acceptContains) throws IOException {\n      assert leafCell.getTokenBytesNoLeaf(null).equals(termBytes);\n      assert ! leafCell.equals(lastLeaf);//don't call for same leaf again\n      lastLeaf = leafCell;\n\n      if (termsEnum == null)\n        return null;\n      BytesRef nextTerm = termsEnum.next();\n      if (nextTerm == null) {\n        termsEnum = null;//signals all done\n        return null;\n      }\n      nextCell = grid.readCell(nextTerm, nextCell);\n      assert leafCell.isPrefixOf(nextCell);\n      if (nextCell.getLevel() == leafCell.getLevel() && nextCell.isLeaf()) {\n        return collectDocs(acceptContains);\n      } else {\n        return null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0","date":1426015524,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#getLeafDocs(Cell,Bits).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#getLeafDocs(Cell,Bits).mjava","sourceNew":"    /** Gets docs on the leaf of the given cell, _if_ there is a leaf cell, otherwise null. */\n    private SmallDocSet getLeafDocs(Cell cell, Bits acceptContains) throws IOException {\n      assert indexedCell.compareToNoLeaf(cell) == 0;\n      //Advance past prefix if we're at a prefix; return null if no leaf\n      if (!indexedCell.isLeaf()) {\n        if (!nextTerm() || !indexedCell.isLeaf() || indexedCell.getLevel() != cell.getLevel()) {\n          return null;\n        }\n      }\n      SmallDocSet result = collectDocs(acceptContains);\n      nextTerm();\n      return result;\n    }\n\n","sourceOld":"    /** Gets docs on the leaf of the given cell, _if_ there is a leaf cell, otherwise null. */\n    private SmallDocSet getLeafDocs(Cell cell, Bits acceptContains) throws IOException {\n      assert cell.getTokenBytesNoLeaf(null).equals(termBytes);\n\n      if (termsEnum == null)\n        return null;\n      BytesRef nextTerm = termsEnum.next();\n      if (nextTerm == null) {\n        termsEnum = null;//signals all done\n        return null;\n      }\n      nextCell = grid.readCell(nextTerm, nextCell);\n      assert cell.isPrefixOf(nextCell);\n      if (nextCell.getLevel() == cell.getLevel() && nextCell.isLeaf()) {\n        return collectDocs(acceptContains);\n      } else {\n        return null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#getLeafDocs(Cell,Bits).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#getLeafDocs(Cell,Bits).mjava","sourceNew":"    /** Gets docs on the leaf of the given cell, _if_ there is a leaf cell, otherwise null. */\n    private SmallDocSet getLeafDocs(Cell cell, Bits acceptContains) throws IOException {\n      assert indexedCell.compareToNoLeaf(cell) == 0;\n      //Advance past prefix if we're at a prefix; return null if no leaf\n      if (!indexedCell.isLeaf()) {\n        if (!nextTerm() || !indexedCell.isLeaf() || indexedCell.getLevel() != cell.getLevel()) {\n          return null;\n        }\n      }\n      SmallDocSet result = collectDocs(acceptContains);\n      nextTerm();\n      return result;\n    }\n\n","sourceOld":"    /** Gets docs on the leaf of the given cell, _if_ there is a leaf cell, otherwise null. */\n    private SmallDocSet getLeafDocs(Cell cell, Bits acceptContains) throws IOException {\n      assert cell.getTokenBytesNoLeaf(null).equals(termBytes);\n\n      if (termsEnum == null)\n        return null;\n      BytesRef nextTerm = termsEnum.next();\n      if (nextTerm == null) {\n        termsEnum = null;//signals all done\n        return null;\n      }\n      nextCell = grid.readCell(nextTerm, nextCell);\n      assert cell.isPrefixOf(nextCell);\n      if (nextCell.getLevel() == cell.getLevel() && nextCell.isLeaf()) {\n        return collectDocs(acceptContains);\n      } else {\n        return null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"672b198fc3dce868916c727917cae58c2906763d","date":1443669960,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeQuery.ContainsVisitor#getLeafDocs(Cell,Bits).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#getLeafDocs(Cell,Bits).mjava","sourceNew":"    /** Gets docs on the leaf of the given cell, _if_ there is a leaf cell, otherwise null. */\n    private SmallDocSet getLeafDocs(Cell cell, Bits acceptContains) throws IOException {\n      assert indexedCell.compareToNoLeaf(cell) == 0;\n      //Advance past prefix if we're at a prefix; return null if no leaf\n      if (!indexedCell.isLeaf()) {\n        if (!nextTerm() || !indexedCell.isLeaf() || indexedCell.getLevel() != cell.getLevel()) {\n          return null;\n        }\n      }\n      SmallDocSet result = collectDocs(acceptContains);\n      nextTerm();\n      return result;\n    }\n\n","sourceOld":"    /** Gets docs on the leaf of the given cell, _if_ there is a leaf cell, otherwise null. */\n    private SmallDocSet getLeafDocs(Cell cell, Bits acceptContains) throws IOException {\n      assert indexedCell.compareToNoLeaf(cell) == 0;\n      //Advance past prefix if we're at a prefix; return null if no leaf\n      if (!indexedCell.isLeaf()) {\n        if (!nextTerm() || !indexedCell.isLeaf() || indexedCell.getLevel() != cell.getLevel()) {\n          return null;\n        }\n      }\n      SmallDocSet result = collectDocs(acceptContains);\n      nextTerm();\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["69da1c397a55d488a19e555c8da635417e2dfd47","0378a5fb14e1ef14d663bd48cdb3ba29a9053be9"],"0378a5fb14e1ef14d663bd48cdb3ba29a9053be9":["69da1c397a55d488a19e555c8da635417e2dfd47"],"c6c7011603e29f861f395fd2799b2ac2aa6e46da":["8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6"],"a52a496588fdabf2930f84b7839253fef004251f":["c6c7011603e29f861f395fd2799b2ac2aa6e46da"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a52a496588fdabf2930f84b7839253fef004251f","11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0"],"672b198fc3dce868916c727917cae58c2906763d":["11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0"],"69da1c397a55d488a19e555c8da635417e2dfd47":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["656f7931e8a3dc60676fe66839b7fa03afbe8098","4de14be4bd1b857ba37ca138b61c4661c6d1bed3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["37a0f60745e53927c4c876cfe5b5a58170f0646c"],"4de14be4bd1b857ba37ca138b61c4661c6d1bed3":["656f7931e8a3dc60676fe66839b7fa03afbe8098"],"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6":["4de14be4bd1b857ba37ca138b61c4661c6d1bed3"],"a957bf27202eab1c9ddabc5aa30c7a0db04bbf36":["c6c7011603e29f861f395fd2799b2ac2aa6e46da","a52a496588fdabf2930f84b7839253fef004251f"],"656f7931e8a3dc60676fe66839b7fa03afbe8098":["0378a5fb14e1ef14d663bd48cdb3ba29a9053be9"],"11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0":["a52a496588fdabf2930f84b7839253fef004251f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["672b198fc3dce868916c727917cae58c2906763d"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"0378a5fb14e1ef14d663bd48cdb3ba29a9053be9":["37a0f60745e53927c4c876cfe5b5a58170f0646c","656f7931e8a3dc60676fe66839b7fa03afbe8098"],"c6c7011603e29f861f395fd2799b2ac2aa6e46da":["a52a496588fdabf2930f84b7839253fef004251f","a957bf27202eab1c9ddabc5aa30c7a0db04bbf36"],"a52a496588fdabf2930f84b7839253fef004251f":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a957bf27202eab1c9ddabc5aa30c7a0db04bbf36","11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"69da1c397a55d488a19e555c8da635417e2dfd47":["37a0f60745e53927c4c876cfe5b5a58170f0646c","0378a5fb14e1ef14d663bd48cdb3ba29a9053be9"],"672b198fc3dce868916c727917cae58c2906763d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["69da1c397a55d488a19e555c8da635417e2dfd47"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"4de14be4bd1b857ba37ca138b61c4661c6d1bed3":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6"],"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6":["c6c7011603e29f861f395fd2799b2ac2aa6e46da"],"a957bf27202eab1c9ddabc5aa30c7a0db04bbf36":[],"656f7931e8a3dc60676fe66839b7fa03afbe8098":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","4de14be4bd1b857ba37ca138b61c4661c6d1bed3"],"11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","672b198fc3dce868916c727917cae58c2906763d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","15e323346eac5e4685c0a9f2df85eb96b4239bbb","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","a957bf27202eab1c9ddabc5aa30c7a0db04bbf36","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}