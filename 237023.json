{"path":"solr/core/src/java/org/apache/solr/update/UpdateLog#addOldLog(TransactionLog,boolean).mjava","commits":[{"id":"1a9e81d464930e5664da049442e2630d4b9b00d5","date":1330726364,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#addOldLog(TransactionLog,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#addOldLog(TransactionLog).mjava","sourceNew":"  /* Takes over ownership of the log, keeping it until no longer needed\n     and then decrementing it's reference and dropping it.\n   */\n  private void addOldLog(TransactionLog oldLog, boolean removeOld) {\n    if (oldLog == null) return;\n\n    numOldRecords += oldLog.numRecords();\n\n    int currRecords = numOldRecords;\n\n    if (oldLog != tlog &&  tlog != null) {\n      currRecords += tlog.numRecords();\n    }\n\n    while (removeOld && logs.size() > 0) {\n      TransactionLog log = logs.peekLast();\n      int nrec = log.numRecords();\n      // remove oldest log if we don't need it to keep at least numRecordsToKeep, or if\n      // we already have the limit of 10 log files.\n      if (currRecords - nrec >= numRecordsToKeep || logs.size() >= 10) {\n        currRecords -= nrec;\n        numOldRecords -= nrec;\n        logs.removeLast().decref();  // dereference so it will be deleted when no longer in use\n        continue;\n      }\n\n      break;\n    }\n\n    // don't incref... we are taking ownership from the caller.\n    logs.addFirst(oldLog);\n  }\n\n","sourceOld":"  /* Takes over ownership of the log, keeping it until no longer needed\n     and then decrementing it's reference and dropping it.\n   */\n  private void addOldLog(TransactionLog oldLog) {\n    if (oldLog == null) return;\n\n    numOldRecords += oldLog.numRecords();\n\n    int currRecords = numOldRecords;\n\n    if (oldLog != tlog &&  tlog != null) {\n      currRecords += tlog.numRecords();\n    }\n\n    while (logs.size() > 0) {\n      TransactionLog log = logs.peekLast();\n      int nrec = log.numRecords();\n      // remove oldest log if we don't need it to keep at least numRecordsToKeep, or if\n      // we already have the limit of 10 log files.\n      if (currRecords - nrec >= numRecordsToKeep || logs.size() >= 10) {\n        currRecords -= nrec;\n        numOldRecords -= nrec;\n        logs.removeLast().decref();  // dereference so it will be deleted when no longer in use\n        continue;\n      }\n\n      break;\n    }\n\n    // don't incref... we are taking ownership from the caller.\n    logs.addFirst(oldLog);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#addOldLog(TransactionLog,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /* Takes over ownership of the log, keeping it until no longer needed\n     and then decrementing it's reference and dropping it.\n   */\n  private void addOldLog(TransactionLog oldLog, boolean removeOld) {\n    if (oldLog == null) return;\n\n    numOldRecords += oldLog.numRecords();\n\n    int currRecords = numOldRecords;\n\n    if (oldLog != tlog &&  tlog != null) {\n      currRecords += tlog.numRecords();\n    }\n\n    while (removeOld && logs.size() > 0) {\n      TransactionLog log = logs.peekLast();\n      int nrec = log.numRecords();\n      // remove oldest log if we don't need it to keep at least numRecordsToKeep, or if\n      // we already have the limit of 10 log files.\n      if (currRecords - nrec >= numRecordsToKeep || logs.size() >= 10) {\n        currRecords -= nrec;\n        numOldRecords -= nrec;\n        logs.removeLast().decref();  // dereference so it will be deleted when no longer in use\n        continue;\n      }\n\n      break;\n    }\n\n    // don't incref... we are taking ownership from the caller.\n    logs.addFirst(oldLog);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#addOldLog(TransactionLog,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#addOldLog(TransactionLog,boolean).mjava","sourceNew":"  /* Takes over ownership of the log, keeping it until no longer needed\n     and then decrementing it's reference and dropping it.\n   */\n  protected void addOldLog(TransactionLog oldLog, boolean removeOld) {\n    if (oldLog == null) return;\n\n    numOldRecords += oldLog.numRecords();\n\n    int currRecords = numOldRecords;\n\n    if (oldLog != tlog &&  tlog != null) {\n      currRecords += tlog.numRecords();\n    }\n\n    while (removeOld && logs.size() > 0) {\n      TransactionLog log = logs.peekLast();\n      int nrec = log.numRecords();\n      // remove oldest log if we don't need it to keep at least numRecordsToKeep, or if\n      // we already have the limit of 10 log files.\n      if (currRecords - nrec >= numRecordsToKeep || logs.size() >= 10) {\n        currRecords -= nrec;\n        numOldRecords -= nrec;\n        logs.removeLast().decref();  // dereference so it will be deleted when no longer in use\n        continue;\n      }\n\n      break;\n    }\n\n    // don't incref... we are taking ownership from the caller.\n    logs.addFirst(oldLog);\n  }\n\n","sourceOld":"  /* Takes over ownership of the log, keeping it until no longer needed\n     and then decrementing it's reference and dropping it.\n   */\n  private void addOldLog(TransactionLog oldLog, boolean removeOld) {\n    if (oldLog == null) return;\n\n    numOldRecords += oldLog.numRecords();\n\n    int currRecords = numOldRecords;\n\n    if (oldLog != tlog &&  tlog != null) {\n      currRecords += tlog.numRecords();\n    }\n\n    while (removeOld && logs.size() > 0) {\n      TransactionLog log = logs.peekLast();\n      int nrec = log.numRecords();\n      // remove oldest log if we don't need it to keep at least numRecordsToKeep, or if\n      // we already have the limit of 10 log files.\n      if (currRecords - nrec >= numRecordsToKeep || logs.size() >= 10) {\n        currRecords -= nrec;\n        numOldRecords -= nrec;\n        logs.removeLast().decref();  // dereference so it will be deleted when no longer in use\n        continue;\n      }\n\n      break;\n    }\n\n    // don't incref... we are taking ownership from the caller.\n    logs.addFirst(oldLog);\n  }\n\n","bugFix":null,"bugIntro":["e9e6da63da7e266acaa1ba99e1cd2016cb120a6a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#addOldLog(TransactionLog,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#addOldLog(TransactionLog,boolean).mjava","sourceNew":"  /* Takes over ownership of the log, keeping it until no longer needed\n     and then decrementing it's reference and dropping it.\n   */\n  protected void addOldLog(TransactionLog oldLog, boolean removeOld) {\n    if (oldLog == null) return;\n\n    numOldRecords += oldLog.numRecords();\n\n    int currRecords = numOldRecords;\n\n    if (oldLog != tlog &&  tlog != null) {\n      currRecords += tlog.numRecords();\n    }\n\n    while (removeOld && logs.size() > 0) {\n      TransactionLog log = logs.peekLast();\n      int nrec = log.numRecords();\n      // remove oldest log if we don't need it to keep at least numRecordsToKeep, or if\n      // we already have the limit of 10 log files.\n      if (currRecords - nrec >= numRecordsToKeep || logs.size() >= 10) {\n        currRecords -= nrec;\n        numOldRecords -= nrec;\n        logs.removeLast().decref();  // dereference so it will be deleted when no longer in use\n        continue;\n      }\n\n      break;\n    }\n\n    // don't incref... we are taking ownership from the caller.\n    logs.addFirst(oldLog);\n  }\n\n","sourceOld":"  /* Takes over ownership of the log, keeping it until no longer needed\n     and then decrementing it's reference and dropping it.\n   */\n  private void addOldLog(TransactionLog oldLog, boolean removeOld) {\n    if (oldLog == null) return;\n\n    numOldRecords += oldLog.numRecords();\n\n    int currRecords = numOldRecords;\n\n    if (oldLog != tlog &&  tlog != null) {\n      currRecords += tlog.numRecords();\n    }\n\n    while (removeOld && logs.size() > 0) {\n      TransactionLog log = logs.peekLast();\n      int nrec = log.numRecords();\n      // remove oldest log if we don't need it to keep at least numRecordsToKeep, or if\n      // we already have the limit of 10 log files.\n      if (currRecords - nrec >= numRecordsToKeep || logs.size() >= 10) {\n        currRecords -= nrec;\n        numOldRecords -= nrec;\n        logs.removeLast().decref();  // dereference so it will be deleted when no longer in use\n        continue;\n      }\n\n      break;\n    }\n\n    // don't incref... we are taking ownership from the caller.\n    logs.addFirst(oldLog);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9e6da63da7e266acaa1ba99e1cd2016cb120a6a","date":1413631141,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#addOldLog(TransactionLog,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#addOldLog(TransactionLog,boolean).mjava","sourceNew":"  /* Takes over ownership of the log, keeping it until no longer needed\n     and then decrementing it's reference and dropping it.\n   */\n  protected synchronized void addOldLog(TransactionLog oldLog, boolean removeOld) {\n    if (oldLog == null) return;\n\n    numOldRecords += oldLog.numRecords();\n\n    int currRecords = numOldRecords;\n\n    if (oldLog != tlog &&  tlog != null) {\n      currRecords += tlog.numRecords();\n    }\n\n    while (removeOld && logs.size() > 0) {\n      TransactionLog log = logs.peekLast();\n      int nrec = log.numRecords();\n      // remove oldest log if we don't need it to keep at least numRecordsToKeep, or if\n      // we already have the limit of 10 log files.\n      if (currRecords - nrec >= numRecordsToKeep || logs.size() >= 10) {\n        currRecords -= nrec;\n        numOldRecords -= nrec;\n        logs.removeLast().decref();  // dereference so it will be deleted when no longer in use\n        continue;\n      }\n\n      break;\n    }\n\n    // don't incref... we are taking ownership from the caller.\n    logs.addFirst(oldLog);\n  }\n\n","sourceOld":"  /* Takes over ownership of the log, keeping it until no longer needed\n     and then decrementing it's reference and dropping it.\n   */\n  protected void addOldLog(TransactionLog oldLog, boolean removeOld) {\n    if (oldLog == null) return;\n\n    numOldRecords += oldLog.numRecords();\n\n    int currRecords = numOldRecords;\n\n    if (oldLog != tlog &&  tlog != null) {\n      currRecords += tlog.numRecords();\n    }\n\n    while (removeOld && logs.size() > 0) {\n      TransactionLog log = logs.peekLast();\n      int nrec = log.numRecords();\n      // remove oldest log if we don't need it to keep at least numRecordsToKeep, or if\n      // we already have the limit of 10 log files.\n      if (currRecords - nrec >= numRecordsToKeep || logs.size() >= 10) {\n        currRecords -= nrec;\n        numOldRecords -= nrec;\n        logs.removeLast().decref();  // dereference so it will be deleted when no longer in use\n        continue;\n      }\n\n      break;\n    }\n\n    // don't incref... we are taking ownership from the caller.\n    logs.addFirst(oldLog);\n  }\n\n","bugFix":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#addOldLog(TransactionLog,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#addOldLog(TransactionLog,boolean).mjava","sourceNew":"  /* Takes over ownership of the log, keeping it until no longer needed\n     and then decrementing it's reference and dropping it.\n   */\n  protected synchronized void addOldLog(TransactionLog oldLog, boolean removeOld) {\n    if (oldLog == null) return;\n\n    numOldRecords += oldLog.numRecords();\n\n    int currRecords = numOldRecords;\n\n    if (oldLog != tlog &&  tlog != null) {\n      currRecords += tlog.numRecords();\n    }\n\n    while (removeOld && logs.size() > 0) {\n      TransactionLog log = logs.peekLast();\n      int nrec = log.numRecords();\n      // remove oldest log if we don't need it to keep at least numRecordsToKeep, or if\n      // we already have the limit of 10 log files.\n      if (currRecords - nrec >= numRecordsToKeep || logs.size() >= 10) {\n        currRecords -= nrec;\n        numOldRecords -= nrec;\n        logs.removeLast().decref();  // dereference so it will be deleted when no longer in use\n        continue;\n      }\n\n      break;\n    }\n\n    // don't incref... we are taking ownership from the caller.\n    logs.addFirst(oldLog);\n  }\n\n","sourceOld":"  /* Takes over ownership of the log, keeping it until no longer needed\n     and then decrementing it's reference and dropping it.\n   */\n  protected void addOldLog(TransactionLog oldLog, boolean removeOld) {\n    if (oldLog == null) return;\n\n    numOldRecords += oldLog.numRecords();\n\n    int currRecords = numOldRecords;\n\n    if (oldLog != tlog &&  tlog != null) {\n      currRecords += tlog.numRecords();\n    }\n\n    while (removeOld && logs.size() > 0) {\n      TransactionLog log = logs.peekLast();\n      int nrec = log.numRecords();\n      // remove oldest log if we don't need it to keep at least numRecordsToKeep, or if\n      // we already have the limit of 10 log files.\n      if (currRecords - nrec >= numRecordsToKeep || logs.size() >= 10) {\n        currRecords -= nrec;\n        numOldRecords -= nrec;\n        logs.removeLast().decref();  // dereference so it will be deleted when no longer in use\n        continue;\n      }\n\n      break;\n    }\n\n    // don't incref... we are taking ownership from the caller.\n    logs.addFirst(oldLog);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#addOldLog(TransactionLog,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#addOldLog(TransactionLog,boolean).mjava","sourceNew":"  /* Takes over ownership of the log, keeping it until no longer needed\n     and then decrementing its reference and dropping it.\n   */\n  protected synchronized void addOldLog(TransactionLog oldLog, boolean removeOld) {\n    if (oldLog == null) return;\n\n    numOldRecords += oldLog.numRecords();\n\n    int currRecords = numOldRecords;\n\n    if (oldLog != tlog &&  tlog != null) {\n      currRecords += tlog.numRecords();\n    }\n\n    while (removeOld && logs.size() > 0) {\n      TransactionLog log = logs.peekLast();\n      int nrec = log.numRecords();\n      // remove oldest log if we don't need it to keep at least numRecordsToKeep, or if\n      // we already have the limit of 10 log files.\n      if (currRecords - nrec >= numRecordsToKeep || logs.size() >= 10) {\n        currRecords -= nrec;\n        numOldRecords -= nrec;\n        logs.removeLast().decref();  // dereference so it will be deleted when no longer in use\n        continue;\n      }\n\n      break;\n    }\n\n    // don't incref... we are taking ownership from the caller.\n    logs.addFirst(oldLog);\n  }\n\n","sourceOld":"  /* Takes over ownership of the log, keeping it until no longer needed\n     and then decrementing it's reference and dropping it.\n   */\n  protected synchronized void addOldLog(TransactionLog oldLog, boolean removeOld) {\n    if (oldLog == null) return;\n\n    numOldRecords += oldLog.numRecords();\n\n    int currRecords = numOldRecords;\n\n    if (oldLog != tlog &&  tlog != null) {\n      currRecords += tlog.numRecords();\n    }\n\n    while (removeOld && logs.size() > 0) {\n      TransactionLog log = logs.peekLast();\n      int nrec = log.numRecords();\n      // remove oldest log if we don't need it to keep at least numRecordsToKeep, or if\n      // we already have the limit of 10 log files.\n      if (currRecords - nrec >= numRecordsToKeep || logs.size() >= 10) {\n        currRecords -= nrec;\n        numOldRecords -= nrec;\n        logs.removeLast().decref();  // dereference so it will be deleted when no longer in use\n        continue;\n      }\n\n      break;\n    }\n\n    // don't incref... we are taking ownership from the caller.\n    logs.addFirst(oldLog);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f3c1f22c5fe0011e187dac3151422365ae857f3","date":1425728437,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#addOldLog(TransactionLog,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#addOldLog(TransactionLog,boolean).mjava","sourceNew":"  /* Takes over ownership of the log, keeping it until no longer needed\n     and then decrementing its reference and dropping it.\n   */\n  protected synchronized void addOldLog(TransactionLog oldLog, boolean removeOld) {\n    if (oldLog == null) return;\n\n    numOldRecords += oldLog.numRecords();\n\n    int currRecords = numOldRecords;\n\n    if (oldLog != tlog &&  tlog != null) {\n      currRecords += tlog.numRecords();\n    }\n\n    while (removeOld && logs.size() > 0) {\n      TransactionLog log = logs.peekLast();\n      int nrec = log.numRecords();\n      // remove oldest log if we don't need it to keep at least numRecordsToKeep, or if\n      // we already have the limit of 10 log files.\n      if (currRecords - nrec >= numRecordsToKeep || (maxNumLogsToKeep > 0 && logs.size() >= maxNumLogsToKeep)) {\n        currRecords -= nrec;\n        numOldRecords -= nrec;\n        logs.removeLast().decref();  // dereference so it will be deleted when no longer in use\n        continue;\n      }\n\n      break;\n    }\n\n    // don't incref... we are taking ownership from the caller.\n    logs.addFirst(oldLog);\n  }\n\n","sourceOld":"  /* Takes over ownership of the log, keeping it until no longer needed\n     and then decrementing its reference and dropping it.\n   */\n  protected synchronized void addOldLog(TransactionLog oldLog, boolean removeOld) {\n    if (oldLog == null) return;\n\n    numOldRecords += oldLog.numRecords();\n\n    int currRecords = numOldRecords;\n\n    if (oldLog != tlog &&  tlog != null) {\n      currRecords += tlog.numRecords();\n    }\n\n    while (removeOld && logs.size() > 0) {\n      TransactionLog log = logs.peekLast();\n      int nrec = log.numRecords();\n      // remove oldest log if we don't need it to keep at least numRecordsToKeep, or if\n      // we already have the limit of 10 log files.\n      if (currRecords - nrec >= numRecordsToKeep || logs.size() >= 10) {\n        currRecords -= nrec;\n        numOldRecords -= nrec;\n        logs.removeLast().decref();  // dereference so it will be deleted when no longer in use\n        continue;\n      }\n\n      break;\n    }\n\n    // don't incref... we are taking ownership from the caller.\n    logs.addFirst(oldLog);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#addOldLog(TransactionLog,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#addOldLog(TransactionLog,boolean).mjava","sourceNew":"  /* Takes over ownership of the log, keeping it until no longer needed\n     and then decrementing its reference and dropping it.\n   */\n  protected synchronized void addOldLog(TransactionLog oldLog, boolean removeOld) {\n    if (oldLog == null) return;\n\n    numOldRecords += oldLog.numRecords();\n\n    int currRecords = numOldRecords;\n\n    if (oldLog != tlog &&  tlog != null) {\n      currRecords += tlog.numRecords();\n    }\n\n    while (removeOld && logs.size() > 0) {\n      TransactionLog log = logs.peekLast();\n      int nrec = log.numRecords();\n      // remove oldest log if we don't need it to keep at least numRecordsToKeep, or if\n      // we already have the limit of 10 log files.\n      if (currRecords - nrec >= numRecordsToKeep || (maxNumLogsToKeep > 0 && logs.size() >= maxNumLogsToKeep)) {\n        currRecords -= nrec;\n        numOldRecords -= nrec;\n        logs.removeLast().decref();  // dereference so it will be deleted when no longer in use\n        continue;\n      }\n\n      break;\n    }\n\n    // don't incref... we are taking ownership from the caller.\n    logs.addFirst(oldLog);\n  }\n\n","sourceOld":"  /* Takes over ownership of the log, keeping it until no longer needed\n     and then decrementing its reference and dropping it.\n   */\n  protected synchronized void addOldLog(TransactionLog oldLog, boolean removeOld) {\n    if (oldLog == null) return;\n\n    numOldRecords += oldLog.numRecords();\n\n    int currRecords = numOldRecords;\n\n    if (oldLog != tlog &&  tlog != null) {\n      currRecords += tlog.numRecords();\n    }\n\n    while (removeOld && logs.size() > 0) {\n      TransactionLog log = logs.peekLast();\n      int nrec = log.numRecords();\n      // remove oldest log if we don't need it to keep at least numRecordsToKeep, or if\n      // we already have the limit of 10 log files.\n      if (currRecords - nrec >= numRecordsToKeep || logs.size() >= 10) {\n        currRecords -= nrec;\n        numOldRecords -= nrec;\n        logs.removeLast().decref();  // dereference so it will be deleted when no longer in use\n        continue;\n      }\n\n      break;\n    }\n\n    // don't incref... we are taking ownership from the caller.\n    logs.addFirst(oldLog);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["1a9e81d464930e5664da049442e2630d4b9b00d5"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","6f3c1f22c5fe0011e187dac3151422365ae857f3"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["e9e6da63da7e266acaa1ba99e1cd2016cb120a6a"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["849494cf2f3a96af5c8c84995108ddd8456fcd04","e9e6da63da7e266acaa1ba99e1cd2016cb120a6a"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["1a9e81d464930e5664da049442e2630d4b9b00d5","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1a9e81d464930e5664da049442e2630d4b9b00d5"],"1a9e81d464930e5664da049442e2630d4b9b00d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6f3c1f22c5fe0011e187dac3151422365ae857f3":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"e9e6da63da7e266acaa1ba99e1cd2016cb120a6a":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6f3c1f22c5fe0011e187dac3151422365ae857f3"]},"commit2Childs":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","37a0f60745e53927c4c876cfe5b5a58170f0646c","e9e6da63da7e266acaa1ba99e1cd2016cb120a6a"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","6f3c1f22c5fe0011e187dac3151422365ae857f3"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"1a9e81d464930e5664da049442e2630d4b9b00d5":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","1a9e81d464930e5664da049442e2630d4b9b00d5"],"6f3c1f22c5fe0011e187dac3151422365ae857f3":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9e6da63da7e266acaa1ba99e1cd2016cb120a6a":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0a22eafe3f72a4c2945eaad9547e6c78816978f4","37a0f60745e53927c4c876cfe5b5a58170f0646c","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}