{"path":"src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,DirectoryFactory,SolrIndexConfig).mjava","commits":[{"id":"31f1e0aff124b03ebeca0a1de45361b8efd0d2d9","date":1226014899,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,DirectoryFactory,SolrIndexConfig).mjava","pathOld":"/dev/null","sourceNew":"  public static Directory getDirectory(String path, DirectoryFactory directoryFactory, SolrIndexConfig config) throws IOException {\n    \n    Directory d = directoryFactory.open(path);\n\n    String rawLockType = (null == config) ? null : config.lockType;\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + path + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase().trim();\n\n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      d.setLockFactory(new SimpleFSLockFactory(path));\n    } else if (\"native\".equals(lockType)) {\n      d.setLockFactory(new NativeFSLockFactory(path));\n    } else if (\"single\".equals(lockType)) {\n      if (!(d.getLockFactory() instanceof SingleInstanceLockFactory))\n        d.setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + path);      \n      d.setLockFactory(new NoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unrecognized lockType: \" + rawLockType);\n    }\n    return d;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,DirectoryFactory,SolrIndexConfig).mjava","pathOld":"src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,DirectoryFactory,SolrIndexConfig).mjava","sourceNew":"  public static Directory getDirectory(String path, DirectoryFactory directoryFactory, SolrIndexConfig config) throws IOException {\n    \n    Directory d = directoryFactory.open(path);\n\n    String rawLockType = (null == config) ? null : config.lockType;\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + path + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase().trim();\n\n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      d.setLockFactory(new SimpleFSLockFactory(path));\n    } else if (\"native\".equals(lockType)) {\n      d.setLockFactory(new NativeFSLockFactory(path));\n    } else if (\"single\".equals(lockType)) {\n      if (!(d.getLockFactory() instanceof SingleInstanceLockFactory))\n        d.setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + path);      \n      d.setLockFactory(new NoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unrecognized lockType: \" + rawLockType);\n    }\n    return d;\n  }\n\n","sourceOld":"  public static Directory getDirectory(String path, DirectoryFactory directoryFactory, SolrIndexConfig config) throws IOException {\n    \n    Directory d = directoryFactory.open(path);\n\n    String rawLockType = (null == config) ? null : config.lockType;\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + path + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase().trim();\n\n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      d.setLockFactory(new SimpleFSLockFactory(path));\n    } else if (\"native\".equals(lockType)) {\n      d.setLockFactory(new NativeFSLockFactory(path));\n    } else if (\"single\".equals(lockType)) {\n      if (!(d.getLockFactory() instanceof SingleInstanceLockFactory))\n        d.setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + path);      \n      d.setLockFactory(new NoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unrecognized lockType: \" + rawLockType);\n    }\n    return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["31f1e0aff124b03ebeca0a1de45361b8efd0d2d9"],"31f1e0aff124b03ebeca0a1de45361b8efd0d2d9":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["31f1e0aff124b03ebeca0a1de45361b8efd0d2d9"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"31f1e0aff124b03ebeca0a1de45361b8efd0d2d9":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}