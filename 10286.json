{"path":"lucene/src/java/org/apache/lucene/search/FieldDocSortedHitQueue#lessThan(FieldDoc,FieldDoc).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldDocSortedHitQueue#lessThan(FieldDoc,FieldDoc).mjava","pathOld":"src/java/org/apache/lucene/search/FieldDocSortedHitQueue#lessThan(FieldDoc,FieldDoc).mjava","sourceNew":"  /**\n   * Returns whether <code>a</code> is less relevant than <code>b</code>.\n   * @param a ScoreDoc\n   * @param b ScoreDoc\n   * @return <code>true</code> if document <code>a</code> should be sorted after document <code>b</code>.\n   */\n  @SuppressWarnings(\"unchecked\") @Override\n  protected final boolean lessThan(final FieldDoc docA, final FieldDoc docB) {\n    final int n = fields.length;\n    int c = 0;\n    for (int i=0; i<n && c==0; ++i) {\n      final int type = fields[i].getType();\n      if (type == SortField.STRING) {\n        final String s1 = (String) docA.fields[i];\n        final String s2 = (String) docB.fields[i];\n        // null values need to be sorted first, because of how FieldCache.getStringIndex()\n        // works - in that routine, any documents without a value in the given field are\n        // put first.  If both are null, the next SortField is used\n        if (s1 == null) {\n          c = (s2 == null) ? 0 : -1;\n        } else if (s2 == null) {\n          c = 1;\n        } else if (fields[i].getLocale() == null) {\n          c = s1.compareTo(s2);\n        } else {\n          c = collators[i].compare(s1, s2);\n        }\n      } else {\n        c = docA.fields[i].compareTo(docB.fields[i]);\n        if (type == SortField.SCORE) {\n          c = -c;\n        }\n      }\n      // reverse sort\n      if (fields[i].getReverse()) {\n        c = -c;\n      }\n    }\n\n    // avoid random sort order that could lead to duplicates (bug #31241):\n    if (c == 0)\n      return docA.doc > docB.doc;\n\n    return c > 0;\n  }\n\n","sourceOld":"  /**\n   * Returns whether <code>a</code> is less relevant than <code>b</code>.\n   * @param a ScoreDoc\n   * @param b ScoreDoc\n   * @return <code>true</code> if document <code>a</code> should be sorted after document <code>b</code>.\n   */\n  @SuppressWarnings(\"unchecked\") @Override\n  protected final boolean lessThan(final FieldDoc docA, final FieldDoc docB) {\n    final int n = fields.length;\n    int c = 0;\n    for (int i=0; i<n && c==0; ++i) {\n      final int type = fields[i].getType();\n      if (type == SortField.STRING) {\n        final String s1 = (String) docA.fields[i];\n        final String s2 = (String) docB.fields[i];\n        // null values need to be sorted first, because of how FieldCache.getStringIndex()\n        // works - in that routine, any documents without a value in the given field are\n        // put first.  If both are null, the next SortField is used\n        if (s1 == null) {\n          c = (s2 == null) ? 0 : -1;\n        } else if (s2 == null) {\n          c = 1;\n        } else if (fields[i].getLocale() == null) {\n          c = s1.compareTo(s2);\n        } else {\n          c = collators[i].compare(s1, s2);\n        }\n      } else {\n        c = docA.fields[i].compareTo(docB.fields[i]);\n        if (type == SortField.SCORE) {\n          c = -c;\n        }\n      }\n      // reverse sort\n      if (fields[i].getReverse()) {\n        c = -c;\n      }\n    }\n\n    // avoid random sort order that could lead to duplicates (bug #31241):\n    if (c == 0)\n      return docA.doc > docB.doc;\n\n    return c > 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be20f9fed1d3edcb1c84abcc39df87a90fab22df","date":1275590285,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldDocSortedHitQueue#lessThan(FieldDoc,FieldDoc).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldDocSortedHitQueue#lessThan(FieldDoc,FieldDoc).mjava","sourceNew":"  /**\n   * Returns whether <code>a</code> is less relevant than <code>b</code>.\n   * @param a ScoreDoc\n   * @param b ScoreDoc\n   * @return <code>true</code> if document <code>a</code> should be sorted after document <code>b</code>.\n   */\n  @SuppressWarnings(\"unchecked\") @Override\n  protected final boolean lessThan(final FieldDoc docA, final FieldDoc docB) {\n    final int n = fields.length;\n    int c = 0;\n    for (int i=0; i<n && c==0; ++i) {\n      final int type = fields[i].getType();\n      if (type == SortField.STRING) {\n        final BytesRef s1 = (BytesRef) docA.fields[i];\n        final BytesRef s2 = (BytesRef) docB.fields[i];\n        // null values need to be sorted first, because of how FieldCache.getStringIndex()\n        // works - in that routine, any documents without a value in the given field are\n        // put first.  If both are null, the next SortField is used\n        if (s1 == null) {\n          c = (s2 == null) ? 0 : -1;\n        } else if (s2 == null) {\n          c = 1;\n        } else if (fields[i].getLocale() == null) {\n          c = s1.compareTo(s2);\n        } else {\n          c = collators[i].compare(s1.utf8ToString(), s2.utf8ToString());\n        }\n      } else {\n        c = docA.fields[i].compareTo(docB.fields[i]);\n        if (type == SortField.SCORE) {\n          c = -c;\n        }\n      }\n      // reverse sort\n      if (fields[i].getReverse()) {\n        c = -c;\n      }\n    }\n\n    // avoid random sort order that could lead to duplicates (bug #31241):\n    if (c == 0)\n      return docA.doc > docB.doc;\n\n    return c > 0;\n  }\n\n","sourceOld":"  /**\n   * Returns whether <code>a</code> is less relevant than <code>b</code>.\n   * @param a ScoreDoc\n   * @param b ScoreDoc\n   * @return <code>true</code> if document <code>a</code> should be sorted after document <code>b</code>.\n   */\n  @SuppressWarnings(\"unchecked\") @Override\n  protected final boolean lessThan(final FieldDoc docA, final FieldDoc docB) {\n    final int n = fields.length;\n    int c = 0;\n    for (int i=0; i<n && c==0; ++i) {\n      final int type = fields[i].getType();\n      if (type == SortField.STRING) {\n        final String s1 = (String) docA.fields[i];\n        final String s2 = (String) docB.fields[i];\n        // null values need to be sorted first, because of how FieldCache.getStringIndex()\n        // works - in that routine, any documents without a value in the given field are\n        // put first.  If both are null, the next SortField is used\n        if (s1 == null) {\n          c = (s2 == null) ? 0 : -1;\n        } else if (s2 == null) {\n          c = 1;\n        } else if (fields[i].getLocale() == null) {\n          c = s1.compareTo(s2);\n        } else {\n          c = collators[i].compare(s1, s2);\n        }\n      } else {\n        c = docA.fields[i].compareTo(docB.fields[i]);\n        if (type == SortField.SCORE) {\n          c = -c;\n        }\n      }\n      // reverse sort\n      if (fields[i].getReverse()) {\n        c = -c;\n      }\n    }\n\n    // avoid random sort order that could lead to duplicates (bug #31241):\n    if (c == 0)\n      return docA.doc > docB.doc;\n\n    return c > 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e492fb0f2bb0b4b47208286f9331ff55963c656","date":1298870150,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldDocSortedHitQueue#lessThan(FieldDoc,FieldDoc).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldDocSortedHitQueue#lessThan(FieldDoc,FieldDoc).mjava","sourceNew":"  /**\n   * Returns whether <code>a</code> is less relevant than <code>b</code>.\n   * @param a ScoreDoc\n   * @param b ScoreDoc\n   * @return <code>true</code> if document <code>a</code> should be sorted after document <code>b</code>.\n   */\n  @SuppressWarnings(\"unchecked\") @Override\n  protected final boolean lessThan(final FieldDoc docA, final FieldDoc docB) {\n    final int n = fields.length;\n    int c = 0;\n    for (int i=0; i<n && c==0; ++i) {\n      final int type = fields[i].getType();\n      if (type == SortField.STRING) {\n        final BytesRef s1 = (BytesRef) docA.fields[i];\n        final BytesRef s2 = (BytesRef) docB.fields[i];\n        // null values need to be sorted first, because of how FieldCache.getStringIndex()\n        // works - in that routine, any documents without a value in the given field are\n        // put first.  If both are null, the next SortField is used\n        if (s1 == null) {\n          c = (s2 == null) ? 0 : -1;\n        } else if (s2 == null) {\n          c = 1;\n        } else {\n          c = s1.compareTo(s2);\n        } \n      } else {\n        c = docA.fields[i].compareTo(docB.fields[i]);\n        if (type == SortField.SCORE) {\n          c = -c;\n        }\n      }\n      // reverse sort\n      if (fields[i].getReverse()) {\n        c = -c;\n      }\n    }\n\n    // avoid random sort order that could lead to duplicates (bug #31241):\n    if (c == 0)\n      return docA.doc > docB.doc;\n\n    return c > 0;\n  }\n\n","sourceOld":"  /**\n   * Returns whether <code>a</code> is less relevant than <code>b</code>.\n   * @param a ScoreDoc\n   * @param b ScoreDoc\n   * @return <code>true</code> if document <code>a</code> should be sorted after document <code>b</code>.\n   */\n  @SuppressWarnings(\"unchecked\") @Override\n  protected final boolean lessThan(final FieldDoc docA, final FieldDoc docB) {\n    final int n = fields.length;\n    int c = 0;\n    for (int i=0; i<n && c==0; ++i) {\n      final int type = fields[i].getType();\n      if (type == SortField.STRING) {\n        final BytesRef s1 = (BytesRef) docA.fields[i];\n        final BytesRef s2 = (BytesRef) docB.fields[i];\n        // null values need to be sorted first, because of how FieldCache.getStringIndex()\n        // works - in that routine, any documents without a value in the given field are\n        // put first.  If both are null, the next SortField is used\n        if (s1 == null) {\n          c = (s2 == null) ? 0 : -1;\n        } else if (s2 == null) {\n          c = 1;\n        } else if (fields[i].getLocale() == null) {\n          c = s1.compareTo(s2);\n        } else {\n          c = collators[i].compare(s1.utf8ToString(), s2.utf8ToString());\n        }\n      } else {\n        c = docA.fields[i].compareTo(docB.fields[i]);\n        if (type == SortField.SCORE) {\n          c = -c;\n        }\n      }\n      // reverse sort\n      if (fields[i].getReverse()) {\n        c = -c;\n      }\n    }\n\n    // avoid random sort order that could lead to duplicates (bug #31241):\n    if (c == 0)\n      return docA.doc > docB.doc;\n\n    return c > 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d868f38e751225153684493f6a89d784835297bd","date":1299017203,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/FieldDocSortedHitQueue#lessThan(FieldDoc,FieldDoc).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns whether <code>a</code> is less relevant than <code>b</code>.\n   * @param a ScoreDoc\n   * @param b ScoreDoc\n   * @return <code>true</code> if document <code>a</code> should be sorted after document <code>b</code>.\n   */\n  @SuppressWarnings(\"unchecked\") @Override\n  protected final boolean lessThan(final FieldDoc docA, final FieldDoc docB) {\n    final int n = fields.length;\n    int c = 0;\n    for (int i=0; i<n && c==0; ++i) {\n      final int type = fields[i].getType();\n      if (type == SortField.STRING) {\n        final BytesRef s1 = (BytesRef) docA.fields[i];\n        final BytesRef s2 = (BytesRef) docB.fields[i];\n        // null values need to be sorted first, because of how FieldCache.getStringIndex()\n        // works - in that routine, any documents without a value in the given field are\n        // put first.  If both are null, the next SortField is used\n        if (s1 == null) {\n          c = (s2 == null) ? 0 : -1;\n        } else if (s2 == null) {\n          c = 1;\n        } else {\n          c = s1.compareTo(s2);\n        } \n      } else {\n        c = docA.fields[i].compareTo(docB.fields[i]);\n        if (type == SortField.SCORE) {\n          c = -c;\n        }\n      }\n      // reverse sort\n      if (fields[i].getReverse()) {\n        c = -c;\n      }\n    }\n\n    // avoid random sort order that could lead to duplicates (bug #31241):\n    if (c == 0)\n      return docA.doc > docB.doc;\n\n    return c > 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/FieldDocSortedHitQueue#lessThan(FieldDoc,FieldDoc).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns whether <code>a</code> is less relevant than <code>b</code>.\n   * @param a ScoreDoc\n   * @param b ScoreDoc\n   * @return <code>true</code> if document <code>a</code> should be sorted after document <code>b</code>.\n   */\n  @SuppressWarnings(\"unchecked\") @Override\n  protected final boolean lessThan(final FieldDoc docA, final FieldDoc docB) {\n    final int n = fields.length;\n    int c = 0;\n    for (int i=0; i<n && c==0; ++i) {\n      final int type = fields[i].getType();\n      if (type == SortField.STRING) {\n        final BytesRef s1 = (BytesRef) docA.fields[i];\n        final BytesRef s2 = (BytesRef) docB.fields[i];\n        // null values need to be sorted first, because of how FieldCache.getStringIndex()\n        // works - in that routine, any documents without a value in the given field are\n        // put first.  If both are null, the next SortField is used\n        if (s1 == null) {\n          c = (s2 == null) ? 0 : -1;\n        } else if (s2 == null) {\n          c = 1;\n        } else if (fields[i].getLocale() == null) {\n          c = s1.compareTo(s2);\n        } else {\n          c = collators[i].compare(s1.utf8ToString(), s2.utf8ToString());\n        }\n      } else {\n        c = docA.fields[i].compareTo(docB.fields[i]);\n        if (type == SortField.SCORE) {\n          c = -c;\n        }\n      }\n      // reverse sort\n      if (fields[i].getReverse()) {\n        c = -c;\n      }\n    }\n\n    // avoid random sort order that could lead to duplicates (bug #31241):\n    if (c == 0)\n      return docA.doc > docB.doc;\n\n    return c > 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/FieldDocSortedHitQueue#lessThan(FieldDoc,FieldDoc).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns whether <code>a</code> is less relevant than <code>b</code>.\n   * @param a ScoreDoc\n   * @param b ScoreDoc\n   * @return <code>true</code> if document <code>a</code> should be sorted after document <code>b</code>.\n   */\n  @SuppressWarnings(\"unchecked\") @Override\n  protected final boolean lessThan(final FieldDoc docA, final FieldDoc docB) {\n    final int n = fields.length;\n    int c = 0;\n    for (int i=0; i<n && c==0; ++i) {\n      final int type = fields[i].getType();\n      if (type == SortField.STRING) {\n        final BytesRef s1 = (BytesRef) docA.fields[i];\n        final BytesRef s2 = (BytesRef) docB.fields[i];\n        // null values need to be sorted first, because of how FieldCache.getStringIndex()\n        // works - in that routine, any documents without a value in the given field are\n        // put first.  If both are null, the next SortField is used\n        if (s1 == null) {\n          c = (s2 == null) ? 0 : -1;\n        } else if (s2 == null) {\n          c = 1;\n        } else if (fields[i].getLocale() == null) {\n          c = s1.compareTo(s2);\n        } else {\n          c = collators[i].compare(s1.utf8ToString(), s2.utf8ToString());\n        }\n      } else {\n        c = docA.fields[i].compareTo(docB.fields[i]);\n        if (type == SortField.SCORE) {\n          c = -c;\n        }\n      }\n      // reverse sort\n      if (fields[i].getReverse()) {\n        c = -c;\n      }\n    }\n\n    // avoid random sort order that could lead to duplicates (bug #31241):\n    if (c == 0)\n      return docA.doc > docB.doc;\n\n    return c > 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["be20f9fed1d3edcb1c84abcc39df87a90fab22df","d868f38e751225153684493f6a89d784835297bd"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["be20f9fed1d3edcb1c84abcc39df87a90fab22df","d868f38e751225153684493f6a89d784835297bd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"d868f38e751225153684493f6a89d784835297bd":["3e492fb0f2bb0b4b47208286f9331ff55963c656"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d868f38e751225153684493f6a89d784835297bd"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["d868f38e751225153684493f6a89d784835297bd"],"d868f38e751225153684493f6a89d784835297bd":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}