{"path":"modules/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/LaoBreakIterator#clone().mjava","commits":[{"id":"b441220ceb933f50f32318ab45acc05d5943f3aa","date":1274352360,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/LaoBreakIterator#clone().mjava","pathOld":"lucene/contrib/icu/src/java/org/apache/lucene/analysis/icu/segmentation/LaoBreakIterator#clone().mjava","sourceNew":"  /**\n   * Clone method.  Creates another LaoBreakIterator with the same behavior \n   * and current state as this one.\n   * @return The clone.\n   */\n  @Override\n  public Object clone() {\n    LaoBreakIterator other = (LaoBreakIterator) super.clone();\n    other.rules = (RuleBasedBreakIterator) rules.clone();\n    other.verify = (RuleBasedBreakIterator) verify.clone();\n    if (text != null)\n      other.text = (CharArrayIterator) text.clone();\n    if (working != null)\n      other.working = (CharArrayIterator) working.clone();\n    if (verifyText != null)\n      other.verifyText = (CharArrayIterator) verifyText.clone();\n    return other;\n  }\n\n","sourceOld":"  /**\n   * Clone method.  Creates another LaoBreakIterator with the same behavior \n   * and current state as this one.\n   * @return The clone.\n   */\n  @Override\n  public Object clone() {\n    LaoBreakIterator other = (LaoBreakIterator) super.clone();\n    other.rules = (RuleBasedBreakIterator) rules.clone();\n    other.verify = (RuleBasedBreakIterator) verify.clone();\n    if (text != null)\n      other.text = (CharArrayIterator) text.clone();\n    if (working != null)\n      other.working = (CharArrayIterator) working.clone();\n    if (verifyText != null)\n      other.verifyText = (CharArrayIterator) verifyText.clone();\n    return other;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5bf508bfc98425280b4bb708ab724f718705c9d","date":1332973345,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/LaoBreakIterator#clone().mjava","pathOld":"modules/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/LaoBreakIterator#clone().mjava","sourceNew":"  /**\n   * Clone method.  Creates another LaoBreakIterator with the same behavior \n   * and current state as this one.\n   * @return The clone.\n   */\n  @Override\n  public LaoBreakIterator clone() {\n    LaoBreakIterator other = (LaoBreakIterator) super.clone();\n    other.rules = (RuleBasedBreakIterator) rules.clone();\n    other.verify = (RuleBasedBreakIterator) verify.clone();\n    if (text != null)\n      other.text = (CharArrayIterator) text.clone();\n    if (working != null)\n      other.working = (CharArrayIterator) working.clone();\n    if (verifyText != null)\n      other.verifyText = (CharArrayIterator) verifyText.clone();\n    return other;\n  }\n\n","sourceOld":"  /**\n   * Clone method.  Creates another LaoBreakIterator with the same behavior \n   * and current state as this one.\n   * @return The clone.\n   */\n  @Override\n  public Object clone() {\n    LaoBreakIterator other = (LaoBreakIterator) super.clone();\n    other.rules = (RuleBasedBreakIterator) rules.clone();\n    other.verify = (RuleBasedBreakIterator) verify.clone();\n    if (text != null)\n      other.text = (CharArrayIterator) text.clone();\n    if (working != null)\n      other.working = (CharArrayIterator) working.clone();\n    if (verifyText != null)\n      other.verifyText = (CharArrayIterator) verifyText.clone();\n    return other;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"399d5903979ca52514d2bc7e3a362e1c45885c94","date":1333042474,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/LaoBreakIterator#clone().mjava","pathOld":"modules/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/LaoBreakIterator#clone().mjava","sourceNew":"  /**\n   * Clone method.  Creates another LaoBreakIterator with the same behavior \n   * and current state as this one.\n   * @return The clone.\n   */\n  @Override\n  public LaoBreakIterator clone() {\n    LaoBreakIterator other = (LaoBreakIterator) super.clone();\n    other.rules = (RuleBasedBreakIterator) rules.clone();\n    other.verify = (RuleBasedBreakIterator) verify.clone();\n    if (text != null)\n      other.text = text.clone();\n    if (working != null)\n      other.working = working.clone();\n    if (verifyText != null)\n      other.verifyText = verifyText.clone();\n    return other;\n  }\n\n","sourceOld":"  /**\n   * Clone method.  Creates another LaoBreakIterator with the same behavior \n   * and current state as this one.\n   * @return The clone.\n   */\n  @Override\n  public LaoBreakIterator clone() {\n    LaoBreakIterator other = (LaoBreakIterator) super.clone();\n    other.rules = (RuleBasedBreakIterator) rules.clone();\n    other.verify = (RuleBasedBreakIterator) verify.clone();\n    if (text != null)\n      other.text = (CharArrayIterator) text.clone();\n    if (working != null)\n      other.working = (CharArrayIterator) working.clone();\n    if (verifyText != null)\n      other.verifyText = (CharArrayIterator) verifyText.clone();\n    return other;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/LaoBreakIterator#clone().mjava","pathOld":"modules/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/LaoBreakIterator#clone().mjava","sourceNew":"  /**\n   * Clone method.  Creates another LaoBreakIterator with the same behavior \n   * and current state as this one.\n   * @return The clone.\n   */\n  @Override\n  public LaoBreakIterator clone() {\n    LaoBreakIterator other = (LaoBreakIterator) super.clone();\n    other.rules = (RuleBasedBreakIterator) rules.clone();\n    other.verify = (RuleBasedBreakIterator) verify.clone();\n    if (text != null)\n      other.text = text.clone();\n    if (working != null)\n      other.working = working.clone();\n    if (verifyText != null)\n      other.verifyText = verifyText.clone();\n    return other;\n  }\n\n","sourceOld":"  /**\n   * Clone method.  Creates another LaoBreakIterator with the same behavior \n   * and current state as this one.\n   * @return The clone.\n   */\n  @Override\n  public LaoBreakIterator clone() {\n    LaoBreakIterator other = (LaoBreakIterator) super.clone();\n    other.rules = (RuleBasedBreakIterator) rules.clone();\n    other.verify = (RuleBasedBreakIterator) verify.clone();\n    if (text != null)\n      other.text = text.clone();\n    if (working != null)\n      other.working = working.clone();\n    if (verifyText != null)\n      other.verifyText = verifyText.clone();\n    return other;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["399d5903979ca52514d2bc7e3a362e1c45885c94"],"b441220ceb933f50f32318ab45acc05d5943f3aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"399d5903979ca52514d2bc7e3a362e1c45885c94":["f5bf508bfc98425280b4bb708ab724f718705c9d"],"f5bf508bfc98425280b4bb708ab724f718705c9d":["b441220ceb933f50f32318ab45acc05d5943f3aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b441220ceb933f50f32318ab45acc05d5943f3aa":["f5bf508bfc98425280b4bb708ab724f718705c9d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b441220ceb933f50f32318ab45acc05d5943f3aa"],"399d5903979ca52514d2bc7e3a362e1c45885c94":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"f5bf508bfc98425280b4bb708ab724f718705c9d":["399d5903979ca52514d2bc7e3a362e1c45885c94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}