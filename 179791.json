{"path":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieRangeFilter#splitRange(IndexReader,TermDocs,OpenBitSet,String,boolean,String,boolean).mjava","commits":[{"id":"29191e6ce86bfcd231cd069834a87833fa4079c1","date":1228333111,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieRangeFilter#splitRange(IndexReader,TermDocs,OpenBitSet,String,boolean,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"\t/** Splits range recursively (and returns number of terms) */\n\tprivate int splitRange(\n\t\tfinal IndexReader reader, final TermDocs termDocs, final OpenBitSet bits,\n\t\tfinal String min, final boolean lowerBoundOpen, final String max, final boolean upperBoundOpen\n\t) throws IOException {\n\t\tint count=0;\n\t\tfinal int length=min.length();\n\t\tfinal String minShort=lowerBoundOpen ? min.substring(0,length-1) : trieVariant.incrementTrieCoded(min.substring(0,length-1));\n\t\tfinal String maxShort=upperBoundOpen ? max.substring(0,length-1) : trieVariant.decrementTrieCoded(max.substring(0,length-1));\n\n\t\tif (length==1 || minShort.compareTo(maxShort)>=0) {\n\t\t\t// we are in the lowest precision or the current precision is not existent\n\t\t\tcount+=setBits(reader, termDocs, bits, min, max);\n\t\t} else {\n\t\t\t// Avoid too much seeking: first go deeper into lower precision\n\t\t\t// (in IndexReader's TermEnum these terms are earlier).\n\t\t\t// Do this only, if the current length is not trieVariant.TRIE_CODED_LENGTH (not full precision),\n\t\t\t// because terms from the highest prec come before all lower prec terms\n\t\t\t// (because the field name is ordered before the suffixed one).\n\t\t\tif (length!=trieVariant.TRIE_CODED_LENGTH) count+=splitRange(\n\t\t\t\treader,termDocs,bits,\n\t\t\t\tminShort,lowerBoundOpen,\n\t\t\t\tmaxShort,upperBoundOpen\n\t\t\t);\n\t\t\t// Avoid too much seeking: set bits for lower part of current (higher) precision.\n\t\t\t// These terms come later in IndexReader's TermEnum.\n\t\t\tif (!lowerBoundOpen) {\n\t\t\t\tcount+=setBits(reader, termDocs, bits, min, trieVariant.decrementTrieCoded(minShort+trieVariant.TRIE_CODED_SYMBOL_MIN));\n\t\t\t}\n\t\t\t// Avoid too much seeking: set bits for upper part of current precision.\n\t\t\t// These terms come later in IndexReader's TermEnum.\n\t\t\tif (!upperBoundOpen) {\n\t\t\t\tcount+=setBits(reader, termDocs, bits, trieVariant.incrementTrieCoded(maxShort+trieVariant.TRIE_CODED_SYMBOL_MAX), max);\n\t\t\t}\n\t\t\t// If the first step (see above) was not done (because length==trieVariant.TRIE_CODED_LENGTH) we do it now.\n\t\t\tif (length==trieVariant.TRIE_CODED_LENGTH) count+=splitRange(\n\t\t\t\treader,termDocs,bits,\n\t\t\t\tminShort,lowerBoundOpen,\n\t\t\t\tmaxShort,upperBoundOpen\n\t\t\t);\n\t\t}\n\t\treturn count;\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ef14ec05032a847f9ce1820055c6c29f72d771a","date":1231669514,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieRangeFilter#splitRange(IndexReader,TermDocs,OpenBitSet,String,boolean,String,boolean).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieRangeFilter#splitRange(IndexReader,TermDocs,OpenBitSet,String,boolean,String,boolean).mjava","sourceNew":"  /** Splits range recursively (and returns number of terms) */\n  private int splitRange(\n    final IndexReader reader, final TermDocs termDocs, final OpenBitSet bits,\n    final String min, final boolean lowerBoundOpen, final String max, final boolean upperBoundOpen\n  ) throws IOException {\n    int count=0;\n    final int length=min.length();\n    final String minShort=lowerBoundOpen ? min.substring(0,length-1) : trieVariant.incrementTrieCoded(min.substring(0,length-1));\n    final String maxShort=upperBoundOpen ? max.substring(0,length-1) : trieVariant.decrementTrieCoded(max.substring(0,length-1));\n\n    if (length==1 || minShort.compareTo(maxShort)>=0) {\n      // we are in the lowest precision or the current precision is not existent\n      count+=setBits(reader, termDocs, bits, min, max);\n    } else {\n      // Avoid too much seeking: first go deeper into lower precision\n      // (in IndexReader's TermEnum these terms are earlier).\n      // Do this only, if the current length is not trieVariant.TRIE_CODED_LENGTH (not full precision),\n      // because terms from the highest prec come before all lower prec terms\n      // (because the field name is ordered before the suffixed one).\n      if (length!=trieVariant.TRIE_CODED_LENGTH) count+=splitRange(\n        reader,termDocs,bits,\n        minShort,lowerBoundOpen,\n        maxShort,upperBoundOpen\n      );\n      // Avoid too much seeking: set bits for lower part of current (higher) precision.\n      // These terms come later in IndexReader's TermEnum.\n      if (!lowerBoundOpen) {\n        count+=setBits(reader, termDocs, bits, min, trieVariant.decrementTrieCoded(minShort+trieVariant.TRIE_CODED_SYMBOL_MIN));\n      }\n      // Avoid too much seeking: set bits for upper part of current precision.\n      // These terms come later in IndexReader's TermEnum.\n      if (!upperBoundOpen) {\n        count+=setBits(reader, termDocs, bits, trieVariant.incrementTrieCoded(maxShort+trieVariant.TRIE_CODED_SYMBOL_MAX), max);\n      }\n      // If the first step (see above) was not done (because length==trieVariant.TRIE_CODED_LENGTH) we do it now.\n      if (length==trieVariant.TRIE_CODED_LENGTH) count+=splitRange(\n        reader,termDocs,bits,\n        minShort,lowerBoundOpen,\n        maxShort,upperBoundOpen\n      );\n    }\n    return count;\n  }\n\n","sourceOld":"\t/** Splits range recursively (and returns number of terms) */\n\tprivate int splitRange(\n\t\tfinal IndexReader reader, final TermDocs termDocs, final OpenBitSet bits,\n\t\tfinal String min, final boolean lowerBoundOpen, final String max, final boolean upperBoundOpen\n\t) throws IOException {\n\t\tint count=0;\n\t\tfinal int length=min.length();\n\t\tfinal String minShort=lowerBoundOpen ? min.substring(0,length-1) : trieVariant.incrementTrieCoded(min.substring(0,length-1));\n\t\tfinal String maxShort=upperBoundOpen ? max.substring(0,length-1) : trieVariant.decrementTrieCoded(max.substring(0,length-1));\n\n\t\tif (length==1 || minShort.compareTo(maxShort)>=0) {\n\t\t\t// we are in the lowest precision or the current precision is not existent\n\t\t\tcount+=setBits(reader, termDocs, bits, min, max);\n\t\t} else {\n\t\t\t// Avoid too much seeking: first go deeper into lower precision\n\t\t\t// (in IndexReader's TermEnum these terms are earlier).\n\t\t\t// Do this only, if the current length is not trieVariant.TRIE_CODED_LENGTH (not full precision),\n\t\t\t// because terms from the highest prec come before all lower prec terms\n\t\t\t// (because the field name is ordered before the suffixed one).\n\t\t\tif (length!=trieVariant.TRIE_CODED_LENGTH) count+=splitRange(\n\t\t\t\treader,termDocs,bits,\n\t\t\t\tminShort,lowerBoundOpen,\n\t\t\t\tmaxShort,upperBoundOpen\n\t\t\t);\n\t\t\t// Avoid too much seeking: set bits for lower part of current (higher) precision.\n\t\t\t// These terms come later in IndexReader's TermEnum.\n\t\t\tif (!lowerBoundOpen) {\n\t\t\t\tcount+=setBits(reader, termDocs, bits, min, trieVariant.decrementTrieCoded(minShort+trieVariant.TRIE_CODED_SYMBOL_MIN));\n\t\t\t}\n\t\t\t// Avoid too much seeking: set bits for upper part of current precision.\n\t\t\t// These terms come later in IndexReader's TermEnum.\n\t\t\tif (!upperBoundOpen) {\n\t\t\t\tcount+=setBits(reader, termDocs, bits, trieVariant.incrementTrieCoded(maxShort+trieVariant.TRIE_CODED_SYMBOL_MAX), max);\n\t\t\t}\n\t\t\t// If the first step (see above) was not done (because length==trieVariant.TRIE_CODED_LENGTH) we do it now.\n\t\t\tif (length==trieVariant.TRIE_CODED_LENGTH) count+=splitRange(\n\t\t\t\treader,termDocs,bits,\n\t\t\t\tminShort,lowerBoundOpen,\n\t\t\t\tmaxShort,upperBoundOpen\n\t\t\t);\n\t\t}\n\t\treturn count;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0","date":1234549621,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieRangeFilter#splitRange(IndexReader,TermDocs,OpenBitSet,String,boolean,String,boolean).mjava","sourceNew":null,"sourceOld":"  /** Splits range recursively (and returns number of terms) */\n  private int splitRange(\n    final IndexReader reader, final TermDocs termDocs, final OpenBitSet bits,\n    final String min, final boolean lowerBoundOpen, final String max, final boolean upperBoundOpen\n  ) throws IOException {\n    int count=0;\n    final int length=min.length();\n    final String minShort=lowerBoundOpen ? min.substring(0,length-1) : trieVariant.incrementTrieCoded(min.substring(0,length-1));\n    final String maxShort=upperBoundOpen ? max.substring(0,length-1) : trieVariant.decrementTrieCoded(max.substring(0,length-1));\n\n    if (length==1 || minShort.compareTo(maxShort)>=0) {\n      // we are in the lowest precision or the current precision is not existent\n      count+=setBits(reader, termDocs, bits, min, max);\n    } else {\n      // Avoid too much seeking: first go deeper into lower precision\n      // (in IndexReader's TermEnum these terms are earlier).\n      // Do this only, if the current length is not trieVariant.TRIE_CODED_LENGTH (not full precision),\n      // because terms from the highest prec come before all lower prec terms\n      // (because the field name is ordered before the suffixed one).\n      if (length!=trieVariant.TRIE_CODED_LENGTH) count+=splitRange(\n        reader,termDocs,bits,\n        minShort,lowerBoundOpen,\n        maxShort,upperBoundOpen\n      );\n      // Avoid too much seeking: set bits for lower part of current (higher) precision.\n      // These terms come later in IndexReader's TermEnum.\n      if (!lowerBoundOpen) {\n        count+=setBits(reader, termDocs, bits, min, trieVariant.decrementTrieCoded(minShort+trieVariant.TRIE_CODED_SYMBOL_MIN));\n      }\n      // Avoid too much seeking: set bits for upper part of current precision.\n      // These terms come later in IndexReader's TermEnum.\n      if (!upperBoundOpen) {\n        count+=setBits(reader, termDocs, bits, trieVariant.incrementTrieCoded(maxShort+trieVariant.TRIE_CODED_SYMBOL_MAX), max);\n      }\n      // If the first step (see above) was not done (because length==trieVariant.TRIE_CODED_LENGTH) we do it now.\n      if (length==trieVariant.TRIE_CODED_LENGTH) count+=splitRange(\n        reader,termDocs,bits,\n        minShort,lowerBoundOpen,\n        maxShort,upperBoundOpen\n      );\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["8ef14ec05032a847f9ce1820055c6c29f72d771a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"29191e6ce86bfcd231cd069834a87833fa4079c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8ef14ec05032a847f9ce1820055c6c29f72d771a":["29191e6ce86bfcd231cd069834a87833fa4079c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"]},"commit2Childs":{"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29191e6ce86bfcd231cd069834a87833fa4079c1"],"29191e6ce86bfcd231cd069834a87833fa4079c1":["8ef14ec05032a847f9ce1820055c6c29f72d771a"],"8ef14ec05032a847f9ce1820055c6c29f72d771a":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}