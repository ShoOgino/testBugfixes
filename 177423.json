{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#checkSingleServer(NamedList[Object]).mjava","commits":[{"id":"291857aeee5ec20518ddce131ac4362c0075ebe1","date":1467882201,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#checkSingleServer(NamedList[Object]).mjava","pathOld":"/dev/null","sourceNew":"  private static void checkSingleServer(NamedList<Object> response) {\n    final CloudSolrClient.RouteResponse rr = (CloudSolrClient.RouteResponse) response;\n    final Map<String,LBHttpSolrClient.Req> routes = rr.getRoutes();\n    final Iterator<Map.Entry<String,LBHttpSolrClient.Req>> it =\n        routes.entrySet().iterator();\n    while (it.hasNext()) {\n      Map.Entry<String,LBHttpSolrClient.Req> entry = it.next();\n        assertEquals(\"wrong number of servers: \"+entry.getValue().getServers(),\n            1, entry.getValue().getServers().size());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"920b078f38927d1129b28d683b5e89228a27edc0","date":1474295383,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#checkSingleServer(NamedList[Object]).mjava","sourceNew":null,"sourceOld":"  private static void checkSingleServer(NamedList<Object> response) {\n    final CloudSolrClient.RouteResponse rr = (CloudSolrClient.RouteResponse) response;\n    final Map<String,LBHttpSolrClient.Req> routes = rr.getRoutes();\n    final Iterator<Map.Entry<String,LBHttpSolrClient.Req>> it =\n        routes.entrySet().iterator();\n    while (it.hasNext()) {\n      Map.Entry<String,LBHttpSolrClient.Req> entry = it.next();\n        assertEquals(\"wrong number of servers: \"+entry.getValue().getServers(),\n            1, entry.getValue().getServers().size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d34a674b360fc9af16fceeb9df37363eceb3484","date":1474378553,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#checkSingleServer(NamedList[Object]).mjava","pathOld":"/dev/null","sourceNew":"  private static void checkSingleServer(NamedList<Object> response) {\n    final CloudSolrClient.RouteResponse rr = (CloudSolrClient.RouteResponse) response;\n    final Map<String,LBHttpSolrClient.Req> routes = rr.getRoutes();\n    final Iterator<Map.Entry<String,LBHttpSolrClient.Req>> it =\n        routes.entrySet().iterator();\n    while (it.hasNext()) {\n      Map.Entry<String,LBHttpSolrClient.Req> entry = it.next();\n        assertEquals(\"wrong number of servers: \"+entry.getValue().getServers(),\n            1, entry.getValue().getServers().size());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03e91774ac3ed0db43b41f92ae954c447e50bdfb","date":1474437614,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#checkSingleServer(NamedList[Object]).mjava","pathOld":"/dev/null","sourceNew":"  private static void checkSingleServer(NamedList<Object> response) {\n    final CloudSolrClient.RouteResponse rr = (CloudSolrClient.RouteResponse) response;\n    final Map<String,LBHttpSolrClient.Req> routes = rr.getRoutes();\n    final Iterator<Map.Entry<String,LBHttpSolrClient.Req>> it =\n        routes.entrySet().iterator();\n    while (it.hasNext()) {\n      Map.Entry<String,LBHttpSolrClient.Req> entry = it.next();\n        assertEquals(\"wrong number of servers: \"+entry.getValue().getServers(),\n            1, entry.getValue().getServers().size());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#checkSingleServer(NamedList[Object]).mjava","pathOld":"/dev/null","sourceNew":"  private static void checkSingleServer(NamedList<Object> response) {\n    final CloudSolrClient.RouteResponse rr = (CloudSolrClient.RouteResponse) response;\n    final Map<String,LBHttpSolrClient.Req> routes = rr.getRoutes();\n    final Iterator<Map.Entry<String,LBHttpSolrClient.Req>> it =\n        routes.entrySet().iterator();\n    while (it.hasNext()) {\n      Map.Entry<String,LBHttpSolrClient.Req> entry = it.next();\n        assertEquals(\"wrong number of servers: \"+entry.getValue().getServers(),\n            1, entry.getValue().getServers().size());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#checkSingleServer(NamedList[Object]).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#checkSingleServer(NamedList[Object]).mjava","sourceNew":"  @SuppressWarnings(\"deprecation\")\n  private static void checkSingleServer(NamedList<Object> response) {\n    final CloudSolrClient.RouteResponse rr = (CloudSolrClient.RouteResponse) response;\n    final Map<String,LBHttpSolrClient.Req> routes = rr.getRoutes();\n    final Iterator<Map.Entry<String,LBHttpSolrClient.Req>> it =\n        routes.entrySet().iterator();\n    while (it.hasNext()) {\n      Map.Entry<String,LBHttpSolrClient.Req> entry = it.next();\n        assertEquals(\"wrong number of servers: \"+entry.getValue().getServers(),\n            1, entry.getValue().getServers().size());\n    }\n  }\n\n","sourceOld":"  private static void checkSingleServer(NamedList<Object> response) {\n    final CloudSolrClient.RouteResponse rr = (CloudSolrClient.RouteResponse) response;\n    final Map<String,LBHttpSolrClient.Req> routes = rr.getRoutes();\n    final Iterator<Map.Entry<String,LBHttpSolrClient.Req>> it =\n        routes.entrySet().iterator();\n    while (it.hasNext()) {\n      Map.Entry<String,LBHttpSolrClient.Req> entry = it.next();\n        assertEquals(\"wrong number of servers: \"+entry.getValue().getServers(),\n            1, entry.getValue().getServers().size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#checkSingleServer(NamedList[Object]).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#checkSingleServer(NamedList[Object]).mjava","sourceNew":"  private static void checkSingleServer(NamedList<Object> response) {\n    final CloudSolrClient.RouteResponse rr = (CloudSolrClient.RouteResponse) response;\n    final Map<String,LBHttpSolrClient.Req> routes = rr.getRoutes();\n    final Iterator<Map.Entry<String,LBHttpSolrClient.Req>> it =\n        routes.entrySet().iterator();\n    while (it.hasNext()) {\n      Map.Entry<String,LBHttpSolrClient.Req> entry = it.next();\n        assertEquals(\"wrong number of servers: \"+entry.getValue().getServers(),\n            1, entry.getValue().getServers().size());\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"deprecation\")\n  private static void checkSingleServer(NamedList<Object> response) {\n    final CloudSolrClient.RouteResponse rr = (CloudSolrClient.RouteResponse) response;\n    final Map<String,LBHttpSolrClient.Req> routes = rr.getRoutes();\n    final Iterator<Map.Entry<String,LBHttpSolrClient.Req>> it =\n        routes.entrySet().iterator();\n    while (it.hasNext()) {\n      Map.Entry<String,LBHttpSolrClient.Req> entry = it.next();\n        assertEquals(\"wrong number of servers: \"+entry.getValue().getServers(),\n            1, entry.getValue().getServers().size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["291857aeee5ec20518ddce131ac4362c0075ebe1"],"03e91774ac3ed0db43b41f92ae954c447e50bdfb":["920b078f38927d1129b28d683b5e89228a27edc0","7d34a674b360fc9af16fceeb9df37363eceb3484"],"7d34a674b360fc9af16fceeb9df37363eceb3484":["920b078f38927d1129b28d683b5e89228a27edc0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"291857aeee5ec20518ddce131ac4362c0075ebe1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"920b078f38927d1129b28d683b5e89228a27edc0":["291857aeee5ec20518ddce131ac4362c0075ebe1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","291857aeee5ec20518ddce131ac4362c0075ebe1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"]},"commit2Childs":{"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"03e91774ac3ed0db43b41f92ae954c447e50bdfb":[],"7d34a674b360fc9af16fceeb9df37363eceb3484":["03e91774ac3ed0db43b41f92ae954c447e50bdfb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["291857aeee5ec20518ddce131ac4362c0075ebe1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"291857aeee5ec20518ddce131ac4362c0075ebe1":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","920b078f38927d1129b28d683b5e89228a27edc0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"920b078f38927d1129b28d683b5e89228a27edc0":["03e91774ac3ed0db43b41f92ae954c447e50bdfb","7d34a674b360fc9af16fceeb9df37363eceb3484"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["03e91774ac3ed0db43b41f92ae954c447e50bdfb","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}