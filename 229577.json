{"path":"solr/core/src/test/org/apache/solr/TestDistributedSearch#validateCommonQueryParameters().mjava","commits":[{"id":"c7e0383a0a3421b9f6f61002dd4f6fb39bf71285","date":1427227523,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedSearch#validateCommonQueryParameters().mjava","pathOld":"/dev/null","sourceNew":"  private void validateCommonQueryParameters() throws Exception {\n    try {\n      SolrQuery query = new SolrQuery();\n      query.setStart(-1).setQuery(\"*\");\n      QueryResponse resp = query(query);\n      fail(\"Expected the last query to fail, but got response: \" + resp);\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n    }\n\n    try {\n      SolrQuery query = new SolrQuery();\n      query.setRows(-1).setStart(0).setQuery(\"*\");\n      QueryResponse resp = query(query);\n      fail(\"Expected the last query to fail, but got response: \" + resp);\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n   }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedSearch#validateCommonQueryParameters().mjava","pathOld":"/dev/null","sourceNew":"  private void validateCommonQueryParameters() throws Exception {\n    try {\n      SolrQuery query = new SolrQuery();\n      query.setStart(-1).setQuery(\"*\");\n      QueryResponse resp = query(query);\n      fail(\"Expected the last query to fail, but got response: \" + resp);\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n    }\n\n    try {\n      SolrQuery query = new SolrQuery();\n      query.setRows(-1).setStart(0).setQuery(\"*\");\n      QueryResponse resp = query(query);\n      fail(\"Expected the last query to fail, but got response: \" + resp);\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n   }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e7062fc1cf235b04a88adfc21dc68e040c82561","date":1431110643,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedSearch#validateCommonQueryParameters().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDistributedSearch#validateCommonQueryParameters().mjava","sourceNew":"  private void validateCommonQueryParameters() throws Exception {\n    ignoreException(\"parameter cannot be negative\");\n    try {\n      SolrQuery query = new SolrQuery();\n      query.setStart(-1).setQuery(\"*\");\n      QueryResponse resp = query(query);\n      fail(\"Expected the last query to fail, but got response: \" + resp);\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n    }\n\n    try {\n      SolrQuery query = new SolrQuery();\n      query.setRows(-1).setStart(0).setQuery(\"*\");\n      QueryResponse resp = query(query);\n      fail(\"Expected the last query to fail, but got response: \" + resp);\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n    }\n    resetExceptionIgnores();\n  }\n\n","sourceOld":"  private void validateCommonQueryParameters() throws Exception {\n    try {\n      SolrQuery query = new SolrQuery();\n      query.setStart(-1).setQuery(\"*\");\n      QueryResponse resp = query(query);\n      fail(\"Expected the last query to fail, but got response: \" + resp);\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n    }\n\n    try {\n      SolrQuery query = new SolrQuery();\n      query.setRows(-1).setStart(0).setQuery(\"*\");\n      QueryResponse resp = query(query);\n      fail(\"Expected the last query to fail, but got response: \" + resp);\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n   }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df04182c748b21c01810ed664fa6bd10272f290d","date":1530385495,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedSearch#validateCommonQueryParameters().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDistributedSearch#validateCommonQueryParameters().mjava","sourceNew":"  private void validateCommonQueryParameters() throws Exception {\n    ignoreException(\"parameter cannot be negative\");\n\n    try {\n      SolrQuery query = new SolrQuery();\n      query.setParam(\"start\", \"non_numeric_value\").setQuery(\"*\");\n      QueryResponse resp = query(query);\n      fail(\"Expected the last query to fail, but got response: \" + resp);\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n    }\n\n    try {\n      SolrQuery query = new SolrQuery();\n      query.setStart(-1).setQuery(\"*\");\n      QueryResponse resp = query(query);\n      fail(\"Expected the last query to fail, but got response: \" + resp);\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n    }\n\n    try {\n      SolrQuery query = new SolrQuery();\n      query.setRows(-1).setStart(0).setQuery(\"*\");\n      QueryResponse resp = query(query);\n      fail(\"Expected the last query to fail, but got response: \" + resp);\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n    }\n\n    try {\n      SolrQuery query = new SolrQuery();\n      query.setParam(\"rows\", \"non_numeric_value\").setQuery(\"*\");\n      QueryResponse resp = query(query);\n      fail(\"Expected the last query to fail, but got response: \" + resp);\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n    }\n    resetExceptionIgnores();\n  }\n\n","sourceOld":"  private void validateCommonQueryParameters() throws Exception {\n    ignoreException(\"parameter cannot be negative\");\n    try {\n      SolrQuery query = new SolrQuery();\n      query.setStart(-1).setQuery(\"*\");\n      QueryResponse resp = query(query);\n      fail(\"Expected the last query to fail, but got response: \" + resp);\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n    }\n\n    try {\n      SolrQuery query = new SolrQuery();\n      query.setRows(-1).setStart(0).setQuery(\"*\");\n      QueryResponse resp = query(query);\n      fail(\"Expected the last query to fail, but got response: \" + resp);\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n    }\n    resetExceptionIgnores();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedSearch#validateCommonQueryParameters().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDistributedSearch#validateCommonQueryParameters().mjava","sourceNew":"  private void validateCommonQueryParameters() throws Exception {\n    ignoreException(\"parameter cannot be negative\");\n\n    try {\n      SolrQuery query = new SolrQuery();\n      query.setParam(\"start\", \"non_numeric_value\").setQuery(\"*\");\n      QueryResponse resp = query(query);\n      fail(\"Expected the last query to fail, but got response: \" + resp);\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n    }\n\n    try {\n      SolrQuery query = new SolrQuery();\n      query.setStart(-1).setQuery(\"*\");\n      QueryResponse resp = query(query);\n      fail(\"Expected the last query to fail, but got response: \" + resp);\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n    }\n\n    try {\n      SolrQuery query = new SolrQuery();\n      query.setRows(-1).setStart(0).setQuery(\"*\");\n      QueryResponse resp = query(query);\n      fail(\"Expected the last query to fail, but got response: \" + resp);\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n    }\n\n    try {\n      SolrQuery query = new SolrQuery();\n      query.setParam(\"rows\", \"non_numeric_value\").setQuery(\"*\");\n      QueryResponse resp = query(query);\n      fail(\"Expected the last query to fail, but got response: \" + resp);\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n    }\n    resetExceptionIgnores();\n  }\n\n","sourceOld":"  private void validateCommonQueryParameters() throws Exception {\n    ignoreException(\"parameter cannot be negative\");\n    try {\n      SolrQuery query = new SolrQuery();\n      query.setStart(-1).setQuery(\"*\");\n      QueryResponse resp = query(query);\n      fail(\"Expected the last query to fail, but got response: \" + resp);\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n    }\n\n    try {\n      SolrQuery query = new SolrQuery();\n      query.setRows(-1).setStart(0).setQuery(\"*\");\n      QueryResponse resp = query(query);\n      fail(\"Expected the last query to fail, but got response: \" + resp);\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n    }\n    resetExceptionIgnores();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedSearch#validateCommonQueryParameters().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDistributedSearch#validateCommonQueryParameters().mjava","sourceNew":"  private void validateCommonQueryParameters() throws Exception {\n    ignoreException(\"parameter cannot be negative\");\n\n    try {\n      SolrQuery query = new SolrQuery();\n      query.setParam(\"start\", \"non_numeric_value\").setQuery(\"*\");\n      QueryResponse resp = query(query);\n      fail(\"Expected the last query to fail, but got response: \" + resp);\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n    }\n\n    try {\n      SolrQuery query = new SolrQuery();\n      query.setStart(-1).setQuery(\"*\");\n      QueryResponse resp = query(query);\n      fail(\"Expected the last query to fail, but got response: \" + resp);\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n    }\n\n    try {\n      SolrQuery query = new SolrQuery();\n      query.setRows(-1).setStart(0).setQuery(\"*\");\n      QueryResponse resp = query(query);\n      fail(\"Expected the last query to fail, but got response: \" + resp);\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n    }\n\n    try {\n      SolrQuery query = new SolrQuery();\n      query.setParam(\"rows\", \"non_numeric_value\").setQuery(\"*\");\n      QueryResponse resp = query(query);\n      fail(\"Expected the last query to fail, but got response: \" + resp);\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n    }\n    resetExceptionIgnores();\n  }\n\n","sourceOld":"  private void validateCommonQueryParameters() throws Exception {\n    ignoreException(\"parameter cannot be negative\");\n    try {\n      SolrQuery query = new SolrQuery();\n      query.setStart(-1).setQuery(\"*\");\n      QueryResponse resp = query(query);\n      fail(\"Expected the last query to fail, but got response: \" + resp);\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n    }\n\n    try {\n      SolrQuery query = new SolrQuery();\n      query.setRows(-1).setStart(0).setQuery(\"*\");\n      QueryResponse resp = query(query);\n      fail(\"Expected the last query to fail, but got response: \" + resp);\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n    }\n    resetExceptionIgnores();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92f789dbd1886e4b468e61b0def88b29a3f55228","date":1533844010,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedSearch#validateCommonQueryParameters().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDistributedSearch#validateCommonQueryParameters().mjava","sourceNew":"  private void validateCommonQueryParameters() throws Exception {\n    ignoreException(\"parameter cannot be negative\");\n\n    SolrException e1 = expectThrows(SolrException.class, () -> {\n      SolrQuery query = new SolrQuery();\n      query.setParam(\"start\", \"non_numeric_value\").setQuery(\"*\");\n      QueryResponse resp = query(query);\n    });\n    assertEquals(ErrorCode.BAD_REQUEST.code, e1.code());\n\n    SolrException e2 = expectThrows(SolrException.class, () -> {\n      SolrQuery query = new SolrQuery();\n      query.setStart(-1).setQuery(\"*\");\n      QueryResponse resp = query(query);\n    });\n    assertEquals(ErrorCode.BAD_REQUEST.code, e2.code());\n\n    SolrException e3 = expectThrows(SolrException.class, () -> {\n      SolrQuery query = new SolrQuery();\n      query.setRows(-1).setStart(0).setQuery(\"*\");\n      QueryResponse resp = query(query);\n    });\n    assertEquals(ErrorCode.BAD_REQUEST.code, e3.code());\n\n    SolrException e4 = expectThrows(SolrException.class, () -> {\n      SolrQuery query = new SolrQuery();\n      query.setParam(\"rows\", \"non_numeric_value\").setQuery(\"*\");\n      QueryResponse resp = query(query);\n    });\n    assertEquals(ErrorCode.BAD_REQUEST.code, e4.code());\n\n    resetExceptionIgnores();\n  }\n\n","sourceOld":"  private void validateCommonQueryParameters() throws Exception {\n    ignoreException(\"parameter cannot be negative\");\n\n    try {\n      SolrQuery query = new SolrQuery();\n      query.setParam(\"start\", \"non_numeric_value\").setQuery(\"*\");\n      QueryResponse resp = query(query);\n      fail(\"Expected the last query to fail, but got response: \" + resp);\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n    }\n\n    try {\n      SolrQuery query = new SolrQuery();\n      query.setStart(-1).setQuery(\"*\");\n      QueryResponse resp = query(query);\n      fail(\"Expected the last query to fail, but got response: \" + resp);\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n    }\n\n    try {\n      SolrQuery query = new SolrQuery();\n      query.setRows(-1).setStart(0).setQuery(\"*\");\n      QueryResponse resp = query(query);\n      fail(\"Expected the last query to fail, but got response: \" + resp);\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n    }\n\n    try {\n      SolrQuery query = new SolrQuery();\n      query.setParam(\"rows\", \"non_numeric_value\").setQuery(\"*\");\n      QueryResponse resp = query(query);\n      fail(\"Expected the last query to fail, but got response: \" + resp);\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n    }\n    resetExceptionIgnores();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e7062fc1cf235b04a88adfc21dc68e040c82561":["c7e0383a0a3421b9f6f61002dd4f6fb39bf71285"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7e0383a0a3421b9f6f61002dd4f6fb39bf71285"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["2e7062fc1cf235b04a88adfc21dc68e040c82561","df04182c748b21c01810ed664fa6bd10272f290d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92f789dbd1886e4b468e61b0def88b29a3f55228":["df04182c748b21c01810ed664fa6bd10272f290d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["92f789dbd1886e4b468e61b0def88b29a3f55228"],"df04182c748b21c01810ed664fa6bd10272f290d":["2e7062fc1cf235b04a88adfc21dc68e040c82561"],"c7e0383a0a3421b9f6f61002dd4f6fb39bf71285":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["2e7062fc1cf235b04a88adfc21dc68e040c82561","df04182c748b21c01810ed664fa6bd10272f290d"]},"commit2Childs":{"2e7062fc1cf235b04a88adfc21dc68e040c82561":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","df04182c748b21c01810ed664fa6bd10272f290d","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","c7e0383a0a3421b9f6f61002dd4f6fb39bf71285"],"92f789dbd1886e4b468e61b0def88b29a3f55228":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c7e0383a0a3421b9f6f61002dd4f6fb39bf71285":["2e7062fc1cf235b04a88adfc21dc68e040c82561","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"df04182c748b21c01810ed664fa6bd10272f290d":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","92f789dbd1886e4b468e61b0def88b29a3f55228","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}