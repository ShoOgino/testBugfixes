{"path":"solr/core/src/test/org/apache/solr/update/processor/ClassificationUpdateProcessorFactoryTest#init_unsupportedFilterQuery_shouldThrowExceptionWithDetailedMessage().mjava","commits":[{"id":"9f1ec46dc24c2330c5e9dd0edefaede91c962926","date":1480027437,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/ClassificationUpdateProcessorFactoryTest#init_unsupportedFilterQuery_shouldThrowExceptionWithDetailedMessage().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void init_unsupportedFilterQuery_shouldThrowExceptionWithDetailedMessage() {\n    UpdateRequestProcessor mockProcessor = mock(UpdateRequestProcessor.class);\n    SolrQueryRequest mockRequest = mock(SolrQueryRequest.class);\n    SolrQueryResponse mockResponse = mock(SolrQueryResponse.class);\n    args.add(\"knn.filterQuery\", \"not supported query\");\n    try {\n      cFactoryToTest.init(args);\n      /* parsing failure happens because of the mocks, fine enough to check a proper exception propagation */\n      cFactoryToTest.getInstance(mockRequest, mockResponse, mockProcessor);\n    } catch (SolrException e) {\n      assertEquals(\"Classification UpdateProcessor Training Filter Query: 'not supported query' is not supported\", e.getMessage());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75babd1dfc2521603bfeb0968042e921d8c6c652","date":1480042089,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/ClassificationUpdateProcessorFactoryTest#init_unsupportedFilterQuery_shouldThrowExceptionWithDetailedMessage().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void init_unsupportedFilterQuery_shouldThrowExceptionWithDetailedMessage() {\n    UpdateRequestProcessor mockProcessor = mock(UpdateRequestProcessor.class);\n    SolrQueryRequest mockRequest = mock(SolrQueryRequest.class);\n    SolrQueryResponse mockResponse = mock(SolrQueryResponse.class);\n    args.add(\"knn.filterQuery\", \"not supported query\");\n    try {\n      cFactoryToTest.init(args);\n      /* parsing failure happens because of the mocks, fine enough to check a proper exception propagation */\n      cFactoryToTest.getInstance(mockRequest, mockResponse, mockProcessor);\n    } catch (SolrException e) {\n      assertEquals(\"Classification UpdateProcessor Training Filter Query: 'not supported query' is not supported\", e.getMessage());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/ClassificationUpdateProcessorFactoryTest#init_unsupportedFilterQuery_shouldThrowExceptionWithDetailedMessage().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void init_unsupportedFilterQuery_shouldThrowExceptionWithDetailedMessage() {\n    UpdateRequestProcessor mockProcessor = mock(UpdateRequestProcessor.class);\n    SolrQueryRequest mockRequest = mock(SolrQueryRequest.class);\n    SolrQueryResponse mockResponse = mock(SolrQueryResponse.class);\n    args.add(\"knn.filterQuery\", \"not supported query\");\n    try {\n      cFactoryToTest.init(args);\n      /* parsing failure happens because of the mocks, fine enough to check a proper exception propagation */\n      cFactoryToTest.getInstance(mockRequest, mockResponse, mockProcessor);\n    } catch (SolrException e) {\n      assertEquals(\"Classification UpdateProcessor Training Filter Query: 'not supported query' is not supported\", e.getMessage());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3d6c69b0bba4aa872a1507ecd96c7887646e9b9","date":1509820648,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/ClassificationUpdateProcessorFactoryTest#init_unsupportedFilterQuery_shouldThrowExceptionWithDetailedMessage().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/ClassificationUpdateProcessorFactoryTest#init_unsupportedFilterQuery_shouldThrowExceptionWithDetailedMessage().mjava","sourceNew":"  @Test\n  public void init_unsupportedFilterQuery_shouldThrowExceptionWithDetailedMessage() {\n    assumeWorkingMockito();\n    \n    UpdateRequestProcessor mockProcessor = mock(UpdateRequestProcessor.class);\n    SolrQueryRequest mockRequest = mock(SolrQueryRequest.class);\n    SolrQueryResponse mockResponse = mock(SolrQueryResponse.class);\n    args.add(\"knn.filterQuery\", \"not supported query\");\n    try {\n      cFactoryToTest.init(args);\n      /* parsing failure happens because of the mocks, fine enough to check a proper exception propagation */\n      cFactoryToTest.getInstance(mockRequest, mockResponse, mockProcessor);\n    } catch (SolrException e) {\n      assertEquals(\"Classification UpdateProcessor Training Filter Query: 'not supported query' is not supported\", e.getMessage());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void init_unsupportedFilterQuery_shouldThrowExceptionWithDetailedMessage() {\n    UpdateRequestProcessor mockProcessor = mock(UpdateRequestProcessor.class);\n    SolrQueryRequest mockRequest = mock(SolrQueryRequest.class);\n    SolrQueryResponse mockResponse = mock(SolrQueryResponse.class);\n    args.add(\"knn.filterQuery\", \"not supported query\");\n    try {\n      cFactoryToTest.init(args);\n      /* parsing failure happens because of the mocks, fine enough to check a proper exception propagation */\n      cFactoryToTest.getInstance(mockRequest, mockResponse, mockProcessor);\n    } catch (SolrException e) {\n      assertEquals(\"Classification UpdateProcessor Training Filter Query: 'not supported query' is not supported\", e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/ClassificationUpdateProcessorFactoryTest#init_unsupportedFilterQuery_shouldThrowExceptionWithDetailedMessage().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/ClassificationUpdateProcessorFactoryTest#init_unsupportedFilterQuery_shouldThrowExceptionWithDetailedMessage().mjava","sourceNew":"  @Test\n  public void init_unsupportedFilterQuery_shouldThrowExceptionWithDetailedMessage() {\n    assumeWorkingMockito();\n    \n    UpdateRequestProcessor mockProcessor = mock(UpdateRequestProcessor.class);\n    SolrQueryRequest mockRequest = mock(SolrQueryRequest.class);\n    SolrQueryResponse mockResponse = mock(SolrQueryResponse.class);\n    args.add(\"knn.filterQuery\", \"not supported query\");\n    try {\n      cFactoryToTest.init(args);\n      /* parsing failure happens because of the mocks, fine enough to check a proper exception propagation */\n      cFactoryToTest.getInstance(mockRequest, mockResponse, mockProcessor);\n    } catch (SolrException e) {\n      assertEquals(\"Classification UpdateProcessor Training Filter Query: 'not supported query' is not supported\", e.getMessage());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void init_unsupportedFilterQuery_shouldThrowExceptionWithDetailedMessage() {\n    UpdateRequestProcessor mockProcessor = mock(UpdateRequestProcessor.class);\n    SolrQueryRequest mockRequest = mock(SolrQueryRequest.class);\n    SolrQueryResponse mockResponse = mock(SolrQueryResponse.class);\n    args.add(\"knn.filterQuery\", \"not supported query\");\n    try {\n      cFactoryToTest.init(args);\n      /* parsing failure happens because of the mocks, fine enough to check a proper exception propagation */\n      cFactoryToTest.getInstance(mockRequest, mockResponse, mockProcessor);\n    } catch (SolrException e) {\n      assertEquals(\"Classification UpdateProcessor Training Filter Query: 'not supported query' is not supported\", e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/ClassificationUpdateProcessorFactoryTest#init_unsupportedFilterQuery_shouldThrowExceptionWithDetailedMessage().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/ClassificationUpdateProcessorFactoryTest#init_unsupportedFilterQuery_shouldThrowExceptionWithDetailedMessage().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void init_unsupportedFilterQuery_shouldThrowExceptionWithDetailedMessage() {\n    assumeWorkingMockito();\n    \n    UpdateRequestProcessor mockProcessor = mock(UpdateRequestProcessor.class);\n    SolrQueryRequest mockRequest = mock(SolrQueryRequest.class);\n    SolrQueryResponse mockResponse = mock(SolrQueryResponse.class);\n    args.add(\"knn.filterQuery\", \"not supported query\");\n    try {\n      cFactoryToTest.init(args);\n      /* parsing failure happens because of the mocks, fine enough to check a proper exception propagation */\n      cFactoryToTest.getInstance(mockRequest, mockResponse, mockProcessor);\n    } catch (SolrException e) {\n      assertEquals(\"Classification UpdateProcessor Training Filter Query: 'not supported query' is not supported\", e.getMessage());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void init_unsupportedFilterQuery_shouldThrowExceptionWithDetailedMessage() {\n    assumeWorkingMockito();\n    \n    UpdateRequestProcessor mockProcessor = mock(UpdateRequestProcessor.class);\n    SolrQueryRequest mockRequest = mock(SolrQueryRequest.class);\n    SolrQueryResponse mockResponse = mock(SolrQueryResponse.class);\n    args.add(\"knn.filterQuery\", \"not supported query\");\n    try {\n      cFactoryToTest.init(args);\n      /* parsing failure happens because of the mocks, fine enough to check a proper exception propagation */\n      cFactoryToTest.getInstance(mockRequest, mockResponse, mockProcessor);\n    } catch (SolrException e) {\n      assertEquals(\"Classification UpdateProcessor Training Filter Query: 'not supported query' is not supported\", e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9f1ec46dc24c2330c5e9dd0edefaede91c962926":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"727bb765ff2542275f6d31f67be18d7104bae148":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","75babd1dfc2521603bfeb0968042e921d8c6c652"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["75babd1dfc2521603bfeb0968042e921d8c6c652","f3d6c69b0bba4aa872a1507ecd96c7887646e9b9"],"75babd1dfc2521603bfeb0968042e921d8c6c652":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9f1ec46dc24c2330c5e9dd0edefaede91c962926"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f3d6c69b0bba4aa872a1507ecd96c7887646e9b9":["75babd1dfc2521603bfeb0968042e921d8c6c652"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"]},"commit2Childs":{"9f1ec46dc24c2330c5e9dd0edefaede91c962926":["75babd1dfc2521603bfeb0968042e921d8c6c652"],"727bb765ff2542275f6d31f67be18d7104bae148":[],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["e98520789adb1d5ad05afb4956eca0944a929688"],"75babd1dfc2521603bfeb0968042e921d8c6c652":["727bb765ff2542275f6d31f67be18d7104bae148","d523b8189b211dd1630166aa77b8c88bb48b3fcc","f3d6c69b0bba4aa872a1507ecd96c7887646e9b9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9f1ec46dc24c2330c5e9dd0edefaede91c962926","727bb765ff2542275f6d31f67be18d7104bae148","75babd1dfc2521603bfeb0968042e921d8c6c652"],"f3d6c69b0bba4aa872a1507ecd96c7887646e9b9":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}