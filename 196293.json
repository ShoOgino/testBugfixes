{"path":"lucene/queries/src/java/org/apache/lucene/queries/TermsQuery#rewrite(IndexReader).mjava","commits":[{"id":"3e2b30bfb739689d33532e6b7d2d39582bd89a3a","date":1432237721,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/TermsQuery#rewrite(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    final int threshold = Math.min(BOOLEAN_REWRITE_TERM_COUNT_THRESHOLD, BooleanQuery.getMaxClauseCount());\n    if (termData.size() <= threshold) {\n      BooleanQuery bq = new BooleanQuery();\n      TermIterator iterator = termData.iterator();\n      for (BytesRef term = iterator.next(); term != null; term = iterator.next()) {\n        bq.add(new TermQuery(new Term(iterator.field(), BytesRef.deepCopyOf(term))), Occur.SHOULD);\n      }\n      assert bq.clauses().size() == termData.size();\n      ConstantScoreQuery csq = new ConstantScoreQuery(bq);\n      csq.setBoost(getBoost());\n      return csq;\n    }\n    return super.rewrite(reader);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/TermsQuery#rewrite(IndexReader).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/TermsQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    final int threshold = Math.min(BOOLEAN_REWRITE_TERM_COUNT_THRESHOLD, BooleanQuery.getMaxClauseCount());\n    if (termData.size() <= threshold) {\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      TermIterator iterator = termData.iterator();\n      for (BytesRef term = iterator.next(); term != null; term = iterator.next()) {\n        bq.add(new TermQuery(new Term(iterator.field(), BytesRef.deepCopyOf(term))), Occur.SHOULD);\n      }\n      ConstantScoreQuery csq = new ConstantScoreQuery(bq.build());\n      csq.setBoost(getBoost());\n      return csq;\n    }\n    return super.rewrite(reader);\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    final int threshold = Math.min(BOOLEAN_REWRITE_TERM_COUNT_THRESHOLD, BooleanQuery.getMaxClauseCount());\n    if (termData.size() <= threshold) {\n      BooleanQuery bq = new BooleanQuery();\n      TermIterator iterator = termData.iterator();\n      for (BytesRef term = iterator.next(); term != null; term = iterator.next()) {\n        bq.add(new TermQuery(new Term(iterator.field(), BytesRef.deepCopyOf(term))), Occur.SHOULD);\n      }\n      assert bq.clauses().size() == termData.size();\n      ConstantScoreQuery csq = new ConstantScoreQuery(bq);\n      csq.setBoost(getBoost());\n      return csq;\n    }\n    return super.rewrite(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/TermsQuery#rewrite(IndexReader).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/TermsQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    final int threshold = Math.min(BOOLEAN_REWRITE_TERM_COUNT_THRESHOLD, BooleanQuery.getMaxClauseCount());\n    if (termData.size() <= threshold) {\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      TermIterator iterator = termData.iterator();\n      for (BytesRef term = iterator.next(); term != null; term = iterator.next()) {\n        bq.add(new TermQuery(new Term(iterator.field(), BytesRef.deepCopyOf(term))), Occur.SHOULD);\n      }\n      return new ConstantScoreQuery(bq.build());\n    }\n    return super.rewrite(reader);\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    final int threshold = Math.min(BOOLEAN_REWRITE_TERM_COUNT_THRESHOLD, BooleanQuery.getMaxClauseCount());\n    if (termData.size() <= threshold) {\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      TermIterator iterator = termData.iterator();\n      for (BytesRef term = iterator.next(); term != null; term = iterator.next()) {\n        bq.add(new TermQuery(new Term(iterator.field(), BytesRef.deepCopyOf(term))), Occur.SHOULD);\n      }\n      ConstantScoreQuery csq = new ConstantScoreQuery(bq.build());\n      csq.setBoost(getBoost());\n      return csq;\n    }\n    return super.rewrite(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d73510b39df24d6b65de48e56f8dccb136b9d01","date":1483971905,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermInSetQuery#rewrite(IndexReader).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/TermsQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    final int threshold = Math.min(BOOLEAN_REWRITE_TERM_COUNT_THRESHOLD, BooleanQuery.getMaxClauseCount());\n    if (termData.size() <= threshold) {\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      TermIterator iterator = termData.iterator();\n      for (BytesRef term = iterator.next(); term != null; term = iterator.next()) {\n        bq.add(new TermQuery(new Term(iterator.field(), BytesRef.deepCopyOf(term))), Occur.SHOULD);\n      }\n      return new ConstantScoreQuery(bq.build());\n    }\n    return super.rewrite(reader);\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    final int threshold = Math.min(BOOLEAN_REWRITE_TERM_COUNT_THRESHOLD, BooleanQuery.getMaxClauseCount());\n    if (termData.size() <= threshold) {\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      TermIterator iterator = termData.iterator();\n      for (BytesRef term = iterator.next(); term != null; term = iterator.next()) {\n        bq.add(new TermQuery(new Term(iterator.field(), BytesRef.deepCopyOf(term))), Occur.SHOULD);\n      }\n      return new ConstantScoreQuery(bq.build());\n    }\n    return super.rewrite(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermInSetQuery#rewrite(IndexReader).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/TermsQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    final int threshold = Math.min(BOOLEAN_REWRITE_TERM_COUNT_THRESHOLD, BooleanQuery.getMaxClauseCount());\n    if (termData.size() <= threshold) {\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      TermIterator iterator = termData.iterator();\n      for (BytesRef term = iterator.next(); term != null; term = iterator.next()) {\n        bq.add(new TermQuery(new Term(iterator.field(), BytesRef.deepCopyOf(term))), Occur.SHOULD);\n      }\n      return new ConstantScoreQuery(bq.build());\n    }\n    return super.rewrite(reader);\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    final int threshold = Math.min(BOOLEAN_REWRITE_TERM_COUNT_THRESHOLD, BooleanQuery.getMaxClauseCount());\n    if (termData.size() <= threshold) {\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      TermIterator iterator = termData.iterator();\n      for (BytesRef term = iterator.next(); term != null; term = iterator.next()) {\n        bq.add(new TermQuery(new Term(iterator.field(), BytesRef.deepCopyOf(term))), Occur.SHOULD);\n      }\n      return new ConstantScoreQuery(bq.build());\n    }\n    return super.rewrite(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3e2b30bfb739689d33532e6b7d2d39582bd89a3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["3e2b30bfb739689d33532e6b7d2d39582bd89a3a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d73510b39df24d6b65de48e56f8dccb136b9d01":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["2dfdf766e55e943d942055d7de53c7ad6bc45283","8d73510b39df24d6b65de48e56f8dccb136b9d01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8d73510b39df24d6b65de48e56f8dccb136b9d01"]},"commit2Childs":{"3e2b30bfb739689d33532e6b7d2d39582bd89a3a":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e2b30bfb739689d33532e6b7d2d39582bd89a3a"],"8d73510b39df24d6b65de48e56f8dccb136b9d01":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["8d73510b39df24d6b65de48e56f8dccb136b9d01","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}