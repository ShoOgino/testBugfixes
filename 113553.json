{"path":"src/java/org/apache/lucene/index/IndexFileDeleter#deleteSegments(Vector).mjava","commits":[{"id":"284c1d3c8b19931bf6f312fae7470487f5d9e580","date":1163805527,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexFileDeleter#deleteSegments(Vector).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#deleteSegments(Vector).mjava","sourceNew":"  public final void deleteSegments(Vector segments) throws IOException {\n\n    deleteFiles();                                // try to delete files that we couldn't before\n\n    for (int i = 0; i < segments.size(); i++) {\n      SegmentReader reader = (SegmentReader)segments.elementAt(i);\n      if (reader.directory() == this.directory)\n        deleteFiles(reader.files()); // try to delete our files\n      else\n        deleteFiles(reader.files(), reader.directory()); // delete other files\n    }\n  }\n\n","sourceOld":"  private final void deleteSegments(Vector segments) throws IOException {\n    Vector deletable = new Vector();\n\n    deleteFiles(readDeleteableFiles(), deletable); // try to delete deleteable\n\n    for (int i = 0; i < segments.size(); i++) {\n      SegmentReader reader = (SegmentReader)segments.elementAt(i);\n      if (reader.directory() == this.directory)\n        deleteFiles(reader.files(), deletable);\t  // try to delete our files\n      else\n        deleteFiles(reader.files(), reader.directory()); // delete other files\n    }\n\n    writeDeleteableFiles(deletable);\t\t  // note files we can't delete\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65fde38a949fadb9cf6008bc632c72c2ada2393d","date":1170531935,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexFileDeleter#deleteSegments(Vector).mjava","pathOld":"src/java/org/apache/lucene/index/IndexFileDeleter#deleteSegments(Vector).mjava","sourceNew":"  void deleteSegments(Vector segments) throws IOException {\n\n    deleteFiles();                                // try to delete files that we couldn't before\n\n    for (int i = 0; i < segments.size(); i++) {\n      SegmentReader reader = (SegmentReader)segments.elementAt(i);\n      if (reader.directory() == this.directory)\n        deleteFiles(reader.files()); // try to delete our files\n      else\n        deleteFiles(reader.files(), reader.directory()); // delete other files\n    }\n  }\n\n","sourceOld":"  public final void deleteSegments(Vector segments) throws IOException {\n\n    deleteFiles();                                // try to delete files that we couldn't before\n\n    for (int i = 0; i < segments.size(); i++) {\n      SegmentReader reader = (SegmentReader)segments.elementAt(i);\n      if (reader.directory() == this.directory)\n        deleteFiles(reader.files()); // try to delete our files\n      else\n        deleteFiles(reader.files(), reader.directory()); // delete other files\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b6187898fc4413ccd18229711786550a280383c","date":1173776782,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/IndexFileDeleter#deleteSegments(Vector).mjava","sourceNew":null,"sourceOld":"  void deleteSegments(Vector segments) throws IOException {\n\n    deleteFiles();                                // try to delete files that we couldn't before\n\n    for (int i = 0; i < segments.size(); i++) {\n      SegmentReader reader = (SegmentReader)segments.elementAt(i);\n      if (reader.directory() == this.directory)\n        deleteFiles(reader.files()); // try to delete our files\n      else\n        deleteFiles(reader.files(), reader.directory()); // delete other files\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"284c1d3c8b19931bf6f312fae7470487f5d9e580":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"65fde38a949fadb9cf6008bc632c72c2ada2393d":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"8b6187898fc4413ccd18229711786550a280383c":["65fde38a949fadb9cf6008bc632c72c2ada2393d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b6187898fc4413ccd18229711786550a280383c"]},"commit2Childs":{"284c1d3c8b19931bf6f312fae7470487f5d9e580":["65fde38a949fadb9cf6008bc632c72c2ada2393d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"65fde38a949fadb9cf6008bc632c72c2ada2393d":["8b6187898fc4413ccd18229711786550a280383c"],"8b6187898fc4413ccd18229711786550a280383c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}