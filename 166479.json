{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor[FacetRequest]#fillBucket(SimpleOrderedMap[Object],Query).mjava","commits":[{"id":"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","date":1426480823,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor[FacetRequest]#fillBucket(SimpleOrderedMap[Object],Query).mjava","pathOld":"/dev/null","sourceNew":"  public void fillBucket(SimpleOrderedMap<Object> bucket, Query q) throws IOException {\n    boolean needDocSet = freq.getFacetStats().size() > 0 || freq.getSubFacets().size() > 0;\n\n    // TODO: always collect counts or not???\n\n    DocSet result = null;\n    int count;\n\n    if (needDocSet) {\n      if (q == null) {\n        result = fcontext.base;\n        // result.incref(); // OFF-HEAP\n      } else {\n        result = fcontext.searcher.getDocSet(q, fcontext.base);\n      }\n      count = result.size();\n    } else {\n      if (q == null) {\n        count = fcontext.base.size();\n      } else {\n        count = fcontext.searcher.numDocs(q, fcontext.base);\n      }\n    }\n\n    try {\n      processStats(bucket, result, (int) count);\n      processSubs(bucket, result);\n    } finally {\n      if (result != null) {\n        // result.decref(); // OFF-HEAP\n        result = null;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor[FacetRequest]#fillBucket(SimpleOrderedMap[Object],Query).mjava","pathOld":"/dev/null","sourceNew":"  public void fillBucket(SimpleOrderedMap<Object> bucket, Query q) throws IOException {\n    boolean needDocSet = freq.getFacetStats().size() > 0 || freq.getSubFacets().size() > 0;\n\n    // TODO: always collect counts or not???\n\n    DocSet result = null;\n    int count;\n\n    if (needDocSet) {\n      if (q == null) {\n        result = fcontext.base;\n        // result.incref(); // OFF-HEAP\n      } else {\n        result = fcontext.searcher.getDocSet(q, fcontext.base);\n      }\n      count = result.size();\n    } else {\n      if (q == null) {\n        count = fcontext.base.size();\n      } else {\n        count = fcontext.searcher.numDocs(q, fcontext.base);\n      }\n    }\n\n    try {\n      processStats(bucket, result, (int) count);\n      processSubs(bucket, result);\n    } finally {\n      if (result != null) {\n        // result.decref(); // OFF-HEAP\n        result = null;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"faf1236ae092482293a7e0659e347d172185ef6f","date":1430314113,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor[FacetRequest]#fillBucket(SimpleOrderedMap[Object],Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor[FacetRequest]#fillBucket(SimpleOrderedMap[Object],Query).mjava","sourceNew":"  public void fillBucket(SimpleOrderedMap<Object> bucket, Query q) throws IOException {\n    boolean needDocSet = freq.getFacetStats().size() > 0 || freq.getSubFacets().size() > 0;\n\n    // TODO: always collect counts or not???\n\n    DocSet result = null;\n    int count;\n\n    if (needDocSet) {\n      if (q == null) {\n        result = fcontext.base;\n        // result.incref(); // OFF-HEAP\n      } else {\n        result = fcontext.searcher.getDocSet(q, fcontext.base);\n      }\n      count = result.size();\n    } else {\n      if (q == null) {\n        count = fcontext.base.size();\n      } else {\n        count = fcontext.searcher.numDocs(q, fcontext.base);\n      }\n    }\n\n    try {\n      processStats(bucket, result, (int) count);\n      processSubs(bucket, q, result);\n    } finally {\n      if (result != null) {\n        // result.decref(); // OFF-HEAP\n        result = null;\n      }\n    }\n  }\n\n","sourceOld":"  public void fillBucket(SimpleOrderedMap<Object> bucket, Query q) throws IOException {\n    boolean needDocSet = freq.getFacetStats().size() > 0 || freq.getSubFacets().size() > 0;\n\n    // TODO: always collect counts or not???\n\n    DocSet result = null;\n    int count;\n\n    if (needDocSet) {\n      if (q == null) {\n        result = fcontext.base;\n        // result.incref(); // OFF-HEAP\n      } else {\n        result = fcontext.searcher.getDocSet(q, fcontext.base);\n      }\n      count = result.size();\n    } else {\n      if (q == null) {\n        count = fcontext.base.size();\n      } else {\n        count = fcontext.searcher.numDocs(q, fcontext.base);\n      }\n    }\n\n    try {\n      processStats(bucket, result, (int) count);\n      processSubs(bucket, result);\n    } finally {\n      if (result != null) {\n        // result.decref(); // OFF-HEAP\n        result = null;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e13d0d4d8b6dc352cb304974502b9a36c153f78","date":1436492687,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#fillBucket(SimpleOrderedMap[Object],Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor[FacetRequest]#fillBucket(SimpleOrderedMap[Object],Query).mjava","sourceNew":"  public void fillBucket(SimpleOrderedMap<Object> bucket, Query q) throws IOException {\n    boolean needDocSet = freq.getFacetStats().size() > 0 || freq.getSubFacets().size() > 0;\n\n    // TODO: always collect counts or not???\n\n    DocSet result = null;\n    int count;\n\n    if (needDocSet) {\n      if (q == null) {\n        result = fcontext.base;\n        // result.incref(); // OFF-HEAP\n      } else {\n        result = fcontext.searcher.getDocSet(q, fcontext.base);\n      }\n      count = result.size();\n    } else {\n      if (q == null) {\n        count = fcontext.base.size();\n      } else {\n        count = fcontext.searcher.numDocs(q, fcontext.base);\n      }\n    }\n\n    try {\n      processStats(bucket, result, (int) count);\n      processSubs(bucket, q, result);\n    } finally {\n      if (result != null) {\n        // result.decref(); // OFF-HEAP\n        result = null;\n      }\n    }\n  }\n\n","sourceOld":"  public void fillBucket(SimpleOrderedMap<Object> bucket, Query q) throws IOException {\n    boolean needDocSet = freq.getFacetStats().size() > 0 || freq.getSubFacets().size() > 0;\n\n    // TODO: always collect counts or not???\n\n    DocSet result = null;\n    int count;\n\n    if (needDocSet) {\n      if (q == null) {\n        result = fcontext.base;\n        // result.incref(); // OFF-HEAP\n      } else {\n        result = fcontext.searcher.getDocSet(q, fcontext.base);\n      }\n      count = result.size();\n    } else {\n      if (q == null) {\n        count = fcontext.base.size();\n      } else {\n        count = fcontext.searcher.numDocs(q, fcontext.base);\n      }\n    }\n\n    try {\n      processStats(bucket, result, (int) count);\n      processSubs(bucket, q, result);\n    } finally {\n      if (result != null) {\n        // result.decref(); // OFF-HEAP\n        result = null;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"9e13d0d4d8b6dc352cb304974502b9a36c153f78":["faf1236ae092482293a7e0659e347d172185ef6f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"faf1236ae092482293a7e0659e347d172185ef6f":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9e13d0d4d8b6dc352cb304974502b9a36c153f78"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"9e13d0d4d8b6dc352cb304974502b9a36c153f78":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","faf1236ae092482293a7e0659e347d172185ef6f"],"faf1236ae092482293a7e0659e347d172185ef6f":["9e13d0d4d8b6dc352cb304974502b9a36c153f78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}