{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#setField(FieldInfo).mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#setField(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#setField(FieldInfo).mjava","sourceNew":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    this.indexOptions = fieldInfo.getIndexOptions();\n    //if (DEBUG) System.out.println(\"PW field=\" + fieldInfo.name + \" indexOptions=\" + indexOptions);\n    storePayloads = fieldInfo.hasPayloads();\n    wrappedPostingsWriter.setField(fieldInfo);\n    //DEBUG = BlockTreeTermsWriter.DEBUG;\n  }\n\n","sourceOld":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    this.indexOptions = fieldInfo.getIndexOptions();\n    //if (DEBUG) System.out.println(\"PW field=\" + fieldInfo.name + \" indexOptions=\" + indexOptions);\n    storePayloads = fieldInfo.hasPayloads();\n    wrappedPostingsWriter.setField(fieldInfo);\n    //DEBUG = BlockTreeTermsWriter.DEBUG;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","date":1377268487,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#setField(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#setField(FieldInfo).mjava","sourceNew":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public int setField(FieldInfo fieldInfo) {\n    this.indexOptions = fieldInfo.getIndexOptions();\n    //if (DEBUG) System.out.println(\"PW field=\" + fieldInfo.name + \" indexOptions=\" + indexOptions);\n    storePayloads = fieldInfo.hasPayloads();\n    absolute = false;\n    longsSize = wrappedPostingsWriter.setField(fieldInfo);\n    longs = new long[longsSize];\n    fields.add(new FieldMetaData(fieldInfo.number, longsSize));\n    return 0;\n    //DEBUG = BlockTreeTermsWriter.DEBUG;\n  }\n\n","sourceOld":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    this.indexOptions = fieldInfo.getIndexOptions();\n    //if (DEBUG) System.out.println(\"PW field=\" + fieldInfo.name + \" indexOptions=\" + indexOptions);\n    storePayloads = fieldInfo.hasPayloads();\n    wrappedPostingsWriter.setField(fieldInfo);\n    //DEBUG = BlockTreeTermsWriter.DEBUG;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#setField(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#setField(FieldInfo).mjava","sourceNew":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public int setField(FieldInfo fieldInfo) {\n    this.indexOptions = fieldInfo.getIndexOptions();\n    //if (DEBUG) System.out.println(\"PW field=\" + fieldInfo.name + \" indexOptions=\" + indexOptions);\n    storePayloads = fieldInfo.hasPayloads();\n    absolute = false;\n    longsSize = wrappedPostingsWriter.setField(fieldInfo);\n    longs = new long[longsSize];\n    fields.add(new FieldMetaData(fieldInfo.number, longsSize));\n    return 0;\n    //DEBUG = BlockTreeTermsWriter.DEBUG;\n  }\n\n","sourceOld":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    this.indexOptions = fieldInfo.getIndexOptions();\n    //if (DEBUG) System.out.println(\"PW field=\" + fieldInfo.name + \" indexOptions=\" + indexOptions);\n    storePayloads = fieldInfo.hasPayloads();\n    wrappedPostingsWriter.setField(fieldInfo);\n    //DEBUG = BlockTreeTermsWriter.DEBUG;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa80a35d7c4b2b1e83082b275e3e8328ab93db52","date":1381766157,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#setField(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#setField(FieldInfo).mjava","sourceNew":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public int setField(FieldInfo fieldInfo) {\n    this.indexOptions = fieldInfo.getIndexOptions();\n    //if (DEBUG) System.out.println(\"PW field=\" + fieldInfo.name + \" indexOptions=\" + indexOptions);\n    fieldHasPayloads = fieldInfo.hasPayloads();\n    absolute = false;\n    longsSize = wrappedPostingsWriter.setField(fieldInfo);\n    longs = new long[longsSize];\n    fields.add(new FieldMetaData(fieldInfo.number, longsSize));\n\n    fieldHasFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n    fieldHasPositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    fieldHasOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n\n    if (fieldHasFreqs == false) {\n      enumFlags = 0;\n    } else if (fieldHasPositions == false) {\n      enumFlags = DocsEnum.FLAG_FREQS;\n    } else if (fieldHasOffsets == false) {\n      if (fieldHasPayloads) {\n        enumFlags = DocsAndPositionsEnum.FLAG_PAYLOADS;\n      } else {\n        enumFlags = 0;\n      }\n    } else {\n      if (fieldHasPayloads) {\n        enumFlags = DocsAndPositionsEnum.FLAG_PAYLOADS | DocsAndPositionsEnum.FLAG_OFFSETS;\n      } else {\n        enumFlags = DocsAndPositionsEnum.FLAG_OFFSETS;\n      }\n    }\n    return 0;\n    //DEBUG = BlockTreeTermsWriter.DEBUG;\n  }\n\n","sourceOld":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public int setField(FieldInfo fieldInfo) {\n    this.indexOptions = fieldInfo.getIndexOptions();\n    //if (DEBUG) System.out.println(\"PW field=\" + fieldInfo.name + \" indexOptions=\" + indexOptions);\n    storePayloads = fieldInfo.hasPayloads();\n    absolute = false;\n    longsSize = wrappedPostingsWriter.setField(fieldInfo);\n    longs = new long[longsSize];\n    fields.add(new FieldMetaData(fieldInfo.number, longsSize));\n    return 0;\n    //DEBUG = BlockTreeTermsWriter.DEBUG;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbaae1c00d39df2c872bbe043af26d02d3818313","date":1409657064,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#setField(FieldInfo).mjava","sourceNew":null,"sourceOld":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public int setField(FieldInfo fieldInfo) {\n    this.indexOptions = fieldInfo.getIndexOptions();\n    //if (DEBUG) System.out.println(\"PW field=\" + fieldInfo.name + \" indexOptions=\" + indexOptions);\n    fieldHasPayloads = fieldInfo.hasPayloads();\n    absolute = false;\n    longsSize = wrappedPostingsWriter.setField(fieldInfo);\n    longs = new long[longsSize];\n    fields.add(new FieldMetaData(fieldInfo.number, longsSize));\n\n    fieldHasFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n    fieldHasPositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    fieldHasOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n\n    if (fieldHasFreqs == false) {\n      enumFlags = 0;\n    } else if (fieldHasPositions == false) {\n      enumFlags = DocsEnum.FLAG_FREQS;\n    } else if (fieldHasOffsets == false) {\n      if (fieldHasPayloads) {\n        enumFlags = DocsAndPositionsEnum.FLAG_PAYLOADS;\n      } else {\n        enumFlags = 0;\n      }\n    } else {\n      if (fieldHasPayloads) {\n        enumFlags = DocsAndPositionsEnum.FLAG_PAYLOADS | DocsAndPositionsEnum.FLAG_OFFSETS;\n      } else {\n        enumFlags = DocsAndPositionsEnum.FLAG_OFFSETS;\n      }\n    }\n    return 0;\n    //DEBUG = BlockTreeTermsWriter.DEBUG;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"fbaae1c00d39df2c872bbe043af26d02d3818313":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fbaae1c00d39df2c872bbe043af26d02d3818313"]},"commit2Childs":{"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"fbaae1c00d39df2c872bbe043af26d02d3818313":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","2f948dd442d23baa6cbb28daf77c8db78b351329"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["fbaae1c00d39df2c872bbe043af26d02d3818313"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}