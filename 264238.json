{"path":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#assertInvariants(String...).mjava","commits":[{"id":"af3e10d8a1fbcc5c79b22f7477e79de467dd326c","date":1515178406,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#assertInvariants(String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#assertInvariants().mjava","sourceNew":"  private void assertInvariants(String... expectedColls) throws IOException, SolrServerException {\n    final int expectNumFound = lastDocId - numDocsDeletedOrFailed; //lastDocId is effectively # generated docs\n\n    final List<String> cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assert !cols.isEmpty();\n\n    assertArrayEquals(\"expected reverse sorted\",\n        cols.stream().sorted(Collections.reverseOrder()).toArray(),\n        cols.toArray());\n\n    int totalNumFound = 0;\n    Instant colEndInstant = null; // exclusive end\n    for (String col : cols) { // ASSUMPTION: reverse sorted order\n      final Instant colStartInstant = TimeRoutedAliasUpdateProcessor.parseInstantFromCollectionName(alias, col);\n      final QueryResponse colStatsResp = solrClient.query(col, params(\n          \"q\", \"*:*\",\n          \"rows\", \"0\",\n          \"stats\", \"true\",\n          \"stats.field\", timeField));\n      long numFound = colStatsResp.getResults().getNumFound();\n      if (numFound > 0) {\n        totalNumFound += numFound;\n        final FieldStatsInfo timestampStats = colStatsResp.getFieldStatsInfo().get(timeField);\n        assertTrue(colStartInstant.toEpochMilli() <= ((Date)timestampStats.getMin()).getTime());\n        if (colEndInstant != null) {\n          assertTrue(colEndInstant.toEpochMilli() > ((Date)timestampStats.getMax()).getTime());\n        }\n      }\n\n      colEndInstant = colStartInstant; // next older segment will max out at our current start time\n    }\n    assertEquals(expectNumFound, totalNumFound);\n    assertArrayEquals(expectedColls, cols.toArray());\n  }\n\n","sourceOld":"  private void assertInvariants() throws IOException, SolrServerException {\n    final int expectNumFound = lastDocId - numDocsDeletedOrFailed; //lastDocId is effectively # generated docs\n\n    final List<String> cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assert !cols.isEmpty();\n\n    int totalNumFound = 0;\n    Instant colEndInstant = null; // exclusive end\n    for (String col : cols) {\n      final Instant colStartInstant = TimeRoutedAliasUpdateProcessor.parseInstantFromCollectionName(alias, col);\n      //TODO do this in parallel threads\n      final QueryResponse colStatsResp = solrClient.query(col, params(\n          \"q\", \"*:*\",\n          \"rows\", \"0\",\n          \"stats\", \"true\",\n          \"stats.field\", timeField));\n      long numFound = colStatsResp.getResults().getNumFound();\n      if (numFound > 0) {\n        totalNumFound += numFound;\n        final FieldStatsInfo timestampStats = colStatsResp.getFieldStatsInfo().get(timeField);\n        assertTrue(colStartInstant.toEpochMilli() <= ((Date)timestampStats.getMin()).getTime());\n        if (colEndInstant != null) {\n          assertTrue(colEndInstant.toEpochMilli() > ((Date)timestampStats.getMax()).getTime());\n        }\n      }\n\n      colEndInstant = colStartInstant; // next older segment will max out at our current start time\n    }\n    assertEquals(expectNumFound, totalNumFound);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#assertInvariants(String...).mjava","pathOld":"/dev/null","sourceNew":"  private void assertInvariants(String... expectedColls) throws IOException, SolrServerException {\n    final int expectNumFound = lastDocId - numDocsDeletedOrFailed; //lastDocId is effectively # generated docs\n\n    final List<String> cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assert !cols.isEmpty();\n\n    assertArrayEquals(\"expected reverse sorted\",\n        cols.stream().sorted(Collections.reverseOrder()).toArray(),\n        cols.toArray());\n\n    int totalNumFound = 0;\n    Instant colEndInstant = null; // exclusive end\n    for (String col : cols) { // ASSUMPTION: reverse sorted order\n      final Instant colStartInstant = TimeRoutedAliasUpdateProcessor.parseInstantFromCollectionName(alias, col);\n      final QueryResponse colStatsResp = solrClient.query(col, params(\n          \"q\", \"*:*\",\n          \"rows\", \"0\",\n          \"stats\", \"true\",\n          \"stats.field\", timeField));\n      long numFound = colStatsResp.getResults().getNumFound();\n      if (numFound > 0) {\n        totalNumFound += numFound;\n        final FieldStatsInfo timestampStats = colStatsResp.getFieldStatsInfo().get(timeField);\n        assertTrue(colStartInstant.toEpochMilli() <= ((Date)timestampStats.getMin()).getTime());\n        if (colEndInstant != null) {\n          assertTrue(colEndInstant.toEpochMilli() > ((Date)timestampStats.getMax()).getTime());\n        }\n      }\n\n      colEndInstant = colStartInstant; // next older segment will max out at our current start time\n    }\n    assertEquals(expectNumFound, totalNumFound);\n    assertArrayEquals(expectedColls, cols.toArray());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46589ed5cc841861bf6b5e2afc55f718ebcd02a0","date":1516984620,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#assertInvariants(String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#assertInvariants(String...).mjava","sourceNew":"  private void assertInvariants(String... expectedColls) throws IOException, SolrServerException {\n    final int expectNumFound = lastDocId - numDocsDeletedOrFailed; //lastDocId is effectively # generated docs\n\n    final List<String> cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assert !cols.isEmpty();\n\n    assertArrayEquals(\"expected reverse sorted\",\n        cols.stream().sorted(Collections.reverseOrder()).toArray(),\n        cols.toArray());\n\n    int totalNumFound = 0;\n    Instant colEndInstant = null; // exclusive end\n    for (String col : cols) { // ASSUMPTION: reverse sorted order\n      final Instant colStartInstant = TimeRoutedAlias.parseInstantFromCollectionName(alias, col);\n      final QueryResponse colStatsResp = solrClient.query(col, params(\n          \"q\", \"*:*\",\n          \"rows\", \"0\",\n          \"stats\", \"true\",\n          \"stats.field\", timeField));\n      long numFound = colStatsResp.getResults().getNumFound();\n      if (numFound > 0) {\n        totalNumFound += numFound;\n        final FieldStatsInfo timestampStats = colStatsResp.getFieldStatsInfo().get(timeField);\n        assertTrue(colStartInstant.toEpochMilli() <= ((Date)timestampStats.getMin()).getTime());\n        if (colEndInstant != null) {\n          assertTrue(colEndInstant.toEpochMilli() > ((Date)timestampStats.getMax()).getTime());\n        }\n      }\n\n      colEndInstant = colStartInstant; // next older segment will max out at our current start time\n    }\n    assertEquals(expectNumFound, totalNumFound);\n    assertArrayEquals(expectedColls, cols.toArray());\n  }\n\n","sourceOld":"  private void assertInvariants(String... expectedColls) throws IOException, SolrServerException {\n    final int expectNumFound = lastDocId - numDocsDeletedOrFailed; //lastDocId is effectively # generated docs\n\n    final List<String> cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assert !cols.isEmpty();\n\n    assertArrayEquals(\"expected reverse sorted\",\n        cols.stream().sorted(Collections.reverseOrder()).toArray(),\n        cols.toArray());\n\n    int totalNumFound = 0;\n    Instant colEndInstant = null; // exclusive end\n    for (String col : cols) { // ASSUMPTION: reverse sorted order\n      final Instant colStartInstant = TimeRoutedAliasUpdateProcessor.parseInstantFromCollectionName(alias, col);\n      final QueryResponse colStatsResp = solrClient.query(col, params(\n          \"q\", \"*:*\",\n          \"rows\", \"0\",\n          \"stats\", \"true\",\n          \"stats.field\", timeField));\n      long numFound = colStatsResp.getResults().getNumFound();\n      if (numFound > 0) {\n        totalNumFound += numFound;\n        final FieldStatsInfo timestampStats = colStatsResp.getFieldStatsInfo().get(timeField);\n        assertTrue(colStartInstant.toEpochMilli() <= ((Date)timestampStats.getMin()).getTime());\n        if (colEndInstant != null) {\n          assertTrue(colEndInstant.toEpochMilli() > ((Date)timestampStats.getMax()).getTime());\n        }\n      }\n\n      colEndInstant = colStartInstant; // next older segment will max out at our current start time\n    }\n    assertEquals(expectNumFound, totalNumFound);\n    assertArrayEquals(expectedColls, cols.toArray());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b627755385655c7cd3fb296f17593658805cf4d5","date":1552455143,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#assertInvariants(String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#assertInvariants(String...).mjava","sourceNew":"  private void assertInvariants(String... expectedColls) throws IOException, SolrServerException {\n    final int expectNumFound = lastDocId - numDocsDeletedOrFailed; //lastDocId is effectively # generated docs\n\n    final List<String> cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assert !cols.isEmpty();\n\n    assertArrayEquals(\"expected reverse sorted\",\n        cols.stream().sorted(Collections.reverseOrder()).toArray(),\n        cols.toArray());\n\n    int totalNumFound = 0;\n    Instant colEndInstant = null; // exclusive end\n    for (String col : cols) { // ASSUMPTION: reverse sorted order\n      final Instant colStartInstant = TimeRoutedAlias.parseInstantFromCollectionName(alias, col);\n      final QueryResponse colStatsResp = solrClient.query(col, params(\n          \"q\", \"*:*\",\n          \"rows\", \"0\",\n          \"stats\", \"true\",\n          \"stats.field\", getTimeField()));\n      long numFound = colStatsResp.getResults().getNumFound();\n      if (numFound > 0) {\n        totalNumFound += numFound;\n        final FieldStatsInfo timestampStats = colStatsResp.getFieldStatsInfo().get(getTimeField());\n        assertTrue(colStartInstant.toEpochMilli() <= ((Date)timestampStats.getMin()).getTime());\n        if (colEndInstant != null) {\n          assertTrue(colEndInstant.toEpochMilli() > ((Date)timestampStats.getMax()).getTime());\n        }\n      }\n\n      colEndInstant = colStartInstant; // next older segment will max out at our current start time\n    }\n    assertEquals(expectNumFound, totalNumFound);\n    assertArrayEquals(expectedColls, cols.toArray());\n  }\n\n","sourceOld":"  private void assertInvariants(String... expectedColls) throws IOException, SolrServerException {\n    final int expectNumFound = lastDocId - numDocsDeletedOrFailed; //lastDocId is effectively # generated docs\n\n    final List<String> cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assert !cols.isEmpty();\n\n    assertArrayEquals(\"expected reverse sorted\",\n        cols.stream().sorted(Collections.reverseOrder()).toArray(),\n        cols.toArray());\n\n    int totalNumFound = 0;\n    Instant colEndInstant = null; // exclusive end\n    for (String col : cols) { // ASSUMPTION: reverse sorted order\n      final Instant colStartInstant = TimeRoutedAlias.parseInstantFromCollectionName(alias, col);\n      final QueryResponse colStatsResp = solrClient.query(col, params(\n          \"q\", \"*:*\",\n          \"rows\", \"0\",\n          \"stats\", \"true\",\n          \"stats.field\", timeField));\n      long numFound = colStatsResp.getResults().getNumFound();\n      if (numFound > 0) {\n        totalNumFound += numFound;\n        final FieldStatsInfo timestampStats = colStatsResp.getFieldStatsInfo().get(timeField);\n        assertTrue(colStartInstant.toEpochMilli() <= ((Date)timestampStats.getMin()).getTime());\n        if (colEndInstant != null) {\n          assertTrue(colEndInstant.toEpochMilli() > ((Date)timestampStats.getMax()).getTime());\n        }\n      }\n\n      colEndInstant = colStartInstant; // next older segment will max out at our current start time\n    }\n    assertEquals(expectNumFound, totalNumFound);\n    assertArrayEquals(expectedColls, cols.toArray());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","af3e10d8a1fbcc5c79b22f7477e79de467dd326c"],"46589ed5cc841861bf6b5e2afc55f718ebcd02a0":["b94236357aaa22b76c10629851fe4e376e0cea82"],"af3e10d8a1fbcc5c79b22f7477e79de467dd326c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b627755385655c7cd3fb296f17593658805cf4d5":["46589ed5cc841861bf6b5e2afc55f718ebcd02a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b627755385655c7cd3fb296f17593658805cf4d5"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["46589ed5cc841861bf6b5e2afc55f718ebcd02a0"],"46589ed5cc841861bf6b5e2afc55f718ebcd02a0":["b627755385655c7cd3fb296f17593658805cf4d5"],"af3e10d8a1fbcc5c79b22f7477e79de467dd326c":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","af3e10d8a1fbcc5c79b22f7477e79de467dd326c"],"b627755385655c7cd3fb296f17593658805cf4d5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}