{"path":"src/java/org/apache/lucene/analysis/de/GermanStemFilter#next().mjava","commits":[{"id":"3ee067e27d1cce6d2d5d64280007410c2e1a38d8","date":1001438945,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/de/GermanStemFilter#next().mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t * @return  Returns the next token in the stream, or null at EOS.\n\t */\n\tpublic final Token next()\n\t\tthrows IOException {\n\t\tif ( ( token = input.next() ) == null ) {\n\t\t\treturn null;\n\t\t}\n\t\t// Check the exclusiontable.\n\t\telse if ( exclusions != null && exclusions.contains( token.termText() ) ) {\n\t\t\treturn token;\n\t\t}\n\t\telse {\n\t\t\tString s = stemmer.stem( token.termText() );\n\t\t\t// If not stemmed, dont waste the time creating a new token.\n\t\t\tif ( !s.equals( token.termText() ) ) {\n\t\t\t\treturn new Token( s, 0, s.length(), token.type() );\n\t\t\t}\n\t\t\treturn token;\n\t\t}\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b027969b494a02d6f7a03a43537cc6935afce2a","date":1008019104,"type":3,"author":"gschwarz","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/de/GermanStemFilter#next().mjava","pathOld":"src/java/org/apache/lucene/analysis/de/GermanStemFilter#next().mjava","sourceNew":"\t/**\n\t * @return  Returns the next token in the stream, or null at EOS\n\t */\n\tpublic final Token next()\n\t\tthrows IOException {\n\t\tif ( ( token = input.next() ) == null ) {\n\t\t\treturn null;\n\t\t}\n\t\t// Check the exclusiontable\n\t\telse if ( exclusions != null && exclusions.contains( token.termText() ) ) {\n\t\t\treturn token;\n\t\t}\n\t\telse {\n\t\t\tString s = stemmer.stem( token.termText() );\n\t\t\t// If not stemmed, dont waste the time creating a new token\n\t\t\tif ( !s.equals( token.termText() ) ) {\n\t\t\t\treturn new Token( s, 0, s.length(), token.type() );\n\t\t\t}\n\t\t\treturn token;\n\t\t}\n\t}\n\n","sourceOld":"\t/**\n\t * @return  Returns the next token in the stream, or null at EOS.\n\t */\n\tpublic final Token next()\n\t\tthrows IOException {\n\t\tif ( ( token = input.next() ) == null ) {\n\t\t\treturn null;\n\t\t}\n\t\t// Check the exclusiontable.\n\t\telse if ( exclusions != null && exclusions.contains( token.termText() ) ) {\n\t\t\treturn token;\n\t\t}\n\t\telse {\n\t\t\tString s = stemmer.stem( token.termText() );\n\t\t\t// If not stemmed, dont waste the time creating a new token.\n\t\t\tif ( !s.equals( token.termText() ) ) {\n\t\t\t\treturn new Token( s, 0, s.length(), token.type() );\n\t\t\t}\n\t\t\treturn token;\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0ed84a2c9b7520a283d5329aed0fea27970bb8d","date":1019243312,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/de/GermanStemFilter#next().mjava","pathOld":"src/java/org/apache/lucene/analysis/de/GermanStemFilter#next().mjava","sourceNew":"\t/**\n\t * @return  Returns the next token in the stream, or null at EOS\n\t */\n\tpublic final Token next()\n\t\tthrows IOException {\n\t\tif ( ( token = input.next() ) == null ) {\n\t\t\treturn null;\n\t\t}\n\t\t// Check the exclusiontable\n\t\telse if ( exclusions != null && exclusions.contains( token.termText() ) ) {\n\t\t\treturn token;\n\t\t}\n\t\telse {\n\t\t\tString s = stemmer.stem( token.termText() );\n\t\t\t// If not stemmed, dont waste the time creating a new token\n\t\t\tif ( !s.equals( token.termText() ) ) {\n\t\t\t\treturn new Token( s, token.startOffset(),\n\t\t\t\t    token.endOffset(), token.type() );\n\t\t\t}\n\t\t\treturn token;\n\t\t}\n\t}\n\n","sourceOld":"\t/**\n\t * @return  Returns the next token in the stream, or null at EOS\n\t */\n\tpublic final Token next()\n\t\tthrows IOException {\n\t\tif ( ( token = input.next() ) == null ) {\n\t\t\treturn null;\n\t\t}\n\t\t// Check the exclusiontable\n\t\telse if ( exclusions != null && exclusions.contains( token.termText() ) ) {\n\t\t\treturn token;\n\t\t}\n\t\telse {\n\t\t\tString s = stemmer.stem( token.termText() );\n\t\t\t// If not stemmed, dont waste the time creating a new token\n\t\t\tif ( !s.equals( token.termText() ) ) {\n\t\t\t\treturn new Token( s, 0, s.length(), token.type() );\n\t\t\t}\n\t\t\treturn token;\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1b51af49aa8e1c86a2453fc1d1b618effb6ec8e","date":1029691996,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/de/GermanStemFilter#next().mjava","pathOld":"src/java/org/apache/lucene/analysis/de/GermanStemFilter#next().mjava","sourceNew":"    /**\n     * @return  Returns the next token in the stream, or null at EOS\n     */\n    public final Token next()\n\tthrows IOException\n    {\n\tif ( ( token = input.next() ) == null ) {\n\t    return null;\n\t}\n\t// Check the exclusiontable\n\telse if ( exclusions != null && exclusions.contains( token.termText() ) ) {\n\t    return token;\n\t}\n\telse {\n\t    String s = stemmer.stem( token.termText() );\n\t    // If not stemmed, dont waste the time creating a new token\n\t    if ( !s.equals( token.termText() ) ) {\n\t\treturn new Token( s, token.startOffset(),\n\t\t    token.endOffset(), token.type() );\n\t    }\n\t    return token;\n\t}\n    }\n\n","sourceOld":"\t/**\n\t * @return  Returns the next token in the stream, or null at EOS\n\t */\n\tpublic final Token next()\n\t\tthrows IOException {\n\t\tif ( ( token = input.next() ) == null ) {\n\t\t\treturn null;\n\t\t}\n\t\t// Check the exclusiontable\n\t\telse if ( exclusions != null && exclusions.contains( token.termText() ) ) {\n\t\t\treturn token;\n\t\t}\n\t\telse {\n\t\t\tString s = stemmer.stem( token.termText() );\n\t\t\t// If not stemmed, dont waste the time creating a new token\n\t\t\tif ( !s.equals( token.termText() ) ) {\n\t\t\t\treturn new Token( s, token.startOffset(),\n\t\t\t\t    token.endOffset(), token.type() );\n\t\t\t}\n\t\t\treturn token;\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14dd1f81165dd4704a95f7427639ada7c3047f7","date":1079084628,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/de/GermanStemFilter#next().mjava","pathOld":"src/java/org/apache/lucene/analysis/de/GermanStemFilter#next().mjava","sourceNew":"    /**\n     * @return  Returns the next token in the stream, or null at EOS\n     */\n    public final Token next()\n\tthrows IOException\n    {\n\tif ( ( token = input.next() ) == null ) {\n\t    return null;\n\t}\n\t// Check the exclusiontable\n\telse if ( exclusionSet != null && exclusionSet.contains( token.termText() ) ) {\n\t    return token;\n\t}\n\telse {\n\t    String s = stemmer.stem( token.termText() );\n\t    // If not stemmed, dont waste the time creating a new token\n\t    if ( !s.equals( token.termText() ) ) {\n\t\treturn new Token( s, token.startOffset(),\n\t\t    token.endOffset(), token.type() );\n\t    }\n\t    return token;\n\t}\n    }\n\n","sourceOld":"    /**\n     * @return  Returns the next token in the stream, or null at EOS\n     */\n    public final Token next()\n\tthrows IOException\n    {\n\tif ( ( token = input.next() ) == null ) {\n\t    return null;\n\t}\n\t// Check the exclusiontable\n\telse if ( exclusions != null && exclusions.contains( token.termText() ) ) {\n\t    return token;\n\t}\n\telse {\n\t    String s = stemmer.stem( token.termText() );\n\t    // If not stemmed, dont waste the time creating a new token\n\t    if ( !s.equals( token.termText() ) ) {\n\t\treturn new Token( s, token.startOffset(),\n\t\t    token.endOffset(), token.type() );\n\t    }\n\t    return token;\n\t}\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d195ac4f5f0fd16249e88707973706feb1214df0","date":1080662088,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/de/GermanStemFilter#next().mjava","pathOld":"src/java/org/apache/lucene/analysis/de/GermanStemFilter#next().mjava","sourceNew":"    /**\n     * @return  Returns the next token in the stream, or null at EOS\n     */\n    public final Token next()\n      throws IOException\n    {\n      if ( ( token = input.next() ) == null ) {\n        return null;\n      }\n      // Check the exclusiontable\n      else if ( exclusionSet != null && exclusionSet.contains( token.termText() ) ) {\n        return token;\n      }\n      else {\n        String s = stemmer.stem( token.termText() );\n        // If not stemmed, dont waste the time creating a new token\n        if ( !s.equals( token.termText() ) ) {\n          return new Token( s, token.startOffset(),\n            token.endOffset(), token.type() );\n        }\n        return token;\n      }\n    }\n\n","sourceOld":"    /**\n     * @return  Returns the next token in the stream, or null at EOS\n     */\n    public final Token next()\n\tthrows IOException\n    {\n\tif ( ( token = input.next() ) == null ) {\n\t    return null;\n\t}\n\t// Check the exclusiontable\n\telse if ( exclusionSet != null && exclusionSet.contains( token.termText() ) ) {\n\t    return token;\n\t}\n\telse {\n\t    String s = stemmer.stem( token.termText() );\n\t    // If not stemmed, dont waste the time creating a new token\n\t    if ( !s.equals( token.termText() ) ) {\n\t\treturn new Token( s, token.startOffset(),\n\t\t    token.endOffset(), token.type() );\n\t    }\n\t    return token;\n\t}\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb502dc71e908fb2c30e64b73e1f7e7b6238f5a2","date":1092688309,"type":4,"author":"Daniel Naber","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/analysis/de/GermanStemFilter#next().mjava","sourceNew":null,"sourceOld":"    /**\n     * @return  Returns the next token in the stream, or null at EOS\n     */\n    public final Token next()\n      throws IOException\n    {\n      if ( ( token = input.next() ) == null ) {\n        return null;\n      }\n      // Check the exclusiontable\n      else if ( exclusionSet != null && exclusionSet.contains( token.termText() ) ) {\n        return token;\n      }\n      else {\n        String s = stemmer.stem( token.termText() );\n        // If not stemmed, dont waste the time creating a new token\n        if ( !s.equals( token.termText() ) ) {\n          return new Token( s, token.startOffset(),\n            token.endOffset(), token.type() );\n        }\n        return token;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3ee067e27d1cce6d2d5d64280007410c2e1a38d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"eb502dc71e908fb2c30e64b73e1f7e7b6238f5a2":["d195ac4f5f0fd16249e88707973706feb1214df0"],"d195ac4f5f0fd16249e88707973706feb1214df0":["d14dd1f81165dd4704a95f7427639ada7c3047f7"],"f1b51af49aa8e1c86a2453fc1d1b618effb6ec8e":["b0ed84a2c9b7520a283d5329aed0fea27970bb8d"],"9b027969b494a02d6f7a03a43537cc6935afce2a":["3ee067e27d1cce6d2d5d64280007410c2e1a38d8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d14dd1f81165dd4704a95f7427639ada7c3047f7":["f1b51af49aa8e1c86a2453fc1d1b618effb6ec8e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eb502dc71e908fb2c30e64b73e1f7e7b6238f5a2"],"b0ed84a2c9b7520a283d5329aed0fea27970bb8d":["9b027969b494a02d6f7a03a43537cc6935afce2a"]},"commit2Childs":{"3ee067e27d1cce6d2d5d64280007410c2e1a38d8":["9b027969b494a02d6f7a03a43537cc6935afce2a"],"eb502dc71e908fb2c30e64b73e1f7e7b6238f5a2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3ee067e27d1cce6d2d5d64280007410c2e1a38d8"],"d195ac4f5f0fd16249e88707973706feb1214df0":["eb502dc71e908fb2c30e64b73e1f7e7b6238f5a2"],"f1b51af49aa8e1c86a2453fc1d1b618effb6ec8e":["d14dd1f81165dd4704a95f7427639ada7c3047f7"],"9b027969b494a02d6f7a03a43537cc6935afce2a":["b0ed84a2c9b7520a283d5329aed0fea27970bb8d"],"d14dd1f81165dd4704a95f7427639ada7c3047f7":["d195ac4f5f0fd16249e88707973706feb1214df0"],"b0ed84a2c9b7520a283d5329aed0fea27970bb8d":["f1b51af49aa8e1c86a2453fc1d1b618effb6ec8e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}