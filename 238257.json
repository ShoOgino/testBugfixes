{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByNameTask#reportSumByName(List).mjava","commits":[{"id":"1ebcfbd9662f54e73fdfe1f4d675ea39531fb9b0","date":1174485154,"type":1,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByNameTask#reportSumByName(List).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/stats/Points#reportSumByName().mjava","sourceNew":"  /**\n   * Report statistics as a string, aggregate for tasks named the same.\n   * @return the report\n   */\n  protected Report reportSumByName(List taskStats) {\n    // aggregate by task name\n    int reported = 0;\n    LinkedHashMap p2 = new LinkedHashMap();\n    for (Iterator it = taskStats.iterator(); it.hasNext();) {\n      TaskStats stat1 = (TaskStats) it.next();\n      if (stat1.getElapsed()>=0) { // consider only tasks that ended\n        reported++;\n        String name = stat1.getTask().getName();\n        TaskStats stat2 = (TaskStats) p2.get(name);\n        if (stat2 == null) {\n          try {\n            stat2 = (TaskStats) stat1.clone();\n          } catch (CloneNotSupportedException e) {\n            throw new RuntimeException(e);\n          }\n          p2.put(name,stat2);\n        } else {\n          stat2.add(stat1);\n        }\n      }\n    }\n    // now generate report from secondary list p2    \n    return genPartialReport(reported, p2, taskStats.size());\n  }\n\n","sourceOld":"  /**\r\n   * Report statistics as a string, aggregate for tasks named the same.\r\n   * @return the report\r\n   */\r\n  public Report reportSumByName() {\r\n    // aggregate by task name\r\n    int reported = 0;\r\n    LinkedHashMap p2 = new LinkedHashMap();\r\n    for (Iterator it = points.iterator(); it.hasNext();) {\r\n      TaskStats stat1 = (TaskStats) it.next();\r\n      if (stat1.getElapsed()>=0) { // consider only tasks that ended\r\n        reported++;\r\n        String name = stat1.getTask().getName();\r\n        TaskStats stat2 = (TaskStats) p2.get(name);\r\n        if (stat2 == null) {\r\n          try {\r\n            stat2 = (TaskStats) stat1.clone();\r\n          } catch (CloneNotSupportedException e) {\r\n            throw new RuntimeException(e);\r\n          }\r\n          p2.put(name,stat2);\r\n        } else {\r\n          stat2.add(stat1);\r\n        }\r\n      }\r\n    }\r\n    // now generate report from secondary list p2    \r\n    return genReportFromList(reported, p2);\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e1ce9be74263e9659aad8a6ee1f213193710b71","date":1256298843,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByNameTask#reportSumByName(List[TaskStats]).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByNameTask#reportSumByName(List).mjava","sourceNew":"  /**\n   * Report statistics as a string, aggregate for tasks named the same.\n   * @return the report\n   */\n  protected Report reportSumByName(List<TaskStats> taskStats) {\n    // aggregate by task name\n    int reported = 0;\n    LinkedHashMap<String,TaskStats> p2 = new LinkedHashMap<String,TaskStats>();\n    for (final TaskStats stat1: taskStats) {\n      if (stat1.getElapsed()>=0) { // consider only tasks that ended\n        reported++;\n        String name = stat1.getTask().getName();\n        TaskStats stat2 = p2.get(name);\n        if (stat2 == null) {\n          try {\n            stat2 = (TaskStats) stat1.clone();\n          } catch (CloneNotSupportedException e) {\n            throw new RuntimeException(e);\n          }\n          p2.put(name,stat2);\n        } else {\n          stat2.add(stat1);\n        }\n      }\n    }\n    // now generate report from secondary list p2    \n    return genPartialReport(reported, p2, taskStats.size());\n  }\n\n","sourceOld":"  /**\n   * Report statistics as a string, aggregate for tasks named the same.\n   * @return the report\n   */\n  protected Report reportSumByName(List taskStats) {\n    // aggregate by task name\n    int reported = 0;\n    LinkedHashMap p2 = new LinkedHashMap();\n    for (Iterator it = taskStats.iterator(); it.hasNext();) {\n      TaskStats stat1 = (TaskStats) it.next();\n      if (stat1.getElapsed()>=0) { // consider only tasks that ended\n        reported++;\n        String name = stat1.getTask().getName();\n        TaskStats stat2 = (TaskStats) p2.get(name);\n        if (stat2 == null) {\n          try {\n            stat2 = (TaskStats) stat1.clone();\n          } catch (CloneNotSupportedException e) {\n            throw new RuntimeException(e);\n          }\n          p2.put(name,stat2);\n        } else {\n          stat2.add(stat1);\n        }\n      }\n    }\n    // now generate report from secondary list p2    \n    return genPartialReport(reported, p2, taskStats.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1ebcfbd9662f54e73fdfe1f4d675ea39531fb9b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4e1ce9be74263e9659aad8a6ee1f213193710b71":["1ebcfbd9662f54e73fdfe1f4d675ea39531fb9b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4e1ce9be74263e9659aad8a6ee1f213193710b71"]},"commit2Childs":{"1ebcfbd9662f54e73fdfe1f4d675ea39531fb9b0":["4e1ce9be74263e9659aad8a6ee1f213193710b71"],"4e1ce9be74263e9659aad8a6ee1f213193710b71":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1ebcfbd9662f54e73fdfe1f4d675ea39531fb9b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}