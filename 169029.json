{"path":"lucene/src/test-framework/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder#convert(State,IdentityHashMap[State,org.apache.lucene.util.automaton.State]).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder#convert(State,IdentityHashMap[State,org.apache.lucene.util.automaton.State]).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder#convert(State,IdentityHashMap[State,org.apache.lucene.util.automaton.State]).mjava","sourceNew":"  /**\n   * Internal recursive traversal for conversion.\n   */\n  private static org.apache.lucene.util.automaton.State convert(State s,\n      IdentityHashMap<State,org.apache.lucene.util.automaton.State> visited) {\n    org.apache.lucene.util.automaton.State converted = visited.get(s);\n    if (converted != null) return converted;\n    \n    converted = new org.apache.lucene.util.automaton.State();\n    converted.setAccept(s.is_final);\n    \n    visited.put(s, converted);\n    int i = 0;\n    int[] labels = s.labels;\n    for (DaciukMihovAutomatonBuilder.State target : s.states) {\n      converted.addTransition(new Transition(labels[i++], convert(target,\n          visited)));\n    }\n    \n    return converted;\n  }\n\n","sourceOld":"  /**\n   * Internal recursive traversal for conversion.\n   */\n  private static org.apache.lucene.util.automaton.State convert(State s,\n      IdentityHashMap<State,org.apache.lucene.util.automaton.State> visited) {\n    org.apache.lucene.util.automaton.State converted = visited.get(s);\n    if (converted != null) return converted;\n    \n    converted = new org.apache.lucene.util.automaton.State();\n    converted.setAccept(s.is_final);\n    \n    visited.put(s, converted);\n    int i = 0;\n    int[] labels = s.labels;\n    for (DaciukMihovAutomatonBuilder.State target : s.states) {\n      converted.addTransition(new Transition(labels[i++], convert(target,\n          visited)));\n    }\n    \n    return converted;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder#convert(State,IdentityHashMap[State,org.apache.lucene.util.automaton.State]).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder#convert(State,IdentityHashMap[State,org.apache.lucene.util.automaton.State]).mjava","sourceNew":"  /**\n   * Internal recursive traversal for conversion.\n   */\n  private static org.apache.lucene.util.automaton.State convert(State s,\n      IdentityHashMap<State,org.apache.lucene.util.automaton.State> visited) {\n    org.apache.lucene.util.automaton.State converted = visited.get(s);\n    if (converted != null) return converted;\n    \n    converted = new org.apache.lucene.util.automaton.State();\n    converted.setAccept(s.is_final);\n    \n    visited.put(s, converted);\n    int i = 0;\n    int[] labels = s.labels;\n    for (DaciukMihovAutomatonBuilder.State target : s.states) {\n      converted.addTransition(new Transition(labels[i++], convert(target,\n          visited)));\n    }\n    \n    return converted;\n  }\n\n","sourceOld":"  /**\n   * Internal recursive traversal for conversion.\n   */\n  private static org.apache.lucene.util.automaton.State convert(State s,\n      IdentityHashMap<State,org.apache.lucene.util.automaton.State> visited) {\n    org.apache.lucene.util.automaton.State converted = visited.get(s);\n    if (converted != null) return converted;\n    \n    converted = new org.apache.lucene.util.automaton.State();\n    converted.setAccept(s.is_final);\n    \n    visited.put(s, converted);\n    int i = 0;\n    int[] labels = s.labels;\n    for (DaciukMihovAutomatonBuilder.State target : s.states) {\n      converted.addTransition(new Transition(labels[i++], convert(target,\n          visited)));\n    }\n    \n    return converted;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7b91922b55d15444d554721b352861d028eb8278"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}