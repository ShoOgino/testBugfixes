{"path":"contrib/db/bdb-je/src/test/org/apache/lucene/store/je/JEStoreTest#tesArrays().mjava","commits":[{"id":"726b696258060f802944722ff3cbb190dd5140ac","date":1145053400,"type":1,"author":"Andreas Vajda","isMerge":false,"pathNew":"contrib/db/bdb-je/src/test/org/apache/lucene/store/je/JEStoreTest#tesArrays().mjava","pathOld":"contrib/db/bdb-je/src/test/org/apache/lucene/store/je/JEStoreTest#testArrays().mjava","sourceNew":"    public void tesArrays() throws Exception {\n        final int count = 250;\n        final int LENGTH_MASK = 0xffff;\n\n        Random gen = new Random(1251971);\n        int totalLength = 0;\n        int duration;\n        Date end;\n\n        Date veryStart = new Date();\n        Date start = new Date();\n        Transaction txn = null;\n        Directory store = null;\n\n        System.out.println(\"Writing files as one byte array\");\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexOutput file = store.createOutput(name);\n                byte[] data = new byte[length];\n\n                totalLength += length;\n                gen.nextBytes(data);\n                file.writeBytes(data, length);\n\n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        duration = (int) (end.getTime() - start.getTime());\n        System.out.print(duration);\n        System.out.print(\" total milliseconds to create, \");\n        System.out.print(totalLength / duration);\n        System.out.println(\" kb/s\");\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(1251971);\n            start = new Date();\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexInput file = store.openInput(name);\n\n                if (file.length() != length)\n                    throw new Exception(\"length incorrect\");\n\n                byte[] data = new byte[length];\n                byte[] read = new byte[length];\n                gen.nextBytes(data);\n                file.readBytes(read, 0, length);\n\n                if (!Arrays.equals(data, read))\n                    throw new Exception(\"contents incorrect\");\n\n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        duration = (int) (end.getTime() - start.getTime());\n        System.out.print(duration);\n        System.out.print(\" total milliseconds to read, \");\n        System.out.print(totalLength / duration);\n        System.out.println(\" kb/s\");\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(1251971);\n            start = new Date();\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                store.deleteFile(name);\n            }\n\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        System.out.print(end.getTime() - start.getTime());\n        System.out.println(\" total milliseconds to delete\");\n\n        System.out.print(end.getTime() - veryStart.getTime());\n        System.out.println(\" total milliseconds\");\n    }\n\n","sourceOld":"    public void testArrays()\n        throws Exception\n    {\n        final int count = 250;\n        final int LENGTH_MASK = 0xffff;\n\n        Random gen = new Random(1251971);\n        int totalLength = 0;\n        int duration;\n        Date end;\n    \n        Date veryStart = new Date();\n        Date start = new Date();\n        Transaction txn = null;\n        Directory store = null;\n\n        System.out.println(\"Writing files as one byte array\");\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexOutput file = store.createOutput(name);\n                byte[] data = new byte[length];\n\n                totalLength += length;\n                gen.nextBytes(data);\n                file.writeBytes(data, length);\n      \n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null)\n            {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        duration = (int) (end.getTime() - start.getTime());\n        System.out.print(duration);\n        System.out.print(\" total milliseconds to create, \");\n        System.out.print(totalLength / duration);\n        System.out.println(\" kb/s\");\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(1251971);\n            start = new Date();\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexInput file = store.openInput(name);\n                \n                if (file.length() != length)\n                    throw new Exception(\"length incorrect\");\n\n                byte[] data = new byte[length];\n                byte[] read = new byte[length];\n                gen.nextBytes(data);\n                file.readBytes(read, 0, length);\n\n                if (!Arrays.equals(data, read))\n                    throw new Exception(\"contents incorrect\");\n\n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null)\n            {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        duration = (int) (end.getTime() - start.getTime());\n        System.out.print(duration);\n        System.out.print(\" total milliseconds to read, \");\n        System.out.print(totalLength / duration);\n        System.out.println(\" kb/s\");\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(1251971);\n            start = new Date();\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                store.deleteFile(name);\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null)\n            {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        System.out.print(end.getTime() - start.getTime());\n        System.out.println(\" total milliseconds to delete\");\n\n        System.out.print(end.getTime() - veryStart.getTime());\n        System.out.println(\" total milliseconds\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25e0aaaec0defe1bacaadfe8f619322269457753","date":1222654911,"type":5,"author":"Andreas Vajda","isMerge":false,"pathNew":"contrib/db/bdb-je/src/test/org/apache/lucene/store/je/JEStoreTest#testArrays().mjava","pathOld":"contrib/db/bdb-je/src/test/org/apache/lucene/store/je/JEStoreTest#tesArrays().mjava","sourceNew":"    public void testArrays() throws Exception {\n        final int count = 250;\n        final int LENGTH_MASK = 0xffff;\n\n        Random gen = new Random(1251971);\n        int totalLength = 0;\n        int duration;\n        Date end;\n\n        Date veryStart = new Date();\n        Date start = new Date();\n        Transaction txn = null;\n        Directory store = null;\n\n        System.out.println(\"Writing files as one byte array\");\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexOutput file = store.createOutput(name);\n                byte[] data = new byte[length];\n\n                totalLength += length;\n                gen.nextBytes(data);\n                file.writeBytes(data, length);\n\n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        duration = (int) (end.getTime() - start.getTime());\n        System.out.print(duration);\n        System.out.print(\" total milliseconds to create, \");\n        System.out.print(totalLength / duration);\n        System.out.println(\" kb/s\");\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(1251971);\n            start = new Date();\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexInput file = store.openInput(name);\n\n                if (file.length() != length)\n                    throw new Exception(\"length incorrect\");\n\n                byte[] data = new byte[length];\n                byte[] read = new byte[length];\n                gen.nextBytes(data);\n                file.readBytes(read, 0, length);\n\n                if (!Arrays.equals(data, read))\n                    throw new Exception(\"contents incorrect\");\n\n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        duration = (int) (end.getTime() - start.getTime());\n        System.out.print(duration);\n        System.out.print(\" total milliseconds to read, \");\n        System.out.print(totalLength / duration);\n        System.out.println(\" kb/s\");\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(1251971);\n            start = new Date();\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                store.deleteFile(name);\n            }\n\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        System.out.print(end.getTime() - start.getTime());\n        System.out.println(\" total milliseconds to delete\");\n\n        System.out.print(end.getTime() - veryStart.getTime());\n        System.out.println(\" total milliseconds\");\n    }\n\n","sourceOld":"    public void tesArrays() throws Exception {\n        final int count = 250;\n        final int LENGTH_MASK = 0xffff;\n\n        Random gen = new Random(1251971);\n        int totalLength = 0;\n        int duration;\n        Date end;\n\n        Date veryStart = new Date();\n        Date start = new Date();\n        Transaction txn = null;\n        Directory store = null;\n\n        System.out.println(\"Writing files as one byte array\");\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexOutput file = store.createOutput(name);\n                byte[] data = new byte[length];\n\n                totalLength += length;\n                gen.nextBytes(data);\n                file.writeBytes(data, length);\n\n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        duration = (int) (end.getTime() - start.getTime());\n        System.out.print(duration);\n        System.out.print(\" total milliseconds to create, \");\n        System.out.print(totalLength / duration);\n        System.out.println(\" kb/s\");\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(1251971);\n            start = new Date();\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexInput file = store.openInput(name);\n\n                if (file.length() != length)\n                    throw new Exception(\"length incorrect\");\n\n                byte[] data = new byte[length];\n                byte[] read = new byte[length];\n                gen.nextBytes(data);\n                file.readBytes(read, 0, length);\n\n                if (!Arrays.equals(data, read))\n                    throw new Exception(\"contents incorrect\");\n\n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        duration = (int) (end.getTime() - start.getTime());\n        System.out.print(duration);\n        System.out.print(\" total milliseconds to read, \");\n        System.out.print(totalLength / duration);\n        System.out.println(\" kb/s\");\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(1251971);\n            start = new Date();\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                store.deleteFile(name);\n            }\n\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        System.out.print(end.getTime() - start.getTime());\n        System.out.println(\" total milliseconds to delete\");\n\n        System.out.print(end.getTime() - veryStart.getTime());\n        System.out.println(\" total milliseconds\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"726b696258060f802944722ff3cbb190dd5140ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["25e0aaaec0defe1bacaadfe8f619322269457753"],"25e0aaaec0defe1bacaadfe8f619322269457753":["726b696258060f802944722ff3cbb190dd5140ac"]},"commit2Childs":{"726b696258060f802944722ff3cbb190dd5140ac":["25e0aaaec0defe1bacaadfe8f619322269457753"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["726b696258060f802944722ff3cbb190dd5140ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"25e0aaaec0defe1bacaadfe8f619322269457753":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}