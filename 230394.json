{"path":"solr/core/src/java/org/apache/solr/schema/SimplePreAnalyzedParser#createState(AttributeSource,Tok,int).mjava","commits":[{"id":"232d48b2fd10ac5189a0ac4480ace7421be9de93","date":1334848212,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SimplePreAnalyzedParser#createState(AttributeSource,Tok,int).mjava","pathOld":"/dev/null","sourceNew":"  private static AttributeSource.State createState(AttributeSource a, Tok state, int tokenEnd) {\n    a.clearAttributes();\n    CharTermAttribute termAtt = a.addAttribute(CharTermAttribute.class);\n    char[] tokChars = state.token.toString().toCharArray();\n    termAtt.copyBuffer(tokChars, 0, tokChars.length);\n    int tokenStart = tokenEnd - state.token.length();\n    for (Entry<String, String> e : state.attr.entrySet()) {\n      String k = e.getKey();\n      if (k.equals(\"i\")) {\n        // position increment\n        int incr = Integer.parseInt(e.getValue());\n        PositionIncrementAttribute posIncr = a.addAttribute(PositionIncrementAttribute.class);\n        posIncr.setPositionIncrement(incr);\n      } else if (k.equals(\"s\")) {\n        tokenStart = Integer.parseInt(e.getValue());\n      } else if (k.equals(\"e\")) {\n        tokenEnd = Integer.parseInt(e.getValue());\n      } else if (k.equals(\"y\")) {\n        TypeAttribute type = a.addAttribute(TypeAttribute.class);\n        type.setType(e.getValue());\n      } else if (k.equals(\"f\")) {\n        FlagsAttribute flags = a.addAttribute(FlagsAttribute.class);\n        int f = Integer.parseInt(e.getValue(), 16);\n        flags.setFlags(f);\n      } else if (k.equals(\"p\")) {\n        PayloadAttribute p = a.addAttribute(PayloadAttribute.class);\n        byte[] data = hexToBytes(e.getValue());\n        if (data != null && data.length > 0) {\n          p.setPayload(new Payload(data));\n        }\n      } else {\n        // unknown attribute\n      }\n    }\n    // handle offset attr\n    OffsetAttribute offset = a.addAttribute(OffsetAttribute.class);\n    offset.setOffset(tokenStart, tokenEnd);\n    State resState = a.captureState();\n    a.clearAttributes();\n    return resState;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76fa9933adb0556e752e8af9734c4d0ae14622ff","date":1339178321,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SimplePreAnalyzedParser#createState(AttributeSource,Tok,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SimplePreAnalyzedParser#createState(AttributeSource,Tok,int).mjava","sourceNew":"  private static AttributeSource.State createState(AttributeSource a, Tok state, int tokenEnd) {\n    a.clearAttributes();\n    CharTermAttribute termAtt = a.addAttribute(CharTermAttribute.class);\n    char[] tokChars = state.token.toString().toCharArray();\n    termAtt.copyBuffer(tokChars, 0, tokChars.length);\n    int tokenStart = tokenEnd - state.token.length();\n    for (Entry<String, String> e : state.attr.entrySet()) {\n      String k = e.getKey();\n      if (k.equals(\"i\")) {\n        // position increment\n        int incr = Integer.parseInt(e.getValue());\n        PositionIncrementAttribute posIncr = a.addAttribute(PositionIncrementAttribute.class);\n        posIncr.setPositionIncrement(incr);\n      } else if (k.equals(\"s\")) {\n        tokenStart = Integer.parseInt(e.getValue());\n      } else if (k.equals(\"e\")) {\n        tokenEnd = Integer.parseInt(e.getValue());\n      } else if (k.equals(\"y\")) {\n        TypeAttribute type = a.addAttribute(TypeAttribute.class);\n        type.setType(e.getValue());\n      } else if (k.equals(\"f\")) {\n        FlagsAttribute flags = a.addAttribute(FlagsAttribute.class);\n        int f = Integer.parseInt(e.getValue(), 16);\n        flags.setFlags(f);\n      } else if (k.equals(\"p\")) {\n        PayloadAttribute p = a.addAttribute(PayloadAttribute.class);\n        byte[] data = hexToBytes(e.getValue());\n        if (data != null && data.length > 0) {\n          p.setPayload(new BytesRef(data));\n        }\n      } else {\n        // unknown attribute\n      }\n    }\n    // handle offset attr\n    OffsetAttribute offset = a.addAttribute(OffsetAttribute.class);\n    offset.setOffset(tokenStart, tokenEnd);\n    State resState = a.captureState();\n    a.clearAttributes();\n    return resState;\n  }\n\n","sourceOld":"  private static AttributeSource.State createState(AttributeSource a, Tok state, int tokenEnd) {\n    a.clearAttributes();\n    CharTermAttribute termAtt = a.addAttribute(CharTermAttribute.class);\n    char[] tokChars = state.token.toString().toCharArray();\n    termAtt.copyBuffer(tokChars, 0, tokChars.length);\n    int tokenStart = tokenEnd - state.token.length();\n    for (Entry<String, String> e : state.attr.entrySet()) {\n      String k = e.getKey();\n      if (k.equals(\"i\")) {\n        // position increment\n        int incr = Integer.parseInt(e.getValue());\n        PositionIncrementAttribute posIncr = a.addAttribute(PositionIncrementAttribute.class);\n        posIncr.setPositionIncrement(incr);\n      } else if (k.equals(\"s\")) {\n        tokenStart = Integer.parseInt(e.getValue());\n      } else if (k.equals(\"e\")) {\n        tokenEnd = Integer.parseInt(e.getValue());\n      } else if (k.equals(\"y\")) {\n        TypeAttribute type = a.addAttribute(TypeAttribute.class);\n        type.setType(e.getValue());\n      } else if (k.equals(\"f\")) {\n        FlagsAttribute flags = a.addAttribute(FlagsAttribute.class);\n        int f = Integer.parseInt(e.getValue(), 16);\n        flags.setFlags(f);\n      } else if (k.equals(\"p\")) {\n        PayloadAttribute p = a.addAttribute(PayloadAttribute.class);\n        byte[] data = hexToBytes(e.getValue());\n        if (data != null && data.length > 0) {\n          p.setPayload(new Payload(data));\n        }\n      } else {\n        // unknown attribute\n      }\n    }\n    // handle offset attr\n    OffsetAttribute offset = a.addAttribute(OffsetAttribute.class);\n    offset.setOffset(tokenStart, tokenEnd);\n    State resState = a.captureState();\n    a.clearAttributes();\n    return resState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"76fa9933adb0556e752e8af9734c4d0ae14622ff":["232d48b2fd10ac5189a0ac4480ace7421be9de93"],"232d48b2fd10ac5189a0ac4480ace7421be9de93":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["76fa9933adb0556e752e8af9734c4d0ae14622ff"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["232d48b2fd10ac5189a0ac4480ace7421be9de93"],"76fa9933adb0556e752e8af9734c4d0ae14622ff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"232d48b2fd10ac5189a0ac4480ace7421be9de93":["76fa9933adb0556e752e8af9734c4d0ae14622ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}