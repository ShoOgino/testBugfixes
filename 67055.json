{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#sameLanguage(Automaton,Automaton).mjava","commits":[{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#sameLanguage(Automaton,Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#sameLanguage(LightAutomaton,LightAutomaton).mjava","sourceNew":"  /** Returns true if these two automata accept exactly the\n   *  same language.  This is a costly computation!  Note\n   *  also that a1 and a2 will be determinized as a side\n   *  effect.  Both automata must be determinized and have\n   *  no dead states! */\n  public static boolean sameLanguage(Automaton a1, Automaton a2) {\n    if (a1 == a2) {\n      return true;\n    }\n    return subsetOf(a2, a1) && subsetOf(a1, a2);\n  }\n\n","sourceOld":"  /** Returns true if these two automata accept exactly the\n   *  same language.  This is a costly computation!  Note\n   *  also that a1 and a2 will be determinized as a side\n   *  effect.  Both automata must be determinized and have\n   *  no dead states! */\n  public static boolean sameLanguage(LightAutomaton a1, LightAutomaton a2) {\n    if (a1 == a2) {\n      return true;\n    }\n    return subsetOf(a2, a1) && subsetOf(a1, a2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#sameLanguage(Automaton,Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#sameLanguage(Automaton,Automaton).mjava","sourceNew":"  /** Returns true if these two automata accept exactly the\n   *  same language.  This is a costly computation!  Note\n   *  also that a1 and a2 will be determinized as a side\n   *  effect.  Both automata must be determinized and have\n   *  no dead states! */\n  public static boolean sameLanguage(Automaton a1, Automaton a2) {\n    if (a1 == a2) {\n      return true;\n    }\n    return subsetOf(a2, a1) && subsetOf(a1, a2);\n  }\n\n","sourceOld":"  /** Returns true if these two automata accept exactly the\n   *  same language.  This is a costly computation!  Note\n   *  also that a1 and a2 will be determinized as a side\n   *  effect. */\n  public static boolean sameLanguage(Automaton a1, Automaton a2) {\n    if (a1 == a2) {\n      return true;\n    }\n    if (a1.isSingleton() && a2.isSingleton()) {\n      return a1.singleton.equals(a2.singleton);\n    } else if (a1.isSingleton()) {\n      // subsetOf is faster if the first automaton is a singleton\n      return subsetOf(a1, a2) && subsetOf(a2, a1);\n    } else {\n      return subsetOf(a2, a1) && subsetOf(a1, a2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24a98f5fdd23e04f85819dbc63b47a12f7c44311","date":1482439157,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#sameLanguage(Automaton,Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#sameLanguage(Automaton,Automaton).mjava","sourceNew":"  /** Returns true if these two automata accept exactly the\n   *  same language.  This is a costly computation!  Both automata\n   *  must be determinized and have no dead states! */\n  public static boolean sameLanguage(Automaton a1, Automaton a2) {\n    if (a1 == a2) {\n      return true;\n    }\n    return subsetOf(a2, a1) && subsetOf(a1, a2);\n  }\n\n","sourceOld":"  /** Returns true if these two automata accept exactly the\n   *  same language.  This is a costly computation!  Note\n   *  also that a1 and a2 will be determinized as a side\n   *  effect.  Both automata must be determinized and have\n   *  no dead states! */\n  public static boolean sameLanguage(Automaton a1, Automaton a2) {\n    if (a1 == a2) {\n      return true;\n    }\n    return subsetOf(a2, a1) && subsetOf(a1, a2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#sameLanguage(Automaton,Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#sameLanguage(Automaton,Automaton).mjava","sourceNew":"  /** Returns true if these two automata accept exactly the\n   *  same language.  This is a costly computation!  Both automata\n   *  must be determinized and have no dead states! */\n  public static boolean sameLanguage(Automaton a1, Automaton a2) {\n    if (a1 == a2) {\n      return true;\n    }\n    return subsetOf(a2, a1) && subsetOf(a1, a2);\n  }\n\n","sourceOld":"  /** Returns true if these two automata accept exactly the\n   *  same language.  This is a costly computation!  Note\n   *  also that a1 and a2 will be determinized as a side\n   *  effect.  Both automata must be determinized and have\n   *  no dead states! */\n  public static boolean sameLanguage(Automaton a1, Automaton a2) {\n    if (a1 == a2) {\n      return true;\n    }\n    return subsetOf(a2, a1) && subsetOf(a1, a2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"24a98f5fdd23e04f85819dbc63b47a12f7c44311":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["24a98f5fdd23e04f85819dbc63b47a12f7c44311"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["5c84485629d80d203608e8975a1139de9933cc38","24a98f5fdd23e04f85819dbc63b47a12f7c44311"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","5c84485629d80d203608e8975a1139de9933cc38"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"24a98f5fdd23e04f85819dbc63b47a12f7c44311":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"5c84485629d80d203608e8975a1139de9933cc38":["24a98f5fdd23e04f85819dbc63b47a12f7c44311","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}