{"path":"lucene/facet/src/java/org/apache/lucene/util/collections/IntToObjectMap#findForRemove(int,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/util/collections/IntToObjectMap#findForRemove(int,int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/util/collections/IntToObjectMap#findForRemove(int,int).mjava","sourceNew":"  /**\n   * Find the actual index of a given key with it's baseHashIndex.<br>\n   * Some methods use the baseHashIndex. If those call {@link #find()} there's\n   * no need to re-calculate that hash.\n   * \n   * @param key\n   * @param baseHashIndex\n   * @return the index of the given key, or 0 as 'Ground' if the key wasn't\n   *         found.\n   */\n  private int findForRemove(int key, int baseHashIndex) {\n    // Start from the hash entry.\n    this.prev = 0;\n    int index = baseHash[baseHashIndex];\n\n    // while the index does not point to the 'Ground'\n    while (index != 0) {\n      // returns the index found in case of of a matching key.\n      if (keys[index] == key) {\n        return index;\n      }\n\n      // next the local index\n      prev = index;\n      index = next[index];\n    }\n\n    // If we got this far, it could only mean we did not find the key we\n    // were asked for. return 'Ground' index.\n    this.prev = 0;\n    return 0;\n  }\n\n","sourceOld":"  /**\n   * Find the actual index of a given key with it's baseHashIndex.<br>\n   * Some methods use the baseHashIndex. If those call {@link #find()} there's\n   * no need to re-calculate that hash.\n   * \n   * @param key\n   * @param baseHashIndex\n   * @return the index of the given key, or 0 as 'Ground' if the key wasn't\n   *         found.\n   */\n  private int findForRemove(int key, int baseHashIndex) {\n    // Start from the hash entry.\n    this.prev = 0;\n    int index = baseHash[baseHashIndex];\n\n    // while the index does not point to the 'Ground'\n    while (index != 0) {\n      // returns the index found in case of of a matching key.\n      if (keys[index] == key) {\n        return index;\n      }\n\n      // next the local index\n      prev = index;\n      index = next[index];\n    }\n\n    // If we got this far, it could only mean we did not find the key we\n    // were asked for. return 'Ground' index.\n    this.prev = 0;\n    return 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9be242e584b2f40a71c1736de4cbdb36bcf08a5","date":1335144174,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/util/collections/IntToObjectMap#findForRemove(int,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/util/collections/IntToObjectMap#findForRemove(int,int).mjava","sourceNew":"  /**\n   * Find the actual index of a given key with it's baseHashIndex.<br>\n   * Some methods use the baseHashIndex. If those call {@link #find} there's\n   * no need to re-calculate that hash.\n   * \n   * @param key\n   * @param baseHashIndex\n   * @return the index of the given key, or 0 as 'Ground' if the key wasn't\n   *         found.\n   */\n  private int findForRemove(int key, int baseHashIndex) {\n    // Start from the hash entry.\n    this.prev = 0;\n    int index = baseHash[baseHashIndex];\n\n    // while the index does not point to the 'Ground'\n    while (index != 0) {\n      // returns the index found in case of of a matching key.\n      if (keys[index] == key) {\n        return index;\n      }\n\n      // next the local index\n      prev = index;\n      index = next[index];\n    }\n\n    // If we got this far, it could only mean we did not find the key we\n    // were asked for. return 'Ground' index.\n    this.prev = 0;\n    return 0;\n  }\n\n","sourceOld":"  /**\n   * Find the actual index of a given key with it's baseHashIndex.<br>\n   * Some methods use the baseHashIndex. If those call {@link #find()} there's\n   * no need to re-calculate that hash.\n   * \n   * @param key\n   * @param baseHashIndex\n   * @return the index of the given key, or 0 as 'Ground' if the key wasn't\n   *         found.\n   */\n  private int findForRemove(int key, int baseHashIndex) {\n    // Start from the hash entry.\n    this.prev = 0;\n    int index = baseHash[baseHashIndex];\n\n    // while the index does not point to the 'Ground'\n    while (index != 0) {\n      // returns the index found in case of of a matching key.\n      if (keys[index] == key) {\n        return index;\n      }\n\n      // next the local index\n      prev = index;\n      index = next[index];\n    }\n\n    // If we got this far, it could only mean we did not find the key we\n    // were asked for. return 'Ground' index.\n    this.prev = 0;\n    return 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/util/collections/IntToObjectMap#findForRemove(int,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/util/collections/IntToObjectMap#findForRemove(int,int).mjava","sourceNew":"  /**\n   * Find the actual index of a given key with it's baseHashIndex.<br>\n   * Some methods use the baseHashIndex. If those call {@link #find} there's\n   * no need to re-calculate that hash.\n   * \n   * @return the index of the given key, or 0 as 'Ground' if the key wasn't\n   *         found.\n   */\n  private int findForRemove(int key, int baseHashIndex) {\n    // Start from the hash entry.\n    this.prev = 0;\n    int index = baseHash[baseHashIndex];\n\n    // while the index does not point to the 'Ground'\n    while (index != 0) {\n      // returns the index found in case of of a matching key.\n      if (keys[index] == key) {\n        return index;\n      }\n\n      // next the local index\n      prev = index;\n      index = next[index];\n    }\n\n    // If we got this far, it could only mean we did not find the key we\n    // were asked for. return 'Ground' index.\n    this.prev = 0;\n    return 0;\n  }\n\n","sourceOld":"  /**\n   * Find the actual index of a given key with it's baseHashIndex.<br>\n   * Some methods use the baseHashIndex. If those call {@link #find} there's\n   * no need to re-calculate that hash.\n   * \n   * @param key\n   * @param baseHashIndex\n   * @return the index of the given key, or 0 as 'Ground' if the key wasn't\n   *         found.\n   */\n  private int findForRemove(int key, int baseHashIndex) {\n    // Start from the hash entry.\n    this.prev = 0;\n    int index = baseHash[baseHashIndex];\n\n    // while the index does not point to the 'Ground'\n    while (index != 0) {\n      // returns the index found in case of of a matching key.\n      if (keys[index] == key) {\n        return index;\n      }\n\n      // next the local index\n      prev = index;\n      index = next[index];\n    }\n\n    // If we got this far, it could only mean we did not find the key we\n    // were asked for. return 'Ground' index.\n    this.prev = 0;\n    return 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/collections/IntToObjectMap#findForRemove(int,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/util/collections/IntToObjectMap#findForRemove(int,int).mjava","sourceNew":"  /**\n   * Find the actual index of a given key with it's baseHashIndex.<br>\n   * Some methods use the baseHashIndex. If those call {@link #find} there's\n   * no need to re-calculate that hash.\n   * \n   * @return the index of the given key, or 0 as 'Ground' if the key wasn't\n   *         found.\n   */\n  private int findForRemove(int key, int baseHashIndex) {\n    // Start from the hash entry.\n    this.prev = 0;\n    int index = baseHash[baseHashIndex];\n\n    // while the index does not point to the 'Ground'\n    while (index != 0) {\n      // returns the index found in case of of a matching key.\n      if (keys[index] == key) {\n        return index;\n      }\n\n      // next the local index\n      prev = index;\n      index = next[index];\n    }\n\n    // If we got this far, it could only mean we did not find the key we\n    // were asked for. return 'Ground' index.\n    this.prev = 0;\n    return 0;\n  }\n\n","sourceOld":"  /**\n   * Find the actual index of a given key with it's baseHashIndex.<br>\n   * Some methods use the baseHashIndex. If those call {@link #find} there's\n   * no need to re-calculate that hash.\n   * \n   * @return the index of the given key, or 0 as 'Ground' if the key wasn't\n   *         found.\n   */\n  private int findForRemove(int key, int baseHashIndex) {\n    // Start from the hash entry.\n    this.prev = 0;\n    int index = baseHash[baseHashIndex];\n\n    // while the index does not point to the 'Ground'\n    while (index != 0) {\n      // returns the index found in case of of a matching key.\n      if (keys[index] == key) {\n        return index;\n      }\n\n      // next the local index\n      prev = index;\n      index = next[index];\n    }\n\n    // If we got this far, it could only mean we did not find the key we\n    // were asked for. return 'Ground' index.\n    this.prev = 0;\n    return 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["f9be242e584b2f40a71c1736de4cbdb36bcf08a5"],"f9be242e584b2f40a71c1736de4cbdb36bcf08a5":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"607428da722dcb3e86bbd11c63de8986e6275c36":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["607428da722dcb3e86bbd11c63de8986e6275c36"],"f9be242e584b2f40a71c1736de4cbdb36bcf08a5":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["f9be242e584b2f40a71c1736de4cbdb36bcf08a5"],"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}