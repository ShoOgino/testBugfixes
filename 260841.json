{"path":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#updateDocument(Term,Document).mjava","commits":[{"id":"e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3","date":1297940445,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#updateDocument(Term,Document).mjava","pathOld":"/dev/null","sourceNew":"  public void updateDocument(Term t, Document doc) throws IOException {\n    w.updateDocument(t, doc);\n    if (docCount++ == flushAt) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.updateDocument: now doing a commit\");\n      }\n      w.commit();\n      flushAt += _TestUtil.nextInt(r, 10, 1000);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ffe3fbd77ef1d62c9164a042f5bcdb625a7c53d","date":1298208351,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#updateDocument(Term,Document).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#updateDocument(Term,Document).mjava","sourceNew":"  /**\n   * Updates a document.\n   * @see IndexWriter#updateDocument(Term, Document)\n   */\n  public void updateDocument(Term t, Document doc) throws IOException {\n    w.updateDocument(t, doc);\n    if (docCount++ == flushAt) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.updateDocument: now doing a commit\");\n      }\n      w.commit();\n      flushAt += _TestUtil.nextInt(r, 10, 1000);\n    }\n  }\n\n","sourceOld":"  public void updateDocument(Term t, Document doc) throws IOException {\n    w.updateDocument(t, doc);\n    if (docCount++ == flushAt) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.updateDocument: now doing a commit\");\n      }\n      w.commit();\n      flushAt += _TestUtil.nextInt(r, 10, 1000);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#updateDocument(Term,Document).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Updates a document.\n   * @see IndexWriter#updateDocument(Term, Document)\n   */\n  public void updateDocument(Term t, Document doc) throws IOException {\n    w.updateDocument(t, doc);\n    if (docCount++ == flushAt) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.updateDocument: now doing a commit\");\n      }\n      w.commit();\n      flushAt += _TestUtil.nextInt(r, 10, 1000);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ca3876d7ad90122420134007bec508c30af5a18","date":1302308866,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#updateDocument(Term,Document).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#updateDocument(Term,Document).mjava","sourceNew":"  /**\n   * Updates a document.\n   * @see IndexWriter#updateDocument(Term, Document)\n   */\n  public void updateDocument(Term t, Document doc) throws IOException {\n    w.updateDocument(t, doc);\n    maybeCommit();\n  }\n\n","sourceOld":"  /**\n   * Updates a document.\n   * @see IndexWriter#updateDocument(Term, Document)\n   */\n  public void updateDocument(Term t, Document doc) throws IOException {\n    w.updateDocument(t, doc);\n    if (docCount++ == flushAt) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.updateDocument: now doing a commit\");\n      }\n      w.commit();\n      flushAt += _TestUtil.nextInt(r, 10, 1000);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#updateDocument(Term,Document).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Updates a document.\n   * @see IndexWriter#updateDocument(Term, Document)\n   */\n  public void updateDocument(Term t, Document doc) throws IOException {\n    w.updateDocument(t, doc);\n    maybeCommit();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#updateDocument(Term,Document).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#updateDocument(Term,Document).mjava","sourceNew":"  /**\n   * Updates a document.\n   * @see IndexWriter#updateDocument(Term, Document)\n   */\n  public void updateDocument(Term t, Document doc) throws IOException {\n    w.updateDocument(t, doc);\n    maybeCommit();\n  }\n\n","sourceOld":"  /**\n   * Updates a document.\n   * @see IndexWriter#updateDocument(Term, Document)\n   */\n  public void updateDocument(Term t, Document doc) throws IOException {\n    w.updateDocument(t, doc);\n    if (docCount++ == flushAt) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.updateDocument: now doing a commit\");\n      }\n      w.commit();\n      flushAt += _TestUtil.nextInt(r, 10, 1000);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ebb742ffd3fae76a577a68de595d711f43e6944","date":1305546231,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#updateDocument(Term,Document).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#updateDocument(Term,Document).mjava","sourceNew":"  /**\n   * Updates a document.\n   * @see IndexWriter#updateDocument(Term, Document)\n   */\n  public void updateDocument(Term t, Document doc) throws IOException {\n    if (doDocValues) {\n      randomPerDocFieldValues(r, doc);\n    }\n    w.updateDocument(t, doc);\n    maybeCommit();\n  }\n\n","sourceOld":"  /**\n   * Updates a document.\n   * @see IndexWriter#updateDocument(Term, Document)\n   */\n  public void updateDocument(Term t, Document doc) throws IOException {\n    w.updateDocument(t, doc);\n    maybeCommit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#updateDocument(Term,Document).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#updateDocument(Term,Document).mjava","sourceNew":"  /**\n   * Updates a document.\n   * @see IndexWriter#updateDocument(Term, Document)\n   */\n  public void updateDocument(Term t, Document doc) throws IOException {\n    w.updateDocument(t, doc);\n    maybeCommit();\n  }\n\n","sourceOld":"  /**\n   * Updates a document.\n   * @see IndexWriter#updateDocument(Term, Document)\n   */\n  public void updateDocument(Term t, Document doc) throws IOException {\n    w.updateDocument(t, doc);\n    if (docCount++ == flushAt) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.updateDocument: now doing a commit\");\n      }\n      w.commit();\n      flushAt += _TestUtil.nextInt(r, 10, 1000);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27","date":1306166545,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#updateDocument(Term,Document).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#updateDocument(Term,Document).mjava","sourceNew":"  /**\n   * Updates a document.\n   * @see IndexWriter#updateDocument(Term, Document)\n   */\n  public void updateDocument(Term t, final Document doc) throws IOException {\n    if (r.nextInt(5) == 3) {\n      w.updateDocuments(t, new Iterable<Document>() {\n\n        // @Override -- not until Java 1.6\n        public Iterator<Document> iterator() {\n          return new Iterator<Document>() {\n            boolean done;\n            \n            // @Override -- not until Java 1.6\n            public boolean hasNext() {\n              return !done;\n            }\n\n            // @Override -- not until Java 1.6\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n\n            // @Override -- not until Java 1.6\n            public Document next() {\n              if (done) {\n                throw new IllegalStateException();\n              }\n              done = true;\n              return doc;\n            }\n          };\n        }\n        });\n    } else {\n      w.updateDocument(t, doc);\n    }\n    maybeCommit();\n  }\n\n","sourceOld":"  /**\n   * Updates a document.\n   * @see IndexWriter#updateDocument(Term, Document)\n   */\n  public void updateDocument(Term t, Document doc) throws IOException {\n    w.updateDocument(t, doc);\n    maybeCommit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#updateDocument(Term,Document).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#updateDocument(Term,Document).mjava","sourceNew":"  /**\n   * Updates a document.\n   * @see IndexWriter#updateDocument(Term, Document)\n   */\n  public void updateDocument(Term t, final Document doc) throws IOException {\n    if (r.nextInt(5) == 3) {\n      w.updateDocuments(t, new Iterable<Document>() {\n\n        // @Override -- not until Java 1.6\n        public Iterator<Document> iterator() {\n          return new Iterator<Document>() {\n            boolean done;\n            \n            // @Override -- not until Java 1.6\n            public boolean hasNext() {\n              return !done;\n            }\n\n            // @Override -- not until Java 1.6\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n\n            // @Override -- not until Java 1.6\n            public Document next() {\n              if (done) {\n                throw new IllegalStateException();\n              }\n              done = true;\n              return doc;\n            }\n          };\n        }\n        });\n    } else {\n      w.updateDocument(t, doc);\n    }\n    maybeCommit();\n  }\n\n","sourceOld":"  /**\n   * Updates a document.\n   * @see IndexWriter#updateDocument(Term, Document)\n   */\n  public void updateDocument(Term t, Document doc) throws IOException {\n    w.updateDocument(t, doc);\n    maybeCommit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#updateDocument(Term,Document).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#updateDocument(Term,Document).mjava","sourceNew":"  /**\n   * Updates a document.\n   * @see IndexWriter#updateDocument(Term, Document)\n   */\n  public void updateDocument(final Term t, final Document doc) throws IOException {\n    if (doDocValues) {\n      randomPerDocFieldValues(r, doc);\n    }\n    \n    if (r.nextInt(5) == 3) {\n      w.updateDocuments(t, new Iterable<Document>() {\n\n        // @Override -- not until Java 1.6\n        public Iterator<Document> iterator() {\n          return new Iterator<Document>() {\n            boolean done;\n            \n            // @Override -- not until Java 1.6\n            public boolean hasNext() {\n              return !done;\n            }\n\n            // @Override -- not until Java 1.6\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n\n            // @Override -- not until Java 1.6\n            public Document next() {\n              if (done) {\n                throw new IllegalStateException();\n              }\n              done = true;\n              return doc;\n            }\n          };\n        }\n        });\n    } else {\n      w.updateDocument(t, doc);\n    }\n    maybeCommit();\n  }\n\n","sourceOld":"  /**\n   * Updates a document.\n   * @see IndexWriter#updateDocument(Term, Document)\n   */\n  public void updateDocument(Term t, Document doc) throws IOException {\n    if (doDocValues) {\n      randomPerDocFieldValues(r, doc);\n    }\n    w.updateDocument(t, doc);\n    maybeCommit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#updateDocument(Term,Document).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#updateDocument(Term,Document).mjava","sourceNew":"  /**\n   * Updates a document.\n   * @see IndexWriter#updateDocument(Term, Document)\n   */\n  public void updateDocument(final Term t, final Document doc) throws IOException {\n    if (doDocValues) {\n      randomPerDocFieldValues(r, doc);\n    }\n    \n    if (r.nextInt(5) == 3) {\n      w.updateDocuments(t, new Iterable<Document>() {\n\n        // @Override -- not until Java 1.6\n        public Iterator<Document> iterator() {\n          return new Iterator<Document>() {\n            boolean done;\n            \n            // @Override -- not until Java 1.6\n            public boolean hasNext() {\n              return !done;\n            }\n\n            // @Override -- not until Java 1.6\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n\n            // @Override -- not until Java 1.6\n            public Document next() {\n              if (done) {\n                throw new IllegalStateException();\n              }\n              done = true;\n              return doc;\n            }\n          };\n        }\n        });\n    } else {\n      w.updateDocument(t, doc);\n    }\n    maybeCommit();\n  }\n\n","sourceOld":"  /**\n   * Updates a document.\n   * @see IndexWriter#updateDocument(Term, Document)\n   */\n  public void updateDocument(Term t, final Document doc) throws IOException {\n    if (r.nextInt(5) == 3) {\n      w.updateDocuments(t, new Iterable<Document>() {\n\n        // @Override -- not until Java 1.6\n        public Iterator<Document> iterator() {\n          return new Iterator<Document>() {\n            boolean done;\n            \n            // @Override -- not until Java 1.6\n            public boolean hasNext() {\n              return !done;\n            }\n\n            // @Override -- not until Java 1.6\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n\n            // @Override -- not until Java 1.6\n            public Document next() {\n              if (done) {\n                throw new IllegalStateException();\n              }\n              done = true;\n              return doc;\n            }\n          };\n        }\n        });\n    } else {\n      w.updateDocument(t, doc);\n    }\n    maybeCommit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#updateDocument(Term,Document).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#updateDocument(Term,Document).mjava","sourceNew":"  /**\n   * Updates a document.\n   * @see IndexWriter#updateDocument(Term, Document)\n   */\n  public void updateDocument(final Term t, final Document doc) throws IOException {\n    if (doDocValues) {\n      randomPerDocFieldValues(r, doc);\n    }\n    \n    if (r.nextInt(5) == 3) {\n      w.updateDocuments(t, new Iterable<Document>() {\n\n        // @Override -- not until Java 1.6\n        public Iterator<Document> iterator() {\n          return new Iterator<Document>() {\n            boolean done;\n            \n            // @Override -- not until Java 1.6\n            public boolean hasNext() {\n              return !done;\n            }\n\n            // @Override -- not until Java 1.6\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n\n            // @Override -- not until Java 1.6\n            public Document next() {\n              if (done) {\n                throw new IllegalStateException();\n              }\n              done = true;\n              return doc;\n            }\n          };\n        }\n        });\n    } else {\n      w.updateDocument(t, doc);\n    }\n    maybeCommit();\n  }\n\n","sourceOld":"  /**\n   * Updates a document.\n   * @see IndexWriter#updateDocument(Term, Document)\n   */\n  public void updateDocument(Term t, final Document doc) throws IOException {\n    if (r.nextInt(5) == 3) {\n      w.updateDocuments(t, new Iterable<Document>() {\n\n        // @Override -- not until Java 1.6\n        public Iterator<Document> iterator() {\n          return new Iterator<Document>() {\n            boolean done;\n            \n            // @Override -- not until Java 1.6\n            public boolean hasNext() {\n              return !done;\n            }\n\n            // @Override -- not until Java 1.6\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n\n            // @Override -- not until Java 1.6\n            public Document next() {\n              if (done) {\n                throw new IllegalStateException();\n              }\n              done = true;\n              return doc;\n            }\n          };\n        }\n        });\n    } else {\n      w.updateDocument(t, doc);\n    }\n    maybeCommit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9b7b579125f96af579b1c85930f519dee4f32c3","date":1309436076,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#updateDocument(Term,Document).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#updateDocument(Term,Document).mjava","sourceNew":"  /**\n   * Updates a document.\n   * @see IndexWriter#updateDocument(Term, Document)\n   */\n  public void updateDocument(final Term t, final Document doc) throws IOException {\n    if (doDocValues) {\n      randomPerDocFieldValues(r, doc);\n    }\n    \n    if (r.nextInt(5) == 3) {\n      w.updateDocuments(t, new Iterable<Document>() {\n\n        @Override\n        public Iterator<Document> iterator() {\n          return new Iterator<Document>() {\n            boolean done;\n            \n            @Override\n            public boolean hasNext() {\n              return !done;\n            }\n\n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public Document next() {\n              if (done) {\n                throw new IllegalStateException();\n              }\n              done = true;\n              return doc;\n            }\n          };\n        }\n        });\n    } else {\n      w.updateDocument(t, doc);\n    }\n    maybeCommit();\n  }\n\n","sourceOld":"  /**\n   * Updates a document.\n   * @see IndexWriter#updateDocument(Term, Document)\n   */\n  public void updateDocument(final Term t, final Document doc) throws IOException {\n    if (doDocValues) {\n      randomPerDocFieldValues(r, doc);\n    }\n    \n    if (r.nextInt(5) == 3) {\n      w.updateDocuments(t, new Iterable<Document>() {\n\n        // @Override -- not until Java 1.6\n        public Iterator<Document> iterator() {\n          return new Iterator<Document>() {\n            boolean done;\n            \n            // @Override -- not until Java 1.6\n            public boolean hasNext() {\n              return !done;\n            }\n\n            // @Override -- not until Java 1.6\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n\n            // @Override -- not until Java 1.6\n            public Document next() {\n              if (done) {\n                throw new IllegalStateException();\n              }\n              done = true;\n              return doc;\n            }\n          };\n        }\n        });\n    } else {\n      w.updateDocument(t, doc);\n    }\n    maybeCommit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#updateDocument(Term,Document).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#updateDocument(Term,Document).mjava","sourceNew":"  /**\n   * Updates a document.\n   * @see IndexWriter#updateDocument(Term, Document)\n   */\n  public void updateDocument(final Term t, final Document doc) throws IOException {\n    if (doDocValues) {\n      randomPerDocFieldValues(r, doc);\n    }\n    \n    if (r.nextInt(5) == 3) {\n      w.updateDocuments(t, new Iterable<Document>() {\n\n        @Override\n        public Iterator<Document> iterator() {\n          return new Iterator<Document>() {\n            boolean done;\n            \n            @Override\n            public boolean hasNext() {\n              return !done;\n            }\n\n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public Document next() {\n              if (done) {\n                throw new IllegalStateException();\n              }\n              done = true;\n              return doc;\n            }\n          };\n        }\n        });\n    } else {\n      w.updateDocument(t, doc);\n    }\n    maybeCommit();\n  }\n\n","sourceOld":"  /**\n   * Updates a document.\n   * @see IndexWriter#updateDocument(Term, Document)\n   */\n  public void updateDocument(final Term t, final Document doc) throws IOException {\n    if (doDocValues) {\n      randomPerDocFieldValues(r, doc);\n    }\n    \n    if (r.nextInt(5) == 3) {\n      w.updateDocuments(t, new Iterable<Document>() {\n\n        // @Override -- not until Java 1.6\n        public Iterator<Document> iterator() {\n          return new Iterator<Document>() {\n            boolean done;\n            \n            // @Override -- not until Java 1.6\n            public boolean hasNext() {\n              return !done;\n            }\n\n            // @Override -- not until Java 1.6\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n\n            // @Override -- not until Java 1.6\n            public Document next() {\n              if (done) {\n                throw new IllegalStateException();\n              }\n              done = true;\n              return doc;\n            }\n          };\n        }\n        });\n    } else {\n      w.updateDocument(t, doc);\n    }\n    maybeCommit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#updateDocument(Term,Document).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#updateDocument(Term,Document).mjava","sourceNew":"  /**\n   * Updates a document.\n   * @see IndexWriter#updateDocument(Term, Document)\n   */\n  public void updateDocument(final Term t, final Document doc) throws IOException {\n    if (doDocValues) {\n      randomPerDocFieldValues(r, doc);\n    }\n    \n    if (r.nextInt(5) == 3) {\n      w.updateDocuments(t, new Iterable<Document>() {\n\n        @Override\n        public Iterator<Document> iterator() {\n          return new Iterator<Document>() {\n            boolean done;\n            \n            @Override\n            public boolean hasNext() {\n              return !done;\n            }\n\n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public Document next() {\n              if (done) {\n                throw new IllegalStateException();\n              }\n              done = true;\n              return doc;\n            }\n          };\n        }\n        });\n    } else {\n      w.updateDocument(t, doc);\n    }\n    maybeCommit();\n  }\n\n","sourceOld":"  /**\n   * Updates a document.\n   * @see IndexWriter#updateDocument(Term, Document)\n   */\n  public void updateDocument(final Term t, final Document doc) throws IOException {\n    if (doDocValues) {\n      randomPerDocFieldValues(r, doc);\n    }\n    \n    if (r.nextInt(5) == 3) {\n      w.updateDocuments(t, new Iterable<Document>() {\n\n        // @Override -- not until Java 1.6\n        public Iterator<Document> iterator() {\n          return new Iterator<Document>() {\n            boolean done;\n            \n            // @Override -- not until Java 1.6\n            public boolean hasNext() {\n              return !done;\n            }\n\n            // @Override -- not until Java 1.6\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n\n            // @Override -- not until Java 1.6\n            public Document next() {\n              if (done) {\n                throw new IllegalStateException();\n              }\n              done = true;\n              return doc;\n            }\n          };\n        }\n        });\n    } else {\n      w.updateDocument(t, doc);\n    }\n    maybeCommit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#[T-extends-IndexableField]_updateDocument(Term,Iterable[T]).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#updateDocument(Term,Document).mjava","sourceNew":"  /**\n   * Updates a document.\n   * @see IndexWriter#updateDocument(Term, Iterable)\n   */\n  public <T extends IndexableField> void updateDocument(Term t, final Iterable<T> doc) throws IOException {\n    if (doDocValues) {\n      randomPerDocFieldValues(r, (Document) doc);\n    }\n    if (r.nextInt(5) == 3) {\n      w.updateDocuments(t, new Iterable<Iterable<T>>() {\n\n        @Override\n        public Iterator<Iterable<T>> iterator() {\n          return new Iterator<Iterable<T>>() {\n            boolean done;\n            \n            @Override\n            public boolean hasNext() {\n              return !done;\n            }\n\n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public Iterable<T> next() {\n              if (done) {\n                throw new IllegalStateException();\n              }\n              done = true;\n              return doc;\n            }\n          };\n        }\n        });\n    } else {\n      w.updateDocument(t, doc);\n    }\n    maybeCommit();\n  }\n\n","sourceOld":"  /**\n   * Updates a document.\n   * @see IndexWriter#updateDocument(Term, Document)\n   */\n  public void updateDocument(final Term t, final Document doc) throws IOException {\n    if (doDocValues) {\n      randomPerDocFieldValues(r, doc);\n    }\n    \n    if (r.nextInt(5) == 3) {\n      w.updateDocuments(t, new Iterable<Document>() {\n\n        @Override\n        public Iterator<Document> iterator() {\n          return new Iterator<Document>() {\n            boolean done;\n            \n            @Override\n            public boolean hasNext() {\n              return !done;\n            }\n\n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public Document next() {\n              if (done) {\n                throw new IllegalStateException();\n              }\n              done = true;\n              return doc;\n            }\n          };\n        }\n        });\n    } else {\n      w.updateDocument(t, doc);\n    }\n    maybeCommit();\n  }\n\n","bugFix":null,"bugIntro":["cd659803551ebd8ca09b9e4ad7abd18d3d558f9d","cd659803551ebd8ca09b9e4ad7abd18d3d558f9d","cd659803551ebd8ca09b9e4ad7abd18d3d558f9d","d4d69c535930b5cce125cff868d40f6373dc27d4","d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e8d7ba2175f47e280231533f7d3016249cea88b"],"d9b7b579125f96af579b1c85930f519dee4f32c3":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ffe3fbd77ef1d62c9164a042f5bcdb625a7c53d"],"9ca3876d7ad90122420134007bec508c30af5a18":["0ffe3fbd77ef1d62c9164a042f5bcdb625a7c53d"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["f1bdbf92da222965b46c0a942c3857ba56e5c638","9ca3876d7ad90122420134007bec508c30af5a18"],"962d04139994fce5193143ef35615499a9a96d78":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9ca3876d7ad90122420134007bec508c30af5a18"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["2e8d7ba2175f47e280231533f7d3016249cea88b","d9b7b579125f96af579b1c85930f519dee4f32c3"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","d9b7b579125f96af579b1c85930f519dee4f32c3"],"e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5ebb742ffd3fae76a577a68de595d711f43e6944":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27":["9ca3876d7ad90122420134007bec508c30af5a18"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"0ffe3fbd77ef1d62c9164a042f5bcdb625a7c53d":["e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27"],"a3776dccca01c11e7046323cfad46a3b4a471233":["0ffe3fbd77ef1d62c9164a042f5bcdb625a7c53d","9ca3876d7ad90122420134007bec508c30af5a18"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["d9b7b579125f96af579b1c85930f519dee4f32c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["5ebb742ffd3fae76a577a68de595d711f43e6944","2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"d9b7b579125f96af579b1c85930f519dee4f32c3":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"9ca3876d7ad90122420134007bec508c30af5a18":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27","a3776dccca01c11e7046323cfad46a3b4a471233"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["5ebb742ffd3fae76a577a68de595d711f43e6944"],"962d04139994fce5193143ef35615499a9a96d78":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3":["0ffe3fbd77ef1d62c9164a042f5bcdb625a7c53d"],"5ebb742ffd3fae76a577a68de595d711f43e6944":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","d9b7b579125f96af579b1c85930f519dee4f32c3","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27":["2e8d7ba2175f47e280231533f7d3016249cea88b","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"0ffe3fbd77ef1d62c9164a042f5bcdb625a7c53d":["f1bdbf92da222965b46c0a942c3857ba56e5c638","9ca3876d7ad90122420134007bec508c30af5a18","a3776dccca01c11e7046323cfad46a3b4a471233"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f1bdbf92da222965b46c0a942c3857ba56e5c638","962d04139994fce5193143ef35615499a9a96d78","e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["962d04139994fce5193143ef35615499a9a96d78","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}