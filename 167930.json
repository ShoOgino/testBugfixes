{"path":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#generateZip(Class...).mjava","commits":[{"id":"b96ad5eead3ef9b09cee72d7b54b8bfc369859bd","date":1419078070,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#generateZip(Class...).mjava","pathOld":"/dev/null","sourceNew":"  public static ByteBuffer generateZip(Class... classes) throws IOException {\n    ZipOutputStream zipOut = null;\n    SimplePostTool.BAOS bos = new SimplePostTool.BAOS();\n    zipOut = new ZipOutputStream(bos);\n    zipOut.setLevel(ZipOutputStream.DEFLATED);\n    for (Class c : classes) {\n      String path = c.getName().replace('.', '/').concat(\".class\");\n      ZipEntry entry = new ZipEntry(path);\n      ByteBuffer b = SimplePostTool.inputStreamToByteArray(c.getClassLoader().getResourceAsStream(path));\n      zipOut.putNextEntry(entry);\n      zipOut.write(b.array(), 0, b.limit());\n      zipOut.closeEntry();\n    }\n    zipOut.close();\n    return bos.getByteBuffer();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d1071f88e3697a2eb3ed682c527f5c35859bad0","date":1565425271,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#generateZip(Class...).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#generateZip(Class...).mjava","sourceNew":"  public static ByteBuffer generateZip(Class... classes) throws IOException {\n    SimplePostTool.BAOS bos = new SimplePostTool.BAOS();\n    try (ZipOutputStream zipOut = new ZipOutputStream(bos)) {\n      zipOut.setLevel(ZipOutputStream.DEFLATED);\n      for (Class c : classes) {\n        String path = c.getName().replace('.', '/').concat(\".class\");\n        ZipEntry entry = new ZipEntry(path);\n        ByteBuffer b = SimplePostTool.inputStreamToByteArray(c.getClassLoader().getResourceAsStream(path));\n        zipOut.putNextEntry(entry);\n        zipOut.write(b.array(), 0, b.limit());\n        zipOut.closeEntry();\n      }\n    }\n    return bos.getByteBuffer();\n  }\n\n","sourceOld":"  public static ByteBuffer generateZip(Class... classes) throws IOException {\n    ZipOutputStream zipOut = null;\n    SimplePostTool.BAOS bos = new SimplePostTool.BAOS();\n    zipOut = new ZipOutputStream(bos);\n    zipOut.setLevel(ZipOutputStream.DEFLATED);\n    for (Class c : classes) {\n      String path = c.getName().replace('.', '/').concat(\".class\");\n      ZipEntry entry = new ZipEntry(path);\n      ByteBuffer b = SimplePostTool.inputStreamToByteArray(c.getClassLoader().getResourceAsStream(path));\n      zipOut.putNextEntry(entry);\n      zipOut.write(b.array(), 0, b.limit());\n      zipOut.closeEntry();\n    }\n    zipOut.close();\n    return bos.getByteBuffer();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#generateZip(Class...).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#generateZip(Class...).mjava","sourceNew":"  public static ByteBuffer generateZip(@SuppressWarnings({\"rawtypes\"})Class... classes) throws IOException {\n    SimplePostTool.BAOS bos = new SimplePostTool.BAOS();\n    try (ZipOutputStream zipOut = new ZipOutputStream(bos)) {\n      zipOut.setLevel(ZipOutputStream.DEFLATED);\n      for (@SuppressWarnings({\"rawtypes\"})Class c : classes) {\n        String path = c.getName().replace('.', '/').concat(\".class\");\n        ZipEntry entry = new ZipEntry(path);\n        ByteBuffer b = SimplePostTool.inputStreamToByteArray(c.getClassLoader().getResourceAsStream(path));\n        zipOut.putNextEntry(entry);\n        zipOut.write(b.array(), 0, b.limit());\n        zipOut.closeEntry();\n      }\n    }\n    return bos.getByteBuffer();\n  }\n\n","sourceOld":"  public static ByteBuffer generateZip(Class... classes) throws IOException {\n    SimplePostTool.BAOS bos = new SimplePostTool.BAOS();\n    try (ZipOutputStream zipOut = new ZipOutputStream(bos)) {\n      zipOut.setLevel(ZipOutputStream.DEFLATED);\n      for (Class c : classes) {\n        String path = c.getName().replace('.', '/').concat(\".class\");\n        ZipEntry entry = new ZipEntry(path);\n        ByteBuffer b = SimplePostTool.inputStreamToByteArray(c.getClassLoader().getResourceAsStream(path));\n        zipOut.putNextEntry(entry);\n        zipOut.write(b.array(), 0, b.limit());\n        zipOut.closeEntry();\n      }\n    }\n    return bos.getByteBuffer();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d16198391f70a4ee52a8c8792c91eb87a30f1d6","date":1596695552,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#generateZip(Class...).mjava","sourceNew":null,"sourceOld":"  public static ByteBuffer generateZip(@SuppressWarnings({\"rawtypes\"})Class... classes) throws IOException {\n    SimplePostTool.BAOS bos = new SimplePostTool.BAOS();\n    try (ZipOutputStream zipOut = new ZipOutputStream(bos)) {\n      zipOut.setLevel(ZipOutputStream.DEFLATED);\n      for (@SuppressWarnings({\"rawtypes\"})Class c : classes) {\n        String path = c.getName().replace('.', '/').concat(\".class\");\n        ZipEntry entry = new ZipEntry(path);\n        ByteBuffer b = SimplePostTool.inputStreamToByteArray(c.getClassLoader().getResourceAsStream(path));\n        zipOut.putNextEntry(entry);\n        zipOut.write(b.array(), 0, b.limit());\n        zipOut.closeEntry();\n      }\n    }\n    return bos.getByteBuffer();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b96ad5eead3ef9b09cee72d7b54b8bfc369859bd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0d16198391f70a4ee52a8c8792c91eb87a30f1d6":["e98520789adb1d5ad05afb4956eca0944a929688"],"0d1071f88e3697a2eb3ed682c527f5c35859bad0":["b96ad5eead3ef9b09cee72d7b54b8bfc369859bd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0d16198391f70a4ee52a8c8792c91eb87a30f1d6"],"e98520789adb1d5ad05afb4956eca0944a929688":["0d1071f88e3697a2eb3ed682c527f5c35859bad0"]},"commit2Childs":{"b96ad5eead3ef9b09cee72d7b54b8bfc369859bd":["0d1071f88e3697a2eb3ed682c527f5c35859bad0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b96ad5eead3ef9b09cee72d7b54b8bfc369859bd"],"0d16198391f70a4ee52a8c8792c91eb87a30f1d6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d1071f88e3697a2eb3ed682c527f5c35859bad0":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["0d16198391f70a4ee52a8c8792c91eb87a30f1d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}