{"path":"src/webapp/src/org/apache/solr/servlet/RawRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","commits":[{"id":"d80013b5e260def972025c93a0b08524f9c38f49","date":1170102801,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/RawRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"/dev/null","sourceNew":"  public SolrParams parseParamsAndFillStreams( \n      final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n  {\n    streams.add( new ContentStream() {\n      public String getContentType() {\n        return req.getContentType();\n      }\n      public String getName() {\n        return null; // Is there any meaningfull name?\n      }\n      public String getSourceInfo() {\n        return null; // Is there any meaningfull name?\n      }\n      public Long getSize() { \n        String v = req.getHeader( \"Content-Length\" );\n        if( v != null ) {\n          return Long.valueOf( v );\n        }\n        return null; \n      }\n      public InputStream getStream() throws IOException {\n        return req.getInputStream();\n      }\n    });\n    return SolrRequestParsers.parseQueryString( req.getQueryString() );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"440157898846af9a00b84382942df3f6e3c41a93","date":1175189311,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/RawRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/RawRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"  public SolrParams parseParamsAndFillStreams( \n      final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n  {\n    streams.add( new ContentStream() {\n      public String getContentType() {\n        return req.getContentType();\n      }\n      public String getName() {\n        return null; // Is there any meaningfull name?\n      }\n      public String getSourceInfo() {\n        return null; // Is there any meaningfull name?\n      }\n      public Long getSize() { \n        String v = req.getHeader( \"Content-Length\" );\n        if( v != null ) {\n          return Long.valueOf( v );\n        }\n        return null; \n      }\n      public InputStream getStream() throws IOException {\n        return req.getInputStream();\n      }\n      public Reader getReader() throws IOException {\n        return req.getReader();\n      }\n    });\n    return SolrRequestParsers.parseQueryString( req.getQueryString() );\n  }\n\n","sourceOld":"  public SolrParams parseParamsAndFillStreams( \n      final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n  {\n    streams.add( new ContentStream() {\n      public String getContentType() {\n        return req.getContentType();\n      }\n      public String getName() {\n        return null; // Is there any meaningfull name?\n      }\n      public String getSourceInfo() {\n        return null; // Is there any meaningfull name?\n      }\n      public Long getSize() { \n        String v = req.getHeader( \"Content-Length\" );\n        if( v != null ) {\n          return Long.valueOf( v );\n        }\n        return null; \n      }\n      public InputStream getStream() throws IOException {\n        return req.getInputStream();\n      }\n    });\n    return SolrRequestParsers.parseQueryString( req.getQueryString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1b6bd49cba695deaf31c85a72c1c7bd71d02c28","date":1178580955,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/RawRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/RawRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"  public SolrParams parseParamsAndFillStreams( \n      final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n  {\n    // The javadocs for HttpServletRequest are clear that req.getReader() should take\n    // care of any character encoding issues.  BUT, there are problems while running on\n    // some servlet containers: including Tomcat 5 and resin.\n    //\n    // Rather than return req.getReader(), this uses the default ContentStreamBase method\n    // that checks for charset definitions in the ContentType.\n    \n    streams.add( new ContentStreamBase() {\n      @Override\n      public String getContentType() {\n        return req.getContentType();\n      }\n      @Override\n      public String getName() {\n        return null; // Is there any meaningful name?\n      }\n      @Override\n      public String getSourceInfo() {\n        return null; // Is there any meaningful source?\n      }\n      @Override\n      public Long getSize() { \n        String v = req.getHeader( \"Content-Length\" );\n        if( v != null ) {\n          return Long.valueOf( v );\n        }\n        return null; \n      }\n      public InputStream getStream() throws IOException {\n        return req.getInputStream();\n      }\n    });\n    return SolrRequestParsers.parseQueryString( req.getQueryString() );\n  }\n\n","sourceOld":"  public SolrParams parseParamsAndFillStreams( \n      final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n  {\n    streams.add( new ContentStream() {\n      public String getContentType() {\n        return req.getContentType();\n      }\n      public String getName() {\n        return null; // Is there any meaningfull name?\n      }\n      public String getSourceInfo() {\n        return null; // Is there any meaningfull name?\n      }\n      public Long getSize() { \n        String v = req.getHeader( \"Content-Length\" );\n        if( v != null ) {\n          return Long.valueOf( v );\n        }\n        return null; \n      }\n      public InputStream getStream() throws IOException {\n        return req.getInputStream();\n      }\n      public Reader getReader() throws IOException {\n        return req.getReader();\n      }\n    });\n    return SolrRequestParsers.parseQueryString( req.getQueryString() );\n  }\n\n","bugFix":null,"bugIntro":["d7d4fba77008aef61feb33f95b649fd1aacd0b68"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d7d4fba77008aef61feb33f95b649fd1aacd0b68","date":1178598187,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/RawRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/RawRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"  public SolrParams parseParamsAndFillStreams( \n      final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n  {\n    // The javadocs for HttpServletRequest are clear that req.getReader() should take\n    // care of any character encoding issues.  BUT, there are problems while running on\n    // some servlet containers: including Tomcat 5 and resin.\n    //\n    // Rather than return req.getReader(), this uses the default ContentStreamBase method\n    // that checks for charset definitions in the ContentType.\n    \n    streams.add( new ContentStream() {\n      public String getContentType() {\n        return req.getContentType();\n      }\n      public String getName() {\n        return null; // Is there any meaningful name?\n      }\n      public String getSourceInfo() {\n        return null; // Is there any meaningful source?\n      }\n      public Long getSize() { \n        String v = req.getHeader( \"Content-Length\" );\n        if( v != null ) {\n          return Long.valueOf( v );\n        }\n        return null; \n      }\n      public InputStream getStream() throws IOException {\n        return req.getInputStream();\n      }\n      public Reader getReader() throws IOException {\n        String charset = ContentStreamBase.getCharsetFromContentType( req.getContentType() );\n        return charset == null \n          ? new InputStreamReader( getStream() )\n          : new InputStreamReader( getStream(), charset );\n      }\n    });\n    return SolrRequestParsers.parseQueryString( req.getQueryString() );\n  }\n\n","sourceOld":"  public SolrParams parseParamsAndFillStreams( \n      final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n  {\n    // The javadocs for HttpServletRequest are clear that req.getReader() should take\n    // care of any character encoding issues.  BUT, there are problems while running on\n    // some servlet containers: including Tomcat 5 and resin.\n    //\n    // Rather than return req.getReader(), this uses the default ContentStreamBase method\n    // that checks for charset definitions in the ContentType.\n    \n    streams.add( new ContentStreamBase() {\n      @Override\n      public String getContentType() {\n        return req.getContentType();\n      }\n      @Override\n      public String getName() {\n        return null; // Is there any meaningful name?\n      }\n      @Override\n      public String getSourceInfo() {\n        return null; // Is there any meaningful source?\n      }\n      @Override\n      public Long getSize() { \n        String v = req.getHeader( \"Content-Length\" );\n        if( v != null ) {\n          return Long.valueOf( v );\n        }\n        return null; \n      }\n      public InputStream getStream() throws IOException {\n        return req.getInputStream();\n      }\n    });\n    return SolrRequestParsers.parseQueryString( req.getQueryString() );\n  }\n\n","bugFix":["d1b6bd49cba695deaf31c85a72c1c7bd71d02c28"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2adcfa3194cae93ee5cbda2f22f4d5501c205cbf","date":1178836690,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/RawRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/RawRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"  public SolrParams parseParamsAndFillStreams( \n      final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n  {\n    // The javadocs for HttpServletRequest are clear that req.getReader() should take\n    // care of any character encoding issues.  BUT, there are problems while running on\n    // some servlet containers: including Tomcat 5 and resin.\n    //\n    // Rather than return req.getReader(), this uses the default ContentStreamBase method\n    // that checks for charset definitions in the ContentType.\n    \n    streams.add( new HttpRequestContentStream( req ) );\n    return SolrRequestParsers.parseQueryString( req.getQueryString() );\n  }\n\n","sourceOld":"  public SolrParams parseParamsAndFillStreams( \n      final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n  {\n    // The javadocs for HttpServletRequest are clear that req.getReader() should take\n    // care of any character encoding issues.  BUT, there are problems while running on\n    // some servlet containers: including Tomcat 5 and resin.\n    //\n    // Rather than return req.getReader(), this uses the default ContentStreamBase method\n    // that checks for charset definitions in the ContentType.\n    \n    streams.add( new ContentStream() {\n      public String getContentType() {\n        return req.getContentType();\n      }\n      public String getName() {\n        return null; // Is there any meaningful name?\n      }\n      public String getSourceInfo() {\n        return null; // Is there any meaningful source?\n      }\n      public Long getSize() { \n        String v = req.getHeader( \"Content-Length\" );\n        if( v != null ) {\n          return Long.valueOf( v );\n        }\n        return null; \n      }\n      public InputStream getStream() throws IOException {\n        return req.getInputStream();\n      }\n      public Reader getReader() throws IOException {\n        String charset = ContentStreamBase.getCharsetFromContentType( req.getContentType() );\n        return charset == null \n          ? new InputStreamReader( getStream() )\n          : new InputStreamReader( getStream(), charset );\n      }\n    });\n    return SolrRequestParsers.parseQueryString( req.getQueryString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/webapp/src/org/apache/solr/servlet/RawRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/RawRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"  public SolrParams parseParamsAndFillStreams( \n      final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n  {\n    // The javadocs for HttpServletRequest are clear that req.getReader() should take\n    // care of any character encoding issues.  BUT, there are problems while running on\n    // some servlet containers: including Tomcat 5 and resin.\n    //\n    // Rather than return req.getReader(), this uses the default ContentStreamBase method\n    // that checks for charset definitions in the ContentType.\n    \n    streams.add( new HttpRequestContentStream( req ) );\n    return SolrRequestParsers.parseQueryString( req.getQueryString() );\n  }\n\n","sourceOld":"  public SolrParams parseParamsAndFillStreams( \n      final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n  {\n    // The javadocs for HttpServletRequest are clear that req.getReader() should take\n    // care of any character encoding issues.  BUT, there are problems while running on\n    // some servlet containers: including Tomcat 5 and resin.\n    //\n    // Rather than return req.getReader(), this uses the default ContentStreamBase method\n    // that checks for charset definitions in the ContentType.\n    \n    streams.add( new HttpRequestContentStream( req ) );\n    return SolrRequestParsers.parseQueryString( req.getQueryString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"440157898846af9a00b84382942df3f6e3c41a93":["d80013b5e260def972025c93a0b08524f9c38f49"],"d7d4fba77008aef61feb33f95b649fd1aacd0b68":["d1b6bd49cba695deaf31c85a72c1c7bd71d02c28"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"d1b6bd49cba695deaf31c85a72c1c7bd71d02c28":["440157898846af9a00b84382942df3f6e3c41a93"],"ad94625fb8d088209f46650c8097196fec67f00c":["2adcfa3194cae93ee5cbda2f22f4d5501c205cbf"],"2adcfa3194cae93ee5cbda2f22f4d5501c205cbf":["d7d4fba77008aef61feb33f95b649fd1aacd0b68"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d80013b5e260def972025c93a0b08524f9c38f49":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"]},"commit2Childs":{"440157898846af9a00b84382942df3f6e3c41a93":["d1b6bd49cba695deaf31c85a72c1c7bd71d02c28"],"d7d4fba77008aef61feb33f95b649fd1aacd0b68":["2adcfa3194cae93ee5cbda2f22f4d5501c205cbf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["d80013b5e260def972025c93a0b08524f9c38f49"],"d1b6bd49cba695deaf31c85a72c1c7bd71d02c28":["d7d4fba77008aef61feb33f95b649fd1aacd0b68"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"2adcfa3194cae93ee5cbda2f22f4d5501c205cbf":["ad94625fb8d088209f46650c8097196fec67f00c"],"d80013b5e260def972025c93a0b08524f9c38f49":["440157898846af9a00b84382942df3f6e3c41a93"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}