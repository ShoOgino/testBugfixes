{"path":"lucene/sandbox/src/test/org/apache/lucene/search/TestBM25FQuery#testRewrite().mjava","commits":[{"id":"15c07295375e0ec8be1c0ec46de21292455b3af8","date":1542792270,"type":0,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestBM25FQuery#testRewrite().mjava","pathOld":"/dev/null","sourceNew":"  public void testRewrite() throws IOException {\n    BM25FQuery.Builder builder = new BM25FQuery.Builder();\n    IndexReader reader = new MultiReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    Query actual = searcher.rewrite(builder.build());\n    assertEquals(actual, new MatchNoDocsQuery());\n    builder.addField(\"field\", 1f);\n    actual = searcher.rewrite(builder.build());\n    assertEquals(actual, new MatchNoDocsQuery());\n    builder.addTerm(new BytesRef(\"foo\"));\n    actual = searcher.rewrite(builder.build());\n    assertEquals(actual, new TermQuery(new Term(\"field\", \"foo\")));\n    builder.addTerm(new BytesRef(\"bar\"));\n    actual = searcher.rewrite(builder.build());\n    assertEquals(actual, new SynonymQuery(new Term(\"field\", \"foo\"),\n        new Term(\"field\", \"bar\")));\n    builder.addField(\"another_field\", 1f);\n    Query query = builder.build();\n    actual = searcher.rewrite(query);\n    assertEquals(actual, query);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df25592b82060bc1c800e87bf019444bf0ddf9d4","date":1552296011,"type":3,"author":"jimczi","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestBM25FQuery#testRewrite().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestBM25FQuery#testRewrite().mjava","sourceNew":"  public void testRewrite() throws IOException {\n    BM25FQuery.Builder builder = new BM25FQuery.Builder();\n    IndexReader reader = new MultiReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    Query actual = searcher.rewrite(builder.build());\n    assertEquals(actual, new MatchNoDocsQuery());\n    builder.addField(\"field\", 1f);\n    actual = searcher.rewrite(builder.build());\n    assertEquals(actual, new MatchNoDocsQuery());\n    builder.addTerm(new BytesRef(\"foo\"));\n    actual = searcher.rewrite(builder.build());\n    assertEquals(actual, new TermQuery(new Term(\"field\", \"foo\")));\n    builder.addTerm(new BytesRef(\"bar\"));\n    actual = searcher.rewrite(builder.build());\n    assertEquals(actual, new SynonymQuery.Builder(\"field\")\n        .addTerm(new Term(\"field\", \"foo\"))\n        .addTerm(new Term(\"field\", \"bar\"))\n        .build());\n    builder.addField(\"another_field\", 1f);\n    Query query = builder.build();\n    actual = searcher.rewrite(query);\n    assertEquals(actual, query);\n  }\n\n","sourceOld":"  public void testRewrite() throws IOException {\n    BM25FQuery.Builder builder = new BM25FQuery.Builder();\n    IndexReader reader = new MultiReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    Query actual = searcher.rewrite(builder.build());\n    assertEquals(actual, new MatchNoDocsQuery());\n    builder.addField(\"field\", 1f);\n    actual = searcher.rewrite(builder.build());\n    assertEquals(actual, new MatchNoDocsQuery());\n    builder.addTerm(new BytesRef(\"foo\"));\n    actual = searcher.rewrite(builder.build());\n    assertEquals(actual, new TermQuery(new Term(\"field\", \"foo\")));\n    builder.addTerm(new BytesRef(\"bar\"));\n    actual = searcher.rewrite(builder.build());\n    assertEquals(actual, new SynonymQuery(new Term(\"field\", \"foo\"),\n        new Term(\"field\", \"bar\")));\n    builder.addField(\"another_field\", 1f);\n    Query query = builder.build();\n    actual = searcher.rewrite(query);\n    assertEquals(actual, query);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"df25592b82060bc1c800e87bf019444bf0ddf9d4":["15c07295375e0ec8be1c0ec46de21292455b3af8"],"15c07295375e0ec8be1c0ec46de21292455b3af8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df25592b82060bc1c800e87bf019444bf0ddf9d4"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["15c07295375e0ec8be1c0ec46de21292455b3af8"],"df25592b82060bc1c800e87bf019444bf0ddf9d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"15c07295375e0ec8be1c0ec46de21292455b3af8":["df25592b82060bc1c800e87bf019444bf0ddf9d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}