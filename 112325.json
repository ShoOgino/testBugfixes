{"path":"src/java/org/apache/lucene/index/IndexFileDeleter#deleteCommits().mjava","commits":[{"id":"8b6187898fc4413ccd18229711786550a280383c","date":1173776782,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexFileDeleter#deleteCommits().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Remove the CommitPoints in the toDelete List by\n   * DecRef'ing all files from each SegmentInfos.\n   */\n  private void deleteCommits() throws IOException {\n\n    int size = toDelete.size();\n\n    if (size > 0) {\n\n      // First decref all files that had been referred to by\n      // the now-deleted commits:\n      for(int i=0;i<size;i++) {\n        CommitPoint commit = (CommitPoint) toDelete.get(i);\n        if (infoStream != null) {\n          message(\"deleteCommits: now remove commit \\\"\" + commit.getSegmentsFileName() + \"\\\"\");\n        }\n        int size2 = commit.files.size();\n        for(int j=0;j<size2;j++) {\n          decRef((List) commit.files.get(j));\n        }\n        decRef(commit.getSegmentsFileName());\n      }\n      toDelete.clear();\n\n      // Now compact commits to remove deleted ones:\n      size = commits.size();\n      int readFrom = 0;\n      int writeTo = 0;\n      while(readFrom < size) {\n        CommitPoint commit = (CommitPoint) commits.get(readFrom);\n        if (!commit.deleted) {\n          if (writeTo != readFrom) {\n            commits.set(writeTo, commits.get(readFrom));\n          }\n          writeTo++;\n        }\n        readFrom++;\n      }\n\n      while(size > writeTo) {\n        commits.remove(size-1);\n        size--;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0f44610301174bfb430443d89a88dc1c502feea1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b685e89f45e34ea31f9ca89912e4f29038818ff6","date":1173986546,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexFileDeleter#deleteCommits().mjava","pathOld":"src/java/org/apache/lucene/index/IndexFileDeleter#deleteCommits().mjava","sourceNew":"  /**\n   * Remove the CommitPoints in the commitsToDelete List by\n   * DecRef'ing all files from each SegmentInfos.\n   */\n  private void deleteCommits() throws IOException {\n\n    int size = commitsToDelete.size();\n\n    if (size > 0) {\n\n      // First decref all files that had been referred to by\n      // the now-deleted commits:\n      for(int i=0;i<size;i++) {\n        CommitPoint commit = (CommitPoint) commitsToDelete.get(i);\n        if (infoStream != null) {\n          message(\"deleteCommits: now remove commit \\\"\" + commit.getSegmentsFileName() + \"\\\"\");\n        }\n        int size2 = commit.files.size();\n        for(int j=0;j<size2;j++) {\n          decRef((List) commit.files.get(j));\n        }\n        decRef(commit.getSegmentsFileName());\n      }\n      commitsToDelete.clear();\n\n      // Now compact commits to remove deleted ones (preserving the sort):\n      size = commits.size();\n      int readFrom = 0;\n      int writeTo = 0;\n      while(readFrom < size) {\n        CommitPoint commit = (CommitPoint) commits.get(readFrom);\n        if (!commit.deleted) {\n          if (writeTo != readFrom) {\n            commits.set(writeTo, commits.get(readFrom));\n          }\n          writeTo++;\n        }\n        readFrom++;\n      }\n\n      while(size > writeTo) {\n        commits.remove(size-1);\n        size--;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove the CommitPoints in the toDelete List by\n   * DecRef'ing all files from each SegmentInfos.\n   */\n  private void deleteCommits() throws IOException {\n\n    int size = toDelete.size();\n\n    if (size > 0) {\n\n      // First decref all files that had been referred to by\n      // the now-deleted commits:\n      for(int i=0;i<size;i++) {\n        CommitPoint commit = (CommitPoint) toDelete.get(i);\n        if (infoStream != null) {\n          message(\"deleteCommits: now remove commit \\\"\" + commit.getSegmentsFileName() + \"\\\"\");\n        }\n        int size2 = commit.files.size();\n        for(int j=0;j<size2;j++) {\n          decRef((List) commit.files.get(j));\n        }\n        decRef(commit.getSegmentsFileName());\n      }\n      toDelete.clear();\n\n      // Now compact commits to remove deleted ones:\n      size = commits.size();\n      int readFrom = 0;\n      int writeTo = 0;\n      while(readFrom < size) {\n        CommitPoint commit = (CommitPoint) commits.get(readFrom);\n        if (!commit.deleted) {\n          if (writeTo != readFrom) {\n            commits.set(writeTo, commits.get(readFrom));\n          }\n          writeTo++;\n        }\n        readFrom++;\n      }\n\n      while(size > writeTo) {\n        commits.remove(size-1);\n        size--;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3d8ca99f990f6d6c6f14a1a826740a63a9d9d4b5","date":1196805804,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexFileDeleter#deleteCommits().mjava","pathOld":"src/java/org/apache/lucene/index/IndexFileDeleter#deleteCommits().mjava","sourceNew":"  /**\n   * Remove the CommitPoints in the commitsToDelete List by\n   * DecRef'ing all files from each SegmentInfos.\n   */\n  private void deleteCommits() throws IOException {\n\n    int size = commitsToDelete.size();\n\n    if (size > 0) {\n\n      // First decref all files that had been referred to by\n      // the now-deleted commits:\n      for(int i=0;i<size;i++) {\n        CommitPoint commit = (CommitPoint) commitsToDelete.get(i);\n        if (infoStream != null) {\n          message(\"deleteCommits: now remove commit \\\"\" + commit.getSegmentsFileName() + \"\\\"\");\n        }\n        int size2 = commit.files.size();\n        for(int j=0;j<size2;j++) {\n          decRef((String) commit.files.get(j));\n        }\n      }\n      commitsToDelete.clear();\n\n      // Now compact commits to remove deleted ones (preserving the sort):\n      size = commits.size();\n      int readFrom = 0;\n      int writeTo = 0;\n      while(readFrom < size) {\n        CommitPoint commit = (CommitPoint) commits.get(readFrom);\n        if (!commit.deleted) {\n          if (writeTo != readFrom) {\n            commits.set(writeTo, commits.get(readFrom));\n          }\n          writeTo++;\n        }\n        readFrom++;\n      }\n\n      while(size > writeTo) {\n        commits.remove(size-1);\n        size--;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove the CommitPoints in the commitsToDelete List by\n   * DecRef'ing all files from each SegmentInfos.\n   */\n  private void deleteCommits() throws IOException {\n\n    int size = commitsToDelete.size();\n\n    if (size > 0) {\n\n      // First decref all files that had been referred to by\n      // the now-deleted commits:\n      for(int i=0;i<size;i++) {\n        CommitPoint commit = (CommitPoint) commitsToDelete.get(i);\n        if (infoStream != null) {\n          message(\"deleteCommits: now remove commit \\\"\" + commit.getSegmentsFileName() + \"\\\"\");\n        }\n        int size2 = commit.files.size();\n        for(int j=0;j<size2;j++) {\n          decRef((List) commit.files.get(j));\n        }\n        decRef(commit.getSegmentsFileName());\n      }\n      commitsToDelete.clear();\n\n      // Now compact commits to remove deleted ones (preserving the sort):\n      size = commits.size();\n      int readFrom = 0;\n      int writeTo = 0;\n      while(readFrom < size) {\n        CommitPoint commit = (CommitPoint) commits.get(readFrom);\n        if (!commit.deleted) {\n          if (writeTo != readFrom) {\n            commits.set(writeTo, commits.get(readFrom));\n          }\n          writeTo++;\n        }\n        readFrom++;\n      }\n\n      while(size > writeTo) {\n        commits.remove(size-1);\n        size--;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["0f44610301174bfb430443d89a88dc1c502feea1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e82780afe6097066eb5befb86e9432f077667e3d","date":1202756169,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexFileDeleter#deleteCommits().mjava","pathOld":"src/java/org/apache/lucene/index/IndexFileDeleter#deleteCommits().mjava","sourceNew":"  /**\n   * Remove the CommitPoints in the commitsToDelete List by\n   * DecRef'ing all files from each SegmentInfos.\n   */\n  private void deleteCommits() throws IOException {\n\n    int size = commitsToDelete.size();\n\n    if (size > 0) {\n\n      // First decref all files that had been referred to by\n      // the now-deleted commits:\n      for(int i=0;i<size;i++) {\n        CommitPoint commit = (CommitPoint) commitsToDelete.get(i);\n        if (infoStream != null) {\n          message(\"deleteCommits: now decRef commit \\\"\" + commit.getSegmentsFileName() + \"\\\"\");\n        }\n        int size2 = commit.files.size();\n        for(int j=0;j<size2;j++) {\n          decRef((String) commit.files.get(j));\n        }\n      }\n      commitsToDelete.clear();\n\n      // Now compact commits to remove deleted ones (preserving the sort):\n      size = commits.size();\n      int readFrom = 0;\n      int writeTo = 0;\n      while(readFrom < size) {\n        CommitPoint commit = (CommitPoint) commits.get(readFrom);\n        if (!commit.deleted) {\n          if (writeTo != readFrom) {\n            commits.set(writeTo, commits.get(readFrom));\n          }\n          writeTo++;\n        }\n        readFrom++;\n      }\n\n      while(size > writeTo) {\n        commits.remove(size-1);\n        size--;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove the CommitPoints in the commitsToDelete List by\n   * DecRef'ing all files from each SegmentInfos.\n   */\n  private void deleteCommits() throws IOException {\n\n    int size = commitsToDelete.size();\n\n    if (size > 0) {\n\n      // First decref all files that had been referred to by\n      // the now-deleted commits:\n      for(int i=0;i<size;i++) {\n        CommitPoint commit = (CommitPoint) commitsToDelete.get(i);\n        if (infoStream != null) {\n          message(\"deleteCommits: now remove commit \\\"\" + commit.getSegmentsFileName() + \"\\\"\");\n        }\n        int size2 = commit.files.size();\n        for(int j=0;j<size2;j++) {\n          decRef((String) commit.files.get(j));\n        }\n      }\n      commitsToDelete.clear();\n\n      // Now compact commits to remove deleted ones (preserving the sort):\n      size = commits.size();\n      int readFrom = 0;\n      int writeTo = 0;\n      while(readFrom < size) {\n        CommitPoint commit = (CommitPoint) commits.get(readFrom);\n        if (!commit.deleted) {\n          if (writeTo != readFrom) {\n            commits.set(writeTo, commits.get(readFrom));\n          }\n          writeTo++;\n        }\n        readFrom++;\n      }\n\n      while(size > writeTo) {\n        commits.remove(size-1);\n        size--;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0f44610301174bfb430443d89a88dc1c502feea1","date":1231194664,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexFileDeleter#deleteCommits().mjava","pathOld":"src/java/org/apache/lucene/index/IndexFileDeleter#deleteCommits().mjava","sourceNew":"  /**\n   * Remove the CommitPoints in the commitsToDelete List by\n   * DecRef'ing all files from each SegmentInfos.\n   */\n  private void deleteCommits() throws IOException {\n\n    int size = commitsToDelete.size();\n\n    if (size > 0) {\n\n      // First decref all files that had been referred to by\n      // the now-deleted commits:\n      for(int i=0;i<size;i++) {\n        CommitPoint commit = (CommitPoint) commitsToDelete.get(i);\n        if (infoStream != null) {\n          message(\"deleteCommits: now decRef commit \\\"\" + commit.getSegmentsFileName() + \"\\\"\");\n        }\n        Iterator it = commit.files.iterator();\n        while(it.hasNext()) {\n          decRef((String) it.next());\n        }\n      }\n      commitsToDelete.clear();\n\n      // Now compact commits to remove deleted ones (preserving the sort):\n      size = commits.size();\n      int readFrom = 0;\n      int writeTo = 0;\n      while(readFrom < size) {\n        CommitPoint commit = (CommitPoint) commits.get(readFrom);\n        if (!commit.deleted) {\n          if (writeTo != readFrom) {\n            commits.set(writeTo, commits.get(readFrom));\n          }\n          writeTo++;\n        }\n        readFrom++;\n      }\n\n      while(size > writeTo) {\n        commits.remove(size-1);\n        size--;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove the CommitPoints in the commitsToDelete List by\n   * DecRef'ing all files from each SegmentInfos.\n   */\n  private void deleteCommits() throws IOException {\n\n    int size = commitsToDelete.size();\n\n    if (size > 0) {\n\n      // First decref all files that had been referred to by\n      // the now-deleted commits:\n      for(int i=0;i<size;i++) {\n        CommitPoint commit = (CommitPoint) commitsToDelete.get(i);\n        if (infoStream != null) {\n          message(\"deleteCommits: now decRef commit \\\"\" + commit.getSegmentsFileName() + \"\\\"\");\n        }\n        int size2 = commit.files.size();\n        for(int j=0;j<size2;j++) {\n          decRef((String) commit.files.get(j));\n        }\n      }\n      commitsToDelete.clear();\n\n      // Now compact commits to remove deleted ones (preserving the sort):\n      size = commits.size();\n      int readFrom = 0;\n      int writeTo = 0;\n      while(readFrom < size) {\n        CommitPoint commit = (CommitPoint) commits.get(readFrom);\n        if (!commit.deleted) {\n          if (writeTo != readFrom) {\n            commits.set(writeTo, commits.get(readFrom));\n          }\n          writeTo++;\n        }\n        readFrom++;\n      }\n\n      while(size > writeTo) {\n        commits.remove(size-1);\n        size--;\n      }\n    }\n  }\n\n","bugFix":["3d8ca99f990f6d6c6f14a1a826740a63a9d9d4b5","8b6187898fc4413ccd18229711786550a280383c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexFileDeleter#deleteCommits().mjava","pathOld":"src/java/org/apache/lucene/index/IndexFileDeleter#deleteCommits().mjava","sourceNew":"  /**\n   * Remove the CommitPoints in the commitsToDelete List by\n   * DecRef'ing all files from each SegmentInfos.\n   */\n  private void deleteCommits() throws IOException {\n\n    int size = commitsToDelete.size();\n\n    if (size > 0) {\n\n      // First decref all files that had been referred to by\n      // the now-deleted commits:\n      for(int i=0;i<size;i++) {\n        CommitPoint commit = (CommitPoint) commitsToDelete.get(i);\n        if (infoStream != null) {\n          message(\"deleteCommits: now decRef commit \\\"\" + commit.getSegmentsFileName() + \"\\\"\");\n        }\n        for (final String file : commit.files) {\n          decRef(file);\n        }\n      }\n      commitsToDelete.clear();\n\n      // Now compact commits to remove deleted ones (preserving the sort):\n      size = commits.size();\n      int readFrom = 0;\n      int writeTo = 0;\n      while(readFrom < size) {\n        CommitPoint commit = (CommitPoint) commits.get(readFrom);\n        if (!commit.deleted) {\n          if (writeTo != readFrom) {\n            commits.set(writeTo, commits.get(readFrom));\n          }\n          writeTo++;\n        }\n        readFrom++;\n      }\n\n      while(size > writeTo) {\n        commits.remove(size-1);\n        size--;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove the CommitPoints in the commitsToDelete List by\n   * DecRef'ing all files from each SegmentInfos.\n   */\n  private void deleteCommits() throws IOException {\n\n    int size = commitsToDelete.size();\n\n    if (size > 0) {\n\n      // First decref all files that had been referred to by\n      // the now-deleted commits:\n      for(int i=0;i<size;i++) {\n        CommitPoint commit = (CommitPoint) commitsToDelete.get(i);\n        if (infoStream != null) {\n          message(\"deleteCommits: now decRef commit \\\"\" + commit.getSegmentsFileName() + \"\\\"\");\n        }\n        Iterator it = commit.files.iterator();\n        while(it.hasNext()) {\n          decRef((String) it.next());\n        }\n      }\n      commitsToDelete.clear();\n\n      // Now compact commits to remove deleted ones (preserving the sort):\n      size = commits.size();\n      int readFrom = 0;\n      int writeTo = 0;\n      while(readFrom < size) {\n        CommitPoint commit = (CommitPoint) commits.get(readFrom);\n        if (!commit.deleted) {\n          if (writeTo != readFrom) {\n            commits.set(writeTo, commits.get(readFrom));\n          }\n          writeTo++;\n        }\n        readFrom++;\n      }\n\n      while(size > writeTo) {\n        commits.remove(size-1);\n        size--;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["cefe924a3b76c22b7df9a075329750871699af6b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e1ce9be74263e9659aad8a6ee1f213193710b71","date":1256298843,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexFileDeleter#deleteCommits().mjava","pathOld":"src/java/org/apache/lucene/index/IndexFileDeleter#deleteCommits().mjava","sourceNew":"  /**\n   * Remove the CommitPoints in the commitsToDelete List by\n   * DecRef'ing all files from each SegmentInfos.\n   */\n  private void deleteCommits() throws IOException {\n\n    int size = commitsToDelete.size();\n\n    if (size > 0) {\n\n      // First decref all files that had been referred to by\n      // the now-deleted commits:\n      for(int i=0;i<size;i++) {\n        CommitPoint commit = commitsToDelete.get(i);\n        if (infoStream != null) {\n          message(\"deleteCommits: now decRef commit \\\"\" + commit.getSegmentsFileName() + \"\\\"\");\n        }\n        for (final String file : commit.files) {\n          decRef(file);\n        }\n      }\n      commitsToDelete.clear();\n\n      // Now compact commits to remove deleted ones (preserving the sort):\n      size = commits.size();\n      int readFrom = 0;\n      int writeTo = 0;\n      while(readFrom < size) {\n        CommitPoint commit = commits.get(readFrom);\n        if (!commit.deleted) {\n          if (writeTo != readFrom) {\n            commits.set(writeTo, commits.get(readFrom));\n          }\n          writeTo++;\n        }\n        readFrom++;\n      }\n\n      while(size > writeTo) {\n        commits.remove(size-1);\n        size--;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove the CommitPoints in the commitsToDelete List by\n   * DecRef'ing all files from each SegmentInfos.\n   */\n  private void deleteCommits() throws IOException {\n\n    int size = commitsToDelete.size();\n\n    if (size > 0) {\n\n      // First decref all files that had been referred to by\n      // the now-deleted commits:\n      for(int i=0;i<size;i++) {\n        CommitPoint commit = (CommitPoint) commitsToDelete.get(i);\n        if (infoStream != null) {\n          message(\"deleteCommits: now decRef commit \\\"\" + commit.getSegmentsFileName() + \"\\\"\");\n        }\n        for (final String file : commit.files) {\n          decRef(file);\n        }\n      }\n      commitsToDelete.clear();\n\n      // Now compact commits to remove deleted ones (preserving the sort):\n      size = commits.size();\n      int readFrom = 0;\n      int writeTo = 0;\n      while(readFrom < size) {\n        CommitPoint commit = (CommitPoint) commits.get(readFrom);\n        if (!commit.deleted) {\n          if (writeTo != readFrom) {\n            commits.set(writeTo, commits.get(readFrom));\n          }\n          writeTo++;\n        }\n        readFrom++;\n      }\n\n      while(size > writeTo) {\n        commits.remove(size-1);\n        size--;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#deleteCommits().mjava","pathOld":"src/java/org/apache/lucene/index/IndexFileDeleter#deleteCommits().mjava","sourceNew":"  /**\n   * Remove the CommitPoints in the commitsToDelete List by\n   * DecRef'ing all files from each SegmentInfos.\n   */\n  private void deleteCommits() throws IOException {\n\n    int size = commitsToDelete.size();\n\n    if (size > 0) {\n\n      // First decref all files that had been referred to by\n      // the now-deleted commits:\n      for(int i=0;i<size;i++) {\n        CommitPoint commit = commitsToDelete.get(i);\n        if (infoStream != null) {\n          message(\"deleteCommits: now decRef commit \\\"\" + commit.getSegmentsFileName() + \"\\\"\");\n        }\n        for (final String file : commit.files) {\n          decRef(file);\n        }\n      }\n      commitsToDelete.clear();\n\n      // Now compact commits to remove deleted ones (preserving the sort):\n      size = commits.size();\n      int readFrom = 0;\n      int writeTo = 0;\n      while(readFrom < size) {\n        CommitPoint commit = commits.get(readFrom);\n        if (!commit.deleted) {\n          if (writeTo != readFrom) {\n            commits.set(writeTo, commits.get(readFrom));\n          }\n          writeTo++;\n        }\n        readFrom++;\n      }\n\n      while(size > writeTo) {\n        commits.remove(size-1);\n        size--;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove the CommitPoints in the commitsToDelete List by\n   * DecRef'ing all files from each SegmentInfos.\n   */\n  private void deleteCommits() throws IOException {\n\n    int size = commitsToDelete.size();\n\n    if (size > 0) {\n\n      // First decref all files that had been referred to by\n      // the now-deleted commits:\n      for(int i=0;i<size;i++) {\n        CommitPoint commit = commitsToDelete.get(i);\n        if (infoStream != null) {\n          message(\"deleteCommits: now decRef commit \\\"\" + commit.getSegmentsFileName() + \"\\\"\");\n        }\n        for (final String file : commit.files) {\n          decRef(file);\n        }\n      }\n      commitsToDelete.clear();\n\n      // Now compact commits to remove deleted ones (preserving the sort):\n      size = commits.size();\n      int readFrom = 0;\n      int writeTo = 0;\n      while(readFrom < size) {\n        CommitPoint commit = commits.get(readFrom);\n        if (!commit.deleted) {\n          if (writeTo != readFrom) {\n            commits.set(writeTo, commits.get(readFrom));\n          }\n          writeTo++;\n        }\n        readFrom++;\n      }\n\n      while(size > writeTo) {\n        commits.remove(size-1);\n        size--;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3d8ca99f990f6d6c6f14a1a826740a63a9d9d4b5":["b685e89f45e34ea31f9ca89912e4f29038818ff6"],"4e1ce9be74263e9659aad8a6ee1f213193710b71":["ef82ff03e4016c705811b2658e81471a645c0e49"],"0f44610301174bfb430443d89a88dc1c502feea1":["e82780afe6097066eb5befb86e9432f077667e3d"],"b685e89f45e34ea31f9ca89912e4f29038818ff6":["8b6187898fc4413ccd18229711786550a280383c"],"ef82ff03e4016c705811b2658e81471a645c0e49":["0f44610301174bfb430443d89a88dc1c502feea1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e82780afe6097066eb5befb86e9432f077667e3d":["3d8ca99f990f6d6c6f14a1a826740a63a9d9d4b5"],"8b6187898fc4413ccd18229711786550a280383c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4e1ce9be74263e9659aad8a6ee1f213193710b71"]},"commit2Childs":{"3d8ca99f990f6d6c6f14a1a826740a63a9d9d4b5":["e82780afe6097066eb5befb86e9432f077667e3d"],"4e1ce9be74263e9659aad8a6ee1f213193710b71":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f44610301174bfb430443d89a88dc1c502feea1":["ef82ff03e4016c705811b2658e81471a645c0e49"],"b685e89f45e34ea31f9ca89912e4f29038818ff6":["3d8ca99f990f6d6c6f14a1a826740a63a9d9d4b5"],"ef82ff03e4016c705811b2658e81471a645c0e49":["4e1ce9be74263e9659aad8a6ee1f213193710b71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b6187898fc4413ccd18229711786550a280383c"],"e82780afe6097066eb5befb86e9432f077667e3d":["0f44610301174bfb430443d89a88dc1c502feea1"],"8b6187898fc4413ccd18229711786550a280383c":["b685e89f45e34ea31f9ca89912e4f29038818ff6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}