{"path":"solr/core/src/java/org/apache/solr/search/ReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/ReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","sourceNew":"  private void parseFieldList(String[] fl, SolrQueryRequest req) {\n    _wantsScore = false;\n    _wantsAllFields = false;\n    if (fl == null || fl.length == 0 || fl.length == 1 && fl[0].length()==0) {\n      _wantsAllFields = true;\n      return;\n    }\n\n    NamedList<String> rename = new NamedList<String>();\n    DocTransformers augmenters = new DocTransformers();\n    for (String fieldList : fl) {\n      add(fieldList,rename,augmenters,req);\n    }\n    if( rename.size() > 0 ) {\n      for( int i=0; i<rename.size(); i++ ) {\n        okFieldNames.add( rename.getVal(i) );\n      }\n      augmenters.addTransformer( new RenameFieldsTransformer( rename ) );\n    }\n\n    // Legacy behavior? \"score\" == \"*,score\"  Distributed tests for this\n    if( fields.size() == 1 && _wantsScore ) {\n      _wantsAllFields = true;\n    }\n\n    if( !_wantsAllFields ) {\n      if( !globs.isEmpty() ) {\n        // TODO??? need to fill up the fields with matching field names in the index\n        // and add them to okFieldNames?\n        // maybe just get all fields?\n        // this would disable field selection optimization... i think thatis OK\n        fields.clear(); // this will get all fields, and use wantsField to limit\n      }\n      okFieldNames.addAll( fields );\n    }\n\n    if( augmenters.size() == 1 ) {\n      transformer = augmenters.getTransformer(0);\n    }\n    else if( augmenters.size() > 1 ) {\n      transformer = augmenters;\n    }\n  }\n\n","sourceOld":"  private void parseFieldList(String[] fl, SolrQueryRequest req) {\n    _wantsScore = false;\n    _wantsAllFields = false;\n    if (fl == null || fl.length == 0 || fl.length == 1 && fl[0].length()==0) {\n      _wantsAllFields = true;\n      return;\n    }\n\n    NamedList<String> rename = new NamedList<String>();\n    DocTransformers augmenters = new DocTransformers();\n    for (String fieldList : fl) {\n      add(fieldList,rename,augmenters,req);\n    }\n    if( rename.size() > 0 ) {\n      for( int i=0; i<rename.size(); i++ ) {\n        okFieldNames.add( rename.getVal(i) );\n      }\n      augmenters.addTransformer( new RenameFieldsTransformer( rename ) );\n    }\n\n    // Legacy behavior? \"score\" == \"*,score\"  Distributed tests for this\n    if( fields.size() == 1 && _wantsScore ) {\n      _wantsAllFields = true;\n    }\n\n    if( !_wantsAllFields ) {\n      if( !globs.isEmpty() ) {\n        // TODO??? need to fill up the fields with matching field names in the index\n        // and add them to okFieldNames?\n        // maybe just get all fields?\n        // this would disable field selection optimization... i think thatis OK\n        fields.clear(); // this will get all fields, and use wantsField to limit\n      }\n      okFieldNames.addAll( fields );\n    }\n\n    if( augmenters.size() == 1 ) {\n      transformer = augmenters.getTransformer(0);\n    }\n    else if( augmenters.size() > 1 ) {\n      transformer = augmenters;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/ReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","sourceNew":"  private void parseFieldList(String[] fl, SolrQueryRequest req) {\n    _wantsScore = false;\n    _wantsAllFields = false;\n    if (fl == null || fl.length == 0 || fl.length == 1 && fl[0].length()==0) {\n      _wantsAllFields = true;\n      return;\n    }\n\n    NamedList<String> rename = new NamedList<String>();\n    DocTransformers augmenters = new DocTransformers();\n    for (String fieldList : fl) {\n      add(fieldList,rename,augmenters,req);\n    }\n    if( rename.size() > 0 ) {\n      for( int i=0; i<rename.size(); i++ ) {\n        okFieldNames.add( rename.getVal(i) );\n      }\n      augmenters.addTransformer( new RenameFieldsTransformer( rename ) );\n    }\n\n    // Legacy behavior? \"score\" == \"*,score\"  Distributed tests for this\n    if( fields.size() == 1 && _wantsScore ) {\n      _wantsAllFields = true;\n    }\n\n    if( !_wantsAllFields ) {\n      if( !globs.isEmpty() ) {\n        // TODO??? need to fill up the fields with matching field names in the index\n        // and add them to okFieldNames?\n        // maybe just get all fields?\n        // this would disable field selection optimization... i think thatis OK\n        fields.clear(); // this will get all fields, and use wantsField to limit\n      }\n      okFieldNames.addAll( fields );\n    }\n\n    if( augmenters.size() == 1 ) {\n      transformer = augmenters.getTransformer(0);\n    }\n    else if( augmenters.size() > 1 ) {\n      transformer = augmenters;\n    }\n  }\n\n","sourceOld":"  private void parseFieldList(String[] fl, SolrQueryRequest req) {\n    _wantsScore = false;\n    _wantsAllFields = false;\n    if (fl == null || fl.length == 0 || fl.length == 1 && fl[0].length()==0) {\n      _wantsAllFields = true;\n      return;\n    }\n\n    NamedList<String> rename = new NamedList<String>();\n    DocTransformers augmenters = new DocTransformers();\n    for (String fieldList : fl) {\n      add(fieldList,rename,augmenters,req);\n    }\n    if( rename.size() > 0 ) {\n      for( int i=0; i<rename.size(); i++ ) {\n        okFieldNames.add( rename.getVal(i) );\n      }\n      augmenters.addTransformer( new RenameFieldsTransformer( rename ) );\n    }\n\n    // Legacy behavior? \"score\" == \"*,score\"  Distributed tests for this\n    if( fields.size() == 1 && _wantsScore ) {\n      _wantsAllFields = true;\n    }\n\n    if( !_wantsAllFields ) {\n      if( !globs.isEmpty() ) {\n        // TODO??? need to fill up the fields with matching field names in the index\n        // and add them to okFieldNames?\n        // maybe just get all fields?\n        // this would disable field selection optimization... i think thatis OK\n        fields.clear(); // this will get all fields, and use wantsField to limit\n      }\n      okFieldNames.addAll( fields );\n    }\n\n    if( augmenters.size() == 1 ) {\n      transformer = augmenters.getTransformer(0);\n    }\n    else if( augmenters.size() > 1 ) {\n      transformer = augmenters;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/ReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","sourceNew":"  private void parseFieldList(String[] fl, SolrQueryRequest req) {\n    _wantsScore = false;\n    _wantsAllFields = false;\n    if (fl == null || fl.length == 0 || fl.length == 1 && fl[0].length()==0) {\n      _wantsAllFields = true;\n      return;\n    }\n\n    NamedList<String> rename = new NamedList<String>();\n    DocTransformers augmenters = new DocTransformers();\n    for (String fieldList : fl) {\n      add(fieldList,rename,augmenters,req);\n    }\n    if( rename.size() > 0 ) {\n      for( int i=0; i<rename.size(); i++ ) {\n        okFieldNames.add( rename.getVal(i) );\n      }\n      augmenters.addTransformer( new RenameFieldsTransformer( rename ) );\n    }\n\n    // Legacy behavior? \"score\" == \"*,score\"  Distributed tests for this\n    if( fields.size() == 1 && _wantsScore ) {\n      _wantsAllFields = true;\n    }\n\n    if( !_wantsAllFields ) {\n      if( !globs.isEmpty() ) {\n        // TODO??? need to fill up the fields with matching field names in the index\n        // and add them to okFieldNames?\n        // maybe just get all fields?\n        // this would disable field selection optimization... i think thatis OK\n        fields.clear(); // this will get all fields, and use wantsField to limit\n      }\n      okFieldNames.addAll( fields );\n    }\n\n    if( augmenters.size() == 1 ) {\n      transformer = augmenters.getTransformer(0);\n    }\n    else if( augmenters.size() > 1 ) {\n      transformer = augmenters;\n    }\n  }\n\n","sourceOld":"  private void parseFieldList(String[] fl, SolrQueryRequest req) {\n    _wantsScore = false;\n    _wantsAllFields = false;\n    if (fl == null || fl.length == 0 || fl.length == 1 && fl[0].length()==0) {\n      _wantsAllFields = true;\n      return;\n    }\n\n    NamedList<String> rename = new NamedList<String>();\n    DocTransformers augmenters = new DocTransformers();\n    for (String fieldList : fl) {\n      add(fieldList,rename,augmenters,req);\n    }\n    if( rename.size() > 0 ) {\n      for( int i=0; i<rename.size(); i++ ) {\n        okFieldNames.add( rename.getVal(i) );\n      }\n      augmenters.addTransformer( new RenameFieldsTransformer( rename ) );\n    }\n\n    // Legacy behavior? \"score\" == \"*,score\"  Distributed tests for this\n    if( fields.size() == 1 && _wantsScore ) {\n      _wantsAllFields = true;\n    }\n\n    if( !_wantsAllFields ) {\n      if( !globs.isEmpty() ) {\n        // TODO??? need to fill up the fields with matching field names in the index\n        // and add them to okFieldNames?\n        // maybe just get all fields?\n        // this would disable field selection optimization... i think thatis OK\n        fields.clear(); // this will get all fields, and use wantsField to limit\n      }\n      okFieldNames.addAll( fields );\n    }\n\n    if( augmenters.size() == 1 ) {\n      transformer = augmenters.getTransformer(0);\n    }\n    else if( augmenters.size() > 1 ) {\n      transformer = augmenters;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1824b087cfdcde66ff0d86b5e11d8159084ad168","date":1313368962,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","sourceNew":"  private void parseFieldList(String[] fl, SolrQueryRequest req) {\n    _wantsScore = false;\n    _wantsAllFields = false;\n    if (fl == null || fl.length == 0 || fl.length == 1 && fl[0].length()==0) {\n      _wantsAllFields = true;\n      return;\n    }\n\n    NamedList<String> rename = new NamedList<String>();\n    DocTransformers augmenters = new DocTransformers();\n    for (String fieldList : fl) {\n      add(fieldList,rename,augmenters,req);\n    }\n    if( rename.size() > 0 ) {\n      for( int i=0; i<rename.size(); i++ ) {\n        okFieldNames.add( rename.getVal(i) );\n      }\n      augmenters.addTransformer( new RenameFieldsTransformer( rename ) );\n    }\n\n    // Legacy behavior: \"score\" == \"*,score\"  \n    if( fields.size() == 1 && _wantsScore && augmenters.size() == 1 && globs.isEmpty() ) {\n      _wantsAllFields = true;\n    }\n\n    if( !_wantsAllFields ) {\n      if( !globs.isEmpty() ) {\n        // TODO??? need to fill up the fields with matching field names in the index\n        // and add them to okFieldNames?\n        // maybe just get all fields?\n        // this would disable field selection optimization... i think thatis OK\n        fields.clear(); // this will get all fields, and use wantsField to limit\n      }\n      okFieldNames.addAll( fields );\n    }\n\n    if( augmenters.size() == 1 ) {\n      transformer = augmenters.getTransformer(0);\n    }\n    else if( augmenters.size() > 1 ) {\n      transformer = augmenters;\n    }\n  }\n\n","sourceOld":"  private void parseFieldList(String[] fl, SolrQueryRequest req) {\n    _wantsScore = false;\n    _wantsAllFields = false;\n    if (fl == null || fl.length == 0 || fl.length == 1 && fl[0].length()==0) {\n      _wantsAllFields = true;\n      return;\n    }\n\n    NamedList<String> rename = new NamedList<String>();\n    DocTransformers augmenters = new DocTransformers();\n    for (String fieldList : fl) {\n      add(fieldList,rename,augmenters,req);\n    }\n    if( rename.size() > 0 ) {\n      for( int i=0; i<rename.size(); i++ ) {\n        okFieldNames.add( rename.getVal(i) );\n      }\n      augmenters.addTransformer( new RenameFieldsTransformer( rename ) );\n    }\n\n    // Legacy behavior? \"score\" == \"*,score\"  Distributed tests for this\n    if( fields.size() == 1 && _wantsScore ) {\n      _wantsAllFields = true;\n    }\n\n    if( !_wantsAllFields ) {\n      if( !globs.isEmpty() ) {\n        // TODO??? need to fill up the fields with matching field names in the index\n        // and add them to okFieldNames?\n        // maybe just get all fields?\n        // this would disable field selection optimization... i think thatis OK\n        fields.clear(); // this will get all fields, and use wantsField to limit\n      }\n      okFieldNames.addAll( fields );\n    }\n\n    if( augmenters.size() == 1 ) {\n      transformer = augmenters.getTransformer(0);\n    }\n    else if( augmenters.size() > 1 ) {\n      transformer = augmenters;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df525117ddb4dc8c8fe6e9fded68f55b29070496","date":1331258843,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","sourceNew":"  private void parseFieldList(String[] fl, SolrQueryRequest req) {\n    _wantsScore = false;\n    _wantsAllFields = false;\n    if (fl == null || fl.length == 0 || fl.length == 1 && fl[0].length()==0) {\n      _wantsAllFields = true;\n      return;\n    }\n\n    NamedList<String> rename = new NamedList<String>();\n    DocTransformers augmenters = new DocTransformers();\n    for (String fieldList : fl) {\n      add(fieldList,rename,augmenters,req);\n    }\n    if( rename.size() > 0 ) {\n      for( int i=0; i<rename.size(); i++ ) {\n        okFieldNames.add( rename.getVal(i) );\n      }\n      augmenters.addTransformer( new RenameFieldsTransformer( rename ) );\n    }\n\n    if( !_wantsAllFields ) {\n      if( !globs.isEmpty() ) {\n        // TODO??? need to fill up the fields with matching field names in the index\n        // and add them to okFieldNames?\n        // maybe just get all fields?\n        // this would disable field selection optimization... i think thatis OK\n        fields.clear(); // this will get all fields, and use wantsField to limit\n      }\n      okFieldNames.addAll( fields );\n    }\n\n    if( augmenters.size() == 1 ) {\n      transformer = augmenters.getTransformer(0);\n    }\n    else if( augmenters.size() > 1 ) {\n      transformer = augmenters;\n    }\n  }\n\n","sourceOld":"  private void parseFieldList(String[] fl, SolrQueryRequest req) {\n    _wantsScore = false;\n    _wantsAllFields = false;\n    if (fl == null || fl.length == 0 || fl.length == 1 && fl[0].length()==0) {\n      _wantsAllFields = true;\n      return;\n    }\n\n    NamedList<String> rename = new NamedList<String>();\n    DocTransformers augmenters = new DocTransformers();\n    for (String fieldList : fl) {\n      add(fieldList,rename,augmenters,req);\n    }\n    if( rename.size() > 0 ) {\n      for( int i=0; i<rename.size(); i++ ) {\n        okFieldNames.add( rename.getVal(i) );\n      }\n      augmenters.addTransformer( new RenameFieldsTransformer( rename ) );\n    }\n\n    // Legacy behavior: \"score\" == \"*,score\"  \n    if( fields.size() == 1 && _wantsScore && augmenters.size() == 1 && globs.isEmpty() ) {\n      _wantsAllFields = true;\n    }\n\n    if( !_wantsAllFields ) {\n      if( !globs.isEmpty() ) {\n        // TODO??? need to fill up the fields with matching field names in the index\n        // and add them to okFieldNames?\n        // maybe just get all fields?\n        // this would disable field selection optimization... i think thatis OK\n        fields.clear(); // this will get all fields, and use wantsField to limit\n      }\n      okFieldNames.addAll( fields );\n    }\n\n    if( augmenters.size() == 1 ) {\n      transformer = augmenters.getTransformer(0);\n    }\n    else if( augmenters.size() > 1 ) {\n      transformer = augmenters;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","sourceNew":"  private void parseFieldList(String[] fl, SolrQueryRequest req) {\n    _wantsScore = false;\n    _wantsAllFields = false;\n    if (fl == null || fl.length == 0 || fl.length == 1 && fl[0].length()==0) {\n      _wantsAllFields = true;\n      return;\n    }\n\n    NamedList<String> rename = new NamedList<String>();\n    DocTransformers augmenters = new DocTransformers();\n    for (String fieldList : fl) {\n      add(fieldList,rename,augmenters,req);\n    }\n    if( rename.size() > 0 ) {\n      for( int i=0; i<rename.size(); i++ ) {\n        okFieldNames.add( rename.getVal(i) );\n      }\n      augmenters.addTransformer( new RenameFieldsTransformer( rename ) );\n    }\n\n    if( !_wantsAllFields ) {\n      if( !globs.isEmpty() ) {\n        // TODO??? need to fill up the fields with matching field names in the index\n        // and add them to okFieldNames?\n        // maybe just get all fields?\n        // this would disable field selection optimization... i think thatis OK\n        fields.clear(); // this will get all fields, and use wantsField to limit\n      }\n      okFieldNames.addAll( fields );\n    }\n\n    if( augmenters.size() == 1 ) {\n      transformer = augmenters.getTransformer(0);\n    }\n    else if( augmenters.size() > 1 ) {\n      transformer = augmenters;\n    }\n  }\n\n","sourceOld":"  private void parseFieldList(String[] fl, SolrQueryRequest req) {\n    _wantsScore = false;\n    _wantsAllFields = false;\n    if (fl == null || fl.length == 0 || fl.length == 1 && fl[0].length()==0) {\n      _wantsAllFields = true;\n      return;\n    }\n\n    NamedList<String> rename = new NamedList<String>();\n    DocTransformers augmenters = new DocTransformers();\n    for (String fieldList : fl) {\n      add(fieldList,rename,augmenters,req);\n    }\n    if( rename.size() > 0 ) {\n      for( int i=0; i<rename.size(); i++ ) {\n        okFieldNames.add( rename.getVal(i) );\n      }\n      augmenters.addTransformer( new RenameFieldsTransformer( rename ) );\n    }\n\n    // Legacy behavior: \"score\" == \"*,score\"  \n    if( fields.size() == 1 && _wantsScore && augmenters.size() == 1 && globs.isEmpty() ) {\n      _wantsAllFields = true;\n    }\n\n    if( !_wantsAllFields ) {\n      if( !globs.isEmpty() ) {\n        // TODO??? need to fill up the fields with matching field names in the index\n        // and add them to okFieldNames?\n        // maybe just get all fields?\n        // this would disable field selection optimization... i think thatis OK\n        fields.clear(); // this will get all fields, and use wantsField to limit\n      }\n      okFieldNames.addAll( fields );\n    }\n\n    if( augmenters.size() == 1 ) {\n      transformer = augmenters.getTransformer(0);\n    }\n    else if( augmenters.size() > 1 ) {\n      transformer = augmenters;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d6c5c6226ab2177d29ab21112ec81e5afb21e75","date":1335389211,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","sourceNew":"  private void parseFieldList(String[] fl, SolrQueryRequest req) {\n    _wantsScore = false;\n    _wantsAllFields = false;\n    if (fl == null || fl.length == 0 || fl.length == 1 && fl[0].length()==0) {\n      _wantsAllFields = true;\n      return;\n    }\n\n    NamedList<String> rename = new NamedList<String>();\n    DocTransformers augmenters = new DocTransformers();\n    for (String fieldList : fl) {\n      add(fieldList,rename,augmenters,req);\n    }\n    for( int i=0; i<rename.size(); i++ ) {\n      String from = rename.getName(i);\n      String to = rename.getVal(i);\n      okFieldNames.add( to );\n      boolean copy = (reqFieldNames!=null && reqFieldNames.contains(from));\n      if(!copy) {\n        // Check that subsequent copy/rename requests have the field they need to copy\n        for(int j=i+1; j<rename.size(); j++) {\n          if(from.equals(rename.getName(j))) {\n            rename.setName(j, to); // copy from the current target\n            if(reqFieldNames==null) {\n              reqFieldNames = new HashSet<String>();\n            }\n            reqFieldNames.add(to); // don't rename our current target\n          }\n        }\n      }\n      augmenters.addTransformer( new RenameFieldTransformer( from, to, copy ) );     \n    }\n\n    if( !_wantsAllFields ) {\n      if( !globs.isEmpty() ) {\n        // TODO??? need to fill up the fields with matching field names in the index\n        // and add them to okFieldNames?\n        // maybe just get all fields?\n        // this would disable field selection optimization... i think thatis OK\n        fields.clear(); // this will get all fields, and use wantsField to limit\n      }\n      okFieldNames.addAll( fields );\n    }\n\n    if( augmenters.size() == 1 ) {\n      transformer = augmenters.getTransformer(0);\n    }\n    else if( augmenters.size() > 1 ) {\n      transformer = augmenters;\n    }\n  }\n\n","sourceOld":"  private void parseFieldList(String[] fl, SolrQueryRequest req) {\n    _wantsScore = false;\n    _wantsAllFields = false;\n    if (fl == null || fl.length == 0 || fl.length == 1 && fl[0].length()==0) {\n      _wantsAllFields = true;\n      return;\n    }\n\n    NamedList<String> rename = new NamedList<String>();\n    DocTransformers augmenters = new DocTransformers();\n    for (String fieldList : fl) {\n      add(fieldList,rename,augmenters,req);\n    }\n    if( rename.size() > 0 ) {\n      for( int i=0; i<rename.size(); i++ ) {\n        okFieldNames.add( rename.getVal(i) );\n      }\n      augmenters.addTransformer( new RenameFieldsTransformer( rename ) );\n    }\n\n    if( !_wantsAllFields ) {\n      if( !globs.isEmpty() ) {\n        // TODO??? need to fill up the fields with matching field names in the index\n        // and add them to okFieldNames?\n        // maybe just get all fields?\n        // this would disable field selection optimization... i think thatis OK\n        fields.clear(); // this will get all fields, and use wantsField to limit\n      }\n      okFieldNames.addAll( fields );\n    }\n\n    if( augmenters.size() == 1 ) {\n      transformer = augmenters.getTransformer(0);\n    }\n    else if( augmenters.size() > 1 ) {\n      transformer = augmenters;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d17ffdbce80d3dce181982a9cd16f4f90bc8619a","date":1357583592,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","sourceNew":"  private void parseFieldList(String[] fl, SolrQueryRequest req) {\n    _wantsScore = false;\n    _wantsAllFields = false;\n    if (fl == null || fl.length == 0 || fl.length == 1 && fl[0].length()==0) {\n      _wantsAllFields = true;\n      return;\n    }\n\n    NamedList<String> rename = new NamedList<String>();\n    DocTransformers augmenters = new DocTransformers();\n    for (String fieldList : fl) {\n      add(fieldList,rename,augmenters,req);\n    }\n    for( int i=0; i<rename.size(); i++ ) {\n      String from = rename.getName(i);\n      String to = rename.getVal(i);\n      okFieldNames.add( to );\n      boolean copy = (reqFieldNames!=null && reqFieldNames.contains(from));\n      if(!copy) {\n        // Check that subsequent copy/rename requests have the field they need to copy\n        for(int j=i+1; j<rename.size(); j++) {\n          if(from.equals(rename.getName(j))) {\n            rename.setName(j, to); // copy from the current target\n            if(reqFieldNames==null) {\n              reqFieldNames = new HashSet<String>();\n            }\n            reqFieldNames.add(to); // don't rename our current target\n          }\n        }\n      }\n      augmenters.addTransformer( new RenameFieldTransformer( from, to, copy ) );\n    }\n\n    if( !_wantsAllFields ) {\n      if( !globs.isEmpty() ) {\n        // TODO??? need to fill up the fields with matching field names in the index\n        // and add them to okFieldNames?\n        // maybe just get all fields?\n        // this would disable field selection optimization... i think thatis OK\n        fields.clear(); // this will get all fields, and use wantsField to limit\n      }\n      okFieldNames.addAll( fields );\n    }\n\n    if( augmenters.size() == 1 ) {\n      transformer = augmenters.getTransformer(0);\n    }\n    else if( augmenters.size() > 1 ) {\n      transformer = augmenters;\n    }\n  }\n\n","sourceOld":"  private void parseFieldList(String[] fl, SolrQueryRequest req) {\n    _wantsScore = false;\n    _wantsAllFields = false;\n    if (fl == null || fl.length == 0 || fl.length == 1 && fl[0].length()==0) {\n      _wantsAllFields = true;\n      return;\n    }\n\n    NamedList<String> rename = new NamedList<String>();\n    DocTransformers augmenters = new DocTransformers();\n    for (String fieldList : fl) {\n      add(fieldList,rename,augmenters,req);\n    }\n    for( int i=0; i<rename.size(); i++ ) {\n      String from = rename.getName(i);\n      String to = rename.getVal(i);\n      okFieldNames.add( to );\n      boolean copy = (reqFieldNames!=null && reqFieldNames.contains(from));\n      if(!copy) {\n        // Check that subsequent copy/rename requests have the field they need to copy\n        for(int j=i+1; j<rename.size(); j++) {\n          if(from.equals(rename.getName(j))) {\n            rename.setName(j, to); // copy from the current target\n            if(reqFieldNames==null) {\n              reqFieldNames = new HashSet<String>();\n            }\n            reqFieldNames.add(to); // don't rename our current target\n          }\n        }\n      }\n      augmenters.addTransformer( new RenameFieldTransformer( from, to, copy ) );     \n    }\n\n    if( !_wantsAllFields ) {\n      if( !globs.isEmpty() ) {\n        // TODO??? need to fill up the fields with matching field names in the index\n        // and add them to okFieldNames?\n        // maybe just get all fields?\n        // this would disable field selection optimization... i think thatis OK\n        fields.clear(); // this will get all fields, and use wantsField to limit\n      }\n      okFieldNames.addAll( fields );\n    }\n\n    if( augmenters.size() == 1 ) {\n      transformer = augmenters.getTransformer(0);\n    }\n    else if( augmenters.size() > 1 ) {\n      transformer = augmenters;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/ReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","sourceNew":null,"sourceOld":"  private void parseFieldList(String[] fl, SolrQueryRequest req) {\n    _wantsScore = false;\n    _wantsAllFields = false;\n    if (fl == null || fl.length == 0 || fl.length == 1 && fl[0].length()==0) {\n      _wantsAllFields = true;\n      return;\n    }\n\n    NamedList<String> rename = new NamedList<String>();\n    DocTransformers augmenters = new DocTransformers();\n    for (String fieldList : fl) {\n      add(fieldList,rename,augmenters,req);\n    }\n    for( int i=0; i<rename.size(); i++ ) {\n      String from = rename.getName(i);\n      String to = rename.getVal(i);\n      okFieldNames.add( to );\n      boolean copy = (reqFieldNames!=null && reqFieldNames.contains(from));\n      if(!copy) {\n        // Check that subsequent copy/rename requests have the field they need to copy\n        for(int j=i+1; j<rename.size(); j++) {\n          if(from.equals(rename.getName(j))) {\n            rename.setName(j, to); // copy from the current target\n            if(reqFieldNames==null) {\n              reqFieldNames = new HashSet<String>();\n            }\n            reqFieldNames.add(to); // don't rename our current target\n          }\n        }\n      }\n      augmenters.addTransformer( new RenameFieldTransformer( from, to, copy ) );     \n    }\n\n    if( !_wantsAllFields ) {\n      if( !globs.isEmpty() ) {\n        // TODO??? need to fill up the fields with matching field names in the index\n        // and add them to okFieldNames?\n        // maybe just get all fields?\n        // this would disable field selection optimization... i think thatis OK\n        fields.clear(); // this will get all fields, and use wantsField to limit\n      }\n      okFieldNames.addAll( fields );\n    }\n\n    if( augmenters.size() == 1 ) {\n      transformer = augmenters.getTransformer(0);\n    }\n    else if( augmenters.size() > 1 ) {\n      transformer = augmenters;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["9d6c5c6226ab2177d29ab21112ec81e5afb21e75","d17ffdbce80d3dce181982a9cd16f4f90bc8619a"],"38e3b736c7ca086d61b7dbb841c905ee115490da":["1824b087cfdcde66ff0d86b5e11d8159084ad168","df525117ddb4dc8c8fe6e9fded68f55b29070496"],"d17ffdbce80d3dce181982a9cd16f4f90bc8619a":["9d6c5c6226ab2177d29ab21112ec81e5afb21e75"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"9d6c5c6226ab2177d29ab21112ec81e5afb21e75":["df525117ddb4dc8c8fe6e9fded68f55b29070496"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"df525117ddb4dc8c8fe6e9fded68f55b29070496":["1824b087cfdcde66ff0d86b5e11d8159084ad168"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d17ffdbce80d3dce181982a9cd16f4f90bc8619a"],"1824b087cfdcde66ff0d86b5e11d8159084ad168":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"d17ffdbce80d3dce181982a9cd16f4f90bc8619a":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["1824b087cfdcde66ff0d86b5e11d8159084ad168"],"9d6c5c6226ab2177d29ab21112ec81e5afb21e75":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d17ffdbce80d3dce181982a9cd16f4f90bc8619a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"df525117ddb4dc8c8fe6e9fded68f55b29070496":["38e3b736c7ca086d61b7dbb841c905ee115490da","9d6c5c6226ab2177d29ab21112ec81e5afb21e75"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"1824b087cfdcde66ff0d86b5e11d8159084ad168":["38e3b736c7ca086d61b7dbb841c905ee115490da","df525117ddb4dc8c8fe6e9fded68f55b29070496"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","38e3b736c7ca086d61b7dbb841c905ee115490da","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}