{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testPrepareCommitRollback().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testPrepareCommitRollback().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testPrepareCommitRollback().mjava","sourceNew":"  // LUCENE-1274: test writer.prepareCommit()\n  public void testPrepareCommitRollback() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setPreventDoubleWrite(false);\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(5))\n    );\n    writer.commit();\n\n    for (int i = 0; i < 23; i++)\n      TestIndexWriter.addDoc(writer);\n\n    DirectoryReader reader = IndexReader.open(dir);\n    assertEquals(0, reader.numDocs());\n\n    writer.prepareCommit();\n\n    IndexReader reader2 = IndexReader.open(dir);\n    assertEquals(0, reader2.numDocs());\n\n    writer.rollback();\n\n    IndexReader reader3 = DirectoryReader.openIfChanged(reader);\n    assertNull(reader3);\n    assertEquals(0, reader.numDocs());\n    assertEquals(0, reader2.numDocs());\n    reader.close();\n    reader2.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < 17; i++)\n      TestIndexWriter.addDoc(writer);\n\n    reader = IndexReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.prepareCommit();\n\n    reader = IndexReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.commit();\n    reader = IndexReader.open(dir);\n    assertEquals(17, reader.numDocs());\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1274: test writer.prepareCommit()\n  public void testPrepareCommitRollback() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setPreventDoubleWrite(false);\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(5))\n    );\n    writer.commit();\n\n    for (int i = 0; i < 23; i++)\n      TestIndexWriter.addDoc(writer);\n\n    DirectoryReader reader = IndexReader.open(dir);\n    assertEquals(0, reader.numDocs());\n\n    writer.prepareCommit();\n\n    IndexReader reader2 = IndexReader.open(dir);\n    assertEquals(0, reader2.numDocs());\n\n    writer.rollback();\n\n    IndexReader reader3 = DirectoryReader.openIfChanged(reader);\n    assertNull(reader3);\n    assertEquals(0, reader.numDocs());\n    assertEquals(0, reader2.numDocs());\n    reader.close();\n    reader2.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < 17; i++)\n      TestIndexWriter.addDoc(writer);\n\n    reader = IndexReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.prepareCommit();\n\n    reader = IndexReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.commit();\n    reader = IndexReader.open(dir);\n    assertEquals(17, reader.numDocs());\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testPrepareCommitRollback().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testPrepareCommitRollback().mjava","sourceNew":"  // LUCENE-1274: test writer.prepareCommit()\n  public void testPrepareCommitRollback() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setPreventDoubleWrite(false);\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(5))\n    );\n    writer.commit();\n\n    for (int i = 0; i < 23; i++)\n      TestIndexWriter.addDoc(writer);\n\n    DirectoryReader reader = IndexReader.open(dir);\n    assertEquals(0, reader.numDocs());\n\n    writer.prepareCommit();\n\n    IndexReader reader2 = IndexReader.open(dir);\n    assertEquals(0, reader2.numDocs());\n\n    writer.rollback();\n\n    IndexReader reader3 = DirectoryReader.openIfChanged(reader);\n    assertNull(reader3);\n    assertEquals(0, reader.numDocs());\n    assertEquals(0, reader2.numDocs());\n    reader.close();\n    reader2.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for (int i = 0; i < 17; i++)\n      TestIndexWriter.addDoc(writer);\n\n    reader = IndexReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.prepareCommit();\n\n    reader = IndexReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.commit();\n    reader = IndexReader.open(dir);\n    assertEquals(17, reader.numDocs());\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1274: test writer.prepareCommit()\n  public void testPrepareCommitRollback() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setPreventDoubleWrite(false);\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(5))\n    );\n    writer.commit();\n\n    for (int i = 0; i < 23; i++)\n      TestIndexWriter.addDoc(writer);\n\n    DirectoryReader reader = IndexReader.open(dir);\n    assertEquals(0, reader.numDocs());\n\n    writer.prepareCommit();\n\n    IndexReader reader2 = IndexReader.open(dir);\n    assertEquals(0, reader2.numDocs());\n\n    writer.rollback();\n\n    IndexReader reader3 = DirectoryReader.openIfChanged(reader);\n    assertNull(reader3);\n    assertEquals(0, reader.numDocs());\n    assertEquals(0, reader2.numDocs());\n    reader.close();\n    reader2.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < 17; i++)\n      TestIndexWriter.addDoc(writer);\n\n    reader = IndexReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.prepareCommit();\n\n    reader = IndexReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.commit();\n    reader = IndexReader.open(dir);\n    assertEquals(17, reader.numDocs());\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testPrepareCommitRollback().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testPrepareCommitRollback().mjava","sourceNew":"  // LUCENE-1274: test writer.prepareCommit()\n  public void testPrepareCommitRollback() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setPreventDoubleWrite(false);\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(5))\n    );\n    writer.commit();\n\n    for (int i = 0; i < 23; i++)\n      TestIndexWriter.addDoc(writer);\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n\n    writer.prepareCommit();\n\n    IndexReader reader2 = DirectoryReader.open(dir);\n    assertEquals(0, reader2.numDocs());\n\n    writer.rollback();\n\n    IndexReader reader3 = DirectoryReader.openIfChanged(reader);\n    assertNull(reader3);\n    assertEquals(0, reader.numDocs());\n    assertEquals(0, reader2.numDocs());\n    reader.close();\n    reader2.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for (int i = 0; i < 17; i++)\n      TestIndexWriter.addDoc(writer);\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.prepareCommit();\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.commit();\n    reader = DirectoryReader.open(dir);\n    assertEquals(17, reader.numDocs());\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1274: test writer.prepareCommit()\n  public void testPrepareCommitRollback() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setPreventDoubleWrite(false);\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(5))\n    );\n    writer.commit();\n\n    for (int i = 0; i < 23; i++)\n      TestIndexWriter.addDoc(writer);\n\n    DirectoryReader reader = IndexReader.open(dir);\n    assertEquals(0, reader.numDocs());\n\n    writer.prepareCommit();\n\n    IndexReader reader2 = IndexReader.open(dir);\n    assertEquals(0, reader2.numDocs());\n\n    writer.rollback();\n\n    IndexReader reader3 = DirectoryReader.openIfChanged(reader);\n    assertNull(reader3);\n    assertEquals(0, reader.numDocs());\n    assertEquals(0, reader2.numDocs());\n    reader.close();\n    reader2.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for (int i = 0; i < 17; i++)\n      TestIndexWriter.addDoc(writer);\n\n    reader = IndexReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.prepareCommit();\n\n    reader = IndexReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.commit();\n    reader = IndexReader.open(dir);\n    assertEquals(17, reader.numDocs());\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d19974432be9aed28ee7dca73bdf01d139e763a9","date":1342822166,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testPrepareCommitRollback().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testPrepareCommitRollback().mjava","sourceNew":"  // LUCENE-1274: test writer.prepareCommit()\n  public void testPrepareCommitRollback() throws IOException {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(5))\n    );\n    writer.commit();\n\n    for (int i = 0; i < 23; i++)\n      TestIndexWriter.addDoc(writer);\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n\n    writer.prepareCommit();\n\n    IndexReader reader2 = DirectoryReader.open(dir);\n    assertEquals(0, reader2.numDocs());\n\n    writer.rollback();\n\n    IndexReader reader3 = DirectoryReader.openIfChanged(reader);\n    assertNull(reader3);\n    assertEquals(0, reader.numDocs());\n    assertEquals(0, reader2.numDocs());\n    reader.close();\n    reader2.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for (int i = 0; i < 17; i++)\n      TestIndexWriter.addDoc(writer);\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.prepareCommit();\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.commit();\n    reader = DirectoryReader.open(dir);\n    assertEquals(17, reader.numDocs());\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1274: test writer.prepareCommit()\n  public void testPrepareCommitRollback() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setPreventDoubleWrite(false);\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(5))\n    );\n    writer.commit();\n\n    for (int i = 0; i < 23; i++)\n      TestIndexWriter.addDoc(writer);\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n\n    writer.prepareCommit();\n\n    IndexReader reader2 = DirectoryReader.open(dir);\n    assertEquals(0, reader2.numDocs());\n\n    writer.rollback();\n\n    IndexReader reader3 = DirectoryReader.openIfChanged(reader);\n    assertNull(reader3);\n    assertEquals(0, reader.numDocs());\n    assertEquals(0, reader2.numDocs());\n    reader.close();\n    reader2.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for (int i = 0; i < 17; i++)\n      TestIndexWriter.addDoc(writer);\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.prepareCommit();\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.commit();\n    reader = DirectoryReader.open(dir);\n    assertEquals(17, reader.numDocs());\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":["1f653cfcf159baeaafe5d01682a911e95bba4012","455aeff4fef915340c5b19d71d5e147034e83093"],"bugIntro":["11c6df42fb3eba174c3ca0d9a5194eaecd893b77"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testPrepareCommitRollback().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testPrepareCommitRollback().mjava","sourceNew":"  // LUCENE-1274: test writer.prepareCommit()\n  public void testPrepareCommitRollback() throws IOException {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(5))\n    );\n    writer.commit();\n\n    for (int i = 0; i < 23; i++)\n      TestIndexWriter.addDoc(writer);\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n\n    writer.prepareCommit();\n\n    IndexReader reader2 = DirectoryReader.open(dir);\n    assertEquals(0, reader2.numDocs());\n\n    writer.rollback();\n\n    IndexReader reader3 = DirectoryReader.openIfChanged(reader);\n    assertNull(reader3);\n    assertEquals(0, reader.numDocs());\n    assertEquals(0, reader2.numDocs());\n    reader.close();\n    reader2.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for (int i = 0; i < 17; i++)\n      TestIndexWriter.addDoc(writer);\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.prepareCommit();\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.commit();\n    reader = DirectoryReader.open(dir);\n    assertEquals(17, reader.numDocs());\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1274: test writer.prepareCommit()\n  public void testPrepareCommitRollback() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setPreventDoubleWrite(false);\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(5))\n    );\n    writer.commit();\n\n    for (int i = 0; i < 23; i++)\n      TestIndexWriter.addDoc(writer);\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n\n    writer.prepareCommit();\n\n    IndexReader reader2 = DirectoryReader.open(dir);\n    assertEquals(0, reader2.numDocs());\n\n    writer.rollback();\n\n    IndexReader reader3 = DirectoryReader.openIfChanged(reader);\n    assertNull(reader3);\n    assertEquals(0, reader.numDocs());\n    assertEquals(0, reader2.numDocs());\n    reader.close();\n    reader2.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for (int i = 0; i < 17; i++)\n      TestIndexWriter.addDoc(writer);\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.prepareCommit();\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.commit();\n    reader = DirectoryReader.open(dir);\n    assertEquals(17, reader.numDocs());\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testPrepareCommitRollback().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testPrepareCommitRollback().mjava","sourceNew":"  // LUCENE-1274: test writer.prepareCommit()\n  public void testPrepareCommitRollback() throws IOException {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(5))\n    );\n    writer.commit();\n\n    for (int i = 0; i < 23; i++)\n      TestIndexWriter.addDoc(writer);\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n\n    writer.prepareCommit();\n\n    IndexReader reader2 = DirectoryReader.open(dir);\n    assertEquals(0, reader2.numDocs());\n\n    writer.rollback();\n\n    IndexReader reader3 = DirectoryReader.openIfChanged(reader);\n    assertNull(reader3);\n    assertEquals(0, reader.numDocs());\n    assertEquals(0, reader2.numDocs());\n    reader.close();\n    reader2.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for (int i = 0; i < 17; i++)\n      TestIndexWriter.addDoc(writer);\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.prepareCommit();\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.commit();\n    reader = DirectoryReader.open(dir);\n    assertEquals(17, reader.numDocs());\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1274: test writer.prepareCommit()\n  public void testPrepareCommitRollback() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setPreventDoubleWrite(false);\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(5))\n    );\n    writer.commit();\n\n    for (int i = 0; i < 23; i++)\n      TestIndexWriter.addDoc(writer);\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n\n    writer.prepareCommit();\n\n    IndexReader reader2 = DirectoryReader.open(dir);\n    assertEquals(0, reader2.numDocs());\n\n    writer.rollback();\n\n    IndexReader reader3 = DirectoryReader.openIfChanged(reader);\n    assertNull(reader3);\n    assertEquals(0, reader.numDocs());\n    assertEquals(0, reader2.numDocs());\n    reader.close();\n    reader2.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for (int i = 0; i < 17; i++)\n      TestIndexWriter.addDoc(writer);\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.prepareCommit();\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.commit();\n    reader = DirectoryReader.open(dir);\n    assertEquals(17, reader.numDocs());\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testPrepareCommitRollback().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testPrepareCommitRollback().mjava","sourceNew":"  // LUCENE-1274: test writer.prepareCommit()\n  public void testPrepareCommitRollback() throws IOException {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(5))\n    );\n    writer.commit();\n\n    for (int i = 0; i < 23; i++)\n      TestIndexWriter.addDoc(writer);\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n\n    writer.prepareCommit();\n\n    IndexReader reader2 = DirectoryReader.open(dir);\n    assertEquals(0, reader2.numDocs());\n\n    writer.rollback();\n\n    IndexReader reader3 = DirectoryReader.openIfChanged(reader);\n    assertNull(reader3);\n    assertEquals(0, reader.numDocs());\n    assertEquals(0, reader2.numDocs());\n    reader.close();\n    reader2.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for (int i = 0; i < 17; i++)\n      TestIndexWriter.addDoc(writer);\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.prepareCommit();\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.commit();\n    reader = DirectoryReader.open(dir);\n    assertEquals(17, reader.numDocs());\n    reader.close();\n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1274: test writer.prepareCommit()\n  public void testPrepareCommitRollback() throws IOException {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(5))\n    );\n    writer.commit();\n\n    for (int i = 0; i < 23; i++)\n      TestIndexWriter.addDoc(writer);\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n\n    writer.prepareCommit();\n\n    IndexReader reader2 = DirectoryReader.open(dir);\n    assertEquals(0, reader2.numDocs());\n\n    writer.rollback();\n\n    IndexReader reader3 = DirectoryReader.openIfChanged(reader);\n    assertNull(reader3);\n    assertEquals(0, reader.numDocs());\n    assertEquals(0, reader2.numDocs());\n    reader.close();\n    reader2.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for (int i = 0; i < 17; i++)\n      TestIndexWriter.addDoc(writer);\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.prepareCommit();\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.commit();\n    reader = DirectoryReader.open(dir);\n    assertEquals(17, reader.numDocs());\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testPrepareCommitRollback().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testPrepareCommitRollback().mjava","sourceNew":"  // LUCENE-1274: test writer.prepareCommit()\n  public void testPrepareCommitRollback() throws IOException {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(2)\n            .setMergePolicy(newLogMergePolicy(5))\n    );\n    writer.commit();\n\n    for (int i = 0; i < 23; i++)\n      TestIndexWriter.addDoc(writer);\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n\n    writer.prepareCommit();\n\n    IndexReader reader2 = DirectoryReader.open(dir);\n    assertEquals(0, reader2.numDocs());\n\n    writer.rollback();\n\n    IndexReader reader3 = DirectoryReader.openIfChanged(reader);\n    assertNull(reader3);\n    assertEquals(0, reader.numDocs());\n    assertEquals(0, reader2.numDocs());\n    reader.close();\n    reader2.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    for (int i = 0; i < 17; i++)\n      TestIndexWriter.addDoc(writer);\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.prepareCommit();\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.commit();\n    reader = DirectoryReader.open(dir);\n    assertEquals(17, reader.numDocs());\n    reader.close();\n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1274: test writer.prepareCommit()\n  public void testPrepareCommitRollback() throws IOException {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(5))\n    );\n    writer.commit();\n\n    for (int i = 0; i < 23; i++)\n      TestIndexWriter.addDoc(writer);\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n\n    writer.prepareCommit();\n\n    IndexReader reader2 = DirectoryReader.open(dir);\n    assertEquals(0, reader2.numDocs());\n\n    writer.rollback();\n\n    IndexReader reader3 = DirectoryReader.openIfChanged(reader);\n    assertNull(reader3);\n    assertEquals(0, reader.numDocs());\n    assertEquals(0, reader2.numDocs());\n    reader.close();\n    reader2.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for (int i = 0; i < 17; i++)\n      TestIndexWriter.addDoc(writer);\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.prepareCommit();\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.commit();\n    reader = DirectoryReader.open(dir);\n    assertEquals(17, reader.numDocs());\n    reader.close();\n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testPrepareCommitRollback().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testPrepareCommitRollback().mjava","sourceNew":"  // LUCENE-1274: test writer.prepareCommit()\n  public void testPrepareCommitRollback() throws IOException {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(2)\n            .setMergePolicy(newLogMergePolicy(5))\n    );\n    writer.commit();\n\n    for (int i = 0; i < 23; i++)\n      TestIndexWriter.addDoc(writer);\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n\n    writer.prepareCommit();\n\n    IndexReader reader2 = DirectoryReader.open(dir);\n    assertEquals(0, reader2.numDocs());\n\n    writer.rollback();\n\n    IndexReader reader3 = DirectoryReader.openIfChanged(reader);\n    assertNull(reader3);\n    assertEquals(0, reader.numDocs());\n    assertEquals(0, reader2.numDocs());\n    reader.close();\n    reader2.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    for (int i = 0; i < 17; i++)\n      TestIndexWriter.addDoc(writer);\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.prepareCommit();\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.commit();\n    reader = DirectoryReader.open(dir);\n    assertEquals(17, reader.numDocs());\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1274: test writer.prepareCommit()\n  public void testPrepareCommitRollback() throws IOException {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(2)\n            .setMergePolicy(newLogMergePolicy(5))\n    );\n    writer.commit();\n\n    for (int i = 0; i < 23; i++)\n      TestIndexWriter.addDoc(writer);\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n\n    writer.prepareCommit();\n\n    IndexReader reader2 = DirectoryReader.open(dir);\n    assertEquals(0, reader2.numDocs());\n\n    writer.rollback();\n\n    IndexReader reader3 = DirectoryReader.openIfChanged(reader);\n    assertNull(reader3);\n    assertEquals(0, reader.numDocs());\n    assertEquals(0, reader2.numDocs());\n    reader.close();\n    reader2.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    for (int i = 0; i < 17; i++)\n      TestIndexWriter.addDoc(writer);\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.prepareCommit();\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.commit();\n    reader = DirectoryReader.open(dir);\n    assertEquals(17, reader.numDocs());\n    reader.close();\n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","date":1409346855,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testPrepareCommitRollback().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testPrepareCommitRollback().mjava","sourceNew":"  // LUCENE-1274: test writer.prepareCommit()\n  public void testPrepareCommitRollback() throws IOException {\n    Directory dir = newDirectory();\n\n    MockDirectoryWrapper mockDir;\n    if (dir instanceof MockDirectoryWrapper) {\n      mockDir = (MockDirectoryWrapper) dir;\n      mockDir.setPreventDoubleWrite(false);\n    } else {\n      mockDir = null;\n    }\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(2)\n            .setMergePolicy(newLogMergePolicy(5))\n    );\n    writer.commit();\n\n    for (int i = 0; i < 23; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n\n    writer.prepareCommit();\n\n    IndexReader reader2 = DirectoryReader.open(dir);\n    assertEquals(0, reader2.numDocs());\n\n    // We need to let IW delete the partial segments_N that was written in prepareCommit, else we get a false fail below:\n    if (mockDir != null) {\n      mockDir.setEnableVirusScanner(false);\n    }\n    writer.rollback();\n    if (mockDir != null) {\n      mockDir.setEnableVirusScanner(true);\n    }\n\n    IndexReader reader3 = DirectoryReader.openIfChanged(reader);\n    assertNull(reader3);\n    assertEquals(0, reader.numDocs());\n    assertEquals(0, reader2.numDocs());\n    reader.close();\n    reader2.close();\n\n    // System.out.println(\"TEST: after rollback: \" + Arrays.toString(dir.listAll()));\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    for (int i = 0; i < 17; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.prepareCommit();\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.commit();\n    reader = DirectoryReader.open(dir);\n    assertEquals(17, reader.numDocs());\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1274: test writer.prepareCommit()\n  public void testPrepareCommitRollback() throws IOException {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(2)\n            .setMergePolicy(newLogMergePolicy(5))\n    );\n    writer.commit();\n\n    for (int i = 0; i < 23; i++)\n      TestIndexWriter.addDoc(writer);\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n\n    writer.prepareCommit();\n\n    IndexReader reader2 = DirectoryReader.open(dir);\n    assertEquals(0, reader2.numDocs());\n\n    writer.rollback();\n\n    IndexReader reader3 = DirectoryReader.openIfChanged(reader);\n    assertNull(reader3);\n    assertEquals(0, reader.numDocs());\n    assertEquals(0, reader2.numDocs());\n    reader.close();\n    reader2.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    for (int i = 0; i < 17; i++)\n      TestIndexWriter.addDoc(writer);\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.prepareCommit();\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.commit();\n    reader = DirectoryReader.open(dir);\n    assertEquals(17, reader.numDocs());\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["11c6df42fb3eba174c3ca0d9a5194eaecd893b77"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testPrepareCommitRollback().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testPrepareCommitRollback().mjava","sourceNew":"  // LUCENE-1274: test writer.prepareCommit()\n  public void testPrepareCommitRollback() throws IOException {\n    Directory dir = newDirectory();\n\n    MockDirectoryWrapper mockDir;\n    if (dir instanceof MockDirectoryWrapper) {\n      mockDir = (MockDirectoryWrapper) dir;\n      mockDir.setPreventDoubleWrite(false);\n    } else {\n      mockDir = null;\n    }\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(2)\n            .setMergePolicy(newLogMergePolicy(5))\n    );\n    writer.commit();\n\n    for (int i = 0; i < 23; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n\n    writer.prepareCommit();\n\n    IndexReader reader2 = DirectoryReader.open(dir);\n    assertEquals(0, reader2.numDocs());\n\n    writer.rollback();\n\n    IndexReader reader3 = DirectoryReader.openIfChanged(reader);\n    assertNull(reader3);\n    assertEquals(0, reader.numDocs());\n    assertEquals(0, reader2.numDocs());\n    reader.close();\n    reader2.close();\n\n    // System.out.println(\"TEST: after rollback: \" + Arrays.toString(dir.listAll()));\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    for (int i = 0; i < 17; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.prepareCommit();\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.commit();\n    reader = DirectoryReader.open(dir);\n    assertEquals(17, reader.numDocs());\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1274: test writer.prepareCommit()\n  public void testPrepareCommitRollback() throws IOException {\n    Directory dir = newDirectory();\n\n    MockDirectoryWrapper mockDir;\n    if (dir instanceof MockDirectoryWrapper) {\n      mockDir = (MockDirectoryWrapper) dir;\n      mockDir.setPreventDoubleWrite(false);\n    } else {\n      mockDir = null;\n    }\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(2)\n            .setMergePolicy(newLogMergePolicy(5))\n    );\n    writer.commit();\n\n    for (int i = 0; i < 23; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n\n    writer.prepareCommit();\n\n    IndexReader reader2 = DirectoryReader.open(dir);\n    assertEquals(0, reader2.numDocs());\n\n    // We need to let IW delete the partial segments_N that was written in prepareCommit, else we get a false fail below:\n    if (mockDir != null) {\n      mockDir.setEnableVirusScanner(false);\n    }\n    writer.rollback();\n    if (mockDir != null) {\n      mockDir.setEnableVirusScanner(true);\n    }\n\n    IndexReader reader3 = DirectoryReader.openIfChanged(reader);\n    assertNull(reader3);\n    assertEquals(0, reader.numDocs());\n    assertEquals(0, reader2.numDocs());\n    reader.close();\n    reader2.close();\n\n    // System.out.println(\"TEST: after rollback: \" + Arrays.toString(dir.listAll()));\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    for (int i = 0; i < 17; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.prepareCommit();\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.commit();\n    reader = DirectoryReader.open(dir);\n    assertEquals(17, reader.numDocs());\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testPrepareCommitRollback().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testPrepareCommitRollback().mjava","sourceNew":"  // LUCENE-1274: test writer.prepareCommit()\n  public void testPrepareCommitRollback() throws IOException {\n    Directory dir = newDirectory();\n\n    MockDirectoryWrapper mockDir;\n    if (dir instanceof MockDirectoryWrapper) {\n      mockDir = (MockDirectoryWrapper) dir;\n      mockDir.setPreventDoubleWrite(false);\n    } else {\n      mockDir = null;\n    }\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(2)\n            .setMergePolicy(newLogMergePolicy(5))\n    );\n    writer.commit();\n\n    for (int i = 0; i < 23; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n\n    writer.prepareCommit();\n\n    IndexReader reader2 = DirectoryReader.open(dir);\n    assertEquals(0, reader2.numDocs());\n\n    writer.rollback();\n\n    IndexReader reader3 = DirectoryReader.openIfChanged(reader);\n    assertNull(reader3);\n    assertEquals(0, reader.numDocs());\n    assertEquals(0, reader2.numDocs());\n    reader.close();\n    reader2.close();\n\n    // System.out.println(\"TEST: after rollback: \" + Arrays.toString(dir.listAll()));\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    for (int i = 0; i < 17; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.prepareCommit();\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.commit();\n    reader = DirectoryReader.open(dir);\n    assertEquals(17, reader.numDocs());\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1274: test writer.prepareCommit()\n  public void testPrepareCommitRollback() throws IOException {\n    Directory dir = newDirectory();\n\n    MockDirectoryWrapper mockDir;\n    if (dir instanceof MockDirectoryWrapper) {\n      mockDir = (MockDirectoryWrapper) dir;\n      mockDir.setPreventDoubleWrite(false);\n    } else {\n      mockDir = null;\n    }\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(2)\n            .setMergePolicy(newLogMergePolicy(5))\n    );\n    writer.commit();\n\n    for (int i = 0; i < 23; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n\n    writer.prepareCommit();\n\n    IndexReader reader2 = DirectoryReader.open(dir);\n    assertEquals(0, reader2.numDocs());\n\n    // We need to let IW delete the partial segments_N that was written in prepareCommit, else we get a false fail below:\n    if (mockDir != null) {\n      mockDir.setEnableVirusScanner(false);\n    }\n    writer.rollback();\n    if (mockDir != null) {\n      mockDir.setEnableVirusScanner(true);\n    }\n\n    IndexReader reader3 = DirectoryReader.openIfChanged(reader);\n    assertNull(reader3);\n    assertEquals(0, reader.numDocs());\n    assertEquals(0, reader2.numDocs());\n    reader.close();\n    reader2.close();\n\n    // System.out.println(\"TEST: after rollback: \" + Arrays.toString(dir.listAll()));\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    for (int i = 0; i < 17; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.prepareCommit();\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.commit();\n    reader = DirectoryReader.open(dir);\n    assertEquals(17, reader.numDocs());\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testPrepareCommitRollback().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testPrepareCommitRollback().mjava","sourceNew":"  // LUCENE-1274: test writer.prepareCommit()\n  public void testPrepareCommitRollback() throws IOException {\n    Directory dir = newDirectory();\n\n    MockDirectoryWrapper mockDir;\n    if (dir instanceof MockDirectoryWrapper) {\n      mockDir = (MockDirectoryWrapper) dir;\n      mockDir.setPreventDoubleWrite(false);\n    } else {\n      mockDir = null;\n    }\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(2)\n            .setMergePolicy(newLogMergePolicy(5))\n    );\n    writer.commit();\n\n    for (int i = 0; i < 23; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n\n    writer.prepareCommit();\n\n    IndexReader reader2 = DirectoryReader.open(dir);\n    assertEquals(0, reader2.numDocs());\n\n    writer.rollback();\n\n    IndexReader reader3 = DirectoryReader.openIfChanged(reader);\n    assertNull(reader3);\n    assertEquals(0, reader.numDocs());\n    assertEquals(0, reader2.numDocs());\n    reader.close();\n    reader2.close();\n\n    // System.out.println(\"TEST: after rollback: \" + Arrays.toString(dir.listAll()));\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    for (int i = 0; i < 17; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.prepareCommit();\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.commit();\n    reader = DirectoryReader.open(dir);\n    assertEquals(17, reader.numDocs());\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1274: test writer.prepareCommit()\n  public void testPrepareCommitRollback() throws IOException {\n    Directory dir = newDirectory();\n\n    MockDirectoryWrapper mockDir;\n    if (dir instanceof MockDirectoryWrapper) {\n      mockDir = (MockDirectoryWrapper) dir;\n      mockDir.setPreventDoubleWrite(false);\n    } else {\n      mockDir = null;\n    }\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(2)\n            .setMergePolicy(newLogMergePolicy(5))\n    );\n    writer.commit();\n\n    for (int i = 0; i < 23; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n\n    writer.prepareCommit();\n\n    IndexReader reader2 = DirectoryReader.open(dir);\n    assertEquals(0, reader2.numDocs());\n\n    // We need to let IW delete the partial segments_N that was written in prepareCommit, else we get a false fail below:\n    if (mockDir != null) {\n      mockDir.setEnableVirusScanner(false);\n    }\n    writer.rollback();\n    if (mockDir != null) {\n      mockDir.setEnableVirusScanner(true);\n    }\n\n    IndexReader reader3 = DirectoryReader.openIfChanged(reader);\n    assertNull(reader3);\n    assertEquals(0, reader.numDocs());\n    assertEquals(0, reader2.numDocs());\n    reader.close();\n    reader2.close();\n\n    // System.out.println(\"TEST: after rollback: \" + Arrays.toString(dir.listAll()));\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    for (int i = 0; i < 17; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.prepareCommit();\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.commit();\n    reader = DirectoryReader.open(dir);\n    assertEquals(17, reader.numDocs());\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testPrepareCommitRollback().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testPrepareCommitRollback().mjava","sourceNew":"  // LUCENE-1274: test writer.prepareCommit()\n  public void testPrepareCommitRollback() throws IOException {\n    Directory dir = newDirectory();\n\n    MockDirectoryWrapper mockDir;\n    if (dir instanceof MockDirectoryWrapper) {\n      mockDir = (MockDirectoryWrapper) dir;\n      mockDir.setPreventDoubleWrite(false);\n    } else {\n      mockDir = null;\n    }\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(2)\n            .setMergePolicy(newLogMergePolicy(5))\n    );\n    writer.commit();\n\n    for (int i = 0; i < 23; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n\n    writer.prepareCommit();\n\n    IndexReader reader2 = DirectoryReader.open(dir);\n    assertEquals(0, reader2.numDocs());\n\n    writer.rollback();\n\n    IndexReader reader3 = DirectoryReader.openIfChanged(reader);\n    assertNull(reader3);\n    assertEquals(0, reader.numDocs());\n    assertEquals(0, reader2.numDocs());\n    reader.close();\n    reader2.close();\n\n    // System.out.println(\"TEST: after rollback: \" + Arrays.toString(dir.listAll()));\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    for (int i = 0; i < 17; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.prepareCommit();\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.commit();\n    reader = DirectoryReader.open(dir);\n    assertEquals(17, reader.numDocs());\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1274: test writer.prepareCommit()\n  public void testPrepareCommitRollback() throws IOException {\n    Directory dir = newDirectory();\n\n    MockDirectoryWrapper mockDir;\n    if (dir instanceof MockDirectoryWrapper) {\n      mockDir = (MockDirectoryWrapper) dir;\n      mockDir.setPreventDoubleWrite(false);\n    } else {\n      mockDir = null;\n    }\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(2)\n            .setMergePolicy(newLogMergePolicy(5))\n    );\n    writer.commit();\n\n    for (int i = 0; i < 23; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n\n    writer.prepareCommit();\n\n    IndexReader reader2 = DirectoryReader.open(dir);\n    assertEquals(0, reader2.numDocs());\n\n    // We need to let IW delete the partial segments_N that was written in prepareCommit, else we get a false fail below:\n    if (mockDir != null) {\n      mockDir.setEnableVirusScanner(false);\n    }\n    writer.rollback();\n    if (mockDir != null) {\n      mockDir.setEnableVirusScanner(true);\n    }\n\n    IndexReader reader3 = DirectoryReader.openIfChanged(reader);\n    assertNull(reader3);\n    assertEquals(0, reader.numDocs());\n    assertEquals(0, reader2.numDocs());\n    reader.close();\n    reader2.close();\n\n    // System.out.println(\"TEST: after rollback: \" + Arrays.toString(dir.listAll()));\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    for (int i = 0; i < 17; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.prepareCommit();\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.commit();\n    reader = DirectoryReader.open(dir);\n    assertEquals(17, reader.numDocs());\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"11c6df42fb3eba174c3ca0d9a5194eaecd893b77","date":1465931757,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testPrepareCommitRollback().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testPrepareCommitRollback().mjava","sourceNew":"  // LUCENE-1274: test writer.prepareCommit()\n  public void testPrepareCommitRollback() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(2)\n            .setMergePolicy(newLogMergePolicy(5))\n    );\n    writer.commit();\n\n    for (int i = 0; i < 23; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n\n    writer.prepareCommit();\n\n    IndexReader reader2 = DirectoryReader.open(dir);\n    assertEquals(0, reader2.numDocs());\n\n    writer.rollback();\n\n    IndexReader reader3 = DirectoryReader.openIfChanged(reader);\n    assertNull(reader3);\n    assertEquals(0, reader.numDocs());\n    assertEquals(0, reader2.numDocs());\n    reader.close();\n    reader2.close();\n\n    // System.out.println(\"TEST: after rollback: \" + Arrays.toString(dir.listAll()));\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    for (int i = 0; i < 17; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.prepareCommit();\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.commit();\n    reader = DirectoryReader.open(dir);\n    assertEquals(17, reader.numDocs());\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1274: test writer.prepareCommit()\n  public void testPrepareCommitRollback() throws IOException {\n    Directory dir = newDirectory();\n\n    MockDirectoryWrapper mockDir;\n    if (dir instanceof MockDirectoryWrapper) {\n      mockDir = (MockDirectoryWrapper) dir;\n      mockDir.setPreventDoubleWrite(false);\n    } else {\n      mockDir = null;\n    }\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(2)\n            .setMergePolicy(newLogMergePolicy(5))\n    );\n    writer.commit();\n\n    for (int i = 0; i < 23; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n\n    writer.prepareCommit();\n\n    IndexReader reader2 = DirectoryReader.open(dir);\n    assertEquals(0, reader2.numDocs());\n\n    writer.rollback();\n\n    IndexReader reader3 = DirectoryReader.openIfChanged(reader);\n    assertNull(reader3);\n    assertEquals(0, reader.numDocs());\n    assertEquals(0, reader2.numDocs());\n    reader.close();\n    reader2.close();\n\n    // System.out.println(\"TEST: after rollback: \" + Arrays.toString(dir.listAll()));\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    for (int i = 0; i < 17; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.prepareCommit();\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.commit();\n    reader = DirectoryReader.open(dir);\n    assertEquals(17, reader.numDocs());\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","d19974432be9aed28ee7dca73bdf01d139e763a9","455aeff4fef915340c5b19d71d5e147034e83093"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testPrepareCommitRollback().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testPrepareCommitRollback().mjava","sourceNew":"  // LUCENE-1274: test writer.prepareCommit()\n  public void testPrepareCommitRollback() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(2)\n            .setMergePolicy(newLogMergePolicy(5))\n    );\n    writer.commit();\n\n    for (int i = 0; i < 23; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n\n    writer.prepareCommit();\n\n    IndexReader reader2 = DirectoryReader.open(dir);\n    assertEquals(0, reader2.numDocs());\n\n    writer.rollback();\n\n    IndexReader reader3 = DirectoryReader.openIfChanged(reader);\n    assertNull(reader3);\n    assertEquals(0, reader.numDocs());\n    assertEquals(0, reader2.numDocs());\n    reader.close();\n    reader2.close();\n\n    // System.out.println(\"TEST: after rollback: \" + Arrays.toString(dir.listAll()));\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    for (int i = 0; i < 17; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.prepareCommit();\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.commit();\n    reader = DirectoryReader.open(dir);\n    assertEquals(17, reader.numDocs());\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1274: test writer.prepareCommit()\n  public void testPrepareCommitRollback() throws IOException {\n    Directory dir = newDirectory();\n\n    MockDirectoryWrapper mockDir;\n    if (dir instanceof MockDirectoryWrapper) {\n      mockDir = (MockDirectoryWrapper) dir;\n      mockDir.setPreventDoubleWrite(false);\n    } else {\n      mockDir = null;\n    }\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(2)\n            .setMergePolicy(newLogMergePolicy(5))\n    );\n    writer.commit();\n\n    for (int i = 0; i < 23; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n\n    writer.prepareCommit();\n\n    IndexReader reader2 = DirectoryReader.open(dir);\n    assertEquals(0, reader2.numDocs());\n\n    writer.rollback();\n\n    IndexReader reader3 = DirectoryReader.openIfChanged(reader);\n    assertNull(reader3);\n    assertEquals(0, reader.numDocs());\n    assertEquals(0, reader2.numDocs());\n    reader.close();\n    reader2.close();\n\n    // System.out.println(\"TEST: after rollback: \" + Arrays.toString(dir.listAll()));\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    for (int i = 0; i < 17; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.prepareCommit();\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n    writer.commit();\n    reader = DirectoryReader.open(dir);\n    assertEquals(17, reader.numDocs());\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a207d19eac354d649c3f0e2cce070017c78125e":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","b470f36a9372c97283360b1304eacbde22df6c0d"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","b470f36a9372c97283360b1304eacbde22df6c0d"],"11c6df42fb3eba174c3ca0d9a5194eaecd893b77":["5a207d19eac354d649c3f0e2cce070017c78125e"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5a207d19eac354d649c3f0e2cce070017c78125e","11c6df42fb3eba174c3ca0d9a5194eaecd893b77"],"aba371508186796cc6151d8223a5b4e16d02e26e":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","d19974432be9aed28ee7dca73bdf01d139e763a9"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"b470f36a9372c97283360b1304eacbde22df6c0d":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","d19974432be9aed28ee7dca73bdf01d139e763a9"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["11c6df42fb3eba174c3ca0d9a5194eaecd893b77"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"5a207d19eac354d649c3f0e2cce070017c78125e":["11c6df42fb3eba174c3ca0d9a5194eaecd893b77","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b470f36a9372c97283360b1304eacbde22df6c0d","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"11c6df42fb3eba174c3ca0d9a5194eaecd893b77":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["aba371508186796cc6151d8223a5b4e16d02e26e","d19974432be9aed28ee7dca73bdf01d139e763a9","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["aba371508186796cc6151d8223a5b4e16d02e26e","ae14298f4eec6d5faee6a149f88ba57d14a6f21a","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["b470f36a9372c97283360b1304eacbde22df6c0d"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}