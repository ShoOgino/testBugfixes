{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/minhash/MinHashFilter#murmurhash3_x64_128(byte[],int,int,int,LongPair).mjava","commits":[{"id":"af241f05539d0b41cd28a8051ad03e3d7fb051cf","date":1465897793,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/minhash/MinHashFilter#murmurhash3_x64_128(byte[],int,int,int,LongPair).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the MurmurHash3_x64_128 hash, placing the result in \"out\". */\n  static void murmurhash3_x64_128(byte[] key, int offset, int len, int seed, LongPair out) {\n    // The original algorithm does have a 32 bit unsigned seed.\n    // We have to mask to match the behavior of the unsigned types and prevent sign extension.\n    long h1 = seed & 0x00000000FFFFFFFFL;\n    long h2 = seed & 0x00000000FFFFFFFFL;\n\n    final long c1 = 0x87c37b91114253d5L;\n    final long c2 = 0x4cf5ad432745937fL;\n\n    int roundedEnd = offset + (len & 0xFFFFFFF0); // round down to 16 byte block\n    for (int i = offset; i < roundedEnd; i += 16) {\n      long k1 = getLongLittleEndian(key, i);\n      long k2 = getLongLittleEndian(key, i + 8);\n      k1 *= c1;\n      k1 = Long.rotateLeft(k1, 31);\n      k1 *= c2;\n      h1 ^= k1;\n      h1 = Long.rotateLeft(h1, 27);\n      h1 += h2;\n      h1 = h1 * 5 + 0x52dce729;\n      k2 *= c2;\n      k2 = Long.rotateLeft(k2, 33);\n      k2 *= c1;\n      h2 ^= k2;\n      h2 = Long.rotateLeft(h2, 31);\n      h2 += h1;\n      h2 = h2 * 5 + 0x38495ab5;\n    }\n\n    long k1 = 0;\n    long k2 = 0;\n\n    switch (len & 15) {\n      case 15:\n        k2 = (key[roundedEnd + 14] & 0xffL) << 48;\n      case 14:\n        k2 |= (key[roundedEnd + 13] & 0xffL) << 40;\n      case 13:\n        k2 |= (key[roundedEnd + 12] & 0xffL) << 32;\n      case 12:\n        k2 |= (key[roundedEnd + 11] & 0xffL) << 24;\n      case 11:\n        k2 |= (key[roundedEnd + 10] & 0xffL) << 16;\n      case 10:\n        k2 |= (key[roundedEnd + 9] & 0xffL) << 8;\n      case 9:\n        k2 |= (key[roundedEnd + 8] & 0xffL);\n        k2 *= c2;\n        k2 = Long.rotateLeft(k2, 33);\n        k2 *= c1;\n        h2 ^= k2;\n      case 8:\n        k1 = ((long) key[roundedEnd + 7]) << 56;\n      case 7:\n        k1 |= (key[roundedEnd + 6] & 0xffL) << 48;\n      case 6:\n        k1 |= (key[roundedEnd + 5] & 0xffL) << 40;\n      case 5:\n        k1 |= (key[roundedEnd + 4] & 0xffL) << 32;\n      case 4:\n        k1 |= (key[roundedEnd + 3] & 0xffL) << 24;\n      case 3:\n        k1 |= (key[roundedEnd + 2] & 0xffL) << 16;\n      case 2:\n        k1 |= (key[roundedEnd + 1] & 0xffL) << 8;\n      case 1:\n        k1 |= (key[roundedEnd] & 0xffL);\n        k1 *= c1;\n        k1 = Long.rotateLeft(k1, 31);\n        k1 *= c2;\n        h1 ^= k1;\n    }\n\n    // ----------\n    // finalization\n\n    h1 ^= len;\n    h2 ^= len;\n\n    h1 += h2;\n    h2 += h1;\n\n    h1 = fmix64(h1);\n    h2 = fmix64(h2);\n\n    h1 += h2;\n    h2 += h1;\n\n    out.val1 = h1;\n    out.val2 = h2;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","date":1465913303,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/minhash/MinHashFilter#murmurhash3_x64_128(byte[],int,int,int,LongPair).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the MurmurHash3_x64_128 hash, placing the result in \"out\". */\n  static void murmurhash3_x64_128(byte[] key, int offset, int len, int seed, LongPair out) {\n    // The original algorithm does have a 32 bit unsigned seed.\n    // We have to mask to match the behavior of the unsigned types and prevent sign extension.\n    long h1 = seed & 0x00000000FFFFFFFFL;\n    long h2 = seed & 0x00000000FFFFFFFFL;\n\n    final long c1 = 0x87c37b91114253d5L;\n    final long c2 = 0x4cf5ad432745937fL;\n\n    int roundedEnd = offset + (len & 0xFFFFFFF0); // round down to 16 byte block\n    for (int i = offset; i < roundedEnd; i += 16) {\n      long k1 = getLongLittleEndian(key, i);\n      long k2 = getLongLittleEndian(key, i + 8);\n      k1 *= c1;\n      k1 = Long.rotateLeft(k1, 31);\n      k1 *= c2;\n      h1 ^= k1;\n      h1 = Long.rotateLeft(h1, 27);\n      h1 += h2;\n      h1 = h1 * 5 + 0x52dce729;\n      k2 *= c2;\n      k2 = Long.rotateLeft(k2, 33);\n      k2 *= c1;\n      h2 ^= k2;\n      h2 = Long.rotateLeft(h2, 31);\n      h2 += h1;\n      h2 = h2 * 5 + 0x38495ab5;\n    }\n\n    long k1 = 0;\n    long k2 = 0;\n\n    switch (len & 15) {\n      case 15:\n        k2 = (key[roundedEnd + 14] & 0xffL) << 48;\n      case 14:\n        k2 |= (key[roundedEnd + 13] & 0xffL) << 40;\n      case 13:\n        k2 |= (key[roundedEnd + 12] & 0xffL) << 32;\n      case 12:\n        k2 |= (key[roundedEnd + 11] & 0xffL) << 24;\n      case 11:\n        k2 |= (key[roundedEnd + 10] & 0xffL) << 16;\n      case 10:\n        k2 |= (key[roundedEnd + 9] & 0xffL) << 8;\n      case 9:\n        k2 |= (key[roundedEnd + 8] & 0xffL);\n        k2 *= c2;\n        k2 = Long.rotateLeft(k2, 33);\n        k2 *= c1;\n        h2 ^= k2;\n      case 8:\n        k1 = ((long) key[roundedEnd + 7]) << 56;\n      case 7:\n        k1 |= (key[roundedEnd + 6] & 0xffL) << 48;\n      case 6:\n        k1 |= (key[roundedEnd + 5] & 0xffL) << 40;\n      case 5:\n        k1 |= (key[roundedEnd + 4] & 0xffL) << 32;\n      case 4:\n        k1 |= (key[roundedEnd + 3] & 0xffL) << 24;\n      case 3:\n        k1 |= (key[roundedEnd + 2] & 0xffL) << 16;\n      case 2:\n        k1 |= (key[roundedEnd + 1] & 0xffL) << 8;\n      case 1:\n        k1 |= (key[roundedEnd] & 0xffL);\n        k1 *= c1;\n        k1 = Long.rotateLeft(k1, 31);\n        k1 *= c2;\n        h1 ^= k1;\n    }\n\n    // ----------\n    // finalization\n\n    h1 ^= len;\n    h2 ^= len;\n\n    h1 += h2;\n    h2 += h1;\n\n    h1 = fmix64(h1);\n    h2 = fmix64(h2);\n\n    h1 += h2;\n    h2 += h1;\n\n    out.val1 = h1;\n    out.val2 = h2;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"312a0b611c541cff282471c71aaec297f3fbd8d4","date":1469697694,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/minhash/MinHashFilter#murmurhash3_x64_128(byte[],int,int,int,LongPair).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/minhash/MinHashFilter#murmurhash3_x64_128(byte[],int,int,int,LongPair).mjava","sourceNew":"  /** Returns the MurmurHash3_x64_128 hash, placing the result in \"out\". */\n  @SuppressWarnings(\"fallthrough\") // the huge switch is designed to use fall through into cases!\n  static void murmurhash3_x64_128(byte[] key, int offset, int len, int seed, LongPair out) {\n    // The original algorithm does have a 32 bit unsigned seed.\n    // We have to mask to match the behavior of the unsigned types and prevent sign extension.\n    long h1 = seed & 0x00000000FFFFFFFFL;\n    long h2 = seed & 0x00000000FFFFFFFFL;\n\n    final long c1 = 0x87c37b91114253d5L;\n    final long c2 = 0x4cf5ad432745937fL;\n\n    int roundedEnd = offset + (len & 0xFFFFFFF0); // round down to 16 byte block\n    for (int i = offset; i < roundedEnd; i += 16) {\n      long k1 = getLongLittleEndian(key, i);\n      long k2 = getLongLittleEndian(key, i + 8);\n      k1 *= c1;\n      k1 = Long.rotateLeft(k1, 31);\n      k1 *= c2;\n      h1 ^= k1;\n      h1 = Long.rotateLeft(h1, 27);\n      h1 += h2;\n      h1 = h1 * 5 + 0x52dce729;\n      k2 *= c2;\n      k2 = Long.rotateLeft(k2, 33);\n      k2 *= c1;\n      h2 ^= k2;\n      h2 = Long.rotateLeft(h2, 31);\n      h2 += h1;\n      h2 = h2 * 5 + 0x38495ab5;\n    }\n\n    long k1 = 0;\n    long k2 = 0;\n\n    switch (len & 15) {\n      case 15:\n        k2 = (key[roundedEnd + 14] & 0xffL) << 48;\n      case 14:\n        k2 |= (key[roundedEnd + 13] & 0xffL) << 40;\n      case 13:\n        k2 |= (key[roundedEnd + 12] & 0xffL) << 32;\n      case 12:\n        k2 |= (key[roundedEnd + 11] & 0xffL) << 24;\n      case 11:\n        k2 |= (key[roundedEnd + 10] & 0xffL) << 16;\n      case 10:\n        k2 |= (key[roundedEnd + 9] & 0xffL) << 8;\n      case 9:\n        k2 |= (key[roundedEnd + 8] & 0xffL);\n        k2 *= c2;\n        k2 = Long.rotateLeft(k2, 33);\n        k2 *= c1;\n        h2 ^= k2;\n      case 8:\n        k1 = ((long) key[roundedEnd + 7]) << 56;\n      case 7:\n        k1 |= (key[roundedEnd + 6] & 0xffL) << 48;\n      case 6:\n        k1 |= (key[roundedEnd + 5] & 0xffL) << 40;\n      case 5:\n        k1 |= (key[roundedEnd + 4] & 0xffL) << 32;\n      case 4:\n        k1 |= (key[roundedEnd + 3] & 0xffL) << 24;\n      case 3:\n        k1 |= (key[roundedEnd + 2] & 0xffL) << 16;\n      case 2:\n        k1 |= (key[roundedEnd + 1] & 0xffL) << 8;\n      case 1:\n        k1 |= (key[roundedEnd] & 0xffL);\n        k1 *= c1;\n        k1 = Long.rotateLeft(k1, 31);\n        k1 *= c2;\n        h1 ^= k1;\n    }\n\n    // ----------\n    // finalization\n\n    h1 ^= len;\n    h2 ^= len;\n\n    h1 += h2;\n    h2 += h1;\n\n    h1 = fmix64(h1);\n    h2 = fmix64(h2);\n\n    h1 += h2;\n    h2 += h1;\n\n    out.val1 = h1;\n    out.val2 = h2;\n  }\n\n","sourceOld":"  /** Returns the MurmurHash3_x64_128 hash, placing the result in \"out\". */\n  static void murmurhash3_x64_128(byte[] key, int offset, int len, int seed, LongPair out) {\n    // The original algorithm does have a 32 bit unsigned seed.\n    // We have to mask to match the behavior of the unsigned types and prevent sign extension.\n    long h1 = seed & 0x00000000FFFFFFFFL;\n    long h2 = seed & 0x00000000FFFFFFFFL;\n\n    final long c1 = 0x87c37b91114253d5L;\n    final long c2 = 0x4cf5ad432745937fL;\n\n    int roundedEnd = offset + (len & 0xFFFFFFF0); // round down to 16 byte block\n    for (int i = offset; i < roundedEnd; i += 16) {\n      long k1 = getLongLittleEndian(key, i);\n      long k2 = getLongLittleEndian(key, i + 8);\n      k1 *= c1;\n      k1 = Long.rotateLeft(k1, 31);\n      k1 *= c2;\n      h1 ^= k1;\n      h1 = Long.rotateLeft(h1, 27);\n      h1 += h2;\n      h1 = h1 * 5 + 0x52dce729;\n      k2 *= c2;\n      k2 = Long.rotateLeft(k2, 33);\n      k2 *= c1;\n      h2 ^= k2;\n      h2 = Long.rotateLeft(h2, 31);\n      h2 += h1;\n      h2 = h2 * 5 + 0x38495ab5;\n    }\n\n    long k1 = 0;\n    long k2 = 0;\n\n    switch (len & 15) {\n      case 15:\n        k2 = (key[roundedEnd + 14] & 0xffL) << 48;\n      case 14:\n        k2 |= (key[roundedEnd + 13] & 0xffL) << 40;\n      case 13:\n        k2 |= (key[roundedEnd + 12] & 0xffL) << 32;\n      case 12:\n        k2 |= (key[roundedEnd + 11] & 0xffL) << 24;\n      case 11:\n        k2 |= (key[roundedEnd + 10] & 0xffL) << 16;\n      case 10:\n        k2 |= (key[roundedEnd + 9] & 0xffL) << 8;\n      case 9:\n        k2 |= (key[roundedEnd + 8] & 0xffL);\n        k2 *= c2;\n        k2 = Long.rotateLeft(k2, 33);\n        k2 *= c1;\n        h2 ^= k2;\n      case 8:\n        k1 = ((long) key[roundedEnd + 7]) << 56;\n      case 7:\n        k1 |= (key[roundedEnd + 6] & 0xffL) << 48;\n      case 6:\n        k1 |= (key[roundedEnd + 5] & 0xffL) << 40;\n      case 5:\n        k1 |= (key[roundedEnd + 4] & 0xffL) << 32;\n      case 4:\n        k1 |= (key[roundedEnd + 3] & 0xffL) << 24;\n      case 3:\n        k1 |= (key[roundedEnd + 2] & 0xffL) << 16;\n      case 2:\n        k1 |= (key[roundedEnd + 1] & 0xffL) << 8;\n      case 1:\n        k1 |= (key[roundedEnd] & 0xffL);\n        k1 *= c1;\n        k1 = Long.rotateLeft(k1, 31);\n        k1 *= c2;\n        h1 ^= k1;\n    }\n\n    // ----------\n    // finalization\n\n    h1 ^= len;\n    h2 ^= len;\n\n    h1 += h2;\n    h2 += h1;\n\n    h1 = fmix64(h1);\n    h2 = fmix64(h2);\n\n    h1 += h2;\n    h2 += h1;\n\n    out.val1 = h1;\n    out.val2 = h2;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/minhash/MinHashFilter#murmurhash3_x64_128(byte[],int,int,int,LongPair).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/minhash/MinHashFilter#murmurhash3_x64_128(byte[],int,int,int,LongPair).mjava","sourceNew":"  /** Returns the MurmurHash3_x64_128 hash, placing the result in \"out\". */\n  @SuppressWarnings(\"fallthrough\") // the huge switch is designed to use fall through into cases!\n  static void murmurhash3_x64_128(byte[] key, int offset, int len, int seed, LongPair out) {\n    // The original algorithm does have a 32 bit unsigned seed.\n    // We have to mask to match the behavior of the unsigned types and prevent sign extension.\n    long h1 = seed & 0x00000000FFFFFFFFL;\n    long h2 = seed & 0x00000000FFFFFFFFL;\n\n    final long c1 = 0x87c37b91114253d5L;\n    final long c2 = 0x4cf5ad432745937fL;\n\n    int roundedEnd = offset + (len & 0xFFFFFFF0); // round down to 16 byte block\n    for (int i = offset; i < roundedEnd; i += 16) {\n      long k1 = getLongLittleEndian(key, i);\n      long k2 = getLongLittleEndian(key, i + 8);\n      k1 *= c1;\n      k1 = Long.rotateLeft(k1, 31);\n      k1 *= c2;\n      h1 ^= k1;\n      h1 = Long.rotateLeft(h1, 27);\n      h1 += h2;\n      h1 = h1 * 5 + 0x52dce729;\n      k2 *= c2;\n      k2 = Long.rotateLeft(k2, 33);\n      k2 *= c1;\n      h2 ^= k2;\n      h2 = Long.rotateLeft(h2, 31);\n      h2 += h1;\n      h2 = h2 * 5 + 0x38495ab5;\n    }\n\n    long k1 = 0;\n    long k2 = 0;\n\n    switch (len & 15) {\n      case 15:\n        k2 = (key[roundedEnd + 14] & 0xffL) << 48;\n      case 14:\n        k2 |= (key[roundedEnd + 13] & 0xffL) << 40;\n      case 13:\n        k2 |= (key[roundedEnd + 12] & 0xffL) << 32;\n      case 12:\n        k2 |= (key[roundedEnd + 11] & 0xffL) << 24;\n      case 11:\n        k2 |= (key[roundedEnd + 10] & 0xffL) << 16;\n      case 10:\n        k2 |= (key[roundedEnd + 9] & 0xffL) << 8;\n      case 9:\n        k2 |= (key[roundedEnd + 8] & 0xffL);\n        k2 *= c2;\n        k2 = Long.rotateLeft(k2, 33);\n        k2 *= c1;\n        h2 ^= k2;\n      case 8:\n        k1 = ((long) key[roundedEnd + 7]) << 56;\n      case 7:\n        k1 |= (key[roundedEnd + 6] & 0xffL) << 48;\n      case 6:\n        k1 |= (key[roundedEnd + 5] & 0xffL) << 40;\n      case 5:\n        k1 |= (key[roundedEnd + 4] & 0xffL) << 32;\n      case 4:\n        k1 |= (key[roundedEnd + 3] & 0xffL) << 24;\n      case 3:\n        k1 |= (key[roundedEnd + 2] & 0xffL) << 16;\n      case 2:\n        k1 |= (key[roundedEnd + 1] & 0xffL) << 8;\n      case 1:\n        k1 |= (key[roundedEnd] & 0xffL);\n        k1 *= c1;\n        k1 = Long.rotateLeft(k1, 31);\n        k1 *= c2;\n        h1 ^= k1;\n    }\n\n    // ----------\n    // finalization\n\n    h1 ^= len;\n    h2 ^= len;\n\n    h1 += h2;\n    h2 += h1;\n\n    h1 = fmix64(h1);\n    h2 = fmix64(h2);\n\n    h1 += h2;\n    h2 += h1;\n\n    out.val1 = h1;\n    out.val2 = h2;\n  }\n\n","sourceOld":"  /** Returns the MurmurHash3_x64_128 hash, placing the result in \"out\". */\n  static void murmurhash3_x64_128(byte[] key, int offset, int len, int seed, LongPair out) {\n    // The original algorithm does have a 32 bit unsigned seed.\n    // We have to mask to match the behavior of the unsigned types and prevent sign extension.\n    long h1 = seed & 0x00000000FFFFFFFFL;\n    long h2 = seed & 0x00000000FFFFFFFFL;\n\n    final long c1 = 0x87c37b91114253d5L;\n    final long c2 = 0x4cf5ad432745937fL;\n\n    int roundedEnd = offset + (len & 0xFFFFFFF0); // round down to 16 byte block\n    for (int i = offset; i < roundedEnd; i += 16) {\n      long k1 = getLongLittleEndian(key, i);\n      long k2 = getLongLittleEndian(key, i + 8);\n      k1 *= c1;\n      k1 = Long.rotateLeft(k1, 31);\n      k1 *= c2;\n      h1 ^= k1;\n      h1 = Long.rotateLeft(h1, 27);\n      h1 += h2;\n      h1 = h1 * 5 + 0x52dce729;\n      k2 *= c2;\n      k2 = Long.rotateLeft(k2, 33);\n      k2 *= c1;\n      h2 ^= k2;\n      h2 = Long.rotateLeft(h2, 31);\n      h2 += h1;\n      h2 = h2 * 5 + 0x38495ab5;\n    }\n\n    long k1 = 0;\n    long k2 = 0;\n\n    switch (len & 15) {\n      case 15:\n        k2 = (key[roundedEnd + 14] & 0xffL) << 48;\n      case 14:\n        k2 |= (key[roundedEnd + 13] & 0xffL) << 40;\n      case 13:\n        k2 |= (key[roundedEnd + 12] & 0xffL) << 32;\n      case 12:\n        k2 |= (key[roundedEnd + 11] & 0xffL) << 24;\n      case 11:\n        k2 |= (key[roundedEnd + 10] & 0xffL) << 16;\n      case 10:\n        k2 |= (key[roundedEnd + 9] & 0xffL) << 8;\n      case 9:\n        k2 |= (key[roundedEnd + 8] & 0xffL);\n        k2 *= c2;\n        k2 = Long.rotateLeft(k2, 33);\n        k2 *= c1;\n        h2 ^= k2;\n      case 8:\n        k1 = ((long) key[roundedEnd + 7]) << 56;\n      case 7:\n        k1 |= (key[roundedEnd + 6] & 0xffL) << 48;\n      case 6:\n        k1 |= (key[roundedEnd + 5] & 0xffL) << 40;\n      case 5:\n        k1 |= (key[roundedEnd + 4] & 0xffL) << 32;\n      case 4:\n        k1 |= (key[roundedEnd + 3] & 0xffL) << 24;\n      case 3:\n        k1 |= (key[roundedEnd + 2] & 0xffL) << 16;\n      case 2:\n        k1 |= (key[roundedEnd + 1] & 0xffL) << 8;\n      case 1:\n        k1 |= (key[roundedEnd] & 0xffL);\n        k1 *= c1;\n        k1 = Long.rotateLeft(k1, 31);\n        k1 *= c2;\n        h1 ^= k1;\n    }\n\n    // ----------\n    // finalization\n\n    h1 ^= len;\n    h2 ^= len;\n\n    h1 += h2;\n    h2 += h1;\n\n    h1 = fmix64(h1);\n    h2 = fmix64(h2);\n\n    h1 += h2;\n    h2 += h1;\n\n    out.val1 = h1;\n    out.val2 = h2;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/minhash/MinHashFilter#murmurhash3_x64_128(byte[],int,int,int,LongPair).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the MurmurHash3_x64_128 hash, placing the result in \"out\". */\n  @SuppressWarnings(\"fallthrough\") // the huge switch is designed to use fall through into cases!\n  static void murmurhash3_x64_128(byte[] key, int offset, int len, int seed, LongPair out) {\n    // The original algorithm does have a 32 bit unsigned seed.\n    // We have to mask to match the behavior of the unsigned types and prevent sign extension.\n    long h1 = seed & 0x00000000FFFFFFFFL;\n    long h2 = seed & 0x00000000FFFFFFFFL;\n\n    final long c1 = 0x87c37b91114253d5L;\n    final long c2 = 0x4cf5ad432745937fL;\n\n    int roundedEnd = offset + (len & 0xFFFFFFF0); // round down to 16 byte block\n    for (int i = offset; i < roundedEnd; i += 16) {\n      long k1 = getLongLittleEndian(key, i);\n      long k2 = getLongLittleEndian(key, i + 8);\n      k1 *= c1;\n      k1 = Long.rotateLeft(k1, 31);\n      k1 *= c2;\n      h1 ^= k1;\n      h1 = Long.rotateLeft(h1, 27);\n      h1 += h2;\n      h1 = h1 * 5 + 0x52dce729;\n      k2 *= c2;\n      k2 = Long.rotateLeft(k2, 33);\n      k2 *= c1;\n      h2 ^= k2;\n      h2 = Long.rotateLeft(h2, 31);\n      h2 += h1;\n      h2 = h2 * 5 + 0x38495ab5;\n    }\n\n    long k1 = 0;\n    long k2 = 0;\n\n    switch (len & 15) {\n      case 15:\n        k2 = (key[roundedEnd + 14] & 0xffL) << 48;\n      case 14:\n        k2 |= (key[roundedEnd + 13] & 0xffL) << 40;\n      case 13:\n        k2 |= (key[roundedEnd + 12] & 0xffL) << 32;\n      case 12:\n        k2 |= (key[roundedEnd + 11] & 0xffL) << 24;\n      case 11:\n        k2 |= (key[roundedEnd + 10] & 0xffL) << 16;\n      case 10:\n        k2 |= (key[roundedEnd + 9] & 0xffL) << 8;\n      case 9:\n        k2 |= (key[roundedEnd + 8] & 0xffL);\n        k2 *= c2;\n        k2 = Long.rotateLeft(k2, 33);\n        k2 *= c1;\n        h2 ^= k2;\n      case 8:\n        k1 = ((long) key[roundedEnd + 7]) << 56;\n      case 7:\n        k1 |= (key[roundedEnd + 6] & 0xffL) << 48;\n      case 6:\n        k1 |= (key[roundedEnd + 5] & 0xffL) << 40;\n      case 5:\n        k1 |= (key[roundedEnd + 4] & 0xffL) << 32;\n      case 4:\n        k1 |= (key[roundedEnd + 3] & 0xffL) << 24;\n      case 3:\n        k1 |= (key[roundedEnd + 2] & 0xffL) << 16;\n      case 2:\n        k1 |= (key[roundedEnd + 1] & 0xffL) << 8;\n      case 1:\n        k1 |= (key[roundedEnd] & 0xffL);\n        k1 *= c1;\n        k1 = Long.rotateLeft(k1, 31);\n        k1 *= c2;\n        h1 ^= k1;\n    }\n\n    // ----------\n    // finalization\n\n    h1 ^= len;\n    h2 ^= len;\n\n    h1 += h2;\n    h2 += h1;\n\n    h1 = fmix64(h1);\n    h2 = fmix64(h2);\n\n    h1 += h2;\n    h2 += h1;\n\n    out.val1 = h1;\n    out.val2 = h2;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","af241f05539d0b41cd28a8051ad03e3d7fb051cf"],"312a0b611c541cff282471c71aaec297f3fbd8d4":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","312a0b611c541cff282471c71aaec297f3fbd8d4"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","312a0b611c541cff282471c71aaec297f3fbd8d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["312a0b611c541cff282471c71aaec297f3fbd8d4"],"af241f05539d0b41cd28a8051ad03e3d7fb051cf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","af241f05539d0b41cd28a8051ad03e3d7fb051cf"],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["312a0b611c541cff282471c71aaec297f3fbd8d4","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"312a0b611c541cff282471c71aaec297f3fbd8d4":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"af241f05539d0b41cd28a8051ad03e3d7fb051cf":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}