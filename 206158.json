{"path":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String[]).mjava","commits":[{"id":"c47b98f9e0b212b7e9199de318865d94147c6afa","date":1409789791,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String).mjava","sourceNew":"    private void handleSplitMode(String split, String[] fields) throws IOException {\n      if(split == null) split = \"/\";\n      if(fields == null || fields.length ==0) fields = new String[]{\"/*\"};\n      final boolean echo = \"true\".equals( req.getParams().get(\"echo\"));\n      JsonRecordReader jsonRecordReader = JsonRecordReader.getInst(split, Arrays.asList(fields));\n      jsonRecordReader.streamRecords(parser,new JsonRecordReader.Handler() {\n        ArrayList docs =null;\n        @Override\n        public void handle(Map<String, Object> record, String path) {\n          if(echo){\n            if(docs ==null) {\n              docs = new ArrayList();\n              rsp.add(\"docs\",docs);\n            }\n            docs.add(record);\n          } else {\n            AddUpdateCommand cmd = new AddUpdateCommand(req);\n            cmd.commitWithin = commitWithin;\n            cmd.overwrite = overwrite;\n            cmd.solrDoc =  new SolrInputDocument();\n            for (Map.Entry<String, Object> entry : record.entrySet()) {\n              cmd.solrDoc.setField(entry.getKey(),entry.getValue());\n            }\n            try {\n              processor.processAdd(cmd);\n            } catch (IOException e) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error inserting doc\",e);\n            }\n          }\n        }\n      });\n    }\n\n","sourceOld":"    private void handleSplitMode(String split) throws IOException {\n      String[] fields = req.getParams().getParams(\"f\");\n      req.getCore().getLatestSchema().getDefaultSearchFieldName();\n      final boolean echo = \"true\".equals( req.getParams().get(\"echo\"));\n      JsonRecordReader jsonRecordReader = JsonRecordReader.getInst(split, Arrays.asList(fields));\n      jsonRecordReader.streamRecords(parser,new JsonRecordReader.Handler() {\n        ArrayList docs =null;\n        @Override\n        public void handle(Map<String, Object> record, String path) {\n          if(echo){\n            if(docs ==null) {\n              docs = new ArrayList();\n              rsp.add(\"docs\",docs);\n            }\n            docs.add(record);\n          } else {\n            AddUpdateCommand cmd = new AddUpdateCommand(req);\n            cmd.commitWithin = commitWithin;\n            cmd.overwrite = overwrite;\n            cmd.solrDoc =  new SolrInputDocument();\n            for (Map.Entry<String, Object> entry : record.entrySet()) {\n              cmd.solrDoc.setField(entry.getKey(),entry.getValue());\n            }\n            try {\n              processor.processAdd(cmd);\n            } catch (IOException e) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error inserting doc\",e);\n            }\n          }\n        }\n      });\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ae3318d130dd6877d358630452b45d73c0569d9","date":1409946285,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String[]).mjava","sourceNew":"    private void handleSplitMode(String split, String[] fields) throws IOException {\n      if(split == null) split = \"/\";\n      if(fields == null || fields.length ==0) fields = new String[]{\"/**\"};\n      final boolean echo = \"true\".equals( req.getParams().get(\"echo\"));\n      JsonRecordReader jsonRecordReader = JsonRecordReader.getInst(split, Arrays.asList(fields));\n      jsonRecordReader.streamRecords(parser,new JsonRecordReader.Handler() {\n        ArrayList docs =null;\n        @Override\n        public void handle(Map<String, Object> record, String path) {\n          if(echo){\n            if(docs ==null) {\n              docs = new ArrayList();\n              rsp.add(\"docs\",docs);\n            }\n            docs.add(record);\n          } else {\n            AddUpdateCommand cmd = new AddUpdateCommand(req);\n            cmd.commitWithin = commitWithin;\n            cmd.overwrite = overwrite;\n            cmd.solrDoc =  new SolrInputDocument();\n            for (Map.Entry<String, Object> entry : record.entrySet()) {\n              cmd.solrDoc.setField(entry.getKey(),entry.getValue());\n            }\n            try {\n              processor.processAdd(cmd);\n            } catch (IOException e) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error inserting doc\",e);\n            }\n          }\n        }\n      });\n    }\n\n","sourceOld":"    private void handleSplitMode(String split, String[] fields) throws IOException {\n      if(split == null) split = \"/\";\n      if(fields == null || fields.length ==0) fields = new String[]{\"/*\"};\n      final boolean echo = \"true\".equals( req.getParams().get(\"echo\"));\n      JsonRecordReader jsonRecordReader = JsonRecordReader.getInst(split, Arrays.asList(fields));\n      jsonRecordReader.streamRecords(parser,new JsonRecordReader.Handler() {\n        ArrayList docs =null;\n        @Override\n        public void handle(Map<String, Object> record, String path) {\n          if(echo){\n            if(docs ==null) {\n              docs = new ArrayList();\n              rsp.add(\"docs\",docs);\n            }\n            docs.add(record);\n          } else {\n            AddUpdateCommand cmd = new AddUpdateCommand(req);\n            cmd.commitWithin = commitWithin;\n            cmd.overwrite = overwrite;\n            cmd.solrDoc =  new SolrInputDocument();\n            for (Map.Entry<String, Object> entry : record.entrySet()) {\n              cmd.solrDoc.setField(entry.getKey(),entry.getValue());\n            }\n            try {\n              processor.processAdd(cmd);\n            } catch (IOException e) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error inserting doc\",e);\n            }\n          }\n        }\n      });\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"310045472df7463a74daabf6252eafc9d93960e0","date":1413271286,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String[]).mjava","sourceNew":"    private void handleSplitMode(String split, String[] fields) throws IOException {\n      if(split == null) split = \"/\";\n      if(fields == null || fields.length ==0) fields = new String[]{\"$FQN:/**\"};\n      final boolean echo = \"true\".equals( req.getParams().get(\"echo\"));\n      JsonRecordReader jsonRecordReader = JsonRecordReader.getInst(split, Arrays.asList(fields));\n      jsonRecordReader.streamRecords(parser,new JsonRecordReader.Handler() {\n        ArrayList docs =null;\n        @Override\n        public void handle(Map<String, Object> record, String path) {\n          if(echo){\n            if(docs ==null) {\n              docs = new ArrayList();\n              rsp.add(\"docs\",docs);\n            }\n            docs.add(record);\n          } else {\n            AddUpdateCommand cmd = new AddUpdateCommand(req);\n            cmd.commitWithin = commitWithin;\n            cmd.overwrite = overwrite;\n            cmd.solrDoc =  new SolrInputDocument();\n            for (Map.Entry<String, Object> entry : record.entrySet()) {\n              cmd.solrDoc.setField(entry.getKey(),entry.getValue());\n            }\n            try {\n              processor.processAdd(cmd);\n            } catch (IOException e) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error inserting doc\",e);\n            }\n          }\n        }\n      });\n    }\n\n","sourceOld":"    private void handleSplitMode(String split, String[] fields) throws IOException {\n      if(split == null) split = \"/\";\n      if(fields == null || fields.length ==0) fields = new String[]{\"/**\"};\n      final boolean echo = \"true\".equals( req.getParams().get(\"echo\"));\n      JsonRecordReader jsonRecordReader = JsonRecordReader.getInst(split, Arrays.asList(fields));\n      jsonRecordReader.streamRecords(parser,new JsonRecordReader.Handler() {\n        ArrayList docs =null;\n        @Override\n        public void handle(Map<String, Object> record, String path) {\n          if(echo){\n            if(docs ==null) {\n              docs = new ArrayList();\n              rsp.add(\"docs\",docs);\n            }\n            docs.add(record);\n          } else {\n            AddUpdateCommand cmd = new AddUpdateCommand(req);\n            cmd.commitWithin = commitWithin;\n            cmd.overwrite = overwrite;\n            cmd.solrDoc =  new SolrInputDocument();\n            for (Map.Entry<String, Object> entry : record.entrySet()) {\n              cmd.solrDoc.setField(entry.getKey(),entry.getValue());\n            }\n            try {\n              processor.processAdd(cmd);\n            } catch (IOException e) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error inserting doc\",e);\n            }\n          }\n        }\n      });\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String[]).mjava","sourceNew":"    private void handleSplitMode(String split, String[] fields) throws IOException {\n      if(split == null) split = \"/\";\n      if(fields == null || fields.length ==0) fields = new String[]{\"$FQN:/**\"};\n      final boolean echo = \"true\".equals( req.getParams().get(\"echo\"));\n      JsonRecordReader jsonRecordReader = JsonRecordReader.getInst(split, Arrays.asList(fields));\n      jsonRecordReader.streamRecords(parser,new JsonRecordReader.Handler() {\n        ArrayList docs =null;\n        @Override\n        public void handle(Map<String, Object> record, String path) {\n          if(echo){\n            if(docs ==null) {\n              docs = new ArrayList();\n              rsp.add(\"docs\",docs);\n            }\n            docs.add(record);\n          } else {\n            AddUpdateCommand cmd = new AddUpdateCommand(req);\n            cmd.commitWithin = commitWithin;\n            cmd.overwrite = overwrite;\n            cmd.solrDoc =  new SolrInputDocument();\n            for (Map.Entry<String, Object> entry : record.entrySet()) {\n              cmd.solrDoc.setField(entry.getKey(),entry.getValue());\n            }\n            try {\n              processor.processAdd(cmd);\n            } catch (IOException e) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error inserting doc\",e);\n            }\n          }\n        }\n      });\n    }\n\n","sourceOld":"    private void handleSplitMode(String split, String[] fields) throws IOException {\n      if(split == null) split = \"/\";\n      if(fields == null || fields.length ==0) fields = new String[]{\"/**\"};\n      final boolean echo = \"true\".equals( req.getParams().get(\"echo\"));\n      JsonRecordReader jsonRecordReader = JsonRecordReader.getInst(split, Arrays.asList(fields));\n      jsonRecordReader.streamRecords(parser,new JsonRecordReader.Handler() {\n        ArrayList docs =null;\n        @Override\n        public void handle(Map<String, Object> record, String path) {\n          if(echo){\n            if(docs ==null) {\n              docs = new ArrayList();\n              rsp.add(\"docs\",docs);\n            }\n            docs.add(record);\n          } else {\n            AddUpdateCommand cmd = new AddUpdateCommand(req);\n            cmd.commitWithin = commitWithin;\n            cmd.overwrite = overwrite;\n            cmd.solrDoc =  new SolrInputDocument();\n            for (Map.Entry<String, Object> entry : record.entrySet()) {\n              cmd.solrDoc.setField(entry.getKey(),entry.getValue());\n            }\n            try {\n              processor.processAdd(cmd);\n            } catch (IOException e) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error inserting doc\",e);\n            }\n          }\n        }\n      });\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab10d7c14ce9f8db61956611a57a5a377362a633","date":1413903184,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String[],Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String[]).mjava","sourceNew":"    private void handleSplitMode(String split, String[] fields, final Reader reader) throws IOException {\n      if (split == null) split = \"/\";\n      if (fields == null || fields.length == 0) fields = new String[]{\"$FQN:/**\"};\n      final boolean echo = \"true\".equals(req.getParams().get(\"echo\"));\n      final String srcField = req.getParams().get(\"srcField\");\n      final boolean mapUniqueKeyOnly = req.getParams().getBool(\"mapUniqueKeyOnly\",false);\n      if (srcField != null) {\n        if (!\"/\".equals(split))\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Raw data can be stored only if split=/\");\n        parser = new RecordingJSONParser(reader);\n      } else {\n        parser = new JSONParser(reader);\n\n      }\n\n      JsonRecordReader jsonRecordReader = JsonRecordReader.getInst(split, Arrays.asList(fields));\n      jsonRecordReader.streamRecords(parser, new JsonRecordReader.Handler() {\n        ArrayList docs = null;\n\n        @Override\n        public void handle(Map<String, Object> record, String path) {\n          Map<String, Object> copy = getDocMap(record, parser, srcField, mapUniqueKeyOnly);\n\n          if (echo) {\n            if (docs == null) {\n              docs = new ArrayList();\n              rsp.add(\"docs\", docs);\n            }\n            docs.add(copy);\n          } else {\n            AddUpdateCommand cmd = new AddUpdateCommand(req);\n            cmd.commitWithin = commitWithin;\n            cmd.overwrite = overwrite;\n            cmd.solrDoc = new SolrInputDocument();\n            for (Map.Entry<String, Object> entry : copy.entrySet()) {\n              cmd.solrDoc.setField(entry.getKey(),entry.getValue());\n            }\n            try {\n              processor.processAdd(cmd);\n            } catch (IOException e) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error inserting doc\",e);\n            }\n          }\n        }\n      });\n    }\n\n","sourceOld":"    private void handleSplitMode(String split, String[] fields) throws IOException {\n      if(split == null) split = \"/\";\n      if(fields == null || fields.length ==0) fields = new String[]{\"$FQN:/**\"};\n      final boolean echo = \"true\".equals( req.getParams().get(\"echo\"));\n      JsonRecordReader jsonRecordReader = JsonRecordReader.getInst(split, Arrays.asList(fields));\n      jsonRecordReader.streamRecords(parser,new JsonRecordReader.Handler() {\n        ArrayList docs =null;\n        @Override\n        public void handle(Map<String, Object> record, String path) {\n          if(echo){\n            if(docs ==null) {\n              docs = new ArrayList();\n              rsp.add(\"docs\",docs);\n            }\n            docs.add(record);\n          } else {\n            AddUpdateCommand cmd = new AddUpdateCommand(req);\n            cmd.commitWithin = commitWithin;\n            cmd.overwrite = overwrite;\n            cmd.solrDoc =  new SolrInputDocument();\n            for (Map.Entry<String, Object> entry : record.entrySet()) {\n              cmd.solrDoc.setField(entry.getKey(),entry.getValue());\n            }\n            try {\n              processor.processAdd(cmd);\n            } catch (IOException e) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error inserting doc\",e);\n            }\n          }\n        }\n      });\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String[],Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String[]).mjava","sourceNew":"    private void handleSplitMode(String split, String[] fields, final Reader reader) throws IOException {\n      if (split == null) split = \"/\";\n      if (fields == null || fields.length == 0) fields = new String[]{\"$FQN:/**\"};\n      final boolean echo = \"true\".equals(req.getParams().get(\"echo\"));\n      final String srcField = req.getParams().get(\"srcField\");\n      final boolean mapUniqueKeyOnly = req.getParams().getBool(\"mapUniqueKeyOnly\",false);\n      if (srcField != null) {\n        if (!\"/\".equals(split))\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Raw data can be stored only if split=/\");\n        parser = new RecordingJSONParser(reader);\n      } else {\n        parser = new JSONParser(reader);\n\n      }\n\n      JsonRecordReader jsonRecordReader = JsonRecordReader.getInst(split, Arrays.asList(fields));\n      jsonRecordReader.streamRecords(parser, new JsonRecordReader.Handler() {\n        ArrayList docs = null;\n\n        @Override\n        public void handle(Map<String, Object> record, String path) {\n          Map<String, Object> copy = getDocMap(record, parser, srcField, mapUniqueKeyOnly);\n\n          if (echo) {\n            if (docs == null) {\n              docs = new ArrayList();\n              rsp.add(\"docs\", docs);\n            }\n            docs.add(copy);\n          } else {\n            AddUpdateCommand cmd = new AddUpdateCommand(req);\n            cmd.commitWithin = commitWithin;\n            cmd.overwrite = overwrite;\n            cmd.solrDoc = new SolrInputDocument();\n            for (Map.Entry<String, Object> entry : copy.entrySet()) {\n              cmd.solrDoc.setField(entry.getKey(),entry.getValue());\n            }\n            try {\n              processor.processAdd(cmd);\n            } catch (IOException e) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error inserting doc\",e);\n            }\n          }\n        }\n      });\n    }\n\n","sourceOld":"    private void handleSplitMode(String split, String[] fields) throws IOException {\n      if(split == null) split = \"/\";\n      if(fields == null || fields.length ==0) fields = new String[]{\"$FQN:/**\"};\n      final boolean echo = \"true\".equals( req.getParams().get(\"echo\"));\n      JsonRecordReader jsonRecordReader = JsonRecordReader.getInst(split, Arrays.asList(fields));\n      jsonRecordReader.streamRecords(parser,new JsonRecordReader.Handler() {\n        ArrayList docs =null;\n        @Override\n        public void handle(Map<String, Object> record, String path) {\n          if(echo){\n            if(docs ==null) {\n              docs = new ArrayList();\n              rsp.add(\"docs\",docs);\n            }\n            docs.add(record);\n          } else {\n            AddUpdateCommand cmd = new AddUpdateCommand(req);\n            cmd.commitWithin = commitWithin;\n            cmd.overwrite = overwrite;\n            cmd.solrDoc =  new SolrInputDocument();\n            for (Map.Entry<String, Object> entry : record.entrySet()) {\n              cmd.solrDoc.setField(entry.getKey(),entry.getValue());\n            }\n            try {\n              processor.processAdd(cmd);\n            } catch (IOException e) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error inserting doc\",e);\n            }\n          }\n        }\n      });\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"310045472df7463a74daabf6252eafc9d93960e0":["9ae3318d130dd6877d358630452b45d73c0569d9"],"55980207f1977bd1463465de1659b821347e2fa8":["9ae3318d130dd6877d358630452b45d73c0569d9","310045472df7463a74daabf6252eafc9d93960e0"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["55980207f1977bd1463465de1659b821347e2fa8","ab10d7c14ce9f8db61956611a57a5a377362a633"],"ab10d7c14ce9f8db61956611a57a5a377362a633":["310045472df7463a74daabf6252eafc9d93960e0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ae3318d130dd6877d358630452b45d73c0569d9":["c47b98f9e0b212b7e9199de318865d94147c6afa"],"c47b98f9e0b212b7e9199de318865d94147c6afa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ab10d7c14ce9f8db61956611a57a5a377362a633"]},"commit2Childs":{"310045472df7463a74daabf6252eafc9d93960e0":["55980207f1977bd1463465de1659b821347e2fa8","ab10d7c14ce9f8db61956611a57a5a377362a633"],"55980207f1977bd1463465de1659b821347e2fa8":["0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"ab10d7c14ce9f8db61956611a57a5a377362a633":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c47b98f9e0b212b7e9199de318865d94147c6afa"],"9ae3318d130dd6877d358630452b45d73c0569d9":["310045472df7463a74daabf6252eafc9d93960e0","55980207f1977bd1463465de1659b821347e2fa8"],"c47b98f9e0b212b7e9199de318865d94147c6afa":["9ae3318d130dd6877d358630452b45d73c0569d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}