{"path":"solr/src/java/org/apache/solr/analysis/HyphenationCompoundWordTokenFilterFactory#init(Map[String,String]).mjava","commits":[{"id":"8f86529fc497c589a6282416c6de55435212238d","date":1278688851,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/HyphenationCompoundWordTokenFilterFactory#init(Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  public void init(Map<String, String> args) {\n    super.init(args);\n    assureMatchVersion();\n    dictFile = args.get(\"dictionary\");\n    if (args.containsKey(\"encoding\"))\n      encoding = args.get(\"encoding\");\n    hypFile = args.get(\"hyphenator\");\n    if (null == hypFile) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Missing required parameter: hyphenator\");\n    }\n\n    minWordSize = getInt(\"minWordSize\", CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE);\n    minSubwordSize = getInt(\"minSubwordSize\", CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE);\n    maxSubwordSize = getInt(\"maxSubwordSize\", CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE);\n    onlyLongestMatch = getBoolean(\"onlyLongestMatch\", false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/analysis/HyphenationCompoundWordTokenFilterFactory#init(Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  public void init(Map<String, String> args) {\n    super.init(args);\n    assureMatchVersion();\n    dictFile = args.get(\"dictionary\");\n    if (args.containsKey(\"encoding\"))\n      encoding = args.get(\"encoding\");\n    hypFile = args.get(\"hyphenator\");\n    if (null == hypFile) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Missing required parameter: hyphenator\");\n    }\n\n    minWordSize = getInt(\"minWordSize\", CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE);\n    minSubwordSize = getInt(\"minSubwordSize\", CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE);\n    maxSubwordSize = getInt(\"maxSubwordSize\", CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE);\n    onlyLongestMatch = getBoolean(\"onlyLongestMatch\", false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/HyphenationCompoundWordTokenFilterFactory#init(Map[String,String]).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/HyphenationCompoundWordTokenFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    assureMatchVersion();\n    dictFile = args.get(\"dictionary\");\n    if (args.containsKey(\"encoding\"))\n      encoding = args.get(\"encoding\");\n    hypFile = args.get(\"hyphenator\");\n    if (null == hypFile) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Missing required parameter: hyphenator\");\n    }\n\n    minWordSize = getInt(\"minWordSize\", CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE);\n    minSubwordSize = getInt(\"minSubwordSize\", CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE);\n    maxSubwordSize = getInt(\"maxSubwordSize\", CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE);\n    onlyLongestMatch = getBoolean(\"onlyLongestMatch\", false);\n  }\n\n","sourceOld":"  public void init(Map<String, String> args) {\n    super.init(args);\n    assureMatchVersion();\n    dictFile = args.get(\"dictionary\");\n    if (args.containsKey(\"encoding\"))\n      encoding = args.get(\"encoding\");\n    hypFile = args.get(\"hyphenator\");\n    if (null == hypFile) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Missing required parameter: hyphenator\");\n    }\n\n    minWordSize = getInt(\"minWordSize\", CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE);\n    minSubwordSize = getInt(\"minSubwordSize\", CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE);\n    maxSubwordSize = getInt(\"maxSubwordSize\", CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE);\n    onlyLongestMatch = getBoolean(\"onlyLongestMatch\", false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/analysis/HyphenationCompoundWordTokenFilterFactory#init(Map[String,String]).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/HyphenationCompoundWordTokenFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    assureMatchVersion();\n    dictFile = args.get(\"dictionary\");\n    if (args.containsKey(\"encoding\"))\n      encoding = args.get(\"encoding\");\n    hypFile = args.get(\"hyphenator\");\n    if (null == hypFile) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Missing required parameter: hyphenator\");\n    }\n\n    minWordSize = getInt(\"minWordSize\", CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE);\n    minSubwordSize = getInt(\"minSubwordSize\", CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE);\n    maxSubwordSize = getInt(\"maxSubwordSize\", CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE);\n    onlyLongestMatch = getBoolean(\"onlyLongestMatch\", false);\n  }\n\n","sourceOld":"  public void init(Map<String, String> args) {\n    super.init(args);\n    assureMatchVersion();\n    dictFile = args.get(\"dictionary\");\n    if (args.containsKey(\"encoding\"))\n      encoding = args.get(\"encoding\");\n    hypFile = args.get(\"hyphenator\");\n    if (null == hypFile) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Missing required parameter: hyphenator\");\n    }\n\n    minWordSize = getInt(\"minWordSize\", CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE);\n    minSubwordSize = getInt(\"minSubwordSize\", CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE);\n    maxSubwordSize = getInt(\"maxSubwordSize\", CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE);\n    onlyLongestMatch = getBoolean(\"onlyLongestMatch\", false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/analysis/HyphenationCompoundWordTokenFilterFactory#init(Map[String,String]).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/HyphenationCompoundWordTokenFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    assureMatchVersion();\n    dictFile = args.get(\"dictionary\");\n    if (args.containsKey(\"encoding\"))\n      encoding = args.get(\"encoding\");\n    hypFile = args.get(\"hyphenator\");\n    if (null == hypFile) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Missing required parameter: hyphenator\");\n    }\n\n    minWordSize = getInt(\"minWordSize\", CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE);\n    minSubwordSize = getInt(\"minSubwordSize\", CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE);\n    maxSubwordSize = getInt(\"maxSubwordSize\", CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE);\n    onlyLongestMatch = getBoolean(\"onlyLongestMatch\", false);\n  }\n\n","sourceOld":"  public void init(Map<String, String> args) {\n    super.init(args);\n    assureMatchVersion();\n    dictFile = args.get(\"dictionary\");\n    if (args.containsKey(\"encoding\"))\n      encoding = args.get(\"encoding\");\n    hypFile = args.get(\"hyphenator\");\n    if (null == hypFile) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Missing required parameter: hyphenator\");\n    }\n\n    minWordSize = getInt(\"minWordSize\", CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE);\n    minSubwordSize = getInt(\"minSubwordSize\", CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE);\n    maxSubwordSize = getInt(\"maxSubwordSize\", CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE);\n    onlyLongestMatch = getBoolean(\"onlyLongestMatch\", false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/HyphenationCompoundWordTokenFilterFactory#init(Map[String,String]).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/HyphenationCompoundWordTokenFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    assureMatchVersion();\n    dictFile = args.get(\"dictionary\");\n    if (args.containsKey(\"encoding\"))\n      encoding = args.get(\"encoding\");\n    hypFile = args.get(\"hyphenator\");\n    if (null == hypFile) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Missing required parameter: hyphenator\");\n    }\n\n    minWordSize = getInt(\"minWordSize\", CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE);\n    minSubwordSize = getInt(\"minSubwordSize\", CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE);\n    maxSubwordSize = getInt(\"maxSubwordSize\", CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE);\n    onlyLongestMatch = getBoolean(\"onlyLongestMatch\", false);\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    assureMatchVersion();\n    dictFile = args.get(\"dictionary\");\n    if (args.containsKey(\"encoding\"))\n      encoding = args.get(\"encoding\");\n    hypFile = args.get(\"hyphenator\");\n    if (null == hypFile) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Missing required parameter: hyphenator\");\n    }\n\n    minWordSize = getInt(\"minWordSize\", CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE);\n    minSubwordSize = getInt(\"minSubwordSize\", CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE);\n    maxSubwordSize = getInt(\"maxSubwordSize\", CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE);\n    onlyLongestMatch = getBoolean(\"onlyLongestMatch\", false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/HyphenationCompoundWordTokenFilterFactory#init(Map[String,String]).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/HyphenationCompoundWordTokenFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    assureMatchVersion();\n    dictFile = args.get(\"dictionary\");\n    if (args.containsKey(\"encoding\"))\n      encoding = args.get(\"encoding\");\n    hypFile = args.get(\"hyphenator\");\n    if (null == hypFile) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Missing required parameter: hyphenator\");\n    }\n\n    minWordSize = getInt(\"minWordSize\", CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE);\n    minSubwordSize = getInt(\"minSubwordSize\", CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE);\n    maxSubwordSize = getInt(\"maxSubwordSize\", CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE);\n    onlyLongestMatch = getBoolean(\"onlyLongestMatch\", false);\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    assureMatchVersion();\n    dictFile = args.get(\"dictionary\");\n    if (args.containsKey(\"encoding\"))\n      encoding = args.get(\"encoding\");\n    hypFile = args.get(\"hyphenator\");\n    if (null == hypFile) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Missing required parameter: hyphenator\");\n    }\n\n    minWordSize = getInt(\"minWordSize\", CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE);\n    minSubwordSize = getInt(\"minSubwordSize\", CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE);\n    maxSubwordSize = getInt(\"maxSubwordSize\", CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE);\n    onlyLongestMatch = getBoolean(\"onlyLongestMatch\", false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analysis/HyphenationCompoundWordTokenFilterFactory#init(Map[String,String]).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/HyphenationCompoundWordTokenFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    assureMatchVersion();\n    dictFile = args.get(\"dictionary\");\n    if (args.containsKey(\"encoding\"))\n      encoding = args.get(\"encoding\");\n    hypFile = args.get(\"hyphenator\");\n    if (null == hypFile) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Missing required parameter: hyphenator\");\n    }\n\n    minWordSize = getInt(\"minWordSize\", CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE);\n    minSubwordSize = getInt(\"minSubwordSize\", CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE);\n    maxSubwordSize = getInt(\"maxSubwordSize\", CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE);\n    onlyLongestMatch = getBoolean(\"onlyLongestMatch\", false);\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    assureMatchVersion();\n    dictFile = args.get(\"dictionary\");\n    if (args.containsKey(\"encoding\"))\n      encoding = args.get(\"encoding\");\n    hypFile = args.get(\"hyphenator\");\n    if (null == hypFile) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Missing required parameter: hyphenator\");\n    }\n\n    minWordSize = getInt(\"minWordSize\", CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE);\n    minSubwordSize = getInt(\"minSubwordSize\", CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE);\n    maxSubwordSize = getInt(\"maxSubwordSize\", CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE);\n    onlyLongestMatch = getBoolean(\"onlyLongestMatch\", false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["8f86529fc497c589a6282416c6de55435212238d"],"8f86529fc497c589a6282416c6de55435212238d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"c26f00b574427b55127e869b935845554afde1fa":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["8f86529fc497c589a6282416c6de55435212238d","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8f86529fc497c589a6282416c6de55435212238d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["5f4e87790277826a2aea119328600dfb07761f32","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"8f86529fc497c589a6282416c6de55435212238d":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","29ef99d61cda9641b6250bf9567329a6e65f901d","5f4e87790277826a2aea119328600dfb07761f32"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8f86529fc497c589a6282416c6de55435212238d","5f4e87790277826a2aea119328600dfb07761f32"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"5f4e87790277826a2aea119328600dfb07761f32":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}