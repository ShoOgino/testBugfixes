{"path":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#getEmptyHighlight(String,BreakIterator,int).mjava","commits":[{"id":"77fc0eb4b8857a9f5235049cdfe6f678a3ddae55","date":1363791725,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#getEmptyHighlight(String,BreakIterator,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Called to summarize a document when no hits were\n   *  found.  By default this just returns the first\n   *  {@code maxPassages} sentences; subclasses can override\n   *  to customize. */\n  protected Passage[] getEmptyHighlight(String fieldName, BreakIterator bi, int maxPassages) {\n    // BreakIterator should be un-next'd:\n    List<Passage> passages = new ArrayList<Passage>();\n    int pos = bi.current();\n    assert pos == 0;\n    while (passages.size() < maxPassages) {\n      int next = bi.next();\n      if (next == BreakIterator.DONE) {\n        break;\n      }\n      Passage passage = new Passage();\n      passage.score = Float.NaN;\n      passage.startOffset = pos;\n      passage.endOffset = next;\n      passages.add(passage);\n      pos = next;\n    }\n\n    return passages.toArray(new Passage[passages.size()]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a385683d8ce32386bb71e8c427cb78573debda2b","date":1363792009,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#getEmptyHighlight(String,BreakIterator,int).mjava","sourceNew":null,"sourceOld":"  /** Called to summarize a document when no hits were\n   *  found.  By default this just returns the first\n   *  {@code maxPassages} sentences; subclasses can override\n   *  to customize. */\n  protected Passage[] getEmptyHighlight(String fieldName, BreakIterator bi, int maxPassages) {\n    // BreakIterator should be un-next'd:\n    List<Passage> passages = new ArrayList<Passage>();\n    int pos = bi.current();\n    assert pos == 0;\n    while (passages.size() < maxPassages) {\n      int next = bi.next();\n      if (next == BreakIterator.DONE) {\n        break;\n      }\n      Passage passage = new Passage();\n      passage.score = Float.NaN;\n      passage.startOffset = pos;\n      passage.endOffset = next;\n      passages.add(passage);\n      pos = next;\n    }\n\n    return passages.toArray(new Passage[passages.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca2025fc6d81ec43c276473ba49e4fbcb15ccb1","date":1363793774,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#getEmptyHighlight(String,BreakIterator,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Called to summarize a document when no hits were\n   *  found.  By default this just returns the first\n   *  {@code maxPassages} sentences; subclasses can override\n   *  to customize. */\n  protected Passage[] getEmptyHighlight(String fieldName, BreakIterator bi, int maxPassages) {\n    // BreakIterator should be un-next'd:\n    List<Passage> passages = new ArrayList<Passage>();\n    int pos = bi.current();\n    assert pos == 0;\n    while (passages.size() < maxPassages) {\n      int next = bi.next();\n      if (next == BreakIterator.DONE) {\n        break;\n      }\n      Passage passage = new Passage();\n      passage.score = Float.NaN;\n      passage.startOffset = pos;\n      passage.endOffset = next;\n      passages.add(passage);\n      pos = next;\n    }\n\n    return passages.toArray(new Passage[passages.size()]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#getEmptyHighlight(String,BreakIterator,int).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#getEmptyHighlight(String,BreakIterator,int).mjava","sourceNew":"  /** Called to summarize a document when no hits were\n   *  found.  By default this just returns the first\n   *  {@code maxPassages} sentences; subclasses can override\n   *  to customize. */\n  protected Passage[] getEmptyHighlight(String fieldName, BreakIterator bi, int maxPassages) {\n    // BreakIterator should be un-next'd:\n    List<Passage> passages = new ArrayList<>();\n    int pos = bi.current();\n    assert pos == 0;\n    while (passages.size() < maxPassages) {\n      int next = bi.next();\n      if (next == BreakIterator.DONE) {\n        break;\n      }\n      Passage passage = new Passage();\n      passage.score = Float.NaN;\n      passage.startOffset = pos;\n      passage.endOffset = next;\n      passages.add(passage);\n      pos = next;\n    }\n\n    return passages.toArray(new Passage[passages.size()]);\n  }\n\n","sourceOld":"  /** Called to summarize a document when no hits were\n   *  found.  By default this just returns the first\n   *  {@code maxPassages} sentences; subclasses can override\n   *  to customize. */\n  protected Passage[] getEmptyHighlight(String fieldName, BreakIterator bi, int maxPassages) {\n    // BreakIterator should be un-next'd:\n    List<Passage> passages = new ArrayList<Passage>();\n    int pos = bi.current();\n    assert pos == 0;\n    while (passages.size() < maxPassages) {\n      int next = bi.next();\n      if (next == BreakIterator.DONE) {\n        break;\n      }\n      Passage passage = new Passage();\n      passage.score = Float.NaN;\n      passage.startOffset = pos;\n      passage.endOffset = next;\n      passages.add(passage);\n      pos = next;\n    }\n\n    return passages.toArray(new Passage[passages.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"381618eac2691bb34ab9a3fca76ad55c6274517e","date":1495564791,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#getEmptyHighlight(String,BreakIterator,int).mjava","sourceNew":null,"sourceOld":"  /** Called to summarize a document when no hits were\n   *  found.  By default this just returns the first\n   *  {@code maxPassages} sentences; subclasses can override\n   *  to customize. */\n  protected Passage[] getEmptyHighlight(String fieldName, BreakIterator bi, int maxPassages) {\n    // BreakIterator should be un-next'd:\n    List<Passage> passages = new ArrayList<>();\n    int pos = bi.current();\n    assert pos == 0;\n    while (passages.size() < maxPassages) {\n      int next = bi.next();\n      if (next == BreakIterator.DONE) {\n        break;\n      }\n      Passage passage = new Passage();\n      passage.score = Float.NaN;\n      passage.startOffset = pos;\n      passage.endOffset = next;\n      passages.add(passage);\n      pos = next;\n    }\n\n    return passages.toArray(new Passage[passages.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#getEmptyHighlight(String,BreakIterator,int).mjava","sourceNew":null,"sourceOld":"  /** Called to summarize a document when no hits were\n   *  found.  By default this just returns the first\n   *  {@code maxPassages} sentences; subclasses can override\n   *  to customize. */\n  protected Passage[] getEmptyHighlight(String fieldName, BreakIterator bi, int maxPassages) {\n    // BreakIterator should be un-next'd:\n    List<Passage> passages = new ArrayList<>();\n    int pos = bi.current();\n    assert pos == 0;\n    while (passages.size() < maxPassages) {\n      int next = bi.next();\n      if (next == BreakIterator.DONE) {\n        break;\n      }\n      Passage passage = new Passage();\n      passage.score = Float.NaN;\n      passage.startOffset = pos;\n      passage.endOffset = next;\n      passages.add(passage);\n      pos = next;\n    }\n\n    return passages.toArray(new Passage[passages.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"381618eac2691bb34ab9a3fca76ad55c6274517e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4ca2025fc6d81ec43c276473ba49e4fbcb15ccb1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","381618eac2691bb34ab9a3fca76ad55c6274517e"],"a385683d8ce32386bb71e8c427cb78573debda2b":["77fc0eb4b8857a9f5235049cdfe6f678a3ddae55"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77fc0eb4b8857a9f5235049cdfe6f678a3ddae55":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4ca2025fc6d81ec43c276473ba49e4fbcb15ccb1":["a385683d8ce32386bb71e8c427cb78573debda2b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["381618eac2691bb34ab9a3fca76ad55c6274517e"]},"commit2Childs":{"381618eac2691bb34ab9a3fca76ad55c6274517e":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["381618eac2691bb34ab9a3fca76ad55c6274517e","e9017cf144952056066919f1ebc7897ff9bd71b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a385683d8ce32386bb71e8c427cb78573debda2b":["4ca2025fc6d81ec43c276473ba49e4fbcb15ccb1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["77fc0eb4b8857a9f5235049cdfe6f678a3ddae55"],"77fc0eb4b8857a9f5235049cdfe6f678a3ddae55":["a385683d8ce32386bb71e8c427cb78573debda2b"],"4ca2025fc6d81ec43c276473ba49e4fbcb15ccb1":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}