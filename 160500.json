{"path":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext).mjava","commits":[{"id":"c8323d210478d76a02372693d254b69aac614689","date":1295877066,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(IndexReader).mjava","sourceNew":"  @Override\n  public Spans getSpans(final AtomicReaderContext context) throws IOException {\n    final IndexReader reader = context.reader;\n    final DocsAndPositionsEnum postings = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                                   term.field(),\n                                                                   term.bytes());\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      if (reader.termDocsEnum(reader.getDeletedDocs(), term.field(), term.bytes()) != null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n      } else {\n        // term does not exist\n        return TermSpans.EMPTY_TERM_SPANS;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final IndexReader reader) throws IOException {\n    final DocsAndPositionsEnum postings = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                                   term.field(),\n                                                                   term.bytes());\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      if (reader.termDocsEnum(reader.getDeletedDocs(), term.field(), term.bytes()) != null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n      } else {\n        // term does not exist\n        return TermSpans.EMPTY_TERM_SPANS;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(IndexReader).mjava","sourceNew":"  @Override\n  public Spans getSpans(final AtomicReaderContext context) throws IOException {\n    final IndexReader reader = context.reader;\n    final DocsAndPositionsEnum postings = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                                   term.field(),\n                                                                   term.bytes());\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      if (reader.termDocsEnum(reader.getDeletedDocs(), term.field(), term.bytes()) != null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n      } else {\n        // term does not exist\n        return TermSpans.EMPTY_TERM_SPANS;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final IndexReader reader) throws IOException {\n    final DocsAndPositionsEnum postings = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                                   term.field(),\n                                                                   term.bytes());\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      if (reader.termDocsEnum(reader.getDeletedDocs(), term.field(), term.bytes()) != null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n      } else {\n        // term does not exist\n        return TermSpans.EMPTY_TERM_SPANS;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Spans getSpans(final AtomicReaderContext context) throws IOException {\n    final IndexReader reader = context.reader;\n    final DocsAndPositionsEnum postings = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                                   term.field(),\n                                                                   term.bytes());\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      if (reader.termDocsEnum(reader.getDeletedDocs(), term.field(), term.bytes()) != null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n      } else {\n        // term does not exist\n        return TermSpans.EMPTY_TERM_SPANS;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext).mjava","sourceNew":"  @Override\n  public Spans getSpans(final AtomicReaderContext context) throws IOException {\n    final IndexReader reader = context.reader;\n    final DocsAndPositionsEnum postings = reader.termPositionsEnum(reader.getLiveDocs(),\n                                                                   term.field(),\n                                                                   term.bytes());\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      if (reader.termDocsEnum(reader.getLiveDocs(), term.field(), term.bytes()) != null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n      } else {\n        // term does not exist\n        return TermSpans.EMPTY_TERM_SPANS;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final AtomicReaderContext context) throws IOException {\n    final IndexReader reader = context.reader;\n    final DocsAndPositionsEnum postings = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                                   term.field(),\n                                                                   term.bytes());\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      if (reader.termDocsEnum(reader.getDeletedDocs(), term.field(), term.bytes()) != null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n      } else {\n        // term does not exist\n        return TermSpans.EMPTY_TERM_SPANS;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext).mjava","sourceNew":"  @Override\n  public Spans getSpans(final AtomicReaderContext context) throws IOException {\n    final IndexReader reader = context.reader;\n    final DocsAndPositionsEnum postings = reader.termPositionsEnum(reader.getLiveDocs(),\n                                                                   term.field(),\n                                                                   term.bytes());\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      if (reader.termDocsEnum(reader.getLiveDocs(), term.field(), term.bytes()) != null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n      } else {\n        // term does not exist\n        return TermSpans.EMPTY_TERM_SPANS;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final AtomicReaderContext context) throws IOException {\n    final IndexReader reader = context.reader;\n    final DocsAndPositionsEnum postings = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                                   term.field(),\n                                                                   term.bytes());\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      if (reader.termDocsEnum(reader.getDeletedDocs(), term.field(), term.bytes()) != null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n      } else {\n        // term does not exist\n        return TermSpans.EMPTY_TERM_SPANS;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext).mjava","sourceNew":"  @Override\n  public Spans getSpans(final AtomicReaderContext context) throws IOException {\n    final IndexReader reader = context.reader;\n    final DocsAndPositionsEnum postings = reader.termPositionsEnum(reader.getLiveDocs(),\n                                                                   term.field(),\n                                                                   term.bytes());\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      if (reader.termDocsEnum(reader.getLiveDocs(), term.field(), term.bytes()) != null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n      } else {\n        // term does not exist\n        return TermSpans.EMPTY_TERM_SPANS;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final AtomicReaderContext context) throws IOException {\n    final IndexReader reader = context.reader;\n    final DocsAndPositionsEnum postings = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                                   term.field(),\n                                                                   term.bytes());\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      if (reader.termDocsEnum(reader.getDeletedDocs(), term.field(), term.bytes()) != null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n      } else {\n        // term does not exist\n        return TermSpans.EMPTY_TERM_SPANS;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext).mjava","sourceNew":"  @Override\n  public Spans getSpans(final AtomicReaderContext context) throws IOException {\n    final IndexReader reader = context.reader;\n    final DocsAndPositionsEnum postings = reader.termPositionsEnum(reader.getLiveDocs(),\n                                                                   term.field(),\n                                                                   term.bytes());\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      if (reader.termDocsEnum(reader.getLiveDocs(), term.field(), term.bytes()) != null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n      } else {\n        // term does not exist\n        return TermSpans.EMPTY_TERM_SPANS;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final AtomicReaderContext context) throws IOException {\n    final IndexReader reader = context.reader;\n    final DocsAndPositionsEnum postings = reader.termPositionsEnum(reader.getLiveDocs(),\n                                                                   term.field(),\n                                                                   term.bytes());\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      if (reader.termDocsEnum(reader.getLiveDocs(), term.field(), term.bytes()) != null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n      } else {\n        // term does not exist\n        return TermSpans.EMPTY_TERM_SPANS;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fc1f3f78b299e125f7e60f43b5d457392bea23f","date":1317431015,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext).mjava","sourceNew":"  @Override\n  public Spans getSpans(final AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    final IndexReader reader = context.reader;\n    final DocsAndPositionsEnum postings = reader.termPositionsEnum(acceptDocs,\n                                                                   term.field(),\n                                                                   term.bytes());\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      if (reader.termDocsEnum(reader.getLiveDocs(), term.field(), term.bytes()) != null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n      } else {\n        // term does not exist\n        return TermSpans.EMPTY_TERM_SPANS;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final AtomicReaderContext context) throws IOException {\n    final IndexReader reader = context.reader;\n    final DocsAndPositionsEnum postings = reader.termPositionsEnum(reader.getLiveDocs(),\n                                                                   term.field(),\n                                                                   term.bytes());\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      if (reader.termDocsEnum(reader.getLiveDocs(), term.field(), term.bytes()) != null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n      } else {\n        // term does not exist\n        return TermSpans.EMPTY_TERM_SPANS;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"c8323d210478d76a02372693d254b69aac614689":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8323d210478d76a02372693d254b69aac614689"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["c8323d210478d76a02372693d254b69aac614689"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["c8323d210478d76a02372693d254b69aac614689","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["c8323d210478d76a02372693d254b69aac614689","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8323d210478d76a02372693d254b69aac614689"]},"commit2Childs":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"],"c8323d210478d76a02372693d254b69aac614689":["29ef99d61cda9641b6250bf9567329a6e65f901d","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["2afd23a6f1242190c3409d8d81d5c5912d607fc9","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c8323d210478d76a02372693d254b69aac614689","29ef99d61cda9641b6250bf9567329a6e65f901d","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}