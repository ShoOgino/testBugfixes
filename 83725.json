{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCorrMatrix().mjava","commits":[{"id":"2a2efb7373cfceb83cf0a7f6e38a1d4ac1833806","date":1510620286,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCorrMatrix().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCorrMatrix() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n                       \"a=array(1,2,3), \" +\n                       \"b=array(2,4,6), \" +\n                       \"c=array(4, 8, 52), \" +\n                       \"d=transpose(matrix(a, b, c)), \" +\n                       \"f=corr(d), \" +\n                       \"g=corr(d, type=kendalls), \" +\n                       \"h=corr(d, type=spearmans),\" +\n                       \"i=corrPValues(f))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cm = (List<List<Number>>)tuples.get(0).get(\"f\");\n    assertEquals(cm.size(), 3);\n    List<Number> row1 = cm.get(0);\n    assertEquals(row1.size(), 3);\n    assertEquals(row1.get(0).doubleValue(), 1, 0);\n    assertEquals(row1.get(1).doubleValue(), 1, 0);\n    assertEquals(row1.get(2).doubleValue(), 0.901127113779166, 0);\n\n    List<Number> row2 = cm.get(1);\n    assertEquals(row2.size(), 3);\n    assertEquals(row2.get(0).doubleValue(), 1, 0);\n    assertEquals(row2.get(1).doubleValue(), 1, 0);\n    assertEquals(row2.get(2).doubleValue(), 0.901127113779166, 0);\n\n    List<Number> row3 = cm.get(2);\n    assertEquals(row3.size(), 3);\n    assertEquals(row3.get(0).doubleValue(), 0.901127113779166, 0);\n    assertEquals(row3.get(1).doubleValue(), 0.901127113779166, 0);\n    assertEquals(row3.get(2).doubleValue(), 1, 0);\n\n    cm = (List<List<Number>>)tuples.get(0).get(\"g\");\n    assertEquals(cm.size(), 3);\n    row1 = cm.get(0);\n    assertEquals(row1.size(), 3);\n    assertEquals(row1.get(0).doubleValue(), 1, 0);\n    assertEquals(row1.get(1).doubleValue(), 1, 0);\n    assertEquals(row1.get(2).doubleValue(), 1, 0);\n\n    row2 = cm.get(1);\n    assertEquals(row2.size(), 3);\n    assertEquals(row2.get(0).doubleValue(), 1, 0);\n    assertEquals(row2.get(1).doubleValue(), 1, 0);\n    assertEquals(row2.get(2).doubleValue(), 1, 0);\n\n    row3 = cm.get(2);\n    assertEquals(row3.size(), 3);\n    assertEquals(row3.get(0).doubleValue(), 1, 0);\n    assertEquals(row3.get(1).doubleValue(), 1, 0);\n    assertEquals(row3.get(2).doubleValue(), 1, 0);\n\n    cm = (List<List<Number>>)tuples.get(0).get(\"h\");\n    assertEquals(cm.size(), 3);\n    row1 = cm.get(0);\n    assertEquals(row1.size(), 3);\n    assertEquals(row1.get(0).doubleValue(), 1, 0);\n    assertEquals(row1.get(1).doubleValue(), 1, 0);\n    assertEquals(row1.get(2).doubleValue(), 1, 0);\n\n    row2 = cm.get(1);\n    assertEquals(row2.size(), 3);\n    assertEquals(row2.get(0).doubleValue(), 1, 0);\n    assertEquals(row2.get(1).doubleValue(), 1, 0);\n    assertEquals(row2.get(2).doubleValue(), 1, 0);\n\n    row3 = cm.get(2);\n    assertEquals(row3.size(), 3);\n    assertEquals(row3.get(0).doubleValue(), 1, 0);\n    assertEquals(row3.get(1).doubleValue(), 1, 0);\n    assertEquals(row3.get(2).doubleValue(), 1, 0);\n\n    cm = (List<List<Number>>)tuples.get(0).get(\"i\");\n    assertEquals(cm.size(), 3);\n    row1 = cm.get(0);\n    assertEquals(row1.size(), 3);\n    assertEquals(row1.get(0).doubleValue(), 0, 0);\n    assertEquals(row1.get(1).doubleValue(), 0, 0);\n    assertEquals(row1.get(2).doubleValue(), 0.28548201004998375, 0);\n\n    row2 = cm.get(1);\n    assertEquals(row2.size(), 3);\n    assertEquals(row2.get(0).doubleValue(), 0, 0);\n    assertEquals(row2.get(1).doubleValue(), 0, 0);\n    assertEquals(row2.get(2).doubleValue(), 0.28548201004998375, 0);\n\n    row3 = cm.get(2);\n    assertEquals(row3.size(), 3);\n    assertEquals(row3.get(0).doubleValue(), 0.28548201004998375, 0);\n    assertEquals(row3.get(1).doubleValue(), 0.28548201004998375, 0);\n    assertEquals(row3.get(2).doubleValue(), 0, 0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testCorrMatrix().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCorrMatrix().mjava","sourceNew":"  @Test\n  public void testCorrMatrix() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n                       \"a=array(1,2,3), \" +\n                       \"b=array(2,4,6), \" +\n                       \"c=array(4, 8, 52), \" +\n                       \"d=transpose(matrix(a, b, c)), \" +\n                       \"f=corr(d), \" +\n                       \"g=corr(d, type=kendalls), \" +\n                       \"h=corr(d, type=spearmans),\" +\n                       \"i=corrPValues(f))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cm = (List<List<Number>>)tuples.get(0).get(\"f\");\n    assertEquals(cm.size(), 3);\n    List<Number> row1 = cm.get(0);\n    assertEquals(row1.size(), 3);\n    assertEquals(row1.get(0).doubleValue(), 1, 0);\n    assertEquals(row1.get(1).doubleValue(), 1, 0);\n    assertEquals(row1.get(2).doubleValue(), 0.901127113779166, 0);\n\n    List<Number> row2 = cm.get(1);\n    assertEquals(row2.size(), 3);\n    assertEquals(row2.get(0).doubleValue(), 1, 0);\n    assertEquals(row2.get(1).doubleValue(), 1, 0);\n    assertEquals(row2.get(2).doubleValue(), 0.901127113779166, 0);\n\n    List<Number> row3 = cm.get(2);\n    assertEquals(row3.size(), 3);\n    assertEquals(row3.get(0).doubleValue(), 0.901127113779166, 0);\n    assertEquals(row3.get(1).doubleValue(), 0.901127113779166, 0);\n    assertEquals(row3.get(2).doubleValue(), 1, 0);\n\n    cm = (List<List<Number>>)tuples.get(0).get(\"g\");\n    assertEquals(cm.size(), 3);\n    row1 = cm.get(0);\n    assertEquals(row1.size(), 3);\n    assertEquals(row1.get(0).doubleValue(), 1, 0);\n    assertEquals(row1.get(1).doubleValue(), 1, 0);\n    assertEquals(row1.get(2).doubleValue(), 1, 0);\n\n    row2 = cm.get(1);\n    assertEquals(row2.size(), 3);\n    assertEquals(row2.get(0).doubleValue(), 1, 0);\n    assertEquals(row2.get(1).doubleValue(), 1, 0);\n    assertEquals(row2.get(2).doubleValue(), 1, 0);\n\n    row3 = cm.get(2);\n    assertEquals(row3.size(), 3);\n    assertEquals(row3.get(0).doubleValue(), 1, 0);\n    assertEquals(row3.get(1).doubleValue(), 1, 0);\n    assertEquals(row3.get(2).doubleValue(), 1, 0);\n\n    cm = (List<List<Number>>)tuples.get(0).get(\"h\");\n    assertEquals(cm.size(), 3);\n    row1 = cm.get(0);\n    assertEquals(row1.size(), 3);\n    assertEquals(row1.get(0).doubleValue(), 1, 0);\n    assertEquals(row1.get(1).doubleValue(), 1, 0);\n    assertEquals(row1.get(2).doubleValue(), 1, 0);\n\n    row2 = cm.get(1);\n    assertEquals(row2.size(), 3);\n    assertEquals(row2.get(0).doubleValue(), 1, 0);\n    assertEquals(row2.get(1).doubleValue(), 1, 0);\n    assertEquals(row2.get(2).doubleValue(), 1, 0);\n\n    row3 = cm.get(2);\n    assertEquals(row3.size(), 3);\n    assertEquals(row3.get(0).doubleValue(), 1, 0);\n    assertEquals(row3.get(1).doubleValue(), 1, 0);\n    assertEquals(row3.get(2).doubleValue(), 1, 0);\n\n    cm = (List<List<Number>>)tuples.get(0).get(\"i\");\n    assertEquals(cm.size(), 3);\n    row1 = cm.get(0);\n    assertEquals(row1.size(), 3);\n    assertEquals(row1.get(0).doubleValue(), 0, 0);\n    assertEquals(row1.get(1).doubleValue(), 0, 0);\n    assertEquals(row1.get(2).doubleValue(), 0.28548201004998375, 0);\n\n    row2 = cm.get(1);\n    assertEquals(row2.size(), 3);\n    assertEquals(row2.get(0).doubleValue(), 0, 0);\n    assertEquals(row2.get(1).doubleValue(), 0, 0);\n    assertEquals(row2.get(2).doubleValue(), 0.28548201004998375, 0);\n\n    row3 = cm.get(2);\n    assertEquals(row3.size(), 3);\n    assertEquals(row3.get(0).doubleValue(), 0.28548201004998375, 0);\n    assertEquals(row3.get(1).doubleValue(), 0.28548201004998375, 0);\n    assertEquals(row3.get(2).doubleValue(), 0, 0);\n  }\n\n","sourceOld":"  @Test\n  public void testCorrMatrix() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n                       \"a=array(1,2,3), \" +\n                       \"b=array(2,4,6), \" +\n                       \"c=array(4, 8, 52), \" +\n                       \"d=transpose(matrix(a, b, c)), \" +\n                       \"f=corr(d), \" +\n                       \"g=corr(d, type=kendalls), \" +\n                       \"h=corr(d, type=spearmans),\" +\n                       \"i=corrPValues(f))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cm = (List<List<Number>>)tuples.get(0).get(\"f\");\n    assertEquals(cm.size(), 3);\n    List<Number> row1 = cm.get(0);\n    assertEquals(row1.size(), 3);\n    assertEquals(row1.get(0).doubleValue(), 1, 0);\n    assertEquals(row1.get(1).doubleValue(), 1, 0);\n    assertEquals(row1.get(2).doubleValue(), 0.901127113779166, 0);\n\n    List<Number> row2 = cm.get(1);\n    assertEquals(row2.size(), 3);\n    assertEquals(row2.get(0).doubleValue(), 1, 0);\n    assertEquals(row2.get(1).doubleValue(), 1, 0);\n    assertEquals(row2.get(2).doubleValue(), 0.901127113779166, 0);\n\n    List<Number> row3 = cm.get(2);\n    assertEquals(row3.size(), 3);\n    assertEquals(row3.get(0).doubleValue(), 0.901127113779166, 0);\n    assertEquals(row3.get(1).doubleValue(), 0.901127113779166, 0);\n    assertEquals(row3.get(2).doubleValue(), 1, 0);\n\n    cm = (List<List<Number>>)tuples.get(0).get(\"g\");\n    assertEquals(cm.size(), 3);\n    row1 = cm.get(0);\n    assertEquals(row1.size(), 3);\n    assertEquals(row1.get(0).doubleValue(), 1, 0);\n    assertEquals(row1.get(1).doubleValue(), 1, 0);\n    assertEquals(row1.get(2).doubleValue(), 1, 0);\n\n    row2 = cm.get(1);\n    assertEquals(row2.size(), 3);\n    assertEquals(row2.get(0).doubleValue(), 1, 0);\n    assertEquals(row2.get(1).doubleValue(), 1, 0);\n    assertEquals(row2.get(2).doubleValue(), 1, 0);\n\n    row3 = cm.get(2);\n    assertEquals(row3.size(), 3);\n    assertEquals(row3.get(0).doubleValue(), 1, 0);\n    assertEquals(row3.get(1).doubleValue(), 1, 0);\n    assertEquals(row3.get(2).doubleValue(), 1, 0);\n\n    cm = (List<List<Number>>)tuples.get(0).get(\"h\");\n    assertEquals(cm.size(), 3);\n    row1 = cm.get(0);\n    assertEquals(row1.size(), 3);\n    assertEquals(row1.get(0).doubleValue(), 1, 0);\n    assertEquals(row1.get(1).doubleValue(), 1, 0);\n    assertEquals(row1.get(2).doubleValue(), 1, 0);\n\n    row2 = cm.get(1);\n    assertEquals(row2.size(), 3);\n    assertEquals(row2.get(0).doubleValue(), 1, 0);\n    assertEquals(row2.get(1).doubleValue(), 1, 0);\n    assertEquals(row2.get(2).doubleValue(), 1, 0);\n\n    row3 = cm.get(2);\n    assertEquals(row3.size(), 3);\n    assertEquals(row3.get(0).doubleValue(), 1, 0);\n    assertEquals(row3.get(1).doubleValue(), 1, 0);\n    assertEquals(row3.get(2).doubleValue(), 1, 0);\n\n    cm = (List<List<Number>>)tuples.get(0).get(\"i\");\n    assertEquals(cm.size(), 3);\n    row1 = cm.get(0);\n    assertEquals(row1.size(), 3);\n    assertEquals(row1.get(0).doubleValue(), 0, 0);\n    assertEquals(row1.get(1).doubleValue(), 0, 0);\n    assertEquals(row1.get(2).doubleValue(), 0.28548201004998375, 0);\n\n    row2 = cm.get(1);\n    assertEquals(row2.size(), 3);\n    assertEquals(row2.get(0).doubleValue(), 0, 0);\n    assertEquals(row2.get(1).doubleValue(), 0, 0);\n    assertEquals(row2.get(2).doubleValue(), 0.28548201004998375, 0);\n\n    row3 = cm.get(2);\n    assertEquals(row3.size(), 3);\n    assertEquals(row3.get(0).doubleValue(), 0.28548201004998375, 0);\n    assertEquals(row3.get(1).doubleValue(), 0.28548201004998375, 0);\n    assertEquals(row3.get(2).doubleValue(), 0, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2a2efb7373cfceb83cf0a7f6e38a1d4ac1833806":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["2a2efb7373cfceb83cf0a7f6e38a1d4ac1833806"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2a2efb7373cfceb83cf0a7f6e38a1d4ac1833806"],"2a2efb7373cfceb83cf0a7f6e38a1d4ac1833806":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}