{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#getAutomaton(String).mjava","commits":[{"id":"cc41b743423981e7ec17a024ce7e107096e472fe","date":1349975327,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#getAutomaton(String).mjava","pathOld":"/dev/null","sourceNew":"  public Automaton getAutomaton(String string) {\n    IntsRef path = new IntsRef();\n    Util.toUTF32(string, path);\n    if (path.length <= 1) {\n      return BasicAutomata.makeString(path.ints, path.offset, path.length);\n    } else {\n      Automaton prefix = BasicAutomata.makeString(path.ints, path.offset, 1);\n      int ints[] = new int[path.length-1-1];\n      System.arraycopy(path.ints, path.offset+1, ints, 0, ints.length);\n      LevenshteinAutomata lev = new LevenshteinAutomata(ints, 256, true);\n      Automaton levAutomaton = lev.toAutomaton(1);\n      Automaton suffix = BasicAutomata.makeString(path.ints, path.length-1, 1);\n      Automaton combined = BasicOperations.concatenate(Arrays.asList(prefix, levAutomaton, suffix, BasicAutomata.makeAnyString()));\n      combined.setDeterministic(true); // its like the special case in concatenate itself, except we cloneExpanded already\n      return combined;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"212b08d3e511c7623bf4c1af7a834f0d0bee0dc8","date":1350576194,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#getAutomaton(String).mjava","sourceNew":null,"sourceOld":"  public Automaton getAutomaton(String string) {\n    IntsRef path = new IntsRef();\n    Util.toUTF32(string, path);\n    if (path.length <= 1) {\n      return BasicAutomata.makeString(path.ints, path.offset, path.length);\n    } else {\n      Automaton prefix = BasicAutomata.makeString(path.ints, path.offset, 1);\n      int ints[] = new int[path.length-1-1];\n      System.arraycopy(path.ints, path.offset+1, ints, 0, ints.length);\n      LevenshteinAutomata lev = new LevenshteinAutomata(ints, 256, true);\n      Automaton levAutomaton = lev.toAutomaton(1);\n      Automaton suffix = BasicAutomata.makeString(path.ints, path.length-1, 1);\n      Automaton combined = BasicOperations.concatenate(Arrays.asList(prefix, levAutomaton, suffix, BasicAutomata.makeAnyString()));\n      combined.setDeterministic(true); // its like the special case in concatenate itself, except we cloneExpanded already\n      return combined;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cc41b743423981e7ec17a024ce7e107096e472fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"212b08d3e511c7623bf4c1af7a834f0d0bee0dc8":["cc41b743423981e7ec17a024ce7e107096e472fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"cc41b743423981e7ec17a024ce7e107096e472fe":["212b08d3e511c7623bf4c1af7a834f0d0bee0dc8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cc41b743423981e7ec17a024ce7e107096e472fe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"212b08d3e511c7623bf4c1af7a834f0d0bee0dc8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["212b08d3e511c7623bf4c1af7a834f0d0bee0dc8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}