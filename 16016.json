{"path":"backwards/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRange(int).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRange(int).mjava","pathOld":"/dev/null","sourceNew":"  /** test for constant score + boolean query + filter, the other tests only use the constant score mode */\n  private void testRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    NumericRangeQuery<Long> q = NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, true);\n    NumericRangeFilter<Long> f = NumericRangeFilter.newLongRange(field, precisionStep, lower, upper, true, true);\n    int lastTerms = 0;\n    for (byte i=0; i<3; i++) {\n      TopDocs topDocs;\n      int terms;\n      String type;\n      q.clearTotalNumberOfTerms();\n      f.clearTotalNumberOfTerms();\n      switch (i) {\n        case 0:\n          type = \" (constant score filter rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 1:\n          type = \" (constant score boolean rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 2:\n          type = \" (filter)\";\n          topDocs = searcher.search(new MatchAllDocsQuery(), f, noDocs, Sort.INDEXORDER);\n          terms = f.getTotalNumberOfTerms();\n          break;\n        default:\n          return;\n      }\n      System.out.println(\"Found \"+terms+\" distinct terms in range for field '\"+field+\"'\"+type+\".\");\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      assertEquals(\"Score doc count\"+type, count, sd.length );\n      Document doc=searcher.doc(sd[0].doc);\n      assertEquals(\"First doc\"+type, 2*distance+startOffset, Long.parseLong(doc.get(field)) );\n      doc=searcher.doc(sd[sd.length-1].doc);\n      assertEquals(\"Last doc\"+type, (1+count)*distance+startOffset, Long.parseLong(doc.get(field)) );\n      if (i>0) {\n        assertEquals(\"Distinct term number is equal for all query types\", lastTerms, terms);\n      }\n      lastTerms = terms;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRange(int).mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRange(int).mjava","sourceNew":"  /** test for constant score + boolean query + filter, the other tests only use the constant score mode */\n  private void testRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    NumericRangeQuery<Long> q = NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, true);\n    NumericRangeFilter<Long> f = NumericRangeFilter.newLongRange(field, precisionStep, lower, upper, true, true);\n    int lastTerms = 0;\n    for (byte i=0; i<3; i++) {\n      TopDocs topDocs;\n      int terms;\n      String type;\n      q.clearTotalNumberOfTerms();\n      f.clearTotalNumberOfTerms();\n      switch (i) {\n        case 0:\n          type = \" (constant score filter rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 1:\n          type = \" (constant score boolean rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 2:\n          type = \" (filter)\";\n          topDocs = searcher.search(new MatchAllDocsQuery(), f, noDocs, Sort.INDEXORDER);\n          terms = f.getTotalNumberOfTerms();\n          break;\n        default:\n          return;\n      }\n      System.out.println(\"Found \"+terms+\" distinct terms in range for field '\"+field+\"'\"+type+\".\");\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      assertEquals(\"Score doc count\"+type, count, sd.length );\n      Document doc=searcher.doc(sd[0].doc);\n      assertEquals(\"First doc\"+type, 2*distance+startOffset, Long.parseLong(doc.get(field)) );\n      doc=searcher.doc(sd[sd.length-1].doc);\n      assertEquals(\"Last doc\"+type, (1+count)*distance+startOffset, Long.parseLong(doc.get(field)) );\n      if (i>0) {\n        assertEquals(\"Distinct term number is equal for all query types\", lastTerms, terms);\n      }\n      lastTerms = terms;\n    }\n  }\n\n","sourceOld":"  /** test for constant score + boolean query + filter, the other tests only use the constant score mode */\n  private void testRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    NumericRangeQuery<Long> q = NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, true);\n    NumericRangeFilter<Long> f = NumericRangeFilter.newLongRange(field, precisionStep, lower, upper, true, true);\n    int lastTerms = 0;\n    for (byte i=0; i<3; i++) {\n      TopDocs topDocs;\n      int terms;\n      String type;\n      q.clearTotalNumberOfTerms();\n      f.clearTotalNumberOfTerms();\n      switch (i) {\n        case 0:\n          type = \" (constant score filter rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 1:\n          type = \" (constant score boolean rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 2:\n          type = \" (filter)\";\n          topDocs = searcher.search(new MatchAllDocsQuery(), f, noDocs, Sort.INDEXORDER);\n          terms = f.getTotalNumberOfTerms();\n          break;\n        default:\n          return;\n      }\n      System.out.println(\"Found \"+terms+\" distinct terms in range for field '\"+field+\"'\"+type+\".\");\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      assertEquals(\"Score doc count\"+type, count, sd.length );\n      Document doc=searcher.doc(sd[0].doc);\n      assertEquals(\"First doc\"+type, 2*distance+startOffset, Long.parseLong(doc.get(field)) );\n      doc=searcher.doc(sd[sd.length-1].doc);\n      assertEquals(\"Last doc\"+type, (1+count)*distance+startOffset, Long.parseLong(doc.get(field)) );\n      if (i>0) {\n        assertEquals(\"Distinct term number is equal for all query types\", lastTerms, terms);\n      }\n      lastTerms = terms;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}