{"path":"src/java/org/apache/solr/handler/component/QueryComponent#returnFields(ResponseBuilder,ShardRequest).mjava","commits":[{"id":"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76","date":1204055227,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/QueryComponent#returnFields(ResponseBuilder,ShardRequest).mjava","pathOld":"/dev/null","sourceNew":"  private void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    // Keep in mind that this could also be a shard in a multi-tiered system.\n    // TODO: if a multi-tiered system, it seems like some requests\n    // could/should bypass middlemen (like retrieving stored fields)\n    // TODO: merge fsv to if requested\n\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      assert(sreq.responses.size() == 1);\n      ShardResponse srsp = sreq.responses.get(0);\n      SolrDocumentList docs = (SolrDocumentList)srsp.rsp.getResponse().get(\"response\");\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n      for (SolrDocument doc : docs) {\n        Object id = doc.getFieldValue(keyFieldName);\n        ShardDoc sdoc = rb.resultIds.get(id.toString());\n        if (returnScores && sdoc.score != null) {\n          doc.setField(\"score\", sdoc.score);\n        }\n        rb._responseDocs.set(sdoc.positionInResponse, doc);\n      }      \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0e69935771ba8cb2303a86bf8a42be7861eaf1da"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"db25c1f61b5ae826f10777da6551a832703967d5","date":1215306972,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/QueryComponent#returnFields(ResponseBuilder,ShardRequest).mjava","pathOld":"src/java/org/apache/solr/handler/component/QueryComponent#returnFields(ResponseBuilder,ShardRequest).mjava","sourceNew":"  private void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    // Keep in mind that this could also be a shard in a multi-tiered system.\n    // TODO: if a multi-tiered system, it seems like some requests\n    // could/should bypass middlemen (like retrieving stored fields)\n    // TODO: merge fsv to if requested\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      assert(sreq.responses.size() == 1);\n      ShardResponse srsp = sreq.responses.get(0);\n      SolrDocumentList docs = (SolrDocumentList)srsp.rsp.getResponse().get(\"response\");\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n      for (SolrDocument doc : docs) {\n        Object id = doc.getFieldValue(keyFieldName);\n        ShardDoc sdoc = rb.resultIds.get(id.toString());\n        if (returnScores && sdoc.score != null) {\n          doc.setField(\"score\", sdoc.score);\n        }\n        rb._responseDocs.set(sdoc.positionInResponse, doc);\n      }      \n    }\n  }\n\n","sourceOld":"  private void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    // Keep in mind that this could also be a shard in a multi-tiered system.\n    // TODO: if a multi-tiered system, it seems like some requests\n    // could/should bypass middlemen (like retrieving stored fields)\n    // TODO: merge fsv to if requested\n\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      assert(sreq.responses.size() == 1);\n      ShardResponse srsp = sreq.responses.get(0);\n      SolrDocumentList docs = (SolrDocumentList)srsp.rsp.getResponse().get(\"response\");\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n      for (SolrDocument doc : docs) {\n        Object id = doc.getFieldValue(keyFieldName);\n        ShardDoc sdoc = rb.resultIds.get(id.toString());\n        if (returnScores && sdoc.score != null) {\n          doc.setField(\"score\", sdoc.score);\n        }\n        rb._responseDocs.set(sdoc.positionInResponse, doc);\n      }      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e69935771ba8cb2303a86bf8a42be7861eaf1da","date":1216694040,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/QueryComponent#returnFields(ResponseBuilder,ShardRequest).mjava","pathOld":"src/java/org/apache/solr/handler/component/QueryComponent#returnFields(ResponseBuilder,ShardRequest).mjava","sourceNew":"  private void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    // Keep in mind that this could also be a shard in a multi-tiered system.\n    // TODO: if a multi-tiered system, it seems like some requests\n    // could/should bypass middlemen (like retrieving stored fields)\n    // TODO: merge fsv to if requested\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      assert(sreq.responses.size() == 1);\n      ShardResponse srsp = sreq.responses.get(0);\n      SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n      for (SolrDocument doc : docs) {\n        Object id = doc.getFieldValue(keyFieldName);\n        ShardDoc sdoc = rb.resultIds.get(id.toString());\n        if (returnScores && sdoc.score != null) {\n          doc.setField(\"score\", sdoc.score);\n        }\n        rb._responseDocs.set(sdoc.positionInResponse, doc);\n      }      \n    }\n  }\n\n","sourceOld":"  private void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    // Keep in mind that this could also be a shard in a multi-tiered system.\n    // TODO: if a multi-tiered system, it seems like some requests\n    // could/should bypass middlemen (like retrieving stored fields)\n    // TODO: merge fsv to if requested\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      assert(sreq.responses.size() == 1);\n      ShardResponse srsp = sreq.responses.get(0);\n      SolrDocumentList docs = (SolrDocumentList)srsp.rsp.getResponse().get(\"response\");\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n      for (SolrDocument doc : docs) {\n        Object id = doc.getFieldValue(keyFieldName);\n        ShardDoc sdoc = rb.resultIds.get(id.toString());\n        if (returnScores && sdoc.score != null) {\n          doc.setField(\"score\", sdoc.score);\n        }\n        rb._responseDocs.set(sdoc.positionInResponse, doc);\n      }      \n    }\n  }\n\n","bugFix":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b240c33c89713e9821af46e867f4710eb811864","date":1261647570,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/QueryComponent#returnFields(ResponseBuilder,ShardRequest).mjava","pathOld":"src/java/org/apache/solr/handler/component/QueryComponent#returnFields(ResponseBuilder,ShardRequest).mjava","sourceNew":"  private void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    // Keep in mind that this could also be a shard in a multi-tiered system.\n    // TODO: if a multi-tiered system, it seems like some requests\n    // could/should bypass middlemen (like retrieving stored fields)\n    // TODO: merge fsv to if requested\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      assert(sreq.responses.size() == 1);\n      ShardResponse srsp = sreq.responses.get(0);\n      SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n      for (SolrDocument doc : docs) {\n        Object id = doc.getFieldValue(keyFieldName);\n        ShardDoc sdoc = rb.resultIds.get(id.toString());\n        if (sdoc != null) {\n          if (returnScores && sdoc.score != null) {\n              doc.setField(\"score\", sdoc.score);\n          }\n          rb._responseDocs.set(sdoc.positionInResponse, doc);\n        }\n      }      \n    }\n  }\n\n","sourceOld":"  private void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    // Keep in mind that this could also be a shard in a multi-tiered system.\n    // TODO: if a multi-tiered system, it seems like some requests\n    // could/should bypass middlemen (like retrieving stored fields)\n    // TODO: merge fsv to if requested\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      assert(sreq.responses.size() == 1);\n      ShardResponse srsp = sreq.responses.get(0);\n      SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n      for (SolrDocument doc : docs) {\n        Object id = doc.getFieldValue(keyFieldName);\n        ShardDoc sdoc = rb.resultIds.get(id.toString());\n        if (returnScores && sdoc.score != null) {\n          doc.setField(\"score\", sdoc.score);\n        }\n        rb._responseDocs.set(sdoc.positionInResponse, doc);\n      }      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryComponent#returnFields(ResponseBuilder,ShardRequest).mjava","pathOld":"src/java/org/apache/solr/handler/component/QueryComponent#returnFields(ResponseBuilder,ShardRequest).mjava","sourceNew":"  private void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    // Keep in mind that this could also be a shard in a multi-tiered system.\n    // TODO: if a multi-tiered system, it seems like some requests\n    // could/should bypass middlemen (like retrieving stored fields)\n    // TODO: merge fsv to if requested\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      assert(sreq.responses.size() == 1);\n      ShardResponse srsp = sreq.responses.get(0);\n      SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n      for (SolrDocument doc : docs) {\n        Object id = doc.getFieldValue(keyFieldName);\n        ShardDoc sdoc = rb.resultIds.get(id.toString());\n        if (sdoc != null) {\n          if (returnScores && sdoc.score != null) {\n              doc.setField(\"score\", sdoc.score);\n          }\n          rb._responseDocs.set(sdoc.positionInResponse, doc);\n        }\n      }      \n    }\n  }\n\n","sourceOld":"  private void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    // Keep in mind that this could also be a shard in a multi-tiered system.\n    // TODO: if a multi-tiered system, it seems like some requests\n    // could/should bypass middlemen (like retrieving stored fields)\n    // TODO: merge fsv to if requested\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      assert(sreq.responses.size() == 1);\n      ShardResponse srsp = sreq.responses.get(0);\n      SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n      for (SolrDocument doc : docs) {\n        Object id = doc.getFieldValue(keyFieldName);\n        ShardDoc sdoc = rb.resultIds.get(id.toString());\n        if (sdoc != null) {\n          if (returnScores && sdoc.score != null) {\n              doc.setField(\"score\", sdoc.score);\n          }\n          rb._responseDocs.set(sdoc.positionInResponse, doc);\n        }\n      }      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"0e69935771ba8cb2303a86bf8a42be7861eaf1da":["db25c1f61b5ae826f10777da6551a832703967d5"],"db25c1f61b5ae826f10777da6551a832703967d5":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"ad94625fb8d088209f46650c8097196fec67f00c":["9b240c33c89713e9821af46e867f4710eb811864"],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"9b240c33c89713e9821af46e867f4710eb811864":["0e69935771ba8cb2303a86bf8a42be7861eaf1da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"0e69935771ba8cb2303a86bf8a42be7861eaf1da":["9b240c33c89713e9821af46e867f4710eb811864"],"db25c1f61b5ae826f10777da6551a832703967d5":["0e69935771ba8cb2303a86bf8a42be7861eaf1da"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["db25c1f61b5ae826f10777da6551a832703967d5"],"9b240c33c89713e9821af46e867f4710eb811864":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}