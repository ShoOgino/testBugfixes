{"path":"lucene/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,DocsAndPositionsEnum[],int[],Similarity,byte[]).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,DocsAndPositionsEnum[],int[],Similarity,byte[]).mjava","pathOld":"/dev/null","sourceNew":"  PhraseScorer(Weight weight, DocsAndPositionsEnum[] postings, int[] offsets,\n      Similarity similarity, byte[] norms) {\n    super(similarity);\n    this.norms = norms;\n    this.weight = weight;\n    this.value = weight.getValue();\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    for (int i = 0; i < postings.length; i++) {\n      PhrasePositions pp = new PhrasePositions(postings[i], offsets[i]);\n      if (last != null) {\t\t\t  // add next to end of list\n        last.next = pp;\n      } else {\n        first = pp;\n      }\n      last = pp;\n    }\n\n    pq = new PhraseQueue(postings.length);             // construct empty pq\n    first.doc = -1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c9ff635e6838a2facda02727dec5b77d9e64dc4c","c9ff635e6838a2facda02727dec5b77d9e64dc4c","c9ff635e6838a2facda02727dec5b77d9e64dc4c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"953de31d76c9d58f1e3f4e41ff8a48a1529226de","date":1277371072,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity,byte[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,DocsAndPositionsEnum[],int[],Similarity,byte[]).mjava","sourceNew":"  PhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      Similarity similarity, byte[] norms) {\n    super(similarity);\n    this.norms = norms;\n    this.weight = weight;\n    this.value = weight.getValue();\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    for (int i = 0; i < postings.length; i++) {\n      PhrasePositions pp = new PhrasePositions(postings[i].postings, postings[i].position);\n      if (last != null) {\t\t\t  // add next to end of list\n        last.next = pp;\n      } else {\n        first = pp;\n      }\n      last = pp;\n    }\n\n    pq = new PhraseQueue(postings.length);             // construct empty pq\n    first.doc = -1;\n  }\n\n","sourceOld":"  PhraseScorer(Weight weight, DocsAndPositionsEnum[] postings, int[] offsets,\n      Similarity similarity, byte[] norms) {\n    super(similarity);\n    this.norms = norms;\n    this.weight = weight;\n    this.value = weight.getValue();\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    for (int i = 0; i < postings.length; i++) {\n      PhrasePositions pp = new PhrasePositions(postings[i], offsets[i]);\n      if (last != null) {\t\t\t  // add next to end of list\n        last.next = pp;\n      } else {\n        first = pp;\n      }\n      last = pp;\n    }\n\n    pq = new PhraseQueue(postings.length);             // construct empty pq\n    first.doc = -1;\n  }\n\n","bugFix":null,"bugIntro":["f0852ebe96f807ea1c84a88f9aaa4985a2088594"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,DocsAndPositionsEnum[],int[],Similarity,byte[]).mjava","sourceNew":null,"sourceOld":"  PhraseScorer(Weight weight, DocsAndPositionsEnum[] postings, int[] offsets,\n      Similarity similarity, byte[] norms) {\n    super(similarity);\n    this.norms = norms;\n    this.weight = weight;\n    this.value = weight.getValue();\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    for (int i = 0; i < postings.length; i++) {\n      PhrasePositions pp = new PhrasePositions(postings[i], offsets[i]);\n      if (last != null) {\t\t\t  // add next to end of list\n        last.next = pp;\n      } else {\n        first = pp;\n      }\n      last = pp;\n    }\n\n    pq = new PhraseQueue(postings.length);             // construct empty pq\n    first.doc = -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"953de31d76c9d58f1e3f4e41ff8a48a1529226de":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5f4e87790277826a2aea119328600dfb07761f32":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","953de31d76c9d58f1e3f4e41ff8a48a1529226de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["953de31d76c9d58f1e3f4e41ff8a48a1529226de"]},"commit2Childs":{"953de31d76c9d58f1e3f4e41ff8a48a1529226de":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["953de31d76c9d58f1e3f4e41ff8a48a1529226de","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}