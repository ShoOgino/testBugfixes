{"path":"contrib/analyzers/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#compact(CharVector,TernaryTree,char).mjava","commits":[{"id":"dbb53146e3651ed4ebca43f69ee26f9150c6cb5a","date":1210940570,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#compact(CharVector,TernaryTree,char).mjava","pathOld":"/dev/null","sourceNew":"  private void compact(CharVector kx, TernaryTree map, char p) {\n    int k;\n    if (p == 0) {\n      return;\n    }\n    if (sc[p] == 0xFFFF) {\n      k = map.find(kv.getArray(), lo[p]);\n      if (k < 0) {\n        k = kx.alloc(strlen(kv.getArray(), lo[p]) + 1);\n        strcpy(kx.getArray(), k, kv.getArray(), lo[p]);\n        map.insert(kx.getArray(), k, (char) k);\n      }\n      lo[p] = (char) k;\n    } else {\n      compact(kx, map, lo[p]);\n      if (sc[p] != 0) {\n        compact(kx, map, eq[p]);\n      }\n      compact(kx, map, hi[p]);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#compact(CharVector,TernaryTree,char).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#compact(CharVector,TernaryTree,char).mjava","sourceNew":"  private void compact(CharVector kx, TernaryTree map, char p) {\n    int k;\n    if (p == 0) {\n      return;\n    }\n    if (sc[p] == 0xFFFF) {\n      k = map.find(kv.getArray(), lo[p]);\n      if (k < 0) {\n        k = kx.alloc(strlen(kv.getArray(), lo[p]) + 1);\n        strcpy(kx.getArray(), k, kv.getArray(), lo[p]);\n        map.insert(kx.getArray(), k, (char) k);\n      }\n      lo[p] = (char) k;\n    } else {\n      compact(kx, map, lo[p]);\n      if (sc[p] != 0) {\n        compact(kx, map, eq[p]);\n      }\n      compact(kx, map, hi[p]);\n    }\n  }\n\n","sourceOld":"  private void compact(CharVector kx, TernaryTree map, char p) {\n    int k;\n    if (p == 0) {\n      return;\n    }\n    if (sc[p] == 0xFFFF) {\n      k = map.find(kv.getArray(), lo[p]);\n      if (k < 0) {\n        k = kx.alloc(strlen(kv.getArray(), lo[p]) + 1);\n        strcpy(kx.getArray(), k, kv.getArray(), lo[p]);\n        map.insert(kx.getArray(), k, (char) k);\n      }\n      lo[p] = (char) k;\n    } else {\n      compact(kx, map, lo[p]);\n      if (sc[p] != 0) {\n        compact(kx, map, eq[p]);\n      }\n      compact(kx, map, hi[p]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dbb53146e3651ed4ebca43f69ee26f9150c6cb5a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["dbb53146e3651ed4ebca43f69ee26f9150c6cb5a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd745d580729e528151b58aeda87ef82f1b95c9b"]},"commit2Childs":{"dbb53146e3651ed4ebca43f69ee26f9150c6cb5a":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dbb53146e3651ed4ebca43f69ee26f9150c6cb5a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}