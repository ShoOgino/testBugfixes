{"path":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testMultipleTerms().mjava","commits":[{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testMultipleTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testMulipleTerms().mjava","sourceNew":"  /**\n   * slop is the total number of positional moves allowed\n   * to line up a phrase\n   */\n  public void testMultipleTerms() throws Exception {\n    query.setSlop(2);\n    query.add(new Term(\"field\", \"one\"));\n    query.add(new Term(\"field\", \"three\"));\n    query.add(new Term(\"field\", \"five\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"two total moves\", 1, hits.length);\n    QueryUtils.check(random(), query,searcher);\n\n\n    query = new PhraseQuery();\n    query.setSlop(5); // it takes six moves to match this phrase\n    query.add(new Term(\"field\", \"five\"));\n    query.add(new Term(\"field\", \"three\"));\n    query.add(new Term(\"field\", \"one\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"slop of 5 not close enough\", 0, hits.length);\n    QueryUtils.check(random(), query,searcher);\n\n\n    query.setSlop(6);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"slop of 6 just right\", 1, hits.length);\n    QueryUtils.check(random(), query,searcher);\n\n  }\n\n","sourceOld":"  /**\n   * slop is the total number of positional moves allowed\n   * to line up a phrase\n   */\n  public void testMulipleTerms() throws Exception {\n    query.setSlop(2);\n    query.add(new Term(\"field\", \"one\"));\n    query.add(new Term(\"field\", \"three\"));\n    query.add(new Term(\"field\", \"five\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"two total moves\", 1, hits.length);\n    QueryUtils.check(random(), query,searcher);\n\n\n    query = new PhraseQuery();\n    query.setSlop(5); // it takes six moves to match this phrase\n    query.add(new Term(\"field\", \"five\"));\n    query.add(new Term(\"field\", \"three\"));\n    query.add(new Term(\"field\", \"one\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"slop of 5 not close enough\", 0, hits.length);\n    QueryUtils.check(random(), query,searcher);\n\n\n    query.setSlop(6);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"slop of 6 just right\", 1, hits.length);\n    QueryUtils.check(random(), query,searcher);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testMultipleTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testMultipleTerms().mjava","sourceNew":"  /**\n   * slop is the total number of positional moves allowed\n   * to line up a phrase\n   */\n  public void testMultipleTerms() throws Exception {\n    query.setSlop(2);\n    query.add(new Term(\"field\", \"one\"));\n    query.add(new Term(\"field\", \"three\"));\n    query.add(new Term(\"field\", \"five\"));\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(\"two total moves\", 1, hits.length);\n    QueryUtils.check(random(), query,searcher);\n\n\n    query = new PhraseQuery();\n    query.setSlop(5); // it takes six moves to match this phrase\n    query.add(new Term(\"field\", \"five\"));\n    query.add(new Term(\"field\", \"three\"));\n    query.add(new Term(\"field\", \"one\"));\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(\"slop of 5 not close enough\", 0, hits.length);\n    QueryUtils.check(random(), query,searcher);\n\n\n    query.setSlop(6);\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(\"slop of 6 just right\", 1, hits.length);\n    QueryUtils.check(random(), query,searcher);\n\n  }\n\n","sourceOld":"  /**\n   * slop is the total number of positional moves allowed\n   * to line up a phrase\n   */\n  public void testMultipleTerms() throws Exception {\n    query.setSlop(2);\n    query.add(new Term(\"field\", \"one\"));\n    query.add(new Term(\"field\", \"three\"));\n    query.add(new Term(\"field\", \"five\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"two total moves\", 1, hits.length);\n    QueryUtils.check(random(), query,searcher);\n\n\n    query = new PhraseQuery();\n    query.setSlop(5); // it takes six moves to match this phrase\n    query.add(new Term(\"field\", \"five\"));\n    query.add(new Term(\"field\", \"three\"));\n    query.add(new Term(\"field\", \"one\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"slop of 5 not close enough\", 0, hits.length);\n    QueryUtils.check(random(), query,searcher);\n\n\n    query.setSlop(6);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"slop of 6 just right\", 1, hits.length);\n    QueryUtils.check(random(), query,searcher);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9e1499c5d26c936238506df90a3c02c76707722","date":1434449920,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testMultipleTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testMultipleTerms().mjava","sourceNew":"  /**\n   * slop is the total number of positional moves allowed\n   * to line up a phrase\n   */\n  public void testMultipleTerms() throws Exception {\n    query = new PhraseQuery(2, \"field\", \"one\", \"three\", \"five\");\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(\"two total moves\", 1, hits.length);\n    QueryUtils.check(random(), query,searcher);\n\n    // it takes six moves to match this phrase\n    query = new PhraseQuery(5, \"field\", \"five\", \"three\", \"one\");\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(\"slop of 5 not close enough\", 0, hits.length);\n    QueryUtils.check(random(), query,searcher);\n\n\n    query = new PhraseQuery(6, \"field\", \"five\", \"three\", \"one\");\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(\"slop of 6 just right\", 1, hits.length);\n    QueryUtils.check(random(), query,searcher);\n\n  }\n\n","sourceOld":"  /**\n   * slop is the total number of positional moves allowed\n   * to line up a phrase\n   */\n  public void testMultipleTerms() throws Exception {\n    query.setSlop(2);\n    query.add(new Term(\"field\", \"one\"));\n    query.add(new Term(\"field\", \"three\"));\n    query.add(new Term(\"field\", \"five\"));\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(\"two total moves\", 1, hits.length);\n    QueryUtils.check(random(), query,searcher);\n\n\n    query = new PhraseQuery();\n    query.setSlop(5); // it takes six moves to match this phrase\n    query.add(new Term(\"field\", \"five\"));\n    query.add(new Term(\"field\", \"three\"));\n    query.add(new Term(\"field\", \"one\"));\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(\"slop of 5 not close enough\", 0, hits.length);\n    QueryUtils.check(random(), query,searcher);\n\n\n    query.setSlop(6);\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(\"slop of 6 just right\", 1, hits.length);\n    QueryUtils.check(random(), query,searcher);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9e1499c5d26c936238506df90a3c02c76707722":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["51f5280f31484820499077f41fcdfe92d527d9dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"51f5280f31484820499077f41fcdfe92d527d9dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e9e1499c5d26c936238506df90a3c02c76707722"]},"commit2Childs":{"e9e1499c5d26c936238506df90a3c02c76707722":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["e9e1499c5d26c936238506df90a3c02c76707722"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["51f5280f31484820499077f41fcdfe92d527d9dc"],"51f5280f31484820499077f41fcdfe92d527d9dc":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}