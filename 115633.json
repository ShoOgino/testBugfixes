{"path":"solr/src/test/org/apache/solr/update/AutoCommitTest#testSoftCommitMaxTime().mjava","commits":[{"id":"7a71a0b2d4be2299a163f60626729852d81a8e02","date":1309442399,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/update/AutoCommitTest#testSoftCommitMaxTime().mjava","pathOld":"/dev/null","sourceNew":"  public void testSoftCommitMaxTime() throws Exception {\n    SolrCore core = h.getCore();\n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.commitTracker;\n    CommitTracker softTracker = updater.softCommitTracker;\n    \n    // too low of a number can cause a slow host to commit before the test code checks that it\n    // isn't there... causing a failure at \"shouldn't find any\"\n    softTracker.timeUpperBound = 2000;\n    softTracker.docsUpperBound = -1;\n    // updater.commitCallbacks.add(trigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it it is in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForNewSearcher(30000));\n    trigger.reset();\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // But not this one\n    assertQ(\"should find none\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete the document\n    assertU( delI(\"529\") );\n    assertQ(\"deleted, but should still be there\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForNewSearcher(15000));\n    trigger.reset();\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"550\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n    assertEquals( 2, softTracker.getCommitCount() );\n    assertQ(\"deleted and time has passed\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // now make the call 5 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"500\" ), null ) );\n    for( int i=0;i<5; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForNewSearcher(15000));\n    trigger.reset();\n    \n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"531\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n    assertEquals( 3, softTracker.getCommitCount() );\n    assertEquals( 0, tracker.getCommitCount() );\n    \n    assertQ(\"now it should\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"but not this\", req(\"id:531\") ,\"//result[@numFound=0]\" );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4b0203706833d89696e68ebfc15ecdc12ff58acd","4b0203706833d89696e68ebfc15ecdc12ff58acd","4b0203706833d89696e68ebfc15ecdc12ff58acd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/update/AutoCommitTest#testSoftCommitMaxTime().mjava","pathOld":"/dev/null","sourceNew":"  public void testSoftCommitMaxTime() throws Exception {\n    SolrCore core = h.getCore();\n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.commitTracker;\n    CommitTracker softTracker = updater.softCommitTracker;\n    \n    // too low of a number can cause a slow host to commit before the test code checks that it\n    // isn't there... causing a failure at \"shouldn't find any\"\n    softTracker.timeUpperBound = 2000;\n    softTracker.docsUpperBound = -1;\n    // updater.commitCallbacks.add(trigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it it is in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForNewSearcher(30000));\n    trigger.reset();\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // But not this one\n    assertQ(\"should find none\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete the document\n    assertU( delI(\"529\") );\n    assertQ(\"deleted, but should still be there\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForNewSearcher(15000));\n    trigger.reset();\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"550\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n    assertEquals( 2, softTracker.getCommitCount() );\n    assertQ(\"deleted and time has passed\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // now make the call 5 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"500\" ), null ) );\n    for( int i=0;i<5; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForNewSearcher(15000));\n    trigger.reset();\n    \n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"531\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n    assertEquals( 3, softTracker.getCommitCount() );\n    assertEquals( 0, tracker.getCommitCount() );\n    \n    assertQ(\"now it should\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"but not this\", req(\"id:531\") ,\"//result[@numFound=0]\" );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/update/AutoCommitTest#testSoftCommitMaxTime().mjava","pathOld":"/dev/null","sourceNew":"  public void testSoftCommitMaxTime() throws Exception {\n    SolrCore core = h.getCore();\n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.commitTracker;\n    CommitTracker softTracker = updater.softCommitTracker;\n    \n    // too low of a number can cause a slow host to commit before the test code checks that it\n    // isn't there... causing a failure at \"shouldn't find any\"\n    softTracker.timeUpperBound = 2000;\n    softTracker.docsUpperBound = -1;\n    // updater.commitCallbacks.add(trigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it it is in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForNewSearcher(30000));\n    trigger.reset();\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // But not this one\n    assertQ(\"should find none\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete the document\n    assertU( delI(\"529\") );\n    assertQ(\"deleted, but should still be there\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForNewSearcher(15000));\n    trigger.reset();\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"550\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n    assertEquals( 2, softTracker.getCommitCount() );\n    assertQ(\"deleted and time has passed\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // now make the call 5 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"500\" ), null ) );\n    for( int i=0;i<5; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForNewSearcher(15000));\n    trigger.reset();\n    \n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"531\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n    assertEquals( 3, softTracker.getCommitCount() );\n    assertEquals( 0, tracker.getCommitCount() );\n    \n    assertQ(\"now it should\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"but not this\", req(\"id:531\") ,\"//result[@numFound=0]\" );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testSoftCommitMaxTime().mjava","pathOld":"solr/src/test/org/apache/solr/update/AutoCommitTest#testSoftCommitMaxTime().mjava","sourceNew":"  public void testSoftCommitMaxTime() throws Exception {\n    SolrCore core = h.getCore();\n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.commitTracker;\n    CommitTracker softTracker = updater.softCommitTracker;\n    \n    // too low of a number can cause a slow host to commit before the test code checks that it\n    // isn't there... causing a failure at \"shouldn't find any\"\n    softTracker.timeUpperBound = 2000;\n    softTracker.docsUpperBound = -1;\n    // updater.commitCallbacks.add(trigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it it is in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForNewSearcher(30000));\n    trigger.reset();\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // But not this one\n    assertQ(\"should find none\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete the document\n    assertU( delI(\"529\") );\n    assertQ(\"deleted, but should still be there\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForNewSearcher(15000));\n    trigger.reset();\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"550\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n    assertEquals( 2, softTracker.getCommitCount() );\n    assertQ(\"deleted and time has passed\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // now make the call 5 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"500\" ), null ) );\n    for( int i=0;i<5; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForNewSearcher(15000));\n    trigger.reset();\n    \n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"531\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n    assertEquals( 3, softTracker.getCommitCount() );\n    assertEquals( 0, tracker.getCommitCount() );\n    \n    assertQ(\"now it should\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"but not this\", req(\"id:531\") ,\"//result[@numFound=0]\" );\n  }\n\n","sourceOld":"  public void testSoftCommitMaxTime() throws Exception {\n    SolrCore core = h.getCore();\n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.commitTracker;\n    CommitTracker softTracker = updater.softCommitTracker;\n    \n    // too low of a number can cause a slow host to commit before the test code checks that it\n    // isn't there... causing a failure at \"shouldn't find any\"\n    softTracker.timeUpperBound = 2000;\n    softTracker.docsUpperBound = -1;\n    // updater.commitCallbacks.add(trigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it it is in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForNewSearcher(30000));\n    trigger.reset();\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // But not this one\n    assertQ(\"should find none\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete the document\n    assertU( delI(\"529\") );\n    assertQ(\"deleted, but should still be there\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForNewSearcher(15000));\n    trigger.reset();\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"550\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n    assertEquals( 2, softTracker.getCommitCount() );\n    assertQ(\"deleted and time has passed\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // now make the call 5 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"500\" ), null ) );\n    for( int i=0;i<5; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForNewSearcher(15000));\n    trigger.reset();\n    \n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"531\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n    assertEquals( 3, softTracker.getCommitCount() );\n    assertEquals( 0, tracker.getCommitCount() );\n    \n    assertQ(\"now it should\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"but not this\", req(\"id:531\") ,\"//result[@numFound=0]\" );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testSoftCommitMaxTime().mjava","pathOld":"solr/src/test/org/apache/solr/update/AutoCommitTest#testSoftCommitMaxTime().mjava","sourceNew":"  public void testSoftCommitMaxTime() throws Exception {\n    SolrCore core = h.getCore();\n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.commitTracker;\n    CommitTracker softTracker = updater.softCommitTracker;\n    \n    // too low of a number can cause a slow host to commit before the test code checks that it\n    // isn't there... causing a failure at \"shouldn't find any\"\n    softTracker.timeUpperBound = 2000;\n    softTracker.docsUpperBound = -1;\n    // updater.commitCallbacks.add(trigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it it is in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForNewSearcher(30000));\n    trigger.reset();\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // But not this one\n    assertQ(\"should find none\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete the document\n    assertU( delI(\"529\") );\n    assertQ(\"deleted, but should still be there\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForNewSearcher(15000));\n    trigger.reset();\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"550\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n    assertEquals( 2, softTracker.getCommitCount() );\n    assertQ(\"deleted and time has passed\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // now make the call 5 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"500\" ), null ) );\n    for( int i=0;i<5; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForNewSearcher(15000));\n    trigger.reset();\n    \n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"531\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n    assertEquals( 3, softTracker.getCommitCount() );\n    assertEquals( 0, tracker.getCommitCount() );\n    \n    assertQ(\"now it should\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"but not this\", req(\"id:531\") ,\"//result[@numFound=0]\" );\n  }\n\n","sourceOld":"  public void testSoftCommitMaxTime() throws Exception {\n    SolrCore core = h.getCore();\n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.commitTracker;\n    CommitTracker softTracker = updater.softCommitTracker;\n    \n    // too low of a number can cause a slow host to commit before the test code checks that it\n    // isn't there... causing a failure at \"shouldn't find any\"\n    softTracker.timeUpperBound = 2000;\n    softTracker.docsUpperBound = -1;\n    // updater.commitCallbacks.add(trigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it it is in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForNewSearcher(30000));\n    trigger.reset();\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // But not this one\n    assertQ(\"should find none\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete the document\n    assertU( delI(\"529\") );\n    assertQ(\"deleted, but should still be there\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForNewSearcher(15000));\n    trigger.reset();\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"550\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n    assertEquals( 2, softTracker.getCommitCount() );\n    assertQ(\"deleted and time has passed\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // now make the call 5 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"500\" ), null ) );\n    for( int i=0;i<5; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForNewSearcher(15000));\n    trigger.reset();\n    \n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"531\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n    assertEquals( 3, softTracker.getCommitCount() );\n    assertEquals( 0, tracker.getCommitCount() );\n    \n    assertQ(\"now it should\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"but not this\", req(\"id:531\") ,\"//result[@numFound=0]\" );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testSoftCommitMaxTime().mjava","pathOld":"solr/src/test/org/apache/solr/update/AutoCommitTest#testSoftCommitMaxTime().mjava","sourceNew":"  public void testSoftCommitMaxTime() throws Exception {\n    SolrCore core = h.getCore();\n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.commitTracker;\n    CommitTracker softTracker = updater.softCommitTracker;\n    \n    // too low of a number can cause a slow host to commit before the test code checks that it\n    // isn't there... causing a failure at \"shouldn't find any\"\n    softTracker.timeUpperBound = 2000;\n    softTracker.docsUpperBound = -1;\n    // updater.commitCallbacks.add(trigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it it is in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForNewSearcher(30000));\n    trigger.reset();\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // But not this one\n    assertQ(\"should find none\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete the document\n    assertU( delI(\"529\") );\n    assertQ(\"deleted, but should still be there\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForNewSearcher(15000));\n    trigger.reset();\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"550\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n    assertEquals( 2, softTracker.getCommitCount() );\n    assertQ(\"deleted and time has passed\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // now make the call 5 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"500\" ), null ) );\n    for( int i=0;i<5; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForNewSearcher(15000));\n    trigger.reset();\n    \n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"531\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n    assertEquals( 3, softTracker.getCommitCount() );\n    assertEquals( 0, tracker.getCommitCount() );\n    \n    assertQ(\"now it should\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"but not this\", req(\"id:531\") ,\"//result[@numFound=0]\" );\n  }\n\n","sourceOld":"  public void testSoftCommitMaxTime() throws Exception {\n    SolrCore core = h.getCore();\n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.commitTracker;\n    CommitTracker softTracker = updater.softCommitTracker;\n    \n    // too low of a number can cause a slow host to commit before the test code checks that it\n    // isn't there... causing a failure at \"shouldn't find any\"\n    softTracker.timeUpperBound = 2000;\n    softTracker.docsUpperBound = -1;\n    // updater.commitCallbacks.add(trigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it it is in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForNewSearcher(30000));\n    trigger.reset();\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // But not this one\n    assertQ(\"should find none\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete the document\n    assertU( delI(\"529\") );\n    assertQ(\"deleted, but should still be there\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForNewSearcher(15000));\n    trigger.reset();\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"550\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n    assertEquals( 2, softTracker.getCommitCount() );\n    assertQ(\"deleted and time has passed\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // now make the call 5 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"500\" ), null ) );\n    for( int i=0;i<5; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForNewSearcher(15000));\n    trigger.reset();\n    \n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"531\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n    assertEquals( 3, softTracker.getCommitCount() );\n    assertEquals( 0, tracker.getCommitCount() );\n    \n    assertQ(\"now it should\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"but not this\", req(\"id:531\") ,\"//result[@numFound=0]\" );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"c26f00b574427b55127e869b935845554afde1fa":["7a71a0b2d4be2299a163f60626729852d81a8e02","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["7a71a0b2d4be2299a163f60626729852d81a8e02"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a71a0b2d4be2299a163f60626729852d81a8e02"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a71a0b2d4be2299a163f60626729852d81a8e02"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"7a71a0b2d4be2299a163f60626729852d81a8e02":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","7a71a0b2d4be2299a163f60626729852d81a8e02"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"7a71a0b2d4be2299a163f60626729852d81a8e02":["c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}