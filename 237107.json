{"path":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/QueryParserUtil#parse(String[],String[],BooleanClause.Occur[],Analyzer).mjava","commits":[{"id":"e8a848e758754282137f42bf85793c278e250390","date":1249640668,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/QueryParserUtil#parse(String[],String[],BooleanClause.Occur[],Analyzer).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/original/QueryParserUtil#parse(String[],String[],BooleanClause.Occur[],Analyzer).mjava","sourceNew":"  /**\n   * Parses a query, searching on the fields specified. Use this if you need to\n   * specify certain fields as required, and others as prohibited.\n   * <p>\n   * \n   * <pre>\n   * Usage:\n   * &lt;code&gt;\n   * String[] query = {&quot;query1&quot;, &quot;query2&quot;, &quot;query3&quot;};\n   * String[] fields = {&quot;filename&quot;, &quot;contents&quot;, &quot;description&quot;};\n   * BooleanClause.Occur[] flags = {BooleanClause.Occur.SHOULD,\n   *                BooleanClause.Occur.MUST,\n   *                BooleanClause.Occur.MUST_NOT};\n   * MultiFieldQueryParser.parse(query, fields, flags, analyzer);\n   * &lt;/code&gt;\n   * </pre>\n   *<p>\n   * The code above would construct a query:\n   * \n   * <pre>\n   * &lt;code&gt;\n   * (filename:query1) +(contents:query2) -(description:query3)\n   * &lt;/code&gt;\n   * </pre>\n   * \n   * @param queries\n   *          Queries string to parse\n   * @param fields\n   *          Fields to search on\n   * @param flags\n   *          Flags describing the fields\n   * @param analyzer\n   *          Analyzer to use\n   * @throws IllegalArgumentException\n   *           if the length of the queries, fields, and flags array differ\n   */\n  public static Query parse(String[] queries, String[] fields,\n      BooleanClause.Occur[] flags, Analyzer analyzer) throws QueryNodeException {\n    if (!(queries.length == fields.length && queries.length == flags.length))\n      throw new IllegalArgumentException(\n          \"queries, fields, and flags array have have different length\");\n    BooleanQuery bQuery = new BooleanQuery();\n\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(analyzer);\n\n    for (int i = 0; i < fields.length; i++) {\n      Query q = qp.parse(queries[i], fields[i]);\n\n      if (q != null && // q never null, just being defensive\n          (!(q instanceof BooleanQuery) || ((BooleanQuery) q).getClauses().length > 0)) {\n        bQuery.add(q, flags[i]);\n      }\n    }\n    return bQuery;\n  }\n\n","sourceOld":"  /**\n   * Parses a query, searching on the fields specified. Use this if you need to\n   * specify certain fields as required, and others as prohibited.\n   * <p>\n   * \n   * <pre>\n   * Usage:\n   * &lt;code&gt;\n   * String[] query = {&quot;query1&quot;, &quot;query2&quot;, &quot;query3&quot;};\n   * String[] fields = {&quot;filename&quot;, &quot;contents&quot;, &quot;description&quot;};\n   * BooleanClause.Occur[] flags = {BooleanClause.Occur.SHOULD,\n   *                BooleanClause.Occur.MUST,\n   *                BooleanClause.Occur.MUST_NOT};\n   * MultiFieldQueryParser.parse(query, fields, flags, analyzer);\n   * &lt;/code&gt;\n   * </pre>\n   *<p>\n   * The code above would construct a query:\n   * \n   * <pre>\n   * &lt;code&gt;\n   * (filename:query1) +(contents:query2) -(description:query3)\n   * &lt;/code&gt;\n   * </pre>\n   * \n   * @param queries\n   *          Queries string to parse\n   * @param fields\n   *          Fields to search on\n   * @param flags\n   *          Flags describing the fields\n   * @param analyzer\n   *          Analyzer to use\n   * @throws IllegalArgumentException\n   *           if the length of the queries, fields, and flags array differ\n   */\n  public static Query parse(String[] queries, String[] fields,\n      BooleanClause.Occur[] flags, Analyzer analyzer) throws QueryNodeException {\n    if (!(queries.length == fields.length && queries.length == flags.length))\n      throw new IllegalArgumentException(\n          \"queries, fields, and flags array have have different length\");\n    BooleanQuery bQuery = new BooleanQuery();\n\n    OriginalQueryParserHelper qp = new OriginalQueryParserHelper();\n    qp.setAnalyzer(analyzer);\n\n    for (int i = 0; i < fields.length; i++) {\n      Query q = qp.parse(queries[i], fields[i]);\n\n      if (q != null && // q never null, just being defensive\n          (!(q instanceof BooleanQuery) || ((BooleanQuery) q).getClauses().length > 0)) {\n        bQuery.add(q, flags[i]);\n      }\n    }\n    return bQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/QueryParserUtil#parse(String[],String[],BooleanClause.Occur[],Analyzer).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/QueryParserUtil#parse(String[],String[],BooleanClause.Occur[],Analyzer).mjava","sourceNew":"  /**\n   * Parses a query, searching on the fields specified. Use this if you need to\n   * specify certain fields as required, and others as prohibited.\n   * <p>\n   * \n   * <pre>\n   * Usage:\n   * &lt;code&gt;\n   * String[] query = {&quot;query1&quot;, &quot;query2&quot;, &quot;query3&quot;};\n   * String[] fields = {&quot;filename&quot;, &quot;contents&quot;, &quot;description&quot;};\n   * BooleanClause.Occur[] flags = {BooleanClause.Occur.SHOULD,\n   *                BooleanClause.Occur.MUST,\n   *                BooleanClause.Occur.MUST_NOT};\n   * MultiFieldQueryParser.parse(query, fields, flags, analyzer);\n   * &lt;/code&gt;\n   * </pre>\n   *<p>\n   * The code above would construct a query:\n   * \n   * <pre>\n   * &lt;code&gt;\n   * (filename:query1) +(contents:query2) -(description:query3)\n   * &lt;/code&gt;\n   * </pre>\n   * \n   * @param queries\n   *          Queries string to parse\n   * @param fields\n   *          Fields to search on\n   * @param flags\n   *          Flags describing the fields\n   * @param analyzer\n   *          Analyzer to use\n   * @throws IllegalArgumentException\n   *           if the length of the queries, fields, and flags array differ\n   */\n  public static Query parse(String[] queries, String[] fields,\n      BooleanClause.Occur[] flags, Analyzer analyzer) throws QueryNodeException {\n    if (!(queries.length == fields.length && queries.length == flags.length))\n      throw new IllegalArgumentException(\n          \"queries, fields, and flags array have have different length\");\n    BooleanQuery bQuery = new BooleanQuery();\n\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(analyzer);\n\n    for (int i = 0; i < fields.length; i++) {\n      Query q = qp.parse(queries[i], fields[i]);\n\n      if (q != null && // q never null, just being defensive\n          (!(q instanceof BooleanQuery) || ((BooleanQuery) q).getClauses().length > 0)) {\n        bQuery.add(q, flags[i]);\n      }\n    }\n    return bQuery;\n  }\n\n","sourceOld":"  /**\n   * Parses a query, searching on the fields specified. Use this if you need to\n   * specify certain fields as required, and others as prohibited.\n   * <p>\n   * \n   * <pre>\n   * Usage:\n   * &lt;code&gt;\n   * String[] query = {&quot;query1&quot;, &quot;query2&quot;, &quot;query3&quot;};\n   * String[] fields = {&quot;filename&quot;, &quot;contents&quot;, &quot;description&quot;};\n   * BooleanClause.Occur[] flags = {BooleanClause.Occur.SHOULD,\n   *                BooleanClause.Occur.MUST,\n   *                BooleanClause.Occur.MUST_NOT};\n   * MultiFieldQueryParser.parse(query, fields, flags, analyzer);\n   * &lt;/code&gt;\n   * </pre>\n   *<p>\n   * The code above would construct a query:\n   * \n   * <pre>\n   * &lt;code&gt;\n   * (filename:query1) +(contents:query2) -(description:query3)\n   * &lt;/code&gt;\n   * </pre>\n   * \n   * @param queries\n   *          Queries string to parse\n   * @param fields\n   *          Fields to search on\n   * @param flags\n   *          Flags describing the fields\n   * @param analyzer\n   *          Analyzer to use\n   * @throws IllegalArgumentException\n   *           if the length of the queries, fields, and flags array differ\n   */\n  public static Query parse(String[] queries, String[] fields,\n      BooleanClause.Occur[] flags, Analyzer analyzer) throws QueryNodeException {\n    if (!(queries.length == fields.length && queries.length == flags.length))\n      throw new IllegalArgumentException(\n          \"queries, fields, and flags array have have different length\");\n    BooleanQuery bQuery = new BooleanQuery();\n\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(analyzer);\n\n    for (int i = 0; i < fields.length; i++) {\n      Query q = qp.parse(queries[i], fields[i]);\n\n      if (q != null && // q never null, just being defensive\n          (!(q instanceof BooleanQuery) || ((BooleanQuery) q).getClauses().length > 0)) {\n        bQuery.add(q, flags[i]);\n      }\n    }\n    return bQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e8a848e758754282137f42bf85793c278e250390":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e8a848e758754282137f42bf85793c278e250390"]},"commit2Childs":{"e8a848e758754282137f42bf85793c278e250390":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e8a848e758754282137f42bf85793c278e250390"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}