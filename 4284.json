{"path":"lucene/grouping/src/java/org/apache/lucene/search/grouping/GroupFacetCollector#mergeSegmentResults(int,int,boolean).mjava","commits":[{"id":"20e94e61fe5291647346b70437617e6b6c370408","date":1483783127,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/GroupFacetCollector#mergeSegmentResults(int,int,boolean).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractGroupFacetCollector#mergeSegmentResults(int,int,boolean).mjava","sourceNew":"  /**\n   * Returns grouped facet results that were computed over zero or more segments.\n   * Grouped facet counts are merged from zero or more segment results.\n   *\n   * @param size The total number of facets to include. This is typically offset + limit\n   * @param minCount The minimum count a facet entry should have to be included in the grouped facet result\n   * @param orderByCount Whether to sort the facet entries by facet entry count. If <code>false</code> then the facets\n   *                     are sorted lexicographically in ascending order.\n   * @return grouped facet results\n   * @throws IOException If I/O related errors occur during merging segment grouped facet counts.\n   */\n  public GroupedFacetResult mergeSegmentResults(int size, int minCount, boolean orderByCount) throws IOException {\n    if (segmentFacetCounts != null) {\n      segmentResults.add(createSegmentResult());\n      segmentFacetCounts = null; // reset\n    }\n\n    int totalCount = 0;\n    int missingCount = 0;\n    SegmentResultPriorityQueue segments = new SegmentResultPriorityQueue(segmentResults.size());\n    for (SegmentResult segmentResult : segmentResults) {\n      missingCount += segmentResult.missing;\n      if (segmentResult.mergePos >= segmentResult.maxTermPos) {\n        continue;\n      }\n      totalCount += segmentResult.total;\n      segments.add(segmentResult);\n    }\n\n    GroupedFacetResult facetResult = new GroupedFacetResult(size, minCount, orderByCount, totalCount, missingCount);\n    while (segments.size() > 0) {\n      SegmentResult segmentResult = segments.top();\n      BytesRef currentFacetValue = BytesRef.deepCopyOf(segmentResult.mergeTerm);\n      int count = 0;\n\n      do {\n        count += segmentResult.counts[segmentResult.mergePos++];\n        if (segmentResult.mergePos < segmentResult.maxTermPos) {\n          segmentResult.nextTerm();\n          segmentResult = segments.updateTop();\n        } else {\n          segments.pop();\n          segmentResult = segments.top();\n          if (segmentResult == null) {\n            break;\n          }\n        }\n      } while (currentFacetValue.equals(segmentResult.mergeTerm));\n      facetResult.addFacetCount(currentFacetValue, count);\n    }\n    return facetResult;\n  }\n\n","sourceOld":"  /**\n   * Returns grouped facet results that were computed over zero or more segments.\n   * Grouped facet counts are merged from zero or more segment results.\n   *\n   * @param size The total number of facets to include. This is typically offset + limit\n   * @param minCount The minimum count a facet entry should have to be included in the grouped facet result\n   * @param orderByCount Whether to sort the facet entries by facet entry count. If <code>false</code> then the facets\n   *                     are sorted lexicographically in ascending order.\n   * @return grouped facet results\n   * @throws IOException If I/O related errors occur during merging segment grouped facet counts.\n   */\n  public GroupedFacetResult mergeSegmentResults(int size, int minCount, boolean orderByCount) throws IOException {\n    if (segmentFacetCounts != null) {\n      segmentResults.add(createSegmentResult());\n      segmentFacetCounts = null; // reset\n    }\n\n    int totalCount = 0;\n    int missingCount = 0;\n    SegmentResultPriorityQueue segments = new SegmentResultPriorityQueue(segmentResults.size());\n    for (SegmentResult segmentResult : segmentResults) {\n      missingCount += segmentResult.missing;\n      if (segmentResult.mergePos >= segmentResult.maxTermPos) {\n        continue;\n      }\n      totalCount += segmentResult.total;\n      segments.add(segmentResult);\n    }\n\n    GroupedFacetResult facetResult = new GroupedFacetResult(size, minCount, orderByCount, totalCount, missingCount);\n    while (segments.size() > 0) {\n      SegmentResult segmentResult = segments.top();\n      BytesRef currentFacetValue = BytesRef.deepCopyOf(segmentResult.mergeTerm);\n      int count = 0;\n\n      do {\n        count += segmentResult.counts[segmentResult.mergePos++];\n        if (segmentResult.mergePos < segmentResult.maxTermPos) {\n          segmentResult.nextTerm();\n          segmentResult = segments.updateTop();\n        } else {\n          segments.pop();\n          segmentResult = segments.top();\n          if (segmentResult == null) {\n            break;\n          }\n        }\n      } while (currentFacetValue.equals(segmentResult.mergeTerm));\n      facetResult.addFacetCount(currentFacetValue, count);\n    }\n    return facetResult;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/GroupFacetCollector#mergeSegmentResults(int,int,boolean).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractGroupFacetCollector#mergeSegmentResults(int,int,boolean).mjava","sourceNew":"  /**\n   * Returns grouped facet results that were computed over zero or more segments.\n   * Grouped facet counts are merged from zero or more segment results.\n   *\n   * @param size The total number of facets to include. This is typically offset + limit\n   * @param minCount The minimum count a facet entry should have to be included in the grouped facet result\n   * @param orderByCount Whether to sort the facet entries by facet entry count. If <code>false</code> then the facets\n   *                     are sorted lexicographically in ascending order.\n   * @return grouped facet results\n   * @throws IOException If I/O related errors occur during merging segment grouped facet counts.\n   */\n  public GroupedFacetResult mergeSegmentResults(int size, int minCount, boolean orderByCount) throws IOException {\n    if (segmentFacetCounts != null) {\n      segmentResults.add(createSegmentResult());\n      segmentFacetCounts = null; // reset\n    }\n\n    int totalCount = 0;\n    int missingCount = 0;\n    SegmentResultPriorityQueue segments = new SegmentResultPriorityQueue(segmentResults.size());\n    for (SegmentResult segmentResult : segmentResults) {\n      missingCount += segmentResult.missing;\n      if (segmentResult.mergePos >= segmentResult.maxTermPos) {\n        continue;\n      }\n      totalCount += segmentResult.total;\n      segments.add(segmentResult);\n    }\n\n    GroupedFacetResult facetResult = new GroupedFacetResult(size, minCount, orderByCount, totalCount, missingCount);\n    while (segments.size() > 0) {\n      SegmentResult segmentResult = segments.top();\n      BytesRef currentFacetValue = BytesRef.deepCopyOf(segmentResult.mergeTerm);\n      int count = 0;\n\n      do {\n        count += segmentResult.counts[segmentResult.mergePos++];\n        if (segmentResult.mergePos < segmentResult.maxTermPos) {\n          segmentResult.nextTerm();\n          segmentResult = segments.updateTop();\n        } else {\n          segments.pop();\n          segmentResult = segments.top();\n          if (segmentResult == null) {\n            break;\n          }\n        }\n      } while (currentFacetValue.equals(segmentResult.mergeTerm));\n      facetResult.addFacetCount(currentFacetValue, count);\n    }\n    return facetResult;\n  }\n\n","sourceOld":"  /**\n   * Returns grouped facet results that were computed over zero or more segments.\n   * Grouped facet counts are merged from zero or more segment results.\n   *\n   * @param size The total number of facets to include. This is typically offset + limit\n   * @param minCount The minimum count a facet entry should have to be included in the grouped facet result\n   * @param orderByCount Whether to sort the facet entries by facet entry count. If <code>false</code> then the facets\n   *                     are sorted lexicographically in ascending order.\n   * @return grouped facet results\n   * @throws IOException If I/O related errors occur during merging segment grouped facet counts.\n   */\n  public GroupedFacetResult mergeSegmentResults(int size, int minCount, boolean orderByCount) throws IOException {\n    if (segmentFacetCounts != null) {\n      segmentResults.add(createSegmentResult());\n      segmentFacetCounts = null; // reset\n    }\n\n    int totalCount = 0;\n    int missingCount = 0;\n    SegmentResultPriorityQueue segments = new SegmentResultPriorityQueue(segmentResults.size());\n    for (SegmentResult segmentResult : segmentResults) {\n      missingCount += segmentResult.missing;\n      if (segmentResult.mergePos >= segmentResult.maxTermPos) {\n        continue;\n      }\n      totalCount += segmentResult.total;\n      segments.add(segmentResult);\n    }\n\n    GroupedFacetResult facetResult = new GroupedFacetResult(size, minCount, orderByCount, totalCount, missingCount);\n    while (segments.size() > 0) {\n      SegmentResult segmentResult = segments.top();\n      BytesRef currentFacetValue = BytesRef.deepCopyOf(segmentResult.mergeTerm);\n      int count = 0;\n\n      do {\n        count += segmentResult.counts[segmentResult.mergePos++];\n        if (segmentResult.mergePos < segmentResult.maxTermPos) {\n          segmentResult.nextTerm();\n          segmentResult = segments.updateTop();\n        } else {\n          segments.pop();\n          segmentResult = segments.top();\n          if (segmentResult == null) {\n            break;\n          }\n        }\n      } while (currentFacetValue.equals(segmentResult.mergeTerm));\n      facetResult.addFacetCount(currentFacetValue, count);\n    }\n    return facetResult;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"20e94e61fe5291647346b70437617e6b6c370408":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","20e94e61fe5291647346b70437617e6b6c370408"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["20e94e61fe5291647346b70437617e6b6c370408"]},"commit2Childs":{"20e94e61fe5291647346b70437617e6b6c370408":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["20e94e61fe5291647346b70437617e6b6c370408","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}