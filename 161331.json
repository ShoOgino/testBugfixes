{"path":"src/java/org/apache/solr/common/util/NamedListCodec#writeKnownType(Object).mjava","commits":[{"id":"da0acfe5ceed804451d76c8f887855b3d060e132","date":1208287358,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/common/util/NamedListCodec#writeKnownType(Object).mjava","pathOld":"/dev/null","sourceNew":"  private boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof List) {\n      writeArray((List) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      writeSolrDocument((SolrDocument) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["75ed70ebff903842ce0bf09b37df09f11f89ad4f","1c67f56bba7a7ad4f04337ab44ae4600d6e1a8ec"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c67f56bba7a7ad4f04337ab44ae4600d6e1a8ec","date":1210002569,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/common/util/NamedListCodec#writeKnownType(Object).mjava","pathOld":"src/java/org/apache/solr/common/util/NamedListCodec#writeKnownType(Object).mjava","sourceNew":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof List) {\n      writeArray((List) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      writeSolrDocument((SolrDocument) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  private boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof List) {\n      writeArray((List) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      writeSolrDocument((SolrDocument) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":["da0acfe5ceed804451d76c8f887855b3d060e132"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7116df897fd068949084f44e80c7c4a0869652e6","date":1213709875,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/common/util/NamedListCodec#writeKnownType(Object).mjava","pathOld":"src/java/org/apache/solr/common/util/NamedListCodec#writeKnownType(Object).mjava","sourceNew":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof List) {\n      writeArray((List) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      if(resolver == null){\n        writeSolrDocument((SolrDocument) val);\n      }else {\n        Object retVal = resolver.resolve(val, this);\n        if(retVal != null) {\n          if (retVal instanceof SolrDocument) {\n            writeSolrDocument((SolrDocument) retVal);\n          } else {\n            writeVal(retVal);\n          }\n        }\n      }\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof List) {\n      writeArray((List) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      writeSolrDocument((SolrDocument) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eb36d46695c2b44e2a4b8f12adfd6d9da4668c3","date":1217360461,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/common/util/NamedListCodec#writeKnownType(Object).mjava","pathOld":"src/java/org/apache/solr/common/util/NamedListCodec#writeKnownType(Object).mjava","sourceNew":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof List) {\n      writeArray((List) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      if(resolver == null){\n        writeSolrDocument((SolrDocument) val);\n      }else {\n        Object retVal = resolver.resolve(val, this);\n        if(retVal != null) {\n          if (retVal instanceof SolrDocument) {\n            writeSolrDocument((SolrDocument) retVal);\n          } else {\n            writeVal(retVal);\n          }\n        }\n      }\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable)val).iterator());\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof List) {\n      writeArray((List) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      if(resolver == null){\n        writeSolrDocument((SolrDocument) val);\n      }else {\n        Object retVal = resolver.resolve(val, this);\n        if(retVal != null) {\n          if (retVal instanceof SolrDocument) {\n            writeSolrDocument((SolrDocument) retVal);\n          } else {\n            writeVal(retVal);\n          }\n        }\n      }\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8e796f3d2964cc40d369fa114f4b41f56d6d9d8a","date":1218654322,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/common/util/NamedListCodec#writeKnownType(Object).mjava","pathOld":"src/java/org/apache/solr/common/util/NamedListCodec#writeKnownType(Object).mjava","sourceNew":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof List) {\n      writeArray((List) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      if(resolver == null){\n        writeSolrDocument((SolrDocument) val);\n      }else {\n        Object retVal = resolver.resolve(val, this);\n        if(retVal != null) {\n          if (retVal instanceof SolrDocument) {\n            writeSolrDocument((SolrDocument) retVal);\n          } else {\n            writeVal(retVal);\n          }\n        }\n      }\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable)val).iterator());\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof List) {\n      writeArray((List) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      if(resolver == null){\n        writeSolrDocument((SolrDocument) val);\n      }else {\n        Object retVal = resolver.resolve(val, this);\n        if(retVal != null) {\n          if (retVal instanceof SolrDocument) {\n            writeSolrDocument((SolrDocument) retVal);\n          } else {\n            writeVal(retVal);\n          }\n        }\n      }\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable)val).iterator());\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/common/org/apache/solr/common/util/NamedListCodec#writeKnownType(Object).mjava","pathOld":"src/java/org/apache/solr/common/util/NamedListCodec#writeKnownType(Object).mjava","sourceNew":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof List) {\n      writeArray((List) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      if(resolver == null){\n        writeSolrDocument((SolrDocument) val);\n      }else {\n        Object retVal = resolver.resolve(val, this);\n        if(retVal != null) {\n          if (retVal instanceof SolrDocument) {\n            writeSolrDocument((SolrDocument) retVal);\n          } else {\n            writeVal(retVal);\n          }\n        }\n      }\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable)val).iterator());\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof List) {\n      writeArray((List) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      if(resolver == null){\n        writeSolrDocument((SolrDocument) val);\n      }else {\n        Object retVal = resolver.resolve(val, this);\n        if(retVal != null) {\n          if (retVal instanceof SolrDocument) {\n            writeSolrDocument((SolrDocument) retVal);\n          } else {\n            writeVal(retVal);\n          }\n        }\n      }\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable)val).iterator());\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["8e796f3d2964cc40d369fa114f4b41f56d6d9d8a"],"8e796f3d2964cc40d369fa114f4b41f56d6d9d8a":["7eb36d46695c2b44e2a4b8f12adfd6d9da4668c3"],"da0acfe5ceed804451d76c8f887855b3d060e132":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"1c67f56bba7a7ad4f04337ab44ae4600d6e1a8ec":["da0acfe5ceed804451d76c8f887855b3d060e132"],"7eb36d46695c2b44e2a4b8f12adfd6d9da4668c3":["7116df897fd068949084f44e80c7c4a0869652e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7116df897fd068949084f44e80c7c4a0869652e6":["1c67f56bba7a7ad4f04337ab44ae4600d6e1a8ec"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":[],"8e796f3d2964cc40d369fa114f4b41f56d6d9d8a":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"da0acfe5ceed804451d76c8f887855b3d060e132":["1c67f56bba7a7ad4f04337ab44ae4600d6e1a8ec"],"1c67f56bba7a7ad4f04337ab44ae4600d6e1a8ec":["7116df897fd068949084f44e80c7c4a0869652e6"],"7eb36d46695c2b44e2a4b8f12adfd6d9da4668c3":["8e796f3d2964cc40d369fa114f4b41f56d6d9d8a"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["da0acfe5ceed804451d76c8f887855b3d060e132"],"7116df897fd068949084f44e80c7c4a0869652e6":["7eb36d46695c2b44e2a4b8f12adfd6d9da4668c3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e3602d5eab954caecc726ab136ad580ac1ceb917","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}