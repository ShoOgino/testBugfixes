{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#createCompoundFile(InfoStream,Directory,SegmentInfo,IOContext).mjava","commits":[{"id":"5faf65b6692f15cca0f87bf8666c87899afc619f","date":1420468108,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#createCompoundFile(InfoStream,Directory,SegmentInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#createCompoundFile(InfoStream,Directory,CheckAbort,SegmentInfo,IOContext).mjava","sourceNew":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  static final Collection<String> createCompoundFile(InfoStream infoStream, Directory directory, final SegmentInfo info, IOContext context)\n          throws IOException {\n\n    // TODO: use trackingdirectorywrapper instead of files() to know which files to delete when things fail:\n    String cfsFiles[] = info.getCodec().compoundFormat().files(info);\n    \n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"create compound file\");\n    }\n    // Now merge all added files\n    Collection<String> files = info.files();\n    \n    boolean success = false;\n    try {\n      info.getCodec().compoundFormat().write(directory, info, files, context);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.deleteFilesIgnoringExceptions(directory, cfsFiles);\n      }\n    }\n\n    // Replace all previous files with the CFS/CFE files:\n    Set<String> siFiles = new HashSet<>();\n    for (String cfsFile : cfsFiles) {\n      siFiles.add(cfsFile);\n    }\n    info.setFiles(siFiles);\n\n    return files;\n  }\n\n","sourceOld":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  static final Collection<String> createCompoundFile(InfoStream infoStream, Directory directory, CheckAbort checkAbort, final SegmentInfo info, IOContext context)\n          throws IOException {\n\n    // TODO: use trackingdirectorywrapper instead of files() to know which files to delete when things fail:\n    String cfsFiles[] = info.getCodec().compoundFormat().files(info);\n    \n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"create compound file\");\n    }\n    // Now merge all added files\n    Collection<String> files = info.files();\n    \n    boolean success = false;\n    try {\n      info.getCodec().compoundFormat().write(directory, info, files, checkAbort, context);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.deleteFilesIgnoringExceptions(directory, cfsFiles);\n      }\n    }\n\n    // Replace all previous files with the CFS/CFE files:\n    Set<String> siFiles = new HashSet<>();\n    for (String cfsFile : cfsFiles) {\n      siFiles.add(cfsFile);\n    }\n    info.setFiles(siFiles);\n\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c5705cb93fb3daa46c676cad08b916dd57bf1be","date":1422473298,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#createCompoundFile(InfoStream,TrackingDirectoryWrapper,SegmentInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#createCompoundFile(InfoStream,Directory,SegmentInfo,IOContext).mjava","sourceNew":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  static final void createCompoundFile(InfoStream infoStream, TrackingDirectoryWrapper directory, final SegmentInfo info, IOContext context)\n          throws IOException {\n\n    // maybe this check is not needed, but why take the risk?\n    if (!directory.getCreatedFiles().isEmpty()) {\n      throw new IllegalStateException(\"pass a clean trackingdir for CFS creation\");\n    }\n    \n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"create compound file\");\n    }\n    // Now merge all added files\n    Collection<String> files = info.files();\n    \n    boolean success = false;\n    try {\n      info.getCodec().compoundFormat().write(directory, info, files, context);\n      success = true;\n    } finally {\n      if (!success) {\n        Set<String> cfsFiles = new HashSet<>(directory.getCreatedFiles());\n        for (String file : cfsFiles) {\n          IOUtils.deleteFilesIgnoringExceptions(directory, file);\n        }\n      }\n    }\n\n    // Replace all previous files with the CFS/CFE files:\n    Set<String> siFiles = new HashSet<>(directory.getCreatedFiles());\n    info.setFiles(siFiles);\n  }\n\n","sourceOld":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  static final Collection<String> createCompoundFile(InfoStream infoStream, Directory directory, final SegmentInfo info, IOContext context)\n          throws IOException {\n\n    // TODO: use trackingdirectorywrapper instead of files() to know which files to delete when things fail:\n    String cfsFiles[] = info.getCodec().compoundFormat().files(info);\n    \n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"create compound file\");\n    }\n    // Now merge all added files\n    Collection<String> files = info.files();\n    \n    boolean success = false;\n    try {\n      info.getCodec().compoundFormat().write(directory, info, files, context);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.deleteFilesIgnoringExceptions(directory, cfsFiles);\n      }\n    }\n\n    // Replace all previous files with the CFS/CFE files:\n    Set<String> siFiles = new HashSet<>();\n    for (String cfsFile : cfsFiles) {\n      siFiles.add(cfsFile);\n    }\n    info.setFiles(siFiles);\n\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3c5705cb93fb3daa46c676cad08b916dd57bf1be":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5faf65b6692f15cca0f87bf8666c87899afc619f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3c5705cb93fb3daa46c676cad08b916dd57bf1be"]},"commit2Childs":{"3c5705cb93fb3daa46c676cad08b916dd57bf1be":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["3c5705cb93fb3daa46c676cad08b916dd57bf1be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}