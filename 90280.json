{"path":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testSeedDocumentMap_queryFieldsSet_shouldBuildQueryFromSpecifiedFieldnamesOnly().mjava","commits":[{"id":"303eba9db32cde4e6fbc4e51a44361ef1c302e6c","date":1553596029,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testSeedDocumentMap_queryFieldsSet_shouldBuildQueryFromSpecifiedFieldnamesOnly().mjava","pathOld":"/dev/null","sourceNew":"  public void testSeedDocumentMap_queryFieldsSet_shouldBuildQueryFromSpecifiedFieldnamesOnly() throws Exception {\n    mlt.setMinTermFreq(2);\n\n    String mltField = \"text\";\n\n    mlt.setFieldNames(new String[]{mltField});\n\n    Map<String, Collection<Object>> seedDocument = new HashMap<>();\n    String notMltField = \"text2\";\n    String textValue1 = \"apache apache lucene lucene\";\n    String textValue2 = \"apache2 apache2 lucene2 lucene2 lucene2\";\n    seedDocument.put(mltField, Arrays.asList(textValue1));\n    seedDocument.put(notMltField, Arrays.asList(textValue2));\n\n    HashSet<Term> expectedTerms = new HashSet<>();\n    expectedTerms.add(new Term(mltField, \"apache\"));\n    expectedTerms.add(new Term(mltField, \"lucene\"));\n\n    HashSet<Term> unexpectedTerms = new HashSet<>();\n    unexpectedTerms.add(new Term(mltField, \"apache2\"));\n    unexpectedTerms.add(new Term(mltField, \"lucene2\"));\n    unexpectedTerms.add(new Term(notMltField, \"apache2\"));\n    unexpectedTerms.add(new Term(notMltField, \"lucene2\"));\n\n    BooleanQuery query = (BooleanQuery) mlt.like(seedDocument);\n    Collection<BooleanClause> clauses = query.clauses();\n    HashSet<Term> clausesTerms = new HashSet<>();\n    for (BooleanClause clause : clauses) {\n      Term term = ((TermQuery) clause.getQuery()).getTerm();\n      clausesTerms.add(term);\n    }\n\n    assertEquals(\"Expected 2 clauses only!\", 2, clauses.size());\n\n    //None of the Not Expected terms is in the query\n    for (BooleanClause clause : clauses) {\n      Term term = ((TermQuery) clause.getQuery()).getTerm();\n      assertFalse(\"Unexpected term '\" + term + \"' found in query terms\", unexpectedTerms.contains(term));\n    }\n\n    //All of the Expected terms are in the query\n    for (Term expectedTerm : expectedTerms) {\n      assertTrue(\"Expected term '\" + expectedTerm + \"' is not found in query terms\", clausesTerms.contains(expectedTerm));\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"303eba9db32cde4e6fbc4e51a44361ef1c302e6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["303eba9db32cde4e6fbc4e51a44361ef1c302e6c"]},"commit2Childs":{"303eba9db32cde4e6fbc4e51a44361ef1c302e6c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["303eba9db32cde4e6fbc4e51a44361ef1c302e6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}