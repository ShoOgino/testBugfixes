{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTrigger#parseStartTime(Date,String,String).mjava","commits":[{"id":"4404f65815cc874649176858833ace645e4ca172","date":1520945234,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTrigger#parseStartTime(Date,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTrigger#parseStartTime(String,String).mjava","sourceNew":"  private Instant parseStartTime(Date now, String startTimeStr, String timeZoneStr) {\n    if (startTimeStr == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Parameter 'startTime' cannot be null\");\n    }\n    try {\n      // try parsing startTime as an ISO-8601 date time string\n      return DateMathParser.parseMath(now, startTimeStr).toInstant();\n    } catch (SolrException e) {\n      if (e.code() != SolrException.ErrorCode.BAD_REQUEST.code)  throw e;\n    }\n    if (timeZoneStr == null)  {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Either 'startTime' should be an ISO-8601 date time string or 'timeZone' must be not be null\");\n    }\n    TimeZone timeZone = TimeZone.getTimeZone(timeZoneStr);\n    DateTimeFormatter dateTimeFormatter = new DateTimeFormatterBuilder()\n        .append(DateTimeFormatter.ISO_LOCAL_DATE).appendPattern(\"['T'[HH[:mm[:ss]]]]\")\n        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)\n        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)\n        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)\n        .toFormatter(Locale.ROOT).withZone(timeZone.toZoneId());\n    return Instant.from(dateTimeFormatter.parse(startTimeStr));\n  }\n\n","sourceOld":"  private Instant parseStartTime(String startTimeStr, String timeZoneStr) {\n    if (startTimeStr == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Parameter 'startTime' cannot be null\");\n    }\n    try {\n      // try parsing startTime as an ISO-8601 date time string\n      return DateMathParser.parseMath(null, startTimeStr).toInstant();\n    } catch (SolrException e) {\n      if (e.code() != SolrException.ErrorCode.BAD_REQUEST.code)  throw e;\n    }\n    if (timeZoneStr == null)  {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Either 'startTime' should be an ISO-8601 date time string or 'timeZone' must be not be null\");\n    }\n    TimeZone timeZone = TimeZone.getTimeZone(timeZoneStr);\n    DateTimeFormatter dateTimeFormatter = new DateTimeFormatterBuilder()\n        .append(DateTimeFormatter.ISO_LOCAL_DATE).appendPattern(\"['T'[HH[:mm[:ss]]]]\")\n        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)\n        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)\n        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)\n        .toFormatter(Locale.ROOT).withZone(timeZone.toZoneId());\n    return Instant.from(dateTimeFormatter.parse(startTimeStr));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d","date":1522763990,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTrigger#parseStartTime(Date,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTrigger#parseStartTime(Date,String,String).mjava","sourceNew":"  private Instant parseStartTime(Date now, String startTimeStr, String timeZoneStr) throws TriggerValidationException {\n    try {\n      // try parsing startTime as an ISO-8601 date time string\n      return DateMathParser.parseMath(now, startTimeStr).toInstant();\n    } catch (SolrException e) {\n      if (e.code() != SolrException.ErrorCode.BAD_REQUEST.code) {\n        throw new TriggerValidationException(\"startTime\", \"error parsing value '\" + startTimeStr + \"': \" + e.toString());\n      }\n    }\n    if (timeZoneStr == null)  {\n      throw new TriggerValidationException(\"timeZone\",\n          \"Either 'startTime' should be an ISO-8601 date time string or 'timeZone' must be not be null\");\n    }\n    TimeZone timeZone = TimeZone.getTimeZone(timeZoneStr);\n    DateTimeFormatter dateTimeFormatter = new DateTimeFormatterBuilder()\n        .append(DateTimeFormatter.ISO_LOCAL_DATE).appendPattern(\"['T'[HH[:mm[:ss]]]]\")\n        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)\n        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)\n        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)\n        .toFormatter(Locale.ROOT).withZone(timeZone.toZoneId());\n    try {\n      return Instant.from(dateTimeFormatter.parse(startTimeStr));\n    } catch (Exception e) {\n      throw new TriggerValidationException(\"startTime\", \"error parsing startTime '\" + startTimeStr + \"': \" + e.toString());\n    }\n  }\n\n","sourceOld":"  private Instant parseStartTime(Date now, String startTimeStr, String timeZoneStr) {\n    if (startTimeStr == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Parameter 'startTime' cannot be null\");\n    }\n    try {\n      // try parsing startTime as an ISO-8601 date time string\n      return DateMathParser.parseMath(now, startTimeStr).toInstant();\n    } catch (SolrException e) {\n      if (e.code() != SolrException.ErrorCode.BAD_REQUEST.code)  throw e;\n    }\n    if (timeZoneStr == null)  {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Either 'startTime' should be an ISO-8601 date time string or 'timeZone' must be not be null\");\n    }\n    TimeZone timeZone = TimeZone.getTimeZone(timeZoneStr);\n    DateTimeFormatter dateTimeFormatter = new DateTimeFormatterBuilder()\n        .append(DateTimeFormatter.ISO_LOCAL_DATE).appendPattern(\"['T'[HH[:mm[:ss]]]]\")\n        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)\n        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)\n        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)\n        .toFormatter(Locale.ROOT).withZone(timeZone.toZoneId());\n    return Instant.from(dateTimeFormatter.parse(startTimeStr));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTrigger#parseStartTime(Date,String,String).mjava","sourceNew":null,"sourceOld":"  private Instant parseStartTime(Date now, String startTimeStr, String timeZoneStr) throws TriggerValidationException {\n    try {\n      // try parsing startTime as an ISO-8601 date time string\n      return DateMathParser.parseMath(now, startTimeStr).toInstant();\n    } catch (SolrException e) {\n      if (e.code() != SolrException.ErrorCode.BAD_REQUEST.code) {\n        throw new TriggerValidationException(\"startTime\", \"error parsing value '\" + startTimeStr + \"': \" + e.toString());\n      }\n    }\n    if (timeZoneStr == null)  {\n      throw new TriggerValidationException(\"timeZone\",\n          \"Either 'startTime' should be an ISO-8601 date time string or 'timeZone' must be not be null\");\n    }\n    TimeZone timeZone = TimeZone.getTimeZone(timeZoneStr);\n    DateTimeFormatter dateTimeFormatter = new DateTimeFormatterBuilder()\n        .append(DateTimeFormatter.ISO_LOCAL_DATE).appendPattern(\"['T'[HH[:mm[:ss]]]]\")\n        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)\n        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)\n        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)\n        .toFormatter(Locale.ROOT).withZone(timeZone.toZoneId());\n    try {\n      return Instant.from(dateTimeFormatter.parse(startTimeStr));\n    } catch (Exception e) {\n      throw new TriggerValidationException(\"startTime\", \"error parsing startTime '\" + startTimeStr + \"': \" + e.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4404f65815cc874649176858833ace645e4ca172":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["4404f65815cc874649176858833ace645e4ca172"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4404f65815cc874649176858833ace645e4ca172"],"4404f65815cc874649176858833ace645e4ca172":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}