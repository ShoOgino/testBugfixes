{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ImplicitDocRouter#getSearchSlicesSingle(String,SolrParams,DocCollection).mjava","commits":[{"id":"eec5368fa415ebab044b7ae01de50d5b49519b7e","date":1355029764,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ImplicitDocRouter#getSearchSlicesSingle(String,SolrParams,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ImplicitDocRouter#getSearchSlices(String,SolrParams,DocCollection).mjava","sourceNew":"  @Override\n  public Collection<Slice> getSearchSlicesSingle(String shardKey, SolrParams params, DocCollection collection) {\n    if (shardKey == null) {\n      return collection.getSlices();\n    }\n\n    // assume the shardKey is just a slice name\n    Slice slice = collection.getSlice(shardKey);\n    if (slice == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"implicit router can't find shard \" + shardKey + \" in collection \" + collection.getName());\n    }\n\n    return Collections.singleton(slice);\n  }\n\n","sourceOld":"  @Override\n  public Collection<Slice> getSearchSlices(String shardKey, SolrParams params, DocCollection collection) {\n    if (shardKey == null) {\n      return collection.getSlices();\n    }\n\n    // assume the shardKey is just a slice name\n    Slice slice = collection.getSlice(shardKey);\n    if (slice == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"implicit router can't find shard \" + shardKey + \" in collection \" + collection.getName());\n    }\n\n    return Collections.singleton(slice);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ImplicitDocRouter#getSearchSlicesSingle(String,SolrParams,DocCollection).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Collection<Slice> getSearchSlicesSingle(String shardKey, SolrParams params, DocCollection collection) {\n    if (shardKey == null) {\n      return collection.getSlices();\n    }\n\n    // assume the shardKey is just a slice name\n    Slice slice = collection.getSlice(shardKey);\n    if (slice == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"implicit router can't find shard \" + shardKey + \" in collection \" + collection.getName());\n    }\n\n    return Collections.singleton(slice);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0beaed456aa3358e5e4a99ea2aea994ef6c81de3","date":1365434191,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ImplicitDocRouter#getSearchSlicesSingle(String,SolrParams,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ImplicitDocRouter#getSearchSlicesSingle(String,SolrParams,DocCollection).mjava","sourceNew":"  @Override\n  public Collection<Slice> getSearchSlicesSingle(String shardKey, SolrParams params, DocCollection collection) {\n    if (shardKey == null) {\n      return collection.getActiveSlices();\n    }\n\n    // assume the shardKey is just a slice name\n    Slice slice = collection.getSlice(shardKey);\n    if (slice == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"implicit router can't find shard \" + shardKey + \" in collection \" + collection.getName());\n    }\n\n    return Collections.singleton(slice);\n  }\n\n","sourceOld":"  @Override\n  public Collection<Slice> getSearchSlicesSingle(String shardKey, SolrParams params, DocCollection collection) {\n    if (shardKey == null) {\n      return collection.getSlices();\n    }\n\n    // assume the shardKey is just a slice name\n    Slice slice = collection.getSlice(shardKey);\n    if (slice == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"implicit router can't find shard \" + shardKey + \" in collection \" + collection.getName());\n    }\n\n    return Collections.singleton(slice);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eeda7e62e149f90eee8895af874c74efa7d4852","date":1375293182,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ImplicitDocRouter#getSearchSlicesSingle(String,SolrParams,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ImplicitDocRouter#getSearchSlicesSingle(String,SolrParams,DocCollection).mjava","sourceNew":"  @Override\n  public Collection<Slice> getSearchSlicesSingle(String shardKey, SolrParams params, DocCollection collection) {\n\n    if (shardKey == null) {\n      return collection.getActiveSlices();\n    }\n\n    // assume the shardKey is just a slice name\n    Slice slice = collection.getSlice(shardKey);\n    if (slice == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"implicit router can't find shard \" + shardKey + \" in collection \" + collection.getName());\n    }\n\n    return Collections.singleton(slice);\n  }\n\n","sourceOld":"  @Override\n  public Collection<Slice> getSearchSlicesSingle(String shardKey, SolrParams params, DocCollection collection) {\n    if (shardKey == null) {\n      return collection.getActiveSlices();\n    }\n\n    // assume the shardKey is just a slice name\n    Slice slice = collection.getSlice(shardKey);\n    if (slice == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"implicit router can't find shard \" + shardKey + \" in collection \" + collection.getName());\n    }\n\n    return Collections.singleton(slice);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ImplicitDocRouter#getSearchSlicesSingle(String,SolrParams,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ImplicitDocRouter#getSearchSlicesSingle(String,SolrParams,DocCollection).mjava","sourceNew":"  @Override\n  public Collection<Slice> getSearchSlicesSingle(String shardKey, SolrParams params, DocCollection collection) {\n\n    if (shardKey == null) {\n      return collection.getActiveSlices();\n    }\n\n    // assume the shardKey is just a slice name\n    Slice slice = collection.getSlice(shardKey);\n    if (slice == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"implicit router can't find shard \" + shardKey + \" in collection \" + collection.getName());\n    }\n\n    return Collections.singleton(slice);\n  }\n\n","sourceOld":"  @Override\n  public Collection<Slice> getSearchSlicesSingle(String shardKey, SolrParams params, DocCollection collection) {\n    if (shardKey == null) {\n      return collection.getActiveSlices();\n    }\n\n    // assume the shardKey is just a slice name\n    Slice slice = collection.getSlice(shardKey);\n    if (slice == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"implicit router can't find shard \" + shardKey + \" in collection \" + collection.getName());\n    }\n\n    return Collections.singleton(slice);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["0beaed456aa3358e5e4a99ea2aea994ef6c81de3","1eeda7e62e149f90eee8895af874c74efa7d4852"],"eec5368fa415ebab044b7ae01de50d5b49519b7e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eec5368fa415ebab044b7ae01de50d5b49519b7e"],"0beaed456aa3358e5e4a99ea2aea994ef6c81de3":["eec5368fa415ebab044b7ae01de50d5b49519b7e"],"1eeda7e62e149f90eee8895af874c74efa7d4852":["0beaed456aa3358e5e4a99ea2aea994ef6c81de3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1eeda7e62e149f90eee8895af874c74efa7d4852"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"eec5368fa415ebab044b7ae01de50d5b49519b7e":["407687e67faf6e1f02a211ca078d8e3eed631027","0beaed456aa3358e5e4a99ea2aea994ef6c81de3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eec5368fa415ebab044b7ae01de50d5b49519b7e","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"0beaed456aa3358e5e4a99ea2aea994ef6c81de3":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","1eeda7e62e149f90eee8895af874c74efa7d4852"],"1eeda7e62e149f90eee8895af874c74efa7d4852":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}