{"path":"contrib/gdata-server/src/java/org/apache/lucene/gdata/server/registry/configuration/PropertyInjector#injectProperties(ComponentConfiguration).mjava","commits":[{"id":"bf1c3e657b66c65904354d158dd1cebb302dc8f9","date":1153873200,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/server/registry/configuration/PropertyInjector#injectProperties(ComponentConfiguration).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Injects the properties stored in the <code>ComponentConfiguration</code>\n     * to the corresponding methodes of the target object\n     * @param bean - configuration bean containing all properties to set.\n     * \n     */\n    public void injectProperties(final ComponentConfiguration bean) {\n        if (bean == null)\n            throw new IllegalArgumentException(\"bean must not be null\");\n        if (this.target == null)\n            throw new IllegalStateException(\"target is not set -- null\");\n        Set<Entry<String, Method>> requiered = this.requieredProperties\n                .entrySet();\n        // set requiered properties\n        for (Entry<String, Method> entry : requiered) {\n            if (!bean.contains(entry.getKey()))\n                throw new InjectionException(\n                        \"requiered property can not be set -- value not in configuration bean; Property: \"\n                                + entry.getKey()\n                                + \"for class \"\n                                + this.targetClass.getName());\n            populate(bean, entry);\n\n        }\n        Set<Entry<String, Method>> optinal = this.optionalProperties.entrySet();\n        // set optional properties\n        for (Entry<String, Method> entry : optinal) {\n            if (bean.contains(entry.getKey()))\n                populate(bean, entry);\n        }\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09fe963da2613c724ffe82353b4ca2364a1f93c6","date":1155249160,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/server/registry/configuration/PropertyInjector#injectProperties(ComponentConfiguration).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/server/registry/configuration/PropertyInjector#injectProperties(ComponentConfiguration).mjava","sourceNew":"    /**\n     * Injects the properties stored in the <code>ComponentConfiguration</code>\n     * to the corresponding methods of the target object\n     * @param bean - configuration bean containing all properties to set.\n     * \n     */\n    public void injectProperties(final ComponentConfiguration bean) {\n        if (bean == null)\n            throw new IllegalArgumentException(\"bean must not be null\");\n        if (this.target == null)\n            throw new IllegalStateException(\"target is not set -- null\");\n        Set<Entry<String, Method>> requiered = this.requieredProperties\n                .entrySet();\n        // set required properties\n        for (Entry<String, Method> entry : requiered) {\n            if (!bean.contains(entry.getKey()))\n                throw new InjectionException(\n                        \"Required property can not be set -- value not in configuration bean; Property: \"\n                                + entry.getKey()\n                                + \"for class \"\n                                + this.targetClass.getName());\n            populate(bean, entry);\n\n        }\n        Set<Entry<String, Method>> optinal = this.optionalProperties.entrySet();\n        // set optional properties\n        for (Entry<String, Method> entry : optinal) {\n            if (bean.contains(entry.getKey()))\n                populate(bean, entry);\n        }\n\n    }\n\n","sourceOld":"    /**\n     * Injects the properties stored in the <code>ComponentConfiguration</code>\n     * to the corresponding methodes of the target object\n     * @param bean - configuration bean containing all properties to set.\n     * \n     */\n    public void injectProperties(final ComponentConfiguration bean) {\n        if (bean == null)\n            throw new IllegalArgumentException(\"bean must not be null\");\n        if (this.target == null)\n            throw new IllegalStateException(\"target is not set -- null\");\n        Set<Entry<String, Method>> requiered = this.requieredProperties\n                .entrySet();\n        // set requiered properties\n        for (Entry<String, Method> entry : requiered) {\n            if (!bean.contains(entry.getKey()))\n                throw new InjectionException(\n                        \"requiered property can not be set -- value not in configuration bean; Property: \"\n                                + entry.getKey()\n                                + \"for class \"\n                                + this.targetClass.getName());\n            populate(bean, entry);\n\n        }\n        Set<Entry<String, Method>> optinal = this.optionalProperties.entrySet();\n        // set optional properties\n        for (Entry<String, Method> entry : optinal) {\n            if (bean.contains(entry.getKey()))\n                populate(bean, entry);\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/server/registry/configuration/PropertyInjector#injectProperties(ComponentConfiguration).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/server/registry/configuration/PropertyInjector#injectProperties(ComponentConfiguration).mjava","sourceNew":"    /**\n     * Injects the properties stored in the <code>ComponentConfiguration</code>\n     * to the corresponding methods of the target object\n     * @param bean - configuration bean containing all properties to set.\n     * \n     */\n    public void injectProperties(final ComponentConfiguration bean) {\n        if (bean == null)\n            throw new IllegalArgumentException(\"bean must not be null\");\n        if (this.target == null)\n            throw new IllegalStateException(\"target is not set -- null\");\n        Set<Entry<String, Method>> requiered = this.requieredProperties\n                .entrySet();\n        // set required properties\n        for (Entry<String, Method> entry : requiered) {\n            if (!bean.contains(entry.getKey()))\n                throw new InjectionException(\n                        \"Required property can not be set -- value not in configuration bean; Property: \"\n                                + entry.getKey()\n                                + \"for class \"\n                                + this.targetClass.getName());\n            populate(bean, entry);\n\n        }\n        Set<Entry<String, Method>> optinal = this.optionalProperties.entrySet();\n        // set optional properties\n        for (Entry<String, Method> entry : optinal) {\n            if (bean.contains(entry.getKey()))\n                populate(bean, entry);\n        }\n\n    }\n\n","sourceOld":"    /**\n     * Injects the properties stored in the <code>ComponentConfiguration</code>\n     * to the corresponding methods of the target object\n     * @param bean - configuration bean containing all properties to set.\n     * \n     */\n    public void injectProperties(final ComponentConfiguration bean) {\n        if (bean == null)\n            throw new IllegalArgumentException(\"bean must not be null\");\n        if (this.target == null)\n            throw new IllegalStateException(\"target is not set -- null\");\n        Set<Entry<String, Method>> requiered = this.requieredProperties\n                .entrySet();\n        // set required properties\n        for (Entry<String, Method> entry : requiered) {\n            if (!bean.contains(entry.getKey()))\n                throw new InjectionException(\n                        \"Required property can not be set -- value not in configuration bean; Property: \"\n                                + entry.getKey()\n                                + \"for class \"\n                                + this.targetClass.getName());\n            populate(bean, entry);\n\n        }\n        Set<Entry<String, Method>> optinal = this.optionalProperties.entrySet();\n        // set optional properties\n        for (Entry<String, Method> entry : optinal) {\n            if (bean.contains(entry.getKey()))\n                populate(bean, entry);\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bf1c3e657b66c65904354d158dd1cebb302dc8f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09fe963da2613c724ffe82353b4ca2364a1f93c6":["bf1c3e657b66c65904354d158dd1cebb302dc8f9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["09fe963da2613c724ffe82353b4ca2364a1f93c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5824af871ba6863399636aa5989bfc0ef2ea448c"]},"commit2Childs":{"bf1c3e657b66c65904354d158dd1cebb302dc8f9":["09fe963da2613c724ffe82353b4ca2364a1f93c6"],"09fe963da2613c724ffe82353b4ca2364a1f93c6":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bf1c3e657b66c65904354d158dd1cebb302dc8f9"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}