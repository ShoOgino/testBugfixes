{"path":"solr/src/java/org/apache/solr/search/QueryParsing#processSort(IndexSchema,String,String,List[SortField]).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/QueryParsing#processSort(IndexSchema,String,String,List[SortField]).mjava","pathOld":"/dev/null","sourceNew":"  private static boolean processSort(IndexSchema schema, String sort, String order, List<SortField> lst) {\n    boolean score = false;\n    if (sort != null && order != null) {\n      boolean top = true;\n      if (\"desc\".equals(order) || \"top\".equals(order)) {\n        top = true;\n      } else if (\"asc\".equals(order) || \"bottom\".equals(order)) {\n        top = false;\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown sort order: \" + order);\n      }\n      //we got the order, now deal with the sort\n      if (\"score\".equals(sort)) {\n        score = true;\n        if (top) {\n          lst.add(SortField.FIELD_SCORE);\n        } else {\n          lst.add(new SortField(null, SortField.SCORE, true));\n        }\n      } else if (DOCID.equals(sort)) {\n        lst.add(new SortField(null, SortField.DOC, top));\n      } else {\n        //See if we have a Field first, then see if it is a function, then throw an exception\n        // getField could throw an exception if the name isn't found\n        SchemaField f = null;\n        try {\n          f = schema.getField(sort);\n        }\n        catch (SolrException e) {\n          //Not an error just yet\n        }\n        if (f != null) {\n          if (f == null || !f.indexed()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"can not sort on unindexed field: \" + sort);\n          }\n          lst.add(f.getType().getSortField(f, top));\n        } else {\n          //See if we have a function:\n          FunctionQuery query = null;\n          try {\n            query = parseFunction(sort, schema);\n            if (query != null) {\n              ValueSource valueSource = query.getValueSource();\n              //We have a function query\n              try {\n                lst.add(valueSource.getSortField(top));\n              } catch (IOException e) {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error getting the sort for this function: \" + sort, e);\n              }\n            } else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"can not sort on undefined function: \" + sort);\n            }\n          } catch (ParseException e) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"can not sort on undefined field or function: \" + sort, e);\n          }\n\n        }\n      }\n    } else if (sort == null) {//no sort value\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Must declare sort field or function\");\n    } else if (order == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing sort order: \");\n    }\n    return score;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#processSort(IndexSchema,String,String,List[SortField]).mjava","sourceNew":null,"sourceOld":"  private static boolean processSort(IndexSchema schema, String sort, String order, List<SortField> lst) {\n    boolean score = false;\n    if (sort != null && order != null) {\n      boolean top = true;\n      if (\"desc\".equals(order) || \"top\".equals(order)) {\n        top = true;\n      } else if (\"asc\".equals(order) || \"bottom\".equals(order)) {\n        top = false;\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown sort order: \" + order);\n      }\n      //we got the order, now deal with the sort\n      if (\"score\".equals(sort)) {\n        score = true;\n        if (top) {\n          lst.add(SortField.FIELD_SCORE);\n        } else {\n          lst.add(new SortField(null, SortField.SCORE, true));\n        }\n      } else if (DOCID.equals(sort)) {\n        lst.add(new SortField(null, SortField.DOC, top));\n      } else {\n        //See if we have a Field first, then see if it is a function, then throw an exception\n        // getField could throw an exception if the name isn't found\n        SchemaField f = null;\n        try {\n          f = schema.getField(sort);\n        }\n        catch (SolrException e) {\n          //Not an error just yet\n        }\n        if (f != null) {\n          if (f == null || !f.indexed()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"can not sort on unindexed field: \" + sort);\n          }\n          lst.add(f.getType().getSortField(f, top));\n        } else {\n          //See if we have a function:\n          FunctionQuery query = null;\n          try {\n            query = parseFunction(sort, schema);\n            if (query != null) {\n              ValueSource valueSource = query.getValueSource();\n              //We have a function query\n              try {\n                lst.add(valueSource.getSortField(top));\n              } catch (IOException e) {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error getting the sort for this function: \" + sort, e);\n              }\n            } else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"can not sort on undefined function: \" + sort);\n            }\n          } catch (ParseException e) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"can not sort on undefined field or function: \" + sort, e);\n          }\n\n        }\n      }\n    } else if (sort == null) {//no sort value\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Must declare sort field or function\");\n    } else if (order == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing sort order: \");\n    }\n    return score;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/QueryParsing#processSort(IndexSchema,String,String,List[SortField]).mjava","pathOld":"src/java/org/apache/solr/search/QueryParsing#processSort(IndexSchema,String,String,List[SortField]).mjava","sourceNew":"  private static boolean processSort(IndexSchema schema, String sort, String order, List<SortField> lst) {\n    boolean score = false;\n    if (sort != null && order != null) {\n      boolean top = true;\n      if (\"desc\".equals(order) || \"top\".equals(order)) {\n        top = true;\n      } else if (\"asc\".equals(order) || \"bottom\".equals(order)) {\n        top = false;\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown sort order: \" + order);\n      }\n      //we got the order, now deal with the sort\n      if (\"score\".equals(sort)) {\n        score = true;\n        if (top) {\n          lst.add(SortField.FIELD_SCORE);\n        } else {\n          lst.add(new SortField(null, SortField.SCORE, true));\n        }\n      } else if (DOCID.equals(sort)) {\n        lst.add(new SortField(null, SortField.DOC, top));\n      } else {\n        //See if we have a Field first, then see if it is a function, then throw an exception\n        // getField could throw an exception if the name isn't found\n        SchemaField f = null;\n        try {\n          f = schema.getField(sort);\n        }\n        catch (SolrException e) {\n          //Not an error just yet\n        }\n        if (f != null) {\n          if (f == null || !f.indexed()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"can not sort on unindexed field: \" + sort);\n          }\n          lst.add(f.getType().getSortField(f, top));\n        } else {\n          //See if we have a function:\n          FunctionQuery query = null;\n          try {\n            query = parseFunction(sort, schema);\n            if (query != null) {\n              ValueSource valueSource = query.getValueSource();\n              //We have a function query\n              try {\n                lst.add(valueSource.getSortField(top));\n              } catch (IOException e) {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error getting the sort for this function: \" + sort, e);\n              }\n            } else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"can not sort on undefined function: \" + sort);\n            }\n          } catch (ParseException e) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"can not sort on undefined field or function: \" + sort, e);\n          }\n\n        }\n      }\n    } else if (sort == null) {//no sort value\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Must declare sort field or function\");\n    } else if (order == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing sort order: \");\n    }\n    return score;\n  }\n\n","sourceOld":"  private static boolean processSort(IndexSchema schema, String sort, String order, List<SortField> lst) {\n    boolean score = false;\n    if (sort != null && order != null) {\n      boolean top = true;\n      if (\"desc\".equals(order) || \"top\".equals(order)) {\n        top = true;\n      } else if (\"asc\".equals(order) || \"bottom\".equals(order)) {\n        top = false;\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown sort order: \" + order);\n      }\n      //we got the order, now deal with the sort\n      if (\"score\".equals(sort)) {\n        score = true;\n        if (top) {\n          lst.add(SortField.FIELD_SCORE);\n        } else {\n          lst.add(new SortField(null, SortField.SCORE, true));\n        }\n      } else if (DOCID.equals(sort)) {\n        lst.add(new SortField(null, SortField.DOC, top));\n      } else {\n        //See if we have a Field first, then see if it is a function, then throw an exception\n        // getField could throw an exception if the name isn't found\n        SchemaField f = null;\n        try {\n          f = schema.getField(sort);\n        }\n        catch (SolrException e) {\n          //Not an error just yet\n        }\n        if (f != null) {\n          if (f == null || !f.indexed()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"can not sort on unindexed field: \" + sort);\n          }\n          lst.add(f.getType().getSortField(f, top));\n        } else {\n          //See if we have a function:\n          FunctionQuery query = null;\n          try {\n            query = parseFunction(sort, schema);\n            if (query != null) {\n              ValueSource valueSource = query.getValueSource();\n              //We have a function query\n              try {\n                lst.add(valueSource.getSortField(top));\n              } catch (IOException e) {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error getting the sort for this function: \" + sort, e);\n              }\n            } else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"can not sort on undefined function: \" + sort);\n            }\n          } catch (ParseException e) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"can not sort on undefined field or function: \" + sort, e);\n          }\n\n        }\n      }\n    } else if (sort == null) {//no sort value\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Must declare sort field or function\");\n    } else if (order == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing sort order: \");\n    }\n    return score;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/QueryParsing#processSort(IndexSchema,String,String,List[SortField]).mjava","pathOld":"/dev/null","sourceNew":"  private static boolean processSort(IndexSchema schema, String sort, String order, List<SortField> lst) {\n    boolean score = false;\n    if (sort != null && order != null) {\n      boolean top = true;\n      if (\"desc\".equals(order) || \"top\".equals(order)) {\n        top = true;\n      } else if (\"asc\".equals(order) || \"bottom\".equals(order)) {\n        top = false;\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown sort order: \" + order);\n      }\n      //we got the order, now deal with the sort\n      if (\"score\".equals(sort)) {\n        score = true;\n        if (top) {\n          lst.add(SortField.FIELD_SCORE);\n        } else {\n          lst.add(new SortField(null, SortField.SCORE, true));\n        }\n      } else if (DOCID.equals(sort)) {\n        lst.add(new SortField(null, SortField.DOC, top));\n      } else {\n        //See if we have a Field first, then see if it is a function, then throw an exception\n        // getField could throw an exception if the name isn't found\n        SchemaField f = null;\n        try {\n          f = schema.getField(sort);\n        }\n        catch (SolrException e) {\n          //Not an error just yet\n        }\n        if (f != null) {\n          if (f == null || !f.indexed()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"can not sort on unindexed field: \" + sort);\n          }\n          lst.add(f.getType().getSortField(f, top));\n        } else {\n          //See if we have a function:\n          FunctionQuery query = null;\n          try {\n            query = parseFunction(sort, schema);\n            if (query != null) {\n              ValueSource valueSource = query.getValueSource();\n              //We have a function query\n              try {\n                lst.add(valueSource.getSortField(top));\n              } catch (IOException e) {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error getting the sort for this function: \" + sort, e);\n              }\n            } else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"can not sort on undefined function: \" + sort);\n            }\n          } catch (ParseException e) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"can not sort on undefined field or function: \" + sort, e);\n          }\n\n        }\n      }\n    } else if (sort == null) {//no sort value\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Must declare sort field or function\");\n    } else if (order == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing sort order: \");\n    }\n    return score;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0883328ff2cc09b5c999d05c04e16530d819c627","date":1285860918,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#processSort(IndexSchema,String,String,List[SortField]).mjava","sourceNew":null,"sourceOld":"  private static boolean processSort(IndexSchema schema, String sort, String order, List<SortField> lst) {\n    boolean score = false;\n    if (sort != null && order != null) {\n      boolean top = true;\n      if (\"desc\".equals(order) || \"top\".equals(order)) {\n        top = true;\n      } else if (\"asc\".equals(order) || \"bottom\".equals(order)) {\n        top = false;\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown sort order: \" + order);\n      }\n      //we got the order, now deal with the sort\n      if (\"score\".equals(sort)) {\n        score = true;\n        if (top) {\n          lst.add(SortField.FIELD_SCORE);\n        } else {\n          lst.add(new SortField(null, SortField.SCORE, true));\n        }\n      } else if (DOCID.equals(sort)) {\n        lst.add(new SortField(null, SortField.DOC, top));\n      } else {\n        //See if we have a Field first, then see if it is a function, then throw an exception\n        // getField could throw an exception if the name isn't found\n        SchemaField f = null;\n        try {\n          f = schema.getField(sort);\n        }\n        catch (SolrException e) {\n          //Not an error just yet\n        }\n        if (f != null) {\n          if (f == null || !f.indexed()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"can not sort on unindexed field: \" + sort);\n          }\n          lst.add(f.getType().getSortField(f, top));\n        } else {\n          //See if we have a function:\n          FunctionQuery query = null;\n          try {\n            query = parseFunction(sort, schema);\n            if (query != null) {\n              ValueSource valueSource = query.getValueSource();\n              //We have a function query\n              try {\n                lst.add(valueSource.getSortField(top));\n              } catch (IOException e) {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error getting the sort for this function: \" + sort, e);\n              }\n            } else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"can not sort on undefined function: \" + sort);\n            }\n          } catch (ParseException e) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"can not sort on undefined field or function: \" + sort, e);\n          }\n\n        }\n      }\n    } else if (sort == null) {//no sort value\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Must declare sort field or function\");\n    } else if (order == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing sort order: \");\n    }\n    return score;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#processSort(IndexSchema,String,String,List[SortField]).mjava","sourceNew":null,"sourceOld":"  private static boolean processSort(IndexSchema schema, String sort, String order, List<SortField> lst) {\n    boolean score = false;\n    if (sort != null && order != null) {\n      boolean top = true;\n      if (\"desc\".equals(order) || \"top\".equals(order)) {\n        top = true;\n      } else if (\"asc\".equals(order) || \"bottom\".equals(order)) {\n        top = false;\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown sort order: \" + order);\n      }\n      //we got the order, now deal with the sort\n      if (\"score\".equals(sort)) {\n        score = true;\n        if (top) {\n          lst.add(SortField.FIELD_SCORE);\n        } else {\n          lst.add(new SortField(null, SortField.SCORE, true));\n        }\n      } else if (DOCID.equals(sort)) {\n        lst.add(new SortField(null, SortField.DOC, top));\n      } else {\n        //See if we have a Field first, then see if it is a function, then throw an exception\n        // getField could throw an exception if the name isn't found\n        SchemaField f = null;\n        try {\n          f = schema.getField(sort);\n        }\n        catch (SolrException e) {\n          //Not an error just yet\n        }\n        if (f != null) {\n          if (f == null || !f.indexed()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"can not sort on unindexed field: \" + sort);\n          }\n          lst.add(f.getType().getSortField(f, top));\n        } else {\n          //See if we have a function:\n          FunctionQuery query = null;\n          try {\n            query = parseFunction(sort, schema);\n            if (query != null) {\n              ValueSource valueSource = query.getValueSource();\n              //We have a function query\n              try {\n                lst.add(valueSource.getSortField(top));\n              } catch (IOException e) {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error getting the sort for this function: \" + sort, e);\n              }\n            } else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"can not sort on undefined function: \" + sort);\n            }\n          } catch (ParseException e) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"can not sort on undefined field or function: \" + sort, e);\n          }\n\n        }\n      }\n    } else if (sort == null) {//no sort value\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Must declare sort field or function\");\n    } else if (order == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing sort order: \");\n    }\n    return score;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0883328ff2cc09b5c999d05c04e16530d819c627":["1da8d55113b689b06716246649de6f62430f15c0"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","0883328ff2cc09b5c999d05c04e16530d819c627"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0883328ff2cc09b5c999d05c04e16530d819c627"]},"commit2Childs":{"0883328ff2cc09b5c999d05c04e16530d819c627":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1da8d55113b689b06716246649de6f62430f15c0":["0883328ff2cc09b5c999d05c04e16530d819c627","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}