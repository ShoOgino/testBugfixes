{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#close().mjava","sourceNew":"  /**\n   * Commits all changes to an index and closes all\n   * associated files.  Note that this may be a costly\n   * operation, so, try to re-use a single writer instead of\n   * closing and opening a new one.  See {@link #commit()} for\n   * caveats about write caching done by some IO devices.\n   *\n   * <p> If an Exception is hit during close, eg due to disk\n   * full or some other reason, then both the on-disk index\n   * and the internal state of the IndexWriter instance will\n   * be consistent.  However, the close will not be complete\n   * even though part of it (flushing buffered documents)\n   * may have succeeded, so the write lock will still be\n   * held.</p>\n   *\n   * <p> If you can correct the underlying cause (eg free up\n   * some disk space) then you can call close() again.\n   * Failing that, if you want to force the write lock to be\n   * released (dangerous, because you may then lose buffered\n   * docs in the IndexWriter instance) then you can do\n   * something like this:</p>\n   *\n   * <pre>\n   * try {\n   *   writer.close();\n   * } finally {\n   *   if (IndexWriter.isLocked(directory)) {\n   *     IndexWriter.unlock(directory);\n   *   }\n   * }\n   * </pre>\n   *\n   * after which, you must be certain not to use the writer\n   * instance anymore.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void close() throws CorruptIndexException, IOException {\n    close(true);\n  }\n\n","sourceOld":"  /**\n   * Commits all changes to an index and closes all\n   * associated files.  Note that this may be a costly\n   * operation, so, try to re-use a single writer instead of\n   * closing and opening a new one.  See {@link #commit()} for\n   * caveats about write caching done by some IO devices.\n   *\n   * <p> If an Exception is hit during close, eg due to disk\n   * full or some other reason, then both the on-disk index\n   * and the internal state of the IndexWriter instance will\n   * be consistent.  However, the close will not be complete\n   * even though part of it (flushing buffered documents)\n   * may have succeeded, so the write lock will still be\n   * held.</p>\n   *\n   * <p> If you can correct the underlying cause (eg free up\n   * some disk space) then you can call close() again.\n   * Failing that, if you want to force the write lock to be\n   * released (dangerous, because you may then lose buffered\n   * docs in the IndexWriter instance) then you can do\n   * something like this:</p>\n   *\n   * <pre>\n   * try {\n   *   writer.close();\n   * } finally {\n   *   if (IndexWriter.isLocked(directory)) {\n   *     IndexWriter.unlock(directory);\n   *   }\n   * }\n   * </pre>\n   *\n   * after which, you must be certain not to use the writer\n   * instance anymore.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void close() throws CorruptIndexException, IOException {\n    close(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close().mjava","sourceNew":"  /**\n   * Commits all changes to an index and closes all\n   * associated files.  Note that this may be a costly\n   * operation, so, try to re-use a single writer instead of\n   * closing and opening a new one.  See {@link #commit()} for\n   * caveats about write caching done by some IO devices.\n   *\n   * <p> If an Exception is hit during close, eg due to disk\n   * full or some other reason, then both the on-disk index\n   * and the internal state of the IndexWriter instance will\n   * be consistent.  However, the close will not be complete\n   * even though part of it (flushing buffered documents)\n   * may have succeeded, so the write lock will still be\n   * held.</p>\n   *\n   * <p> If you can correct the underlying cause (eg free up\n   * some disk space) then you can call close() again.\n   * Failing that, if you want to force the write lock to be\n   * released (dangerous, because you may then lose buffered\n   * docs in the IndexWriter instance) then you can do\n   * something like this:</p>\n   *\n   * <pre>\n   * try {\n   *   writer.close();\n   * } finally {\n   *   if (IndexWriter.isLocked(directory)) {\n   *     IndexWriter.unlock(directory);\n   *   }\n   * }\n   * </pre>\n   *\n   * after which, you must be certain not to use the writer\n   * instance anymore.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  public void close() throws IOException {\n    close(true);\n  }\n\n","sourceOld":"  /**\n   * Commits all changes to an index and closes all\n   * associated files.  Note that this may be a costly\n   * operation, so, try to re-use a single writer instead of\n   * closing and opening a new one.  See {@link #commit()} for\n   * caveats about write caching done by some IO devices.\n   *\n   * <p> If an Exception is hit during close, eg due to disk\n   * full or some other reason, then both the on-disk index\n   * and the internal state of the IndexWriter instance will\n   * be consistent.  However, the close will not be complete\n   * even though part of it (flushing buffered documents)\n   * may have succeeded, so the write lock will still be\n   * held.</p>\n   *\n   * <p> If you can correct the underlying cause (eg free up\n   * some disk space) then you can call close() again.\n   * Failing that, if you want to force the write lock to be\n   * released (dangerous, because you may then lose buffered\n   * docs in the IndexWriter instance) then you can do\n   * something like this:</p>\n   *\n   * <pre>\n   * try {\n   *   writer.close();\n   * } finally {\n   *   if (IndexWriter.isLocked(directory)) {\n   *     IndexWriter.unlock(directory);\n   *   }\n   * }\n   * </pre>\n   *\n   * after which, you must be certain not to use the writer\n   * instance anymore.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void close() throws CorruptIndexException, IOException {\n    close(true);\n  }\n\n","bugFix":["b1405362241b561f5590ff4a87d5d6e173bcd9cf","1b54a9bc667895a2095a886184bf69a3179e63df"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close().mjava","sourceNew":"  /**\n   * Commits all changes to an index and closes all\n   * associated files.  Note that this may be a costly\n   * operation, so, try to re-use a single writer instead of\n   * closing and opening a new one.  See {@link #commit()} for\n   * caveats about write caching done by some IO devices.\n   *\n   * <p> If an Exception is hit during close, eg due to disk\n   * full or some other reason, then both the on-disk index\n   * and the internal state of the IndexWriter instance will\n   * be consistent.  However, the close will not be complete\n   * even though part of it (flushing buffered documents)\n   * may have succeeded, so the write lock will still be\n   * held.</p>\n   *\n   * <p> If you can correct the underlying cause (eg free up\n   * some disk space) then you can call close() again.\n   * Failing that, if you want to force the write lock to be\n   * released (dangerous, because you may then lose buffered\n   * docs in the IndexWriter instance) then you can do\n   * something like this:</p>\n   *\n   * <pre>\n   * try {\n   *   writer.close();\n   * } finally {\n   *   if (IndexWriter.isLocked(directory)) {\n   *     IndexWriter.unlock(directory);\n   *   }\n   * }\n   * </pre>\n   *\n   * after which, you must be certain not to use the writer\n   * instance anymore.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  public void close() throws IOException {\n    close(true);\n  }\n\n","sourceOld":"  /**\n   * Commits all changes to an index and closes all\n   * associated files.  Note that this may be a costly\n   * operation, so, try to re-use a single writer instead of\n   * closing and opening a new one.  See {@link #commit()} for\n   * caveats about write caching done by some IO devices.\n   *\n   * <p> If an Exception is hit during close, eg due to disk\n   * full or some other reason, then both the on-disk index\n   * and the internal state of the IndexWriter instance will\n   * be consistent.  However, the close will not be complete\n   * even though part of it (flushing buffered documents)\n   * may have succeeded, so the write lock will still be\n   * held.</p>\n   *\n   * <p> If you can correct the underlying cause (eg free up\n   * some disk space) then you can call close() again.\n   * Failing that, if you want to force the write lock to be\n   * released (dangerous, because you may then lose buffered\n   * docs in the IndexWriter instance) then you can do\n   * something like this:</p>\n   *\n   * <pre>\n   * try {\n   *   writer.close();\n   * } finally {\n   *   if (IndexWriter.isLocked(directory)) {\n   *     IndexWriter.unlock(directory);\n   *   }\n   * }\n   * </pre>\n   *\n   * after which, you must be certain not to use the writer\n   * instance anymore.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void close() throws CorruptIndexException, IOException {\n    close(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e4f784dd2d92736e675a7fb47e03556c8b9e074","date":1344942332,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close().mjava","sourceNew":"  /**\n   * Commits all changes to an index, waits for pending merges\n   * to complete, and closes all associated files.  \n   * <p>\n   * This is a \"slow graceful shutdown\" which may take a long time\n   * especially if a big merge is pending: If you only want to close\n   * resources use {@link #rollback()}. If you only want to commit\n   * pending changes and close resources see {@link #close(boolean)}.\n   * <p>\n   * Note that this may be a costly\n   * operation, so, try to re-use a single writer instead of\n   * closing and opening a new one.  See {@link #commit()} for\n   * caveats about write caching done by some IO devices.\n   *\n   * <p> If an Exception is hit during close, eg due to disk\n   * full or some other reason, then both the on-disk index\n   * and the internal state of the IndexWriter instance will\n   * be consistent.  However, the close will not be complete\n   * even though part of it (flushing buffered documents)\n   * may have succeeded, so the write lock will still be\n   * held.</p>\n   *\n   * <p> If you can correct the underlying cause (eg free up\n   * some disk space) then you can call close() again.\n   * Failing that, if you want to force the write lock to be\n   * released (dangerous, because you may then lose buffered\n   * docs in the IndexWriter instance) then you can do\n   * something like this:</p>\n   *\n   * <pre>\n   * try {\n   *   writer.close();\n   * } finally {\n   *   if (IndexWriter.isLocked(directory)) {\n   *     IndexWriter.unlock(directory);\n   *   }\n   * }\n   * </pre>\n   *\n   * after which, you must be certain not to use the writer\n   * instance anymore.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  public void close() throws IOException {\n    close(true);\n  }\n\n","sourceOld":"  /**\n   * Commits all changes to an index and closes all\n   * associated files.  Note that this may be a costly\n   * operation, so, try to re-use a single writer instead of\n   * closing and opening a new one.  See {@link #commit()} for\n   * caveats about write caching done by some IO devices.\n   *\n   * <p> If an Exception is hit during close, eg due to disk\n   * full or some other reason, then both the on-disk index\n   * and the internal state of the IndexWriter instance will\n   * be consistent.  However, the close will not be complete\n   * even though part of it (flushing buffered documents)\n   * may have succeeded, so the write lock will still be\n   * held.</p>\n   *\n   * <p> If you can correct the underlying cause (eg free up\n   * some disk space) then you can call close() again.\n   * Failing that, if you want to force the write lock to be\n   * released (dangerous, because you may then lose buffered\n   * docs in the IndexWriter instance) then you can do\n   * something like this:</p>\n   *\n   * <pre>\n   * try {\n   *   writer.close();\n   * } finally {\n   *   if (IndexWriter.isLocked(directory)) {\n   *     IndexWriter.unlock(directory);\n   *   }\n   * }\n   * </pre>\n   *\n   * after which, you must be certain not to use the writer\n   * instance anymore.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  public void close() throws IOException {\n    close(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close().mjava","sourceNew":"  /**\n   * Commits all changes to an index, waits for pending merges\n   * to complete, and closes all associated files.  \n   * <p>\n   * This is a \"slow graceful shutdown\" which may take a long time\n   * especially if a big merge is pending: If you only want to close\n   * resources use {@link #rollback()}. If you only want to commit\n   * pending changes and close resources see {@link #close(boolean)}.\n   * <p>\n   * Note that this may be a costly\n   * operation, so, try to re-use a single writer instead of\n   * closing and opening a new one.  See {@link #commit()} for\n   * caveats about write caching done by some IO devices.\n   *\n   * <p> If an Exception is hit during close, eg due to disk\n   * full or some other reason, then both the on-disk index\n   * and the internal state of the IndexWriter instance will\n   * be consistent.  However, the close will not be complete\n   * even though part of it (flushing buffered documents)\n   * may have succeeded, so the write lock will still be\n   * held.</p>\n   *\n   * <p> If you can correct the underlying cause (eg free up\n   * some disk space) then you can call close() again.\n   * Failing that, if you want to force the write lock to be\n   * released (dangerous, because you may then lose buffered\n   * docs in the IndexWriter instance) then you can do\n   * something like this:</p>\n   *\n   * <pre>\n   * try {\n   *   writer.close();\n   * } finally {\n   *   if (IndexWriter.isLocked(directory)) {\n   *     IndexWriter.unlock(directory);\n   *   }\n   * }\n   * </pre>\n   *\n   * after which, you must be certain not to use the writer\n   * instance anymore.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  public void close() throws IOException {\n    close(true);\n  }\n\n","sourceOld":"  /**\n   * Commits all changes to an index and closes all\n   * associated files.  Note that this may be a costly\n   * operation, so, try to re-use a single writer instead of\n   * closing and opening a new one.  See {@link #commit()} for\n   * caveats about write caching done by some IO devices.\n   *\n   * <p> If an Exception is hit during close, eg due to disk\n   * full or some other reason, then both the on-disk index\n   * and the internal state of the IndexWriter instance will\n   * be consistent.  However, the close will not be complete\n   * even though part of it (flushing buffered documents)\n   * may have succeeded, so the write lock will still be\n   * held.</p>\n   *\n   * <p> If you can correct the underlying cause (eg free up\n   * some disk space) then you can call close() again.\n   * Failing that, if you want to force the write lock to be\n   * released (dangerous, because you may then lose buffered\n   * docs in the IndexWriter instance) then you can do\n   * something like this:</p>\n   *\n   * <pre>\n   * try {\n   *   writer.close();\n   * } finally {\n   *   if (IndexWriter.isLocked(directory)) {\n   *     IndexWriter.unlock(directory);\n   *   }\n   * }\n   * </pre>\n   *\n   * after which, you must be certain not to use the writer\n   * instance anymore.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  public void close() throws IOException {\n    close(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c188105a9aae04f56c24996f98f8333fc825d2e","date":1345031914,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close().mjava","sourceNew":"  /**\n   * Commits all changes to an index, waits for pending merges\n   * to complete, and closes all associated files.  \n   * <p>\n   * This is a \"slow graceful shutdown\" which may take a long time\n   * especially if a big merge is pending: If you only want to close\n   * resources use {@link #rollback()}. If you only want to commit\n   * pending changes and close resources see {@link #close(boolean)}.\n   * <p>\n   * Note that this may be a costly\n   * operation, so, try to re-use a single writer instead of\n   * closing and opening a new one.  See {@link #commit()} for\n   * caveats about write caching done by some IO devices.\n   *\n   * <p> If an Exception is hit during close, eg due to disk\n   * full or some other reason, then both the on-disk index\n   * and the internal state of the IndexWriter instance will\n   * be consistent.  However, the close will not be complete\n   * even though part of it (flushing buffered documents)\n   * may have succeeded, so the write lock will still be\n   * held.</p>\n   *\n   * <p> If you can correct the underlying cause (eg free up\n   * some disk space) then you can call close() again.\n   * Failing that, if you want to force the write lock to be\n   * released (dangerous, because you may then lose buffered\n   * docs in the IndexWriter instance) then you can do\n   * something like this:</p>\n   *\n   * <pre>\n   * try {\n   *   writer.close();\n   * } finally {\n   *   if (IndexWriter.isLocked(directory)) {\n   *     IndexWriter.unlock(directory);\n   *   }\n   * }\n   * </pre>\n   *\n   * after which, you must be certain not to use the writer\n   * instance anymore.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  public void close() throws IOException {\n    close(true);\n  }\n\n","sourceOld":"  /**\n   * Commits all changes to an index and closes all\n   * associated files.  Note that this may be a costly\n   * operation, so, try to re-use a single writer instead of\n   * closing and opening a new one.  See {@link #commit()} for\n   * caveats about write caching done by some IO devices.\n   *\n   * <p> If an Exception is hit during close, eg due to disk\n   * full or some other reason, then both the on-disk index\n   * and the internal state of the IndexWriter instance will\n   * be consistent.  However, the close will not be complete\n   * even though part of it (flushing buffered documents)\n   * may have succeeded, so the write lock will still be\n   * held.</p>\n   *\n   * <p> If you can correct the underlying cause (eg free up\n   * some disk space) then you can call close() again.\n   * Failing that, if you want to force the write lock to be\n   * released (dangerous, because you may then lose buffered\n   * docs in the IndexWriter instance) then you can do\n   * something like this:</p>\n   *\n   * <pre>\n   * try {\n   *   writer.close();\n   * } finally {\n   *   if (IndexWriter.isLocked(directory)) {\n   *     IndexWriter.unlock(directory);\n   *   }\n   * }\n   * </pre>\n   *\n   * after which, you must be certain not to use the writer\n   * instance anymore.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  public void close() throws IOException {\n    close(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c93396a1df03720cb20e2c2f513a6fa59b21e4c","date":1345032673,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close().mjava","sourceNew":"  /**\n   * Commits all changes to an index and closes all\n   * associated files.  Note that this may be a costly\n   * operation, so, try to re-use a single writer instead of\n   * closing and opening a new one.  See {@link #commit()} for\n   * caveats about write caching done by some IO devices.\n   *\n   * <p> If an Exception is hit during close, eg due to disk\n   * full or some other reason, then both the on-disk index\n   * and the internal state of the IndexWriter instance will\n   * be consistent.  However, the close will not be complete\n   * even though part of it (flushing buffered documents)\n   * may have succeeded, so the write lock will still be\n   * held.</p>\n   *\n   * <p> If you can correct the underlying cause (eg free up\n   * some disk space) then you can call close() again.\n   * Failing that, if you want to force the write lock to be\n   * released (dangerous, because you may then lose buffered\n   * docs in the IndexWriter instance) then you can do\n   * something like this:</p>\n   *\n   * <pre>\n   * try {\n   *   writer.close();\n   * } finally {\n   *   if (IndexWriter.isLocked(directory)) {\n   *     IndexWriter.unlock(directory);\n   *   }\n   * }\n   * </pre>\n   *\n   * after which, you must be certain not to use the writer\n   * instance anymore.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  public void close() throws IOException {\n    close(true);\n  }\n\n","sourceOld":"  /**\n   * Commits all changes to an index, waits for pending merges\n   * to complete, and closes all associated files.  \n   * <p>\n   * This is a \"slow graceful shutdown\" which may take a long time\n   * especially if a big merge is pending: If you only want to close\n   * resources use {@link #rollback()}. If you only want to commit\n   * pending changes and close resources see {@link #close(boolean)}.\n   * <p>\n   * Note that this may be a costly\n   * operation, so, try to re-use a single writer instead of\n   * closing and opening a new one.  See {@link #commit()} for\n   * caveats about write caching done by some IO devices.\n   *\n   * <p> If an Exception is hit during close, eg due to disk\n   * full or some other reason, then both the on-disk index\n   * and the internal state of the IndexWriter instance will\n   * be consistent.  However, the close will not be complete\n   * even though part of it (flushing buffered documents)\n   * may have succeeded, so the write lock will still be\n   * held.</p>\n   *\n   * <p> If you can correct the underlying cause (eg free up\n   * some disk space) then you can call close() again.\n   * Failing that, if you want to force the write lock to be\n   * released (dangerous, because you may then lose buffered\n   * docs in the IndexWriter instance) then you can do\n   * something like this:</p>\n   *\n   * <pre>\n   * try {\n   *   writer.close();\n   * } finally {\n   *   if (IndexWriter.isLocked(directory)) {\n   *     IndexWriter.unlock(directory);\n   *   }\n   * }\n   * </pre>\n   *\n   * after which, you must be certain not to use the writer\n   * instance anymore.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  public void close() throws IOException {\n    close(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close().mjava","sourceNew":"  /**\n   * Commits all changes to an index, waits for pending merges\n   * to complete, and closes all associated files.  \n   * <p>\n   * This is a \"slow graceful shutdown\" which may take a long time\n   * especially if a big merge is pending: If you only want to close\n   * resources use {@link #rollback()}. If you only want to commit\n   * pending changes and close resources see {@link #close(boolean)}.\n   * <p>\n   * Note that this may be a costly\n   * operation, so, try to re-use a single writer instead of\n   * closing and opening a new one.  See {@link #commit()} for\n   * caveats about write caching done by some IO devices.\n   *\n   * <p> If an Exception is hit during close, eg due to disk\n   * full or some other reason, then both the on-disk index\n   * and the internal state of the IndexWriter instance will\n   * be consistent.  However, the close will not be complete\n   * even though part of it (flushing buffered documents)\n   * may have succeeded, so the write lock will still be\n   * held.</p>\n   *\n   * <p> If you can correct the underlying cause (eg free up\n   * some disk space) then you can call close() again.\n   * Failing that, if you want to force the write lock to be\n   * released (dangerous, because you may then lose buffered\n   * docs in the IndexWriter instance) then you can do\n   * something like this:</p>\n   *\n   * <pre>\n   * try {\n   *   writer.close();\n   * } finally {\n   *   if (IndexWriter.isLocked(directory)) {\n   *     IndexWriter.unlock(directory);\n   *   }\n   * }\n   * </pre>\n   *\n   * after which, you must be certain not to use the writer\n   * instance anymore.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  public void close() throws IOException {\n    close(true);\n  }\n\n","sourceOld":"  /**\n   * Commits all changes to an index and closes all\n   * associated files.  Note that this may be a costly\n   * operation, so, try to re-use a single writer instead of\n   * closing and opening a new one.  See {@link #commit()} for\n   * caveats about write caching done by some IO devices.\n   *\n   * <p> If an Exception is hit during close, eg due to disk\n   * full or some other reason, then both the on-disk index\n   * and the internal state of the IndexWriter instance will\n   * be consistent.  However, the close will not be complete\n   * even though part of it (flushing buffered documents)\n   * may have succeeded, so the write lock will still be\n   * held.</p>\n   *\n   * <p> If you can correct the underlying cause (eg free up\n   * some disk space) then you can call close() again.\n   * Failing that, if you want to force the write lock to be\n   * released (dangerous, because you may then lose buffered\n   * docs in the IndexWriter instance) then you can do\n   * something like this:</p>\n   *\n   * <pre>\n   * try {\n   *   writer.close();\n   * } finally {\n   *   if (IndexWriter.isLocked(directory)) {\n   *     IndexWriter.unlock(directory);\n   *   }\n   * }\n   * </pre>\n   *\n   * after which, you must be certain not to use the writer\n   * instance anymore.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  public void close() throws IOException {\n    close(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8471c0f357621e859602d44e1af230581b739319","date":1347468766,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close().mjava","sourceNew":"  /**\n   * Commits all changes to an index, waits for pending merges\n   * to complete, and closes all associated files.  \n   * <p>\n   * This is a \"slow graceful shutdown\" which may take a long time\n   * especially if a big merge is pending: If you only want to close\n   * resources use {@link #rollback()}. If you only want to commit\n   * pending changes and close resources see {@link #close(boolean)}.\n   * <p>\n   * Note that this may be a costly\n   * operation, so, try to re-use a single writer instead of\n   * closing and opening a new one.  See {@link #commit()} for\n   * caveats about write caching done by some IO devices.\n   *\n   * <p> If an Exception is hit during close, eg due to disk\n   * full or some other reason, then both the on-disk index\n   * and the internal state of the IndexWriter instance will\n   * be consistent.  However, the close will not be complete\n   * even though part of it (flushing buffered documents)\n   * may have succeeded, so the write lock will still be\n   * held.</p>\n   *\n   * <p> If you can correct the underlying cause (eg free up\n   * some disk space) then you can call close() again.\n   * Failing that, if you want to force the write lock to be\n   * released (dangerous, because you may then lose buffered\n   * docs in the IndexWriter instance) then you can do\n   * something like this:</p>\n   *\n   * <pre class=\"prettyprint\">\n   * try {\n   *   writer.close();\n   * } finally {\n   *   if (IndexWriter.isLocked(directory)) {\n   *     IndexWriter.unlock(directory);\n   *   }\n   * }\n   * </pre>\n   *\n   * after which, you must be certain not to use the writer\n   * instance anymore.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  public void close() throws IOException {\n    close(true);\n  }\n\n","sourceOld":"  /**\n   * Commits all changes to an index, waits for pending merges\n   * to complete, and closes all associated files.  \n   * <p>\n   * This is a \"slow graceful shutdown\" which may take a long time\n   * especially if a big merge is pending: If you only want to close\n   * resources use {@link #rollback()}. If you only want to commit\n   * pending changes and close resources see {@link #close(boolean)}.\n   * <p>\n   * Note that this may be a costly\n   * operation, so, try to re-use a single writer instead of\n   * closing and opening a new one.  See {@link #commit()} for\n   * caveats about write caching done by some IO devices.\n   *\n   * <p> If an Exception is hit during close, eg due to disk\n   * full or some other reason, then both the on-disk index\n   * and the internal state of the IndexWriter instance will\n   * be consistent.  However, the close will not be complete\n   * even though part of it (flushing buffered documents)\n   * may have succeeded, so the write lock will still be\n   * held.</p>\n   *\n   * <p> If you can correct the underlying cause (eg free up\n   * some disk space) then you can call close() again.\n   * Failing that, if you want to force the write lock to be\n   * released (dangerous, because you may then lose buffered\n   * docs in the IndexWriter instance) then you can do\n   * something like this:</p>\n   *\n   * <pre>\n   * try {\n   *   writer.close();\n   * } finally {\n   *   if (IndexWriter.isLocked(directory)) {\n   *     IndexWriter.unlock(directory);\n   *   }\n   * }\n   * </pre>\n   *\n   * after which, you must be certain not to use the writer\n   * instance anymore.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  public void close() throws IOException {\n    close(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close().mjava","sourceNew":"  /**\n   * Commits all changes to an index, waits for pending merges\n   * to complete, and closes all associated files.  \n   * <p>\n   * This is a \"slow graceful shutdown\" which may take a long time\n   * especially if a big merge is pending: If you only want to close\n   * resources use {@link #rollback()}. If you only want to commit\n   * pending changes and close resources see {@link #close(boolean)}.\n   * <p>\n   * Note that this may be a costly\n   * operation, so, try to re-use a single writer instead of\n   * closing and opening a new one.  See {@link #commit()} for\n   * caveats about write caching done by some IO devices.\n   *\n   * <p> If an Exception is hit during close, eg due to disk\n   * full or some other reason, then both the on-disk index\n   * and the internal state of the IndexWriter instance will\n   * be consistent.  However, the close will not be complete\n   * even though part of it (flushing buffered documents)\n   * may have succeeded, so the write lock will still be\n   * held.</p>\n   *\n   * <p> If you can correct the underlying cause (eg free up\n   * some disk space) then you can call close() again.\n   * Failing that, if you want to force the write lock to be\n   * released (dangerous, because you may then lose buffered\n   * docs in the IndexWriter instance) then you can do\n   * something like this:</p>\n   *\n   * <pre class=\"prettyprint\">\n   * try {\n   *   writer.close();\n   * } finally {\n   *   if (IndexWriter.isLocked(directory)) {\n   *     IndexWriter.unlock(directory);\n   *   }\n   * }\n   * </pre>\n   *\n   * after which, you must be certain not to use the writer\n   * instance anymore.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  public void close() throws IOException {\n    close(true);\n  }\n\n","sourceOld":"  /**\n   * Commits all changes to an index, waits for pending merges\n   * to complete, and closes all associated files.  \n   * <p>\n   * This is a \"slow graceful shutdown\" which may take a long time\n   * especially if a big merge is pending: If you only want to close\n   * resources use {@link #rollback()}. If you only want to commit\n   * pending changes and close resources see {@link #close(boolean)}.\n   * <p>\n   * Note that this may be a costly\n   * operation, so, try to re-use a single writer instead of\n   * closing and opening a new one.  See {@link #commit()} for\n   * caveats about write caching done by some IO devices.\n   *\n   * <p> If an Exception is hit during close, eg due to disk\n   * full or some other reason, then both the on-disk index\n   * and the internal state of the IndexWriter instance will\n   * be consistent.  However, the close will not be complete\n   * even though part of it (flushing buffered documents)\n   * may have succeeded, so the write lock will still be\n   * held.</p>\n   *\n   * <p> If you can correct the underlying cause (eg free up\n   * some disk space) then you can call close() again.\n   * Failing that, if you want to force the write lock to be\n   * released (dangerous, because you may then lose buffered\n   * docs in the IndexWriter instance) then you can do\n   * something like this:</p>\n   *\n   * <pre class=\"prettyprint\">\n   * try {\n   *   writer.close();\n   * } finally {\n   *   if (IndexWriter.isLocked(directory)) {\n   *     IndexWriter.unlock(directory);\n   *   }\n   * }\n   * </pre>\n   *\n   * after which, you must be certain not to use the writer\n   * instance anymore.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  public void close() throws IOException {\n    close(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close().mjava","sourceNew":"  /**\n   * Commits all changes to an index, waits for pending merges\n   * to complete, and closes all associated files.  \n   * <p>\n   * This is a \"slow graceful shutdown\" which may take a long time\n   * especially if a big merge is pending: If you only want to close\n   * resources use {@link #rollback()}. If you only want to commit\n   * pending changes and close resources see {@link #close(boolean)}.\n   * <p>\n   * Note that this may be a costly\n   * operation, so, try to re-use a single writer instead of\n   * closing and opening a new one.  See {@link #commit()} for\n   * caveats about write caching done by some IO devices.\n   *\n   * <p> If an Exception is hit during close, eg due to disk\n   * full or some other reason, then both the on-disk index\n   * and the internal state of the IndexWriter instance will\n   * be consistent.  However, the close will not be complete\n   * even though part of it (flushing buffered documents)\n   * may have succeeded, so the write lock will still be\n   * held.</p>\n   *\n   * <p> If you can correct the underlying cause (eg free up\n   * some disk space) then you can call close() again.\n   * Failing that, if you want to force the write lock to be\n   * released (dangerous, because you may then lose buffered\n   * docs in the IndexWriter instance) then you can do\n   * something like this:</p>\n   *\n   * <pre class=\"prettyprint\">\n   * try {\n   *   writer.close();\n   * } finally {\n   *   if (IndexWriter.isLocked(directory)) {\n   *     IndexWriter.unlock(directory);\n   *   }\n   * }\n   * </pre>\n   *\n   * after which, you must be certain not to use the writer\n   * instance anymore.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  public void close() throws IOException {\n    close(true);\n  }\n\n","sourceOld":"  /**\n   * Commits all changes to an index, waits for pending merges\n   * to complete, and closes all associated files.  \n   * <p>\n   * This is a \"slow graceful shutdown\" which may take a long time\n   * especially if a big merge is pending: If you only want to close\n   * resources use {@link #rollback()}. If you only want to commit\n   * pending changes and close resources see {@link #close(boolean)}.\n   * <p>\n   * Note that this may be a costly\n   * operation, so, try to re-use a single writer instead of\n   * closing and opening a new one.  See {@link #commit()} for\n   * caveats about write caching done by some IO devices.\n   *\n   * <p> If an Exception is hit during close, eg due to disk\n   * full or some other reason, then both the on-disk index\n   * and the internal state of the IndexWriter instance will\n   * be consistent.  However, the close will not be complete\n   * even though part of it (flushing buffered documents)\n   * may have succeeded, so the write lock will still be\n   * held.</p>\n   *\n   * <p> If you can correct the underlying cause (eg free up\n   * some disk space) then you can call close() again.\n   * Failing that, if you want to force the write lock to be\n   * released (dangerous, because you may then lose buffered\n   * docs in the IndexWriter instance) then you can do\n   * something like this:</p>\n   *\n   * <pre class=\"prettyprint\">\n   * try {\n   *   writer.close();\n   * } finally {\n   *   if (IndexWriter.isLocked(directory)) {\n   *     IndexWriter.unlock(directory);\n   *   }\n   * }\n   * </pre>\n   *\n   * after which, you must be certain not to use the writer\n   * instance anymore.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  public void close() throws IOException {\n    close(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close().mjava","sourceNew":"  /**\n   * Closes all open resources and releases the write lock.\n   * If there are running merges or uncommitted\n   * changes:\n   * <ul>\n   *   <li> If config.matchVersion >= LUCENE_50 then the\n   *        changes are silently discarded.\n   *   <li> Otherwise, a RuntimeException is thrown to\n   *        indicate what was lost, but the IndexWriter is\n   *        still closed.\n   * </ul>\n   *\n   * Use {@link #shutdown} if you want to flush, commit, and\n   * wait for merges, before closing.\n   * \n   * @throws IOException if there is a low-level IO error\n   *   (the IndexWriter will still be closed)\n   * @throws RuntimeException if config.matchVersion <\n   *   LUCENE_50 and there were pending changes that were\n   *   lost (the IndexWriter will still be closed)\n   */\n  @Override\n  public void close() throws IOException {\n\n    // If there are uncommitted changes, or still running\n    // merges, we will in fact close, but we'll throw an\n    // exception notifying the caller that they lost\n    // changes, if IWC.matchVersion is < 5.0:\n    boolean lostChanges = false;\n\n    // Only check for lost changes if the version earlier than 5.0:\n    if (config.getMatchVersion().onOrAfter(Version.LUCENE_50) == false) {\n      lostChanges = hasUncommittedChanges();\n      if (lostChanges == false) {\n        synchronized(this) {\n          if (pendingMerges.isEmpty() == false) {\n            lostChanges = true;\n          }\n          if (runningMerges.isEmpty() == false) {\n            lostChanges = true;\n          }\n        }\n      }\n    }\n\n    // As long as there are no pending changes and no\n    // running merges, we just rollback to close:\n    rollback();\n\n    if (lostChanges) {\n      throw new RuntimeException(\"this writer is closed, but some pending changes or running merges were discarded; use shutdown to save pending changes and finish merges before closing\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Commits all changes to an index, waits for pending merges\n   * to complete, and closes all associated files.  \n   * <p>\n   * This is a \"slow graceful shutdown\" which may take a long time\n   * especially if a big merge is pending: If you only want to close\n   * resources use {@link #rollback()}. If you only want to commit\n   * pending changes and close resources see {@link #close(boolean)}.\n   * <p>\n   * Note that this may be a costly\n   * operation, so, try to re-use a single writer instead of\n   * closing and opening a new one.  See {@link #commit()} for\n   * caveats about write caching done by some IO devices.\n   *\n   * <p> If an Exception is hit during close, eg due to disk\n   * full or some other reason, then both the on-disk index\n   * and the internal state of the IndexWriter instance will\n   * be consistent.  However, the close will not be complete\n   * even though part of it (flushing buffered documents)\n   * may have succeeded, so the write lock will still be\n   * held.</p>\n   *\n   * <p> If you can correct the underlying cause (eg free up\n   * some disk space) then you can call close() again.\n   * Failing that, if you want to force the write lock to be\n   * released (dangerous, because you may then lose buffered\n   * docs in the IndexWriter instance) then you can do\n   * something like this:</p>\n   *\n   * <pre class=\"prettyprint\">\n   * try {\n   *   writer.close();\n   * } finally {\n   *   if (IndexWriter.isLocked(directory)) {\n   *     IndexWriter.unlock(directory);\n   *   }\n   * }\n   * </pre>\n   *\n   * after which, you must be certain not to use the writer\n   * instance anymore.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  public void close() throws IOException {\n    close(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd330c9d05eacbd6e952fe0dea852e7ae037eb50","date":1398873035,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close().mjava","sourceNew":"  /**\n   * Closes all open resources and releases the write lock.\n   * If there are running merges or uncommitted\n   * changes:\n   * <ul>\n   *   <li> If config.matchVersion >= LUCENE_5_0 then the\n   *        changes are silently discarded.\n   *   <li> Otherwise, a RuntimeException is thrown to\n   *        indicate what was lost, but the IndexWriter is\n   *        still closed.\n   * </ul>\n   *\n   * Use {@link #shutdown} if you want to flush, commit, and\n   * wait for merges, before closing.\n   * \n   * @throws IOException if there is a low-level IO error\n   *   (the IndexWriter will still be closed)\n   * @throws RuntimeException if config.matchVersion <\n   *   LUCENE_5_0 and there were pending changes that were\n   *   lost (the IndexWriter will still be closed)\n   */\n  @Override\n  public void close() throws IOException {\n\n    // If there are uncommitted changes, or still running\n    // merges, we will in fact close, but we'll throw an\n    // exception notifying the caller that they lost\n    // changes, if IWC.matchVersion is < 5.0:\n    boolean lostChanges = false;\n\n    // Only check for lost changes if the version earlier than 5.0:\n    if (config.getMatchVersion().onOrAfter(Version.LUCENE_5_0) == false) {\n      lostChanges = hasUncommittedChanges();\n      if (lostChanges == false) {\n        synchronized(this) {\n          if (pendingMerges.isEmpty() == false) {\n            lostChanges = true;\n          }\n          if (runningMerges.isEmpty() == false) {\n            lostChanges = true;\n          }\n        }\n      }\n    }\n\n    // As long as there are no pending changes and no\n    // running merges, we just rollback to close:\n    rollback();\n\n    if (lostChanges) {\n      throw new RuntimeException(\"this writer is closed, but some pending changes or running merges were discarded; use shutdown to save pending changes and finish merges before closing\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes all open resources and releases the write lock.\n   * If there are running merges or uncommitted\n   * changes:\n   * <ul>\n   *   <li> If config.matchVersion >= LUCENE_50 then the\n   *        changes are silently discarded.\n   *   <li> Otherwise, a RuntimeException is thrown to\n   *        indicate what was lost, but the IndexWriter is\n   *        still closed.\n   * </ul>\n   *\n   * Use {@link #shutdown} if you want to flush, commit, and\n   * wait for merges, before closing.\n   * \n   * @throws IOException if there is a low-level IO error\n   *   (the IndexWriter will still be closed)\n   * @throws RuntimeException if config.matchVersion <\n   *   LUCENE_50 and there were pending changes that were\n   *   lost (the IndexWriter will still be closed)\n   */\n  @Override\n  public void close() throws IOException {\n\n    // If there are uncommitted changes, or still running\n    // merges, we will in fact close, but we'll throw an\n    // exception notifying the caller that they lost\n    // changes, if IWC.matchVersion is < 5.0:\n    boolean lostChanges = false;\n\n    // Only check for lost changes if the version earlier than 5.0:\n    if (config.getMatchVersion().onOrAfter(Version.LUCENE_50) == false) {\n      lostChanges = hasUncommittedChanges();\n      if (lostChanges == false) {\n        synchronized(this) {\n          if (pendingMerges.isEmpty() == false) {\n            lostChanges = true;\n          }\n          if (runningMerges.isEmpty() == false) {\n            lostChanges = true;\n          }\n        }\n      }\n    }\n\n    // As long as there are no pending changes and no\n    // running merges, we just rollback to close:\n    rollback();\n\n    if (lostChanges) {\n      throw new RuntimeException(\"this writer is closed, but some pending changes or running merges were discarded; use shutdown to save pending changes and finish merges before closing\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close().mjava","sourceNew":"  /**\n   * Closes all open resources and releases the write lock.\n   *\n   * If {@link IndexWriterConfig#commitOnClose} is <code>true</code>,\n   * this will attempt to gracefully shut down by writing any\n   * changes, waiting for any running merges, committing, and closing.\n   * In this case, note that:\n   * <ul>\n   *   <li>If you called prepareCommit but failed to call commit, this\n   *       method will throw {@code IllegalStateException} and the {@code IndexWriter}\n   *       will not be closed.</li>\n   *   <li>If this method throws any other exception, the {@code IndexWriter}\n   *       will be closed, but changes may have been lost.</li>\n   * </ul>\n   *\n   * <p><b>NOTE</b>: You must ensure no other threads are still making\n   * changes at the same time that this method is invoked.</p>\n   */\n  @Override\n  public void close() throws IOException {\n    if (config.getCommitOnClose()) {\n      if (closed == false) {\n        shutdown();\n      }\n    } else {\n      rollback();\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes all open resources and releases the write lock.\n   * If there are running merges or uncommitted\n   * changes:\n   * <ul>\n   *   <li> If config.matchVersion >= LUCENE_5_0 then the\n   *        changes are silently discarded.\n   *   <li> Otherwise, a RuntimeException is thrown to\n   *        indicate what was lost, but the IndexWriter is\n   *        still closed.\n   * </ul>\n   *\n   * Use {@link #shutdown} if you want to flush, commit, and\n   * wait for merges, before closing.\n   * \n   * @throws IOException if there is a low-level IO error\n   *   (the IndexWriter will still be closed)\n   * @throws RuntimeException if config.matchVersion <\n   *   LUCENE_5_0 and there were pending changes that were\n   *   lost (the IndexWriter will still be closed)\n   */\n  @Override\n  public void close() throws IOException {\n\n    // If there are uncommitted changes, or still running\n    // merges, we will in fact close, but we'll throw an\n    // exception notifying the caller that they lost\n    // changes, if IWC.matchVersion is < 5.0:\n    boolean lostChanges = false;\n\n    // Only check for lost changes if the version earlier than 5.0:\n    if (config.getMatchVersion().onOrAfter(Version.LUCENE_5_0) == false) {\n      lostChanges = hasUncommittedChanges();\n      if (lostChanges == false) {\n        synchronized(this) {\n          if (pendingMerges.isEmpty() == false) {\n            lostChanges = true;\n          }\n          if (runningMerges.isEmpty() == false) {\n            lostChanges = true;\n          }\n        }\n      }\n    }\n\n    // As long as there are no pending changes and no\n    // running merges, we just rollback to close:\n    rollback();\n\n    if (lostChanges) {\n      throw new RuntimeException(\"this writer is closed, but some pending changes or running merges were discarded; use shutdown to save pending changes and finish merges before closing\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ea6955c7bfffe05682ad0a667afb2a6fa85e9da","date":1408027865,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close().mjava","sourceNew":"  /**\n   * Closes all open resources and releases the write lock.\n   *\n   * If {@link IndexWriterConfig#commitOnClose} is <code>true</code>,\n   * this will attempt to gracefully shut down by writing any\n   * changes, waiting for any running merges, committing, and closing.\n   * In this case, note that:\n   * <ul>\n   *   <li>If you called prepareCommit but failed to call commit, this\n   *       method will throw {@code IllegalStateException} and the {@code IndexWriter}\n   *       will not be closed.</li>\n   *   <li>If this method throws any other exception, the {@code IndexWriter}\n   *       will be closed, but changes may have been lost.</li>\n   * </ul>\n   *\n   * <p>\n   * Note that this may be a costly\n   * operation, so, try to re-use a single writer instead of\n   * closing and opening a new one.  See {@link #commit()} for\n   * caveats about write caching done by some IO devices.\n   *\n   * <p><b>NOTE</b>: You must ensure no other threads are still making\n   * changes at the same time that this method is invoked.</p>\n   */\n  @Override\n  public void close() throws IOException {\n    if (config.getCommitOnClose()) {\n      shutdown();\n    } else {\n      rollback();\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes all open resources and releases the write lock.\n   *\n   * If {@link IndexWriterConfig#commitOnClose} is <code>true</code>,\n   * this will attempt to gracefully shut down by writing any\n   * changes, waiting for any running merges, committing, and closing.\n   * In this case, note that:\n   * <ul>\n   *   <li>If you called prepareCommit but failed to call commit, this\n   *       method will throw {@code IllegalStateException} and the {@code IndexWriter}\n   *       will not be closed.</li>\n   *   <li>If this method throws any other exception, the {@code IndexWriter}\n   *       will be closed, but changes may have been lost.</li>\n   * </ul>\n   *\n   * <p><b>NOTE</b>: You must ensure no other threads are still making\n   * changes at the same time that this method is invoked.</p>\n   */\n  @Override\n  public void close() throws IOException {\n    if (config.getCommitOnClose()) {\n      if (closed == false) {\n        shutdown();\n      }\n    } else {\n      rollback();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["8471c0f357621e859602d44e1af230581b739319","7530de27b87b961b51f01bd1299b7004d46e8823"],"2e4f784dd2d92736e675a7fb47e03556c8b9e074":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["fe33227f6805edab2036cbb80645cc4e2d1fa424"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c","2e4f784dd2d92736e675a7fb47e03556c8b9e074"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","2e4f784dd2d92736e675a7fb47e03556c8b9e074"],"5ea6955c7bfffe05682ad0a667afb2a6fa85e9da":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"8471c0f357621e859602d44e1af230581b739319":["2e4f784dd2d92736e675a7fb47e03556c8b9e074"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["dd330c9d05eacbd6e952fe0dea852e7ae037eb50"],"dd330c9d05eacbd6e952fe0dea852e7ae037eb50":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["7530de27b87b961b51f01bd1299b7004d46e8823"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7530de27b87b961b51f01bd1299b7004d46e8823":["8471c0f357621e859602d44e1af230581b739319"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ea6955c7bfffe05682ad0a667afb2a6fa85e9da"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"2e4f784dd2d92736e675a7fb47e03556c8b9e074":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","8471c0f357621e859602d44e1af230581b739319"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"8471c0f357621e859602d44e1af230581b739319":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"5ea6955c7bfffe05682ad0a667afb2a6fa85e9da":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["5ea6955c7bfffe05682ad0a667afb2a6fa85e9da"],"dd330c9d05eacbd6e952fe0dea852e7ae037eb50":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["dd330c9d05eacbd6e952fe0dea852e7ae037eb50"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["2e4f784dd2d92736e675a7fb47e03556c8b9e074","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}