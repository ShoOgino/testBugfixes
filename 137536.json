{"path":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","sourceNew":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      // shardCounts could be null if there was an exception\n      int sz = shardCounts == null ? 0 : shardCounts.size();\n      int numReceived = sz;\n\n      OpenBitSet terms = new OpenBitSet(termNum+sz);\n\n      long last = 0;\n      for (int i=0; i<sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number)shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          sfc.count += count;\n          terms.fastSet(sfc.termNum);\n          last = count;\n        }\n      }\n\n      // the largest possible missing term is initialMincount if we received less\n      // than the number requested.\n      if (numRequested<0 || numRequested != 0 && numReceived < numRequested) {\n        last = initialMincount;\n      }\n\n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","sourceOld":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      // shardCounts could be null if there was an exception\n      int sz = shardCounts == null ? 0 : shardCounts.size();\n      int numReceived = sz;\n\n      OpenBitSet terms = new OpenBitSet(termNum+sz);\n\n      long last = 0;\n      for (int i=0; i<sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number)shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          sfc.count += count;\n          terms.fastSet(sfc.termNum);\n          last = count;\n        }\n      }\n\n      // the largest possible missing term is initialMincount if we received less\n      // than the number requested.\n      if (numRequested<0 || numRequested != 0 && numReceived < numRequested) {\n        last = initialMincount;\n      }\n\n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","sourceNew":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      // shardCounts could be null if there was an exception\n      int sz = shardCounts == null ? 0 : shardCounts.size();\n      int numReceived = sz;\n\n      OpenBitSet terms = new OpenBitSet(termNum+sz);\n\n      long last = 0;\n      for (int i=0; i<sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number)shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          sfc.count += count;\n          terms.fastSet(sfc.termNum);\n          last = count;\n        }\n      }\n\n      // the largest possible missing term is initialMincount if we received less\n      // than the number requested.\n      if (numRequested<0 || numRequested != 0 && numReceived < numRequested) {\n        last = initialMincount;\n      }\n\n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","sourceOld":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      // shardCounts could be null if there was an exception\n      int sz = shardCounts == null ? 0 : shardCounts.size();\n      int numReceived = sz;\n\n      OpenBitSet terms = new OpenBitSet(termNum+sz);\n\n      long last = 0;\n      for (int i=0; i<sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number)shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          sfc.count += count;\n          terms.fastSet(sfc.termNum);\n          last = count;\n        }\n      }\n\n      // the largest possible missing term is initialMincount if we received less\n      // than the number requested.\n      if (numRequested<0 || numRequested != 0 && numReceived < numRequested) {\n        last = initialMincount;\n      }\n\n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","sourceNew":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      // shardCounts could be null if there was an exception\n      int sz = shardCounts == null ? 0 : shardCounts.size();\n      int numReceived = sz;\n\n      OpenBitSet terms = new OpenBitSet(termNum+sz);\n\n      long last = 0;\n      for (int i=0; i<sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number)shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          sfc.count += count;\n          terms.fastSet(sfc.termNum);\n          last = count;\n        }\n      }\n\n      // the largest possible missing term is initialMincount if we received less\n      // than the number requested.\n      if (numRequested<0 || numRequested != 0 && numReceived < numRequested) {\n        last = initialMincount;\n      }\n\n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","sourceOld":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      // shardCounts could be null if there was an exception\n      int sz = shardCounts == null ? 0 : shardCounts.size();\n      int numReceived = sz;\n\n      OpenBitSet terms = new OpenBitSet(termNum+sz);\n\n      long last = 0;\n      for (int i=0; i<sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number)shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          sfc.count += count;\n          terms.fastSet(sfc.termNum);\n          last = count;\n        }\n      }\n\n      // the largest possible missing term is initialMincount if we received less\n      // than the number requested.\n      if (numRequested<0 || numRequested != 0 && numReceived < numRequested) {\n        last = initialMincount;\n      }\n\n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1","date":1392536197,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","sourceNew":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      // shardCounts could be null if there was an exception\n      int sz = shardCounts == null ? 0 : shardCounts.size();\n      int numReceived = sz;\n\n      FixedBitSet terms = new FixedBitSet(termNum+sz);\n\n      long last = 0;\n      for (int i=0; i<sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number)shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          sfc.count += count;\n          terms.set(sfc.termNum);\n          last = count;\n        }\n      }\n\n      // the largest possible missing term is initialMincount if we received less\n      // than the number requested.\n      if (numRequested<0 || numRequested != 0 && numReceived < numRequested) {\n        last = initialMincount;\n      }\n\n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","sourceOld":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      // shardCounts could be null if there was an exception\n      int sz = shardCounts == null ? 0 : shardCounts.size();\n      int numReceived = sz;\n\n      OpenBitSet terms = new OpenBitSet(termNum+sz);\n\n      long last = 0;\n      for (int i=0; i<sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number)shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          sfc.count += count;\n          terms.fastSet(sfc.termNum);\n          last = count;\n        }\n      }\n\n      // the largest possible missing term is initialMincount if we received less\n      // than the number requested.\n      if (numRequested<0 || numRequested != 0 && numReceived < numRequested) {\n        last = initialMincount;\n      }\n\n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92751ba9273251eab6a2e379ec42a1697a32ff96","date":1407954233,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","sourceNew":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      // shardCounts could be null if there was an exception\n      int sz = shardCounts == null ? 0 : shardCounts.size();\n      int numReceived = sz;\n      \n      FixedBitSet terms = new FixedBitSet(termNum + sz);\n      \n      long last = 0;\n      for (int i = 0; i < sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number) shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          sfc.count += count;\n          terms.set(sfc.termNum);\n          last = count;\n        }\n      }\n      \n      // the largest possible missing term is initialMincount if we received\n      // less than the number requested.\n      if (numRequested < 0 || numRequested != 0 && numReceived < numRequested) {\n        last = initialMincount;\n      }\n      \n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","sourceOld":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      // shardCounts could be null if there was an exception\n      int sz = shardCounts == null ? 0 : shardCounts.size();\n      int numReceived = sz;\n\n      FixedBitSet terms = new FixedBitSet(termNum+sz);\n\n      long last = 0;\n      for (int i=0; i<sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number)shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          sfc.count += count;\n          terms.set(sfc.termNum);\n          last = count;\n        }\n      }\n\n      // the largest possible missing term is initialMincount if we received less\n      // than the number requested.\n      if (numRequested<0 || numRequested != 0 && numReceived < numRequested) {\n        last = initialMincount;\n      }\n\n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ff4734b6c86245e852fe8b6a286716d5e59d415","date":1410194063,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","sourceNew":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      // shardCounts could be null if there was an exception\n      int sz = shardCounts == null ? 0 : shardCounts.size();\n      int numReceived = sz;\n      \n      FixedBitSet terms = new FixedBitSet(termNum + sz);\n\n      long last = 0;\n      for (int i = 0; i < sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number) shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          sfc.count += count;\n          terms.set(sfc.termNum);\n          last = count;\n        }\n      }\n      \n      // the largest possible missing term is initialMincount if we received\n      // less than the number requested.\n      if (numRequested < 0 || numRequested != 0 && numReceived < numRequested) {\n        last = initialMincount;\n      }\n      \n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","sourceOld":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      // shardCounts could be null if there was an exception\n      int sz = shardCounts == null ? 0 : shardCounts.size();\n      int numReceived = sz;\n      \n      FixedBitSet terms = new FixedBitSet(termNum + sz);\n      \n      long last = 0;\n      for (int i = 0; i < sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number) shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          sfc.count += count;\n          terms.set(sfc.termNum);\n          last = count;\n        }\n      }\n      \n      // the largest possible missing term is initialMincount if we received\n      // less than the number requested.\n      if (numRequested < 0 || numRequested != 0 && numReceived < numRequested) {\n        last = initialMincount;\n      }\n      \n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39342cb658ac11dfcbf4459807fb00eb9ada0218","date":1472876688,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","sourceNew":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      // shardCounts could be null if there was an exception\n      int sz = shardCounts == null ? 0 : shardCounts.size();\n      int numReceived = sz;\n      \n      FixedBitSet terms = new FixedBitSet(termNum + sz);\n\n      long last = 0;\n      for (int i = 0; i < sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number) shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          incCount(sfc, count);\n          terms.set(sfc.termNum);\n          last = count;\n        }\n      }\n      \n      // the largest possible missing term is initialMincount if we received\n      // less than the number requested.\n      if (numRequested < 0 || numRequested != 0 && numReceived < numRequested) {\n        last = initialMincount;\n      }\n      \n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","sourceOld":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      // shardCounts could be null if there was an exception\n      int sz = shardCounts == null ? 0 : shardCounts.size();\n      int numReceived = sz;\n      \n      FixedBitSet terms = new FixedBitSet(termNum + sz);\n\n      long last = 0;\n      for (int i = 0; i < sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number) shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          sfc.count += count;\n          terms.set(sfc.termNum);\n          last = count;\n        }\n      }\n      \n      // the largest possible missing term is initialMincount if we received\n      // less than the number requested.\n      if (numRequested < 0 || numRequested != 0 && numReceived < numRequested) {\n        last = initialMincount;\n      }\n      \n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f206328a706450934717bec7ccc22ad166fc0","date":1473142172,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","sourceNew":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      // shardCounts could be null if there was an exception\n      int sz = shardCounts == null ? 0 : shardCounts.size();\n      int numReceived = sz;\n      \n      FixedBitSet terms = new FixedBitSet(termNum + sz);\n\n      long last = 0;\n      for (int i = 0; i < sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number) shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          incCount(sfc, count);\n          terms.set(sfc.termNum);\n          last = count;\n        }\n      }\n      \n      // the largest possible missing term is initialMincount if we received\n      // less than the number requested.\n      if (numRequested < 0 || numRequested != 0 && numReceived < numRequested) {\n        last = initialMincount;\n      }\n      \n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","sourceOld":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      // shardCounts could be null if there was an exception\n      int sz = shardCounts == null ? 0 : shardCounts.size();\n      int numReceived = sz;\n      \n      FixedBitSet terms = new FixedBitSet(termNum + sz);\n\n      long last = 0;\n      for (int i = 0; i < sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number) shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          sfc.count += count;\n          terms.set(sfc.termNum);\n          last = count;\n        }\n      }\n      \n      // the largest possible missing term is initialMincount if we received\n      // less than the number requested.\n      if (numRequested < 0 || numRequested != 0 && numReceived < numRequested) {\n        last = initialMincount;\n      }\n      \n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89424def13674ea17829b41c5883c54ecc31a132","date":1473767373,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","sourceNew":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      // shardCounts could be null if there was an exception\n      int sz = shardCounts == null ? 0 : shardCounts.size();\n      int numReceived = sz;\n      \n      FixedBitSet terms = new FixedBitSet(termNum + sz);\n\n      long last = 0;\n      for (int i = 0; i < sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number) shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          incCount(sfc, count);\n          terms.set(sfc.termNum);\n          last = count;\n        }\n      }\n      \n      // the largest possible missing term is initialMincount if we received\n      // less than the number requested.\n      if (numRequested < 0 || numRequested != 0 && numReceived < numRequested) {\n        last = initialMincount;\n      }\n      \n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","sourceOld":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      // shardCounts could be null if there was an exception\n      int sz = shardCounts == null ? 0 : shardCounts.size();\n      int numReceived = sz;\n      \n      FixedBitSet terms = new FixedBitSet(termNum + sz);\n\n      long last = 0;\n      for (int i = 0; i < sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number) shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          sfc.count += count;\n          terms.set(sfc.termNum);\n          last = count;\n        }\n      }\n      \n      // the largest possible missing term is initialMincount if we received\n      // less than the number requested.\n      if (numRequested < 0 || numRequested != 0 && numReceived < numRequested) {\n        last = initialMincount;\n      }\n      \n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","sourceNew":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      // shardCounts could be null if there was an exception\n      int sz = shardCounts == null ? 0 : shardCounts.size();\n      int numReceived = sz;\n      \n      FixedBitSet terms = new FixedBitSet(termNum + sz);\n\n      long last = 0;\n      for (int i = 0; i < sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number) shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          incCount(sfc, count);\n          terms.set(sfc.termNum);\n          last = count;\n        }\n      }\n      \n      // the largest possible missing term is initialMincount if we received\n      // less than the number requested.\n      if (numRequested < 0 || numRequested != 0 && numReceived < numRequested) {\n        last = initialMincount;\n      }\n      \n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","sourceOld":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      // shardCounts could be null if there was an exception\n      int sz = shardCounts == null ? 0 : shardCounts.size();\n      int numReceived = sz;\n      \n      FixedBitSet terms = new FixedBitSet(termNum + sz);\n\n      long last = 0;\n      for (int i = 0; i < sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number) shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          sfc.count += count;\n          terms.set(sfc.termNum);\n          last = count;\n        }\n      }\n      \n      // the largest possible missing term is initialMincount if we received\n      // less than the number requested.\n      if (numRequested < 0 || numRequested != 0 && numReceived < numRequested) {\n        last = initialMincount;\n      }\n      \n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","sourceNew":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      // shardCounts could be null if there was an exception\n      int sz = shardCounts == null ? 0 : shardCounts.size();\n      int numReceived = sz;\n      \n      FixedBitSet terms = new FixedBitSet(termNum + sz);\n\n      long last = 0;\n      for (int i = 0; i < sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number) shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          incCount(sfc, count);\n          terms.set(sfc.termNum);\n          last = count;\n        }\n      }\n      \n      // the largest possible missing term is initialMincount if we received\n      // less than the number requested.\n      if (numRequested < 0 || numRequested != 0 && numReceived < numRequested) {\n        last = initialMincount;\n      }\n      \n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","sourceOld":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      // shardCounts could be null if there was an exception\n      int sz = shardCounts == null ? 0 : shardCounts.size();\n      int numReceived = sz;\n      \n      FixedBitSet terms = new FixedBitSet(termNum + sz);\n\n      long last = 0;\n      for (int i = 0; i < sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number) shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          sfc.count += count;\n          terms.set(sfc.termNum);\n          last = count;\n        }\n      }\n      \n      // the largest possible missing term is initialMincount if we received\n      // less than the number requested.\n      if (numRequested < 0 || numRequested != 0 && numReceived < numRequested) {\n        last = initialMincount;\n      }\n      \n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46dc9ac8b3e748407baaef82453138ff3974480c","date":1484789241,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","sourceNew":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      // shardCounts could be null if there was an exception\n      int sz = shardCounts == null ? 0 : shardCounts.size();\n      int numReceived = sz;\n      \n      FixedBitSet terms = new FixedBitSet(termNum + sz);\n\n      long last = 0;\n      for (int i = 0; i < sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number) shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            if (ftype == null) {\n              sfc.indexed = null;\n            } else if (ftype.isPointField()) {\n              sfc.indexed = ((PointField)ftype).toInternalByteRef(sfc.name);\n            } else {\n              sfc.indexed = new BytesRef(ftype.toInternal(sfc.name));\n            }\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          incCount(sfc, count);\n          terms.set(sfc.termNum);\n          last = count;\n        }\n      }\n      \n      // the largest possible missing term is initialMincount if we received\n      // less than the number requested.\n      if (numRequested < 0 || numRequested != 0 && numReceived < numRequested) {\n        last = initialMincount;\n      }\n      \n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","sourceOld":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      // shardCounts could be null if there was an exception\n      int sz = shardCounts == null ? 0 : shardCounts.size();\n      int numReceived = sz;\n      \n      FixedBitSet terms = new FixedBitSet(termNum + sz);\n\n      long last = 0;\n      for (int i = 0; i < sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number) shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          incCount(sfc, count);\n          terms.set(sfc.termNum);\n          last = count;\n        }\n      }\n      \n      // the largest possible missing term is initialMincount if we received\n      // less than the number requested.\n      if (numRequested < 0 || numRequested != 0 && numReceived < numRequested) {\n        last = initialMincount;\n      }\n      \n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","sourceNew":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      // shardCounts could be null if there was an exception\n      int sz = shardCounts == null ? 0 : shardCounts.size();\n      int numReceived = sz;\n      \n      FixedBitSet terms = new FixedBitSet(termNum + sz);\n\n      long last = 0;\n      for (int i = 0; i < sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number) shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            if (ftype == null) {\n              sfc.indexed = null;\n            } else if (ftype.isPointField()) {\n              sfc.indexed = ((PointField)ftype).toInternalByteRef(sfc.name);\n            } else {\n              sfc.indexed = new BytesRef(ftype.toInternal(sfc.name));\n            }\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          incCount(sfc, count);\n          terms.set(sfc.termNum);\n          last = count;\n        }\n      }\n      \n      // the largest possible missing term is initialMincount if we received\n      // less than the number requested.\n      if (numRequested < 0 || numRequested != 0 && numReceived < numRequested) {\n        last = initialMincount;\n      }\n      \n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","sourceOld":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      // shardCounts could be null if there was an exception\n      int sz = shardCounts == null ? 0 : shardCounts.size();\n      int numReceived = sz;\n      \n      FixedBitSet terms = new FixedBitSet(termNum + sz);\n\n      long last = 0;\n      for (int i = 0; i < sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number) shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          incCount(sfc, count);\n          terms.set(sfc.termNum);\n          last = count;\n        }\n      }\n      \n      // the largest possible missing term is initialMincount if we received\n      // less than the number requested.\n      if (numRequested < 0 || numRequested != 0 && numReceived < numRequested) {\n        last = initialMincount;\n      }\n      \n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef57266eb048f5d440958e9b0612adf7535e5e8b","date":1513013215,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","sourceNew":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      // shardCounts could be null if there was an exception\n      int sz = shardCounts == null ? 0 : shardCounts.size();\n      int numReceived = sz;\n      \n      FixedBitSet terms = new FixedBitSet(termNum + sz);\n\n      long last = 0;\n      for (int i = 0; i < sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number) shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            if (ftype == null) {\n              sfc.indexed = null;\n            } else if (ftype.isPointField()) {\n              sfc.indexed = ((PointField)ftype).toInternalByteRef(sfc.name);\n            } else {\n              sfc.indexed = new BytesRef(ftype.toInternal(sfc.name));\n            }\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          incCount(sfc, count);\n          terms.set(sfc.termNum);\n          last = count;\n        }\n      }\n      \n      // the largest possible missing term is (initialMincount - 1) if we received\n      // less than the number requested.\n      if (numRequested < 0 || numRequested != 0 && numReceived < numRequested) {\n        last = Math.max(0, initialMincount - 1);\n      }\n      \n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","sourceOld":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      // shardCounts could be null if there was an exception\n      int sz = shardCounts == null ? 0 : shardCounts.size();\n      int numReceived = sz;\n      \n      FixedBitSet terms = new FixedBitSet(termNum + sz);\n\n      long last = 0;\n      for (int i = 0; i < sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number) shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            if (ftype == null) {\n              sfc.indexed = null;\n            } else if (ftype.isPointField()) {\n              sfc.indexed = ((PointField)ftype).toInternalByteRef(sfc.name);\n            } else {\n              sfc.indexed = new BytesRef(ftype.toInternal(sfc.name));\n            }\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          incCount(sfc, count);\n          terms.set(sfc.termNum);\n          last = count;\n        }\n      }\n      \n      // the largest possible missing term is initialMincount if we received\n      // less than the number requested.\n      if (numRequested < 0 || numRequested != 0 && numReceived < numRequested) {\n        last = initialMincount;\n      }\n      \n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"927e6deec13723e5fd6fb8f1e0457e8597dae15e","date":1513167013,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","sourceNew":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      // shardCounts could be null if there was an exception\n      int sz = shardCounts == null ? 0 : shardCounts.size();\n      int numReceived = sz;\n      \n      FixedBitSet terms = new FixedBitSet(termNum + sz);\n\n      long last = 0;\n      for (int i = 0; i < sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number) shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            if (ftype == null) {\n              sfc.indexed = null;\n            } else if (ftype.isPointField()) {\n              sfc.indexed = ((PointField)ftype).toInternalByteRef(sfc.name);\n            } else {\n              sfc.indexed = new BytesRef(ftype.toInternal(sfc.name));\n            }\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          incCount(sfc, count);\n          terms.set(sfc.termNum);\n          last = count;\n        }\n      }\n      \n      // the largest possible missing term is (initialMincount - 1) if we received\n      // less than the number requested.\n      if (numRequested < 0 || numRequested != 0 && numReceived < numRequested) {\n        last = Math.max(0, initialMincount - 1);\n      }\n      \n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","sourceOld":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      // shardCounts could be null if there was an exception\n      int sz = shardCounts == null ? 0 : shardCounts.size();\n      int numReceived = sz;\n      \n      FixedBitSet terms = new FixedBitSet(termNum + sz);\n\n      long last = 0;\n      for (int i = 0; i < sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number) shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            if (ftype == null) {\n              sfc.indexed = null;\n            } else if (ftype.isPointField()) {\n              sfc.indexed = ((PointField)ftype).toInternalByteRef(sfc.name);\n            } else {\n              sfc.indexed = new BytesRef(ftype.toInternal(sfc.name));\n            }\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          incCount(sfc, count);\n          terms.set(sfc.termNum);\n          last = count;\n        }\n      }\n      \n      // the largest possible missing term is initialMincount if we received\n      // less than the number requested.\n      if (numRequested < 0 || numRequested != 0 && numReceived < numRequested) {\n        last = initialMincount;\n      }\n      \n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"92751ba9273251eab6a2e379ec42a1697a32ff96":["a69cf7f1b4cac5d5b1363402b565cd535f13e6a1"],"ef57266eb048f5d440958e9b0612adf7535e5e8b":["46dc9ac8b3e748407baaef82453138ff3974480c"],"46dc9ac8b3e748407baaef82453138ff3974480c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"bc8f206328a706450934717bec7ccc22ad166fc0":["8ff4734b6c86245e852fe8b6a286716d5e59d415","39342cb658ac11dfcbf4459807fb00eb9ada0218"],"39342cb658ac11dfcbf4459807fb00eb9ada0218":["8ff4734b6c86245e852fe8b6a286716d5e59d415"],"927e6deec13723e5fd6fb8f1e0457e8597dae15e":["46dc9ac8b3e748407baaef82453138ff3974480c","ef57266eb048f5d440958e9b0612adf7535e5e8b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["8ff4734b6c86245e852fe8b6a286716d5e59d415","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","46dc9ac8b3e748407baaef82453138ff3974480c"],"89424def13674ea17829b41c5883c54ecc31a132":["8ff4734b6c86245e852fe8b6a286716d5e59d415","bc8f206328a706450934717bec7ccc22ad166fc0"],"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["8ff4734b6c86245e852fe8b6a286716d5e59d415","89424def13674ea17829b41c5883c54ecc31a132"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8ff4734b6c86245e852fe8b6a286716d5e59d415":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["927e6deec13723e5fd6fb8f1e0457e8597dae15e"]},"commit2Childs":{"92751ba9273251eab6a2e379ec42a1697a32ff96":["8ff4734b6c86245e852fe8b6a286716d5e59d415"],"ef57266eb048f5d440958e9b0612adf7535e5e8b":["927e6deec13723e5fd6fb8f1e0457e8597dae15e"],"46dc9ac8b3e748407baaef82453138ff3974480c":["ef57266eb048f5d440958e9b0612adf7535e5e8b","927e6deec13723e5fd6fb8f1e0457e8597dae15e","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"c26f00b574427b55127e869b935845554afde1fa":["a69cf7f1b4cac5d5b1363402b565cd535f13e6a1"],"bc8f206328a706450934717bec7ccc22ad166fc0":["89424def13674ea17829b41c5883c54ecc31a132"],"39342cb658ac11dfcbf4459807fb00eb9ada0218":["bc8f206328a706450934717bec7ccc22ad166fc0"],"927e6deec13723e5fd6fb8f1e0457e8597dae15e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"89424def13674ea17829b41c5883c54ecc31a132":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["46dc9ac8b3e748407baaef82453138ff3974480c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"8ff4734b6c86245e852fe8b6a286716d5e59d415":["bc8f206328a706450934717bec7ccc22ad166fc0","39342cb658ac11dfcbf4459807fb00eb9ada0218","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","89424def13674ea17829b41c5883c54ecc31a132","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}