{"path":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationMap(Config).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationMap(Config).mjava","pathOld":"/dev/null","sourceNew":"  private Map<String, ElevationObj> loadElevationMap( Config cfg ) throws IOException\n  {\n    XPath xpath = XPathFactory.newInstance().newXPath();\n    Map<String, ElevationObj> map = new HashMap<String, ElevationObj>();\n    NodeList nodes = (NodeList)cfg.evaluate( \"elevate/query\", XPathConstants.NODESET );\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item( i );\n      String qstr = DOMUtil.getAttr( node, \"text\", \"missing query 'text'\" );\n      \n      NodeList children = null;\n      try {\n        children = (NodeList)xpath.evaluate(\"doc\", node, XPathConstants.NODESET);\n      } \n      catch (XPathExpressionException e) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"query requires '<doc .../>' child\" );\n      }\n\n      ArrayList<String> include = new ArrayList<String>();\n      ArrayList<String> exclude = new ArrayList<String>();\n      for (int j=0; j<children.getLength(); j++) {\n        Node child = children.item(j);\n        String id = DOMUtil.getAttr( child, \"id\", \"missing 'id'\" );\n        String e = DOMUtil.getAttr( child, EXCLUDE, null );\n        if( e != null ) {\n          if( Boolean.valueOf( e ) ) {\n            exclude.add( id );\n            continue;\n          }\n        }\n        include.add( id );\n      }\n      \n      ElevationObj elev = new ElevationObj( qstr, include, exclude );\n      if( map.containsKey( elev.analyzed ) ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"Boosting query defined twice for query: '\"+elev.text+\"' (\"+elev.analyzed+\"')\" );\n      }\n      map.put( elev.analyzed, elev );\n    }\n    return map;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationMap(Config).mjava","sourceNew":null,"sourceOld":"  private Map<String, ElevationObj> loadElevationMap( Config cfg ) throws IOException\n  {\n    XPath xpath = XPathFactory.newInstance().newXPath();\n    Map<String, ElevationObj> map = new HashMap<String, ElevationObj>();\n    NodeList nodes = (NodeList)cfg.evaluate( \"elevate/query\", XPathConstants.NODESET );\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item( i );\n      String qstr = DOMUtil.getAttr( node, \"text\", \"missing query 'text'\" );\n      \n      NodeList children = null;\n      try {\n        children = (NodeList)xpath.evaluate(\"doc\", node, XPathConstants.NODESET);\n      } \n      catch (XPathExpressionException e) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"query requires '<doc .../>' child\" );\n      }\n\n      ArrayList<String> include = new ArrayList<String>();\n      ArrayList<String> exclude = new ArrayList<String>();\n      for (int j=0; j<children.getLength(); j++) {\n        Node child = children.item(j);\n        String id = DOMUtil.getAttr( child, \"id\", \"missing 'id'\" );\n        String e = DOMUtil.getAttr( child, EXCLUDE, null );\n        if( e != null ) {\n          if( Boolean.valueOf( e ) ) {\n            exclude.add( id );\n            continue;\n          }\n        }\n        include.add( id );\n      }\n      \n      ElevationObj elev = new ElevationObj( qstr, include, exclude );\n      if( map.containsKey( elev.analyzed ) ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"Boosting query defined twice for query: '\"+elev.text+\"' (\"+elev.analyzed+\"')\" );\n      }\n      map.put( elev.analyzed, elev );\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationMap(Config).mjava","pathOld":"src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationMap(Config).mjava","sourceNew":"  private Map<String, ElevationObj> loadElevationMap( Config cfg ) throws IOException\n  {\n    XPath xpath = XPathFactory.newInstance().newXPath();\n    Map<String, ElevationObj> map = new HashMap<String, ElevationObj>();\n    NodeList nodes = (NodeList)cfg.evaluate( \"elevate/query\", XPathConstants.NODESET );\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item( i );\n      String qstr = DOMUtil.getAttr( node, \"text\", \"missing query 'text'\" );\n      \n      NodeList children = null;\n      try {\n        children = (NodeList)xpath.evaluate(\"doc\", node, XPathConstants.NODESET);\n      } \n      catch (XPathExpressionException e) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"query requires '<doc .../>' child\" );\n      }\n\n      ArrayList<String> include = new ArrayList<String>();\n      ArrayList<String> exclude = new ArrayList<String>();\n      for (int j=0; j<children.getLength(); j++) {\n        Node child = children.item(j);\n        String id = DOMUtil.getAttr( child, \"id\", \"missing 'id'\" );\n        String e = DOMUtil.getAttr( child, EXCLUDE, null );\n        if( e != null ) {\n          if( Boolean.valueOf( e ) ) {\n            exclude.add( id );\n            continue;\n          }\n        }\n        include.add( id );\n      }\n      \n      ElevationObj elev = new ElevationObj( qstr, include, exclude );\n      if( map.containsKey( elev.analyzed ) ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"Boosting query defined twice for query: '\"+elev.text+\"' (\"+elev.analyzed+\"')\" );\n      }\n      map.put( elev.analyzed, elev );\n    }\n    return map;\n  }\n\n","sourceOld":"  private Map<String, ElevationObj> loadElevationMap( Config cfg ) throws IOException\n  {\n    XPath xpath = XPathFactory.newInstance().newXPath();\n    Map<String, ElevationObj> map = new HashMap<String, ElevationObj>();\n    NodeList nodes = (NodeList)cfg.evaluate( \"elevate/query\", XPathConstants.NODESET );\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item( i );\n      String qstr = DOMUtil.getAttr( node, \"text\", \"missing query 'text'\" );\n      \n      NodeList children = null;\n      try {\n        children = (NodeList)xpath.evaluate(\"doc\", node, XPathConstants.NODESET);\n      } \n      catch (XPathExpressionException e) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"query requires '<doc .../>' child\" );\n      }\n\n      ArrayList<String> include = new ArrayList<String>();\n      ArrayList<String> exclude = new ArrayList<String>();\n      for (int j=0; j<children.getLength(); j++) {\n        Node child = children.item(j);\n        String id = DOMUtil.getAttr( child, \"id\", \"missing 'id'\" );\n        String e = DOMUtil.getAttr( child, EXCLUDE, null );\n        if( e != null ) {\n          if( Boolean.valueOf( e ) ) {\n            exclude.add( id );\n            continue;\n          }\n        }\n        include.add( id );\n      }\n      \n      ElevationObj elev = new ElevationObj( qstr, include, exclude );\n      if( map.containsKey( elev.analyzed ) ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"Boosting query defined twice for query: '\"+elev.text+\"' (\"+elev.analyzed+\"')\" );\n      }\n      map.put( elev.analyzed, elev );\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationMap(Config).mjava","pathOld":"/dev/null","sourceNew":"  private Map<String, ElevationObj> loadElevationMap( Config cfg ) throws IOException\n  {\n    XPath xpath = XPathFactory.newInstance().newXPath();\n    Map<String, ElevationObj> map = new HashMap<String, ElevationObj>();\n    NodeList nodes = (NodeList)cfg.evaluate( \"elevate/query\", XPathConstants.NODESET );\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item( i );\n      String qstr = DOMUtil.getAttr( node, \"text\", \"missing query 'text'\" );\n      \n      NodeList children = null;\n      try {\n        children = (NodeList)xpath.evaluate(\"doc\", node, XPathConstants.NODESET);\n      } \n      catch (XPathExpressionException e) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"query requires '<doc .../>' child\" );\n      }\n\n      ArrayList<String> include = new ArrayList<String>();\n      ArrayList<String> exclude = new ArrayList<String>();\n      for (int j=0; j<children.getLength(); j++) {\n        Node child = children.item(j);\n        String id = DOMUtil.getAttr( child, \"id\", \"missing 'id'\" );\n        String e = DOMUtil.getAttr( child, EXCLUDE, null );\n        if( e != null ) {\n          if( Boolean.valueOf( e ) ) {\n            exclude.add( id );\n            continue;\n          }\n        }\n        include.add( id );\n      }\n      \n      ElevationObj elev = new ElevationObj( qstr, include, exclude );\n      if( map.containsKey( elev.analyzed ) ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"Boosting query defined twice for query: '\"+elev.text+\"' (\"+elev.analyzed+\"')\" );\n      }\n      map.put( elev.analyzed, elev );\n    }\n    return map;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationMap(Config).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationMap(Config).mjava","sourceNew":"  private Map<String, ElevationObj> loadElevationMap( Config cfg ) throws IOException\n  {\n    XPath xpath = XPathFactory.newInstance().newXPath();\n    Map<String, ElevationObj> map = new HashMap<String, ElevationObj>();\n    NodeList nodes = (NodeList)cfg.evaluate( \"elevate/query\", XPathConstants.NODESET );\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item( i );\n      String qstr = DOMUtil.getAttr( node, \"text\", \"missing query 'text'\" );\n      \n      NodeList children = null;\n      try {\n        children = (NodeList)xpath.evaluate(\"doc\", node, XPathConstants.NODESET);\n      } \n      catch (XPathExpressionException e) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"query requires '<doc .../>' child\" );\n      }\n\n      ArrayList<String> include = new ArrayList<String>();\n      ArrayList<String> exclude = new ArrayList<String>();\n      for (int j=0; j<children.getLength(); j++) {\n        Node child = children.item(j);\n        String id = DOMUtil.getAttr( child, \"id\", \"missing 'id'\" );\n        String e = DOMUtil.getAttr( child, EXCLUDE, null );\n        if( e != null ) {\n          if( Boolean.valueOf( e ) ) {\n            exclude.add( id );\n            continue;\n          }\n        }\n        include.add( id );\n      }\n      \n      ElevationObj elev = new ElevationObj( qstr, include, exclude );\n      if( map.containsKey( elev.analyzed ) ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"Boosting query defined twice for query: '\"+elev.text+\"' (\"+elev.analyzed+\"')\" );\n      }\n      map.put( elev.analyzed, elev );\n    }\n    return map;\n  }\n\n","sourceOld":"  private Map<String, ElevationObj> loadElevationMap( Config cfg ) throws IOException\n  {\n    XPath xpath = XPathFactory.newInstance().newXPath();\n    Map<String, ElevationObj> map = new HashMap<String, ElevationObj>();\n    NodeList nodes = (NodeList)cfg.evaluate( \"elevate/query\", XPathConstants.NODESET );\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item( i );\n      String qstr = DOMUtil.getAttr( node, \"text\", \"missing query 'text'\" );\n      \n      NodeList children = null;\n      try {\n        children = (NodeList)xpath.evaluate(\"doc\", node, XPathConstants.NODESET);\n      } \n      catch (XPathExpressionException e) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"query requires '<doc .../>' child\" );\n      }\n\n      ArrayList<String> include = new ArrayList<String>();\n      ArrayList<String> exclude = new ArrayList<String>();\n      for (int j=0; j<children.getLength(); j++) {\n        Node child = children.item(j);\n        String id = DOMUtil.getAttr( child, \"id\", \"missing 'id'\" );\n        String e = DOMUtil.getAttr( child, EXCLUDE, null );\n        if( e != null ) {\n          if( Boolean.valueOf( e ) ) {\n            exclude.add( id );\n            continue;\n          }\n        }\n        include.add( id );\n      }\n      \n      ElevationObj elev = new ElevationObj( qstr, include, exclude );\n      if( map.containsKey( elev.analyzed ) ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"Boosting query defined twice for query: '\"+elev.text+\"' (\"+elev.analyzed+\"')\" );\n      }\n      map.put( elev.analyzed, elev );\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationMap(Config).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationMap(Config).mjava","sourceNew":"  private Map<String, ElevationObj> loadElevationMap( Config cfg ) throws IOException\n  {\n    XPath xpath = XPathFactory.newInstance().newXPath();\n    Map<String, ElevationObj> map = new HashMap<String, ElevationObj>();\n    NodeList nodes = (NodeList)cfg.evaluate( \"elevate/query\", XPathConstants.NODESET );\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item( i );\n      String qstr = DOMUtil.getAttr( node, \"text\", \"missing query 'text'\" );\n      \n      NodeList children = null;\n      try {\n        children = (NodeList)xpath.evaluate(\"doc\", node, XPathConstants.NODESET);\n      } \n      catch (XPathExpressionException e) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"query requires '<doc .../>' child\" );\n      }\n\n      ArrayList<String> include = new ArrayList<String>();\n      ArrayList<String> exclude = new ArrayList<String>();\n      for (int j=0; j<children.getLength(); j++) {\n        Node child = children.item(j);\n        String id = DOMUtil.getAttr( child, \"id\", \"missing 'id'\" );\n        String e = DOMUtil.getAttr( child, EXCLUDE, null );\n        if( e != null ) {\n          if( Boolean.valueOf( e ) ) {\n            exclude.add( id );\n            continue;\n          }\n        }\n        include.add( id );\n      }\n      \n      ElevationObj elev = new ElevationObj( qstr, include, exclude );\n      if( map.containsKey( elev.analyzed ) ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"Boosting query defined twice for query: '\"+elev.text+\"' (\"+elev.analyzed+\"')\" );\n      }\n      map.put( elev.analyzed, elev );\n    }\n    return map;\n  }\n\n","sourceOld":"  private Map<String, ElevationObj> loadElevationMap( Config cfg ) throws IOException\n  {\n    XPath xpath = XPathFactory.newInstance().newXPath();\n    Map<String, ElevationObj> map = new HashMap<String, ElevationObj>();\n    NodeList nodes = (NodeList)cfg.evaluate( \"elevate/query\", XPathConstants.NODESET );\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item( i );\n      String qstr = DOMUtil.getAttr( node, \"text\", \"missing query 'text'\" );\n      \n      NodeList children = null;\n      try {\n        children = (NodeList)xpath.evaluate(\"doc\", node, XPathConstants.NODESET);\n      } \n      catch (XPathExpressionException e) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"query requires '<doc .../>' child\" );\n      }\n\n      ArrayList<String> include = new ArrayList<String>();\n      ArrayList<String> exclude = new ArrayList<String>();\n      for (int j=0; j<children.getLength(); j++) {\n        Node child = children.item(j);\n        String id = DOMUtil.getAttr( child, \"id\", \"missing 'id'\" );\n        String e = DOMUtil.getAttr( child, EXCLUDE, null );\n        if( e != null ) {\n          if( Boolean.valueOf( e ) ) {\n            exclude.add( id );\n            continue;\n          }\n        }\n        include.add( id );\n      }\n      \n      ElevationObj elev = new ElevationObj( qstr, include, exclude );\n      if( map.containsKey( elev.analyzed ) ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"Boosting query defined twice for query: '\"+elev.text+\"' (\"+elev.analyzed+\"')\" );\n      }\n      map.put( elev.analyzed, elev );\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationMap(Config).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationMap(Config).mjava","sourceNew":"  private Map<String, ElevationObj> loadElevationMap( Config cfg ) throws IOException\n  {\n    XPath xpath = XPathFactory.newInstance().newXPath();\n    Map<String, ElevationObj> map = new HashMap<String, ElevationObj>();\n    NodeList nodes = (NodeList)cfg.evaluate( \"elevate/query\", XPathConstants.NODESET );\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item( i );\n      String qstr = DOMUtil.getAttr( node, \"text\", \"missing query 'text'\" );\n      \n      NodeList children = null;\n      try {\n        children = (NodeList)xpath.evaluate(\"doc\", node, XPathConstants.NODESET);\n      } \n      catch (XPathExpressionException e) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"query requires '<doc .../>' child\" );\n      }\n\n      ArrayList<String> include = new ArrayList<String>();\n      ArrayList<String> exclude = new ArrayList<String>();\n      for (int j=0; j<children.getLength(); j++) {\n        Node child = children.item(j);\n        String id = DOMUtil.getAttr( child, \"id\", \"missing 'id'\" );\n        String e = DOMUtil.getAttr( child, EXCLUDE, null );\n        if( e != null ) {\n          if( Boolean.valueOf( e ) ) {\n            exclude.add( id );\n            continue;\n          }\n        }\n        include.add( id );\n      }\n      \n      ElevationObj elev = new ElevationObj( qstr, include, exclude );\n      if( map.containsKey( elev.analyzed ) ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"Boosting query defined twice for query: '\"+elev.text+\"' (\"+elev.analyzed+\"')\" );\n      }\n      map.put( elev.analyzed, elev );\n    }\n    return map;\n  }\n\n","sourceOld":"  private Map<String, ElevationObj> loadElevationMap( Config cfg ) throws IOException\n  {\n    XPath xpath = XPathFactory.newInstance().newXPath();\n    Map<String, ElevationObj> map = new HashMap<String, ElevationObj>();\n    NodeList nodes = (NodeList)cfg.evaluate( \"elevate/query\", XPathConstants.NODESET );\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item( i );\n      String qstr = DOMUtil.getAttr( node, \"text\", \"missing query 'text'\" );\n      \n      NodeList children = null;\n      try {\n        children = (NodeList)xpath.evaluate(\"doc\", node, XPathConstants.NODESET);\n      } \n      catch (XPathExpressionException e) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"query requires '<doc .../>' child\" );\n      }\n\n      ArrayList<String> include = new ArrayList<String>();\n      ArrayList<String> exclude = new ArrayList<String>();\n      for (int j=0; j<children.getLength(); j++) {\n        Node child = children.item(j);\n        String id = DOMUtil.getAttr( child, \"id\", \"missing 'id'\" );\n        String e = DOMUtil.getAttr( child, EXCLUDE, null );\n        if( e != null ) {\n          if( Boolean.valueOf( e ) ) {\n            exclude.add( id );\n            continue;\n          }\n        }\n        include.add( id );\n      }\n      \n      ElevationObj elev = new ElevationObj( qstr, include, exclude );\n      if( map.containsKey( elev.analyzed ) ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"Boosting query defined twice for query: '\"+elev.text+\"' (\"+elev.analyzed+\"')\" );\n      }\n      map.put( elev.analyzed, elev );\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["1da8d55113b689b06716246649de6f62430f15c0","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}