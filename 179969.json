{"path":"modules/grouping/src/java/org/apache/lucene/search/grouping/AllGroupsCollector#setNextReader(IndexReader.AtomicReaderContext).mjava","commits":[{"id":"c5f61d6a2927b52517a31a8bf022549d33b1dfec","date":1305652854,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/AllGroupsCollector#setNextReader(IndexReader.AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  public void setNextReader(IndexReader.AtomicReaderContext context) throws IOException {\n    index = FieldCache.DEFAULT.getTermsIndex(context.reader, groupField);\n\n    // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n    ordSet.clear();\n    for (BytesRef countedGroup : groups) {\n      int ord = index.binarySearchLookup(countedGroup, spareBytesRef);\n      if (ord >= 0) {\n        ordSet.put(ord);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4","d4d69c535930b5cce125cff868d40f6373dc27d4","d4d69c535930b5cce125cff868d40f6373dc27d4","d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/AllGroupsCollector#setNextReader(IndexReader.AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  public void setNextReader(IndexReader.AtomicReaderContext context) throws IOException {\n    index = FieldCache.DEFAULT.getTermsIndex(context.reader, groupField);\n\n    // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n    ordSet.clear();\n    for (BytesRef countedGroup : groups) {\n      int ord = index.binarySearchLookup(countedGroup, spareBytesRef);\n      if (ord >= 0) {\n        ordSet.put(ord);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/AllGroupsCollector#setNextReader(IndexReader.AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  public void setNextReader(IndexReader.AtomicReaderContext context) throws IOException {\n    index = FieldCache.DEFAULT.getTermsIndex(context.reader, groupField);\n\n    // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n    ordSet.clear();\n    for (BytesRef countedGroup : groups) {\n      int ord = index.binarySearchLookup(countedGroup, spareBytesRef);\n      if (ord >= 0) {\n        ordSet.put(ord);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fa60a501961bce2ff07ee1cde7c78699025547e","date":1307054117,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/TermAllGroupsCollector#setNextReader(IndexReader.AtomicReaderContext).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/AllGroupsCollector#setNextReader(IndexReader.AtomicReaderContext).mjava","sourceNew":"  public void setNextReader(IndexReader.AtomicReaderContext context) throws IOException {\n    index = FieldCache.DEFAULT.getTermsIndex(context.reader, groupField);\n\n    // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n    ordSet.clear();\n    for (BytesRef countedGroup : groups) {\n      int ord = index.binarySearchLookup(countedGroup, spareBytesRef);\n      if (ord >= 0) {\n        ordSet.put(ord);\n      }\n    }\n  }\n\n","sourceOld":"  public void setNextReader(IndexReader.AtomicReaderContext context) throws IOException {\n    index = FieldCache.DEFAULT.getTermsIndex(context.reader, groupField);\n\n    // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n    ordSet.clear();\n    for (BytesRef countedGroup : groups) {\n      int ord = index.binarySearchLookup(countedGroup, spareBytesRef);\n      if (ord >= 0) {\n        ordSet.put(ord);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c03daa6ddcb4768a702115ec63799cab5fff3d92","date":1307140842,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/AllGroupsCollector#setNextReader(IndexReader.AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"  public void setNextReader(IndexReader.AtomicReaderContext context) throws IOException {\n    index = FieldCache.DEFAULT.getTermsIndex(context.reader, groupField);\n\n    // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n    ordSet.clear();\n    for (BytesRef countedGroup : groups) {\n      int ord = index.binarySearchLookup(countedGroup, spareBytesRef);\n      if (ord >= 0) {\n        ordSet.put(ord);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e7c99bd45fa88a3d93a03fdd773053bef72268e","date":1307218088,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/TermAllGroupsCollector#setNextReader(IndexReader.AtomicReaderContext).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/AllGroupsCollector#setNextReader(IndexReader.AtomicReaderContext).mjava","sourceNew":"  public void setNextReader(IndexReader.AtomicReaderContext context) throws IOException {\n    index = FieldCache.DEFAULT.getTermsIndex(context.reader, groupField);\n\n    // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n    ordSet.clear();\n    for (BytesRef countedGroup : groups) {\n      int ord = index.binarySearchLookup(countedGroup, spareBytesRef);\n      if (ord >= 0) {\n        ordSet.put(ord);\n      }\n    }\n  }\n\n","sourceOld":"  public void setNextReader(IndexReader.AtomicReaderContext context) throws IOException {\n    index = FieldCache.DEFAULT.getTermsIndex(context.reader, groupField);\n\n    // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n    ordSet.clear();\n    for (BytesRef countedGroup : groups) {\n      int ord = index.binarySearchLookup(countedGroup, spareBytesRef);\n      if (ord >= 0) {\n        ordSet.put(ord);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c5f61d6a2927b52517a31a8bf022549d33b1dfec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c5f61d6a2927b52517a31a8bf022549d33b1dfec"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c5f61d6a2927b52517a31a8bf022549d33b1dfec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c03daa6ddcb4768a702115ec63799cab5fff3d92":["c3a8a449466c1ff7ce2274fe73dab487256964b4","1fa60a501961bce2ff07ee1cde7c78699025547e"],"1fa60a501961bce2ff07ee1cde7c78699025547e":["c5f61d6a2927b52517a31a8bf022549d33b1dfec"],"1e7c99bd45fa88a3d93a03fdd773053bef72268e":["a3776dccca01c11e7046323cfad46a3b4a471233","1fa60a501961bce2ff07ee1cde7c78699025547e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1fa60a501961bce2ff07ee1cde7c78699025547e"]},"commit2Childs":{"c5f61d6a2927b52517a31a8bf022549d33b1dfec":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","1fa60a501961bce2ff07ee1cde7c78699025547e"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["c03daa6ddcb4768a702115ec63799cab5fff3d92"],"a3776dccca01c11e7046323cfad46a3b4a471233":["1e7c99bd45fa88a3d93a03fdd773053bef72268e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c5f61d6a2927b52517a31a8bf022549d33b1dfec","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"c03daa6ddcb4768a702115ec63799cab5fff3d92":[],"1fa60a501961bce2ff07ee1cde7c78699025547e":["c03daa6ddcb4768a702115ec63799cab5fff3d92","1e7c99bd45fa88a3d93a03fdd773053bef72268e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1e7c99bd45fa88a3d93a03fdd773053bef72268e":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c03daa6ddcb4768a702115ec63799cab5fff3d92","1e7c99bd45fa88a3d93a03fdd773053bef72268e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}