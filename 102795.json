{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestHierarchicalDocBuilder#createChildren(String,int,int,List[Hierarchy],ContextHolder).mjava","commits":[{"id":"5238b7e551c27d6d8b882878a8f8b114bd79f1b5","date":1421397215,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestHierarchicalDocBuilder#createChildren(String,int,int,List[Hierarchy],ContextHolder).mjava","pathOld":"/dev/null","sourceNew":"  private String createChildren(String parentName, int currentLevel, int maxLevel,\n      List<Hierarchy> parentData, ContextHolder holder) {\n    \n    if (currentLevel == maxLevel) { //recursion base\n      return \"\";\n    }\n    \n    int childrenNumber = atLeast(2);\n    StringBuilder builder = new StringBuilder();\n    for (int childIndex = 0; childIndex < childrenNumber; ++childIndex) {\n      String childName = parentName + \"Child\" + childIndex;\n      String fields = createFieldsList(FIELD_ID, \"desc\", \"type_s\");\n      String select = String.format(Locale.ROOT, \"select * from %s where %s='%s'\", childName, childName + \"_parent_id\", \"${\" + parentName + \".id}\");\n      \n      //for each child entity create several iterators\n      List<Hierarchy> childData = createMockedIterator(childName, parentData, holder);\n      \n      String subChildren = createChildren(childName, currentLevel + 1, maxLevel, childData, holder);\n      String child = MessageFormat.format(childEntityTemplate, childName, select, fields, subChildren);\n      builder.append(child);\n      builder.append('\\n');\n    }\n    \n    return builder.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2f007bfc4c7f42ce6afc45811f7c7fc8b936203","date":1421506313,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestHierarchicalDocBuilder#createChildren(String,int,int,List[Hierarchy],ContextHolder).mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestHierarchicalDocBuilder#createChildren(String,int,int,List[Hierarchy],ContextHolder).mjava","sourceNew":"  private String createChildren(String parentName, int currentLevel, int maxLevel,\n      List<Hierarchy> parentData, ContextHolder holder) {\n    \n    if (currentLevel == maxLevel) { //recursion base\n      return \"\";\n    }\n    \n    // number of different children <b>types</b> of parent, i.e. parentChild0, parentChild1\n    // @see #createMockedIterator for the actual number of each children type \n    int childrenNumber = 2 + random().nextInt(3);\n    StringBuilder builder = new StringBuilder();\n    for (int childIndex = 0; childIndex < childrenNumber; ++childIndex) {\n      String childName = parentName + \"Child\" + childIndex;\n      String fields = createFieldsList(FIELD_ID, \"desc\", \"type_s\");\n      String select = String.format(Locale.ROOT, \"select * from %s where %s='%s'\", childName, childName + \"_parent_id\", \"${\" + parentName + \".id}\");\n      \n      //for each child entity create several iterators\n      List<Hierarchy> childData = createMockedIterator(childName, parentData, holder);\n      \n      String subChildren = createChildren(childName, currentLevel + 1, maxLevel, childData, holder);\n      String child = MessageFormat.format(childEntityTemplate, childName, select, fields, subChildren);\n      builder.append(child);\n      builder.append('\\n');\n    }\n    \n    return builder.toString();\n  }\n\n","sourceOld":"  private String createChildren(String parentName, int currentLevel, int maxLevel,\n      List<Hierarchy> parentData, ContextHolder holder) {\n    \n    if (currentLevel == maxLevel) { //recursion base\n      return \"\";\n    }\n    \n    int childrenNumber = atLeast(2);\n    StringBuilder builder = new StringBuilder();\n    for (int childIndex = 0; childIndex < childrenNumber; ++childIndex) {\n      String childName = parentName + \"Child\" + childIndex;\n      String fields = createFieldsList(FIELD_ID, \"desc\", \"type_s\");\n      String select = String.format(Locale.ROOT, \"select * from %s where %s='%s'\", childName, childName + \"_parent_id\", \"${\" + parentName + \".id}\");\n      \n      //for each child entity create several iterators\n      List<Hierarchy> childData = createMockedIterator(childName, parentData, holder);\n      \n      String subChildren = createChildren(childName, currentLevel + 1, maxLevel, childData, holder);\n      String child = MessageFormat.format(childEntityTemplate, childName, select, fields, subChildren);\n      builder.append(child);\n      builder.append('\\n');\n    }\n    \n    return builder.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bdb19206b4aeab66b9fb393c53969f44bdd48be","date":1426629125,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestHierarchicalDocBuilder#createChildren(String,int,int,List[Hierarchy],ContextHolder).mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestHierarchicalDocBuilder#createChildren(String,int,int,List[Hierarchy],ContextHolder).mjava","sourceNew":"  private String createChildren(String parentName, int currentLevel, int maxLevel,\n      List<Hierarchy> parentData, ContextHolder holder) {\n    \n    if (currentLevel == maxLevel) { //recursion base\n      return \"\";\n    }\n    \n    // number of different children <b>types</b> of parent, i.e. parentChild0, parentChild1\n    // @see #createMockedIterator for the actual number of each children type \n    int childrenNumber = 2 + random().nextInt(3);\n    StringBuilder builder = new StringBuilder();\n    for (int childIndex = 0; childIndex < childrenNumber; ++childIndex) {\n      String childName = parentName + \"Child\" + childIndex;\n      String fields = createFieldsList(FIELD_ID, \"desc\", \"type_s\");\n      String select = String.format(Locale.ROOT, \"select * from %s where %s='%s'\", childName, childName + \"_parent_id\", \"${\" + parentName + \".id}\");\n      \n      //for each child entity create several iterators\n      List<Hierarchy> childData = createMockedIterator(childName, parentData, holder);\n      \n      String subChildren = createChildren(childName, currentLevel + 1, maxLevel, childData, holder);\n      String child = StrUtils.formatString(childEntityTemplate, childName, select, fields, subChildren);\n      builder.append(child);\n      builder.append('\\n');\n    }\n    \n    return builder.toString();\n  }\n\n","sourceOld":"  private String createChildren(String parentName, int currentLevel, int maxLevel,\n      List<Hierarchy> parentData, ContextHolder holder) {\n    \n    if (currentLevel == maxLevel) { //recursion base\n      return \"\";\n    }\n    \n    // number of different children <b>types</b> of parent, i.e. parentChild0, parentChild1\n    // @see #createMockedIterator for the actual number of each children type \n    int childrenNumber = 2 + random().nextInt(3);\n    StringBuilder builder = new StringBuilder();\n    for (int childIndex = 0; childIndex < childrenNumber; ++childIndex) {\n      String childName = parentName + \"Child\" + childIndex;\n      String fields = createFieldsList(FIELD_ID, \"desc\", \"type_s\");\n      String select = String.format(Locale.ROOT, \"select * from %s where %s='%s'\", childName, childName + \"_parent_id\", \"${\" + parentName + \".id}\");\n      \n      //for each child entity create several iterators\n      List<Hierarchy> childData = createMockedIterator(childName, parentData, holder);\n      \n      String subChildren = createChildren(childName, currentLevel + 1, maxLevel, childData, holder);\n      String child = MessageFormat.format(childEntityTemplate, childName, select, fields, subChildren);\n      builder.append(child);\n      builder.append('\\n');\n    }\n    \n    return builder.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestHierarchicalDocBuilder#createChildren(String,int,int,List[Hierarchy],ContextHolder).mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestHierarchicalDocBuilder#createChildren(String,int,int,List[Hierarchy],ContextHolder).mjava","sourceNew":"  private String createChildren(String parentName, int currentLevel, int maxLevel,\n      List<Hierarchy> parentData, ContextHolder holder) {\n    \n    if (currentLevel == maxLevel) { //recursion base\n      return \"\";\n    }\n    \n    // number of different children <b>types</b> of parent, i.e. parentChild0, parentChild1\n    // @see #createMockedIterator for the actual number of each children type \n    int childrenNumber = 2 + random().nextInt(3);\n    StringBuilder builder = new StringBuilder();\n    for (int childIndex = 0; childIndex < childrenNumber; ++childIndex) {\n      String childName = parentName + \"Child\" + childIndex;\n      String fields = createFieldsList(FIELD_ID, \"desc\", \"type_s\");\n      String select = String.format(Locale.ROOT, \"select * from %s where %s='%s'\", childName, childName + \"_parent_id\", \"${\" + parentName + \".id}\");\n      \n      //for each child entity create several iterators\n      List<Hierarchy> childData = createMockedIterator(childName, parentData, holder);\n      \n      String subChildren = createChildren(childName, currentLevel + 1, maxLevel, childData, holder);\n      String child = StrUtils.formatString(childEntityTemplate, childName, select, fields, subChildren);\n      builder.append(child);\n      builder.append('\\n');\n    }\n    \n    return builder.toString();\n  }\n\n","sourceOld":"  private String createChildren(String parentName, int currentLevel, int maxLevel,\n      List<Hierarchy> parentData, ContextHolder holder) {\n    \n    if (currentLevel == maxLevel) { //recursion base\n      return \"\";\n    }\n    \n    // number of different children <b>types</b> of parent, i.e. parentChild0, parentChild1\n    // @see #createMockedIterator for the actual number of each children type \n    int childrenNumber = 2 + random().nextInt(3);\n    StringBuilder builder = new StringBuilder();\n    for (int childIndex = 0; childIndex < childrenNumber; ++childIndex) {\n      String childName = parentName + \"Child\" + childIndex;\n      String fields = createFieldsList(FIELD_ID, \"desc\", \"type_s\");\n      String select = String.format(Locale.ROOT, \"select * from %s where %s='%s'\", childName, childName + \"_parent_id\", \"${\" + parentName + \".id}\");\n      \n      //for each child entity create several iterators\n      List<Hierarchy> childData = createMockedIterator(childName, parentData, holder);\n      \n      String subChildren = createChildren(childName, currentLevel + 1, maxLevel, childData, holder);\n      String child = MessageFormat.format(childEntityTemplate, childName, select, fields, subChildren);\n      builder.append(child);\n      builder.append('\\n');\n    }\n    \n    return builder.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5de502b5478255493125e7e801411ba17a6682ec","date":1490974101,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestHierarchicalDocBuilder#createChildren(String,int,int,List[Hierarchy],ContextHolder).mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestHierarchicalDocBuilder#createChildren(String,int,int,List[Hierarchy],ContextHolder).mjava","sourceNew":"  private String createChildren(String parentName, int currentLevel, int maxLevel,\n      List<Hierarchy> parentData, ContextHolder holder) {\n    \n    if (currentLevel == maxLevel) { //recursion base\n      return \"\";\n    }\n    \n    // number of different children <b>types</b> of parent, i.e. parentChild0, parentChild1\n    // @see #createMockedIterator for the actual number of each children type \n    int childrenNumber = 2 + random().nextInt(3);\n    StringBuilder builder = new StringBuilder();\n    for (int childIndex = 0; childIndex < childrenNumber; ++childIndex) {\n      String childName = parentName + \"Child\" + childIndex;\n      String fields = createFieldsList(FIELD_ID, \"desc\", \"type_s\");\n      String select = String.format(Locale.ROOT, \"select * from %s where %s='%s'\", childName, childName + \"_parent_id\", \"${\" + parentName + \".id}\");\n      \n      //for each child entity create several iterators\n      List<Hierarchy> childData = createMockedIterator(childName, parentData, holder);\n      \n      String subChildren = createChildren(childName, currentLevel + 1, maxLevel, childData, holder);\n      String child = StrUtils.formatString(CHILD_ENTITY_TEMPLATE, childName, select, fields, subChildren);\n      builder.append(child);\n      builder.append('\\n');\n    }\n    \n    return builder.toString();\n  }\n\n","sourceOld":"  private String createChildren(String parentName, int currentLevel, int maxLevel,\n      List<Hierarchy> parentData, ContextHolder holder) {\n    \n    if (currentLevel == maxLevel) { //recursion base\n      return \"\";\n    }\n    \n    // number of different children <b>types</b> of parent, i.e. parentChild0, parentChild1\n    // @see #createMockedIterator for the actual number of each children type \n    int childrenNumber = 2 + random().nextInt(3);\n    StringBuilder builder = new StringBuilder();\n    for (int childIndex = 0; childIndex < childrenNumber; ++childIndex) {\n      String childName = parentName + \"Child\" + childIndex;\n      String fields = createFieldsList(FIELD_ID, \"desc\", \"type_s\");\n      String select = String.format(Locale.ROOT, \"select * from %s where %s='%s'\", childName, childName + \"_parent_id\", \"${\" + parentName + \".id}\");\n      \n      //for each child entity create several iterators\n      List<Hierarchy> childData = createMockedIterator(childName, parentData, holder);\n      \n      String subChildren = createChildren(childName, currentLevel + 1, maxLevel, childData, holder);\n      String child = StrUtils.formatString(childEntityTemplate, childName, select, fields, subChildren);\n      builder.append(child);\n      builder.append('\\n');\n    }\n    \n    return builder.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f20fd35e3055a0c5b387df0b986a68d65d86441","date":1491045405,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestHierarchicalDocBuilder#createChildren(String,int,int,List[Hierarchy],ContextHolder).mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestHierarchicalDocBuilder#createChildren(String,int,int,List[Hierarchy],ContextHolder).mjava","sourceNew":"  private String createChildren(String parentName, int currentLevel, int maxLevel,\n      List<Hierarchy> parentData, ContextHolder holder) {\n    \n    if (currentLevel == maxLevel) { //recursion base\n      return \"\";\n    }\n    \n    // number of different children <b>types</b> of parent, i.e. parentChild0, parentChild1\n    // @see #createMockedIterator for the actual number of each children type \n    int childrenNumber = 2 + random().nextInt(3);\n    StringBuilder builder = new StringBuilder();\n    for (int childIndex = 0; childIndex < childrenNumber; ++childIndex) {\n      String childName = parentName + \"Child\" + childIndex;\n      String fields = createFieldsList(FIELD_ID, \"desc\", \"type_s\");\n      String select = String.format(Locale.ROOT, \"select * from %s where %s='%s'\", childName, childName + \"_parent_id\", \"${\" + parentName + \".id}\");\n      \n      //for each child entity create several iterators\n      List<Hierarchy> childData = createMockedIterator(childName, parentData, holder);\n      \n      String subChildren = createChildren(childName, currentLevel + 1, maxLevel, childData, holder);\n      String child = StrUtils.formatString(CHILD_ENTITY_TEMPLATE, childName, select, fields, subChildren);\n      builder.append(child);\n      builder.append('\\n');\n    }\n    \n    return builder.toString();\n  }\n\n","sourceOld":"  private String createChildren(String parentName, int currentLevel, int maxLevel,\n      List<Hierarchy> parentData, ContextHolder holder) {\n    \n    if (currentLevel == maxLevel) { //recursion base\n      return \"\";\n    }\n    \n    // number of different children <b>types</b> of parent, i.e. parentChild0, parentChild1\n    // @see #createMockedIterator for the actual number of each children type \n    int childrenNumber = 2 + random().nextInt(3);\n    StringBuilder builder = new StringBuilder();\n    for (int childIndex = 0; childIndex < childrenNumber; ++childIndex) {\n      String childName = parentName + \"Child\" + childIndex;\n      String fields = createFieldsList(FIELD_ID, \"desc\", \"type_s\");\n      String select = String.format(Locale.ROOT, \"select * from %s where %s='%s'\", childName, childName + \"_parent_id\", \"${\" + parentName + \".id}\");\n      \n      //for each child entity create several iterators\n      List<Hierarchy> childData = createMockedIterator(childName, parentData, holder);\n      \n      String subChildren = createChildren(childName, currentLevel + 1, maxLevel, childData, holder);\n      String child = StrUtils.formatString(childEntityTemplate, childName, select, fields, subChildren);\n      builder.append(child);\n      builder.append('\\n');\n    }\n    \n    return builder.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestHierarchicalDocBuilder#createChildren(String,int,int,List[Hierarchy],ContextHolder).mjava","sourceNew":null,"sourceOld":"  private String createChildren(String parentName, int currentLevel, int maxLevel,\n      List<Hierarchy> parentData, ContextHolder holder) {\n    \n    if (currentLevel == maxLevel) { //recursion base\n      return \"\";\n    }\n    \n    // number of different children <b>types</b> of parent, i.e. parentChild0, parentChild1\n    // @see #createMockedIterator for the actual number of each children type \n    int childrenNumber = 2 + random().nextInt(3);\n    StringBuilder builder = new StringBuilder();\n    for (int childIndex = 0; childIndex < childrenNumber; ++childIndex) {\n      String childName = parentName + \"Child\" + childIndex;\n      String fields = createFieldsList(FIELD_ID, \"desc\", \"type_s\");\n      String select = String.format(Locale.ROOT, \"select * from %s where %s='%s'\", childName, childName + \"_parent_id\", \"${\" + parentName + \".id}\");\n      \n      //for each child entity create several iterators\n      List<Hierarchy> childData = createMockedIterator(childName, parentData, holder);\n      \n      String subChildren = createChildren(childName, currentLevel + 1, maxLevel, childData, holder);\n      String child = StrUtils.formatString(CHILD_ENTITY_TEMPLATE, childName, select, fields, subChildren);\n      builder.append(child);\n      builder.append('\\n');\n    }\n    \n    return builder.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["e2f007bfc4c7f42ce6afc45811f7c7fc8b936203","9bdb19206b4aeab66b9fb393c53969f44bdd48be"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["5de502b5478255493125e7e801411ba17a6682ec"],"5de502b5478255493125e7e801411ba17a6682ec":["9bdb19206b4aeab66b9fb393c53969f44bdd48be"],"5238b7e551c27d6d8b882878a8f8b114bd79f1b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":["9bdb19206b4aeab66b9fb393c53969f44bdd48be"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e2f007bfc4c7f42ce6afc45811f7c7fc8b936203":["5238b7e551c27d6d8b882878a8f8b114bd79f1b5"],"9bdb19206b4aeab66b9fb393c53969f44bdd48be":["e2f007bfc4c7f42ce6afc45811f7c7fc8b936203"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5de502b5478255493125e7e801411ba17a6682ec":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"5238b7e551c27d6d8b882878a8f8b114bd79f1b5":["e2f007bfc4c7f42ce6afc45811f7c7fc8b936203"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5238b7e551c27d6d8b882878a8f8b114bd79f1b5"],"e2f007bfc4c7f42ce6afc45811f7c7fc8b936203":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9bdb19206b4aeab66b9fb393c53969f44bdd48be"],"9bdb19206b4aeab66b9fb393c53969f44bdd48be":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","5de502b5478255493125e7e801411ba17a6682ec","6f20fd35e3055a0c5b387df0b986a68d65d86441"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","6f20fd35e3055a0c5b387df0b986a68d65d86441","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}