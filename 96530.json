{"path":"lucene/queries/src/test/org/apache/lucene/queries/TermFilterTest#testMissingTermAndField().mjava","commits":[{"id":"285b9ca1f111d4ee6cc336e5fe7db6ab94a16a70","date":1374000182,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermFilterTest#testMissingTermAndField().mjava","pathOld":"/dev/null","sourceNew":"  public void testMissingTermAndField() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    Document doc = new Document();\n    doc.add(newStringField(fieldName, \"value1\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader reader = new SlowCompositeReaderWrapper(w.getReader());\n    assertTrue(reader.getContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n    w.close();\n\n    DocIdSet idSet = termFilter(fieldName, \"value1\").getDocIdSet(context, context.reader().getLiveDocs());\n    assertNotNull(\"must not be null\", idSet);\n    DocIdSetIterator iter = idSet.iterator();\n    assertEquals(iter.nextDoc(), 0);\n    assertEquals(iter.nextDoc(), DocIdSetIterator.NO_MORE_DOCS);\n\n    idSet = termFilter(fieldName, \"value2\").getDocIdSet(context, context.reader().getLiveDocs());\n    assertNull(\"must be null\", idSet);\n\n    idSet = termFilter(\"field2\", \"value1\").getDocIdSet(context, context.reader().getLiveDocs());\n    assertNull(\"must be null\", idSet);\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermFilterTest#testMissingTermAndField().mjava","pathOld":"/dev/null","sourceNew":"  public void testMissingTermAndField() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    Document doc = new Document();\n    doc.add(newStringField(fieldName, \"value1\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader reader = new SlowCompositeReaderWrapper(w.getReader());\n    assertTrue(reader.getContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n    w.close();\n\n    DocIdSet idSet = termFilter(fieldName, \"value1\").getDocIdSet(context, context.reader().getLiveDocs());\n    assertNotNull(\"must not be null\", idSet);\n    DocIdSetIterator iter = idSet.iterator();\n    assertEquals(iter.nextDoc(), 0);\n    assertEquals(iter.nextDoc(), DocIdSetIterator.NO_MORE_DOCS);\n\n    idSet = termFilter(fieldName, \"value2\").getDocIdSet(context, context.reader().getLiveDocs());\n    assertNull(\"must be null\", idSet);\n\n    idSet = termFilter(\"field2\", \"value1\").getDocIdSet(context, context.reader().getLiveDocs());\n    assertNull(\"must be null\", idSet);\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392","date":1377503666,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermFilterTest#testMissingTermAndField().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermFilterTest#testMissingTermAndField().mjava","sourceNew":"  public void testMissingTermAndField() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    Document doc = new Document();\n    doc.add(newStringField(fieldName, \"value1\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(w.getReader());\n    assertTrue(reader.getContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n    w.close();\n\n    DocIdSet idSet = termFilter(fieldName, \"value1\").getDocIdSet(context, context.reader().getLiveDocs());\n    assertNotNull(\"must not be null\", idSet);\n    DocIdSetIterator iter = idSet.iterator();\n    assertEquals(iter.nextDoc(), 0);\n    assertEquals(iter.nextDoc(), DocIdSetIterator.NO_MORE_DOCS);\n\n    idSet = termFilter(fieldName, \"value2\").getDocIdSet(context, context.reader().getLiveDocs());\n    assertNull(\"must be null\", idSet);\n\n    idSet = termFilter(\"field2\", \"value1\").getDocIdSet(context, context.reader().getLiveDocs());\n    assertNull(\"must be null\", idSet);\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTermAndField() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    Document doc = new Document();\n    doc.add(newStringField(fieldName, \"value1\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader reader = new SlowCompositeReaderWrapper(w.getReader());\n    assertTrue(reader.getContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n    w.close();\n\n    DocIdSet idSet = termFilter(fieldName, \"value1\").getDocIdSet(context, context.reader().getLiveDocs());\n    assertNotNull(\"must not be null\", idSet);\n    DocIdSetIterator iter = idSet.iterator();\n    assertEquals(iter.nextDoc(), 0);\n    assertEquals(iter.nextDoc(), DocIdSetIterator.NO_MORE_DOCS);\n\n    idSet = termFilter(fieldName, \"value2\").getDocIdSet(context, context.reader().getLiveDocs());\n    assertNull(\"must be null\", idSet);\n\n    idSet = termFilter(\"field2\", \"value1\").getDocIdSet(context, context.reader().getLiveDocs());\n    assertNull(\"must be null\", idSet);\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermFilterTest#testMissingTermAndField().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermFilterTest#testMissingTermAndField().mjava","sourceNew":"  public void testMissingTermAndField() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    Document doc = new Document();\n    doc.add(newStringField(fieldName, \"value1\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(w.getReader());\n    assertTrue(reader.getContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n    w.close();\n\n    DocIdSet idSet = termFilter(fieldName, \"value1\").getDocIdSet(context, context.reader().getLiveDocs());\n    assertNotNull(\"must not be null\", idSet);\n    DocIdSetIterator iter = idSet.iterator();\n    assertEquals(iter.nextDoc(), 0);\n    assertEquals(iter.nextDoc(), DocIdSetIterator.NO_MORE_DOCS);\n\n    idSet = termFilter(fieldName, \"value2\").getDocIdSet(context, context.reader().getLiveDocs());\n    assertNull(\"must be null\", idSet);\n\n    idSet = termFilter(\"field2\", \"value1\").getDocIdSet(context, context.reader().getLiveDocs());\n    assertNull(\"must be null\", idSet);\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTermAndField() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    Document doc = new Document();\n    doc.add(newStringField(fieldName, \"value1\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader reader = new SlowCompositeReaderWrapper(w.getReader());\n    assertTrue(reader.getContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n    w.close();\n\n    DocIdSet idSet = termFilter(fieldName, \"value1\").getDocIdSet(context, context.reader().getLiveDocs());\n    assertNotNull(\"must not be null\", idSet);\n    DocIdSetIterator iter = idSet.iterator();\n    assertEquals(iter.nextDoc(), 0);\n    assertEquals(iter.nextDoc(), DocIdSetIterator.NO_MORE_DOCS);\n\n    idSet = termFilter(fieldName, \"value2\").getDocIdSet(context, context.reader().getLiveDocs());\n    assertNull(\"must be null\", idSet);\n\n    idSet = termFilter(\"field2\", \"value1\").getDocIdSet(context, context.reader().getLiveDocs());\n    assertNull(\"must be null\", idSet);\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermFilterTest#testMissingTermAndField().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermFilterTest#testMissingTermAndField().mjava","sourceNew":"  public void testMissingTermAndField() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    Document doc = new Document();\n    doc.add(newStringField(fieldName, \"value1\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(w.getReader());\n    assertTrue(reader.getContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n    w.shutdown();\n\n    DocIdSet idSet = termFilter(fieldName, \"value1\").getDocIdSet(context, context.reader().getLiveDocs());\n    assertNotNull(\"must not be null\", idSet);\n    DocIdSetIterator iter = idSet.iterator();\n    assertEquals(iter.nextDoc(), 0);\n    assertEquals(iter.nextDoc(), DocIdSetIterator.NO_MORE_DOCS);\n\n    idSet = termFilter(fieldName, \"value2\").getDocIdSet(context, context.reader().getLiveDocs());\n    assertNull(\"must be null\", idSet);\n\n    idSet = termFilter(\"field2\", \"value1\").getDocIdSet(context, context.reader().getLiveDocs());\n    assertNull(\"must be null\", idSet);\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTermAndField() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    Document doc = new Document();\n    doc.add(newStringField(fieldName, \"value1\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(w.getReader());\n    assertTrue(reader.getContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n    w.close();\n\n    DocIdSet idSet = termFilter(fieldName, \"value1\").getDocIdSet(context, context.reader().getLiveDocs());\n    assertNotNull(\"must not be null\", idSet);\n    DocIdSetIterator iter = idSet.iterator();\n    assertEquals(iter.nextDoc(), 0);\n    assertEquals(iter.nextDoc(), DocIdSetIterator.NO_MORE_DOCS);\n\n    idSet = termFilter(fieldName, \"value2\").getDocIdSet(context, context.reader().getLiveDocs());\n    assertNull(\"must be null\", idSet);\n\n    idSet = termFilter(\"field2\", \"value1\").getDocIdSet(context, context.reader().getLiveDocs());\n    assertNull(\"must be null\", idSet);\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermFilterTest#testMissingTermAndField().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermFilterTest#testMissingTermAndField().mjava","sourceNew":"  public void testMissingTermAndField() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    Document doc = new Document();\n    doc.add(newStringField(fieldName, \"value1\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(w.getReader());\n    assertTrue(reader.getContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n    w.close();\n\n    DocIdSet idSet = termFilter(fieldName, \"value1\").getDocIdSet(context, context.reader().getLiveDocs());\n    assertNotNull(\"must not be null\", idSet);\n    DocIdSetIterator iter = idSet.iterator();\n    assertEquals(iter.nextDoc(), 0);\n    assertEquals(iter.nextDoc(), DocIdSetIterator.NO_MORE_DOCS);\n\n    idSet = termFilter(fieldName, \"value2\").getDocIdSet(context, context.reader().getLiveDocs());\n    assertNull(\"must be null\", idSet);\n\n    idSet = termFilter(\"field2\", \"value1\").getDocIdSet(context, context.reader().getLiveDocs());\n    assertNull(\"must be null\", idSet);\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTermAndField() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    Document doc = new Document();\n    doc.add(newStringField(fieldName, \"value1\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(w.getReader());\n    assertTrue(reader.getContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n    w.shutdown();\n\n    DocIdSet idSet = termFilter(fieldName, \"value1\").getDocIdSet(context, context.reader().getLiveDocs());\n    assertNotNull(\"must not be null\", idSet);\n    DocIdSetIterator iter = idSet.iterator();\n    assertEquals(iter.nextDoc(), 0);\n    assertEquals(iter.nextDoc(), DocIdSetIterator.NO_MORE_DOCS);\n\n    idSet = termFilter(fieldName, \"value2\").getDocIdSet(context, context.reader().getLiveDocs());\n    assertNull(\"must be null\", idSet);\n\n    idSet = termFilter(\"field2\", \"value1\").getDocIdSet(context, context.reader().getLiveDocs());\n    assertNull(\"must be null\", idSet);\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermFilterTest#testMissingTermAndField().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermFilterTest#testMissingTermAndField().mjava","sourceNew":"  public void testMissingTermAndField() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    Document doc = new Document();\n    doc.add(newStringField(fieldName, \"value1\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(w.getReader());\n    assertTrue(reader.getContext() instanceof LeafReaderContext);\n    LeafReaderContext context = (LeafReaderContext) reader.getContext();\n    w.close();\n\n    DocIdSet idSet = termFilter(fieldName, \"value1\").getDocIdSet(context, context.reader().getLiveDocs());\n    assertNotNull(\"must not be null\", idSet);\n    DocIdSetIterator iter = idSet.iterator();\n    assertEquals(iter.nextDoc(), 0);\n    assertEquals(iter.nextDoc(), DocIdSetIterator.NO_MORE_DOCS);\n\n    idSet = termFilter(fieldName, \"value2\").getDocIdSet(context, context.reader().getLiveDocs());\n    assertNull(\"must be null\", idSet);\n\n    idSet = termFilter(\"field2\", \"value1\").getDocIdSet(context, context.reader().getLiveDocs());\n    assertNull(\"must be null\", idSet);\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTermAndField() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    Document doc = new Document();\n    doc.add(newStringField(fieldName, \"value1\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(w.getReader());\n    assertTrue(reader.getContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n    w.close();\n\n    DocIdSet idSet = termFilter(fieldName, \"value1\").getDocIdSet(context, context.reader().getLiveDocs());\n    assertNotNull(\"must not be null\", idSet);\n    DocIdSetIterator iter = idSet.iterator();\n    assertEquals(iter.nextDoc(), 0);\n    assertEquals(iter.nextDoc(), DocIdSetIterator.NO_MORE_DOCS);\n\n    idSet = termFilter(fieldName, \"value2\").getDocIdSet(context, context.reader().getLiveDocs());\n    assertNull(\"must be null\", idSet);\n\n    idSet = termFilter(\"field2\", \"value1\").getDocIdSet(context, context.reader().getLiveDocs());\n    assertNull(\"must be null\", idSet);\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"589f939c50213ffd758060ded12e334c85ef6a87","date":1423239999,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermFilterTest#testMissingTermAndField().mjava","sourceNew":null,"sourceOld":"  public void testMissingTermAndField() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    Document doc = new Document();\n    doc.add(newStringField(fieldName, \"value1\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(w.getReader());\n    assertTrue(reader.getContext() instanceof LeafReaderContext);\n    LeafReaderContext context = (LeafReaderContext) reader.getContext();\n    w.close();\n\n    DocIdSet idSet = termFilter(fieldName, \"value1\").getDocIdSet(context, context.reader().getLiveDocs());\n    assertNotNull(\"must not be null\", idSet);\n    DocIdSetIterator iter = idSet.iterator();\n    assertEquals(iter.nextDoc(), 0);\n    assertEquals(iter.nextDoc(), DocIdSetIterator.NO_MORE_DOCS);\n\n    idSet = termFilter(fieldName, \"value2\").getDocIdSet(context, context.reader().getLiveDocs());\n    assertNull(\"must be null\", idSet);\n\n    idSet = termFilter(\"field2\", \"value1\").getDocIdSet(context, context.reader().getLiveDocs());\n    assertNull(\"must be null\", idSet);\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"285b9ca1f111d4ee6cc336e5fe7db6ab94a16a70":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392":["285b9ca1f111d4ee6cc336e5fe7db6ab94a16a70"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392"],"589f939c50213ffd758060ded12e334c85ef6a87":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["589f939c50213ffd758060ded12e334c85ef6a87"]},"commit2Childs":{"285b9ca1f111d4ee6cc336e5fe7db6ab94a16a70":["df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["285b9ca1f111d4ee6cc336e5fe7db6ab94a16a70","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"589f939c50213ffd758060ded12e334c85ef6a87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["589f939c50213ffd758060ded12e334c85ef6a87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}