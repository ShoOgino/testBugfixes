{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/NormalizeCharMap#NormalizeCharMap(FST[CharsRef]).mjava","commits":[{"id":"b4e5bbc7f726dbcc466cb9b3c029d539a06f6545","date":1336310014,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/NormalizeCharMap#NormalizeCharMap(FST[CharsRef]).mjava","pathOld":"/dev/null","sourceNew":"  // Use the builder to create:\n  private NormalizeCharMap(FST<CharsRef> map) {\n    this.map = map;\n    if (map != null) {\n      try {\n        // Pre-cache root arcs:\n        final FST.Arc<CharsRef> scratchArc = new FST.Arc<CharsRef>();\n        final FST.BytesReader fstReader = map.getBytesReader(0);\n        map.getFirstArc(scratchArc);\n        if (FST.targetHasArcs(scratchArc)) {\n          map.readFirstRealTargetArc(scratchArc.target, scratchArc, fstReader);\n          while(true) {\n            assert scratchArc.label != FST.END_LABEL;\n            cachedRootArcs.put(Character.valueOf((char) scratchArc.label), new FST.Arc<CharsRef>().copyFrom(scratchArc));\n            if (scratchArc.isLast()) {\n              break;\n            }\n            map.readNextRealArc(scratchArc, fstReader);\n          }\n        }\n        //System.out.println(\"cached \" + cachedRootArcs.size() + \" root arcs\");\n      } catch (IOException ioe) {\n        // Bogus FST IOExceptions!!  (will never happen)\n        throw new RuntimeException(ioe);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82557a475db3e0849171dc0be5b02e3ae0745ddb","date":1358195918,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/NormalizeCharMap#NormalizeCharMap(FST[CharsRef]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/NormalizeCharMap#NormalizeCharMap(FST[CharsRef]).mjava","sourceNew":"  // Use the builder to create:\n  private NormalizeCharMap(FST<CharsRef> map) {\n    this.map = map;\n    if (map != null) {\n      try {\n        // Pre-cache root arcs:\n        final FST.Arc<CharsRef> scratchArc = new FST.Arc<CharsRef>();\n        final FST.BytesReader fstReader = map.getBytesReader();\n        map.getFirstArc(scratchArc);\n        if (FST.targetHasArcs(scratchArc)) {\n          map.readFirstRealTargetArc(scratchArc.target, scratchArc, fstReader);\n          while(true) {\n            assert scratchArc.label != FST.END_LABEL;\n            cachedRootArcs.put(Character.valueOf((char) scratchArc.label), new FST.Arc<CharsRef>().copyFrom(scratchArc));\n            if (scratchArc.isLast()) {\n              break;\n            }\n            map.readNextRealArc(scratchArc, fstReader);\n          }\n        }\n        //System.out.println(\"cached \" + cachedRootArcs.size() + \" root arcs\");\n      } catch (IOException ioe) {\n        // Bogus FST IOExceptions!!  (will never happen)\n        throw new RuntimeException(ioe);\n      }\n    }\n  }\n\n","sourceOld":"  // Use the builder to create:\n  private NormalizeCharMap(FST<CharsRef> map) {\n    this.map = map;\n    if (map != null) {\n      try {\n        // Pre-cache root arcs:\n        final FST.Arc<CharsRef> scratchArc = new FST.Arc<CharsRef>();\n        final FST.BytesReader fstReader = map.getBytesReader(0);\n        map.getFirstArc(scratchArc);\n        if (FST.targetHasArcs(scratchArc)) {\n          map.readFirstRealTargetArc(scratchArc.target, scratchArc, fstReader);\n          while(true) {\n            assert scratchArc.label != FST.END_LABEL;\n            cachedRootArcs.put(Character.valueOf((char) scratchArc.label), new FST.Arc<CharsRef>().copyFrom(scratchArc));\n            if (scratchArc.isLast()) {\n              break;\n            }\n            map.readNextRealArc(scratchArc, fstReader);\n          }\n        }\n        //System.out.println(\"cached \" + cachedRootArcs.size() + \" root arcs\");\n      } catch (IOException ioe) {\n        // Bogus FST IOExceptions!!  (will never happen)\n        throw new RuntimeException(ioe);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/NormalizeCharMap#NormalizeCharMap(FST[CharsRef]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/NormalizeCharMap#NormalizeCharMap(FST[CharsRef]).mjava","sourceNew":"  // Use the builder to create:\n  private NormalizeCharMap(FST<CharsRef> map) {\n    this.map = map;\n    if (map != null) {\n      try {\n        // Pre-cache root arcs:\n        final FST.Arc<CharsRef> scratchArc = new FST.Arc<CharsRef>();\n        final FST.BytesReader fstReader = map.getBytesReader();\n        map.getFirstArc(scratchArc);\n        if (FST.targetHasArcs(scratchArc)) {\n          map.readFirstRealTargetArc(scratchArc.target, scratchArc, fstReader);\n          while(true) {\n            assert scratchArc.label != FST.END_LABEL;\n            cachedRootArcs.put(Character.valueOf((char) scratchArc.label), new FST.Arc<CharsRef>().copyFrom(scratchArc));\n            if (scratchArc.isLast()) {\n              break;\n            }\n            map.readNextRealArc(scratchArc, fstReader);\n          }\n        }\n        //System.out.println(\"cached \" + cachedRootArcs.size() + \" root arcs\");\n      } catch (IOException ioe) {\n        // Bogus FST IOExceptions!!  (will never happen)\n        throw new RuntimeException(ioe);\n      }\n    }\n  }\n\n","sourceOld":"  // Use the builder to create:\n  private NormalizeCharMap(FST<CharsRef> map) {\n    this.map = map;\n    if (map != null) {\n      try {\n        // Pre-cache root arcs:\n        final FST.Arc<CharsRef> scratchArc = new FST.Arc<CharsRef>();\n        final FST.BytesReader fstReader = map.getBytesReader(0);\n        map.getFirstArc(scratchArc);\n        if (FST.targetHasArcs(scratchArc)) {\n          map.readFirstRealTargetArc(scratchArc.target, scratchArc, fstReader);\n          while(true) {\n            assert scratchArc.label != FST.END_LABEL;\n            cachedRootArcs.put(Character.valueOf((char) scratchArc.label), new FST.Arc<CharsRef>().copyFrom(scratchArc));\n            if (scratchArc.isLast()) {\n              break;\n            }\n            map.readNextRealArc(scratchArc, fstReader);\n          }\n        }\n        //System.out.println(\"cached \" + cachedRootArcs.size() + \" root arcs\");\n      } catch (IOException ioe) {\n        // Bogus FST IOExceptions!!  (will never happen)\n        throw new RuntimeException(ioe);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/NormalizeCharMap#NormalizeCharMap(FST[CharsRef]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/NormalizeCharMap#NormalizeCharMap(FST[CharsRef]).mjava","sourceNew":"  // Use the builder to create:\n  private NormalizeCharMap(FST<CharsRef> map) {\n    this.map = map;\n    if (map != null) {\n      try {\n        // Pre-cache root arcs:\n        final FST.Arc<CharsRef> scratchArc = new FST.Arc<>();\n        final FST.BytesReader fstReader = map.getBytesReader();\n        map.getFirstArc(scratchArc);\n        if (FST.targetHasArcs(scratchArc)) {\n          map.readFirstRealTargetArc(scratchArc.target, scratchArc, fstReader);\n          while(true) {\n            assert scratchArc.label != FST.END_LABEL;\n            cachedRootArcs.put(Character.valueOf((char) scratchArc.label), new FST.Arc<CharsRef>().copyFrom(scratchArc));\n            if (scratchArc.isLast()) {\n              break;\n            }\n            map.readNextRealArc(scratchArc, fstReader);\n          }\n        }\n        //System.out.println(\"cached \" + cachedRootArcs.size() + \" root arcs\");\n      } catch (IOException ioe) {\n        // Bogus FST IOExceptions!!  (will never happen)\n        throw new RuntimeException(ioe);\n      }\n    }\n  }\n\n","sourceOld":"  // Use the builder to create:\n  private NormalizeCharMap(FST<CharsRef> map) {\n    this.map = map;\n    if (map != null) {\n      try {\n        // Pre-cache root arcs:\n        final FST.Arc<CharsRef> scratchArc = new FST.Arc<CharsRef>();\n        final FST.BytesReader fstReader = map.getBytesReader();\n        map.getFirstArc(scratchArc);\n        if (FST.targetHasArcs(scratchArc)) {\n          map.readFirstRealTargetArc(scratchArc.target, scratchArc, fstReader);\n          while(true) {\n            assert scratchArc.label != FST.END_LABEL;\n            cachedRootArcs.put(Character.valueOf((char) scratchArc.label), new FST.Arc<CharsRef>().copyFrom(scratchArc));\n            if (scratchArc.isLast()) {\n              break;\n            }\n            map.readNextRealArc(scratchArc, fstReader);\n          }\n        }\n        //System.out.println(\"cached \" + cachedRootArcs.size() + \" root arcs\");\n      } catch (IOException ioe) {\n        // Bogus FST IOExceptions!!  (will never happen)\n        throw new RuntimeException(ioe);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54204c8a3ca26aeafd273139fc29baf70d0f6786","date":1564170395,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/NormalizeCharMap#NormalizeCharMap(FST[CharsRef]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/NormalizeCharMap#NormalizeCharMap(FST[CharsRef]).mjava","sourceNew":"  // Use the builder to create:\n  private NormalizeCharMap(FST<CharsRef> map) {\n    this.map = map;\n    if (map != null) {\n      try {\n        // Pre-cache root arcs:\n        final FST.Arc<CharsRef> scratchArc = new FST.Arc<>();\n        final FST.BytesReader fstReader = map.getBytesReader();\n        map.getFirstArc(scratchArc);\n        if (FST.targetHasArcs(scratchArc)) {\n          map.readFirstRealTargetArc(scratchArc.target(), scratchArc, fstReader);\n          while(true) {\n            assert scratchArc.label() != FST.END_LABEL;\n            cachedRootArcs.put(Character.valueOf((char) scratchArc.label()), new FST.Arc<CharsRef>().copyFrom(scratchArc));\n            if (scratchArc.isLast()) {\n              break;\n            }\n            map.readNextRealArc(scratchArc, fstReader);\n          }\n        }\n        //System.out.println(\"cached \" + cachedRootArcs.size() + \" root arcs\");\n      } catch (IOException ioe) {\n        // Bogus FST IOExceptions!!  (will never happen)\n        throw new RuntimeException(ioe);\n      }\n    }\n  }\n\n","sourceOld":"  // Use the builder to create:\n  private NormalizeCharMap(FST<CharsRef> map) {\n    this.map = map;\n    if (map != null) {\n      try {\n        // Pre-cache root arcs:\n        final FST.Arc<CharsRef> scratchArc = new FST.Arc<>();\n        final FST.BytesReader fstReader = map.getBytesReader();\n        map.getFirstArc(scratchArc);\n        if (FST.targetHasArcs(scratchArc)) {\n          map.readFirstRealTargetArc(scratchArc.target, scratchArc, fstReader);\n          while(true) {\n            assert scratchArc.label != FST.END_LABEL;\n            cachedRootArcs.put(Character.valueOf((char) scratchArc.label), new FST.Arc<CharsRef>().copyFrom(scratchArc));\n            if (scratchArc.isLast()) {\n              break;\n            }\n            map.readNextRealArc(scratchArc, fstReader);\n          }\n        }\n        //System.out.println(\"cached \" + cachedRootArcs.size() + \" root arcs\");\n      } catch (IOException ioe) {\n        // Bogus FST IOExceptions!!  (will never happen)\n        throw new RuntimeException(ioe);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/NormalizeCharMap#NormalizeCharMap(FST[CharsRef]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/NormalizeCharMap#NormalizeCharMap(FST[CharsRef]).mjava","sourceNew":"  // Use the builder to create:\n  private NormalizeCharMap(FST<CharsRef> map) {\n    this.map = map;\n    if (map != null) {\n      try {\n        // Pre-cache root arcs:\n        final FST.Arc<CharsRef> scratchArc = new FST.Arc<>();\n        final FST.BytesReader fstReader = map.getBytesReader();\n        map.getFirstArc(scratchArc);\n        if (FST.targetHasArcs(scratchArc)) {\n          map.readFirstRealTargetArc(scratchArc.target(), scratchArc, fstReader);\n          while(true) {\n            assert scratchArc.label() != FST.END_LABEL;\n            cachedRootArcs.put(Character.valueOf((char) scratchArc.label()), new FST.Arc<CharsRef>().copyFrom(scratchArc));\n            if (scratchArc.isLast()) {\n              break;\n            }\n            map.readNextRealArc(scratchArc, fstReader);\n          }\n        }\n        //System.out.println(\"cached \" + cachedRootArcs.size() + \" root arcs\");\n      } catch (IOException ioe) {\n        // Bogus FST IOExceptions!!  (will never happen)\n        throw new RuntimeException(ioe);\n      }\n    }\n  }\n\n","sourceOld":"  // Use the builder to create:\n  private NormalizeCharMap(FST<CharsRef> map) {\n    this.map = map;\n    if (map != null) {\n      try {\n        // Pre-cache root arcs:\n        final FST.Arc<CharsRef> scratchArc = new FST.Arc<>();\n        final FST.BytesReader fstReader = map.getBytesReader();\n        map.getFirstArc(scratchArc);\n        if (FST.targetHasArcs(scratchArc)) {\n          map.readFirstRealTargetArc(scratchArc.target, scratchArc, fstReader);\n          while(true) {\n            assert scratchArc.label != FST.END_LABEL;\n            cachedRootArcs.put(Character.valueOf((char) scratchArc.label), new FST.Arc<CharsRef>().copyFrom(scratchArc));\n            if (scratchArc.isLast()) {\n              break;\n            }\n            map.readNextRealArc(scratchArc, fstReader);\n          }\n        }\n        //System.out.println(\"cached \" + cachedRootArcs.size() + \" root arcs\");\n      } catch (IOException ioe) {\n        // Bogus FST IOExceptions!!  (will never happen)\n        throw new RuntimeException(ioe);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["82557a475db3e0849171dc0be5b02e3ae0745ddb"],"82557a475db3e0849171dc0be5b02e3ae0745ddb":["b4e5bbc7f726dbcc466cb9b3c029d539a06f6545"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["b4e5bbc7f726dbcc466cb9b3c029d539a06f6545","82557a475db3e0849171dc0be5b02e3ae0745ddb"],"b4e5bbc7f726dbcc466cb9b3c029d539a06f6545":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8061ddd97f3352007d927dae445884a6f3d857b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","54204c8a3ca26aeafd273139fc29baf70d0f6786"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54204c8a3ca26aeafd273139fc29baf70d0f6786"]},"commit2Childs":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["54204c8a3ca26aeafd273139fc29baf70d0f6786","f8061ddd97f3352007d927dae445884a6f3d857b"],"82557a475db3e0849171dc0be5b02e3ae0745ddb":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","c4015cd39dff8d4dec562d909f9766debac53aa6"],"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"b4e5bbc7f726dbcc466cb9b3c029d539a06f6545":["82557a475db3e0849171dc0be5b02e3ae0745ddb","c4015cd39dff8d4dec562d909f9766debac53aa6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4e5bbc7f726dbcc466cb9b3c029d539a06f6545"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}