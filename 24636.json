{"path":"lucene/sandbox/src/test/org/apache/lucene/search/BaseRangeFieldQueryTestCase#doTestRandom(int,boolean).mjava","commits":[{"id":"05f4c28bc6a6df30868753f35eb802cbff28ce5c","date":1469068146,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/BaseRangeFieldQueryTestCase#doTestRandom(int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestRandom(int count, boolean multiValued) throws Exception {\n    int numDocs = atLeast(count);\n    int dimensions = dimension();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numDocs=\" + numDocs);\n    }\n\n    Box[][] boxes = new Box[numDocs][];\n\n    boolean haveRealDoc = true;\n\n    nextdoc: for (int id=0; id<numDocs; ++id) {\n      int x = random().nextInt(20);\n      if (boxes[id] == null) {\n        boxes[id] = new Box[] {nextBox(dimensions)};\n      }\n      if (x == 17) {\n        // dome docs don't have a box:\n        boxes[id][0].min[0] = Double.NaN;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n        continue;\n      }\n\n      if (multiValued == true && random().nextBoolean()) {\n        // randomly add multi valued documents (up to 2 fields)\n        int n = random().nextInt(2) + 1;\n        boxes[id] = new Box[n];\n        for (int i=0; i<n; ++i) {\n          boxes[id][i] = nextBox(dimensions);\n        }\n      }\n\n      if (id > 0 && x < 9 && haveRealDoc) {\n        int oldID;\n        int i=0;\n        // don't step on missing boxes:\n        while (true) {\n          oldID = random().nextInt(id);\n          if (Double.isNaN(boxes[oldID][0].min[0]) == false) {\n            break;\n          } else if (++i > id) {\n            continue nextdoc;\n          }\n        }\n\n        if (x == dimensions*2) {\n          // Fully identical box (use first box in case current is multivalued but old is not)\n          for (int d=0; d<dimensions; ++d) {\n            boxes[id][0].min[d] = boxes[oldID][0].min[d];\n            boxes[id][0].max[d] = boxes[oldID][0].max[d];\n          }\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" box=\" + boxes[id] + \" (same box as doc=\" + oldID + \")\");\n          }\n        } else {\n          for (int m = 0, even = dimensions % 2; m < dimensions * 2; ++m) {\n            if (x == m) {\n              int d = (int)Math.floor(m/2);\n              // current could be multivalue but old may not be, so use first box\n              if (even == 0) {\n                boxes[id][0].setVal(d, boxes[oldID][0].min[d]);\n                if (VERBOSE) {\n                  System.out.println(\"  id=\" + id + \" box=\" + boxes[id] + \" (same min[\" + d + \"] as doc=\" + oldID + \")\");\n                }\n              } else {\n                boxes[id][0].setVal(d, boxes[oldID][0].max[d]);\n                if (VERBOSE) {\n                  System.out.println(\"  id=\" + id + \" box=\" + boxes[id] + \" (same max[\" + d + \"] as doc=\" + oldID + \")\");\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    verify(boxes);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c738d774d160362ecfdc9887a5fa4beb421872b","date":1469112991,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/BaseRangeFieldQueryTestCase#doTestRandom(int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestRandom(int count, boolean multiValued) throws Exception {\n    int numDocs = atLeast(count);\n    int dimensions = dimension();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numDocs=\" + numDocs);\n    }\n\n    Box[][] boxes = new Box[numDocs][];\n\n    boolean haveRealDoc = true;\n\n    nextdoc: for (int id=0; id<numDocs; ++id) {\n      int x = random().nextInt(20);\n      if (boxes[id] == null) {\n        boxes[id] = new Box[] {nextBox(dimensions)};\n      }\n      if (x == 17) {\n        // dome docs don't have a box:\n        boxes[id][0].min[0] = Double.NaN;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n        continue;\n      }\n\n      if (multiValued == true && random().nextBoolean()) {\n        // randomly add multi valued documents (up to 2 fields)\n        int n = random().nextInt(2) + 1;\n        boxes[id] = new Box[n];\n        for (int i=0; i<n; ++i) {\n          boxes[id][i] = nextBox(dimensions);\n        }\n      }\n\n      if (id > 0 && x < 9 && haveRealDoc) {\n        int oldID;\n        int i=0;\n        // don't step on missing boxes:\n        while (true) {\n          oldID = random().nextInt(id);\n          if (Double.isNaN(boxes[oldID][0].min[0]) == false) {\n            break;\n          } else if (++i > id) {\n            continue nextdoc;\n          }\n        }\n\n        if (x == dimensions*2) {\n          // Fully identical box (use first box in case current is multivalued but old is not)\n          for (int d=0; d<dimensions; ++d) {\n            boxes[id][0].min[d] = boxes[oldID][0].min[d];\n            boxes[id][0].max[d] = boxes[oldID][0].max[d];\n          }\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" box=\" + boxes[id] + \" (same box as doc=\" + oldID + \")\");\n          }\n        } else {\n          for (int m = 0, even = dimensions % 2; m < dimensions * 2; ++m) {\n            if (x == m) {\n              int d = (int)Math.floor(m/2);\n              // current could be multivalue but old may not be, so use first box\n              if (even == 0) {\n                boxes[id][0].setVal(d, boxes[oldID][0].min[d]);\n                if (VERBOSE) {\n                  System.out.println(\"  id=\" + id + \" box=\" + boxes[id] + \" (same min[\" + d + \"] as doc=\" + oldID + \")\");\n                }\n              } else {\n                boxes[id][0].setVal(d, boxes[oldID][0].max[d]);\n                if (VERBOSE) {\n                  System.out.println(\"  id=\" + id + \" box=\" + boxes[id] + \" (same max[\" + d + \"] as doc=\" + oldID + \")\");\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    verify(boxes);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7825da0fed0bd08a466fec72f7c6a18a2abb303d","date":1471466888,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/BaseRangeFieldQueryTestCase#doTestRandom(int,boolean).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/BaseRangeFieldQueryTestCase#doTestRandom(int,boolean).mjava","sourceNew":"  private void doTestRandom(int count, boolean multiValued) throws Exception {\n    int numDocs = atLeast(count);\n    int dimensions = dimension();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numDocs=\" + numDocs);\n    }\n\n    Range[][] ranges = new Range[numDocs][];\n\n    boolean haveRealDoc = true;\n\n    nextdoc: for (int id=0; id<numDocs; ++id) {\n      int x = random().nextInt(20);\n      if (ranges[id] == null) {\n        ranges[id] = new Range[] {nextRange(dimensions)};\n      }\n      if (x == 17) {\n        // dome docs don't have a box:\n        ranges[id][0].isMissing = true;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n        continue;\n      }\n\n      if (multiValued == true && random().nextBoolean()) {\n        // randomly add multi valued documents (up to 2 fields)\n        int n = random().nextInt(2) + 1;\n        ranges[id] = new Range[n];\n        for (int i=0; i<n; ++i) {\n          ranges[id][i] = nextRange(dimensions);\n        }\n      }\n\n      if (id > 0 && x < 9 && haveRealDoc) {\n        int oldID;\n        int i=0;\n        // don't step on missing ranges:\n        while (true) {\n          oldID = random().nextInt(id);\n          if (ranges[oldID][0].isMissing == false) {\n            break;\n          } else if (++i > id) {\n            continue nextdoc;\n          }\n        }\n\n        if (x == dimensions*2) {\n          // Fully identical box (use first box in case current is multivalued but old is not)\n          for (int d=0; d<dimensions; ++d) {\n            ranges[id][0].setMin(d, ranges[oldID][0].getMin(d));\n            ranges[id][0].setMax(d, ranges[oldID][0].getMax(d));\n          }\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same box as doc=\" + oldID + \")\");\n          }\n        } else {\n          for (int m = 0, even = dimensions % 2; m < dimensions * 2; ++m) {\n            if (x == m) {\n              int d = (int)Math.floor(m/2);\n              // current could be multivalue but old may not be, so use first box\n              if (even == 0) {\n                ranges[id][0].setMin(d, ranges[oldID][0].getMin(d));\n                if (VERBOSE) {\n                  System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same min[\" + d + \"] as doc=\" + oldID + \")\");\n                }\n              } else {\n                ranges[id][0].setMax(d, ranges[oldID][0].getMax(d));\n                if (VERBOSE) {\n                  System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same max[\" + d + \"] as doc=\" + oldID + \")\");\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    verify(ranges);\n  }\n\n","sourceOld":"  private void doTestRandom(int count, boolean multiValued) throws Exception {\n    int numDocs = atLeast(count);\n    int dimensions = dimension();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numDocs=\" + numDocs);\n    }\n\n    Box[][] boxes = new Box[numDocs][];\n\n    boolean haveRealDoc = true;\n\n    nextdoc: for (int id=0; id<numDocs; ++id) {\n      int x = random().nextInt(20);\n      if (boxes[id] == null) {\n        boxes[id] = new Box[] {nextBox(dimensions)};\n      }\n      if (x == 17) {\n        // dome docs don't have a box:\n        boxes[id][0].min[0] = Double.NaN;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n        continue;\n      }\n\n      if (multiValued == true && random().nextBoolean()) {\n        // randomly add multi valued documents (up to 2 fields)\n        int n = random().nextInt(2) + 1;\n        boxes[id] = new Box[n];\n        for (int i=0; i<n; ++i) {\n          boxes[id][i] = nextBox(dimensions);\n        }\n      }\n\n      if (id > 0 && x < 9 && haveRealDoc) {\n        int oldID;\n        int i=0;\n        // don't step on missing boxes:\n        while (true) {\n          oldID = random().nextInt(id);\n          if (Double.isNaN(boxes[oldID][0].min[0]) == false) {\n            break;\n          } else if (++i > id) {\n            continue nextdoc;\n          }\n        }\n\n        if (x == dimensions*2) {\n          // Fully identical box (use first box in case current is multivalued but old is not)\n          for (int d=0; d<dimensions; ++d) {\n            boxes[id][0].min[d] = boxes[oldID][0].min[d];\n            boxes[id][0].max[d] = boxes[oldID][0].max[d];\n          }\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" box=\" + boxes[id] + \" (same box as doc=\" + oldID + \")\");\n          }\n        } else {\n          for (int m = 0, even = dimensions % 2; m < dimensions * 2; ++m) {\n            if (x == m) {\n              int d = (int)Math.floor(m/2);\n              // current could be multivalue but old may not be, so use first box\n              if (even == 0) {\n                boxes[id][0].setVal(d, boxes[oldID][0].min[d]);\n                if (VERBOSE) {\n                  System.out.println(\"  id=\" + id + \" box=\" + boxes[id] + \" (same min[\" + d + \"] as doc=\" + oldID + \")\");\n                }\n              } else {\n                boxes[id][0].setVal(d, boxes[oldID][0].max[d]);\n                if (VERBOSE) {\n                  System.out.println(\"  id=\" + id + \" box=\" + boxes[id] + \" (same max[\" + d + \"] as doc=\" + oldID + \")\");\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    verify(boxes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/BaseRangeFieldQueryTestCase#doTestRandom(int,boolean).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/BaseRangeFieldQueryTestCase#doTestRandom(int,boolean).mjava","sourceNew":"  private void doTestRandom(int count, boolean multiValued) throws Exception {\n    int numDocs = atLeast(count);\n    int dimensions = dimension();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numDocs=\" + numDocs);\n    }\n\n    Range[][] ranges = new Range[numDocs][];\n\n    boolean haveRealDoc = true;\n\n    nextdoc: for (int id=0; id<numDocs; ++id) {\n      int x = random().nextInt(20);\n      if (ranges[id] == null) {\n        ranges[id] = new Range[] {nextRange(dimensions)};\n      }\n      if (x == 17) {\n        // dome docs don't have a box:\n        ranges[id][0].isMissing = true;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n        continue;\n      }\n\n      if (multiValued == true && random().nextBoolean()) {\n        // randomly add multi valued documents (up to 2 fields)\n        int n = random().nextInt(2) + 1;\n        ranges[id] = new Range[n];\n        for (int i=0; i<n; ++i) {\n          ranges[id][i] = nextRange(dimensions);\n        }\n      }\n\n      if (id > 0 && x < 9 && haveRealDoc) {\n        int oldID;\n        int i=0;\n        // don't step on missing ranges:\n        while (true) {\n          oldID = random().nextInt(id);\n          if (ranges[oldID][0].isMissing == false) {\n            break;\n          } else if (++i > id) {\n            continue nextdoc;\n          }\n        }\n\n        if (x == dimensions*2) {\n          // Fully identical box (use first box in case current is multivalued but old is not)\n          for (int d=0; d<dimensions; ++d) {\n            ranges[id][0].setMin(d, ranges[oldID][0].getMin(d));\n            ranges[id][0].setMax(d, ranges[oldID][0].getMax(d));\n          }\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same box as doc=\" + oldID + \")\");\n          }\n        } else {\n          for (int m = 0, even = dimensions % 2; m < dimensions * 2; ++m) {\n            if (x == m) {\n              int d = (int)Math.floor(m/2);\n              // current could be multivalue but old may not be, so use first box\n              if (even == 0) {\n                ranges[id][0].setMin(d, ranges[oldID][0].getMin(d));\n                if (VERBOSE) {\n                  System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same min[\" + d + \"] as doc=\" + oldID + \")\");\n                }\n              } else {\n                ranges[id][0].setMax(d, ranges[oldID][0].getMax(d));\n                if (VERBOSE) {\n                  System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same max[\" + d + \"] as doc=\" + oldID + \")\");\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    verify(ranges);\n  }\n\n","sourceOld":"  private void doTestRandom(int count, boolean multiValued) throws Exception {\n    int numDocs = atLeast(count);\n    int dimensions = dimension();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numDocs=\" + numDocs);\n    }\n\n    Box[][] boxes = new Box[numDocs][];\n\n    boolean haveRealDoc = true;\n\n    nextdoc: for (int id=0; id<numDocs; ++id) {\n      int x = random().nextInt(20);\n      if (boxes[id] == null) {\n        boxes[id] = new Box[] {nextBox(dimensions)};\n      }\n      if (x == 17) {\n        // dome docs don't have a box:\n        boxes[id][0].min[0] = Double.NaN;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n        continue;\n      }\n\n      if (multiValued == true && random().nextBoolean()) {\n        // randomly add multi valued documents (up to 2 fields)\n        int n = random().nextInt(2) + 1;\n        boxes[id] = new Box[n];\n        for (int i=0; i<n; ++i) {\n          boxes[id][i] = nextBox(dimensions);\n        }\n      }\n\n      if (id > 0 && x < 9 && haveRealDoc) {\n        int oldID;\n        int i=0;\n        // don't step on missing boxes:\n        while (true) {\n          oldID = random().nextInt(id);\n          if (Double.isNaN(boxes[oldID][0].min[0]) == false) {\n            break;\n          } else if (++i > id) {\n            continue nextdoc;\n          }\n        }\n\n        if (x == dimensions*2) {\n          // Fully identical box (use first box in case current is multivalued but old is not)\n          for (int d=0; d<dimensions; ++d) {\n            boxes[id][0].min[d] = boxes[oldID][0].min[d];\n            boxes[id][0].max[d] = boxes[oldID][0].max[d];\n          }\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" box=\" + boxes[id] + \" (same box as doc=\" + oldID + \")\");\n          }\n        } else {\n          for (int m = 0, even = dimensions % 2; m < dimensions * 2; ++m) {\n            if (x == m) {\n              int d = (int)Math.floor(m/2);\n              // current could be multivalue but old may not be, so use first box\n              if (even == 0) {\n                boxes[id][0].setVal(d, boxes[oldID][0].min[d]);\n                if (VERBOSE) {\n                  System.out.println(\"  id=\" + id + \" box=\" + boxes[id] + \" (same min[\" + d + \"] as doc=\" + oldID + \")\");\n                }\n              } else {\n                boxes[id][0].setVal(d, boxes[oldID][0].max[d]);\n                if (VERBOSE) {\n                  System.out.println(\"  id=\" + id + \" box=\" + boxes[id] + \" (same max[\" + d + \"] as doc=\" + oldID + \")\");\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    verify(boxes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/BaseRangeFieldQueryTestCase#doTestRandom(int,boolean).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/BaseRangeFieldQueryTestCase#doTestRandom(int,boolean).mjava","sourceNew":"  private void doTestRandom(int count, boolean multiValued) throws Exception {\n    int numDocs = atLeast(count);\n    int dimensions = dimension();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numDocs=\" + numDocs);\n    }\n\n    Range[][] ranges = new Range[numDocs][];\n\n    boolean haveRealDoc = true;\n\n    nextdoc: for (int id=0; id<numDocs; ++id) {\n      int x = random().nextInt(20);\n      if (ranges[id] == null) {\n        ranges[id] = new Range[] {nextRange(dimensions)};\n      }\n      if (x == 17) {\n        // dome docs don't have a box:\n        ranges[id][0].isMissing = true;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n        continue;\n      }\n\n      if (multiValued == true && random().nextBoolean()) {\n        // randomly add multi valued documents (up to 2 fields)\n        int n = random().nextInt(2) + 1;\n        ranges[id] = new Range[n];\n        for (int i=0; i<n; ++i) {\n          ranges[id][i] = nextRange(dimensions);\n        }\n      }\n\n      if (id > 0 && x < 9 && haveRealDoc) {\n        int oldID;\n        int i=0;\n        // don't step on missing ranges:\n        while (true) {\n          oldID = random().nextInt(id);\n          if (ranges[oldID][0].isMissing == false) {\n            break;\n          } else if (++i > id) {\n            continue nextdoc;\n          }\n        }\n\n        if (x == dimensions*2) {\n          // Fully identical box (use first box in case current is multivalued but old is not)\n          for (int d=0; d<dimensions; ++d) {\n            ranges[id][0].setMin(d, ranges[oldID][0].getMin(d));\n            ranges[id][0].setMax(d, ranges[oldID][0].getMax(d));\n          }\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same box as doc=\" + oldID + \")\");\n          }\n        } else {\n          for (int m = 0, even = dimensions % 2; m < dimensions * 2; ++m) {\n            if (x == m) {\n              int d = (int)Math.floor(m/2);\n              // current could be multivalue but old may not be, so use first box\n              if (even == 0) {\n                ranges[id][0].setMin(d, ranges[oldID][0].getMin(d));\n                if (VERBOSE) {\n                  System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same min[\" + d + \"] as doc=\" + oldID + \")\");\n                }\n              } else {\n                ranges[id][0].setMax(d, ranges[oldID][0].getMax(d));\n                if (VERBOSE) {\n                  System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same max[\" + d + \"] as doc=\" + oldID + \")\");\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    verify(ranges);\n  }\n\n","sourceOld":"  private void doTestRandom(int count, boolean multiValued) throws Exception {\n    int numDocs = atLeast(count);\n    int dimensions = dimension();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numDocs=\" + numDocs);\n    }\n\n    Box[][] boxes = new Box[numDocs][];\n\n    boolean haveRealDoc = true;\n\n    nextdoc: for (int id=0; id<numDocs; ++id) {\n      int x = random().nextInt(20);\n      if (boxes[id] == null) {\n        boxes[id] = new Box[] {nextBox(dimensions)};\n      }\n      if (x == 17) {\n        // dome docs don't have a box:\n        boxes[id][0].min[0] = Double.NaN;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n        continue;\n      }\n\n      if (multiValued == true && random().nextBoolean()) {\n        // randomly add multi valued documents (up to 2 fields)\n        int n = random().nextInt(2) + 1;\n        boxes[id] = new Box[n];\n        for (int i=0; i<n; ++i) {\n          boxes[id][i] = nextBox(dimensions);\n        }\n      }\n\n      if (id > 0 && x < 9 && haveRealDoc) {\n        int oldID;\n        int i=0;\n        // don't step on missing boxes:\n        while (true) {\n          oldID = random().nextInt(id);\n          if (Double.isNaN(boxes[oldID][0].min[0]) == false) {\n            break;\n          } else if (++i > id) {\n            continue nextdoc;\n          }\n        }\n\n        if (x == dimensions*2) {\n          // Fully identical box (use first box in case current is multivalued but old is not)\n          for (int d=0; d<dimensions; ++d) {\n            boxes[id][0].min[d] = boxes[oldID][0].min[d];\n            boxes[id][0].max[d] = boxes[oldID][0].max[d];\n          }\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" box=\" + boxes[id] + \" (same box as doc=\" + oldID + \")\");\n          }\n        } else {\n          for (int m = 0, even = dimensions % 2; m < dimensions * 2; ++m) {\n            if (x == m) {\n              int d = (int)Math.floor(m/2);\n              // current could be multivalue but old may not be, so use first box\n              if (even == 0) {\n                boxes[id][0].setVal(d, boxes[oldID][0].min[d]);\n                if (VERBOSE) {\n                  System.out.println(\"  id=\" + id + \" box=\" + boxes[id] + \" (same min[\" + d + \"] as doc=\" + oldID + \")\");\n                }\n              } else {\n                boxes[id][0].setVal(d, boxes[oldID][0].max[d]);\n                if (VERBOSE) {\n                  System.out.println(\"  id=\" + id + \" box=\" + boxes[id] + \" (same max[\" + d + \"] as doc=\" + oldID + \")\");\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    verify(boxes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/BaseRangeFieldQueryTestCase#doTestRandom(int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestRandom(int count, boolean multiValued) throws Exception {\n    int numDocs = atLeast(count);\n    int dimensions = dimension();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numDocs=\" + numDocs);\n    }\n\n    Range[][] ranges = new Range[numDocs][];\n\n    boolean haveRealDoc = true;\n\n    nextdoc: for (int id=0; id<numDocs; ++id) {\n      int x = random().nextInt(20);\n      if (ranges[id] == null) {\n        ranges[id] = new Range[] {nextRange(dimensions)};\n      }\n      if (x == 17) {\n        // dome docs don't have a box:\n        ranges[id][0].isMissing = true;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n        continue;\n      }\n\n      if (multiValued == true && random().nextBoolean()) {\n        // randomly add multi valued documents (up to 2 fields)\n        int n = random().nextInt(2) + 1;\n        ranges[id] = new Range[n];\n        for (int i=0; i<n; ++i) {\n          ranges[id][i] = nextRange(dimensions);\n        }\n      }\n\n      if (id > 0 && x < 9 && haveRealDoc) {\n        int oldID;\n        int i=0;\n        // don't step on missing ranges:\n        while (true) {\n          oldID = random().nextInt(id);\n          if (ranges[oldID][0].isMissing == false) {\n            break;\n          } else if (++i > id) {\n            continue nextdoc;\n          }\n        }\n\n        if (x == dimensions*2) {\n          // Fully identical box (use first box in case current is multivalued but old is not)\n          for (int d=0; d<dimensions; ++d) {\n            ranges[id][0].setMin(d, ranges[oldID][0].getMin(d));\n            ranges[id][0].setMax(d, ranges[oldID][0].getMax(d));\n          }\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same box as doc=\" + oldID + \")\");\n          }\n        } else {\n          for (int m = 0, even = dimensions % 2; m < dimensions * 2; ++m) {\n            if (x == m) {\n              int d = (int)Math.floor(m/2);\n              // current could be multivalue but old may not be, so use first box\n              if (even == 0) {\n                ranges[id][0].setMin(d, ranges[oldID][0].getMin(d));\n                if (VERBOSE) {\n                  System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same min[\" + d + \"] as doc=\" + oldID + \")\");\n                }\n              } else {\n                ranges[id][0].setMax(d, ranges[oldID][0].getMax(d));\n                if (VERBOSE) {\n                  System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same max[\" + d + \"] as doc=\" + oldID + \")\");\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    verify(ranges);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6939810fba802f65f77bcc41069354917202d36f","date":1481663226,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/BaseRangeFieldQueryTestCase#doTestRandom(int,boolean).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/BaseRangeFieldQueryTestCase#doTestRandom(int,boolean).mjava","sourceNew":"  private void doTestRandom(int count, boolean multiValued) throws Exception {\n    int numDocs = atLeast(count);\n    int dimensions = dimension();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numDocs=\" + numDocs);\n    }\n\n    Range[][] ranges = new Range[numDocs][];\n\n    boolean haveRealDoc = true;\n\n    nextdoc: for (int id=0; id<numDocs; ++id) {\n      int x = random().nextInt(20);\n      if (ranges[id] == null) {\n        ranges[id] = new Range[] {nextRange(dimensions)};\n      }\n      if (x == 17) {\n        // some docs don't have a box:\n        ranges[id][0].isMissing = true;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n        continue;\n      }\n\n      if (multiValued == true && random().nextBoolean()) {\n        // randomly add multi valued documents (up to 2 fields)\n        int n = random().nextInt(2) + 1;\n        ranges[id] = new Range[n];\n        for (int i=0; i<n; ++i) {\n          ranges[id][i] = nextRange(dimensions);\n        }\n      }\n\n      if (id > 0 && x < 9 && haveRealDoc) {\n        int oldID;\n        int i=0;\n        // don't step on missing ranges:\n        while (true) {\n          oldID = random().nextInt(id);\n          if (ranges[oldID][0].isMissing == false) {\n            break;\n          } else if (++i > id) {\n            continue nextdoc;\n          }\n        }\n\n        if (x == dimensions*2) {\n          // Fully identical box (use first box in case current is multivalued but old is not)\n          for (int d=0; d<dimensions; ++d) {\n            ranges[id][0].setMin(d, ranges[oldID][0].getMin(d));\n            ranges[id][0].setMax(d, ranges[oldID][0].getMax(d));\n          }\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same box as doc=\" + oldID + \")\");\n          }\n        } else {\n          for (int m = 0, even = dimensions % 2; m < dimensions * 2; ++m) {\n            if (x == m) {\n              int d = (int)Math.floor(m/2);\n              // current could be multivalue but old may not be, so use first box\n              if (even == 0) {\n                ranges[id][0].setMin(d, ranges[oldID][0].getMin(d));\n                if (VERBOSE) {\n                  System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same min[\" + d + \"] as doc=\" + oldID + \")\");\n                }\n              } else {\n                ranges[id][0].setMax(d, ranges[oldID][0].getMax(d));\n                if (VERBOSE) {\n                  System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same max[\" + d + \"] as doc=\" + oldID + \")\");\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    verify(ranges);\n  }\n\n","sourceOld":"  private void doTestRandom(int count, boolean multiValued) throws Exception {\n    int numDocs = atLeast(count);\n    int dimensions = dimension();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numDocs=\" + numDocs);\n    }\n\n    Range[][] ranges = new Range[numDocs][];\n\n    boolean haveRealDoc = true;\n\n    nextdoc: for (int id=0; id<numDocs; ++id) {\n      int x = random().nextInt(20);\n      if (ranges[id] == null) {\n        ranges[id] = new Range[] {nextRange(dimensions)};\n      }\n      if (x == 17) {\n        // dome docs don't have a box:\n        ranges[id][0].isMissing = true;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n        continue;\n      }\n\n      if (multiValued == true && random().nextBoolean()) {\n        // randomly add multi valued documents (up to 2 fields)\n        int n = random().nextInt(2) + 1;\n        ranges[id] = new Range[n];\n        for (int i=0; i<n; ++i) {\n          ranges[id][i] = nextRange(dimensions);\n        }\n      }\n\n      if (id > 0 && x < 9 && haveRealDoc) {\n        int oldID;\n        int i=0;\n        // don't step on missing ranges:\n        while (true) {\n          oldID = random().nextInt(id);\n          if (ranges[oldID][0].isMissing == false) {\n            break;\n          } else if (++i > id) {\n            continue nextdoc;\n          }\n        }\n\n        if (x == dimensions*2) {\n          // Fully identical box (use first box in case current is multivalued but old is not)\n          for (int d=0; d<dimensions; ++d) {\n            ranges[id][0].setMin(d, ranges[oldID][0].getMin(d));\n            ranges[id][0].setMax(d, ranges[oldID][0].getMax(d));\n          }\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same box as doc=\" + oldID + \")\");\n          }\n        } else {\n          for (int m = 0, even = dimensions % 2; m < dimensions * 2; ++m) {\n            if (x == m) {\n              int d = (int)Math.floor(m/2);\n              // current could be multivalue but old may not be, so use first box\n              if (even == 0) {\n                ranges[id][0].setMin(d, ranges[oldID][0].getMin(d));\n                if (VERBOSE) {\n                  System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same min[\" + d + \"] as doc=\" + oldID + \")\");\n                }\n              } else {\n                ranges[id][0].setMax(d, ranges[oldID][0].getMax(d));\n                if (VERBOSE) {\n                  System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same max[\" + d + \"] as doc=\" + oldID + \")\");\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    verify(ranges);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/BaseRangeFieldQueryTestCase#doTestRandom(int,boolean).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/BaseRangeFieldQueryTestCase#doTestRandom(int,boolean).mjava","sourceNew":"  private void doTestRandom(int count, boolean multiValued) throws Exception {\n    int numDocs = atLeast(count);\n    int dimensions = dimension();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numDocs=\" + numDocs);\n    }\n\n    Range[][] ranges = new Range[numDocs][];\n\n    boolean haveRealDoc = true;\n\n    nextdoc: for (int id=0; id<numDocs; ++id) {\n      int x = random().nextInt(20);\n      if (ranges[id] == null) {\n        ranges[id] = new Range[] {nextRange(dimensions)};\n      }\n      if (x == 17) {\n        // some docs don't have a box:\n        ranges[id][0].isMissing = true;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n        continue;\n      }\n\n      if (multiValued == true && random().nextBoolean()) {\n        // randomly add multi valued documents (up to 2 fields)\n        int n = random().nextInt(2) + 1;\n        ranges[id] = new Range[n];\n        for (int i=0; i<n; ++i) {\n          ranges[id][i] = nextRange(dimensions);\n        }\n      }\n\n      if (id > 0 && x < 9 && haveRealDoc) {\n        int oldID;\n        int i=0;\n        // don't step on missing ranges:\n        while (true) {\n          oldID = random().nextInt(id);\n          if (ranges[oldID][0].isMissing == false) {\n            break;\n          } else if (++i > id) {\n            continue nextdoc;\n          }\n        }\n\n        if (x == dimensions*2) {\n          // Fully identical box (use first box in case current is multivalued but old is not)\n          for (int d=0; d<dimensions; ++d) {\n            ranges[id][0].setMin(d, ranges[oldID][0].getMin(d));\n            ranges[id][0].setMax(d, ranges[oldID][0].getMax(d));\n          }\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same box as doc=\" + oldID + \")\");\n          }\n        } else {\n          for (int m = 0, even = dimensions % 2; m < dimensions * 2; ++m) {\n            if (x == m) {\n              int d = (int)Math.floor(m/2);\n              // current could be multivalue but old may not be, so use first box\n              if (even == 0) {\n                ranges[id][0].setMin(d, ranges[oldID][0].getMin(d));\n                if (VERBOSE) {\n                  System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same min[\" + d + \"] as doc=\" + oldID + \")\");\n                }\n              } else {\n                ranges[id][0].setMax(d, ranges[oldID][0].getMax(d));\n                if (VERBOSE) {\n                  System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same max[\" + d + \"] as doc=\" + oldID + \")\");\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    verify(ranges);\n  }\n\n","sourceOld":"  private void doTestRandom(int count, boolean multiValued) throws Exception {\n    int numDocs = atLeast(count);\n    int dimensions = dimension();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numDocs=\" + numDocs);\n    }\n\n    Range[][] ranges = new Range[numDocs][];\n\n    boolean haveRealDoc = true;\n\n    nextdoc: for (int id=0; id<numDocs; ++id) {\n      int x = random().nextInt(20);\n      if (ranges[id] == null) {\n        ranges[id] = new Range[] {nextRange(dimensions)};\n      }\n      if (x == 17) {\n        // dome docs don't have a box:\n        ranges[id][0].isMissing = true;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n        continue;\n      }\n\n      if (multiValued == true && random().nextBoolean()) {\n        // randomly add multi valued documents (up to 2 fields)\n        int n = random().nextInt(2) + 1;\n        ranges[id] = new Range[n];\n        for (int i=0; i<n; ++i) {\n          ranges[id][i] = nextRange(dimensions);\n        }\n      }\n\n      if (id > 0 && x < 9 && haveRealDoc) {\n        int oldID;\n        int i=0;\n        // don't step on missing ranges:\n        while (true) {\n          oldID = random().nextInt(id);\n          if (ranges[oldID][0].isMissing == false) {\n            break;\n          } else if (++i > id) {\n            continue nextdoc;\n          }\n        }\n\n        if (x == dimensions*2) {\n          // Fully identical box (use first box in case current is multivalued but old is not)\n          for (int d=0; d<dimensions; ++d) {\n            ranges[id][0].setMin(d, ranges[oldID][0].getMin(d));\n            ranges[id][0].setMax(d, ranges[oldID][0].getMax(d));\n          }\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same box as doc=\" + oldID + \")\");\n          }\n        } else {\n          for (int m = 0, even = dimensions % 2; m < dimensions * 2; ++m) {\n            if (x == m) {\n              int d = (int)Math.floor(m/2);\n              // current could be multivalue but old may not be, so use first box\n              if (even == 0) {\n                ranges[id][0].setMin(d, ranges[oldID][0].getMin(d));\n                if (VERBOSE) {\n                  System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same min[\" + d + \"] as doc=\" + oldID + \")\");\n                }\n              } else {\n                ranges[id][0].setMax(d, ranges[oldID][0].getMax(d));\n                if (VERBOSE) {\n                  System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same max[\" + d + \"] as doc=\" + oldID + \")\");\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    verify(ranges);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a52b01a73cacbd2d360240e72d64c0ba353618f","date":1489389749,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/BaseRangeFieldQueryTestCase#doTestRandom(int,boolean).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/BaseRangeFieldQueryTestCase#doTestRandom(int,boolean).mjava","sourceNew":"  private void doTestRandom(int count, boolean multiValued) throws Exception {\n    int numDocs = atLeast(count);\n    int dimensions = dimension();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numDocs=\" + numDocs);\n    }\n\n    Range[][] ranges = new Range[numDocs][];\n\n    boolean haveRealDoc = true;\n\n    nextdoc: for (int id=0; id<numDocs; ++id) {\n      int x = random().nextInt(20);\n      if (ranges[id] == null) {\n        ranges[id] = new Range[] {nextRange(dimensions)};\n      }\n      if (x == 17) {\n        // some docs don't have a box:\n        ranges[id][0].isMissing = true;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n        continue;\n      }\n\n      if (multiValued == true && random().nextBoolean()) {\n        // randomly add multi valued documents (up to 2 fields)\n        int n = random().nextInt(2) + 1;\n        ranges[id] = new Range[n];\n        for (int i=0; i<n; ++i) {\n          ranges[id][i] = nextRange(dimensions);\n        }\n      }\n\n      if (id > 0 && x < 9 && haveRealDoc) {\n        int oldID;\n        int i=0;\n        // don't step on missing ranges:\n        while (true) {\n          oldID = random().nextInt(id);\n          if (ranges[oldID][0].isMissing == false) {\n            break;\n          } else if (++i > id) {\n            continue nextdoc;\n          }\n        }\n\n        if (x == dimensions*2) {\n          // Fully identical box (use first box in case current is multivalued but old is not)\n          for (int d=0; d<dimensions; ++d) {\n            ranges[id][0].setMin(d, ranges[oldID][0].getMin(d));\n            ranges[id][0].setMax(d, ranges[oldID][0].getMax(d));\n          }\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same box as doc=\" + oldID + \")\");\n          }\n        } else {\n          for (int m = 0, even = dimensions % 2; m < dimensions * 2; ++m) {\n            if (x == m) {\n              int d = (int)Math.floor(m/2);\n              // current could be multivalue but old may not be, so use first box\n              if (even == 0) {\n                ranges[id][0].setMin(d, ranges[oldID][0].getMin(d));\n                if (VERBOSE) {\n                  System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same min[\" + d + \"] as doc=\" + oldID + \")\");\n                }\n              } else {\n                ranges[id][0].setMax(d, ranges[oldID][0].getMax(d));\n                if (VERBOSE) {\n                  System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same max[\" + d + \"] as doc=\" + oldID + \")\");\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    verify(ranges);\n  }\n\n","sourceOld":"  private void doTestRandom(int count, boolean multiValued) throws Exception {\n    int numDocs = atLeast(count);\n    int dimensions = dimension();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numDocs=\" + numDocs);\n    }\n\n    Range[][] ranges = new Range[numDocs][];\n\n    boolean haveRealDoc = true;\n\n    nextdoc: for (int id=0; id<numDocs; ++id) {\n      int x = random().nextInt(20);\n      if (ranges[id] == null) {\n        ranges[id] = new Range[] {nextRange(dimensions)};\n      }\n      if (x == 17) {\n        // some docs don't have a box:\n        ranges[id][0].isMissing = true;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n        continue;\n      }\n\n      if (multiValued == true && random().nextBoolean()) {\n        // randomly add multi valued documents (up to 2 fields)\n        int n = random().nextInt(2) + 1;\n        ranges[id] = new Range[n];\n        for (int i=0; i<n; ++i) {\n          ranges[id][i] = nextRange(dimensions);\n        }\n      }\n\n      if (id > 0 && x < 9 && haveRealDoc) {\n        int oldID;\n        int i=0;\n        // don't step on missing ranges:\n        while (true) {\n          oldID = random().nextInt(id);\n          if (ranges[oldID][0].isMissing == false) {\n            break;\n          } else if (++i > id) {\n            continue nextdoc;\n          }\n        }\n\n        if (x == dimensions*2) {\n          // Fully identical box (use first box in case current is multivalued but old is not)\n          for (int d=0; d<dimensions; ++d) {\n            ranges[id][0].setMin(d, ranges[oldID][0].getMin(d));\n            ranges[id][0].setMax(d, ranges[oldID][0].getMax(d));\n          }\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same box as doc=\" + oldID + \")\");\n          }\n        } else {\n          for (int m = 0, even = dimensions % 2; m < dimensions * 2; ++m) {\n            if (x == m) {\n              int d = (int)Math.floor(m/2);\n              // current could be multivalue but old may not be, so use first box\n              if (even == 0) {\n                ranges[id][0].setMin(d, ranges[oldID][0].getMin(d));\n                if (VERBOSE) {\n                  System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same min[\" + d + \"] as doc=\" + oldID + \")\");\n                }\n              } else {\n                ranges[id][0].setMax(d, ranges[oldID][0].getMax(d));\n                if (VERBOSE) {\n                  System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same max[\" + d + \"] as doc=\" + oldID + \")\");\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    verify(ranges);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3c738d774d160362ecfdc9887a5fa4beb421872b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","05f4c28bc6a6df30868753f35eb802cbff28ce5c"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["3c738d774d160362ecfdc9887a5fa4beb421872b","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"7825da0fed0bd08a466fec72f7c6a18a2abb303d":["3c738d774d160362ecfdc9887a5fa4beb421872b"],"4a52b01a73cacbd2d360240e72d64c0ba353618f":["6939810fba802f65f77bcc41069354917202d36f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6939810fba802f65f77bcc41069354917202d36f":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"05f4c28bc6a6df30868753f35eb802cbff28ce5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["3c738d774d160362ecfdc9887a5fa4beb421872b","7825da0fed0bd08a466fec72f7c6a18a2abb303d"],"9856095f7afb5a607bf5e65077615ed91273508c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","6939810fba802f65f77bcc41069354917202d36f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4a52b01a73cacbd2d360240e72d64c0ba353618f"]},"commit2Childs":{"3c738d774d160362ecfdc9887a5fa4beb421872b":["403d05f7f8d69b65659157eff1bc1d2717f04c66","7825da0fed0bd08a466fec72f7c6a18a2abb303d","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["6939810fba802f65f77bcc41069354917202d36f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"7825da0fed0bd08a466fec72f7c6a18a2abb303d":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"4a52b01a73cacbd2d360240e72d64c0ba353618f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3c738d774d160362ecfdc9887a5fa4beb421872b","05f4c28bc6a6df30868753f35eb802cbff28ce5c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"05f4c28bc6a6df30868753f35eb802cbff28ce5c":["3c738d774d160362ecfdc9887a5fa4beb421872b"],"6939810fba802f65f77bcc41069354917202d36f":["4a52b01a73cacbd2d360240e72d64c0ba353618f","9856095f7afb5a607bf5e65077615ed91273508c"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9856095f7afb5a607bf5e65077615ed91273508c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}