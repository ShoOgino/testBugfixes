{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Temp40PostingsWriter#startDoc(int,int).mjava","commits":[{"id":"38f154048324ef4d19e56e818d0621cafb4fd453","date":1377246558,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Temp40PostingsWriter#startDoc(int,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // if (DEBUG) System.out.println(\"SPW:   startDoc seg=\" + segment + \" docID=\" + docID + \" tf=\" + termDocFreq + \" freqOut.fp=\" + freqOut.getFilePointer());\n\n    final int delta = docID - lastDocID;\n    \n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (freqOut: \" + freqOut + \")\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength, storeOffsets, lastOffsetLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n    lastDocID = docID;\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      freqOut.writeVInt(delta);\n    } else if (1 == termDocFreq) {\n      freqOut.writeVInt((delta<<1) | 1);\n    } else {\n      freqOut.writeVInt(delta<<1);\n      freqOut.writeVInt(termDocFreq);\n    }\n\n    lastPosition = 0;\n    lastOffset = 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Temp40PostingsWriter#startDoc(int,int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // if (DEBUG) System.out.println(\"SPW:   startDoc seg=\" + segment + \" docID=\" + docID + \" tf=\" + termDocFreq + \" freqOut.fp=\" + freqOut.getFilePointer());\n\n    final int delta = docID - lastDocID;\n    \n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (freqOut: \" + freqOut + \")\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength, storeOffsets, lastOffsetLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n    lastDocID = docID;\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      freqOut.writeVInt(delta);\n    } else if (1 == termDocFreq) {\n      freqOut.writeVInt((delta<<1) | 1);\n    } else {\n      freqOut.writeVInt(delta<<1);\n      freqOut.writeVInt(termDocFreq);\n    }\n\n    lastPosition = 0;\n    lastOffset = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38f154048324ef4d19e56e818d0621cafb4fd453":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["38f154048324ef4d19e56e818d0621cafb4fd453"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"38f154048324ef4d19e56e818d0621cafb4fd453":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38f154048324ef4d19e56e818d0621cafb4fd453","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}