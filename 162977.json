{"path":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#createTree(double[],double[]).mjava","commits":[{"id":"e4fccad460342b1af30cb328cc8297751a218d78","date":1541177339,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#createTree(double[],double[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#createTree(double[],double[]).mjava","sourceNew":"  /**\n   * Creates an edge interval tree from a set of geometry vertices.\n   * @return root node of the tree.\n   */\n  private static Edge createTree(double[] lats, double[] lons) {\n    Edge edges[] = new Edge[lats.length - 1];\n    for (int i = 1; i < lats.length; i++) {\n      double lat1 = lats[i-1];\n      double lon1 = lons[i-1];\n      double lat2 = lats[i];\n      double lon2 = lons[i];\n      edges[i - 1] = new Edge(lat1, lon1, lat2, lon2, Math.min(lat1, lat2), Math.max(lat1, lat2));\n    }\n    // sort the edges then build a balanced tree from them\n    Arrays.sort(edges, (left, right) -> {\n      int ret = Double.compare(left.low, right.low);\n      if (ret == 0) {\n        ret = Double.compare(left.max, right.max);\n      }\n      return ret;\n    });\n    return createTree(edges, 0, edges.length - 1);\n  }\n\n","sourceOld":"  /** \n   * Creates an edge interval tree from a set of polygon vertices.\n   * @return root node of the tree.\n   */\n  private static Edge createTree(double polyLats[], double polyLons[]) {\n    Edge edges[] = new Edge[polyLats.length - 1];\n    for (int i = 1; i < polyLats.length; i++) {\n      double lat1 = polyLats[i-1];\n      double lon1 = polyLons[i-1];\n      double lat2 = polyLats[i];\n      double lon2 = polyLons[i];\n      edges[i - 1] = new Edge(lat1, lon1, lat2, lon2, Math.min(lat1, lat2), Math.max(lat1, lat2));\n    }\n    // sort the edges then build a balanced tree from them\n    Arrays.sort(edges, (left, right) -> {\n      int ret = Double.compare(left.low, right.low);\n      if (ret == 0) {\n        ret = Double.compare(left.max, right.max);\n      }\n      return ret;\n    });\n    return createTree(edges, 0, edges.length - 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","date":1571074565,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#createTree(double[],double[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#createTree(double[],double[]).mjava","sourceNew":"  /**\n   * Creates an edge interval tree from a set of geometry vertices.\n   * @return root node of the tree.\n   */\n  protected static EdgeTree createTree(double[] x, double[] y) {\n    EdgeTree edges[] = new EdgeTree[x.length - 1];\n    for (int i = 1; i < x.length; i++) {\n      double x1 = x[i-1];\n      double y1 = y[i-1];\n      double x2 = x[i];\n      double y2 = y[i];\n      edges[i - 1] = new EdgeTree(x1, y1, x2, y2, Math.min(y1, y2), Math.max(y1, y2));\n    }\n    // sort the edges then build a balanced tree from them\n    Arrays.sort(edges, (left, right) -> {\n      int ret = Double.compare(left.low, right.low);\n      if (ret == 0) {\n        ret = Double.compare(left.max, right.max);\n      }\n      return ret;\n    });\n    return createTree(edges, 0, edges.length - 1);\n  }\n\n","sourceOld":"  /**\n   * Creates an edge interval tree from a set of geometry vertices.\n   * @return root node of the tree.\n   */\n  private static Edge createTree(double[] lats, double[] lons) {\n    Edge edges[] = new Edge[lats.length - 1];\n    for (int i = 1; i < lats.length; i++) {\n      double lat1 = lats[i-1];\n      double lon1 = lons[i-1];\n      double lat2 = lats[i];\n      double lon2 = lons[i];\n      edges[i - 1] = new Edge(lat1, lon1, lat2, lon2, Math.min(lat1, lat2), Math.max(lat1, lat2));\n    }\n    // sort the edges then build a balanced tree from them\n    Arrays.sort(edges, (left, right) -> {\n      int ret = Double.compare(left.low, right.low);\n      if (ret == 0) {\n        ret = Double.compare(left.max, right.max);\n      }\n      return ret;\n    });\n    return createTree(edges, 0, edges.length - 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#createTree(double[],double[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#createTree(double[],double[]).mjava","sourceNew":"  /**\n   * Creates an edge interval tree from a set of geometry vertices.\n   * @return root node of the tree.\n   */\n  protected static EdgeTree createTree(double[] x, double[] y) {\n    EdgeTree edges[] = new EdgeTree[x.length - 1];\n    for (int i = 1; i < x.length; i++) {\n      double x1 = x[i-1];\n      double y1 = y[i-1];\n      double x2 = x[i];\n      double y2 = y[i];\n      edges[i - 1] = new EdgeTree(x1, y1, x2, y2, Math.min(y1, y2), Math.max(y1, y2));\n    }\n    // sort the edges then build a balanced tree from them\n    Arrays.sort(edges, (left, right) -> {\n      int ret = Double.compare(left.low, right.low);\n      if (ret == 0) {\n        ret = Double.compare(left.max, right.max);\n      }\n      return ret;\n    });\n    return createTree(edges, 0, edges.length - 1);\n  }\n\n","sourceOld":"  /**\n   * Creates an edge interval tree from a set of geometry vertices.\n   * @return root node of the tree.\n   */\n  private static Edge createTree(double[] lats, double[] lons) {\n    Edge edges[] = new Edge[lats.length - 1];\n    for (int i = 1; i < lats.length; i++) {\n      double lat1 = lats[i-1];\n      double lon1 = lons[i-1];\n      double lat2 = lats[i];\n      double lon2 = lons[i];\n      edges[i - 1] = new Edge(lat1, lon1, lat2, lon2, Math.min(lat1, lat2), Math.max(lat1, lat2));\n    }\n    // sort the edges then build a balanced tree from them\n    Arrays.sort(edges, (left, right) -> {\n      int ret = Double.compare(left.low, right.low);\n      if (ret == 0) {\n        ret = Double.compare(left.max, right.max);\n      }\n      return ret;\n    });\n    return createTree(edges, 0, edges.length - 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a923e28c9d079048c6993884ec89c44f0380b923","date":1581100153,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#createTree(double[],double[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#createTree(double[],double[]).mjava","sourceNew":"  /**\n   * Creates an edge interval tree from a set of geometry vertices.\n   * @return root node of the tree.\n   */\n  static EdgeTree createTree(double[] x, double[] y) {\n    EdgeTree edges[] = new EdgeTree[x.length - 1];\n    for (int i = 1; i < x.length; i++) {\n      double x1 = x[i-1];\n      double y1 = y[i-1];\n      double x2 = x[i];\n      double y2 = y[i];\n      edges[i - 1] = new EdgeTree(x1, y1, x2, y2, Math.min(y1, y2), Math.max(y1, y2));\n    }\n    // sort the edges then build a balanced tree from them\n    Arrays.sort(edges, (left, right) -> {\n      int ret = Double.compare(left.low, right.low);\n      if (ret == 0) {\n        ret = Double.compare(left.max, right.max);\n      }\n      return ret;\n    });\n    return createTree(edges, 0, edges.length - 1);\n  }\n\n","sourceOld":"  /**\n   * Creates an edge interval tree from a set of geometry vertices.\n   * @return root node of the tree.\n   */\n  protected static EdgeTree createTree(double[] x, double[] y) {\n    EdgeTree edges[] = new EdgeTree[x.length - 1];\n    for (int i = 1; i < x.length; i++) {\n      double x1 = x[i-1];\n      double y1 = y[i-1];\n      double x2 = x[i];\n      double y2 = y[i];\n      edges[i - 1] = new EdgeTree(x1, y1, x2, y2, Math.min(y1, y2), Math.max(y1, y2));\n    }\n    // sort the edges then build a balanced tree from them\n    Arrays.sort(edges, (left, right) -> {\n      int ret = Double.compare(left.low, right.low);\n      if (ret == 0) {\n        ret = Double.compare(left.max, right.max);\n      }\n      return ret;\n    });\n    return createTree(edges, 0, edges.length - 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["e4fccad460342b1af30cb328cc8297751a218d78"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e4fccad460342b1af30cb328cc8297751a218d78":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a923e28c9d079048c6993884ec89c44f0380b923":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a923e28c9d079048c6993884ec89c44f0380b923"],"b0b597c65628ca9e73913a07e81691f8229bae35":["e4fccad460342b1af30cb328cc8297751a218d78","b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"]},"commit2Childs":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["a923e28c9d079048c6993884ec89c44f0380b923","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e4fccad460342b1af30cb328cc8297751a218d78"],"e4fccad460342b1af30cb328cc8297751a218d78":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","b0b597c65628ca9e73913a07e81691f8229bae35"],"a923e28c9d079048c6993884ec89c44f0380b923":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}