{"path":"lucene/grouping/src/java/org/apache/lucene/search/grouping/FirstPassGroupingCollector#buildSortedSet().mjava","commits":[{"id":"20e94e61fe5291647346b70437617e6b6c370408","date":1483783127,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/FirstPassGroupingCollector#buildSortedSet().mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#buildSortedSet().mjava","sourceNew":"  private void buildSortedSet() throws IOException {\n    final Comparator<CollectedSearchGroup<?>> comparator = new Comparator<CollectedSearchGroup<?>>() {\n      @Override\n      public int compare(CollectedSearchGroup<?> o1, CollectedSearchGroup<?> o2) {\n        for (int compIDX = 0;; compIDX++) {\n          FieldComparator<?> fc = comparators[compIDX];\n          final int c = reversed[compIDX] * fc.compare(o1.comparatorSlot, o2.comparatorSlot);\n          if (c != 0) {\n            return c;\n          } else if (compIDX == compIDXEnd) {\n            return o1.topDoc - o2.topDoc;\n          }\n        }\n      }\n    };\n\n    orderedGroups = new TreeSet<>(comparator);\n    orderedGroups.addAll(groupMap.values());\n    assert orderedGroups.size() > 0;\n\n    for (LeafFieldComparator fc : leafComparators) {\n      fc.setBottom(orderedGroups.last().comparatorSlot);\n    }\n  }\n\n","sourceOld":"  private void buildSortedSet() throws IOException {\n    final Comparator<CollectedSearchGroup<?>> comparator = new Comparator<CollectedSearchGroup<?>>() {\n      @Override\n      public int compare(CollectedSearchGroup<?> o1, CollectedSearchGroup<?> o2) {\n        for (int compIDX = 0;; compIDX++) {\n          FieldComparator<?> fc = comparators[compIDX];\n          final int c = reversed[compIDX] * fc.compare(o1.comparatorSlot, o2.comparatorSlot);\n          if (c != 0) {\n            return c;\n          } else if (compIDX == compIDXEnd) {\n            return o1.topDoc - o2.topDoc;\n          }\n        }\n      }\n    };\n\n    orderedGroups = new TreeSet<>(comparator);\n    orderedGroups.addAll(groupMap.values());\n    assert orderedGroups.size() > 0;\n\n    for (LeafFieldComparator fc : leafComparators) {\n      fc.setBottom(orderedGroups.last().comparatorSlot);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/FirstPassGroupingCollector#buildSortedSet().mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#buildSortedSet().mjava","sourceNew":"  private void buildSortedSet() throws IOException {\n    final Comparator<CollectedSearchGroup<?>> comparator = new Comparator<CollectedSearchGroup<?>>() {\n      @Override\n      public int compare(CollectedSearchGroup<?> o1, CollectedSearchGroup<?> o2) {\n        for (int compIDX = 0;; compIDX++) {\n          FieldComparator<?> fc = comparators[compIDX];\n          final int c = reversed[compIDX] * fc.compare(o1.comparatorSlot, o2.comparatorSlot);\n          if (c != 0) {\n            return c;\n          } else if (compIDX == compIDXEnd) {\n            return o1.topDoc - o2.topDoc;\n          }\n        }\n      }\n    };\n\n    orderedGroups = new TreeSet<>(comparator);\n    orderedGroups.addAll(groupMap.values());\n    assert orderedGroups.size() > 0;\n\n    for (LeafFieldComparator fc : leafComparators) {\n      fc.setBottom(orderedGroups.last().comparatorSlot);\n    }\n  }\n\n","sourceOld":"  private void buildSortedSet() throws IOException {\n    final Comparator<CollectedSearchGroup<?>> comparator = new Comparator<CollectedSearchGroup<?>>() {\n      @Override\n      public int compare(CollectedSearchGroup<?> o1, CollectedSearchGroup<?> o2) {\n        for (int compIDX = 0;; compIDX++) {\n          FieldComparator<?> fc = comparators[compIDX];\n          final int c = reversed[compIDX] * fc.compare(o1.comparatorSlot, o2.comparatorSlot);\n          if (c != 0) {\n            return c;\n          } else if (compIDX == compIDXEnd) {\n            return o1.topDoc - o2.topDoc;\n          }\n        }\n      }\n    };\n\n    orderedGroups = new TreeSet<>(comparator);\n    orderedGroups.addAll(groupMap.values());\n    assert orderedGroups.size() > 0;\n\n    for (LeafFieldComparator fc : leafComparators) {\n      fc.setBottom(orderedGroups.last().comparatorSlot);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"20e94e61fe5291647346b70437617e6b6c370408":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","20e94e61fe5291647346b70437617e6b6c370408"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["20e94e61fe5291647346b70437617e6b6c370408"]},"commit2Childs":{"20e94e61fe5291647346b70437617e6b6c370408":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["20e94e61fe5291647346b70437617e6b6c370408","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}