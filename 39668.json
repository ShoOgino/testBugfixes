{"path":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#getRfFromResponseShouldNotCloseTheInputStream().mjava","commits":[{"id":"2fd332226a93e244bd33f35c03128eb09cbf3c88","date":1570651010,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#getRfFromResponseShouldNotCloseTheInputStream().mjava","pathOld":"/dev/null","sourceNew":"  public void getRfFromResponseShouldNotCloseTheInputStream() {\n    UpdateRequest dbqReq = new UpdateRequest();\n    dbqReq.deleteByQuery(\"*:*\");\n    SolrCmdDistributor.Req req = new SolrCmdDistributor.Req(null, new StdNode(null, \"collection1\", \"shard1\", 1), dbqReq, true);\n    AtomicBoolean isClosed = new AtomicBoolean(false);\n    ByteArrayInputStream is = new ByteArrayInputStream(new byte[100]) {\n      @Override\n      public void close() throws IOException {\n        isClosed.set(true);\n        super.close();\n      }\n    };\n    req.trackRequestResult(null, is, true);\n    assertFalse(\"Underlying stream should not be closed!\", isClosed.get());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#getRfFromResponseShouldNotCloseTheInputStream().mjava","pathOld":"/dev/null","sourceNew":"  public void getRfFromResponseShouldNotCloseTheInputStream() {\n    UpdateRequest dbqReq = new UpdateRequest();\n    dbqReq.deleteByQuery(\"*:*\");\n    SolrCmdDistributor.Req req = new SolrCmdDistributor.Req(null, new StdNode(null, \"collection1\", \"shard1\", 1), dbqReq, true);\n    AtomicBoolean isClosed = new AtomicBoolean(false);\n    ByteArrayInputStream is = new ByteArrayInputStream(new byte[100]) {\n      @Override\n      public void close() throws IOException {\n        isClosed.set(true);\n        super.close();\n      }\n    };\n    req.trackRequestResult(null, is, true);\n    assertFalse(\"Underlying stream should not be closed!\", isClosed.get());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2fd332226a93e244bd33f35c03128eb09cbf3c88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2fd332226a93e244bd33f35c03128eb09cbf3c88"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2fd332226a93e244bd33f35c03128eb09cbf3c88"]},"commit2Childs":{"2fd332226a93e244bd33f35c03128eb09cbf3c88":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2fd332226a93e244bd33f35c03128eb09cbf3c88","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}