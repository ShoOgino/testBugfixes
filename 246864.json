{"path":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleAssertionsRequired#apply(Statement,Description).mjava","commits":[{"id":"b23c4ca9fc0fb3cbb48860e2c33a813c0e05b4db","date":1337118447,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleAssertionsRequired#apply(Statement,Description).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Statement apply(final Statement base, final Description description) {\n    return new Statement() {\n      @Override\n      public void evaluate() throws Throwable {\n        validate(description.getTestClass());\n        base.evaluate();\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c8719b2c0b382be11f5b193b6fc14bc310e906b","date":1344770591,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleAssertionsRequired#apply(Statement,Description).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleAssertionsRequired#apply(Statement,Description).mjava","sourceNew":"  @Override\n  public Statement apply(final Statement base, final Description description) {\n    return new Statement() {\n      @Override\n      public void evaluate() throws Throwable {\n        try {\n          assert false;\n          throw new Exception(\"Test class requires assertions, enable assertions globally (-ea) or for Solr/Lucene subpackages only.\");\n        } catch (AssertionError e) {\n          // Ok, enabled.\n        }\n\n        base.evaluate();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Statement apply(final Statement base, final Description description) {\n    return new Statement() {\n      @Override\n      public void evaluate() throws Throwable {\n        validate(description.getTestClass());\n        base.evaluate();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleAssertionsRequired#apply(Statement,Description).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleAssertionsRequired#apply(Statement,Description).mjava","sourceNew":"  @Override\n  public Statement apply(final Statement base, final Description description) {\n    return new Statement() {\n      @Override\n      public void evaluate() throws Throwable {\n        try {\n          assert false;\n          throw new Exception(\"Test class requires assertions, enable assertions globally (-ea) or for Solr/Lucene subpackages only.\");\n        } catch (AssertionError e) {\n          // Ok, enabled.\n        }\n\n        base.evaluate();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Statement apply(final Statement base, final Description description) {\n    return new Statement() {\n      @Override\n      public void evaluate() throws Throwable {\n        validate(description.getTestClass());\n        base.evaluate();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleAssertionsRequired#apply(Statement,Description).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleAssertionsRequired#apply(Statement,Description).mjava","sourceNew":"  @Override\n  public Statement apply(final Statement base, final Description description) {\n    return new Statement() {\n      @Override\n      public void evaluate() throws Throwable {\n        try {\n          assert false;\n          throw new Exception(\"Test class requires assertions, enable assertions globally (-ea) or for Solr/Lucene subpackages only.\");\n        } catch (AssertionError e) {\n          // Ok, enabled.\n        }\n\n        base.evaluate();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Statement apply(final Statement base, final Description description) {\n    return new Statement() {\n      @Override\n      public void evaluate() throws Throwable {\n        validate(description.getTestClass());\n        base.evaluate();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ddfd554c99ec484e2db2fd2881621685a26a3ed","date":1347438032,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleAssertionsRequired#apply(Statement,Description).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleAssertionsRequired#apply(Statement,Description).mjava","sourceNew":"  @Override\n  public Statement apply(final Statement base, final Description description) {\n    return new Statement() {\n      @Override\n      public void evaluate() throws Throwable {\n        try {\n          assert false;\n          String msg = \"Test class requires enabled assertions, enable globally (-ea)\" +\n          \t\t\" or for Solr/Lucene subpackages only: \" + description.getClassName();\n          System.err.println(msg);\n          throw new Exception(msg);\n        } catch (AssertionError e) {\n          // Ok, enabled.\n        }\n\n        base.evaluate();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Statement apply(final Statement base, final Description description) {\n    return new Statement() {\n      @Override\n      public void evaluate() throws Throwable {\n        try {\n          assert false;\n          throw new Exception(\"Test class requires assertions, enable assertions globally (-ea) or for Solr/Lucene subpackages only.\");\n        } catch (AssertionError e) {\n          // Ok, enabled.\n        }\n\n        base.evaluate();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleAssertionsRequired#apply(Statement,Description).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleAssertionsRequired#apply(Statement,Description).mjava","sourceNew":"  @Override\n  public Statement apply(final Statement base, final Description description) {\n    return new Statement() {\n      @Override\n      public void evaluate() throws Throwable {\n        try {\n          assert false;\n          String msg = \"Test class requires enabled assertions, enable globally (-ea)\" +\n              \" or for Solr/Lucene subpackages only: \" + description.getClassName();\n          System.err.println(msg);\n          throw new Exception(msg);\n        } catch (AssertionError e) {\n          // Ok, enabled.\n        }\n\n        base.evaluate();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Statement apply(final Statement base, final Description description) {\n    return new Statement() {\n      @Override\n      public void evaluate() throws Throwable {\n        try {\n          assert false;\n          String msg = \"Test class requires enabled assertions, enable globally (-ea)\" +\n          \t\t\" or for Solr/Lucene subpackages only: \" + description.getClassName();\n          System.err.println(msg);\n          throw new Exception(msg);\n        } catch (AssertionError e) {\n          // Ok, enabled.\n        }\n\n        base.evaluate();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc41b743423981e7ec17a024ce7e107096e472fe","date":1349975327,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleAssertionsRequired#apply(Statement,Description).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleAssertionsRequired#apply(Statement,Description).mjava","sourceNew":"  @Override\n  public Statement apply(final Statement base, final Description description) {\n    return new Statement() {\n      @Override\n      public void evaluate() throws Throwable {\n        try {\n          assert false;\n          String msg = \"Test class requires enabled assertions, enable globally (-ea)\" +\n              \" or for Solr/Lucene subpackages only: \" + description.getClassName();\n          System.err.println(msg);\n          // nocommit put back:\n          //throw new Exception(msg);\n        } catch (AssertionError e) {\n          // Ok, enabled.\n        }\n\n        base.evaluate();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Statement apply(final Statement base, final Description description) {\n    return new Statement() {\n      @Override\n      public void evaluate() throws Throwable {\n        try {\n          assert false;\n          String msg = \"Test class requires enabled assertions, enable globally (-ea)\" +\n              \" or for Solr/Lucene subpackages only: \" + description.getClassName();\n          System.err.println(msg);\n          throw new Exception(msg);\n        } catch (AssertionError e) {\n          // Ok, enabled.\n        }\n\n        base.evaluate();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"212b08d3e511c7623bf4c1af7a834f0d0bee0dc8","date":1350576194,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleAssertionsRequired#apply(Statement,Description).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleAssertionsRequired#apply(Statement,Description).mjava","sourceNew":"  @Override\n  public Statement apply(final Statement base, final Description description) {\n    return new Statement() {\n      @Override\n      public void evaluate() throws Throwable {\n        try {\n          assert false;\n          String msg = \"Test class requires enabled assertions, enable globally (-ea)\" +\n              \" or for Solr/Lucene subpackages only: \" + description.getClassName();\n          System.err.println(msg);\n          throw new Exception(msg);\n        } catch (AssertionError e) {\n          // Ok, enabled.\n        }\n\n        base.evaluate();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Statement apply(final Statement base, final Description description) {\n    return new Statement() {\n      @Override\n      public void evaluate() throws Throwable {\n        try {\n          assert false;\n          String msg = \"Test class requires enabled assertions, enable globally (-ea)\" +\n              \" or for Solr/Lucene subpackages only: \" + description.getClassName();\n          System.err.println(msg);\n          // nocommit put back:\n          //throw new Exception(msg);\n        } catch (AssertionError e) {\n          // Ok, enabled.\n        }\n\n        base.evaluate();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9cdbc2cadeaf282528fe4d1c06e9f8bee38ccec4","date":1414017220,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleAssertionsRequired#apply(Statement,Description).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleAssertionsRequired#apply(Statement,Description).mjava","sourceNew":"  @Override\n  public Statement apply(final Statement base, final Description description) {\n    return new Statement() {\n      @Override\n      public void evaluate() throws Throwable {\n        try {\n          // Make sure -ea matches -Dtests.asserts, to catch accidental mis-use:\n          if (LuceneTestCase.assertsAreEnabled != LuceneTestCase.TEST_ASSERTS_ENABLED) {\n            String msg = \"Assertions mismatch: \";\n            if (LuceneTestCase.assertsAreEnabled) {\n              msg += \"-ea was specified\";\n            } else {\n              msg += \"-ea was not specified\";\n            }\n            if (LuceneTestCase.TEST_ASSERTS_ENABLED) {\n              msg += \" but -Dtests.asserts=true\";\n            } else  {\n              msg += \" but -Dtests.asserts=false\";\n            }\n            System.err.println(msg);\n            throw new Exception(msg);\n          }\n        } catch (AssertionError e) {\n          // Ok, enabled.\n        }\n\n        base.evaluate();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Statement apply(final Statement base, final Description description) {\n    return new Statement() {\n      @Override\n      public void evaluate() throws Throwable {\n        try {\n          assert false;\n          String msg = \"Test class requires enabled assertions, enable globally (-ea)\" +\n              \" or for Solr/Lucene subpackages only: \" + description.getClassName();\n          System.err.println(msg);\n          throw new Exception(msg);\n        } catch (AssertionError e) {\n          // Ok, enabled.\n        }\n\n        base.evaluate();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b23c4ca9fc0fb3cbb48860e2c33a813c0e05b4db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9cdbc2cadeaf282528fe4d1c06e9f8bee38ccec4":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["b23c4ca9fc0fb3cbb48860e2c33a813c0e05b4db","1c8719b2c0b382be11f5b193b6fc14bc310e906b"],"cc41b743423981e7ec17a024ce7e107096e472fe":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ddfd554c99ec484e2db2fd2881621685a26a3ed":["1c8719b2c0b382be11f5b193b6fc14bc310e906b"],"212b08d3e511c7623bf4c1af7a834f0d0bee0dc8":["cc41b743423981e7ec17a024ce7e107096e472fe"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["b23c4ca9fc0fb3cbb48860e2c33a813c0e05b4db","1c8719b2c0b382be11f5b193b6fc14bc310e906b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9cdbc2cadeaf282528fe4d1c06e9f8bee38ccec4"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["4ddfd554c99ec484e2db2fd2881621685a26a3ed"],"1c8719b2c0b382be11f5b193b6fc14bc310e906b":["b23c4ca9fc0fb3cbb48860e2c33a813c0e05b4db"]},"commit2Childs":{"b23c4ca9fc0fb3cbb48860e2c33a813c0e05b4db":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","1c8719b2c0b382be11f5b193b6fc14bc310e906b"],"9cdbc2cadeaf282528fe4d1c06e9f8bee38ccec4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"cc41b743423981e7ec17a024ce7e107096e472fe":["212b08d3e511c7623bf4c1af7a834f0d0bee0dc8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b23c4ca9fc0fb3cbb48860e2c33a813c0e05b4db"],"4ddfd554c99ec484e2db2fd2881621685a26a3ed":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"212b08d3e511c7623bf4c1af7a834f0d0bee0dc8":[],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["9cdbc2cadeaf282528fe4d1c06e9f8bee38ccec4","cc41b743423981e7ec17a024ce7e107096e472fe"],"1c8719b2c0b382be11f5b193b6fc14bc310e906b":["c7869f64c874ebf7f317d22c00baf2b6857797a6","4ddfd554c99ec484e2db2fd2881621685a26a3ed","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","212b08d3e511c7623bf4c1af7a834f0d0bee0dc8","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}