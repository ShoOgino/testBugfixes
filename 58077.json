{"path":"solr/core/src/test/org/apache/solr/cloud/PackageManagerCLITest#testPackageManager().mjava","commits":[{"id":"120bc33d5cbe83eca2e5fce597baf4fef208d579","date":1573735895,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/PackageManagerCLITest#testPackageManager().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @SuppressForbidden(reason = \"Need to turn off logging, and SLF4J doesn't seem to provide for a way.\")\n  public void testPackageManager() throws Exception {\n    PackageTool tool = new PackageTool();\n    \n    // Enable the logger for this test. Need to do this since the tool disables logger.\n    Configurator.setRootLevel(Level.INFO);\n\n    String solrUrl = cluster.getJettySolrRunner(0).getBaseUrl().toString();\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-installed\"});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"add-repo\", \"fullstory\",  \"http://localhost:\" + repositoryServer.getPort()});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-available\"});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"install\", \"question-answer:1.0.0\"});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-installed\"});\n\n    CollectionAdminRequest.createCollection(\"abc\", \"conf1\", 1, 1).process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"def\", \"conf2\", 1, 1).process(cluster.getSolrClient());\n\n    String rhPath = \"/mypath2\";\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-deployed\", \"question-answer\"});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"deploy\", \"question-answer\", \"-y\", \"-collections\", \"abc\", \"-p\", \"RH-HANDLER-PATH=\" + rhPath});\n    assertPackageVersion(\"abc\", \"question-answer\", \"1.0.0\", rhPath, \"1.0.0\");\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-deployed\", \"question-answer\"});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-deployed\", \"-c\", \"abc\"});\n\n    // Should we test the \"auto-update to latest\" functionality or the default explicit deploy functionality\n    boolean autoUpdateToLatest = random().nextBoolean();\n\n    if (autoUpdateToLatest) {\n      log.info(\"Testing auto-update to latest installed\");\n\n      // This command pegs the version to the latest available\n      run(tool, new String[] {\"-solrUrl\", solrUrl, \"deploy\", \"question-answer:latest\", \"-y\", \"-collections\", \"abc\"});\n      assertPackageVersion(\"abc\", \"question-answer\", \"$LATEST\", rhPath, \"1.0.0\");\n\n      run(tool, new String[] {\"-solrUrl\", solrUrl, \"install\", \"question-answer\"});\n      assertPackageVersion(\"abc\", \"question-answer\", \"$LATEST\", rhPath, \"1.1.0\");\n    } else {\n      log.info(\"Testing explicit deployment to a different/newer version\");\n\n      run(tool, new String[] {\"-solrUrl\", solrUrl, \"install\", \"question-answer\"});\n      assertPackageVersion(\"abc\", \"question-answer\", \"1.0.0\", rhPath, \"1.0.0\");\n\n      if (random().nextBoolean()) { // even if parameters are not passed in, they should be picked up from previous deployment\n        run(tool, new String[] {\"-solrUrl\", solrUrl, \"deploy\", \"--update\", \"-y\", \"question-answer\", \"-collections\", \"abc\", \"-p\", \"RH-HANDLER-PATH=\" + rhPath});\n      } else {\n        run(tool, new String[] {\"-solrUrl\", solrUrl, \"deploy\", \"--update\", \"-y\", \"question-answer\", \"-collections\", \"abc\"});\n      }\n      assertPackageVersion(\"abc\", \"question-answer\", \"1.1.0\", rhPath, \"1.1.0\");\n    }\n    \n    log.info(\"Running undeploy...\");\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"undeploy\", \"question-answer\", \"-collections\", \"abc\"});\n    \n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-deployed\", \"question-answer\"});\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5dbb246b964f2522982dffb22ac8f2a95a21d309","date":1573950962,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/PackageManagerCLITest#testPackageManager().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/PackageManagerCLITest#testPackageManager().mjava","sourceNew":"  @Test\n  @SuppressForbidden(reason = \"Need to turn off logging, and SLF4J doesn't seem to provide for a way.\")\n  @Ignore\n  public void testPackageManager() throws Exception {\n    PackageTool tool = new PackageTool();\n    \n    // Enable the logger for this test. Need to do this since the tool disables logger.\n    Configurator.setRootLevel(Level.INFO);\n\n    String solrUrl = cluster.getJettySolrRunner(0).getBaseUrl().toString();\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-installed\"});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"add-repo\", \"fullstory\",  \"http://localhost:\" + repositoryServer.getPort()});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-available\"});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"install\", \"question-answer:1.0.0\"});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-installed\"});\n\n    CollectionAdminRequest.createCollection(\"abc\", \"conf1\", 1, 1).process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"def\", \"conf2\", 1, 1).process(cluster.getSolrClient());\n\n    String rhPath = \"/mypath2\";\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-deployed\", \"question-answer\"});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"deploy\", \"question-answer\", \"-y\", \"-collections\", \"abc\", \"-p\", \"RH-HANDLER-PATH=\" + rhPath});\n    assertPackageVersion(\"abc\", \"question-answer\", \"1.0.0\", rhPath, \"1.0.0\");\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-deployed\", \"question-answer\"});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-deployed\", \"-c\", \"abc\"});\n\n    // Should we test the \"auto-update to latest\" functionality or the default explicit deploy functionality\n    boolean autoUpdateToLatest = random().nextBoolean();\n\n    if (autoUpdateToLatest) {\n      log.info(\"Testing auto-update to latest installed\");\n\n      // This command pegs the version to the latest available\n      run(tool, new String[] {\"-solrUrl\", solrUrl, \"deploy\", \"question-answer:latest\", \"-y\", \"-collections\", \"abc\"});\n      assertPackageVersion(\"abc\", \"question-answer\", \"$LATEST\", rhPath, \"1.0.0\");\n\n      run(tool, new String[] {\"-solrUrl\", solrUrl, \"install\", \"question-answer\"});\n      assertPackageVersion(\"abc\", \"question-answer\", \"$LATEST\", rhPath, \"1.1.0\");\n    } else {\n      log.info(\"Testing explicit deployment to a different/newer version\");\n\n      run(tool, new String[] {\"-solrUrl\", solrUrl, \"install\", \"question-answer\"});\n      assertPackageVersion(\"abc\", \"question-answer\", \"1.0.0\", rhPath, \"1.0.0\");\n\n      if (random().nextBoolean()) { // even if parameters are not passed in, they should be picked up from previous deployment\n        run(tool, new String[] {\"-solrUrl\", solrUrl, \"deploy\", \"--update\", \"-y\", \"question-answer\", \"-collections\", \"abc\", \"-p\", \"RH-HANDLER-PATH=\" + rhPath});\n      } else {\n        run(tool, new String[] {\"-solrUrl\", solrUrl, \"deploy\", \"--update\", \"-y\", \"question-answer\", \"-collections\", \"abc\"});\n      }\n      assertPackageVersion(\"abc\", \"question-answer\", \"1.1.0\", rhPath, \"1.1.0\");\n    }\n    \n    log.info(\"Running undeploy...\");\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"undeploy\", \"question-answer\", \"-collections\", \"abc\"});\n    \n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-deployed\", \"question-answer\"});\n\n  }\n\n","sourceOld":"  @Test\n  @SuppressForbidden(reason = \"Need to turn off logging, and SLF4J doesn't seem to provide for a way.\")\n  public void testPackageManager() throws Exception {\n    PackageTool tool = new PackageTool();\n    \n    // Enable the logger for this test. Need to do this since the tool disables logger.\n    Configurator.setRootLevel(Level.INFO);\n\n    String solrUrl = cluster.getJettySolrRunner(0).getBaseUrl().toString();\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-installed\"});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"add-repo\", \"fullstory\",  \"http://localhost:\" + repositoryServer.getPort()});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-available\"});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"install\", \"question-answer:1.0.0\"});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-installed\"});\n\n    CollectionAdminRequest.createCollection(\"abc\", \"conf1\", 1, 1).process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"def\", \"conf2\", 1, 1).process(cluster.getSolrClient());\n\n    String rhPath = \"/mypath2\";\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-deployed\", \"question-answer\"});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"deploy\", \"question-answer\", \"-y\", \"-collections\", \"abc\", \"-p\", \"RH-HANDLER-PATH=\" + rhPath});\n    assertPackageVersion(\"abc\", \"question-answer\", \"1.0.0\", rhPath, \"1.0.0\");\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-deployed\", \"question-answer\"});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-deployed\", \"-c\", \"abc\"});\n\n    // Should we test the \"auto-update to latest\" functionality or the default explicit deploy functionality\n    boolean autoUpdateToLatest = random().nextBoolean();\n\n    if (autoUpdateToLatest) {\n      log.info(\"Testing auto-update to latest installed\");\n\n      // This command pegs the version to the latest available\n      run(tool, new String[] {\"-solrUrl\", solrUrl, \"deploy\", \"question-answer:latest\", \"-y\", \"-collections\", \"abc\"});\n      assertPackageVersion(\"abc\", \"question-answer\", \"$LATEST\", rhPath, \"1.0.0\");\n\n      run(tool, new String[] {\"-solrUrl\", solrUrl, \"install\", \"question-answer\"});\n      assertPackageVersion(\"abc\", \"question-answer\", \"$LATEST\", rhPath, \"1.1.0\");\n    } else {\n      log.info(\"Testing explicit deployment to a different/newer version\");\n\n      run(tool, new String[] {\"-solrUrl\", solrUrl, \"install\", \"question-answer\"});\n      assertPackageVersion(\"abc\", \"question-answer\", \"1.0.0\", rhPath, \"1.0.0\");\n\n      if (random().nextBoolean()) { // even if parameters are not passed in, they should be picked up from previous deployment\n        run(tool, new String[] {\"-solrUrl\", solrUrl, \"deploy\", \"--update\", \"-y\", \"question-answer\", \"-collections\", \"abc\", \"-p\", \"RH-HANDLER-PATH=\" + rhPath});\n      } else {\n        run(tool, new String[] {\"-solrUrl\", solrUrl, \"deploy\", \"--update\", \"-y\", \"question-answer\", \"-collections\", \"abc\"});\n      }\n      assertPackageVersion(\"abc\", \"question-answer\", \"1.1.0\", rhPath, \"1.1.0\");\n    }\n    \n    log.info(\"Running undeploy...\");\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"undeploy\", \"question-answer\", \"-collections\", \"abc\"});\n    \n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-deployed\", \"question-answer\"});\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"215a3569e5c9b0005e2e489967978f7bd6db2af8","date":1574029800,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/PackageManagerCLITest#testPackageManager().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/PackageManagerCLITest#testPackageManager().mjava","sourceNew":"  @Test\n  @SuppressForbidden(reason = \"Need to turn off logging, and SLF4J doesn't seem to provide for a way.\")\n  public void testPackageManager() throws Exception {\n    PackageTool tool = new PackageTool();\n    \n    // Enable the logger for this test. Need to do this since the tool disables logger.\n    Configurator.setRootLevel(Level.INFO);\n\n    String solrUrl = cluster.getJettySolrRunner(0).getBaseUrl().toString();\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-installed\"});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"add-repo\", \"fullstory\",  \"http://localhost:\" + repositoryServer.getPort()});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-available\"});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"install\", \"question-answer:1.0.0\"});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-installed\"});\n\n    CollectionAdminRequest.createCollection(\"abc\", \"conf1\", 1, 1).process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"def\", \"conf2\", 1, 1).process(cluster.getSolrClient());\n\n    String rhPath = \"/mypath2\";\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-deployed\", \"question-answer\"});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"deploy\", \"question-answer\", \"-y\", \"-collections\", \"abc\", \"-p\", \"RH-HANDLER-PATH=\" + rhPath});\n    assertPackageVersion(\"abc\", \"question-answer\", \"1.0.0\", rhPath, \"1.0.0\");\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-deployed\", \"question-answer\"});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-deployed\", \"-c\", \"abc\"});\n\n    // Should we test the \"auto-update to latest\" functionality or the default explicit deploy functionality\n    boolean autoUpdateToLatest = random().nextBoolean();\n\n    if (autoUpdateToLatest) {\n      log.info(\"Testing auto-update to latest installed\");\n\n      // This command pegs the version to the latest available\n      run(tool, new String[] {\"-solrUrl\", solrUrl, \"deploy\", \"question-answer:latest\", \"-y\", \"-collections\", \"abc\"});\n      assertPackageVersion(\"abc\", \"question-answer\", \"$LATEST\", rhPath, \"1.0.0\");\n\n      run(tool, new String[] {\"-solrUrl\", solrUrl, \"install\", \"question-answer\"});\n      assertPackageVersion(\"abc\", \"question-answer\", \"$LATEST\", rhPath, \"1.1.0\");\n    } else {\n      log.info(\"Testing explicit deployment to a different/newer version\");\n\n      run(tool, new String[] {\"-solrUrl\", solrUrl, \"install\", \"question-answer\"});\n      assertPackageVersion(\"abc\", \"question-answer\", \"1.0.0\", rhPath, \"1.0.0\");\n\n      if (random().nextBoolean()) { // even if parameters are not passed in, they should be picked up from previous deployment\n        run(tool, new String[] {\"-solrUrl\", solrUrl, \"deploy\", \"--update\", \"-y\", \"question-answer\", \"-collections\", \"abc\", \"-p\", \"RH-HANDLER-PATH=\" + rhPath});\n      } else {\n        run(tool, new String[] {\"-solrUrl\", solrUrl, \"deploy\", \"--update\", \"-y\", \"question-answer\", \"-collections\", \"abc\"});\n      }\n      assertPackageVersion(\"abc\", \"question-answer\", \"1.1.0\", rhPath, \"1.1.0\");\n    }\n    \n    log.info(\"Running undeploy...\");\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"undeploy\", \"question-answer\", \"-collections\", \"abc\"});\n    \n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-deployed\", \"question-answer\"});\n\n  }\n\n","sourceOld":"  @Test\n  @SuppressForbidden(reason = \"Need to turn off logging, and SLF4J doesn't seem to provide for a way.\")\n  @Ignore\n  public void testPackageManager() throws Exception {\n    PackageTool tool = new PackageTool();\n    \n    // Enable the logger for this test. Need to do this since the tool disables logger.\n    Configurator.setRootLevel(Level.INFO);\n\n    String solrUrl = cluster.getJettySolrRunner(0).getBaseUrl().toString();\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-installed\"});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"add-repo\", \"fullstory\",  \"http://localhost:\" + repositoryServer.getPort()});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-available\"});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"install\", \"question-answer:1.0.0\"});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-installed\"});\n\n    CollectionAdminRequest.createCollection(\"abc\", \"conf1\", 1, 1).process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"def\", \"conf2\", 1, 1).process(cluster.getSolrClient());\n\n    String rhPath = \"/mypath2\";\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-deployed\", \"question-answer\"});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"deploy\", \"question-answer\", \"-y\", \"-collections\", \"abc\", \"-p\", \"RH-HANDLER-PATH=\" + rhPath});\n    assertPackageVersion(\"abc\", \"question-answer\", \"1.0.0\", rhPath, \"1.0.0\");\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-deployed\", \"question-answer\"});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-deployed\", \"-c\", \"abc\"});\n\n    // Should we test the \"auto-update to latest\" functionality or the default explicit deploy functionality\n    boolean autoUpdateToLatest = random().nextBoolean();\n\n    if (autoUpdateToLatest) {\n      log.info(\"Testing auto-update to latest installed\");\n\n      // This command pegs the version to the latest available\n      run(tool, new String[] {\"-solrUrl\", solrUrl, \"deploy\", \"question-answer:latest\", \"-y\", \"-collections\", \"abc\"});\n      assertPackageVersion(\"abc\", \"question-answer\", \"$LATEST\", rhPath, \"1.0.0\");\n\n      run(tool, new String[] {\"-solrUrl\", solrUrl, \"install\", \"question-answer\"});\n      assertPackageVersion(\"abc\", \"question-answer\", \"$LATEST\", rhPath, \"1.1.0\");\n    } else {\n      log.info(\"Testing explicit deployment to a different/newer version\");\n\n      run(tool, new String[] {\"-solrUrl\", solrUrl, \"install\", \"question-answer\"});\n      assertPackageVersion(\"abc\", \"question-answer\", \"1.0.0\", rhPath, \"1.0.0\");\n\n      if (random().nextBoolean()) { // even if parameters are not passed in, they should be picked up from previous deployment\n        run(tool, new String[] {\"-solrUrl\", solrUrl, \"deploy\", \"--update\", \"-y\", \"question-answer\", \"-collections\", \"abc\", \"-p\", \"RH-HANDLER-PATH=\" + rhPath});\n      } else {\n        run(tool, new String[] {\"-solrUrl\", solrUrl, \"deploy\", \"--update\", \"-y\", \"question-answer\", \"-collections\", \"abc\"});\n      }\n      assertPackageVersion(\"abc\", \"question-answer\", \"1.1.0\", rhPath, \"1.1.0\");\n    }\n    \n    log.info(\"Running undeploy...\");\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"undeploy\", \"question-answer\", \"-collections\", \"abc\"});\n    \n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-deployed\", \"question-answer\"});\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62d55718cd611235e975fa73a6bdf263fbd58859","date":1576386842,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/PackageManagerCLITest#testPackageManager().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/PackageManagerCLITest#testPackageManager().mjava","sourceNew":"  @Test\n  public void testPackageManager() throws Exception {\n    PackageTool tool = new PackageTool();\n    \n    String solrUrl = cluster.getJettySolrRunner(0).getBaseUrl().toString();\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-installed\"});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"add-repo\", \"fullstory\",  \"http://localhost:\" + repositoryServer.getPort()});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-available\"});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"install\", \"question-answer:1.0.0\"});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-installed\"});\n\n    CollectionAdminRequest.createCollection(\"abc\", \"conf1\", 1, 1).process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"def\", \"conf2\", 1, 1).process(cluster.getSolrClient());\n\n    String rhPath = \"/mypath2\";\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-deployed\", \"question-answer\"});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"deploy\", \"question-answer\", \"-y\", \"-collections\", \"abc\", \"-p\", \"RH-HANDLER-PATH=\" + rhPath});\n    assertPackageVersion(\"abc\", \"question-answer\", \"1.0.0\", rhPath, \"1.0.0\");\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-deployed\", \"question-answer\"});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-deployed\", \"-c\", \"abc\"});\n\n    // Should we test the \"auto-update to latest\" functionality or the default explicit deploy functionality\n    boolean autoUpdateToLatest = random().nextBoolean();\n\n    if (autoUpdateToLatest) {\n      log.info(\"Testing auto-update to latest installed\");\n\n      // This command pegs the version to the latest available\n      run(tool, new String[] {\"-solrUrl\", solrUrl, \"deploy\", \"question-answer:latest\", \"-y\", \"-collections\", \"abc\"});\n      assertPackageVersion(\"abc\", \"question-answer\", \"$LATEST\", rhPath, \"1.0.0\");\n\n      run(tool, new String[] {\"-solrUrl\", solrUrl, \"install\", \"question-answer\"});\n      assertPackageVersion(\"abc\", \"question-answer\", \"$LATEST\", rhPath, \"1.1.0\");\n    } else {\n      log.info(\"Testing explicit deployment to a different/newer version\");\n\n      run(tool, new String[] {\"-solrUrl\", solrUrl, \"install\", \"question-answer\"});\n      assertPackageVersion(\"abc\", \"question-answer\", \"1.0.0\", rhPath, \"1.0.0\");\n\n      if (random().nextBoolean()) { // even if parameters are not passed in, they should be picked up from previous deployment\n        run(tool, new String[] {\"-solrUrl\", solrUrl, \"deploy\", \"--update\", \"-y\", \"question-answer\", \"-collections\", \"abc\", \"-p\", \"RH-HANDLER-PATH=\" + rhPath});\n      } else {\n        run(tool, new String[] {\"-solrUrl\", solrUrl, \"deploy\", \"--update\", \"-y\", \"question-answer\", \"-collections\", \"abc\"});\n      }\n      assertPackageVersion(\"abc\", \"question-answer\", \"1.1.0\", rhPath, \"1.1.0\");\n    }\n    \n    log.info(\"Running undeploy...\");\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"undeploy\", \"question-answer\", \"-collections\", \"abc\"});\n    \n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-deployed\", \"question-answer\"});\n\n  }\n\n","sourceOld":"  @Test\n  @SuppressForbidden(reason = \"Need to turn off logging, and SLF4J doesn't seem to provide for a way.\")\n  public void testPackageManager() throws Exception {\n    PackageTool tool = new PackageTool();\n    \n    // Enable the logger for this test. Need to do this since the tool disables logger.\n    Configurator.setRootLevel(Level.INFO);\n\n    String solrUrl = cluster.getJettySolrRunner(0).getBaseUrl().toString();\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-installed\"});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"add-repo\", \"fullstory\",  \"http://localhost:\" + repositoryServer.getPort()});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-available\"});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"install\", \"question-answer:1.0.0\"});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-installed\"});\n\n    CollectionAdminRequest.createCollection(\"abc\", \"conf1\", 1, 1).process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"def\", \"conf2\", 1, 1).process(cluster.getSolrClient());\n\n    String rhPath = \"/mypath2\";\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-deployed\", \"question-answer\"});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"deploy\", \"question-answer\", \"-y\", \"-collections\", \"abc\", \"-p\", \"RH-HANDLER-PATH=\" + rhPath});\n    assertPackageVersion(\"abc\", \"question-answer\", \"1.0.0\", rhPath, \"1.0.0\");\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-deployed\", \"question-answer\"});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-deployed\", \"-c\", \"abc\"});\n\n    // Should we test the \"auto-update to latest\" functionality or the default explicit deploy functionality\n    boolean autoUpdateToLatest = random().nextBoolean();\n\n    if (autoUpdateToLatest) {\n      log.info(\"Testing auto-update to latest installed\");\n\n      // This command pegs the version to the latest available\n      run(tool, new String[] {\"-solrUrl\", solrUrl, \"deploy\", \"question-answer:latest\", \"-y\", \"-collections\", \"abc\"});\n      assertPackageVersion(\"abc\", \"question-answer\", \"$LATEST\", rhPath, \"1.0.0\");\n\n      run(tool, new String[] {\"-solrUrl\", solrUrl, \"install\", \"question-answer\"});\n      assertPackageVersion(\"abc\", \"question-answer\", \"$LATEST\", rhPath, \"1.1.0\");\n    } else {\n      log.info(\"Testing explicit deployment to a different/newer version\");\n\n      run(tool, new String[] {\"-solrUrl\", solrUrl, \"install\", \"question-answer\"});\n      assertPackageVersion(\"abc\", \"question-answer\", \"1.0.0\", rhPath, \"1.0.0\");\n\n      if (random().nextBoolean()) { // even if parameters are not passed in, they should be picked up from previous deployment\n        run(tool, new String[] {\"-solrUrl\", solrUrl, \"deploy\", \"--update\", \"-y\", \"question-answer\", \"-collections\", \"abc\", \"-p\", \"RH-HANDLER-PATH=\" + rhPath});\n      } else {\n        run(tool, new String[] {\"-solrUrl\", solrUrl, \"deploy\", \"--update\", \"-y\", \"question-answer\", \"-collections\", \"abc\"});\n      }\n      assertPackageVersion(\"abc\", \"question-answer\", \"1.1.0\", rhPath, \"1.1.0\");\n    }\n    \n    log.info(\"Running undeploy...\");\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"undeploy\", \"question-answer\", \"-collections\", \"abc\"});\n    \n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-deployed\", \"question-answer\"});\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06595b0c22c7d3075c4104d3820cccf95d9d8a43","date":1576491645,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/PackageManagerCLITest#testPackageManager().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/PackageManagerCLITest#testPackageManager().mjava","sourceNew":"  @Test\n  public void testPackageManager() throws Exception {\n    PackageTool tool = new PackageTool();\n    \n    String solrUrl = cluster.getJettySolrRunner(0).getBaseUrl().toString();\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-installed\"});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"add-repo\", \"fullstory\",  \"http://localhost:\" + repositoryServer.getPort()});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-available\"});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"install\", \"question-answer:1.0.0\"});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-installed\"});\n\n    CollectionAdminRequest.createCollection(\"abc\", \"conf1\", 1, 1).process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"def\", \"conf2\", 1, 1).process(cluster.getSolrClient());\n\n    String rhPath = \"/mypath2\";\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-deployed\", \"question-answer\"});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"deploy\", \"question-answer\", \"-y\", \"-collections\", \"abc\", \"-p\", \"RH-HANDLER-PATH=\" + rhPath});\n    assertPackageVersion(\"abc\", \"question-answer\", \"1.0.0\", rhPath, \"1.0.0\");\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-deployed\", \"question-answer\"});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-deployed\", \"-c\", \"abc\"});\n\n    // Should we test the \"auto-update to latest\" functionality or the default explicit deploy functionality\n    boolean autoUpdateToLatest = random().nextBoolean();\n\n    if (autoUpdateToLatest) {\n      log.info(\"Testing auto-update to latest installed\");\n\n      // This command pegs the version to the latest available\n      run(tool, new String[] {\"-solrUrl\", solrUrl, \"deploy\", \"question-answer:latest\", \"-y\", \"-collections\", \"abc\"});\n      assertPackageVersion(\"abc\", \"question-answer\", \"$LATEST\", rhPath, \"1.0.0\");\n\n      run(tool, new String[] {\"-solrUrl\", solrUrl, \"install\", \"question-answer\"});\n      assertPackageVersion(\"abc\", \"question-answer\", \"$LATEST\", rhPath, \"1.1.0\");\n    } else {\n      log.info(\"Testing explicit deployment to a different/newer version\");\n\n      run(tool, new String[] {\"-solrUrl\", solrUrl, \"install\", \"question-answer\"});\n      assertPackageVersion(\"abc\", \"question-answer\", \"1.0.0\", rhPath, \"1.0.0\");\n\n      if (random().nextBoolean()) { // even if parameters are not passed in, they should be picked up from previous deployment\n        run(tool, new String[] {\"-solrUrl\", solrUrl, \"deploy\", \"--update\", \"-y\", \"question-answer\", \"-collections\", \"abc\", \"-p\", \"RH-HANDLER-PATH=\" + rhPath});\n      } else {\n        run(tool, new String[] {\"-solrUrl\", solrUrl, \"deploy\", \"--update\", \"-y\", \"question-answer\", \"-collections\", \"abc\"});\n      }\n      assertPackageVersion(\"abc\", \"question-answer\", \"1.1.0\", rhPath, \"1.1.0\");\n    }\n    \n    log.info(\"Running undeploy...\");\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"undeploy\", \"question-answer\", \"-collections\", \"abc\"});\n    \n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-deployed\", \"question-answer\"});\n\n  }\n\n","sourceOld":"  @Test\n  @SuppressForbidden(reason = \"Need to turn off logging, and SLF4J doesn't seem to provide for a way.\")\n  public void testPackageManager() throws Exception {\n    PackageTool tool = new PackageTool();\n    \n    // Enable the logger for this test. Need to do this since the tool disables logger.\n    Configurator.setRootLevel(Level.INFO);\n\n    String solrUrl = cluster.getJettySolrRunner(0).getBaseUrl().toString();\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-installed\"});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"add-repo\", \"fullstory\",  \"http://localhost:\" + repositoryServer.getPort()});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-available\"});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"install\", \"question-answer:1.0.0\"});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-installed\"});\n\n    CollectionAdminRequest.createCollection(\"abc\", \"conf1\", 1, 1).process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"def\", \"conf2\", 1, 1).process(cluster.getSolrClient());\n\n    String rhPath = \"/mypath2\";\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-deployed\", \"question-answer\"});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"deploy\", \"question-answer\", \"-y\", \"-collections\", \"abc\", \"-p\", \"RH-HANDLER-PATH=\" + rhPath});\n    assertPackageVersion(\"abc\", \"question-answer\", \"1.0.0\", rhPath, \"1.0.0\");\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-deployed\", \"question-answer\"});\n\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-deployed\", \"-c\", \"abc\"});\n\n    // Should we test the \"auto-update to latest\" functionality or the default explicit deploy functionality\n    boolean autoUpdateToLatest = random().nextBoolean();\n\n    if (autoUpdateToLatest) {\n      log.info(\"Testing auto-update to latest installed\");\n\n      // This command pegs the version to the latest available\n      run(tool, new String[] {\"-solrUrl\", solrUrl, \"deploy\", \"question-answer:latest\", \"-y\", \"-collections\", \"abc\"});\n      assertPackageVersion(\"abc\", \"question-answer\", \"$LATEST\", rhPath, \"1.0.0\");\n\n      run(tool, new String[] {\"-solrUrl\", solrUrl, \"install\", \"question-answer\"});\n      assertPackageVersion(\"abc\", \"question-answer\", \"$LATEST\", rhPath, \"1.1.0\");\n    } else {\n      log.info(\"Testing explicit deployment to a different/newer version\");\n\n      run(tool, new String[] {\"-solrUrl\", solrUrl, \"install\", \"question-answer\"});\n      assertPackageVersion(\"abc\", \"question-answer\", \"1.0.0\", rhPath, \"1.0.0\");\n\n      if (random().nextBoolean()) { // even if parameters are not passed in, they should be picked up from previous deployment\n        run(tool, new String[] {\"-solrUrl\", solrUrl, \"deploy\", \"--update\", \"-y\", \"question-answer\", \"-collections\", \"abc\", \"-p\", \"RH-HANDLER-PATH=\" + rhPath});\n      } else {\n        run(tool, new String[] {\"-solrUrl\", solrUrl, \"deploy\", \"--update\", \"-y\", \"question-answer\", \"-collections\", \"abc\"});\n      }\n      assertPackageVersion(\"abc\", \"question-answer\", \"1.1.0\", rhPath, \"1.1.0\");\n    }\n    \n    log.info(\"Running undeploy...\");\n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"undeploy\", \"question-answer\", \"-collections\", \"abc\"});\n    \n    run(tool, new String[] {\"-solrUrl\", solrUrl, \"list-deployed\", \"question-answer\"});\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5dbb246b964f2522982dffb22ac8f2a95a21d309":["120bc33d5cbe83eca2e5fce597baf4fef208d579"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06595b0c22c7d3075c4104d3820cccf95d9d8a43":["215a3569e5c9b0005e2e489967978f7bd6db2af8","62d55718cd611235e975fa73a6bdf263fbd58859"],"62d55718cd611235e975fa73a6bdf263fbd58859":["215a3569e5c9b0005e2e489967978f7bd6db2af8"],"120bc33d5cbe83eca2e5fce597baf4fef208d579":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"215a3569e5c9b0005e2e489967978f7bd6db2af8":["5dbb246b964f2522982dffb22ac8f2a95a21d309"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["62d55718cd611235e975fa73a6bdf263fbd58859"]},"commit2Childs":{"5dbb246b964f2522982dffb22ac8f2a95a21d309":["215a3569e5c9b0005e2e489967978f7bd6db2af8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["120bc33d5cbe83eca2e5fce597baf4fef208d579"],"06595b0c22c7d3075c4104d3820cccf95d9d8a43":[],"62d55718cd611235e975fa73a6bdf263fbd58859":["06595b0c22c7d3075c4104d3820cccf95d9d8a43","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"120bc33d5cbe83eca2e5fce597baf4fef208d579":["5dbb246b964f2522982dffb22ac8f2a95a21d309"],"215a3569e5c9b0005e2e489967978f7bd6db2af8":["06595b0c22c7d3075c4104d3820cccf95d9d8a43","62d55718cd611235e975fa73a6bdf263fbd58859"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["06595b0c22c7d3075c4104d3820cccf95d9d8a43","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}