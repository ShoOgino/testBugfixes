{"path":"contrib/velocity/src/main/java/org/apache/solr/request/VelocityResponseWriter#getJSONWrap(String).mjava","commits":[{"id":"9b829eaa611bac9e7e5baf5c6689292966898ed6","date":1227006031,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/velocity/src/main/java/org/apache/solr/request/VelocityResponseWriter#getJSONWrap(String).mjava","pathOld":"/dev/null","sourceNew":"  private String getJSONWrap(String xmlResult) {\n    // escape the double quotes and backslashes\n    String replace1 = xmlResult.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\");\n    replace1 = replace1.replaceAll(\"\\\\n\", \"\\\\\\\\n\");\n    replace1 = replace1.replaceAll(\"\\\\r\", \"\\\\\\\\r\");\n    String replaced = replace1.replaceAll(\"\\\"\", \"\\\\\\\\\\\"\");\n    // wrap it in a JSON object\n    return \"{\\\"result\\\":\\\"\" + replaced + \"\\\"}\";\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6581f14d0fcaf18564b7604a223ef502482e9d90","date":1229367920,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/velocity/src/main/java/org/apache/solr/request/VelocityResponseWriter#getJSONWrap(String).mjava","pathOld":"contrib/velocity/src/main/java/org/apache/solr/request/VelocityResponseWriter#getJSONWrap(String).mjava","sourceNew":"  private String getJSONWrap(String xmlResult) {  // TODO: maybe noggit or Solr's JSON utilities can make this cleaner?\n    // escape the double quotes and backslashes\n    String replace1 = xmlResult.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\");\n    replace1 = replace1.replaceAll(\"\\\\n\", \"\\\\\\\\n\");\n    replace1 = replace1.replaceAll(\"\\\\r\", \"\\\\\\\\r\");\n    String replaced = replace1.replaceAll(\"\\\"\", \"\\\\\\\\\\\"\");\n    // wrap it in a JSON object\n    return \"{\\\"result\\\":\\\"\" + replaced + \"\\\"}\";\n  }\n\n","sourceOld":"  private String getJSONWrap(String xmlResult) {\n    // escape the double quotes and backslashes\n    String replace1 = xmlResult.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\");\n    replace1 = replace1.replaceAll(\"\\\\n\", \"\\\\\\\\n\");\n    replace1 = replace1.replaceAll(\"\\\\r\", \"\\\\\\\\r\");\n    String replaced = replace1.replaceAll(\"\\\"\", \"\\\\\\\\\\\"\");\n    // wrap it in a JSON object\n    return \"{\\\"result\\\":\\\"\" + replaced + \"\\\"}\";\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65c941e8dcb3bb0ee6b785e349a931111c65e8ff","date":1268850890,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/velocity/src/main/java/org/apache/solr/response/VelocityResponseWriter#getJSONWrap(String).mjava","pathOld":"contrib/velocity/src/main/java/org/apache/solr/request/VelocityResponseWriter#getJSONWrap(String).mjava","sourceNew":"  private String getJSONWrap(String xmlResult) {  // TODO: maybe noggit or Solr's JSON utilities can make this cleaner?\n    // escape the double quotes and backslashes\n    String replace1 = xmlResult.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\");\n    replace1 = replace1.replaceAll(\"\\\\n\", \"\\\\\\\\n\");\n    replace1 = replace1.replaceAll(\"\\\\r\", \"\\\\\\\\r\");\n    String replaced = replace1.replaceAll(\"\\\"\", \"\\\\\\\\\\\"\");\n    // wrap it in a JSON object\n    return \"{\\\"result\\\":\\\"\" + replaced + \"\\\"}\";\n  }\n\n","sourceOld":"  private String getJSONWrap(String xmlResult) {  // TODO: maybe noggit or Solr's JSON utilities can make this cleaner?\n    // escape the double quotes and backslashes\n    String replace1 = xmlResult.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\");\n    replace1 = replace1.replaceAll(\"\\\\n\", \"\\\\\\\\n\");\n    replace1 = replace1.replaceAll(\"\\\\r\", \"\\\\\\\\r\");\n    String replaced = replace1.replaceAll(\"\\\"\", \"\\\\\\\\\\\"\");\n    // wrap it in a JSON object\n    return \"{\\\"result\\\":\\\"\" + replaced + \"\\\"}\";\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb0c840fcaa8a53dc8e038a0f7776c84283637f9","date":1268855982,"type":5,"author":"Yonik Seeley","isMerge":true,"pathNew":"contrib/velocity/src/main/java/org/apache/solr/response/VelocityResponseWriter#getJSONWrap(String).mjava","pathOld":"contrib/velocity/src/main/java/org/apache/solr/request/VelocityResponseWriter#getJSONWrap(String).mjava","sourceNew":"  private String getJSONWrap(String xmlResult) {  // TODO: maybe noggit or Solr's JSON utilities can make this cleaner?\n    // escape the double quotes and backslashes\n    String replace1 = xmlResult.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\");\n    replace1 = replace1.replaceAll(\"\\\\n\", \"\\\\\\\\n\");\n    replace1 = replace1.replaceAll(\"\\\\r\", \"\\\\\\\\r\");\n    String replaced = replace1.replaceAll(\"\\\"\", \"\\\\\\\\\\\"\");\n    // wrap it in a JSON object\n    return \"{\\\"result\\\":\\\"\" + replaced + \"\\\"}\";\n  }\n\n","sourceOld":"  private String getJSONWrap(String xmlResult) {  // TODO: maybe noggit or Solr's JSON utilities can make this cleaner?\n    // escape the double quotes and backslashes\n    String replace1 = xmlResult.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\");\n    replace1 = replace1.replaceAll(\"\\\\n\", \"\\\\\\\\n\");\n    replace1 = replace1.replaceAll(\"\\\\r\", \"\\\\\\\\r\");\n    String replaced = replace1.replaceAll(\"\\\"\", \"\\\\\\\\\\\"\");\n    // wrap it in a JSON object\n    return \"{\\\"result\\\":\\\"\" + replaced + \"\\\"}\";\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"65c941e8dcb3bb0ee6b785e349a931111c65e8ff":["6581f14d0fcaf18564b7604a223ef502482e9d90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"6581f14d0fcaf18564b7604a223ef502482e9d90":["9b829eaa611bac9e7e5baf5c6689292966898ed6"],"9b829eaa611bac9e7e5baf5c6689292966898ed6":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"fb0c840fcaa8a53dc8e038a0f7776c84283637f9":["6581f14d0fcaf18564b7604a223ef502482e9d90","65c941e8dcb3bb0ee6b785e349a931111c65e8ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"65c941e8dcb3bb0ee6b785e349a931111c65e8ff":["fb0c840fcaa8a53dc8e038a0f7776c84283637f9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["9b829eaa611bac9e7e5baf5c6689292966898ed6"],"6581f14d0fcaf18564b7604a223ef502482e9d90":["65c941e8dcb3bb0ee6b785e349a931111c65e8ff","fb0c840fcaa8a53dc8e038a0f7776c84283637f9"],"9b829eaa611bac9e7e5baf5c6689292966898ed6":["6581f14d0fcaf18564b7604a223ef502482e9d90"],"fb0c840fcaa8a53dc8e038a0f7776c84283637f9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fb0c840fcaa8a53dc8e038a0f7776c84283637f9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}