{"path":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestIntervals#testTermQueryIntervals().mjava","commits":[{"id":"361b1afc99f68598c73d37074aec089c9c951586","date":1522744632,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestIntervals#testTermQueryIntervals().mjava","pathOld":"/dev/null","sourceNew":"  public void testTermQueryIntervals() throws IOException {\n    checkIntervals(Intervals.term(\"porridge\"), \"field1\", 4, new int[][]{\n        {},\n        { 1, 1, 4, 4, 7, 7 },\n        { 1, 1, 4, 4, 7, 7 },\n        {},\n        { 1, 1, 4, 4, 7, 7 },\n        { 0, 0 }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2375622520a4e480775e3104a2f9a423536755b4","date":1536005521,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestIntervals#testTermQueryIntervals().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestIntervals#testTermQueryIntervals().mjava","sourceNew":"  public void testTermQueryIntervals() throws IOException {\n    IntervalsSource source = Intervals.term(\"porridge\");\n    checkIntervals(source, \"field1\", 4, new int[][]{\n        {},\n        { 1, 1, 4, 4, 7, 7 },\n        { 1, 1, 4, 4, 7, 7 },\n        {},\n        { 1, 1, 4, 4, 7, 7 },\n        { 0, 0 }\n    });\n    assertNull(getMatches(source, 0, \"field1\"));\n    assertNull(getMatches(source, 2, \"no_such_field\"));\n    MatchesIterator mi = getMatches(source, 2, \"field1\");\n    assertMatch(mi, 1, 1, 6, 14);\n    assertMatch(mi, 4, 4, 27, 35);\n    assertMatch(mi, 7, 7, 47, 55);\n    assertFalse(mi.next());\n  }\n\n","sourceOld":"  public void testTermQueryIntervals() throws IOException {\n    checkIntervals(Intervals.term(\"porridge\"), \"field1\", 4, new int[][]{\n        {},\n        { 1, 1, 4, 4, 7, 7 },\n        { 1, 1, 4, 4, 7, 7 },\n        {},\n        { 1, 1, 4, 4, 7, 7 },\n        { 0, 0 }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"362cb5d910af28f1dadaddc4c7670d7d166b23c2","date":1547647156,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestIntervals#testTermQueryIntervals().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestIntervals#testTermQueryIntervals().mjava","sourceNew":"  public void testTermQueryIntervals() throws IOException {\n    IntervalsSource source = Intervals.term(\"porridge\");\n    checkIntervals(source, \"field1\", 4, new int[][]{\n        {},\n        { 1, 1, 4, 4, 7, 7 },\n        { 1, 1, 4, 4, 7, 7 },\n        {},\n        { 1, 1, 4, 4, 7, 7 },\n        { 0, 0 }\n    });\n    assertNull(getMatches(source, 0, \"field1\"));\n    assertNull(getMatches(source, 2, \"no_such_field\"));\n    MatchesIterator mi = getMatches(source, 2, \"field1\");\n    assertMatch(mi, 1, 1, 6, 14);\n    assertMatch(mi, 4, 4, 27, 35);\n    assertMatch(mi, 7, 7, 47, 55);\n    assertFalse(mi.next());\n\n    assertEquals(1, source.minExtent());\n  }\n\n","sourceOld":"  public void testTermQueryIntervals() throws IOException {\n    IntervalsSource source = Intervals.term(\"porridge\");\n    checkIntervals(source, \"field1\", 4, new int[][]{\n        {},\n        { 1, 1, 4, 4, 7, 7 },\n        { 1, 1, 4, 4, 7, 7 },\n        {},\n        { 1, 1, 4, 4, 7, 7 },\n        { 0, 0 }\n    });\n    assertNull(getMatches(source, 0, \"field1\"));\n    assertNull(getMatches(source, 2, \"no_such_field\"));\n    MatchesIterator mi = getMatches(source, 2, \"field1\");\n    assertMatch(mi, 1, 1, 6, 14);\n    assertMatch(mi, 4, 4, 27, 35);\n    assertMatch(mi, 7, 7, 47, 55);\n    assertFalse(mi.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97ee2282ff806e9bc9d705f389cf40451ab81c3e","date":1561721333,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testTermQueryIntervals().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestIntervals#testTermQueryIntervals().mjava","sourceNew":"  public void testTermQueryIntervals() throws IOException {\n    IntervalsSource source = Intervals.term(\"porridge\");\n    checkIntervals(source, \"field1\", 4, new int[][]{\n        {},\n        { 1, 1, 4, 4, 7, 7 },\n        { 1, 1, 4, 4, 7, 7 },\n        {},\n        { 1, 1, 4, 4, 7, 7 },\n        { 0, 0 }\n    });\n    assertNull(getMatches(source, 0, \"field1\"));\n    assertNull(getMatches(source, 2, \"no_such_field\"));\n    MatchesIterator mi = getMatches(source, 2, \"field1\");\n    assertMatch(mi, 1, 1, 6, 14);\n    assertMatch(mi, 4, 4, 27, 35);\n    assertMatch(mi, 7, 7, 47, 55);\n    assertFalse(mi.next());\n\n    assertEquals(1, source.minExtent());\n  }\n\n","sourceOld":"  public void testTermQueryIntervals() throws IOException {\n    IntervalsSource source = Intervals.term(\"porridge\");\n    checkIntervals(source, \"field1\", 4, new int[][]{\n        {},\n        { 1, 1, 4, 4, 7, 7 },\n        { 1, 1, 4, 4, 7, 7 },\n        {},\n        { 1, 1, 4, 4, 7, 7 },\n        { 0, 0 }\n    });\n    assertNull(getMatches(source, 0, \"field1\"));\n    assertNull(getMatches(source, 2, \"no_such_field\"));\n    MatchesIterator mi = getMatches(source, 2, \"field1\");\n    assertMatch(mi, 1, 1, 6, 14);\n    assertMatch(mi, 4, 4, 27, 35);\n    assertMatch(mi, 7, 7, 47, 55);\n    assertFalse(mi.next());\n\n    assertEquals(1, source.minExtent());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["362cb5d910af28f1dadaddc4c7670d7d166b23c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"362cb5d910af28f1dadaddc4c7670d7d166b23c2":["2375622520a4e480775e3104a2f9a423536755b4"],"361b1afc99f68598c73d37074aec089c9c951586":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2375622520a4e480775e3104a2f9a423536755b4":["361b1afc99f68598c73d37074aec089c9c951586"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"]},"commit2Childs":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["361b1afc99f68598c73d37074aec089c9c951586"],"362cb5d910af28f1dadaddc4c7670d7d166b23c2":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"361b1afc99f68598c73d37074aec089c9c951586":["2375622520a4e480775e3104a2f9a423536755b4"],"2375622520a4e480775e3104a2f9a423536755b4":["362cb5d910af28f1dadaddc4c7670d7d166b23c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}