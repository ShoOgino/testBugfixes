{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#checkExclusiveMarking(String,ZkNodeProps).mjava","commits":[{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":1,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#checkExclusiveMarking(String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#checkExclusivity(ZkNodeProps,String).mjava","sourceNew":"  @Override\n  public ExclusiveMarking checkExclusiveMarking(String collectionName, ZkNodeProps message) {\n    // CLUSTERSTATUS is always mutually exclusive\n    //TODO deprecated remove this check .\n    if(CLUSTERSTATUS.isEqual(message.getStr(Overseer.QUEUE_OPERATION)))\n      return ExclusiveMarking.EXCLUSIVE;\n\n    if(collectionWip.contains(collectionName))\n      return ExclusiveMarking.NONEXCLUSIVE;\n\n    return ExclusiveMarking.NOTDETERMINED;\n  }\n\n","sourceOld":"  private boolean checkExclusivity(ZkNodeProps message, String id) throws KeeperException, InterruptedException {\n    String collectionName = message.containsKey(COLLECTION_PROP) ?\n        message.getStr(COLLECTION_PROP) : message.getStr(NAME);\n\n    if(collectionName == null)\n      return true;\n\n    // CLUSTERSTATUS is always mutually exclusive\n    //TODO deprecated remove this check .\n    if(CLUSTERSTATUS.isEqual(message.getStr(Overseer.QUEUE_OPERATION)))\n      return true;\n\n    if(collectionWip.contains(collectionName))\n      return false;\n\n    if(runningZKTasks.contains(id))\n      return false;\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#checkExclusiveMarking(String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#checkExclusiveMarking(String,ZkNodeProps).mjava","sourceNew":"  @Override\n  public ExclusiveMarking checkExclusiveMarking(String collectionName, ZkNodeProps message) {\n    // CLUSTERSTATUS is always mutually exclusive\n    //TODO deprecated remove this check .\n    if(CLUSTERSTATUS.isEqual(message.getStr(Overseer.QUEUE_OPERATION)))\n      return ExclusiveMarking.EXCLUSIVE;\n\n    synchronized (collectionWip) {\n      if(collectionWip.contains(collectionName))\n        return ExclusiveMarking.NONEXCLUSIVE;\n    }\n\n    return ExclusiveMarking.NOTDETERMINED;\n  }\n\n","sourceOld":"  @Override\n  public ExclusiveMarking checkExclusiveMarking(String collectionName, ZkNodeProps message) {\n    // CLUSTERSTATUS is always mutually exclusive\n    //TODO deprecated remove this check .\n    if(CLUSTERSTATUS.isEqual(message.getStr(Overseer.QUEUE_OPERATION)))\n      return ExclusiveMarking.EXCLUSIVE;\n\n    if(collectionWip.contains(collectionName))\n      return ExclusiveMarking.NONEXCLUSIVE;\n\n    return ExclusiveMarking.NOTDETERMINED;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2d14c59d26a74e844b25f45bbac2a9fc7c5d4b5","date":1453144432,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#checkExclusiveMarking(String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#checkExclusiveMarking(String,ZkNodeProps).mjava","sourceNew":"  @Override\n  public ExclusiveMarking checkExclusiveMarking(String collectionName, ZkNodeProps message) {\n    synchronized (collectionWip) {\n      if(collectionWip.contains(collectionName))\n        return ExclusiveMarking.NONEXCLUSIVE;\n    }\n\n    return ExclusiveMarking.NOTDETERMINED;\n  }\n\n","sourceOld":"  @Override\n  public ExclusiveMarking checkExclusiveMarking(String collectionName, ZkNodeProps message) {\n    // CLUSTERSTATUS is always mutually exclusive\n    //TODO deprecated remove this check .\n    if(CLUSTERSTATUS.isEqual(message.getStr(Overseer.QUEUE_OPERATION)))\n      return ExclusiveMarking.EXCLUSIVE;\n\n    synchronized (collectionWip) {\n      if(collectionWip.contains(collectionName))\n        return ExclusiveMarking.NONEXCLUSIVE;\n    }\n\n    return ExclusiveMarking.NOTDETERMINED;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"781578ca5d3d2194bc55fc3457c62aef623db6f2","date":1464859077,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#checkExclusiveMarking(String,ZkNodeProps).mjava","sourceNew":null,"sourceOld":"  @Override\n  public ExclusiveMarking checkExclusiveMarking(String collectionName, ZkNodeProps message) {\n    synchronized (collectionWip) {\n      if(collectionWip.contains(collectionName))\n        return ExclusiveMarking.NONEXCLUSIVE;\n    }\n\n    return ExclusiveMarking.NOTDETERMINED;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#checkExclusiveMarking(String,ZkNodeProps).mjava","sourceNew":null,"sourceOld":"  @Override\n  public ExclusiveMarking checkExclusiveMarking(String collectionName, ZkNodeProps message) {\n    synchronized (collectionWip) {\n      if(collectionWip.contains(collectionName))\n        return ExclusiveMarking.NONEXCLUSIVE;\n    }\n\n    return ExclusiveMarking.NOTDETERMINED;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f2d14c59d26a74e844b25f45bbac2a9fc7c5d4b5":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f2d14c59d26a74e844b25f45bbac2a9fc7c5d4b5","781578ca5d3d2194bc55fc3457c62aef623db6f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["781578ca5d3d2194bc55fc3457c62aef623db6f2"],"781578ca5d3d2194bc55fc3457c62aef623db6f2":["f2d14c59d26a74e844b25f45bbac2a9fc7c5d4b5"]},"commit2Childs":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["f2d14c59d26a74e844b25f45bbac2a9fc7c5d4b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"f2d14c59d26a74e844b25f45bbac2a9fc7c5d4b5":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","781578ca5d3d2194bc55fc3457c62aef623db6f2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"781578ca5d3d2194bc55fc3457c62aef623db6f2":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}