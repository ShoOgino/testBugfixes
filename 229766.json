{"path":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardCodec#fieldsConsumer(SegmentWriteState).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    StandardPostingsWriter docs = new StandardPostingsWriterImpl(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    StandardTermsIndexWriter indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new SimpleStandardTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new StandardTermsDictWriter(indexWriter, state, docs, BytesRef.getUTF8SortedAsUTF16Comparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08932c793647a36953d1816b1060121f48820d3f","date":1277386540,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    StandardPostingsWriter docs = new StandardPostingsWriterImpl(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    StandardTermsIndexWriter indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new SimpleStandardTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new StandardTermsDictWriter(indexWriter, state, docs, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    StandardPostingsWriter docs = new StandardPostingsWriterImpl(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    StandardTermsIndexWriter indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new SimpleStandardTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new StandardTermsDictWriter(indexWriter, state, docs, BytesRef.getUTF8SortedAsUTF16Comparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    StandardPostingsWriter docs = new StandardPostingsWriterImpl(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    StandardTermsIndexWriter indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new SimpleStandardTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new StandardTermsDictWriter(indexWriter, state, docs, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    StandardPostingsWriter docs = new StandardPostingsWriterImpl(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    StandardTermsIndexWriter indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new SimpleStandardTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new StandardTermsDictWriter(indexWriter, state, docs, BytesRef.getUTF8SortedAsUTF16Comparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99cf56f3a650b908f7017a72f9d23940418f8a52","date":1284891529,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new StandardPostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new PrefixCodedTermsWriter(indexWriter, state, docs, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    StandardPostingsWriter docs = new StandardPostingsWriterImpl(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    StandardTermsIndexWriter indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new SimpleStandardTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new StandardTermsDictWriter(indexWriter, state, docs, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new StandardPostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new PrefixCodedTermsWriter(indexWriter, state, docs, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    StandardPostingsWriter docs = new StandardPostingsWriterImpl(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    StandardTermsIndexWriter indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new SimpleStandardTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new StandardTermsDictWriter(indexWriter, state, docs, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new StandardPostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new VariableGapTermsIndexWriter(state, new VariableGapTermsIndexWriter.EveryNTermSelector(state.termIndexInterval));\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new PrefixCodedTermsWriter(indexWriter, state, docs, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new StandardPostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new PrefixCodedTermsWriter(indexWriter, state, docs, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new StandardPostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new VariableGapTermsIndexWriter(state, new VariableGapTermsIndexWriter.EveryNTermSelector(state.termIndexInterval));\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new PrefixCodedTermsWriter(indexWriter, state, docs, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new StandardPostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new PrefixCodedTermsWriter(indexWriter, state, docs, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new StandardPostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new VariableGapTermsIndexWriter(state, new VariableGapTermsIndexWriter.EveryNTermSelector(state.termIndexInterval));\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new PrefixCodedTermsWriter(indexWriter, state, docs, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new StandardPostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new PrefixCodedTermsWriter(indexWriter, state, docs, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1add9ddc0005b07550d4350720aac22dc9886b3","date":1295549635,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new StandardPostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new VariableGapTermsIndexWriter(state, new VariableGapTermsIndexWriter.EveryNTermSelector(state.termIndexInterval));\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, docs, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new StandardPostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new VariableGapTermsIndexWriter(state, new VariableGapTermsIndexWriter.EveryNTermSelector(state.termIndexInterval));\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new PrefixCodedTermsWriter(indexWriter, state, docs, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new StandardPostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new VariableGapTermsIndexWriter(state, new VariableGapTermsIndexWriter.EveryNTermSelector(state.termIndexInterval));\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, docs, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new StandardPostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new VariableGapTermsIndexWriter(state, new VariableGapTermsIndexWriter.EveryNTermSelector(state.termIndexInterval));\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new PrefixCodedTermsWriter(indexWriter, state, docs, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new StandardPostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new VariableGapTermsIndexWriter(state, new VariableGapTermsIndexWriter.EveryNTermSelector(state.termIndexInterval));\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, docs, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new StandardPostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new VariableGapTermsIndexWriter(state, new VariableGapTermsIndexWriter.EveryNTermSelector(state.termIndexInterval));\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new PrefixCodedTermsWriter(indexWriter, state, docs, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762","date":1297938719,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new StandardPostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new VariableGapTermsIndexWriter(state, new VariableGapTermsIndexWriter.EveryNTermSelector(state.termIndexInterval));\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, docs);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new StandardPostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new VariableGapTermsIndexWriter(state, new VariableGapTermsIndexWriter.EveryNTermSelector(state.termIndexInterval));\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, docs, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new StandardPostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new VariableGapTermsIndexWriter(state, new VariableGapTermsIndexWriter.EveryNTermSelector(state.termIndexInterval));\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, docs);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new StandardPostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new VariableGapTermsIndexWriter(state, new VariableGapTermsIndexWriter.EveryNTermSelector(state.termIndexInterval));\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, docs, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new StandardPostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new VariableGapTermsIndexWriter(state, new VariableGapTermsIndexWriter.EveryNTermSelector(state.termIndexInterval));\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, docs);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new StandardPostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new VariableGapTermsIndexWriter(state, new VariableGapTermsIndexWriter.EveryNTermSelector(state.termIndexInterval));\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, docs, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new StandardPostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    boolean success = false;\n    try {\n      FieldsConsumer ret = new BlockTreeTermsWriter(state, docs, minBlockSize, maxBlockSize);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new StandardPostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new VariableGapTermsIndexWriter(state, new VariableGapTermsIndexWriter.EveryNTermSelector(state.termIndexInterval));\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, docs);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new Lucene40PostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    boolean success = false;\n    try {\n      FieldsConsumer ret = new BlockTreeTermsWriter(state, docs, minBlockSize, maxBlockSize);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new StandardPostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    boolean success = false;\n    try {\n      FieldsConsumer ret = new BlockTreeTermsWriter(state, docs, minBlockSize, maxBlockSize);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["99cf56f3a650b908f7017a72f9d23940418f8a52","56da903869515527852ee21ea7ef7bfe414cd40d"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["29ef99d61cda9641b6250bf9567329a6e65f901d","4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"],"4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762":["b1add9ddc0005b07550d4350720aac22dc9886b3"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5f4e87790277826a2aea119328600dfb07761f32":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","08932c793647a36953d1816b1060121f48820d3f"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["56da903869515527852ee21ea7ef7bfe414cd40d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","99cf56f3a650b908f7017a72f9d23940418f8a52"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["868da859b43505d9d2a023bfeae6dd0c795f5295","b1add9ddc0005b07550d4350720aac22dc9886b3"],"60ba444201d2570214b6fcf1d15600dc1a01f548":["4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"],"7b91922b55d15444d554721b352861d028eb8278":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"08932c793647a36953d1816b1060121f48820d3f":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"56da903869515527852ee21ea7ef7bfe414cd40d":["99cf56f3a650b908f7017a72f9d23940418f8a52"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","b1add9ddc0005b07550d4350720aac22dc9886b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","56da903869515527852ee21ea7ef7bfe414cd40d"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["08932c793647a36953d1816b1060121f48820d3f"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["e79a6d080bdd5b2a8f56342cf571b5476de04180","4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762":["f1bdbf92da222965b46c0a942c3857ba56e5c638","60ba444201d2570214b6fcf1d15600dc1a01f548","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["5f4e87790277826a2aea119328600dfb07761f32","08932c793647a36953d1816b1060121f48820d3f"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762","e79a6d080bdd5b2a8f56342cf571b5476de04180","29ef99d61cda9641b6250bf9567329a6e65f901d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"60ba444201d2570214b6fcf1d15600dc1a01f548":["7b91922b55d15444d554721b352861d028eb8278"],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"08932c793647a36953d1816b1060121f48820d3f":["5f4e87790277826a2aea119328600dfb07761f32","99cf56f3a650b908f7017a72f9d23940418f8a52"],"56da903869515527852ee21ea7ef7bfe414cd40d":["70ad682703b8585f5d0a637efec044d57ec05efb","b1add9ddc0005b07550d4350720aac22dc9886b3","868da859b43505d9d2a023bfeae6dd0c795f5295"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["70ad682703b8585f5d0a637efec044d57ec05efb","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","56da903869515527852ee21ea7ef7bfe414cd40d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}