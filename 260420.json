{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#addRangeInfo(String).mjava","commits":[{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#addRangeInfo(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#addRangeInfo(String).mjava","sourceNew":"  private RangeInfo addRangeInfo(String collection) {\n    List<Range> ranges;\n    RangeInfo rangeInfo;\n    rangeInfo = new RangeInfo();\n\n    Map<String,Slice> slices = getSlices(collection);\n    \n    if (slices == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Can not find collection \"\n          + collection + \" in \" + this);\n    }\n    \n    Set<String> shards = slices.keySet();\n    ArrayList<String> shardList = new ArrayList<String>(shards.size());\n    shardList.addAll(shards);\n    Collections.sort(shardList);\n    \n    ranges = hp.partitionRange(shards.size());\n    \n    rangeInfo.ranges = ranges;\n    rangeInfo.shardList = shardList;\n    rangeInfos.put(collection, rangeInfo);\n    return rangeInfo;\n  }\n\n","sourceOld":"  private RangeInfo addRangeInfo(String collection) {\n    List<Range> ranges;\n    RangeInfo rangeInfo;\n    rangeInfo = new RangeInfo();\n\n    Map<String,Slice> slices = getSlices(collection);\n    \n    if (slices == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Can not find collection \"\n          + collection + \" in \" + this);\n    }\n    \n    Set<String> shards = slices.keySet();\n    ArrayList<String> shardList = new ArrayList<String>(shards.size());\n    shardList.addAll(shards);\n    Collections.sort(shardList);\n    \n    ranges = hp.partitionRange(shards.size());\n    \n    rangeInfo.ranges = ranges;\n    rangeInfo.shardList = shardList;\n    rangeInfos.put(collection, rangeInfo);\n    return rangeInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#addRangeInfo(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#addRangeInfo(String).mjava","sourceNew":"  private RangeInfo addRangeInfo(String collection) {\n    List<Range> ranges;\n    RangeInfo rangeInfo;\n    rangeInfo = new RangeInfo();\n\n    Map<String,Slice> slices = getSlices(collection);\n    \n    if (slices == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Can not find collection \"\n          + collection + \" in \" + this);\n    }\n    \n    Set<String> shards = slices.keySet();\n    ArrayList<String> shardList = new ArrayList<String>(shards.size());\n    shardList.addAll(shards);\n    Collections.sort(shardList);\n    \n    ranges = hp.partitionRange(shards.size());\n    \n    rangeInfo.ranges = ranges;\n    rangeInfo.shardList = shardList;\n    rangeInfos.put(collection, rangeInfo);\n    return rangeInfo;\n  }\n\n","sourceOld":"  private RangeInfo addRangeInfo(String collection) {\n    List<Range> ranges;\n    RangeInfo rangeInfo;\n    rangeInfo = new RangeInfo();\n\n    Map<String,Slice> slices = getSlices(collection);\n    \n    if (slices == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Can not find collection \"\n          + collection + \" in \" + this);\n    }\n    \n    Set<String> shards = slices.keySet();\n    ArrayList<String> shardList = new ArrayList<String>(shards.size());\n    shardList.addAll(shards);\n    Collections.sort(shardList);\n    \n    ranges = hp.partitionRange(shards.size());\n    \n    rangeInfo.ranges = ranges;\n    rangeInfo.shardList = shardList;\n    rangeInfos.put(collection, rangeInfo);\n    return rangeInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#addRangeInfo(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#addRangeInfo(String).mjava","sourceNew":"  private RangeInfo addRangeInfo(String collection) {\n    List<Range> ranges;\n    RangeInfo rangeInfo;\n    rangeInfo = new RangeInfo();\n\n    Map<String,Slice> slices = getSlices(collection);\n    \n    if (slices == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Can not find collection \"\n          + collection + \" in \" + this);\n    }\n    \n    Set<String> shards = slices.keySet();\n    ArrayList<String> shardList = new ArrayList<String>(shards.size());\n    shardList.addAll(shards);\n    Collections.sort(shardList);\n    \n    ranges = hp.partitionRange(shards.size());\n    \n    rangeInfo.ranges = ranges;\n    rangeInfo.shardList = shardList;\n    rangeInfos.put(collection, rangeInfo);\n    return rangeInfo;\n  }\n\n","sourceOld":"  private RangeInfo addRangeInfo(String collection) {\n    List<Range> ranges;\n    RangeInfo rangeInfo;\n    rangeInfo = new RangeInfo();\n\n    Map<String,Slice> slices = getSlices(collection);\n    \n    if (slices == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Can not find collection \"\n          + collection + \" in \" + this);\n    }\n    \n    Set<String> shards = slices.keySet();\n    ArrayList<String> shardList = new ArrayList<String>(shards.size());\n    shardList.addAll(shards);\n    Collections.sort(shardList);\n    \n    ranges = hp.partitionRange(shards.size());\n    \n    rangeInfo.ranges = ranges;\n    rangeInfo.shardList = shardList;\n    rangeInfos.put(collection, rangeInfo);\n    return rangeInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e147cce225492338f15a94a427f51f867da574ee","date":1346365916,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#addRangeInfo(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#addRangeInfo(String).mjava","sourceNew":"  private RangeInfo addRangeInfo(String collection) {\n    List<Range> ranges;\n    RangeInfo rangeInfo;\n    rangeInfo = new RangeInfo();\n\n    Map<String,Slice> slices = getSlices(collection);\n    \n    if (slices == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Can not find collection \"\n          + collection + \" in \" + this);\n    }\n    \n    Set<String> shards = slices.keySet();\n    ArrayList<String> shardList = new ArrayList<String>(shards.size());\n    shardList.addAll(shards);\n    Collections.sort(shardList);\n    \n    ranges = hp.partitionRange(shards.size(), Integer.MIN_VALUE, Integer.MAX_VALUE);\n    \n    rangeInfo.ranges = ranges;\n    rangeInfo.shardList = shardList;\n    rangeInfos.put(collection, rangeInfo);\n    return rangeInfo;\n  }\n\n","sourceOld":"  private RangeInfo addRangeInfo(String collection) {\n    List<Range> ranges;\n    RangeInfo rangeInfo;\n    rangeInfo = new RangeInfo();\n\n    Map<String,Slice> slices = getSlices(collection);\n    \n    if (slices == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Can not find collection \"\n          + collection + \" in \" + this);\n    }\n    \n    Set<String> shards = slices.keySet();\n    ArrayList<String> shardList = new ArrayList<String>(shards.size());\n    shardList.addAll(shards);\n    Collections.sort(shardList);\n    \n    ranges = hp.partitionRange(shards.size());\n    \n    rangeInfo.ranges = ranges;\n    rangeInfo.shardList = shardList;\n    rangeInfos.put(collection, rangeInfo);\n    return rangeInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#addRangeInfo(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#addRangeInfo(String).mjava","sourceNew":"  private RangeInfo addRangeInfo(String collection) {\n    List<Range> ranges;\n    RangeInfo rangeInfo;\n    rangeInfo = new RangeInfo();\n\n    Map<String,Slice> slices = getSlices(collection);\n    \n    if (slices == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Can not find collection \"\n          + collection + \" in \" + this);\n    }\n    \n    Set<String> shards = slices.keySet();\n    ArrayList<String> shardList = new ArrayList<String>(shards.size());\n    shardList.addAll(shards);\n    Collections.sort(shardList);\n    \n    ranges = hp.partitionRange(shards.size(), Integer.MIN_VALUE, Integer.MAX_VALUE);\n    \n    rangeInfo.ranges = ranges;\n    rangeInfo.shardList = shardList;\n    rangeInfos.put(collection, rangeInfo);\n    return rangeInfo;\n  }\n\n","sourceOld":"  private RangeInfo addRangeInfo(String collection) {\n    List<Range> ranges;\n    RangeInfo rangeInfo;\n    rangeInfo = new RangeInfo();\n\n    Map<String,Slice> slices = getSlices(collection);\n    \n    if (slices == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Can not find collection \"\n          + collection + \" in \" + this);\n    }\n    \n    Set<String> shards = slices.keySet();\n    ArrayList<String> shardList = new ArrayList<String>(shards.size());\n    shardList.addAll(shards);\n    Collections.sort(shardList);\n    \n    ranges = hp.partitionRange(shards.size());\n    \n    rangeInfo.ranges = ranges;\n    rangeInfo.shardList = shardList;\n    rangeInfos.put(collection, rangeInfo);\n    return rangeInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5a558d54519c651068ddb202f03befefb1514a7","date":1354382006,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#addRangeInfo(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#addRangeInfo(String).mjava","sourceNew":"  private RangeInfo addRangeInfo(String collection) {\n    List<Range> ranges;\n    RangeInfo rangeInfo;\n    rangeInfo = new RangeInfo();\n\n    DocCollection coll = getCollection(collection);\n    \n    Set<String> shards = coll.getSlicesMap().keySet();\n    ArrayList<String> shardList = new ArrayList<String>(shards.size());\n    shardList.addAll(shards);\n    Collections.sort(shardList);\n    \n    ranges = DocRouter.DEFAULT.partitionRange(shards.size(), Integer.MIN_VALUE, Integer.MAX_VALUE);\n    \n    rangeInfo.ranges = ranges;\n    rangeInfo.shardList = shardList;\n    rangeInfos.put(collection, rangeInfo);\n    return rangeInfo;\n  }\n\n","sourceOld":"  private RangeInfo addRangeInfo(String collection) {\n    List<Range> ranges;\n    RangeInfo rangeInfo;\n    rangeInfo = new RangeInfo();\n\n    Map<String,Slice> slices = getSlices(collection);\n    \n    if (slices == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Can not find collection \"\n          + collection + \" in \" + this);\n    }\n    \n    Set<String> shards = slices.keySet();\n    ArrayList<String> shardList = new ArrayList<String>(shards.size());\n    shardList.addAll(shards);\n    Collections.sort(shardList);\n    \n    ranges = hp.partitionRange(shards.size(), Integer.MIN_VALUE, Integer.MAX_VALUE);\n    \n    rangeInfo.ranges = ranges;\n    rangeInfo.shardList = shardList;\n    rangeInfos.put(collection, rangeInfo);\n    return rangeInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#addRangeInfo(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#addRangeInfo(String).mjava","sourceNew":"  private RangeInfo addRangeInfo(String collection) {\n    List<Range> ranges;\n    RangeInfo rangeInfo;\n    rangeInfo = new RangeInfo();\n\n    DocCollection coll = getCollection(collection);\n    \n    Set<String> shards = coll.getSlicesMap().keySet();\n    ArrayList<String> shardList = new ArrayList<String>(shards.size());\n    shardList.addAll(shards);\n    Collections.sort(shardList);\n    \n    ranges = DocRouter.DEFAULT.partitionRange(shards.size(), Integer.MIN_VALUE, Integer.MAX_VALUE);\n    \n    rangeInfo.ranges = ranges;\n    rangeInfo.shardList = shardList;\n    rangeInfos.put(collection, rangeInfo);\n    return rangeInfo;\n  }\n\n","sourceOld":"  private RangeInfo addRangeInfo(String collection) {\n    List<Range> ranges;\n    RangeInfo rangeInfo;\n    rangeInfo = new RangeInfo();\n\n    Map<String,Slice> slices = getSlices(collection);\n    \n    if (slices == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Can not find collection \"\n          + collection + \" in \" + this);\n    }\n    \n    Set<String> shards = slices.keySet();\n    ArrayList<String> shardList = new ArrayList<String>(shards.size());\n    shardList.addAll(shards);\n    Collections.sort(shardList);\n    \n    ranges = hp.partitionRange(shards.size(), Integer.MIN_VALUE, Integer.MAX_VALUE);\n    \n    rangeInfo.ranges = ranges;\n    rangeInfo.shardList = shardList;\n    rangeInfos.put(collection, rangeInfo);\n    return rangeInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56a558aa5aadd60ae850d1ab090098bc63bdfaf9","date":1355245333,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#addRangeInfo(String).mjava","sourceNew":null,"sourceOld":"  private RangeInfo addRangeInfo(String collection) {\n    List<Range> ranges;\n    RangeInfo rangeInfo;\n    rangeInfo = new RangeInfo();\n\n    DocCollection coll = getCollection(collection);\n    \n    Set<String> shards = coll.getSlicesMap().keySet();\n    ArrayList<String> shardList = new ArrayList<String>(shards.size());\n    shardList.addAll(shards);\n    Collections.sort(shardList);\n    \n    ranges = DocRouter.DEFAULT.partitionRange(shards.size(), Integer.MIN_VALUE, Integer.MAX_VALUE);\n    \n    rangeInfo.ranges = ranges;\n    rangeInfo.shardList = shardList;\n    rangeInfos.put(collection, rangeInfo);\n    return rangeInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#addRangeInfo(String).mjava","sourceNew":null,"sourceOld":"  private RangeInfo addRangeInfo(String collection) {\n    List<Range> ranges;\n    RangeInfo rangeInfo;\n    rangeInfo = new RangeInfo();\n\n    DocCollection coll = getCollection(collection);\n    \n    Set<String> shards = coll.getSlicesMap().keySet();\n    ArrayList<String> shardList = new ArrayList<String>(shards.size());\n    shardList.addAll(shards);\n    Collections.sort(shardList);\n    \n    ranges = DocRouter.DEFAULT.partitionRange(shards.size(), Integer.MIN_VALUE, Integer.MAX_VALUE);\n    \n    rangeInfo.ranges = ranges;\n    rangeInfo.shardList = shardList;\n    rangeInfos.put(collection, rangeInfo);\n    return rangeInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","56a558aa5aadd60ae850d1ab090098bc63bdfaf9"],"c5a558d54519c651068ddb202f03befefb1514a7":["e147cce225492338f15a94a427f51f867da574ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["e147cce225492338f15a94a427f51f867da574ee","c5a558d54519c651068ddb202f03befefb1514a7"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f767f8c99eaedb984df754fe61f21c5de260f94"],"e147cce225492338f15a94a427f51f867da574ee":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f767f8c99eaedb984df754fe61f21c5de260f94"],"56a558aa5aadd60ae850d1ab090098bc63bdfaf9":["c5a558d54519c651068ddb202f03befefb1514a7"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["d6f074e73200c07d54f242d3880a8da5a35ff97b","e147cce225492338f15a94a427f51f867da574ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["56a558aa5aadd60ae850d1ab090098bc63bdfaf9"]},"commit2Childs":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["d6f074e73200c07d54f242d3880a8da5a35ff97b","e147cce225492338f15a94a427f51f867da574ee","8fd5be977c105554c6a7b68afcdbc511439723ab"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f767f8c99eaedb984df754fe61f21c5de260f94","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"c5a558d54519c651068ddb202f03befefb1514a7":["407687e67faf6e1f02a211ca078d8e3eed631027","56a558aa5aadd60ae850d1ab090098bc63bdfaf9"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["05a14b2611ead08655a2b2bdc61632eb31316e57"],"e147cce225492338f15a94a427f51f867da574ee":["c5a558d54519c651068ddb202f03befefb1514a7","407687e67faf6e1f02a211ca078d8e3eed631027","05a14b2611ead08655a2b2bdc61632eb31316e57"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"56a558aa5aadd60ae850d1ab090098bc63bdfaf9":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","8fd5be977c105554c6a7b68afcdbc511439723ab","05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}