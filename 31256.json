{"path":"solr/core/src/java/org/apache/solr/pkg/PackageLoader.Package#updateVersions(List[PackageAPI.PkgVersion]).mjava","commits":[{"id":"954ae83b7dfacaa33d48ea056448ae11f7745a93","date":1571867711,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/pkg/PackageLoader.Package#updateVersions(List[PackageAPI.PkgVersion]).mjava","pathOld":"/dev/null","sourceNew":"    private synchronized void updateVersions(List<PackageAPI.PkgVersion> modified) {\n      for (PackageAPI.PkgVersion v : modified) {\n        Version version = myVersions.get(v.version);\n        if (version == null) {\n          log.info(\"A new version: {} added for package: {} with artifacts {}\", v.version, this.name, v.files);\n          myVersions.put(v.version, new Version(this, v));\n          sortedVersions.add(v.version);\n        }\n      }\n\n      Set<String> newVersions = new HashSet<>();\n      for (PackageAPI.PkgVersion v : modified) {\n        newVersions.add(v.version);\n      }\n      for (String s : new HashSet<>(myVersions.keySet())) {\n        if (!newVersions.contains(s)) {\n          log.info(\"version: {} is removed from package: {}\", s, this.name);\n          sortedVersions.remove(s);\n          myVersions.remove(s);\n        }\n      }\n\n      sortedVersions.sort(String::compareTo);\n      if (sortedVersions.size() > 0) {\n        String latest = sortedVersions.get(sortedVersions.size() - 1);\n        if (!latest.equals(this.latest)) {\n          log.info(\"version: {} is the new latest in package: {}\", latest, this.name);\n        }\n        this.latest = latest;\n      } else {\n        log.error(\"latest version:  null\");\n        latest = null;\n      }\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d218decf811b7a0a4d86218c54c79c74a962374b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7ad6d9d5ecce39e4f05f22760789982a48da89fa","date":1572289972,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/pkg/PackageLoader.Package#updateVersions(List[PackageAPI.PkgVersion]).mjava","pathOld":"solr/core/src/java/org/apache/solr/pkg/PackageLoader.Package#updateVersions(List[PackageAPI.PkgVersion]).mjava","sourceNew":"    private synchronized void updateVersions(List<PackageAPI.PkgVersion> modified) {\n      for (PackageAPI.PkgVersion v : modified) {\n        Version version = myVersions.get(v.version);\n        if (version == null) {\n          log.info(\"A new version: {} added for package: {} with artifacts {}\", v.version, this.name, v.files);\n          myVersions.put(v.version, new Version(this, v));\n          sortedVersions.add(v.version);\n        }\n      }\n\n      Set<String> newVersions = new HashSet<>();\n      for (PackageAPI.PkgVersion v : modified) {\n        newVersions.add(v.version);\n      }\n      for (String s : new HashSet<>(myVersions.keySet())) {\n        if (!newVersions.contains(s)) {\n          log.info(\"version: {} is removed from package: {}\", s, this.name);\n          sortedVersions.remove(s);\n          Version removed = myVersions.remove(s);\n          if (removed != null) {\n            IOUtils.closeQuietly((Closeable) removed);\n          }\n        }\n      }\n\n      sortedVersions.sort(String::compareTo);\n      if (sortedVersions.size() > 0) {\n        String latest = sortedVersions.get(sortedVersions.size() - 1);\n        if (!latest.equals(this.latest)) {\n          log.info(\"version: {} is the new latest in package: {}\", latest, this.name);\n        }\n        this.latest = latest;\n      } else {\n        log.error(\"latest version:  null\");\n        latest = null;\n      }\n\n    }\n\n","sourceOld":"    private synchronized void updateVersions(List<PackageAPI.PkgVersion> modified) {\n      for (PackageAPI.PkgVersion v : modified) {\n        Version version = myVersions.get(v.version);\n        if (version == null) {\n          log.info(\"A new version: {} added for package: {} with artifacts {}\", v.version, this.name, v.files);\n          myVersions.put(v.version, new Version(this, v));\n          sortedVersions.add(v.version);\n        }\n      }\n\n      Set<String> newVersions = new HashSet<>();\n      for (PackageAPI.PkgVersion v : modified) {\n        newVersions.add(v.version);\n      }\n      for (String s : new HashSet<>(myVersions.keySet())) {\n        if (!newVersions.contains(s)) {\n          log.info(\"version: {} is removed from package: {}\", s, this.name);\n          sortedVersions.remove(s);\n          myVersions.remove(s);\n        }\n      }\n\n      sortedVersions.sort(String::compareTo);\n      if (sortedVersions.size() > 0) {\n        String latest = sortedVersions.get(sortedVersions.size() - 1);\n        if (!latest.equals(this.latest)) {\n          log.info(\"version: {} is the new latest in package: {}\", latest, this.name);\n        }\n        this.latest = latest;\n      } else {\n        log.error(\"latest version:  null\");\n        latest = null;\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"18e0d88ac18697f82cf4faddd993f4a76ff22722","date":1572586400,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/pkg/PackageLoader.Package#updateVersions(List[PackageAPI.PkgVersion]).mjava","pathOld":"solr/core/src/java/org/apache/solr/pkg/PackageLoader.Package#updateVersions(List[PackageAPI.PkgVersion]).mjava","sourceNew":"    private synchronized void updateVersions(List<PackageAPI.PkgVersion> modified) {\n      for (PackageAPI.PkgVersion v : modified) {\n        Version version = myVersions.get(v.version);\n        if (version == null) {\n          log.info(\"A new version: {} added for package: {} with artifacts {}\", v.version, this.name, v.files);\n          myVersions.put(v.version, new Version(this, v));\n          sortedVersions.add(v.version);\n        }\n      }\n\n      Set<String> newVersions = new HashSet<>();\n      for (PackageAPI.PkgVersion v : modified) {\n        newVersions.add(v.version);\n      }\n      for (String s : new HashSet<>(myVersions.keySet())) {\n        if (!newVersions.contains(s)) {\n          log.info(\"version: {} is removed from package: {}\", s, this.name);\n          sortedVersions.remove(s);\n          Version removed = myVersions.remove(s);\n          if (removed != null) {\n            closeWhileHandlingException(removed);\n          }\n        }\n      }\n\n      sortedVersions.sort(String::compareTo);\n      if (sortedVersions.size() > 0) {\n        String latest = sortedVersions.get(sortedVersions.size() - 1);\n        if (!latest.equals(this.latest)) {\n          log.info(\"version: {} is the new latest in package: {}\", latest, this.name);\n        }\n        this.latest = latest;\n      } else {\n        log.error(\"latest version:  null\");\n        latest = null;\n      }\n\n    }\n\n","sourceOld":"    private synchronized void updateVersions(List<PackageAPI.PkgVersion> modified) {\n      for (PackageAPI.PkgVersion v : modified) {\n        Version version = myVersions.get(v.version);\n        if (version == null) {\n          log.info(\"A new version: {} added for package: {} with artifacts {}\", v.version, this.name, v.files);\n          myVersions.put(v.version, new Version(this, v));\n          sortedVersions.add(v.version);\n        }\n      }\n\n      Set<String> newVersions = new HashSet<>();\n      for (PackageAPI.PkgVersion v : modified) {\n        newVersions.add(v.version);\n      }\n      for (String s : new HashSet<>(myVersions.keySet())) {\n        if (!newVersions.contains(s)) {\n          log.info(\"version: {} is removed from package: {}\", s, this.name);\n          sortedVersions.remove(s);\n          Version removed = myVersions.remove(s);\n          if (removed != null) {\n            IOUtils.closeQuietly((Closeable) removed);\n          }\n        }\n      }\n\n      sortedVersions.sort(String::compareTo);\n      if (sortedVersions.size() > 0) {\n        String latest = sortedVersions.get(sortedVersions.size() - 1);\n        if (!latest.equals(this.latest)) {\n          log.info(\"version: {} is the new latest in package: {}\", latest, this.name);\n        }\n        this.latest = latest;\n      } else {\n        log.error(\"latest version:  null\");\n        latest = null;\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d218decf811b7a0a4d86218c54c79c74a962374b","date":1578632144,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/pkg/PackageLoader.Package#updateVersions(List[PackageAPI.PkgVersion]).mjava","pathOld":"solr/core/src/java/org/apache/solr/pkg/PackageLoader.Package#updateVersions(List[PackageAPI.PkgVersion]).mjava","sourceNew":"    private synchronized void updateVersions(List<PackageAPI.PkgVersion> modified) {\n      for (PackageAPI.PkgVersion v : modified) {\n        Version version = myVersions.get(v.version);\n        if (version == null) {\n          log.info(\"A new version: {} added for package: {} with artifacts {}\", v.version, this.name, v.files);\n          Version ver = null;\n          try {\n            ver = new Version(this, v);\n          } catch (Exception e) {\n            log.error(\"package could not be loaded \"+ ver.toString(), e);\n            continue;\n          }\n          myVersions.put(v.version, ver);\n          sortedVersions.add(v.version);\n        }\n      }\n\n      Set<String> newVersions = new HashSet<>();\n      for (PackageAPI.PkgVersion v : modified) {\n        newVersions.add(v.version);\n      }\n      for (String s : new HashSet<>(myVersions.keySet())) {\n        if (!newVersions.contains(s)) {\n          log.info(\"version: {} is removed from package: {}\", s, this.name);\n          sortedVersions.remove(s);\n          Version removed = myVersions.remove(s);\n          if (removed != null) {\n            closeWhileHandlingException(removed);\n          }\n        }\n      }\n\n      sortedVersions.sort(String::compareTo);\n      if (sortedVersions.size() > 0) {\n        String latest = sortedVersions.get(sortedVersions.size() - 1);\n        if (!latest.equals(this.latest)) {\n          log.info(\"version: {} is the new latest in package: {}\", latest, this.name);\n        }\n        this.latest = latest;\n      } else {\n        log.error(\"latest version:  null\");\n        latest = null;\n      }\n\n    }\n\n","sourceOld":"    private synchronized void updateVersions(List<PackageAPI.PkgVersion> modified) {\n      for (PackageAPI.PkgVersion v : modified) {\n        Version version = myVersions.get(v.version);\n        if (version == null) {\n          log.info(\"A new version: {} added for package: {} with artifacts {}\", v.version, this.name, v.files);\n          myVersions.put(v.version, new Version(this, v));\n          sortedVersions.add(v.version);\n        }\n      }\n\n      Set<String> newVersions = new HashSet<>();\n      for (PackageAPI.PkgVersion v : modified) {\n        newVersions.add(v.version);\n      }\n      for (String s : new HashSet<>(myVersions.keySet())) {\n        if (!newVersions.contains(s)) {\n          log.info(\"version: {} is removed from package: {}\", s, this.name);\n          sortedVersions.remove(s);\n          Version removed = myVersions.remove(s);\n          if (removed != null) {\n            closeWhileHandlingException(removed);\n          }\n        }\n      }\n\n      sortedVersions.sort(String::compareTo);\n      if (sortedVersions.size() > 0) {\n        String latest = sortedVersions.get(sortedVersions.size() - 1);\n        if (!latest.equals(this.latest)) {\n          log.info(\"version: {} is the new latest in package: {}\", latest, this.name);\n        }\n        this.latest = latest;\n      } else {\n        log.error(\"latest version:  null\");\n        latest = null;\n      }\n\n    }\n\n","bugFix":["954ae83b7dfacaa33d48ea056448ae11f7745a93"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8f0a7504661c8e51be5c63e87f9d79a36d9116c","date":1578657638,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/pkg/PackageLoader.Package#updateVersions(List[PackageAPI.PkgVersion]).mjava","pathOld":"solr/core/src/java/org/apache/solr/pkg/PackageLoader.Package#updateVersions(List[PackageAPI.PkgVersion]).mjava","sourceNew":"    private synchronized void updateVersions(List<PackageAPI.PkgVersion> modified) {\n      for (PackageAPI.PkgVersion v : modified) {\n        Version version = myVersions.get(v.version);\n        if (version == null) {\n          log.info(\"A new version: {} added for package: {} with artifacts {}\", v.version, this.name, v.files);\n          Version ver = null;\n          try {\n            ver = new Version(this, v);\n          } catch (Exception e) {\n            log.error(\"package could not be loaded \"+ ver.toString(), e);\n            continue;\n          }\n          myVersions.put(v.version, ver);\n          sortedVersions.add(v.version);\n        }\n      }\n\n      Set<String> newVersions = new HashSet<>();\n      for (PackageAPI.PkgVersion v : modified) {\n        newVersions.add(v.version);\n      }\n      for (String s : new HashSet<>(myVersions.keySet())) {\n        if (!newVersions.contains(s)) {\n          log.info(\"version: {} is removed from package: {}\", s, this.name);\n          sortedVersions.remove(s);\n          Version removed = myVersions.remove(s);\n          if (removed != null) {\n            closeWhileHandlingException(removed);\n          }\n        }\n      }\n\n      sortedVersions.sort(String::compareTo);\n      if (sortedVersions.size() > 0) {\n        String latest = sortedVersions.get(sortedVersions.size() - 1);\n        if (!latest.equals(this.latest)) {\n          log.info(\"version: {} is the new latest in package: {}\", latest, this.name);\n        }\n        this.latest = latest;\n      } else {\n        log.error(\"latest version:  null\");\n        latest = null;\n      }\n\n    }\n\n","sourceOld":"    private synchronized void updateVersions(List<PackageAPI.PkgVersion> modified) {\n      for (PackageAPI.PkgVersion v : modified) {\n        Version version = myVersions.get(v.version);\n        if (version == null) {\n          log.info(\"A new version: {} added for package: {} with artifacts {}\", v.version, this.name, v.files);\n          myVersions.put(v.version, new Version(this, v));\n          sortedVersions.add(v.version);\n        }\n      }\n\n      Set<String> newVersions = new HashSet<>();\n      for (PackageAPI.PkgVersion v : modified) {\n        newVersions.add(v.version);\n      }\n      for (String s : new HashSet<>(myVersions.keySet())) {\n        if (!newVersions.contains(s)) {\n          log.info(\"version: {} is removed from package: {}\", s, this.name);\n          sortedVersions.remove(s);\n          Version removed = myVersions.remove(s);\n          if (removed != null) {\n            closeWhileHandlingException(removed);\n          }\n        }\n      }\n\n      sortedVersions.sort(String::compareTo);\n      if (sortedVersions.size() > 0) {\n        String latest = sortedVersions.get(sortedVersions.size() - 1);\n        if (!latest.equals(this.latest)) {\n          log.info(\"version: {} is the new latest in package: {}\", latest, this.name);\n        }\n        this.latest = latest;\n      } else {\n        log.error(\"latest version:  null\");\n        latest = null;\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/pkg/PackageLoader.Package#updateVersions(List[PackageAPI.PkgVersion]).mjava","pathOld":"solr/core/src/java/org/apache/solr/pkg/PackageLoader.Package#updateVersions(List[PackageAPI.PkgVersion]).mjava","sourceNew":"    private synchronized void updateVersions(List<PackageAPI.PkgVersion> modified) {\n      for (PackageAPI.PkgVersion v : modified) {\n        Version version = myVersions.get(v.version);\n        if (version == null) {\n          log.info(\"A new version: {} added for package: {} with artifacts {}\", v.version, this.name, v.files);\n          Version ver = null;\n          try {\n            ver = new Version(this, v);\n          } catch (Exception e) {\n            log.error(\"package could not be loaded {}\", ver, e);\n            continue;\n          }\n          myVersions.put(v.version, ver);\n          sortedVersions.add(v.version);\n        }\n      }\n\n      Set<String> newVersions = new HashSet<>();\n      for (PackageAPI.PkgVersion v : modified) {\n        newVersions.add(v.version);\n      }\n      for (String s : new HashSet<>(myVersions.keySet())) {\n        if (!newVersions.contains(s)) {\n          log.info(\"version: {} is removed from package: {}\", s, this.name);\n          sortedVersions.remove(s);\n          Version removed = myVersions.remove(s);\n          if (removed != null) {\n            closeWhileHandlingException(removed);\n          }\n        }\n      }\n\n      sortedVersions.sort(String::compareTo);\n      if (sortedVersions.size() > 0) {\n        String latest = sortedVersions.get(sortedVersions.size() - 1);\n        if (!latest.equals(this.latest)) {\n          log.info(\"version: {} is the new latest in package: {}\", latest, this.name);\n        }\n        this.latest = latest;\n      } else {\n        log.error(\"latest version:  null\");\n        latest = null;\n      }\n\n    }\n\n","sourceOld":"    private synchronized void updateVersions(List<PackageAPI.PkgVersion> modified) {\n      for (PackageAPI.PkgVersion v : modified) {\n        Version version = myVersions.get(v.version);\n        if (version == null) {\n          log.info(\"A new version: {} added for package: {} with artifacts {}\", v.version, this.name, v.files);\n          Version ver = null;\n          try {\n            ver = new Version(this, v);\n          } catch (Exception e) {\n            log.error(\"package could not be loaded \"+ ver.toString(), e);\n            continue;\n          }\n          myVersions.put(v.version, ver);\n          sortedVersions.add(v.version);\n        }\n      }\n\n      Set<String> newVersions = new HashSet<>();\n      for (PackageAPI.PkgVersion v : modified) {\n        newVersions.add(v.version);\n      }\n      for (String s : new HashSet<>(myVersions.keySet())) {\n        if (!newVersions.contains(s)) {\n          log.info(\"version: {} is removed from package: {}\", s, this.name);\n          sortedVersions.remove(s);\n          Version removed = myVersions.remove(s);\n          if (removed != null) {\n            closeWhileHandlingException(removed);\n          }\n        }\n      }\n\n      sortedVersions.sort(String::compareTo);\n      if (sortedVersions.size() > 0) {\n        String latest = sortedVersions.get(sortedVersions.size() - 1);\n        if (!latest.equals(this.latest)) {\n          log.info(\"version: {} is the new latest in package: {}\", latest, this.name);\n        }\n        this.latest = latest;\n      } else {\n        log.error(\"latest version:  null\");\n        latest = null;\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b8f0a7504661c8e51be5c63e87f9d79a36d9116c":["18e0d88ac18697f82cf4faddd993f4a76ff22722","d218decf811b7a0a4d86218c54c79c74a962374b"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["d218decf811b7a0a4d86218c54c79c74a962374b"],"954ae83b7dfacaa33d48ea056448ae11f7745a93":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d218decf811b7a0a4d86218c54c79c74a962374b":["18e0d88ac18697f82cf4faddd993f4a76ff22722"],"18e0d88ac18697f82cf4faddd993f4a76ff22722":["7ad6d9d5ecce39e4f05f22760789982a48da89fa"],"7ad6d9d5ecce39e4f05f22760789982a48da89fa":["954ae83b7dfacaa33d48ea056448ae11f7745a93"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"]},"commit2Childs":{"b8f0a7504661c8e51be5c63e87f9d79a36d9116c":[],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"954ae83b7dfacaa33d48ea056448ae11f7745a93":["7ad6d9d5ecce39e4f05f22760789982a48da89fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["954ae83b7dfacaa33d48ea056448ae11f7745a93"],"18e0d88ac18697f82cf4faddd993f4a76ff22722":["b8f0a7504661c8e51be5c63e87f9d79a36d9116c","d218decf811b7a0a4d86218c54c79c74a962374b"],"d218decf811b7a0a4d86218c54c79c74a962374b":["b8f0a7504661c8e51be5c63e87f9d79a36d9116c","54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"7ad6d9d5ecce39e4f05f22760789982a48da89fa":["18e0d88ac18697f82cf4faddd993f4a76ff22722"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b8f0a7504661c8e51be5c63e87f9d79a36d9116c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}