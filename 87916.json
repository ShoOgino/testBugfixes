{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/core/TypeTokenFilter#accept().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/core/TypeTokenFilter#accept().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/core/TypeTokenFilter#accept().mjava","sourceNew":"  /**\n   * By default accept the token if its type is not a stop type.\n   * When the useWhiteList parameter is set to true then accept the token if its type is contained in the stopTypes\n   */\n  @Override\n  protected boolean accept() throws IOException {\n    return useWhiteList == stopTypes.contains(typeAttribute.type());\n  }\n\n","sourceOld":"  /**\n   * By default accept the token if its type is not a stop type.\n   * When the useWhiteList parameter is set to true then accept the token if its type is contained in the stopTypes\n   */\n  @Override\n  protected boolean accept() throws IOException {\n    return useWhiteList == stopTypes.contains(typeAttribute.type());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/core/TypeTokenFilter#accept().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/core/TypeTokenFilter#accept().mjava","sourceNew":"  /**\n   * By default accept the token if its type is not a stop type.\n   * When the useWhiteList parameter is set to true then accept the token if its type is contained in the stopTypes\n   */\n  @Override\n  protected boolean accept() {\n    return useWhiteList == stopTypes.contains(typeAttribute.type());\n  }\n\n","sourceOld":"  /**\n   * By default accept the token if its type is not a stop type.\n   * When the useWhiteList parameter is set to true then accept the token if its type is contained in the stopTypes\n   */\n  @Override\n  protected boolean accept() throws IOException {\n    return useWhiteList == stopTypes.contains(typeAttribute.type());\n  }\n\n","bugFix":["ba64142b9196306ad35a6d525c0bdf5fd411690a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/core/TypeTokenFilter#accept().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/core/TypeTokenFilter#accept().mjava","sourceNew":"  /**\n   * By default accept the token if its type is not a stop type.\n   * When the useWhiteList parameter is set to true then accept the token if its type is contained in the stopTypes\n   */\n  @Override\n  protected boolean accept() {\n    return useWhiteList == stopTypes.contains(typeAttribute.type());\n  }\n\n","sourceOld":"  /**\n   * By default accept the token if its type is not a stop type.\n   * When the useWhiteList parameter is set to true then accept the token if its type is contained in the stopTypes\n   */\n  @Override\n  protected boolean accept() throws IOException {\n    return useWhiteList == stopTypes.contains(typeAttribute.type());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}