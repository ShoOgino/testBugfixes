{"path":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertFields(InvertedFields,InvertedFields,boolean).mjava","commits":[{"id":"d08eba3d52b63561ebf936481ce73e6b6a14aa03","date":1333879759,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertFields(InvertedFields,InvertedFields,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertFields(Fields,Fields,boolean).mjava","sourceNew":"  /** \n   * InvertedFields api equivalency\n   */\n  public void assertFields(InvertedFields leftFields, InvertedFields rightFields, boolean deep) throws Exception {\n    // InvertedFields could be null if there are no postings,\n    // but then it must be null for both\n    if (leftFields == null || rightFields == null) {\n      assertNull(info, leftFields);\n      assertNull(info, rightFields);\n      return;\n    }\n    assertFieldStatistics(leftFields, rightFields);\n    \n    FieldsEnum leftEnum = leftFields.iterator();\n    FieldsEnum rightEnum = rightFields.iterator();\n    \n    String field;\n    while ((field = leftEnum.next()) != null) {\n      assertEquals(info, field, rightEnum.next());\n      assertTerms(leftEnum.terms(), rightEnum.terms(), deep);\n    }\n    assertNull(rightEnum.next());\n  }\n\n","sourceOld":"  /** \n   * Fields api equivalency \n   */\n  public void assertFields(Fields leftFields, Fields rightFields, boolean deep) throws Exception {\n    // Fields could be null if there are no postings,\n    // but then it must be null for both\n    if (leftFields == null || rightFields == null) {\n      assertNull(info, leftFields);\n      assertNull(info, rightFields);\n      return;\n    }\n    assertFieldStatistics(leftFields, rightFields);\n    \n    FieldsEnum leftEnum = leftFields.iterator();\n    FieldsEnum rightEnum = rightFields.iterator();\n    \n    String field;\n    while ((field = leftEnum.next()) != null) {\n      assertEquals(info, field, rightEnum.next());\n      assertTerms(leftEnum.terms(), rightEnum.terms(), deep);\n    }\n    assertNull(rightEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","date":1333892281,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertFields(Fields,Fields,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertFields(InvertedFields,InvertedFields,boolean).mjava","sourceNew":"  /** \n   * Fields api equivalency \n   */\n  public void assertFields(Fields leftFields, Fields rightFields, boolean deep) throws Exception {\n    // Fields could be null if there are no postings,\n    // but then it must be null for both\n    if (leftFields == null || rightFields == null) {\n      assertNull(info, leftFields);\n      assertNull(info, rightFields);\n      return;\n    }\n    assertFieldStatistics(leftFields, rightFields);\n    \n    FieldsEnum leftEnum = leftFields.iterator();\n    FieldsEnum rightEnum = rightFields.iterator();\n    \n    String field;\n    while ((field = leftEnum.next()) != null) {\n      assertEquals(info, field, rightEnum.next());\n      assertTerms(leftEnum.terms(), rightEnum.terms(), deep);\n    }\n    assertNull(rightEnum.next());\n  }\n\n","sourceOld":"  /** \n   * InvertedFields api equivalency\n   */\n  public void assertFields(InvertedFields leftFields, InvertedFields rightFields, boolean deep) throws Exception {\n    // InvertedFields could be null if there are no postings,\n    // but then it must be null for both\n    if (leftFields == null || rightFields == null) {\n      assertNull(info, leftFields);\n      assertNull(info, rightFields);\n      return;\n    }\n    assertFieldStatistics(leftFields, rightFields);\n    \n    FieldsEnum leftEnum = leftFields.iterator();\n    FieldsEnum rightEnum = rightFields.iterator();\n    \n    String field;\n    while ((field = leftEnum.next()) != null) {\n      assertEquals(info, field, rightEnum.next());\n      assertTerms(leftEnum.terms(), rightEnum.terms(), deep);\n    }\n    assertNull(rightEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}