{"path":"solr/solrj/src/java/org/apache/solr/common/MapWriter#toMap(Map[String,Object]).mjava","commits":[{"id":"50f05d6b69cfaabd51b5d26cba4e3122f51fff83","date":1478603228,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/MapWriter#toMap(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  default Map toMap(Map<String, Object> map) {\n    try {\n      writeMap(new EntryWriter() {\n        @Override\n        public EntryWriter put(String k, Object v) throws IOException {\n          map.put(k, v);\n          return this;\n        }\n\n      });\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return map;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/MapWriter#toMap(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  default Map toMap(Map<String, Object> map) {\n    try {\n      writeMap(new EntryWriter() {\n        @Override\n        public EntryWriter put(String k, Object v) throws IOException {\n          map.put(k, v);\n          return this;\n        }\n\n      });\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return map;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cf93ce8d2bc0210731dd8d840f40b183df2c804","date":1489476316,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/MapWriter#toMap(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/MapWriter#toMap(Map[String,Object]).mjava","sourceNew":"  @Override\n  default Map toMap(Map<String, Object> map) {\n    try {\n      writeMap(new EntryWriter() {\n        @Override\n        public EntryWriter put(String k, Object v) throws IOException {\n          if (v instanceof MapWriter) v = ((MapWriter) v).toMap(new LinkedHashMap<>());\n          if (v instanceof IteratorWriter) v = ((IteratorWriter) v).toList(new ArrayList<>());\n          map.put(k, v);\n          return this;\n        }\n\n      });\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return map;\n  }\n\n","sourceOld":"  @Override\n  default Map toMap(Map<String, Object> map) {\n    try {\n      writeMap(new EntryWriter() {\n        @Override\n        public EntryWriter put(String k, Object v) throws IOException {\n          map.put(k, v);\n          return this;\n        }\n\n      });\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/MapWriter#toMap(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/MapWriter#toMap(Map[String,Object]).mjava","sourceNew":"  @Override\n  default Map toMap(Map<String, Object> map) {\n    try {\n      writeMap(new EntryWriter() {\n        @Override\n        public EntryWriter put(String k, Object v) throws IOException {\n          if (v instanceof MapWriter) v = ((MapWriter) v).toMap(new LinkedHashMap<>());\n          if (v instanceof IteratorWriter) v = ((IteratorWriter) v).toList(new ArrayList<>());\n          map.put(k, v);\n          return this;\n        }\n\n      });\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return map;\n  }\n\n","sourceOld":"  @Override\n  default Map toMap(Map<String, Object> map) {\n    try {\n      writeMap(new EntryWriter() {\n        @Override\n        public EntryWriter put(String k, Object v) throws IOException {\n          map.put(k, v);\n          return this;\n        }\n\n      });\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/MapWriter#toMap(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/MapWriter#toMap(Map[String,Object]).mjava","sourceNew":"  @Override\n  default Map toMap(Map<String, Object> map) {\n    try {\n      writeMap(new EntryWriter() {\n        @Override\n        public EntryWriter put(String k, Object v) throws IOException {\n          if (v instanceof MapWriter) v = ((MapWriter) v).toMap(new LinkedHashMap<>());\n          if (v instanceof IteratorWriter) v = ((IteratorWriter) v).toList(new ArrayList<>());\n          map.put(k, v);\n          return this;\n        }\n\n      });\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return map;\n  }\n\n","sourceOld":"  @Override\n  default Map toMap(Map<String, Object> map) {\n    try {\n      writeMap(new EntryWriter() {\n        @Override\n        public EntryWriter put(String k, Object v) throws IOException {\n          map.put(k, v);\n          return this;\n        }\n\n      });\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/MapWriter#toMap(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/MapWriter#toMap(Map[String,Object]).mjava","sourceNew":"  @Override\n  default Map toMap(Map<String, Object> map) {\n    try {\n      writeMap(new EntryWriter() {\n        @Override\n        public EntryWriter put(String k, Object v) throws IOException {\n          if (v instanceof MapWriter) v = ((MapWriter) v).toMap(new LinkedHashMap<>());\n          if (v instanceof IteratorWriter) v = ((IteratorWriter) v).toList(new ArrayList<>());\n          map.put(k, v);\n          return this;\n        }\n\n      });\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return map;\n  }\n\n","sourceOld":"  @Override\n  default Map toMap(Map<String, Object> map) {\n    try {\n      writeMap(new EntryWriter() {\n        @Override\n        public EntryWriter put(String k, Object v) throws IOException {\n          map.put(k, v);\n          return this;\n        }\n\n      });\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/MapWriter#toMap(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/MapWriter#toMap(Map[String,Object]).mjava","sourceNew":"  @Override\n  default Map toMap(Map<String, Object> map) {\n    try {\n      writeMap(new EntryWriter() {\n        @Override\n        public EntryWriter put(String k, Object v) throws IOException {\n          if (v instanceof MapWriter) v = ((MapWriter) v).toMap(new LinkedHashMap<>());\n          if (v instanceof IteratorWriter) v = ((IteratorWriter) v).toList(new ArrayList<>());\n          if (v instanceof Iterable) {\n            List lst = new ArrayList();\n            for (Object vv : (Iterable)v) {\n              if (vv instanceof MapWriter) vv = ((MapWriter) vv).toMap(new LinkedHashMap<>());\n              if (vv instanceof IteratorWriter) vv = ((IteratorWriter) vv).toList(new ArrayList<>());\n              lst.add(vv);\n            }\n            v = lst;\n          }\n          if (v instanceof Map) {\n            Map map = new LinkedHashMap();\n            for (Map.Entry<?, ?> entry : ((Map<?, ?>)v).entrySet()) {\n              Object vv = entry.getValue();\n              if (vv instanceof MapWriter) vv = ((MapWriter) vv).toMap(new LinkedHashMap<>());\n              if (vv instanceof IteratorWriter) vv = ((IteratorWriter) vv).toList(new ArrayList<>());\n              map.put(entry.getKey(), vv);\n            }\n            v = map;\n          }\n          map.put(k, v);\n          return this;\n        }\n\n      });\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return map;\n  }\n\n","sourceOld":"  @Override\n  default Map toMap(Map<String, Object> map) {\n    try {\n      writeMap(new EntryWriter() {\n        @Override\n        public EntryWriter put(String k, Object v) throws IOException {\n          if (v instanceof MapWriter) v = ((MapWriter) v).toMap(new LinkedHashMap<>());\n          if (v instanceof IteratorWriter) v = ((IteratorWriter) v).toList(new ArrayList<>());\n          map.put(k, v);\n          return this;\n        }\n\n      });\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/MapWriter#toMap(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/MapWriter#toMap(Map[String,Object]).mjava","sourceNew":"  @Override\n  default Map toMap(Map<String, Object> map) {\n    try {\n      writeMap(new EntryWriter() {\n        @Override\n        public EntryWriter put(String k, Object v) throws IOException {\n          if (v instanceof MapWriter) v = ((MapWriter) v).toMap(new LinkedHashMap<>());\n          if (v instanceof IteratorWriter) v = ((IteratorWriter) v).toList(new ArrayList<>());\n          if (v instanceof Iterable) {\n            List lst = new ArrayList();\n            for (Object vv : (Iterable)v) {\n              if (vv instanceof MapWriter) vv = ((MapWriter) vv).toMap(new LinkedHashMap<>());\n              if (vv instanceof IteratorWriter) vv = ((IteratorWriter) vv).toList(new ArrayList<>());\n              lst.add(vv);\n            }\n            v = lst;\n          }\n          if (v instanceof Map) {\n            Map map = new LinkedHashMap();\n            for (Map.Entry<?, ?> entry : ((Map<?, ?>)v).entrySet()) {\n              Object vv = entry.getValue();\n              if (vv instanceof MapWriter) vv = ((MapWriter) vv).toMap(new LinkedHashMap<>());\n              if (vv instanceof IteratorWriter) vv = ((IteratorWriter) vv).toList(new ArrayList<>());\n              map.put(entry.getKey(), vv);\n            }\n            v = map;\n          }\n          map.put(k, v);\n          return this;\n        }\n\n      });\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return map;\n  }\n\n","sourceOld":"  @Override\n  default Map toMap(Map<String, Object> map) {\n    try {\n      writeMap(new EntryWriter() {\n        @Override\n        public EntryWriter put(String k, Object v) throws IOException {\n          if (v instanceof MapWriter) v = ((MapWriter) v).toMap(new LinkedHashMap<>());\n          if (v instanceof IteratorWriter) v = ((IteratorWriter) v).toList(new ArrayList<>());\n          map.put(k, v);\n          return this;\n        }\n\n      });\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/MapWriter#toMap(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/MapWriter#toMap(Map[String,Object]).mjava","sourceNew":"  @Override\n  default Map toMap(Map<String, Object> map) {\n    try {\n      writeMap(new EntryWriter() {\n        @Override\n        public EntryWriter put(String k, Object v) throws IOException {\n          if (v instanceof MapWriter) v = ((MapWriter) v).toMap(new LinkedHashMap<>());\n          if (v instanceof IteratorWriter) v = ((IteratorWriter) v).toList(new ArrayList<>());\n          if (v instanceof Iterable) {\n            List lst = new ArrayList();\n            for (Object vv : (Iterable)v) {\n              if (vv instanceof MapWriter) vv = ((MapWriter) vv).toMap(new LinkedHashMap<>());\n              if (vv instanceof IteratorWriter) vv = ((IteratorWriter) vv).toList(new ArrayList<>());\n              lst.add(vv);\n            }\n            v = lst;\n          }\n          if (v instanceof Map) {\n            Map map = new LinkedHashMap();\n            for (Map.Entry<?, ?> entry : ((Map<?, ?>)v).entrySet()) {\n              Object vv = entry.getValue();\n              if (vv instanceof MapWriter) vv = ((MapWriter) vv).toMap(new LinkedHashMap<>());\n              if (vv instanceof IteratorWriter) vv = ((IteratorWriter) vv).toList(new ArrayList<>());\n              map.put(entry.getKey(), vv);\n            }\n            v = map;\n          }\n          map.put(k, v);\n          return this;\n        }\n\n      });\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return map;\n  }\n\n","sourceOld":"  @Override\n  default Map toMap(Map<String, Object> map) {\n    try {\n      writeMap(new EntryWriter() {\n        @Override\n        public EntryWriter put(String k, Object v) throws IOException {\n          if (v instanceof MapWriter) v = ((MapWriter) v).toMap(new LinkedHashMap<>());\n          if (v instanceof IteratorWriter) v = ((IteratorWriter) v).toList(new ArrayList<>());\n          map.put(k, v);\n          return this;\n        }\n\n      });\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"129e5b874f99ae4e04f39c337c940dda690f2d38","date":1524504409,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/MapWriter#toMap(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/MapWriter#toMap(Map[String,Object]).mjava","sourceNew":"  @Override\n  default Map toMap(Map<String, Object> map) {\n    try {\n      writeMap(new EntryWriter() {\n        @Override\n        public EntryWriter put(String k, Object v) throws IOException {\n          if (v instanceof MapWriter) v = ((MapWriter) v).toMap(new LinkedHashMap<>());\n          if (v instanceof IteratorWriter) v = ((IteratorWriter) v).toList(new ArrayList<>());\n          if (v instanceof Iterable) {\n            List lst = new ArrayList();\n            for (Object vv : (Iterable)v) {\n              if (vv instanceof MapWriter) vv = ((MapWriter) vv).toMap(new LinkedHashMap<>());\n              if (vv instanceof IteratorWriter) vv = ((IteratorWriter) vv).toList(new ArrayList<>());\n              lst.add(vv);\n            }\n            v = lst;\n          }\n          if (v instanceof Map) {\n            Map map = new LinkedHashMap();\n            for (Map.Entry<?, ?> entry : ((Map<?, ?>)v).entrySet()) {\n              Object vv = entry.getValue();\n              if (vv instanceof MapWriter) vv = ((MapWriter) vv).toMap(new LinkedHashMap<>());\n              if (vv instanceof IteratorWriter) vv = ((IteratorWriter) vv).toList(new ArrayList<>());\n              map.put(entry.getKey(), vv);\n            }\n            v = map;\n          }\n          map.put(k, v);\n          // note: It'd be nice to assert that there is no previous value at 'k' but it's possible the passed in\n          // map is already populated and the intention is to overwrite.\n          return this;\n        }\n\n      });\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return map;\n  }\n\n","sourceOld":"  @Override\n  default Map toMap(Map<String, Object> map) {\n    try {\n      writeMap(new EntryWriter() {\n        @Override\n        public EntryWriter put(String k, Object v) throws IOException {\n          if (v instanceof MapWriter) v = ((MapWriter) v).toMap(new LinkedHashMap<>());\n          if (v instanceof IteratorWriter) v = ((IteratorWriter) v).toList(new ArrayList<>());\n          if (v instanceof Iterable) {\n            List lst = new ArrayList();\n            for (Object vv : (Iterable)v) {\n              if (vv instanceof MapWriter) vv = ((MapWriter) vv).toMap(new LinkedHashMap<>());\n              if (vv instanceof IteratorWriter) vv = ((IteratorWriter) vv).toList(new ArrayList<>());\n              lst.add(vv);\n            }\n            v = lst;\n          }\n          if (v instanceof Map) {\n            Map map = new LinkedHashMap();\n            for (Map.Entry<?, ?> entry : ((Map<?, ?>)v).entrySet()) {\n              Object vv = entry.getValue();\n              if (vv instanceof MapWriter) vv = ((MapWriter) vv).toMap(new LinkedHashMap<>());\n              if (vv instanceof IteratorWriter) vv = ((IteratorWriter) vv).toList(new ArrayList<>());\n              map.put(entry.getKey(), vv);\n            }\n            v = map;\n          }\n          map.put(k, v);\n          return this;\n        }\n\n      });\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c9780b447ddf847479e7fa9978cb7809a15a0bf","date":1538692320,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/MapWriter#toMap(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/MapWriter#toMap(Map[String,Object]).mjava","sourceNew":"  @Override\n  default Map toMap(Map<String, Object> map) {\n    try {\n      writeMap(new EntryWriter() {\n        @Override\n        public EntryWriter put(String k, Object v) {\n          if (v instanceof MapWriter) v = ((MapWriter) v).toMap(new LinkedHashMap<>());\n          if (v instanceof IteratorWriter) v = ((IteratorWriter) v).toList(new ArrayList<>());\n          if (v instanceof Iterable) {\n            List lst = new ArrayList();\n            for (Object vv : (Iterable)v) {\n              if (vv instanceof MapWriter) vv = ((MapWriter) vv).toMap(new LinkedHashMap<>());\n              if (vv instanceof IteratorWriter) vv = ((IteratorWriter) vv).toList(new ArrayList<>());\n              lst.add(vv);\n            }\n            v = lst;\n          }\n          if (v instanceof Map) {\n            Map map = new LinkedHashMap();\n            for (Map.Entry<?, ?> entry : ((Map<?, ?>)v).entrySet()) {\n              Object vv = entry.getValue();\n              if (vv instanceof MapWriter) vv = ((MapWriter) vv).toMap(new LinkedHashMap<>());\n              if (vv instanceof IteratorWriter) vv = ((IteratorWriter) vv).toList(new ArrayList<>());\n              map.put(entry.getKey(), vv);\n            }\n            v = map;\n          }\n          map.put(k, v);\n          // note: It'd be nice to assert that there is no previous value at 'k' but it's possible the passed in\n          // map is already populated and the intention is to overwrite.\n          return this;\n        }\n\n      });\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return map;\n  }\n\n","sourceOld":"  @Override\n  default Map toMap(Map<String, Object> map) {\n    try {\n      writeMap(new EntryWriter() {\n        @Override\n        public EntryWriter put(String k, Object v) throws IOException {\n          if (v instanceof MapWriter) v = ((MapWriter) v).toMap(new LinkedHashMap<>());\n          if (v instanceof IteratorWriter) v = ((IteratorWriter) v).toList(new ArrayList<>());\n          if (v instanceof Iterable) {\n            List lst = new ArrayList();\n            for (Object vv : (Iterable)v) {\n              if (vv instanceof MapWriter) vv = ((MapWriter) vv).toMap(new LinkedHashMap<>());\n              if (vv instanceof IteratorWriter) vv = ((IteratorWriter) vv).toList(new ArrayList<>());\n              lst.add(vv);\n            }\n            v = lst;\n          }\n          if (v instanceof Map) {\n            Map map = new LinkedHashMap();\n            for (Map.Entry<?, ?> entry : ((Map<?, ?>)v).entrySet()) {\n              Object vv = entry.getValue();\n              if (vv instanceof MapWriter) vv = ((MapWriter) vv).toMap(new LinkedHashMap<>());\n              if (vv instanceof IteratorWriter) vv = ((IteratorWriter) vv).toList(new ArrayList<>());\n              map.put(entry.getKey(), vv);\n            }\n            v = map;\n          }\n          map.put(k, v);\n          // note: It'd be nice to assert that there is no previous value at 'k' but it's possible the passed in\n          // map is already populated and the intention is to overwrite.\n          return this;\n        }\n\n      });\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"457ac99a6d7227f954082cc753a08b18225e4553","date":1540167281,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/MapWriter#toMap(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/MapWriter#toMap(Map[String,Object]).mjava","sourceNew":"  @Override\n  default Map toMap(Map<String, Object> map) {\n    try {\n      writeMap(new EntryWriter() {\n        @Override\n        public EntryWriter put(CharSequence k, Object v) {\n          if (v instanceof MapWriter) v = ((MapWriter) v).toMap(new LinkedHashMap<>());\n          if (v instanceof IteratorWriter) v = ((IteratorWriter) v).toList(new ArrayList<>());\n          if (v instanceof Iterable) {\n            List lst = new ArrayList();\n            for (Object vv : (Iterable)v) {\n              if (vv instanceof MapWriter) vv = ((MapWriter) vv).toMap(new LinkedHashMap<>());\n              if (vv instanceof IteratorWriter) vv = ((IteratorWriter) vv).toList(new ArrayList<>());\n              lst.add(vv);\n            }\n            v = lst;\n          }\n          if (v instanceof Map) {\n            Map map = new LinkedHashMap();\n            for (Map.Entry<?, ?> entry : ((Map<?, ?>)v).entrySet()) {\n              Object vv = entry.getValue();\n              if (vv instanceof MapWriter) vv = ((MapWriter) vv).toMap(new LinkedHashMap<>());\n              if (vv instanceof IteratorWriter) vv = ((IteratorWriter) vv).toList(new ArrayList<>());\n              map.put(entry.getKey(), vv);\n            }\n            v = map;\n          }\n          map.put(k==null? null : k.toString(), v);\n          // note: It'd be nice to assert that there is no previous value at 'k' but it's possible the passed in\n          // map is already populated and the intention is to overwrite.\n          return this;\n        }\n\n      });\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return map;\n  }\n\n","sourceOld":"  @Override\n  default Map toMap(Map<String, Object> map) {\n    try {\n      writeMap(new EntryWriter() {\n        @Override\n        public EntryWriter put(String k, Object v) {\n          if (v instanceof MapWriter) v = ((MapWriter) v).toMap(new LinkedHashMap<>());\n          if (v instanceof IteratorWriter) v = ((IteratorWriter) v).toList(new ArrayList<>());\n          if (v instanceof Iterable) {\n            List lst = new ArrayList();\n            for (Object vv : (Iterable)v) {\n              if (vv instanceof MapWriter) vv = ((MapWriter) vv).toMap(new LinkedHashMap<>());\n              if (vv instanceof IteratorWriter) vv = ((IteratorWriter) vv).toList(new ArrayList<>());\n              lst.add(vv);\n            }\n            v = lst;\n          }\n          if (v instanceof Map) {\n            Map map = new LinkedHashMap();\n            for (Map.Entry<?, ?> entry : ((Map<?, ?>)v).entrySet()) {\n              Object vv = entry.getValue();\n              if (vv instanceof MapWriter) vv = ((MapWriter) vv).toMap(new LinkedHashMap<>());\n              if (vv instanceof IteratorWriter) vv = ((IteratorWriter) vv).toList(new ArrayList<>());\n              map.put(entry.getKey(), vv);\n            }\n            v = map;\n          }\n          map.put(k, v);\n          // note: It'd be nice to assert that there is no previous value at 'k' but it's possible the passed in\n          // map is already populated and the intention is to overwrite.\n          return this;\n        }\n\n      });\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/MapWriter#toMap(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/MapWriter#toMap(Map[String,Object]).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  default Map toMap(Map<String, Object> map) {\n    try {\n      writeMap(new EntryWriter() {\n        @Override\n        public EntryWriter put(CharSequence k, Object v) {\n          if (v instanceof MapWriter) v = ((MapWriter) v).toMap(new LinkedHashMap<>());\n          if (v instanceof IteratorWriter) v = ((IteratorWriter) v).toList(new ArrayList<>());\n          if (v instanceof Iterable) {\n            List lst = new ArrayList();\n            for (Object vv : (Iterable)v) {\n              if (vv instanceof MapWriter) vv = ((MapWriter) vv).toMap(new LinkedHashMap<>());\n              if (vv instanceof IteratorWriter) vv = ((IteratorWriter) vv).toList(new ArrayList<>());\n              lst.add(vv);\n            }\n            v = lst;\n          }\n          if (v instanceof Map) {\n            Map map = new LinkedHashMap();\n            for (Map.Entry<?, ?> entry : ((Map<?, ?>)v).entrySet()) {\n              Object vv = entry.getValue();\n              if (vv instanceof MapWriter) vv = ((MapWriter) vv).toMap(new LinkedHashMap<>());\n              if (vv instanceof IteratorWriter) vv = ((IteratorWriter) vv).toList(new ArrayList<>());\n              map.put(entry.getKey(), vv);\n            }\n            v = map;\n          }\n          map.put(k==null? null : k.toString(), v);\n          // note: It'd be nice to assert that there is no previous value at 'k' but it's possible the passed in\n          // map is already populated and the intention is to overwrite.\n          return this;\n        }\n\n      });\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return map;\n  }\n\n","sourceOld":"  @Override\n  default Map toMap(Map<String, Object> map) {\n    try {\n      writeMap(new EntryWriter() {\n        @Override\n        public EntryWriter put(CharSequence k, Object v) {\n          if (v instanceof MapWriter) v = ((MapWriter) v).toMap(new LinkedHashMap<>());\n          if (v instanceof IteratorWriter) v = ((IteratorWriter) v).toList(new ArrayList<>());\n          if (v instanceof Iterable) {\n            List lst = new ArrayList();\n            for (Object vv : (Iterable)v) {\n              if (vv instanceof MapWriter) vv = ((MapWriter) vv).toMap(new LinkedHashMap<>());\n              if (vv instanceof IteratorWriter) vv = ((IteratorWriter) vv).toList(new ArrayList<>());\n              lst.add(vv);\n            }\n            v = lst;\n          }\n          if (v instanceof Map) {\n            Map map = new LinkedHashMap();\n            for (Map.Entry<?, ?> entry : ((Map<?, ?>)v).entrySet()) {\n              Object vv = entry.getValue();\n              if (vv instanceof MapWriter) vv = ((MapWriter) vv).toMap(new LinkedHashMap<>());\n              if (vv instanceof IteratorWriter) vv = ((IteratorWriter) vv).toList(new ArrayList<>());\n              map.put(entry.getKey(), vv);\n            }\n            v = map;\n          }\n          map.put(k==null? null : k.toString(), v);\n          // note: It'd be nice to assert that there is no previous value at 'k' but it's possible the passed in\n          // map is already populated and the intention is to overwrite.\n          return this;\n        }\n\n      });\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/MapWriter#toMap(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/MapWriter#toMap(Map[String,Object]).mjava","sourceNew":"  @Override\n  default Map toMap(Map<String, Object> map) {\n    try {\n      writeMap(new EntryWriter() {\n        @Override\n        public EntryWriter put(CharSequence k, Object v) {\n          if (v instanceof MapWriter) v = ((MapWriter) v).toMap(new LinkedHashMap<>());\n          if (v instanceof IteratorWriter) v = ((IteratorWriter) v).toList(new ArrayList<>());\n          if (v instanceof Iterable) {\n            List lst = new ArrayList();\n            for (Object vv : (Iterable)v) {\n              if (vv instanceof MapWriter) vv = ((MapWriter) vv).toMap(new LinkedHashMap<>());\n              if (vv instanceof IteratorWriter) vv = ((IteratorWriter) vv).toList(new ArrayList<>());\n              lst.add(vv);\n            }\n            v = lst;\n          }\n          if (v instanceof Map) {\n            Map map = new LinkedHashMap();\n            for (Map.Entry<?, ?> entry : ((Map<?, ?>)v).entrySet()) {\n              Object vv = entry.getValue();\n              if (vv instanceof MapWriter) vv = ((MapWriter) vv).toMap(new LinkedHashMap<>());\n              if (vv instanceof IteratorWriter) vv = ((IteratorWriter) vv).toList(new ArrayList<>());\n              map.put(entry.getKey(), vv);\n            }\n            v = map;\n          }\n          map.put(k==null? null : k.toString(), v);\n          // note: It'd be nice to assert that there is no previous value at 'k' but it's possible the passed in\n          // map is already populated and the intention is to overwrite.\n          return this;\n        }\n\n      });\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return map;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  default Map toMap(Map<String, Object> map) {\n    try {\n      writeMap(new EntryWriter() {\n        @Override\n        public EntryWriter put(CharSequence k, Object v) {\n          if (v instanceof MapWriter) v = ((MapWriter) v).toMap(new LinkedHashMap<>());\n          if (v instanceof IteratorWriter) v = ((IteratorWriter) v).toList(new ArrayList<>());\n          if (v instanceof Iterable) {\n            List lst = new ArrayList();\n            for (Object vv : (Iterable)v) {\n              if (vv instanceof MapWriter) vv = ((MapWriter) vv).toMap(new LinkedHashMap<>());\n              if (vv instanceof IteratorWriter) vv = ((IteratorWriter) vv).toList(new ArrayList<>());\n              lst.add(vv);\n            }\n            v = lst;\n          }\n          if (v instanceof Map) {\n            Map map = new LinkedHashMap();\n            for (Map.Entry<?, ?> entry : ((Map<?, ?>)v).entrySet()) {\n              Object vv = entry.getValue();\n              if (vv instanceof MapWriter) vv = ((MapWriter) vv).toMap(new LinkedHashMap<>());\n              if (vv instanceof IteratorWriter) vv = ((IteratorWriter) vv).toList(new ArrayList<>());\n              map.put(entry.getKey(), vv);\n            }\n            v = map;\n          }\n          map.put(k==null? null : k.toString(), v);\n          // note: It'd be nice to assert that there is no previous value at 'k' but it's possible the passed in\n          // map is already populated and the intention is to overwrite.\n          return this;\n        }\n\n      });\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76","date":1591450217,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/MapWriter#toMap(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/MapWriter#toMap(Map[String,Object]).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  default Map toMap(Map<String, Object> map) {\n    try {\n      writeMap(new EntryWriter() {\n        @Override\n        public EntryWriter put(CharSequence k, Object v) {\n          if (v instanceof MapWriter) v = ((MapWriter) v).toMap(new LinkedHashMap<>());\n          if (v instanceof IteratorWriter) v = ((IteratorWriter) v).toList(new ArrayList<>());\n          if (v instanceof Iterable) {\n            List lst = new ArrayList();\n            for (Object vv : (Iterable)v) {\n              if (vv instanceof MapWriter) vv = ((MapWriter) vv).toMap(new LinkedHashMap<>());\n              if (vv instanceof IteratorWriter) vv = ((IteratorWriter) vv).toList(new ArrayList<>());\n              lst.add(vv);\n            }\n            v = lst;\n          }\n          if (v instanceof Map) {\n            Map map = new LinkedHashMap();\n            for (Map.Entry<?, ?> entry : ((Map<?, ?>)v).entrySet()) {\n              Object vv = entry.getValue();\n              if (vv instanceof MapWriter) vv = ((MapWriter) vv).toMap(new LinkedHashMap<>());\n              if (vv instanceof IteratorWriter) vv = ((IteratorWriter) vv).toList(new ArrayList<>());\n              map.put(entry.getKey(), vv);\n            }\n            v = map;\n          }\n          map.put(k==null? null : k.toString(), v);\n          // note: It'd be nice to assert that there is no previous value at 'k' but it's possible the passed in\n          // map is already populated and the intention is to overwrite.\n          return this;\n        }\n\n      });\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return map;\n  }\n\n","sourceOld":"  @Override\n  default Map toMap(Map<String, Object> map) {\n    try {\n      writeMap(new EntryWriter() {\n        @Override\n        public EntryWriter put(CharSequence k, Object v) {\n          if (v instanceof MapWriter) v = ((MapWriter) v).toMap(new LinkedHashMap<>());\n          if (v instanceof IteratorWriter) v = ((IteratorWriter) v).toList(new ArrayList<>());\n          if (v instanceof Iterable) {\n            List lst = new ArrayList();\n            for (Object vv : (Iterable)v) {\n              if (vv instanceof MapWriter) vv = ((MapWriter) vv).toMap(new LinkedHashMap<>());\n              if (vv instanceof IteratorWriter) vv = ((IteratorWriter) vv).toList(new ArrayList<>());\n              lst.add(vv);\n            }\n            v = lst;\n          }\n          if (v instanceof Map) {\n            Map map = new LinkedHashMap();\n            for (Map.Entry<?, ?> entry : ((Map<?, ?>)v).entrySet()) {\n              Object vv = entry.getValue();\n              if (vv instanceof MapWriter) vv = ((MapWriter) vv).toMap(new LinkedHashMap<>());\n              if (vv instanceof IteratorWriter) vv = ((IteratorWriter) vv).toList(new ArrayList<>());\n              map.put(entry.getKey(), vv);\n            }\n            v = map;\n          }\n          map.put(k==null? null : k.toString(), v);\n          // note: It'd be nice to assert that there is no previous value at 'k' but it's possible the passed in\n          // map is already populated and the intention is to overwrite.\n          return this;\n        }\n\n      });\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["28288370235ed02234a64753cdbf0c6ec096304a","219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["457ac99a6d7227f954082cc753a08b18225e4553"],"457ac99a6d7227f954082cc753a08b18225e4553":["9c9780b447ddf847479e7fa9978cb7809a15a0bf"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","50f05d6b69cfaabd51b5d26cba4e3122f51fff83"],"0cf93ce8d2bc0210731dd8d840f40b183df2c804":["50f05d6b69cfaabd51b5d26cba4e3122f51fff83"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["0cf93ce8d2bc0210731dd8d840f40b183df2c804"],"9c9780b447ddf847479e7fa9978cb7809a15a0bf":["129e5b874f99ae4e04f39c337c940dda690f2d38"],"28288370235ed02234a64753cdbf0c6ec096304a":["50f05d6b69cfaabd51b5d26cba4e3122f51fff83","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"50f05d6b69cfaabd51b5d26cba4e3122f51fff83":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["50f05d6b69cfaabd51b5d26cba4e3122f51fff83","a513b6a92751e54c76fb5447948c9e7d437163a7"],"129e5b874f99ae4e04f39c337c940dda690f2d38":["560c18d71dad43d675158783c3840f8c80d6d39c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a513b6a92751e54c76fb5447948c9e7d437163a7":["50f05d6b69cfaabd51b5d26cba4e3122f51fff83"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"560c18d71dad43d675158783c3840f8c80d6d39c":["28288370235ed02234a64753cdbf0c6ec096304a","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76"]},"commit2Childs":{"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"457ac99a6d7227f954082cc753a08b18225e4553":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"0cf93ce8d2bc0210731dd8d840f40b183df2c804":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"9c9780b447ddf847479e7fa9978cb7809a15a0bf":["457ac99a6d7227f954082cc753a08b18225e4553"],"28288370235ed02234a64753cdbf0c6ec096304a":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"50f05d6b69cfaabd51b5d26cba4e3122f51fff83":["199dfa410f1fdbfd3294106b04096cce5ed34b21","0cf93ce8d2bc0210731dd8d840f40b183df2c804","28288370235ed02234a64753cdbf0c6ec096304a","74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["28288370235ed02234a64753cdbf0c6ec096304a"],"129e5b874f99ae4e04f39c337c940dda690f2d38":["9c9780b447ddf847479e7fa9978cb7809a15a0bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["199dfa410f1fdbfd3294106b04096cce5ed34b21","50f05d6b69cfaabd51b5d26cba4e3122f51fff83"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76"],"560c18d71dad43d675158783c3840f8c80d6d39c":["129e5b874f99ae4e04f39c337c940dda690f2d38"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}