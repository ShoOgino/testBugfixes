{"path":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#createRandomCollector(String,String,String,boolean).mjava","commits":[{"id":"46bf1a48fd33bf34430ade646b7dd67b984be2a8","date":1358725746,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#createRandomCollector(String,String,String,boolean).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#createRandomCollector(String,String,String,boolean,boolean).mjava","sourceNew":"  private AbstractGroupFacetCollector createRandomCollector(String groupField, String facetField, String facetPrefix, boolean multipleFacetsPerDocument) {\n    BytesRef facetPrefixBR = facetPrefix == null ? null : new BytesRef(facetPrefix);\n    // DocValues cannot be multi-valued:\n    assert !multipleFacetsPerDocument || !groupField.endsWith(\"_dv\");\n    return TermGroupFacetCollector.createTermGroupFacetCollector(groupField, facetField, multipleFacetsPerDocument, facetPrefixBR, random().nextInt(1024));\n  }\n\n","sourceOld":"  private AbstractGroupFacetCollector createRandomCollector(String groupField, String facetField, String facetPrefix, boolean multipleFacetsPerDocument, boolean useDv) {\n    BytesRef facetPrefixBR = facetPrefix == null ? null : new BytesRef(facetPrefix);\n    return TermGroupFacetCollector.createTermGroupFacetCollector(groupField, facetField, multipleFacetsPerDocument, facetPrefixBR, random().nextInt(1024));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#createRandomCollector(String,String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private AbstractGroupFacetCollector createRandomCollector(String groupField, String facetField, String facetPrefix, boolean multipleFacetsPerDocument) {\n    BytesRef facetPrefixBR = facetPrefix == null ? null : new BytesRef(facetPrefix);\n    // DocValues cannot be multi-valued:\n    assert !multipleFacetsPerDocument || !groupField.endsWith(\"_dv\");\n    return TermGroupFacetCollector.createTermGroupFacetCollector(groupField, facetField, multipleFacetsPerDocument, facetPrefixBR, random().nextInt(1024));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"505dfd7dfae7faacd62d5e532edbdc7bf856b56e","date":1399828832,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#createRandomCollector(String,String,String,boolean).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#createRandomCollector(String,String,String,boolean).mjava","sourceNew":"  private AbstractGroupFacetCollector createRandomCollector(String groupField, String facetField, String facetPrefix, boolean multipleFacetsPerDocument) {\n    assert groupField.endsWith(\"_dv\");\n    BytesRef facetPrefixBR = facetPrefix == null ? null : new BytesRef(facetPrefix);\n    return TermGroupFacetCollector.createTermGroupFacetCollector(groupField, facetField, multipleFacetsPerDocument, facetPrefixBR, random().nextInt(1024));\n  }\n\n","sourceOld":"  private AbstractGroupFacetCollector createRandomCollector(String groupField, String facetField, String facetPrefix, boolean multipleFacetsPerDocument) {\n    BytesRef facetPrefixBR = facetPrefix == null ? null : new BytesRef(facetPrefix);\n    // DocValues cannot be multi-valued:\n    assert !multipleFacetsPerDocument || !groupField.endsWith(\"_dv\");\n    return TermGroupFacetCollector.createTermGroupFacetCollector(groupField, facetField, multipleFacetsPerDocument, facetPrefixBR, random().nextInt(1024));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d138de075f63ca3be0fce7c1404cd919229b277","date":1399829699,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#createRandomCollector(String,String,String,boolean).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#createRandomCollector(String,String,String,boolean).mjava","sourceNew":"  private AbstractGroupFacetCollector createRandomCollector(String groupField, String facetField, String facetPrefix, boolean multipleFacetsPerDocument) {\n    BytesRef facetPrefixBR = facetPrefix == null ? null : new BytesRef(facetPrefix);\n    return TermGroupFacetCollector.createTermGroupFacetCollector(groupField, facetField, multipleFacetsPerDocument, facetPrefixBR, random().nextInt(1024));\n  }\n\n","sourceOld":"  private AbstractGroupFacetCollector createRandomCollector(String groupField, String facetField, String facetPrefix, boolean multipleFacetsPerDocument) {\n    assert groupField.endsWith(\"_dv\");\n    BytesRef facetPrefixBR = facetPrefix == null ? null : new BytesRef(facetPrefix);\n    return TermGroupFacetCollector.createTermGroupFacetCollector(groupField, facetField, multipleFacetsPerDocument, facetPrefixBR, random().nextInt(1024));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#createRandomCollector(String,String,String,boolean).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#createRandomCollector(String,String,String,boolean).mjava","sourceNew":"  private AbstractGroupFacetCollector createRandomCollector(String groupField, String facetField, String facetPrefix, boolean multipleFacetsPerDocument) {\n    BytesRef facetPrefixBR = facetPrefix == null ? null : new BytesRef(facetPrefix);\n    return TermGroupFacetCollector.createTermGroupFacetCollector(groupField, facetField, multipleFacetsPerDocument, facetPrefixBR, random().nextInt(1024));\n  }\n\n","sourceOld":"  private AbstractGroupFacetCollector createRandomCollector(String groupField, String facetField, String facetPrefix, boolean multipleFacetsPerDocument) {\n    BytesRef facetPrefixBR = facetPrefix == null ? null : new BytesRef(facetPrefix);\n    // DocValues cannot be multi-valued:\n    assert !multipleFacetsPerDocument || !groupField.endsWith(\"_dv\");\n    return TermGroupFacetCollector.createTermGroupFacetCollector(groupField, facetField, multipleFacetsPerDocument, facetPrefixBR, random().nextInt(1024));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#createRandomCollector(String,String,String,boolean).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#createRandomCollector(String,String,String,boolean).mjava","sourceNew":"  private AbstractGroupFacetCollector createRandomCollector(String groupField, String facetField, String facetPrefix, boolean multipleFacetsPerDocument) {\n    BytesRef facetPrefixBR = facetPrefix == null ? null : new BytesRef(facetPrefix);\n    return TermGroupFacetCollector.createTermGroupFacetCollector(groupField, facetField, multipleFacetsPerDocument, facetPrefixBR, random().nextInt(1024));\n  }\n\n","sourceOld":"  private AbstractGroupFacetCollector createRandomCollector(String groupField, String facetField, String facetPrefix, boolean multipleFacetsPerDocument) {\n    BytesRef facetPrefixBR = facetPrefix == null ? null : new BytesRef(facetPrefix);\n    // DocValues cannot be multi-valued:\n    assert !multipleFacetsPerDocument || !groupField.endsWith(\"_dv\");\n    return TermGroupFacetCollector.createTermGroupFacetCollector(groupField, facetField, multipleFacetsPerDocument, facetPrefixBR, random().nextInt(1024));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20e94e61fe5291647346b70437617e6b6c370408","date":1483783127,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#createRandomCollector(String,String,String,boolean).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#createRandomCollector(String,String,String,boolean).mjava","sourceNew":"  private GroupFacetCollector createRandomCollector(String groupField, String facetField, String facetPrefix, boolean multipleFacetsPerDocument) {\n    BytesRef facetPrefixBR = facetPrefix == null ? null : new BytesRef(facetPrefix);\n    return TermGroupFacetCollector.createTermGroupFacetCollector(groupField, facetField, multipleFacetsPerDocument, facetPrefixBR, random().nextInt(1024));\n  }\n\n","sourceOld":"  private AbstractGroupFacetCollector createRandomCollector(String groupField, String facetField, String facetPrefix, boolean multipleFacetsPerDocument) {\n    BytesRef facetPrefixBR = facetPrefix == null ? null : new BytesRef(facetPrefix);\n    return TermGroupFacetCollector.createTermGroupFacetCollector(groupField, facetField, multipleFacetsPerDocument, facetPrefixBR, random().nextInt(1024));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#createRandomCollector(String,String,String,boolean).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#createRandomCollector(String,String,String,boolean).mjava","sourceNew":"  private GroupFacetCollector createRandomCollector(String groupField, String facetField, String facetPrefix, boolean multipleFacetsPerDocument) {\n    BytesRef facetPrefixBR = facetPrefix == null ? null : new BytesRef(facetPrefix);\n    return TermGroupFacetCollector.createTermGroupFacetCollector(groupField, facetField, multipleFacetsPerDocument, facetPrefixBR, random().nextInt(1024));\n  }\n\n","sourceOld":"  private AbstractGroupFacetCollector createRandomCollector(String groupField, String facetField, String facetPrefix, boolean multipleFacetsPerDocument) {\n    BytesRef facetPrefixBR = facetPrefix == null ? null : new BytesRef(facetPrefix);\n    return TermGroupFacetCollector.createTermGroupFacetCollector(groupField, facetField, multipleFacetsPerDocument, facetPrefixBR, random().nextInt(1024));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"46bf1a48fd33bf34430ade646b7dd67b984be2a8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1d138de075f63ca3be0fce7c1404cd919229b277":["505dfd7dfae7faacd62d5e532edbdc7bf856b56e"],"20e94e61fe5291647346b70437617e6b6c370408":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","46bf1a48fd33bf34430ade646b7dd67b984be2a8"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["d4d69c535930b5cce125cff868d40f6373dc27d4","1d138de075f63ca3be0fce7c1404cd919229b277"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"505dfd7dfae7faacd62d5e532edbdc7bf856b56e":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["93dd449115a9247533e44bab47e8429e5dccbc6d","20e94e61fe5291647346b70437617e6b6c370408"],"56572ec06f1407c066d6b7399413178b33176cd8":["d4d69c535930b5cce125cff868d40f6373dc27d4","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["20e94e61fe5291647346b70437617e6b6c370408"]},"commit2Childs":{"46bf1a48fd33bf34430ade646b7dd67b984be2a8":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"1d138de075f63ca3be0fce7c1404cd919229b277":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"20e94e61fe5291647346b70437617e6b6c370408":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["93dd449115a9247533e44bab47e8429e5dccbc6d","505dfd7dfae7faacd62d5e532edbdc7bf856b56e","56572ec06f1407c066d6b7399413178b33176cd8"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["20e94e61fe5291647346b70437617e6b6c370408","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","56572ec06f1407c066d6b7399413178b33176cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["46bf1a48fd33bf34430ade646b7dd67b984be2a8","d4d69c535930b5cce125cff868d40f6373dc27d4"],"505dfd7dfae7faacd62d5e532edbdc7bf856b56e":["1d138de075f63ca3be0fce7c1404cd919229b277"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}