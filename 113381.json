{"path":"lucene/core/src/java/org/apache/lucene/index/IndexingChain#IndexingChain(int,SegmentInfo,Directory,FieldInfos.Builder,LiveIndexWriterConfig,Consumer[Throwable]).mjava","commits":[{"id":"7a6f8af01d9b3067b143bbdc0a492720e2af97cf","date":1600157724,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexingChain#IndexingChain(int,SegmentInfo,Directory,FieldInfos.Builder,LiveIndexWriterConfig,Consumer[Throwable]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#DefaultIndexingChain(int,SegmentInfo,Directory,FieldInfos.Builder,LiveIndexWriterConfig,Consumer[Throwable]).mjava","sourceNew":"  IndexingChain(int indexCreatedVersionMajor, SegmentInfo segmentInfo, Directory directory, FieldInfos.Builder fieldInfos, LiveIndexWriterConfig indexWriterConfig,\n                Consumer<Throwable> abortingExceptionConsumer) {\n    this.indexCreatedVersionMajor = indexCreatedVersionMajor;\n    byteBlockAllocator = new ByteBlockPool.DirectTrackingAllocator(bytesUsed);\n    IntBlockPool.Allocator intBlockAllocator = new IntBlockAllocator(bytesUsed);\n    this.indexWriterConfig = indexWriterConfig;\n    assert segmentInfo.getIndexSort() == indexWriterConfig.getIndexSort();\n    this.fieldInfos = fieldInfos;\n    this.infoStream = indexWriterConfig.getInfoStream();\n    this.abortingExceptionConsumer = abortingExceptionConsumer;\n\n    if (segmentInfo.getIndexSort() == null) {\n      storedFieldsConsumer = new StoredFieldsConsumer(indexWriterConfig.getCodec(), directory, segmentInfo);\n      termVectorsWriter = new TermVectorsConsumer(intBlockAllocator, byteBlockAllocator, directory, segmentInfo, indexWriterConfig.getCodec());\n    } else {\n      storedFieldsConsumer = new SortingStoredFieldsConsumer(indexWriterConfig.getCodec(), directory, segmentInfo);\n      termVectorsWriter = new SortingTermVectorsConsumer(intBlockAllocator, byteBlockAllocator, directory, segmentInfo, indexWriterConfig.getCodec());\n    }\n    termsHash = new FreqProxTermsWriter(intBlockAllocator, byteBlockAllocator, bytesUsed, termVectorsWriter);\n  }\n\n","sourceOld":"  DefaultIndexingChain(int indexCreatedVersionMajor, SegmentInfo segmentInfo, Directory directory, FieldInfos.Builder fieldInfos, LiveIndexWriterConfig indexWriterConfig,\n                       Consumer<Throwable> abortingExceptionConsumer) {\n    this.indexCreatedVersionMajor = indexCreatedVersionMajor;\n    byteBlockAllocator = new ByteBlockPool.DirectTrackingAllocator(bytesUsed);\n    IntBlockPool.Allocator intBlockAllocator = new IntBlockAllocator(bytesUsed);\n    this.indexWriterConfig = indexWriterConfig;\n    assert segmentInfo.getIndexSort() == indexWriterConfig.getIndexSort();\n    this.fieldInfos = fieldInfos;\n    this.infoStream = indexWriterConfig.getInfoStream();\n    this.abortingExceptionConsumer = abortingExceptionConsumer;\n\n    if (segmentInfo.getIndexSort() == null) {\n      storedFieldsConsumer = new StoredFieldsConsumer(indexWriterConfig.getCodec(), directory, segmentInfo);\n      termVectorsWriter = new TermVectorsConsumer(intBlockAllocator, byteBlockAllocator, directory, segmentInfo, indexWriterConfig.getCodec());\n    } else {\n      storedFieldsConsumer = new SortingStoredFieldsConsumer(indexWriterConfig.getCodec(), directory, segmentInfo);\n      termVectorsWriter = new SortingTermVectorsConsumer(intBlockAllocator, byteBlockAllocator, directory, segmentInfo, indexWriterConfig.getCodec());\n    }\n    termsHash = new FreqProxTermsWriter(intBlockAllocator, byteBlockAllocator, bytesUsed, termVectorsWriter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"680b6449f09827f58fe987aff279e014c311d966","date":1600247985,"type":1,"author":"noblepaul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexingChain#IndexingChain(int,SegmentInfo,Directory,FieldInfos.Builder,LiveIndexWriterConfig,Consumer[Throwable]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#DefaultIndexingChain(int,SegmentInfo,Directory,FieldInfos.Builder,LiveIndexWriterConfig,Consumer[Throwable]).mjava","sourceNew":"  IndexingChain(int indexCreatedVersionMajor, SegmentInfo segmentInfo, Directory directory, FieldInfos.Builder fieldInfos, LiveIndexWriterConfig indexWriterConfig,\n                Consumer<Throwable> abortingExceptionConsumer) {\n    this.indexCreatedVersionMajor = indexCreatedVersionMajor;\n    byteBlockAllocator = new ByteBlockPool.DirectTrackingAllocator(bytesUsed);\n    IntBlockPool.Allocator intBlockAllocator = new IntBlockAllocator(bytesUsed);\n    this.indexWriterConfig = indexWriterConfig;\n    assert segmentInfo.getIndexSort() == indexWriterConfig.getIndexSort();\n    this.fieldInfos = fieldInfos;\n    this.infoStream = indexWriterConfig.getInfoStream();\n    this.abortingExceptionConsumer = abortingExceptionConsumer;\n\n    if (segmentInfo.getIndexSort() == null) {\n      storedFieldsConsumer = new StoredFieldsConsumer(indexWriterConfig.getCodec(), directory, segmentInfo);\n      termVectorsWriter = new TermVectorsConsumer(intBlockAllocator, byteBlockAllocator, directory, segmentInfo, indexWriterConfig.getCodec());\n    } else {\n      storedFieldsConsumer = new SortingStoredFieldsConsumer(indexWriterConfig.getCodec(), directory, segmentInfo);\n      termVectorsWriter = new SortingTermVectorsConsumer(intBlockAllocator, byteBlockAllocator, directory, segmentInfo, indexWriterConfig.getCodec());\n    }\n    termsHash = new FreqProxTermsWriter(intBlockAllocator, byteBlockAllocator, bytesUsed, termVectorsWriter);\n  }\n\n","sourceOld":"  DefaultIndexingChain(int indexCreatedVersionMajor, SegmentInfo segmentInfo, Directory directory, FieldInfos.Builder fieldInfos, LiveIndexWriterConfig indexWriterConfig,\n                       Consumer<Throwable> abortingExceptionConsumer) {\n    this.indexCreatedVersionMajor = indexCreatedVersionMajor;\n    byteBlockAllocator = new ByteBlockPool.DirectTrackingAllocator(bytesUsed);\n    IntBlockPool.Allocator intBlockAllocator = new IntBlockAllocator(bytesUsed);\n    this.indexWriterConfig = indexWriterConfig;\n    assert segmentInfo.getIndexSort() == indexWriterConfig.getIndexSort();\n    this.fieldInfos = fieldInfos;\n    this.infoStream = indexWriterConfig.getInfoStream();\n    this.abortingExceptionConsumer = abortingExceptionConsumer;\n\n    final TermsHash termVectorsWriter;\n    if (segmentInfo.getIndexSort() == null) {\n      storedFieldsConsumer = new StoredFieldsConsumer(indexWriterConfig.getCodec(), directory, segmentInfo);\n      termVectorsWriter = new TermVectorsConsumer(intBlockAllocator, byteBlockAllocator, directory, segmentInfo, indexWriterConfig.getCodec());\n    } else {\n      storedFieldsConsumer = new SortingStoredFieldsConsumer(indexWriterConfig.getCodec(), directory, segmentInfo);\n      termVectorsWriter = new SortingTermVectorsConsumer(intBlockAllocator, byteBlockAllocator, directory, segmentInfo, indexWriterConfig.getCodec());\n    }\n    termsHash = new FreqProxTermsWriter(intBlockAllocator, byteBlockAllocator, bytesUsed, termVectorsWriter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"680b6449f09827f58fe987aff279e014c311d966":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a6f8af01d9b3067b143bbdc0a492720e2af97cf"],"7a6f8af01d9b3067b143bbdc0a492720e2af97cf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["680b6449f09827f58fe987aff279e014c311d966"]},"commit2Childs":{"680b6449f09827f58fe987aff279e014c311d966":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7a6f8af01d9b3067b143bbdc0a492720e2af97cf":["680b6449f09827f58fe987aff279e014c311d966"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["680b6449f09827f58fe987aff279e014c311d966","7a6f8af01d9b3067b143bbdc0a492720e2af97cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}