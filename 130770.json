{"path":"modules/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/kuromoji/util/ConnectionCostsBuilder#build(String).mjava","commits":[{"id":"6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2","date":1326399048,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/kuromoji/util/ConnectionCostsBuilder#build(String).mjava","pathOld":"/dev/null","sourceNew":"  public static ConnectionCostsWriter build(String filename) throws IOException {\n    FileInputStream inputStream = new FileInputStream(filename);\n    Charset cs = Charset.forName(\"US-ASCII\");\n    CharsetDecoder decoder = cs.newDecoder()\n        .onMalformedInput(CodingErrorAction.REPORT)\n        .onUnmappableCharacter(CodingErrorAction.REPORT);\n    InputStreamReader streamReader = new InputStreamReader(inputStream, decoder);\n    LineNumberReader lineReader = new LineNumberReader(streamReader);\n    \n    String line = lineReader.readLine();\n    String[] dimensions = line.split(\"\\\\s+\");\n    \n    assert dimensions.length == 2;\n    \n    int forwardSize = Integer.parseInt(dimensions[0]);\n    int backwardSize = Integer.parseInt(dimensions[1]);\n    \n    assert forwardSize > 0 && backwardSize > 0;\n    \n    ConnectionCostsWriter costs = new ConnectionCostsWriter(forwardSize, backwardSize);\n    \n    while ((line = lineReader.readLine()) != null) {\n      String[] fields = line.split(\"\\\\s+\");\n      \n      assert fields.length == 3;\n      \n      int forwardId = Integer.parseInt(fields[0]);\n      int backwardId = Integer.parseInt(fields[1]);\n      int cost = Integer.parseInt(fields[2]);\n      \n      costs.add(forwardId, backwardId, cost);\n    }\n    return costs;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98d45c1ff2c99694b6de2201175f9b8b8b27b597","date":1332757908,"type":5,"author":"Christian Moen","isMerge":false,"pathNew":"modules/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/ConnectionCostsBuilder#build(String).mjava","pathOld":"modules/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/kuromoji/util/ConnectionCostsBuilder#build(String).mjava","sourceNew":"  public static ConnectionCostsWriter build(String filename) throws IOException {\n    FileInputStream inputStream = new FileInputStream(filename);\n    Charset cs = Charset.forName(\"US-ASCII\");\n    CharsetDecoder decoder = cs.newDecoder()\n        .onMalformedInput(CodingErrorAction.REPORT)\n        .onUnmappableCharacter(CodingErrorAction.REPORT);\n    InputStreamReader streamReader = new InputStreamReader(inputStream, decoder);\n    LineNumberReader lineReader = new LineNumberReader(streamReader);\n    \n    String line = lineReader.readLine();\n    String[] dimensions = line.split(\"\\\\s+\");\n    \n    assert dimensions.length == 2;\n    \n    int forwardSize = Integer.parseInt(dimensions[0]);\n    int backwardSize = Integer.parseInt(dimensions[1]);\n    \n    assert forwardSize > 0 && backwardSize > 0;\n    \n    ConnectionCostsWriter costs = new ConnectionCostsWriter(forwardSize, backwardSize);\n    \n    while ((line = lineReader.readLine()) != null) {\n      String[] fields = line.split(\"\\\\s+\");\n      \n      assert fields.length == 3;\n      \n      int forwardId = Integer.parseInt(fields[0]);\n      int backwardId = Integer.parseInt(fields[1]);\n      int cost = Integer.parseInt(fields[2]);\n      \n      costs.add(forwardId, backwardId, cost);\n    }\n    return costs;\n  }\n\n","sourceOld":"  public static ConnectionCostsWriter build(String filename) throws IOException {\n    FileInputStream inputStream = new FileInputStream(filename);\n    Charset cs = Charset.forName(\"US-ASCII\");\n    CharsetDecoder decoder = cs.newDecoder()\n        .onMalformedInput(CodingErrorAction.REPORT)\n        .onUnmappableCharacter(CodingErrorAction.REPORT);\n    InputStreamReader streamReader = new InputStreamReader(inputStream, decoder);\n    LineNumberReader lineReader = new LineNumberReader(streamReader);\n    \n    String line = lineReader.readLine();\n    String[] dimensions = line.split(\"\\\\s+\");\n    \n    assert dimensions.length == 2;\n    \n    int forwardSize = Integer.parseInt(dimensions[0]);\n    int backwardSize = Integer.parseInt(dimensions[1]);\n    \n    assert forwardSize > 0 && backwardSize > 0;\n    \n    ConnectionCostsWriter costs = new ConnectionCostsWriter(forwardSize, backwardSize);\n    \n    while ((line = lineReader.readLine()) != null) {\n      String[] fields = line.split(\"\\\\s+\");\n      \n      assert fields.length == 3;\n      \n      int forwardId = Integer.parseInt(fields[0]);\n      int backwardId = Integer.parseInt(fields[1]);\n      int cost = Integer.parseInt(fields[2]);\n      \n      costs.add(forwardId, backwardId, cost);\n    }\n    return costs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"98d45c1ff2c99694b6de2201175f9b8b8b27b597":["6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2"],"6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["98d45c1ff2c99694b6de2201175f9b8b8b27b597"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2"],"98d45c1ff2c99694b6de2201175f9b8b8b27b597":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2":["98d45c1ff2c99694b6de2201175f9b8b8b27b597"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}