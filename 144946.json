{"path":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    // prepare a small index with just a few documents.  \n    super.setUp();\n    dir = new RAMDirectory();\n    anlzr = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, anlzr));\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      if (doMultiSegment && remaining % 3 == 0) {\n        iw.commit();\n      }\n      remaining --;\n    }\n    iw.close();\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    // prepare a small index with just a few documents.  \n    super.setUp();\n    dir = new RAMDirectory();\n    anlzr = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, anlzr));\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      if (doMultiSegment && remaining % 3 == 0) {\n        iw.commit();\n      }\n      remaining --;\n    }\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    // prepare a small index with just a few documents.  \n    super.setUp();\n    dir = new RAMDirectory();\n    anlzr = new MockAnalyzer();\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, anlzr));\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      if (doMultiSegment && remaining % 3 == 0) {\n        iw.commit();\n      }\n      remaining --;\n    }\n    iw.close();\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    // prepare a small index with just a few documents.  \n    super.setUp();\n    dir = new RAMDirectory();\n    anlzr = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, anlzr));\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      if (doMultiSegment && remaining % 3 == 0) {\n        iw.commit();\n      }\n      remaining --;\n    }\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37087ea13c0fde1ce1a3b5579f60f827414045a9","date":1279206637,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    // prepare a small index with just a few documents.  \n    dir = new RAMDirectory();\n    anlzr = new MockAnalyzer();\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, anlzr));\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      if (doMultiSegment && remaining % 3 == 0) {\n        iw.commit();\n      }\n      remaining --;\n    }\n    iw.close();\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    // prepare a small index with just a few documents.  \n    super.setUp();\n    dir = new RAMDirectory();\n    anlzr = new MockAnalyzer();\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, anlzr));\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      if (doMultiSegment && remaining % 3 == 0) {\n        iw.commit();\n      }\n      remaining --;\n    }\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    // prepare a small index with just a few documents.  \n    dir = new RAMDirectory();\n    anlzr = new MockAnalyzer();\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, anlzr));\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      if (doMultiSegment && remaining % 3 == 0) {\n        iw.commit();\n      }\n      remaining --;\n    }\n    iw.close();\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    // prepare a small index with just a few documents.  \n    super.setUp();\n    dir = new RAMDirectory();\n    anlzr = new MockAnalyzer();\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, anlzr));\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      if (doMultiSegment && remaining % 3 == 0) {\n        iw.commit();\n      }\n      remaining --;\n    }\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e36f19452726fab77a51c5fcb61fd7d9ee91068","date":1280918442,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    // prepare a small index with just a few documents.  \n    dir = new RAMDirectory();\n    anlzr = new MockAnalyzer();\n    Random r = newRandom();\n    IndexWriterConfig iwc = newIndexWriterConfig(r, TEST_VERSION_CURRENT, anlzr);\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(r, dir, iwc);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      iw.optimize();\n    }\n    iw.close();\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    // prepare a small index with just a few documents.  \n    dir = new RAMDirectory();\n    anlzr = new MockAnalyzer();\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, anlzr));\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      if (doMultiSegment && remaining % 3 == 0) {\n        iw.commit();\n      }\n      remaining --;\n    }\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    // prepare a small index with just a few documents.  \n    dir = new MockRAMDirectory();\n    anlzr = new MockAnalyzer();\n    Random r = newRandom();\n    IndexWriterConfig iwc = newIndexWriterConfig(r, TEST_VERSION_CURRENT, anlzr);\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(r, dir, iwc);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      iw.optimize();\n    }\n    iw.close();\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    // prepare a small index with just a few documents.  \n    dir = new RAMDirectory();\n    anlzr = new MockAnalyzer();\n    Random r = newRandom();\n    IndexWriterConfig iwc = newIndexWriterConfig(r, TEST_VERSION_CURRENT, anlzr);\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(r, dir, iwc);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      iw.optimize();\n    }\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    // prepare a small index with just a few documents.  \n    Random r = newRandom();\n    dir = newDirectory(r);\n    anlzr = new MockAnalyzer();\n    IndexWriterConfig iwc = newIndexWriterConfig(r, TEST_VERSION_CURRENT, anlzr);\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(r, dir, iwc);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      iw.optimize();\n    }\n    iw.close();\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    // prepare a small index with just a few documents.  \n    dir = new MockRAMDirectory();\n    anlzr = new MockAnalyzer();\n    Random r = newRandom();\n    IndexWriterConfig iwc = newIndexWriterConfig(r, TEST_VERSION_CURRENT, anlzr);\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(r, dir, iwc);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      iw.optimize();\n    }\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    // prepare a small index with just a few documents.  \n    dir = newDirectory();\n    anlzr = new MockAnalyzer();\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr);\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, iwc);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      iw.optimize();\n    }\n    iw.close();\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    // prepare a small index with just a few documents.  \n    Random r = newRandom();\n    dir = newDirectory(r);\n    anlzr = new MockAnalyzer();\n    IndexWriterConfig iwc = newIndexWriterConfig(r, TEST_VERSION_CURRENT, anlzr);\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(r, dir, iwc);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      iw.optimize();\n    }\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"355542ffa5812b7a09147c6a46a0948b36c5966f","date":1292760986,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.  \n    dir = newDirectory();\n    anlzr = new MockAnalyzer();\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr);\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, iwc);\n    iw.w.setInfoStream(VERBOSE ? System.out : null);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp optimize\");\n      }\n      iw.optimize();\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    // prepare a small index with just a few documents.  \n    dir = newDirectory();\n    anlzr = new MockAnalyzer();\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr);\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, iwc);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      iw.optimize();\n    }\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.  \n    dir = newDirectory();\n    anlzr = new MockAnalyzer();\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr);\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, iwc);\n    iw.w.setInfoStream(VERBOSE ? System.out : null);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp optimize\");\n      }\n      iw.optimize();\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    // prepare a small index with just a few documents.  \n    dir = newDirectory();\n    anlzr = new MockAnalyzer();\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr);\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, iwc);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      iw.optimize();\n    }\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.  \n    dir = newDirectory();\n    anlzr = new MockAnalyzer();\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr);\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, iwc);\n    iw.w.setInfoStream(VERBOSE ? System.out : null);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp optimize\");\n      }\n      iw.optimize();\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    // prepare a small index with just a few documents.  \n    dir = new RAMDirectory();\n    anlzr = new MockAnalyzer();\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, anlzr));\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      if (doMultiSegment && remaining % 3 == 0) {\n        iw.commit();\n      }\n      remaining --;\n    }\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.  \n    dir = newDirectory();\n    anlzr = new MockAnalyzer();\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newInOrderLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, iwc);\n    iw.w.setInfoStream(VERBOSE ? System.out : null);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp optimize\");\n      }\n      iw.optimize();\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.  \n    dir = newDirectory();\n    anlzr = new MockAnalyzer();\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr);\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, iwc);\n    iw.w.setInfoStream(VERBOSE ? System.out : null);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp optimize\");\n      }\n      iw.optimize();\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.  \n    dir = newDirectory();\n    anlzr = new MockAnalyzer();\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newInOrderLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, iwc);\n    iw.w.setInfoStream(VERBOSE ? System.out : null);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp optimize\");\n      }\n      iw.optimize();\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.  \n    dir = newDirectory();\n    anlzr = new MockAnalyzer();\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr);\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, iwc);\n    iw.w.setInfoStream(VERBOSE ? System.out : null);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp optimize\");\n      }\n      iw.optimize();\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.  \n    dir = newDirectory();\n    anlzr = new MockAnalyzer();\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newInOrderLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, iwc);\n    iw.w.setInfoStream(VERBOSE ? System.out : null);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp optimize\");\n      }\n      iw.optimize();\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.  \n    dir = newDirectory();\n    anlzr = new MockAnalyzer();\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr);\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, iwc);\n    iw.w.setInfoStream(VERBOSE ? System.out : null);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp optimize\");\n      }\n      iw.optimize();\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01e5948db9a07144112d2f08f28ca2e3cd880348","date":1301759232,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.  \n    dir = newDirectory();\n    anlzr = new MockAnalyzer();\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, iwc);\n    iw.w.setInfoStream(VERBOSE ? System.out : null);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp optimize\");\n      }\n      iw.optimize();\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.  \n    dir = newDirectory();\n    anlzr = new MockAnalyzer();\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newInOrderLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, iwc);\n    iw.w.setInfoStream(VERBOSE ? System.out : null);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp optimize\");\n      }\n      iw.optimize();\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.  \n    dir = newDirectory();\n    anlzr = new MockAnalyzer();\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, iwc);\n    iw.w.setInfoStream(VERBOSE ? System.out : null);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp optimize\");\n      }\n      iw.optimize();\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.  \n    dir = newDirectory();\n    anlzr = new MockAnalyzer();\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newInOrderLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, iwc);\n    iw.w.setInfoStream(VERBOSE ? System.out : null);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp optimize\");\n      }\n      iw.optimize();\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.  \n    dir = newDirectory();\n    anlzr = new MockAnalyzer(random);\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, iwc);\n    iw.w.setInfoStream(VERBOSE ? System.out : null);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp optimize\");\n      }\n      iw.optimize();\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.  \n    dir = newDirectory();\n    anlzr = new MockAnalyzer();\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, iwc);\n    iw.w.setInfoStream(VERBOSE ? System.out : null);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp optimize\");\n      }\n      iw.optimize();\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.  \n    dir = newDirectory();\n    anlzr = new MockAnalyzer(random);\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, iwc);\n    iw.w.setInfoStream(VERBOSE ? System.out : null);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp optimize\");\n      }\n      iw.optimize();\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.  \n    dir = newDirectory();\n    anlzr = new MockAnalyzer();\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, iwc);\n    iw.w.setInfoStream(VERBOSE ? System.out : null);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp optimize\");\n      }\n      iw.optimize();\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.  \n    dir = newDirectory();\n    anlzr = new MockAnalyzer(random);\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, iwc);\n    iw.w.setInfoStream(VERBOSE ? System.out : null);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp optimize\");\n      }\n      iw.optimize();\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.  \n    dir = newDirectory();\n    anlzr = new MockAnalyzer();\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newInOrderLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, iwc);\n    iw.w.setInfoStream(VERBOSE ? System.out : null);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp optimize\");\n      }\n      iw.optimize();\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.  \n    dir = newDirectory();\n    anlzr = new MockAnalyzer(random);\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, iwc);\n    iw.w.setInfoStream(VERBOSE ? System.out : null);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp optimize\");\n      }\n      iw.optimize();\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.  \n    dir = newDirectory();\n    anlzr = new MockAnalyzer();\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newInOrderLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, iwc);\n    iw.w.setInfoStream(VERBOSE ? System.out : null);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp optimize\");\n      }\n      iw.optimize();\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0762b640e0d0d12b6edb96db68986e13145c3484","date":1307575932,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#createIndex(boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","sourceNew":"  protected static void createIndex(boolean doMultiSegment) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.  \n    dir = newDirectory();\n    anlzr = new MockAnalyzer(random);\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, iwc);\n    iw.w.setInfoStream(VERBOSE ? System.out : null);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp optimize\");\n      }\n      iw.optimize();\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.  \n    dir = newDirectory();\n    anlzr = new MockAnalyzer(random);\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, iwc);\n    iw.w.setInfoStream(VERBOSE ? System.out : null);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp optimize\");\n      }\n      iw.optimize();\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#createIndex(boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","sourceNew":"  protected static void createIndex(boolean doMultiSegment) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.  \n    dir = newDirectory();\n    anlzr = new MockAnalyzer(random);\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, iwc);\n    iw.w.setInfoStream(VERBOSE ? System.out : null);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp optimize\");\n      }\n      iw.optimize();\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.  \n    dir = newDirectory();\n    anlzr = new MockAnalyzer(random);\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, iwc);\n    iw.w.setInfoStream(VERBOSE ? System.out : null);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp optimize\");\n      }\n      iw.optimize();\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","sourceNew":null,"sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.  \n    dir = newDirectory();\n    anlzr = new MockAnalyzer(random);\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, iwc);\n    iw.w.setInfoStream(VERBOSE ? System.out : null);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp optimize\");\n      }\n      iw.optimize();\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0762b640e0d0d12b6edb96db68986e13145c3484":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"355542ffa5812b7a09147c6a46a0948b36c5966f":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","355542ffa5812b7a09147c6a46a0948b36c5966f"],"c19f985e36a65cc969e8e564fe337a0d41512075":["355542ffa5812b7a09147c6a46a0948b36c5966f"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["c19f985e36a65cc969e8e564fe337a0d41512075"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["01e5948db9a07144112d2f08f28ca2e3cd880348"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","c19f985e36a65cc969e8e564fe337a0d41512075"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["0e36f19452726fab77a51c5fcb61fd7d9ee91068"],"0e36f19452726fab77a51c5fcb61fd7d9ee91068":["37087ea13c0fde1ce1a3b5579f60f827414045a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a3776dccca01c11e7046323cfad46a3b4a471233","0762b640e0d0d12b6edb96db68986e13145c3484"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["1f653cfcf159baeaafe5d01682a911e95bba4012","355542ffa5812b7a09147c6a46a0948b36c5966f"],"5f4e87790277826a2aea119328600dfb07761f32":["d572389229127c297dd1fa5ce4758e1cec41e799","37087ea13c0fde1ce1a3b5579f60f827414045a9"],"962d04139994fce5193143ef35615499a9a96d78":["45669a651c970812a680841b97a77cce06af559f","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c19f985e36a65cc969e8e564fe337a0d41512075","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","0762b640e0d0d12b6edb96db68986e13145c3484"],"37087ea13c0fde1ce1a3b5579f60f827414045a9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"45669a651c970812a680841b97a77cce06af559f":["bde51b089eb7f86171eb3406e38a274743f9b7ac","01e5948db9a07144112d2f08f28ca2e3cd880348"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0762b640e0d0d12b6edb96db68986e13145c3484"]},"commit2Childs":{"0762b640e0d0d12b6edb96db68986e13145c3484":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"355542ffa5812b7a09147c6a46a0948b36c5966f":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c19f985e36a65cc969e8e564fe337a0d41512075":["01e5948db9a07144112d2f08f28ca2e3cd880348","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","a3776dccca01c11e7046323cfad46a3b4a471233"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["f2c5f0cb44df114db4228c8f77861714b5cabaea","45669a651c970812a680841b97a77cce06af559f"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["0762b640e0d0d12b6edb96db68986e13145c3484","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["355542ffa5812b7a09147c6a46a0948b36c5966f","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"0e36f19452726fab77a51c5fcb61fd7d9ee91068":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["45669a651c970812a680841b97a77cce06af559f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"d572389229127c297dd1fa5ce4758e1cec41e799":["5f4e87790277826a2aea119328600dfb07761f32","37087ea13c0fde1ce1a3b5579f60f827414045a9"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"962d04139994fce5193143ef35615499a9a96d78":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"37087ea13c0fde1ce1a3b5579f60f827414045a9":["0e36f19452726fab77a51c5fcb61fd7d9ee91068","5f4e87790277826a2aea119328600dfb07761f32"],"45669a651c970812a680841b97a77cce06af559f":["962d04139994fce5193143ef35615499a9a96d78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","962d04139994fce5193143ef35615499a9a96d78","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}