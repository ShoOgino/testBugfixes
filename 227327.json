{"path":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#createCollector().mjava","commits":[{"id":"4bf528aa2b9571ce1ec892ecf726201ef1e404e3","date":1288732150,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#createCollector().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    Collector createCollector() throws IOException {\n      maxGroupToFind = getMax(offset, numGroups, maxDoc);\n\n      if (compareSorts(sort, groupSort)) {\n        collector = new TopGroupSortCollector(groupBy, context, normalizeSort(sort), normalizeSort(groupSort), maxGroupToFind);\n      } else {\n        collector = new TopGroupCollector(groupBy, context, normalizeSort(sort), maxGroupToFind);\n      }\n      return collector;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc479405e18f92d715952b385a417931dc95c8dd","date":1288734335,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#createCollector().mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#createCollector().mjava","sourceNew":"    @Override\n    Collector createCollector() throws IOException {\n      maxGroupToFind = getMax(offset, numGroups, maxDoc);\n\n      if (compareSorts(sort, groupSort)) {\n        collector = new TopGroupCollector(groupBy, context, normalizeSort(sort), maxGroupToFind);\n      } else {\n        collector = new TopGroupSortCollector(groupBy, context, normalizeSort(sort), normalizeSort(groupSort), maxGroupToFind);\n      }\n      return collector;\n    }\n\n","sourceOld":"    @Override\n    Collector createCollector() throws IOException {\n      maxGroupToFind = getMax(offset, numGroups, maxDoc);\n\n      if (compareSorts(sort, groupSort)) {\n        collector = new TopGroupSortCollector(groupBy, context, normalizeSort(sort), normalizeSort(groupSort), maxGroupToFind);\n      } else {\n        collector = new TopGroupCollector(groupBy, context, normalizeSort(sort), maxGroupToFind);\n      }\n      return collector;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#createCollector().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    Collector createCollector() throws IOException {\n      maxGroupToFind = getMax(offset, numGroups, maxDoc);\n\n      if (compareSorts(sort, groupSort)) {\n        collector = new TopGroupCollector(groupBy, context, normalizeSort(sort), maxGroupToFind);\n      } else {\n        collector = new TopGroupSortCollector(groupBy, context, normalizeSort(sort), normalizeSort(groupSort), maxGroupToFind);\n      }\n      return collector;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"129258e6ec9684fea792a51eda00f2e0e03c1480","date":1289770450,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#createCollector().mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#createCollector().mjava","sourceNew":"    @Override\n    Collector createCollector() throws IOException {\n      maxGroupToFind = getMax(offset, numGroups, maxDoc);\n\n      // if we aren't going to return any groups, disregard the offset \n      if (numGroups == 0) maxGroupToFind = 0;\n\n      if (compareSorts(sort, groupSort)) {\n        collector = new TopGroupCollector(groupBy, context, normalizeSort(sort), maxGroupToFind);\n      } else {\n        collector = new TopGroupSortCollector(groupBy, context, normalizeSort(sort), normalizeSort(groupSort), maxGroupToFind);\n      }\n      return collector;\n    }\n\n","sourceOld":"    @Override\n    Collector createCollector() throws IOException {\n      maxGroupToFind = getMax(offset, numGroups, maxDoc);\n\n      if (compareSorts(sort, groupSort)) {\n        collector = new TopGroupCollector(groupBy, context, normalizeSort(sort), maxGroupToFind);\n      } else {\n        collector = new TopGroupSortCollector(groupBy, context, normalizeSort(sort), normalizeSort(groupSort), maxGroupToFind);\n      }\n      return collector;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#createCollector().mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#createCollector().mjava","sourceNew":"    @Override\n    Collector createCollector() throws IOException {\n      maxGroupToFind = getMax(offset, numGroups, maxDoc);\n\n      // if we aren't going to return any groups, disregard the offset \n      if (numGroups == 0) maxGroupToFind = 0;\n\n      if (compareSorts(sort, groupSort)) {\n        collector = new TopGroupCollector(groupBy, context, normalizeSort(sort), maxGroupToFind);\n      } else {\n        collector = new TopGroupSortCollector(groupBy, context, normalizeSort(sort), normalizeSort(groupSort), maxGroupToFind);\n      }\n      return collector;\n    }\n\n","sourceOld":"    @Override\n    Collector createCollector() throws IOException {\n      maxGroupToFind = getMax(offset, numGroups, maxDoc);\n\n      if (compareSorts(sort, groupSort)) {\n        collector = new TopGroupCollector(groupBy, context, normalizeSort(sort), maxGroupToFind);\n      } else {\n        collector = new TopGroupSortCollector(groupBy, context, normalizeSort(sort), normalizeSort(groupSort), maxGroupToFind);\n      }\n      return collector;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e62f57eded31ecb5e6b09f8edad73ba2819a5269","date":1290374488,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#createCollector().mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#createCollector().mjava","sourceNew":"    @Override\n    Collector createCollector() throws IOException {\n      maxGroupToFind = getMax(offset, numGroups, maxDoc);\n\n      // if we aren't going to return any groups, disregard the offset \n      if (numGroups == 0) maxGroupToFind = 0;\n\n      collector = new TopGroupCollector(groupBy, context, normalizeSort(sort), maxGroupToFind);\n\n      /*** if we need a different algorithm when sort != group.sort\n      if (compareSorts(sort, groupSort)) {\n        collector = new TopGroupCollector(groupBy, context, normalizeSort(sort), maxGroupToFind);\n      } else {\n        collector = new TopGroupSortCollector(groupBy, context, normalizeSort(sort), normalizeSort(groupSort), maxGroupToFind);\n      }\n      ***/\n      return collector;\n    }\n\n","sourceOld":"    @Override\n    Collector createCollector() throws IOException {\n      maxGroupToFind = getMax(offset, numGroups, maxDoc);\n\n      // if we aren't going to return any groups, disregard the offset \n      if (numGroups == 0) maxGroupToFind = 0;\n\n      if (compareSorts(sort, groupSort)) {\n        collector = new TopGroupCollector(groupBy, context, normalizeSort(sort), maxGroupToFind);\n      } else {\n        collector = new TopGroupSortCollector(groupBy, context, normalizeSort(sort), normalizeSort(groupSort), maxGroupToFind);\n      }\n      return collector;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#createCollector().mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#createCollector().mjava","sourceNew":"    @Override\n    Collector createCollector() throws IOException {\n      maxGroupToFind = getMax(offset, numGroups, maxDoc);\n\n      // if we aren't going to return any groups, disregard the offset \n      if (numGroups == 0) maxGroupToFind = 0;\n\n      collector = new TopGroupCollector(groupBy, context, normalizeSort(sort), maxGroupToFind);\n\n      /*** if we need a different algorithm when sort != group.sort\n      if (compareSorts(sort, groupSort)) {\n        collector = new TopGroupCollector(groupBy, context, normalizeSort(sort), maxGroupToFind);\n      } else {\n        collector = new TopGroupSortCollector(groupBy, context, normalizeSort(sort), normalizeSort(groupSort), maxGroupToFind);\n      }\n      ***/\n      return collector;\n    }\n\n","sourceOld":"    @Override\n    Collector createCollector() throws IOException {\n      maxGroupToFind = getMax(offset, numGroups, maxDoc);\n\n      // if we aren't going to return any groups, disregard the offset \n      if (numGroups == 0) maxGroupToFind = 0;\n\n      if (compareSorts(sort, groupSort)) {\n        collector = new TopGroupCollector(groupBy, context, normalizeSort(sort), maxGroupToFind);\n      } else {\n        collector = new TopGroupSortCollector(groupBy, context, normalizeSort(sort), normalizeSort(groupSort), maxGroupToFind);\n      }\n      return collector;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#createCollector().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    Collector createCollector() throws IOException {\n      maxGroupToFind = getMax(offset, numGroups, maxDoc);\n\n      // if we aren't going to return any groups, disregard the offset \n      if (numGroups == 0) maxGroupToFind = 0;\n\n      collector = new TopGroupCollector(groupBy, context, normalizeSort(sort), maxGroupToFind);\n\n      /*** if we need a different algorithm when sort != group.sort\n      if (compareSorts(sort, groupSort)) {\n        collector = new TopGroupCollector(groupBy, context, normalizeSort(sort), maxGroupToFind);\n      } else {\n        collector = new TopGroupSortCollector(groupBy, context, normalizeSort(sort), normalizeSort(groupSort), maxGroupToFind);\n      }\n      ***/\n      return collector;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"771281b4c7dc712b48ba338b970b49007ca402a1","date":1295480908,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#createCollector().mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#createCollector().mjava","sourceNew":"    @Override\n    Collector createCollector() throws IOException {\n      maxGroupToFind = getMax(offset, numGroups, maxDoc);\n\n      // if we aren't going to return any groups, disregard the offset \n      if (numGroups == 0) maxGroupToFind = 0;\n\n      collector = new TopGroupCollector(groupBy, context, searcher.weightSort(normalizeSort(sort)), maxGroupToFind);\n\n      /*** if we need a different algorithm when sort != group.sort\n      if (compareSorts(sort, groupSort)) {\n        collector = new TopGroupCollector(groupBy, context, normalizeSort(sort), maxGroupToFind);\n      } else {\n        collector = new TopGroupSortCollector(groupBy, context, normalizeSort(sort), normalizeSort(groupSort), maxGroupToFind);\n      }\n      ***/\n      return collector;\n    }\n\n","sourceOld":"    @Override\n    Collector createCollector() throws IOException {\n      maxGroupToFind = getMax(offset, numGroups, maxDoc);\n\n      // if we aren't going to return any groups, disregard the offset \n      if (numGroups == 0) maxGroupToFind = 0;\n\n      collector = new TopGroupCollector(groupBy, context, normalizeSort(sort), maxGroupToFind);\n\n      /*** if we need a different algorithm when sort != group.sort\n      if (compareSorts(sort, groupSort)) {\n        collector = new TopGroupCollector(groupBy, context, normalizeSort(sort), maxGroupToFind);\n      } else {\n        collector = new TopGroupSortCollector(groupBy, context, normalizeSort(sort), normalizeSort(groupSort), maxGroupToFind);\n      }\n      ***/\n      return collector;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#createCollector().mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#createCollector().mjava","sourceNew":"    @Override\n    Collector createCollector() throws IOException {\n      maxGroupToFind = getMax(offset, numGroups, maxDoc);\n\n      // if we aren't going to return any groups, disregard the offset \n      if (numGroups == 0) maxGroupToFind = 0;\n\n      collector = new TopGroupCollector(groupBy, context, searcher.weightSort(normalizeSort(sort)), maxGroupToFind);\n\n      /*** if we need a different algorithm when sort != group.sort\n      if (compareSorts(sort, groupSort)) {\n        collector = new TopGroupCollector(groupBy, context, normalizeSort(sort), maxGroupToFind);\n      } else {\n        collector = new TopGroupSortCollector(groupBy, context, normalizeSort(sort), normalizeSort(groupSort), maxGroupToFind);\n      }\n      ***/\n      return collector;\n    }\n\n","sourceOld":"    @Override\n    Collector createCollector() throws IOException {\n      maxGroupToFind = getMax(offset, numGroups, maxDoc);\n\n      // if we aren't going to return any groups, disregard the offset \n      if (numGroups == 0) maxGroupToFind = 0;\n\n      collector = new TopGroupCollector(groupBy, context, normalizeSort(sort), maxGroupToFind);\n\n      /*** if we need a different algorithm when sort != group.sort\n      if (compareSorts(sort, groupSort)) {\n        collector = new TopGroupCollector(groupBy, context, normalizeSort(sort), maxGroupToFind);\n      } else {\n        collector = new TopGroupSortCollector(groupBy, context, normalizeSort(sort), normalizeSort(groupSort), maxGroupToFind);\n      }\n      ***/\n      return collector;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#createCollector().mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#createCollector().mjava","sourceNew":"    @Override\n    Collector createCollector() throws IOException {\n      maxGroupToFind = getMax(offset, numGroups, maxDoc);\n\n      // if we aren't going to return any groups, disregard the offset \n      if (numGroups == 0) maxGroupToFind = 0;\n\n      collector = new TopGroupCollector(groupBy, context, searcher.weightSort(normalizeSort(sort)), maxGroupToFind);\n\n      /*** if we need a different algorithm when sort != group.sort\n      if (compareSorts(sort, groupSort)) {\n        collector = new TopGroupCollector(groupBy, context, normalizeSort(sort), maxGroupToFind);\n      } else {\n        collector = new TopGroupSortCollector(groupBy, context, normalizeSort(sort), normalizeSort(groupSort), maxGroupToFind);\n      }\n      ***/\n      return collector;\n    }\n\n","sourceOld":"    @Override\n    Collector createCollector() throws IOException {\n      maxGroupToFind = getMax(offset, numGroups, maxDoc);\n\n      // if we aren't going to return any groups, disregard the offset \n      if (numGroups == 0) maxGroupToFind = 0;\n\n      collector = new TopGroupCollector(groupBy, context, normalizeSort(sort), maxGroupToFind);\n\n      /*** if we need a different algorithm when sort != group.sort\n      if (compareSorts(sort, groupSort)) {\n        collector = new TopGroupCollector(groupBy, context, normalizeSort(sort), maxGroupToFind);\n      } else {\n        collector = new TopGroupSortCollector(groupBy, context, normalizeSort(sort), normalizeSort(groupSort), maxGroupToFind);\n      }\n      ***/\n      return collector;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c7cdfe5a1ea9db97faa404b251fa644faa73597","date":1308345959,"type":4,"author":"Martijn van Groningen","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#createCollector().mjava","sourceNew":null,"sourceOld":"    @Override\n    Collector createCollector() throws IOException {\n      maxGroupToFind = getMax(offset, numGroups, maxDoc);\n\n      // if we aren't going to return any groups, disregard the offset \n      if (numGroups == 0) maxGroupToFind = 0;\n\n      collector = new TopGroupCollector(groupBy, context, searcher.weightSort(normalizeSort(sort)), maxGroupToFind);\n\n      /*** if we need a different algorithm when sort != group.sort\n      if (compareSorts(sort, groupSort)) {\n        collector = new TopGroupCollector(groupBy, context, normalizeSort(sort), maxGroupToFind);\n      } else {\n        collector = new TopGroupSortCollector(groupBy, context, normalizeSort(sort), normalizeSort(groupSort), maxGroupToFind);\n      }\n      ***/\n      return collector;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7edfc3f7caa7b49a18fe367692768b33b018e9db","date":1308374217,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#createCollector().mjava","sourceNew":null,"sourceOld":"    @Override\n    Collector createCollector() throws IOException {\n      maxGroupToFind = getMax(offset, numGroups, maxDoc);\n\n      // if we aren't going to return any groups, disregard the offset \n      if (numGroups == 0) maxGroupToFind = 0;\n\n      collector = new TopGroupCollector(groupBy, context, searcher.weightSort(normalizeSort(sort)), maxGroupToFind);\n\n      /*** if we need a different algorithm when sort != group.sort\n      if (compareSorts(sort, groupSort)) {\n        collector = new TopGroupCollector(groupBy, context, normalizeSort(sort), maxGroupToFind);\n      } else {\n        collector = new TopGroupSortCollector(groupBy, context, normalizeSort(sort), normalizeSort(groupSort), maxGroupToFind);\n      }\n      ***/\n      return collector;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4bf528aa2b9571ce1ec892ecf726201ef1e404e3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["85a883878c0af761245ab048babc63d099f835f3","129258e6ec9684fea792a51eda00f2e0e03c1480"],"85a883878c0af761245ab048babc63d099f835f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bc479405e18f92d715952b385a417931dc95c8dd"],"bc479405e18f92d715952b385a417931dc95c8dd":["4bf528aa2b9571ce1ec892ecf726201ef1e404e3"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e62f57eded31ecb5e6b09f8edad73ba2819a5269"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","771281b4c7dc712b48ba338b970b49007ca402a1"],"771281b4c7dc712b48ba338b970b49007ca402a1":["e62f57eded31ecb5e6b09f8edad73ba2819a5269"],"7edfc3f7caa7b49a18fe367692768b33b018e9db":["771281b4c7dc712b48ba338b970b49007ca402a1","9c7cdfe5a1ea9db97faa404b251fa644faa73597"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","771281b4c7dc712b48ba338b970b49007ca402a1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9c7cdfe5a1ea9db97faa404b251fa644faa73597":["771281b4c7dc712b48ba338b970b49007ca402a1"],"129258e6ec9684fea792a51eda00f2e0e03c1480":["bc479405e18f92d715952b385a417931dc95c8dd"],"e62f57eded31ecb5e6b09f8edad73ba2819a5269":["129258e6ec9684fea792a51eda00f2e0e03c1480"],"3bb13258feba31ab676502787ab2e1779f129b7a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","e62f57eded31ecb5e6b09f8edad73ba2819a5269"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9c7cdfe5a1ea9db97faa404b251fa644faa73597"]},"commit2Childs":{"4bf528aa2b9571ce1ec892ecf726201ef1e404e3":["bc479405e18f92d715952b385a417931dc95c8dd"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["3bb13258feba31ab676502787ab2e1779f129b7a"],"85a883878c0af761245ab048babc63d099f835f3":["9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"bc479405e18f92d715952b385a417931dc95c8dd":["85a883878c0af761245ab048babc63d099f835f3","129258e6ec9684fea792a51eda00f2e0e03c1480"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"771281b4c7dc712b48ba338b970b49007ca402a1":["e79a6d080bdd5b2a8f56342cf571b5476de04180","7edfc3f7caa7b49a18fe367692768b33b018e9db","29ef99d61cda9641b6250bf9567329a6e65f901d","9c7cdfe5a1ea9db97faa404b251fa644faa73597"],"7edfc3f7caa7b49a18fe367692768b33b018e9db":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4bf528aa2b9571ce1ec892ecf726201ef1e404e3","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"129258e6ec9684fea792a51eda00f2e0e03c1480":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","e62f57eded31ecb5e6b09f8edad73ba2819a5269"],"9c7cdfe5a1ea9db97faa404b251fa644faa73597":["7edfc3f7caa7b49a18fe367692768b33b018e9db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e62f57eded31ecb5e6b09f8edad73ba2819a5269":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","771281b4c7dc712b48ba338b970b49007ca402a1","3bb13258feba31ab676502787ab2e1779f129b7a"],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e79a6d080bdd5b2a8f56342cf571b5476de04180","7edfc3f7caa7b49a18fe367692768b33b018e9db","29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}