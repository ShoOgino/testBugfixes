{"path":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/SolrOutputFormat#addSolrConfToDistributedCache(Job,File).mjava","commits":[{"id":"d6e604e9030fb0cabf0c5a85ae6039921a81419c","date":1386009743,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/SolrOutputFormat#addSolrConfToDistributedCache(Job,File).mjava","pathOld":"/dev/null","sourceNew":"  public static void addSolrConfToDistributedCache(Job job, File solrHomeZip)\n      throws IOException {\n    // Make a reasonably unique name for the zip file in the distributed cache\n    // to avoid collisions if multiple jobs are running.\n    String hdfsZipName = UUID.randomUUID().toString() + '.'\n        + ZIP_FILE_BASE_NAME;\n    Configuration jobConf = job.getConfiguration();\n    jobConf.set(ZIP_NAME, hdfsZipName);\n\n    Path zipPath = new Path(\"/tmp\", getZipName(jobConf));\n    FileSystem fs = FileSystem.get(jobConf);\n    fs.copyFromLocalFile(new Path(solrHomeZip.toString()), zipPath);\n    final URI baseZipUrl = fs.getUri().resolve(\n        zipPath.toString() + '#' + getZipName(jobConf));\n\n    DistributedCache.addCacheArchive(baseZipUrl, jobConf);\n    LOG.debug(\"Set Solr distributed cache: {}\", Arrays.asList(job.getCacheArchives()));\n    LOG.debug(\"Set zipPath: {}\", zipPath);\n    // Actually send the path for the configuration zip file\n    jobConf.set(SETUP_OK, zipPath.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/SolrOutputFormat#addSolrConfToDistributedCache(Job,File).mjava","pathOld":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/SolrOutputFormat#addSolrConfToDistributedCache(Job,File).mjava","sourceNew":"  public static void addSolrConfToDistributedCache(Job job, File solrHomeZip)\n      throws IOException {\n    // Make a reasonably unique name for the zip file in the distributed cache\n    // to avoid collisions if multiple jobs are running.\n    String hdfsZipName = UUID.randomUUID().toString() + '.'\n        + ZIP_FILE_BASE_NAME;\n    Configuration jobConf = job.getConfiguration();\n    jobConf.set(ZIP_NAME, hdfsZipName);\n\n    Path zipPath = new Path(\"/tmp\", getZipName(jobConf));\n    FileSystem fs = FileSystem.get(jobConf);\n    fs.copyFromLocalFile(new Path(solrHomeZip.toString()), zipPath);\n    final URI baseZipUrl = fs.getUri().resolve(\n        zipPath.toString() + '#' + getZipName(jobConf));\n\n    DistributedCache.addCacheArchive(baseZipUrl, jobConf);\n    LOG.debug(\"Set Solr distributed cache: {}\", Arrays.asList(job.getCacheArchives()));\n    LOG.debug(\"Set zipPath: {}\", zipPath);\n    // Actually send the path for the configuration zip file\n    jobConf.set(SETUP_OK, zipPath.toString());\n  }\n\n","sourceOld":"  public static void addSolrConfToDistributedCache(Job job, File solrHomeZip)\n      throws IOException {\n    // Make a reasonably unique name for the zip file in the distributed cache\n    // to avoid collisions if multiple jobs are running.\n    String hdfsZipName = UUID.randomUUID().toString() + '.'\n        + ZIP_FILE_BASE_NAME;\n    Configuration jobConf = job.getConfiguration();\n    jobConf.set(ZIP_NAME, hdfsZipName);\n\n    Path zipPath = new Path(\"/tmp\", getZipName(jobConf));\n    FileSystem fs = FileSystem.get(jobConf);\n    fs.copyFromLocalFile(new Path(solrHomeZip.toString()), zipPath);\n    final URI baseZipUrl = fs.getUri().resolve(\n        zipPath.toString() + '#' + getZipName(jobConf));\n\n    DistributedCache.addCacheArchive(baseZipUrl, jobConf);\n    LOG.debug(\"Set Solr distributed cache: {}\", Arrays.asList(job.getCacheArchives()));\n    LOG.debug(\"Set zipPath: {}\", zipPath);\n    // Actually send the path for the configuration zip file\n    jobConf.set(SETUP_OK, zipPath.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}