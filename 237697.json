{"path":"src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]]).mjava","commits":[{"id":"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349","date":1224582283,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]]).mjava","pathOld":"/dev/null","sourceNew":"  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles) {\n    FileOutputStream outFile = null;\n    FileInputStream inFile = null;\n    List<String> confFiles = new ArrayList<String>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = new Properties();\n    long replicationTime = System.currentTimeMillis();\n    try {\n      File f = new File(solrCore.getDataDir(), REPLICATION_PROPERTIES);\n      int indexCount = 1, confFilesCount = 1;\n      if (f.exists()) {\n        inFile = new FileInputStream(f);\n        props.load(inFile);\n        if (!props.isEmpty()) {\n          if (props.containsKey(\"timesIndexReplicated\"))\n            indexCount = Integer.valueOf(props.getProperty(\"timesIndexReplicated\")) + 1;\n\n          props.setProperty(\"timesIndexReplicated\", String.valueOf(indexCount));\n          props.setProperty(\"indexReplicatedAt\", String.valueOf(replicationTime));\n\n          if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n            props.setProperty(\"confFilesReplicated\", confFiles.toString());\n            props.setProperty(\"confFilesReplicatedAt\", String.valueOf(replicationTime));\n            if (props.containsKey(\"timesConfigReplicated\"))\n              confFilesCount = Integer.valueOf(props.getProperty(\"timesConfigReplicated\")) + 1;\n            props.setProperty(\"timesConfigReplicated\", String.valueOf(confFilesCount));\n          }\n        } else {\n          props.setProperty(\"timesIndexReplicated\", String.valueOf(indexCount));\n          props.setProperty(\"indexReplicatedAt\", String.valueOf(replicationTime));\n          if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n            props.setProperty(\"confFilesReplicated\", confFiles.toString());\n            props.setProperty(\"confFilesReplicatedAt\", String.valueOf(replicationTime));\n            props.setProperty(\"timesConfigReplicated\", String.valueOf(confFilesCount));\n          }\n        }\n      } else {\n        props.setProperty(\"timesIndexReplicated\", String.valueOf(indexCount));\n        props.setProperty(\"indexReplicatedAt\", String.valueOf(replicationTime));\n        if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n          props.setProperty(\"confFilesReplicated\", confFiles.toString());\n          props.setProperty(\"confFilesReplicatedAt\", String.valueOf(replicationTime));\n          props.setProperty(\"timesConfigReplicated\", String.valueOf(confFilesCount));\n        }\n      }\n      outFile = new FileOutputStream(f);\n      props.store(outFile, \"Replication details\");\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    }\n    finally {\n      closeNoExp(inFile);\n      closeNoExp(outFile);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["217dd2e5ec780896e70b9d4bf5ff18c0079142fb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8620c64e323e74078214cf931e505179d14c888e","date":1225270494,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]]).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]]).mjava","sourceNew":"  /**\n   * Helper method to record the last replication's details so that we can show them on the\n   * statistics page across restarts.\n   */\n  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles) {\n    FileOutputStream outFile = null;\n    FileInputStream inFile = null;\n    List<String> confFiles = new ArrayList<String>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = new Properties();\n    long replicationTime = System.currentTimeMillis();\n    try {\n      File f = new File(solrCore.getDataDir(), REPLICATION_PROPERTIES);\n      int indexCount = 1, confFilesCount = 1;\n      if (f.exists()) {\n        inFile = new FileInputStream(f);\n        props.load(inFile);\n        if (!props.isEmpty()) {\n          if (props.containsKey(\"timesIndexReplicated\"))\n            indexCount = Integer.valueOf(props.getProperty(\"timesIndexReplicated\")) + 1;\n\n          props.setProperty(\"timesIndexReplicated\", String.valueOf(indexCount));\n          props.setProperty(\"indexReplicatedAt\", String.valueOf(replicationTime));\n\n          if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n            props.setProperty(\"confFilesReplicated\", confFiles.toString());\n            props.setProperty(\"confFilesReplicatedAt\", String.valueOf(replicationTime));\n            if (props.containsKey(\"timesConfigReplicated\"))\n              confFilesCount = Integer.valueOf(props.getProperty(\"timesConfigReplicated\")) + 1;\n            props.setProperty(\"timesConfigReplicated\", String.valueOf(confFilesCount));\n          }\n        } else {\n          props.setProperty(\"timesIndexReplicated\", String.valueOf(indexCount));\n          props.setProperty(\"indexReplicatedAt\", String.valueOf(replicationTime));\n          if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n            props.setProperty(\"confFilesReplicated\", confFiles.toString());\n            props.setProperty(\"confFilesReplicatedAt\", String.valueOf(replicationTime));\n            props.setProperty(\"timesConfigReplicated\", String.valueOf(confFilesCount));\n          }\n        }\n      } else {\n        props.setProperty(\"timesIndexReplicated\", String.valueOf(indexCount));\n        props.setProperty(\"indexReplicatedAt\", String.valueOf(replicationTime));\n        if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n          props.setProperty(\"confFilesReplicated\", confFiles.toString());\n          props.setProperty(\"confFilesReplicatedAt\", String.valueOf(replicationTime));\n          props.setProperty(\"timesConfigReplicated\", String.valueOf(confFilesCount));\n        }\n      }\n      outFile = new FileOutputStream(f);\n      props.store(outFile, \"Replication details\");\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    }\n    finally {\n      closeNoExp(inFile);\n      closeNoExp(outFile);\n    }\n  }\n\n","sourceOld":"  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles) {\n    FileOutputStream outFile = null;\n    FileInputStream inFile = null;\n    List<String> confFiles = new ArrayList<String>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = new Properties();\n    long replicationTime = System.currentTimeMillis();\n    try {\n      File f = new File(solrCore.getDataDir(), REPLICATION_PROPERTIES);\n      int indexCount = 1, confFilesCount = 1;\n      if (f.exists()) {\n        inFile = new FileInputStream(f);\n        props.load(inFile);\n        if (!props.isEmpty()) {\n          if (props.containsKey(\"timesIndexReplicated\"))\n            indexCount = Integer.valueOf(props.getProperty(\"timesIndexReplicated\")) + 1;\n\n          props.setProperty(\"timesIndexReplicated\", String.valueOf(indexCount));\n          props.setProperty(\"indexReplicatedAt\", String.valueOf(replicationTime));\n\n          if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n            props.setProperty(\"confFilesReplicated\", confFiles.toString());\n            props.setProperty(\"confFilesReplicatedAt\", String.valueOf(replicationTime));\n            if (props.containsKey(\"timesConfigReplicated\"))\n              confFilesCount = Integer.valueOf(props.getProperty(\"timesConfigReplicated\")) + 1;\n            props.setProperty(\"timesConfigReplicated\", String.valueOf(confFilesCount));\n          }\n        } else {\n          props.setProperty(\"timesIndexReplicated\", String.valueOf(indexCount));\n          props.setProperty(\"indexReplicatedAt\", String.valueOf(replicationTime));\n          if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n            props.setProperty(\"confFilesReplicated\", confFiles.toString());\n            props.setProperty(\"confFilesReplicatedAt\", String.valueOf(replicationTime));\n            props.setProperty(\"timesConfigReplicated\", String.valueOf(confFilesCount));\n          }\n        }\n      } else {\n        props.setProperty(\"timesIndexReplicated\", String.valueOf(indexCount));\n        props.setProperty(\"indexReplicatedAt\", String.valueOf(replicationTime));\n        if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n          props.setProperty(\"confFilesReplicated\", confFiles.toString());\n          props.setProperty(\"confFilesReplicatedAt\", String.valueOf(replicationTime));\n          props.setProperty(\"timesConfigReplicated\", String.valueOf(confFilesCount));\n        }\n      }\n      outFile = new FileOutputStream(f);\n      props.store(outFile, \"Replication details\");\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    }\n    finally {\n      closeNoExp(inFile);\n      closeNoExp(outFile);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9be231d18ef58129524215a1d30331523320b744","date":1229505566,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]]).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]]).mjava","sourceNew":"  /**\n   * Helper method to record the last replication's details so that we can show them on the statistics page across\n   * restarts.\n   */\n  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles) {\n    FileOutputStream outFile = null;\n    FileInputStream inFile = null;\n    List<String> confFiles = new ArrayList<String>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = new Properties();\n    long replicationTime = System.currentTimeMillis();\n    try {\n      File f = new File(solrCore.getDataDir(), REPLICATION_PROPERTIES);\n      int indexCount = 1, confFilesCount = 1;\n      if (f.exists()) {\n        inFile = new FileInputStream(f);\n        props.load(inFile);\n        if (!props.isEmpty()) {\n          if (props.containsKey(\"timesIndexReplicated\"))\n            indexCount = Integer.valueOf(props.getProperty(\"timesIndexReplicated\")) + 1;\n\n          props.setProperty(\"timesIndexReplicated\", String.valueOf(indexCount));\n          props.setProperty(\"indexReplicatedAt\", String.valueOf(replicationTime));\n\n          if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n            props.setProperty(\"confFilesReplicated\", confFiles.toString());\n            props.setProperty(\"confFilesReplicatedAt\", String.valueOf(replicationTime));\n            if (props.containsKey(\"timesConfigReplicated\"))\n              confFilesCount = Integer.valueOf(props.getProperty(\"timesConfigReplicated\")) + 1;\n            props.setProperty(\"timesConfigReplicated\", String.valueOf(confFilesCount));\n          }\n        } else {\n          props.setProperty(\"timesIndexReplicated\", String.valueOf(indexCount));\n          props.setProperty(\"indexReplicatedAt\", String.valueOf(replicationTime));\n          if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n            props.setProperty(\"confFilesReplicated\", confFiles.toString());\n            props.setProperty(\"confFilesReplicatedAt\", String.valueOf(replicationTime));\n            props.setProperty(\"timesConfigReplicated\", String.valueOf(confFilesCount));\n          }\n        }\n      } else {\n        props.setProperty(\"timesIndexReplicated\", String.valueOf(indexCount));\n        props.setProperty(\"indexReplicatedAt\", String.valueOf(replicationTime));\n        if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n          props.setProperty(\"confFilesReplicated\", confFiles.toString());\n          props.setProperty(\"confFilesReplicatedAt\", String.valueOf(replicationTime));\n          props.setProperty(\"timesConfigReplicated\", String.valueOf(confFilesCount));\n        }\n      }\n      outFile = new FileOutputStream(f);\n      props.store(outFile, \"Replication details\");\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    }\n    finally {\n      closeNoExp(inFile);\n      closeNoExp(outFile);\n    }\n  }\n\n","sourceOld":"  /**\n   * Helper method to record the last replication's details so that we can show them on the\n   * statistics page across restarts.\n   */\n  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles) {\n    FileOutputStream outFile = null;\n    FileInputStream inFile = null;\n    List<String> confFiles = new ArrayList<String>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = new Properties();\n    long replicationTime = System.currentTimeMillis();\n    try {\n      File f = new File(solrCore.getDataDir(), REPLICATION_PROPERTIES);\n      int indexCount = 1, confFilesCount = 1;\n      if (f.exists()) {\n        inFile = new FileInputStream(f);\n        props.load(inFile);\n        if (!props.isEmpty()) {\n          if (props.containsKey(\"timesIndexReplicated\"))\n            indexCount = Integer.valueOf(props.getProperty(\"timesIndexReplicated\")) + 1;\n\n          props.setProperty(\"timesIndexReplicated\", String.valueOf(indexCount));\n          props.setProperty(\"indexReplicatedAt\", String.valueOf(replicationTime));\n\n          if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n            props.setProperty(\"confFilesReplicated\", confFiles.toString());\n            props.setProperty(\"confFilesReplicatedAt\", String.valueOf(replicationTime));\n            if (props.containsKey(\"timesConfigReplicated\"))\n              confFilesCount = Integer.valueOf(props.getProperty(\"timesConfigReplicated\")) + 1;\n            props.setProperty(\"timesConfigReplicated\", String.valueOf(confFilesCount));\n          }\n        } else {\n          props.setProperty(\"timesIndexReplicated\", String.valueOf(indexCount));\n          props.setProperty(\"indexReplicatedAt\", String.valueOf(replicationTime));\n          if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n            props.setProperty(\"confFilesReplicated\", confFiles.toString());\n            props.setProperty(\"confFilesReplicatedAt\", String.valueOf(replicationTime));\n            props.setProperty(\"timesConfigReplicated\", String.valueOf(confFilesCount));\n          }\n        }\n      } else {\n        props.setProperty(\"timesIndexReplicated\", String.valueOf(indexCount));\n        props.setProperty(\"indexReplicatedAt\", String.valueOf(replicationTime));\n        if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n          props.setProperty(\"confFilesReplicated\", confFiles.toString());\n          props.setProperty(\"confFilesReplicatedAt\", String.valueOf(replicationTime));\n          props.setProperty(\"timesConfigReplicated\", String.valueOf(confFilesCount));\n        }\n      }\n      outFile = new FileOutputStream(f);\n      props.store(outFile, \"Replication details\");\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    }\n    finally {\n      closeNoExp(inFile);\n      closeNoExp(outFile);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d57b2df2925606d27f91862b374584f94d497991","date":1230014190,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]]).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]]).mjava","sourceNew":"  /**\n   * Helper method to record the last replication's details so that we can show them on the statistics page across\n   * restarts.\n   */\n  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles) {\n    FileOutputStream outFile = null;\n    FileInputStream inFile = null;\n    List<String> confFiles = new ArrayList<String>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = new Properties();\n    long replicationTime = System.currentTimeMillis();\n    try {\n      File f = new File(solrCore.getDataDir(), REPLICATION_PROPERTIES);\n      int indexCount = 1, confFilesCount = 1;\n      if (f.exists()) {\n        inFile = new FileInputStream(f);\n        props.load(inFile);\n      }\n      if (props.containsKey(\"timesIndexReplicated\")) {\n        indexCount = Integer.valueOf(props.getProperty(\"timesIndexReplicated\")) + 1;\n      }\n      props.setProperty(\"timesIndexReplicated\", String.valueOf(indexCount));\n      props.setProperty(\"indexReplicatedAt\", String.valueOf(replicationTime));\n      if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n        props.setProperty(\"confFilesReplicated\", confFiles.toString());\n        props.setProperty(\"confFilesReplicatedAt\", String.valueOf(replicationTime));\n        if (props.containsKey(\"timesConfigReplicated\")) {\n          confFilesCount = Integer.valueOf(props.getProperty(\"timesConfigReplicated\")) + 1;\n        }\n        props.setProperty(\"timesConfigReplicated\", String.valueOf(confFilesCount));\n      }\n      outFile = new FileOutputStream(f);\n      props.store(outFile, \"Replication details\");\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    }\n    finally {\n      closeNoExp(inFile);\n      closeNoExp(outFile);\n    }\n  }\n\n","sourceOld":"  /**\n   * Helper method to record the last replication's details so that we can show them on the statistics page across\n   * restarts.\n   */\n  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles) {\n    FileOutputStream outFile = null;\n    FileInputStream inFile = null;\n    List<String> confFiles = new ArrayList<String>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = new Properties();\n    long replicationTime = System.currentTimeMillis();\n    try {\n      File f = new File(solrCore.getDataDir(), REPLICATION_PROPERTIES);\n      int indexCount = 1, confFilesCount = 1;\n      if (f.exists()) {\n        inFile = new FileInputStream(f);\n        props.load(inFile);\n        if (!props.isEmpty()) {\n          if (props.containsKey(\"timesIndexReplicated\"))\n            indexCount = Integer.valueOf(props.getProperty(\"timesIndexReplicated\")) + 1;\n\n          props.setProperty(\"timesIndexReplicated\", String.valueOf(indexCount));\n          props.setProperty(\"indexReplicatedAt\", String.valueOf(replicationTime));\n\n          if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n            props.setProperty(\"confFilesReplicated\", confFiles.toString());\n            props.setProperty(\"confFilesReplicatedAt\", String.valueOf(replicationTime));\n            if (props.containsKey(\"timesConfigReplicated\"))\n              confFilesCount = Integer.valueOf(props.getProperty(\"timesConfigReplicated\")) + 1;\n            props.setProperty(\"timesConfigReplicated\", String.valueOf(confFilesCount));\n          }\n        } else {\n          props.setProperty(\"timesIndexReplicated\", String.valueOf(indexCount));\n          props.setProperty(\"indexReplicatedAt\", String.valueOf(replicationTime));\n          if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n            props.setProperty(\"confFilesReplicated\", confFiles.toString());\n            props.setProperty(\"confFilesReplicatedAt\", String.valueOf(replicationTime));\n            props.setProperty(\"timesConfigReplicated\", String.valueOf(confFilesCount));\n          }\n        }\n      } else {\n        props.setProperty(\"timesIndexReplicated\", String.valueOf(indexCount));\n        props.setProperty(\"indexReplicatedAt\", String.valueOf(replicationTime));\n        if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n          props.setProperty(\"confFilesReplicated\", confFiles.toString());\n          props.setProperty(\"confFilesReplicatedAt\", String.valueOf(replicationTime));\n          props.setProperty(\"timesConfigReplicated\", String.valueOf(confFilesCount));\n        }\n      }\n      outFile = new FileOutputStream(f);\n      props.store(outFile, \"Replication details\");\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    }\n    finally {\n      closeNoExp(inFile);\n      closeNoExp(outFile);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"217dd2e5ec780896e70b9d4bf5ff18c0079142fb","date":1241459287,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]]).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]]).mjava","sourceNew":"  /**\n   * Helper method to record the last replication's details so that we can show them on the statistics page across\n   * restarts.\n   */\n  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles) {\n    FileOutputStream outFile = null;\n    FileInputStream inFile = null;\n    List<String> confFiles = new ArrayList<String>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = new Properties();\n    long replicationTime = System.currentTimeMillis();\n    try {\n      File f = new File(solrCore.getDataDir(), REPLICATION_PROPERTIES);\n      int indexCount = 1, confFilesCount = 1;\n      if (f.exists()) {\n        inFile = new FileInputStream(f);\n        props.load(inFile);\n      }\n      if (props.containsKey(\"timesIndexReplicated\")) {\n        indexCount = Integer.valueOf(props.getProperty(\"timesIndexReplicated\")) + 1;\n      }\n      props.setProperty(\"timesIndexReplicated\", String.valueOf(indexCount));\n      props.setProperty(\"indexReplicatedAt\", String.valueOf(replicationTime));\n      if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n        props.setProperty(\"confFilesReplicated\", confFiles.toString());\n        props.setProperty(\"confFilesReplicatedAt\", String.valueOf(replicationTime));\n        if (props.containsKey(\"timesConfigReplicated\")) {\n          confFilesCount = Integer.valueOf(props.getProperty(\"timesConfigReplicated\")) + 1;\n        }\n        props.setProperty(\"timesConfigReplicated\", String.valueOf(confFilesCount));\n      }\n      outFile = new FileOutputStream(f);\n      props.store(outFile, \"Replication details\");\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    }\n    finally {\n      IOUtils.closeQuietly(inFile);\n      IOUtils.closeQuietly(outFile);\n    }\n  }\n\n","sourceOld":"  /**\n   * Helper method to record the last replication's details so that we can show them on the statistics page across\n   * restarts.\n   */\n  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles) {\n    FileOutputStream outFile = null;\n    FileInputStream inFile = null;\n    List<String> confFiles = new ArrayList<String>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = new Properties();\n    long replicationTime = System.currentTimeMillis();\n    try {\n      File f = new File(solrCore.getDataDir(), REPLICATION_PROPERTIES);\n      int indexCount = 1, confFilesCount = 1;\n      if (f.exists()) {\n        inFile = new FileInputStream(f);\n        props.load(inFile);\n      }\n      if (props.containsKey(\"timesIndexReplicated\")) {\n        indexCount = Integer.valueOf(props.getProperty(\"timesIndexReplicated\")) + 1;\n      }\n      props.setProperty(\"timesIndexReplicated\", String.valueOf(indexCount));\n      props.setProperty(\"indexReplicatedAt\", String.valueOf(replicationTime));\n      if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n        props.setProperty(\"confFilesReplicated\", confFiles.toString());\n        props.setProperty(\"confFilesReplicatedAt\", String.valueOf(replicationTime));\n        if (props.containsKey(\"timesConfigReplicated\")) {\n          confFilesCount = Integer.valueOf(props.getProperty(\"timesConfigReplicated\")) + 1;\n        }\n        props.setProperty(\"timesConfigReplicated\", String.valueOf(confFilesCount));\n      }\n      outFile = new FileOutputStream(f);\n      props.store(outFile, \"Replication details\");\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    }\n    finally {\n      closeNoExp(inFile);\n      closeNoExp(outFile);\n    }\n  }\n\n","bugFix":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f1a1d7f1604a41328b566b1be0c5ad6038117e8","date":1252499131,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]],boolean).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]]).mjava","sourceNew":"  /**\n   * Helper method to record the last replication's details so that we can show them on the statistics page across\n   * restarts.\n   */\n  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles, boolean successfulInstall) {\n    FileOutputStream outFile = null;\n    List<String> confFiles = new ArrayList<String>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = replicationHandler.loadReplicationProperties();\n    long replicationTime = System.currentTimeMillis();\n    long replicationTimeTaken = (replicationTime - getReplicationStartTime()) / 1000;\n    try {\n      int indexCount = 1, confFilesCount = 1;\n      if (props.containsKey(TIMES_INDEX_REPLICATED)) {\n        indexCount = Integer.valueOf(props.getProperty(TIMES_INDEX_REPLICATED)) + 1;\n      }\n      StringBuffer sb = readToStringBuffer(replicationTime, props.getProperty(INDEX_REPLICATED_AT_LIST));\n      props.setProperty(INDEX_REPLICATED_AT_LIST, sb.toString());\n      props.setProperty(INDEX_REPLICATED_AT, String.valueOf(replicationTime));\n      props.setProperty(PREVIOUS_CYCLE_TIME_TAKEN, String.valueOf(replicationTimeTaken));\n      props.setProperty(TIMES_INDEX_REPLICATED, String.valueOf(indexCount));\n      if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n        props.setProperty(CONF_FILES_REPLICATED, confFiles.toString());\n        props.setProperty(CONF_FILES_REPLICATED_AT, String.valueOf(replicationTime));\n        if (props.containsKey(TIMES_CONFIG_REPLICATED)) {\n          confFilesCount = Integer.valueOf(props.getProperty(TIMES_CONFIG_REPLICATED)) + 1;\n        }\n        props.setProperty(TIMES_CONFIG_REPLICATED, String.valueOf(confFilesCount));\n      }\n\n      props.setProperty(LAST_CYCLE_BYTES_DOWNLOADED, String.valueOf(getTotalBytesDownloaded(this)));\n      if (!successfulInstall) {\n        int numFailures = 1;\n        if (props.containsKey(TIMES_FAILED)) {\n          numFailures = Integer.valueOf(props.getProperty(TIMES_FAILED)) + 1;\n        }\n        props.setProperty(TIMES_FAILED, String.valueOf(numFailures));\n        props.setProperty(REPLICATION_FAILED_AT, String.valueOf(replicationTime));\n        sb = readToStringBuffer(replicationTime, props.getProperty(REPLICATION_FAILED_AT_LIST));\n        props.setProperty(REPLICATION_FAILED_AT_LIST, sb.toString());\n      }\n      File f = new File(solrCore.getDataDir(), REPLICATION_PROPERTIES);\n      outFile = new FileOutputStream(f);\n      props.store(outFile, \"Replication details\");\n      outFile.close();\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    }\n    finally {\n      IOUtils.closeQuietly(outFile);\n    }\n  }\n\n","sourceOld":"  /**\n   * Helper method to record the last replication's details so that we can show them on the statistics page across\n   * restarts.\n   */\n  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles) {\n    FileOutputStream outFile = null;\n    FileInputStream inFile = null;\n    List<String> confFiles = new ArrayList<String>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = new Properties();\n    long replicationTime = System.currentTimeMillis();\n    try {\n      File f = new File(solrCore.getDataDir(), REPLICATION_PROPERTIES);\n      int indexCount = 1, confFilesCount = 1;\n      if (f.exists()) {\n        inFile = new FileInputStream(f);\n        props.load(inFile);\n      }\n      if (props.containsKey(\"timesIndexReplicated\")) {\n        indexCount = Integer.valueOf(props.getProperty(\"timesIndexReplicated\")) + 1;\n      }\n      props.setProperty(\"timesIndexReplicated\", String.valueOf(indexCount));\n      props.setProperty(\"indexReplicatedAt\", String.valueOf(replicationTime));\n      if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n        props.setProperty(\"confFilesReplicated\", confFiles.toString());\n        props.setProperty(\"confFilesReplicatedAt\", String.valueOf(replicationTime));\n        if (props.containsKey(\"timesConfigReplicated\")) {\n          confFilesCount = Integer.valueOf(props.getProperty(\"timesConfigReplicated\")) + 1;\n        }\n        props.setProperty(\"timesConfigReplicated\", String.valueOf(confFilesCount));\n      }\n      outFile = new FileOutputStream(f);\n      props.store(outFile, \"Replication details\");\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    }\n    finally {\n      IOUtils.closeQuietly(inFile);\n      IOUtils.closeQuietly(outFile);\n    }\n  }\n\n","bugFix":null,"bugIntro":["d06343967a29132f5d782f74e8d0988400278a02","d06343967a29132f5d782f74e8d0988400278a02","d06343967a29132f5d782f74e8d0988400278a02"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"9be231d18ef58129524215a1d30331523320b744":["8620c64e323e74078214cf931e505179d14c888e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"8620c64e323e74078214cf931e505179d14c888e":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"4f1a1d7f1604a41328b566b1be0c5ad6038117e8":["217dd2e5ec780896e70b9d4bf5ff18c0079142fb"],"d57b2df2925606d27f91862b374584f94d497991":["9be231d18ef58129524215a1d30331523320b744"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"217dd2e5ec780896e70b9d4bf5ff18c0079142fb":["d57b2df2925606d27f91862b374584f94d497991"]},"commit2Childs":{"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349":["8620c64e323e74078214cf931e505179d14c888e"],"9be231d18ef58129524215a1d30331523320b744":["d57b2df2925606d27f91862b374584f94d497991"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8620c64e323e74078214cf931e505179d14c888e":["9be231d18ef58129524215a1d30331523320b744"],"4f1a1d7f1604a41328b566b1be0c5ad6038117e8":[],"d57b2df2925606d27f91862b374584f94d497991":["217dd2e5ec780896e70b9d4bf5ff18c0079142fb"],"217dd2e5ec780896e70b9d4bf5ff18c0079142fb":["4f1a1d7f1604a41328b566b1be0c5ad6038117e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4f1a1d7f1604a41328b566b1be0c5ad6038117e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}