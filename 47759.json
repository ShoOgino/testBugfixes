{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentFullPositionsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","commits":[{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentFullPositionsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentFullPositionsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","sourceNew":"    public SegmentFullPositionsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits liveDocs) throws IOException {\n      storeOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      storePayloads = fieldInfo.hasPayloads();\n      assert fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n      assert storePayloads || storeOffsets;\n      if (payload == null) {\n        payload = new BytesRefBuilder();\n      }\n\n      this.liveDocs = liveDocs;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      lazyProxPointer = termState.proxOffset;\n\n      limit = termState.docFreq;\n      ord = 0;\n      doc = -1;\n      accum = 0;\n      position = 0;\n      startOffset = 0;\n\n      skipped = false;\n      posPendingCount = 0;\n      payloadPending = false;\n\n      freqOffset = termState.freqOffset;\n      proxOffset = termState.proxOffset;\n      skipOffset = termState.skipOffset;\n      //System.out.println(\"StandardR.D&PE reset seg=\" + segment + \" limit=\" + limit + \" freqFP=\" + freqOffset + \" proxFP=\" + proxOffset + \" this=\" + this);\n\n      return this;\n    }\n\n","sourceOld":"    public SegmentFullPositionsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits liveDocs) throws IOException {\n      storeOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      storePayloads = fieldInfo.hasPayloads();\n      assert fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n      assert storePayloads || storeOffsets;\n      if (payload == null) {\n        payload = new BytesRefBuilder();\n      }\n\n      this.liveDocs = liveDocs;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      lazyProxPointer = termState.proxOffset;\n\n      limit = termState.docFreq;\n      ord = 0;\n      doc = -1;\n      accum = 0;\n      position = 0;\n      startOffset = 0;\n\n      skipped = false;\n      posPendingCount = 0;\n      payloadPending = false;\n\n      freqOffset = termState.freqOffset;\n      proxOffset = termState.proxOffset;\n      skipOffset = termState.skipOffset;\n      //System.out.println(\"StandardR.D&PE reset seg=\" + segment + \" limit=\" + limit + \" freqFP=\" + freqOffset + \" proxFP=\" + proxOffset + \" this=\" + this);\n\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentFullPositionsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentFullPositionsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","sourceNew":"    public SegmentFullPositionsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits liveDocs) throws IOException {\n      storeOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      storePayloads = fieldInfo.hasPayloads();\n      assert fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n      assert storePayloads || storeOffsets;\n      if (payload == null) {\n        payload = new BytesRefBuilder();\n      }\n\n      this.liveDocs = liveDocs;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      lazyProxPointer = termState.proxOffset;\n\n      limit = termState.docFreq;\n      ord = 0;\n      doc = -1;\n      accum = 0;\n      position = 0;\n      startOffset = 0;\n\n      skipped = false;\n      posPendingCount = 0;\n      payloadPending = false;\n\n      freqOffset = termState.freqOffset;\n      proxOffset = termState.proxOffset;\n      skipOffset = termState.skipOffset;\n      //System.out.println(\"StandardR.D&PE reset seg=\" + segment + \" limit=\" + limit + \" freqFP=\" + freqOffset + \" proxFP=\" + proxOffset + \" this=\" + this);\n\n      return this;\n    }\n\n","sourceOld":"    public SegmentFullPositionsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits liveDocs) throws IOException {\n      storeOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      storePayloads = fieldInfo.hasPayloads();\n      assert fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n      assert storePayloads || storeOffsets;\n      if (payload == null) {\n        payload = new BytesRefBuilder();\n      }\n\n      this.liveDocs = liveDocs;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      lazyProxPointer = termState.proxOffset;\n\n      limit = termState.docFreq;\n      ord = 0;\n      doc = -1;\n      accum = 0;\n      position = 0;\n      startOffset = 0;\n\n      skipped = false;\n      posPendingCount = 0;\n      payloadPending = false;\n\n      freqOffset = termState.freqOffset;\n      proxOffset = termState.proxOffset;\n      skipOffset = termState.skipOffset;\n      //System.out.println(\"StandardR.D&PE reset seg=\" + segment + \" limit=\" + limit + \" freqFP=\" + freqOffset + \" proxFP=\" + proxOffset + \" this=\" + this);\n\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentFullPositionsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","sourceNew":null,"sourceOld":"    public SegmentFullPositionsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits liveDocs) throws IOException {\n      storeOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      storePayloads = fieldInfo.hasPayloads();\n      assert fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n      assert storePayloads || storeOffsets;\n      if (payload == null) {\n        payload = new BytesRefBuilder();\n      }\n\n      this.liveDocs = liveDocs;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      lazyProxPointer = termState.proxOffset;\n\n      limit = termState.docFreq;\n      ord = 0;\n      doc = -1;\n      accum = 0;\n      position = 0;\n      startOffset = 0;\n\n      skipped = false;\n      posPendingCount = 0;\n      payloadPending = false;\n\n      freqOffset = termState.freqOffset;\n      proxOffset = termState.proxOffset;\n      skipOffset = termState.skipOffset;\n      //System.out.println(\"StandardR.D&PE reset seg=\" + segment + \" limit=\" + limit + \" freqFP=\" + freqOffset + \" proxFP=\" + proxOffset + \" this=\" + this);\n\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}