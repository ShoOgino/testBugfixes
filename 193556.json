{"path":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher,Map[Term,TermContext],float).mjava","commits":[{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher,Map[Term,TermContext],float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher,Map[Term,TermContext]).mjava","sourceNew":"  /**\n   * Create a new SpanWeight\n   * @param query the parent query\n   * @param searcher the IndexSearcher to query against\n   * @param termContexts a map of terms to termcontexts for use in building the similarity.  May\n   *                     be null if scores are not required\n   * @throws IOException on error\n   */\n  public SpanWeight(SpanQuery query, IndexSearcher searcher, Map<Term, TermContext> termContexts, float boost) throws IOException {\n    super(query);\n    this.field = query.getField();\n    this.similarity = searcher.getSimilarity(termContexts != null);\n    this.simWeight = buildSimWeight(query, searcher, termContexts, boost);\n  }\n\n","sourceOld":"  /**\n   * Create a new SpanWeight\n   * @param query the parent query\n   * @param searcher the IndexSearcher to query against\n   * @param termContexts a map of terms to termcontexts for use in building the similarity.  May\n   *                     be null if scores are not required\n   * @throws IOException on error\n   */\n  public SpanWeight(SpanQuery query, IndexSearcher searcher, Map<Term, TermContext> termContexts) throws IOException {\n    super(query);\n    this.field = query.getField();\n    this.similarity = searcher.getSimilarity(termContexts != null);\n    this.simWeight = buildSimWeight(query, searcher, termContexts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher,Map[Term,TermContext],float).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new SpanWeight\n   * @param query the parent query\n   * @param searcher the IndexSearcher to query against\n   * @param termContexts a map of terms to termcontexts for use in building the similarity.  May\n   *                     be null if scores are not required\n   * @throws IOException on error\n   */\n  public SpanWeight(SpanQuery query, IndexSearcher searcher, Map<Term, TermContext> termContexts, float boost) throws IOException {\n    super(query);\n    this.field = query.getField();\n    this.similarity = searcher.getSimilarity(termContexts != null);\n    this.simWeight = buildSimWeight(query, searcher, termContexts, boost);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68d6cb7f0f019661a784bd0e5a21e85b5f812af6","date":1515075216,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher,Map[Term,TermContext],float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher,Map[Term,TermContext],float).mjava","sourceNew":"  /**\n   * Create a new SpanWeight\n   * @param query the parent query\n   * @param searcher the IndexSearcher to query against\n   * @param termContexts a map of terms to termcontexts for use in building the similarity.  May\n   *                     be null if scores are not required\n   * @throws IOException on error\n   */\n  public SpanWeight(SpanQuery query, IndexSearcher searcher, Map<Term, TermContext> termContexts, float boost) throws IOException {\n    super(query);\n    this.field = query.getField();\n    this.similarity = searcher.getSimilarity();\n    this.simScorer = buildSimWeight(query, searcher, termContexts, boost);\n  }\n\n","sourceOld":"  /**\n   * Create a new SpanWeight\n   * @param query the parent query\n   * @param searcher the IndexSearcher to query against\n   * @param termContexts a map of terms to termcontexts for use in building the similarity.  May\n   *                     be null if scores are not required\n   * @throws IOException on error\n   */\n  public SpanWeight(SpanQuery query, IndexSearcher searcher, Map<Term, TermContext> termContexts, float boost) throws IOException {\n    super(query);\n    this.field = query.getField();\n    this.similarity = searcher.getSimilarity(termContexts != null);\n    this.simWeight = buildSimWeight(query, searcher, termContexts, boost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6e9f769521480a623f897c0d59089b919fa4239","date":1515161835,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher,Map[Term,TermStates],float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher,Map[Term,TermContext],float).mjava","sourceNew":"  /**\n   * Create a new SpanWeight\n   * @param query the parent query\n   * @param searcher the IndexSearcher to query against\n   * @param termStates a map of terms to {@link TermStates} for use in building the similarity.  May\n   *                     be null if scores are not required\n   * @throws IOException on error\n   */\n  public SpanWeight(SpanQuery query, IndexSearcher searcher, Map<Term, TermStates> termStates, float boost) throws IOException {\n    super(query);\n    this.field = query.getField();\n    this.similarity = searcher.getSimilarity();\n    this.simScorer = buildSimWeight(query, searcher, termStates, boost);\n  }\n\n","sourceOld":"  /**\n   * Create a new SpanWeight\n   * @param query the parent query\n   * @param searcher the IndexSearcher to query against\n   * @param termContexts a map of terms to termcontexts for use in building the similarity.  May\n   *                     be null if scores are not required\n   * @throws IOException on error\n   */\n  public SpanWeight(SpanQuery query, IndexSearcher searcher, Map<Term, TermContext> termContexts, float boost) throws IOException {\n    super(query);\n    this.field = query.getField();\n    this.similarity = searcher.getSimilarity();\n    this.simScorer = buildSimWeight(query, searcher, termContexts, boost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher,Map[Term,TermContext],float).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create a new SpanWeight\n   * @param query the parent query\n   * @param searcher the IndexSearcher to query against\n   * @param termContexts a map of terms to termcontexts for use in building the similarity.  May\n   *                     be null if scores are not required\n   * @throws IOException on error\n   */\n  public SpanWeight(SpanQuery query, IndexSearcher searcher, Map<Term, TermContext> termContexts, float boost) throws IOException {\n    super(query);\n    this.field = query.getField();\n    this.similarity = searcher.getSimilarity(termContexts != null);\n    this.simWeight = buildSimWeight(query, searcher, termContexts, boost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","a6e9f769521480a623f897c0d59089b919fa4239"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"a6e9f769521480a623f897c0d59089b919fa4239":["68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["a6e9f769521480a623f897c0d59089b919fa4239"],"a6e9f769521480a623f897c0d59089b919fa4239":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["b94236357aaa22b76c10629851fe4e376e0cea82","68d6cb7f0f019661a784bd0e5a21e85b5f812af6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}