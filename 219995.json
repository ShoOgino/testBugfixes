{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimDistribStateManager#testListData().mjava","commits":[{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimDistribStateManager#testListData().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestDistribStateManager#testListData().mjava","sourceNew":"  @Test\n  public void testListData() throws Exception {\n    assertFalse(stateManager.hasData(\"/listData/foo\"));\n    assertFalse(stateManager.hasData(\"/listData/foo/bar\"));\n    try {\n      stateManager.createData(\"/listData/foo/bar\", new byte[0], CreateMode.PERSISTENT);\n      fail(\"should not succeed\");\n    } catch (NoSuchElementException e) {\n      // expected\n    }\n    try {\n      stateManager.listData(\"/listData/foo\");\n      fail(\"should not succeed\");\n    } catch (NoSuchElementException e) {\n      // expected\n    }\n    stateManager.makePath(\"/listData\");\n    List<String> kids = stateManager.listData(\"/listData\");\n    assertEquals(0, kids.size());\n    stateManager.makePath(\"/listData/foo\");\n    kids = stateManager.listData(\"/listData\");\n    assertEquals(1, kids.size());\n    assertEquals(\"foo\", kids.get(0));\n    stateManager.createData(\"/listData/foo/bar\", new byte[0], CreateMode.PERSISTENT);\n    stateManager.createData(\"/listData/foo/baz\", new byte[0], CreateMode.PERSISTENT);\n    kids = stateManager.listData(\"/listData/foo\");\n    assertEquals(2, kids.size());\n    assertTrue(kids.contains(\"bar\"));\n    assertTrue(kids.contains(\"baz\"));\n    try {\n      stateManager.createData(\"/listData/foo/bar\", new byte[0], CreateMode.PERSISTENT);\n      fail(\"should not succeed\");\n    } catch (AlreadyExistsException e) {\n      // expected\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testListData() throws Exception {\n    assertFalse(stateManager.hasData(\"/listData/foo\"));\n    assertFalse(stateManager.hasData(\"/listData/foo/bar\"));\n    try {\n      stateManager.createData(\"/listData/foo/bar\", new byte[0], CreateMode.PERSISTENT);\n      fail(\"should not succeed\");\n    } catch (NoSuchElementException e) {\n      // expected\n    }\n    try {\n      stateManager.listData(\"/listData/foo\");\n      fail(\"should not succeed\");\n    } catch (NoSuchElementException e) {\n      // expected\n    }\n    stateManager.makePath(\"/listData\");\n    List<String> kids = stateManager.listData(\"/listData\");\n    assertEquals(0, kids.size());\n    stateManager.makePath(\"/listData/foo\");\n    kids = stateManager.listData(\"/listData\");\n    assertEquals(1, kids.size());\n    assertEquals(\"foo\", kids.get(0));\n    stateManager.createData(\"/listData/foo/bar\", new byte[0], CreateMode.PERSISTENT);\n    stateManager.createData(\"/listData/foo/baz\", new byte[0], CreateMode.PERSISTENT);\n    kids = stateManager.listData(\"/listData/foo\");\n    assertEquals(2, kids.size());\n    assertTrue(kids.contains(\"bar\"));\n    assertTrue(kids.contains(\"baz\"));\n    try {\n      stateManager.createData(\"/listData/foo/bar\", new byte[0], CreateMode.PERSISTENT);\n      fail(\"should not succeed\");\n    } catch (AlreadyExistsException e) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimDistribStateManager#testListData().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testListData() throws Exception {\n    assertFalse(stateManager.hasData(\"/listData/foo\"));\n    assertFalse(stateManager.hasData(\"/listData/foo/bar\"));\n    try {\n      stateManager.createData(\"/listData/foo/bar\", new byte[0], CreateMode.PERSISTENT);\n      fail(\"should not succeed\");\n    } catch (NoSuchElementException e) {\n      // expected\n    }\n    try {\n      stateManager.listData(\"/listData/foo\");\n      fail(\"should not succeed\");\n    } catch (NoSuchElementException e) {\n      // expected\n    }\n    stateManager.makePath(\"/listData\");\n    List<String> kids = stateManager.listData(\"/listData\");\n    assertEquals(0, kids.size());\n    stateManager.makePath(\"/listData/foo\");\n    kids = stateManager.listData(\"/listData\");\n    assertEquals(1, kids.size());\n    assertEquals(\"foo\", kids.get(0));\n    stateManager.createData(\"/listData/foo/bar\", new byte[0], CreateMode.PERSISTENT);\n    stateManager.createData(\"/listData/foo/baz\", new byte[0], CreateMode.PERSISTENT);\n    kids = stateManager.listData(\"/listData/foo\");\n    assertEquals(2, kids.size());\n    assertTrue(kids.contains(\"bar\"));\n    assertTrue(kids.contains(\"baz\"));\n    try {\n      stateManager.createData(\"/listData/foo/bar\", new byte[0], CreateMode.PERSISTENT);\n      fail(\"should not succeed\");\n    } catch (AlreadyExistsException e) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}