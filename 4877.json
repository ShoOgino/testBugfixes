{"path":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked14#decode(byte[],int,long[],int,int).mjava","commits":[{"id":"3edb451c214b0d41e9d16514e3a1d6984ca2ca5f","date":1345677220,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked14#decode(byte[],int,long[],int,int).mjava","pathOld":"/dev/null","sourceNew":"    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final long byte0 = blocks[blocksOffset++] & 0xFF;\n        final long byte1 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte0 << 6) | (byte1 >>> 2);\n        final long byte2 = blocks[blocksOffset++] & 0xFF;\n        final long byte3 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte1 & 3) << 12) | (byte2 << 4) | (byte3 >>> 4);\n        final long byte4 = blocks[blocksOffset++] & 0xFF;\n        final long byte5 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte3 & 15) << 10) | (byte4 << 2) | (byte5 >>> 6);\n        final long byte6 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte5 & 63) << 8) | byte6;\n        final long byte7 = blocks[blocksOffset++] & 0xFF;\n        final long byte8 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte7 << 6) | (byte8 >>> 2);\n        final long byte9 = blocks[blocksOffset++] & 0xFF;\n        final long byte10 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte8 & 3) << 12) | (byte9 << 4) | (byte10 >>> 4);\n        final long byte11 = blocks[blocksOffset++] & 0xFF;\n        final long byte12 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte10 & 15) << 10) | (byte11 << 2) | (byte12 >>> 6);\n        final long byte13 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte12 & 63) << 8) | byte13;\n        final long byte14 = blocks[blocksOffset++] & 0xFF;\n        final long byte15 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte14 << 6) | (byte15 >>> 2);\n        final long byte16 = blocks[blocksOffset++] & 0xFF;\n        final long byte17 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte15 & 3) << 12) | (byte16 << 4) | (byte17 >>> 4);\n        final long byte18 = blocks[blocksOffset++] & 0xFF;\n        final long byte19 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte17 & 15) << 10) | (byte18 << 2) | (byte19 >>> 6);\n        final long byte20 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte19 & 63) << 8) | byte20;\n        final long byte21 = blocks[blocksOffset++] & 0xFF;\n        final long byte22 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte21 << 6) | (byte22 >>> 2);\n        final long byte23 = blocks[blocksOffset++] & 0xFF;\n        final long byte24 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte22 & 3) << 12) | (byte23 << 4) | (byte24 >>> 4);\n        final long byte25 = blocks[blocksOffset++] & 0xFF;\n        final long byte26 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte24 & 15) << 10) | (byte25 << 2) | (byte26 >>> 6);\n        final long byte27 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte26 & 63) << 8) | byte27;\n        final long byte28 = blocks[blocksOffset++] & 0xFF;\n        final long byte29 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte28 << 6) | (byte29 >>> 2);\n        final long byte30 = blocks[blocksOffset++] & 0xFF;\n        final long byte31 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte29 & 3) << 12) | (byte30 << 4) | (byte31 >>> 4);\n        final long byte32 = blocks[blocksOffset++] & 0xFF;\n        final long byte33 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte31 & 15) << 10) | (byte32 << 2) | (byte33 >>> 6);\n        final long byte34 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte33 & 63) << 8) | byte34;\n        final long byte35 = blocks[blocksOffset++] & 0xFF;\n        final long byte36 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte35 << 6) | (byte36 >>> 2);\n        final long byte37 = blocks[blocksOffset++] & 0xFF;\n        final long byte38 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte36 & 3) << 12) | (byte37 << 4) | (byte38 >>> 4);\n        final long byte39 = blocks[blocksOffset++] & 0xFF;\n        final long byte40 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte38 & 15) << 10) | (byte39 << 2) | (byte40 >>> 6);\n        final long byte41 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte40 & 63) << 8) | byte41;\n        final long byte42 = blocks[blocksOffset++] & 0xFF;\n        final long byte43 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte42 << 6) | (byte43 >>> 2);\n        final long byte44 = blocks[blocksOffset++] & 0xFF;\n        final long byte45 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte43 & 3) << 12) | (byte44 << 4) | (byte45 >>> 4);\n        final long byte46 = blocks[blocksOffset++] & 0xFF;\n        final long byte47 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte45 & 15) << 10) | (byte46 << 2) | (byte47 >>> 6);\n        final long byte48 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte47 & 63) << 8) | byte48;\n        final long byte49 = blocks[blocksOffset++] & 0xFF;\n        final long byte50 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte49 << 6) | (byte50 >>> 2);\n        final long byte51 = blocks[blocksOffset++] & 0xFF;\n        final long byte52 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte50 & 3) << 12) | (byte51 << 4) | (byte52 >>> 4);\n        final long byte53 = blocks[blocksOffset++] & 0xFF;\n        final long byte54 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte52 & 15) << 10) | (byte53 << 2) | (byte54 >>> 6);\n        final long byte55 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte54 & 63) << 8) | byte55;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["818b04e906a094f03512fe99c83e359da8277708"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"353f5909b00345d98d079a7db9a1bbe7485b1ea6","date":1345745476,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked14#decode(byte[],int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked14#decode(byte[],int,long[],int,int).mjava","sourceNew":"    @Override\n    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final long byte0 = blocks[blocksOffset++] & 0xFF;\n        final long byte1 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte0 << 6) | (byte1 >>> 2);\n        final long byte2 = blocks[blocksOffset++] & 0xFF;\n        final long byte3 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte1 & 3) << 12) | (byte2 << 4) | (byte3 >>> 4);\n        final long byte4 = blocks[blocksOffset++] & 0xFF;\n        final long byte5 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte3 & 15) << 10) | (byte4 << 2) | (byte5 >>> 6);\n        final long byte6 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte5 & 63) << 8) | byte6;\n        final long byte7 = blocks[blocksOffset++] & 0xFF;\n        final long byte8 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte7 << 6) | (byte8 >>> 2);\n        final long byte9 = blocks[blocksOffset++] & 0xFF;\n        final long byte10 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte8 & 3) << 12) | (byte9 << 4) | (byte10 >>> 4);\n        final long byte11 = blocks[blocksOffset++] & 0xFF;\n        final long byte12 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte10 & 15) << 10) | (byte11 << 2) | (byte12 >>> 6);\n        final long byte13 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte12 & 63) << 8) | byte13;\n        final long byte14 = blocks[blocksOffset++] & 0xFF;\n        final long byte15 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte14 << 6) | (byte15 >>> 2);\n        final long byte16 = blocks[blocksOffset++] & 0xFF;\n        final long byte17 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte15 & 3) << 12) | (byte16 << 4) | (byte17 >>> 4);\n        final long byte18 = blocks[blocksOffset++] & 0xFF;\n        final long byte19 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte17 & 15) << 10) | (byte18 << 2) | (byte19 >>> 6);\n        final long byte20 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte19 & 63) << 8) | byte20;\n        final long byte21 = blocks[blocksOffset++] & 0xFF;\n        final long byte22 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte21 << 6) | (byte22 >>> 2);\n        final long byte23 = blocks[blocksOffset++] & 0xFF;\n        final long byte24 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte22 & 3) << 12) | (byte23 << 4) | (byte24 >>> 4);\n        final long byte25 = blocks[blocksOffset++] & 0xFF;\n        final long byte26 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte24 & 15) << 10) | (byte25 << 2) | (byte26 >>> 6);\n        final long byte27 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte26 & 63) << 8) | byte27;\n        final long byte28 = blocks[blocksOffset++] & 0xFF;\n        final long byte29 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte28 << 6) | (byte29 >>> 2);\n        final long byte30 = blocks[blocksOffset++] & 0xFF;\n        final long byte31 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte29 & 3) << 12) | (byte30 << 4) | (byte31 >>> 4);\n        final long byte32 = blocks[blocksOffset++] & 0xFF;\n        final long byte33 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte31 & 15) << 10) | (byte32 << 2) | (byte33 >>> 6);\n        final long byte34 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte33 & 63) << 8) | byte34;\n        final long byte35 = blocks[blocksOffset++] & 0xFF;\n        final long byte36 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte35 << 6) | (byte36 >>> 2);\n        final long byte37 = blocks[blocksOffset++] & 0xFF;\n        final long byte38 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte36 & 3) << 12) | (byte37 << 4) | (byte38 >>> 4);\n        final long byte39 = blocks[blocksOffset++] & 0xFF;\n        final long byte40 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte38 & 15) << 10) | (byte39 << 2) | (byte40 >>> 6);\n        final long byte41 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte40 & 63) << 8) | byte41;\n        final long byte42 = blocks[blocksOffset++] & 0xFF;\n        final long byte43 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte42 << 6) | (byte43 >>> 2);\n        final long byte44 = blocks[blocksOffset++] & 0xFF;\n        final long byte45 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte43 & 3) << 12) | (byte44 << 4) | (byte45 >>> 4);\n        final long byte46 = blocks[blocksOffset++] & 0xFF;\n        final long byte47 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte45 & 15) << 10) | (byte46 << 2) | (byte47 >>> 6);\n        final long byte48 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte47 & 63) << 8) | byte48;\n        final long byte49 = blocks[blocksOffset++] & 0xFF;\n        final long byte50 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte49 << 6) | (byte50 >>> 2);\n        final long byte51 = blocks[blocksOffset++] & 0xFF;\n        final long byte52 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte50 & 3) << 12) | (byte51 << 4) | (byte52 >>> 4);\n        final long byte53 = blocks[blocksOffset++] & 0xFF;\n        final long byte54 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte52 & 15) << 10) | (byte53 << 2) | (byte54 >>> 6);\n        final long byte55 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte54 & 63) << 8) | byte55;\n      }\n    }\n\n","sourceOld":"    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final long byte0 = blocks[blocksOffset++] & 0xFF;\n        final long byte1 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte0 << 6) | (byte1 >>> 2);\n        final long byte2 = blocks[blocksOffset++] & 0xFF;\n        final long byte3 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte1 & 3) << 12) | (byte2 << 4) | (byte3 >>> 4);\n        final long byte4 = blocks[blocksOffset++] & 0xFF;\n        final long byte5 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte3 & 15) << 10) | (byte4 << 2) | (byte5 >>> 6);\n        final long byte6 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte5 & 63) << 8) | byte6;\n        final long byte7 = blocks[blocksOffset++] & 0xFF;\n        final long byte8 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte7 << 6) | (byte8 >>> 2);\n        final long byte9 = blocks[blocksOffset++] & 0xFF;\n        final long byte10 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte8 & 3) << 12) | (byte9 << 4) | (byte10 >>> 4);\n        final long byte11 = blocks[blocksOffset++] & 0xFF;\n        final long byte12 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte10 & 15) << 10) | (byte11 << 2) | (byte12 >>> 6);\n        final long byte13 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte12 & 63) << 8) | byte13;\n        final long byte14 = blocks[blocksOffset++] & 0xFF;\n        final long byte15 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte14 << 6) | (byte15 >>> 2);\n        final long byte16 = blocks[blocksOffset++] & 0xFF;\n        final long byte17 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte15 & 3) << 12) | (byte16 << 4) | (byte17 >>> 4);\n        final long byte18 = blocks[blocksOffset++] & 0xFF;\n        final long byte19 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte17 & 15) << 10) | (byte18 << 2) | (byte19 >>> 6);\n        final long byte20 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte19 & 63) << 8) | byte20;\n        final long byte21 = blocks[blocksOffset++] & 0xFF;\n        final long byte22 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte21 << 6) | (byte22 >>> 2);\n        final long byte23 = blocks[blocksOffset++] & 0xFF;\n        final long byte24 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte22 & 3) << 12) | (byte23 << 4) | (byte24 >>> 4);\n        final long byte25 = blocks[blocksOffset++] & 0xFF;\n        final long byte26 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte24 & 15) << 10) | (byte25 << 2) | (byte26 >>> 6);\n        final long byte27 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte26 & 63) << 8) | byte27;\n        final long byte28 = blocks[blocksOffset++] & 0xFF;\n        final long byte29 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte28 << 6) | (byte29 >>> 2);\n        final long byte30 = blocks[blocksOffset++] & 0xFF;\n        final long byte31 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte29 & 3) << 12) | (byte30 << 4) | (byte31 >>> 4);\n        final long byte32 = blocks[blocksOffset++] & 0xFF;\n        final long byte33 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte31 & 15) << 10) | (byte32 << 2) | (byte33 >>> 6);\n        final long byte34 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte33 & 63) << 8) | byte34;\n        final long byte35 = blocks[blocksOffset++] & 0xFF;\n        final long byte36 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte35 << 6) | (byte36 >>> 2);\n        final long byte37 = blocks[blocksOffset++] & 0xFF;\n        final long byte38 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte36 & 3) << 12) | (byte37 << 4) | (byte38 >>> 4);\n        final long byte39 = blocks[blocksOffset++] & 0xFF;\n        final long byte40 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte38 & 15) << 10) | (byte39 << 2) | (byte40 >>> 6);\n        final long byte41 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte40 & 63) << 8) | byte41;\n        final long byte42 = blocks[blocksOffset++] & 0xFF;\n        final long byte43 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte42 << 6) | (byte43 >>> 2);\n        final long byte44 = blocks[blocksOffset++] & 0xFF;\n        final long byte45 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte43 & 3) << 12) | (byte44 << 4) | (byte45 >>> 4);\n        final long byte46 = blocks[blocksOffset++] & 0xFF;\n        final long byte47 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte45 & 15) << 10) | (byte46 << 2) | (byte47 >>> 6);\n        final long byte48 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte47 & 63) << 8) | byte48;\n        final long byte49 = blocks[blocksOffset++] & 0xFF;\n        final long byte50 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte49 << 6) | (byte50 >>> 2);\n        final long byte51 = blocks[blocksOffset++] & 0xFF;\n        final long byte52 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte50 & 3) << 12) | (byte51 << 4) | (byte52 >>> 4);\n        final long byte53 = blocks[blocksOffset++] & 0xFF;\n        final long byte54 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte52 & 15) << 10) | (byte53 << 2) | (byte54 >>> 6);\n        final long byte55 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte54 & 63) << 8) | byte55;\n      }\n    }\n\n","bugFix":null,"bugIntro":["818b04e906a094f03512fe99c83e359da8277708"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked14#decode(byte[],int,long[],int,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final long byte0 = blocks[blocksOffset++] & 0xFF;\n        final long byte1 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte0 << 6) | (byte1 >>> 2);\n        final long byte2 = blocks[blocksOffset++] & 0xFF;\n        final long byte3 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte1 & 3) << 12) | (byte2 << 4) | (byte3 >>> 4);\n        final long byte4 = blocks[blocksOffset++] & 0xFF;\n        final long byte5 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte3 & 15) << 10) | (byte4 << 2) | (byte5 >>> 6);\n        final long byte6 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte5 & 63) << 8) | byte6;\n        final long byte7 = blocks[blocksOffset++] & 0xFF;\n        final long byte8 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte7 << 6) | (byte8 >>> 2);\n        final long byte9 = blocks[blocksOffset++] & 0xFF;\n        final long byte10 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte8 & 3) << 12) | (byte9 << 4) | (byte10 >>> 4);\n        final long byte11 = blocks[blocksOffset++] & 0xFF;\n        final long byte12 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte10 & 15) << 10) | (byte11 << 2) | (byte12 >>> 6);\n        final long byte13 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte12 & 63) << 8) | byte13;\n        final long byte14 = blocks[blocksOffset++] & 0xFF;\n        final long byte15 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte14 << 6) | (byte15 >>> 2);\n        final long byte16 = blocks[blocksOffset++] & 0xFF;\n        final long byte17 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte15 & 3) << 12) | (byte16 << 4) | (byte17 >>> 4);\n        final long byte18 = blocks[blocksOffset++] & 0xFF;\n        final long byte19 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte17 & 15) << 10) | (byte18 << 2) | (byte19 >>> 6);\n        final long byte20 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte19 & 63) << 8) | byte20;\n        final long byte21 = blocks[blocksOffset++] & 0xFF;\n        final long byte22 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte21 << 6) | (byte22 >>> 2);\n        final long byte23 = blocks[blocksOffset++] & 0xFF;\n        final long byte24 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte22 & 3) << 12) | (byte23 << 4) | (byte24 >>> 4);\n        final long byte25 = blocks[blocksOffset++] & 0xFF;\n        final long byte26 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte24 & 15) << 10) | (byte25 << 2) | (byte26 >>> 6);\n        final long byte27 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte26 & 63) << 8) | byte27;\n        final long byte28 = blocks[blocksOffset++] & 0xFF;\n        final long byte29 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte28 << 6) | (byte29 >>> 2);\n        final long byte30 = blocks[blocksOffset++] & 0xFF;\n        final long byte31 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte29 & 3) << 12) | (byte30 << 4) | (byte31 >>> 4);\n        final long byte32 = blocks[blocksOffset++] & 0xFF;\n        final long byte33 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte31 & 15) << 10) | (byte32 << 2) | (byte33 >>> 6);\n        final long byte34 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte33 & 63) << 8) | byte34;\n        final long byte35 = blocks[blocksOffset++] & 0xFF;\n        final long byte36 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte35 << 6) | (byte36 >>> 2);\n        final long byte37 = blocks[blocksOffset++] & 0xFF;\n        final long byte38 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte36 & 3) << 12) | (byte37 << 4) | (byte38 >>> 4);\n        final long byte39 = blocks[blocksOffset++] & 0xFF;\n        final long byte40 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte38 & 15) << 10) | (byte39 << 2) | (byte40 >>> 6);\n        final long byte41 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte40 & 63) << 8) | byte41;\n        final long byte42 = blocks[blocksOffset++] & 0xFF;\n        final long byte43 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte42 << 6) | (byte43 >>> 2);\n        final long byte44 = blocks[blocksOffset++] & 0xFF;\n        final long byte45 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte43 & 3) << 12) | (byte44 << 4) | (byte45 >>> 4);\n        final long byte46 = blocks[blocksOffset++] & 0xFF;\n        final long byte47 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte45 & 15) << 10) | (byte46 << 2) | (byte47 >>> 6);\n        final long byte48 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte47 & 63) << 8) | byte48;\n        final long byte49 = blocks[blocksOffset++] & 0xFF;\n        final long byte50 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte49 << 6) | (byte50 >>> 2);\n        final long byte51 = blocks[blocksOffset++] & 0xFF;\n        final long byte52 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte50 & 3) << 12) | (byte51 << 4) | (byte52 >>> 4);\n        final long byte53 = blocks[blocksOffset++] & 0xFF;\n        final long byte54 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte52 & 15) << 10) | (byte53 << 2) | (byte54 >>> 6);\n        final long byte55 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte54 & 63) << 8) | byte55;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"818b04e906a094f03512fe99c83e359da8277708","date":1346427149,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked14#decode(byte[],int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked14#decode(byte[],int,long[],int,int).mjava","sourceNew":"  @Override\n  public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n    for (int i = 0; i < 8 * iterations; ++i) {\n      final long byte0 = blocks[blocksOffset++] & 0xFF;\n      final long byte1 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = (byte0 << 6) | (byte1 >>> 2);\n      final long byte2 = blocks[blocksOffset++] & 0xFF;\n      final long byte3 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte1 & 3) << 12) | (byte2 << 4) | (byte3 >>> 4);\n      final long byte4 = blocks[blocksOffset++] & 0xFF;\n      final long byte5 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte3 & 15) << 10) | (byte4 << 2) | (byte5 >>> 6);\n      final long byte6 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte5 & 63) << 8) | byte6;\n    }\n  }\n\n","sourceOld":"    @Override\n    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final long byte0 = blocks[blocksOffset++] & 0xFF;\n        final long byte1 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte0 << 6) | (byte1 >>> 2);\n        final long byte2 = blocks[blocksOffset++] & 0xFF;\n        final long byte3 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte1 & 3) << 12) | (byte2 << 4) | (byte3 >>> 4);\n        final long byte4 = blocks[blocksOffset++] & 0xFF;\n        final long byte5 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte3 & 15) << 10) | (byte4 << 2) | (byte5 >>> 6);\n        final long byte6 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte5 & 63) << 8) | byte6;\n        final long byte7 = blocks[blocksOffset++] & 0xFF;\n        final long byte8 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte7 << 6) | (byte8 >>> 2);\n        final long byte9 = blocks[blocksOffset++] & 0xFF;\n        final long byte10 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte8 & 3) << 12) | (byte9 << 4) | (byte10 >>> 4);\n        final long byte11 = blocks[blocksOffset++] & 0xFF;\n        final long byte12 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte10 & 15) << 10) | (byte11 << 2) | (byte12 >>> 6);\n        final long byte13 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte12 & 63) << 8) | byte13;\n        final long byte14 = blocks[blocksOffset++] & 0xFF;\n        final long byte15 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte14 << 6) | (byte15 >>> 2);\n        final long byte16 = blocks[blocksOffset++] & 0xFF;\n        final long byte17 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte15 & 3) << 12) | (byte16 << 4) | (byte17 >>> 4);\n        final long byte18 = blocks[blocksOffset++] & 0xFF;\n        final long byte19 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte17 & 15) << 10) | (byte18 << 2) | (byte19 >>> 6);\n        final long byte20 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte19 & 63) << 8) | byte20;\n        final long byte21 = blocks[blocksOffset++] & 0xFF;\n        final long byte22 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte21 << 6) | (byte22 >>> 2);\n        final long byte23 = blocks[blocksOffset++] & 0xFF;\n        final long byte24 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte22 & 3) << 12) | (byte23 << 4) | (byte24 >>> 4);\n        final long byte25 = blocks[blocksOffset++] & 0xFF;\n        final long byte26 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte24 & 15) << 10) | (byte25 << 2) | (byte26 >>> 6);\n        final long byte27 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte26 & 63) << 8) | byte27;\n        final long byte28 = blocks[blocksOffset++] & 0xFF;\n        final long byte29 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte28 << 6) | (byte29 >>> 2);\n        final long byte30 = blocks[blocksOffset++] & 0xFF;\n        final long byte31 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte29 & 3) << 12) | (byte30 << 4) | (byte31 >>> 4);\n        final long byte32 = blocks[blocksOffset++] & 0xFF;\n        final long byte33 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte31 & 15) << 10) | (byte32 << 2) | (byte33 >>> 6);\n        final long byte34 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte33 & 63) << 8) | byte34;\n        final long byte35 = blocks[blocksOffset++] & 0xFF;\n        final long byte36 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte35 << 6) | (byte36 >>> 2);\n        final long byte37 = blocks[blocksOffset++] & 0xFF;\n        final long byte38 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte36 & 3) << 12) | (byte37 << 4) | (byte38 >>> 4);\n        final long byte39 = blocks[blocksOffset++] & 0xFF;\n        final long byte40 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte38 & 15) << 10) | (byte39 << 2) | (byte40 >>> 6);\n        final long byte41 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte40 & 63) << 8) | byte41;\n        final long byte42 = blocks[blocksOffset++] & 0xFF;\n        final long byte43 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte42 << 6) | (byte43 >>> 2);\n        final long byte44 = blocks[blocksOffset++] & 0xFF;\n        final long byte45 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte43 & 3) << 12) | (byte44 << 4) | (byte45 >>> 4);\n        final long byte46 = blocks[blocksOffset++] & 0xFF;\n        final long byte47 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte45 & 15) << 10) | (byte46 << 2) | (byte47 >>> 6);\n        final long byte48 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte47 & 63) << 8) | byte48;\n        final long byte49 = blocks[blocksOffset++] & 0xFF;\n        final long byte50 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte49 << 6) | (byte50 >>> 2);\n        final long byte51 = blocks[blocksOffset++] & 0xFF;\n        final long byte52 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte50 & 3) << 12) | (byte51 << 4) | (byte52 >>> 4);\n        final long byte53 = blocks[blocksOffset++] & 0xFF;\n        final long byte54 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte52 & 15) << 10) | (byte53 << 2) | (byte54 >>> 6);\n        final long byte55 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte54 & 63) << 8) | byte55;\n      }\n    }\n\n","bugFix":["353f5909b00345d98d079a7db9a1bbe7485b1ea6","3edb451c214b0d41e9d16514e3a1d6984ca2ca5f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d1f90e969803cc84174589b5e4a39b7935fecd","date":1346584861,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked14#decode(byte[],int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked14#decode(byte[],int,long[],int,int).mjava","sourceNew":"  @Override\n  public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n    for (int i = 0; i < 8 * iterations; ++i) {\n      final long byte0 = blocks[blocksOffset++] & 0xFF;\n      final long byte1 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = (byte0 << 6) | (byte1 >>> 2);\n      final long byte2 = blocks[blocksOffset++] & 0xFF;\n      final long byte3 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte1 & 3) << 12) | (byte2 << 4) | (byte3 >>> 4);\n      final long byte4 = blocks[blocksOffset++] & 0xFF;\n      final long byte5 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte3 & 15) << 10) | (byte4 << 2) | (byte5 >>> 6);\n      final long byte6 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte5 & 63) << 8) | byte6;\n    }\n  }\n\n","sourceOld":"    @Override\n    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final long byte0 = blocks[blocksOffset++] & 0xFF;\n        final long byte1 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte0 << 6) | (byte1 >>> 2);\n        final long byte2 = blocks[blocksOffset++] & 0xFF;\n        final long byte3 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte1 & 3) << 12) | (byte2 << 4) | (byte3 >>> 4);\n        final long byte4 = blocks[blocksOffset++] & 0xFF;\n        final long byte5 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte3 & 15) << 10) | (byte4 << 2) | (byte5 >>> 6);\n        final long byte6 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte5 & 63) << 8) | byte6;\n        final long byte7 = blocks[blocksOffset++] & 0xFF;\n        final long byte8 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte7 << 6) | (byte8 >>> 2);\n        final long byte9 = blocks[blocksOffset++] & 0xFF;\n        final long byte10 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte8 & 3) << 12) | (byte9 << 4) | (byte10 >>> 4);\n        final long byte11 = blocks[blocksOffset++] & 0xFF;\n        final long byte12 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte10 & 15) << 10) | (byte11 << 2) | (byte12 >>> 6);\n        final long byte13 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte12 & 63) << 8) | byte13;\n        final long byte14 = blocks[blocksOffset++] & 0xFF;\n        final long byte15 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte14 << 6) | (byte15 >>> 2);\n        final long byte16 = blocks[blocksOffset++] & 0xFF;\n        final long byte17 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte15 & 3) << 12) | (byte16 << 4) | (byte17 >>> 4);\n        final long byte18 = blocks[blocksOffset++] & 0xFF;\n        final long byte19 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte17 & 15) << 10) | (byte18 << 2) | (byte19 >>> 6);\n        final long byte20 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte19 & 63) << 8) | byte20;\n        final long byte21 = blocks[blocksOffset++] & 0xFF;\n        final long byte22 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte21 << 6) | (byte22 >>> 2);\n        final long byte23 = blocks[blocksOffset++] & 0xFF;\n        final long byte24 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte22 & 3) << 12) | (byte23 << 4) | (byte24 >>> 4);\n        final long byte25 = blocks[blocksOffset++] & 0xFF;\n        final long byte26 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte24 & 15) << 10) | (byte25 << 2) | (byte26 >>> 6);\n        final long byte27 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte26 & 63) << 8) | byte27;\n        final long byte28 = blocks[blocksOffset++] & 0xFF;\n        final long byte29 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte28 << 6) | (byte29 >>> 2);\n        final long byte30 = blocks[blocksOffset++] & 0xFF;\n        final long byte31 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte29 & 3) << 12) | (byte30 << 4) | (byte31 >>> 4);\n        final long byte32 = blocks[blocksOffset++] & 0xFF;\n        final long byte33 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte31 & 15) << 10) | (byte32 << 2) | (byte33 >>> 6);\n        final long byte34 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte33 & 63) << 8) | byte34;\n        final long byte35 = blocks[blocksOffset++] & 0xFF;\n        final long byte36 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte35 << 6) | (byte36 >>> 2);\n        final long byte37 = blocks[blocksOffset++] & 0xFF;\n        final long byte38 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte36 & 3) << 12) | (byte37 << 4) | (byte38 >>> 4);\n        final long byte39 = blocks[blocksOffset++] & 0xFF;\n        final long byte40 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte38 & 15) << 10) | (byte39 << 2) | (byte40 >>> 6);\n        final long byte41 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte40 & 63) << 8) | byte41;\n        final long byte42 = blocks[blocksOffset++] & 0xFF;\n        final long byte43 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte42 << 6) | (byte43 >>> 2);\n        final long byte44 = blocks[blocksOffset++] & 0xFF;\n        final long byte45 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte43 & 3) << 12) | (byte44 << 4) | (byte45 >>> 4);\n        final long byte46 = blocks[blocksOffset++] & 0xFF;\n        final long byte47 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte45 & 15) << 10) | (byte46 << 2) | (byte47 >>> 6);\n        final long byte48 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte47 & 63) << 8) | byte48;\n        final long byte49 = blocks[blocksOffset++] & 0xFF;\n        final long byte50 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte49 << 6) | (byte50 >>> 2);\n        final long byte51 = blocks[blocksOffset++] & 0xFF;\n        final long byte52 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte50 & 3) << 12) | (byte51 << 4) | (byte52 >>> 4);\n        final long byte53 = blocks[blocksOffset++] & 0xFF;\n        final long byte54 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte52 & 15) << 10) | (byte53 << 2) | (byte54 >>> 6);\n        final long byte55 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte54 & 63) << 8) | byte55;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e29d4d91327929d477b701d3ef2f5b3457d26ec5","date":1359465689,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked14#decode(byte[],int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked14#decode(byte[],int,long[],int,int).mjava","sourceNew":"  @Override\n  public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n    for (int i = 0; i < iterations; ++i) {\n      final long byte0 = blocks[blocksOffset++] & 0xFF;\n      final long byte1 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = (byte0 << 6) | (byte1 >>> 2);\n      final long byte2 = blocks[blocksOffset++] & 0xFF;\n      final long byte3 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte1 & 3) << 12) | (byte2 << 4) | (byte3 >>> 4);\n      final long byte4 = blocks[blocksOffset++] & 0xFF;\n      final long byte5 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte3 & 15) << 10) | (byte4 << 2) | (byte5 >>> 6);\n      final long byte6 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte5 & 63) << 8) | byte6;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n    for (int i = 0; i < 8 * iterations; ++i) {\n      final long byte0 = blocks[blocksOffset++] & 0xFF;\n      final long byte1 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = (byte0 << 6) | (byte1 >>> 2);\n      final long byte2 = blocks[blocksOffset++] & 0xFF;\n      final long byte3 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte1 & 3) << 12) | (byte2 << 4) | (byte3 >>> 4);\n      final long byte4 = blocks[blocksOffset++] & 0xFF;\n      final long byte5 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte3 & 15) << 10) | (byte4 << 2) | (byte5 >>> 6);\n      final long byte6 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte5 & 63) << 8) | byte6;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de522d9303bd67c8473a269a1319125d1f3700e0","date":1359477856,"type":3,"author":"Adrien Grand","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked14#decode(byte[],int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked14#decode(byte[],int,long[],int,int).mjava","sourceNew":"  @Override\n  public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n    for (int i = 0; i < iterations; ++i) {\n      final long byte0 = blocks[blocksOffset++] & 0xFF;\n      final long byte1 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = (byte0 << 6) | (byte1 >>> 2);\n      final long byte2 = blocks[blocksOffset++] & 0xFF;\n      final long byte3 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte1 & 3) << 12) | (byte2 << 4) | (byte3 >>> 4);\n      final long byte4 = blocks[blocksOffset++] & 0xFF;\n      final long byte5 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte3 & 15) << 10) | (byte4 << 2) | (byte5 >>> 6);\n      final long byte6 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte5 & 63) << 8) | byte6;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n    for (int i = 0; i < 8 * iterations; ++i) {\n      final long byte0 = blocks[blocksOffset++] & 0xFF;\n      final long byte1 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = (byte0 << 6) | (byte1 >>> 2);\n      final long byte2 = blocks[blocksOffset++] & 0xFF;\n      final long byte3 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte1 & 3) << 12) | (byte2 << 4) | (byte3 >>> 4);\n      final long byte4 = blocks[blocksOffset++] & 0xFF;\n      final long byte5 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte3 & 15) << 10) | (byte4 << 2) | (byte5 >>> 6);\n      final long byte6 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte5 & 63) << 8) | byte6;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e29d4d91327929d477b701d3ef2f5b3457d26ec5":["818b04e906a094f03512fe99c83e359da8277708"],"353f5909b00345d98d079a7db9a1bbe7485b1ea6":["3edb451c214b0d41e9d16514e3a1d6984ca2ca5f"],"001b25b42373b22a52f399dbf072f1224632e8e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","353f5909b00345d98d079a7db9a1bbe7485b1ea6"],"d0d1f90e969803cc84174589b5e4a39b7935fecd":["001b25b42373b22a52f399dbf072f1224632e8e6","818b04e906a094f03512fe99c83e359da8277708"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"de522d9303bd67c8473a269a1319125d1f3700e0":["818b04e906a094f03512fe99c83e359da8277708","e29d4d91327929d477b701d3ef2f5b3457d26ec5"],"818b04e906a094f03512fe99c83e359da8277708":["353f5909b00345d98d079a7db9a1bbe7485b1ea6"],"3edb451c214b0d41e9d16514e3a1d6984ca2ca5f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e29d4d91327929d477b701d3ef2f5b3457d26ec5"]},"commit2Childs":{"e29d4d91327929d477b701d3ef2f5b3457d26ec5":["de522d9303bd67c8473a269a1319125d1f3700e0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"353f5909b00345d98d079a7db9a1bbe7485b1ea6":["001b25b42373b22a52f399dbf072f1224632e8e6","818b04e906a094f03512fe99c83e359da8277708"],"001b25b42373b22a52f399dbf072f1224632e8e6":["d0d1f90e969803cc84174589b5e4a39b7935fecd"],"d0d1f90e969803cc84174589b5e4a39b7935fecd":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["001b25b42373b22a52f399dbf072f1224632e8e6","3edb451c214b0d41e9d16514e3a1d6984ca2ca5f"],"de522d9303bd67c8473a269a1319125d1f3700e0":[],"818b04e906a094f03512fe99c83e359da8277708":["e29d4d91327929d477b701d3ef2f5b3457d26ec5","d0d1f90e969803cc84174589b5e4a39b7935fecd","de522d9303bd67c8473a269a1319125d1f3700e0"],"3edb451c214b0d41e9d16514e3a1d6984ca2ca5f":["353f5909b00345d98d079a7db9a1bbe7485b1ea6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d0d1f90e969803cc84174589b5e4a39b7935fecd","de522d9303bd67c8473a269a1319125d1f3700e0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}