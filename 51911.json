{"path":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testAtomicUpdatesOnNonStoredDocValuesCopyField().mjava","commits":[{"id":"8b93c47fd6615608aaba7a18f08614cc169de66a","date":1461873142,"type":0,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testAtomicUpdatesOnNonStoredDocValuesCopyField().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAtomicUpdatesOnNonStoredDocValuesCopyField() throws Exception {\n    assertU(adoc(sdoc(\"id\", 101, \"title\", \"title2\", \"single_i_dvn\", 100)));\n    assertU(adoc(sdoc(\"id\", 102, \"title\", \"title3\", \"single_d_dvn\", 3.14)));\n    assertU(adoc(sdoc(\"id\", 103, \"single_s_dvn\", \"abc\", \"single_i_dvn\", 1)));\n    assertU(commit());\n\n    // Do each one twice... the first time it will be retrieved from the index, and the second time from the transaction log.\n    for (int i=0; i<2; i++) {\n      assertU(adoc(sdoc(\"id\", 101, \"title\", ImmutableMap.of(\"set\", \"newtitle2\"),\n          \"single_i_dvn\", ImmutableMap.of(\"inc\", 1))));\n      assertU(adoc(sdoc(\"id\", 102, \"title\", ImmutableMap.of(\"set\", \"newtitle3\"),\n          \"single_d_dvn\", ImmutableMap.of(\"inc\", 1))));\n      assertU(adoc(sdoc(\"id\", 103, \"single_i_dvn\", ImmutableMap.of(\"inc\", 1))));\n    }\n    assertU(commit());\n\n    assertJQ(req(\"q\", \"id:101\"),\n        \"/response/docs/[0]/id==101\",\n        \"/response/docs/[0]/title/[0]=='newtitle2'\",\n        \"/response/docs/[0]/single_i_dvn==102\");\n\n    assertJQ(req(\"q\", \"id:102\"),\n        1e-4,\n        \"/response/docs/[0]/id==102\",\n        \"/response/docs/[0]/title/[0]=='newtitle3'\",\n        \"/response/docs/[0]/single_d_dvn==5.14\");\n\n    assertJQ(req(\"q\", \"id:103\"),\n        \"/response/docs/[0]/id==103\",\n        \"/response/docs/[0]/single_s_dvn=='abc'\",\n        \"/response/docs/[0]/single_i_dvn==3\");\n\n    // test that non stored docvalues was carried forward for a non-docvalue update\n    assertU(adoc(sdoc(\"id\", 103, \"single_s_dvn\", ImmutableMap.of(\"set\", \"abcupdate\"),\n        \"single_i_dvn\", ImmutableMap.of(\"set\", 5))));\n    assertU(commit());\n    assertJQ(req(\"q\", \"id:103\"),\n        \"/response/docs/[0]/id==103\",\n        \"/response/docs/[0]/single_s_dvn=='abcupdate'\",\n        \"/response/docs/[0]/single_i_dvn==5\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testAtomicUpdatesOnNonStoredDocValuesCopyField().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAtomicUpdatesOnNonStoredDocValuesCopyField() throws Exception {\n    assertU(adoc(sdoc(\"id\", 101, \"title\", \"title2\", \"single_i_dvn\", 100)));\n    assertU(adoc(sdoc(\"id\", 102, \"title\", \"title3\", \"single_d_dvn\", 3.14)));\n    assertU(adoc(sdoc(\"id\", 103, \"single_s_dvn\", \"abc\", \"single_i_dvn\", 1)));\n    assertU(commit());\n\n    // Do each one twice... the first time it will be retrieved from the index, and the second time from the transaction log.\n    for (int i=0; i<2; i++) {\n      assertU(adoc(sdoc(\"id\", 101, \"title\", ImmutableMap.of(\"set\", \"newtitle2\"),\n          \"single_i_dvn\", ImmutableMap.of(\"inc\", 1))));\n      assertU(adoc(sdoc(\"id\", 102, \"title\", ImmutableMap.of(\"set\", \"newtitle3\"),\n          \"single_d_dvn\", ImmutableMap.of(\"inc\", 1))));\n      assertU(adoc(sdoc(\"id\", 103, \"single_i_dvn\", ImmutableMap.of(\"inc\", 1))));\n    }\n    assertU(commit());\n\n    assertJQ(req(\"q\", \"id:101\"),\n        \"/response/docs/[0]/id==101\",\n        \"/response/docs/[0]/title/[0]=='newtitle2'\",\n        \"/response/docs/[0]/single_i_dvn==102\");\n\n    assertJQ(req(\"q\", \"id:102\"),\n        1e-4,\n        \"/response/docs/[0]/id==102\",\n        \"/response/docs/[0]/title/[0]=='newtitle3'\",\n        \"/response/docs/[0]/single_d_dvn==5.14\");\n\n    assertJQ(req(\"q\", \"id:103\"),\n        \"/response/docs/[0]/id==103\",\n        \"/response/docs/[0]/single_s_dvn=='abc'\",\n        \"/response/docs/[0]/single_i_dvn==3\");\n\n    // test that non stored docvalues was carried forward for a non-docvalue update\n    assertU(adoc(sdoc(\"id\", 103, \"single_s_dvn\", ImmutableMap.of(\"set\", \"abcupdate\"),\n        \"single_i_dvn\", ImmutableMap.of(\"set\", 5))));\n    assertU(commit());\n    assertJQ(req(\"q\", \"id:103\"),\n        \"/response/docs/[0]/id==103\",\n        \"/response/docs/[0]/single_s_dvn=='abcupdate'\",\n        \"/response/docs/[0]/single_i_dvn==5\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testAtomicUpdatesOnNonStoredDocValuesCopyField().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testAtomicUpdatesOnNonStoredDocValuesCopyField().mjava","sourceNew":"  @Test\n  public void testAtomicUpdatesOnNonStoredDocValuesCopyField() throws Exception {\n    assertU(adoc(sdoc(\"id\", 101, \"title\", \"title2\", \"single_i_dvn\", 100)));\n    assertU(adoc(sdoc(\"id\", 102, \"title\", \"title3\", \"single_d_dvn\", 3.14)));\n    assertU(adoc(sdoc(\"id\", 103, \"single_s_dvn\", \"abc\", \"single_i_dvn\", 1)));\n    assertU(commit());\n\n    // Do each one twice... the first time it will be retrieved from the index, and the second time from the transaction log.\n    for (int i=0; i<2; i++) {\n      assertU(adoc(sdoc(\"id\", 101, \"title\", ImmutableMap.of(\"set\", \"newtitle2\"),\n          \"single_i_dvn\", ImmutableMap.of(\"inc\", 1))));\n      assertU(adoc(sdoc(\"id\", 102, \"title\", ImmutableMap.of(\"set\", \"newtitle3\"),\n          \"single_d_dvn\", ImmutableMap.of(\"inc\", 1))));\n      assertU(adoc(sdoc(\"id\", 103, \"single_i_dvn\", ImmutableMap.of(\"inc\", 1))));\n    }\n    assertU(commit());\n\n    assertJQ(req(\"q\", \"id:101\"),\n        \"/response/docs/[0]/id=='101'\",\n        \"/response/docs/[0]/title/[0]=='newtitle2'\",\n        \"/response/docs/[0]/single_i_dvn==102\");\n\n    assertJQ(req(\"q\", \"id:102\"),\n        1e-4,\n        \"/response/docs/[0]/id=='102'\",\n        \"/response/docs/[0]/title/[0]=='newtitle3'\",\n        \"/response/docs/[0]/single_d_dvn==5.14\");\n\n    assertJQ(req(\"q\", \"id:103\"),\n        \"/response/docs/[0]/id=='103'\",\n        \"/response/docs/[0]/single_s_dvn=='abc'\",\n        \"/response/docs/[0]/single_i_dvn==3\");\n\n    // test that non stored docvalues was carried forward for a non-docvalue update\n    assertU(adoc(sdoc(\"id\", 103, \"single_s_dvn\", ImmutableMap.of(\"set\", \"abcupdate\"),\n        \"single_i_dvn\", ImmutableMap.of(\"set\", 5))));\n    assertU(commit());\n    assertJQ(req(\"q\", \"id:103\"),\n        \"/response/docs/[0]/id=='103'\",\n        \"/response/docs/[0]/single_s_dvn=='abcupdate'\",\n        \"/response/docs/[0]/single_i_dvn==5\");\n  }\n\n","sourceOld":"  @Test\n  public void testAtomicUpdatesOnNonStoredDocValuesCopyField() throws Exception {\n    assertU(adoc(sdoc(\"id\", 101, \"title\", \"title2\", \"single_i_dvn\", 100)));\n    assertU(adoc(sdoc(\"id\", 102, \"title\", \"title3\", \"single_d_dvn\", 3.14)));\n    assertU(adoc(sdoc(\"id\", 103, \"single_s_dvn\", \"abc\", \"single_i_dvn\", 1)));\n    assertU(commit());\n\n    // Do each one twice... the first time it will be retrieved from the index, and the second time from the transaction log.\n    for (int i=0; i<2; i++) {\n      assertU(adoc(sdoc(\"id\", 101, \"title\", ImmutableMap.of(\"set\", \"newtitle2\"),\n          \"single_i_dvn\", ImmutableMap.of(\"inc\", 1))));\n      assertU(adoc(sdoc(\"id\", 102, \"title\", ImmutableMap.of(\"set\", \"newtitle3\"),\n          \"single_d_dvn\", ImmutableMap.of(\"inc\", 1))));\n      assertU(adoc(sdoc(\"id\", 103, \"single_i_dvn\", ImmutableMap.of(\"inc\", 1))));\n    }\n    assertU(commit());\n\n    assertJQ(req(\"q\", \"id:101\"),\n        \"/response/docs/[0]/id==101\",\n        \"/response/docs/[0]/title/[0]=='newtitle2'\",\n        \"/response/docs/[0]/single_i_dvn==102\");\n\n    assertJQ(req(\"q\", \"id:102\"),\n        1e-4,\n        \"/response/docs/[0]/id==102\",\n        \"/response/docs/[0]/title/[0]=='newtitle3'\",\n        \"/response/docs/[0]/single_d_dvn==5.14\");\n\n    assertJQ(req(\"q\", \"id:103\"),\n        \"/response/docs/[0]/id==103\",\n        \"/response/docs/[0]/single_s_dvn=='abc'\",\n        \"/response/docs/[0]/single_i_dvn==3\");\n\n    // test that non stored docvalues was carried forward for a non-docvalue update\n    assertU(adoc(sdoc(\"id\", 103, \"single_s_dvn\", ImmutableMap.of(\"set\", \"abcupdate\"),\n        \"single_i_dvn\", ImmutableMap.of(\"set\", 5))));\n    assertU(commit());\n    assertJQ(req(\"q\", \"id:103\"),\n        \"/response/docs/[0]/id==103\",\n        \"/response/docs/[0]/single_s_dvn=='abcupdate'\",\n        \"/response/docs/[0]/single_i_dvn==5\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testAtomicUpdatesOnNonStoredDocValuesCopyField().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testAtomicUpdatesOnNonStoredDocValuesCopyField().mjava","sourceNew":"  @Test\n  public void testAtomicUpdatesOnNonStoredDocValuesCopyField() throws Exception {\n    assertU(adoc(sdoc(\"id\", 101, \"title\", \"title2\", \"single_i_dvn\", 100)));\n    assertU(adoc(sdoc(\"id\", 102, \"title\", \"title3\", \"single_d_dvn\", 3.14)));\n    assertU(adoc(sdoc(\"id\", 103, \"single_s_dvn\", \"abc\", \"single_i_dvn\", 1)));\n    assertU(commit());\n\n    // Do each one twice... the first time it will be retrieved from the index, and the second time from the transaction log.\n    for (int i=0; i<2; i++) {\n      assertU(adoc(sdoc(\"id\", 101, \"title\", ImmutableMap.of(\"set\", \"newtitle2\"),\n          \"single_i_dvn\", ImmutableMap.of(\"inc\", 1))));\n      assertU(adoc(sdoc(\"id\", 102, \"title\", ImmutableMap.of(\"set\", \"newtitle3\"),\n          \"single_d_dvn\", ImmutableMap.of(\"inc\", 1))));\n      assertU(adoc(sdoc(\"id\", 103, \"single_i_dvn\", ImmutableMap.of(\"inc\", 1))));\n    }\n    assertU(commit());\n\n    assertJQ(req(\"q\", \"id:101\"),\n        \"/response/docs/[0]/id=='101'\",\n        \"/response/docs/[0]/title/[0]=='newtitle2'\",\n        \"/response/docs/[0]/single_i_dvn==102\");\n\n    assertJQ(req(\"q\", \"id:102\"),\n        1e-4,\n        \"/response/docs/[0]/id=='102'\",\n        \"/response/docs/[0]/title/[0]=='newtitle3'\",\n        \"/response/docs/[0]/single_d_dvn==5.14\");\n\n    assertJQ(req(\"q\", \"id:103\"),\n        \"/response/docs/[0]/id=='103'\",\n        \"/response/docs/[0]/single_s_dvn=='abc'\",\n        \"/response/docs/[0]/single_i_dvn==3\");\n\n    // test that non stored docvalues was carried forward for a non-docvalue update\n    assertU(adoc(sdoc(\"id\", 103, \"single_s_dvn\", ImmutableMap.of(\"set\", \"abcupdate\"),\n        \"single_i_dvn\", ImmutableMap.of(\"set\", 5))));\n    assertU(commit());\n    assertJQ(req(\"q\", \"id:103\"),\n        \"/response/docs/[0]/id=='103'\",\n        \"/response/docs/[0]/single_s_dvn=='abcupdate'\",\n        \"/response/docs/[0]/single_i_dvn==5\");\n  }\n\n","sourceOld":"  @Test\n  public void testAtomicUpdatesOnNonStoredDocValuesCopyField() throws Exception {\n    assertU(adoc(sdoc(\"id\", 101, \"title\", \"title2\", \"single_i_dvn\", 100)));\n    assertU(adoc(sdoc(\"id\", 102, \"title\", \"title3\", \"single_d_dvn\", 3.14)));\n    assertU(adoc(sdoc(\"id\", 103, \"single_s_dvn\", \"abc\", \"single_i_dvn\", 1)));\n    assertU(commit());\n\n    // Do each one twice... the first time it will be retrieved from the index, and the second time from the transaction log.\n    for (int i=0; i<2; i++) {\n      assertU(adoc(sdoc(\"id\", 101, \"title\", ImmutableMap.of(\"set\", \"newtitle2\"),\n          \"single_i_dvn\", ImmutableMap.of(\"inc\", 1))));\n      assertU(adoc(sdoc(\"id\", 102, \"title\", ImmutableMap.of(\"set\", \"newtitle3\"),\n          \"single_d_dvn\", ImmutableMap.of(\"inc\", 1))));\n      assertU(adoc(sdoc(\"id\", 103, \"single_i_dvn\", ImmutableMap.of(\"inc\", 1))));\n    }\n    assertU(commit());\n\n    assertJQ(req(\"q\", \"id:101\"),\n        \"/response/docs/[0]/id==101\",\n        \"/response/docs/[0]/title/[0]=='newtitle2'\",\n        \"/response/docs/[0]/single_i_dvn==102\");\n\n    assertJQ(req(\"q\", \"id:102\"),\n        1e-4,\n        \"/response/docs/[0]/id==102\",\n        \"/response/docs/[0]/title/[0]=='newtitle3'\",\n        \"/response/docs/[0]/single_d_dvn==5.14\");\n\n    assertJQ(req(\"q\", \"id:103\"),\n        \"/response/docs/[0]/id==103\",\n        \"/response/docs/[0]/single_s_dvn=='abc'\",\n        \"/response/docs/[0]/single_i_dvn==3\");\n\n    // test that non stored docvalues was carried forward for a non-docvalue update\n    assertU(adoc(sdoc(\"id\", 103, \"single_s_dvn\", ImmutableMap.of(\"set\", \"abcupdate\"),\n        \"single_i_dvn\", ImmutableMap.of(\"set\", 5))));\n    assertU(commit());\n    assertJQ(req(\"q\", \"id:103\"),\n        \"/response/docs/[0]/id==103\",\n        \"/response/docs/[0]/single_s_dvn=='abcupdate'\",\n        \"/response/docs/[0]/single_i_dvn==5\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testAtomicUpdatesOnNonStoredDocValuesCopyField().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testAtomicUpdatesOnNonStoredDocValuesCopyField().mjava","sourceNew":"  @Test\n  public void testAtomicUpdatesOnNonStoredDocValuesCopyField() throws Exception {\n    assertU(adoc(sdoc(\"id\", 101, \"title\", \"title2\", \"single_i_dvn\", 100)));\n    assertU(adoc(sdoc(\"id\", 102, \"title\", \"title3\", \"single_d_dvn\", 3.14)));\n    assertU(adoc(sdoc(\"id\", 103, \"single_s_dvn\", \"abc\", \"single_i_dvn\", 1)));\n    assertU(commit());\n\n    // Do each one twice... the first time it will be retrieved from the index, and the second time from the transaction log.\n    for (int i=0; i<2; i++) {\n      assertU(adoc(sdoc(\"id\", 101, \"title\", ImmutableMap.of(\"set\", \"newtitle2\"),\n          \"single_i_dvn\", ImmutableMap.of(\"inc\", 1))));\n      assertU(adoc(sdoc(\"id\", 102, \"title\", ImmutableMap.of(\"set\", \"newtitle3\"),\n          \"single_d_dvn\", ImmutableMap.of(\"inc\", 1))));\n      assertU(adoc(sdoc(\"id\", 103, \"single_i_dvn\", ImmutableMap.of(\"inc\", 1))));\n    }\n    assertU(commit());\n\n    assertJQ(req(\"q\", \"id:101\"),\n        \"/response/docs/[0]/id=='101'\",\n        \"/response/docs/[0]/title/[0]=='newtitle2'\",\n        \"/response/docs/[0]/single_i_dvn==102\");\n\n    assertJQ(req(\"q\", \"id:102\"),\n        1e-4,\n        \"/response/docs/[0]/id=='102'\",\n        \"/response/docs/[0]/title/[0]=='newtitle3'\",\n        \"/response/docs/[0]/single_d_dvn==5.14\");\n\n    assertJQ(req(\"q\", \"id:103\"),\n        \"/response/docs/[0]/id=='103'\",\n        \"/response/docs/[0]/single_s_dvn=='abc'\",\n        \"/response/docs/[0]/single_i_dvn==3\");\n\n    // test that non stored docvalues was carried forward for a non-docvalue update\n    assertU(adoc(sdoc(\"id\", 103, \"single_s_dvn\", ImmutableMap.of(\"set\", \"abcupdate\"),\n        \"single_i_dvn\", ImmutableMap.of(\"set\", 5))));\n    assertU(commit());\n    assertJQ(req(\"q\", \"id:103\"),\n        \"/response/docs/[0]/id=='103'\",\n        \"/response/docs/[0]/single_s_dvn=='abcupdate'\",\n        \"/response/docs/[0]/single_i_dvn==5\");\n  }\n\n","sourceOld":"  @Test\n  public void testAtomicUpdatesOnNonStoredDocValuesCopyField() throws Exception {\n    assertU(adoc(sdoc(\"id\", 101, \"title\", \"title2\", \"single_i_dvn\", 100)));\n    assertU(adoc(sdoc(\"id\", 102, \"title\", \"title3\", \"single_d_dvn\", 3.14)));\n    assertU(adoc(sdoc(\"id\", 103, \"single_s_dvn\", \"abc\", \"single_i_dvn\", 1)));\n    assertU(commit());\n\n    // Do each one twice... the first time it will be retrieved from the index, and the second time from the transaction log.\n    for (int i=0; i<2; i++) {\n      assertU(adoc(sdoc(\"id\", 101, \"title\", ImmutableMap.of(\"set\", \"newtitle2\"),\n          \"single_i_dvn\", ImmutableMap.of(\"inc\", 1))));\n      assertU(adoc(sdoc(\"id\", 102, \"title\", ImmutableMap.of(\"set\", \"newtitle3\"),\n          \"single_d_dvn\", ImmutableMap.of(\"inc\", 1))));\n      assertU(adoc(sdoc(\"id\", 103, \"single_i_dvn\", ImmutableMap.of(\"inc\", 1))));\n    }\n    assertU(commit());\n\n    assertJQ(req(\"q\", \"id:101\"),\n        \"/response/docs/[0]/id==101\",\n        \"/response/docs/[0]/title/[0]=='newtitle2'\",\n        \"/response/docs/[0]/single_i_dvn==102\");\n\n    assertJQ(req(\"q\", \"id:102\"),\n        1e-4,\n        \"/response/docs/[0]/id==102\",\n        \"/response/docs/[0]/title/[0]=='newtitle3'\",\n        \"/response/docs/[0]/single_d_dvn==5.14\");\n\n    assertJQ(req(\"q\", \"id:103\"),\n        \"/response/docs/[0]/id==103\",\n        \"/response/docs/[0]/single_s_dvn=='abc'\",\n        \"/response/docs/[0]/single_i_dvn==3\");\n\n    // test that non stored docvalues was carried forward for a non-docvalue update\n    assertU(adoc(sdoc(\"id\", 103, \"single_s_dvn\", ImmutableMap.of(\"set\", \"abcupdate\"),\n        \"single_i_dvn\", ImmutableMap.of(\"set\", 5))));\n    assertU(commit());\n    assertJQ(req(\"q\", \"id:103\"),\n        \"/response/docs/[0]/id==103\",\n        \"/response/docs/[0]/single_s_dvn=='abcupdate'\",\n        \"/response/docs/[0]/single_i_dvn==5\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a71f63026529f3c1f03cfdd664910873ab2369ae":["8b93c47fd6615608aaba7a18f08614cc169de66a"],"8b93c47fd6615608aaba7a18f08614cc169de66a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["8b93c47fd6615608aaba7a18f08614cc169de66a","a71f63026529f3c1f03cfdd664910873ab2369ae"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["8b93c47fd6615608aaba7a18f08614cc169de66a","a71f63026529f3c1f03cfdd664910873ab2369ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b93c47fd6615608aaba7a18f08614cc169de66a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b93c47fd6615608aaba7a18f08614cc169de66a","55b50463286869f584cf849d1587a0fcd54d1dfa"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"8b93c47fd6615608aaba7a18f08614cc169de66a":["a71f63026529f3c1f03cfdd664910873ab2369ae","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","55b50463286869f584cf849d1587a0fcd54d1dfa"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"55b50463286869f584cf849d1587a0fcd54d1dfa":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817","55b50463286869f584cf849d1587a0fcd54d1dfa"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}