{"path":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestScriptTransformer#oneparam().mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestScriptTransformer#oneparam().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @Ignore\n  public void oneparam() {\n\n    String script = \"function f1(row){\"\n            + \"row.put('name','Hello ' + row.get('name'));\" + \"return row;\\n\" + \"}\";\n\n    Context context = getContext(\"f1\", script);\n    Map<String, Object> map = new HashMap<String, Object>();\n    map.put(\"name\", \"Scott\");\n    SqlEntityProcessor sep = new SqlEntityProcessor();\n    sep.init(context);\n    sep.applyTransformer(map);\n    Assert.assertEquals(map.get(\"name\"), \"Hello Scott\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"758fdd153bb361b47f22db79ace6af6f6b7b9330","date":1240213015,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestScriptTransformer#oneparam().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestScriptTransformer#oneparam().mjava","sourceNew":"  @Test\n  @Ignore\n  public void oneparam() {\n\n    String script = \"function f1(row){\"\n            + \"row.put('name','Hello ' + row.get('name'));\" + \"return row;\\n\" + \"}\";\n\n    Context context = getContext(\"f1\", script);\n    Map<String, Object> map = new HashMap<String, Object>();\n    map.put(\"name\", \"Scott\");\n    EntityProcessorWrapper sep = new EntityProcessorWrapper(new SqlEntityProcessor(), null);\n    sep.init(context);\n    sep.applyTransformer(map);\n    Assert.assertEquals(map.get(\"name\"), \"Hello Scott\");\n\n  }\n\n","sourceOld":"  @Test\n  @Ignore\n  public void oneparam() {\n\n    String script = \"function f1(row){\"\n            + \"row.put('name','Hello ' + row.get('name'));\" + \"return row;\\n\" + \"}\";\n\n    Context context = getContext(\"f1\", script);\n    Map<String, Object> map = new HashMap<String, Object>();\n    map.put(\"name\", \"Scott\");\n    SqlEntityProcessor sep = new SqlEntityProcessor();\n    sep.init(context);\n    sep.applyTransformer(map);\n    Assert.assertEquals(map.get(\"name\"), \"Hello Scott\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestScriptTransformer#oneparam().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestScriptTransformer#oneparam().mjava","sourceNew":"  @Test\n  @Ignore\n  public void oneparam() {\n\n    String script = \"function f1(row){\"\n            + \"row.put('name','Hello ' + row.get('name'));\" + \"return row;\\n\" + \"}\";\n\n    Context context = getContext(\"f1\", script);\n    Map<String, Object> map = new HashMap<String, Object>();\n    map.put(\"name\", \"Scott\");\n    EntityProcessorWrapper sep = new EntityProcessorWrapper(new SqlEntityProcessor(), null);\n    sep.init(context);\n    sep.applyTransformer(map);\n    Assert.assertEquals(map.get(\"name\"), \"Hello Scott\");\n\n  }\n\n","sourceOld":"  @Test\n  @Ignore\n  public void oneparam() {\n\n    String script = \"function f1(row){\"\n            + \"row.put('name','Hello ' + row.get('name'));\" + \"return row;\\n\" + \"}\";\n\n    Context context = getContext(\"f1\", script);\n    Map<String, Object> map = new HashMap<String, Object>();\n    map.put(\"name\", \"Scott\");\n    EntityProcessorWrapper sep = new EntityProcessorWrapper(new SqlEntityProcessor(), null);\n    sep.init(context);\n    sep.applyTransformer(map);\n    Assert.assertEquals(map.get(\"name\"), \"Hello Scott\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"758fdd153bb361b47f22db79ace6af6f6b7b9330":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"ad94625fb8d088209f46650c8097196fec67f00c":["758fdd153bb361b47f22db79ace6af6f6b7b9330"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["758fdd153bb361b47f22db79ace6af6f6b7b9330"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"758fdd153bb361b47f22db79ace6af6f6b7b9330":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}