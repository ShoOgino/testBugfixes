{"path":"src/java/org/apache/solr/handler/ReplicationHandler#getConfFileCache(Collection[String]).mjava","commits":[{"id":"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349","date":1224582283,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#getConfFileCache(Collection[String]).mjava","pathOld":"/dev/null","sourceNew":"  List<Map<String, Object>> getConfFileCache(Collection<String> filenames) {\n    List<Map<String, Object>> confFiles = new ArrayList<Map<String, Object>>();\n    synchronized (confFileInfoCache) {\n      File confDir = new File(core.getResourceLoader().getConfigDir());\n      Checksum checksum = null;\n      for (String cf : filenames) {\n        File f = new File(confDir, cf);\n        if (!f.exists() || f.isDirectory()) continue;//must not happen\n        FileInfo info = confFileInfoCache.get(cf);\n        if (info == null || info.lastmodified != f.lastModified() || info.size != f.length()) {\n          if (checksum == null) checksum = new Adler32();\n          info = new FileInfo(f.lastModified(), cf, f.length(), getCheckSum(checksum, f));\n          confFileInfoCache.put(cf, info);\n        }\n        confFiles.add(info.getAsMap());\n      }\n    }\n    return confFiles;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9","date":1225202752,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#getConfFileCache(Collection[String]).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#getConfFileCache(Collection[String]).mjava","sourceNew":"  /** for configuration files checksum of the file also is included\n   * because ,unlike index ,files they may have same content but different timestamps\n   * The local conf files information is cached so that everytime it does not have to\n   * read the file content. The cache is refreshed only if the lastmodified of the file changes\n   */\n  List<Map<String, Object>> getConfFileCache(Collection<String> filenames) {\n    List<Map<String, Object>> confFiles = new ArrayList<Map<String, Object>>();\n    synchronized (confFileInfoCache) {\n      File confDir = new File(core.getResourceLoader().getConfigDir());\n      Checksum checksum = null;\n      for (String cf : filenames) {\n        File f = new File(confDir, cf);\n        if (!f.exists() || f.isDirectory()) continue;//must not happen\n        FileInfo info = confFileInfoCache.get(cf);\n        if (info == null || info.lastmodified != f.lastModified() || info.size != f.length()) {\n          if (checksum == null) checksum = new Adler32();\n          info = new FileInfo(f.lastModified(), cf, f.length(), getCheckSum(checksum, f));\n          confFileInfoCache.put(cf, info);\n        }\n        confFiles.add(info.getAsMap());\n      }\n    }\n    return confFiles;\n  }\n\n","sourceOld":"  List<Map<String, Object>> getConfFileCache(Collection<String> filenames) {\n    List<Map<String, Object>> confFiles = new ArrayList<Map<String, Object>>();\n    synchronized (confFileInfoCache) {\n      File confDir = new File(core.getResourceLoader().getConfigDir());\n      Checksum checksum = null;\n      for (String cf : filenames) {\n        File f = new File(confDir, cf);\n        if (!f.exists() || f.isDirectory()) continue;//must not happen\n        FileInfo info = confFileInfoCache.get(cf);\n        if (info == null || info.lastmodified != f.lastModified() || info.size != f.length()) {\n          if (checksum == null) checksum = new Adler32();\n          info = new FileInfo(f.lastModified(), cf, f.length(), getCheckSum(checksum, f));\n          confFileInfoCache.put(cf, info);\n        }\n        confFiles.add(info.getAsMap());\n      }\n    }\n    return confFiles;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8620c64e323e74078214cf931e505179d14c888e","date":1225270494,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#getConfFileCache(Collection[String]).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#getConfFileCache(Collection[String]).mjava","sourceNew":"  /**\n   * For configuration files, checksum of the file is included\n   * because, unlike index files, they may have same content but different timestamps.\n   * <p/>\n   * The local conf files information is cached so that everytime it does not have to\n   * compute the checksum. The cache is refreshed only if the lastModified of the file changes\n   */\n  List<Map<String, Object>> getConfFileCache(Collection<String> filenames) {\n    List<Map<String, Object>> confFiles = new ArrayList<Map<String, Object>>();\n    synchronized (confFileInfoCache) {\n      File confDir = new File(core.getResourceLoader().getConfigDir());\n      Checksum checksum = null;\n      for (String cf : filenames) {\n        File f = new File(confDir, cf);\n        if (!f.exists() || f.isDirectory()) continue; //must not happen\n        FileInfo info = confFileInfoCache.get(cf);\n        if (info == null || info.lastmodified != f.lastModified() || info.size != f.length()) {\n          if (checksum == null) checksum = new Adler32();\n          info = new FileInfo(f.lastModified(), cf, f.length(), getCheckSum(checksum, f));\n          confFileInfoCache.put(cf, info);\n        }\n        confFiles.add(info.getAsMap());\n      }\n    }\n    return confFiles;\n  }\n\n","sourceOld":"  /** for configuration files checksum of the file also is included\n   * because ,unlike index ,files they may have same content but different timestamps\n   * The local conf files information is cached so that everytime it does not have to\n   * read the file content. The cache is refreshed only if the lastmodified of the file changes\n   */\n  List<Map<String, Object>> getConfFileCache(Collection<String> filenames) {\n    List<Map<String, Object>> confFiles = new ArrayList<Map<String, Object>>();\n    synchronized (confFileInfoCache) {\n      File confDir = new File(core.getResourceLoader().getConfigDir());\n      Checksum checksum = null;\n      for (String cf : filenames) {\n        File f = new File(confDir, cf);\n        if (!f.exists() || f.isDirectory()) continue;//must not happen\n        FileInfo info = confFileInfoCache.get(cf);\n        if (info == null || info.lastmodified != f.lastModified() || info.size != f.length()) {\n          if (checksum == null) checksum = new Adler32();\n          info = new FileInfo(f.lastModified(), cf, f.length(), getCheckSum(checksum, f));\n          confFileInfoCache.put(cf, info);\n        }\n        confFiles.add(info.getAsMap());\n      }\n    }\n    return confFiles;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9be231d18ef58129524215a1d30331523320b744","date":1229505566,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#getConfFileInfoFromCache(NamedList[String],Map[String,FileInfo]).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#getConfFileCache(Collection[String]).mjava","sourceNew":"  /**\n   * For configuration files, checksum of the file is included because, unlike index files, they may have same content\n   * but different timestamps.\n   * <p/>\n   * The local conf files information is cached so that everytime it does not have to compute the checksum. The cache is\n   * refreshed only if the lastModified of the file changes\n   */\n  List<Map<String, Object>> getConfFileInfoFromCache(NamedList<String> nameAndAlias,\n                                                     final Map<String, FileInfo> confFileInfoCache) {\n    List<Map<String, Object>> confFiles = new ArrayList<Map<String, Object>>();\n    synchronized (confFileInfoCache) {\n      File confDir = new File(core.getResourceLoader().getConfigDir());\n      Checksum checksum = null;\n      for (int i = 0; i < nameAndAlias.size(); i++) {\n        String cf = nameAndAlias.getName(i);\n        File f = new File(confDir, cf);\n        if (!f.exists() || f.isDirectory()) continue; //must not happen\n        FileInfo info = confFileInfoCache.get(cf);\n        if (info == null || info.lastmodified != f.lastModified() || info.size != f.length()) {\n          if (checksum == null) checksum = new Adler32();\n          info = new FileInfo(f.lastModified(), cf, f.length(), getCheckSum(checksum, f));\n          confFileInfoCache.put(cf, info);\n        }\n        Map<String, Object> m = info.getAsMap();\n        if (nameAndAlias.getVal(i) != null) m.put(ALIAS, nameAndAlias.getVal(i));\n        confFiles.add(m);\n      }\n    }\n    return confFiles;\n  }\n\n","sourceOld":"  /**\n   * For configuration files, checksum of the file is included\n   * because, unlike index files, they may have same content but different timestamps.\n   * <p/>\n   * The local conf files information is cached so that everytime it does not have to\n   * compute the checksum. The cache is refreshed only if the lastModified of the file changes\n   */\n  List<Map<String, Object>> getConfFileCache(Collection<String> filenames) {\n    List<Map<String, Object>> confFiles = new ArrayList<Map<String, Object>>();\n    synchronized (confFileInfoCache) {\n      File confDir = new File(core.getResourceLoader().getConfigDir());\n      Checksum checksum = null;\n      for (String cf : filenames) {\n        File f = new File(confDir, cf);\n        if (!f.exists() || f.isDirectory()) continue; //must not happen\n        FileInfo info = confFileInfoCache.get(cf);\n        if (info == null || info.lastmodified != f.lastModified() || info.size != f.length()) {\n          if (checksum == null) checksum = new Adler32();\n          info = new FileInfo(f.lastModified(), cf, f.length(), getCheckSum(checksum, f));\n          confFileInfoCache.put(cf, info);\n        }\n        confFiles.add(info.getAsMap());\n      }\n    }\n    return confFiles;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"9be231d18ef58129524215a1d30331523320b744":["8620c64e323e74078214cf931e505179d14c888e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"8620c64e323e74078214cf931e505179d14c888e":["6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9"],"6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349":["6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9"],"9be231d18ef58129524215a1d30331523320b744":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8620c64e323e74078214cf931e505179d14c888e":["9be231d18ef58129524215a1d30331523320b744"],"6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9":["8620c64e323e74078214cf931e505179d14c888e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9be231d18ef58129524215a1d30331523320b744","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}