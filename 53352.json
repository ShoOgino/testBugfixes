{"path":"lucene/backwards/src/test/org/apache/lucene/search/CheckHits#checkHits(Query,String,Searcher,int[]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/CheckHits#checkHits(Query,String,Searcher,int[]).mjava","pathOld":"backwards/src/test/org/apache/lucene/search/CheckHits#checkHits(Query,String,Searcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using Hits.\n   *\n   * <p>\n   * Note that when using the Hits API, documents will only be returned\n   * if they have a positive normalized score.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query)\n   * @see #checkHitCollector\n   */\n  public static void checkHits(\n        Query query,\n        String defaultFieldName,\n        Searcher searcher,\n        int[] results)\n          throws IOException {\n\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n\n    Set correct = new TreeSet();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n\n    Set actual = new TreeSet();\n    for (int i = 0; i < hits.length; i++) {\n      actual.add(Integer.valueOf(hits[i].doc));\n    }\n\n    Assert.assertEquals(query.toString(defaultFieldName), correct, actual);\n\n    QueryUtils.check(query,searcher);\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using Hits.\n   *\n   * <p>\n   * Note that when using the Hits API, documents will only be returned\n   * if they have a positive normalized score.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query)\n   * @see #checkHitCollector\n   */\n  public static void checkHits(\n        Query query,\n        String defaultFieldName,\n        Searcher searcher,\n        int[] results)\n          throws IOException {\n\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n\n    Set correct = new TreeSet();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n\n    Set actual = new TreeSet();\n    for (int i = 0; i < hits.length; i++) {\n      actual.add(Integer.valueOf(hits[i].doc));\n    }\n\n    Assert.assertEquals(query.toString(defaultFieldName), correct, actual);\n\n    QueryUtils.check(query,searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/CheckHits#checkHits(Query,String,Searcher,int[]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using Hits.\n   *\n   * <p>\n   * Note that when using the Hits API, documents will only be returned\n   * if they have a positive normalized score.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query)\n   * @see #checkHitCollector\n   */\n  public static void checkHits(\n        Query query,\n        String defaultFieldName,\n        Searcher searcher,\n        int[] results)\n          throws IOException {\n\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n\n    Set correct = new TreeSet();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n\n    Set actual = new TreeSet();\n    for (int i = 0; i < hits.length; i++) {\n      actual.add(Integer.valueOf(hits[i].doc));\n    }\n\n    Assert.assertEquals(query.toString(defaultFieldName), correct, actual);\n\n    QueryUtils.check(query,searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}