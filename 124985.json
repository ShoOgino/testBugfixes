{"path":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#createPackedInts(int,int).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#createPackedInts(int,int).mjava","pathOld":"/dev/null","sourceNew":"  private List<PackedInts.Mutable> createPackedInts(\n          int valueCount, int bitsPerValue) {\n    List<PackedInts.Mutable> packedInts = new ArrayList<PackedInts.Mutable>();\n    if (bitsPerValue <= 8) {\n      packedInts.add(new Direct8(valueCount));\n    }\n    if (bitsPerValue <= 16) {\n      packedInts.add(new Direct16(valueCount));\n    }\n    if (bitsPerValue <= 31) {\n      packedInts.add(new Packed32(valueCount, bitsPerValue));\n    }\n    if (bitsPerValue <= 32) {\n      packedInts.add(new Direct32(valueCount));\n    }\n    if (bitsPerValue <= 63) {\n      packedInts.add(new Packed64(valueCount, bitsPerValue));\n    }\n    packedInts.add(new Direct64(valueCount));\n    return packedInts;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#createPackedInts(int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#createPackedInts(int,int).mjava","sourceNew":"  private List<PackedInts.Mutable> createPackedInts(\n          int valueCount, int bitsPerValue) {\n    List<PackedInts.Mutable> packedInts = new ArrayList<PackedInts.Mutable>();\n    if (bitsPerValue <= 8) {\n      packedInts.add(new Direct8(valueCount));\n    }\n    if (bitsPerValue <= 16) {\n      packedInts.add(new Direct16(valueCount));\n    }\n    if (bitsPerValue <= 31) {\n      packedInts.add(new Packed32(valueCount, bitsPerValue));\n    }\n    if (bitsPerValue <= 32) {\n      packedInts.add(new Direct32(valueCount));\n    }\n    if (bitsPerValue <= 63) {\n      packedInts.add(new Packed64(valueCount, bitsPerValue));\n    }\n    packedInts.add(new Direct64(valueCount));\n    return packedInts;\n  }\n\n","sourceOld":"  private List<PackedInts.Mutable> createPackedInts(\n          int valueCount, int bitsPerValue) {\n    List<PackedInts.Mutable> packedInts = new ArrayList<PackedInts.Mutable>();\n    if (bitsPerValue <= 8) {\n      packedInts.add(new Direct8(valueCount));\n    }\n    if (bitsPerValue <= 16) {\n      packedInts.add(new Direct16(valueCount));\n    }\n    if (bitsPerValue <= 31) {\n      packedInts.add(new Packed32(valueCount, bitsPerValue));\n    }\n    if (bitsPerValue <= 32) {\n      packedInts.add(new Direct32(valueCount));\n    }\n    if (bitsPerValue <= 63) {\n      packedInts.add(new Packed64(valueCount, bitsPerValue));\n    }\n    packedInts.add(new Direct64(valueCount));\n    return packedInts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}