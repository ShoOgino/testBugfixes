{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter#TermsWriter(IndexOutput,FieldInfo,boolean,float).mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter#TermsWriter(IndexOutput,FieldInfo,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter#TermsWriter(IndexOutput,FieldInfo,boolean,float).mjava","sourceNew":"    public TermsWriter(IndexOutput out, FieldInfo field, boolean doPackFST, float acceptableOverheadRatio) {\n      this.out = out;\n      this.field = field;\n      this.doPackFST = doPackFST;\n      this.acceptableOverheadRatio = acceptableOverheadRatio;\n      builder = new Builder<BytesRef>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, null, doPackFST, acceptableOverheadRatio);\n    }\n\n","sourceOld":"    public TermsWriter(IndexOutput out, FieldInfo field, boolean doPackFST, float acceptableOverheadRatio) {\n      this.out = out;\n      this.field = field;\n      this.doPackFST = doPackFST;\n      this.acceptableOverheadRatio = acceptableOverheadRatio;\n      builder = new Builder<BytesRef>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, null, doPackFST, acceptableOverheadRatio);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb8af2aec0a8574cf50cad6939d4475179595eca","date":1357675799,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter#TermsWriter(IndexOutput,FieldInfo,boolean,float).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter#TermsWriter(IndexOutput,FieldInfo,boolean,float).mjava","sourceNew":"    public TermsWriter(IndexOutput out, FieldInfo field, boolean doPackFST, float acceptableOverheadRatio) {\n      this.out = out;\n      this.field = field;\n      this.doPackFST = doPackFST;\n      this.acceptableOverheadRatio = acceptableOverheadRatio;\n      builder = new Builder<BytesRef>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, null, doPackFST, acceptableOverheadRatio, true);\n    }\n\n","sourceOld":"    public TermsWriter(IndexOutput out, FieldInfo field, boolean doPackFST, float acceptableOverheadRatio) {\n      this.out = out;\n      this.field = field;\n      this.doPackFST = doPackFST;\n      this.acceptableOverheadRatio = acceptableOverheadRatio;\n      builder = new Builder<BytesRef>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, null, doPackFST, acceptableOverheadRatio);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter#TermsWriter(IndexOutput,FieldInfo,boolean,float).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter#TermsWriter(IndexOutput,FieldInfo,boolean,float).mjava","sourceNew":"    public TermsWriter(IndexOutput out, FieldInfo field, boolean doPackFST, float acceptableOverheadRatio) {\n      this.out = out;\n      this.field = field;\n      this.doPackFST = doPackFST;\n      this.acceptableOverheadRatio = acceptableOverheadRatio;\n      builder = new Builder<BytesRef>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, null, doPackFST, acceptableOverheadRatio, true);\n    }\n\n","sourceOld":"    public TermsWriter(IndexOutput out, FieldInfo field, boolean doPackFST, float acceptableOverheadRatio) {\n      this.out = out;\n      this.field = field;\n      this.doPackFST = doPackFST;\n      this.acceptableOverheadRatio = acceptableOverheadRatio;\n      builder = new Builder<BytesRef>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, null, doPackFST, acceptableOverheadRatio);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0","date":1358188277,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter#TermsWriter(IndexOutput,FieldInfo,boolean,float).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter#TermsWriter(IndexOutput,FieldInfo,boolean,float).mjava","sourceNew":"    public TermsWriter(IndexOutput out, FieldInfo field, boolean doPackFST, float acceptableOverheadRatio) {\n      this.out = out;\n      this.field = field;\n      this.doPackFST = doPackFST;\n      this.acceptableOverheadRatio = acceptableOverheadRatio;\n      builder = new Builder<BytesRef>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, null, doPackFST, acceptableOverheadRatio, true, 15);\n    }\n\n","sourceOld":"    public TermsWriter(IndexOutput out, FieldInfo field, boolean doPackFST, float acceptableOverheadRatio) {\n      this.out = out;\n      this.field = field;\n      this.doPackFST = doPackFST;\n      this.acceptableOverheadRatio = acceptableOverheadRatio;\n      builder = new Builder<BytesRef>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, null, doPackFST, acceptableOverheadRatio, true);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter#TermsWriter(IndexOutput,FieldInfo,boolean,float).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter#TermsWriter(IndexOutput,FieldInfo,boolean,float).mjava","sourceNew":"    public TermsWriter(IndexOutput out, FieldInfo field, boolean doPackFST, float acceptableOverheadRatio) {\n      this.out = out;\n      this.field = field;\n      this.doPackFST = doPackFST;\n      this.acceptableOverheadRatio = acceptableOverheadRatio;\n      builder = new Builder<BytesRef>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, null, doPackFST, acceptableOverheadRatio, true, 15);\n    }\n\n","sourceOld":"    public TermsWriter(IndexOutput out, FieldInfo field, boolean doPackFST, float acceptableOverheadRatio) {\n      this.out = out;\n      this.field = field;\n      this.doPackFST = doPackFST;\n      this.acceptableOverheadRatio = acceptableOverheadRatio;\n      builder = new Builder<BytesRef>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, null, doPackFST, acceptableOverheadRatio, true);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter#TermsWriter(IndexOutput,FieldInfo,boolean,float).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter#TermsWriter(IndexOutput,FieldInfo,boolean,float).mjava","sourceNew":"    public TermsWriter(IndexOutput out, FieldInfo field, boolean doPackFST, float acceptableOverheadRatio) {\n      this.out = out;\n      this.field = field;\n      this.doPackFST = doPackFST;\n      this.acceptableOverheadRatio = acceptableOverheadRatio;\n      builder = new Builder<>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, null, doPackFST, acceptableOverheadRatio, true, 15);\n    }\n\n","sourceOld":"    public TermsWriter(IndexOutput out, FieldInfo field, boolean doPackFST, float acceptableOverheadRatio) {\n      this.out = out;\n      this.field = field;\n      this.doPackFST = doPackFST;\n      this.acceptableOverheadRatio = acceptableOverheadRatio;\n      builder = new Builder<BytesRef>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, null, doPackFST, acceptableOverheadRatio, true, 15);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f838187609fee3a1afa5f162f93c796046242c84","date":1406216791,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter#TermsWriter(IndexOutput,FieldInfo,boolean,float).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter#TermsWriter(IndexOutput,FieldInfo,boolean,float).mjava","sourceNew":"    public TermsWriter(IndexOutput out, FieldInfo field, boolean doPackFST, float acceptableOverheadRatio) {\n      this.out = out;\n      this.field = field;\n      this.doPackFST = doPackFST;\n      this.acceptableOverheadRatio = acceptableOverheadRatio;\n      builder = new Builder<>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, doPackFST, acceptableOverheadRatio, true, 15);\n    }\n\n","sourceOld":"    public TermsWriter(IndexOutput out, FieldInfo field, boolean doPackFST, float acceptableOverheadRatio) {\n      this.out = out;\n      this.field = field;\n      this.doPackFST = doPackFST;\n      this.acceptableOverheadRatio = acceptableOverheadRatio;\n      builder = new Builder<>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, null, doPackFST, acceptableOverheadRatio, true, 15);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6244579a467d5f2673ac98265d74bddbea1a8114","date":1478786509,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter#TermsWriter(IndexOutput,FieldInfo,boolean,float).mjava","sourceNew":null,"sourceOld":"    public TermsWriter(IndexOutput out, FieldInfo field, boolean doPackFST, float acceptableOverheadRatio) {\n      this.out = out;\n      this.field = field;\n      this.doPackFST = doPackFST;\n      this.acceptableOverheadRatio = acceptableOverheadRatio;\n      builder = new Builder<>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, doPackFST, acceptableOverheadRatio, true, 15);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter#TermsWriter(IndexOutput,FieldInfo,boolean,float).mjava","sourceNew":null,"sourceOld":"    public TermsWriter(IndexOutput out, FieldInfo field, boolean doPackFST, float acceptableOverheadRatio) {\n      this.out = out;\n      this.field = field;\n      this.doPackFST = doPackFST;\n      this.acceptableOverheadRatio = acceptableOverheadRatio;\n      builder = new Builder<>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, doPackFST, acceptableOverheadRatio, true, 15);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"],"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0":["fb8af2aec0a8574cf50cad6939d4475179595eca"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["4e6354dd7c71fe122926fc53d7d29f715b1283db","d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6244579a467d5f2673ac98265d74bddbea1a8114":["f838187609fee3a1afa5f162f93c796046242c84"],"fb8af2aec0a8574cf50cad6939d4475179595eca":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["f838187609fee3a1afa5f162f93c796046242c84","6244579a467d5f2673ac98265d74bddbea1a8114"],"f838187609fee3a1afa5f162f93c796046242c84":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","fb8af2aec0a8574cf50cad6939d4475179595eca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6244579a467d5f2673ac98265d74bddbea1a8114"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["f838187609fee3a1afa5f162f93c796046242c84"],"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","8917bfede3b4ca30f4305c1e391e9218959cd723"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["fb8af2aec0a8574cf50cad6939d4475179595eca","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"fb8af2aec0a8574cf50cad6939d4475179595eca":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"6244579a467d5f2673ac98265d74bddbea1a8114":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["8917bfede3b4ca30f4305c1e391e9218959cd723"],"f838187609fee3a1afa5f162f93c796046242c84":["6244579a467d5f2673ac98265d74bddbea1a8114","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8917bfede3b4ca30f4305c1e391e9218959cd723","199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}