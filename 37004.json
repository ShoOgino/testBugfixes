{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/LruTaxonomyWriterCache#put(FacetLabel,int).mjava","commits":[{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/LruTaxonomyWriterCache#put(FacetLabel,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/LruTaxonomyWriterCache#put(CategoryPath,int).mjava","sourceNew":"  @Override\n  public synchronized boolean put(FacetLabel categoryPath, int ordinal) {\n    boolean ret = cache.put(categoryPath, new Integer(ordinal));\n    // If the cache is full, we need to clear one or more old entries\n    // from the cache. However, if we delete from the cache a recent\n    // addition that isn't yet in our reader, for this entry to be\n    // visible to us we need to make sure that the changes have been\n    // committed and we reopen the reader. Because this is a slow\n    // operation, we don't delete entries one-by-one but rather in bulk\n    // (put() removes the 2/3rd oldest entries).\n    if (ret) {\n      cache.makeRoomLRU();\n    }\n    return ret;\n  }\n\n","sourceOld":"  @Override\n  public synchronized boolean put(CategoryPath categoryPath, int ordinal) {\n    boolean ret = cache.put(categoryPath, new Integer(ordinal));\n    // If the cache is full, we need to clear one or more old entries\n    // from the cache. However, if we delete from the cache a recent\n    // addition that isn't yet in our reader, for this entry to be\n    // visible to us we need to make sure that the changes have been\n    // committed and we reopen the reader. Because this is a slow\n    // operation, we don't delete entries one-by-one but rather in bulk\n    // (put() removes the 2/3rd oldest entries).\n    if (ret) {\n      cache.makeRoomLRU();\n    }\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cad50ed6659649a0edef71b8cf56280b0bdadd7","date":1385496862,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache#put(FacetLabel,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/LruTaxonomyWriterCache#put(FacetLabel,int).mjava","sourceNew":"  @Override\n  public synchronized boolean put(FacetLabel categoryPath, int ordinal) {\n    boolean ret = cache.put(categoryPath, new Integer(ordinal));\n    // If the cache is full, we need to clear one or more old entries\n    // from the cache. However, if we delete from the cache a recent\n    // addition that isn't yet in our reader, for this entry to be\n    // visible to us we need to make sure that the changes have been\n    // committed and we reopen the reader. Because this is a slow\n    // operation, we don't delete entries one-by-one but rather in bulk\n    // (put() removes the 2/3rd oldest entries).\n    if (ret) {\n      cache.makeRoomLRU();\n    }\n    return ret;\n  }\n\n","sourceOld":"  @Override\n  public synchronized boolean put(FacetLabel categoryPath, int ordinal) {\n    boolean ret = cache.put(categoryPath, new Integer(ordinal));\n    // If the cache is full, we need to clear one or more old entries\n    // from the cache. However, if we delete from the cache a recent\n    // addition that isn't yet in our reader, for this entry to be\n    // visible to us we need to make sure that the changes have been\n    // committed and we reopen the reader. Because this is a slow\n    // operation, we don't delete entries one-by-one but rather in bulk\n    // (put() removes the 2/3rd oldest entries).\n    if (ret) {\n      cache.makeRoomLRU();\n    }\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cad50ed6659649a0edef71b8cf56280b0bdadd7":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"5cad50ed6659649a0edef71b8cf56280b0bdadd7":[],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["5cad50ed6659649a0edef71b8cf56280b0bdadd7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5cad50ed6659649a0edef71b8cf56280b0bdadd7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}