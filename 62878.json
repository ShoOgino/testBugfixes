{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testNegativeConditions().mjava","commits":[{"id":"e4848fb683db0790f2847173af06e2ad2d03328e","date":1498631007,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testNegativeConditions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testNegativeConditions().mjava","sourceNew":"  public void testNegativeConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'replica':'<4','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 0, 'sysprop.fs': '!ssd', 'shard': '#EACH'},\" +//negative greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    Policy.Session session = policy.createSession(clusterDataProvider);\n    for (int i = 0; i < 3; i++) {\n      Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n      SolrRequest op = suggester\n          .hint(Hint.COLL, \"newColl\")\n          .hint(Hint.SHARD, \"shard1\")\n          .getOperation();\n      assertNotNull(op);\n      assertEquals(\"node3\", op.getParams().get(\"node\"));\n      session = suggester.getSession();\n    }\n\n  }\n\n","sourceOld":"  public void testNegativeConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'replica':'<4','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 0, 'sysprop.fs': '!ssd', 'shard': '#EACH'},\" +//negative greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    Policy.Session session = policy.createSession(clusterDataProvider);\n    for (int i = 0; i < 3; i++) {\n      Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n      SolrRequest op = suggester\n          .hint(Hint.COLL, \"newColl\")\n          .hint(Hint.SHARD, \"shard1\")\n          .getOperation();\n      assertNotNull(op);\n      assertEquals(\"node3\", op.getParams().get(\"node\"));\n      session = suggester.getSession();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00e2ae9cb51fd0d4f12faf216db2810237cb5116","date":1498631063,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testNegativeConditions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testNegativeConditions().mjava","sourceNew":"  public void testNegativeConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'replica':'<4','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 0, 'sysprop.fs': '!ssd', 'shard': '#EACH'},\" +//negative greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    Policy.Session session = policy.createSession(clusterDataProvider);\n    for (int i = 0; i < 3; i++) {\n      Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n      SolrRequest op = suggester\n          .hint(Hint.COLL, \"newColl\")\n          .hint(Hint.SHARD, \"shard1\")\n          .getOperation();\n      assertNotNull(op);\n      assertEquals(\"node3\", op.getParams().get(\"node\"));\n      session = suggester.getSession();\n    }\n\n  }\n\n","sourceOld":"  public void testNegativeConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'replica':'<4','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 0, 'sysprop.fs': '!ssd', 'shard': '#EACH'},\" +//negative greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    Policy.Session session = policy.createSession(clusterDataProvider);\n    for (int i = 0; i < 3; i++) {\n      Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n      SolrRequest op = suggester\n          .hint(Hint.COLL, \"newColl\")\n          .hint(Hint.SHARD, \"shard1\")\n          .getOperation();\n      assertNotNull(op);\n      assertEquals(\"node3\", op.getParams().get(\"node\"));\n      session = suggester.getSession();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testNegativeConditions().mjava","pathOld":"/dev/null","sourceNew":"  public void testNegativeConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'replica':'<4','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 0, 'sysprop.fs': '!ssd', 'shard': '#EACH'},\" +//negative greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    Policy.Session session = policy.createSession(clusterDataProvider);\n    for (int i = 0; i < 3; i++) {\n      Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n      SolrRequest op = suggester\n          .hint(Hint.COLL, \"newColl\")\n          .hint(Hint.SHARD, \"shard1\")\n          .getOperation();\n      assertNotNull(op);\n      assertEquals(\"node3\", op.getParams().get(\"node\"));\n      session = suggester.getSession();\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5088ce415a50eb8412f4942aeabe293e75c81e7","date":1504531555,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testNegativeConditions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testNegativeConditions().mjava","sourceNew":"  public void testNegativeConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'replica':'<4','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 0, 'sysprop.fs': '!ssd', 'shard': '#EACH'},\" +//negative greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    Policy.Session session = policy.createSession(clusterDataProvider);\n    for (int i = 0; i < 3; i++) {\n      Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n      SolrRequest op = suggester\n          .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\",\"shard1\"))\n          .getOperation();\n      assertNotNull(op);\n      assertEquals(\"node3\", op.getParams().get(\"node\"));\n      session = suggester.getSession();\n    }\n\n  }\n\n","sourceOld":"  public void testNegativeConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'replica':'<4','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 0, 'sysprop.fs': '!ssd', 'shard': '#EACH'},\" +//negative greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    Policy.Session session = policy.createSession(clusterDataProvider);\n    for (int i = 0; i < 3; i++) {\n      Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n      SolrRequest op = suggester\n          .hint(Hint.COLL, \"newColl\")\n          .hint(Hint.SHARD, \"shard1\")\n          .getOperation();\n      assertNotNull(op);\n      assertEquals(\"node3\", op.getParams().get(\"node\"));\n      session = suggester.getSession();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testNegativeConditions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testNegativeConditions().mjava","sourceNew":"  public void testNegativeConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'replica':'<4','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 0, 'sysprop.fs': '!ssd', 'shard': '#EACH'},\" +//negative greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    Policy.Session session = policy.createSession(clusterDataProvider);\n    for (int i = 0; i < 3; i++) {\n      Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n      SolrRequest op = suggester\n          .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\",\"shard1\"))\n          .getOperation();\n      assertNotNull(op);\n      assertEquals(\"node3\", op.getParams().get(\"node\"));\n      session = suggester.getSession();\n    }\n\n  }\n\n","sourceOld":"  public void testNegativeConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'replica':'<4','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 0, 'sysprop.fs': '!ssd', 'shard': '#EACH'},\" +//negative greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    Policy.Session session = policy.createSession(clusterDataProvider);\n    for (int i = 0; i < 3; i++) {\n      Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n      SolrRequest op = suggester\n          .hint(Hint.COLL, \"newColl\")\n          .hint(Hint.SHARD, \"shard1\")\n          .getOperation();\n      assertNotNull(op);\n      assertEquals(\"node3\", op.getParams().get(\"node\"));\n      session = suggester.getSession();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testNegativeConditions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testNegativeConditions().mjava","sourceNew":"  public void testNegativeConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'replica':'<4','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 0, 'sysprop.fs': '!ssd', 'shard': '#EACH'},\" +//negative greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    Policy.Session session = policy.createSession(clusterDataProvider);\n    for (int i = 0; i < 3; i++) {\n      Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n      SolrRequest op = suggester\n          .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\",\"shard1\"))\n          .getOperation();\n      assertNotNull(op);\n      assertEquals(\"node3\", op.getParams().get(\"node\"));\n      session = suggester.getSession();\n    }\n\n  }\n\n","sourceOld":"  public void testNegativeConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'replica':'<4','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 0, 'sysprop.fs': '!ssd', 'shard': '#EACH'},\" +//negative greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    Policy.Session session = policy.createSession(clusterDataProvider);\n    for (int i = 0; i < 3; i++) {\n      Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n      SolrRequest op = suggester\n          .hint(Hint.COLL, \"newColl\")\n          .hint(Hint.SHARD, \"shard1\")\n          .getOperation();\n      assertNotNull(op);\n      assertEquals(\"node3\", op.getParams().get(\"node\"));\n      session = suggester.getSession();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testNegativeConditions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testNegativeConditions().mjava","sourceNew":"  public void testNegativeConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'replica':'<4','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 0, 'sysprop.fs': '!ssd', 'shard': '#EACH'},\" +//negative greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    SolrCloudManager cloudManager = getSolrCloudManager(nodeValues, clusterState);\n    Policy.Session session = policy.createSession(cloudManager);\n    for (int i = 0; i < 3; i++) {\n      Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n      SolrRequest op = suggester\n          .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\",\"shard1\"))\n          .getOperation();\n      assertNotNull(op);\n      assertEquals(\"node3\", op.getParams().get(\"node\"));\n      session = suggester.getSession();\n    }\n\n  }\n\n","sourceOld":"  public void testNegativeConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'replica':'<4','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 0, 'sysprop.fs': '!ssd', 'shard': '#EACH'},\" +//negative greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    Policy.Session session = policy.createSession(clusterDataProvider);\n    for (int i = 0; i < 3; i++) {\n      Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n      SolrRequest op = suggester\n          .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\",\"shard1\"))\n          .getOperation();\n      assertNotNull(op);\n      assertEquals(\"node3\", op.getParams().get(\"node\"));\n      session = suggester.getSession();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaca6a0674512222004d9a2b0ca95d86bda20f1c","date":1508160449,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testNegativeConditions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testNegativeConditions().mjava","sourceNew":"  public void testNegativeConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'replica':'<4','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 0, 'sysprop.fs': '!ssd', 'shard': '#EACH'},\" +//negative greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    SolrCloudManager cloudManager = getSolrCloudManager(nodeValues, clusterState);\n    Policy.Session session = policy.createSession(cloudManager);\n    for (int i = 0; i < 3; i++) {\n      Suggester suggester = session.getSuggester(ADDREPLICA);\n      SolrRequest op = suggester\n          .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\",\"shard1\"))\n          .getOperation();\n      assertNotNull(op);\n      assertEquals(\"node3\", op.getParams().get(\"node\"));\n      session = suggester.getSession();\n    }\n\n  }\n\n","sourceOld":"  public void testNegativeConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'replica':'<4','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 0, 'sysprop.fs': '!ssd', 'shard': '#EACH'},\" +//negative greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    SolrCloudManager cloudManager = getSolrCloudManager(nodeValues, clusterState);\n    Policy.Session session = policy.createSession(cloudManager);\n    for (int i = 0; i < 3; i++) {\n      Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n      SolrRequest op = suggester\n          .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\",\"shard1\"))\n          .getOperation();\n      assertNotNull(op);\n      assertEquals(\"node3\", op.getParams().get(\"node\"));\n      session = suggester.getSession();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bbcda32e5cd37ef61ea1190bacd080308e22070","date":1508850553,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testNegativeConditions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testNegativeConditions().mjava","sourceNew":"  public void testNegativeConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'replica':'<4','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 0, 'sysprop.fs': '!ssd', 'shard': '#EACH'},\" +//negative greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    SolrCloudManager cloudManager = getSolrCloudManager(nodeValues, clusterState);\n    Policy.Session session = policy.createSession(cloudManager);\n    for (int i = 0; i < 3; i++) {\n      Suggester suggester = session.getSuggester(ADDREPLICA);\n      SolrRequest op = suggester\n          .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\",\"shard1\"))\n          .getSuggestion();\n      assertNotNull(op);\n      assertEquals(\"node3\", op.getParams().get(\"node\"));\n      session = suggester.getSession();\n    }\n\n  }\n\n","sourceOld":"  public void testNegativeConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'replica':'<4','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 0, 'sysprop.fs': '!ssd', 'shard': '#EACH'},\" +//negative greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    SolrCloudManager cloudManager = getSolrCloudManager(nodeValues, clusterState);\n    Policy.Session session = policy.createSession(cloudManager);\n    for (int i = 0; i < 3; i++) {\n      Suggester suggester = session.getSuggester(ADDREPLICA);\n      SolrRequest op = suggester\n          .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\",\"shard1\"))\n          .getOperation();\n      assertNotNull(op);\n      assertEquals(\"node3\", op.getParams().get(\"node\"));\n      session = suggester.getSession();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f0e33082a86447f4f2b59a1a5f69a310500276a","date":1519970482,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testNegativeConditions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testNegativeConditions().mjava","sourceNew":"  public void testNegativeConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'replica':'<4','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 0, 'sysprop.fs': '!ssd', 'shard': '#EACH'},\" +//negative greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    SolrCloudManager cloudManager = getSolrCloudManager(nodeValues, clusterState);\n    Policy.Session session = policy.createSession(cloudManager);\n    for (int i = 0; i < 3; i++) {\n      Suggester suggester = session.getSuggester(ADDREPLICA);\n      SolrRequest op = suggester\n          .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"))\n          .getSuggestion();\n      assertNotNull(op);\n      assertEquals(\"node3\", op.getParams().get(\"node\"));\n      session = suggester.getSession();\n    }\n\n  }\n\n","sourceOld":"  public void testNegativeConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'replica':'<4','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 0, 'sysprop.fs': '!ssd', 'shard': '#EACH'},\" +//negative greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    SolrCloudManager cloudManager = getSolrCloudManager(nodeValues, clusterState);\n    Policy.Session session = policy.createSession(cloudManager);\n    for (int i = 0; i < 3; i++) {\n      Suggester suggester = session.getSuggester(ADDREPLICA);\n      SolrRequest op = suggester\n          .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\",\"shard1\"))\n          .getSuggestion();\n      assertNotNull(op);\n      assertEquals(\"node3\", op.getParams().get(\"node\"));\n      session = suggester.getSession();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee5183ac042828ef74f90f0874eaba7daeb409bd","date":1536546264,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testNegativeConditions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testNegativeConditions().mjava","sourceNew":"  public void testNegativeConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'replica':'<4','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 0, 'sysprop.fs': '!ssd', 'shard': '#EACH'},\" +//negative greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4, sysprop.fs: slowdisk},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3, sysprop.fs: slowdisk},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1, sysprop.fs: slowdisk}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    SolrCloudManager cloudManager = getSolrCloudManager(nodeValues, clusterState);\n    Policy.Session session = policy.createSession(cloudManager);\n    for (int i = 0; i < 3; i++) {\n      Suggester suggester = session.getSuggester(ADDREPLICA);\n      SolrRequest op = suggester\n          .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"))\n          .getSuggestion();\n      assertNotNull(op);\n      assertEquals(\"node3\", op.getParams().get(\"node\"));\n      session = suggester.getSession();\n    }\n\n  }\n\n","sourceOld":"  public void testNegativeConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'replica':'<4','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 0, 'sysprop.fs': '!ssd', 'shard': '#EACH'},\" +//negative greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    SolrCloudManager cloudManager = getSolrCloudManager(nodeValues, clusterState);\n    Policy.Session session = policy.createSession(cloudManager);\n    for (int i = 0; i < 3; i++) {\n      Suggester suggester = session.getSuggester(ADDREPLICA);\n      SolrRequest op = suggester\n          .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"))\n          .getSuggestion();\n      assertNotNull(op);\n      assertEquals(\"node3\", op.getParams().get(\"node\"));\n      session = suggester.getSession();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testNegativeConditions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testNegativeConditions().mjava","sourceNew":"  public void testNegativeConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'replica':'<4','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 0, 'sysprop.fs': '!ssd', 'shard': '#EACH'},\" +//negative greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4, sysprop.fs: slowdisk},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3, sysprop.fs: slowdisk},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1, sysprop.fs: slowdisk}\" +\n        \"}\");\n    @SuppressWarnings({\"unchecked\"})\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    SolrCloudManager cloudManager = getSolrCloudManager(nodeValues, clusterState);\n    Policy.Session session = policy.createSession(cloudManager);\n    for (int i = 0; i < 3; i++) {\n      Suggester suggester = session.getSuggester(ADDREPLICA);\n      @SuppressWarnings({\"rawtypes\"})\n      SolrRequest op = suggester\n          .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"))\n          .getSuggestion();\n      assertNotNull(op);\n      assertEquals(\"node3\", op.getParams().get(\"node\"));\n      session = suggester.getSession();\n    }\n\n  }\n\n","sourceOld":"  public void testNegativeConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'replica':'<4','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 0, 'sysprop.fs': '!ssd', 'shard': '#EACH'},\" +//negative greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4, sysprop.fs: slowdisk},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3, sysprop.fs: slowdisk},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1, sysprop.fs: slowdisk}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    SolrCloudManager cloudManager = getSolrCloudManager(nodeValues, clusterState);\n    Policy.Session session = policy.createSession(cloudManager);\n    for (int i = 0; i < 3; i++) {\n      Suggester suggester = session.getSuggester(ADDREPLICA);\n      SolrRequest op = suggester\n          .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"))\n          .getSuggestion();\n      assertNotNull(op);\n      assertEquals(\"node3\", op.getParams().get(\"node\"));\n      session = suggester.getSession();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testNegativeConditions().mjava","sourceNew":null,"sourceOld":"  public void testNegativeConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'replica':'<4','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 0, 'sysprop.fs': '!ssd', 'shard': '#EACH'},\" +//negative greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4, sysprop.fs: slowdisk},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3, sysprop.fs: slowdisk},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1, sysprop.fs: slowdisk}\" +\n        \"}\");\n    @SuppressWarnings({\"unchecked\"})\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    SolrCloudManager cloudManager = getSolrCloudManager(nodeValues, clusterState);\n    Policy.Session session = policy.createSession(cloudManager);\n    for (int i = 0; i < 3; i++) {\n      Suggester suggester = session.getSuggester(ADDREPLICA);\n      @SuppressWarnings({\"rawtypes\"})\n      SolrRequest op = suggester\n          .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"))\n          .getSuggestion();\n      assertNotNull(op);\n      assertEquals(\"node3\", op.getParams().get(\"node\"));\n      session = suggester.getSession();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["ee5183ac042828ef74f90f0874eaba7daeb409bd"],"00e2ae9cb51fd0d4f12faf216db2810237cb5116":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e4848fb683db0790f2847173af06e2ad2d03328e"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["28288370235ed02234a64753cdbf0c6ec096304a","d5088ce415a50eb8412f4942aeabe293e75c81e7"],"3f504512a03d978990cbff30db0522b354e846db":["9ba1b632c041956c93c41aa1143d16a567014891"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e4848fb683db0790f2847173af06e2ad2d03328e"],"e4848fb683db0790f2847173af06e2ad2d03328e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ee5183ac042828ef74f90f0874eaba7daeb409bd":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"560c18d71dad43d675158783c3840f8c80d6d39c":["28288370235ed02234a64753cdbf0c6ec096304a","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"d5088ce415a50eb8412f4942aeabe293e75c81e7":["00e2ae9cb51fd0d4f12faf216db2810237cb5116"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["3f504512a03d978990cbff30db0522b354e846db"],"00e2ae9cb51fd0d4f12faf216db2810237cb5116":["d5088ce415a50eb8412f4942aeabe293e75c81e7"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["ee5183ac042828ef74f90f0874eaba7daeb409bd"],"28288370235ed02234a64753cdbf0c6ec096304a":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"e4848fb683db0790f2847173af06e2ad2d03328e":["00e2ae9cb51fd0d4f12faf216db2810237cb5116","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["00e2ae9cb51fd0d4f12faf216db2810237cb5116","28288370235ed02234a64753cdbf0c6ec096304a","e4848fb683db0790f2847173af06e2ad2d03328e"],"ee5183ac042828ef74f90f0874eaba7daeb409bd":["9ba1b632c041956c93c41aa1143d16a567014891"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"d5088ce415a50eb8412f4942aeabe293e75c81e7":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"560c18d71dad43d675158783c3840f8c80d6d39c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}