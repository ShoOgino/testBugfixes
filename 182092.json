{"path":"solr/core/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testLatLon().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testLatLon().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testLatLon().mjava","sourceNew":"  @Test\n  public void testLatLon() throws Exception {\n    assertU(adoc(\"id\", \"100\", \"store\", \"1,2\"));\n    assertU(commit());\n   \n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2,3,4)\",\n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // throw in some decimal points\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1.0,2,3,4.0)\",\n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // default to reading pt\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2)\",\n                 \"pt\",\"3,4\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // default to reading pt first\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2)\",\n                 \"pt\",\"3,4\", \n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // if pt missing, use sfield\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(3,4)\",\n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n    \n    // read both pt and sfield\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist()\",\"pt\",\"3,4\",\n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n\n    // param substitution\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist($a,$b)\",\n                 \"a\",\"3,4\",\n                 \"b\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n\n  }\n\n","sourceOld":"  @Test\n  public void testLatLon() throws Exception {\n    assertU(adoc(\"id\", \"100\", \"store\", \"1,2\"));\n    assertU(commit());\n   \n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2,3,4)\",\n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // throw in some decimal points\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1.0,2,3,4.0)\",\n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // default to reading pt\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2)\",\n                 \"pt\",\"3,4\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // default to reading pt first\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2)\",\n                 \"pt\",\"3,4\", \n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // if pt missing, use sfield\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(3,4)\",\n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n    \n    // read both pt and sfield\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist()\",\"pt\",\"3,4\",\n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n\n    // param substitution\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist($a,$b)\",\n                 \"a\",\"3,4\",\n                 \"b\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testLatLon().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testLatLon().mjava","sourceNew":"  @Test\n  public void testLatLon() throws Exception {\n    assertU(adoc(\"id\", \"100\", \"store\", \"1,2\"));\n    assertU(commit());\n   \n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2,3,4)\",\n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // throw in some decimal points\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1.0,2,3,4.0)\",\n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // default to reading pt\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2)\",\n                 \"pt\",\"3,4\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // default to reading pt first\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2)\",\n                 \"pt\",\"3,4\", \n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // if pt missing, use sfield\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(3,4)\",\n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n    \n    // read both pt and sfield\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist()\",\"pt\",\"3,4\",\n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n\n    // param substitution\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist($a,$b)\",\n                 \"a\",\"3,4\",\n                 \"b\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n\n  }\n\n","sourceOld":"  @Test\n  public void testLatLon() throws Exception {\n    assertU(adoc(\"id\", \"100\", \"store\", \"1,2\"));\n    assertU(commit());\n   \n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2,3,4)\",\n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // throw in some decimal points\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1.0,2,3,4.0)\",\n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // default to reading pt\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2)\",\n                 \"pt\",\"3,4\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // default to reading pt first\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2)\",\n                 \"pt\",\"3,4\", \n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // if pt missing, use sfield\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(3,4)\",\n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n    \n    // read both pt and sfield\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist()\",\"pt\",\"3,4\",\n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n\n    // param substitution\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist($a,$b)\",\n                 \"a\",\"3,4\",\n                 \"b\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testLatLon().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testLatLon().mjava","sourceNew":"  @Test\n  public void testLatLon() throws Exception {\n    assertU(adoc(\"id\", \"100\", \"store\", \"1,2\"));\n    assertU(commit());\n   \n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2,3,4)\",\n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // throw in some decimal points\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1.0,2,3,4.0)\",\n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // default to reading pt\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2)\",\n                 \"pt\",\"3,4\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // default to reading pt first\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2)\",\n                 \"pt\",\"3,4\", \n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // if pt missing, use sfield\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(3,4)\",\n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n    \n    // read both pt and sfield\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist()\",\"pt\",\"3,4\",\n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n\n    // param substitution\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist($a,$b)\",\n                 \"a\",\"3,4\",\n                 \"b\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n\n  }\n\n","sourceOld":"  @Test\n  public void testLatLon() throws Exception {\n    assertU(adoc(\"id\", \"100\", \"store\", \"1,2\"));\n    assertU(commit());\n   \n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2,3,4)\",\n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // throw in some decimal points\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1.0,2,3,4.0)\",\n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // default to reading pt\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2)\",\n                 \"pt\",\"3,4\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // default to reading pt first\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2)\",\n                 \"pt\",\"3,4\", \n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // if pt missing, use sfield\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(3,4)\",\n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n    \n    // read both pt and sfield\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist()\",\"pt\",\"3,4\",\n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n\n    // param substitution\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist($a,$b)\",\n                 \"a\",\"3,4\",\n                 \"b\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6220c823b73c9a8987debfba6a43b4b9dd10d0c","date":1374867434,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testLatLon().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testLatLon().mjava","sourceNew":"  @Test\n  public void testLatLon() throws Exception {\n    assertU(adoc(\"id\", \"100\", \"store\", \"1,2\"));//copied to store_rpt\n    assertU(commit());\n   \n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2,3,4)\",\n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // throw in some decimal points\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1.0,2,3,4.0)\",\n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // default to reading pt\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2)\",\n                 \"pt\",\"3,4\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // default to reading pt first\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2)\",\n                 \"pt\",\"3,4\", \n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // if pt missing, use sfield\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(3,4)\",\n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n\n    // if pt missing, use sfield (RPT)\n    assertJQ(req(\"defType\",\"func\",\n        \"q\",\"geodist(3,4)\",\n        \"sfield\",\"store_rpt\",\n        \"fq\",\"id:100\",\n        \"fl\",\"id,score\")\n        , 1e-5\n        ,\"/response/docs/[0]/score==314.40338\"\n    );\n    \n    // read both pt and sfield\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist()\",\"pt\",\"3,4\",\n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n\n    // read both pt and sfield (RPT)\n    assertJQ(req(\"defType\",\"func\",\n        \"q\",\"geodist()\",\"pt\",\"3,4\",\n        \"sfield\",\"store_rpt\",\n        \"fq\",\"id:100\",\n        \"fl\",\"id,score\")\n        , 1e-5\n        ,\"/response/docs/[0]/score==314.40338\"\n    );\n\n    // param substitution\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist($a,$b)\",\n                 \"a\",\"3,4\",\n                 \"b\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n\n  }\n\n","sourceOld":"  @Test\n  public void testLatLon() throws Exception {\n    assertU(adoc(\"id\", \"100\", \"store\", \"1,2\"));\n    assertU(commit());\n   \n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2,3,4)\",\n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // throw in some decimal points\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1.0,2,3,4.0)\",\n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // default to reading pt\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2)\",\n                 \"pt\",\"3,4\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // default to reading pt first\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2)\",\n                 \"pt\",\"3,4\", \n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // if pt missing, use sfield\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(3,4)\",\n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n    \n    // read both pt and sfield\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist()\",\"pt\",\"3,4\",\n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n\n    // param substitution\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist($a,$b)\",\n                 \"a\",\"3,4\",\n                 \"b\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testLatLon().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testLatLon().mjava","sourceNew":"  @Test\n  public void testLatLon() throws Exception {\n    assertU(adoc(\"id\", \"100\", \"store\", \"1,2\"));//copied to store_rpt\n    assertU(commit());\n   \n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2,3,4)\",\n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // throw in some decimal points\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1.0,2,3,4.0)\",\n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // default to reading pt\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2)\",\n                 \"pt\",\"3,4\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // default to reading pt first\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2)\",\n                 \"pt\",\"3,4\", \n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // if pt missing, use sfield\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(3,4)\",\n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n\n    // if pt missing, use sfield (RPT)\n    assertJQ(req(\"defType\",\"func\",\n        \"q\",\"geodist(3,4)\",\n        \"sfield\",\"store_rpt\",\n        \"fq\",\"id:100\",\n        \"fl\",\"id,score\")\n        , 1e-5\n        ,\"/response/docs/[0]/score==314.40338\"\n    );\n    \n    // read both pt and sfield\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist()\",\"pt\",\"3,4\",\n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n\n    // read both pt and sfield (RPT)\n    assertJQ(req(\"defType\",\"func\",\n        \"q\",\"geodist()\",\"pt\",\"3,4\",\n        \"sfield\",\"store_rpt\",\n        \"fq\",\"id:100\",\n        \"fl\",\"id,score\")\n        , 1e-5\n        ,\"/response/docs/[0]/score==314.40338\"\n    );\n\n    // param substitution\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist($a,$b)\",\n                 \"a\",\"3,4\",\n                 \"b\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n\n  }\n\n","sourceOld":"  @Test\n  public void testLatLon() throws Exception {\n    assertU(adoc(\"id\", \"100\", \"store\", \"1,2\"));\n    assertU(commit());\n   \n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2,3,4)\",\n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // throw in some decimal points\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1.0,2,3,4.0)\",\n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // default to reading pt\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2)\",\n                 \"pt\",\"3,4\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // default to reading pt first\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2)\",\n                 \"pt\",\"3,4\", \n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // if pt missing, use sfield\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(3,4)\",\n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n    \n    // read both pt and sfield\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist()\",\"pt\",\"3,4\",\n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n\n    // param substitution\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist($a,$b)\",\n                 \"a\",\"3,4\",\n                 \"b\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["c26f00b574427b55127e869b935845554afde1fa","a6220c823b73c9a8987debfba6a43b4b9dd10d0c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a6220c823b73c9a8987debfba6a43b4b9dd10d0c":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6220c823b73c9a8987debfba6a43b4b9dd10d0c"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a6220c823b73c9a8987debfba6a43b4b9dd10d0c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a6220c823b73c9a8987debfba6a43b4b9dd10d0c":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}