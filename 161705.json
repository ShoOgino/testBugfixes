{"path":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestDoubleMetaphoneFilterFactory#testSettingSizeAndInject().mjava","commits":[{"id":"280bf88d9ed3d9923e393961b594d9553970e4fd","date":1343099563,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestDoubleMetaphoneFilterFactory#testSettingSizeAndInject().mjava","pathOld":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/DoubleMetaphoneFilterFactoryTest[TestDoubleMetaphoneFilterFactory]#testSettingSizeAndInject().mjava","sourceNew":"  public void testSettingSizeAndInject() throws Exception {\n    DoubleMetaphoneFilterFactory factory = new DoubleMetaphoneFilterFactory();\n    Map<String, String> parameters = new HashMap<String, String>();\n    parameters.put(\"inject\", \"false\");\n    parameters.put(\"maxCodeLength\", \"8\");\n    factory.init(parameters);\n\n    TokenStream inputStream = new MockTokenizer(new StringReader(\"international\"), MockTokenizer.WHITESPACE, false);\n\n    TokenStream filteredStream = factory.create(inputStream);\n    assertEquals(DoubleMetaphoneFilter.class, filteredStream.getClass());\n    assertTokenStreamContents(filteredStream, new String[] { \"ANTRNXNL\" });\n  }\n\n","sourceOld":"  public void testSettingSizeAndInject() throws Exception {\n    DoubleMetaphoneFilterFactory factory = new DoubleMetaphoneFilterFactory();\n    Map<String, String> parameters = new HashMap<String, String>();\n    parameters.put(\"inject\", \"false\");\n    parameters.put(\"maxCodeLength\", \"8\");\n    factory.init(parameters);\n\n    TokenStream inputStream = new MockTokenizer(new StringReader(\"international\"), MockTokenizer.WHITESPACE, false);\n\n    TokenStream filteredStream = factory.create(inputStream);\n    assertEquals(DoubleMetaphoneFilter.class, filteredStream.getClass());\n    assertTokenStreamContents(filteredStream, new String[] { \"ANTRNXNL\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestDoubleMetaphoneFilterFactory#testSettingSizeAndInject().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/DoubleMetaphoneFilterFactoryTest#testSettingSizeAndInject().mjava","sourceNew":"  public void testSettingSizeAndInject() throws Exception {\n    DoubleMetaphoneFilterFactory factory = new DoubleMetaphoneFilterFactory();\n    Map<String, String> parameters = new HashMap<String, String>();\n    parameters.put(\"inject\", \"false\");\n    parameters.put(\"maxCodeLength\", \"8\");\n    factory.init(parameters);\n\n    TokenStream inputStream = new MockTokenizer(new StringReader(\"international\"), MockTokenizer.WHITESPACE, false);\n\n    TokenStream filteredStream = factory.create(inputStream);\n    assertEquals(DoubleMetaphoneFilter.class, filteredStream.getClass());\n    assertTokenStreamContents(filteredStream, new String[] { \"ANTRNXNL\" });\n  }\n\n","sourceOld":"  public void testSettingSizeAndInject() throws Exception {\n    DoubleMetaphoneFilterFactory factory = new DoubleMetaphoneFilterFactory();\n    Map<String, String> parameters = new HashMap<String, String>();\n    parameters.put(\"inject\", \"false\");\n    parameters.put(\"maxCodeLength\", \"8\");\n    factory.init(parameters);\n\n    TokenStream inputStream = new MockTokenizer(new StringReader(\"international\"), MockTokenizer.WHITESPACE, false);\n\n    TokenStream filteredStream = factory.create(inputStream);\n    assertEquals(DoubleMetaphoneFilter.class, filteredStream.getClass());\n    assertTokenStreamContents(filteredStream, new String[] { \"ANTRNXNL\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestDoubleMetaphoneFilterFactory#testSettingSizeAndInject().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/DoubleMetaphoneFilterFactoryTest#testSettingSizeAndInject().mjava","sourceNew":"  public void testSettingSizeAndInject() throws Exception {\n    DoubleMetaphoneFilterFactory factory = new DoubleMetaphoneFilterFactory();\n    Map<String, String> parameters = new HashMap<String, String>();\n    parameters.put(\"inject\", \"false\");\n    parameters.put(\"maxCodeLength\", \"8\");\n    factory.init(parameters);\n\n    TokenStream inputStream = new MockTokenizer(new StringReader(\"international\"), MockTokenizer.WHITESPACE, false);\n\n    TokenStream filteredStream = factory.create(inputStream);\n    assertEquals(DoubleMetaphoneFilter.class, filteredStream.getClass());\n    assertTokenStreamContents(filteredStream, new String[] { \"ANTRNXNL\" });\n  }\n\n","sourceOld":"  public void testSettingSizeAndInject() throws Exception {\n    DoubleMetaphoneFilterFactory factory = new DoubleMetaphoneFilterFactory();\n    Map<String, String> parameters = new HashMap<String, String>();\n    parameters.put(\"inject\", \"false\");\n    parameters.put(\"maxCodeLength\", \"8\");\n    factory.init(parameters);\n\n    TokenStream inputStream = new MockTokenizer(new StringReader(\"international\"), MockTokenizer.WHITESPACE, false);\n\n    TokenStream filteredStream = factory.create(inputStream);\n    assertEquals(DoubleMetaphoneFilter.class, filteredStream.getClass());\n    assertTokenStreamContents(filteredStream, new String[] { \"ANTRNXNL\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestDoubleMetaphoneFilterFactory#testSettingSizeAndInject().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/DoubleMetaphoneFilterFactoryTest#testSettingSizeAndInject().mjava","sourceNew":"  public void testSettingSizeAndInject() throws Exception {\n    DoubleMetaphoneFilterFactory factory = new DoubleMetaphoneFilterFactory();\n    Map<String, String> parameters = new HashMap<String, String>();\n    parameters.put(\"inject\", \"false\");\n    parameters.put(\"maxCodeLength\", \"8\");\n    factory.init(parameters);\n\n    TokenStream inputStream = new MockTokenizer(new StringReader(\"international\"), MockTokenizer.WHITESPACE, false);\n\n    TokenStream filteredStream = factory.create(inputStream);\n    assertEquals(DoubleMetaphoneFilter.class, filteredStream.getClass());\n    assertTokenStreamContents(filteredStream, new String[] { \"ANTRNXNL\" });\n  }\n\n","sourceOld":"  public void testSettingSizeAndInject() throws Exception {\n    DoubleMetaphoneFilterFactory factory = new DoubleMetaphoneFilterFactory();\n    Map<String, String> parameters = new HashMap<String, String>();\n    parameters.put(\"inject\", \"false\");\n    parameters.put(\"maxCodeLength\", \"8\");\n    factory.init(parameters);\n\n    TokenStream inputStream = new MockTokenizer(new StringReader(\"international\"), MockTokenizer.WHITESPACE, false);\n\n    TokenStream filteredStream = factory.create(inputStream);\n    assertEquals(DoubleMetaphoneFilter.class, filteredStream.getClass());\n    assertTokenStreamContents(filteredStream, new String[] { \"ANTRNXNL\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestDoubleMetaphoneFilterFactory#testSettingSizeAndInject().mjava","pathOld":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestDoubleMetaphoneFilterFactory#testSettingSizeAndInject().mjava","sourceNew":"  public void testSettingSizeAndInject() throws Exception {\n    Map<String,String> parameters = new HashMap<String,String>();\n    parameters.put(\"inject\", \"false\");\n    parameters.put(\"maxCodeLength\", \"8\");\n    DoubleMetaphoneFilterFactory factory = new DoubleMetaphoneFilterFactory(parameters);\n\n    TokenStream inputStream = new MockTokenizer(new StringReader(\"international\"), MockTokenizer.WHITESPACE, false);\n\n    TokenStream filteredStream = factory.create(inputStream);\n    assertEquals(DoubleMetaphoneFilter.class, filteredStream.getClass());\n    assertTokenStreamContents(filteredStream, new String[] { \"ANTRNXNL\" });\n  }\n\n","sourceOld":"  public void testSettingSizeAndInject() throws Exception {\n    DoubleMetaphoneFilterFactory factory = new DoubleMetaphoneFilterFactory();\n    Map<String, String> parameters = new HashMap<String, String>();\n    parameters.put(\"inject\", \"false\");\n    parameters.put(\"maxCodeLength\", \"8\");\n    factory.init(parameters);\n\n    TokenStream inputStream = new MockTokenizer(new StringReader(\"international\"), MockTokenizer.WHITESPACE, false);\n\n    TokenStream filteredStream = factory.create(inputStream);\n    assertEquals(DoubleMetaphoneFilter.class, filteredStream.getClass());\n    assertTokenStreamContents(filteredStream, new String[] { \"ANTRNXNL\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestDoubleMetaphoneFilterFactory#testSettingSizeAndInject().mjava","pathOld":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestDoubleMetaphoneFilterFactory#testSettingSizeAndInject().mjava","sourceNew":"  public void testSettingSizeAndInject() throws Exception {\n    Map<String,String> parameters = new HashMap<String,String>();\n    parameters.put(\"inject\", \"false\");\n    parameters.put(\"maxCodeLength\", \"8\");\n    DoubleMetaphoneFilterFactory factory = new DoubleMetaphoneFilterFactory(parameters);\n\n    TokenStream inputStream = whitespaceMockTokenizer(\"international\");\n\n    TokenStream filteredStream = factory.create(inputStream);\n    assertEquals(DoubleMetaphoneFilter.class, filteredStream.getClass());\n    assertTokenStreamContents(filteredStream, new String[] { \"ANTRNXNL\" });\n  }\n\n","sourceOld":"  public void testSettingSizeAndInject() throws Exception {\n    Map<String,String> parameters = new HashMap<String,String>();\n    parameters.put(\"inject\", \"false\");\n    parameters.put(\"maxCodeLength\", \"8\");\n    DoubleMetaphoneFilterFactory factory = new DoubleMetaphoneFilterFactory(parameters);\n\n    TokenStream inputStream = new MockTokenizer(new StringReader(\"international\"), MockTokenizer.WHITESPACE, false);\n\n    TokenStream filteredStream = factory.create(inputStream);\n    assertEquals(DoubleMetaphoneFilter.class, filteredStream.getClass());\n    assertTokenStreamContents(filteredStream, new String[] { \"ANTRNXNL\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestDoubleMetaphoneFilterFactory#testSettingSizeAndInject().mjava","pathOld":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestDoubleMetaphoneFilterFactory#testSettingSizeAndInject().mjava","sourceNew":"  public void testSettingSizeAndInject() throws Exception {\n    Map<String,String> parameters = new HashMap<>();\n    parameters.put(\"inject\", \"false\");\n    parameters.put(\"maxCodeLength\", \"8\");\n    DoubleMetaphoneFilterFactory factory = new DoubleMetaphoneFilterFactory(parameters);\n\n    TokenStream inputStream = whitespaceMockTokenizer(\"international\");\n\n    TokenStream filteredStream = factory.create(inputStream);\n    assertEquals(DoubleMetaphoneFilter.class, filteredStream.getClass());\n    assertTokenStreamContents(filteredStream, new String[] { \"ANTRNXNL\" });\n  }\n\n","sourceOld":"  public void testSettingSizeAndInject() throws Exception {\n    Map<String,String> parameters = new HashMap<String,String>();\n    parameters.put(\"inject\", \"false\");\n    parameters.put(\"maxCodeLength\", \"8\");\n    DoubleMetaphoneFilterFactory factory = new DoubleMetaphoneFilterFactory(parameters);\n\n    TokenStream inputStream = whitespaceMockTokenizer(\"international\");\n\n    TokenStream filteredStream = factory.create(inputStream);\n    assertEquals(DoubleMetaphoneFilter.class, filteredStream.getClass());\n    assertTokenStreamContents(filteredStream, new String[] { \"ANTRNXNL\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"280bf88d9ed3d9923e393961b594d9553970e4fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","280bf88d9ed3d9923e393961b594d9553970e4fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"280bf88d9ed3d9923e393961b594d9553970e4fd":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","280bf88d9ed3d9923e393961b594d9553970e4fd","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","5a1a22b1ad88b436661458df567f3fdb446392a4"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}