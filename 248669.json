{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneJUnit3MethodProvider#getTestMethods(Class[#],ClassModel).mjava","commits":[{"id":"1c8719b2c0b382be11f5b193b6fc14bc310e906b","date":1344770591,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneJUnit3MethodProvider#getTestMethods(Class[#],ClassModel).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Collection<Method> getTestMethods(Class<?> suiteClass, ClassModel classModel) {\n    Map<Method,MethodModel> methods = classModel.getMethods();\n    ArrayList<Method> result = new ArrayList<Method>();\n    for (MethodModel mm : methods.values()) {\n      // Skip any methods that have overrieds/ shadows.\n      if (mm.getDown() != null) continue;\n\n      Method m = mm.element;\n      if (m.getName().startsWith(\"test\") &&\n          Modifier.isPublic(m.getModifiers()) &&\n          !Modifier.isStatic(m.getModifiers()) &&\n          m.getParameterTypes().length == 0) {\n        result.add(m);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneJUnit3MethodProvider#getTestMethods(Class[#],ClassModel).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Collection<Method> getTestMethods(Class<?> suiteClass, ClassModel classModel) {\n    Map<Method,MethodModel> methods = classModel.getMethods();\n    ArrayList<Method> result = new ArrayList<Method>();\n    for (MethodModel mm : methods.values()) {\n      // Skip any methods that have overrieds/ shadows.\n      if (mm.getDown() != null) continue;\n\n      Method m = mm.element;\n      if (m.getName().startsWith(\"test\") &&\n          Modifier.isPublic(m.getModifiers()) &&\n          !Modifier.isStatic(m.getModifiers()) &&\n          m.getParameterTypes().length == 0) {\n        result.add(m);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneJUnit3MethodProvider#getTestMethods(Class[#],ClassModel).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Collection<Method> getTestMethods(Class<?> suiteClass, ClassModel classModel) {\n    Map<Method,MethodModel> methods = classModel.getMethods();\n    ArrayList<Method> result = new ArrayList<Method>();\n    for (MethodModel mm : methods.values()) {\n      // Skip any methods that have overrieds/ shadows.\n      if (mm.getDown() != null) continue;\n\n      Method m = mm.element;\n      if (m.getName().startsWith(\"test\") &&\n          Modifier.isPublic(m.getModifiers()) &&\n          !Modifier.isStatic(m.getModifiers()) &&\n          m.getParameterTypes().length == 0) {\n        result.add(m);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneJUnit3MethodProvider#getTestMethods(Class[#],ClassModel).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneJUnit3MethodProvider#getTestMethods(Class[#],ClassModel).mjava","sourceNew":"  @Override\n  public Collection<Method> getTestMethods(Class<?> suiteClass, ClassModel classModel) {\n    Map<Method,MethodModel> methods = classModel.getMethods();\n    ArrayList<Method> result = new ArrayList<Method>();\n    for (MethodModel mm : methods.values()) {\n      // Skip any methods that have overrieds/ shadows.\n      if (mm.getDown() != null) continue;\n\n      Method m = mm.element;\n      if (m.getName().startsWith(\"test\") &&\n          Modifier.isPublic(m.getModifiers()) &&\n          !Modifier.isStatic(m.getModifiers()) &&\n          m.getParameterTypes().length == 0) {\n        result.add(m);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Collection<Method> getTestMethods(Class<?> suiteClass, ClassModel classModel) {\n    Map<Method,MethodModel> methods = classModel.getMethods();\n    ArrayList<Method> result = new ArrayList<Method>();\n    for (MethodModel mm : methods.values()) {\n      // Skip any methods that have overrieds/ shadows.\n      if (mm.getDown() != null) continue;\n\n      Method m = mm.element;\n      if (m.getName().startsWith(\"test\") &&\n          Modifier.isPublic(m.getModifiers()) &&\n          !Modifier.isStatic(m.getModifiers()) &&\n          m.getParameterTypes().length == 0) {\n        result.add(m);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneJUnit3MethodProvider#getTestMethods(Class[#],ClassModel).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneJUnit3MethodProvider#getTestMethods(Class[#],ClassModel).mjava","sourceNew":"  @Override\n  public Collection<Method> getTestMethods(Class<?> suiteClass, ClassModel classModel) {\n    Map<Method,MethodModel> methods = classModel.getMethods();\n    ArrayList<Method> result = new ArrayList<Method>();\n    for (MethodModel mm : methods.values()) {\n      // Skip any methods that have overrieds/ shadows.\n      if (mm.getDown() != null) continue;\n\n      Method m = mm.element;\n      if (m.getName().startsWith(\"test\") &&\n          Modifier.isPublic(m.getModifiers()) &&\n          !Modifier.isStatic(m.getModifiers()) &&\n          m.getParameterTypes().length == 0) {\n        result.add(m);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Collection<Method> getTestMethods(Class<?> suiteClass, ClassModel classModel) {\n    Map<Method,MethodModel> methods = classModel.getMethods();\n    ArrayList<Method> result = new ArrayList<Method>();\n    for (MethodModel mm : methods.values()) {\n      // Skip any methods that have overrieds/ shadows.\n      if (mm.getDown() != null) continue;\n\n      Method m = mm.element;\n      if (m.getName().startsWith(\"test\") &&\n          Modifier.isPublic(m.getModifiers()) &&\n          !Modifier.isStatic(m.getModifiers()) &&\n          m.getParameterTypes().length == 0) {\n        result.add(m);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneJUnit3MethodProvider#getTestMethods(Class[#],ClassModel).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneJUnit3MethodProvider#getTestMethods(Class[#],ClassModel).mjava","sourceNew":"  @Override\n  public Collection<Method> getTestMethods(Class<?> suiteClass, ClassModel classModel) {\n    Map<Method,MethodModel> methods = classModel.getMethods();\n    ArrayList<Method> result = new ArrayList<>();\n    for (MethodModel mm : methods.values()) {\n      // Skip any methods that have overrieds/ shadows.\n      if (mm.getDown() != null) continue;\n\n      Method m = mm.element;\n      if (m.getName().startsWith(\"test\") &&\n          Modifier.isPublic(m.getModifiers()) &&\n          !Modifier.isStatic(m.getModifiers()) &&\n          m.getParameterTypes().length == 0) {\n        result.add(m);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Collection<Method> getTestMethods(Class<?> suiteClass, ClassModel classModel) {\n    Map<Method,MethodModel> methods = classModel.getMethods();\n    ArrayList<Method> result = new ArrayList<Method>();\n    for (MethodModel mm : methods.values()) {\n      // Skip any methods that have overrieds/ shadows.\n      if (mm.getDown() != null) continue;\n\n      Method m = mm.element;\n      if (m.getName().startsWith(\"test\") &&\n          Modifier.isPublic(m.getModifiers()) &&\n          !Modifier.isStatic(m.getModifiers()) &&\n          m.getParameterTypes().length == 0) {\n        result.add(m);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1c8719b2c0b382be11f5b193b6fc14bc310e906b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["1c8719b2c0b382be11f5b193b6fc14bc310e906b"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["1c8719b2c0b382be11f5b193b6fc14bc310e906b"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1c8719b2c0b382be11f5b193b6fc14bc310e906b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"1c8719b2c0b382be11f5b193b6fc14bc310e906b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","1c8719b2c0b382be11f5b193b6fc14bc310e906b"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"1c8719b2c0b382be11f5b193b6fc14bc310e906b":["c7869f64c874ebf7f317d22c00baf2b6857797a6","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}