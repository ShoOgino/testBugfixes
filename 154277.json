{"path":"lucene/facet/src/java/org/apache/lucene/facet/simple/FacetIndexWriter#processFacetFields(Map[String,List[FacetField]],List[Field],List[Field]).mjava","commits":[{"id":"519ac3b8f2711b5bfeb1c90c77bb007032270a41","date":1384456090,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/FacetIndexWriter#processFacetFields(Map[String,List[FacetField]],List[Field],List[Field]).mjava","pathOld":"/dev/null","sourceNew":"  private void processFacetFields(Map<String,List<FacetField>> byField, List<Field> addedIndexedFields, List<Field> addedStoredFields) throws IOException {\n\n    for(Map.Entry<String,List<FacetField>> ent : byField.entrySet()) {\n\n      // nocommit maybe we can somehow catch singleValued\n      // dim appearing more than once?\n\n      String indexedFieldName = ent.getKey();\n      //System.out.println(\"  fields=\" + ent.getValue());\n\n      IntsRef ordinals = new IntsRef(32);\n      for(FacetField facetField : ent.getValue()) {\n\n        FacetsConfig.DimConfig ft = facetsConfig.getDimConfig(facetField.dim);\n        if (facetField.path.length > 1 && ft.hierarchical == false) {\n          throw new IllegalArgumentException(\"dimension \\\"\" + facetField.dim + \"\\\" is not hierarchical yet has \" + facetField.path.length + \" components\");\n        }\n      \n        // Append dim and path:\n        String[] fullPath = new String[facetField.path.length+1];\n        fullPath[0] = facetField.dim;\n        System.arraycopy(facetField.path, 0, fullPath, 1, facetField.path.length);\n\n        CategoryPath cp = new CategoryPath(fullPath);\n\n        int ordinal = taxoWriter.addCategory(cp);\n        ordinals.ints[ordinals.length++] = ordinal;\n        //System.out.println(\"  add cp=\" + cp);\n\n        if (ft.hierarchical && ft.multiValued) {\n          // Add all parents too:\n          int parent = taxoWriter.getParent(ordinal);\n          while (parent > 0) {\n            if (ordinals.ints.length == ordinals.length) {\n              ordinals.grow(ordinals.length+1);\n            }\n            ordinals.ints[ordinals.length++] = parent;\n            parent = taxoWriter.getParent(parent);\n          }\n        }\n\n        // Drill down:\n        for(int i=2;i<=cp.length;i++) {\n          addedIndexedFields.add(new StringField(indexedFieldName, cp.subpath(i).toString(facetDelimChar), Field.Store.NO));\n        }\n      }\n\n      // Facet counts:\n      // DocValues are considered stored fields:\n      addedStoredFields.add(new BinaryDocValuesField(indexedFieldName, dedupAndEncode(ordinals)));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93bee32f95de853915b2f9402e76ed24ef97f43e","date":1384460894,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/FacetIndexWriter#processFacetFields(Map[String,List[FacetField]],List[Field],List[Field]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/FacetIndexWriter#processFacetFields(Map[String,List[FacetField]],List[Field],List[Field]).mjava","sourceNew":"  private void processFacetFields(Map<String,List<FacetField>> byField, List<Field> addedIndexedFields, List<Field> addedStoredFields) throws IOException {\n\n    for(Map.Entry<String,List<FacetField>> ent : byField.entrySet()) {\n\n      // nocommit maybe we can somehow catch singleValued\n      // dim appearing more than once?\n\n      String indexedFieldName = ent.getKey();\n      //System.out.println(\"  fields=\" + ent.getValue());\n\n      IntsRef ordinals = new IntsRef(32);\n      for(FacetField facetField : ent.getValue()) {\n\n        FacetsConfig.DimConfig ft = facetsConfig.getDimConfig(facetField.dim);\n        if (facetField.path.length > 1 && ft.hierarchical == false) {\n          throw new IllegalArgumentException(\"dimension \\\"\" + facetField.dim + \"\\\" is not hierarchical yet has \" + facetField.path.length + \" components\");\n        }\n      \n        CategoryPath cp = CategoryPath.create(facetField.dim, facetField.path);\n\n        int ordinal = taxoWriter.addCategory(cp);\n        ordinals.ints[ordinals.length++] = ordinal;\n        //System.out.println(\"  add cp=\" + cp);\n\n        if (ft.hierarchical && ft.multiValued) {\n          // Add all parents too:\n          int parent = taxoWriter.getParent(ordinal);\n          while (parent > 0) {\n            if (ordinals.ints.length == ordinals.length) {\n              ordinals.grow(ordinals.length+1);\n            }\n            ordinals.ints[ordinals.length++] = parent;\n            parent = taxoWriter.getParent(parent);\n          }\n        }\n\n        // Drill down:\n        for(int i=2;i<=cp.length;i++) {\n          addedIndexedFields.add(new StringField(indexedFieldName, cp.subpath(i).toString(facetDelimChar), Field.Store.NO));\n        }\n      }\n\n      // Facet counts:\n      // DocValues are considered stored fields:\n      addedStoredFields.add(new BinaryDocValuesField(indexedFieldName, dedupAndEncode(ordinals)));\n    }\n  }\n\n","sourceOld":"  private void processFacetFields(Map<String,List<FacetField>> byField, List<Field> addedIndexedFields, List<Field> addedStoredFields) throws IOException {\n\n    for(Map.Entry<String,List<FacetField>> ent : byField.entrySet()) {\n\n      // nocommit maybe we can somehow catch singleValued\n      // dim appearing more than once?\n\n      String indexedFieldName = ent.getKey();\n      //System.out.println(\"  fields=\" + ent.getValue());\n\n      IntsRef ordinals = new IntsRef(32);\n      for(FacetField facetField : ent.getValue()) {\n\n        FacetsConfig.DimConfig ft = facetsConfig.getDimConfig(facetField.dim);\n        if (facetField.path.length > 1 && ft.hierarchical == false) {\n          throw new IllegalArgumentException(\"dimension \\\"\" + facetField.dim + \"\\\" is not hierarchical yet has \" + facetField.path.length + \" components\");\n        }\n      \n        // Append dim and path:\n        String[] fullPath = new String[facetField.path.length+1];\n        fullPath[0] = facetField.dim;\n        System.arraycopy(facetField.path, 0, fullPath, 1, facetField.path.length);\n\n        CategoryPath cp = new CategoryPath(fullPath);\n\n        int ordinal = taxoWriter.addCategory(cp);\n        ordinals.ints[ordinals.length++] = ordinal;\n        //System.out.println(\"  add cp=\" + cp);\n\n        if (ft.hierarchical && ft.multiValued) {\n          // Add all parents too:\n          int parent = taxoWriter.getParent(ordinal);\n          while (parent > 0) {\n            if (ordinals.ints.length == ordinals.length) {\n              ordinals.grow(ordinals.length+1);\n            }\n            ordinals.ints[ordinals.length++] = parent;\n            parent = taxoWriter.getParent(parent);\n          }\n        }\n\n        // Drill down:\n        for(int i=2;i<=cp.length;i++) {\n          addedIndexedFields.add(new StringField(indexedFieldName, cp.subpath(i).toString(facetDelimChar), Field.Store.NO));\n        }\n      }\n\n      // Facet counts:\n      // DocValues are considered stored fields:\n      addedStoredFields.add(new BinaryDocValuesField(indexedFieldName, dedupAndEncode(ordinals)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/FacetIndexWriter#processFacetFields(Map[String,List[FacetField]],List[Field],List[Field]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/FacetIndexWriter#processFacetFields(Map[String,List[FacetField]],List[Field],List[Field]).mjava","sourceNew":"  private void processFacetFields(Map<String,List<FacetField>> byField, List<Field> addedIndexedFields, List<Field> addedStoredFields) throws IOException {\n\n    for(Map.Entry<String,List<FacetField>> ent : byField.entrySet()) {\n\n      // nocommit maybe we can somehow catch singleValued\n      // dim appearing more than once?\n\n      String indexedFieldName = ent.getKey();\n      //System.out.println(\"  fields=\" + ent.getValue());\n\n      IntsRef ordinals = new IntsRef(32);\n      for(FacetField facetField : ent.getValue()) {\n\n        FacetsConfig.DimConfig ft = facetsConfig.getDimConfig(facetField.dim);\n        if (facetField.path.length > 1 && ft.hierarchical == false) {\n          throw new IllegalArgumentException(\"dimension \\\"\" + facetField.dim + \"\\\" is not hierarchical yet has \" + facetField.path.length + \" components\");\n        }\n      \n        FacetLabel cp = FacetLabel.create(facetField.dim, facetField.path);\n\n        int ordinal = taxoWriter.addCategory(cp);\n        ordinals.ints[ordinals.length++] = ordinal;\n        //System.out.println(\"  add cp=\" + cp);\n\n        if (ft.hierarchical && ft.multiValued) {\n          // Add all parents too:\n          int parent = taxoWriter.getParent(ordinal);\n          while (parent > 0) {\n            if (ordinals.ints.length == ordinals.length) {\n              ordinals.grow(ordinals.length+1);\n            }\n            ordinals.ints[ordinals.length++] = parent;\n            parent = taxoWriter.getParent(parent);\n          }\n        }\n\n        // Drill down:\n        for(int i=2;i<=cp.length;i++) {\n          addedIndexedFields.add(new StringField(indexedFieldName, cp.subpath(i).toString(facetDelimChar), Field.Store.NO));\n        }\n      }\n\n      // Facet counts:\n      // DocValues are considered stored fields:\n      addedStoredFields.add(new BinaryDocValuesField(indexedFieldName, dedupAndEncode(ordinals)));\n    }\n  }\n\n","sourceOld":"  private void processFacetFields(Map<String,List<FacetField>> byField, List<Field> addedIndexedFields, List<Field> addedStoredFields) throws IOException {\n\n    for(Map.Entry<String,List<FacetField>> ent : byField.entrySet()) {\n\n      // nocommit maybe we can somehow catch singleValued\n      // dim appearing more than once?\n\n      String indexedFieldName = ent.getKey();\n      //System.out.println(\"  fields=\" + ent.getValue());\n\n      IntsRef ordinals = new IntsRef(32);\n      for(FacetField facetField : ent.getValue()) {\n\n        FacetsConfig.DimConfig ft = facetsConfig.getDimConfig(facetField.dim);\n        if (facetField.path.length > 1 && ft.hierarchical == false) {\n          throw new IllegalArgumentException(\"dimension \\\"\" + facetField.dim + \"\\\" is not hierarchical yet has \" + facetField.path.length + \" components\");\n        }\n      \n        CategoryPath cp = CategoryPath.create(facetField.dim, facetField.path);\n\n        int ordinal = taxoWriter.addCategory(cp);\n        ordinals.ints[ordinals.length++] = ordinal;\n        //System.out.println(\"  add cp=\" + cp);\n\n        if (ft.hierarchical && ft.multiValued) {\n          // Add all parents too:\n          int parent = taxoWriter.getParent(ordinal);\n          while (parent > 0) {\n            if (ordinals.ints.length == ordinals.length) {\n              ordinals.grow(ordinals.length+1);\n            }\n            ordinals.ints[ordinals.length++] = parent;\n            parent = taxoWriter.getParent(parent);\n          }\n        }\n\n        // Drill down:\n        for(int i=2;i<=cp.length;i++) {\n          addedIndexedFields.add(new StringField(indexedFieldName, cp.subpath(i).toString(facetDelimChar), Field.Store.NO));\n        }\n      }\n\n      // Facet counts:\n      // DocValues are considered stored fields:\n      addedStoredFields.add(new BinaryDocValuesField(indexedFieldName, dedupAndEncode(ordinals)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9fe35a54e036b5f516cb04b39f3eb96a55812376","date":1384725462,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/FacetIndexWriter#processFacetFields(Map[String,List[FacetField]],List[Field],List[Field]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/FacetIndexWriter#processFacetFields(Map[String,List[FacetField]],List[Field],List[Field]).mjava","sourceNew":"  private void processFacetFields(Map<String,List<FacetField>> byField, List<Field> addedIndexedFields, List<Field> addedStoredFields) throws IOException {\n\n    for(Map.Entry<String,List<FacetField>> ent : byField.entrySet()) {\n\n      // nocommit maybe we can somehow catch singleValued\n      // dim appearing more than once?\n\n      String indexedFieldName = ent.getKey();\n      //System.out.println(\"  fields=\" + ent.getValue());\n\n      IntsRef ordinals = new IntsRef(32);\n      for(FacetField facetField : ent.getValue()) {\n\n        FacetsConfig.DimConfig ft = facetsConfig.getDimConfig(facetField.dim);\n        if (facetField.path.length > 1 && ft.hierarchical == false) {\n          throw new IllegalArgumentException(\"dimension \\\"\" + facetField.dim + \"\\\" is not hierarchical yet has \" + facetField.path.length + \" components\");\n        }\n      \n        FacetLabel cp = FacetLabel.create(facetField.dim, facetField.path);\n\n        int ordinal = taxoWriter.addCategory(cp);\n        ordinals.ints[ordinals.length++] = ordinal;\n        //System.out.println(\"  add cp=\" + cp);\n\n        if (ft.hierarchical && ft.multiValued) {\n          // Add all parents too:\n          int parent = taxoWriter.getParent(ordinal);\n          while (parent > 0) {\n            if (ordinals.ints.length == ordinals.length) {\n              ordinals.grow(ordinals.length+1);\n            }\n            ordinals.ints[ordinals.length++] = parent;\n            parent = taxoWriter.getParent(parent);\n          }\n        }\n\n        // Drill down:\n        for(int i=2;i<=cp.length;i++) {\n          addedIndexedFields.add(new StringField(indexedFieldName, pathToString(cp.components, i), Field.Store.NO));\n        }\n      }\n\n      // Facet counts:\n      // DocValues are considered stored fields:\n      addedStoredFields.add(new BinaryDocValuesField(indexedFieldName, dedupAndEncode(ordinals)));\n    }\n  }\n\n","sourceOld":"  private void processFacetFields(Map<String,List<FacetField>> byField, List<Field> addedIndexedFields, List<Field> addedStoredFields) throws IOException {\n\n    for(Map.Entry<String,List<FacetField>> ent : byField.entrySet()) {\n\n      // nocommit maybe we can somehow catch singleValued\n      // dim appearing more than once?\n\n      String indexedFieldName = ent.getKey();\n      //System.out.println(\"  fields=\" + ent.getValue());\n\n      IntsRef ordinals = new IntsRef(32);\n      for(FacetField facetField : ent.getValue()) {\n\n        FacetsConfig.DimConfig ft = facetsConfig.getDimConfig(facetField.dim);\n        if (facetField.path.length > 1 && ft.hierarchical == false) {\n          throw new IllegalArgumentException(\"dimension \\\"\" + facetField.dim + \"\\\" is not hierarchical yet has \" + facetField.path.length + \" components\");\n        }\n      \n        FacetLabel cp = FacetLabel.create(facetField.dim, facetField.path);\n\n        int ordinal = taxoWriter.addCategory(cp);\n        ordinals.ints[ordinals.length++] = ordinal;\n        //System.out.println(\"  add cp=\" + cp);\n\n        if (ft.hierarchical && ft.multiValued) {\n          // Add all parents too:\n          int parent = taxoWriter.getParent(ordinal);\n          while (parent > 0) {\n            if (ordinals.ints.length == ordinals.length) {\n              ordinals.grow(ordinals.length+1);\n            }\n            ordinals.ints[ordinals.length++] = parent;\n            parent = taxoWriter.getParent(parent);\n          }\n        }\n\n        // Drill down:\n        for(int i=2;i<=cp.length;i++) {\n          addedIndexedFields.add(new StringField(indexedFieldName, cp.subpath(i).toString(facetDelimChar), Field.Store.NO));\n        }\n      }\n\n      // Facet counts:\n      // DocValues are considered stored fields:\n      addedStoredFields.add(new BinaryDocValuesField(indexedFieldName, dedupAndEncode(ordinals)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"18edd2e3f5560087a37442fa424cbbed7c295ebc","date":1384813900,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/FacetIndexWriter#processFacetFields(Map[String,List[FacetField]],List[Field],List[Field]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/FacetIndexWriter#processFacetFields(Map[String,List[FacetField]],List[Field],List[Field]).mjava","sourceNew":"  private void processFacetFields(Map<String,List<FacetField>> byField, List<Field> addedIndexedFields, List<Field> addedStoredFields) throws IOException {\n\n    for(Map.Entry<String,List<FacetField>> ent : byField.entrySet()) {\n\n      // nocommit maybe we can somehow catch singleValued\n      // dim appearing more than once?\n\n      String indexFieldName = ent.getKey();\n      //System.out.println(\"  fields=\" + ent.getValue());\n\n      IntsRef ordinals = new IntsRef(32);\n      for(FacetField facetField : ent.getValue()) {\n\n        FacetsConfig.DimConfig ft = config.getDimConfig(facetField.dim);\n        if (facetField.path.length > 1 && ft.hierarchical == false) {\n          throw new IllegalArgumentException(\"dimension \\\"\" + facetField.dim + \"\\\" is not hierarchical yet has \" + facetField.path.length + \" components\");\n        }\n      \n        FacetLabel cp = FacetLabel.create(facetField.dim, facetField.path);\n\n        int ordinal = taxoWriter.addCategory(cp);\n        ordinals.ints[ordinals.length++] = ordinal;\n        //System.out.println(\"  add cp=\" + cp);\n\n        if (ft.hierarchical && ft.multiValued) {\n          // Add all parents too:\n          int parent = taxoWriter.getParent(ordinal);\n          while (parent > 0) {\n            if (ordinals.ints.length == ordinals.length) {\n              ordinals.grow(ordinals.length+1);\n            }\n            ordinals.ints[ordinals.length++] = parent;\n            parent = taxoWriter.getParent(parent);\n          }\n        }\n\n        // Drill down:\n        for(int i=2;i<=cp.length;i++) {\n          addedIndexedFields.add(new StringField(indexFieldName, pathToString(cp.components, i), Field.Store.NO));\n        }\n      }\n\n      // Facet counts:\n      // DocValues are considered stored fields:\n      addedStoredFields.add(new BinaryDocValuesField(indexFieldName, dedupAndEncode(ordinals)));\n    }\n  }\n\n","sourceOld":"  private void processFacetFields(Map<String,List<FacetField>> byField, List<Field> addedIndexedFields, List<Field> addedStoredFields) throws IOException {\n\n    for(Map.Entry<String,List<FacetField>> ent : byField.entrySet()) {\n\n      // nocommit maybe we can somehow catch singleValued\n      // dim appearing more than once?\n\n      String indexedFieldName = ent.getKey();\n      //System.out.println(\"  fields=\" + ent.getValue());\n\n      IntsRef ordinals = new IntsRef(32);\n      for(FacetField facetField : ent.getValue()) {\n\n        FacetsConfig.DimConfig ft = facetsConfig.getDimConfig(facetField.dim);\n        if (facetField.path.length > 1 && ft.hierarchical == false) {\n          throw new IllegalArgumentException(\"dimension \\\"\" + facetField.dim + \"\\\" is not hierarchical yet has \" + facetField.path.length + \" components\");\n        }\n      \n        FacetLabel cp = FacetLabel.create(facetField.dim, facetField.path);\n\n        int ordinal = taxoWriter.addCategory(cp);\n        ordinals.ints[ordinals.length++] = ordinal;\n        //System.out.println(\"  add cp=\" + cp);\n\n        if (ft.hierarchical && ft.multiValued) {\n          // Add all parents too:\n          int parent = taxoWriter.getParent(ordinal);\n          while (parent > 0) {\n            if (ordinals.ints.length == ordinals.length) {\n              ordinals.grow(ordinals.length+1);\n            }\n            ordinals.ints[ordinals.length++] = parent;\n            parent = taxoWriter.getParent(parent);\n          }\n        }\n\n        // Drill down:\n        for(int i=2;i<=cp.length;i++) {\n          addedIndexedFields.add(new StringField(indexedFieldName, pathToString(cp.components, i), Field.Store.NO));\n        }\n      }\n\n      // Facet counts:\n      // DocValues are considered stored fields:\n      addedStoredFields.add(new BinaryDocValuesField(indexedFieldName, dedupAndEncode(ordinals)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7554009c97f9365492660c1df175b6349f7ec05c","date":1384886154,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/DocumentBuilder#processFacetFields(Map[String,List[FacetField]],List[Field],List[Field]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/FacetIndexWriter#processFacetFields(Map[String,List[FacetField]],List[Field],List[Field]).mjava","sourceNew":"  private void processFacetFields(Map<String,List<FacetField>> byField, List<Field> addedIndexedFields, List<Field> addedStoredFields) throws IOException {\n\n    for(Map.Entry<String,List<FacetField>> ent : byField.entrySet()) {\n\n      // nocommit maybe we can somehow catch singleValued\n      // dim appearing more than once?\n\n      String indexFieldName = ent.getKey();\n      //System.out.println(\"  fields=\" + ent.getValue());\n\n      IntsRef ordinals = new IntsRef(32);\n      for(FacetField facetField : ent.getValue()) {\n\n        FacetsConfig.DimConfig ft = config.getDimConfig(facetField.dim);\n        if (facetField.path.length > 1 && ft.hierarchical == false) {\n          throw new IllegalArgumentException(\"dimension \\\"\" + facetField.dim + \"\\\" is not hierarchical yet has \" + facetField.path.length + \" components\");\n        }\n      \n        FacetLabel cp = FacetLabel.create(facetField.dim, facetField.path);\n\n        int ordinal = taxoWriter.addCategory(cp);\n        ordinals.ints[ordinals.length++] = ordinal;\n        //System.out.println(\"  add cp=\" + cp);\n\n        if (ft.hierarchical && ft.multiValued) {\n          // Add all parents too:\n          int parent = taxoWriter.getParent(ordinal);\n          while (parent > 0) {\n            if (ordinals.ints.length == ordinals.length) {\n              ordinals.grow(ordinals.length+1);\n            }\n            ordinals.ints[ordinals.length++] = parent;\n            parent = taxoWriter.getParent(parent);\n          }\n        }\n\n        // Drill down:\n        for(int i=2;i<=cp.length;i++) {\n          addedIndexedFields.add(new StringField(indexFieldName, pathToString(cp.components, i), Field.Store.NO));\n        }\n      }\n\n      // Facet counts:\n      // DocValues are considered stored fields:\n      addedStoredFields.add(new BinaryDocValuesField(indexFieldName, dedupAndEncode(ordinals)));\n    }\n  }\n\n","sourceOld":"  private void processFacetFields(Map<String,List<FacetField>> byField, List<Field> addedIndexedFields, List<Field> addedStoredFields) throws IOException {\n\n    for(Map.Entry<String,List<FacetField>> ent : byField.entrySet()) {\n\n      // nocommit maybe we can somehow catch singleValued\n      // dim appearing more than once?\n\n      String indexFieldName = ent.getKey();\n      //System.out.println(\"  fields=\" + ent.getValue());\n\n      IntsRef ordinals = new IntsRef(32);\n      for(FacetField facetField : ent.getValue()) {\n\n        FacetsConfig.DimConfig ft = config.getDimConfig(facetField.dim);\n        if (facetField.path.length > 1 && ft.hierarchical == false) {\n          throw new IllegalArgumentException(\"dimension \\\"\" + facetField.dim + \"\\\" is not hierarchical yet has \" + facetField.path.length + \" components\");\n        }\n      \n        FacetLabel cp = FacetLabel.create(facetField.dim, facetField.path);\n\n        int ordinal = taxoWriter.addCategory(cp);\n        ordinals.ints[ordinals.length++] = ordinal;\n        //System.out.println(\"  add cp=\" + cp);\n\n        if (ft.hierarchical && ft.multiValued) {\n          // Add all parents too:\n          int parent = taxoWriter.getParent(ordinal);\n          while (parent > 0) {\n            if (ordinals.ints.length == ordinals.length) {\n              ordinals.grow(ordinals.length+1);\n            }\n            ordinals.ints[ordinals.length++] = parent;\n            parent = taxoWriter.getParent(parent);\n          }\n        }\n\n        // Drill down:\n        for(int i=2;i<=cp.length;i++) {\n          addedIndexedFields.add(new StringField(indexFieldName, pathToString(cp.components, i), Field.Store.NO));\n        }\n      }\n\n      // Facet counts:\n      // DocValues are considered stored fields:\n      addedStoredFields.add(new BinaryDocValuesField(indexFieldName, dedupAndEncode(ordinals)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7554009c97f9365492660c1df175b6349f7ec05c":["18edd2e3f5560087a37442fa424cbbed7c295ebc"],"18edd2e3f5560087a37442fa424cbbed7c295ebc":["9fe35a54e036b5f516cb04b39f3eb96a55812376"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"519ac3b8f2711b5bfeb1c90c77bb007032270a41":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9fe35a54e036b5f516cb04b39f3eb96a55812376":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"93bee32f95de853915b2f9402e76ed24ef97f43e":["519ac3b8f2711b5bfeb1c90c77bb007032270a41"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["93bee32f95de853915b2f9402e76ed24ef97f43e"]},"commit2Childs":{"7554009c97f9365492660c1df175b6349f7ec05c":[],"18edd2e3f5560087a37442fa424cbbed7c295ebc":["7554009c97f9365492660c1df175b6349f7ec05c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["519ac3b8f2711b5bfeb1c90c77bb007032270a41","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"519ac3b8f2711b5bfeb1c90c77bb007032270a41":["93bee32f95de853915b2f9402e76ed24ef97f43e"],"9fe35a54e036b5f516cb04b39f3eb96a55812376":["18edd2e3f5560087a37442fa424cbbed7c295ebc"],"93bee32f95de853915b2f9402e76ed24ef97f43e":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["9fe35a54e036b5f516cb04b39f3eb96a55812376"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7554009c97f9365492660c1df175b6349f7ec05c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}