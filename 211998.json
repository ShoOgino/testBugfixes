{"path":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonMultiPolygonShapeQueries#nextShape().mjava","commits":[{"id":"5e8251ad51618827e557dd369f16921a666914b5","date":1548082828,"type":0,"author":"iverase","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonMultiPolygonShapeQueries#nextShape().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected Polygon[] nextShape() {\n\n    int n = random().nextInt(4) + 1;\n    Polygon[] polygons = new Polygon[n];\n    for (int i =0; i < n; i++) {\n      while (true) {\n        // if we can't tessellate; then random polygon generator created a malformed shape\n        Polygon p = (Polygon) getShapeType().nextShape();\n        try {\n          Tessellator.tessellate(p);\n          polygons[i] = p;\n          break;\n        } catch (IllegalArgumentException e) {\n          continue;\n        }\n      }\n    }\n    return polygons;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2682a1cd25864ccdc1b44bf047bd08700f28ba06","date":1548321910,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonMultiPolygonShapeQueries#nextShape().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected Polygon[] nextShape() {\n\n    int n = random().nextInt(4) + 1;\n    Polygon[] polygons = new Polygon[n];\n    for (int i =0; i < n; i++) {\n      while (true) {\n        // if we can't tessellate; then random polygon generator created a malformed shape\n        Polygon p = (Polygon) getShapeType().nextShape();\n        try {\n          Tessellator.tessellate(p);\n          polygons[i] = p;\n          break;\n        } catch (IllegalArgumentException e) {\n          continue;\n        }\n      }\n    }\n    return polygons;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3","date":1576052211,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonMultiPolygonShapeQueries#nextShape().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonMultiPolygonShapeQueries#nextShape().mjava","sourceNew":"  @Override\n  protected Polygon[] nextShape() {\n    int n = random().nextInt(4) + 1;\n    Polygon[] polygons = new Polygon[n];\n    for (int i =0; i < n; i++) {\n      int  repetitions =0;\n      while (true) {\n        // if we can't tessellate; then random polygon generator created a malformed shape\n        Polygon p = (Polygon) getShapeType().nextShape();\n        try {\n          Tessellator.tessellate(p);\n          //polygons are disjoint so CONTAINS works. Note that if we intersect\n          //any shape then contains return false.\n          if (isDisjoint(polygons, p)) {\n            polygons[i] = p;\n            break;\n          }\n          repetitions++;\n          if (repetitions > 50) {\n            //try again\n            return nextShape();\n          }\n        } catch (IllegalArgumentException e) {\n          continue;\n        }\n      }\n    }\n    return polygons;\n  }\n\n","sourceOld":"  @Override\n  protected Polygon[] nextShape() {\n\n    int n = random().nextInt(4) + 1;\n    Polygon[] polygons = new Polygon[n];\n    for (int i =0; i < n; i++) {\n      while (true) {\n        // if we can't tessellate; then random polygon generator created a malformed shape\n        Polygon p = (Polygon) getShapeType().nextShape();\n        try {\n          Tessellator.tessellate(p);\n          polygons[i] = p;\n          break;\n        } catch (IllegalArgumentException e) {\n          continue;\n        }\n      }\n    }\n    return polygons;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","date":1576073026,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonMultiPolygonShapeQueries#nextShape().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonMultiPolygonShapeQueries#nextShape().mjava","sourceNew":"  @Override\n  protected Polygon[] nextShape() {\n    int n = random().nextInt(4) + 1;\n    Polygon[] polygons = new Polygon[n];\n    for (int i =0; i < n; i++) {\n      int  repetitions =0;\n      while (true) {\n        // if we can't tessellate; then random polygon generator created a malformed shape\n        Polygon p = (Polygon) getShapeType().nextShape();\n        try {\n          Tessellator.tessellate(p);\n          //polygons are disjoint so CONTAINS works. Note that if we intersect\n          //any shape then contains return false.\n          if (isDisjoint(polygons, p)) {\n            polygons[i] = p;\n            break;\n          }\n          repetitions++;\n          if (repetitions > 50) {\n            //try again\n            return nextShape();\n          }\n        } catch (IllegalArgumentException e) {\n          continue;\n        }\n      }\n    }\n    return polygons;\n  }\n\n","sourceOld":"  @Override\n  protected Polygon[] nextShape() {\n\n    int n = random().nextInt(4) + 1;\n    Polygon[] polygons = new Polygon[n];\n    for (int i =0; i < n; i++) {\n      while (true) {\n        // if we can't tessellate; then random polygon generator created a malformed shape\n        Polygon p = (Polygon) getShapeType().nextShape();\n        try {\n          Tessellator.tessellate(p);\n          polygons[i] = p;\n          break;\n        } catch (IllegalArgumentException e) {\n          continue;\n        }\n      }\n    }\n    return polygons;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestLatLonMultiPolygonShapeQueries#nextShape().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonMultiPolygonShapeQueries#nextShape().mjava","sourceNew":"  @Override\n  protected Polygon[] nextShape() {\n    int n = random().nextInt(4) + 1;\n    Polygon[] polygons = new Polygon[n];\n    for (int i =0; i < n; i++) {\n      int  repetitions =0;\n      while (true) {\n        // if we can't tessellate; then random polygon generator created a malformed shape\n        Polygon p = (Polygon) getShapeType().nextShape();\n        try {\n          Tessellator.tessellate(p);\n          //polygons are disjoint so CONTAINS works. Note that if we intersect\n          //any shape then contains return false.\n          if (isDisjoint(polygons, p)) {\n            polygons[i] = p;\n            break;\n          }\n          repetitions++;\n          if (repetitions > 50) {\n            //try again\n            return nextShape();\n          }\n        } catch (IllegalArgumentException e) {\n          continue;\n        }\n      }\n    }\n    return polygons;\n  }\n\n","sourceOld":"  @Override\n  protected Polygon[] nextShape() {\n    int n = random().nextInt(4) + 1;\n    Polygon[] polygons = new Polygon[n];\n    for (int i =0; i < n; i++) {\n      int  repetitions =0;\n      while (true) {\n        // if we can't tessellate; then random polygon generator created a malformed shape\n        Polygon p = (Polygon) getShapeType().nextShape();\n        try {\n          Tessellator.tessellate(p);\n          //polygons are disjoint so CONTAINS works. Note that if we intersect\n          //any shape then contains return false.\n          if (isDisjoint(polygons, p)) {\n            polygons[i] = p;\n            break;\n          }\n          repetitions++;\n          if (repetitions > 50) {\n            //try again\n            return nextShape();\n          }\n        } catch (IllegalArgumentException e) {\n          continue;\n        }\n      }\n    }\n    return polygons;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab":["5e8251ad51618827e557dd369f16921a666914b5","3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3"],"5e8251ad51618827e557dd369f16921a666914b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3":["5e8251ad51618827e557dd369f16921a666914b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5e8251ad51618827e557dd369f16921a666914b5"]},"commit2Childs":{"6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5e8251ad51618827e557dd369f16921a666914b5","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5e8251ad51618827e557dd369f16921a666914b5":["6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3":["6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","09c1e6d465800c73af60624bf9d4459a19f7940c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":[]},"heads":["6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","cd5edd1f2b162a5cfa08efd17851a07373a96817","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}