{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader#CompressingStoredFieldsIndexReader(IndexInput,SegmentInfo).mjava","commits":[{"id":"0a96cceee825e15cd8e042b683d404086e2a58d1","date":1351872237,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader#CompressingStoredFieldsIndexReader(IndexInput,SegmentInfo).mjava","pathOld":"/dev/null","sourceNew":"  CompressingStoredFieldsIndexReader(IndexInput fieldsIndexIn, SegmentInfo si) throws IOException {\n    this.fieldsIndexIn = fieldsIndexIn;\n    maxDoc = si.getDocCount();\n    int[] docBases = new int[16];\n    long[] startPointers = new long[16];\n    int[] avgChunkDocs = new int[16];\n    long[] avgChunkSizes = new long[16];\n    PackedInts.Reader[] docBasesDeltas = new PackedInts.Reader[16];\n    PackedInts.Reader[] startPointersDeltas = new PackedInts.Reader[16];\n\n    final int packedIntsVersion = fieldsIndexIn.readVInt();\n\n    int blockCount = 0;\n\n    for (;;) {\n      final int numChunks = fieldsIndexIn.readVInt();\n      if (numChunks == 0) {\n        break;\n      }\n      if (blockCount == docBases.length) {\n        final int newSize = ArrayUtil.oversize(blockCount + 1, 8);\n        docBases = Arrays.copyOf(docBases, newSize);\n        startPointers = Arrays.copyOf(startPointers, newSize);\n        avgChunkDocs = Arrays.copyOf(avgChunkDocs, newSize);\n        avgChunkSizes = Arrays.copyOf(avgChunkSizes, newSize);\n        docBasesDeltas = Arrays.copyOf(docBasesDeltas, newSize);\n        startPointersDeltas = Arrays.copyOf(startPointersDeltas, newSize);\n      }\n\n      // doc bases\n      docBases[blockCount] = fieldsIndexIn.readVInt();\n      avgChunkDocs[blockCount] = fieldsIndexIn.readVInt();\n      final int bitsPerDocBase = fieldsIndexIn.readVInt();\n      if (bitsPerDocBase > 32) {\n        throw new CorruptIndexException(\"Corrupted\");\n      }\n      docBasesDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerDocBase);\n\n      // start pointers\n      startPointers[blockCount] = fieldsIndexIn.readVLong();\n      avgChunkSizes[blockCount] = fieldsIndexIn.readVLong();\n      final int bitsPerStartPointer = fieldsIndexIn.readVInt();\n      if (bitsPerStartPointer > 64) {\n        throw new CorruptIndexException(\"Corrupted\");\n      }\n      startPointersDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerStartPointer);\n\n      ++blockCount;\n    }\n\n    this.docBases = Arrays.copyOf(docBases, blockCount);\n    this.startPointers = Arrays.copyOf(startPointers, blockCount);\n    this.avgChunkDocs = Arrays.copyOf(avgChunkDocs, blockCount);\n    this.avgChunkSizes = Arrays.copyOf(avgChunkSizes, blockCount);\n    this.docBasesDeltas = Arrays.copyOf(docBasesDeltas, blockCount);\n    this.startPointersDeltas = Arrays.copyOf(startPointersDeltas, blockCount);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69","date":1352818449,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader#CompressingStoredFieldsIndexReader(IndexInput,SegmentInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader#CompressingStoredFieldsIndexReader(IndexInput,SegmentInfo).mjava","sourceNew":"  CompressingStoredFieldsIndexReader(IndexInput fieldsIndexIn, SegmentInfo si) throws IOException {\n    this.fieldsIndexIn = fieldsIndexIn;\n    maxDoc = si.getDocCount();\n    int[] docBases = new int[16];\n    long[] startPointers = new long[16];\n    int[] avgChunkDocs = new int[16];\n    long[] avgChunkSizes = new long[16];\n    PackedInts.Reader[] docBasesDeltas = new PackedInts.Reader[16];\n    PackedInts.Reader[] startPointersDeltas = new PackedInts.Reader[16];\n\n    final int packedIntsVersion = fieldsIndexIn.readVInt();\n\n    int blockCount = 0;\n\n    for (;;) {\n      final int numChunks = fieldsIndexIn.readVInt();\n      if (numChunks == 0) {\n        break;\n      }\n      if (blockCount == docBases.length) {\n        final int newSize = ArrayUtil.oversize(blockCount + 1, 8);\n        docBases = Arrays.copyOf(docBases, newSize);\n        startPointers = Arrays.copyOf(startPointers, newSize);\n        avgChunkDocs = Arrays.copyOf(avgChunkDocs, newSize);\n        avgChunkSizes = Arrays.copyOf(avgChunkSizes, newSize);\n        docBasesDeltas = Arrays.copyOf(docBasesDeltas, newSize);\n        startPointersDeltas = Arrays.copyOf(startPointersDeltas, newSize);\n      }\n\n      // doc bases\n      docBases[blockCount] = fieldsIndexIn.readVInt();\n      avgChunkDocs[blockCount] = fieldsIndexIn.readVInt();\n      final int bitsPerDocBase = fieldsIndexIn.readVInt();\n      if (bitsPerDocBase > 32) {\n        throw new CorruptIndexException(\"Corrupted\");\n      }\n      docBasesDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerDocBase);\n\n      // start pointers\n      startPointers[blockCount] = fieldsIndexIn.readVLong();\n      avgChunkSizes[blockCount] = fieldsIndexIn.readVLong();\n      final int bitsPerStartPointer = fieldsIndexIn.readVInt();\n      if (bitsPerStartPointer > 64) {\n        throw new CorruptIndexException(\"Corrupted\");\n      }\n      startPointersDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerStartPointer);\n\n      ++blockCount;\n    }\n\n    this.docBases = Arrays.copyOf(docBases, blockCount);\n    this.startPointers = Arrays.copyOf(startPointers, blockCount);\n    this.avgChunkDocs = Arrays.copyOf(avgChunkDocs, blockCount);\n    this.avgChunkSizes = Arrays.copyOf(avgChunkSizes, blockCount);\n    this.docBasesDeltas = Arrays.copyOf(docBasesDeltas, blockCount);\n    this.startPointersDeltas = Arrays.copyOf(startPointersDeltas, blockCount);\n  }\n\n","sourceOld":"  CompressingStoredFieldsIndexReader(IndexInput fieldsIndexIn, SegmentInfo si) throws IOException {\n    this.fieldsIndexIn = fieldsIndexIn;\n    maxDoc = si.getDocCount();\n    int[] docBases = new int[16];\n    long[] startPointers = new long[16];\n    int[] avgChunkDocs = new int[16];\n    long[] avgChunkSizes = new long[16];\n    PackedInts.Reader[] docBasesDeltas = new PackedInts.Reader[16];\n    PackedInts.Reader[] startPointersDeltas = new PackedInts.Reader[16];\n\n    final int packedIntsVersion = fieldsIndexIn.readVInt();\n\n    int blockCount = 0;\n\n    for (;;) {\n      final int numChunks = fieldsIndexIn.readVInt();\n      if (numChunks == 0) {\n        break;\n      }\n      if (blockCount == docBases.length) {\n        final int newSize = ArrayUtil.oversize(blockCount + 1, 8);\n        docBases = Arrays.copyOf(docBases, newSize);\n        startPointers = Arrays.copyOf(startPointers, newSize);\n        avgChunkDocs = Arrays.copyOf(avgChunkDocs, newSize);\n        avgChunkSizes = Arrays.copyOf(avgChunkSizes, newSize);\n        docBasesDeltas = Arrays.copyOf(docBasesDeltas, newSize);\n        startPointersDeltas = Arrays.copyOf(startPointersDeltas, newSize);\n      }\n\n      // doc bases\n      docBases[blockCount] = fieldsIndexIn.readVInt();\n      avgChunkDocs[blockCount] = fieldsIndexIn.readVInt();\n      final int bitsPerDocBase = fieldsIndexIn.readVInt();\n      if (bitsPerDocBase > 32) {\n        throw new CorruptIndexException(\"Corrupted\");\n      }\n      docBasesDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerDocBase);\n\n      // start pointers\n      startPointers[blockCount] = fieldsIndexIn.readVLong();\n      avgChunkSizes[blockCount] = fieldsIndexIn.readVLong();\n      final int bitsPerStartPointer = fieldsIndexIn.readVInt();\n      if (bitsPerStartPointer > 64) {\n        throw new CorruptIndexException(\"Corrupted\");\n      }\n      startPointersDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerStartPointer);\n\n      ++blockCount;\n    }\n\n    this.docBases = Arrays.copyOf(docBases, blockCount);\n    this.startPointers = Arrays.copyOf(startPointers, blockCount);\n    this.avgChunkDocs = Arrays.copyOf(avgChunkDocs, blockCount);\n    this.avgChunkSizes = Arrays.copyOf(avgChunkSizes, blockCount);\n    this.docBasesDeltas = Arrays.copyOf(docBasesDeltas, blockCount);\n    this.startPointersDeltas = Arrays.copyOf(startPointersDeltas, blockCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader#CompressingStoredFieldsIndexReader(IndexInput,SegmentInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader#CompressingStoredFieldsIndexReader(IndexInput,SegmentInfo).mjava","sourceNew":"  CompressingStoredFieldsIndexReader(IndexInput fieldsIndexIn, SegmentInfo si) throws IOException {\n    this.fieldsIndexIn = fieldsIndexIn;\n    maxDoc = si.getDocCount();\n    int[] docBases = new int[16];\n    long[] startPointers = new long[16];\n    int[] avgChunkDocs = new int[16];\n    long[] avgChunkSizes = new long[16];\n    PackedInts.Reader[] docBasesDeltas = new PackedInts.Reader[16];\n    PackedInts.Reader[] startPointersDeltas = new PackedInts.Reader[16];\n\n    final int packedIntsVersion = fieldsIndexIn.readVInt();\n\n    int blockCount = 0;\n\n    for (;;) {\n      final int numChunks = fieldsIndexIn.readVInt();\n      if (numChunks == 0) {\n        break;\n      }\n      if (blockCount == docBases.length) {\n        final int newSize = ArrayUtil.oversize(blockCount + 1, 8);\n        docBases = Arrays.copyOf(docBases, newSize);\n        startPointers = Arrays.copyOf(startPointers, newSize);\n        avgChunkDocs = Arrays.copyOf(avgChunkDocs, newSize);\n        avgChunkSizes = Arrays.copyOf(avgChunkSizes, newSize);\n        docBasesDeltas = Arrays.copyOf(docBasesDeltas, newSize);\n        startPointersDeltas = Arrays.copyOf(startPointersDeltas, newSize);\n      }\n\n      // doc bases\n      docBases[blockCount] = fieldsIndexIn.readVInt();\n      avgChunkDocs[blockCount] = fieldsIndexIn.readVInt();\n      final int bitsPerDocBase = fieldsIndexIn.readVInt();\n      if (bitsPerDocBase > 32) {\n        throw new CorruptIndexException(\"Corrupted\");\n      }\n      docBasesDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerDocBase);\n\n      // start pointers\n      startPointers[blockCount] = fieldsIndexIn.readVLong();\n      avgChunkSizes[blockCount] = fieldsIndexIn.readVLong();\n      final int bitsPerStartPointer = fieldsIndexIn.readVInt();\n      if (bitsPerStartPointer > 64) {\n        throw new CorruptIndexException(\"Corrupted\");\n      }\n      startPointersDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerStartPointer);\n\n      ++blockCount;\n    }\n\n    this.docBases = Arrays.copyOf(docBases, blockCount);\n    this.startPointers = Arrays.copyOf(startPointers, blockCount);\n    this.avgChunkDocs = Arrays.copyOf(avgChunkDocs, blockCount);\n    this.avgChunkSizes = Arrays.copyOf(avgChunkSizes, blockCount);\n    this.docBasesDeltas = Arrays.copyOf(docBasesDeltas, blockCount);\n    this.startPointersDeltas = Arrays.copyOf(startPointersDeltas, blockCount);\n  }\n\n","sourceOld":"  CompressingStoredFieldsIndexReader(IndexInput fieldsIndexIn, SegmentInfo si) throws IOException {\n    this.fieldsIndexIn = fieldsIndexIn;\n    maxDoc = si.getDocCount();\n    int[] docBases = new int[16];\n    long[] startPointers = new long[16];\n    int[] avgChunkDocs = new int[16];\n    long[] avgChunkSizes = new long[16];\n    PackedInts.Reader[] docBasesDeltas = new PackedInts.Reader[16];\n    PackedInts.Reader[] startPointersDeltas = new PackedInts.Reader[16];\n\n    final int packedIntsVersion = fieldsIndexIn.readVInt();\n\n    int blockCount = 0;\n\n    for (;;) {\n      final int numChunks = fieldsIndexIn.readVInt();\n      if (numChunks == 0) {\n        break;\n      }\n      if (blockCount == docBases.length) {\n        final int newSize = ArrayUtil.oversize(blockCount + 1, 8);\n        docBases = Arrays.copyOf(docBases, newSize);\n        startPointers = Arrays.copyOf(startPointers, newSize);\n        avgChunkDocs = Arrays.copyOf(avgChunkDocs, newSize);\n        avgChunkSizes = Arrays.copyOf(avgChunkSizes, newSize);\n        docBasesDeltas = Arrays.copyOf(docBasesDeltas, newSize);\n        startPointersDeltas = Arrays.copyOf(startPointersDeltas, newSize);\n      }\n\n      // doc bases\n      docBases[blockCount] = fieldsIndexIn.readVInt();\n      avgChunkDocs[blockCount] = fieldsIndexIn.readVInt();\n      final int bitsPerDocBase = fieldsIndexIn.readVInt();\n      if (bitsPerDocBase > 32) {\n        throw new CorruptIndexException(\"Corrupted\");\n      }\n      docBasesDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerDocBase);\n\n      // start pointers\n      startPointers[blockCount] = fieldsIndexIn.readVLong();\n      avgChunkSizes[blockCount] = fieldsIndexIn.readVLong();\n      final int bitsPerStartPointer = fieldsIndexIn.readVInt();\n      if (bitsPerStartPointer > 64) {\n        throw new CorruptIndexException(\"Corrupted\");\n      }\n      startPointersDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerStartPointer);\n\n      ++blockCount;\n    }\n\n    this.docBases = Arrays.copyOf(docBases, blockCount);\n    this.startPointers = Arrays.copyOf(startPointers, blockCount);\n    this.avgChunkDocs = Arrays.copyOf(avgChunkDocs, blockCount);\n    this.avgChunkSizes = Arrays.copyOf(avgChunkSizes, blockCount);\n    this.docBasesDeltas = Arrays.copyOf(docBasesDeltas, blockCount);\n    this.startPointersDeltas = Arrays.copyOf(startPointersDeltas, blockCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69":["0a96cceee825e15cd8e042b683d404086e2a58d1"],"0a96cceee825e15cd8e042b683d404086e2a58d1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["0a96cceee825e15cd8e042b683d404086e2a58d1","5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69"]},"commit2Childs":{"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0a96cceee825e15cd8e042b683d404086e2a58d1":["5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a96cceee825e15cd8e042b683d404086e2a58d1"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}