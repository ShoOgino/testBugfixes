{"path":"solr/src/test/org/apache/solr/cloud/ZkControllerTest#testReadShards().mjava","commits":[{"id":"43adc163640856c8b07e4cf1b2046c9af56d3ae7","date":1286989273,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/cloud/ZkControllerTest#testReadShards().mjava","pathOld":"/dev/null","sourceNew":"  @Test\r\n  public void testReadShards() throws Exception {\r\n    String zkDir = dataDir.getAbsolutePath() + File.separator\r\n        + \"zookeeper/server1/data\";\r\n    ZkTestServer server = null;\r\n    SolrZkClient zkClient = null;\r\n    ZkController zkController = null;\r\n    try {\r\n      server = new ZkTestServer(zkDir);\r\n      server.run();\r\n\r\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\r\n\r\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\r\n      String shardsPath = \"/collections/collection1/shards/shardid1\";\r\n      zkClient.makePath(shardsPath);\r\n\r\n      addShardToZk(zkClient, shardsPath, SHARD1, URL1);\r\n      addShardToZk(zkClient, shardsPath, SHARD2, URL2);\r\n      addShardToZk(zkClient, shardsPath, SHARD3, URL3);\r\n\r\n      if (DEBUG) {\r\n        zkClient.printLayoutToStdOut();\r\n      }\r\n\r\n      zkController = new ZkController(server.getZkAddress(),\r\n          TIMEOUT, 1000, \"localhost\", \"8983\", \"solr\");\r\n \r\n      zkController.getZkStateReader().updateCloudState(true);\r\n      CloudState cloudInfo = zkController.getCloudState();\r\n      Map<String,Slice> slices = cloudInfo.getSlices(\"collection1\");\r\n      assertNotNull(slices);\r\n\r\n      for (Slice slice : slices.values()) {\r\n        Map<String,ZkNodeProps> shards = slice.getShards();\r\n        if (DEBUG) {\r\n          for (String shardName : shards.keySet()) {\r\n            ZkNodeProps props = shards.get(shardName);\r\n            System.out.println(\"shard:\" + shardName);\r\n            System.out.println(\"props:\" + props.toString());\r\n          }\r\n        }\r\n        assertNotNull(shards.get(SHARD1));\r\n        assertNotNull(shards.get(SHARD2));\r\n        assertNotNull(shards.get(SHARD3));\r\n\r\n        ZkNodeProps props = shards.get(SHARD1);\r\n        assertEquals(URL1, props.get(ZkStateReader.URL_PROP));\r\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\r\n\r\n        props = shards.get(SHARD2);\r\n        assertEquals(URL2, props.get(ZkStateReader.URL_PROP));\r\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\r\n\r\n        props = shards.get(SHARD3);\r\n        assertEquals(URL3, props.get(ZkStateReader.URL_PROP));\r\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\r\n\r\n      }\r\n\r\n    } finally {\r\n      if (zkClient != null) {\r\n        zkClient.close();\r\n      }\r\n      if (zkController != null) {\r\n        zkController.close();\r\n      }\r\n      if (server != null) {\r\n        server.shutdown();\r\n      }\r\n    }\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/cloud/ZkControllerTest#testReadShards().mjava","pathOld":"/dev/null","sourceNew":"  @Test\r\n  public void testReadShards() throws Exception {\r\n    String zkDir = dataDir.getAbsolutePath() + File.separator\r\n        + \"zookeeper/server1/data\";\r\n    ZkTestServer server = null;\r\n    SolrZkClient zkClient = null;\r\n    ZkController zkController = null;\r\n    try {\r\n      server = new ZkTestServer(zkDir);\r\n      server.run();\r\n\r\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\r\n\r\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\r\n      String shardsPath = \"/collections/collection1/shards/shardid1\";\r\n      zkClient.makePath(shardsPath);\r\n\r\n      addShardToZk(zkClient, shardsPath, SHARD1, URL1);\r\n      addShardToZk(zkClient, shardsPath, SHARD2, URL2);\r\n      addShardToZk(zkClient, shardsPath, SHARD3, URL3);\r\n\r\n      if (DEBUG) {\r\n        zkClient.printLayoutToStdOut();\r\n      }\r\n\r\n      zkController = new ZkController(server.getZkAddress(),\r\n          TIMEOUT, 1000, \"localhost\", \"8983\", \"solr\");\r\n \r\n      zkController.getZkStateReader().updateCloudState(true);\r\n      CloudState cloudInfo = zkController.getCloudState();\r\n      Map<String,Slice> slices = cloudInfo.getSlices(\"collection1\");\r\n      assertNotNull(slices);\r\n\r\n      for (Slice slice : slices.values()) {\r\n        Map<String,ZkNodeProps> shards = slice.getShards();\r\n        if (DEBUG) {\r\n          for (String shardName : shards.keySet()) {\r\n            ZkNodeProps props = shards.get(shardName);\r\n            System.out.println(\"shard:\" + shardName);\r\n            System.out.println(\"props:\" + props.toString());\r\n          }\r\n        }\r\n        assertNotNull(shards.get(SHARD1));\r\n        assertNotNull(shards.get(SHARD2));\r\n        assertNotNull(shards.get(SHARD3));\r\n\r\n        ZkNodeProps props = shards.get(SHARD1);\r\n        assertEquals(URL1, props.get(ZkStateReader.URL_PROP));\r\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\r\n\r\n        props = shards.get(SHARD2);\r\n        assertEquals(URL2, props.get(ZkStateReader.URL_PROP));\r\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\r\n\r\n        props = shards.get(SHARD3);\r\n        assertEquals(URL3, props.get(ZkStateReader.URL_PROP));\r\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\r\n\r\n      }\r\n\r\n    } finally {\r\n      if (zkClient != null) {\r\n        zkClient.close();\r\n      }\r\n      if (zkController != null) {\r\n        zkController.close();\r\n      }\r\n      if (server != null) {\r\n        server.shutdown();\r\n      }\r\n    }\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/cloud/ZkControllerTest#testReadShards().mjava","pathOld":"/dev/null","sourceNew":"  @Test\r\n  public void testReadShards() throws Exception {\r\n    String zkDir = dataDir.getAbsolutePath() + File.separator\r\n        + \"zookeeper/server1/data\";\r\n    ZkTestServer server = null;\r\n    SolrZkClient zkClient = null;\r\n    ZkController zkController = null;\r\n    try {\r\n      server = new ZkTestServer(zkDir);\r\n      server.run();\r\n\r\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\r\n\r\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\r\n      String shardsPath = \"/collections/collection1/shards/shardid1\";\r\n      zkClient.makePath(shardsPath);\r\n\r\n      addShardToZk(zkClient, shardsPath, SHARD1, URL1);\r\n      addShardToZk(zkClient, shardsPath, SHARD2, URL2);\r\n      addShardToZk(zkClient, shardsPath, SHARD3, URL3);\r\n\r\n      if (DEBUG) {\r\n        zkClient.printLayoutToStdOut();\r\n      }\r\n\r\n      zkController = new ZkController(server.getZkAddress(),\r\n          TIMEOUT, 1000, \"localhost\", \"8983\", \"solr\");\r\n \r\n      zkController.getZkStateReader().updateCloudState(true);\r\n      CloudState cloudInfo = zkController.getCloudState();\r\n      Map<String,Slice> slices = cloudInfo.getSlices(\"collection1\");\r\n      assertNotNull(slices);\r\n\r\n      for (Slice slice : slices.values()) {\r\n        Map<String,ZkNodeProps> shards = slice.getShards();\r\n        if (DEBUG) {\r\n          for (String shardName : shards.keySet()) {\r\n            ZkNodeProps props = shards.get(shardName);\r\n            System.out.println(\"shard:\" + shardName);\r\n            System.out.println(\"props:\" + props.toString());\r\n          }\r\n        }\r\n        assertNotNull(shards.get(SHARD1));\r\n        assertNotNull(shards.get(SHARD2));\r\n        assertNotNull(shards.get(SHARD3));\r\n\r\n        ZkNodeProps props = shards.get(SHARD1);\r\n        assertEquals(URL1, props.get(ZkStateReader.URL_PROP));\r\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\r\n\r\n        props = shards.get(SHARD2);\r\n        assertEquals(URL2, props.get(ZkStateReader.URL_PROP));\r\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\r\n\r\n        props = shards.get(SHARD3);\r\n        assertEquals(URL3, props.get(ZkStateReader.URL_PROP));\r\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\r\n\r\n      }\r\n\r\n    } finally {\r\n      if (zkClient != null) {\r\n        zkClient.close();\r\n      }\r\n      if (zkController != null) {\r\n        zkController.close();\r\n      }\r\n      if (server != null) {\r\n        server.shutdown();\r\n      }\r\n    }\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5dfdcab67889853a837797b4c8bb9546025bc95a","date":1294848614,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/cloud/ZkControllerTest#testReadShards().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkControllerTest#testReadShards().mjava","sourceNew":"  @Test\r\n  public void testReadShards() throws Exception {\r\n    String zkDir = dataDir.getAbsolutePath() + File.separator\r\n        + \"zookeeper/server1/data\";\r\n    ZkTestServer server = null;\r\n    SolrZkClient zkClient = null;\r\n    ZkController zkController = null;\r\n    try {\r\n      server = new ZkTestServer(zkDir);\r\n      server.run();\r\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\r\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\r\n\r\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\r\n      String shardsPath = \"/collections/collection1/shards/shardid1\";\r\n      zkClient.makePath(shardsPath);\r\n\r\n      addShardToZk(zkClient, shardsPath, SHARD1, URL1);\r\n      addShardToZk(zkClient, shardsPath, SHARD2, URL2);\r\n      addShardToZk(zkClient, shardsPath, SHARD3, URL3);\r\n\r\n      if (DEBUG) {\r\n        zkClient.printLayoutToStdOut();\r\n      }\r\n\r\n      zkController = new ZkController(server.getZkAddress(),\r\n          TIMEOUT, 1000, \"localhost\", \"8983\", \"solr\");\r\n \r\n      zkController.getZkStateReader().updateCloudState(true);\r\n      CloudState cloudInfo = zkController.getCloudState();\r\n      Map<String,Slice> slices = cloudInfo.getSlices(\"collection1\");\r\n      assertNotNull(slices);\r\n\r\n      for (Slice slice : slices.values()) {\r\n        Map<String,ZkNodeProps> shards = slice.getShards();\r\n        if (DEBUG) {\r\n          for (String shardName : shards.keySet()) {\r\n            ZkNodeProps props = shards.get(shardName);\r\n            System.out.println(\"shard:\" + shardName);\r\n            System.out.println(\"props:\" + props.toString());\r\n          }\r\n        }\r\n        assertNotNull(shards.get(SHARD1));\r\n        assertNotNull(shards.get(SHARD2));\r\n        assertNotNull(shards.get(SHARD3));\r\n\r\n        ZkNodeProps props = shards.get(SHARD1);\r\n        assertEquals(URL1, props.get(ZkStateReader.URL_PROP));\r\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\r\n\r\n        props = shards.get(SHARD2);\r\n        assertEquals(URL2, props.get(ZkStateReader.URL_PROP));\r\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\r\n\r\n        props = shards.get(SHARD3);\r\n        assertEquals(URL3, props.get(ZkStateReader.URL_PROP));\r\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\r\n\r\n      }\r\n\r\n    } finally {\r\n      if (zkClient != null) {\r\n        zkClient.close();\r\n      }\r\n      if (zkController != null) {\r\n        zkController.close();\r\n      }\r\n      if (server != null) {\r\n        server.shutdown();\r\n      }\r\n    }\r\n  }\r\n\n","sourceOld":"  @Test\r\n  public void testReadShards() throws Exception {\r\n    String zkDir = dataDir.getAbsolutePath() + File.separator\r\n        + \"zookeeper/server1/data\";\r\n    ZkTestServer server = null;\r\n    SolrZkClient zkClient = null;\r\n    ZkController zkController = null;\r\n    try {\r\n      server = new ZkTestServer(zkDir);\r\n      server.run();\r\n\r\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\r\n\r\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\r\n      String shardsPath = \"/collections/collection1/shards/shardid1\";\r\n      zkClient.makePath(shardsPath);\r\n\r\n      addShardToZk(zkClient, shardsPath, SHARD1, URL1);\r\n      addShardToZk(zkClient, shardsPath, SHARD2, URL2);\r\n      addShardToZk(zkClient, shardsPath, SHARD3, URL3);\r\n\r\n      if (DEBUG) {\r\n        zkClient.printLayoutToStdOut();\r\n      }\r\n\r\n      zkController = new ZkController(server.getZkAddress(),\r\n          TIMEOUT, 1000, \"localhost\", \"8983\", \"solr\");\r\n \r\n      zkController.getZkStateReader().updateCloudState(true);\r\n      CloudState cloudInfo = zkController.getCloudState();\r\n      Map<String,Slice> slices = cloudInfo.getSlices(\"collection1\");\r\n      assertNotNull(slices);\r\n\r\n      for (Slice slice : slices.values()) {\r\n        Map<String,ZkNodeProps> shards = slice.getShards();\r\n        if (DEBUG) {\r\n          for (String shardName : shards.keySet()) {\r\n            ZkNodeProps props = shards.get(shardName);\r\n            System.out.println(\"shard:\" + shardName);\r\n            System.out.println(\"props:\" + props.toString());\r\n          }\r\n        }\r\n        assertNotNull(shards.get(SHARD1));\r\n        assertNotNull(shards.get(SHARD2));\r\n        assertNotNull(shards.get(SHARD3));\r\n\r\n        ZkNodeProps props = shards.get(SHARD1);\r\n        assertEquals(URL1, props.get(ZkStateReader.URL_PROP));\r\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\r\n\r\n        props = shards.get(SHARD2);\r\n        assertEquals(URL2, props.get(ZkStateReader.URL_PROP));\r\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\r\n\r\n        props = shards.get(SHARD3);\r\n        assertEquals(URL3, props.get(ZkStateReader.URL_PROP));\r\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\r\n\r\n      }\r\n\r\n    } finally {\r\n      if (zkClient != null) {\r\n        zkClient.close();\r\n      }\r\n      if (zkController != null) {\r\n        zkController.close();\r\n      }\r\n      if (server != null) {\r\n        server.shutdown();\r\n      }\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/cloud/ZkControllerTest#testReadShards().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkControllerTest#testReadShards().mjava","sourceNew":"  @Test\r\n  public void testReadShards() throws Exception {\r\n    String zkDir = dataDir.getAbsolutePath() + File.separator\r\n        + \"zookeeper/server1/data\";\r\n    ZkTestServer server = null;\r\n    SolrZkClient zkClient = null;\r\n    ZkController zkController = null;\r\n    try {\r\n      server = new ZkTestServer(zkDir);\r\n      server.run();\r\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\r\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\r\n\r\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\r\n      String shardsPath = \"/collections/collection1/shards/shardid1\";\r\n      zkClient.makePath(shardsPath);\r\n\r\n      addShardToZk(zkClient, shardsPath, SHARD1, URL1);\r\n      addShardToZk(zkClient, shardsPath, SHARD2, URL2);\r\n      addShardToZk(zkClient, shardsPath, SHARD3, URL3);\r\n\r\n      if (DEBUG) {\r\n        zkClient.printLayoutToStdOut();\r\n      }\r\n\r\n      zkController = new ZkController(server.getZkAddress(),\r\n          TIMEOUT, 1000, \"localhost\", \"8983\", \"solr\");\r\n \r\n      zkController.getZkStateReader().updateCloudState(true);\r\n      CloudState cloudInfo = zkController.getCloudState();\r\n      Map<String,Slice> slices = cloudInfo.getSlices(\"collection1\");\r\n      assertNotNull(slices);\r\n\r\n      for (Slice slice : slices.values()) {\r\n        Map<String,ZkNodeProps> shards = slice.getShards();\r\n        if (DEBUG) {\r\n          for (String shardName : shards.keySet()) {\r\n            ZkNodeProps props = shards.get(shardName);\r\n            System.out.println(\"shard:\" + shardName);\r\n            System.out.println(\"props:\" + props.toString());\r\n          }\r\n        }\r\n        assertNotNull(shards.get(SHARD1));\r\n        assertNotNull(shards.get(SHARD2));\r\n        assertNotNull(shards.get(SHARD3));\r\n\r\n        ZkNodeProps props = shards.get(SHARD1);\r\n        assertEquals(URL1, props.get(ZkStateReader.URL_PROP));\r\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\r\n\r\n        props = shards.get(SHARD2);\r\n        assertEquals(URL2, props.get(ZkStateReader.URL_PROP));\r\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\r\n\r\n        props = shards.get(SHARD3);\r\n        assertEquals(URL3, props.get(ZkStateReader.URL_PROP));\r\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\r\n\r\n      }\r\n\r\n    } finally {\r\n      if (zkClient != null) {\r\n        zkClient.close();\r\n      }\r\n      if (zkController != null) {\r\n        zkController.close();\r\n      }\r\n      if (server != null) {\r\n        server.shutdown();\r\n      }\r\n    }\r\n  }\r\n\n","sourceOld":"  @Test\r\n  public void testReadShards() throws Exception {\r\n    String zkDir = dataDir.getAbsolutePath() + File.separator\r\n        + \"zookeeper/server1/data\";\r\n    ZkTestServer server = null;\r\n    SolrZkClient zkClient = null;\r\n    ZkController zkController = null;\r\n    try {\r\n      server = new ZkTestServer(zkDir);\r\n      server.run();\r\n\r\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\r\n\r\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\r\n      String shardsPath = \"/collections/collection1/shards/shardid1\";\r\n      zkClient.makePath(shardsPath);\r\n\r\n      addShardToZk(zkClient, shardsPath, SHARD1, URL1);\r\n      addShardToZk(zkClient, shardsPath, SHARD2, URL2);\r\n      addShardToZk(zkClient, shardsPath, SHARD3, URL3);\r\n\r\n      if (DEBUG) {\r\n        zkClient.printLayoutToStdOut();\r\n      }\r\n\r\n      zkController = new ZkController(server.getZkAddress(),\r\n          TIMEOUT, 1000, \"localhost\", \"8983\", \"solr\");\r\n \r\n      zkController.getZkStateReader().updateCloudState(true);\r\n      CloudState cloudInfo = zkController.getCloudState();\r\n      Map<String,Slice> slices = cloudInfo.getSlices(\"collection1\");\r\n      assertNotNull(slices);\r\n\r\n      for (Slice slice : slices.values()) {\r\n        Map<String,ZkNodeProps> shards = slice.getShards();\r\n        if (DEBUG) {\r\n          for (String shardName : shards.keySet()) {\r\n            ZkNodeProps props = shards.get(shardName);\r\n            System.out.println(\"shard:\" + shardName);\r\n            System.out.println(\"props:\" + props.toString());\r\n          }\r\n        }\r\n        assertNotNull(shards.get(SHARD1));\r\n        assertNotNull(shards.get(SHARD2));\r\n        assertNotNull(shards.get(SHARD3));\r\n\r\n        ZkNodeProps props = shards.get(SHARD1);\r\n        assertEquals(URL1, props.get(ZkStateReader.URL_PROP));\r\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\r\n\r\n        props = shards.get(SHARD2);\r\n        assertEquals(URL2, props.get(ZkStateReader.URL_PROP));\r\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\r\n\r\n        props = shards.get(SHARD3);\r\n        assertEquals(URL3, props.get(ZkStateReader.URL_PROP));\r\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\r\n\r\n      }\r\n\r\n    } finally {\r\n      if (zkClient != null) {\r\n        zkClient.close();\r\n      }\r\n      if (zkController != null) {\r\n        zkController.close();\r\n      }\r\n      if (server != null) {\r\n        server.shutdown();\r\n      }\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bed62fe6383040eaff2ec720cdc55bb1462c61da","date":1296408595,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/cloud/ZkControllerTest#testReadShards().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkControllerTest#testReadShards().mjava","sourceNew":"  @Test\n  public void testReadShards() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    ZkController zkController = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards/shardid1\";\n      zkClient.makePath(shardsPath);\n\n      addShardToZk(zkClient, shardsPath, SHARD1, URL1);\n      addShardToZk(zkClient, shardsPath, SHARD2, URL2);\n      addShardToZk(zkClient, shardsPath, SHARD3, URL3);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      zkController = new ZkController(server.getZkAddress(),\n          TIMEOUT, 1000, \"localhost\", \"8983\", \"solr\");\n \n      zkController.getZkStateReader().updateCloudState(true);\n      CloudState cloudInfo = zkController.getCloudState();\n      Map<String,Slice> slices = cloudInfo.getSlices(\"collection1\");\n      assertNotNull(slices);\n\n      for (Slice slice : slices.values()) {\n        Map<String,ZkNodeProps> shards = slice.getShards();\n        if (DEBUG) {\n          for (String shardName : shards.keySet()) {\n            ZkNodeProps props = shards.get(shardName);\n            System.out.println(\"shard:\" + shardName);\n            System.out.println(\"props:\" + props.toString());\n          }\n        }\n        assertNotNull(shards.get(SHARD1));\n        assertNotNull(shards.get(SHARD2));\n        assertNotNull(shards.get(SHARD3));\n\n        ZkNodeProps props = shards.get(SHARD1);\n        assertEquals(URL1, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n        props = shards.get(SHARD2);\n        assertEquals(URL2, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n        props = shards.get(SHARD3);\n        assertEquals(URL3, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n      }\n\n    } finally {\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\r\n  public void testReadShards() throws Exception {\r\n    String zkDir = dataDir.getAbsolutePath() + File.separator\r\n        + \"zookeeper/server1/data\";\r\n    ZkTestServer server = null;\r\n    SolrZkClient zkClient = null;\r\n    ZkController zkController = null;\r\n    try {\r\n      server = new ZkTestServer(zkDir);\r\n      server.run();\r\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\r\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\r\n\r\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\r\n      String shardsPath = \"/collections/collection1/shards/shardid1\";\r\n      zkClient.makePath(shardsPath);\r\n\r\n      addShardToZk(zkClient, shardsPath, SHARD1, URL1);\r\n      addShardToZk(zkClient, shardsPath, SHARD2, URL2);\r\n      addShardToZk(zkClient, shardsPath, SHARD3, URL3);\r\n\r\n      if (DEBUG) {\r\n        zkClient.printLayoutToStdOut();\r\n      }\r\n\r\n      zkController = new ZkController(server.getZkAddress(),\r\n          TIMEOUT, 1000, \"localhost\", \"8983\", \"solr\");\r\n \r\n      zkController.getZkStateReader().updateCloudState(true);\r\n      CloudState cloudInfo = zkController.getCloudState();\r\n      Map<String,Slice> slices = cloudInfo.getSlices(\"collection1\");\r\n      assertNotNull(slices);\r\n\r\n      for (Slice slice : slices.values()) {\r\n        Map<String,ZkNodeProps> shards = slice.getShards();\r\n        if (DEBUG) {\r\n          for (String shardName : shards.keySet()) {\r\n            ZkNodeProps props = shards.get(shardName);\r\n            System.out.println(\"shard:\" + shardName);\r\n            System.out.println(\"props:\" + props.toString());\r\n          }\r\n        }\r\n        assertNotNull(shards.get(SHARD1));\r\n        assertNotNull(shards.get(SHARD2));\r\n        assertNotNull(shards.get(SHARD3));\r\n\r\n        ZkNodeProps props = shards.get(SHARD1);\r\n        assertEquals(URL1, props.get(ZkStateReader.URL_PROP));\r\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\r\n\r\n        props = shards.get(SHARD2);\r\n        assertEquals(URL2, props.get(ZkStateReader.URL_PROP));\r\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\r\n\r\n        props = shards.get(SHARD3);\r\n        assertEquals(URL3, props.get(ZkStateReader.URL_PROP));\r\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\r\n\r\n      }\r\n\r\n    } finally {\r\n      if (zkClient != null) {\r\n        zkClient.close();\r\n      }\r\n      if (zkController != null) {\r\n        zkController.close();\r\n      }\r\n      if (server != null) {\r\n        server.shutdown();\r\n      }\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/cloud/ZkControllerTest#testReadShards().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkControllerTest#testReadShards().mjava","sourceNew":"  @Test\n  public void testReadShards() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    ZkController zkController = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards/shardid1\";\n      zkClient.makePath(shardsPath);\n\n      addShardToZk(zkClient, shardsPath, SHARD1, URL1);\n      addShardToZk(zkClient, shardsPath, SHARD2, URL2);\n      addShardToZk(zkClient, shardsPath, SHARD3, URL3);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      zkController = new ZkController(server.getZkAddress(),\n          TIMEOUT, 1000, \"localhost\", \"8983\", \"solr\");\n \n      zkController.getZkStateReader().updateCloudState(true);\n      CloudState cloudInfo = zkController.getCloudState();\n      Map<String,Slice> slices = cloudInfo.getSlices(\"collection1\");\n      assertNotNull(slices);\n\n      for (Slice slice : slices.values()) {\n        Map<String,ZkNodeProps> shards = slice.getShards();\n        if (DEBUG) {\n          for (String shardName : shards.keySet()) {\n            ZkNodeProps props = shards.get(shardName);\n            System.out.println(\"shard:\" + shardName);\n            System.out.println(\"props:\" + props.toString());\n          }\n        }\n        assertNotNull(shards.get(SHARD1));\n        assertNotNull(shards.get(SHARD2));\n        assertNotNull(shards.get(SHARD3));\n\n        ZkNodeProps props = shards.get(SHARD1);\n        assertEquals(URL1, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n        props = shards.get(SHARD2);\n        assertEquals(URL2, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n        props = shards.get(SHARD3);\n        assertEquals(URL3, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n      }\n\n    } finally {\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\r\n  public void testReadShards() throws Exception {\r\n    String zkDir = dataDir.getAbsolutePath() + File.separator\r\n        + \"zookeeper/server1/data\";\r\n    ZkTestServer server = null;\r\n    SolrZkClient zkClient = null;\r\n    ZkController zkController = null;\r\n    try {\r\n      server = new ZkTestServer(zkDir);\r\n      server.run();\r\n\r\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\r\n\r\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\r\n      String shardsPath = \"/collections/collection1/shards/shardid1\";\r\n      zkClient.makePath(shardsPath);\r\n\r\n      addShardToZk(zkClient, shardsPath, SHARD1, URL1);\r\n      addShardToZk(zkClient, shardsPath, SHARD2, URL2);\r\n      addShardToZk(zkClient, shardsPath, SHARD3, URL3);\r\n\r\n      if (DEBUG) {\r\n        zkClient.printLayoutToStdOut();\r\n      }\r\n\r\n      zkController = new ZkController(server.getZkAddress(),\r\n          TIMEOUT, 1000, \"localhost\", \"8983\", \"solr\");\r\n \r\n      zkController.getZkStateReader().updateCloudState(true);\r\n      CloudState cloudInfo = zkController.getCloudState();\r\n      Map<String,Slice> slices = cloudInfo.getSlices(\"collection1\");\r\n      assertNotNull(slices);\r\n\r\n      for (Slice slice : slices.values()) {\r\n        Map<String,ZkNodeProps> shards = slice.getShards();\r\n        if (DEBUG) {\r\n          for (String shardName : shards.keySet()) {\r\n            ZkNodeProps props = shards.get(shardName);\r\n            System.out.println(\"shard:\" + shardName);\r\n            System.out.println(\"props:\" + props.toString());\r\n          }\r\n        }\r\n        assertNotNull(shards.get(SHARD1));\r\n        assertNotNull(shards.get(SHARD2));\r\n        assertNotNull(shards.get(SHARD3));\r\n\r\n        ZkNodeProps props = shards.get(SHARD1);\r\n        assertEquals(URL1, props.get(ZkStateReader.URL_PROP));\r\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\r\n\r\n        props = shards.get(SHARD2);\r\n        assertEquals(URL2, props.get(ZkStateReader.URL_PROP));\r\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\r\n\r\n        props = shards.get(SHARD3);\r\n        assertEquals(URL3, props.get(ZkStateReader.URL_PROP));\r\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\r\n\r\n      }\r\n\r\n    } finally {\r\n      if (zkClient != null) {\r\n        zkClient.close();\r\n      }\r\n      if (zkController != null) {\r\n        zkController.close();\r\n      }\r\n      if (server != null) {\r\n        server.shutdown();\r\n      }\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/cloud/ZkControllerTest#testReadShards().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkControllerTest#testReadShards().mjava","sourceNew":"  @Test\n  public void testReadShards() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    ZkController zkController = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards/shardid1\";\n      zkClient.makePath(shardsPath);\n\n      addShardToZk(zkClient, shardsPath, SHARD1, URL1);\n      addShardToZk(zkClient, shardsPath, SHARD2, URL2);\n      addShardToZk(zkClient, shardsPath, SHARD3, URL3);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      zkController = new ZkController(server.getZkAddress(),\n          TIMEOUT, 1000, \"localhost\", \"8983\", \"solr\");\n \n      zkController.getZkStateReader().updateCloudState(true);\n      CloudState cloudInfo = zkController.getCloudState();\n      Map<String,Slice> slices = cloudInfo.getSlices(\"collection1\");\n      assertNotNull(slices);\n\n      for (Slice slice : slices.values()) {\n        Map<String,ZkNodeProps> shards = slice.getShards();\n        if (DEBUG) {\n          for (String shardName : shards.keySet()) {\n            ZkNodeProps props = shards.get(shardName);\n            System.out.println(\"shard:\" + shardName);\n            System.out.println(\"props:\" + props.toString());\n          }\n        }\n        assertNotNull(shards.get(SHARD1));\n        assertNotNull(shards.get(SHARD2));\n        assertNotNull(shards.get(SHARD3));\n\n        ZkNodeProps props = shards.get(SHARD1);\n        assertEquals(URL1, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n        props = shards.get(SHARD2);\n        assertEquals(URL2, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n        props = shards.get(SHARD3);\n        assertEquals(URL3, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n      }\n\n    } finally {\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\r\n  public void testReadShards() throws Exception {\r\n    String zkDir = dataDir.getAbsolutePath() + File.separator\r\n        + \"zookeeper/server1/data\";\r\n    ZkTestServer server = null;\r\n    SolrZkClient zkClient = null;\r\n    ZkController zkController = null;\r\n    try {\r\n      server = new ZkTestServer(zkDir);\r\n      server.run();\r\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\r\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\r\n\r\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\r\n      String shardsPath = \"/collections/collection1/shards/shardid1\";\r\n      zkClient.makePath(shardsPath);\r\n\r\n      addShardToZk(zkClient, shardsPath, SHARD1, URL1);\r\n      addShardToZk(zkClient, shardsPath, SHARD2, URL2);\r\n      addShardToZk(zkClient, shardsPath, SHARD3, URL3);\r\n\r\n      if (DEBUG) {\r\n        zkClient.printLayoutToStdOut();\r\n      }\r\n\r\n      zkController = new ZkController(server.getZkAddress(),\r\n          TIMEOUT, 1000, \"localhost\", \"8983\", \"solr\");\r\n \r\n      zkController.getZkStateReader().updateCloudState(true);\r\n      CloudState cloudInfo = zkController.getCloudState();\r\n      Map<String,Slice> slices = cloudInfo.getSlices(\"collection1\");\r\n      assertNotNull(slices);\r\n\r\n      for (Slice slice : slices.values()) {\r\n        Map<String,ZkNodeProps> shards = slice.getShards();\r\n        if (DEBUG) {\r\n          for (String shardName : shards.keySet()) {\r\n            ZkNodeProps props = shards.get(shardName);\r\n            System.out.println(\"shard:\" + shardName);\r\n            System.out.println(\"props:\" + props.toString());\r\n          }\r\n        }\r\n        assertNotNull(shards.get(SHARD1));\r\n        assertNotNull(shards.get(SHARD2));\r\n        assertNotNull(shards.get(SHARD3));\r\n\r\n        ZkNodeProps props = shards.get(SHARD1);\r\n        assertEquals(URL1, props.get(ZkStateReader.URL_PROP));\r\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\r\n\r\n        props = shards.get(SHARD2);\r\n        assertEquals(URL2, props.get(ZkStateReader.URL_PROP));\r\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\r\n\r\n        props = shards.get(SHARD3);\r\n        assertEquals(URL3, props.get(ZkStateReader.URL_PROP));\r\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\r\n\r\n      }\r\n\r\n    } finally {\r\n      if (zkClient != null) {\r\n        zkClient.close();\r\n      }\r\n      if (zkController != null) {\r\n        zkController.close();\r\n      }\r\n      if (server != null) {\r\n        server.shutdown();\r\n      }\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadShards().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkControllerTest#testReadShards().mjava","sourceNew":"  @Test\n  public void testReadShards() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    ZkController zkController = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards/shardid1\";\n      zkClient.makePath(shardsPath);\n\n      addShardToZk(zkClient, shardsPath, SHARD1, URL1);\n      addShardToZk(zkClient, shardsPath, SHARD2, URL2);\n      addShardToZk(zkClient, shardsPath, SHARD3, URL3);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      zkController = new ZkController(server.getZkAddress(),\n          TIMEOUT, 1000, \"localhost\", \"8983\", \"solr\");\n \n      zkController.getZkStateReader().updateCloudState(true);\n      CloudState cloudInfo = zkController.getCloudState();\n      Map<String,Slice> slices = cloudInfo.getSlices(\"collection1\");\n      assertNotNull(slices);\n\n      for (Slice slice : slices.values()) {\n        Map<String,ZkNodeProps> shards = slice.getShards();\n        if (DEBUG) {\n          for (String shardName : shards.keySet()) {\n            ZkNodeProps props = shards.get(shardName);\n            System.out.println(\"shard:\" + shardName);\n            System.out.println(\"props:\" + props.toString());\n          }\n        }\n        assertNotNull(shards.get(SHARD1));\n        assertNotNull(shards.get(SHARD2));\n        assertNotNull(shards.get(SHARD3));\n\n        ZkNodeProps props = shards.get(SHARD1);\n        assertEquals(URL1, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n        props = shards.get(SHARD2);\n        assertEquals(URL2, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n        props = shards.get(SHARD3);\n        assertEquals(URL3, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n      }\n\n    } finally {\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReadShards() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    ZkController zkController = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards/shardid1\";\n      zkClient.makePath(shardsPath);\n\n      addShardToZk(zkClient, shardsPath, SHARD1, URL1);\n      addShardToZk(zkClient, shardsPath, SHARD2, URL2);\n      addShardToZk(zkClient, shardsPath, SHARD3, URL3);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      zkController = new ZkController(server.getZkAddress(),\n          TIMEOUT, 1000, \"localhost\", \"8983\", \"solr\");\n \n      zkController.getZkStateReader().updateCloudState(true);\n      CloudState cloudInfo = zkController.getCloudState();\n      Map<String,Slice> slices = cloudInfo.getSlices(\"collection1\");\n      assertNotNull(slices);\n\n      for (Slice slice : slices.values()) {\n        Map<String,ZkNodeProps> shards = slice.getShards();\n        if (DEBUG) {\n          for (String shardName : shards.keySet()) {\n            ZkNodeProps props = shards.get(shardName);\n            System.out.println(\"shard:\" + shardName);\n            System.out.println(\"props:\" + props.toString());\n          }\n        }\n        assertNotNull(shards.get(SHARD1));\n        assertNotNull(shards.get(SHARD2));\n        assertNotNull(shards.get(SHARD3));\n\n        ZkNodeProps props = shards.get(SHARD1);\n        assertEquals(URL1, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n        props = shards.get(SHARD2);\n        assertEquals(URL2, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n        props = shards.get(SHARD3);\n        assertEquals(URL3, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n      }\n\n    } finally {\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadShards().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkControllerTest#testReadShards().mjava","sourceNew":"  @Test\n  public void testReadShards() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    ZkController zkController = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards/shardid1\";\n      zkClient.makePath(shardsPath);\n\n      addShardToZk(zkClient, shardsPath, SHARD1, URL1);\n      addShardToZk(zkClient, shardsPath, SHARD2, URL2);\n      addShardToZk(zkClient, shardsPath, SHARD3, URL3);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      zkController = new ZkController(server.getZkAddress(),\n          TIMEOUT, 1000, \"localhost\", \"8983\", \"solr\");\n \n      zkController.getZkStateReader().updateCloudState(true);\n      CloudState cloudInfo = zkController.getCloudState();\n      Map<String,Slice> slices = cloudInfo.getSlices(\"collection1\");\n      assertNotNull(slices);\n\n      for (Slice slice : slices.values()) {\n        Map<String,ZkNodeProps> shards = slice.getShards();\n        if (DEBUG) {\n          for (String shardName : shards.keySet()) {\n            ZkNodeProps props = shards.get(shardName);\n            System.out.println(\"shard:\" + shardName);\n            System.out.println(\"props:\" + props.toString());\n          }\n        }\n        assertNotNull(shards.get(SHARD1));\n        assertNotNull(shards.get(SHARD2));\n        assertNotNull(shards.get(SHARD3));\n\n        ZkNodeProps props = shards.get(SHARD1);\n        assertEquals(URL1, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n        props = shards.get(SHARD2);\n        assertEquals(URL2, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n        props = shards.get(SHARD3);\n        assertEquals(URL3, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n      }\n\n    } finally {\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReadShards() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    ZkController zkController = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards/shardid1\";\n      zkClient.makePath(shardsPath);\n\n      addShardToZk(zkClient, shardsPath, SHARD1, URL1);\n      addShardToZk(zkClient, shardsPath, SHARD2, URL2);\n      addShardToZk(zkClient, shardsPath, SHARD3, URL3);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      zkController = new ZkController(server.getZkAddress(),\n          TIMEOUT, 1000, \"localhost\", \"8983\", \"solr\");\n \n      zkController.getZkStateReader().updateCloudState(true);\n      CloudState cloudInfo = zkController.getCloudState();\n      Map<String,Slice> slices = cloudInfo.getSlices(\"collection1\");\n      assertNotNull(slices);\n\n      for (Slice slice : slices.values()) {\n        Map<String,ZkNodeProps> shards = slice.getShards();\n        if (DEBUG) {\n          for (String shardName : shards.keySet()) {\n            ZkNodeProps props = shards.get(shardName);\n            System.out.println(\"shard:\" + shardName);\n            System.out.println(\"props:\" + props.toString());\n          }\n        }\n        assertNotNull(shards.get(SHARD1));\n        assertNotNull(shards.get(SHARD2));\n        assertNotNull(shards.get(SHARD3));\n\n        ZkNodeProps props = shards.get(SHARD1);\n        assertEquals(URL1, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n        props = shards.get(SHARD2);\n        assertEquals(URL2, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n        props = shards.get(SHARD3);\n        assertEquals(URL3, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n      }\n\n    } finally {\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadShards().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkControllerTest#testReadShards().mjava","sourceNew":"  @Test\n  public void testReadShards() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    ZkController zkController = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards/shardid1\";\n      zkClient.makePath(shardsPath);\n\n      addShardToZk(zkClient, shardsPath, SHARD1, URL1);\n      addShardToZk(zkClient, shardsPath, SHARD2, URL2);\n      addShardToZk(zkClient, shardsPath, SHARD3, URL3);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      zkController = new ZkController(server.getZkAddress(),\n          TIMEOUT, 1000, \"localhost\", \"8983\", \"solr\");\n \n      zkController.getZkStateReader().updateCloudState(true);\n      CloudState cloudInfo = zkController.getCloudState();\n      Map<String,Slice> slices = cloudInfo.getSlices(\"collection1\");\n      assertNotNull(slices);\n\n      for (Slice slice : slices.values()) {\n        Map<String,ZkNodeProps> shards = slice.getShards();\n        if (DEBUG) {\n          for (String shardName : shards.keySet()) {\n            ZkNodeProps props = shards.get(shardName);\n            System.out.println(\"shard:\" + shardName);\n            System.out.println(\"props:\" + props.toString());\n          }\n        }\n        assertNotNull(shards.get(SHARD1));\n        assertNotNull(shards.get(SHARD2));\n        assertNotNull(shards.get(SHARD3));\n\n        ZkNodeProps props = shards.get(SHARD1);\n        assertEquals(URL1, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n        props = shards.get(SHARD2);\n        assertEquals(URL2, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n        props = shards.get(SHARD3);\n        assertEquals(URL3, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n      }\n\n    } finally {\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReadShards() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    ZkController zkController = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards/shardid1\";\n      zkClient.makePath(shardsPath);\n\n      addShardToZk(zkClient, shardsPath, SHARD1, URL1);\n      addShardToZk(zkClient, shardsPath, SHARD2, URL2);\n      addShardToZk(zkClient, shardsPath, SHARD3, URL3);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      zkController = new ZkController(server.getZkAddress(),\n          TIMEOUT, 1000, \"localhost\", \"8983\", \"solr\");\n \n      zkController.getZkStateReader().updateCloudState(true);\n      CloudState cloudInfo = zkController.getCloudState();\n      Map<String,Slice> slices = cloudInfo.getSlices(\"collection1\");\n      assertNotNull(slices);\n\n      for (Slice slice : slices.values()) {\n        Map<String,ZkNodeProps> shards = slice.getShards();\n        if (DEBUG) {\n          for (String shardName : shards.keySet()) {\n            ZkNodeProps props = shards.get(shardName);\n            System.out.println(\"shard:\" + shardName);\n            System.out.println(\"props:\" + props.toString());\n          }\n        }\n        assertNotNull(shards.get(SHARD1));\n        assertNotNull(shards.get(SHARD2));\n        assertNotNull(shards.get(SHARD3));\n\n        ZkNodeProps props = shards.get(SHARD1);\n        assertEquals(URL1, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n        props = shards.get(SHARD2);\n        assertEquals(URL2, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n        props = shards.get(SHARD3);\n        assertEquals(URL3, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n      }\n\n    } finally {\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5dfdcab67889853a837797b4c8bb9546025bc95a":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"c26f00b574427b55127e869b935845554afde1fa":["bed62fe6383040eaff2ec720cdc55bb1462c61da","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"bed62fe6383040eaff2ec720cdc55bb1462c61da":["5dfdcab67889853a837797b4c8bb9546025bc95a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["bed62fe6383040eaff2ec720cdc55bb1462c61da"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","bed62fe6383040eaff2ec720cdc55bb1462c61da"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["bed62fe6383040eaff2ec720cdc55bb1462c61da"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","5dfdcab67889853a837797b4c8bb9546025bc95a"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","bed62fe6383040eaff2ec720cdc55bb1462c61da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["5dfdcab67889853a837797b4c8bb9546025bc95a","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"5dfdcab67889853a837797b4c8bb9546025bc95a":["bed62fe6383040eaff2ec720cdc55bb1462c61da","868da859b43505d9d2a023bfeae6dd0c795f5295"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"bed62fe6383040eaff2ec720cdc55bb1462c61da":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}