{"path":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","sourceNew":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator(null);\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    terms.seekExact(ordB);\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","sourceOld":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator(null);\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    terms.seekExact(ordB);\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","sourceNew":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator(null);\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    terms.seekExact(ordB);\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","sourceOld":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator(null);\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    terms.seekExact(ordB);\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","sourceNew":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator(null);\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    terms.seekExact(ordB);\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","sourceOld":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator(null);\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    terms.seekExact(ordB);\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cf8086c7e11dc41303ef1b8050bd355ddfaee76d","date":1350007219,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","sourceNew":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator(null);\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    terms.seekExact(ordB);\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","sourceOld":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator(null);\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    terms.seekExact(ordB);\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","sourceNew":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator(null);\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    terms.seekExact(ordB);\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","sourceOld":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator(null);\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    terms.seekExact(ordB);\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","sourceNew":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator(null);\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    terms.seekExact(ordB);\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","sourceOld":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator(null);\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    terms.seekExact(ordB);\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","sourceNew":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator(null);\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    terms.seekExact(ordB);\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","sourceOld":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator(null);\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    terms.seekExact(ordB);\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","sourceNew":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())));\n    addDoc(writer, \"aaa bbb\");\n    writer.shutdown();\n    SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator(null);\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    terms.seekExact(ordB);\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","sourceOld":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator(null);\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    terms.seekExact(ordB);\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","sourceNew":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setCodec(TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())));\n    addDoc(writer, \"aaa bbb\");\n    writer.shutdown();\n    SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator(null);\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    terms.seekExact(ordB);\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","sourceOld":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())));\n    addDoc(writer, \"aaa bbb\");\n    writer.shutdown();\n    SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator(null);\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    terms.seekExact(ordB);\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","sourceNew":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setCodec(TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator(null);\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    terms.seekExact(ordB);\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","sourceOld":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setCodec(TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())));\n    addDoc(writer, \"aaa bbb\");\n    writer.shutdown();\n    SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator(null);\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    terms.seekExact(ordB);\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e49088db00ea6cb232fbde9c8c646c721d4d049f","date":1411433559,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","sourceNew":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setCodec(TestUtil.alwaysPostingsFormat(TestUtil.getDefaultPostingsFormat())));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator(null);\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    terms.seekExact(ordB);\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","sourceOld":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setCodec(TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator(null);\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    terms.seekExact(ordB);\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","sourceNew":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setCodec(TestUtil.alwaysPostingsFormat(TestUtil.getDefaultPostingsFormat())));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    terms.seekExact(ordB);\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","sourceOld":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setCodec(TestUtil.alwaysPostingsFormat(TestUtil.getDefaultPostingsFormat())));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator(null);\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    terms.seekExact(ordB);\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","sourceNew":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setCodec(TestUtil.alwaysPostingsFormat(TestUtil.getDefaultPostingsFormat())));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    LeafReader reader = getOnlyLeafReader(DirectoryReader.open(dir));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    terms.seekExact(ordB);\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","sourceOld":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setCodec(TestUtil.alwaysPostingsFormat(TestUtil.getDefaultPostingsFormat())));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    terms.seekExact(ordB);\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","bugFix":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b","date":1497408244,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","sourceNew":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setCodec(TestUtil.alwaysPostingsFormat(TestUtil.getDefaultPostingsFormat())));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    LeafReader reader = getOnlyLeafReader(DirectoryReader.open(dir));\n    TermsEnum terms = reader.terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    terms.seekExact(ordB);\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","sourceOld":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setCodec(TestUtil.alwaysPostingsFormat(TestUtil.getDefaultPostingsFormat())));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    LeafReader reader = getOnlyLeafReader(DirectoryReader.open(dir));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    terms.seekExact(ordB);\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","sourceNew":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setCodec(TestUtil.alwaysPostingsFormat(TestUtil.getDefaultPostingsFormat())));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    LeafReader reader = getOnlyLeafReader(DirectoryReader.open(dir));\n    TermsEnum terms = reader.terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    terms.seekExact(ordB);\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","sourceOld":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setCodec(TestUtil.alwaysPostingsFormat(TestUtil.getDefaultPostingsFormat())));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    LeafReader reader = getOnlyLeafReader(DirectoryReader.open(dir));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    terms.seekExact(ordB);\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","sourceNew":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setCodec(TestUtil.alwaysPostingsFormat(TestUtil.getDefaultPostingsFormat())));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    LeafReader reader = getOnlyLeafReader(DirectoryReader.open(dir));\n    TermsEnum terms = reader.terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    terms.seekExact(ordB);\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","sourceOld":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setCodec(TestUtil.alwaysPostingsFormat(TestUtil.getDefaultPostingsFormat())));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    LeafReader reader = getOnlyLeafReader(DirectoryReader.open(dir));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    terms.seekExact(ordB);\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["e49088db00ea6cb232fbde9c8c646c721d4d049f"],"e49088db00ea6cb232fbde9c8c646c721d4d049f":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"6613659748fe4411a7dcf85266e55db1f95f7315":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"28288370235ed02234a64753cdbf0c6ec096304a":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["6613659748fe4411a7dcf85266e55db1f95f7315"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"e49088db00ea6cb232fbde9c8c646c721d4d049f":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"6613659748fe4411a7dcf85266e55db1f95f7315":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["6613659748fe4411a7dcf85266e55db1f95f7315","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","c7492bcb52be51e55d596134b95b2e53cc4ffb91","cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["e49088db00ea6cb232fbde9c8c646c721d4d049f"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}