{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter.FlushControl#flushByRAMUsage(String).mjava","commits":[{"id":"44fcbde6fb2ac44ee3b45e013e54a42911e689ff","date":1292065621,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.FlushControl#flushByRAMUsage(String).mjava","pathOld":"/dev/null","sourceNew":"    public synchronized boolean flushByRAMUsage(String reason) {\n      final double ramBufferSizeMB = config.getRAMBufferSizeMB();\n      if (ramBufferSizeMB != IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n        final long limit = (long) (ramBufferSizeMB*1024*1024);\n        long used = bufferedDeletes.bytesUsed() + docWriter.bytesUsed();\n        if (used >= limit) {\n          \n          // DocumentsWriter may be able to free up some\n          // RAM:\n          // Lock order: FC -> DW\n          docWriter.balanceRAM();\n\n          used = bufferedDeletes.bytesUsed() + docWriter.bytesUsed();\n          if (used >= limit) {\n            return setFlushPending(\"ram full: \" + reason, false);\n          }\n        }\n      }\n      return false;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.FlushControl#flushByRAMUsage(String).mjava","pathOld":"/dev/null","sourceNew":"    public synchronized boolean flushByRAMUsage(String reason) {\n      final double ramBufferSizeMB = config.getRAMBufferSizeMB();\n      if (ramBufferSizeMB != IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n        final long limit = (long) (ramBufferSizeMB*1024*1024);\n        long used = bufferedDeletes.bytesUsed() + docWriter.bytesUsed();\n        if (used >= limit) {\n          \n          // DocumentsWriter may be able to free up some\n          // RAM:\n          // Lock order: FC -> DW\n          docWriter.balanceRAM();\n\n          used = bufferedDeletes.bytesUsed() + docWriter.bytesUsed();\n          if (used >= limit) {\n            return setFlushPending(\"ram full: \" + reason, false);\n          }\n        }\n      }\n      return false;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.FlushControl#flushByRAMUsage(String).mjava","pathOld":"/dev/null","sourceNew":"    public synchronized boolean flushByRAMUsage(String reason) {\n      // nocommit\n//      final double ramBufferSizeMB = config.getRAMBufferSizeMB();\n//      if (ramBufferSizeMB != IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n//        final long limit = (long) (ramBufferSizeMB*1024*1024);\n//        long used = bufferedDeletes.bytesUsed() + docWriter.bytesUsed();\n//        if (used >= limit) {\n//\n//          // DocumentsWriter may be able to free up some\n//          // RAM:\n//          // Lock order: FC -> DW\n//          docWriter.balanceRAM();\n//\n//          used = bufferedDeletes.bytesUsed() + docWriter.bytesUsed();\n//          if (used >= limit) {\n//            return setFlushPending(\"ram full: \" + reason, false);\n//          }\n//        }\n//      }\n      return false;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.FlushControl#flushByRAMUsage(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.FlushControl#flushByRAMUsage(String).mjava","sourceNew":"    public synchronized boolean flushByRAMUsage(String reason) {\n      final double ramBufferSizeMB = config.getRAMBufferSizeMB();\n      if (ramBufferSizeMB != IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n        final long limit = (long) (ramBufferSizeMB*1024*1024);\n        long used = bufferedDeletesStream.bytesUsed() + docWriter.bytesUsed();\n        if (used >= limit) {\n          \n          // DocumentsWriter may be able to free up some\n          // RAM:\n          // Lock order: FC -> DW\n          docWriter.balanceRAM();\n\n          used = bufferedDeletesStream.bytesUsed() + docWriter.bytesUsed();\n          if (used >= limit) {\n            return setFlushPending(\"ram full: \" + reason, false);\n          }\n        }\n      }\n      return false;\n    }\n\n","sourceOld":"    public synchronized boolean flushByRAMUsage(String reason) {\n      final double ramBufferSizeMB = config.getRAMBufferSizeMB();\n      if (ramBufferSizeMB != IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n        final long limit = (long) (ramBufferSizeMB*1024*1024);\n        long used = bufferedDeletes.bytesUsed() + docWriter.bytesUsed();\n        if (used >= limit) {\n          \n          // DocumentsWriter may be able to free up some\n          // RAM:\n          // Lock order: FC -> DW\n          docWriter.balanceRAM();\n\n          used = bufferedDeletes.bytesUsed() + docWriter.bytesUsed();\n          if (used >= limit) {\n            return setFlushPending(\"ram full: \" + reason, false);\n          }\n        }\n      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.FlushControl#flushByRAMUsage(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.FlushControl#flushByRAMUsage(String).mjava","sourceNew":"    public synchronized boolean flushByRAMUsage(String reason) {\n      final double ramBufferSizeMB = config.getRAMBufferSizeMB();\n      if (ramBufferSizeMB != IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n        final long limit = (long) (ramBufferSizeMB*1024*1024);\n        long used = bufferedDeletesStream.bytesUsed() + docWriter.bytesUsed();\n        if (used >= limit) {\n          \n          // DocumentsWriter may be able to free up some\n          // RAM:\n          // Lock order: FC -> DW\n          docWriter.balanceRAM();\n\n          used = bufferedDeletesStream.bytesUsed() + docWriter.bytesUsed();\n          if (used >= limit) {\n            return setFlushPending(\"ram full: \" + reason, false);\n          }\n        }\n      }\n      return false;\n    }\n\n","sourceOld":"    public synchronized boolean flushByRAMUsage(String reason) {\n      final double ramBufferSizeMB = config.getRAMBufferSizeMB();\n      if (ramBufferSizeMB != IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n        final long limit = (long) (ramBufferSizeMB*1024*1024);\n        long used = bufferedDeletes.bytesUsed() + docWriter.bytesUsed();\n        if (used >= limit) {\n          \n          // DocumentsWriter may be able to free up some\n          // RAM:\n          // Lock order: FC -> DW\n          docWriter.balanceRAM();\n\n          used = bufferedDeletes.bytesUsed() + docWriter.bytesUsed();\n          if (used >= limit) {\n            return setFlushPending(\"ram full: \" + reason, false);\n          }\n        }\n      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.FlushControl#flushByRAMUsage(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.FlushControl#flushByRAMUsage(String).mjava","sourceNew":"    public synchronized boolean flushByRAMUsage(String reason) {\n//      final double ramBufferSizeMB = config.getRAMBufferSizeMB();\n//      if (ramBufferSizeMB != IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n//        final long limit = (long) (ramBufferSizeMB*1024*1024);\n//        long used = bufferedDeletesStream.bytesUsed() + docWriter.bytesUsed();\n//        if (used >= limit) {\n//\n//          // DocumentsWriter may be able to free up some\n//          // RAM:\n//          // Lock order: FC -> DW\n//          docWriter.balanceRAM();\n//\n//          used = bufferedDeletesStream.bytesUsed() + docWriter.bytesUsed();\n//          if (used >= limit) {\n//            return setFlushPending(\"ram full: \" + reason, false);\n//          }\n//        }\n//      }\n      return false;\n    }\n\n","sourceOld":"    public synchronized boolean flushByRAMUsage(String reason) {\n      // nocommit\n//      final double ramBufferSizeMB = config.getRAMBufferSizeMB();\n//      if (ramBufferSizeMB != IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n//        final long limit = (long) (ramBufferSizeMB*1024*1024);\n//        long used = bufferedDeletes.bytesUsed() + docWriter.bytesUsed();\n//        if (used >= limit) {\n//\n//          // DocumentsWriter may be able to free up some\n//          // RAM:\n//          // Lock order: FC -> DW\n//          docWriter.balanceRAM();\n//\n//          used = bufferedDeletes.bytesUsed() + docWriter.bytesUsed();\n//          if (used >= limit) {\n//            return setFlushPending(\"ram full: \" + reason, false);\n//          }\n//        }\n//      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2ed1b9b7b46829fe3199afe9a8bc203f201b175","date":1301491807,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.FlushControl#flushByRAMUsage(String).mjava","sourceNew":null,"sourceOld":"    public synchronized boolean flushByRAMUsage(String reason) {\n//      final double ramBufferSizeMB = config.getRAMBufferSizeMB();\n//      if (ramBufferSizeMB != IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n//        final long limit = (long) (ramBufferSizeMB*1024*1024);\n//        long used = bufferedDeletesStream.bytesUsed() + docWriter.bytesUsed();\n//        if (used >= limit) {\n//\n//          // DocumentsWriter may be able to free up some\n//          // RAM:\n//          // Lock order: FC -> DW\n//          docWriter.balanceRAM();\n//\n//          used = bufferedDeletesStream.bytesUsed() + docWriter.bytesUsed();\n//          if (used >= limit) {\n//            return setFlushPending(\"ram full: \" + reason, false);\n//          }\n//        }\n//      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.FlushControl#flushByRAMUsage(String).mjava","sourceNew":null,"sourceOld":"    public synchronized boolean flushByRAMUsage(String reason) {\n      final double ramBufferSizeMB = config.getRAMBufferSizeMB();\n      if (ramBufferSizeMB != IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n        final long limit = (long) (ramBufferSizeMB*1024*1024);\n        long used = bufferedDeletesStream.bytesUsed() + docWriter.bytesUsed();\n        if (used >= limit) {\n          \n          // DocumentsWriter may be able to free up some\n          // RAM:\n          // Lock order: FC -> DW\n          docWriter.balanceRAM();\n\n          used = bufferedDeletesStream.bytesUsed() + docWriter.bytesUsed();\n          if (used >= limit) {\n            return setFlushPending(\"ram full: \" + reason, false);\n          }\n        }\n      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.FlushControl#flushByRAMUsage(String).mjava","sourceNew":null,"sourceOld":"    public synchronized boolean flushByRAMUsage(String reason) {\n      final double ramBufferSizeMB = config.getRAMBufferSizeMB();\n      if (ramBufferSizeMB != IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n        final long limit = (long) (ramBufferSizeMB*1024*1024);\n        long used = bufferedDeletesStream.bytesUsed() + docWriter.bytesUsed();\n        if (used >= limit) {\n          \n          // DocumentsWriter may be able to free up some\n          // RAM:\n          // Lock order: FC -> DW\n          docWriter.balanceRAM();\n\n          used = bufferedDeletesStream.bytesUsed() + docWriter.bytesUsed();\n          if (used >= limit) {\n            return setFlushPending(\"ram full: \" + reason, false);\n          }\n        }\n      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.FlushControl#flushByRAMUsage(String).mjava","sourceNew":null,"sourceOld":"    public synchronized boolean flushByRAMUsage(String reason) {\n      final double ramBufferSizeMB = config.getRAMBufferSizeMB();\n      if (ramBufferSizeMB != IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n        final long limit = (long) (ramBufferSizeMB*1024*1024);\n        long used = bufferedDeletesStream.bytesUsed() + docWriter.bytesUsed();\n        if (used >= limit) {\n          \n          // DocumentsWriter may be able to free up some\n          // RAM:\n          // Lock order: FC -> DW\n          docWriter.balanceRAM();\n\n          used = bufferedDeletesStream.bytesUsed() + docWriter.bytesUsed();\n          if (used >= limit) {\n            return setFlushPending(\"ram full: \" + reason, false);\n          }\n        }\n      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c19f985e36a65cc969e8e564fe337a0d41512075","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","c19f985e36a65cc969e8e564fe337a0d41512075"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["c19f985e36a65cc969e8e564fe337a0d41512075","d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"c19f985e36a65cc969e8e564fe337a0d41512075":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"]},"commit2Childs":{"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"c19f985e36a65cc969e8e564fe337a0d41512075":["a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","b3e06be49006ecac364d39d12b9c9f74882f9b9f","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}