{"path":"lucene/core/src/test/org/apache/lucene/util/TestRadixSelector#doTestSharedPrefixes().mjava","commits":[{"id":"a20457919db052812998f60294d17daa883ff972","date":1470227748,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestRadixSelector#doTestSharedPrefixes().mjava","pathOld":"/dev/null","sourceNew":"  private void doTestSharedPrefixes() {\n    final int from = random().nextInt(5);\n    final int to = from + TestUtil.nextInt(random(), 1, 10000);\n    final int maxLen = TestUtil.nextInt(random(), 1, 12);\n    BytesRef[] arr = new BytesRef[from + to + random().nextInt(5)];\n    for (int i = 0; i < arr.length; ++i) {\n      byte[] bytes = new byte[TestUtil.nextInt(random(), 0, maxLen)];\n      random().nextBytes(bytes);\n      arr[i] = new BytesRef(bytes);\n    }\n    final int sharedPrefixLength = Math.min(arr[0].length, TestUtil.nextInt(random(), 1, maxLen));\n    for (int i = 1; i < arr.length; ++i) {\n      System.arraycopy(arr[0].bytes, arr[0].offset, arr[i].bytes, arr[i].offset, Math.min(sharedPrefixLength, arr[i].length));\n    }\n    doTest(arr, from, to, maxLen);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestRadixSelector#doTestSharedPrefixes().mjava","pathOld":"/dev/null","sourceNew":"  private void doTestSharedPrefixes() {\n    final int from = random().nextInt(5);\n    final int to = from + TestUtil.nextInt(random(), 1, 10000);\n    final int maxLen = TestUtil.nextInt(random(), 1, 12);\n    BytesRef[] arr = new BytesRef[from + to + random().nextInt(5)];\n    for (int i = 0; i < arr.length; ++i) {\n      byte[] bytes = new byte[TestUtil.nextInt(random(), 0, maxLen)];\n      random().nextBytes(bytes);\n      arr[i] = new BytesRef(bytes);\n    }\n    final int sharedPrefixLength = Math.min(arr[0].length, TestUtil.nextInt(random(), 1, maxLen));\n    for (int i = 1; i < arr.length; ++i) {\n      System.arraycopy(arr[0].bytes, arr[0].offset, arr[i].bytes, arr[i].offset, Math.min(sharedPrefixLength, arr[i].length));\n    }\n    doTest(arr, from, to, maxLen);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestRadixSelector#doTestSharedPrefixes().mjava","pathOld":"/dev/null","sourceNew":"  private void doTestSharedPrefixes() {\n    final int from = random().nextInt(5);\n    final int to = from + TestUtil.nextInt(random(), 1, 10000);\n    final int maxLen = TestUtil.nextInt(random(), 1, 12);\n    BytesRef[] arr = new BytesRef[from + to + random().nextInt(5)];\n    for (int i = 0; i < arr.length; ++i) {\n      byte[] bytes = new byte[TestUtil.nextInt(random(), 0, maxLen)];\n      random().nextBytes(bytes);\n      arr[i] = new BytesRef(bytes);\n    }\n    final int sharedPrefixLength = Math.min(arr[0].length, TestUtil.nextInt(random(), 1, maxLen));\n    for (int i = 1; i < arr.length; ++i) {\n      System.arraycopy(arr[0].bytes, arr[0].offset, arr[i].bytes, arr[i].offset, Math.min(sharedPrefixLength, arr[i].length));\n    }\n    doTest(arr, from, to, maxLen);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a20457919db052812998f60294d17daa883ff972":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a20457919db052812998f60294d17daa883ff972"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a20457919db052812998f60294d17daa883ff972"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a20457919db052812998f60294d17daa883ff972"]},"commit2Childs":{"a20457919db052812998f60294d17daa883ff972":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a20457919db052812998f60294d17daa883ff972","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}