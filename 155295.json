{"path":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer#testNullScorerTermQuery().mjava","commits":[{"id":"a978b9bccbf0029e9f1e8930aae1305cf4fdd442","date":1400521236,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer#testNullScorerTermQuery().mjava","pathOld":"/dev/null","sourceNew":"  // Test LUCENE-5682\n  public void testNullScorerTermQuery() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.shutdown();\n\n    // Do ordinary BooleanQuery:\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"field\", \"wizard\")), Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"oz\")), Occur.SHOULD);\n    IndexSearcher searcher = getSearcher(r);\n    searcher.setSimilarity(new DefaultSimilarity());\n\n    TopDocs hits = searcher.search(bq, 10);\n    assertEquals(2, hits.totalHits);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    // Now, resort using TermQuery on term that does not exist.\n    TermQuery tq = new TermQuery(new Term(\"field\", \"gold\"));\n    TopDocs hits2 = QueryRescorer.rescore(searcher, hits, tq, 2.0, 10);\n\n    // Just testing that null scorer is handled.\n    assertEquals(2, hits2.totalHits);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer#testNullScorerTermQuery().mjava","pathOld":"/dev/null","sourceNew":"  // Test LUCENE-5682\n  public void testNullScorerTermQuery() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.shutdown();\n\n    // Do ordinary BooleanQuery:\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"field\", \"wizard\")), Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"oz\")), Occur.SHOULD);\n    IndexSearcher searcher = getSearcher(r);\n    searcher.setSimilarity(new DefaultSimilarity());\n\n    TopDocs hits = searcher.search(bq, 10);\n    assertEquals(2, hits.totalHits);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    // Now, resort using TermQuery on term that does not exist.\n    TermQuery tq = new TermQuery(new Term(\"field\", \"gold\"));\n    TopDocs hits2 = QueryRescorer.rescore(searcher, hits, tq, 2.0, 10);\n\n    // Just testing that null scorer is handled.\n    assertEquals(2, hits2.totalHits);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer#testNullScorerTermQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer#testNullScorerTermQuery().mjava","sourceNew":"  // Test LUCENE-5682\n  public void testNullScorerTermQuery() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"field\", \"wizard\")), Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"oz\")), Occur.SHOULD);\n    IndexSearcher searcher = getSearcher(r);\n    searcher.setSimilarity(new DefaultSimilarity());\n\n    TopDocs hits = searcher.search(bq, 10);\n    assertEquals(2, hits.totalHits);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    // Now, resort using TermQuery on term that does not exist.\n    TermQuery tq = new TermQuery(new Term(\"field\", \"gold\"));\n    TopDocs hits2 = QueryRescorer.rescore(searcher, hits, tq, 2.0, 10);\n\n    // Just testing that null scorer is handled.\n    assertEquals(2, hits2.totalHits);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test LUCENE-5682\n  public void testNullScorerTermQuery() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.shutdown();\n\n    // Do ordinary BooleanQuery:\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"field\", \"wizard\")), Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"oz\")), Occur.SHOULD);\n    IndexSearcher searcher = getSearcher(r);\n    searcher.setSimilarity(new DefaultSimilarity());\n\n    TopDocs hits = searcher.search(bq, 10);\n    assertEquals(2, hits.totalHits);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    // Now, resort using TermQuery on term that does not exist.\n    TermQuery tq = new TermQuery(new Term(\"field\", \"gold\"));\n    TopDocs hits2 = QueryRescorer.rescore(searcher, hits, tq, 2.0, 10);\n\n    // Just testing that null scorer is handled.\n    assertEquals(2, hits2.totalHits);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer#testNullScorerTermQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer#testNullScorerTermQuery().mjava","sourceNew":"  // Test LUCENE-5682\n  public void testNullScorerTermQuery() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(\"field\", \"wizard\")), Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"oz\")), Occur.SHOULD);\n    IndexSearcher searcher = getSearcher(r);\n    searcher.setSimilarity(new DefaultSimilarity());\n\n    TopDocs hits = searcher.search(bq.build(), 10);\n    assertEquals(2, hits.totalHits);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    // Now, resort using TermQuery on term that does not exist.\n    TermQuery tq = new TermQuery(new Term(\"field\", \"gold\"));\n    TopDocs hits2 = QueryRescorer.rescore(searcher, hits, tq, 2.0, 10);\n\n    // Just testing that null scorer is handled.\n    assertEquals(2, hits2.totalHits);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test LUCENE-5682\n  public void testNullScorerTermQuery() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"field\", \"wizard\")), Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"oz\")), Occur.SHOULD);\n    IndexSearcher searcher = getSearcher(r);\n    searcher.setSimilarity(new DefaultSimilarity());\n\n    TopDocs hits = searcher.search(bq, 10);\n    assertEquals(2, hits.totalHits);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    // Now, resort using TermQuery on term that does not exist.\n    TermQuery tq = new TermQuery(new Term(\"field\", \"gold\"));\n    TopDocs hits2 = QueryRescorer.rescore(searcher, hits, tq, 2.0, 10);\n\n    // Just testing that null scorer is handled.\n    assertEquals(2, hits2.totalHits);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81d0720146de53dd3a4a023d2a3d1089d86d748d","date":1442268215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer#testNullScorerTermQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer#testNullScorerTermQuery().mjava","sourceNew":"  // Test LUCENE-5682\n  public void testNullScorerTermQuery() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(\"field\", \"wizard\")), Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"oz\")), Occur.SHOULD);\n    IndexSearcher searcher = getSearcher(r);\n    searcher.setSimilarity(new ClassicSimilarity());\n\n    TopDocs hits = searcher.search(bq.build(), 10);\n    assertEquals(2, hits.totalHits);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    // Now, resort using TermQuery on term that does not exist.\n    TermQuery tq = new TermQuery(new Term(\"field\", \"gold\"));\n    TopDocs hits2 = QueryRescorer.rescore(searcher, hits, tq, 2.0, 10);\n\n    // Just testing that null scorer is handled.\n    assertEquals(2, hits2.totalHits);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test LUCENE-5682\n  public void testNullScorerTermQuery() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(\"field\", \"wizard\")), Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"oz\")), Occur.SHOULD);\n    IndexSearcher searcher = getSearcher(r);\n    searcher.setSimilarity(new DefaultSimilarity());\n\n    TopDocs hits = searcher.search(bq.build(), 10);\n    assertEquals(2, hits.totalHits);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    // Now, resort using TermQuery on term that does not exist.\n    TermQuery tq = new TermQuery(new Term(\"field\", \"gold\"));\n    TopDocs hits2 = QueryRescorer.rescore(searcher, hits, tq, 2.0, 10);\n\n    // Just testing that null scorer is handled.\n    assertEquals(2, hits2.totalHits);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615370d2b876c3435773b5174df2e2242ad7981a","date":1495117651,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer#testNullScorerTermQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer#testNullScorerTermQuery().mjava","sourceNew":"  // Test LUCENE-5682\n  public void testNullScorerTermQuery() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig());\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(\"field\", \"wizard\")), Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"oz\")), Occur.SHOULD);\n    IndexSearcher searcher = getSearcher(r);\n    searcher.setSimilarity(new ClassicSimilarity());\n\n    TopDocs hits = searcher.search(bq.build(), 10);\n    assertEquals(2, hits.totalHits);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    // Now, resort using TermQuery on term that does not exist.\n    TermQuery tq = new TermQuery(new Term(\"field\", \"gold\"));\n    TopDocs hits2 = QueryRescorer.rescore(searcher, hits, tq, 2.0, 10);\n\n    // Just testing that null scorer is handled.\n    assertEquals(2, hits2.totalHits);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test LUCENE-5682\n  public void testNullScorerTermQuery() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(\"field\", \"wizard\")), Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"oz\")), Occur.SHOULD);\n    IndexSearcher searcher = getSearcher(r);\n    searcher.setSimilarity(new ClassicSimilarity());\n\n    TopDocs hits = searcher.search(bq.build(), 10);\n    assertEquals(2, hits.totalHits);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    // Now, resort using TermQuery on term that does not exist.\n    TermQuery tq = new TermQuery(new Term(\"field\", \"gold\"));\n    TopDocs hits2 = QueryRescorer.rescore(searcher, hits, tq, 2.0, 10);\n\n    // Just testing that null scorer is handled.\n    assertEquals(2, hits2.totalHits);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer#testNullScorerTermQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer#testNullScorerTermQuery().mjava","sourceNew":"  // Test LUCENE-5682\n  public void testNullScorerTermQuery() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig());\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(\"field\", \"wizard\")), Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"oz\")), Occur.SHOULD);\n    IndexSearcher searcher = getSearcher(r);\n    searcher.setSimilarity(new ClassicSimilarity());\n\n    TopDocs hits = searcher.search(bq.build(), 10);\n    assertEquals(2, hits.totalHits);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    // Now, resort using TermQuery on term that does not exist.\n    TermQuery tq = new TermQuery(new Term(\"field\", \"gold\"));\n    TopDocs hits2 = QueryRescorer.rescore(searcher, hits, tq, 2.0, 10);\n\n    // Just testing that null scorer is handled.\n    assertEquals(2, hits2.totalHits);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test LUCENE-5682\n  public void testNullScorerTermQuery() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(\"field\", \"wizard\")), Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"oz\")), Occur.SHOULD);\n    IndexSearcher searcher = getSearcher(r);\n    searcher.setSimilarity(new ClassicSimilarity());\n\n    TopDocs hits = searcher.search(bq.build(), 10);\n    assertEquals(2, hits.totalHits);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    // Now, resort using TermQuery on term that does not exist.\n    TermQuery tq = new TermQuery(new Term(\"field\", \"gold\"));\n    TopDocs hits2 = QueryRescorer.rescore(searcher, hits, tq, 2.0, 10);\n\n    // Just testing that null scorer is handled.\n    assertEquals(2, hits2.totalHits);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer#testNullScorerTermQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer#testNullScorerTermQuery().mjava","sourceNew":"  // Test LUCENE-5682\n  public void testNullScorerTermQuery() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig());\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(\"field\", \"wizard\")), Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"oz\")), Occur.SHOULD);\n    IndexSearcher searcher = getSearcher(r);\n    searcher.setSimilarity(new ClassicSimilarity());\n\n    TopDocs hits = searcher.search(bq.build(), 10);\n    assertEquals(2, hits.totalHits.value);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    // Now, resort using TermQuery on term that does not exist.\n    TermQuery tq = new TermQuery(new Term(\"field\", \"gold\"));\n    TopDocs hits2 = QueryRescorer.rescore(searcher, hits, tq, 2.0, 10);\n\n    // Just testing that null scorer is handled.\n    assertEquals(2, hits2.totalHits.value);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test LUCENE-5682\n  public void testNullScorerTermQuery() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig());\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(\"field\", \"wizard\")), Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"oz\")), Occur.SHOULD);\n    IndexSearcher searcher = getSearcher(r);\n    searcher.setSimilarity(new ClassicSimilarity());\n\n    TopDocs hits = searcher.search(bq.build(), 10);\n    assertEquals(2, hits.totalHits);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    // Now, resort using TermQuery on term that does not exist.\n    TermQuery tq = new TermQuery(new Term(\"field\", \"gold\"));\n    TopDocs hits2 = QueryRescorer.rescore(searcher, hits, tq, 2.0, 10);\n\n    // Just testing that null scorer is handled.\n    assertEquals(2, hits2.totalHits);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["81d0720146de53dd3a4a023d2a3d1089d86d748d","615370d2b876c3435773b5174df2e2242ad7981a"],"615370d2b876c3435773b5174df2e2242ad7981a":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"a978b9bccbf0029e9f1e8930aae1305cf4fdd442":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["a978b9bccbf0029e9f1e8930aae1305cf4fdd442"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["615370d2b876c3435773b5174df2e2242ad7981a"],"b7605579001505896d48b07160075a5c8b8e128e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a978b9bccbf0029e9f1e8930aae1305cf4fdd442"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"615370d2b876c3435773b5174df2e2242ad7981a":["e9017cf144952056066919f1ebc7897ff9bd71b1","83788ad129a5154d5c6562c4e8ce3db48793aada"],"a978b9bccbf0029e9f1e8930aae1305cf4fdd442":["d0ef034a4f10871667ae75181537775ddcf8ade4","b7605579001505896d48b07160075a5c8b8e128e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a978b9bccbf0029e9f1e8930aae1305cf4fdd442","b7605579001505896d48b07160075a5c8b8e128e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b7605579001505896d48b07160075a5c8b8e128e":[],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["e9017cf144952056066919f1ebc7897ff9bd71b1","615370d2b876c3435773b5174df2e2242ad7981a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}