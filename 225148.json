{"path":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAToSolrMapper#map(String,Map[String,MapField]).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAToSolrMapper#map(String,Map[String,MapField]).mjava","pathOld":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAToSolrMapper#map(String,Map[String,MapField]).mjava","sourceNew":"  /**\n   * map features of a certain UIMA type to corresponding Solr fields based on the mapping\n   * \n   * @param typeName\n   *          name of UIMA type to map\n   * @param featureFieldsmapping\n   */\n  public void map(String typeName, Map<String, MapField> featureFieldsmapping) {\n    try {\n      FeatureStructure fsMock = (FeatureStructure) Class.forName(typeName).getConstructor(\n              JCas.class).newInstance(cas);\n      Type type = fsMock.getType();\n      for (FSIterator<FeatureStructure> iterator = cas.getFSIndexRepository().getAllIndexedFS(type); iterator\n              .hasNext();) {\n        FeatureStructure fs = iterator.next();\n        for (String featureName : featureFieldsmapping.keySet()) {\n          MapField mapField = featureFieldsmapping.get(featureName);\n          String fieldNameFeature = mapField.getFieldNameFeature();\n          String fieldNameFeatureValue = fieldNameFeature == null ? null :\n            fs.getFeatureValueAsString(type.getFeatureByBaseName(fieldNameFeature));\n          String fieldName = mapField.getFieldName(fieldNameFeatureValue);\n          log.info(new StringBuffer(\"mapping \").append(typeName).append(\"@\").append(featureName)\n                  .append(\" to \").append(fieldName).toString());\n          String featureValue = null;\n          if (fs instanceof Annotation && \"coveredText\".equals(featureName)) {\n            featureValue = ((Annotation) fs).getCoveredText();\n          } else {\n            featureValue = fs.getFeatureValueAsString(type.getFeatureByBaseName(featureName));\n          }\n          log.info(new StringBuffer(\"writing \").append(featureValue).append(\" in \").append(\n                  fieldName).toString());\n          document.addField(fieldName, featureValue, 1.0f);\n        }\n      }\n    } catch (Exception e) {\n      log.error(e.getLocalizedMessage());\n    }\n  }\n\n","sourceOld":"  /**\n   * map features of a certain UIMA type to corresponding Solr fields based on the mapping\n   * \n   * @param typeName\n   *          name of UIMA type to map\n   * @param featureFieldsmapping\n   */\n  public void map(String typeName, Map<String, MapField> featureFieldsmapping) {\n    try {\n      FeatureStructure fsMock = (FeatureStructure) Class.forName(typeName).getConstructor(\n              JCas.class).newInstance(cas);\n      Type type = fsMock.getType();\n      for (FSIterator<FeatureStructure> iterator = cas.getFSIndexRepository().getAllIndexedFS(type); iterator\n              .hasNext();) {\n        FeatureStructure fs = iterator.next();\n        for (String featureName : featureFieldsmapping.keySet()) {\n          MapField mapField = featureFieldsmapping.get(featureName);\n          String fieldNameFeature = mapField.getFieldNameFeature();\n          String fieldNameFeatureValue = fieldNameFeature == null ? null :\n            fs.getFeatureValueAsString(type.getFeatureByBaseName(fieldNameFeature));\n          String fieldName = mapField.getFieldName(fieldNameFeatureValue);\n          log.info(new StringBuffer(\"mapping \").append(typeName).append(\"@\").append(featureName)\n                  .append(\" to \").append(fieldName).toString());\n          String featureValue = null;\n          if (fs instanceof Annotation && \"coveredText\".equals(featureName)) {\n            featureValue = ((Annotation) fs).getCoveredText();\n          } else {\n            featureValue = fs.getFeatureValueAsString(type.getFeatureByBaseName(featureName));\n          }\n          log.info(new StringBuffer(\"writing \").append(featureValue).append(\" in \").append(\n                  fieldName).toString());\n          document.addField(fieldName, featureValue, 1.0f);\n        }\n      }\n    } catch (Exception e) {\n      log.error(e.getLocalizedMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ed208afa1e7aa98899ddb1dedfddedddf898253","date":1308079587,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAToSolrMapper#map(String,Map[String,MapField]).mjava","pathOld":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAToSolrMapper#map(String,Map[String,MapField]).mjava","sourceNew":"  /**\n   * map features of a certain UIMA type to corresponding Solr fields based on the mapping\n   *\n   * @param typeName             name of UIMA type to map\n   * @param featureFieldsmapping\n   */\n  public void map(String typeName, Map<String, MapField> featureFieldsmapping) throws FieldMappingException {\n    try {\n      Type type = cas.getTypeSystem().getType(typeName);\n      for (FSIterator<FeatureStructure> iterator = cas.getFSIndexRepository().getAllIndexedFS(type); iterator\n          .hasNext(); ) {\n        FeatureStructure fs = iterator.next();\n        for (String featureName : featureFieldsmapping.keySet()) {\n          MapField mapField = featureFieldsmapping.get(featureName);\n          String fieldNameFeature = mapField.getFieldNameFeature();\n          String fieldNameFeatureValue = fieldNameFeature == null ? null :\n              fs.getFeatureValueAsString(type.getFeatureByBaseName(fieldNameFeature));\n          String fieldName = mapField.getFieldName(fieldNameFeatureValue);\n          log.info(new StringBuffer(\"mapping \").append(typeName).append(\"@\").append(featureName)\n              .append(\" to \").append(fieldName).toString());\n          String featureValue = null;\n          if (fs instanceof Annotation && \"coveredText\".equals(featureName)) {\n            featureValue = ((Annotation) fs).getCoveredText();\n          } else {\n            featureValue = fs.getFeatureValueAsString(type.getFeatureByBaseName(featureName));\n          }\n          log.info(new StringBuffer(\"writing \").append(featureValue).append(\" in \").append(\n              fieldName).toString());\n          document.addField(fieldName, featureValue, 1.0f);\n        }\n      }\n    } catch (Exception e) {\n      throw new FieldMappingException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * map features of a certain UIMA type to corresponding Solr fields based on the mapping\n   * \n   * @param typeName\n   *          name of UIMA type to map\n   * @param featureFieldsmapping\n   */\n  public void map(String typeName, Map<String, MapField> featureFieldsmapping) {\n    try {\n      FeatureStructure fsMock = (FeatureStructure) Class.forName(typeName).getConstructor(\n              JCas.class).newInstance(cas);\n      Type type = fsMock.getType();\n      for (FSIterator<FeatureStructure> iterator = cas.getFSIndexRepository().getAllIndexedFS(type); iterator\n              .hasNext();) {\n        FeatureStructure fs = iterator.next();\n        for (String featureName : featureFieldsmapping.keySet()) {\n          MapField mapField = featureFieldsmapping.get(featureName);\n          String fieldNameFeature = mapField.getFieldNameFeature();\n          String fieldNameFeatureValue = fieldNameFeature == null ? null :\n            fs.getFeatureValueAsString(type.getFeatureByBaseName(fieldNameFeature));\n          String fieldName = mapField.getFieldName(fieldNameFeatureValue);\n          log.info(new StringBuffer(\"mapping \").append(typeName).append(\"@\").append(featureName)\n                  .append(\" to \").append(fieldName).toString());\n          String featureValue = null;\n          if (fs instanceof Annotation && \"coveredText\".equals(featureName)) {\n            featureValue = ((Annotation) fs).getCoveredText();\n          } else {\n            featureValue = fs.getFeatureValueAsString(type.getFeatureByBaseName(featureName));\n          }\n          log.info(new StringBuffer(\"writing \").append(featureValue).append(\" in \").append(\n                  fieldName).toString());\n          document.addField(fieldName, featureValue, 1.0f);\n        }\n      }\n    } catch (Exception e) {\n      log.error(e.getLocalizedMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAToSolrMapper#map(String,Map[String,MapField]).mjava","pathOld":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAToSolrMapper#map(String,Map[String,MapField]).mjava","sourceNew":"  /**\n   * map features of a certain UIMA type to corresponding Solr fields based on the mapping\n   *\n   * @param typeName             name of UIMA type to map\n   * @param featureFieldsmapping\n   */\n  public void map(String typeName, Map<String, MapField> featureFieldsmapping) throws FieldMappingException {\n    try {\n      Type type = cas.getTypeSystem().getType(typeName);\n      for (FSIterator<FeatureStructure> iterator = cas.getFSIndexRepository().getAllIndexedFS(type); iterator\n          .hasNext(); ) {\n        FeatureStructure fs = iterator.next();\n        for (String featureName : featureFieldsmapping.keySet()) {\n          MapField mapField = featureFieldsmapping.get(featureName);\n          String fieldNameFeature = mapField.getFieldNameFeature();\n          String fieldNameFeatureValue = fieldNameFeature == null ? null :\n              fs.getFeatureValueAsString(type.getFeatureByBaseName(fieldNameFeature));\n          String fieldName = mapField.getFieldName(fieldNameFeatureValue);\n          log.info(new StringBuffer(\"mapping \").append(typeName).append(\"@\").append(featureName)\n              .append(\" to \").append(fieldName).toString());\n          String featureValue = null;\n          if (fs instanceof Annotation && \"coveredText\".equals(featureName)) {\n            featureValue = ((Annotation) fs).getCoveredText();\n          } else {\n            featureValue = fs.getFeatureValueAsString(type.getFeatureByBaseName(featureName));\n          }\n          log.info(new StringBuffer(\"writing \").append(featureValue).append(\" in \").append(\n              fieldName).toString());\n          document.addField(fieldName, featureValue, 1.0f);\n        }\n      }\n    } catch (Exception e) {\n      throw new FieldMappingException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * map features of a certain UIMA type to corresponding Solr fields based on the mapping\n   *\n   * @param typeName             name of UIMA type to map\n   * @param featureFieldsmapping\n   */\n  public void map(String typeName, Map<String, MapField> featureFieldsmapping) throws FieldMappingException {\n    try {\n      Type type = cas.getTypeSystem().getType(typeName);\n      for (FSIterator<FeatureStructure> iterator = cas.getFSIndexRepository().getAllIndexedFS(type); iterator\n          .hasNext(); ) {\n        FeatureStructure fs = iterator.next();\n        for (String featureName : featureFieldsmapping.keySet()) {\n          MapField mapField = featureFieldsmapping.get(featureName);\n          String fieldNameFeature = mapField.getFieldNameFeature();\n          String fieldNameFeatureValue = fieldNameFeature == null ? null :\n              fs.getFeatureValueAsString(type.getFeatureByBaseName(fieldNameFeature));\n          String fieldName = mapField.getFieldName(fieldNameFeatureValue);\n          log.info(new StringBuffer(\"mapping \").append(typeName).append(\"@\").append(featureName)\n              .append(\" to \").append(fieldName).toString());\n          String featureValue = null;\n          if (fs instanceof Annotation && \"coveredText\".equals(featureName)) {\n            featureValue = ((Annotation) fs).getCoveredText();\n          } else {\n            featureValue = fs.getFeatureValueAsString(type.getFeatureByBaseName(featureName));\n          }\n          log.info(new StringBuffer(\"writing \").append(featureValue).append(\" in \").append(\n              fieldName).toString());\n          document.addField(fieldName, featureValue, 1.0f);\n        }\n      }\n    } catch (Exception e) {\n      throw new FieldMappingException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1666c200b3ff3c0815e008837f4303277a06ee1","date":1348164646,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAToSolrMapper#map(String,Map[String,MapField]).mjava","pathOld":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAToSolrMapper#map(String,Map[String,MapField]).mjava","sourceNew":"  /**\n   * map features of a certain UIMA type to corresponding Solr fields based on the mapping\n   *\n   * @param typeName             name of UIMA type to map\n   * @param featureFieldsmapping\n   */\n  void map(String typeName, Map<String, MapField> featureFieldsmapping) throws FieldMappingException {\n    try {\n      Type type = cas.getTypeSystem().getType(typeName);\n      for (FSIterator<FeatureStructure> iterator = cas.getFSIndexRepository().getAllIndexedFS(type); iterator\n          .hasNext(); ) {\n        FeatureStructure fs = iterator.next();\n        for (String featureName : featureFieldsmapping.keySet()) {\n          MapField mapField = featureFieldsmapping.get(featureName);\n          String fieldNameFeature = mapField.getFieldNameFeature();\n          String fieldNameFeatureValue = fieldNameFeature == null ? null :\n              fs.getFeatureValueAsString(type.getFeatureByBaseName(fieldNameFeature));\n          String fieldName = mapField.getFieldName(fieldNameFeatureValue);\n          log.info(new StringBuffer(\"mapping \").append(typeName).append(\"@\").append(featureName)\n              .append(\" to \").append(fieldName).toString());\n          String featureValue = null;\n          if (fs instanceof Annotation && \"coveredText\".equals(featureName)) {\n            featureValue = ((Annotation) fs).getCoveredText();\n          } else {\n            featureValue = fs.getFeatureValueAsString(type.getFeatureByBaseName(featureName));\n          }\n          log.info(new StringBuffer(\"writing \").append(featureValue).append(\" in \").append(\n              fieldName).toString());\n          document.addField(fieldName, featureValue, 1.0f);\n        }\n      }\n    } catch (Exception e) {\n      throw new FieldMappingException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * map features of a certain UIMA type to corresponding Solr fields based on the mapping\n   *\n   * @param typeName             name of UIMA type to map\n   * @param featureFieldsmapping\n   */\n  public void map(String typeName, Map<String, MapField> featureFieldsmapping) throws FieldMappingException {\n    try {\n      Type type = cas.getTypeSystem().getType(typeName);\n      for (FSIterator<FeatureStructure> iterator = cas.getFSIndexRepository().getAllIndexedFS(type); iterator\n          .hasNext(); ) {\n        FeatureStructure fs = iterator.next();\n        for (String featureName : featureFieldsmapping.keySet()) {\n          MapField mapField = featureFieldsmapping.get(featureName);\n          String fieldNameFeature = mapField.getFieldNameFeature();\n          String fieldNameFeatureValue = fieldNameFeature == null ? null :\n              fs.getFeatureValueAsString(type.getFeatureByBaseName(fieldNameFeature));\n          String fieldName = mapField.getFieldName(fieldNameFeatureValue);\n          log.info(new StringBuffer(\"mapping \").append(typeName).append(\"@\").append(featureName)\n              .append(\" to \").append(fieldName).toString());\n          String featureValue = null;\n          if (fs instanceof Annotation && \"coveredText\".equals(featureName)) {\n            featureValue = ((Annotation) fs).getCoveredText();\n          } else {\n            featureValue = fs.getFeatureValueAsString(type.getFeatureByBaseName(featureName));\n          }\n          log.info(new StringBuffer(\"writing \").append(featureValue).append(\" in \").append(\n              fieldName).toString());\n          document.addField(fieldName, featureValue, 1.0f);\n        }\n      }\n    } catch (Exception e) {\n      throw new FieldMappingException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2b646be8c735de0184f7ba665b25204ad7091c2","date":1348184278,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAToSolrMapper#map(String,Map[String,MapField]).mjava","pathOld":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAToSolrMapper#map(String,Map[String,MapField]).mjava","sourceNew":"  /**\n   * map features of a certain UIMA type to corresponding Solr fields based on the mapping\n   *\n   * @param typeName             name of UIMA type to map\n   * @param featureFieldsmapping\n   */\n  void map(String typeName, Map<String, MapField> featureFieldsmapping) throws FieldMappingException {\n    try {\n      Type type = cas.getTypeSystem().getType(typeName);\n      for (FSIterator<FeatureStructure> iterator = cas.getFSIndexRepository().getAllIndexedFS(type); iterator\n          .hasNext(); ) {\n        FeatureStructure fs = iterator.next();\n        for (String featureName : featureFieldsmapping.keySet()) {\n          MapField mapField = featureFieldsmapping.get(featureName);\n          String fieldNameFeature = mapField.getFieldNameFeature();\n          String fieldNameFeatureValue = fieldNameFeature == null ? null :\n              fs.getFeatureValueAsString(type.getFeatureByBaseName(fieldNameFeature));\n          String fieldName = mapField.getFieldName(fieldNameFeatureValue);\n          log.info(new StringBuffer(\"mapping \").append(typeName).append(\"@\").append(featureName)\n              .append(\" to \").append(fieldName).toString());\n          String featureValue = null;\n          if (fs instanceof Annotation && \"coveredText\".equals(featureName)) {\n            featureValue = ((Annotation) fs).getCoveredText();\n          } else {\n            featureValue = fs.getFeatureValueAsString(type.getFeatureByBaseName(featureName));\n          }\n          log.info(new StringBuffer(\"writing \").append(featureValue).append(\" in \").append(\n              fieldName).toString());\n          document.addField(fieldName, featureValue, 1.0f);\n        }\n      }\n    } catch (Exception e) {\n      throw new FieldMappingException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * map features of a certain UIMA type to corresponding Solr fields based on the mapping\n   *\n   * @param typeName             name of UIMA type to map\n   * @param featureFieldsmapping\n   */\n  public void map(String typeName, Map<String, MapField> featureFieldsmapping) throws FieldMappingException {\n    try {\n      Type type = cas.getTypeSystem().getType(typeName);\n      for (FSIterator<FeatureStructure> iterator = cas.getFSIndexRepository().getAllIndexedFS(type); iterator\n          .hasNext(); ) {\n        FeatureStructure fs = iterator.next();\n        for (String featureName : featureFieldsmapping.keySet()) {\n          MapField mapField = featureFieldsmapping.get(featureName);\n          String fieldNameFeature = mapField.getFieldNameFeature();\n          String fieldNameFeatureValue = fieldNameFeature == null ? null :\n              fs.getFeatureValueAsString(type.getFeatureByBaseName(fieldNameFeature));\n          String fieldName = mapField.getFieldName(fieldNameFeatureValue);\n          log.info(new StringBuffer(\"mapping \").append(typeName).append(\"@\").append(featureName)\n              .append(\" to \").append(fieldName).toString());\n          String featureValue = null;\n          if (fs instanceof Annotation && \"coveredText\".equals(featureName)) {\n            featureValue = ((Annotation) fs).getCoveredText();\n          } else {\n            featureValue = fs.getFeatureValueAsString(type.getFeatureByBaseName(featureName));\n          }\n          log.info(new StringBuffer(\"writing \").append(featureValue).append(\" in \").append(\n              fieldName).toString());\n          document.addField(fieldName, featureValue, 1.0f);\n        }\n      }\n    } catch (Exception e) {\n      throw new FieldMappingException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAToSolrMapper#map(String,Map[String,MapField]).mjava","pathOld":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAToSolrMapper#map(String,Map[String,MapField]).mjava","sourceNew":"  /**\n   * map features of a certain UIMA type to corresponding Solr fields based on the mapping\n   *\n   * @param typeName             name of UIMA type to map\n   */\n  void map(String typeName, Map<String, MapField> featureFieldsmapping) throws FieldMappingException {\n    try {\n      Type type = cas.getTypeSystem().getType(typeName);\n      for (FSIterator<FeatureStructure> iterator = cas.getFSIndexRepository().getAllIndexedFS(type); iterator\n          .hasNext(); ) {\n        FeatureStructure fs = iterator.next();\n        for (String featureName : featureFieldsmapping.keySet()) {\n          MapField mapField = featureFieldsmapping.get(featureName);\n          String fieldNameFeature = mapField.getFieldNameFeature();\n          String fieldNameFeatureValue = fieldNameFeature == null ? null :\n              fs.getFeatureValueAsString(type.getFeatureByBaseName(fieldNameFeature));\n          String fieldName = mapField.getFieldName(fieldNameFeatureValue);\n          log.info(new StringBuffer(\"mapping \").append(typeName).append(\"@\").append(featureName)\n              .append(\" to \").append(fieldName).toString());\n          String featureValue = null;\n          if (fs instanceof Annotation && \"coveredText\".equals(featureName)) {\n            featureValue = ((Annotation) fs).getCoveredText();\n          } else {\n            featureValue = fs.getFeatureValueAsString(type.getFeatureByBaseName(featureName));\n          }\n          log.info(new StringBuffer(\"writing \").append(featureValue).append(\" in \").append(\n              fieldName).toString());\n          document.addField(fieldName, featureValue, 1.0f);\n        }\n      }\n    } catch (Exception e) {\n      throw new FieldMappingException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * map features of a certain UIMA type to corresponding Solr fields based on the mapping\n   *\n   * @param typeName             name of UIMA type to map\n   * @param featureFieldsmapping\n   */\n  void map(String typeName, Map<String, MapField> featureFieldsmapping) throws FieldMappingException {\n    try {\n      Type type = cas.getTypeSystem().getType(typeName);\n      for (FSIterator<FeatureStructure> iterator = cas.getFSIndexRepository().getAllIndexedFS(type); iterator\n          .hasNext(); ) {\n        FeatureStructure fs = iterator.next();\n        for (String featureName : featureFieldsmapping.keySet()) {\n          MapField mapField = featureFieldsmapping.get(featureName);\n          String fieldNameFeature = mapField.getFieldNameFeature();\n          String fieldNameFeatureValue = fieldNameFeature == null ? null :\n              fs.getFeatureValueAsString(type.getFeatureByBaseName(fieldNameFeature));\n          String fieldName = mapField.getFieldName(fieldNameFeatureValue);\n          log.info(new StringBuffer(\"mapping \").append(typeName).append(\"@\").append(featureName)\n              .append(\" to \").append(fieldName).toString());\n          String featureValue = null;\n          if (fs instanceof Annotation && \"coveredText\".equals(featureName)) {\n            featureValue = ((Annotation) fs).getCoveredText();\n          } else {\n            featureValue = fs.getFeatureValueAsString(type.getFeatureByBaseName(featureName));\n          }\n          log.info(new StringBuffer(\"writing \").append(featureValue).append(\" in \").append(\n              fieldName).toString());\n          document.addField(fieldName, featureValue, 1.0f);\n        }\n      }\n    } catch (Exception e) {\n      throw new FieldMappingException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d45d2ab8ae4e9969914b9c8a761a4cb3a23634c2","date":1350024115,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAToSolrMapper#map(String,Map[String,MapField]).mjava","pathOld":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAToSolrMapper#map(String,Map[String,MapField]).mjava","sourceNew":"  /**\n   * map features of a certain UIMA type to corresponding Solr fields based on the mapping\n   *\n   * @param typeName             name of UIMA type to map\n   */\n  void map(String typeName, Map<String, MapField> featureFieldsmapping) throws FieldMappingException {\n    try {\n      Type type = cas.getTypeSystem().getType(typeName);\n      for (FSIterator<FeatureStructure> iterator = cas.getFSIndexRepository().getAllIndexedFS(type); iterator\n          .hasNext(); ) {\n        FeatureStructure fs = iterator.next();\n        for (String featureName : featureFieldsmapping.keySet()) {\n          MapField mapField = featureFieldsmapping.get(featureName);\n          String fieldNameFeature = mapField.getFieldNameFeature();\n          String fieldNameFeatureValue = fieldNameFeature == null ? null :\n              fs.getFeatureValueAsString(type.getFeatureByBaseName(fieldNameFeature));\n          String fieldName = mapField.getFieldName(fieldNameFeatureValue);\n          log.info(new StringBuilder(\"mapping \").append(typeName).append(\"@\").append(featureName)\n              .append(\" to \").append(fieldName).toString());\n          String featureValue;\n          if (fs instanceof Annotation && \"coveredText\".equals(featureName)) {\n            featureValue = ((Annotation) fs).getCoveredText();\n          } else {\n            featureValue = fs.getFeatureValueAsString(type.getFeatureByBaseName(featureName));\n          }\n          log.info(new StringBuilder(\"writing \").append(featureValue).append(\" in \").append(\n              fieldName).toString());\n          document.addField(fieldName, featureValue, 1.0f);\n        }\n      }\n    } catch (Exception e) {\n      throw new FieldMappingException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * map features of a certain UIMA type to corresponding Solr fields based on the mapping\n   *\n   * @param typeName             name of UIMA type to map\n   */\n  void map(String typeName, Map<String, MapField> featureFieldsmapping) throws FieldMappingException {\n    try {\n      Type type = cas.getTypeSystem().getType(typeName);\n      for (FSIterator<FeatureStructure> iterator = cas.getFSIndexRepository().getAllIndexedFS(type); iterator\n          .hasNext(); ) {\n        FeatureStructure fs = iterator.next();\n        for (String featureName : featureFieldsmapping.keySet()) {\n          MapField mapField = featureFieldsmapping.get(featureName);\n          String fieldNameFeature = mapField.getFieldNameFeature();\n          String fieldNameFeatureValue = fieldNameFeature == null ? null :\n              fs.getFeatureValueAsString(type.getFeatureByBaseName(fieldNameFeature));\n          String fieldName = mapField.getFieldName(fieldNameFeatureValue);\n          log.info(new StringBuffer(\"mapping \").append(typeName).append(\"@\").append(featureName)\n              .append(\" to \").append(fieldName).toString());\n          String featureValue = null;\n          if (fs instanceof Annotation && \"coveredText\".equals(featureName)) {\n            featureValue = ((Annotation) fs).getCoveredText();\n          } else {\n            featureValue = fs.getFeatureValueAsString(type.getFeatureByBaseName(featureName));\n          }\n          log.info(new StringBuffer(\"writing \").append(featureValue).append(\" in \").append(\n              fieldName).toString());\n          document.addField(fieldName, featureValue, 1.0f);\n        }\n      }\n    } catch (Exception e) {\n      throw new FieldMappingException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6efad415dcdbcca7d440f909743e6e3152eeb6c0","date":1350055371,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAToSolrMapper#map(String,Map[String,MapField]).mjava","pathOld":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAToSolrMapper#map(String,Map[String,MapField]).mjava","sourceNew":"  /**\n   * map features of a certain UIMA type to corresponding Solr fields based on the mapping\n   *\n   * @param typeName             name of UIMA type to map\n   */\n  void map(String typeName, Map<String, MapField> featureFieldsmapping) throws FieldMappingException {\n    try {\n      Type type = cas.getTypeSystem().getType(typeName);\n      for (FSIterator<FeatureStructure> iterator = cas.getFSIndexRepository().getAllIndexedFS(type); iterator\n          .hasNext(); ) {\n        FeatureStructure fs = iterator.next();\n        for (String featureName : featureFieldsmapping.keySet()) {\n          MapField mapField = featureFieldsmapping.get(featureName);\n          String fieldNameFeature = mapField.getFieldNameFeature();\n          String fieldNameFeatureValue = fieldNameFeature == null ? null :\n              fs.getFeatureValueAsString(type.getFeatureByBaseName(fieldNameFeature));\n          String fieldName = mapField.getFieldName(fieldNameFeatureValue);\n          log.info(new StringBuilder(\"mapping \").append(typeName).append(\"@\").append(featureName)\n              .append(\" to \").append(fieldName).toString());\n          String featureValue;\n          if (fs instanceof Annotation && \"coveredText\".equals(featureName)) {\n            featureValue = ((Annotation) fs).getCoveredText();\n          } else {\n            featureValue = fs.getFeatureValueAsString(type.getFeatureByBaseName(featureName));\n          }\n          log.info(new StringBuilder(\"writing \").append(featureValue).append(\" in \").append(\n              fieldName).toString());\n          document.addField(fieldName, featureValue, 1.0f);\n        }\n      }\n    } catch (Exception e) {\n      throw new FieldMappingException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * map features of a certain UIMA type to corresponding Solr fields based on the mapping\n   *\n   * @param typeName             name of UIMA type to map\n   */\n  void map(String typeName, Map<String, MapField> featureFieldsmapping) throws FieldMappingException {\n    try {\n      Type type = cas.getTypeSystem().getType(typeName);\n      for (FSIterator<FeatureStructure> iterator = cas.getFSIndexRepository().getAllIndexedFS(type); iterator\n          .hasNext(); ) {\n        FeatureStructure fs = iterator.next();\n        for (String featureName : featureFieldsmapping.keySet()) {\n          MapField mapField = featureFieldsmapping.get(featureName);\n          String fieldNameFeature = mapField.getFieldNameFeature();\n          String fieldNameFeatureValue = fieldNameFeature == null ? null :\n              fs.getFeatureValueAsString(type.getFeatureByBaseName(fieldNameFeature));\n          String fieldName = mapField.getFieldName(fieldNameFeatureValue);\n          log.info(new StringBuffer(\"mapping \").append(typeName).append(\"@\").append(featureName)\n              .append(\" to \").append(fieldName).toString());\n          String featureValue = null;\n          if (fs instanceof Annotation && \"coveredText\".equals(featureName)) {\n            featureValue = ((Annotation) fs).getCoveredText();\n          } else {\n            featureValue = fs.getFeatureValueAsString(type.getFeatureByBaseName(featureName));\n          }\n          log.info(new StringBuffer(\"writing \").append(featureValue).append(\" in \").append(\n              fieldName).toString());\n          document.addField(fieldName, featureValue, 1.0f);\n        }\n      }\n    } catch (Exception e) {\n      throw new FieldMappingException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d82832af39f94dbb58a3130fd216ff1d49435589","date":1350147242,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAToSolrMapper#map(String,Map[String,MapField]).mjava","pathOld":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAToSolrMapper#map(String,Map[String,MapField]).mjava","sourceNew":"  /**\n   * map features of a certain UIMA type to corresponding Solr fields based on the mapping\n   *\n   * @param typeName             name of UIMA type to map\n   */\n  void map(String typeName, Map<String, MapField> featureFieldsmapping) throws FieldMappingException {\n    try {\n      Type type = cas.getTypeSystem().getType(typeName);\n      for (FSIterator<FeatureStructure> iterator = cas.getFSIndexRepository().getAllIndexedFS(type); iterator\n          .hasNext(); ) {\n        FeatureStructure fs = iterator.next();\n        for (String featureName : featureFieldsmapping.keySet()) {\n          MapField mapField = featureFieldsmapping.get(featureName);\n          String fieldNameFeature = mapField.getFieldNameFeature();\n          String fieldNameFeatureValue = fieldNameFeature == null ? null :\n              fs.getFeatureValueAsString(type.getFeatureByBaseName(fieldNameFeature));\n          String fieldName = mapField.getFieldName(fieldNameFeatureValue);\n          log.info(new StringBuilder(\"mapping \").append(typeName).append(\"@\").append(featureName)\n              .append(\" to \").append(fieldName).toString());\n          String featureValue;\n          if (fs instanceof Annotation && \"coveredText\".equals(featureName)) {\n            featureValue = ((Annotation) fs).getCoveredText();\n          } else {\n            featureValue = fs.getFeatureValueAsString(type.getFeatureByBaseName(featureName));\n          }\n          log.info(new StringBuilder(\"writing \").append(featureValue).append(\" in \").append(\n              fieldName).toString());\n          document.addField(fieldName, featureValue, 1.0f);\n        }\n      }\n    } catch (Exception e) {\n      throw new FieldMappingException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * map features of a certain UIMA type to corresponding Solr fields based on the mapping\n   *\n   * @param typeName             name of UIMA type to map\n   */\n  void map(String typeName, Map<String, MapField> featureFieldsmapping) throws FieldMappingException {\n    try {\n      Type type = cas.getTypeSystem().getType(typeName);\n      for (FSIterator<FeatureStructure> iterator = cas.getFSIndexRepository().getAllIndexedFS(type); iterator\n          .hasNext(); ) {\n        FeatureStructure fs = iterator.next();\n        for (String featureName : featureFieldsmapping.keySet()) {\n          MapField mapField = featureFieldsmapping.get(featureName);\n          String fieldNameFeature = mapField.getFieldNameFeature();\n          String fieldNameFeatureValue = fieldNameFeature == null ? null :\n              fs.getFeatureValueAsString(type.getFeatureByBaseName(fieldNameFeature));\n          String fieldName = mapField.getFieldName(fieldNameFeatureValue);\n          log.info(new StringBuffer(\"mapping \").append(typeName).append(\"@\").append(featureName)\n              .append(\" to \").append(fieldName).toString());\n          String featureValue = null;\n          if (fs instanceof Annotation && \"coveredText\".equals(featureName)) {\n            featureValue = ((Annotation) fs).getCoveredText();\n          } else {\n            featureValue = fs.getFeatureValueAsString(type.getFeatureByBaseName(featureName));\n          }\n          log.info(new StringBuffer(\"writing \").append(featureValue).append(\" in \").append(\n              fieldName).toString());\n          document.addField(fieldName, featureValue, 1.0f);\n        }\n      }\n    } catch (Exception e) {\n      throw new FieldMappingException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8b89d944e345b12f5e7f35159704a6b8fbb3975","date":1369726533,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAToSolrMapper#map(String,Map[String,MapField]).mjava","pathOld":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAToSolrMapper#map(String,Map[String,MapField]).mjava","sourceNew":"  /**\n   * map features of a certain UIMA type to corresponding Solr fields based on the mapping\n   *\n   * @param typeName             name of UIMA type to map\n   */\n  void map(String typeName, Map<String, MapField> featureFieldsmapping) throws FieldMappingException {\n    try {\n      Type type = cas.getTypeSystem().getType(typeName);\n      for (FSIterator<FeatureStructure> iterator = cas.getFSIndexRepository().getAllIndexedFS(type); iterator\n          .hasNext(); ) {\n        FeatureStructure fs = iterator.next();\n        for (String featureName : featureFieldsmapping.keySet()) {\n          MapField mapField = featureFieldsmapping.get(featureName);\n          String fieldNameFeature = mapField.getFieldNameFeature();\n          String fieldNameFeatureValue = fieldNameFeature == null ? null :\n              fs.getFeatureValueAsString(type.getFeatureByBaseName(fieldNameFeature));\n          String fieldName = mapField.getFieldName(fieldNameFeatureValue);\n          if (log.isInfoEnabled()) {\n            log.info(\"mapping {}@{} to {}\", new Object[]{typeName, featureName, fieldName});\n          }\n          String featureValue;\n          if (fs instanceof Annotation && \"coveredText\".equals(featureName)) {\n            featureValue = ((Annotation) fs).getCoveredText();\n          } else {\n            featureValue = fs.getFeatureValueAsString(type.getFeatureByBaseName(featureName));\n          }\n          if (log.isDebugEnabled()) {\n            log.debug(\"writing {} in {}\", new Object[]{featureValue, fieldName});\n          }\n          document.addField(fieldName, featureValue, 1.0f);\n        }\n      }\n    } catch (Exception e) {\n      throw new FieldMappingException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * map features of a certain UIMA type to corresponding Solr fields based on the mapping\n   *\n   * @param typeName             name of UIMA type to map\n   */\n  void map(String typeName, Map<String, MapField> featureFieldsmapping) throws FieldMappingException {\n    try {\n      Type type = cas.getTypeSystem().getType(typeName);\n      for (FSIterator<FeatureStructure> iterator = cas.getFSIndexRepository().getAllIndexedFS(type); iterator\n          .hasNext(); ) {\n        FeatureStructure fs = iterator.next();\n        for (String featureName : featureFieldsmapping.keySet()) {\n          MapField mapField = featureFieldsmapping.get(featureName);\n          String fieldNameFeature = mapField.getFieldNameFeature();\n          String fieldNameFeatureValue = fieldNameFeature == null ? null :\n              fs.getFeatureValueAsString(type.getFeatureByBaseName(fieldNameFeature));\n          String fieldName = mapField.getFieldName(fieldNameFeatureValue);\n          log.info(new StringBuilder(\"mapping \").append(typeName).append(\"@\").append(featureName)\n              .append(\" to \").append(fieldName).toString());\n          String featureValue;\n          if (fs instanceof Annotation && \"coveredText\".equals(featureName)) {\n            featureValue = ((Annotation) fs).getCoveredText();\n          } else {\n            featureValue = fs.getFeatureValueAsString(type.getFeatureByBaseName(featureName));\n          }\n          log.info(new StringBuilder(\"writing \").append(featureValue).append(\" in \").append(\n              fieldName).toString());\n          document.addField(fieldName, featureValue, 1.0f);\n        }\n      }\n    } catch (Exception e) {\n      throw new FieldMappingException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAToSolrMapper#map(String,Map[String,MapField]).mjava","pathOld":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAToSolrMapper#map(String,Map[String,MapField]).mjava","sourceNew":"  /**\n   * map features of a certain UIMA type to corresponding Solr fields based on the mapping\n   *\n   * @param typeName             name of UIMA type to map\n   */\n  void map(String typeName, Map<String, MapField> featureFieldsmapping) throws FieldMappingException {\n    try {\n      Type type = cas.getTypeSystem().getType(typeName);\n      for (FSIterator<FeatureStructure> iterator = cas.getFSIndexRepository().getAllIndexedFS(type); iterator\n          .hasNext(); ) {\n        FeatureStructure fs = iterator.next();\n        for (String featureName : featureFieldsmapping.keySet()) {\n          MapField mapField = featureFieldsmapping.get(featureName);\n          String fieldNameFeature = mapField.getFieldNameFeature();\n          String fieldNameFeatureValue = fieldNameFeature == null ? null :\n              fs.getFeatureValueAsString(type.getFeatureByBaseName(fieldNameFeature));\n          String fieldName = mapField.getFieldName(fieldNameFeatureValue);\n          if (log.isInfoEnabled()) {\n            log.info(\"mapping {}@{} to {}\", new Object[]{typeName, featureName, fieldName});\n          }\n          String featureValue;\n          if (fs instanceof Annotation && \"coveredText\".equals(featureName)) {\n            featureValue = ((Annotation) fs).getCoveredText();\n          } else {\n            featureValue = fs.getFeatureValueAsString(type.getFeatureByBaseName(featureName));\n          }\n          if (log.isDebugEnabled()) {\n            log.debug(\"writing {} in {}\", new Object[]{featureValue, fieldName});\n          }\n          document.addField(fieldName, featureValue);\n        }\n      }\n    } catch (Exception e) {\n      throw new FieldMappingException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * map features of a certain UIMA type to corresponding Solr fields based on the mapping\n   *\n   * @param typeName             name of UIMA type to map\n   */\n  void map(String typeName, Map<String, MapField> featureFieldsmapping) throws FieldMappingException {\n    try {\n      Type type = cas.getTypeSystem().getType(typeName);\n      for (FSIterator<FeatureStructure> iterator = cas.getFSIndexRepository().getAllIndexedFS(type); iterator\n          .hasNext(); ) {\n        FeatureStructure fs = iterator.next();\n        for (String featureName : featureFieldsmapping.keySet()) {\n          MapField mapField = featureFieldsmapping.get(featureName);\n          String fieldNameFeature = mapField.getFieldNameFeature();\n          String fieldNameFeatureValue = fieldNameFeature == null ? null :\n              fs.getFeatureValueAsString(type.getFeatureByBaseName(fieldNameFeature));\n          String fieldName = mapField.getFieldName(fieldNameFeatureValue);\n          if (log.isInfoEnabled()) {\n            log.info(\"mapping {}@{} to {}\", new Object[]{typeName, featureName, fieldName});\n          }\n          String featureValue;\n          if (fs instanceof Annotation && \"coveredText\".equals(featureName)) {\n            featureValue = ((Annotation) fs).getCoveredText();\n          } else {\n            featureValue = fs.getFeatureValueAsString(type.getFeatureByBaseName(featureName));\n          }\n          if (log.isDebugEnabled()) {\n            log.debug(\"writing {} in {}\", new Object[]{featureValue, fieldName});\n          }\n          document.addField(fieldName, featureValue, 1.0f);\n        }\n      }\n    } catch (Exception e) {\n      throw new FieldMappingException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c9a6ea78b00a421744e770568d8c2aab262e4cd","date":1530971937,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAToSolrMapper#map(String,Map[String,MapField]).mjava","sourceNew":null,"sourceOld":"  /**\n   * map features of a certain UIMA type to corresponding Solr fields based on the mapping\n   *\n   * @param typeName             name of UIMA type to map\n   */\n  void map(String typeName, Map<String, MapField> featureFieldsmapping) throws FieldMappingException {\n    try {\n      Type type = cas.getTypeSystem().getType(typeName);\n      for (FSIterator<FeatureStructure> iterator = cas.getFSIndexRepository().getAllIndexedFS(type); iterator\n          .hasNext(); ) {\n        FeatureStructure fs = iterator.next();\n        for (String featureName : featureFieldsmapping.keySet()) {\n          MapField mapField = featureFieldsmapping.get(featureName);\n          String fieldNameFeature = mapField.getFieldNameFeature();\n          String fieldNameFeatureValue = fieldNameFeature == null ? null :\n              fs.getFeatureValueAsString(type.getFeatureByBaseName(fieldNameFeature));\n          String fieldName = mapField.getFieldName(fieldNameFeatureValue);\n          if (log.isInfoEnabled()) {\n            log.info(\"mapping {}@{} to {}\", new Object[]{typeName, featureName, fieldName});\n          }\n          String featureValue;\n          if (fs instanceof Annotation && \"coveredText\".equals(featureName)) {\n            featureValue = ((Annotation) fs).getCoveredText();\n          } else {\n            featureValue = fs.getFeatureValueAsString(type.getFeatureByBaseName(featureName));\n          }\n          if (log.isDebugEnabled()) {\n            log.debug(\"writing {} in {}\", new Object[]{featureValue, fieldName});\n          }\n          document.addField(fieldName, featureValue);\n        }\n      }\n    } catch (Exception e) {\n      throw new FieldMappingException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":4,"author":"Michael Braun","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAToSolrMapper#map(String,Map[String,MapField]).mjava","sourceNew":null,"sourceOld":"  /**\n   * map features of a certain UIMA type to corresponding Solr fields based on the mapping\n   *\n   * @param typeName             name of UIMA type to map\n   */\n  void map(String typeName, Map<String, MapField> featureFieldsmapping) throws FieldMappingException {\n    try {\n      Type type = cas.getTypeSystem().getType(typeName);\n      for (FSIterator<FeatureStructure> iterator = cas.getFSIndexRepository().getAllIndexedFS(type); iterator\n          .hasNext(); ) {\n        FeatureStructure fs = iterator.next();\n        for (String featureName : featureFieldsmapping.keySet()) {\n          MapField mapField = featureFieldsmapping.get(featureName);\n          String fieldNameFeature = mapField.getFieldNameFeature();\n          String fieldNameFeatureValue = fieldNameFeature == null ? null :\n              fs.getFeatureValueAsString(type.getFeatureByBaseName(fieldNameFeature));\n          String fieldName = mapField.getFieldName(fieldNameFeatureValue);\n          if (log.isInfoEnabled()) {\n            log.info(\"mapping {}@{} to {}\", new Object[]{typeName, featureName, fieldName});\n          }\n          String featureValue;\n          if (fs instanceof Annotation && \"coveredText\".equals(featureName)) {\n            featureValue = ((Annotation) fs).getCoveredText();\n          } else {\n            featureValue = fs.getFeatureValueAsString(type.getFeatureByBaseName(featureName));\n          }\n          if (log.isDebugEnabled()) {\n            log.debug(\"writing {} in {}\", new Object[]{featureValue, fieldName});\n          }\n          document.addField(fieldName, featureValue);\n        }\n      }\n    } catch (Exception e) {\n      throw new FieldMappingException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":4,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAToSolrMapper#map(String,Map[String,MapField]).mjava","sourceNew":null,"sourceOld":"  /**\n   * map features of a certain UIMA type to corresponding Solr fields based on the mapping\n   *\n   * @param typeName             name of UIMA type to map\n   */\n  void map(String typeName, Map<String, MapField> featureFieldsmapping) throws FieldMappingException {\n    try {\n      Type type = cas.getTypeSystem().getType(typeName);\n      for (FSIterator<FeatureStructure> iterator = cas.getFSIndexRepository().getAllIndexedFS(type); iterator\n          .hasNext(); ) {\n        FeatureStructure fs = iterator.next();\n        for (String featureName : featureFieldsmapping.keySet()) {\n          MapField mapField = featureFieldsmapping.get(featureName);\n          String fieldNameFeature = mapField.getFieldNameFeature();\n          String fieldNameFeatureValue = fieldNameFeature == null ? null :\n              fs.getFeatureValueAsString(type.getFeatureByBaseName(fieldNameFeature));\n          String fieldName = mapField.getFieldName(fieldNameFeatureValue);\n          if (log.isInfoEnabled()) {\n            log.info(\"mapping {}@{} to {}\", new Object[]{typeName, featureName, fieldName});\n          }\n          String featureValue;\n          if (fs instanceof Annotation && \"coveredText\".equals(featureName)) {\n            featureValue = ((Annotation) fs).getCoveredText();\n          } else {\n            featureValue = fs.getFeatureValueAsString(type.getFeatureByBaseName(featureName));\n          }\n          if (log.isDebugEnabled()) {\n            log.debug(\"writing {} in {}\", new Object[]{featureValue, fieldName});\n          }\n          document.addField(fieldName, featureValue);\n        }\n      }\n    } catch (Exception e) {\n      throw new FieldMappingException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["f2b646be8c735de0184f7ba665b25204ad7091c2"],"f2b646be8c735de0184f7ba665b25204ad7091c2":["c26f00b574427b55127e869b935845554afde1fa","f1666c200b3ff3c0815e008837f4303277a06ee1"],"f1666c200b3ff3c0815e008837f4303277a06ee1":["c26f00b574427b55127e869b935845554afde1fa"],"d45d2ab8ae4e9969914b9c8a761a4cb3a23634c2":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9ed208afa1e7aa98899ddb1dedfddedddf898253"],"f8b89d944e345b12f5e7f35159704a6b8fbb3975":["d45d2ab8ae4e9969914b9c8a761a4cb3a23634c2"],"9ed208afa1e7aa98899ddb1dedfddedddf898253":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8c9a6ea78b00a421744e770568d8c2aab262e4cd":["acd9883560fd89e6448b2b447302fe543040cd4f"],"6efad415dcdbcca7d440f909743e6e3152eeb6c0":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","d45d2ab8ae4e9969914b9c8a761a4cb3a23634c2"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["acd9883560fd89e6448b2b447302fe543040cd4f","8c9a6ea78b00a421744e770568d8c2aab262e4cd"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d82832af39f94dbb58a3130fd216ff1d49435589":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","d45d2ab8ae4e9969914b9c8a761a4cb3a23634c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"acd9883560fd89e6448b2b447302fe543040cd4f":["f8b89d944e345b12f5e7f35159704a6b8fbb3975"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8c9a6ea78b00a421744e770568d8c2aab262e4cd"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["acd9883560fd89e6448b2b447302fe543040cd4f","8c9a6ea78b00a421744e770568d8c2aab262e4cd"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["d45d2ab8ae4e9969914b9c8a761a4cb3a23634c2","6efad415dcdbcca7d440f909743e6e3152eeb6c0","d82832af39f94dbb58a3130fd216ff1d49435589"],"f2b646be8c735de0184f7ba665b25204ad7091c2":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"f1666c200b3ff3c0815e008837f4303277a06ee1":["f2b646be8c735de0184f7ba665b25204ad7091c2"],"d45d2ab8ae4e9969914b9c8a761a4cb3a23634c2":["f8b89d944e345b12f5e7f35159704a6b8fbb3975","6efad415dcdbcca7d440f909743e6e3152eeb6c0","d82832af39f94dbb58a3130fd216ff1d49435589"],"c26f00b574427b55127e869b935845554afde1fa":["f2b646be8c735de0184f7ba665b25204ad7091c2","f1666c200b3ff3c0815e008837f4303277a06ee1"],"f8b89d944e345b12f5e7f35159704a6b8fbb3975":["acd9883560fd89e6448b2b447302fe543040cd4f"],"9ed208afa1e7aa98899ddb1dedfddedddf898253":["c26f00b574427b55127e869b935845554afde1fa"],"8c9a6ea78b00a421744e770568d8c2aab262e4cd":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"6efad415dcdbcca7d440f909743e6e3152eeb6c0":[],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["9ed208afa1e7aa98899ddb1dedfddedddf898253"],"d82832af39f94dbb58a3130fd216ff1d49435589":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","9ed208afa1e7aa98899ddb1dedfddedddf898253","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"acd9883560fd89e6448b2b447302fe543040cd4f":["8c9a6ea78b00a421744e770568d8c2aab262e4cd","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["6efad415dcdbcca7d440f909743e6e3152eeb6c0","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","d82832af39f94dbb58a3130fd216ff1d49435589","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}