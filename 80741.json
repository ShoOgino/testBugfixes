{"path":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.TermsReader#TermsReader(FieldInfos,IndexInput).mjava","commits":[{"id":"7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc","date":1308411958,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.TermsReader#TermsReader(FieldInfos,IndexInput).mjava","pathOld":"/dev/null","sourceNew":"    public TermsReader(FieldInfos fieldInfos, IndexInput in) throws IOException {\n      final int fieldNumber = in.readVInt();\n      field = fieldInfos.fieldInfo(fieldNumber);\n      if (!field.omitTermFreqAndPositions) {\n        sumTotalTermFreq = in.readVInt();\n      } else {\n        sumTotalTermFreq = 0;\n      }\n      \n      fst = new FST<BytesRef>(in, outputs);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","date":1308439813,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.TermsReader#TermsReader(FieldInfos,IndexInput).mjava","pathOld":"/dev/null","sourceNew":"    public TermsReader(FieldInfos fieldInfos, IndexInput in) throws IOException {\n      final int fieldNumber = in.readVInt();\n      field = fieldInfos.fieldInfo(fieldNumber);\n      if (!field.omitTermFreqAndPositions) {\n        sumTotalTermFreq = in.readVInt();\n      } else {\n        sumTotalTermFreq = 0;\n      }\n      \n      fst = new FST<BytesRef>(in, outputs);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea3113799b0f9b82fbd51ef662a3aef61e169685","date":1310123527,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.TermsReader#TermsReader(FieldInfos,IndexInput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.TermsReader#TermsReader(FieldInfos,IndexInput).mjava","sourceNew":"    public TermsReader(FieldInfos fieldInfos, IndexInput in) throws IOException {\n      final int fieldNumber = in.readVInt();\n      field = fieldInfos.fieldInfo(fieldNumber);\n      if (!field.omitTermFreqAndPositions) {\n        sumTotalTermFreq = in.readVLong();\n      } else {\n        sumTotalTermFreq = 0;\n      }\n      \n      fst = new FST<BytesRef>(in, outputs);\n    }\n\n","sourceOld":"    public TermsReader(FieldInfos fieldInfos, IndexInput in) throws IOException {\n      final int fieldNumber = in.readVInt();\n      field = fieldInfos.fieldInfo(fieldNumber);\n      if (!field.omitTermFreqAndPositions) {\n        sumTotalTermFreq = in.readVInt();\n      } else {\n        sumTotalTermFreq = 0;\n      }\n      \n      fst = new FST<BytesRef>(in, outputs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.TermsReader#TermsReader(FieldInfos,IndexInput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.TermsReader#TermsReader(FieldInfos,IndexInput).mjava","sourceNew":"    public TermsReader(FieldInfos fieldInfos, IndexInput in) throws IOException {\n      final int fieldNumber = in.readVInt();\n      field = fieldInfos.fieldInfo(fieldNumber);\n      if (!field.omitTermFreqAndPositions) {\n        sumTotalTermFreq = in.readVLong();\n      } else {\n        sumTotalTermFreq = 0;\n      }\n      \n      fst = new FST<BytesRef>(in, outputs);\n    }\n\n","sourceOld":"    public TermsReader(FieldInfos fieldInfos, IndexInput in) throws IOException {\n      final int fieldNumber = in.readVInt();\n      field = fieldInfos.fieldInfo(fieldNumber);\n      if (!field.omitTermFreqAndPositions) {\n        sumTotalTermFreq = in.readVInt();\n      } else {\n        sumTotalTermFreq = 0;\n      }\n      \n      fst = new FST<BytesRef>(in, outputs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94","date":1310159023,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.TermsReader#TermsReader(FieldInfos,IndexInput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.TermsReader#TermsReader(FieldInfos,IndexInput).mjava","sourceNew":"    public TermsReader(FieldInfos fieldInfos, IndexInput in) throws IOException {\n      final int fieldNumber = in.readVInt();\n      field = fieldInfos.fieldInfo(fieldNumber);\n      if (!field.omitTermFreqAndPositions) {\n        sumTotalTermFreq = in.readVLong();\n      } else {\n        sumTotalTermFreq = 0;\n      }\n      sumDocFreq = in.readVLong();\n      \n      fst = new FST<BytesRef>(in, outputs);\n    }\n\n","sourceOld":"    public TermsReader(FieldInfos fieldInfos, IndexInput in) throws IOException {\n      final int fieldNumber = in.readVInt();\n      field = fieldInfos.fieldInfo(fieldNumber);\n      if (!field.omitTermFreqAndPositions) {\n        sumTotalTermFreq = in.readVLong();\n      } else {\n        sumTotalTermFreq = 0;\n      }\n      \n      fst = new FST<BytesRef>(in, outputs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63639dd66fd5bd9b90bc24dd596ae01575f27cc4","date":1310237454,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.TermsReader#TermsReader(FieldInfos,IndexInput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.TermsReader#TermsReader(FieldInfos,IndexInput).mjava","sourceNew":"    public TermsReader(FieldInfos fieldInfos, IndexInput in) throws IOException {\n      final int fieldNumber = in.readVInt();\n      field = fieldInfos.fieldInfo(fieldNumber);\n      if (!field.omitTermFreqAndPositions) {\n        sumTotalTermFreq = in.readVLong();\n      } else {\n        sumTotalTermFreq = 0;\n      }\n      sumDocFreq = in.readVLong();\n      \n      fst = new FST<BytesRef>(in, outputs);\n    }\n\n","sourceOld":"    public TermsReader(FieldInfos fieldInfos, IndexInput in) throws IOException {\n      final int fieldNumber = in.readVInt();\n      field = fieldInfos.fieldInfo(fieldNumber);\n      if (!field.omitTermFreqAndPositions) {\n        sumTotalTermFreq = in.readVLong();\n      } else {\n        sumTotalTermFreq = 0;\n      }\n      \n      fst = new FST<BytesRef>(in, outputs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.TermsReader#TermsReader(FieldInfos,IndexInput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.TermsReader#TermsReader(FieldInfos,IndexInput).mjava","sourceNew":"    public TermsReader(FieldInfos fieldInfos, IndexInput in) throws IOException {\n      final int fieldNumber = in.readVInt();\n      field = fieldInfos.fieldInfo(fieldNumber);\n      if (field.indexOptions != IndexOptions.DOCS_ONLY) {\n        sumTotalTermFreq = in.readVLong();\n      } else {\n        sumTotalTermFreq = 0;\n      }\n      sumDocFreq = in.readVLong();\n      \n      fst = new FST<BytesRef>(in, outputs);\n    }\n\n","sourceOld":"    public TermsReader(FieldInfos fieldInfos, IndexInput in) throws IOException {\n      final int fieldNumber = in.readVInt();\n      field = fieldInfos.fieldInfo(fieldNumber);\n      if (!field.omitTermFreqAndPositions) {\n        sumTotalTermFreq = in.readVLong();\n      } else {\n        sumTotalTermFreq = 0;\n      }\n      sumDocFreq = in.readVLong();\n      \n      fst = new FST<BytesRef>(in, outputs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d1c6f669427bd8e9bd8d8ed5f4121fcccae384e","date":1314712686,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.TermsReader#TermsReader(FieldInfos,IndexInput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.TermsReader#TermsReader(FieldInfos,IndexInput).mjava","sourceNew":"    public TermsReader(FieldInfos fieldInfos, IndexInput in) throws IOException {\n      final int fieldNumber = in.readVInt();\n      field = fieldInfos.fieldInfo(fieldNumber);\n      if (field.indexOptions != IndexOptions.DOCS_ONLY) {\n        sumTotalTermFreq = in.readVLong();\n      } else {\n        sumTotalTermFreq = -1;\n      }\n      sumDocFreq = in.readVLong();\n      \n      fst = new FST<BytesRef>(in, outputs);\n    }\n\n","sourceOld":"    public TermsReader(FieldInfos fieldInfos, IndexInput in) throws IOException {\n      final int fieldNumber = in.readVInt();\n      field = fieldInfos.fieldInfo(fieldNumber);\n      if (field.indexOptions != IndexOptions.DOCS_ONLY) {\n        sumTotalTermFreq = in.readVLong();\n      } else {\n        sumTotalTermFreq = 0;\n      }\n      sumDocFreq = in.readVLong();\n      \n      fst = new FST<BytesRef>(in, outputs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25433c5cacacb7a2055d62d4d36b0daf210e0a10","date":1315747522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.TermsReader#TermsReader(FieldInfos,IndexInput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.TermsReader#TermsReader(FieldInfos,IndexInput).mjava","sourceNew":"    public TermsReader(FieldInfos fieldInfos, IndexInput in) throws IOException {\n      final int fieldNumber = in.readVInt();\n      field = fieldInfos.fieldInfo(fieldNumber);\n      if (field.indexOptions != IndexOptions.DOCS_ONLY) {\n        sumTotalTermFreq = in.readVLong();\n      } else {\n        sumTotalTermFreq = -1;\n      }\n      sumDocFreq = in.readVLong();\n      docCount = in.readVInt();\n      \n      fst = new FST<BytesRef>(in, outputs);\n    }\n\n","sourceOld":"    public TermsReader(FieldInfos fieldInfos, IndexInput in) throws IOException {\n      final int fieldNumber = in.readVInt();\n      field = fieldInfos.fieldInfo(fieldNumber);\n      if (field.indexOptions != IndexOptions.DOCS_ONLY) {\n        sumTotalTermFreq = in.readVLong();\n      } else {\n        sumTotalTermFreq = -1;\n      }\n      sumDocFreq = in.readVLong();\n      \n      fst = new FST<BytesRef>(in, outputs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f458fcb817a740e7906774b7ca2c54d37b34f24f","date":1319501743,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.TermsReader#TermsReader(FieldInfos,IndexInput,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.TermsReader#TermsReader(FieldInfos,IndexInput).mjava","sourceNew":"    public TermsReader(FieldInfos fieldInfos, IndexInput in, int termCount) throws IOException {\n      this.termCount = termCount;\n      final int fieldNumber = in.readVInt();\n      field = fieldInfos.fieldInfo(fieldNumber);\n      if (field.indexOptions != IndexOptions.DOCS_ONLY) {\n        sumTotalTermFreq = in.readVLong();\n      } else {\n        sumTotalTermFreq = -1;\n      }\n      sumDocFreq = in.readVLong();\n      docCount = in.readVInt();\n      \n      fst = new FST<BytesRef>(in, outputs);\n    }\n\n","sourceOld":"    public TermsReader(FieldInfos fieldInfos, IndexInput in) throws IOException {\n      final int fieldNumber = in.readVInt();\n      field = fieldInfos.fieldInfo(fieldNumber);\n      if (field.indexOptions != IndexOptions.DOCS_ONLY) {\n        sumTotalTermFreq = in.readVLong();\n      } else {\n        sumTotalTermFreq = -1;\n      }\n      sumDocFreq = in.readVLong();\n      docCount = in.readVInt();\n      \n      fst = new FST<BytesRef>(in, outputs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94"],"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc"],"25433c5cacacb7a2055d62d4d36b0daf210e0a10":["8d1c6f669427bd8e9bd8d8ed5f4121fcccae384e"],"f458fcb817a740e7906774b7ca2c54d37b34f24f":["25433c5cacacb7a2055d62d4d36b0daf210e0a10"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d1c6f669427bd8e9bd8d8ed5f4121fcccae384e":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","ea3113799b0f9b82fbd51ef662a3aef61e169685"],"f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94":["ea3113799b0f9b82fbd51ef662a3aef61e169685"],"ea3113799b0f9b82fbd51ef662a3aef61e169685":["7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc"],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":["5d004d0e0b3f65bb40da76d476d659d7888270e8","f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f458fcb817a740e7906774b7ca2c54d37b34f24f"],"7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["8d1c6f669427bd8e9bd8d8ed5f4121fcccae384e"],"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"25433c5cacacb7a2055d62d4d36b0daf210e0a10":["f458fcb817a740e7906774b7ca2c54d37b34f24f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc"],"f458fcb817a740e7906774b7ca2c54d37b34f24f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8d1c6f669427bd8e9bd8d8ed5f4121fcccae384e":["25433c5cacacb7a2055d62d4d36b0daf210e0a10"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["63639dd66fd5bd9b90bc24dd596ae01575f27cc4"],"f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94":["2afd23a6f1242190c3409d8d81d5c5912d607fc9","63639dd66fd5bd9b90bc24dd596ae01575f27cc4"],"ea3113799b0f9b82fbd51ef662a3aef61e169685":["5d004d0e0b3f65bb40da76d476d659d7888270e8","f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94"],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":[],"7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","ea3113799b0f9b82fbd51ef662a3aef61e169685"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["63639dd66fd5bd9b90bc24dd596ae01575f27cc4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}