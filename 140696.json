{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/en/PorterStemmer#stem(char[],int,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/en/PorterStemmer#stem(char[],int,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/en/PorterStemmer#stem(char[],int,int).mjava","sourceNew":"  /** Stem a word contained in a portion of a char[] array.  Returns\n   * true if the stemming process resulted in a word different from\n   * the input.  You can retrieve the result with\n   * getResultLength()/getResultBuffer() or toString().\n   */\n  public boolean stem(char[] wordBuffer, int offset, int wordLen) {\n    reset();\n    if (b.length < wordLen) {\n      b = new char[ArrayUtil.oversize(wordLen, NUM_BYTES_CHAR)];\n    }\n    System.arraycopy(wordBuffer, offset, b, 0, wordLen);\n    i = wordLen;\n    return stem(0);\n  }\n\n","sourceOld":"  /** Stem a word contained in a portion of a char[] array.  Returns\n   * true if the stemming process resulted in a word different from\n   * the input.  You can retrieve the result with\n   * getResultLength()/getResultBuffer() or toString().\n   */\n  public boolean stem(char[] wordBuffer, int offset, int wordLen) {\n    reset();\n    if (b.length < wordLen) {\n      b = new char[ArrayUtil.oversize(wordLen, NUM_BYTES_CHAR)];\n    }\n    System.arraycopy(wordBuffer, offset, b, 0, wordLen);\n    i = wordLen;\n    return stem(0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f226a8b088dd9c8f6ab287a77237c4aa00a238e5","date":1456187572,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/en/PorterStemmer#stem(char[],int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/en/PorterStemmer#stem(char[],int,int).mjava","sourceNew":"  /** Stem a word contained in a portion of a char[] array.  Returns\n   * true if the stemming process resulted in a word different from\n   * the input.  You can retrieve the result with\n   * getResultLength()/getResultBuffer() or toString().\n   */\n  public boolean stem(char[] wordBuffer, int offset, int wordLen) {\n    reset();\n    if (b.length < wordLen) {\n      b = new char[ArrayUtil.oversize(wordLen, Character.BYTES)];\n    }\n    System.arraycopy(wordBuffer, offset, b, 0, wordLen);\n    i = wordLen;\n    return stem(0);\n  }\n\n","sourceOld":"  /** Stem a word contained in a portion of a char[] array.  Returns\n   * true if the stemming process resulted in a word different from\n   * the input.  You can retrieve the result with\n   * getResultLength()/getResultBuffer() or toString().\n   */\n  public boolean stem(char[] wordBuffer, int offset, int wordLen) {\n    reset();\n    if (b.length < wordLen) {\n      b = new char[ArrayUtil.oversize(wordLen, NUM_BYTES_CHAR)];\n    }\n    System.arraycopy(wordBuffer, offset, b, 0, wordLen);\n    i = wordLen;\n    return stem(0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"419a8f52c6635419beb951255cacbbb281044c57","date":1456189353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/en/PorterStemmer#stem(char[],int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/en/PorterStemmer#stem(char[],int,int).mjava","sourceNew":"  /** Stem a word contained in a portion of a char[] array.  Returns\n   * true if the stemming process resulted in a word different from\n   * the input.  You can retrieve the result with\n   * getResultLength()/getResultBuffer() or toString().\n   */\n  public boolean stem(char[] wordBuffer, int offset, int wordLen) {\n    reset();\n    if (b.length < wordLen) {\n      b = new char[ArrayUtil.oversize(wordLen, Character.BYTES)];\n    }\n    System.arraycopy(wordBuffer, offset, b, 0, wordLen);\n    i = wordLen;\n    return stem(0);\n  }\n\n","sourceOld":"  /** Stem a word contained in a portion of a char[] array.  Returns\n   * true if the stemming process resulted in a word different from\n   * the input.  You can retrieve the result with\n   * getResultLength()/getResultBuffer() or toString().\n   */\n  public boolean stem(char[] wordBuffer, int offset, int wordLen) {\n    reset();\n    if (b.length < wordLen) {\n      b = new char[ArrayUtil.oversize(wordLen, NUM_BYTES_CHAR)];\n    }\n    System.arraycopy(wordBuffer, offset, b, 0, wordLen);\n    i = wordLen;\n    return stem(0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"419a8f52c6635419beb951255cacbbb281044c57":["b89678825b68eccaf09e6ab71675fc0b0af1e099","f226a8b088dd9c8f6ab287a77237c4aa00a238e5"],"f226a8b088dd9c8f6ab287a77237c4aa00a238e5":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["419a8f52c6635419beb951255cacbbb281044c57"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["419a8f52c6635419beb951255cacbbb281044c57","f226a8b088dd9c8f6ab287a77237c4aa00a238e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"419a8f52c6635419beb951255cacbbb281044c57":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f226a8b088dd9c8f6ab287a77237c4aa00a238e5":["419a8f52c6635419beb951255cacbbb281044c57"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}