{"path":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory,Codec).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory,Codec).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory,Codec).mjava","sourceNew":"  final void finishCommit(Directory dir, Codec codec) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      SegmentInfosWriter infosWriter = codec.segmentInfosFormat().getSegmentInfosWriter();\n      infosWriter.finishCommit(pendingSegnOutput);\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", generation);\n    success = false;\n    try {\n      dir.sync(Collections.singleton(fileName));\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN, IOContext.READONCE);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n        dir.sync(Collections.singleton(IndexFileNames.SEGMENTS_GEN));\n      }\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n      try {\n        dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      } catch (Throwable t2) {\n        // Ignore; this file is only used in a retry\n        // fallback on init.\n      }\n      if (t instanceof ThreadInterruptedException) {\n        throw (ThreadInterruptedException) t;\n      }\n    }\n  }\n\n","sourceOld":"  final void finishCommit(Directory dir, Codec codec) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      SegmentInfosWriter infosWriter = codec.segmentInfosFormat().getSegmentInfosWriter();\n      infosWriter.finishCommit(pendingSegnOutput);\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", generation);\n    success = false;\n    try {\n      dir.sync(Collections.singleton(fileName));\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN, IOContext.READONCE);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n        dir.sync(Collections.singleton(IndexFileNames.SEGMENTS_GEN));\n      }\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n      try {\n        dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      } catch (Throwable t2) {\n        // Ignore; this file is only used in a retry\n        // fallback on init.\n      }\n      if (t instanceof ThreadInterruptedException) {\n        throw (ThreadInterruptedException) t;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4356000e349e38c9fb48034695b7c309abd54557","date":1337460341,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory,Codec).mjava","sourceNew":"  final void finishCommit(Directory dir) throws IOException {\n    if (pendingSegnOutput == null) {\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    }\n    boolean success = false;\n    try {\n      pendingSegnOutput.finishCommit();\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(pendingSegnOutput);\n        rollbackCommit(dir);\n      } else {\n        pendingSegnOutput.close();\n        pendingSegnOutput = null;\n      }\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", generation);\n    success = false;\n    try {\n      dir.sync(Collections.singleton(fileName));\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN, IOContext.READONCE);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n        dir.sync(Collections.singleton(IndexFileNames.SEGMENTS_GEN));\n      }\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n      try {\n        dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      } catch (Throwable t2) {\n        // Ignore; this file is only used in a retry\n        // fallback on init.\n      }\n      if (t instanceof ThreadInterruptedException) {\n        throw (ThreadInterruptedException) t;\n      }\n    }\n  }\n\n","sourceOld":"  final void finishCommit(Directory dir, Codec codec) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      SegmentInfosWriter infosWriter = codec.segmentInfosFormat().getSegmentInfosWriter();\n      infosWriter.finishCommit(pendingSegnOutput);\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", generation);\n    success = false;\n    try {\n      dir.sync(Collections.singleton(fileName));\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN, IOContext.READONCE);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n        dir.sync(Collections.singleton(IndexFileNames.SEGMENTS_GEN));\n      }\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n      try {\n        dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      } catch (Throwable t2) {\n        // Ignore; this file is only used in a retry\n        // fallback on init.\n      }\n      if (t instanceof ThreadInterruptedException) {\n        throw (ThreadInterruptedException) t;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["25e07bf0d9fa18cd8f0185e309d09a873c45017c","25e07bf0d9fa18cd8f0185e309d09a873c45017c","d0c334a824d4ce7d739c100bf4ae56111a995e3a","d0c334a824d4ce7d739c100bf4ae56111a995e3a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory,Codec).mjava","sourceNew":"  final void finishCommit(Directory dir) throws IOException {\n    if (pendingSegnOutput == null) {\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    }\n    boolean success = false;\n    try {\n      pendingSegnOutput.finishCommit();\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(pendingSegnOutput);\n        rollbackCommit(dir);\n      } else {\n        pendingSegnOutput.close();\n        pendingSegnOutput = null;\n      }\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", generation);\n    success = false;\n    try {\n      dir.sync(Collections.singleton(fileName));\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN, IOContext.READONCE);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n        dir.sync(Collections.singleton(IndexFileNames.SEGMENTS_GEN));\n      }\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n      try {\n        dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      } catch (Throwable t2) {\n        // Ignore; this file is only used in a retry\n        // fallback on init.\n      }\n      if (t instanceof ThreadInterruptedException) {\n        throw (ThreadInterruptedException) t;\n      }\n    }\n  }\n\n","sourceOld":"  final void finishCommit(Directory dir, Codec codec) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      SegmentInfosWriter infosWriter = codec.segmentInfosFormat().getSegmentInfosWriter();\n      infosWriter.finishCommit(pendingSegnOutput);\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", generation);\n    success = false;\n    try {\n      dir.sync(Collections.singleton(fileName));\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN, IOContext.READONCE);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n        dir.sync(Collections.singleton(IndexFileNames.SEGMENTS_GEN));\n      }\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n      try {\n        dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      } catch (Throwable t2) {\n        // Ignore; this file is only used in a retry\n        // fallback on init.\n      }\n      if (t instanceof ThreadInterruptedException) {\n        throw (ThreadInterruptedException) t;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4356000e349e38c9fb48034695b7c309abd54557"],"4356000e349e38c9fb48034695b7c309abd54557":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"]},"commit2Childs":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4356000e349e38c9fb48034695b7c309abd54557":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","4356000e349e38c9fb48034695b7c309abd54557"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}