{"path":"contrib/memory/src/java/org/apache/lucene/index/memory/SynonymMap#toString().mjava","commits":[{"id":"4c9661df01b81c277277a01afbca7851557a2148","date":1133588656,"type":0,"author":"Wolfgang Hoschek","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/SynonymMap#toString().mjava","pathOld":"/dev/null","sourceNew":"\t/** Returns a String representation of the index data for debugging purposes. */\n\tpublic String toString() {\n\t\tStringBuffer buf = new StringBuffer();\n\t\tIterator iter = new TreeMap(table).keySet().iterator();\n\t\tint count = 0;\n\t\tint f0 = 0;\n\t\tint f1 = 0;\n\t\tint f2 = 0;\n\t\tint f3 = 0;\n\t\t\n\t\twhile (iter.hasNext()) {\n\t\t\tString word = (String) iter.next();\n\t\t\tbuf.append(word + \":\");\n\t\t\tString[] synonyms = getSynonyms(word);\n\t\t\tbuf.append(Arrays.asList(synonyms));\n\t\t\tbuf.append(\"\\n\");\n\t\t\tcount += synonyms.length;\n\t\t\tif (synonyms.length == 0) f0++;\n\t\t\tif (synonyms.length == 1) f1++;\n\t\t\tif (synonyms.length == 2) f2++;\n\t\t\tif (synonyms.length == 3) f3++;\n\t\t}\n\t\t\n\t\tbuf.append(\"\\n\\nkeys=\" + table.size() + \", synonyms=\" + count + \", f0=\" + f0 +\", f1=\" + f1 + \", f2=\" + f2 + \", f3=\" + f3);\n\t\treturn buf.toString();\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b08308242cb802f3a154e260d3881c2ed523c52b","date":1133766662,"type":3,"author":"Wolfgang Hoschek","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/SynonymMap#toString().mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/SynonymMap#toString().mjava","sourceNew":"\t/**\n\t * Returns a String representation of the index data for debugging purposes.\n\t * \n\t * @return a String representation\n\t */\n\tpublic String toString() {\n\t\tStringBuffer buf = new StringBuffer();\n\t\tIterator iter = new TreeMap(table).keySet().iterator();\n\t\tint count = 0;\n\t\tint f0 = 0;\n\t\tint f1 = 0;\n\t\tint f2 = 0;\n\t\tint f3 = 0;\n\t\t\n\t\twhile (iter.hasNext()) {\n\t\t\tString word = (String) iter.next();\n\t\t\tbuf.append(word + \":\");\n\t\t\tString[] synonyms = getSynonyms(word);\n\t\t\tbuf.append(Arrays.asList(synonyms));\n\t\t\tbuf.append(\"\\n\");\n\t\t\tcount += synonyms.length;\n\t\t\tif (synonyms.length == 0) f0++;\n\t\t\tif (synonyms.length == 1) f1++;\n\t\t\tif (synonyms.length == 2) f2++;\n\t\t\tif (synonyms.length == 3) f3++;\n\t\t}\n\t\t\n\t\tbuf.append(\"\\n\\nkeys=\" + table.size() + \", synonyms=\" + count + \", f0=\" + f0 +\", f1=\" + f1 + \", f2=\" + f2 + \", f3=\" + f3);\n\t\treturn buf.toString();\n\t}\n\n","sourceOld":"\t/** Returns a String representation of the index data for debugging purposes. */\n\tpublic String toString() {\n\t\tStringBuffer buf = new StringBuffer();\n\t\tIterator iter = new TreeMap(table).keySet().iterator();\n\t\tint count = 0;\n\t\tint f0 = 0;\n\t\tint f1 = 0;\n\t\tint f2 = 0;\n\t\tint f3 = 0;\n\t\t\n\t\twhile (iter.hasNext()) {\n\t\t\tString word = (String) iter.next();\n\t\t\tbuf.append(word + \":\");\n\t\t\tString[] synonyms = getSynonyms(word);\n\t\t\tbuf.append(Arrays.asList(synonyms));\n\t\t\tbuf.append(\"\\n\");\n\t\t\tcount += synonyms.length;\n\t\t\tif (synonyms.length == 0) f0++;\n\t\t\tif (synonyms.length == 1) f1++;\n\t\t\tif (synonyms.length == 2) f2++;\n\t\t\tif (synonyms.length == 3) f3++;\n\t\t}\n\t\t\n\t\tbuf.append(\"\\n\\nkeys=\" + table.size() + \", synonyms=\" + count + \", f0=\" + f0 +\", f1=\" + f1 + \", f2=\" + f2 + \", f3=\" + f3);\n\t\treturn buf.toString();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f68e24227d5556d33ee6d586fd9010cd9ff8bec","date":1150091176,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/SynonymMap#toString().mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/SynonymMap#toString().mjava","sourceNew":"  /**\n   * Returns a String representation of the index data for debugging purposes.\n   * \n   * @return a String representation\n   */\n  public String toString() {\n    StringBuffer buf = new StringBuffer();\n    Iterator iter = new TreeMap(table).keySet().iterator();\n    int count = 0;\n    int f0 = 0;\n    int f1 = 0;\n    int f2 = 0;\n    int f3 = 0;\n    \n    while (iter.hasNext()) {\n      String word = (String) iter.next();\n      buf.append(word + \":\");\n      String[] synonyms = getSynonyms(word);\n      buf.append(Arrays.asList(synonyms));\n      buf.append(\"\\n\");\n      count += synonyms.length;\n      if (synonyms.length == 0) f0++;\n      if (synonyms.length == 1) f1++;\n      if (synonyms.length == 2) f2++;\n      if (synonyms.length == 3) f3++;\n    }\n    \n    buf.append(\"\\n\\nkeys=\" + table.size() + \", synonyms=\" + count + \", f0=\" + f0 +\", f1=\" + f1 + \", f2=\" + f2 + \", f3=\" + f3);\n    return buf.toString();\n  }\n\n","sourceOld":"\t/**\n\t * Returns a String representation of the index data for debugging purposes.\n\t * \n\t * @return a String representation\n\t */\n\tpublic String toString() {\n\t\tStringBuffer buf = new StringBuffer();\n\t\tIterator iter = new TreeMap(table).keySet().iterator();\n\t\tint count = 0;\n\t\tint f0 = 0;\n\t\tint f1 = 0;\n\t\tint f2 = 0;\n\t\tint f3 = 0;\n\t\t\n\t\twhile (iter.hasNext()) {\n\t\t\tString word = (String) iter.next();\n\t\t\tbuf.append(word + \":\");\n\t\t\tString[] synonyms = getSynonyms(word);\n\t\t\tbuf.append(Arrays.asList(synonyms));\n\t\t\tbuf.append(\"\\n\");\n\t\t\tcount += synonyms.length;\n\t\t\tif (synonyms.length == 0) f0++;\n\t\t\tif (synonyms.length == 1) f1++;\n\t\t\tif (synonyms.length == 2) f2++;\n\t\t\tif (synonyms.length == 3) f3++;\n\t\t}\n\t\t\n\t\tbuf.append(\"\\n\\nkeys=\" + table.size() + \", synonyms=\" + count + \", f0=\" + f0 +\", f1=\" + f1 + \", f2=\" + f2 + \", f3=\" + f3);\n\t\treturn buf.toString();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c","date":1254521470,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/SynonymMap#toString().mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/SynonymMap#toString().mjava","sourceNew":"  /**\n   * Returns a String representation of the index data for debugging purposes.\n   * \n   * @return a String representation\n   */\n  public String toString() {\n    StringBuilder buf = new StringBuilder();\n    Iterator iter = new TreeMap(table).keySet().iterator();\n    int count = 0;\n    int f0 = 0;\n    int f1 = 0;\n    int f2 = 0;\n    int f3 = 0;\n    \n    while (iter.hasNext()) {\n      String word = (String) iter.next();\n      buf.append(word + \":\");\n      String[] synonyms = getSynonyms(word);\n      buf.append(Arrays.asList(synonyms));\n      buf.append(\"\\n\");\n      count += synonyms.length;\n      if (synonyms.length == 0) f0++;\n      if (synonyms.length == 1) f1++;\n      if (synonyms.length == 2) f2++;\n      if (synonyms.length == 3) f3++;\n    }\n    \n    buf.append(\"\\n\\nkeys=\" + table.size() + \", synonyms=\" + count + \", f0=\" + f0 +\", f1=\" + f1 + \", f2=\" + f2 + \", f3=\" + f3);\n    return buf.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns a String representation of the index data for debugging purposes.\n   * \n   * @return a String representation\n   */\n  public String toString() {\n    StringBuffer buf = new StringBuffer();\n    Iterator iter = new TreeMap(table).keySet().iterator();\n    int count = 0;\n    int f0 = 0;\n    int f1 = 0;\n    int f2 = 0;\n    int f3 = 0;\n    \n    while (iter.hasNext()) {\n      String word = (String) iter.next();\n      buf.append(word + \":\");\n      String[] synonyms = getSynonyms(word);\n      buf.append(Arrays.asList(synonyms));\n      buf.append(\"\\n\");\n      count += synonyms.length;\n      if (synonyms.length == 0) f0++;\n      if (synonyms.length == 1) f1++;\n      if (synonyms.length == 2) f2++;\n      if (synonyms.length == 3) f3++;\n    }\n    \n    buf.append(\"\\n\\nkeys=\" + table.size() + \", synonyms=\" + count + \", f0=\" + f0 +\", f1=\" + f1 + \", f2=\" + f2 + \", f3=\" + f3);\n    return buf.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d68e5c46e6a5ebdf4dafec4a123344092b915cc0","date":1256752193,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymMap#toString().mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/SynonymMap#toString().mjava","sourceNew":"  /**\n   * Returns a String representation of the index data for debugging purposes.\n   * \n   * @return a String representation\n   */\n  public String toString() {\n    StringBuilder buf = new StringBuilder();\n    Iterator iter = new TreeMap(table).keySet().iterator();\n    int count = 0;\n    int f0 = 0;\n    int f1 = 0;\n    int f2 = 0;\n    int f3 = 0;\n    \n    while (iter.hasNext()) {\n      String word = (String) iter.next();\n      buf.append(word + \":\");\n      String[] synonyms = getSynonyms(word);\n      buf.append(Arrays.asList(synonyms));\n      buf.append(\"\\n\");\n      count += synonyms.length;\n      if (synonyms.length == 0) f0++;\n      if (synonyms.length == 1) f1++;\n      if (synonyms.length == 2) f2++;\n      if (synonyms.length == 3) f3++;\n    }\n    \n    buf.append(\"\\n\\nkeys=\" + table.size() + \", synonyms=\" + count + \", f0=\" + f0 +\", f1=\" + f1 + \", f2=\" + f2 + \", f3=\" + f3);\n    return buf.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns a String representation of the index data for debugging purposes.\n   * \n   * @return a String representation\n   */\n  public String toString() {\n    StringBuilder buf = new StringBuilder();\n    Iterator iter = new TreeMap(table).keySet().iterator();\n    int count = 0;\n    int f0 = 0;\n    int f1 = 0;\n    int f2 = 0;\n    int f3 = 0;\n    \n    while (iter.hasNext()) {\n      String word = (String) iter.next();\n      buf.append(word + \":\");\n      String[] synonyms = getSynonyms(word);\n      buf.append(Arrays.asList(synonyms));\n      buf.append(\"\\n\");\n      count += synonyms.length;\n      if (synonyms.length == 0) f0++;\n      if (synonyms.length == 1) f1++;\n      if (synonyms.length == 2) f2++;\n      if (synonyms.length == 3) f3++;\n    }\n    \n    buf.append(\"\\n\\nkeys=\" + table.size() + \", synonyms=\" + count + \", f0=\" + f0 +\", f1=\" + f1 + \", f2=\" + f2 + \", f3=\" + f3);\n    return buf.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c9661df01b81c277277a01afbca7851557a2148":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b08308242cb802f3a154e260d3881c2ed523c52b":["4c9661df01b81c277277a01afbca7851557a2148"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f68e24227d5556d33ee6d586fd9010cd9ff8bec":["b08308242cb802f3a154e260d3881c2ed523c52b"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d68e5c46e6a5ebdf4dafec4a123344092b915cc0"],"d68e5c46e6a5ebdf4dafec4a123344092b915cc0":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"]},"commit2Childs":{"4c9661df01b81c277277a01afbca7851557a2148":["b08308242cb802f3a154e260d3881c2ed523c52b"],"b08308242cb802f3a154e260d3881c2ed523c52b":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4c9661df01b81c277277a01afbca7851557a2148"],"7f68e24227d5556d33ee6d586fd9010cd9ff8bec":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["d68e5c46e6a5ebdf4dafec4a123344092b915cc0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d68e5c46e6a5ebdf4dafec4a123344092b915cc0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}