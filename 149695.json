{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/PreFlexRWFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/PreFlexRWFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/codecs/lucene3x/PreFlexRWFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    try {\n      output.writeVInt(FORMAT_PREFLEX_RW);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        assert fi.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !fi.storePayloads;\n        byte bits = 0x0;\n        if (fi.isIndexed) bits |= IS_INDEXED;\n        if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n        if (fi.omitNorms) bits |= OMIT_NORMS;\n        if (fi.storePayloads) bits |= STORE_PAYLOADS;\n        if (fi.indexOptions == IndexOptions.DOCS_ONLY) {\n          bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n        } else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS) {\n          bits |= OMIT_POSITIONS;\n        }\n        output.writeString(fi.name);\n        /*\n         * we need to write the field number since IW tries\n         * to stabelize the field numbers across segments so the\n         * FI ordinal is not necessarily equivalent to the field number \n         */\n        output.writeInt(fi.number);\n        output.writeByte(bits);\n        if (fi.isIndexed && !fi.omitNorms) {\n          // to allow null norm types we need to indicate if norms are written \n          // only in RW case\n          output.writeByte((byte) (fi.getNormType() == null ? 0 : 1));\n        }\n      }\n    } finally {\n      output.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    try {\n      output.writeVInt(FORMAT_PREFLEX_RW);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        assert fi.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !fi.storePayloads;\n        byte bits = 0x0;\n        if (fi.isIndexed) bits |= IS_INDEXED;\n        if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n        if (fi.omitNorms) bits |= OMIT_NORMS;\n        if (fi.storePayloads) bits |= STORE_PAYLOADS;\n        if (fi.indexOptions == IndexOptions.DOCS_ONLY) {\n          bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n        } else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS) {\n          bits |= OMIT_POSITIONS;\n        }\n        output.writeString(fi.name);\n        /*\n         * we need to write the field number since IW tries\n         * to stabelize the field numbers across segments so the\n         * FI ordinal is not necessarily equivalent to the field number \n         */\n        output.writeInt(fi.number);\n        output.writeByte(bits);\n        if (fi.isIndexed && !fi.omitNorms) {\n          // to allow null norm types we need to indicate if norms are written \n          // only in RW case\n          output.writeByte((byte) (fi.getNormType() == null ? 0 : 1));\n        }\n      }\n    } finally {\n      output.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76923f6a33f2c4bec7f584e3f251261afe7ea276","date":1337149711,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/PreFlexRWFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/PreFlexRWFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    try {\n      output.writeVInt(FORMAT_PREFLEX_RW);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        assert fi.getIndexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !fi.hasPayloads();\n        byte bits = 0x0;\n        if (fi.isIndexed()) bits |= IS_INDEXED;\n        if (fi.hasVectors()) bits |= STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= STORE_PAYLOADS;\n        if (fi.getIndexOptions() == IndexOptions.DOCS_ONLY) {\n          bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n        } else if (fi.getIndexOptions() == IndexOptions.DOCS_AND_FREQS) {\n          bits |= OMIT_POSITIONS;\n        }\n        output.writeString(fi.name);\n        /*\n         * we need to write the field number since IW tries\n         * to stabelize the field numbers across segments so the\n         * FI ordinal is not necessarily equivalent to the field number \n         */\n        output.writeInt(fi.number);\n        output.writeByte(bits);\n        if (fi.isIndexed() && !fi.omitsNorms()) {\n          // to allow null norm types we need to indicate if norms are written \n          // only in RW case\n          output.writeByte((byte) (fi.getNormType() == null ? 0 : 1));\n        }\n      }\n    } finally {\n      output.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    try {\n      output.writeVInt(FORMAT_PREFLEX_RW);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        assert fi.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !fi.storePayloads;\n        byte bits = 0x0;\n        if (fi.isIndexed) bits |= IS_INDEXED;\n        if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n        if (fi.omitNorms) bits |= OMIT_NORMS;\n        if (fi.storePayloads) bits |= STORE_PAYLOADS;\n        if (fi.indexOptions == IndexOptions.DOCS_ONLY) {\n          bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n        } else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS) {\n          bits |= OMIT_POSITIONS;\n        }\n        output.writeString(fi.name);\n        /*\n         * we need to write the field number since IW tries\n         * to stabelize the field numbers across segments so the\n         * FI ordinal is not necessarily equivalent to the field number \n         */\n        output.writeInt(fi.number);\n        output.writeByte(bits);\n        if (fi.isIndexed && !fi.omitNorms) {\n          // to allow null norm types we need to indicate if norms are written \n          // only in RW case\n          output.writeByte((byte) (fi.getNormType() == null ? 0 : 1));\n        }\n      }\n    } finally {\n      output.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["83ede60c0b5bb96ad193414bbd663193b56689b3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0f42e0639920b2e917c9ece35fb68ad83021e38","date":1337629438,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/PreFlexRWFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/PreFlexRWFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    try {\n      output.writeVInt(FORMAT_PREFLEX_RW);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        assert fi.getIndexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !fi.hasPayloads();\n        byte bits = 0x0;\n        if (fi.isIndexed()) bits |= IS_INDEXED;\n        if (fi.hasVectors()) bits |= STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= STORE_PAYLOADS;\n        if (fi.getIndexOptions() == IndexOptions.DOCS_ONLY) {\n          bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n        } else if (fi.getIndexOptions() == IndexOptions.DOCS_AND_FREQS) {\n          bits |= OMIT_POSITIONS;\n        }\n        output.writeString(fi.name);\n        /*\n         * we need to write the field number since IW tries\n         * to stabelize the field numbers across segments so the\n         * FI ordinal is not necessarily equivalent to the field number \n         */\n        output.writeInt(fi.number);\n        output.writeByte(bits);\n        if (fi.isIndexed() && !fi.omitsNorms()) {\n          // to allow null norm types we need to indicate if norms are written \n          // only in RW case\n          output.writeByte((byte) (fi.getNormType() == null ? 0 : 1));\n        }\n        assert fi.attributes() == null; // not used or supported\n      }\n    } finally {\n      output.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    try {\n      output.writeVInt(FORMAT_PREFLEX_RW);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        assert fi.getIndexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !fi.hasPayloads();\n        byte bits = 0x0;\n        if (fi.isIndexed()) bits |= IS_INDEXED;\n        if (fi.hasVectors()) bits |= STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= STORE_PAYLOADS;\n        if (fi.getIndexOptions() == IndexOptions.DOCS_ONLY) {\n          bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n        } else if (fi.getIndexOptions() == IndexOptions.DOCS_AND_FREQS) {\n          bits |= OMIT_POSITIONS;\n        }\n        output.writeString(fi.name);\n        /*\n         * we need to write the field number since IW tries\n         * to stabelize the field numbers across segments so the\n         * FI ordinal is not necessarily equivalent to the field number \n         */\n        output.writeInt(fi.number);\n        output.writeByte(bits);\n        if (fi.isIndexed() && !fi.omitsNorms()) {\n          // to allow null norm types we need to indicate if norms are written \n          // only in RW case\n          output.writeByte((byte) (fi.getNormType() == null ? 0 : 1));\n        }\n      }\n    } finally {\n      output.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/PreFlexRWFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/PreFlexRWFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    try {\n      output.writeVInt(FORMAT_PREFLEX_RW);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        assert fi.getIndexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !fi.hasPayloads();\n        byte bits = 0x0;\n        if (fi.isIndexed()) bits |= IS_INDEXED;\n        if (fi.hasVectors()) bits |= STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= STORE_PAYLOADS;\n        if (fi.getIndexOptions() == IndexOptions.DOCS_ONLY) {\n          bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n        } else if (fi.getIndexOptions() == IndexOptions.DOCS_AND_FREQS) {\n          bits |= OMIT_POSITIONS;\n        }\n        output.writeString(fi.name);\n        /*\n         * we need to write the field number since IW tries\n         * to stabelize the field numbers across segments so the\n         * FI ordinal is not necessarily equivalent to the field number \n         */\n        output.writeInt(fi.number);\n        output.writeByte(bits);\n        if (fi.isIndexed() && !fi.omitsNorms()) {\n          // to allow null norm types we need to indicate if norms are written \n          // only in RW case\n          output.writeByte((byte) (fi.getNormType() == null ? 0 : 1));\n        }\n        assert fi.attributes() == null; // not used or supported\n      }\n    } finally {\n      output.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    try {\n      output.writeVInt(FORMAT_PREFLEX_RW);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        assert fi.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !fi.storePayloads;\n        byte bits = 0x0;\n        if (fi.isIndexed) bits |= IS_INDEXED;\n        if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n        if (fi.omitNorms) bits |= OMIT_NORMS;\n        if (fi.storePayloads) bits |= STORE_PAYLOADS;\n        if (fi.indexOptions == IndexOptions.DOCS_ONLY) {\n          bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n        } else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS) {\n          bits |= OMIT_POSITIONS;\n        }\n        output.writeString(fi.name);\n        /*\n         * we need to write the field number since IW tries\n         * to stabelize the field numbers across segments so the\n         * FI ordinal is not necessarily equivalent to the field number \n         */\n        output.writeInt(fi.number);\n        output.writeByte(bits);\n        if (fi.isIndexed && !fi.omitNorms) {\n          // to allow null norm types we need to indicate if norms are written \n          // only in RW case\n          output.writeByte((byte) (fi.getNormType() == null ? 0 : 1));\n        }\n      }\n    } finally {\n      output.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"83ede60c0b5bb96ad193414bbd663193b56689b3","date":1338331478,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/PreFlexRWFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/PreFlexRWFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    try {\n      output.writeVInt(FORMAT_PREFLEX_RW);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= STORE_PAYLOADS;\n        if (fi.isIndexed())  {\n          bits |= IS_INDEXED;\n          assert fi.getIndexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !fi.hasPayloads();\n          if (fi.getIndexOptions() == IndexOptions.DOCS_ONLY) {\n            bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n          } else if (fi.getIndexOptions() == IndexOptions.DOCS_AND_FREQS) {\n            bits |= OMIT_POSITIONS;\n          }\n        }\n        output.writeString(fi.name);\n        /*\n         * we need to write the field number since IW tries\n         * to stabelize the field numbers across segments so the\n         * FI ordinal is not necessarily equivalent to the field number \n         */\n        output.writeInt(fi.number);\n        output.writeByte(bits);\n        if (fi.isIndexed() && !fi.omitsNorms()) {\n          // to allow null norm types we need to indicate if norms are written \n          // only in RW case\n          output.writeByte((byte) (fi.getNormType() == null ? 0 : 1));\n        }\n        assert fi.attributes() == null; // not used or supported\n      }\n    } finally {\n      output.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    try {\n      output.writeVInt(FORMAT_PREFLEX_RW);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        assert fi.getIndexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !fi.hasPayloads();\n        byte bits = 0x0;\n        if (fi.isIndexed()) bits |= IS_INDEXED;\n        if (fi.hasVectors()) bits |= STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= STORE_PAYLOADS;\n        if (fi.getIndexOptions() == IndexOptions.DOCS_ONLY) {\n          bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n        } else if (fi.getIndexOptions() == IndexOptions.DOCS_AND_FREQS) {\n          bits |= OMIT_POSITIONS;\n        }\n        output.writeString(fi.name);\n        /*\n         * we need to write the field number since IW tries\n         * to stabelize the field numbers across segments so the\n         * FI ordinal is not necessarily equivalent to the field number \n         */\n        output.writeInt(fi.number);\n        output.writeByte(bits);\n        if (fi.isIndexed() && !fi.omitsNorms()) {\n          // to allow null norm types we need to indicate if norms are written \n          // only in RW case\n          output.writeByte((byte) (fi.getNormType() == null ? 0 : 1));\n        }\n        assert fi.attributes() == null; // not used or supported\n      }\n    } finally {\n      output.close();\n    }\n  }\n\n","bugFix":["76923f6a33f2c4bec7f584e3f251261afe7ea276","9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57ae3024996ccdb3c36c42cb890e1efb37df4ce8","date":1338343651,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/PreFlexRWFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    try {\n      output.writeVInt(FORMAT_PREFLEX_RW);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= STORE_PAYLOADS;\n        if (fi.isIndexed())  {\n          bits |= IS_INDEXED;\n          assert fi.getIndexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !fi.hasPayloads();\n          if (fi.getIndexOptions() == IndexOptions.DOCS_ONLY) {\n            bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n          } else if (fi.getIndexOptions() == IndexOptions.DOCS_AND_FREQS) {\n            bits |= OMIT_POSITIONS;\n          }\n        }\n        output.writeString(fi.name);\n        /*\n         * we need to write the field number since IW tries\n         * to stabelize the field numbers across segments so the\n         * FI ordinal is not necessarily equivalent to the field number \n         */\n        output.writeInt(fi.number);\n        output.writeByte(bits);\n        if (fi.isIndexed() && !fi.omitsNorms()) {\n          // to allow null norm types we need to indicate if norms are written \n          // only in RW case\n          output.writeByte((byte) (fi.getNormType() == null ? 0 : 1));\n        }\n        assert fi.attributes() == null; // not used or supported\n      }\n    } finally {\n      output.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["83ede60c0b5bb96ad193414bbd663193b56689b3"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","a0f42e0639920b2e917c9ece35fb68ad83021e38"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83ede60c0b5bb96ad193414bbd663193b56689b3":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0f42e0639920b2e917c9ece35fb68ad83021e38":["76923f6a33f2c4bec7f584e3f251261afe7ea276"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"]},"commit2Childs":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["a0f42e0639920b2e917c9ece35fb68ad83021e38"],"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["83ede60c0b5bb96ad193414bbd663193b56689b3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["76923f6a33f2c4bec7f584e3f251261afe7ea276","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"83ede60c0b5bb96ad193414bbd663193b56689b3":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"a0f42e0639920b2e917c9ece35fb68ad83021e38":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}