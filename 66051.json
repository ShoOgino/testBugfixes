{"path":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#getURLs(String,String).mjava","commits":[{"id":"23e55c29de60130e8a1226800b66c5f6d7e16e8a","date":1447950053,"type":1,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#getURLs(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#getURLs(ShardRequest,String).mjava","sourceNew":"  // Not thread safe... don't use in Callable.\n  // Don't modify the returned URL list.\n  private List<String> getURLs(String shard, String preferredHostAddress) {\n    List<String> urls = shardToURLs.get(shard);\n    if (urls == null) {\n      urls = httpShardHandlerFactory.makeURLList(shard);\n      if (preferredHostAddress != null && urls.size() > 1) {\n        preferCurrentHostForDistributedReq(preferredHostAddress, urls);\n      }\n      shardToURLs.put(shard, urls);\n    }\n    return urls;\n  }\n\n","sourceOld":"  // Not thread safe... don't use in Callable.\n  // Don't modify the returned URL list.\n  private List<String> getURLs(ShardRequest sreq, String shard) {\n    List<String> urls = shardToURLs.get(shard);\n    if (urls == null) {\n      urls = httpShardHandlerFactory.makeURLList(shard);\n      preferCurrentHostForDistributedReq(sreq, urls);\n      shardToURLs.put(shard, urls);\n    }\n    return urls;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f82cd77bc27bbdd30a6dd22e5adb2cf8def2c34a","date":1478684774,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#getURLs(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#getURLs(String,String).mjava","sourceNew":"  // Not thread safe... don't use in Callable.\n  // Don't modify the returned URL list.\n  private List<String> getURLs(String shard, String preferredHostAddress) {\n    List<String> urls = shardToURLs.get(shard);\n    if (urls == null) {\n      urls = httpShardHandlerFactory.buildURLList(shard);\n      if (preferredHostAddress != null && urls.size() > 1) {\n        preferCurrentHostForDistributedReq(preferredHostAddress, urls);\n      }\n      shardToURLs.put(shard, urls);\n    }\n    return urls;\n  }\n\n","sourceOld":"  // Not thread safe... don't use in Callable.\n  // Don't modify the returned URL list.\n  private List<String> getURLs(String shard, String preferredHostAddress) {\n    List<String> urls = shardToURLs.get(shard);\n    if (urls == null) {\n      urls = httpShardHandlerFactory.makeURLList(shard);\n      if (preferredHostAddress != null && urls.size() > 1) {\n        preferCurrentHostForDistributedReq(preferredHostAddress, urls);\n      }\n      shardToURLs.put(shard, urls);\n    }\n    return urls;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#getURLs(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#getURLs(String,String).mjava","sourceNew":"  // Not thread safe... don't use in Callable.\n  // Don't modify the returned URL list.\n  private List<String> getURLs(String shard, String preferredHostAddress) {\n    List<String> urls = shardToURLs.get(shard);\n    if (urls == null) {\n      urls = httpShardHandlerFactory.buildURLList(shard);\n      if (preferredHostAddress != null && urls.size() > 1) {\n        preferCurrentHostForDistributedReq(preferredHostAddress, urls);\n      }\n      shardToURLs.put(shard, urls);\n    }\n    return urls;\n  }\n\n","sourceOld":"  // Not thread safe... don't use in Callable.\n  // Don't modify the returned URL list.\n  private List<String> getURLs(String shard, String preferredHostAddress) {\n    List<String> urls = shardToURLs.get(shard);\n    if (urls == null) {\n      urls = httpShardHandlerFactory.makeURLList(shard);\n      if (preferredHostAddress != null && urls.size() > 1) {\n        preferCurrentHostForDistributedReq(preferredHostAddress, urls);\n      }\n      shardToURLs.put(shard, urls);\n    }\n    return urls;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"304ef848381e39ff6cf3e7af6127733a6f4db389","date":1482353305,"type":5,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#getURLs(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#getURLs(String,String).mjava","sourceNew":"  // Not thread safe... don't use in Callable.\n  // Don't modify the returned URL list.\n  private List<String> getURLs(String shard) {\n    List<String> urls = shardToURLs.get(shard);\n    if (urls == null) {\n      urls = httpShardHandlerFactory.buildURLList(shard);\n      shardToURLs.put(shard, urls);\n    }\n    return urls;\n  }\n\n","sourceOld":"  // Not thread safe... don't use in Callable.\n  // Don't modify the returned URL list.\n  private List<String> getURLs(String shard, String preferredHostAddress) {\n    List<String> urls = shardToURLs.get(shard);\n    if (urls == null) {\n      urls = httpShardHandlerFactory.buildURLList(shard);\n      if (preferredHostAddress != null && urls.size() > 1) {\n        preferCurrentHostForDistributedReq(preferredHostAddress, urls);\n      }\n      shardToURLs.put(shard, urls);\n    }\n    return urls;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#getURLs(String,String).mjava","sourceNew":null,"sourceOld":"  // Not thread safe... don't use in Callable.\n  // Don't modify the returned URL list.\n  private List<String> getURLs(String shard, String preferredHostAddress) {\n    List<String> urls = shardToURLs.get(shard);\n    if (urls == null) {\n      urls = httpShardHandlerFactory.buildURLList(shard);\n      if (preferredHostAddress != null && urls.size() > 1) {\n        preferCurrentHostForDistributedReq(preferredHostAddress, urls);\n      }\n      shardToURLs.put(shard, urls);\n    }\n    return urls;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["23e55c29de60130e8a1226800b66c5f6d7e16e8a","f82cd77bc27bbdd30a6dd22e5adb2cf8def2c34a"],"f82cd77bc27bbdd30a6dd22e5adb2cf8def2c34a":["23e55c29de60130e8a1226800b66c5f6d7e16e8a"],"304ef848381e39ff6cf3e7af6127733a6f4db389":["f82cd77bc27bbdd30a6dd22e5adb2cf8def2c34a"],"23e55c29de60130e8a1226800b66c5f6d7e16e8a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["304ef848381e39ff6cf3e7af6127733a6f4db389"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["199dfa410f1fdbfd3294106b04096cce5ed34b21","304ef848381e39ff6cf3e7af6127733a6f4db389"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["23e55c29de60130e8a1226800b66c5f6d7e16e8a"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"f82cd77bc27bbdd30a6dd22e5adb2cf8def2c34a":["199dfa410f1fdbfd3294106b04096cce5ed34b21","304ef848381e39ff6cf3e7af6127733a6f4db389"],"23e55c29de60130e8a1226800b66c5f6d7e16e8a":["199dfa410f1fdbfd3294106b04096cce5ed34b21","f82cd77bc27bbdd30a6dd22e5adb2cf8def2c34a"],"304ef848381e39ff6cf3e7af6127733a6f4db389":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}