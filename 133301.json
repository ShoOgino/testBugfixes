{"path":"lucene/src/test/org/apache/lucene/index/TestFlex#testTermOrd().mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlex#testTermOrd().mjava","pathOld":"/dev/null","sourceNew":"  public void testTermOrd() throws Exception {\n    Directory d = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(d, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"f\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    TermsEnum terms = r.getSequentialSubReaders()[0].fields().terms(\"f\").iterator();\n    assertTrue(terms.next() != null);\n    assertEquals(0, terms.ord());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlex#testTermOrd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlex#testTermOrd().mjava","sourceNew":"  public void testTermOrd() throws Exception {\n    Directory d = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(d, new MockAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"f\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    TermsEnum terms = r.getSequentialSubReaders()[0].fields().terms(\"f\").iterator();\n    assertTrue(terms.next() != null);\n    assertEquals(0, terms.ord());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testTermOrd() throws Exception {\n    Directory d = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(d, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"f\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    TermsEnum terms = r.getSequentialSubReaders()[0].fields().terms(\"f\").iterator();\n    assertTrue(terms.next() != null);\n    assertEquals(0, terms.ord());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"163fe85a71d778fd2b7747f65ca27b54829e2e57","date":1279898785,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlex#testTermOrd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlex#testTermOrd().mjava","sourceNew":"  public void testTermOrd() throws Exception {\n    Directory d = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT,\n                                                             new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(new Field(\"f\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    TermsEnum terms = r.getSequentialSubReaders()[0].fields().terms(\"f\").iterator();\n    assertTrue(terms.next() != null);\n    assertEquals(0, terms.ord());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testTermOrd() throws Exception {\n    Directory d = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(d, new MockAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"f\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    TermsEnum terms = r.getSequentialSubReaders()[0].fields().terms(\"f\").iterator();\n    assertTrue(terms.next() != null);\n    assertEquals(0, terms.ord());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlex#testTermOrd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlex#testTermOrd().mjava","sourceNew":"  public void testTermOrd() throws Exception {\n    Directory d = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT,\n                                                             new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(new Field(\"f\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    TermsEnum terms = r.getSequentialSubReaders()[0].fields().terms(\"f\").iterator();\n    assertTrue(terms.next() != null);\n    assertEquals(0, terms.ord());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testTermOrd() throws Exception {\n    Directory d = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(d, new MockAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"f\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    TermsEnum terms = r.getSequentialSubReaders()[0].fields().terms(\"f\").iterator();\n    assertTrue(terms.next() != null);\n    assertEquals(0, terms.ord());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlex#testTermOrd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlex#testTermOrd().mjava","sourceNew":"  public void testTermOrd() throws Exception {\n    Directory d = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT,\n                                                             new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(new Field(\"f\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    TermsEnum terms = r.getSequentialSubReaders()[0].fields().terms(\"f\").iterator();\n    assertTrue(terms.next() != null);\n    assertEquals(0, terms.ord());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testTermOrd() throws Exception {\n    Directory d = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(d, new MockAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"f\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    TermsEnum terms = r.getSequentialSubReaders()[0].fields().terms(\"f\").iterator();\n    assertTrue(terms.next() != null);\n    assertEquals(0, terms.ord());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlex#testTermOrd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlex#testTermOrd().mjava","sourceNew":"  public void testTermOrd() throws Exception {\n    Directory d = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig(newRandom(), TEST_VERSION_CURRENT,\n                                                             new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(new Field(\"f\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    TermsEnum terms = r.getSequentialSubReaders()[0].fields().terms(\"f\").iterator();\n    assertTrue(terms.next() != null);\n    assertEquals(0, terms.ord());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testTermOrd() throws Exception {\n    Directory d = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT,\n                                                             new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(new Field(\"f\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    TermsEnum terms = r.getSequentialSubReaders()[0].fields().terms(\"f\").iterator();\n    assertTrue(terms.next() != null);\n    assertEquals(0, terms.ord());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlex#testTermOrd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlex#testTermOrd().mjava","sourceNew":"  public void testTermOrd() throws Exception {\n    Random random = newRandom();\n    Directory d = newDirectory(random);\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n                                                             new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(new Field(\"f\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    TermsEnum terms = r.getSequentialSubReaders()[0].fields().terms(\"f\").iterator();\n    assertTrue(terms.next() != null);\n    assertEquals(0, terms.ord());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testTermOrd() throws Exception {\n    Directory d = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig(newRandom(), TEST_VERSION_CURRENT,\n                                                             new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(new Field(\"f\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    TermsEnum terms = r.getSequentialSubReaders()[0].fields().terms(\"f\").iterator();\n    assertTrue(terms.next() != null);\n    assertEquals(0, terms.ord());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlex#testTermOrd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlex#testTermOrd().mjava","sourceNew":"  public void testTermOrd() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                             new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(new Field(\"f\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    TermsEnum terms = r.getSequentialSubReaders()[0].fields().terms(\"f\").iterator();\n    assertTrue(terms.next() != null);\n    assertEquals(0, terms.ord());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testTermOrd() throws Exception {\n    Random random = newRandom();\n    Directory d = newDirectory(random);\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n                                                             new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(new Field(\"f\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    TermsEnum terms = r.getSequentialSubReaders()[0].fields().terms(\"f\").iterator();\n    assertTrue(terms.next() != null);\n    assertEquals(0, terms.ord());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlex#testTermOrd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlex#testTermOrd().mjava","sourceNew":"  public void testTermOrd() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                             new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(newField(\"f\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    TermsEnum terms = r.getSequentialSubReaders()[0].fields().terms(\"f\").iterator();\n    assertTrue(terms.next() != null);\n    assertEquals(0, terms.ord());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testTermOrd() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                             new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(new Field(\"f\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    TermsEnum terms = r.getSequentialSubReaders()[0].fields().terms(\"f\").iterator();\n    assertTrue(terms.next() != null);\n    assertEquals(0, terms.ord());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlex#testTermOrd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlex#testTermOrd().mjava","sourceNew":"  public void testTermOrd() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                             new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(newField(\"f\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    TermsEnum terms = r.getSequentialSubReaders()[0].fields().terms(\"f\").iterator();\n    assertTrue(terms.next() != null);\n    assertEquals(0, terms.ord());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testTermOrd() throws Exception {\n    Directory d = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT,\n                                                             new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(new Field(\"f\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    TermsEnum terms = r.getSequentialSubReaders()[0].fields().terms(\"f\").iterator();\n    assertTrue(terms.next() != null);\n    assertEquals(0, terms.ord());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlex#testTermOrd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlex#testTermOrd().mjava","sourceNew":"  public void testTermOrd() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                             new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(newField(\"f\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    TermsEnum terms = r.getSequentialSubReaders()[0].fields().terms(\"f\").iterator();\n    assertTrue(terms.next() != null);\n    try {\n      assertEquals(0, terms.ord());\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support this op\n    }\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testTermOrd() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                             new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(newField(\"f\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    TermsEnum terms = r.getSequentialSubReaders()[0].fields().terms(\"f\").iterator();\n    assertTrue(terms.next() != null);\n    assertEquals(0, terms.ord());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlex#testTermOrd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlex#testTermOrd().mjava","sourceNew":"  public void testTermOrd() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                             new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(newField(\"f\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    TermsEnum terms = r.getSequentialSubReaders()[0].fields().terms(\"f\").iterator();\n    assertTrue(terms.next() != null);\n    try {\n      assertEquals(0, terms.ord());\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support this op\n    }\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testTermOrd() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                             new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(newField(\"f\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    TermsEnum terms = r.getSequentialSubReaders()[0].fields().terms(\"f\").iterator();\n    assertTrue(terms.next() != null);\n    assertEquals(0, terms.ord());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlex#testTermOrd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlex#testTermOrd().mjava","sourceNew":"  public void testTermOrd() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                             new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(newField(\"f\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    TermsEnum terms = r.getSequentialSubReaders()[0].fields().terms(\"f\").iterator();\n    assertTrue(terms.next() != null);\n    try {\n      assertEquals(0, terms.ord());\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support this op\n    }\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testTermOrd() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                             new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(newField(\"f\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    TermsEnum terms = r.getSequentialSubReaders()[0].fields().terms(\"f\").iterator();\n    assertTrue(terms.next() != null);\n    assertEquals(0, terms.ord());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlex#testTermOrd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlex#testTermOrd().mjava","sourceNew":"  public void testTermOrd() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                             new MockAnalyzer(random)).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(newField(\"f\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    TermsEnum terms = r.getSequentialSubReaders()[0].fields().terms(\"f\").iterator();\n    assertTrue(terms.next() != null);\n    try {\n      assertEquals(0, terms.ord());\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support this op\n    }\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testTermOrd() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                             new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(newField(\"f\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    TermsEnum terms = r.getSequentialSubReaders()[0].fields().terms(\"f\").iterator();\n    assertTrue(terms.next() != null);\n    try {\n      assertEquals(0, terms.ord());\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support this op\n    }\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlex#testTermOrd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlex#testTermOrd().mjava","sourceNew":"  public void testTermOrd() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                             new MockAnalyzer(random)).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(newField(\"f\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    TermsEnum terms = r.getSequentialSubReaders()[0].fields().terms(\"f\").iterator();\n    assertTrue(terms.next() != null);\n    try {\n      assertEquals(0, terms.ord());\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support this op\n    }\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testTermOrd() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                             new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(newField(\"f\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    TermsEnum terms = r.getSequentialSubReaders()[0].fields().terms(\"f\").iterator();\n    assertTrue(terms.next() != null);\n    try {\n      assertEquals(0, terms.ord());\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support this op\n    }\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlex#testTermOrd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlex#testTermOrd().mjava","sourceNew":"  public void testTermOrd() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                             new MockAnalyzer(random)).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(newField(\"f\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    TermsEnum terms = r.getSequentialSubReaders()[0].fields().terms(\"f\").iterator();\n    assertTrue(terms.next() != null);\n    try {\n      assertEquals(0, terms.ord());\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support this op\n    }\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testTermOrd() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                             new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(newField(\"f\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    TermsEnum terms = r.getSequentialSubReaders()[0].fields().terms(\"f\").iterator();\n    assertTrue(terms.next() != null);\n    try {\n      assertEquals(0, terms.ord());\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support this op\n    }\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlex#testTermOrd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlex#testTermOrd().mjava","sourceNew":"  public void testTermOrd() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                             new MockAnalyzer(random)).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(newField(\"f\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    TermsEnum terms = r.getSequentialSubReaders()[0].fields().terms(\"f\").iterator();\n    assertTrue(terms.next() != null);\n    try {\n      assertEquals(0, terms.ord());\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support this op\n    }\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testTermOrd() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                             new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(newField(\"f\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    TermsEnum terms = r.getSequentialSubReaders()[0].fields().terms(\"f\").iterator();\n    assertTrue(terms.next() != null);\n    try {\n      assertEquals(0, terms.ord());\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support this op\n    }\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlex#testTermOrd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlex#testTermOrd().mjava","sourceNew":"  public void testTermOrd() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                             new MockAnalyzer(random)).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(newField(\"f\", \"a b c\", TextField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    TermsEnum terms = r.getSequentialSubReaders()[0].fields().terms(\"f\").iterator();\n    assertTrue(terms.next() != null);\n    try {\n      assertEquals(0, terms.ord());\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support this op\n    }\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testTermOrd() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                             new MockAnalyzer(random)).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(newField(\"f\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    TermsEnum terms = r.getSequentialSubReaders()[0].fields().terms(\"f\").iterator();\n    assertTrue(terms.next() != null);\n    try {\n      assertEquals(0, terms.ord());\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support this op\n    }\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlex#testTermOrd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlex#testTermOrd().mjava","sourceNew":"  public void testTermOrd() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                             new MockAnalyzer(random)).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    Document doc = new Document();\n    doc.add(newField(\"f\", \"a b c\", TextField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    TermsEnum terms = r.getSequentialSubReaders()[0].fields().terms(\"f\").iterator();\n    assertTrue(terms.next() != null);\n    try {\n      assertEquals(0, terms.ord());\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support this op\n    }\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testTermOrd() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                             new MockAnalyzer(random)).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(newField(\"f\", \"a b c\", TextField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    TermsEnum terms = r.getSequentialSubReaders()[0].fields().terms(\"f\").iterator();\n    assertTrue(terms.next() != null);\n    try {\n      assertEquals(0, terms.ord());\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support this op\n    }\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlex#testTermOrd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlex#testTermOrd().mjava","sourceNew":"  public void testTermOrd() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                             new MockAnalyzer(random)).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    Document doc = new Document();\n    doc.add(newField(\"f\", \"a b c\", TextField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    TermsEnum terms = r.getSequentialSubReaders()[0].fields().terms(\"f\").iterator(null);\n    assertTrue(terms.next() != null);\n    try {\n      assertEquals(0, terms.ord());\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support this op\n    }\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testTermOrd() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                             new MockAnalyzer(random)).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    Document doc = new Document();\n    doc.add(newField(\"f\", \"a b c\", TextField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    TermsEnum terms = r.getSequentialSubReaders()[0].fields().terms(\"f\").iterator();\n    assertTrue(terms.next() != null);\n    try {\n      assertEquals(0, terms.ord());\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support this op\n    }\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868186558eb3a854ce7e720a52bb445795d54910","date":1327853682,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlex#testTermOrd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlex#testTermOrd().mjava","sourceNew":"  public void testTermOrd() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                             new MockAnalyzer(random)).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    Document doc = new Document();\n    doc.add(newField(\"f\", \"a b c\", TextField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    TermsEnum terms = getOnlySegmentReader(r).fields().terms(\"f\").iterator(null);\n    assertTrue(terms.next() != null);\n    try {\n      assertEquals(0, terms.ord());\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support this op\n    }\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testTermOrd() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                             new MockAnalyzer(random)).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    Document doc = new Document();\n    doc.add(newField(\"f\", \"a b c\", TextField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    TermsEnum terms = r.getSequentialSubReaders()[0].fields().terms(\"f\").iterator(null);\n    assertTrue(terms.next() != null);\n    try {\n      assertEquals(0, terms.ord());\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support this op\n    }\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlex#testTermOrd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlex#testTermOrd().mjava","sourceNew":"  public void testTermOrd() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                             new MockAnalyzer(random)).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    Document doc = new Document();\n    doc.add(newField(\"f\", \"a b c\", TextField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    TermsEnum terms = getOnlySegmentReader(r).fields().terms(\"f\").iterator(null);\n    assertTrue(terms.next() != null);\n    try {\n      assertEquals(0, terms.ord());\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support this op\n    }\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testTermOrd() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                             new MockAnalyzer(random)).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    Document doc = new Document();\n    doc.add(newField(\"f\", \"a b c\", TextField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    TermsEnum terms = r.getSequentialSubReaders()[0].fields().terms(\"f\").iterator(null);\n    assertTrue(terms.next() != null);\n    try {\n      assertEquals(0, terms.ord());\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support this op\n    }\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlex#testTermOrd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlex#testTermOrd().mjava","sourceNew":"  public void testTermOrd() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                             new MockAnalyzer(random)).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    Document doc = new Document();\n    doc.add(newField(\"f\", \"a b c\", TextField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    TermsEnum terms = getOnlySegmentReader(r).fields().terms(\"f\").iterator(null);\n    assertTrue(terms.next() != null);\n    try {\n      assertEquals(0, terms.ord());\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support this op\n    }\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testTermOrd() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                             new MockAnalyzer(random)).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    Document doc = new Document();\n    doc.add(newField(\"f\", \"a b c\", TextField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    TermsEnum terms = getOnlySegmentReader(r).fields().terms(\"f\").iterator(null);\n    assertTrue(terms.next() != null);\n    try {\n      assertEquals(0, terms.ord());\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support this op\n    }\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","132903c28af3aa6f67284b78de91c0f0a99488c2"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["56da903869515527852ee21ea7ef7bfe414cd40d"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"868186558eb3a854ce7e720a52bb445795d54910":["3cc749c053615f5871f3b95715fe292f34e70a53"],"70ad682703b8585f5d0a637efec044d57ec05efb":["132903c28af3aa6f67284b78de91c0f0a99488c2","56da903869515527852ee21ea7ef7bfe414cd40d"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["d572389229127c297dd1fa5ce4758e1cec41e799","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["d572389229127c297dd1fa5ce4758e1cec41e799","163fe85a71d778fd2b7747f65ca27b54829e2e57"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["d572389229127c297dd1fa5ce4758e1cec41e799"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["70ad682703b8585f5d0a637efec044d57ec05efb","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"3cc749c053615f5871f3b95715fe292f34e70a53":["7b91922b55d15444d554721b352861d028eb8278"],"d572389229127c297dd1fa5ce4758e1cec41e799":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"962d04139994fce5193143ef35615499a9a96d78":["868da859b43505d9d2a023bfeae6dd0c795f5295","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3cc749c053615f5871f3b95715fe292f34e70a53","868186558eb3a854ce7e720a52bb445795d54910"],"7b91922b55d15444d554721b352861d028eb8278":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"56da903869515527852ee21ea7ef7bfe414cd40d":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a3776dccca01c11e7046323cfad46a3b4a471233":["56da903869515527852ee21ea7ef7bfe414cd40d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","56da903869515527852ee21ea7ef7bfe414cd40d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["d572389229127c297dd1fa5ce4758e1cec41e799"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","70ad682703b8585f5d0a637efec044d57ec05efb","56da903869515527852ee21ea7ef7bfe414cd40d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["1509f151d7692d84fae414b2b799ac06ba60fcb4","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["7b91922b55d15444d554721b352861d028eb8278"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"868186558eb3a854ce7e720a52bb445795d54910":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"70ad682703b8585f5d0a637efec044d57ec05efb":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["b21422ff1d1d56499dec481f193b402e5e8def5b","3242a09f703274d3b9283f2064a1a33064b53a1b"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["868186558eb3a854ce7e720a52bb445795d54910","5cab9a86bd67202d20b6adc463008c8e982b070a"],"d572389229127c297dd1fa5ce4758e1cec41e799":["3242a09f703274d3b9283f2064a1a33064b53a1b","4b103252dee6afa1b6d7a622c773d178788eb85a","163fe85a71d778fd2b7747f65ca27b54829e2e57"],"962d04139994fce5193143ef35615499a9a96d78":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7b91922b55d15444d554721b352861d028eb8278":["3cc749c053615f5871f3b95715fe292f34e70a53"],"56da903869515527852ee21ea7ef7bfe414cd40d":["f2c5f0cb44df114db4228c8f77861714b5cabaea","70ad682703b8585f5d0a637efec044d57ec05efb","a3776dccca01c11e7046323cfad46a3b4a471233","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["962d04139994fce5193143ef35615499a9a96d78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}