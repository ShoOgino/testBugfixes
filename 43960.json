{"path":"lucene/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int,boolean).mjava","commits":[{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton).mjava","sourceNew":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   */\n  public RunAutomaton(Automaton a, int maxInterval, boolean tableize) {\n    this.maxInterval = maxInterval;\n    a.determinize();\n    points = a.getStartPoints();\n    initial = a.initial.number;\n    final State[] states = a.getNumberedStates();\n    size = states.length;\n    accept = new boolean[size];\n    transitions = new int[size * points.length];\n    for (int n = 0; n < size * points.length; n++)\n      transitions[n] = -1;\n    for (State s : states) {\n      int n = s.number;\n      accept[n] = s.accept;\n      for (int c = 0; c < points.length; c++) {\n        State q = s.step(points[c]);\n        if (q != null) transitions[n * points.length + c] = q.number;\n      }\n    }\n    /*\n     * Set alphabet table for optimal run performance.\n     */\n    if (tableize) {\n      classmap = new int[maxInterval + 1];\n      int i = 0;\n      for (int j = 0; j <= maxInterval; j++) {\n        if (i + 1 < points.length && j == points[i + 1])\n          i++;\n        classmap[j] = i;\n      }\n    } else {\n      classmap = null;\n    }\n    this.automaton = a;\n  }\n\n","sourceOld":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   */\n  public RunAutomaton(Automaton a) {\n    a.determinize();\n    points = a.getStartPoints();\n    Set<State> states = a.getStates();\n    Automaton.setStateNumbers(states);\n    initial = a.initial.number;\n    size = states.size();\n    accept = new boolean[size];\n    transitions = new int[size * points.length];\n    for (int n = 0; n < size * points.length; n++)\n      transitions[n] = -1;\n    for (State s : states) {\n      int n = s.number;\n      accept[n] = s.accept;\n      for (int c = 0; c < points.length; c++) {\n        State q = s.step(points[c]);\n        if (q != null) transitions[n * points.length + c] = q.number;\n      }\n    }\n    /*\n     * Set alphabet table for optimal run performance.\n     */\n    classmap = new int[Character.MAX_VALUE + 1];\n    int i = 0;\n    for (int j = 0; j <= Character.MAX_VALUE; j++) {\n      if (i + 1 < points.length && j == points[i + 1]) i++;\n      classmap[j] = i;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd785ac0e3a5a9c6f804ba853f4b3b0cb5cb4aaa","date":1290101634,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int,boolean).mjava","sourceNew":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   */\n  public RunAutomaton(Automaton a, int maxInterval, boolean tableize) {\n    this.maxInterval = maxInterval;\n    a.determinize();\n    points = a.getStartPoints();\n    final State[] states = a.getNumberedStates();\n    initial = a.initial.number;\n    size = states.length;\n    accept = new boolean[size];\n    transitions = new int[size * points.length];\n    for (int n = 0; n < size * points.length; n++)\n      transitions[n] = -1;\n    for (State s : states) {\n      int n = s.number;\n      accept[n] = s.accept;\n      for (int c = 0; c < points.length; c++) {\n        State q = s.step(points[c]);\n        if (q != null) transitions[n * points.length + c] = q.number;\n      }\n    }\n    /*\n     * Set alphabet table for optimal run performance.\n     */\n    if (tableize) {\n      classmap = new int[maxInterval + 1];\n      int i = 0;\n      for (int j = 0; j <= maxInterval; j++) {\n        if (i + 1 < points.length && j == points[i + 1])\n          i++;\n        classmap[j] = i;\n      }\n    } else {\n      classmap = null;\n    }\n    this.automaton = a;\n  }\n\n","sourceOld":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   */\n  public RunAutomaton(Automaton a, int maxInterval, boolean tableize) {\n    this.maxInterval = maxInterval;\n    a.determinize();\n    points = a.getStartPoints();\n    initial = a.initial.number;\n    final State[] states = a.getNumberedStates();\n    size = states.length;\n    accept = new boolean[size];\n    transitions = new int[size * points.length];\n    for (int n = 0; n < size * points.length; n++)\n      transitions[n] = -1;\n    for (State s : states) {\n      int n = s.number;\n      accept[n] = s.accept;\n      for (int c = 0; c < points.length; c++) {\n        State q = s.step(points[c]);\n        if (q != null) transitions[n * points.length + c] = q.number;\n      }\n    }\n    /*\n     * Set alphabet table for optimal run performance.\n     */\n    if (tableize) {\n      classmap = new int[maxInterval + 1];\n      int i = 0;\n      for (int j = 0; j <= maxInterval; j++) {\n        if (i + 1 < points.length && j == points[i + 1])\n          i++;\n        classmap[j] = i;\n      }\n    } else {\n      classmap = null;\n    }\n    this.automaton = a;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int,boolean).mjava","sourceNew":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   */\n  public RunAutomaton(Automaton a, int maxInterval, boolean tableize) {\n    this.maxInterval = maxInterval;\n    a.determinize();\n    points = a.getStartPoints();\n    final State[] states = a.getNumberedStates();\n    initial = a.initial.number;\n    size = states.length;\n    accept = new boolean[size];\n    transitions = new int[size * points.length];\n    for (int n = 0; n < size * points.length; n++)\n      transitions[n] = -1;\n    for (State s : states) {\n      int n = s.number;\n      accept[n] = s.accept;\n      for (int c = 0; c < points.length; c++) {\n        State q = s.step(points[c]);\n        if (q != null) transitions[n * points.length + c] = q.number;\n      }\n    }\n    /*\n     * Set alphabet table for optimal run performance.\n     */\n    if (tableize) {\n      classmap = new int[maxInterval + 1];\n      int i = 0;\n      for (int j = 0; j <= maxInterval; j++) {\n        if (i + 1 < points.length && j == points[i + 1])\n          i++;\n        classmap[j] = i;\n      }\n    } else {\n      classmap = null;\n    }\n    this.automaton = a;\n  }\n\n","sourceOld":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   */\n  public RunAutomaton(Automaton a, int maxInterval, boolean tableize) {\n    this.maxInterval = maxInterval;\n    a.determinize();\n    points = a.getStartPoints();\n    initial = a.initial.number;\n    final State[] states = a.getNumberedStates();\n    size = states.length;\n    accept = new boolean[size];\n    transitions = new int[size * points.length];\n    for (int n = 0; n < size * points.length; n++)\n      transitions[n] = -1;\n    for (State s : states) {\n      int n = s.number;\n      accept[n] = s.accept;\n      for (int c = 0; c < points.length; c++) {\n        State q = s.step(points[c]);\n        if (q != null) transitions[n * points.length + c] = q.number;\n      }\n    }\n    /*\n     * Set alphabet table for optimal run performance.\n     */\n    if (tableize) {\n      classmap = new int[maxInterval + 1];\n      int i = 0;\n      for (int j = 0; j <= maxInterval; j++) {\n        if (i + 1 < points.length && j == points[i + 1])\n          i++;\n        classmap[j] = i;\n      }\n    } else {\n      classmap = null;\n    }\n    this.automaton = a;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int,boolean).mjava","sourceNew":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   */\n  public RunAutomaton(Automaton a, int maxInterval, boolean tableize) {\n    this.maxInterval = maxInterval;\n    a.determinize();\n    points = a.getStartPoints();\n    final State[] states = a.getNumberedStates();\n    initial = a.initial.number;\n    size = states.length;\n    accept = new boolean[size];\n    transitions = new int[size * points.length];\n    for (int n = 0; n < size * points.length; n++)\n      transitions[n] = -1;\n    for (State s : states) {\n      int n = s.number;\n      accept[n] = s.accept;\n      for (int c = 0; c < points.length; c++) {\n        State q = s.step(points[c]);\n        if (q != null) transitions[n * points.length + c] = q.number;\n      }\n    }\n    /*\n     * Set alphabet table for optimal run performance.\n     */\n    if (tableize) {\n      classmap = new int[maxInterval + 1];\n      int i = 0;\n      for (int j = 0; j <= maxInterval; j++) {\n        if (i + 1 < points.length && j == points[i + 1])\n          i++;\n        classmap[j] = i;\n      }\n    } else {\n      classmap = null;\n    }\n    this.automaton = a;\n  }\n\n","sourceOld":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   */\n  public RunAutomaton(Automaton a, int maxInterval, boolean tableize) {\n    this.maxInterval = maxInterval;\n    a.determinize();\n    points = a.getStartPoints();\n    initial = a.initial.number;\n    final State[] states = a.getNumberedStates();\n    size = states.length;\n    accept = new boolean[size];\n    transitions = new int[size * points.length];\n    for (int n = 0; n < size * points.length; n++)\n      transitions[n] = -1;\n    for (State s : states) {\n      int n = s.number;\n      accept[n] = s.accept;\n      for (int c = 0; c < points.length; c++) {\n        State q = s.step(points[c]);\n        if (q != null) transitions[n * points.length + c] = q.number;\n      }\n    }\n    /*\n     * Set alphabet table for optimal run performance.\n     */\n    if (tableize) {\n      classmap = new int[maxInterval + 1];\n      int i = 0;\n      for (int j = 0; j <= maxInterval; j++) {\n        if (i + 1 < points.length && j == points[i + 1])\n          i++;\n        classmap[j] = i;\n      }\n    } else {\n      classmap = null;\n    }\n    this.automaton = a;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"95f7ab6c9bc005d456da65d8d74c5338ffc031aa","date":1297016220,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int,boolean).mjava","sourceNew":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   */\n  public RunAutomaton(Automaton a, int maxInterval, boolean tableize) {\n    this.maxInterval = maxInterval;\n    a.determinize();\n    points = a.getStartPoints();\n    final State[] states = a.getNumberedStates();\n    initial = a.initial.number;\n    size = states.length;\n    accept = new boolean[size];\n    transitions = new int[size * points.length];\n    for (int n = 0; n < size * points.length; n++)\n      transitions[n] = -1;\n    for (State s : states) {\n      int n = s.number;\n      accept[n] = s.accept;\n      for (int c = 0; c < points.length; c++) {\n        State q = s.step(points[c]);\n        if (q != null) transitions[n * points.length + c] = q.number;\n      }\n    }\n    /*\n     * Set alphabet table for optimal run performance.\n     */\n    if (tableize) {\n      classmap = new int[maxInterval + 1];\n      int i = 0;\n      for (int j = 0; j <= maxInterval; j++) {\n        if (i + 1 < points.length && j == points[i + 1])\n          i++;\n        classmap[j] = i;\n      }\n    } else {\n      classmap = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   */\n  public RunAutomaton(Automaton a, int maxInterval, boolean tableize) {\n    this.maxInterval = maxInterval;\n    a.determinize();\n    points = a.getStartPoints();\n    final State[] states = a.getNumberedStates();\n    initial = a.initial.number;\n    size = states.length;\n    accept = new boolean[size];\n    transitions = new int[size * points.length];\n    for (int n = 0; n < size * points.length; n++)\n      transitions[n] = -1;\n    for (State s : states) {\n      int n = s.number;\n      accept[n] = s.accept;\n      for (int c = 0; c < points.length; c++) {\n        State q = s.step(points[c]);\n        if (q != null) transitions[n * points.length + c] = q.number;\n      }\n    }\n    /*\n     * Set alphabet table for optimal run performance.\n     */\n    if (tableize) {\n      classmap = new int[maxInterval + 1];\n      int i = 0;\n      for (int j = 0; j <= maxInterval; j++) {\n        if (i + 1 < points.length && j == points[i + 1])\n          i++;\n        classmap[j] = i;\n      }\n    } else {\n      classmap = null;\n    }\n    this.automaton = a;\n  }\n\n","bugFix":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int,boolean).mjava","sourceNew":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   */\n  public RunAutomaton(Automaton a, int maxInterval, boolean tableize) {\n    this.maxInterval = maxInterval;\n    a.determinize();\n    points = a.getStartPoints();\n    final State[] states = a.getNumberedStates();\n    initial = a.initial.number;\n    size = states.length;\n    accept = new boolean[size];\n    transitions = new int[size * points.length];\n    for (int n = 0; n < size * points.length; n++)\n      transitions[n] = -1;\n    for (State s : states) {\n      int n = s.number;\n      accept[n] = s.accept;\n      for (int c = 0; c < points.length; c++) {\n        State q = s.step(points[c]);\n        if (q != null) transitions[n * points.length + c] = q.number;\n      }\n    }\n    /*\n     * Set alphabet table for optimal run performance.\n     */\n    if (tableize) {\n      classmap = new int[maxInterval + 1];\n      int i = 0;\n      for (int j = 0; j <= maxInterval; j++) {\n        if (i + 1 < points.length && j == points[i + 1])\n          i++;\n        classmap[j] = i;\n      }\n    } else {\n      classmap = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   */\n  public RunAutomaton(Automaton a, int maxInterval, boolean tableize) {\n    this.maxInterval = maxInterval;\n    a.determinize();\n    points = a.getStartPoints();\n    final State[] states = a.getNumberedStates();\n    initial = a.initial.number;\n    size = states.length;\n    accept = new boolean[size];\n    transitions = new int[size * points.length];\n    for (int n = 0; n < size * points.length; n++)\n      transitions[n] = -1;\n    for (State s : states) {\n      int n = s.number;\n      accept[n] = s.accept;\n      for (int c = 0; c < points.length; c++) {\n        State q = s.step(points[c]);\n        if (q != null) transitions[n * points.length + c] = q.number;\n      }\n    }\n    /*\n     * Set alphabet table for optimal run performance.\n     */\n    if (tableize) {\n      classmap = new int[maxInterval + 1];\n      int i = 0;\n      for (int j = 0; j <= maxInterval; j++) {\n        if (i + 1 < points.length && j == points[i + 1])\n          i++;\n        classmap[j] = i;\n      }\n    } else {\n      classmap = null;\n    }\n    this.automaton = a;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int,boolean).mjava","sourceNew":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   */\n  public RunAutomaton(Automaton a, int maxInterval, boolean tableize) {\n    this.maxInterval = maxInterval;\n    a.determinize();\n    points = a.getStartPoints();\n    final State[] states = a.getNumberedStates();\n    initial = a.initial.number;\n    size = states.length;\n    accept = new boolean[size];\n    transitions = new int[size * points.length];\n    for (int n = 0; n < size * points.length; n++)\n      transitions[n] = -1;\n    for (State s : states) {\n      int n = s.number;\n      accept[n] = s.accept;\n      for (int c = 0; c < points.length; c++) {\n        State q = s.step(points[c]);\n        if (q != null) transitions[n * points.length + c] = q.number;\n      }\n    }\n    /*\n     * Set alphabet table for optimal run performance.\n     */\n    if (tableize) {\n      classmap = new int[maxInterval + 1];\n      int i = 0;\n      for (int j = 0; j <= maxInterval; j++) {\n        if (i + 1 < points.length && j == points[i + 1])\n          i++;\n        classmap[j] = i;\n      }\n    } else {\n      classmap = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   */\n  public RunAutomaton(Automaton a, int maxInterval, boolean tableize) {\n    this.maxInterval = maxInterval;\n    a.determinize();\n    points = a.getStartPoints();\n    final State[] states = a.getNumberedStates();\n    initial = a.initial.number;\n    size = states.length;\n    accept = new boolean[size];\n    transitions = new int[size * points.length];\n    for (int n = 0; n < size * points.length; n++)\n      transitions[n] = -1;\n    for (State s : states) {\n      int n = s.number;\n      accept[n] = s.accept;\n      for (int c = 0; c < points.length; c++) {\n        State q = s.step(points[c]);\n        if (q != null) transitions[n * points.length + c] = q.number;\n      }\n    }\n    /*\n     * Set alphabet table for optimal run performance.\n     */\n    if (tableize) {\n      classmap = new int[maxInterval + 1];\n      int i = 0;\n      for (int j = 0; j <= maxInterval; j++) {\n        if (i + 1 < points.length && j == points[i + 1])\n          i++;\n        classmap[j] = i;\n      }\n    } else {\n      classmap = null;\n    }\n    this.automaton = a;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int,boolean).mjava","sourceNew":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   */\n  public RunAutomaton(Automaton a, int maxInterval, boolean tableize) {\n    this.maxInterval = maxInterval;\n    a.determinize();\n    points = a.getStartPoints();\n    final State[] states = a.getNumberedStates();\n    initial = a.initial.number;\n    size = states.length;\n    accept = new boolean[size];\n    transitions = new int[size * points.length];\n    for (int n = 0; n < size * points.length; n++)\n      transitions[n] = -1;\n    for (State s : states) {\n      int n = s.number;\n      accept[n] = s.accept;\n      for (int c = 0; c < points.length; c++) {\n        State q = s.step(points[c]);\n        if (q != null) transitions[n * points.length + c] = q.number;\n      }\n    }\n    /*\n     * Set alphabet table for optimal run performance.\n     */\n    if (tableize) {\n      classmap = new int[maxInterval + 1];\n      int i = 0;\n      for (int j = 0; j <= maxInterval; j++) {\n        if (i + 1 < points.length && j == points[i + 1])\n          i++;\n        classmap[j] = i;\n      }\n    } else {\n      classmap = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   */\n  public RunAutomaton(Automaton a, int maxInterval, boolean tableize) {\n    this.maxInterval = maxInterval;\n    a.determinize();\n    points = a.getStartPoints();\n    final State[] states = a.getNumberedStates();\n    initial = a.initial.number;\n    size = states.length;\n    accept = new boolean[size];\n    transitions = new int[size * points.length];\n    for (int n = 0; n < size * points.length; n++)\n      transitions[n] = -1;\n    for (State s : states) {\n      int n = s.number;\n      accept[n] = s.accept;\n      for (int c = 0; c < points.length; c++) {\n        State q = s.step(points[c]);\n        if (q != null) transitions[n * points.length + c] = q.number;\n      }\n    }\n    /*\n     * Set alphabet table for optimal run performance.\n     */\n    if (tableize) {\n      classmap = new int[maxInterval + 1];\n      int i = 0;\n      for (int j = 0; j <= maxInterval; j++) {\n        if (i + 1 < points.length && j == points[i + 1])\n          i++;\n        classmap[j] = i;\n      }\n    } else {\n      classmap = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cd785ac0e3a5a9c6f804ba853f4b3b0cb5cb4aaa":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["95f7ab6c9bc005d456da65d8d74c5338ffc031aa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","95f7ab6c9bc005d456da65d8d74c5338ffc031aa"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"95f7ab6c9bc005d456da65d8d74c5338ffc031aa":["cd785ac0e3a5a9c6f804ba853f4b3b0cb5cb4aaa"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5acb0ee59cc50caf85402e92d148fdb2af61bc19","cd785ac0e3a5a9c6f804ba853f4b3b0cb5cb4aaa"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","95f7ab6c9bc005d456da65d8d74c5338ffc031aa"],"3bb13258feba31ab676502787ab2e1779f129b7a":["5acb0ee59cc50caf85402e92d148fdb2af61bc19","cd785ac0e3a5a9c6f804ba853f4b3b0cb5cb4aaa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"cd785ac0e3a5a9c6f804ba853f4b3b0cb5cb4aaa":["95f7ab6c9bc005d456da65d8d74c5338ffc031aa","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["cd785ac0e3a5a9c6f804ba853f4b3b0cb5cb4aaa","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"95f7ab6c9bc005d456da65d8d74c5338ffc031aa":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}