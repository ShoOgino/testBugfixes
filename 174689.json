{"path":"lucene/core/src/java/org/apache/lucene/document/BinaryPoint#BinaryPoint(String,byte[],IndexableFieldType).mjava","commits":[{"id":"eeea025b4a7a8e8f70426ac4527ef481b3a86b72","date":1476199075,"type":1,"author":"yonik","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/BinaryPoint#BinaryPoint(String,byte[],IndexableFieldType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/BinaryPoint#BinaryPoint(String,byte[],FieldType).mjava","sourceNew":"  /** Expert API */\n  public BinaryPoint(String name, byte[] packedPoint, IndexableFieldType type) {\n    super(name, packedPoint, type);\n    if (packedPoint.length != type.pointDimensionCount() * type.pointNumBytes()) {\n      throw new IllegalArgumentException(\"packedPoint is length=\" + packedPoint.length + \" but type.pointDimensionCount()=\" + type.pointDimensionCount() + \" and type.pointNumBytes()=\" + type.pointNumBytes());\n    }\n  }\n\n","sourceOld":"  /** Expert API */\n  public BinaryPoint(String name, byte[] packedPoint, FieldType type) {\n    super(name, packedPoint, type);\n    if (packedPoint.length != type.pointDimensionCount() * type.pointNumBytes()) {\n      throw new IllegalArgumentException(\"packedPoint is length=\" + packedPoint.length + \" but type.pointDimensionCount()=\" + type.pointDimensionCount() + \" and type.pointNumBytes()=\" + type.pointNumBytes());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/BinaryPoint#BinaryPoint(String,byte[],IndexableFieldType).mjava","pathOld":"/dev/null","sourceNew":"  /** Expert API */\n  public BinaryPoint(String name, byte[] packedPoint, IndexableFieldType type) {\n    super(name, packedPoint, type);\n    if (packedPoint.length != type.pointDimensionCount() * type.pointNumBytes()) {\n      throw new IllegalArgumentException(\"packedPoint is length=\" + packedPoint.length + \" but type.pointDimensionCount()=\" + type.pointDimensionCount() + \" and type.pointNumBytes()=\" + type.pointNumBytes());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/BinaryPoint#BinaryPoint(String,byte[],IndexableFieldType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/BinaryPoint#BinaryPoint(String,byte[],IndexableFieldType).mjava","sourceNew":"  /** Expert API */\n  public BinaryPoint(String name, byte[] packedPoint, IndexableFieldType type) {\n    super(name, packedPoint, type);\n    if (packedPoint.length != type.pointDataDimensionCount() * type.pointNumBytes()) {\n      throw new IllegalArgumentException(\"packedPoint is length=\" + packedPoint.length + \" but type.pointDimensionCount()=\" + type.pointDataDimensionCount() + \" and type.pointNumBytes()=\" + type.pointNumBytes());\n    }\n  }\n\n","sourceOld":"  /** Expert API */\n  public BinaryPoint(String name, byte[] packedPoint, IndexableFieldType type) {\n    super(name, packedPoint, type);\n    if (packedPoint.length != type.pointDimensionCount() * type.pointNumBytes()) {\n      throw new IllegalArgumentException(\"packedPoint is length=\" + packedPoint.length + \" but type.pointDimensionCount()=\" + type.pointDimensionCount() + \" and type.pointNumBytes()=\" + type.pointNumBytes());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ed8c026ba85e3c42fb89605b2032dc6f9cc241","date":1581113294,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/BinaryPoint#BinaryPoint(String,byte[],IndexableFieldType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/BinaryPoint#BinaryPoint(String,byte[],IndexableFieldType).mjava","sourceNew":"  /** Expert API */\n  public BinaryPoint(String name, byte[] packedPoint, IndexableFieldType type) {\n    super(name, packedPoint, type);\n    if (packedPoint.length != type.pointDimensionCount() * type.pointNumBytes()) {\n      throw new IllegalArgumentException(\"packedPoint is length=\" + packedPoint.length + \" but type.pointDimensionCount()=\" + type.pointDimensionCount() + \" and type.pointNumBytes()=\" + type.pointNumBytes());\n    }\n  }\n\n","sourceOld":"  /** Expert API */\n  public BinaryPoint(String name, byte[] packedPoint, IndexableFieldType type) {\n    super(name, packedPoint, type);\n    if (packedPoint.length != type.pointDataDimensionCount() * type.pointNumBytes()) {\n      throw new IllegalArgumentException(\"packedPoint is length=\" + packedPoint.length + \" but type.pointDimensionCount()=\" + type.pointDataDimensionCount() + \" and type.pointNumBytes()=\" + type.pointNumBytes());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eeea025b4a7a8e8f70426ac4527ef481b3a86b72":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["f6652c943595e92c187ee904c382863013eae28f"],"f6652c943595e92c187ee904c382863013eae28f":["eeea025b4a7a8e8f70426ac4527ef481b3a86b72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eeea025b4a7a8e8f70426ac4527ef481b3a86b72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"]},"commit2Childs":{"eeea025b4a7a8e8f70426ac4527ef481b3a86b72":["f6652c943595e92c187ee904c382863013eae28f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f6652c943595e92c187ee904c382863013eae28f":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eeea025b4a7a8e8f70426ac4527ef481b3a86b72","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}