{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase.Accumulator#accumulateObject(Object,long,java.util.Map[Field,Object],java.util.Collection[Object]).mjava","commits":[{"id":"d943163030bbd7a9caf93cb5fea92257390a2a99","date":1403094254,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase.Accumulator#accumulateObject(Object,long,java.util.Map[Field,Object],java.util.Collection[Object]).mjava","pathOld":"/dev/null","sourceNew":"    public long accumulateObject(Object o, long shallowSize, java.util.Map<Field, Object> fieldValues, java.util.Collection<Object> queue) {\n      if (EXCLUDED_OBJECTS.contains(o)) {\n        return 0L;\n      }\n      for (Class<?> clazz = o.getClass(); clazz != null; clazz = clazz.getSuperclass()) {\n        if (EXCLUDED_CLASSES.contains(clazz) && o != root) {\n          return 0;\n        }\n      }\n      // we have no way to estimate the size of these things in codecs although\n      // something like a Collections.newSetFromMap(new HashMap<>()) uses quite\n      // some memory... So for now the test ignores the overhead of such\n      // collections but can we do better?\n      if (o instanceof Collection) {\n        Collection<?> coll = (Collection<?>) o;\n        queue.addAll((Collection<?>) o);\n        return (long) coll.size() * RamUsageEstimator.NUM_BYTES_OBJECT_REF;\n      } else if (o instanceof Map) {\n        final Map<?, ?> map = (Map<?,?>) o;\n        queue.addAll(map.keySet());\n        queue.addAll(map.values());\n        return 2L * map.size() * RamUsageEstimator.NUM_BYTES_OBJECT_REF;\n      }\n      return super.accumulateObject(o, shallowSize, fieldValues, queue);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ee12c58672cd82c0cbf140bb1932e3a2aa382a3d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e57c73924f3b8c19defa62e96bfa34a4922d49c2","date":1403106358,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase.Accumulator#accumulateObject(Object,long,java.util.Map[Field,Object],java.util.Collection[Object]).mjava","pathOld":"/dev/null","sourceNew":"    public long accumulateObject(Object o, long shallowSize, java.util.Map<Field, Object> fieldValues, java.util.Collection<Object> queue) {\n      if (EXCLUDED_OBJECTS.contains(o)) {\n        return 0L;\n      }\n      for (Class<?> clazz = o.getClass(); clazz != null; clazz = clazz.getSuperclass()) {\n        if (EXCLUDED_CLASSES.contains(clazz) && o != root) {\n          return 0;\n        }\n      }\n      // we have no way to estimate the size of these things in codecs although\n      // something like a Collections.newSetFromMap(new HashMap<>()) uses quite\n      // some memory... So for now the test ignores the overhead of such\n      // collections but can we do better?\n      if (o instanceof Collection) {\n        Collection<?> coll = (Collection<?>) o;\n        queue.addAll((Collection<?>) o);\n        return (long) coll.size() * RamUsageEstimator.NUM_BYTES_OBJECT_REF;\n      } else if (o instanceof Map) {\n        final Map<?, ?> map = (Map<?,?>) o;\n        queue.addAll(map.keySet());\n        queue.addAll(map.values());\n        return 2L * map.size() * RamUsageEstimator.NUM_BYTES_OBJECT_REF;\n      }\n      return super.accumulateObject(o, shallowSize, fieldValues, queue);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4554a06321a11fbd3a1dfb8943f7620f19e8a1dd","date":1403119668,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase.Accumulator#accumulateObject(Object,long,java.util.Map[Field,Object],java.util.Collection[Object]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase.Accumulator#accumulateObject(Object,long,java.util.Map[Field,Object],java.util.Collection[Object]).mjava","sourceNew":"    public long accumulateObject(Object o, long shallowSize, java.util.Map<Field, Object> fieldValues, java.util.Collection<Object> queue) {\n      if (EXCLUDED_OBJECTS.contains(o)) {\n        return 0L;\n      }\n      for (Class<?> clazz = o.getClass(); clazz != null; clazz = clazz.getSuperclass()) {\n        if (EXCLUDED_CLASSES.contains(clazz) && o != root) {\n          return 0;\n        }\n      }\n      // we have no way to estimate the size of these things in codecs although\n      // something like a Collections.newSetFromMap(new HashMap<>()) uses quite\n      // some memory... So for now the test ignores the overhead of such\n      // collections but can we do better?\n      if (o instanceof Collection) {\n        Collection<?> coll = (Collection<?>) o;\n        queue.addAll((Collection<?>) o);\n        return (long) coll.size() * RamUsageEstimator.NUM_BYTES_OBJECT_REF;\n      } else if (o instanceof Map) {\n        final Map<?, ?> map = (Map<?,?>) o;\n        queue.addAll(map.keySet());\n        queue.addAll(map.values());\n        return 2L * map.size() * RamUsageEstimator.NUM_BYTES_OBJECT_REF;\n      }\n      long v = super.accumulateObject(o, shallowSize, fieldValues, queue);\n      // System.out.println(o.getClass() + \"=\" + v);\n      return v;\n    }\n\n","sourceOld":"    public long accumulateObject(Object o, long shallowSize, java.util.Map<Field, Object> fieldValues, java.util.Collection<Object> queue) {\n      if (EXCLUDED_OBJECTS.contains(o)) {\n        return 0L;\n      }\n      for (Class<?> clazz = o.getClass(); clazz != null; clazz = clazz.getSuperclass()) {\n        if (EXCLUDED_CLASSES.contains(clazz) && o != root) {\n          return 0;\n        }\n      }\n      // we have no way to estimate the size of these things in codecs although\n      // something like a Collections.newSetFromMap(new HashMap<>()) uses quite\n      // some memory... So for now the test ignores the overhead of such\n      // collections but can we do better?\n      if (o instanceof Collection) {\n        Collection<?> coll = (Collection<?>) o;\n        queue.addAll((Collection<?>) o);\n        return (long) coll.size() * RamUsageEstimator.NUM_BYTES_OBJECT_REF;\n      } else if (o instanceof Map) {\n        final Map<?, ?> map = (Map<?,?>) o;\n        queue.addAll(map.keySet());\n        queue.addAll(map.values());\n        return 2L * map.size() * RamUsageEstimator.NUM_BYTES_OBJECT_REF;\n      }\n      return super.accumulateObject(o, shallowSize, fieldValues, queue);\n    }\n\n","bugFix":null,"bugIntro":["ee12c58672cd82c0cbf140bb1932e3a2aa382a3d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"282412d91b33b1a7f2efd2610399fe03045d7d2c","date":1403134999,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase.Accumulator#accumulateObject(Object,long,java.util.Map[Field,Object],java.util.Collection[Object]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase.Accumulator#accumulateObject(Object,long,java.util.Map[Field,Object],java.util.Collection[Object]).mjava","sourceNew":"    public long accumulateObject(Object o, long shallowSize, java.util.Map<Field, Object> fieldValues, java.util.Collection<Object> queue) {\n      for (Class<?> clazz = o.getClass(); clazz != null; clazz = clazz.getSuperclass()) {\n        if (EXCLUDED_CLASSES.contains(clazz) && o != root) {\n          return 0;\n        }\n      }\n      // we have no way to estimate the size of these things in codecs although\n      // something like a Collections.newSetFromMap(new HashMap<>()) uses quite\n      // some memory... So for now the test ignores the overhead of such\n      // collections but can we do better?\n      if (o instanceof Collection) {\n        Collection<?> coll = (Collection<?>) o;\n        queue.addAll((Collection<?>) o);\n        return (long) coll.size() * RamUsageEstimator.NUM_BYTES_OBJECT_REF;\n      } else if (o instanceof Map) {\n        final Map<?, ?> map = (Map<?,?>) o;\n        queue.addAll(map.keySet());\n        queue.addAll(map.values());\n        return 2L * map.size() * RamUsageEstimator.NUM_BYTES_OBJECT_REF;\n      }\n      long v = super.accumulateObject(o, shallowSize, fieldValues, queue);\n      // System.out.println(o.getClass() + \"=\" + v);\n      return v;\n    }\n\n","sourceOld":"    public long accumulateObject(Object o, long shallowSize, java.util.Map<Field, Object> fieldValues, java.util.Collection<Object> queue) {\n      if (EXCLUDED_OBJECTS.contains(o)) {\n        return 0L;\n      }\n      for (Class<?> clazz = o.getClass(); clazz != null; clazz = clazz.getSuperclass()) {\n        if (EXCLUDED_CLASSES.contains(clazz) && o != root) {\n          return 0;\n        }\n      }\n      // we have no way to estimate the size of these things in codecs although\n      // something like a Collections.newSetFromMap(new HashMap<>()) uses quite\n      // some memory... So for now the test ignores the overhead of such\n      // collections but can we do better?\n      if (o instanceof Collection) {\n        Collection<?> coll = (Collection<?>) o;\n        queue.addAll((Collection<?>) o);\n        return (long) coll.size() * RamUsageEstimator.NUM_BYTES_OBJECT_REF;\n      } else if (o instanceof Map) {\n        final Map<?, ?> map = (Map<?,?>) o;\n        queue.addAll(map.keySet());\n        queue.addAll(map.values());\n        return 2L * map.size() * RamUsageEstimator.NUM_BYTES_OBJECT_REF;\n      }\n      long v = super.accumulateObject(o, shallowSize, fieldValues, queue);\n      // System.out.println(o.getClass() + \"=\" + v);\n      return v;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9d34561cfa6c4a189806b851dc6e06c4ef8c8556","date":1409388745,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase.Accumulator#accumulateObject(Object,long,Map[Field,Object],Collection[Object]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase.Accumulator#accumulateObject(Object,long,java.util.Map[Field,Object],java.util.Collection[Object]).mjava","sourceNew":"    public long accumulateObject(Object o, long shallowSize, Map<Field, Object> fieldValues, Collection<Object> queue) {\n      for (Class<?> clazz = o.getClass(); clazz != null; clazz = clazz.getSuperclass()) {\n        if (EXCLUDED_CLASSES.contains(clazz) && o != root) {\n          return 0;\n        }\n      }\n      // we have no way to estimate the size of these things in codecs although\n      // something like a Collections.newSetFromMap(new HashMap<>()) uses quite\n      // some memory... So for now the test ignores the overhead of such\n      // collections but can we do better?\n      if (o instanceof Collection) {\n        Collection<?> coll = (Collection<?>) o;\n        queue.addAll((Collection<?>) o);\n        return (long) coll.size() * RamUsageEstimator.NUM_BYTES_OBJECT_REF;\n      } else if (o instanceof Map) {\n        final Map<?, ?> map = (Map<?,?>) o;\n        queue.addAll(map.keySet());\n        queue.addAll(map.values());\n        return 2L * map.size() * RamUsageEstimator.NUM_BYTES_OBJECT_REF;\n      }\n      long v = super.accumulateObject(o, shallowSize, fieldValues, queue);\n      // System.out.println(o.getClass() + \"=\" + v);\n      return v;\n    }\n\n","sourceOld":"    public long accumulateObject(Object o, long shallowSize, java.util.Map<Field, Object> fieldValues, java.util.Collection<Object> queue) {\n      for (Class<?> clazz = o.getClass(); clazz != null; clazz = clazz.getSuperclass()) {\n        if (EXCLUDED_CLASSES.contains(clazz) && o != root) {\n          return 0;\n        }\n      }\n      // we have no way to estimate the size of these things in codecs although\n      // something like a Collections.newSetFromMap(new HashMap<>()) uses quite\n      // some memory... So for now the test ignores the overhead of such\n      // collections but can we do better?\n      if (o instanceof Collection) {\n        Collection<?> coll = (Collection<?>) o;\n        queue.addAll((Collection<?>) o);\n        return (long) coll.size() * RamUsageEstimator.NUM_BYTES_OBJECT_REF;\n      } else if (o instanceof Map) {\n        final Map<?, ?> map = (Map<?,?>) o;\n        queue.addAll(map.keySet());\n        queue.addAll(map.values());\n        return 2L * map.size() * RamUsageEstimator.NUM_BYTES_OBJECT_REF;\n      }\n      long v = super.accumulateObject(o, shallowSize, fieldValues, queue);\n      // System.out.println(o.getClass() + \"=\" + v);\n      return v;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"9d34561cfa6c4a189806b851dc6e06c4ef8c8556":["282412d91b33b1a7f2efd2610399fe03045d7d2c"],"282412d91b33b1a7f2efd2610399fe03045d7d2c":["4554a06321a11fbd3a1dfb8943f7620f19e8a1dd"],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d943163030bbd7a9caf93cb5fea92257390a2a99"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d943163030bbd7a9caf93cb5fea92257390a2a99":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4554a06321a11fbd3a1dfb8943f7620f19e8a1dd":["d943163030bbd7a9caf93cb5fea92257390a2a99"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9d34561cfa6c4a189806b851dc6e06c4ef8c8556"]},"commit2Childs":{"9d34561cfa6c4a189806b851dc6e06c4ef8c8556":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"282412d91b33b1a7f2efd2610399fe03045d7d2c":["9d34561cfa6c4a189806b851dc6e06c4ef8c8556"],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","d943163030bbd7a9caf93cb5fea92257390a2a99"],"d943163030bbd7a9caf93cb5fea92257390a2a99":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","4554a06321a11fbd3a1dfb8943f7620f19e8a1dd"],"4554a06321a11fbd3a1dfb8943f7620f19e8a1dd":["282412d91b33b1a7f2efd2610399fe03045d7d2c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}