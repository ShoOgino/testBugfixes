{"path":"src/test/org/apache/lucene/index/TestIndexWriter#testDoubleOffsetCounting().mjava","commits":[{"id":"af2505fad8b3090c182da766589b31256e69bf3f","date":1226086659,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDoubleOffsetCounting().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-1442\n  public void testDoubleOffsetCounting() throws Exception {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    Field f = new Field(\"field\", \"abcd\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f);\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n    assertEquals(2, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(4, termOffsets[1].getStartOffset());\n    assertEquals(8, termOffsets[1].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestDoubleOffsetCounting().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDoubleOffsetCounting().mjava","sourceNew":"  // LUCENE-1442\n  public void xxxtestDoubleOffsetCounting() throws Exception {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    Field f = new Field(\"field\", \"abcd\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f);\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n    assertEquals(2, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(4, termOffsets[1].getStartOffset());\n    assertEquals(8, termOffsets[1].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1442\n  public void testDoubleOffsetCounting() throws Exception {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    Field f = new Field(\"field\", \"abcd\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f);\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n    assertEquals(2, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(4, termOffsets[1].getStartOffset());\n    assertEquals(8, termOffsets[1].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDoubleOffsetCounting().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestDoubleOffsetCounting().mjava","sourceNew":"  // LUCENE-1442\n  public void testDoubleOffsetCounting() throws Exception {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    Field f = new Field(\"field\", \"abcd\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f);\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n    assertEquals(2, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(4, termOffsets[1].getStartOffset());\n    assertEquals(8, termOffsets[1].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1442\n  public void xxxtestDoubleOffsetCounting() throws Exception {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    Field f = new Field(\"field\", \"abcd\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f);\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n    assertEquals(2, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(4, termOffsets[1].getStartOffset());\n    assertEquals(8, termOffsets[1].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"457c790b0d3d5883da64fb842ea54813004bb796","date":1248495093,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDoubleOffsetCounting().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDoubleOffsetCounting().mjava","sourceNew":"  // LUCENE-1442\n  public void testDoubleOffsetCounting() throws Exception {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    Field f = new Field(\"field\", \"abcd\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f);\n    doc.add(f);\n    Field f2 = new Field(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f2);\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n\n    // Token \"\" occurred once\n    assertEquals(1, termOffsets.length);\n    assertEquals(8, termOffsets[0].getStartOffset());\n    assertEquals(8, termOffsets[0].getEndOffset());\n\n    // Token \"abcd\" occurred three times\n    termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(1);\n    assertEquals(3, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(4, termOffsets[1].getStartOffset());\n    assertEquals(8, termOffsets[1].getEndOffset());\n    assertEquals(8, termOffsets[2].getStartOffset());\n    assertEquals(12, termOffsets[2].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1442\n  public void testDoubleOffsetCounting() throws Exception {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    Field f = new Field(\"field\", \"abcd\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f);\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n    assertEquals(2, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(4, termOffsets[1].getStartOffset());\n    assertEquals(8, termOffsets[1].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDoubleOffsetCounting().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDoubleOffsetCounting().mjava","sourceNew":"  // LUCENE-1442\n  public void testDoubleOffsetCounting() throws Exception {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    Field f = new Field(\"field\", \"abcd\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f);\n    doc.add(f);\n    Field f2 = new Field(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f2);\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir, true);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n\n    // Token \"\" occurred once\n    assertEquals(1, termOffsets.length);\n    assertEquals(8, termOffsets[0].getStartOffset());\n    assertEquals(8, termOffsets[0].getEndOffset());\n\n    // Token \"abcd\" occurred three times\n    termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(1);\n    assertEquals(3, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(4, termOffsets[1].getStartOffset());\n    assertEquals(8, termOffsets[1].getEndOffset());\n    assertEquals(8, termOffsets[2].getStartOffset());\n    assertEquals(12, termOffsets[2].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1442\n  public void testDoubleOffsetCounting() throws Exception {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    Field f = new Field(\"field\", \"abcd\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f);\n    doc.add(f);\n    Field f2 = new Field(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f2);\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n\n    // Token \"\" occurred once\n    assertEquals(1, termOffsets.length);\n    assertEquals(8, termOffsets[0].getStartOffset());\n    assertEquals(8, termOffsets[0].getEndOffset());\n\n    // Token \"abcd\" occurred three times\n    termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(1);\n    assertEquals(3, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(4, termOffsets[1].getStartOffset());\n    assertEquals(8, termOffsets[1].getEndOffset());\n    assertEquals(8, termOffsets[2].getStartOffset());\n    assertEquals(12, termOffsets[2].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDoubleOffsetCounting().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDoubleOffsetCounting().mjava","sourceNew":"  // LUCENE-1442\n  public void testDoubleOffsetCounting() throws Exception {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    Field f = new Field(\"field\", \"abcd\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f);\n    doc.add(f);\n    Field f2 = new Field(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f2);\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir, true);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n\n    // Token \"\" occurred once\n    assertEquals(1, termOffsets.length);\n    assertEquals(8, termOffsets[0].getStartOffset());\n    assertEquals(8, termOffsets[0].getEndOffset());\n\n    // Token \"abcd\" occurred three times\n    termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(1);\n    assertEquals(3, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(4, termOffsets[1].getStartOffset());\n    assertEquals(8, termOffsets[1].getEndOffset());\n    assertEquals(8, termOffsets[2].getStartOffset());\n    assertEquals(12, termOffsets[2].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1442\n  public void testDoubleOffsetCounting() throws Exception {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    Field f = new Field(\"field\", \"abcd\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f);\n    doc.add(f);\n    Field f2 = new Field(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f2);\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n\n    // Token \"\" occurred once\n    assertEquals(1, termOffsets.length);\n    assertEquals(8, termOffsets[0].getStartOffset());\n    assertEquals(8, termOffsets[0].getEndOffset());\n\n    // Token \"abcd\" occurred three times\n    termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(1);\n    assertEquals(3, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(4, termOffsets[1].getStartOffset());\n    assertEquals(8, termOffsets[1].getEndOffset());\n    assertEquals(8, termOffsets[2].getStartOffset());\n    assertEquals(12, termOffsets[2].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDoubleOffsetCounting().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDoubleOffsetCounting().mjava","sourceNew":"  // LUCENE-1442\n  public void testDoubleOffsetCounting() throws Exception {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    Field f = new Field(\"field\", \"abcd\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f);\n    doc.add(f);\n    Field f2 = new Field(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f2);\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir, true);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n\n    // Token \"\" occurred once\n    assertEquals(1, termOffsets.length);\n    assertEquals(8, termOffsets[0].getStartOffset());\n    assertEquals(8, termOffsets[0].getEndOffset());\n\n    // Token \"abcd\" occurred three times\n    termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(1);\n    assertEquals(3, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(4, termOffsets[1].getStartOffset());\n    assertEquals(8, termOffsets[1].getEndOffset());\n    assertEquals(8, termOffsets[2].getStartOffset());\n    assertEquals(12, termOffsets[2].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1442\n  public void testDoubleOffsetCounting() throws Exception {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    Field f = new Field(\"field\", \"abcd\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f);\n    doc.add(f);\n    Field f2 = new Field(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f2);\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir, true);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n\n    // Token \"\" occurred once\n    assertEquals(1, termOffsets.length);\n    assertEquals(8, termOffsets[0].getStartOffset());\n    assertEquals(8, termOffsets[0].getEndOffset());\n\n    // Token \"abcd\" occurred three times\n    termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(1);\n    assertEquals(3, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(4, termOffsets[1].getStartOffset());\n    assertEquals(8, termOffsets[1].getEndOffset());\n    assertEquals(8, termOffsets[2].getStartOffset());\n    assertEquals(12, termOffsets[2].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDoubleOffsetCounting().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDoubleOffsetCounting().mjava","sourceNew":"  // LUCENE-1442\n  public void testDoubleOffsetCounting() throws Exception {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    Field f = new Field(\"field\", \"abcd\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f);\n    doc.add(f);\n    Field f2 = new Field(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f2);\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir, true);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n\n    // Token \"\" occurred once\n    assertEquals(1, termOffsets.length);\n    assertEquals(8, termOffsets[0].getStartOffset());\n    assertEquals(8, termOffsets[0].getEndOffset());\n\n    // Token \"abcd\" occurred three times\n    termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(1);\n    assertEquals(3, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(4, termOffsets[1].getStartOffset());\n    assertEquals(8, termOffsets[1].getEndOffset());\n    assertEquals(8, termOffsets[2].getStartOffset());\n    assertEquals(12, termOffsets[2].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1442\n  public void testDoubleOffsetCounting() throws Exception {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    Field f = new Field(\"field\", \"abcd\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f);\n    doc.add(f);\n    Field f2 = new Field(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f2);\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir, true);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n\n    // Token \"\" occurred once\n    assertEquals(1, termOffsets.length);\n    assertEquals(8, termOffsets[0].getStartOffset());\n    assertEquals(8, termOffsets[0].getEndOffset());\n\n    // Token \"abcd\" occurred three times\n    termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(1);\n    assertEquals(3, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(4, termOffsets[1].getStartOffset());\n    assertEquals(8, termOffsets[1].getEndOffset());\n    assertEquals(8, termOffsets[2].getStartOffset());\n    assertEquals(12, termOffsets[2].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDoubleOffsetCounting().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDoubleOffsetCounting().mjava","sourceNew":"  // LUCENE-1442\n  public void testDoubleOffsetCounting() throws Exception {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    Document doc = new Document();\n    Field f = new Field(\"field\", \"abcd\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f);\n    doc.add(f);\n    Field f2 = new Field(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f2);\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir, true);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n\n    // Token \"\" occurred once\n    assertEquals(1, termOffsets.length);\n    assertEquals(8, termOffsets[0].getStartOffset());\n    assertEquals(8, termOffsets[0].getEndOffset());\n\n    // Token \"abcd\" occurred three times\n    termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(1);\n    assertEquals(3, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(4, termOffsets[1].getStartOffset());\n    assertEquals(8, termOffsets[1].getEndOffset());\n    assertEquals(8, termOffsets[2].getStartOffset());\n    assertEquals(12, termOffsets[2].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1442\n  public void testDoubleOffsetCounting() throws Exception {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    Field f = new Field(\"field\", \"abcd\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f);\n    doc.add(f);\n    Field f2 = new Field(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f2);\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir, true);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n\n    // Token \"\" occurred once\n    assertEquals(1, termOffsets.length);\n    assertEquals(8, termOffsets[0].getStartOffset());\n    assertEquals(8, termOffsets[0].getEndOffset());\n\n    // Token \"abcd\" occurred three times\n    termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(1);\n    assertEquals(3, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(4, termOffsets[1].getStartOffset());\n    assertEquals(8, termOffsets[1].getEndOffset());\n    assertEquals(8, termOffsets[2].getStartOffset());\n    assertEquals(12, termOffsets[2].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDoubleOffsetCounting().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDoubleOffsetCounting().mjava","sourceNew":"  // LUCENE-1442\n  public void testDoubleOffsetCounting() throws Exception {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    Field f = new Field(\"field\", \"abcd\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f);\n    doc.add(f);\n    Field f2 = new Field(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f2);\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir, true);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n\n    // Token \"\" occurred once\n    assertEquals(1, termOffsets.length);\n    assertEquals(8, termOffsets[0].getStartOffset());\n    assertEquals(8, termOffsets[0].getEndOffset());\n\n    // Token \"abcd\" occurred three times\n    termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(1);\n    assertEquals(3, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(4, termOffsets[1].getStartOffset());\n    assertEquals(8, termOffsets[1].getEndOffset());\n    assertEquals(8, termOffsets[2].getStartOffset());\n    assertEquals(12, termOffsets[2].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1442\n  public void testDoubleOffsetCounting() throws Exception {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    Document doc = new Document();\n    Field f = new Field(\"field\", \"abcd\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f);\n    doc.add(f);\n    Field f2 = new Field(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f2);\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir, true);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n\n    // Token \"\" occurred once\n    assertEquals(1, termOffsets.length);\n    assertEquals(8, termOffsets[0].getStartOffset());\n    assertEquals(8, termOffsets[0].getEndOffset());\n\n    // Token \"abcd\" occurred three times\n    termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(1);\n    assertEquals(3, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(4, termOffsets[1].getStartOffset());\n    assertEquals(8, termOffsets[1].getEndOffset());\n    assertEquals(8, termOffsets[2].getStartOffset());\n    assertEquals(12, termOffsets[2].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDoubleOffsetCounting().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDoubleOffsetCounting().mjava","sourceNew":"  // LUCENE-1442\n  public void testDoubleOffsetCounting() throws Exception {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    Field f = new Field(\"field\", \"abcd\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f);\n    doc.add(f);\n    Field f2 = new Field(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f2);\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir, true);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n\n    // Token \"\" occurred once\n    assertEquals(1, termOffsets.length);\n    assertEquals(8, termOffsets[0].getStartOffset());\n    assertEquals(8, termOffsets[0].getEndOffset());\n\n    // Token \"abcd\" occurred three times\n    termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(1);\n    assertEquals(3, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(4, termOffsets[1].getStartOffset());\n    assertEquals(8, termOffsets[1].getEndOffset());\n    assertEquals(8, termOffsets[2].getStartOffset());\n    assertEquals(12, termOffsets[2].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1442\n  public void testDoubleOffsetCounting() throws Exception {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    Field f = new Field(\"field\", \"abcd\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f);\n    doc.add(f);\n    Field f2 = new Field(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f2);\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir, true);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n\n    // Token \"\" occurred once\n    assertEquals(1, termOffsets.length);\n    assertEquals(8, termOffsets[0].getStartOffset());\n    assertEquals(8, termOffsets[0].getEndOffset());\n\n    // Token \"abcd\" occurred three times\n    termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(1);\n    assertEquals(3, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(4, termOffsets[1].getStartOffset());\n    assertEquals(8, termOffsets[1].getEndOffset());\n    assertEquals(8, termOffsets[2].getStartOffset());\n    assertEquals(12, termOffsets[2].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDoubleOffsetCounting().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDoubleOffsetCounting().mjava","sourceNew":"  // LUCENE-1442\n  public void testDoubleOffsetCounting() throws Exception {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    Field f = new Field(\"field\", \"abcd\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f);\n    doc.add(f);\n    Field f2 = new Field(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f2);\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir, true);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n\n    // Token \"\" occurred once\n    assertEquals(1, termOffsets.length);\n    assertEquals(8, termOffsets[0].getStartOffset());\n    assertEquals(8, termOffsets[0].getEndOffset());\n\n    // Token \"abcd\" occurred three times\n    termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(1);\n    assertEquals(3, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(4, termOffsets[1].getStartOffset());\n    assertEquals(8, termOffsets[1].getEndOffset());\n    assertEquals(8, termOffsets[2].getStartOffset());\n    assertEquals(12, termOffsets[2].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1442\n  public void testDoubleOffsetCounting() throws Exception {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    Field f = new Field(\"field\", \"abcd\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f);\n    doc.add(f);\n    Field f2 = new Field(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f2);\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir, true);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n\n    // Token \"\" occurred once\n    assertEquals(1, termOffsets.length);\n    assertEquals(8, termOffsets[0].getStartOffset());\n    assertEquals(8, termOffsets[0].getEndOffset());\n\n    // Token \"abcd\" occurred three times\n    termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(1);\n    assertEquals(3, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(4, termOffsets[1].getStartOffset());\n    assertEquals(8, termOffsets[1].getEndOffset());\n    assertEquals(8, termOffsets[2].getStartOffset());\n    assertEquals(12, termOffsets[2].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["457c790b0d3d5883da64fb842ea54813004bb796","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["af2505fad8b3090c182da766589b31256e69bf3f"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"457c790b0d3d5883da64fb842ea54813004bb796":["09c482d1e63332617181729a225b215c452d8a79"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["457c790b0d3d5883da64fb842ea54813004bb796"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"af2505fad8b3090c182da766589b31256e69bf3f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"457c790b0d3d5883da64fb842ea54813004bb796":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2505fad8b3090c182da766589b31256e69bf3f"],"af2505fad8b3090c182da766589b31256e69bf3f":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"09c482d1e63332617181729a225b215c452d8a79":["457c790b0d3d5883da64fb842ea54813004bb796"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}