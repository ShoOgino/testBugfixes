{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SqlEntityProcessor#getDeltaImportQuery(String).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SqlEntityProcessor#getDeltaImportQuery(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/SqlEntityProcessor#getDeltaImportQuery(String).mjava","sourceNew":"  public String getDeltaImportQuery(String queryString) {    \n    StringBuilder sb = new StringBuilder(queryString);\n    if (SELECT_WHERE_PATTERN.matcher(queryString).find()) {\n      sb.append(\" and \");\n    } else {\n      sb.append(\" where \");\n    }\n    boolean first = true;\n    String[] primaryKeys = context.getEntityAttribute(\"pk\").split(\",\");\n    for (String primaryKey : primaryKeys) {\n      if (!first) {\n        sb.append(\" and \");\n      }\n      first = false;\n      Object val = context.resolve(\"dataimporter.delta.\" + primaryKey);\n      if (val == null) {\n        Matcher m = DOT_PATTERN.matcher(primaryKey);\n        if (m.find()) {\n          val = context.resolve(\"dataimporter.delta.\" + m.group(1));\n        }\n      }\n      sb.append(primaryKey).append(\" = \");\n      if (val instanceof Number) {\n        sb.append(val.toString());\n      } else {\n        sb.append(\"'\").append(val.toString()).append(\"'\");\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  public String getDeltaImportQuery(String queryString) {    \n    StringBuilder sb = new StringBuilder(queryString);\n    if (SELECT_WHERE_PATTERN.matcher(queryString).find()) {\n      sb.append(\" and \");\n    } else {\n      sb.append(\" where \");\n    }\n    boolean first = true;\n    String[] primaryKeys = context.getEntityAttribute(\"pk\").split(\",\");\n    for (String primaryKey : primaryKeys) {\n      if (!first) {\n        sb.append(\" and \");\n      }\n      first = false;\n      Object val = context.resolve(\"dataimporter.delta.\" + primaryKey);\n      if (val == null) {\n        Matcher m = DOT_PATTERN.matcher(primaryKey);\n        if (m.find()) {\n          val = context.resolve(\"dataimporter.delta.\" + m.group(1));\n        }\n      }\n      sb.append(primaryKey).append(\" = \");\n      if (val instanceof Number) {\n        sb.append(val.toString());\n      } else {\n        sb.append(\"'\").append(val.toString()).append(\"'\");\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SqlEntityProcessor#getDeltaImportQuery(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/SqlEntityProcessor#getDeltaImportQuery(String).mjava","sourceNew":"  public String getDeltaImportQuery(String queryString) {    \n    StringBuilder sb = new StringBuilder(queryString);\n    if (SELECT_WHERE_PATTERN.matcher(queryString).find()) {\n      sb.append(\" and \");\n    } else {\n      sb.append(\" where \");\n    }\n    boolean first = true;\n    String[] primaryKeys = context.getEntityAttribute(\"pk\").split(\",\");\n    for (String primaryKey : primaryKeys) {\n      if (!first) {\n        sb.append(\" and \");\n      }\n      first = false;\n      Object val = context.resolve(\"dataimporter.delta.\" + primaryKey);\n      if (val == null) {\n        Matcher m = DOT_PATTERN.matcher(primaryKey);\n        if (m.find()) {\n          val = context.resolve(\"dataimporter.delta.\" + m.group(1));\n        }\n      }\n      sb.append(primaryKey).append(\" = \");\n      if (val instanceof Number) {\n        sb.append(val.toString());\n      } else {\n        sb.append(\"'\").append(val.toString()).append(\"'\");\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  public String getDeltaImportQuery(String queryString) {    \n    StringBuilder sb = new StringBuilder(queryString);\n    if (SELECT_WHERE_PATTERN.matcher(queryString).find()) {\n      sb.append(\" and \");\n    } else {\n      sb.append(\" where \");\n    }\n    boolean first = true;\n    String[] primaryKeys = context.getEntityAttribute(\"pk\").split(\",\");\n    for (String primaryKey : primaryKeys) {\n      if (!first) {\n        sb.append(\" and \");\n      }\n      first = false;\n      Object val = context.resolve(\"dataimporter.delta.\" + primaryKey);\n      if (val == null) {\n        Matcher m = DOT_PATTERN.matcher(primaryKey);\n        if (m.find()) {\n          val = context.resolve(\"dataimporter.delta.\" + m.group(1));\n        }\n      }\n      sb.append(primaryKey).append(\" = \");\n      if (val instanceof Number) {\n        sb.append(val.toString());\n      } else {\n        sb.append(\"'\").append(val.toString()).append(\"'\");\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SqlEntityProcessor#getDeltaImportQuery(String).mjava","sourceNew":null,"sourceOld":"  public String getDeltaImportQuery(String queryString) {    \n    StringBuilder sb = new StringBuilder(queryString);\n    if (SELECT_WHERE_PATTERN.matcher(queryString).find()) {\n      sb.append(\" and \");\n    } else {\n      sb.append(\" where \");\n    }\n    boolean first = true;\n    String[] primaryKeys = context.getEntityAttribute(\"pk\").split(\",\");\n    for (String primaryKey : primaryKeys) {\n      if (!first) {\n        sb.append(\" and \");\n      }\n      first = false;\n      Object val = context.resolve(\"dataimporter.delta.\" + primaryKey);\n      if (val == null) {\n        Matcher m = DOT_PATTERN.matcher(primaryKey);\n        if (m.find()) {\n          val = context.resolve(\"dataimporter.delta.\" + m.group(1));\n        }\n      }\n      sb.append(primaryKey).append(\" = \");\n      if (val instanceof Number) {\n        sb.append(val.toString());\n      } else {\n        sb.append(\"'\").append(val.toString()).append(\"'\");\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["c26f00b574427b55127e869b935845554afde1fa"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}