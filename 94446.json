{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#CompiledAutomaton(LightAutomaton,Boolean,boolean).mjava","commits":[{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#CompiledAutomaton(LightAutomaton,Boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public CompiledAutomaton(LightAutomaton automaton, Boolean finite, boolean simplify) {\n    //System.out.println(\"CA simplify=\" + simplify);\n    //automaton.writeDot(\"ca\");\n    if (simplify) {\n      // Test whether the automaton is a \"simple\" form and\n      // if so, don't create a runAutomaton.  Note that on a\n      // large automaton these tests could be costly:\n      if (BasicOperations.isEmpty(automaton)) {\n        // matches nothing\n        type = AUTOMATON_TYPE.NONE;\n        term = null;\n        commonSuffixRef = null;\n        runAutomaton = null;\n        lightAutomaton = null;\n        this.finite = null;\n        return;\n      } else if (BasicOperations.isTotal(automaton)) {\n        // matches all possible strings\n        type = AUTOMATON_TYPE.ALL;\n        term = null;\n        commonSuffixRef = null;\n        runAutomaton = null;\n        lightAutomaton = null;\n        this.finite = null;\n        return;\n      } else {\n\n        automaton = BasicOperations.determinize(automaton);\n\n        final String commonPrefix = SpecialOperations.getCommonPrefix(automaton);\n        final String singleton;\n\n        if (commonPrefix.length() > 0 && BasicOperations.sameLanguage(automaton, BasicAutomata.makeStringLight(commonPrefix))) {\n          singleton = commonPrefix;\n        } else {\n          singleton = null;\n        }\n\n        //System.out.println(\"CHECK PREFIX: commonPrefix=\" + commonPrefix);\n       \n        if (singleton != null) {\n          // matches a fixed string\n          type = AUTOMATON_TYPE.SINGLE;\n          term = new BytesRef(singleton);\n          commonSuffixRef = null;\n          runAutomaton = null;\n          lightAutomaton = null;\n          this.finite = null;\n          return;\n        } else if (commonPrefix.length() > 0) {\n          LightAutomaton other = BasicOperations.concatenateLight(BasicAutomata.makeStringLight(commonPrefix), BasicAutomata.makeAnyStringLight());\n          other = BasicOperations.determinize(other);\n          if (BasicOperations.sameLanguage(automaton, other)) {\n            // matches a constant prefix\n            type = AUTOMATON_TYPE.PREFIX;\n            term = new BytesRef(commonPrefix);\n            commonSuffixRef = null;\n            runAutomaton = null;\n            lightAutomaton = null;\n            this.finite = null;\n            return;\n          }\n        }\n      }\n    }\n\n    type = AUTOMATON_TYPE.NORMAL;\n    term = null;\n\n    if (finite == null) {\n      this.finite = SpecialOperations.isFinite(automaton);\n    } else {\n      this.finite = finite;\n    }\n\n    LightAutomaton utf8 = new UTF32ToUTF8Light().convert(automaton);\n    if (this.finite) {\n      commonSuffixRef = null;\n    } else {\n      commonSuffixRef = SpecialOperations.getCommonSuffixBytesRef(utf8);\n    }\n    runAutomaton = new ByteRunAutomaton(utf8, true);\n    //utf8.writeDot(\"utf8\");\n\n    lightAutomaton = runAutomaton.a;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#CompiledAutomaton(LightAutomaton,Boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#CompiledAutomaton(LightAutomaton,Boolean,boolean).mjava","sourceNew":"  public CompiledAutomaton(LightAutomaton automaton, Boolean finite, boolean simplify) {\n    if (simplify) {\n      // Test whether the automaton is a \"simple\" form and\n      // if so, don't create a runAutomaton.  Note that on a\n      // large automaton these tests could be costly:\n      if (BasicOperations.isEmpty(automaton)) {\n        // matches nothing\n        type = AUTOMATON_TYPE.NONE;\n        term = null;\n        commonSuffixRef = null;\n        runAutomaton = null;\n        lightAutomaton = null;\n        this.finite = null;\n        return;\n      } else if (BasicOperations.isTotal(automaton)) {\n        // matches all possible strings\n        type = AUTOMATON_TYPE.ALL;\n        term = null;\n        commonSuffixRef = null;\n        runAutomaton = null;\n        lightAutomaton = null;\n        this.finite = null;\n        return;\n      } else {\n\n        automaton = BasicOperations.determinize(automaton);\n\n        final String commonPrefix = SpecialOperations.getCommonPrefix(automaton);\n        final String singleton;\n\n        if (commonPrefix.length() > 0 && BasicOperations.sameLanguage(automaton, BasicAutomata.makeStringLight(commonPrefix))) {\n          singleton = commonPrefix;\n        } else {\n          singleton = null;\n        }\n\n        if (singleton != null) {\n          // matches a fixed string\n          type = AUTOMATON_TYPE.SINGLE;\n          term = new BytesRef(singleton);\n          commonSuffixRef = null;\n          runAutomaton = null;\n          lightAutomaton = null;\n          this.finite = null;\n          return;\n        } else if (commonPrefix.length() > 0) {\n          LightAutomaton other = BasicOperations.concatenateLight(BasicAutomata.makeStringLight(commonPrefix), BasicAutomata.makeAnyStringLight());\n          other = BasicOperations.determinize(other);\n          if (BasicOperations.sameLanguage(automaton, other)) {\n            // matches a constant prefix\n            type = AUTOMATON_TYPE.PREFIX;\n            term = new BytesRef(commonPrefix);\n            commonSuffixRef = null;\n            runAutomaton = null;\n            lightAutomaton = null;\n            this.finite = null;\n            return;\n          }\n        }\n      }\n    }\n\n    type = AUTOMATON_TYPE.NORMAL;\n    term = null;\n\n    if (finite == null) {\n      this.finite = SpecialOperations.isFinite(automaton);\n    } else {\n      this.finite = finite;\n    }\n\n    LightAutomaton utf8 = new UTF32ToUTF8Light().convert(automaton);\n    if (this.finite) {\n      commonSuffixRef = null;\n    } else {\n      commonSuffixRef = SpecialOperations.getCommonSuffixBytesRef(utf8);\n    }\n    runAutomaton = new ByteRunAutomaton(utf8, true);\n    //utf8.writeDot(\"utf8\");\n\n    lightAutomaton = runAutomaton.a;\n  }\n\n","sourceOld":"  public CompiledAutomaton(LightAutomaton automaton, Boolean finite, boolean simplify) {\n    //System.out.println(\"CA simplify=\" + simplify);\n    //automaton.writeDot(\"ca\");\n    if (simplify) {\n      // Test whether the automaton is a \"simple\" form and\n      // if so, don't create a runAutomaton.  Note that on a\n      // large automaton these tests could be costly:\n      if (BasicOperations.isEmpty(automaton)) {\n        // matches nothing\n        type = AUTOMATON_TYPE.NONE;\n        term = null;\n        commonSuffixRef = null;\n        runAutomaton = null;\n        lightAutomaton = null;\n        this.finite = null;\n        return;\n      } else if (BasicOperations.isTotal(automaton)) {\n        // matches all possible strings\n        type = AUTOMATON_TYPE.ALL;\n        term = null;\n        commonSuffixRef = null;\n        runAutomaton = null;\n        lightAutomaton = null;\n        this.finite = null;\n        return;\n      } else {\n\n        automaton = BasicOperations.determinize(automaton);\n\n        final String commonPrefix = SpecialOperations.getCommonPrefix(automaton);\n        final String singleton;\n\n        if (commonPrefix.length() > 0 && BasicOperations.sameLanguage(automaton, BasicAutomata.makeStringLight(commonPrefix))) {\n          singleton = commonPrefix;\n        } else {\n          singleton = null;\n        }\n\n        //System.out.println(\"CHECK PREFIX: commonPrefix=\" + commonPrefix);\n       \n        if (singleton != null) {\n          // matches a fixed string\n          type = AUTOMATON_TYPE.SINGLE;\n          term = new BytesRef(singleton);\n          commonSuffixRef = null;\n          runAutomaton = null;\n          lightAutomaton = null;\n          this.finite = null;\n          return;\n        } else if (commonPrefix.length() > 0) {\n          LightAutomaton other = BasicOperations.concatenateLight(BasicAutomata.makeStringLight(commonPrefix), BasicAutomata.makeAnyStringLight());\n          other = BasicOperations.determinize(other);\n          if (BasicOperations.sameLanguage(automaton, other)) {\n            // matches a constant prefix\n            type = AUTOMATON_TYPE.PREFIX;\n            term = new BytesRef(commonPrefix);\n            commonSuffixRef = null;\n            runAutomaton = null;\n            lightAutomaton = null;\n            this.finite = null;\n            return;\n          }\n        }\n      }\n    }\n\n    type = AUTOMATON_TYPE.NORMAL;\n    term = null;\n\n    if (finite == null) {\n      this.finite = SpecialOperations.isFinite(automaton);\n    } else {\n      this.finite = finite;\n    }\n\n    LightAutomaton utf8 = new UTF32ToUTF8Light().convert(automaton);\n    if (this.finite) {\n      commonSuffixRef = null;\n    } else {\n      commonSuffixRef = SpecialOperations.getCommonSuffixBytesRef(utf8);\n    }\n    runAutomaton = new ByteRunAutomaton(utf8, true);\n    //utf8.writeDot(\"utf8\");\n\n    lightAutomaton = runAutomaton.a;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a67285d1a68175d877eb9fd1624fccad3db028ff","date":1402779028,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#CompiledAutomaton(LightAutomaton,Boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#CompiledAutomaton(LightAutomaton,Boolean,boolean).mjava","sourceNew":"  public CompiledAutomaton(LightAutomaton automaton, Boolean finite, boolean simplify) {\n    if (simplify) {\n      // Test whether the automaton is a \"simple\" form and\n      // if so, don't create a runAutomaton.  Note that on a\n      // large automaton these tests could be costly:\n      if (BasicOperations.isEmpty(automaton)) {\n        // matches nothing\n        type = AUTOMATON_TYPE.NONE;\n        term = null;\n        commonSuffixRef = null;\n        runAutomaton = null;\n        lightAutomaton = null;\n        this.finite = null;\n        return;\n      } else if (BasicOperations.isTotal(automaton)) {\n        // matches all possible strings\n        type = AUTOMATON_TYPE.ALL;\n        term = null;\n        commonSuffixRef = null;\n        runAutomaton = null;\n        lightAutomaton = null;\n        this.finite = null;\n        return;\n      } else {\n\n        automaton = BasicOperations.determinize(automaton);\n\n        final String commonPrefix = SpecialOperations.getCommonPrefix(automaton);\n        final String singleton;\n\n        if (commonPrefix.length() > 0 && BasicOperations.sameLanguage(automaton, BasicAutomata.makeStringLight(commonPrefix))) {\n          singleton = commonPrefix;\n        } else {\n          singleton = null;\n        }\n\n        if (singleton != null) {\n          // matches a fixed string\n          type = AUTOMATON_TYPE.SINGLE;\n          term = new BytesRef(singleton);\n          commonSuffixRef = null;\n          runAutomaton = null;\n          lightAutomaton = null;\n          this.finite = null;\n          return;\n        } else if (commonPrefix.length() > 0) {\n          LightAutomaton other = BasicOperations.concatenateLight(BasicAutomata.makeStringLight(commonPrefix), BasicAutomata.makeAnyStringLight());\n          other = BasicOperations.determinize(other);\n          if (BasicOperations.sameLanguage(automaton, other)) {\n            // matches a constant prefix\n            type = AUTOMATON_TYPE.PREFIX;\n            term = new BytesRef(commonPrefix);\n            commonSuffixRef = null;\n            runAutomaton = null;\n            lightAutomaton = null;\n            this.finite = null;\n            return;\n          }\n        }\n      }\n    }\n\n    type = AUTOMATON_TYPE.NORMAL;\n    term = null;\n\n    if (finite == null) {\n      this.finite = SpecialOperations.isFinite(automaton);\n    } else {\n      this.finite = finite;\n    }\n\n    LightAutomaton utf8 = new UTF32ToUTF8Light().convert(automaton);\n    if (this.finite) {\n      commonSuffixRef = null;\n    } else {\n      commonSuffixRef = SpecialOperations.getCommonSuffixBytesRef(utf8);\n    }\n    runAutomaton = new ByteRunAutomaton(utf8, true);\n\n    lightAutomaton = runAutomaton.a;\n  }\n\n","sourceOld":"  public CompiledAutomaton(LightAutomaton automaton, Boolean finite, boolean simplify) {\n    if (simplify) {\n      // Test whether the automaton is a \"simple\" form and\n      // if so, don't create a runAutomaton.  Note that on a\n      // large automaton these tests could be costly:\n      if (BasicOperations.isEmpty(automaton)) {\n        // matches nothing\n        type = AUTOMATON_TYPE.NONE;\n        term = null;\n        commonSuffixRef = null;\n        runAutomaton = null;\n        lightAutomaton = null;\n        this.finite = null;\n        return;\n      } else if (BasicOperations.isTotal(automaton)) {\n        // matches all possible strings\n        type = AUTOMATON_TYPE.ALL;\n        term = null;\n        commonSuffixRef = null;\n        runAutomaton = null;\n        lightAutomaton = null;\n        this.finite = null;\n        return;\n      } else {\n\n        automaton = BasicOperations.determinize(automaton);\n\n        final String commonPrefix = SpecialOperations.getCommonPrefix(automaton);\n        final String singleton;\n\n        if (commonPrefix.length() > 0 && BasicOperations.sameLanguage(automaton, BasicAutomata.makeStringLight(commonPrefix))) {\n          singleton = commonPrefix;\n        } else {\n          singleton = null;\n        }\n\n        if (singleton != null) {\n          // matches a fixed string\n          type = AUTOMATON_TYPE.SINGLE;\n          term = new BytesRef(singleton);\n          commonSuffixRef = null;\n          runAutomaton = null;\n          lightAutomaton = null;\n          this.finite = null;\n          return;\n        } else if (commonPrefix.length() > 0) {\n          LightAutomaton other = BasicOperations.concatenateLight(BasicAutomata.makeStringLight(commonPrefix), BasicAutomata.makeAnyStringLight());\n          other = BasicOperations.determinize(other);\n          if (BasicOperations.sameLanguage(automaton, other)) {\n            // matches a constant prefix\n            type = AUTOMATON_TYPE.PREFIX;\n            term = new BytesRef(commonPrefix);\n            commonSuffixRef = null;\n            runAutomaton = null;\n            lightAutomaton = null;\n            this.finite = null;\n            return;\n          }\n        }\n      }\n    }\n\n    type = AUTOMATON_TYPE.NORMAL;\n    term = null;\n\n    if (finite == null) {\n      this.finite = SpecialOperations.isFinite(automaton);\n    } else {\n      this.finite = finite;\n    }\n\n    LightAutomaton utf8 = new UTF32ToUTF8Light().convert(automaton);\n    if (this.finite) {\n      commonSuffixRef = null;\n    } else {\n      commonSuffixRef = SpecialOperations.getCommonSuffixBytesRef(utf8);\n    }\n    runAutomaton = new ByteRunAutomaton(utf8, true);\n    //utf8.writeDot(\"utf8\");\n\n    lightAutomaton = runAutomaton.a;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9","date":1402946522,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#CompiledAutomaton(LightAutomaton,Boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#CompiledAutomaton(LightAutomaton,Boolean,boolean).mjava","sourceNew":"  public CompiledAutomaton(LightAutomaton automaton, Boolean finite, boolean simplify) {\n\n    if (simplify) {\n\n      // Test whether the automaton is a \"simple\" form and\n      // if so, don't create a runAutomaton.  Note that on a\n      // large automaton these tests could be costly:\n\n      if (BasicOperations.isEmpty(automaton)) {\n        // matches nothing\n        type = AUTOMATON_TYPE.NONE;\n        term = null;\n        commonSuffixRef = null;\n        runAutomaton = null;\n        lightAutomaton = null;\n        this.finite = null;\n        return;\n      // NOTE: only approximate, because automaton may not be minimal:\n      } else if (BasicOperations.isTotal(automaton)) {\n        // matches all possible strings\n        type = AUTOMATON_TYPE.ALL;\n        term = null;\n        commonSuffixRef = null;\n        runAutomaton = null;\n        lightAutomaton = null;\n        this.finite = null;\n        return;\n      } else {\n\n        automaton = BasicOperations.determinize(automaton);\n\n        final String commonPrefix = SpecialOperations.getCommonPrefix(automaton);\n        final String singleton;\n\n        if (commonPrefix.length() > 0 && BasicOperations.sameLanguage(automaton, BasicAutomata.makeStringLight(commonPrefix))) {\n          singleton = commonPrefix;\n        } else {\n          singleton = null;\n        }\n\n        if (singleton != null) {\n          // matches a fixed string\n          type = AUTOMATON_TYPE.SINGLE;\n          term = new BytesRef(singleton);\n          commonSuffixRef = null;\n          runAutomaton = null;\n          lightAutomaton = null;\n          this.finite = null;\n          return;\n        } else if (commonPrefix.length() > 0) {\n          LightAutomaton other = BasicOperations.concatenateLight(BasicAutomata.makeStringLight(commonPrefix), BasicAutomata.makeAnyStringLight());\n          other = BasicOperations.determinize(other);\n          assert BasicOperations.hasDeadStates(other) == false;\n          if (BasicOperations.sameLanguage(automaton, other)) {\n            // matches a constant prefix\n            type = AUTOMATON_TYPE.PREFIX;\n            term = new BytesRef(commonPrefix);\n            commonSuffixRef = null;\n            runAutomaton = null;\n            lightAutomaton = null;\n            this.finite = null;\n            return;\n          }\n        }\n      }\n    }\n\n    type = AUTOMATON_TYPE.NORMAL;\n    term = null;\n\n    if (finite == null) {\n      this.finite = SpecialOperations.isFinite(automaton);\n    } else {\n      this.finite = finite;\n    }\n\n    LightAutomaton utf8 = new UTF32ToUTF8Light().convert(automaton);\n    if (this.finite) {\n      commonSuffixRef = null;\n    } else {\n      commonSuffixRef = SpecialOperations.getCommonSuffixBytesRef(utf8);\n    }\n    runAutomaton = new ByteRunAutomaton(utf8, true);\n\n    lightAutomaton = runAutomaton.automaton;\n  }\n\n","sourceOld":"  public CompiledAutomaton(LightAutomaton automaton, Boolean finite, boolean simplify) {\n    if (simplify) {\n      // Test whether the automaton is a \"simple\" form and\n      // if so, don't create a runAutomaton.  Note that on a\n      // large automaton these tests could be costly:\n      if (BasicOperations.isEmpty(automaton)) {\n        // matches nothing\n        type = AUTOMATON_TYPE.NONE;\n        term = null;\n        commonSuffixRef = null;\n        runAutomaton = null;\n        lightAutomaton = null;\n        this.finite = null;\n        return;\n      } else if (BasicOperations.isTotal(automaton)) {\n        // matches all possible strings\n        type = AUTOMATON_TYPE.ALL;\n        term = null;\n        commonSuffixRef = null;\n        runAutomaton = null;\n        lightAutomaton = null;\n        this.finite = null;\n        return;\n      } else {\n\n        automaton = BasicOperations.determinize(automaton);\n\n        final String commonPrefix = SpecialOperations.getCommonPrefix(automaton);\n        final String singleton;\n\n        if (commonPrefix.length() > 0 && BasicOperations.sameLanguage(automaton, BasicAutomata.makeStringLight(commonPrefix))) {\n          singleton = commonPrefix;\n        } else {\n          singleton = null;\n        }\n\n        if (singleton != null) {\n          // matches a fixed string\n          type = AUTOMATON_TYPE.SINGLE;\n          term = new BytesRef(singleton);\n          commonSuffixRef = null;\n          runAutomaton = null;\n          lightAutomaton = null;\n          this.finite = null;\n          return;\n        } else if (commonPrefix.length() > 0) {\n          LightAutomaton other = BasicOperations.concatenateLight(BasicAutomata.makeStringLight(commonPrefix), BasicAutomata.makeAnyStringLight());\n          other = BasicOperations.determinize(other);\n          if (BasicOperations.sameLanguage(automaton, other)) {\n            // matches a constant prefix\n            type = AUTOMATON_TYPE.PREFIX;\n            term = new BytesRef(commonPrefix);\n            commonSuffixRef = null;\n            runAutomaton = null;\n            lightAutomaton = null;\n            this.finite = null;\n            return;\n          }\n        }\n      }\n    }\n\n    type = AUTOMATON_TYPE.NORMAL;\n    term = null;\n\n    if (finite == null) {\n      this.finite = SpecialOperations.isFinite(automaton);\n    } else {\n      this.finite = finite;\n    }\n\n    LightAutomaton utf8 = new UTF32ToUTF8Light().convert(automaton);\n    if (this.finite) {\n      commonSuffixRef = null;\n    } else {\n      commonSuffixRef = SpecialOperations.getCommonSuffixBytesRef(utf8);\n    }\n    runAutomaton = new ByteRunAutomaton(utf8, true);\n\n    lightAutomaton = runAutomaton.a;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#CompiledAutomaton(Automaton,Boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#CompiledAutomaton(LightAutomaton,Boolean,boolean).mjava","sourceNew":"  public CompiledAutomaton(Automaton automaton, Boolean finite, boolean simplify) {\n\n    if (simplify) {\n\n      // Test whether the automaton is a \"simple\" form and\n      // if so, don't create a runAutomaton.  Note that on a\n      // large automaton these tests could be costly:\n\n      if (Operations.isEmpty(automaton)) {\n        // matches nothing\n        type = AUTOMATON_TYPE.NONE;\n        term = null;\n        commonSuffixRef = null;\n        runAutomaton = null;\n        this.automaton = null;\n        this.finite = null;\n        return;\n      // NOTE: only approximate, because automaton may not be minimal:\n      } else if (Operations.isTotal(automaton)) {\n        // matches all possible strings\n        type = AUTOMATON_TYPE.ALL;\n        term = null;\n        commonSuffixRef = null;\n        runAutomaton = null;\n        this.automaton = null;\n        this.finite = null;\n        return;\n      } else {\n\n        automaton = Operations.determinize(automaton);\n\n        final String commonPrefix = Operations.getCommonPrefix(automaton);\n        final String singleton;\n\n        if (commonPrefix.length() > 0 && Operations.sameLanguage(automaton, Automata.makeString(commonPrefix))) {\n          singleton = commonPrefix;\n        } else {\n          singleton = null;\n        }\n\n        if (singleton != null) {\n          // matches a fixed string\n          type = AUTOMATON_TYPE.SINGLE;\n          term = new BytesRef(singleton);\n          commonSuffixRef = null;\n          runAutomaton = null;\n          this.automaton = null;\n          this.finite = null;\n          return;\n        } else if (commonPrefix.length() > 0) {\n          Automaton other = Operations.concatenate(Automata.makeString(commonPrefix), Automata.makeAnyString());\n          other = Operations.determinize(other);\n          assert Operations.hasDeadStates(other) == false;\n          if (Operations.sameLanguage(automaton, other)) {\n            // matches a constant prefix\n            type = AUTOMATON_TYPE.PREFIX;\n            term = new BytesRef(commonPrefix);\n            commonSuffixRef = null;\n            runAutomaton = null;\n            this.automaton = null;\n            this.finite = null;\n            return;\n          }\n        }\n      }\n    }\n\n    type = AUTOMATON_TYPE.NORMAL;\n    term = null;\n\n    if (finite == null) {\n      this.finite = Operations.isFinite(automaton);\n    } else {\n      this.finite = finite;\n    }\n\n    Automaton utf8 = new UTF32ToUTF8().convert(automaton);\n    if (this.finite) {\n      commonSuffixRef = null;\n    } else {\n      commonSuffixRef = Operations.getCommonSuffixBytesRef(utf8);\n    }\n    runAutomaton = new ByteRunAutomaton(utf8, true);\n\n    this.automaton = runAutomaton.automaton;\n  }\n\n","sourceOld":"  public CompiledAutomaton(LightAutomaton automaton, Boolean finite, boolean simplify) {\n\n    if (simplify) {\n\n      // Test whether the automaton is a \"simple\" form and\n      // if so, don't create a runAutomaton.  Note that on a\n      // large automaton these tests could be costly:\n\n      if (BasicOperations.isEmpty(automaton)) {\n        // matches nothing\n        type = AUTOMATON_TYPE.NONE;\n        term = null;\n        commonSuffixRef = null;\n        runAutomaton = null;\n        lightAutomaton = null;\n        this.finite = null;\n        return;\n      // NOTE: only approximate, because automaton may not be minimal:\n      } else if (BasicOperations.isTotal(automaton)) {\n        // matches all possible strings\n        type = AUTOMATON_TYPE.ALL;\n        term = null;\n        commonSuffixRef = null;\n        runAutomaton = null;\n        lightAutomaton = null;\n        this.finite = null;\n        return;\n      } else {\n\n        automaton = BasicOperations.determinize(automaton);\n\n        final String commonPrefix = SpecialOperations.getCommonPrefix(automaton);\n        final String singleton;\n\n        if (commonPrefix.length() > 0 && BasicOperations.sameLanguage(automaton, BasicAutomata.makeStringLight(commonPrefix))) {\n          singleton = commonPrefix;\n        } else {\n          singleton = null;\n        }\n\n        if (singleton != null) {\n          // matches a fixed string\n          type = AUTOMATON_TYPE.SINGLE;\n          term = new BytesRef(singleton);\n          commonSuffixRef = null;\n          runAutomaton = null;\n          lightAutomaton = null;\n          this.finite = null;\n          return;\n        } else if (commonPrefix.length() > 0) {\n          LightAutomaton other = BasicOperations.concatenateLight(BasicAutomata.makeStringLight(commonPrefix), BasicAutomata.makeAnyStringLight());\n          other = BasicOperations.determinize(other);\n          assert BasicOperations.hasDeadStates(other) == false;\n          if (BasicOperations.sameLanguage(automaton, other)) {\n            // matches a constant prefix\n            type = AUTOMATON_TYPE.PREFIX;\n            term = new BytesRef(commonPrefix);\n            commonSuffixRef = null;\n            runAutomaton = null;\n            lightAutomaton = null;\n            this.finite = null;\n            return;\n          }\n        }\n      }\n    }\n\n    type = AUTOMATON_TYPE.NORMAL;\n    term = null;\n\n    if (finite == null) {\n      this.finite = SpecialOperations.isFinite(automaton);\n    } else {\n      this.finite = finite;\n    }\n\n    LightAutomaton utf8 = new UTF32ToUTF8Light().convert(automaton);\n    if (this.finite) {\n      commonSuffixRef = null;\n    } else {\n      commonSuffixRef = SpecialOperations.getCommonSuffixBytesRef(utf8);\n    }\n    runAutomaton = new ByteRunAutomaton(utf8, true);\n\n    lightAutomaton = runAutomaton.automaton;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["a67285d1a68175d877eb9fd1624fccad3db028ff"],"a67285d1a68175d877eb9fd1624fccad3db028ff":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"a67285d1a68175d877eb9fd1624fccad3db028ff":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac34f0c5bb9274821fb0cb18075234e02002e9bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["a67285d1a68175d877eb9fd1624fccad3db028ff"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}