{"path":"contrib/analyzers/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#testNext().mjava","commits":[{"id":"7d17e89cf704a29ea5d627f86a66bb0ad595ee2c","date":1244845561,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/analyzers/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#testNext().mjava","pathOld":"/dev/null","sourceNew":"  public void testNext() throws Exception {\n\n    String test = \"The quick|JJ red|JJ fox|NN jumped|VB over the lazy|JJ brown|JJ dogs|NN\";\n    DelimitedPayloadTokenFilter filter = new DelimitedPayloadTokenFilter(new WhitespaceTokenizer(new StringReader(test)));\n    assertTermEquals(\"The\", filter, null);\n    assertTermEquals(\"quick\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"red\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"fox\", filter, \"NN\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"jumped\", filter, \"VB\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"over\", filter, null);\n    assertTermEquals(\"the\", filter, null);\n    assertTermEquals(\"lazy\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"brown\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"dogs\", filter, \"NN\".getBytes(\"UTF-8\"));\n    assertTrue(filter.next(new Token()) == null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#testNext().mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#testNext().mjava","sourceNew":"  public void testNext() throws Exception {\n\n    String test = \"The quick|JJ red|JJ fox|NN jumped|VB over the lazy|JJ brown|JJ dogs|NN\";\n    DelimitedPayloadTokenFilter filter = new DelimitedPayloadTokenFilter(new WhitespaceTokenizer(new StringReader(test)));\n    assertTermEquals(\"The\", filter, null);\n    assertTermEquals(\"quick\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"red\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"fox\", filter, \"NN\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"jumped\", filter, \"VB\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"over\", filter, null);\n    assertTermEquals(\"the\", filter, null);\n    assertTermEquals(\"lazy\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"brown\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"dogs\", filter, \"NN\".getBytes(\"UTF-8\"));\n    assertTrue(filter.next(new Token()) == null);\n  }\n\n","sourceOld":"  public void testNext() throws Exception {\n\n    String test = \"The quick|JJ red|JJ fox|NN jumped|VB over the lazy|JJ brown|JJ dogs|NN\";\n    DelimitedPayloadTokenFilter filter = new DelimitedPayloadTokenFilter(new WhitespaceTokenizer(new StringReader(test)));\n    assertTermEquals(\"The\", filter, null);\n    assertTermEquals(\"quick\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"red\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"fox\", filter, \"NN\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"jumped\", filter, \"VB\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"over\", filter, null);\n    assertTermEquals(\"the\", filter, null);\n    assertTermEquals(\"lazy\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"brown\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"dogs\", filter, \"NN\".getBytes(\"UTF-8\"));\n    assertTrue(filter.next(new Token()) == null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["7d17e89cf704a29ea5d627f86a66bb0ad595ee2c"],"7d17e89cf704a29ea5d627f86a66bb0ad595ee2c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd745d580729e528151b58aeda87ef82f1b95c9b"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7d17e89cf704a29ea5d627f86a66bb0ad595ee2c":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7d17e89cf704a29ea5d627f86a66bb0ad595ee2c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}