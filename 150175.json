{"path":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy#testSortingMP().mjava","commits":[{"id":"ad252c98ff183bc59bd0617be14fa46f9696d6fc","date":1363962178,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy#testSortingMP().mjava","pathOld":"/dev/null","sourceNew":"  public void testSortingMP() throws IOException {\n    final AtomicReader sortedReader1 = SortingAtomicReader.wrap(SlowCompositeReaderWrapper.wrap(reader), sorter);\n    final AtomicReader sortedReader2 = SlowCompositeReaderWrapper.wrap(sortedReader);\n\n    assertSorted(sortedReader1);\n    assertSorted(sortedReader2);\n    assertReaderEquals(\"\", sortedReader1, sortedReader2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4637747f71df783fc2014ef1f1e0418466e3bed6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e072d0b1fc19e0533d8ce432eed245196bca6fde","date":1379265112,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy#testSortingMP().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy#testSortingMP().mjava","sourceNew":"  public void testSortingMP() throws IOException {\n    final AtomicReader sortedReader1 = SortingAtomicReader.wrap(SlowCompositeReaderWrapper.wrap(reader), sorter);\n    final AtomicReader sortedReader2 = SlowCompositeReaderWrapper.wrap(sortedReader);\n\n    assertSorted(sortedReader1);\n    assertSorted(sortedReader2);\n    \n    assertReaderEquals(\"\", sortedReader1, sortedReader2);\n  }\n\n","sourceOld":"  public void testSortingMP() throws IOException {\n    final AtomicReader sortedReader1 = SortingAtomicReader.wrap(SlowCompositeReaderWrapper.wrap(reader), sorter);\n    final AtomicReader sortedReader2 = SlowCompositeReaderWrapper.wrap(sortedReader);\n\n    assertSorted(sortedReader1);\n    assertSorted(sortedReader2);\n    assertReaderEquals(\"\", sortedReader1, sortedReader2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b060a9c887ff2c6f4280953afc6fb6000934dae5","date":1394119540,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy#testSortingMP().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy#testSortingMP().mjava","sourceNew":"  public void testSortingMP() throws IOException {\n    final AtomicReader sortedReader1 = SortingAtomicReader.wrap(SlowCompositeReaderWrapper.wrap(reader), sort);\n    final AtomicReader sortedReader2 = SlowCompositeReaderWrapper.wrap(sortedReader);\n\n    assertSorted(sortedReader1);\n    assertSorted(sortedReader2);\n    \n    assertReaderEquals(\"\", sortedReader1, sortedReader2);\n  }\n\n","sourceOld":"  public void testSortingMP() throws IOException {\n    final AtomicReader sortedReader1 = SortingAtomicReader.wrap(SlowCompositeReaderWrapper.wrap(reader), sorter);\n    final AtomicReader sortedReader2 = SlowCompositeReaderWrapper.wrap(sortedReader);\n\n    assertSorted(sortedReader1);\n    assertSorted(sortedReader2);\n    \n    assertReaderEquals(\"\", sortedReader1, sortedReader2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4637747f71df783fc2014ef1f1e0418466e3bed6","date":1394196311,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy#testSortingMP().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy#testSortingMP().mjava","sourceNew":"  public void testSortingMP() throws IOException {\n    final AtomicReader sortedReader1 = SortingAtomicReader.wrap(SlowCompositeReaderWrapper.wrap(reader), sort);\n    final AtomicReader sortedReader2 = SlowCompositeReaderWrapper.wrap(sortedReader);\n\n    assertSorted(sortedReader1);\n    assertSorted(sortedReader2);\n    \n    assertReaderEquals(\"\", sortedReader1, sortedReader2);\n  }\n\n","sourceOld":"  public void testSortingMP() throws IOException {\n    final AtomicReader sortedReader1 = SortingAtomicReader.wrap(SlowCompositeReaderWrapper.wrap(reader), sorter);\n    final AtomicReader sortedReader2 = SlowCompositeReaderWrapper.wrap(sortedReader);\n\n    assertSorted(sortedReader1);\n    assertSorted(sortedReader2);\n    \n    assertReaderEquals(\"\", sortedReader1, sortedReader2);\n  }\n\n","bugFix":["ad252c98ff183bc59bd0617be14fa46f9696d6fc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy#testSortingMP().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy#testSortingMP().mjava","sourceNew":"  public void testSortingMP() throws IOException {\n    final AtomicReader sortedReader1 = SortingAtomicReader.wrap(SlowCompositeReaderWrapper.wrap(reader), sort);\n    final AtomicReader sortedReader2 = SlowCompositeReaderWrapper.wrap(sortedReader);\n\n    assertSorted(sortedReader1);\n    assertSorted(sortedReader2);\n    \n    assertReaderEquals(\"\", sortedReader1, sortedReader2);\n  }\n\n","sourceOld":"  public void testSortingMP() throws IOException {\n    final AtomicReader sortedReader1 = SortingAtomicReader.wrap(SlowCompositeReaderWrapper.wrap(reader), sorter);\n    final AtomicReader sortedReader2 = SlowCompositeReaderWrapper.wrap(sortedReader);\n\n    assertSorted(sortedReader1);\n    assertSorted(sortedReader2);\n    \n    assertReaderEquals(\"\", sortedReader1, sortedReader2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy#testSortingMP().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy#testSortingMP().mjava","sourceNew":"  public void testSortingMP() throws IOException {\n    final LeafReader sortedReader1 = SortingLeafReader.wrap(SlowCompositeReaderWrapper.wrap(reader), sort);\n    final LeafReader sortedReader2 = SlowCompositeReaderWrapper.wrap(sortedReader);\n\n    assertSorted(sortedReader1);\n    assertSorted(sortedReader2);\n    \n    assertReaderEquals(\"\", sortedReader1, sortedReader2);\n  }\n\n","sourceOld":"  public void testSortingMP() throws IOException {\n    final AtomicReader sortedReader1 = SortingAtomicReader.wrap(SlowCompositeReaderWrapper.wrap(reader), sort);\n    final AtomicReader sortedReader2 = SlowCompositeReaderWrapper.wrap(sortedReader);\n\n    assertSorted(sortedReader1);\n    assertSorted(sortedReader2);\n    \n    assertReaderEquals(\"\", sortedReader1, sortedReader2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e","date":1419346542,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestSortingMergePolicy#testSortingMP().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy#testSortingMP().mjava","sourceNew":"  public void testSortingMP() throws IOException {\n    final LeafReader sortedReader1 = SortingLeafReader.wrap(SlowCompositeReaderWrapper.wrap(reader), sort);\n    final LeafReader sortedReader2 = SlowCompositeReaderWrapper.wrap(sortedReader);\n\n    assertSorted(sortedReader1);\n    assertSorted(sortedReader2);\n    \n    assertReaderEquals(\"\", sortedReader1, sortedReader2);\n  }\n\n","sourceOld":"  public void testSortingMP() throws IOException {\n    final LeafReader sortedReader1 = SortingLeafReader.wrap(SlowCompositeReaderWrapper.wrap(reader), sort);\n    final LeafReader sortedReader2 = SlowCompositeReaderWrapper.wrap(sortedReader);\n\n    assertSorted(sortedReader1);\n    assertSorted(sortedReader2);\n    \n    assertReaderEquals(\"\", sortedReader1, sortedReader2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e072d0b1fc19e0533d8ce432eed245196bca6fde":["ad252c98ff183bc59bd0617be14fa46f9696d6fc"],"ad252c98ff183bc59bd0617be14fa46f9696d6fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":["e072d0b1fc19e0533d8ce432eed245196bca6fde","4637747f71df783fc2014ef1f1e0418466e3bed6"],"b060a9c887ff2c6f4280953afc6fb6000934dae5":["e072d0b1fc19e0533d8ce432eed245196bca6fde"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"4637747f71df783fc2014ef1f1e0418466e3bed6":["e072d0b1fc19e0533d8ce432eed245196bca6fde","b060a9c887ff2c6f4280953afc6fb6000934dae5"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["4637747f71df783fc2014ef1f1e0418466e3bed6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"]},"commit2Childs":{"e072d0b1fc19e0533d8ce432eed245196bca6fde":["96ea64d994d340044e0d57aeb6a5871539d10ca5","b060a9c887ff2c6f4280953afc6fb6000934dae5","4637747f71df783fc2014ef1f1e0418466e3bed6"],"ad252c98ff183bc59bd0617be14fa46f9696d6fc":["e072d0b1fc19e0533d8ce432eed245196bca6fde"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"b060a9c887ff2c6f4280953afc6fb6000934dae5":["4637747f71df783fc2014ef1f1e0418466e3bed6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ad252c98ff183bc59bd0617be14fa46f9696d6fc"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4637747f71df783fc2014ef1f1e0418466e3bed6":["96ea64d994d340044e0d57aeb6a5871539d10ca5","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96ea64d994d340044e0d57aeb6a5871539d10ca5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}