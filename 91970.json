{"path":"lucene/facet/src/test/org/apache/lucene/facet/complements/TestFacetsAccumulatorWithComplement#findFacets(boolean).mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/complements/TestFacetsAccumulatorWithComplement#findFacets(boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#findFacets(boolean).mjava","sourceNew":"  /** compute facets with certain facet requests and docs */\n  private List<FacetResult> findFacets(boolean withComplement) throws IOException {\n    FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10));\n    StandardFacetsAccumulator sfa = new StandardFacetsAccumulator(fsp, indexReader, taxoReader);\n    sfa.setComplementThreshold(withComplement ? StandardFacetsAccumulator.FORCE_COMPLEMENT : StandardFacetsAccumulator.DISABLE_COMPLEMENT);\n    FacetsCollector fc = FacetsCollector.create(sfa);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    List<FacetResult> res = fc.getFacetResults();\n    \n    // Results are ready, printing them...\n    int i = 0;\n    for (FacetResult facetResult : res) {\n      if (VERBOSE) {\n        System.out.println(\"Res \"+(i++)+\": \"+facetResult);\n      }\n    }\n    \n    assertEquals(withComplement, sfa.isUsingComplements());\n    \n    return res;\n  }\n\n","sourceOld":"  /** compute facets with certain facet requests and docs */\n  private List<FacetResult> findFacets(boolean withComplement) throws IOException {\n    FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10));\n    StandardFacetsAccumulator sfa = new StandardFacetsAccumulator(fsp, indexReader, taxoReader);\n    sfa.setComplementThreshold(withComplement ? StandardFacetsAccumulator.FORCE_COMPLEMENT : StandardFacetsAccumulator.DISABLE_COMPLEMENT);\n    FacetsCollector fc = FacetsCollector.create(sfa);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    List<FacetResult> res = fc.getFacetResults();\n    \n    // Results are ready, printing them...\n    int i = 0;\n    for (FacetResult facetResult : res) {\n      if (VERBOSE) {\n        System.out.println(\"Res \"+(i++)+\": \"+facetResult);\n      }\n    }\n    \n    assertEquals(withComplement, sfa.isUsingComplements);\n    \n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66d4c05d2724c63d6dcbdb32aab67299d77e3ca1","date":1370803313,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/complements/TestFacetsAccumulatorWithComplement#findFacets(boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/complements/TestFacetsAccumulatorWithComplement#findFacets(boolean).mjava","sourceNew":"  /** compute facets with certain facet requests and docs */\n  private List<FacetResult> findFacets(boolean withComplement) throws IOException {\n    FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10));\n    StandardFacetsAccumulator sfa = new StandardFacetsAccumulator(fsp, indexReader, taxoReader);\n    sfa.setComplementThreshold(withComplement ? StandardFacetsAccumulator.FORCE_COMPLEMENT : StandardFacetsAccumulator.DISABLE_COMPLEMENT);\n    FacetsCollector fc = FacetsCollector.create(sfa);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    List<FacetResult> res = fc.getFacetResults();\n    \n    // Results are ready, printing them...\n    int i = 0;\n    if (VERBOSE) {\n      for (FacetResult facetResult : res) {\n        System.out.println(\"Res \"+(i++)+\": \"+facetResult);\n      }\n    }\n    \n    assertEquals(withComplement, sfa.isUsingComplements());\n    \n    return res;\n  }\n\n","sourceOld":"  /** compute facets with certain facet requests and docs */\n  private List<FacetResult> findFacets(boolean withComplement) throws IOException {\n    FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10));\n    StandardFacetsAccumulator sfa = new StandardFacetsAccumulator(fsp, indexReader, taxoReader);\n    sfa.setComplementThreshold(withComplement ? StandardFacetsAccumulator.FORCE_COMPLEMENT : StandardFacetsAccumulator.DISABLE_COMPLEMENT);\n    FacetsCollector fc = FacetsCollector.create(sfa);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    List<FacetResult> res = fc.getFacetResults();\n    \n    // Results are ready, printing them...\n    int i = 0;\n    for (FacetResult facetResult : res) {\n      if (VERBOSE) {\n        System.out.println(\"Res \"+(i++)+\": \"+facetResult);\n      }\n    }\n    \n    assertEquals(withComplement, sfa.isUsingComplements());\n    \n    return res;\n  }\n\n","bugFix":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","date":1375108983,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/complements/TestFacetsAccumulatorWithComplement#findFacets(boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/complements/TestFacetsAccumulatorWithComplement#findFacets(boolean).mjava","sourceNew":"  /** compute facets with certain facet requests and docs */\n  private List<FacetResult> findFacets(boolean withComplement) throws IOException {\n    FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10));\n    OldFacetsAccumulator sfa = new OldFacetsAccumulator(fsp, indexReader, taxoReader);\n    sfa.setComplementThreshold(withComplement ? OldFacetsAccumulator.FORCE_COMPLEMENT : OldFacetsAccumulator.DISABLE_COMPLEMENT);\n    FacetsCollector fc = FacetsCollector.create(sfa);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    List<FacetResult> res = fc.getFacetResults();\n    \n    // Results are ready, printing them...\n    int i = 0;\n    if (VERBOSE) {\n      for (FacetResult facetResult : res) {\n        System.out.println(\"Res \"+(i++)+\": \"+facetResult);\n      }\n    }\n    \n    assertEquals(withComplement, sfa.isUsingComplements());\n    \n    return res;\n  }\n\n","sourceOld":"  /** compute facets with certain facet requests and docs */\n  private List<FacetResult> findFacets(boolean withComplement) throws IOException {\n    FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10));\n    StandardFacetsAccumulator sfa = new StandardFacetsAccumulator(fsp, indexReader, taxoReader);\n    sfa.setComplementThreshold(withComplement ? StandardFacetsAccumulator.FORCE_COMPLEMENT : StandardFacetsAccumulator.DISABLE_COMPLEMENT);\n    FacetsCollector fc = FacetsCollector.create(sfa);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    List<FacetResult> res = fc.getFacetResults();\n    \n    // Results are ready, printing them...\n    int i = 0;\n    if (VERBOSE) {\n      for (FacetResult facetResult : res) {\n        System.out.println(\"Res \"+(i++)+\": \"+facetResult);\n      }\n    }\n    \n    assertEquals(withComplement, sfa.isUsingComplements());\n    \n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/complements/TestFacetsAccumulatorWithComplement#findFacets(boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/complements/TestFacetsAccumulatorWithComplement#findFacets(boolean).mjava","sourceNew":"  /** compute facets with certain facet requests and docs */\n  private List<FacetResult> findFacets(boolean withComplement) throws IOException {\n    FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10));\n    OldFacetsAccumulator sfa = new OldFacetsAccumulator(fsp, indexReader, taxoReader);\n    sfa.setComplementThreshold(withComplement ? OldFacetsAccumulator.FORCE_COMPLEMENT : OldFacetsAccumulator.DISABLE_COMPLEMENT);\n    FacetsCollector fc = FacetsCollector.create(sfa);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    List<FacetResult> res = fc.getFacetResults();\n    \n    // Results are ready, printing them...\n    int i = 0;\n    if (VERBOSE) {\n      for (FacetResult facetResult : res) {\n        System.out.println(\"Res \"+(i++)+\": \"+facetResult);\n      }\n    }\n    \n    assertEquals(withComplement, sfa.isUsingComplements());\n    \n    return res;\n  }\n\n","sourceOld":"  /** compute facets with certain facet requests and docs */\n  private List<FacetResult> findFacets(boolean withComplement) throws IOException {\n    FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10));\n    StandardFacetsAccumulator sfa = new StandardFacetsAccumulator(fsp, indexReader, taxoReader);\n    sfa.setComplementThreshold(withComplement ? StandardFacetsAccumulator.FORCE_COMPLEMENT : StandardFacetsAccumulator.DISABLE_COMPLEMENT);\n    FacetsCollector fc = FacetsCollector.create(sfa);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    List<FacetResult> res = fc.getFacetResults();\n    \n    // Results are ready, printing them...\n    int i = 0;\n    if (VERBOSE) {\n      for (FacetResult facetResult : res) {\n        System.out.println(\"Res \"+(i++)+\": \"+facetResult);\n      }\n    }\n    \n    assertEquals(withComplement, sfa.isUsingComplements());\n    \n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/complements/TestFacetsAccumulatorWithComplement#findFacets(boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/complements/TestFacetsAccumulatorWithComplement#findFacets(boolean).mjava","sourceNew":"  /** compute facets with certain facet requests and docs */\n  private List<FacetResult> findFacets(boolean withComplement) throws IOException {\n    FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(new FacetLabel(\"root\",\"a\"), 10));\n    OldFacetsAccumulator sfa = new OldFacetsAccumulator(fsp, indexReader, taxoReader);\n    sfa.setComplementThreshold(withComplement ? OldFacetsAccumulator.FORCE_COMPLEMENT : OldFacetsAccumulator.DISABLE_COMPLEMENT);\n    FacetsCollector fc = FacetsCollector.create(sfa);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    List<FacetResult> res = fc.getFacetResults();\n    \n    // Results are ready, printing them...\n    int i = 0;\n    if (VERBOSE) {\n      for (FacetResult facetResult : res) {\n        System.out.println(\"Res \"+(i++)+\": \"+facetResult);\n      }\n    }\n    \n    assertEquals(withComplement, sfa.isUsingComplements());\n    \n    return res;\n  }\n\n","sourceOld":"  /** compute facets with certain facet requests and docs */\n  private List<FacetResult> findFacets(boolean withComplement) throws IOException {\n    FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10));\n    OldFacetsAccumulator sfa = new OldFacetsAccumulator(fsp, indexReader, taxoReader);\n    sfa.setComplementThreshold(withComplement ? OldFacetsAccumulator.FORCE_COMPLEMENT : OldFacetsAccumulator.DISABLE_COMPLEMENT);\n    FacetsCollector fc = FacetsCollector.create(sfa);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    List<FacetResult> res = fc.getFacetResults();\n    \n    // Results are ready, printing them...\n    int i = 0;\n    if (VERBOSE) {\n      for (FacetResult facetResult : res) {\n        System.out.println(\"Res \"+(i++)+\": \"+facetResult);\n      }\n    }\n    \n    assertEquals(withComplement, sfa.isUsingComplements());\n    \n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/complements/TestFacetsAccumulatorWithComplement#findFacets(boolean).mjava","sourceNew":null,"sourceOld":"  /** compute facets with certain facet requests and docs */\n  private List<FacetResult> findFacets(boolean withComplement) throws IOException {\n    FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(new FacetLabel(\"root\",\"a\"), 10));\n    OldFacetsAccumulator sfa = new OldFacetsAccumulator(fsp, indexReader, taxoReader);\n    sfa.setComplementThreshold(withComplement ? OldFacetsAccumulator.FORCE_COMPLEMENT : OldFacetsAccumulator.DISABLE_COMPLEMENT);\n    FacetsCollector fc = FacetsCollector.create(sfa);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    List<FacetResult> res = fc.getFacetResults();\n    \n    // Results are ready, printing them...\n    int i = 0;\n    if (VERBOSE) {\n      for (FacetResult facetResult : res) {\n        System.out.println(\"Res \"+(i++)+\": \"+facetResult);\n      }\n    }\n    \n    assertEquals(withComplement, sfa.isUsingComplements());\n    \n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/complements/TestFacetsAccumulatorWithComplement#findFacets(boolean).mjava","sourceNew":null,"sourceOld":"  /** compute facets with certain facet requests and docs */\n  private List<FacetResult> findFacets(boolean withComplement) throws IOException {\n    FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10));\n    OldFacetsAccumulator sfa = new OldFacetsAccumulator(fsp, indexReader, taxoReader);\n    sfa.setComplementThreshold(withComplement ? OldFacetsAccumulator.FORCE_COMPLEMENT : OldFacetsAccumulator.DISABLE_COMPLEMENT);\n    FacetsCollector fc = FacetsCollector.create(sfa);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    List<FacetResult> res = fc.getFacetResults();\n    \n    // Results are ready, printing them...\n    int i = 0;\n    if (VERBOSE) {\n      for (FacetResult facetResult : res) {\n        System.out.println(\"Res \"+(i++)+\": \"+facetResult);\n      }\n    }\n    \n    assertEquals(withComplement, sfa.isUsingComplements());\n    \n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["66d4c05d2724c63d6dcbdb32aab67299d77e3ca1"],"66d4c05d2724c63d6dcbdb32aab67299d77e3ca1":["607428da722dcb3e86bbd11c63de8986e6275c36"],"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["66d4c05d2724c63d6dcbdb32aab67299d77e3ca1"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6"]},"commit2Childs":{"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"66d4c05d2724c63d6dcbdb32aab67299d77e3ca1":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"607428da722dcb3e86bbd11c63de8986e6275c36":["66d4c05d2724c63d6dcbdb32aab67299d77e3ca1"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}