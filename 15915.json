{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemmer#main(String[]).mjava","commits":[{"id":"8f976917c54bb925b908d73fc4c2092e4abb8508","date":1315634439,"type":0,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemmer#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * HunspellStemmer entry point.  Accepts two arguments: location of affix file and location of dic file\n   *\n   * @param args Program arguments.  Should contain location of affix file and location of dic file\n   * @throws IOException Can be thrown while reading from the files\n   * @throws ParseException Can be thrown while parsing the files\n   */\n  public static void main(String[] args) throws IOException, ParseException {\n    if (args.length != 2) {\n      System.out.println(\"usage: HunspellStemmer <affix location> <dic location>\");\n      System.exit(1);\n    }\n\n    InputStream affixInputStream = new FileInputStream(args[0]);\n    InputStream dicInputStream = new FileInputStream(args[1]);\n\n    HunspellDictionary dictionary = new HunspellDictionary(affixInputStream, dicInputStream, Version.LUCENE_40);\n\n    affixInputStream.close();\n    dicInputStream.close();\n    \n    HunspellStemmer stemmer = new HunspellStemmer(dictionary);\n\n    Scanner scanner = new Scanner(System.in);\n    \n    System.out.print(\"> \");\n    while (scanner.hasNextLine()) {\n      String word = scanner.nextLine();\n      \n      if (\"exit\".equals(word)) {\n        break;\n      }\n\n      printStemResults(word, stemmer.stem(word.toCharArray(), word.length()));\n      \n      System.out.print(\"> \");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77d6144bb77983c683128c11b708057809173cff","date":1317852535,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemmer#main(String[]).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemmer#main(String[]).mjava","sourceNew":"  /**\n   * HunspellStemmer entry point.  Accepts two arguments: location of affix file and location of dic file\n   *\n   * @param args Program arguments.  Should contain location of affix file and location of dic file\n   * @throws IOException Can be thrown while reading from the files\n   * @throws ParseException Can be thrown while parsing the files\n   */\n  public static void main(String[] args) throws IOException, ParseException {\n    boolean ignoreCase = false;\n    int offset = 0;\n    \n    if (args.length < 2) {\n      System.out.println(\"usage: HunspellStemmer [-i] <affix location> <dic location>\");\n      System.exit(1);\n    }\n\n    if(args[offset].equals(\"-i\")) {\n      ignoreCase = true;\n      System.out.println(\"Ignoring case. All stems will be returned lowercased\");\n      offset++;\n    }\n    \n    InputStream affixInputStream = new FileInputStream(args[offset++]);\n    InputStream dicInputStream = new FileInputStream(args[offset++]);\n\n    HunspellDictionary dictionary = new HunspellDictionary(affixInputStream, dicInputStream, Version.LUCENE_40, ignoreCase);\n\n    affixInputStream.close();\n    dicInputStream.close();\n    \n    HunspellStemmer stemmer = new HunspellStemmer(dictionary);\n\n    Scanner scanner = new Scanner(System.in);\n    \n    System.out.print(\"> \");\n    while (scanner.hasNextLine()) {\n      String word = scanner.nextLine();\n      \n      if (\"exit\".equals(word)) {\n        break;\n      }\n\n      printStemResults(word, stemmer.stem(word.toCharArray(), word.length()));\n      \n      System.out.print(\"> \");\n    }\n  }\n\n","sourceOld":"  /**\n   * HunspellStemmer entry point.  Accepts two arguments: location of affix file and location of dic file\n   *\n   * @param args Program arguments.  Should contain location of affix file and location of dic file\n   * @throws IOException Can be thrown while reading from the files\n   * @throws ParseException Can be thrown while parsing the files\n   */\n  public static void main(String[] args) throws IOException, ParseException {\n    if (args.length != 2) {\n      System.out.println(\"usage: HunspellStemmer <affix location> <dic location>\");\n      System.exit(1);\n    }\n\n    InputStream affixInputStream = new FileInputStream(args[0]);\n    InputStream dicInputStream = new FileInputStream(args[1]);\n\n    HunspellDictionary dictionary = new HunspellDictionary(affixInputStream, dicInputStream, Version.LUCENE_40);\n\n    affixInputStream.close();\n    dicInputStream.close();\n    \n    HunspellStemmer stemmer = new HunspellStemmer(dictionary);\n\n    Scanner scanner = new Scanner(System.in);\n    \n    System.out.print(\"> \");\n    while (scanner.hasNextLine()) {\n      String word = scanner.nextLine();\n      \n      if (\"exit\".equals(word)) {\n        break;\n      }\n\n      printStemResults(word, stemmer.stem(word.toCharArray(), word.length()));\n      \n      System.out.print(\"> \");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemmer#main(String[]).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemmer#main(String[]).mjava","sourceNew":"  /**\n   * HunspellStemmer entry point.  Accepts two arguments: location of affix file and location of dic file\n   *\n   * @param args Program arguments.  Should contain location of affix file and location of dic file\n   * @throws IOException Can be thrown while reading from the files\n   * @throws ParseException Can be thrown while parsing the files\n   */\n  public static void main(String[] args) throws IOException, ParseException {\n    boolean ignoreCase = false;\n    int offset = 0;\n    \n    if (args.length < 2) {\n      System.out.println(\"usage: HunspellStemmer [-i] <affix location> <dic location>\");\n      System.exit(1);\n    }\n\n    if(args[offset].equals(\"-i\")) {\n      ignoreCase = true;\n      System.out.println(\"Ignoring case. All stems will be returned lowercased\");\n      offset++;\n    }\n    \n    InputStream affixInputStream = new FileInputStream(args[offset++]);\n    InputStream dicInputStream = new FileInputStream(args[offset++]);\n\n    HunspellDictionary dictionary = new HunspellDictionary(affixInputStream, dicInputStream, Version.LUCENE_40, ignoreCase);\n\n    affixInputStream.close();\n    dicInputStream.close();\n    \n    HunspellStemmer stemmer = new HunspellStemmer(dictionary);\n\n    Scanner scanner = new Scanner(System.in);\n    \n    System.out.print(\"> \");\n    while (scanner.hasNextLine()) {\n      String word = scanner.nextLine();\n      \n      if (\"exit\".equals(word)) {\n        break;\n      }\n\n      printStemResults(word, stemmer.stem(word.toCharArray(), word.length()));\n      \n      System.out.print(\"> \");\n    }\n  }\n\n","sourceOld":"  /**\n   * HunspellStemmer entry point.  Accepts two arguments: location of affix file and location of dic file\n   *\n   * @param args Program arguments.  Should contain location of affix file and location of dic file\n   * @throws IOException Can be thrown while reading from the files\n   * @throws ParseException Can be thrown while parsing the files\n   */\n  public static void main(String[] args) throws IOException, ParseException {\n    boolean ignoreCase = false;\n    int offset = 0;\n    \n    if (args.length < 2) {\n      System.out.println(\"usage: HunspellStemmer [-i] <affix location> <dic location>\");\n      System.exit(1);\n    }\n\n    if(args[offset].equals(\"-i\")) {\n      ignoreCase = true;\n      System.out.println(\"Ignoring case. All stems will be returned lowercased\");\n      offset++;\n    }\n    \n    InputStream affixInputStream = new FileInputStream(args[offset++]);\n    InputStream dicInputStream = new FileInputStream(args[offset++]);\n\n    HunspellDictionary dictionary = new HunspellDictionary(affixInputStream, dicInputStream, Version.LUCENE_40, ignoreCase);\n\n    affixInputStream.close();\n    dicInputStream.close();\n    \n    HunspellStemmer stemmer = new HunspellStemmer(dictionary);\n\n    Scanner scanner = new Scanner(System.in);\n    \n    System.out.print(\"> \");\n    while (scanner.hasNextLine()) {\n      String word = scanner.nextLine();\n      \n      if (\"exit\".equals(word)) {\n        break;\n      }\n\n      printStemResults(word, stemmer.stem(word.toCharArray(), word.length()));\n      \n      System.out.print(\"> \");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["77d6144bb77983c683128c11b708057809173cff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8f976917c54bb925b908d73fc4c2092e4abb8508":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"77d6144bb77983c683128c11b708057809173cff":["8f976917c54bb925b908d73fc4c2092e4abb8508"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8f976917c54bb925b908d73fc4c2092e4abb8508"],"8f976917c54bb925b908d73fc4c2092e4abb8508":["77d6144bb77983c683128c11b708057809173cff"],"77d6144bb77983c683128c11b708057809173cff":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}