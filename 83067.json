{"path":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekCeilArrayPacked(FST.Arc[T],int,FST.BytesReader).mjava","commits":[{"id":"ae67e1f82a53594208ca929f382ee861dad3d7a8","date":1557134375,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekCeilArrayPacked(FST.Arc[T],int,FST.BytesReader).mjava","pathOld":"/dev/null","sourceNew":"  private FST.Arc<T> doSeekCeilArrayPacked(final FST.Arc<T> arc, final int targetLabel, final FST.BytesReader in) throws IOException {\n    // The array is packed -- use binary search to find the target.\n\n    int low = arc.arcIdx;\n    int high = arc.numArcs-1;\n    int mid = 0;\n    //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n    boolean found = false;\n    while (low <= high) {\n      mid = (low + high) >>> 1;\n      in.setPosition(arc.posArcsStart);\n      in.skipBytes(arc.bytesPerArc * mid + 1);\n      final int midLabel = fst.readLabel(in);\n      final int cmp = midLabel - targetLabel;\n      //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n      if (cmp < 0)\n        low = mid + 1;\n      else if (cmp > 0)\n        high = mid - 1;\n      else {\n        found = true;\n        break;\n      }\n    }\n\n    // NOTE: this code is dup'd w/ the code below (in\n    // the outer else clause):\n    if (found) {\n      // Match\n      arc.arcIdx = mid-1;\n      fst.readNextRealArc(arc, in);\n      assert arc.arcIdx == mid;\n      assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n      output[upto] = fst.outputs.add(output[upto-1], arc.output);\n      if (targetLabel == FST.END_LABEL) {\n        return null;\n      }\n      setCurrentLabel(arc.label);\n      incr();\n      return fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n    } else if (low == arc.numArcs) {\n      // Dead end\n      arc.arcIdx = arc.numArcs-2;\n      fst.readNextRealArc(arc, in);\n      assert arc.isLast();\n      // Dead end (target is after the last arc);\n      // rollback to last fork then push\n      upto--;\n      while(true) {\n        if (upto == 0) {\n          return null;\n        }\n        final FST.Arc<T> prevArc = getArc(upto);\n        //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n        if (!prevArc.isLast()) {\n          fst.readNextArc(prevArc, fstReader);\n          pushFirst();\n          return null;\n        }\n        upto--;\n      }\n    } else {\n      arc.arcIdx = (low > high ? low : high)-1;\n      fst.readNextRealArc(arc, in);\n      assert arc.label > targetLabel;\n      pushFirst();\n      return null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54204c8a3ca26aeafd273139fc29baf70d0f6786","date":1564170395,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekCeilArrayPacked(FST.Arc[T],int,FST.BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekCeilArrayPacked(FST.Arc[T],int,FST.BytesReader).mjava","sourceNew":"  private FST.Arc<T> doSeekCeilArrayPacked(final FST.Arc<T> arc, final int targetLabel, final FST.BytesReader in) throws IOException {\n    // The array is packed -- use binary search to find the target.\n\n    int low = arc.arcIdx();\n    int high = arc.numArcs() -1;\n    int mid = 0;\n    //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n    boolean found = false;\n    while (low <= high) {\n      mid = (low + high) >>> 1;\n      in.setPosition(arc.posArcsStart());\n      in.skipBytes(arc.bytesPerArc() * mid + 1);\n      final int midLabel = fst.readLabel(in);\n      final int cmp = midLabel - targetLabel;\n      //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n      if (cmp < 0)\n        low = mid + 1;\n      else if (cmp > 0)\n        high = mid - 1;\n      else {\n        found = true;\n        break;\n      }\n    }\n\n    // NOTE: this code is dup'd w/ the code below (in\n    // the outer else clause):\n    if (found) {\n      // Match\n      arc.arcIdx(mid - 1);\n      fst.readNextRealArc(arc, in);\n      assert arc.arcIdx() == mid;\n      assert arc.label() == targetLabel: \"arc.label=\" + arc.label() + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n      output[upto] = fst.outputs.add(output[upto-1], arc.output());\n      if (targetLabel == FST.END_LABEL) {\n        return null;\n      }\n      setCurrentLabel(arc.label());\n      incr();\n      return fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n    } else if (low == arc.numArcs()) {\n      // Dead end\n      arc.arcIdx(arc.numArcs() - 2);\n      fst.readNextRealArc(arc, in);\n      assert arc.isLast();\n      // Dead end (target is after the last arc);\n      // rollback to last fork then push\n      upto--;\n      while(true) {\n        if (upto == 0) {\n          return null;\n        }\n        final FST.Arc<T> prevArc = getArc(upto);\n        //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n        if (!prevArc.isLast()) {\n          fst.readNextArc(prevArc, fstReader);\n          pushFirst();\n          return null;\n        }\n        upto--;\n      }\n    } else {\n      arc.arcIdx(low - 1);\n      fst.readNextRealArc(arc, in);\n      assert arc.label() > targetLabel;\n      pushFirst();\n      return null;\n    }\n  }\n\n","sourceOld":"  private FST.Arc<T> doSeekCeilArrayPacked(final FST.Arc<T> arc, final int targetLabel, final FST.BytesReader in) throws IOException {\n    // The array is packed -- use binary search to find the target.\n\n    int low = arc.arcIdx;\n    int high = arc.numArcs-1;\n    int mid = 0;\n    //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n    boolean found = false;\n    while (low <= high) {\n      mid = (low + high) >>> 1;\n      in.setPosition(arc.posArcsStart);\n      in.skipBytes(arc.bytesPerArc * mid + 1);\n      final int midLabel = fst.readLabel(in);\n      final int cmp = midLabel - targetLabel;\n      //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n      if (cmp < 0)\n        low = mid + 1;\n      else if (cmp > 0)\n        high = mid - 1;\n      else {\n        found = true;\n        break;\n      }\n    }\n\n    // NOTE: this code is dup'd w/ the code below (in\n    // the outer else clause):\n    if (found) {\n      // Match\n      arc.arcIdx = mid-1;\n      fst.readNextRealArc(arc, in);\n      assert arc.arcIdx == mid;\n      assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n      output[upto] = fst.outputs.add(output[upto-1], arc.output);\n      if (targetLabel == FST.END_LABEL) {\n        return null;\n      }\n      setCurrentLabel(arc.label);\n      incr();\n      return fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n    } else if (low == arc.numArcs) {\n      // Dead end\n      arc.arcIdx = arc.numArcs-2;\n      fst.readNextRealArc(arc, in);\n      assert arc.isLast();\n      // Dead end (target is after the last arc);\n      // rollback to last fork then push\n      upto--;\n      while(true) {\n        if (upto == 0) {\n          return null;\n        }\n        final FST.Arc<T> prevArc = getArc(upto);\n        //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n        if (!prevArc.isLast()) {\n          fst.readNextArc(prevArc, fstReader);\n          pushFirst();\n          return null;\n        }\n        upto--;\n      }\n    } else {\n      arc.arcIdx = (low > high ? low : high)-1;\n      fst.readNextRealArc(arc, in);\n      assert arc.label > targetLabel;\n      pushFirst();\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9b7d62e1503063c6f8cd0aeaa3ca4f8428cd244","date":1564170395,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekCeilArrayPacked(FST.Arc[T],int,FST.BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekCeilArrayPacked(FST.Arc[T],int,FST.BytesReader).mjava","sourceNew":"  private FST.Arc<T> doSeekCeilArrayPacked(final FST.Arc<T> arc, final int targetLabel, final FST.BytesReader in) throws IOException {\n    // The array is packed -- use binary search to find the target.\n\n    int low = arc.arcIdx();\n    int high = arc.numArcs() -1;\n    int mid = 0;\n    //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n    boolean found = false;\n    while (low <= high) {\n      mid = (low + high) >>> 1;\n      in.setPosition(arc.posArcsStart());\n      in.skipBytes(arc.bytesPerArc() * mid + 1);\n      final int midLabel = fst.readLabel(in);\n      final int cmp = midLabel - targetLabel;\n      //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n      if (cmp < 0)\n        low = mid + 1;\n      else if (cmp > 0)\n        high = mid - 1;\n      else {\n        found = true;\n        break;\n      }\n    }\n\n    // NOTE: this code is dup'd w/ the code below (in\n    // the outer else clause):\n    if (found) {\n      // Match\n      fst.readArcByIndex(arc, in, mid);\n      assert arc.arcIdx() == mid;\n      assert arc.label() == targetLabel: \"arc.label=\" + arc.label() + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n      output[upto] = fst.outputs.add(output[upto-1], arc.output());\n      if (targetLabel == FST.END_LABEL) {\n        return null;\n      }\n      setCurrentLabel(arc.label());\n      incr();\n      return fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n    } else if (low == arc.numArcs()) {\n      // Dead end\n      fst.readArcByIndex(arc, in, arc.numArcs() - 1);\n      assert arc.isLast();\n      // Dead end (target is after the last arc);\n      // rollback to last fork then push\n      upto--;\n      while(true) {\n        if (upto == 0) {\n          return null;\n        }\n        final FST.Arc<T> prevArc = getArc(upto);\n        //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n        if (!prevArc.isLast()) {\n          fst.readNextArc(prevArc, fstReader);\n          pushFirst();\n          return null;\n        }\n        upto--;\n      }\n    } else {\n      fst.readArcByIndex(arc, in, low);\n      assert arc.label() > targetLabel;\n      pushFirst();\n      return null;\n    }\n  }\n\n","sourceOld":"  private FST.Arc<T> doSeekCeilArrayPacked(final FST.Arc<T> arc, final int targetLabel, final FST.BytesReader in) throws IOException {\n    // The array is packed -- use binary search to find the target.\n\n    int low = arc.arcIdx();\n    int high = arc.numArcs() -1;\n    int mid = 0;\n    //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n    boolean found = false;\n    while (low <= high) {\n      mid = (low + high) >>> 1;\n      in.setPosition(arc.posArcsStart());\n      in.skipBytes(arc.bytesPerArc() * mid + 1);\n      final int midLabel = fst.readLabel(in);\n      final int cmp = midLabel - targetLabel;\n      //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n      if (cmp < 0)\n        low = mid + 1;\n      else if (cmp > 0)\n        high = mid - 1;\n      else {\n        found = true;\n        break;\n      }\n    }\n\n    // NOTE: this code is dup'd w/ the code below (in\n    // the outer else clause):\n    if (found) {\n      // Match\n      arc.arcIdx(mid - 1);\n      fst.readNextRealArc(arc, in);\n      assert arc.arcIdx() == mid;\n      assert arc.label() == targetLabel: \"arc.label=\" + arc.label() + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n      output[upto] = fst.outputs.add(output[upto-1], arc.output());\n      if (targetLabel == FST.END_LABEL) {\n        return null;\n      }\n      setCurrentLabel(arc.label());\n      incr();\n      return fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n    } else if (low == arc.numArcs()) {\n      // Dead end\n      arc.arcIdx(arc.numArcs() - 2);\n      fst.readNextRealArc(arc, in);\n      assert arc.isLast();\n      // Dead end (target is after the last arc);\n      // rollback to last fork then push\n      upto--;\n      while(true) {\n        if (upto == 0) {\n          return null;\n        }\n        final FST.Arc<T> prevArc = getArc(upto);\n        //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n        if (!prevArc.isLast()) {\n          fst.readNextArc(prevArc, fstReader);\n          pushFirst();\n          return null;\n        }\n        upto--;\n      }\n    } else {\n      arc.arcIdx(low - 1);\n      fst.readNextRealArc(arc, in);\n      assert arc.label() > targetLabel;\n      pushFirst();\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b115f25f829e48473723bb73c2c09e29f0a3ed0d","date":1564170556,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekCeilArrayPacked(FST.Arc[T],int,FST.BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekCeilArrayPacked(FST.Arc[T],int,FST.BytesReader).mjava","sourceNew":"  private FST.Arc<T> doSeekCeilArrayPacked(final FST.Arc<T> arc, final int targetLabel, final FST.BytesReader in) throws IOException {\n    // The array is packed -- use binary search to find the target.\n    int idx = Util.binarySearch(fst, arc, targetLabel);\n    if (idx >= 0) {\n      // Match\n      fst.readArcByIndex(arc, in, idx);\n      assert arc.arcIdx() == idx;\n      assert arc.label() == targetLabel: \"arc.label=\" + arc.label() + \" vs targetLabel=\" + targetLabel + \" mid=\" + idx;\n      output[upto] = fst.outputs.add(output[upto-1], arc.output());\n      if (targetLabel == FST.END_LABEL) {\n        return null;\n      }\n      setCurrentLabel(arc.label());\n      incr();\n      return fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n    }\n    idx = -1 - idx;\n    if (idx == arc.numArcs()) {\n      // Dead end\n      fst.readArcByIndex(arc, in, idx - 1);\n      assert arc.isLast();\n      // Dead end (target is after the last arc);\n      // rollback to last fork then push\n      upto--;\n      while(true) {\n        if (upto == 0) {\n          return null;\n        }\n        final FST.Arc<T> prevArc = getArc(upto);\n        //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n        if (!prevArc.isLast()) {\n          fst.readNextArc(prevArc, fstReader);\n          pushFirst();\n          return null;\n        }\n        upto--;\n      }\n    } else {\n      // Ceiling - arc with least higher label\n      fst.readArcByIndex(arc, in, idx);\n      assert arc.label() > targetLabel;\n      pushFirst();\n      return null;\n    }\n  }\n\n","sourceOld":"  private FST.Arc<T> doSeekCeilArrayPacked(final FST.Arc<T> arc, final int targetLabel, final FST.BytesReader in) throws IOException {\n    // The array is packed -- use binary search to find the target.\n\n    int low = arc.arcIdx();\n    int high = arc.numArcs() -1;\n    int mid = 0;\n    //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n    boolean found = false;\n    while (low <= high) {\n      mid = (low + high) >>> 1;\n      in.setPosition(arc.posArcsStart());\n      in.skipBytes(arc.bytesPerArc() * mid + 1);\n      final int midLabel = fst.readLabel(in);\n      final int cmp = midLabel - targetLabel;\n      //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n      if (cmp < 0)\n        low = mid + 1;\n      else if (cmp > 0)\n        high = mid - 1;\n      else {\n        found = true;\n        break;\n      }\n    }\n\n    // NOTE: this code is dup'd w/ the code below (in\n    // the outer else clause):\n    if (found) {\n      // Match\n      fst.readArcByIndex(arc, in, mid);\n      assert arc.arcIdx() == mid;\n      assert arc.label() == targetLabel: \"arc.label=\" + arc.label() + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n      output[upto] = fst.outputs.add(output[upto-1], arc.output());\n      if (targetLabel == FST.END_LABEL) {\n        return null;\n      }\n      setCurrentLabel(arc.label());\n      incr();\n      return fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n    } else if (low == arc.numArcs()) {\n      // Dead end\n      fst.readArcByIndex(arc, in, arc.numArcs() - 1);\n      assert arc.isLast();\n      // Dead end (target is after the last arc);\n      // rollback to last fork then push\n      upto--;\n      while(true) {\n        if (upto == 0) {\n          return null;\n        }\n        final FST.Arc<T> prevArc = getArc(upto);\n        //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n        if (!prevArc.isLast()) {\n          fst.readNextArc(prevArc, fstReader);\n          pushFirst();\n          return null;\n        }\n        upto--;\n      }\n    } else {\n      fst.readArcByIndex(arc, in, low);\n      assert arc.label() > targetLabel;\n      pushFirst();\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekCeilArrayPacked(FST.Arc[T],int,FST.BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekCeilArrayPacked(FST.Arc[T],int,FST.BytesReader).mjava","sourceNew":"  private FST.Arc<T> doSeekCeilArrayPacked(final FST.Arc<T> arc, final int targetLabel, final FST.BytesReader in) throws IOException {\n    // The array is packed -- use binary search to find the target.\n    int idx = Util.binarySearch(fst, arc, targetLabel);\n    if (idx >= 0) {\n      // Match\n      fst.readArcByIndex(arc, in, idx);\n      assert arc.arcIdx() == idx;\n      assert arc.label() == targetLabel: \"arc.label=\" + arc.label() + \" vs targetLabel=\" + targetLabel + \" mid=\" + idx;\n      output[upto] = fst.outputs.add(output[upto-1], arc.output());\n      if (targetLabel == FST.END_LABEL) {\n        return null;\n      }\n      setCurrentLabel(arc.label());\n      incr();\n      return fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n    }\n    idx = -1 - idx;\n    if (idx == arc.numArcs()) {\n      // Dead end\n      fst.readArcByIndex(arc, in, idx - 1);\n      assert arc.isLast();\n      // Dead end (target is after the last arc);\n      // rollback to last fork then push\n      upto--;\n      while(true) {\n        if (upto == 0) {\n          return null;\n        }\n        final FST.Arc<T> prevArc = getArc(upto);\n        //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n        if (!prevArc.isLast()) {\n          fst.readNextArc(prevArc, fstReader);\n          pushFirst();\n          return null;\n        }\n        upto--;\n      }\n    } else {\n      // Ceiling - arc with least higher label\n      fst.readArcByIndex(arc, in, idx);\n      assert arc.label() > targetLabel;\n      pushFirst();\n      return null;\n    }\n  }\n\n","sourceOld":"  private FST.Arc<T> doSeekCeilArrayPacked(final FST.Arc<T> arc, final int targetLabel, final FST.BytesReader in) throws IOException {\n    // The array is packed -- use binary search to find the target.\n\n    int low = arc.arcIdx;\n    int high = arc.numArcs-1;\n    int mid = 0;\n    //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n    boolean found = false;\n    while (low <= high) {\n      mid = (low + high) >>> 1;\n      in.setPosition(arc.posArcsStart);\n      in.skipBytes(arc.bytesPerArc * mid + 1);\n      final int midLabel = fst.readLabel(in);\n      final int cmp = midLabel - targetLabel;\n      //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n      if (cmp < 0)\n        low = mid + 1;\n      else if (cmp > 0)\n        high = mid - 1;\n      else {\n        found = true;\n        break;\n      }\n    }\n\n    // NOTE: this code is dup'd w/ the code below (in\n    // the outer else clause):\n    if (found) {\n      // Match\n      arc.arcIdx = mid-1;\n      fst.readNextRealArc(arc, in);\n      assert arc.arcIdx == mid;\n      assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n      output[upto] = fst.outputs.add(output[upto-1], arc.output);\n      if (targetLabel == FST.END_LABEL) {\n        return null;\n      }\n      setCurrentLabel(arc.label);\n      incr();\n      return fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n    } else if (low == arc.numArcs) {\n      // Dead end\n      arc.arcIdx = arc.numArcs-2;\n      fst.readNextRealArc(arc, in);\n      assert arc.isLast();\n      // Dead end (target is after the last arc);\n      // rollback to last fork then push\n      upto--;\n      while(true) {\n        if (upto == 0) {\n          return null;\n        }\n        final FST.Arc<T> prevArc = getArc(upto);\n        //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n        if (!prevArc.isLast()) {\n          fst.readNextArc(prevArc, fstReader);\n          pushFirst();\n          return null;\n        }\n        upto--;\n      }\n    } else {\n      arc.arcIdx = (low > high ? low : high)-1;\n      fst.readNextRealArc(arc, in);\n      assert arc.label > targetLabel;\n      pushFirst();\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["ae67e1f82a53594208ca929f382ee861dad3d7a8"],"b115f25f829e48473723bb73c2c09e29f0a3ed0d":["f9b7d62e1503063c6f8cd0aeaa3ca4f8428cd244"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f9b7d62e1503063c6f8cd0aeaa3ca4f8428cd244":["54204c8a3ca26aeafd273139fc29baf70d0f6786"],"ae67e1f82a53594208ca929f382ee861dad3d7a8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8061ddd97f3352007d927dae445884a6f3d857b":["ae67e1f82a53594208ca929f382ee861dad3d7a8","b115f25f829e48473723bb73c2c09e29f0a3ed0d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b115f25f829e48473723bb73c2c09e29f0a3ed0d"]},"commit2Childs":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["f9b7d62e1503063c6f8cd0aeaa3ca4f8428cd244"],"b115f25f829e48473723bb73c2c09e29f0a3ed0d":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ae67e1f82a53594208ca929f382ee861dad3d7a8"],"f9b7d62e1503063c6f8cd0aeaa3ca4f8428cd244":["b115f25f829e48473723bb73c2c09e29f0a3ed0d"],"ae67e1f82a53594208ca929f382ee861dad3d7a8":["54204c8a3ca26aeafd273139fc29baf70d0f6786","f8061ddd97f3352007d927dae445884a6f3d857b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}