{"path":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)).setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)).setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)).setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), store, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), store, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15bbd254c1506df5299c4df8c148262c7bd6301e","date":1279913113,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    Random random = newRandom();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), store, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    Random random = newRandom();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), store, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    Random random = newRandom();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), store, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    MockRAMDirectory store = new MockRAMDirectory();\n    Random random = newRandom();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    Random random = newRandom();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    Random random = newRandom();\n    MockRAMDirectory store = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    MockRAMDirectory store = new MockRAMDirectory();\n    Random random = newRandom();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    Random random = newRandom();\n    Directory store = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    Random random = newRandom();\n    MockRAMDirectory store = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    Random random = newRandom();\n    Directory store = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    Random random = newRandom();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"323f871ffe96b871d8c534a614be60751bb023c2","date":1294820532,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9325c7ff9928fabe81c28553b41fc7aa57dfab","date":1295896411,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setSimilarityProvider(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarityProvider(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setSimilarityProvider(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarityProvider(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setSimilarityProvider(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setSimilarityProvider(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarityProvider(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setSimilarityProvider(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setSimilarityProvider(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setSimilarityProvider(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarityProvider(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"160d004a0e8f5361a446f9d01456aee1c1af20dc","date":1301061642,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setSimilarityProvider(new SimpleSimilarityProvider()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setSimilarityProvider(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setSimilarityProvider(new SimpleSimilarityProvider()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setSimilarityProvider(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setSimilarityProvider(new SimpleSimilarityProvider()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setSimilarityProvider(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setSimilarityProvider(new SimpleSimilarityProvider()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setSimilarityProvider(new SimpleSimilarityProvider()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setSimilarityProvider(new SimpleSimilarityProvider()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setSimilarityProvider(new SimpleSimilarityProvider()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setSimilarityProvider(new SimpleSimilarityProvider()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setSimilarityProvider(new SimpleSimilarityProvider()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setSimilarityProvider(new SimpleSimilarityProvider()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setSimilarityProvider(new SimpleSimilarityProvider()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setSimilarityProvider(new SimpleSimilarityProvider()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", TextField.TYPE_STORED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", TextField.TYPE_STORED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setSimilarityProvider(new SimpleSimilarityProvider()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"58f6129aa3cc4d7092fe2dacee662b263fb66e94","date":1315473880,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setSimilarityProvider(new SimpleSimilarityProvider()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", TextField.TYPE_STORED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", TextField.TYPE_STORED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score(), 0);\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score(), 0);\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setSimilarityProvider(new SimpleSimilarityProvider()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", TextField.TYPE_STORED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", TextField.TYPE_STORED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setSimilarityProvider(new SimpleSimilarityProvider()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", TextField.TYPE_STORED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", TextField.TYPE_STORED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score(), 0);\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score(), 0);\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setSimilarityProvider(new SimpleSimilarityProvider()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", TextField.TYPE_STORED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", TextField.TYPE_STORED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score(), 0);\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score(), 0);\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setSimilarityProvider(new SimpleSimilarityProvider()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", TextField.TYPE_STORED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", TextField.TYPE_STORED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score(), 0);\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score(), 0);\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setSimilarityProvider(new SimpleSimilarityProvider()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", TextField.TYPE_STORED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", TextField.TYPE_STORED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score(), 0);\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score(), 0);\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b","date":1328532481,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", TextField.TYPE_STORED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", TextField.TYPE_STORED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score(), 0);\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score(), 0);\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setSimilarityProvider(new SimpleSimilarityProvider()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", TextField.TYPE_STORED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", TextField.TYPE_STORED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score(), 0);\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score(), 0);\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", TextField.TYPE_STORED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", TextField.TYPE_STORED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score(), 0);\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score(), 0);\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, \n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a c\", TextField.TYPE_STORED));\n\n    Document d2 = new Document();\n    d2.add(newField(\"field\", \"a b c\", TextField.TYPE_STORED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score(), 0);\n         }\n         @Override\n        public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score(), 0);\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score(), 0);\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"58f6129aa3cc4d7092fe2dacee662b263fb66e94":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["58f6129aa3cc4d7092fe2dacee662b263fb66e94","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["c084e47df29de3330311d69dabf515ceaa989512"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","132903c28af3aa6f67284b78de91c0f0a99488c2"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["868da859b43505d9d2a023bfeae6dd0c795f5295","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["323f871ffe96b871d8c534a614be60751bb023c2"],"c084e47df29de3330311d69dabf515ceaa989512":["d572389229127c297dd1fa5ce4758e1cec41e799"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bde51b089eb7f86171eb3406e38a274743f9b7ac","160d004a0e8f5361a446f9d01456aee1c1af20dc"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["160d004a0e8f5361a446f9d01456aee1c1af20dc"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["58f6129aa3cc4d7092fe2dacee662b263fb66e94"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","790e1fde4caa765b3faaad3fbcd25c6973450336"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","790e1fde4caa765b3faaad3fbcd25c6973450336"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"70ad682703b8585f5d0a637efec044d57ec05efb":["132903c28af3aa6f67284b78de91c0f0a99488c2","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","4b103252dee6afa1b6d7a622c773d178788eb85a"],"323f871ffe96b871d8c534a614be60751bb023c2":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["c084e47df29de3330311d69dabf515ceaa989512","15bbd254c1506df5299c4df8c148262c7bd6301e"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d619839baa8ce5503e496b94a9e42ad6f079293f","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":["d572389229127c297dd1fa5ce4758e1cec41e799","c084e47df29de3330311d69dabf515ceaa989512"],"962d04139994fce5193143ef35615499a9a96d78":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"160d004a0e8f5361a446f9d01456aee1c1af20dc":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","160d004a0e8f5361a446f9d01456aee1c1af20dc"],"a3776dccca01c11e7046323cfad46a3b4a471233":["160d004a0e8f5361a446f9d01456aee1c1af20dc","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","323f871ffe96b871d8c534a614be60751bb023c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"58f6129aa3cc4d7092fe2dacee662b263fb66e94":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"15bbd254c1506df5299c4df8c148262c7bd6301e":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c084e47df29de3330311d69dabf515ceaa989512":["15bbd254c1506df5299c4df8c148262c7bd6301e","4b103252dee6afa1b6d7a622c773d178788eb85a","5f4e87790277826a2aea119328600dfb07761f32"],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","790e1fde4caa765b3faaad3fbcd25c6973450336"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["962d04139994fce5193143ef35615499a9a96d78"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["1509f151d7692d84fae414b2b799ac06ba60fcb4","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["58f6129aa3cc4d7092fe2dacee662b263fb66e94"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"323f871ffe96b871d8c534a614be60751bb023c2":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab","868da859b43505d9d2a023bfeae6dd0c795f5295"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","3242a09f703274d3b9283f2064a1a33064b53a1b"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["c084e47df29de3330311d69dabf515ceaa989512","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"962d04139994fce5193143ef35615499a9a96d78":[],"790e1fde4caa765b3faaad3fbcd25c6973450336":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","160d004a0e8f5361a446f9d01456aee1c1af20dc"],"160d004a0e8f5361a446f9d01456aee1c1af20dc":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","f2c5f0cb44df114db4228c8f77861714b5cabaea","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","323f871ffe96b871d8c534a614be60751bb023c2"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}