{"path":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#DistributedUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#DistributedUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"/dev/null","sourceNew":"  public DistributedUpdateProcessor(SolrQueryRequest req,\n      SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    super(next);\n    this.rsp = rsp;\n    this.next = next;\n    this.idField = req.getSchema().getUniqueKeyField();\n    // version init\n\n    this.updateHandler = req.getCore().getUpdateHandler();\n    this.ulog = updateHandler.getUpdateLog();\n    this.vinfo = ulog == null ? null : ulog.getVersionInfo();\n    versionsStored = this.vinfo != null && this.vinfo.getVersionField() != null;\n    returnVersions = versionsStored;\n\n    // TODO: better way to get the response, or pass back info to it?\n    SolrRequestInfo reqInfo = returnVersions ? SolrRequestInfo.getRequestInfo() : null;\n\n    this.req = req;\n    \n    CoreDescriptor coreDesc = req.getCore().getCoreDescriptor();\n    \n    this.zkEnabled  = coreDesc.getCoreContainer().isZooKeeperAware();\n    //this.rsp = reqInfo != null ? reqInfo.getRsp() : null;\n\n    \n    zkController = req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n    \n    CloudDescriptor cloudDesc = coreDesc.getCloudDescriptor();\n    \n    if (cloudDesc != null) {\n      collection = cloudDesc.getCollectionName();\n    }\n    \n    cmdDistrib = new SolrCmdDistributor();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#DistributedUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"/dev/null","sourceNew":"  public DistributedUpdateProcessor(SolrQueryRequest req,\n      SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    super(next);\n    this.rsp = rsp;\n    this.next = next;\n    this.idField = req.getSchema().getUniqueKeyField();\n    // version init\n\n    this.updateHandler = req.getCore().getUpdateHandler();\n    this.ulog = updateHandler.getUpdateLog();\n    this.vinfo = ulog == null ? null : ulog.getVersionInfo();\n    versionsStored = this.vinfo != null && this.vinfo.getVersionField() != null;\n    returnVersions = versionsStored;\n\n    // TODO: better way to get the response, or pass back info to it?\n    SolrRequestInfo reqInfo = returnVersions ? SolrRequestInfo.getRequestInfo() : null;\n\n    this.req = req;\n    \n    CoreDescriptor coreDesc = req.getCore().getCoreDescriptor();\n    \n    this.zkEnabled  = coreDesc.getCoreContainer().isZooKeeperAware();\n    //this.rsp = reqInfo != null ? reqInfo.getRsp() : null;\n\n    \n    zkController = req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n    \n    CloudDescriptor cloudDesc = coreDesc.getCloudDescriptor();\n    \n    if (cloudDesc != null) {\n      collection = cloudDesc.getCollectionName();\n    }\n    \n    cmdDistrib = new SolrCmdDistributor();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#DistributedUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"/dev/null","sourceNew":"  public DistributedUpdateProcessor(SolrQueryRequest req,\n      SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    super(next);\n    this.rsp = rsp;\n    this.next = next;\n    this.idField = req.getSchema().getUniqueKeyField();\n    // version init\n\n    this.updateHandler = req.getCore().getUpdateHandler();\n    this.ulog = updateHandler.getUpdateLog();\n    this.vinfo = ulog == null ? null : ulog.getVersionInfo();\n    versionsStored = this.vinfo != null && this.vinfo.getVersionField() != null;\n    returnVersions = versionsStored;\n\n    // TODO: better way to get the response, or pass back info to it?\n    SolrRequestInfo reqInfo = returnVersions ? SolrRequestInfo.getRequestInfo() : null;\n\n    this.req = req;\n    \n    CoreDescriptor coreDesc = req.getCore().getCoreDescriptor();\n    \n    this.zkEnabled  = coreDesc.getCoreContainer().isZooKeeperAware();\n    //this.rsp = reqInfo != null ? reqInfo.getRsp() : null;\n\n    \n    zkController = req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n    \n    CloudDescriptor cloudDesc = coreDesc.getCloudDescriptor();\n    \n    if (cloudDesc != null) {\n      collection = cloudDesc.getCollectionName();\n    }\n    \n    cmdDistrib = new SolrCmdDistributor();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"908e4b72ef80ab923b96d88f2d5e1053ffe23c00","date":1328149074,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#DistributedUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#DistributedUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","sourceNew":"  public DistributedUpdateProcessor(SolrQueryRequest req,\n      SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    super(next);\n    this.rsp = rsp;\n    this.next = next;\n    this.idField = req.getSchema().getUniqueKeyField();\n    // version init\n\n    this.updateHandler = req.getCore().getUpdateHandler();\n    this.ulog = updateHandler.getUpdateLog();\n    this.vinfo = ulog == null ? null : ulog.getVersionInfo();\n    versionsStored = this.vinfo != null && this.vinfo.getVersionField() != null;\n    returnVersions = req.getParams().getBool(UpdateParams.VERSIONS ,false);\n\n    // TODO: better way to get the response, or pass back info to it?\n    SolrRequestInfo reqInfo = returnVersions ? SolrRequestInfo.getRequestInfo() : null;\n\n    this.req = req;\n    \n    CoreDescriptor coreDesc = req.getCore().getCoreDescriptor();\n    \n    this.zkEnabled  = coreDesc.getCoreContainer().isZooKeeperAware();\n    //this.rsp = reqInfo != null ? reqInfo.getRsp() : null;\n\n    \n    zkController = req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n    \n    CloudDescriptor cloudDesc = coreDesc.getCloudDescriptor();\n    \n    if (cloudDesc != null) {\n      collection = cloudDesc.getCollectionName();\n    }\n    \n    cmdDistrib = new SolrCmdDistributor();\n  }\n\n","sourceOld":"  public DistributedUpdateProcessor(SolrQueryRequest req,\n      SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    super(next);\n    this.rsp = rsp;\n    this.next = next;\n    this.idField = req.getSchema().getUniqueKeyField();\n    // version init\n\n    this.updateHandler = req.getCore().getUpdateHandler();\n    this.ulog = updateHandler.getUpdateLog();\n    this.vinfo = ulog == null ? null : ulog.getVersionInfo();\n    versionsStored = this.vinfo != null && this.vinfo.getVersionField() != null;\n    returnVersions = versionsStored;\n\n    // TODO: better way to get the response, or pass back info to it?\n    SolrRequestInfo reqInfo = returnVersions ? SolrRequestInfo.getRequestInfo() : null;\n\n    this.req = req;\n    \n    CoreDescriptor coreDesc = req.getCore().getCoreDescriptor();\n    \n    this.zkEnabled  = coreDesc.getCoreContainer().isZooKeeperAware();\n    //this.rsp = reqInfo != null ? reqInfo.getRsp() : null;\n\n    \n    zkController = req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n    \n    CloudDescriptor cloudDesc = coreDesc.getCloudDescriptor();\n    \n    if (cloudDesc != null) {\n      collection = cloudDesc.getCollectionName();\n    }\n    \n    cmdDistrib = new SolrCmdDistributor();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df5e4eb47076636341c2cfdc58472477477d7e96","date":1329187541,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#DistributedUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#DistributedUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","sourceNew":"  public DistributedUpdateProcessor(SolrQueryRequest req,\n      SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    super(next);\n    this.rsp = rsp;\n    this.next = next;\n    this.idField = req.getSchema().getUniqueKeyField();\n    // version init\n\n    this.updateHandler = req.getCore().getUpdateHandler();\n    this.ulog = updateHandler.getUpdateLog();\n    this.vinfo = ulog == null ? null : ulog.getVersionInfo();\n    versionsStored = this.vinfo != null && this.vinfo.getVersionField() != null;\n    returnVersions = req.getParams().getBool(UpdateParams.VERSIONS ,false);\n\n    // TODO: better way to get the response, or pass back info to it?\n    SolrRequestInfo reqInfo = returnVersions ? SolrRequestInfo.getRequestInfo() : null;\n\n    this.req = req;\n    \n    CoreDescriptor coreDesc = req.getCore().getCoreDescriptor();\n    \n    this.zkEnabled  = coreDesc.getCoreContainer().isZooKeeperAware();\n    //this.rsp = reqInfo != null ? reqInfo.getRsp() : null;\n\n    \n    zkController = req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n    \n    cloudDesc = coreDesc.getCloudDescriptor();\n    \n    if (cloudDesc != null) {\n      collection = cloudDesc.getCollectionName();\n    }\n    \n    cmdDistrib = new SolrCmdDistributor();\n  }\n\n","sourceOld":"  public DistributedUpdateProcessor(SolrQueryRequest req,\n      SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    super(next);\n    this.rsp = rsp;\n    this.next = next;\n    this.idField = req.getSchema().getUniqueKeyField();\n    // version init\n\n    this.updateHandler = req.getCore().getUpdateHandler();\n    this.ulog = updateHandler.getUpdateLog();\n    this.vinfo = ulog == null ? null : ulog.getVersionInfo();\n    versionsStored = this.vinfo != null && this.vinfo.getVersionField() != null;\n    returnVersions = req.getParams().getBool(UpdateParams.VERSIONS ,false);\n\n    // TODO: better way to get the response, or pass back info to it?\n    SolrRequestInfo reqInfo = returnVersions ? SolrRequestInfo.getRequestInfo() : null;\n\n    this.req = req;\n    \n    CoreDescriptor coreDesc = req.getCore().getCoreDescriptor();\n    \n    this.zkEnabled  = coreDesc.getCoreContainer().isZooKeeperAware();\n    //this.rsp = reqInfo != null ? reqInfo.getRsp() : null;\n\n    \n    zkController = req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n    \n    CloudDescriptor cloudDesc = coreDesc.getCloudDescriptor();\n    \n    if (cloudDesc != null) {\n      collection = cloudDesc.getCollectionName();\n    }\n    \n    cmdDistrib = new SolrCmdDistributor();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8b4dc0cb506204097b6e34b962947988b60e5d0","date":1342976066,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#DistributedUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#DistributedUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","sourceNew":"  public DistributedUpdateProcessor(SolrQueryRequest req,\n      SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    super(next);\n    this.rsp = rsp;\n    this.next = next;\n    this.idField = req.getSchema().getUniqueKeyField();\n    // version init\n\n    this.updateHandler = req.getCore().getUpdateHandler();\n    this.ulog = updateHandler.getUpdateLog();\n    this.vinfo = ulog == null ? null : ulog.getVersionInfo();\n    versionsStored = this.vinfo != null && this.vinfo.getVersionField() != null;\n    returnVersions = req.getParams().getBool(UpdateParams.VERSIONS ,false);\n\n    // TODO: better way to get the response, or pass back info to it?\n    SolrRequestInfo reqInfo = returnVersions ? SolrRequestInfo.getRequestInfo() : null;\n\n    this.req = req;\n    \n    CoreDescriptor coreDesc = req.getCore().getCoreDescriptor();\n    \n    this.zkEnabled  = coreDesc.getCoreContainer().isZooKeeperAware();\n    //this.rsp = reqInfo != null ? reqInfo.getRsp() : null;\n\n    \n    zkController = req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n    \n    cloudDesc = coreDesc.getCloudDescriptor();\n    \n    if (cloudDesc != null) {\n      collection = cloudDesc.getCollectionName();\n    }\n    \n    cmdDistrib = new SolrCmdDistributor(numNodes);\n  }\n\n","sourceOld":"  public DistributedUpdateProcessor(SolrQueryRequest req,\n      SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    super(next);\n    this.rsp = rsp;\n    this.next = next;\n    this.idField = req.getSchema().getUniqueKeyField();\n    // version init\n\n    this.updateHandler = req.getCore().getUpdateHandler();\n    this.ulog = updateHandler.getUpdateLog();\n    this.vinfo = ulog == null ? null : ulog.getVersionInfo();\n    versionsStored = this.vinfo != null && this.vinfo.getVersionField() != null;\n    returnVersions = req.getParams().getBool(UpdateParams.VERSIONS ,false);\n\n    // TODO: better way to get the response, or pass back info to it?\n    SolrRequestInfo reqInfo = returnVersions ? SolrRequestInfo.getRequestInfo() : null;\n\n    this.req = req;\n    \n    CoreDescriptor coreDesc = req.getCore().getCoreDescriptor();\n    \n    this.zkEnabled  = coreDesc.getCoreContainer().isZooKeeperAware();\n    //this.rsp = reqInfo != null ? reqInfo.getRsp() : null;\n\n    \n    zkController = req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n    \n    cloudDesc = coreDesc.getCloudDescriptor();\n    \n    if (cloudDesc != null) {\n      collection = cloudDesc.getCollectionName();\n    }\n    \n    cmdDistrib = new SolrCmdDistributor();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#DistributedUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#DistributedUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","sourceNew":"  public DistributedUpdateProcessor(SolrQueryRequest req,\n      SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    super(next);\n    this.rsp = rsp;\n    this.next = next;\n    this.idField = req.getSchema().getUniqueKeyField();\n    // version init\n\n    this.updateHandler = req.getCore().getUpdateHandler();\n    this.ulog = updateHandler.getUpdateLog();\n    this.vinfo = ulog == null ? null : ulog.getVersionInfo();\n    versionsStored = this.vinfo != null && this.vinfo.getVersionField() != null;\n    returnVersions = req.getParams().getBool(UpdateParams.VERSIONS ,false);\n\n    // TODO: better way to get the response, or pass back info to it?\n    SolrRequestInfo reqInfo = returnVersions ? SolrRequestInfo.getRequestInfo() : null;\n\n    this.req = req;\n    \n    CoreDescriptor coreDesc = req.getCore().getCoreDescriptor();\n    \n    this.zkEnabled  = coreDesc.getCoreContainer().isZooKeeperAware();\n    //this.rsp = reqInfo != null ? reqInfo.getRsp() : null;\n\n    \n    zkController = req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n    \n    cloudDesc = coreDesc.getCloudDescriptor();\n    \n    if (cloudDesc != null) {\n      collection = cloudDesc.getCollectionName();\n    }\n    \n    cmdDistrib = new SolrCmdDistributor(numNodes);\n  }\n\n","sourceOld":"  public DistributedUpdateProcessor(SolrQueryRequest req,\n      SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    super(next);\n    this.rsp = rsp;\n    this.next = next;\n    this.idField = req.getSchema().getUniqueKeyField();\n    // version init\n\n    this.updateHandler = req.getCore().getUpdateHandler();\n    this.ulog = updateHandler.getUpdateLog();\n    this.vinfo = ulog == null ? null : ulog.getVersionInfo();\n    versionsStored = this.vinfo != null && this.vinfo.getVersionField() != null;\n    returnVersions = req.getParams().getBool(UpdateParams.VERSIONS ,false);\n\n    // TODO: better way to get the response, or pass back info to it?\n    SolrRequestInfo reqInfo = returnVersions ? SolrRequestInfo.getRequestInfo() : null;\n\n    this.req = req;\n    \n    CoreDescriptor coreDesc = req.getCore().getCoreDescriptor();\n    \n    this.zkEnabled  = coreDesc.getCoreContainer().isZooKeeperAware();\n    //this.rsp = reqInfo != null ? reqInfo.getRsp() : null;\n\n    \n    zkController = req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n    \n    cloudDesc = coreDesc.getCloudDescriptor();\n    \n    if (cloudDesc != null) {\n      collection = cloudDesc.getCollectionName();\n    }\n    \n    cmdDistrib = new SolrCmdDistributor();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#DistributedUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#DistributedUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","sourceNew":"  public DistributedUpdateProcessor(SolrQueryRequest req,\n      SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    super(next);\n    this.rsp = rsp;\n    this.next = next;\n    this.idField = req.getSchema().getUniqueKeyField();\n    // version init\n\n    this.updateHandler = req.getCore().getUpdateHandler();\n    this.ulog = updateHandler.getUpdateLog();\n    this.vinfo = ulog == null ? null : ulog.getVersionInfo();\n    versionsStored = this.vinfo != null && this.vinfo.getVersionField() != null;\n    returnVersions = req.getParams().getBool(UpdateParams.VERSIONS ,false);\n\n    // TODO: better way to get the response, or pass back info to it?\n    SolrRequestInfo reqInfo = returnVersions ? SolrRequestInfo.getRequestInfo() : null;\n\n    this.req = req;\n    \n    CoreDescriptor coreDesc = req.getCore().getCoreDescriptor();\n    \n    this.zkEnabled  = coreDesc.getCoreContainer().isZooKeeperAware();\n    //this.rsp = reqInfo != null ? reqInfo.getRsp() : null;\n\n    \n    zkController = req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n    \n    cloudDesc = coreDesc.getCloudDescriptor();\n    \n    if (cloudDesc != null) {\n      collection = cloudDesc.getCollectionName();\n    }\n    \n    cmdDistrib = new SolrCmdDistributor(numNodes);\n  }\n\n","sourceOld":"  public DistributedUpdateProcessor(SolrQueryRequest req,\n      SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    super(next);\n    this.rsp = rsp;\n    this.next = next;\n    this.idField = req.getSchema().getUniqueKeyField();\n    // version init\n\n    this.updateHandler = req.getCore().getUpdateHandler();\n    this.ulog = updateHandler.getUpdateLog();\n    this.vinfo = ulog == null ? null : ulog.getVersionInfo();\n    versionsStored = this.vinfo != null && this.vinfo.getVersionField() != null;\n    returnVersions = req.getParams().getBool(UpdateParams.VERSIONS ,false);\n\n    // TODO: better way to get the response, or pass back info to it?\n    SolrRequestInfo reqInfo = returnVersions ? SolrRequestInfo.getRequestInfo() : null;\n\n    this.req = req;\n    \n    CoreDescriptor coreDesc = req.getCore().getCoreDescriptor();\n    \n    this.zkEnabled  = coreDesc.getCoreContainer().isZooKeeperAware();\n    //this.rsp = reqInfo != null ? reqInfo.getRsp() : null;\n\n    \n    zkController = req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n    \n    cloudDesc = coreDesc.getCloudDescriptor();\n    \n    if (cloudDesc != null) {\n      collection = cloudDesc.getCollectionName();\n    }\n    \n    cmdDistrib = new SolrCmdDistributor();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82c24640e6ecba75f717cf7af96903ab8e4530ef","date":1343944730,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#DistributedUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#DistributedUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","sourceNew":"  public DistributedUpdateProcessor(SolrQueryRequest req,\n      SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    super(next);\n    this.rsp = rsp;\n    this.next = next;\n    this.idField = req.getSchema().getUniqueKeyField();\n    // version init\n\n    this.updateHandler = req.getCore().getUpdateHandler();\n    this.ulog = updateHandler.getUpdateLog();\n    this.vinfo = ulog == null ? null : ulog.getVersionInfo();\n    versionsStored = this.vinfo != null && this.vinfo.getVersionField() != null;\n    returnVersions = req.getParams().getBool(UpdateParams.VERSIONS ,false);\n\n    // TODO: better way to get the response, or pass back info to it?\n    SolrRequestInfo reqInfo = returnVersions ? SolrRequestInfo.getRequestInfo() : null;\n\n    this.req = req;\n    \n    CoreDescriptor coreDesc = req.getCore().getCoreDescriptor();\n    \n    this.zkEnabled  = coreDesc.getCoreContainer().isZooKeeperAware();\n    zkController = req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n    if (zkEnabled) {\n      numNodes =  zkController.getZkStateReader().getCloudState().getLiveNodes().size();\n    }\n    //this.rsp = reqInfo != null ? reqInfo.getRsp() : null;\n\n   \n    \n    cloudDesc = coreDesc.getCloudDescriptor();\n    \n    if (cloudDesc != null) {\n      collection = cloudDesc.getCollectionName();\n    }\n\n    cmdDistrib = new SolrCmdDistributor(numNodes);\n  }\n\n","sourceOld":"  public DistributedUpdateProcessor(SolrQueryRequest req,\n      SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    super(next);\n    this.rsp = rsp;\n    this.next = next;\n    this.idField = req.getSchema().getUniqueKeyField();\n    // version init\n\n    this.updateHandler = req.getCore().getUpdateHandler();\n    this.ulog = updateHandler.getUpdateLog();\n    this.vinfo = ulog == null ? null : ulog.getVersionInfo();\n    versionsStored = this.vinfo != null && this.vinfo.getVersionField() != null;\n    returnVersions = req.getParams().getBool(UpdateParams.VERSIONS ,false);\n\n    // TODO: better way to get the response, or pass back info to it?\n    SolrRequestInfo reqInfo = returnVersions ? SolrRequestInfo.getRequestInfo() : null;\n\n    this.req = req;\n    \n    CoreDescriptor coreDesc = req.getCore().getCoreDescriptor();\n    \n    this.zkEnabled  = coreDesc.getCoreContainer().isZooKeeperAware();\n    //this.rsp = reqInfo != null ? reqInfo.getRsp() : null;\n\n    \n    zkController = req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n    \n    cloudDesc = coreDesc.getCloudDescriptor();\n    \n    if (cloudDesc != null) {\n      collection = cloudDesc.getCollectionName();\n    }\n    \n    cmdDistrib = new SolrCmdDistributor(numNodes);\n  }\n\n","bugFix":null,"bugIntro":["a6378064655e76cd7b908b1cab4ce425b384b508"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#DistributedUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#DistributedUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","sourceNew":"  public DistributedUpdateProcessor(SolrQueryRequest req,\n      SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    super(next);\n    this.rsp = rsp;\n    this.next = next;\n    this.idField = req.getSchema().getUniqueKeyField();\n    // version init\n\n    this.updateHandler = req.getCore().getUpdateHandler();\n    this.ulog = updateHandler.getUpdateLog();\n    this.vinfo = ulog == null ? null : ulog.getVersionInfo();\n    versionsStored = this.vinfo != null && this.vinfo.getVersionField() != null;\n    returnVersions = req.getParams().getBool(UpdateParams.VERSIONS ,false);\n\n    // TODO: better way to get the response, or pass back info to it?\n    SolrRequestInfo reqInfo = returnVersions ? SolrRequestInfo.getRequestInfo() : null;\n\n    this.req = req;\n    \n    CoreDescriptor coreDesc = req.getCore().getCoreDescriptor();\n    \n    this.zkEnabled  = coreDesc.getCoreContainer().isZooKeeperAware();\n    zkController = req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n    if (zkEnabled) {\n      numNodes =  zkController.getZkStateReader().getClusterState().getLiveNodes().size();\n    }\n    //this.rsp = reqInfo != null ? reqInfo.getRsp() : null;\n\n   \n    \n    cloudDesc = coreDesc.getCloudDescriptor();\n    \n    if (cloudDesc != null) {\n      collection = cloudDesc.getCollectionName();\n    }\n\n    cmdDistrib = new SolrCmdDistributor(numNodes);\n  }\n\n","sourceOld":"  public DistributedUpdateProcessor(SolrQueryRequest req,\n      SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    super(next);\n    this.rsp = rsp;\n    this.next = next;\n    this.idField = req.getSchema().getUniqueKeyField();\n    // version init\n\n    this.updateHandler = req.getCore().getUpdateHandler();\n    this.ulog = updateHandler.getUpdateLog();\n    this.vinfo = ulog == null ? null : ulog.getVersionInfo();\n    versionsStored = this.vinfo != null && this.vinfo.getVersionField() != null;\n    returnVersions = req.getParams().getBool(UpdateParams.VERSIONS ,false);\n\n    // TODO: better way to get the response, or pass back info to it?\n    SolrRequestInfo reqInfo = returnVersions ? SolrRequestInfo.getRequestInfo() : null;\n\n    this.req = req;\n    \n    CoreDescriptor coreDesc = req.getCore().getCoreDescriptor();\n    \n    this.zkEnabled  = coreDesc.getCoreContainer().isZooKeeperAware();\n    zkController = req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n    if (zkEnabled) {\n      numNodes =  zkController.getZkStateReader().getCloudState().getLiveNodes().size();\n    }\n    //this.rsp = reqInfo != null ? reqInfo.getRsp() : null;\n\n   \n    \n    cloudDesc = coreDesc.getCloudDescriptor();\n    \n    if (cloudDesc != null) {\n      collection = cloudDesc.getCollectionName();\n    }\n\n    cmdDistrib = new SolrCmdDistributor(numNodes);\n  }\n\n","bugFix":null,"bugIntro":["91e069c492cf4895697ef7b81df0ffb9a8bd4b48"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#DistributedUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#DistributedUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","sourceNew":"  public DistributedUpdateProcessor(SolrQueryRequest req,\n      SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    super(next);\n    this.rsp = rsp;\n    this.next = next;\n    this.idField = req.getSchema().getUniqueKeyField();\n    // version init\n\n    this.updateHandler = req.getCore().getUpdateHandler();\n    this.ulog = updateHandler.getUpdateLog();\n    this.vinfo = ulog == null ? null : ulog.getVersionInfo();\n    versionsStored = this.vinfo != null && this.vinfo.getVersionField() != null;\n    returnVersions = req.getParams().getBool(UpdateParams.VERSIONS ,false);\n\n    // TODO: better way to get the response, or pass back info to it?\n    SolrRequestInfo reqInfo = returnVersions ? SolrRequestInfo.getRequestInfo() : null;\n\n    this.req = req;\n    \n    CoreDescriptor coreDesc = req.getCore().getCoreDescriptor();\n    \n    this.zkEnabled  = coreDesc.getCoreContainer().isZooKeeperAware();\n    zkController = req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n    if (zkEnabled) {\n      numNodes =  zkController.getZkStateReader().getClusterState().getLiveNodes().size();\n    }\n    //this.rsp = reqInfo != null ? reqInfo.getRsp() : null;\n\n   \n    \n    cloudDesc = coreDesc.getCloudDescriptor();\n    \n    if (cloudDesc != null) {\n      collection = cloudDesc.getCollectionName();\n    }\n\n    cmdDistrib = new SolrCmdDistributor(numNodes);\n  }\n\n","sourceOld":"  public DistributedUpdateProcessor(SolrQueryRequest req,\n      SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    super(next);\n    this.rsp = rsp;\n    this.next = next;\n    this.idField = req.getSchema().getUniqueKeyField();\n    // version init\n\n    this.updateHandler = req.getCore().getUpdateHandler();\n    this.ulog = updateHandler.getUpdateLog();\n    this.vinfo = ulog == null ? null : ulog.getVersionInfo();\n    versionsStored = this.vinfo != null && this.vinfo.getVersionField() != null;\n    returnVersions = req.getParams().getBool(UpdateParams.VERSIONS ,false);\n\n    // TODO: better way to get the response, or pass back info to it?\n    SolrRequestInfo reqInfo = returnVersions ? SolrRequestInfo.getRequestInfo() : null;\n\n    this.req = req;\n    \n    CoreDescriptor coreDesc = req.getCore().getCoreDescriptor();\n    \n    this.zkEnabled  = coreDesc.getCoreContainer().isZooKeeperAware();\n    //this.rsp = reqInfo != null ? reqInfo.getRsp() : null;\n\n    \n    zkController = req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n    \n    cloudDesc = coreDesc.getCloudDescriptor();\n    \n    if (cloudDesc != null) {\n      collection = cloudDesc.getCollectionName();\n    }\n    \n    cmdDistrib = new SolrCmdDistributor(numNodes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#DistributedUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#DistributedUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","sourceNew":"  public DistributedUpdateProcessor(SolrQueryRequest req,\n      SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    super(next);\n    this.rsp = rsp;\n    this.next = next;\n    this.idField = req.getSchema().getUniqueKeyField();\n    // version init\n\n    this.updateHandler = req.getCore().getUpdateHandler();\n    this.ulog = updateHandler.getUpdateLog();\n    this.vinfo = ulog == null ? null : ulog.getVersionInfo();\n    versionsStored = this.vinfo != null && this.vinfo.getVersionField() != null;\n    returnVersions = req.getParams().getBool(UpdateParams.VERSIONS ,false);\n\n    // TODO: better way to get the response, or pass back info to it?\n    SolrRequestInfo reqInfo = returnVersions ? SolrRequestInfo.getRequestInfo() : null;\n\n    this.req = req;\n    \n    CoreDescriptor coreDesc = req.getCore().getCoreDescriptor();\n    \n    this.zkEnabled  = coreDesc.getCoreContainer().isZooKeeperAware();\n    zkController = req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n    if (zkEnabled) {\n      numNodes =  zkController.getZkStateReader().getClusterState().getLiveNodes().size();\n    }\n    //this.rsp = reqInfo != null ? reqInfo.getRsp() : null;\n\n   \n    \n    cloudDesc = coreDesc.getCloudDescriptor();\n    \n    if (cloudDesc != null) {\n      collection = cloudDesc.getCollectionName();\n    }\n\n    cmdDistrib = new SolrCmdDistributor(numNodes);\n  }\n\n","sourceOld":"  public DistributedUpdateProcessor(SolrQueryRequest req,\n      SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    super(next);\n    this.rsp = rsp;\n    this.next = next;\n    this.idField = req.getSchema().getUniqueKeyField();\n    // version init\n\n    this.updateHandler = req.getCore().getUpdateHandler();\n    this.ulog = updateHandler.getUpdateLog();\n    this.vinfo = ulog == null ? null : ulog.getVersionInfo();\n    versionsStored = this.vinfo != null && this.vinfo.getVersionField() != null;\n    returnVersions = req.getParams().getBool(UpdateParams.VERSIONS ,false);\n\n    // TODO: better way to get the response, or pass back info to it?\n    SolrRequestInfo reqInfo = returnVersions ? SolrRequestInfo.getRequestInfo() : null;\n\n    this.req = req;\n    \n    CoreDescriptor coreDesc = req.getCore().getCoreDescriptor();\n    \n    this.zkEnabled  = coreDesc.getCoreContainer().isZooKeeperAware();\n    //this.rsp = reqInfo != null ? reqInfo.getRsp() : null;\n\n    \n    zkController = req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n    \n    cloudDesc = coreDesc.getCloudDescriptor();\n    \n    if (cloudDesc != null) {\n      collection = cloudDesc.getCollectionName();\n    }\n    \n    cmdDistrib = new SolrCmdDistributor(numNodes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6","date":1346692465,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#DistributedUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#DistributedUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","sourceNew":"  public DistributedUpdateProcessor(SolrQueryRequest req,\n      SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    super(next);\n    this.rsp = rsp;\n    this.next = next;\n    this.idField = req.getSchema().getUniqueKeyField();\n    // version init\n\n    this.updateHandler = req.getCore().getUpdateHandler();\n    this.ulog = updateHandler.getUpdateLog();\n    this.vinfo = ulog == null ? null : ulog.getVersionInfo();\n    versionsStored = this.vinfo != null && this.vinfo.getVersionField() != null;\n    returnVersions = req.getParams().getBool(UpdateParams.VERSIONS ,false);\n\n    // TODO: better way to get the response, or pass back info to it?\n    SolrRequestInfo reqInfo = returnVersions ? SolrRequestInfo.getRequestInfo() : null;\n\n    this.req = req;\n    \n    CoreDescriptor coreDesc = req.getCore().getCoreDescriptor();\n    \n    this.zkEnabled  = coreDesc.getCoreContainer().isZooKeeperAware();\n    zkController = req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n    if (zkEnabled) {\n      numNodes =  zkController.getZkStateReader().getClusterState().getLiveNodes().size();\n    }\n    //this.rsp = reqInfo != null ? reqInfo.getRsp() : null;\n\n    cloudDesc = coreDesc.getCloudDescriptor();\n    \n    if (cloudDesc != null) {\n      collection = cloudDesc.getCollectionName();\n    }\n\n    cmdDistrib = new SolrCmdDistributor(numNodes, coreDesc.getCoreContainer().getCmdDistribExecutor());\n  }\n\n","sourceOld":"  public DistributedUpdateProcessor(SolrQueryRequest req,\n      SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    super(next);\n    this.rsp = rsp;\n    this.next = next;\n    this.idField = req.getSchema().getUniqueKeyField();\n    // version init\n\n    this.updateHandler = req.getCore().getUpdateHandler();\n    this.ulog = updateHandler.getUpdateLog();\n    this.vinfo = ulog == null ? null : ulog.getVersionInfo();\n    versionsStored = this.vinfo != null && this.vinfo.getVersionField() != null;\n    returnVersions = req.getParams().getBool(UpdateParams.VERSIONS ,false);\n\n    // TODO: better way to get the response, or pass back info to it?\n    SolrRequestInfo reqInfo = returnVersions ? SolrRequestInfo.getRequestInfo() : null;\n\n    this.req = req;\n    \n    CoreDescriptor coreDesc = req.getCore().getCoreDescriptor();\n    \n    this.zkEnabled  = coreDesc.getCoreContainer().isZooKeeperAware();\n    zkController = req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n    if (zkEnabled) {\n      numNodes =  zkController.getZkStateReader().getClusterState().getLiveNodes().size();\n    }\n    //this.rsp = reqInfo != null ? reqInfo.getRsp() : null;\n\n   \n    \n    cloudDesc = coreDesc.getCloudDescriptor();\n    \n    if (cloudDesc != null) {\n      collection = cloudDesc.getCollectionName();\n    }\n\n    cmdDistrib = new SolrCmdDistributor(numNodes);\n  }\n\n","bugFix":null,"bugIntro":["a6378064655e76cd7b908b1cab4ce425b384b508"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6378064655e76cd7b908b1cab4ce425b384b508","date":1347656715,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#DistributedUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#DistributedUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","sourceNew":"  public DistributedUpdateProcessor(SolrQueryRequest req,\n      SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    super(next);\n    this.rsp = rsp;\n    this.next = next;\n    this.idField = req.getSchema().getUniqueKeyField();\n    // version init\n\n    this.updateHandler = req.getCore().getUpdateHandler();\n    this.ulog = updateHandler.getUpdateLog();\n    this.vinfo = ulog == null ? null : ulog.getVersionInfo();\n    versionsStored = this.vinfo != null && this.vinfo.getVersionField() != null;\n    returnVersions = req.getParams().getBool(UpdateParams.VERSIONS ,false);\n\n    // TODO: better way to get the response, or pass back info to it?\n    SolrRequestInfo reqInfo = returnVersions ? SolrRequestInfo.getRequestInfo() : null;\n\n    this.req = req;\n    \n    CoreDescriptor coreDesc = req.getCore().getCoreDescriptor();\n    \n    this.zkEnabled  = coreDesc.getCoreContainer().isZooKeeperAware();\n    zkController = req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n    if (zkEnabled) {\n      numNodes =  zkController.getZkStateReader().getClusterState().getLiveNodes().size();\n      cmdDistrib = new SolrCmdDistributor(numNodes, coreDesc.getCoreContainer().getZkController().getCmdDistribExecutor());\n    }\n    //this.rsp = reqInfo != null ? reqInfo.getRsp() : null;\n\n    cloudDesc = coreDesc.getCloudDescriptor();\n    \n    if (cloudDesc != null) {\n      collection = cloudDesc.getCollectionName();\n    }\n  }\n\n","sourceOld":"  public DistributedUpdateProcessor(SolrQueryRequest req,\n      SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    super(next);\n    this.rsp = rsp;\n    this.next = next;\n    this.idField = req.getSchema().getUniqueKeyField();\n    // version init\n\n    this.updateHandler = req.getCore().getUpdateHandler();\n    this.ulog = updateHandler.getUpdateLog();\n    this.vinfo = ulog == null ? null : ulog.getVersionInfo();\n    versionsStored = this.vinfo != null && this.vinfo.getVersionField() != null;\n    returnVersions = req.getParams().getBool(UpdateParams.VERSIONS ,false);\n\n    // TODO: better way to get the response, or pass back info to it?\n    SolrRequestInfo reqInfo = returnVersions ? SolrRequestInfo.getRequestInfo() : null;\n\n    this.req = req;\n    \n    CoreDescriptor coreDesc = req.getCore().getCoreDescriptor();\n    \n    this.zkEnabled  = coreDesc.getCoreContainer().isZooKeeperAware();\n    zkController = req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n    if (zkEnabled) {\n      numNodes =  zkController.getZkStateReader().getClusterState().getLiveNodes().size();\n    }\n    //this.rsp = reqInfo != null ? reqInfo.getRsp() : null;\n\n    cloudDesc = coreDesc.getCloudDescriptor();\n    \n    if (cloudDesc != null) {\n      collection = cloudDesc.getCollectionName();\n    }\n\n    cmdDistrib = new SolrCmdDistributor(numNodes, coreDesc.getCoreContainer().getCmdDistribExecutor());\n  }\n\n","bugFix":["7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6","82c24640e6ecba75f717cf7af96903ab8e4530ef"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a69439d0df009e0bb0038d1e427159f449dd670d","date":1355704683,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#DistributedUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#DistributedUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","sourceNew":"  public DistributedUpdateProcessor(SolrQueryRequest req,\n      SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    super(next);\n    this.rsp = rsp;\n    this.next = next;\n    this.idField = req.getSchema().getUniqueKeyField();\n    // version init\n\n    this.updateHandler = req.getCore().getUpdateHandler();\n    this.ulog = updateHandler.getUpdateLog();\n    this.vinfo = ulog == null ? null : ulog.getVersionInfo();\n    versionsStored = this.vinfo != null && this.vinfo.getVersionField() != null;\n    returnVersions = req.getParams().getBool(UpdateParams.VERSIONS ,false);\n\n    // TODO: better way to get the response, or pass back info to it?\n    SolrRequestInfo reqInfo = returnVersions ? SolrRequestInfo.getRequestInfo() : null;\n\n    this.req = req;\n    \n    CoreDescriptor coreDesc = req.getCore().getCoreDescriptor();\n    \n    this.zkEnabled  = coreDesc.getCoreContainer().isZooKeeperAware();\n    zkController = req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n    if (zkEnabled) {\n      numNodes =  zkController.getZkStateReader().getClusterState().getLiveNodes().size();\n      cmdDistrib = new SolrCmdDistributor(numNodes, coreDesc.getCoreContainer().getZkController().getUpdateShardHandler());\n    }\n    //this.rsp = reqInfo != null ? reqInfo.getRsp() : null;\n\n    cloudDesc = coreDesc.getCloudDescriptor();\n    \n    if (cloudDesc != null) {\n      collection = cloudDesc.getCollectionName();\n    }\n  }\n\n","sourceOld":"  public DistributedUpdateProcessor(SolrQueryRequest req,\n      SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    super(next);\n    this.rsp = rsp;\n    this.next = next;\n    this.idField = req.getSchema().getUniqueKeyField();\n    // version init\n\n    this.updateHandler = req.getCore().getUpdateHandler();\n    this.ulog = updateHandler.getUpdateLog();\n    this.vinfo = ulog == null ? null : ulog.getVersionInfo();\n    versionsStored = this.vinfo != null && this.vinfo.getVersionField() != null;\n    returnVersions = req.getParams().getBool(UpdateParams.VERSIONS ,false);\n\n    // TODO: better way to get the response, or pass back info to it?\n    SolrRequestInfo reqInfo = returnVersions ? SolrRequestInfo.getRequestInfo() : null;\n\n    this.req = req;\n    \n    CoreDescriptor coreDesc = req.getCore().getCoreDescriptor();\n    \n    this.zkEnabled  = coreDesc.getCoreContainer().isZooKeeperAware();\n    zkController = req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n    if (zkEnabled) {\n      numNodes =  zkController.getZkStateReader().getClusterState().getLiveNodes().size();\n      cmdDistrib = new SolrCmdDistributor(numNodes, coreDesc.getCoreContainer().getZkController().getCmdDistribExecutor());\n    }\n    //this.rsp = reqInfo != null ? reqInfo.getRsp() : null;\n\n    cloudDesc = coreDesc.getCloudDescriptor();\n    \n    if (cloudDesc != null) {\n      collection = cloudDesc.getCollectionName();\n    }\n  }\n\n","bugFix":null,"bugIntro":["91e069c492cf4895697ef7b81df0ffb9a8bd4b48"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#DistributedUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#DistributedUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","sourceNew":"  public DistributedUpdateProcessor(SolrQueryRequest req,\n      SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    super(next);\n    this.rsp = rsp;\n    this.next = next;\n    this.idField = req.getSchema().getUniqueKeyField();\n    // version init\n\n    this.updateHandler = req.getCore().getUpdateHandler();\n    this.ulog = updateHandler.getUpdateLog();\n    this.vinfo = ulog == null ? null : ulog.getVersionInfo();\n    versionsStored = this.vinfo != null && this.vinfo.getVersionField() != null;\n    returnVersions = req.getParams().getBool(UpdateParams.VERSIONS ,false);\n\n    // TODO: better way to get the response, or pass back info to it?\n    SolrRequestInfo reqInfo = returnVersions ? SolrRequestInfo.getRequestInfo() : null;\n\n    this.req = req;\n    \n    CoreDescriptor coreDesc = req.getCore().getCoreDescriptor();\n    \n    this.zkEnabled  = coreDesc.getCoreContainer().isZooKeeperAware();\n    zkController = req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n    if (zkEnabled) {\n      numNodes =  zkController.getZkStateReader().getClusterState().getLiveNodes().size();\n      cmdDistrib = new SolrCmdDistributor(numNodes, coreDesc.getCoreContainer().getZkController().getUpdateShardHandler());\n    }\n    //this.rsp = reqInfo != null ? reqInfo.getRsp() : null;\n\n    cloudDesc = coreDesc.getCloudDescriptor();\n    \n    if (cloudDesc != null) {\n      collection = cloudDesc.getCollectionName();\n    }\n  }\n\n","sourceOld":"  public DistributedUpdateProcessor(SolrQueryRequest req,\n      SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    super(next);\n    this.rsp = rsp;\n    this.next = next;\n    this.idField = req.getSchema().getUniqueKeyField();\n    // version init\n\n    this.updateHandler = req.getCore().getUpdateHandler();\n    this.ulog = updateHandler.getUpdateLog();\n    this.vinfo = ulog == null ? null : ulog.getVersionInfo();\n    versionsStored = this.vinfo != null && this.vinfo.getVersionField() != null;\n    returnVersions = req.getParams().getBool(UpdateParams.VERSIONS ,false);\n\n    // TODO: better way to get the response, or pass back info to it?\n    SolrRequestInfo reqInfo = returnVersions ? SolrRequestInfo.getRequestInfo() : null;\n\n    this.req = req;\n    \n    CoreDescriptor coreDesc = req.getCore().getCoreDescriptor();\n    \n    this.zkEnabled  = coreDesc.getCoreContainer().isZooKeeperAware();\n    zkController = req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n    if (zkEnabled) {\n      numNodes =  zkController.getZkStateReader().getClusterState().getLiveNodes().size();\n      cmdDistrib = new SolrCmdDistributor(numNodes, coreDesc.getCoreContainer().getZkController().getCmdDistribExecutor());\n    }\n    //this.rsp = reqInfo != null ? reqInfo.getRsp() : null;\n\n    cloudDesc = coreDesc.getCloudDescriptor();\n    \n    if (cloudDesc != null) {\n      collection = cloudDesc.getCollectionName();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91e069c492cf4895697ef7b81df0ffb9a8bd4b48","date":1382134253,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#DistributedUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#DistributedUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","sourceNew":"  public DistributedUpdateProcessor(SolrQueryRequest req,\n      SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    super(next);\n    this.rsp = rsp;\n    this.next = next;\n    this.idField = req.getSchema().getUniqueKeyField();\n    // version init\n\n    this.updateHandler = req.getCore().getUpdateHandler();\n    this.ulog = updateHandler.getUpdateLog();\n    this.vinfo = ulog == null ? null : ulog.getVersionInfo();\n    versionsStored = this.vinfo != null && this.vinfo.getVersionField() != null;\n    returnVersions = req.getParams().getBool(UpdateParams.VERSIONS ,false);\n\n    // TODO: better way to get the response, or pass back info to it?\n    SolrRequestInfo reqInfo = returnVersions ? SolrRequestInfo.getRequestInfo() : null;\n\n    this.req = req;\n    \n    CoreDescriptor coreDesc = req.getCore().getCoreDescriptor();\n    \n    this.zkEnabled  = coreDesc.getCoreContainer().isZooKeeperAware();\n    zkController = req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n    if (zkEnabled) {\n      cmdDistrib = new SolrCmdDistributor(coreDesc.getCoreContainer().getUpdateExecutor());\n    }\n    //this.rsp = reqInfo != null ? reqInfo.getRsp() : null;\n\n    cloudDesc = coreDesc.getCloudDescriptor();\n    \n    if (cloudDesc != null) {\n      collection = cloudDesc.getCollectionName();\n    }\n  }\n\n","sourceOld":"  public DistributedUpdateProcessor(SolrQueryRequest req,\n      SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    super(next);\n    this.rsp = rsp;\n    this.next = next;\n    this.idField = req.getSchema().getUniqueKeyField();\n    // version init\n\n    this.updateHandler = req.getCore().getUpdateHandler();\n    this.ulog = updateHandler.getUpdateLog();\n    this.vinfo = ulog == null ? null : ulog.getVersionInfo();\n    versionsStored = this.vinfo != null && this.vinfo.getVersionField() != null;\n    returnVersions = req.getParams().getBool(UpdateParams.VERSIONS ,false);\n\n    // TODO: better way to get the response, or pass back info to it?\n    SolrRequestInfo reqInfo = returnVersions ? SolrRequestInfo.getRequestInfo() : null;\n\n    this.req = req;\n    \n    CoreDescriptor coreDesc = req.getCore().getCoreDescriptor();\n    \n    this.zkEnabled  = coreDesc.getCoreContainer().isZooKeeperAware();\n    zkController = req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n    if (zkEnabled) {\n      numNodes =  zkController.getZkStateReader().getClusterState().getLiveNodes().size();\n      cmdDistrib = new SolrCmdDistributor(numNodes, coreDesc.getCoreContainer().getZkController().getUpdateShardHandler());\n    }\n    //this.rsp = reqInfo != null ? reqInfo.getRsp() : null;\n\n    cloudDesc = coreDesc.getCloudDescriptor();\n    \n    if (cloudDesc != null) {\n      collection = cloudDesc.getCollectionName();\n    }\n  }\n\n","bugFix":["3f767f8c99eaedb984df754fe61f21c5de260f94","a69439d0df009e0bb0038d1e427159f449dd670d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"677676f8b2da1378ca646add0b9862033c912d0b","date":1382308296,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#DistributedUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#DistributedUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","sourceNew":"  public DistributedUpdateProcessor(SolrQueryRequest req,\n      SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    super(next);\n    this.rsp = rsp;\n    this.next = next;\n    this.idField = req.getSchema().getUniqueKeyField();\n    // version init\n\n    this.updateHandler = req.getCore().getUpdateHandler();\n    this.ulog = updateHandler.getUpdateLog();\n    this.vinfo = ulog == null ? null : ulog.getVersionInfo();\n    versionsStored = this.vinfo != null && this.vinfo.getVersionField() != null;\n    returnVersions = req.getParams().getBool(UpdateParams.VERSIONS ,false);\n\n    // TODO: better way to get the response, or pass back info to it?\n    SolrRequestInfo reqInfo = returnVersions ? SolrRequestInfo.getRequestInfo() : null;\n\n    this.req = req;\n    \n    CoreDescriptor coreDesc = req.getCore().getCoreDescriptor();\n    \n    this.zkEnabled  = coreDesc.getCoreContainer().isZooKeeperAware();\n    zkController = req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n    if (zkEnabled) {\n      cmdDistrib = new SolrCmdDistributor(coreDesc.getCoreContainer().getUpdateExecutor());\n    }\n    //this.rsp = reqInfo != null ? reqInfo.getRsp() : null;\n\n    cloudDesc = coreDesc.getCloudDescriptor();\n    \n    if (cloudDesc != null) {\n      collection = cloudDesc.getCollectionName();\n    }\n\n  }\n\n","sourceOld":"  public DistributedUpdateProcessor(SolrQueryRequest req,\n      SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    super(next);\n    this.rsp = rsp;\n    this.next = next;\n    this.idField = req.getSchema().getUniqueKeyField();\n    // version init\n\n    this.updateHandler = req.getCore().getUpdateHandler();\n    this.ulog = updateHandler.getUpdateLog();\n    this.vinfo = ulog == null ? null : ulog.getVersionInfo();\n    versionsStored = this.vinfo != null && this.vinfo.getVersionField() != null;\n    returnVersions = req.getParams().getBool(UpdateParams.VERSIONS ,false);\n\n    // TODO: better way to get the response, or pass back info to it?\n    SolrRequestInfo reqInfo = returnVersions ? SolrRequestInfo.getRequestInfo() : null;\n\n    this.req = req;\n    \n    CoreDescriptor coreDesc = req.getCore().getCoreDescriptor();\n    \n    this.zkEnabled  = coreDesc.getCoreContainer().isZooKeeperAware();\n    zkController = req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n    if (zkEnabled) {\n      cmdDistrib = new SolrCmdDistributor(coreDesc.getCoreContainer().getUpdateExecutor());\n    }\n    //this.rsp = reqInfo != null ? reqInfo.getRsp() : null;\n\n    cloudDesc = coreDesc.getCloudDescriptor();\n    \n    if (cloudDesc != null) {\n      collection = cloudDesc.getCollectionName();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7035935aa89f6951286e9005cbeb16e89a082a2","date":1385258396,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#DistributedUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#DistributedUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","sourceNew":"  public DistributedUpdateProcessor(SolrQueryRequest req,\n      SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    super(next);\n    this.rsp = rsp;\n    this.next = next;\n    this.idField = req.getSchema().getUniqueKeyField();\n    // version init\n\n    this.updateHandler = req.getCore().getUpdateHandler();\n    this.ulog = updateHandler.getUpdateLog();\n    this.vinfo = ulog == null ? null : ulog.getVersionInfo();\n    versionsStored = this.vinfo != null && this.vinfo.getVersionField() != null;\n    returnVersions = req.getParams().getBool(UpdateParams.VERSIONS ,false);\n\n    // TODO: better way to get the response, or pass back info to it?\n    SolrRequestInfo reqInfo = returnVersions ? SolrRequestInfo.getRequestInfo() : null;\n\n    this.req = req;\n    \n    CoreDescriptor coreDesc = req.getCore().getCoreDescriptor();\n    \n    this.zkEnabled  = coreDesc.getCoreContainer().isZooKeeperAware();\n    zkController = req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n    if (zkEnabled) {\n      cmdDistrib = new SolrCmdDistributor(coreDesc.getCoreContainer().getUpdateShardHandler());\n    }\n    //this.rsp = reqInfo != null ? reqInfo.getRsp() : null;\n\n    cloudDesc = coreDesc.getCloudDescriptor();\n    \n    if (cloudDesc != null) {\n      collection = cloudDesc.getCollectionName();\n    }\n\n  }\n\n","sourceOld":"  public DistributedUpdateProcessor(SolrQueryRequest req,\n      SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    super(next);\n    this.rsp = rsp;\n    this.next = next;\n    this.idField = req.getSchema().getUniqueKeyField();\n    // version init\n\n    this.updateHandler = req.getCore().getUpdateHandler();\n    this.ulog = updateHandler.getUpdateLog();\n    this.vinfo = ulog == null ? null : ulog.getVersionInfo();\n    versionsStored = this.vinfo != null && this.vinfo.getVersionField() != null;\n    returnVersions = req.getParams().getBool(UpdateParams.VERSIONS ,false);\n\n    // TODO: better way to get the response, or pass back info to it?\n    SolrRequestInfo reqInfo = returnVersions ? SolrRequestInfo.getRequestInfo() : null;\n\n    this.req = req;\n    \n    CoreDescriptor coreDesc = req.getCore().getCoreDescriptor();\n    \n    this.zkEnabled  = coreDesc.getCoreContainer().isZooKeeperAware();\n    zkController = req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n    if (zkEnabled) {\n      cmdDistrib = new SolrCmdDistributor(coreDesc.getCoreContainer().getUpdateExecutor());\n    }\n    //this.rsp = reqInfo != null ? reqInfo.getRsp() : null;\n\n    cloudDesc = coreDesc.getCloudDescriptor();\n    \n    if (cloudDesc != null) {\n      collection = cloudDesc.getCollectionName();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#DistributedUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#DistributedUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","sourceNew":"  public DistributedUpdateProcessor(SolrQueryRequest req,\n      SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    super(next);\n    this.rsp = rsp;\n    this.next = next;\n    this.idField = req.getSchema().getUniqueKeyField();\n    // version init\n\n    this.updateHandler = req.getCore().getUpdateHandler();\n    this.ulog = updateHandler.getUpdateLog();\n    this.vinfo = ulog == null ? null : ulog.getVersionInfo();\n    versionsStored = this.vinfo != null && this.vinfo.getVersionField() != null;\n    returnVersions = req.getParams().getBool(UpdateParams.VERSIONS ,false);\n\n    // TODO: better way to get the response, or pass back info to it?\n    SolrRequestInfo reqInfo = returnVersions ? SolrRequestInfo.getRequestInfo() : null;\n\n    this.req = req;\n    \n    CoreDescriptor coreDesc = req.getCore().getCoreDescriptor();\n    \n    this.zkEnabled  = coreDesc.getCoreContainer().isZooKeeperAware();\n    zkController = req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n    if (zkEnabled) {\n      cmdDistrib = new SolrCmdDistributor(coreDesc.getCoreContainer().getUpdateShardHandler());\n    }\n    //this.rsp = reqInfo != null ? reqInfo.getRsp() : null;\n\n    cloudDesc = coreDesc.getCloudDescriptor();\n    \n    if (cloudDesc != null) {\n      collection = cloudDesc.getCollectionName();\n    }\n\n  }\n\n","sourceOld":"  public DistributedUpdateProcessor(SolrQueryRequest req,\n      SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    super(next);\n    this.rsp = rsp;\n    this.next = next;\n    this.idField = req.getSchema().getUniqueKeyField();\n    // version init\n\n    this.updateHandler = req.getCore().getUpdateHandler();\n    this.ulog = updateHandler.getUpdateLog();\n    this.vinfo = ulog == null ? null : ulog.getVersionInfo();\n    versionsStored = this.vinfo != null && this.vinfo.getVersionField() != null;\n    returnVersions = req.getParams().getBool(UpdateParams.VERSIONS ,false);\n\n    // TODO: better way to get the response, or pass back info to it?\n    SolrRequestInfo reqInfo = returnVersions ? SolrRequestInfo.getRequestInfo() : null;\n\n    this.req = req;\n    \n    CoreDescriptor coreDesc = req.getCore().getCoreDescriptor();\n    \n    this.zkEnabled  = coreDesc.getCoreContainer().isZooKeeperAware();\n    zkController = req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n    if (zkEnabled) {\n      cmdDistrib = new SolrCmdDistributor(coreDesc.getCoreContainer().getUpdateExecutor());\n    }\n    //this.rsp = reqInfo != null ? reqInfo.getRsp() : null;\n\n    cloudDesc = coreDesc.getCloudDescriptor();\n    \n    if (cloudDesc != null) {\n      collection = cloudDesc.getCollectionName();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f264dc5db69d2c5c548e800516f98687049ebd1","date":1389923321,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#DistributedUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#DistributedUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","sourceNew":"  public DistributedUpdateProcessor(SolrQueryRequest req,\n      SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    super(next);\n    this.rsp = rsp;\n    this.next = next;\n    this.idField = req.getSchema().getUniqueKeyField();\n    // version init\n\n    this.updateHandler = req.getCore().getUpdateHandler();\n    this.ulog = updateHandler.getUpdateLog();\n    this.vinfo = ulog == null ? null : ulog.getVersionInfo();\n    versionsStored = this.vinfo != null && this.vinfo.getVersionField() != null;\n    returnVersions = req.getParams().getBool(UpdateParams.VERSIONS ,false);\n\n    // TODO: better way to get the response, or pass back info to it?\n    SolrRequestInfo reqInfo = returnVersions ? SolrRequestInfo.getRequestInfo() : null;\n\n    this.req = req;\n    \n    CoreDescriptor coreDesc = req.getCore().getCoreDescriptor();\n    \n    this.zkEnabled  = coreDesc.getCoreContainer().isZooKeeperAware();\n    zkController = req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n    if (zkEnabled) {\n      cmdDistrib = new SolrCmdDistributor(coreDesc.getCoreContainer().getUpdateShardHandler());\n    }\n    //this.rsp = reqInfo != null ? reqInfo.getRsp() : null;\n\n    cloudDesc = coreDesc.getCloudDescriptor();\n    \n    if (cloudDesc != null) {\n      collection = cloudDesc.getCollectionName();\n    } else {\n      collection = null;\n    }\n\n  }\n\n","sourceOld":"  public DistributedUpdateProcessor(SolrQueryRequest req,\n      SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    super(next);\n    this.rsp = rsp;\n    this.next = next;\n    this.idField = req.getSchema().getUniqueKeyField();\n    // version init\n\n    this.updateHandler = req.getCore().getUpdateHandler();\n    this.ulog = updateHandler.getUpdateLog();\n    this.vinfo = ulog == null ? null : ulog.getVersionInfo();\n    versionsStored = this.vinfo != null && this.vinfo.getVersionField() != null;\n    returnVersions = req.getParams().getBool(UpdateParams.VERSIONS ,false);\n\n    // TODO: better way to get the response, or pass back info to it?\n    SolrRequestInfo reqInfo = returnVersions ? SolrRequestInfo.getRequestInfo() : null;\n\n    this.req = req;\n    \n    CoreDescriptor coreDesc = req.getCore().getCoreDescriptor();\n    \n    this.zkEnabled  = coreDesc.getCoreContainer().isZooKeeperAware();\n    zkController = req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n    if (zkEnabled) {\n      cmdDistrib = new SolrCmdDistributor(coreDesc.getCoreContainer().getUpdateShardHandler());\n    }\n    //this.rsp = reqInfo != null ? reqInfo.getRsp() : null;\n\n    cloudDesc = coreDesc.getCloudDescriptor();\n    \n    if (cloudDesc != null) {\n      collection = cloudDesc.getCollectionName();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d3b450958a83a29a16e492fbff9d094a9a571b6","date":1421525067,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#DistributedUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#DistributedUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","sourceNew":"  public DistributedUpdateProcessor(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    this(req, rsp, new AtomicUpdateDocumentMerger(req), next);\n  }\n\n","sourceOld":"  public DistributedUpdateProcessor(SolrQueryRequest req,\n      SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    super(next);\n    this.rsp = rsp;\n    this.next = next;\n    this.idField = req.getSchema().getUniqueKeyField();\n    // version init\n\n    this.updateHandler = req.getCore().getUpdateHandler();\n    this.ulog = updateHandler.getUpdateLog();\n    this.vinfo = ulog == null ? null : ulog.getVersionInfo();\n    versionsStored = this.vinfo != null && this.vinfo.getVersionField() != null;\n    returnVersions = req.getParams().getBool(UpdateParams.VERSIONS ,false);\n\n    // TODO: better way to get the response, or pass back info to it?\n    SolrRequestInfo reqInfo = returnVersions ? SolrRequestInfo.getRequestInfo() : null;\n\n    this.req = req;\n    \n    CoreDescriptor coreDesc = req.getCore().getCoreDescriptor();\n    \n    this.zkEnabled  = coreDesc.getCoreContainer().isZooKeeperAware();\n    zkController = req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n    if (zkEnabled) {\n      cmdDistrib = new SolrCmdDistributor(coreDesc.getCoreContainer().getUpdateShardHandler());\n    }\n    //this.rsp = reqInfo != null ? reqInfo.getRsp() : null;\n\n    cloudDesc = coreDesc.getCloudDescriptor();\n    \n    if (cloudDesc != null) {\n      collection = cloudDesc.getCollectionName();\n    } else {\n      collection = null;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d70e774cb25c8a8d2c3e5e84200f235f9168d87","date":1553016391,"type":3,"author":"Bar Rotstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#DistributedUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#DistributedUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","sourceNew":"  public DistributedUpdateProcessor(SolrQueryRequest req, SolrQueryResponse rsp,\n    UpdateRequestProcessor next) {\n    this(req, rsp, new AtomicUpdateDocumentMerger(req), next);\n  }\n\n","sourceOld":"  public DistributedUpdateProcessor(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    this(req, rsp, new AtomicUpdateDocumentMerger(req), next);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a6378064655e76cd7b908b1cab4ce425b384b508","a69439d0df009e0bb0038d1e427159f449dd670d"],"91e069c492cf4895697ef7b81df0ffb9a8bd4b48":["a69439d0df009e0bb0038d1e427159f449dd670d"],"a69439d0df009e0bb0038d1e427159f449dd670d":["a6378064655e76cd7b908b1cab4ce425b384b508"],"82c24640e6ecba75f717cf7af96903ab8e4530ef":["b8b4dc0cb506204097b6e34b962947988b60e5d0"],"908e4b72ef80ab923b96d88f2d5e1053ffe23c00":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"aba371508186796cc6151d8223a5b4e16d02e26e":["df5e4eb47076636341c2cfdc58472477477d7e96","b8b4dc0cb506204097b6e34b962947988b60e5d0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["df5e4eb47076636341c2cfdc58472477477d7e96","b8b4dc0cb506204097b6e34b962947988b60e5d0"],"b8b4dc0cb506204097b6e34b962947988b60e5d0":["df5e4eb47076636341c2cfdc58472477477d7e96"],"a7035935aa89f6951286e9005cbeb16e89a082a2":["677676f8b2da1378ca646add0b9862033c912d0b"],"7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2f264dc5db69d2c5c548e800516f98687049ebd1":["a7035935aa89f6951286e9005cbeb16e89a082a2"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","3f767f8c99eaedb984df754fe61f21c5de260f94"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["82c24640e6ecba75f717cf7af96903ab8e4530ef"],"a6378064655e76cd7b908b1cab4ce425b384b508":["7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["aba371508186796cc6151d8223a5b4e16d02e26e","3f767f8c99eaedb984df754fe61f21c5de260f94"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["677676f8b2da1378ca646add0b9862033c912d0b","a7035935aa89f6951286e9005cbeb16e89a082a2"],"677676f8b2da1378ca646add0b9862033c912d0b":["91e069c492cf4895697ef7b81df0ffb9a8bd4b48"],"2d3b450958a83a29a16e492fbff9d094a9a571b6":["2f264dc5db69d2c5c548e800516f98687049ebd1"],"df5e4eb47076636341c2cfdc58472477477d7e96":["908e4b72ef80ab923b96d88f2d5e1053ffe23c00"],"9d70e774cb25c8a8d2c3e5e84200f235f9168d87":["2d3b450958a83a29a16e492fbff9d094a9a571b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9d70e774cb25c8a8d2c3e5e84200f235f9168d87"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"a69439d0df009e0bb0038d1e427159f449dd670d":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","91e069c492cf4895697ef7b81df0ffb9a8bd4b48"],"91e069c492cf4895697ef7b81df0ffb9a8bd4b48":["677676f8b2da1378ca646add0b9862033c912d0b"],"82c24640e6ecba75f717cf7af96903ab8e4530ef":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"908e4b72ef80ab923b96d88f2d5e1053ffe23c00":["df5e4eb47076636341c2cfdc58472477477d7e96"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"aba371508186796cc6151d8223a5b4e16d02e26e":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["8fd5be977c105554c6a7b68afcdbc511439723ab"],"b8b4dc0cb506204097b6e34b962947988b60e5d0":["82c24640e6ecba75f717cf7af96903ab8e4530ef","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"a7035935aa89f6951286e9005cbeb16e89a082a2":["2f264dc5db69d2c5c548e800516f98687049ebd1","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6":["a6378064655e76cd7b908b1cab4ce425b384b508"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2f264dc5db69d2c5c548e800516f98687049ebd1":["2d3b450958a83a29a16e492fbff9d094a9a571b6"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"3f767f8c99eaedb984df754fe61f21c5de260f94":["7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6","8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"a6378064655e76cd7b908b1cab4ce425b384b508":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a69439d0df009e0bb0038d1e427159f449dd670d"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["908e4b72ef80ab923b96d88f2d5e1053ffe23c00","0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"677676f8b2da1378ca646add0b9862033c912d0b":["a7035935aa89f6951286e9005cbeb16e89a082a2","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"df5e4eb47076636341c2cfdc58472477477d7e96":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","b8b4dc0cb506204097b6e34b962947988b60e5d0"],"2d3b450958a83a29a16e492fbff9d094a9a571b6":["9d70e774cb25c8a8d2c3e5e84200f235f9168d87"],"9d70e774cb25c8a8d2c3e5e84200f235f9168d87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}