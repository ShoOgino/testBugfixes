{"path":"lucene/src/test/org/apache/lucene/index/TestByteSlices.ByteBlockAllocator#getByteBlock(boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestByteSlices.ByteBlockAllocator#getByteBlock(boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestByteSlices.ByteBlockAllocator#getByteBlock(boolean).mjava","sourceNew":"    /* Allocate another byte[] from the shared pool */\n    @Override\n    synchronized byte[] getByteBlock(boolean trackAllocations) {\n      final int size = freeByteBlocks.size();\n      final byte[] b;\n      if (0 == size)\n        b = new byte[DocumentsWriter.BYTE_BLOCK_SIZE];\n      else\n        b =  freeByteBlocks.remove(size-1);\n      return b;\n    }\n\n","sourceOld":"    /* Allocate another byte[] from the shared pool */\n    @Override\n    synchronized byte[] getByteBlock(boolean trackAllocations) {\n      final int size = freeByteBlocks.size();\n      final byte[] b;\n      if (0 == size)\n        b = new byte[DocumentsWriter.BYTE_BLOCK_SIZE];\n      else\n        b =  freeByteBlocks.remove(size-1);\n      return b;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8dfd02cf03e7a1810924be21cddfdde6d265c14","date":1273590676,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestByteSlices.ByteBlockAllocator#getByteBlock().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestByteSlices.ByteBlockAllocator#getByteBlock(boolean).mjava","sourceNew":"    /* Allocate another byte[] from the shared pool */\n    @Override\n    synchronized byte[] getByteBlock() {\n      final int size = freeByteBlocks.size();\n      final byte[] b;\n      if (0 == size)\n        b = new byte[DocumentsWriter.BYTE_BLOCK_SIZE];\n      else\n        b =  freeByteBlocks.remove(size-1);\n      return b;\n    }\n\n","sourceOld":"    /* Allocate another byte[] from the shared pool */\n    @Override\n    synchronized byte[] getByteBlock(boolean trackAllocations) {\n      final int size = freeByteBlocks.size();\n      final byte[] b;\n      if (0 == size)\n        b = new byte[DocumentsWriter.BYTE_BLOCK_SIZE];\n      else\n        b =  freeByteBlocks.remove(size-1);\n      return b;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8dfd02cf03e7a1810924be21cddfdde6d265c14":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f8dfd02cf03e7a1810924be21cddfdde6d265c14"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"f8dfd02cf03e7a1810924be21cddfdde6d265c14":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f8dfd02cf03e7a1810924be21cddfdde6d265c14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}