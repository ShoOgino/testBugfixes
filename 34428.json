{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#readBinaryEntry(IndexInput).mjava","commits":[{"id":"8106bc60c7452250f84c65cdb43ab6b1d8eb1534","date":1401906364,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#readBinaryEntry(IndexInput).mjava","pathOld":"/dev/null","sourceNew":"  static BinaryEntry readBinaryEntry(IndexInput meta) throws IOException {\n    BinaryEntry entry = new BinaryEntry();\n    entry.format = meta.readVInt();\n    entry.missingOffset = meta.readLong();\n    entry.minLength = meta.readVInt();\n    entry.maxLength = meta.readVInt();\n    entry.count = meta.readVLong();\n    entry.offset = meta.readLong();\n    switch(entry.format) {\n      case BINARY_FIXED_UNCOMPRESSED:\n        break;\n      case BINARY_PREFIX_COMPRESSED:\n        entry.addressInterval = meta.readVInt();\n        entry.addressesOffset = meta.readLong();\n        entry.packedIntsVersion = meta.readVInt();\n        entry.blockSize = meta.readVInt();\n        break;\n      case BINARY_VARIABLE_UNCOMPRESSED:\n        entry.addressesOffset = meta.readLong();\n        entry.packedIntsVersion = meta.readVInt();\n        entry.blockSize = meta.readVInt();\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\" + meta);\n    }\n    return entry;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9a70ce9bddc6f985feb8e5e182aebe20872328d4","9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#readBinaryEntry(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#readBinaryEntry(IndexInput).mjava","sourceNew":"  static BinaryEntry readBinaryEntry(IndexInput meta) throws IOException {\n    BinaryEntry entry = new BinaryEntry();\n    entry.format = meta.readVInt();\n    entry.missingOffset = meta.readLong();\n    entry.minLength = meta.readVInt();\n    entry.maxLength = meta.readVInt();\n    entry.count = meta.readVLong();\n    entry.offset = meta.readLong();\n    switch(entry.format) {\n      case BINARY_FIXED_UNCOMPRESSED:\n        break;\n      case BINARY_PREFIX_COMPRESSED:\n        entry.addressInterval = meta.readVInt();\n        entry.addressesOffset = meta.readLong();\n        entry.packedIntsVersion = meta.readVInt();\n        entry.blockSize = meta.readVInt();\n        break;\n      case BINARY_VARIABLE_UNCOMPRESSED:\n        entry.addressesOffset = meta.readLong();\n        entry.packedIntsVersion = meta.readVInt();\n        entry.blockSize = meta.readVInt();\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\" + meta);\n    }\n    return entry;\n  }\n\n","sourceOld":"  static BinaryEntry readBinaryEntry(IndexInput meta) throws IOException {\n    BinaryEntry entry = new BinaryEntry();\n    entry.format = meta.readVInt();\n    entry.missingOffset = meta.readLong();\n    entry.minLength = meta.readVInt();\n    entry.maxLength = meta.readVInt();\n    entry.count = meta.readVLong();\n    entry.offset = meta.readLong();\n    switch(entry.format) {\n      case BINARY_FIXED_UNCOMPRESSED:\n        break;\n      case BINARY_PREFIX_COMPRESSED:\n        entry.addressInterval = meta.readVInt();\n        entry.addressesOffset = meta.readLong();\n        entry.packedIntsVersion = meta.readVInt();\n        entry.blockSize = meta.readVInt();\n        break;\n      case BINARY_VARIABLE_UNCOMPRESSED:\n        entry.addressesOffset = meta.readLong();\n        entry.packedIntsVersion = meta.readVInt();\n        entry.blockSize = meta.readVInt();\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\" + meta);\n    }\n    return entry;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#readBinaryEntry(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#readBinaryEntry(IndexInput).mjava","sourceNew":"  static BinaryEntry readBinaryEntry(IndexInput meta) throws IOException {\n    BinaryEntry entry = new BinaryEntry();\n    entry.format = meta.readVInt();\n    entry.missingOffset = meta.readLong();\n    entry.minLength = meta.readVInt();\n    entry.maxLength = meta.readVInt();\n    entry.count = meta.readVLong();\n    entry.offset = meta.readLong();\n    switch(entry.format) {\n      case BINARY_FIXED_UNCOMPRESSED:\n        break;\n      case BINARY_PREFIX_COMPRESSED:\n        entry.addressInterval = meta.readVInt();\n        entry.addressesOffset = meta.readLong();\n        entry.packedIntsVersion = meta.readVInt();\n        entry.blockSize = meta.readVInt();\n        break;\n      case BINARY_VARIABLE_UNCOMPRESSED:\n        entry.addressesOffset = meta.readLong();\n        entry.packedIntsVersion = meta.readVInt();\n        entry.blockSize = meta.readVInt();\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\" + meta);\n    }\n    return entry;\n  }\n\n","sourceOld":"  static BinaryEntry readBinaryEntry(IndexInput meta) throws IOException {\n    BinaryEntry entry = new BinaryEntry();\n    entry.format = meta.readVInt();\n    entry.missingOffset = meta.readLong();\n    entry.minLength = meta.readVInt();\n    entry.maxLength = meta.readVInt();\n    entry.count = meta.readVLong();\n    entry.offset = meta.readLong();\n    switch(entry.format) {\n      case BINARY_FIXED_UNCOMPRESSED:\n        break;\n      case BINARY_PREFIX_COMPRESSED:\n        entry.addressInterval = meta.readVInt();\n        entry.addressesOffset = meta.readLong();\n        entry.packedIntsVersion = meta.readVInt();\n        entry.blockSize = meta.readVInt();\n        break;\n      case BINARY_VARIABLE_UNCOMPRESSED:\n        entry.addressesOffset = meta.readLong();\n        entry.packedIntsVersion = meta.readVInt();\n        entry.blockSize = meta.readVInt();\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\" + meta);\n    }\n    return entry;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}