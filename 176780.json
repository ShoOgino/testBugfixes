{"path":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testQueryEquals().mjava","commits":[{"id":"5839bca64b33c24668e37476ee168d00dc0bb96d","date":1457536035,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testQueryEquals().mjava","pathOld":"/dev/null","sourceNew":"  public void testQueryEquals() throws Exception {\n    Query q = BigIntegerPoint.newRangeQuery(\"a\", BigInteger.valueOf(0), BigInteger.valueOf(1000));\n    assertEquals(q, BigIntegerPoint.newRangeQuery(\"a\", BigInteger.valueOf(0), BigInteger.valueOf(1000)));\n    assertFalse(q.equals(BigIntegerPoint.newRangeQuery(\"a\", BigInteger.valueOf(1), BigInteger.valueOf(1000))));\n\n    q = BigIntegerPoint.newExactQuery(\"a\", BigInteger.valueOf(1000));\n    assertEquals(q, BigIntegerPoint.newExactQuery(\"a\", BigInteger.valueOf(1000)));\n    assertFalse(q.equals(BigIntegerPoint.newExactQuery(\"a\", BigInteger.valueOf(1))));\n\n    q = BigIntegerPoint.newSetQuery(\"a\", BigInteger.valueOf(0), BigInteger.valueOf(1000), BigInteger.valueOf(17));\n    assertEquals(q, BigIntegerPoint.newSetQuery(\"a\", BigInteger.valueOf(17), BigInteger.valueOf(0), BigInteger.valueOf(1000)));\n    assertFalse(q.equals(BigIntegerPoint.newSetQuery(\"a\", BigInteger.valueOf(1), BigInteger.valueOf(17), BigInteger.valueOf(1000))));\n  }     \n\n","sourceOld":null,"bugFix":null,"bugIntro":["606ea169579957651185909e7264798e99e714f9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"606ea169579957651185909e7264798e99e714f9","date":1458504317,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testQueryEquals().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testQueryEquals().mjava","sourceNew":"  public void testQueryEquals() throws Exception {\n    Query q1 = BigIntegerPoint.newRangeQuery(\"a\", BigInteger.valueOf(0), BigInteger.valueOf(1000));\n    Query q2 = BigIntegerPoint.newRangeQuery(\"a\", BigInteger.valueOf(0), BigInteger.valueOf(1000));\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(BigIntegerPoint.newRangeQuery(\"a\", BigInteger.valueOf(1), BigInteger.valueOf(1000))));\n\n    q1 = BigIntegerPoint.newExactQuery(\"a\", BigInteger.valueOf(1000));\n    q2 = BigIntegerPoint.newExactQuery(\"a\", BigInteger.valueOf(1000));\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(BigIntegerPoint.newExactQuery(\"a\", BigInteger.valueOf(1))));\n\n    q1 = BigIntegerPoint.newSetQuery(\"a\", BigInteger.valueOf(0), BigInteger.valueOf(1000), BigInteger.valueOf(17));\n    q2 = BigIntegerPoint.newSetQuery(\"a\", BigInteger.valueOf(17), BigInteger.valueOf(0), BigInteger.valueOf(1000));\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(BigIntegerPoint.newSetQuery(\"a\", BigInteger.valueOf(1), BigInteger.valueOf(17), BigInteger.valueOf(1000))));\n  }     \n\n","sourceOld":"  public void testQueryEquals() throws Exception {\n    Query q = BigIntegerPoint.newRangeQuery(\"a\", BigInteger.valueOf(0), BigInteger.valueOf(1000));\n    assertEquals(q, BigIntegerPoint.newRangeQuery(\"a\", BigInteger.valueOf(0), BigInteger.valueOf(1000)));\n    assertFalse(q.equals(BigIntegerPoint.newRangeQuery(\"a\", BigInteger.valueOf(1), BigInteger.valueOf(1000))));\n\n    q = BigIntegerPoint.newExactQuery(\"a\", BigInteger.valueOf(1000));\n    assertEquals(q, BigIntegerPoint.newExactQuery(\"a\", BigInteger.valueOf(1000)));\n    assertFalse(q.equals(BigIntegerPoint.newExactQuery(\"a\", BigInteger.valueOf(1))));\n\n    q = BigIntegerPoint.newSetQuery(\"a\", BigInteger.valueOf(0), BigInteger.valueOf(1000), BigInteger.valueOf(17));\n    assertEquals(q, BigIntegerPoint.newSetQuery(\"a\", BigInteger.valueOf(17), BigInteger.valueOf(0), BigInteger.valueOf(1000)));\n    assertFalse(q.equals(BigIntegerPoint.newSetQuery(\"a\", BigInteger.valueOf(1), BigInteger.valueOf(17), BigInteger.valueOf(1000))));\n  }     \n\n","bugFix":["5839bca64b33c24668e37476ee168d00dc0bb96d"],"bugIntro":["d2270976e274799939e1b5339eb6c16c7601dfda"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d2270976e274799939e1b5339eb6c16c7601dfda","date":1458767534,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testQueryEquals().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testQueryEquals().mjava","sourceNew":"  public void testQueryEquals() throws Exception {\n    Query q1, q2;\n    q1 = BigIntegerPoint.newRangeQuery(\"a\", BigInteger.valueOf(0), BigInteger.valueOf(1000));\n    q2 = BigIntegerPoint.newRangeQuery(\"a\", BigInteger.valueOf(0), BigInteger.valueOf(1000));\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(BigIntegerPoint.newRangeQuery(\"a\", BigInteger.valueOf(1), BigInteger.valueOf(1000))));\n    assertFalse(q1.equals(BigIntegerPoint.newRangeQuery(\"b\", BigInteger.valueOf(0), BigInteger.valueOf(1000))));\n\n    q1 = BigIntegerPoint.newExactQuery(\"a\", BigInteger.valueOf(1000));\n    q2 = BigIntegerPoint.newExactQuery(\"a\", BigInteger.valueOf(1000));\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(BigIntegerPoint.newExactQuery(\"a\", BigInteger.valueOf(1))));\n\n    q1 = BigIntegerPoint.newSetQuery(\"a\", BigInteger.valueOf(0), BigInteger.valueOf(1000), BigInteger.valueOf(17));\n    q2 = BigIntegerPoint.newSetQuery(\"a\", BigInteger.valueOf(17), BigInteger.valueOf(0), BigInteger.valueOf(1000));\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(BigIntegerPoint.newSetQuery(\"a\", BigInteger.valueOf(1), BigInteger.valueOf(17), BigInteger.valueOf(1000))));\n  }     \n\n","sourceOld":"  public void testQueryEquals() throws Exception {\n    Query q1 = BigIntegerPoint.newRangeQuery(\"a\", BigInteger.valueOf(0), BigInteger.valueOf(1000));\n    Query q2 = BigIntegerPoint.newRangeQuery(\"a\", BigInteger.valueOf(0), BigInteger.valueOf(1000));\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(BigIntegerPoint.newRangeQuery(\"a\", BigInteger.valueOf(1), BigInteger.valueOf(1000))));\n\n    q1 = BigIntegerPoint.newExactQuery(\"a\", BigInteger.valueOf(1000));\n    q2 = BigIntegerPoint.newExactQuery(\"a\", BigInteger.valueOf(1000));\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(BigIntegerPoint.newExactQuery(\"a\", BigInteger.valueOf(1))));\n\n    q1 = BigIntegerPoint.newSetQuery(\"a\", BigInteger.valueOf(0), BigInteger.valueOf(1000), BigInteger.valueOf(17));\n    q2 = BigIntegerPoint.newSetQuery(\"a\", BigInteger.valueOf(17), BigInteger.valueOf(0), BigInteger.valueOf(1000));\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(BigIntegerPoint.newSetQuery(\"a\", BigInteger.valueOf(1), BigInteger.valueOf(17), BigInteger.valueOf(1000))));\n  }     \n\n","bugFix":["606ea169579957651185909e7264798e99e714f9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2270976e274799939e1b5339eb6c16c7601dfda":["606ea169579957651185909e7264798e99e714f9"],"5839bca64b33c24668e37476ee168d00dc0bb96d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"606ea169579957651185909e7264798e99e714f9":["5839bca64b33c24668e37476ee168d00dc0bb96d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2270976e274799939e1b5339eb6c16c7601dfda"]},"commit2Childs":{"d2270976e274799939e1b5339eb6c16c7601dfda":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5839bca64b33c24668e37476ee168d00dc0bb96d":["606ea169579957651185909e7264798e99e714f9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5839bca64b33c24668e37476ee168d00dc0bb96d"],"606ea169579957651185909e7264798e99e714f9":["d2270976e274799939e1b5339eb6c16c7601dfda"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}