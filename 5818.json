{"path":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#doTest().mjava","commits":[{"id":"eb55f624eb53f26cfb7f9614b862fb7657633358","date":1414519951,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#doTest().mjava","pathOld":"/dev/null","sourceNew":"  public void doTest() throws Exception {\n    \n    waitForRecoveriesToFinish(false);\n\n    String id = \"id\";\n    delQ(\"*:*\");\n    indexDoc(sdoc(id, \"1\", \"lowerfilt\", \"toyota\"));\n    indexDoc(sdoc(id, \"2\", \"lowerfilt\", \"chevrolet\"));\n    indexDoc(sdoc(id, \"3\", \"lowerfilt\", \"bmw usa\"));\n    indexDoc(sdoc(id, \"4\", \"lowerfilt\", \"ford\"));\n    indexDoc(sdoc(id, \"5\", \"lowerfilt\", \"ferrari\"));\n    indexDoc(sdoc(id, \"6\", \"lowerfilt\", \"jaguar\"));\n    indexDoc(sdoc(id, \"7\", \"lowerfilt\", \"mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too\"));\n    indexDoc(sdoc(id, \"8\", \"lowerfilt\", \"sonata\"));\n    indexDoc(sdoc(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy big and large brown dogs.\"));\n    indexDoc(sdoc(id, \"10\", \"lowerfilt\", \"blue\"));\n    indexDoc(sdoc(id, \"12\", \"lowerfilt\", \"glue\"));\n    indexDoc(sdoc(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"15\", \"lowerfilt\", \"The fat red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"16\", \"lowerfilt\", \"The slim red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"17\", \"lowerfilt\", \"The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon\"));\n    indexDoc(sdoc(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"19\", \"lowerfilt\", \"The hose red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"21\", \"lowerfilt\", \"The court red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"24\", \"lowerfilt\", \"The file red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"25\", \"lowerfilt\", \"rod fix\"));\n    indexDoc(sdoc(id, \"26\", \"lowerfilt\", \"bmw usa 328i\"));\n    indexDoc(sdoc(id, \"27\", \"lowerfilt\", \"bmw usa 535i\"));\n    indexDoc(sdoc(id, \"28\", \"lowerfilt\", \"bmw 750Li\"));\n\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CommonParams.Q, \"{!mlt id=17 qf=lowerfilt}\");\n    QueryResponse queryResponse = cloudClient.query(params);\n    SolrDocumentList solrDocuments = queryResponse.getResults();\n    int[] expectedIds = new int[]{17, 13, 14, 20, 22, 15, 16, 24, 18, 23};\n    int[] actualIds = new int[10];\n    int i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n    \n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt id=3 qf=lowerfilt}\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{3, 27, 26, 28};\n    actualIds = new int[4];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt id=20 qf=lowerfilt}\");\n    params.set(\"debug\" , \"query\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{18, 23, 13, 14, 20, 22, 19, 21, 15, 16};\n    actualIds = new int[10];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    String expectedQueryString = \"lowerfilt:over lowerfilt:fox lowerfilt:lazy lowerfilt:brown \"\n        + \"lowerfilt:jumped lowerfilt:red lowerfilt:dogs. lowerfilt:quote lowerfilt:the\";\n    \n    ArrayList<String> actualParsedQueries = (ArrayList<String>) queryResponse\n        .getDebugMap().get(\"parsedquery\");\n    \n    for(int counter=0; counter < actualParsedQueries.size(); counter++) {\n      assertTrue(\"Parsed queries aren't equal\",\n          compareParsedQueryStrings(expectedQueryString,\n          actualParsedQueries.get(counter)));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["19d28b1683d6453ee94a9205e2d32206d2dde868","96ff9085dd3a7ec77459ebe4c8d945e5c74168fb","655260340014c640e7d0f9a7a7ea1f00f36f65e5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d32e559c96d0c16fe041e1608a4bbbf8a6c9a4e1","date":1414624217,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#doTest().mjava","sourceNew":"  public void doTest() throws Exception {\n    \n    waitForRecoveriesToFinish(false);\n\n    String id = \"id\";\n    delQ(\"*:*\");\n    indexDoc(sdoc(id, \"1\", \"lowerfilt\", \"toyota\"));\n    indexDoc(sdoc(id, \"2\", \"lowerfilt\", \"chevrolet\"));\n    indexDoc(sdoc(id, \"3\", \"lowerfilt\", \"bmw usa\"));\n    indexDoc(sdoc(id, \"4\", \"lowerfilt\", \"ford\"));\n    indexDoc(sdoc(id, \"5\", \"lowerfilt\", \"ferrari\"));\n    indexDoc(sdoc(id, \"6\", \"lowerfilt\", \"jaguar\"));\n    indexDoc(sdoc(id, \"7\", \"lowerfilt\", \"mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too\"));\n    indexDoc(sdoc(id, \"8\", \"lowerfilt\", \"sonata\"));\n    indexDoc(sdoc(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy big and large brown dogs.\"));\n    indexDoc(sdoc(id, \"10\", \"lowerfilt\", \"blue\"));\n    indexDoc(sdoc(id, \"12\", \"lowerfilt\", \"glue\"));\n    indexDoc(sdoc(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"15\", \"lowerfilt\", \"The fat red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"16\", \"lowerfilt\", \"The slim red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"17\", \"lowerfilt\", \"The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon\"));\n    indexDoc(sdoc(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"19\", \"lowerfilt\", \"The hose red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"21\", \"lowerfilt\", \"The court red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"24\", \"lowerfilt\", \"The file red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"25\", \"lowerfilt\", \"rod fix\"));\n    indexDoc(sdoc(id, \"26\", \"lowerfilt\", \"bmw usa 328i\"));\n    indexDoc(sdoc(id, \"27\", \"lowerfilt\", \"bmw usa 535i\"));\n    indexDoc(sdoc(id, \"28\", \"lowerfilt\", \"bmw 750Li\"));\n\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}17\");\n    QueryResponse queryResponse = cloudClient.query(params);\n    SolrDocumentList solrDocuments = queryResponse.getResults();\n    int[] expectedIds = new int[]{17, 13, 14, 20, 22, 15, 16, 24, 18, 23};\n    int[] actualIds = new int[10];\n    int i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n    \n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}3\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{3, 27, 26, 28};\n    actualIds = new int[4];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}20\");\n    params.set(\"debug\" , \"query\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{18, 23, 13, 14, 20, 22, 19, 21, 15, 16};\n    actualIds = new int[10];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    String expectedQueryString = \"lowerfilt:over lowerfilt:fox lowerfilt:lazy lowerfilt:brown \"\n        + \"lowerfilt:jumped lowerfilt:red lowerfilt:dogs. lowerfilt:quote lowerfilt:the\";\n    \n    ArrayList<String> actualParsedQueries = (ArrayList<String>) queryResponse\n        .getDebugMap().get(\"parsedquery\");\n    \n    for(int counter=0; counter < actualParsedQueries.size(); counter++) {\n      assertTrue(\"Parsed queries aren't equal\",\n          compareParsedQueryStrings(expectedQueryString,\n          actualParsedQueries.get(counter)));\n    }\n  }\n\n","sourceOld":"  public void doTest() throws Exception {\n    \n    waitForRecoveriesToFinish(false);\n\n    String id = \"id\";\n    delQ(\"*:*\");\n    indexDoc(sdoc(id, \"1\", \"lowerfilt\", \"toyota\"));\n    indexDoc(sdoc(id, \"2\", \"lowerfilt\", \"chevrolet\"));\n    indexDoc(sdoc(id, \"3\", \"lowerfilt\", \"bmw usa\"));\n    indexDoc(sdoc(id, \"4\", \"lowerfilt\", \"ford\"));\n    indexDoc(sdoc(id, \"5\", \"lowerfilt\", \"ferrari\"));\n    indexDoc(sdoc(id, \"6\", \"lowerfilt\", \"jaguar\"));\n    indexDoc(sdoc(id, \"7\", \"lowerfilt\", \"mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too\"));\n    indexDoc(sdoc(id, \"8\", \"lowerfilt\", \"sonata\"));\n    indexDoc(sdoc(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy big and large brown dogs.\"));\n    indexDoc(sdoc(id, \"10\", \"lowerfilt\", \"blue\"));\n    indexDoc(sdoc(id, \"12\", \"lowerfilt\", \"glue\"));\n    indexDoc(sdoc(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"15\", \"lowerfilt\", \"The fat red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"16\", \"lowerfilt\", \"The slim red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"17\", \"lowerfilt\", \"The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon\"));\n    indexDoc(sdoc(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"19\", \"lowerfilt\", \"The hose red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"21\", \"lowerfilt\", \"The court red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"24\", \"lowerfilt\", \"The file red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"25\", \"lowerfilt\", \"rod fix\"));\n    indexDoc(sdoc(id, \"26\", \"lowerfilt\", \"bmw usa 328i\"));\n    indexDoc(sdoc(id, \"27\", \"lowerfilt\", \"bmw usa 535i\"));\n    indexDoc(sdoc(id, \"28\", \"lowerfilt\", \"bmw 750Li\"));\n\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CommonParams.Q, \"{!mlt id=17 qf=lowerfilt}\");\n    QueryResponse queryResponse = cloudClient.query(params);\n    SolrDocumentList solrDocuments = queryResponse.getResults();\n    int[] expectedIds = new int[]{17, 13, 14, 20, 22, 15, 16, 24, 18, 23};\n    int[] actualIds = new int[10];\n    int i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n    \n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt id=3 qf=lowerfilt}\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{3, 27, 26, 28};\n    actualIds = new int[4];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt id=20 qf=lowerfilt}\");\n    params.set(\"debug\" , \"query\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{18, 23, 13, 14, 20, 22, 19, 21, 15, 16};\n    actualIds = new int[10];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    String expectedQueryString = \"lowerfilt:over lowerfilt:fox lowerfilt:lazy lowerfilt:brown \"\n        + \"lowerfilt:jumped lowerfilt:red lowerfilt:dogs. lowerfilt:quote lowerfilt:the\";\n    \n    ArrayList<String> actualParsedQueries = (ArrayList<String>) queryResponse\n        .getDebugMap().get(\"parsedquery\");\n    \n    for(int counter=0; counter < actualParsedQueries.size(); counter++) {\n      assertTrue(\"Parsed queries aren't equal\",\n          compareParsedQueryStrings(expectedQueryString,\n          actualParsedQueries.get(counter)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"07d695a14a1938b01a5d4ab68b3c815eb061da94","date":1415146902,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#doTest().mjava","sourceNew":"  public void doTest() throws Exception {\n    \n    waitForRecoveriesToFinish(false);\n\n    String id = \"id\";\n    delQ(\"*:*\");\n    indexDoc(sdoc(id, \"1\", \"lowerfilt\", \"toyota\"));\n    indexDoc(sdoc(id, \"2\", \"lowerfilt\", \"chevrolet\"));\n    indexDoc(sdoc(id, \"3\", \"lowerfilt\", \"bmw usa\"));\n    indexDoc(sdoc(id, \"4\", \"lowerfilt\", \"ford\"));\n    indexDoc(sdoc(id, \"5\", \"lowerfilt\", \"ferrari\"));\n    indexDoc(sdoc(id, \"6\", \"lowerfilt\", \"jaguar\"));\n    indexDoc(sdoc(id, \"7\", \"lowerfilt\", \"mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too\"));\n    indexDoc(sdoc(id, \"8\", \"lowerfilt\", \"sonata\"));\n    indexDoc(sdoc(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy big and large brown dogs.\"));\n    indexDoc(sdoc(id, \"10\", \"lowerfilt\", \"blue\"));\n    indexDoc(sdoc(id, \"12\", \"lowerfilt\", \"glue\"));\n    indexDoc(sdoc(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"15\", \"lowerfilt\", \"The fat red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"16\", \"lowerfilt\", \"The slim red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"17\", \"lowerfilt\", \"The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon\"));\n    indexDoc(sdoc(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"19\", \"lowerfilt\", \"The hose red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"21\", \"lowerfilt\", \"The court red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"24\", \"lowerfilt\", \"The file red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"25\", \"lowerfilt\", \"rod fix\"));\n    indexDoc(sdoc(id, \"26\", \"lowerfilt\", \"bmw usa 328i\"));\n    indexDoc(sdoc(id, \"27\", \"lowerfilt\", \"bmw usa 535i\"));\n    indexDoc(sdoc(id, \"28\", \"lowerfilt\", \"bmw 750Li\"));\n\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}17\");\n    QueryResponse queryResponse = cloudClient.query(params);\n    SolrDocumentList solrDocuments = queryResponse.getResults();\n    int[] expectedIds = new int[]{17, 13, 14, 20, 22, 15, 16, 24, 18, 23};\n    int[] actualIds = new int[10];\n    int i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n    \n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}3\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{3, 27, 26, 28};\n    actualIds = new int[4];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}20\");\n    params.set(\"debug\" , \"query\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{18, 23, 13, 14, 20, 22, 19, 21, 15, 16};\n    actualIds = new int[10];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    String expectedQueryString = \"lowerfilt:over lowerfilt:fox lowerfilt:lazy lowerfilt:brown \"\n        + \"lowerfilt:jumped lowerfilt:red lowerfilt:dogs. lowerfilt:quote lowerfilt:the\";\n    \n    ArrayList<String> actualParsedQueries = (ArrayList<String>) queryResponse\n        .getDebugMap().get(\"parsedquery\");\n    \n    for(int counter=0; counter < actualParsedQueries.size(); counter++) {\n      assertTrue(\"Parsed queries aren't equal\",\n          compareParsedQueryStrings(expectedQueryString,\n          actualParsedQueries.get(counter)));\n    }\n\n    // Assert that {!mlt}id does not throw an exception i.e. implicitly, only fields that are stored + have explicit\n    // analyzer are used for MLT Query construction.\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt}20\");\n\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{18, 23, 13, 14, 20, 22, 19, 21, 15, 16};\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n  }\n\n","sourceOld":"  public void doTest() throws Exception {\n    \n    waitForRecoveriesToFinish(false);\n\n    String id = \"id\";\n    delQ(\"*:*\");\n    indexDoc(sdoc(id, \"1\", \"lowerfilt\", \"toyota\"));\n    indexDoc(sdoc(id, \"2\", \"lowerfilt\", \"chevrolet\"));\n    indexDoc(sdoc(id, \"3\", \"lowerfilt\", \"bmw usa\"));\n    indexDoc(sdoc(id, \"4\", \"lowerfilt\", \"ford\"));\n    indexDoc(sdoc(id, \"5\", \"lowerfilt\", \"ferrari\"));\n    indexDoc(sdoc(id, \"6\", \"lowerfilt\", \"jaguar\"));\n    indexDoc(sdoc(id, \"7\", \"lowerfilt\", \"mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too\"));\n    indexDoc(sdoc(id, \"8\", \"lowerfilt\", \"sonata\"));\n    indexDoc(sdoc(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy big and large brown dogs.\"));\n    indexDoc(sdoc(id, \"10\", \"lowerfilt\", \"blue\"));\n    indexDoc(sdoc(id, \"12\", \"lowerfilt\", \"glue\"));\n    indexDoc(sdoc(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"15\", \"lowerfilt\", \"The fat red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"16\", \"lowerfilt\", \"The slim red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"17\", \"lowerfilt\", \"The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon\"));\n    indexDoc(sdoc(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"19\", \"lowerfilt\", \"The hose red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"21\", \"lowerfilt\", \"The court red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"24\", \"lowerfilt\", \"The file red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"25\", \"lowerfilt\", \"rod fix\"));\n    indexDoc(sdoc(id, \"26\", \"lowerfilt\", \"bmw usa 328i\"));\n    indexDoc(sdoc(id, \"27\", \"lowerfilt\", \"bmw usa 535i\"));\n    indexDoc(sdoc(id, \"28\", \"lowerfilt\", \"bmw 750Li\"));\n\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}17\");\n    QueryResponse queryResponse = cloudClient.query(params);\n    SolrDocumentList solrDocuments = queryResponse.getResults();\n    int[] expectedIds = new int[]{17, 13, 14, 20, 22, 15, 16, 24, 18, 23};\n    int[] actualIds = new int[10];\n    int i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n    \n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}3\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{3, 27, 26, 28};\n    actualIds = new int[4];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}20\");\n    params.set(\"debug\" , \"query\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{18, 23, 13, 14, 20, 22, 19, 21, 15, 16};\n    actualIds = new int[10];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    String expectedQueryString = \"lowerfilt:over lowerfilt:fox lowerfilt:lazy lowerfilt:brown \"\n        + \"lowerfilt:jumped lowerfilt:red lowerfilt:dogs. lowerfilt:quote lowerfilt:the\";\n    \n    ArrayList<String> actualParsedQueries = (ArrayList<String>) queryResponse\n        .getDebugMap().get(\"parsedquery\");\n    \n    for(int counter=0; counter < actualParsedQueries.size(); counter++) {\n      assertTrue(\"Parsed queries aren't equal\",\n          compareParsedQueryStrings(expectedQueryString,\n          actualParsedQueries.get(counter)));\n    }\n  }\n\n","bugFix":null,"bugIntro":["19d28b1683d6453ee94a9205e2d32206d2dde868"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa407daeae15bf17b168f3ddaae52b80e6b29962","date":1417557019,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#doTest().mjava","sourceNew":"  public void doTest() throws Exception {\n    \n    waitForRecoveriesToFinish(false);\n\n    String id = \"id\";\n    delQ(\"*:*\");\n    indexDoc(sdoc(id, \"1\", \"lowerfilt\", \"toyota\"));\n    indexDoc(sdoc(id, \"2\", \"lowerfilt\", \"chevrolet\"));\n    indexDoc(sdoc(id, \"3\", \"lowerfilt\", \"bmw usa\"));\n    indexDoc(sdoc(id, \"4\", \"lowerfilt\", \"ford\"));\n    indexDoc(sdoc(id, \"5\", \"lowerfilt\", \"ferrari\"));\n    indexDoc(sdoc(id, \"6\", \"lowerfilt\", \"jaguar\"));\n    indexDoc(sdoc(id, \"7\", \"lowerfilt\", \"mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too\"));\n    indexDoc(sdoc(id, \"8\", \"lowerfilt\", \"sonata\"));\n    indexDoc(sdoc(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy big and large brown dogs.\"));\n    indexDoc(sdoc(id, \"10\", \"lowerfilt\", \"blue\"));\n    indexDoc(sdoc(id, \"12\", \"lowerfilt\", \"glue\"));\n    indexDoc(sdoc(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"15\", \"lowerfilt\", \"The fat red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"16\", \"lowerfilt\", \"The slim red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"17\", \"lowerfilt\", \"The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon\"));\n    indexDoc(sdoc(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"19\", \"lowerfilt\", \"The hose red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"21\", \"lowerfilt\", \"The court red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"24\", \"lowerfilt\", \"The file red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"25\", \"lowerfilt\", \"rod fix\"));\n    indexDoc(sdoc(id, \"26\", \"lowerfilt\", \"bmw usa 328i\"));\n    indexDoc(sdoc(id, \"27\", \"lowerfilt\", \"bmw usa 535i\"));\n    indexDoc(sdoc(id, \"28\", \"lowerfilt\", \"bmw 750Li\"));\n\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}17\");\n    QueryResponse queryResponse = cloudClient.query(params);\n    SolrDocumentList solrDocuments = queryResponse.getResults();\n    int[] expectedIds = new int[]{17, 13, 14, 20, 22, 15, 16, 24, 18, 23};\n    int[] actualIds = new int[10];\n    int i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n    \n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}3\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{3, 27, 26, 28};\n    actualIds = new int[4];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}20\");\n    params.set(\"debug\" , \"query\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{18, 23, 13, 14, 20, 22, 19, 21, 15, 16};\n    actualIds = new int[10];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    String expectedQueryString = \"lowerfilt:over lowerfilt:fox lowerfilt:lazy lowerfilt:brown \"\n        + \"lowerfilt:jumped lowerfilt:red lowerfilt:dogs. lowerfilt:quote lowerfilt:the\";\n    \n    try {\n      ArrayList<String> actualParsedQueries = (ArrayList<String>) queryResponse\n          .getDebugMap().get(\"parsedquery\");\n\n      for (int counter = 0; counter < actualParsedQueries.size(); counter++) {\n        assertTrue(\"Parsed queries aren't equal\",\n            compareParsedQueryStrings(expectedQueryString,\n                actualParsedQueries.get(counter)));\n      }\n    } catch (ClassCastException ex) {\n      // TODO: Adding this to just track a rare test failure.\n      // Once SOLR-6755 is resolved, this should be removed.\n      log.info(\"QueryResponse.debugMap: {}\", queryResponse.getDebugMap().toString());\n      log.info(\"ClusterState: {}\", cloudClient.getZkStateReader().getClusterState().toString());\n    }\n\n    // Assert that {!mlt}id does not throw an exception i.e. implicitly, only fields that are stored + have explicit\n    // analyzer are used for MLT Query construction.\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt}20\");\n\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{18, 23, 13, 14, 20, 22, 19, 21, 15, 16};\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n  }\n\n","sourceOld":"  public void doTest() throws Exception {\n    \n    waitForRecoveriesToFinish(false);\n\n    String id = \"id\";\n    delQ(\"*:*\");\n    indexDoc(sdoc(id, \"1\", \"lowerfilt\", \"toyota\"));\n    indexDoc(sdoc(id, \"2\", \"lowerfilt\", \"chevrolet\"));\n    indexDoc(sdoc(id, \"3\", \"lowerfilt\", \"bmw usa\"));\n    indexDoc(sdoc(id, \"4\", \"lowerfilt\", \"ford\"));\n    indexDoc(sdoc(id, \"5\", \"lowerfilt\", \"ferrari\"));\n    indexDoc(sdoc(id, \"6\", \"lowerfilt\", \"jaguar\"));\n    indexDoc(sdoc(id, \"7\", \"lowerfilt\", \"mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too\"));\n    indexDoc(sdoc(id, \"8\", \"lowerfilt\", \"sonata\"));\n    indexDoc(sdoc(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy big and large brown dogs.\"));\n    indexDoc(sdoc(id, \"10\", \"lowerfilt\", \"blue\"));\n    indexDoc(sdoc(id, \"12\", \"lowerfilt\", \"glue\"));\n    indexDoc(sdoc(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"15\", \"lowerfilt\", \"The fat red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"16\", \"lowerfilt\", \"The slim red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"17\", \"lowerfilt\", \"The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon\"));\n    indexDoc(sdoc(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"19\", \"lowerfilt\", \"The hose red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"21\", \"lowerfilt\", \"The court red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"24\", \"lowerfilt\", \"The file red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"25\", \"lowerfilt\", \"rod fix\"));\n    indexDoc(sdoc(id, \"26\", \"lowerfilt\", \"bmw usa 328i\"));\n    indexDoc(sdoc(id, \"27\", \"lowerfilt\", \"bmw usa 535i\"));\n    indexDoc(sdoc(id, \"28\", \"lowerfilt\", \"bmw 750Li\"));\n\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}17\");\n    QueryResponse queryResponse = cloudClient.query(params);\n    SolrDocumentList solrDocuments = queryResponse.getResults();\n    int[] expectedIds = new int[]{17, 13, 14, 20, 22, 15, 16, 24, 18, 23};\n    int[] actualIds = new int[10];\n    int i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n    \n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}3\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{3, 27, 26, 28};\n    actualIds = new int[4];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}20\");\n    params.set(\"debug\" , \"query\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{18, 23, 13, 14, 20, 22, 19, 21, 15, 16};\n    actualIds = new int[10];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    String expectedQueryString = \"lowerfilt:over lowerfilt:fox lowerfilt:lazy lowerfilt:brown \"\n        + \"lowerfilt:jumped lowerfilt:red lowerfilt:dogs. lowerfilt:quote lowerfilt:the\";\n    \n    ArrayList<String> actualParsedQueries = (ArrayList<String>) queryResponse\n        .getDebugMap().get(\"parsedquery\");\n    \n    for(int counter=0; counter < actualParsedQueries.size(); counter++) {\n      assertTrue(\"Parsed queries aren't equal\",\n          compareParsedQueryStrings(expectedQueryString,\n          actualParsedQueries.get(counter)));\n    }\n\n    // Assert that {!mlt}id does not throw an exception i.e. implicitly, only fields that are stored + have explicit\n    // analyzer are used for MLT Query construction.\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt}20\");\n\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{18, 23, 13, 14, 20, 22, 19, 21, 15, 16};\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n  }\n\n","bugFix":null,"bugIntro":["19d28b1683d6453ee94a9205e2d32206d2dde868"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#doTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    \n    waitForRecoveriesToFinish(false);\n\n    String id = \"id\";\n    delQ(\"*:*\");\n    indexDoc(sdoc(id, \"1\", \"lowerfilt\", \"toyota\"));\n    indexDoc(sdoc(id, \"2\", \"lowerfilt\", \"chevrolet\"));\n    indexDoc(sdoc(id, \"3\", \"lowerfilt\", \"bmw usa\"));\n    indexDoc(sdoc(id, \"4\", \"lowerfilt\", \"ford\"));\n    indexDoc(sdoc(id, \"5\", \"lowerfilt\", \"ferrari\"));\n    indexDoc(sdoc(id, \"6\", \"lowerfilt\", \"jaguar\"));\n    indexDoc(sdoc(id, \"7\", \"lowerfilt\", \"mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too\"));\n    indexDoc(sdoc(id, \"8\", \"lowerfilt\", \"sonata\"));\n    indexDoc(sdoc(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy big and large brown dogs.\"));\n    indexDoc(sdoc(id, \"10\", \"lowerfilt\", \"blue\"));\n    indexDoc(sdoc(id, \"12\", \"lowerfilt\", \"glue\"));\n    indexDoc(sdoc(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"15\", \"lowerfilt\", \"The fat red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"16\", \"lowerfilt\", \"The slim red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"17\", \"lowerfilt\", \"The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon\"));\n    indexDoc(sdoc(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"19\", \"lowerfilt\", \"The hose red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"21\", \"lowerfilt\", \"The court red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"24\", \"lowerfilt\", \"The file red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"25\", \"lowerfilt\", \"rod fix\"));\n    indexDoc(sdoc(id, \"26\", \"lowerfilt\", \"bmw usa 328i\"));\n    indexDoc(sdoc(id, \"27\", \"lowerfilt\", \"bmw usa 535i\"));\n    indexDoc(sdoc(id, \"28\", \"lowerfilt\", \"bmw 750Li\"));\n\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}17\");\n    QueryResponse queryResponse = cloudClient.query(params);\n    SolrDocumentList solrDocuments = queryResponse.getResults();\n    int[] expectedIds = new int[]{17, 13, 14, 20, 22, 15, 16, 24, 18, 23};\n    int[] actualIds = new int[10];\n    int i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n    \n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}3\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{3, 27, 26, 28};\n    actualIds = new int[4];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}20\");\n    params.set(\"debug\" , \"query\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{18, 23, 13, 14, 20, 22, 19, 21, 15, 16};\n    actualIds = new int[10];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    String expectedQueryString = \"lowerfilt:over lowerfilt:fox lowerfilt:lazy lowerfilt:brown \"\n        + \"lowerfilt:jumped lowerfilt:red lowerfilt:dogs. lowerfilt:quote lowerfilt:the\";\n    \n    try {\n      ArrayList<String> actualParsedQueries = (ArrayList<String>) queryResponse\n          .getDebugMap().get(\"parsedquery\");\n\n      for (int counter = 0; counter < actualParsedQueries.size(); counter++) {\n        assertTrue(\"Parsed queries aren't equal\",\n            compareParsedQueryStrings(expectedQueryString,\n                actualParsedQueries.get(counter)));\n      }\n    } catch (ClassCastException ex) {\n      // TODO: Adding this to just track a rare test failure.\n      // Once SOLR-6755 is resolved, this should be removed.\n      log.info(\"QueryResponse.debugMap: {}\", queryResponse.getDebugMap().toString());\n      log.info(\"ClusterState: {}\", cloudClient.getZkStateReader().getClusterState().toString());\n    }\n\n    // Assert that {!mlt}id does not throw an exception i.e. implicitly, only fields that are stored + have explicit\n    // analyzer are used for MLT Query construction.\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt}20\");\n\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{18, 23, 13, 14, 20, 22, 19, 21, 15, 16};\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n  }\n\n","sourceOld":"  public void doTest() throws Exception {\n    \n    waitForRecoveriesToFinish(false);\n\n    String id = \"id\";\n    delQ(\"*:*\");\n    indexDoc(sdoc(id, \"1\", \"lowerfilt\", \"toyota\"));\n    indexDoc(sdoc(id, \"2\", \"lowerfilt\", \"chevrolet\"));\n    indexDoc(sdoc(id, \"3\", \"lowerfilt\", \"bmw usa\"));\n    indexDoc(sdoc(id, \"4\", \"lowerfilt\", \"ford\"));\n    indexDoc(sdoc(id, \"5\", \"lowerfilt\", \"ferrari\"));\n    indexDoc(sdoc(id, \"6\", \"lowerfilt\", \"jaguar\"));\n    indexDoc(sdoc(id, \"7\", \"lowerfilt\", \"mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too\"));\n    indexDoc(sdoc(id, \"8\", \"lowerfilt\", \"sonata\"));\n    indexDoc(sdoc(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy big and large brown dogs.\"));\n    indexDoc(sdoc(id, \"10\", \"lowerfilt\", \"blue\"));\n    indexDoc(sdoc(id, \"12\", \"lowerfilt\", \"glue\"));\n    indexDoc(sdoc(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"15\", \"lowerfilt\", \"The fat red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"16\", \"lowerfilt\", \"The slim red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"17\", \"lowerfilt\", \"The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon\"));\n    indexDoc(sdoc(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"19\", \"lowerfilt\", \"The hose red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"21\", \"lowerfilt\", \"The court red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"24\", \"lowerfilt\", \"The file red fox jumped over the lazy brown dogs.\"));\n    indexDoc(sdoc(id, \"25\", \"lowerfilt\", \"rod fix\"));\n    indexDoc(sdoc(id, \"26\", \"lowerfilt\", \"bmw usa 328i\"));\n    indexDoc(sdoc(id, \"27\", \"lowerfilt\", \"bmw usa 535i\"));\n    indexDoc(sdoc(id, \"28\", \"lowerfilt\", \"bmw 750Li\"));\n\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}17\");\n    QueryResponse queryResponse = cloudClient.query(params);\n    SolrDocumentList solrDocuments = queryResponse.getResults();\n    int[] expectedIds = new int[]{17, 13, 14, 20, 22, 15, 16, 24, 18, 23};\n    int[] actualIds = new int[10];\n    int i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n    \n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}3\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{3, 27, 26, 28};\n    actualIds = new int[4];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}20\");\n    params.set(\"debug\" , \"query\");\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{18, 23, 13, 14, 20, 22, 19, 21, 15, 16};\n    actualIds = new int[10];\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n\n    String expectedQueryString = \"lowerfilt:over lowerfilt:fox lowerfilt:lazy lowerfilt:brown \"\n        + \"lowerfilt:jumped lowerfilt:red lowerfilt:dogs. lowerfilt:quote lowerfilt:the\";\n    \n    try {\n      ArrayList<String> actualParsedQueries = (ArrayList<String>) queryResponse\n          .getDebugMap().get(\"parsedquery\");\n\n      for (int counter = 0; counter < actualParsedQueries.size(); counter++) {\n        assertTrue(\"Parsed queries aren't equal\",\n            compareParsedQueryStrings(expectedQueryString,\n                actualParsedQueries.get(counter)));\n      }\n    } catch (ClassCastException ex) {\n      // TODO: Adding this to just track a rare test failure.\n      // Once SOLR-6755 is resolved, this should be removed.\n      log.info(\"QueryResponse.debugMap: {}\", queryResponse.getDebugMap().toString());\n      log.info(\"ClusterState: {}\", cloudClient.getZkStateReader().getClusterState().toString());\n    }\n\n    // Assert that {!mlt}id does not throw an exception i.e. implicitly, only fields that are stored + have explicit\n    // analyzer are used for MLT Query construction.\n    params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt}20\");\n\n    queryResponse = queryServer(params);\n    solrDocuments = queryResponse.getResults();\n    expectedIds = new int[]{18, 23, 13, 14, 20, 22, 19, 21, 15, 16};\n    i = 0;\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n    }\n    assertArrayEquals(expectedIds, actualIds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"eb55f624eb53f26cfb7f9614b862fb7657633358":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d32e559c96d0c16fe041e1608a4bbbf8a6c9a4e1":["eb55f624eb53f26cfb7f9614b862fb7657633358"],"abb23fcc2461782ab204e61213240feb77d355aa":["fa407daeae15bf17b168f3ddaae52b80e6b29962"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa407daeae15bf17b168f3ddaae52b80e6b29962":["07d695a14a1938b01a5d4ab68b3c815eb061da94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["abb23fcc2461782ab204e61213240feb77d355aa"],"07d695a14a1938b01a5d4ab68b3c815eb061da94":["d32e559c96d0c16fe041e1608a4bbbf8a6c9a4e1"]},"commit2Childs":{"eb55f624eb53f26cfb7f9614b862fb7657633358":["d32e559c96d0c16fe041e1608a4bbbf8a6c9a4e1"],"d32e559c96d0c16fe041e1608a4bbbf8a6c9a4e1":["07d695a14a1938b01a5d4ab68b3c815eb061da94"],"abb23fcc2461782ab204e61213240feb77d355aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eb55f624eb53f26cfb7f9614b862fb7657633358"],"fa407daeae15bf17b168f3ddaae52b80e6b29962":["abb23fcc2461782ab204e61213240feb77d355aa"],"07d695a14a1938b01a5d4ab68b3c815eb061da94":["fa407daeae15bf17b168f3ddaae52b80e6b29962"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}