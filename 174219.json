{"path":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesNumbersQuery#assertSameMatches(IndexSearcher,Query,Query,boolean).mjava","commits":[{"id":"9fb0efe75e5c6021561f115dfe334b74786364ba","date":1434366074,"type":2,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesNumbersQuery#assertSameMatches(IndexSearcher,Query,Query,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#assertSameMatches(IndexSearcher,Query,Query,boolean).mjava","sourceNew":"  private void assertSameMatches(IndexSearcher searcher, Query q1, Query q2, boolean scores) throws IOException {\n    final int maxDoc = searcher.getIndexReader().maxDoc();\n    final TopDocs td1 = searcher.search(q1, maxDoc, scores ? Sort.RELEVANCE : Sort.INDEXORDER);\n    final TopDocs td2 = searcher.search(q2, maxDoc, scores ? Sort.RELEVANCE : Sort.INDEXORDER);\n    assertEquals(td1.totalHits, td2.totalHits);\n    for (int i = 0; i < td1.scoreDocs.length; ++i) {\n      assertEquals(td1.scoreDocs[i].doc, td2.scoreDocs[i].doc);\n      if (scores) {\n        assertEquals(td1.scoreDocs[i].score, td2.scoreDocs[i].score, 10e-7);\n      }\n    }\n  }\n\n","sourceOld":"  private void assertSameMatches(IndexSearcher searcher, Query q1, Query q2, boolean scores) throws IOException {\n    final int maxDoc = searcher.getIndexReader().maxDoc();\n    final TopDocs td1 = searcher.search(q1, maxDoc, scores ? Sort.RELEVANCE : Sort.INDEXORDER);\n    final TopDocs td2 = searcher.search(q2, maxDoc, scores ? Sort.RELEVANCE : Sort.INDEXORDER);\n    assertEquals(td1.totalHits, td2.totalHits);\n    for (int i = 0; i < td1.scoreDocs.length; ++i) {\n      assertEquals(td1.scoreDocs[i].doc, td2.scoreDocs[i].doc);\n      if (scores) {\n        assertEquals(td1.scoreDocs[i].score, td2.scoreDocs[i].score, 10e-7);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesNumbersQuery#assertSameMatches(IndexSearcher,Query,Query,boolean).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesNumbersQuery#assertSameMatches(IndexSearcher,Query,Query,boolean).mjava","sourceNew":"  private void assertSameMatches(IndexSearcher searcher, Query q1, Query q2, boolean scores) throws IOException {\n    final int maxDoc = searcher.getIndexReader().maxDoc();\n    final TopDocs td1 = searcher.search(q1, maxDoc, scores ? Sort.RELEVANCE : Sort.INDEXORDER);\n    final TopDocs td2 = searcher.search(q2, maxDoc, scores ? Sort.RELEVANCE : Sort.INDEXORDER);\n    assertEquals(td1.totalHits.value, td2.totalHits.value);\n    for (int i = 0; i < td1.scoreDocs.length; ++i) {\n      assertEquals(td1.scoreDocs[i].doc, td2.scoreDocs[i].doc);\n      if (scores) {\n        assertEquals(td1.scoreDocs[i].score, td2.scoreDocs[i].score, 10e-7);\n      }\n    }\n  }\n\n","sourceOld":"  private void assertSameMatches(IndexSearcher searcher, Query q1, Query q2, boolean scores) throws IOException {\n    final int maxDoc = searcher.getIndexReader().maxDoc();\n    final TopDocs td1 = searcher.search(q1, maxDoc, scores ? Sort.RELEVANCE : Sort.INDEXORDER);\n    final TopDocs td2 = searcher.search(q2, maxDoc, scores ? Sort.RELEVANCE : Sort.INDEXORDER);\n    assertEquals(td1.totalHits, td2.totalHits);\n    for (int i = 0; i < td1.scoreDocs.length; ++i) {\n      assertEquals(td1.scoreDocs[i].doc, td2.scoreDocs[i].doc);\n      if (scores) {\n        assertEquals(td1.scoreDocs[i].score, td2.scoreDocs[i].score, 10e-7);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fb0efe75e5c6021561f115dfe334b74786364ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["9fb0efe75e5c6021561f115dfe334b74786364ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fb0efe75e5c6021561f115dfe334b74786364ba"],"9fb0efe75e5c6021561f115dfe334b74786364ba":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}