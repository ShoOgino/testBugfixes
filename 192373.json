{"path":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","commits":[{"id":"80ef99614729c6d6fb7f8a9055a7a442efa87cf8","date":1464951274,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#afterClass().mjava","sourceNew":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    try {\n      deleteCore();\n      resetExceptionIgnores();\n      \n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        if (!RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressObjectReleaseTracker.class)) {\n          endTrackingSearchers(120, false);\n          String orr = ObjectReleaseTracker.clearObjectTrackerAndCheckEmpty();\n          assertNull(orr, orr);\n        } else {\n          endTrackingSearchers(15, false);\n          String orr = ObjectReleaseTracker.checkEmpty();\n          if (orr != null) {\n            log.warn(\n                \"Some resources were not closed, shutdown, or released. This has been ignored due to the SuppressObjectReleaseTracker annotation, trying to close them now.\");\n            ObjectReleaseTracker.tryClose();\n          }\n        }\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      \n      HttpClientUtil.resetHttpClientBuilder();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n    }\n    \n    IpTables.unblockAllPorts();\n  }\n\n","sourceOld":"  @AfterClass\n  @SuppressWarnings(\"unused\")\n  private static void afterClass() throws Exception {\n    try {\n      deleteCore();\n      resetExceptionIgnores();\n      \n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        if (!RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressObjectReleaseTracker.class)) {\n          endTrackingSearchers(120, false);\n          String orr = ObjectReleaseTracker.clearObjectTrackerAndCheckEmpty();\n          assertNull(orr, orr);\n        } else {\n          endTrackingSearchers(15, false);\n          String orr = ObjectReleaseTracker.checkEmpty();\n          if (orr != null) {\n            log.warn(\n                \"Some resources were not closed, shutdown, or released. This has been ignored due to the SuppressObjectReleaseTracker annotation, trying to close them now.\");\n            ObjectReleaseTracker.tryClose();\n          }\n        }\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      \n      HttpClientUtil.resetHttpClientBuilder();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n    }\n    \n    IpTables.unblockAllPorts();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e511b092029d56e0d4e30204fba8509c1c2647b6","date":1467838965,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","sourceNew":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    try {\n      deleteCore();\n      resetExceptionIgnores();\n      \n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        if (!RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressObjectReleaseTracker.class)) {\n          endTrackingSearchers(120, false);\n          String orr = ObjectReleaseTracker.clearObjectTrackerAndCheckEmpty();\n          assertNull(orr, orr);\n        } else {\n          endTrackingSearchers(15, false);\n          String orr = ObjectReleaseTracker.checkEmpty();\n          if (orr != null) {\n            log.warn(\n                \"Some resources were not closed, shutdown, or released. This has been ignored due to the SuppressObjectReleaseTracker annotation, trying to close them now.\");\n            ObjectReleaseTracker.tryClose();\n          }\n        }\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      \n      HttpClientUtil.resetHttpClientBuilder();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n    }\n    \n    IpTables.unblockAllPorts();\n  }\n\n","sourceOld":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    try {\n      deleteCore();\n      resetExceptionIgnores();\n      \n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        if (!RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressObjectReleaseTracker.class)) {\n          endTrackingSearchers(120, false);\n          String orr = ObjectReleaseTracker.clearObjectTrackerAndCheckEmpty();\n          assertNull(orr, orr);\n        } else {\n          endTrackingSearchers(15, false);\n          String orr = ObjectReleaseTracker.checkEmpty();\n          if (orr != null) {\n            log.warn(\n                \"Some resources were not closed, shutdown, or released. This has been ignored due to the SuppressObjectReleaseTracker annotation, trying to close them now.\");\n            ObjectReleaseTracker.tryClose();\n          }\n        }\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      \n      HttpClientUtil.resetHttpClientBuilder();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n    }\n    \n    IpTables.unblockAllPorts();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8381eb1cd44d2e0defb52130de3295a576ac1e7b","date":1467840340,"type":3,"author":"Chris Hostetter","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","sourceNew":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    try {\n      deleteCore();\n      resetExceptionIgnores();\n      \n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        if (!RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressObjectReleaseTracker.class)) {\n          endTrackingSearchers(120, false);\n          String orr = ObjectReleaseTracker.clearObjectTrackerAndCheckEmpty();\n          assertNull(orr, orr);\n        } else {\n          endTrackingSearchers(15, false);\n          String orr = ObjectReleaseTracker.checkEmpty();\n          if (orr != null) {\n            log.warn(\n                \"Some resources were not closed, shutdown, or released. This has been ignored due to the SuppressObjectReleaseTracker annotation, trying to close them now.\");\n            ObjectReleaseTracker.tryClose();\n          }\n        }\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      \n      HttpClientUtil.resetHttpClientBuilder();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n    }\n    \n    IpTables.unblockAllPorts();\n  }\n\n","sourceOld":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    try {\n      deleteCore();\n      resetExceptionIgnores();\n      \n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        if (!RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressObjectReleaseTracker.class)) {\n          endTrackingSearchers(120, false);\n          String orr = ObjectReleaseTracker.clearObjectTrackerAndCheckEmpty();\n          assertNull(orr, orr);\n        } else {\n          endTrackingSearchers(15, false);\n          String orr = ObjectReleaseTracker.checkEmpty();\n          if (orr != null) {\n            log.warn(\n                \"Some resources were not closed, shutdown, or released. This has been ignored due to the SuppressObjectReleaseTracker annotation, trying to close them now.\");\n            ObjectReleaseTracker.tryClose();\n          }\n        }\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      \n      HttpClientUtil.resetHttpClientBuilder();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n    }\n    \n    IpTables.unblockAllPorts();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"03eba9c92a74d53b4960d4098c9dd0f67b459468","date":1474549326,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","sourceNew":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    try {\n      deleteCore();\n      resetExceptionIgnores();\n      \n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        if (!RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressObjectReleaseTracker.class)) {\n          endTrackingSearchers(120, false);\n          String orr = ObjectReleaseTracker.clearObjectTrackerAndCheckEmpty(30);\n          assertNull(orr, orr);\n        } else {\n          endTrackingSearchers(15, false);\n          String orr = ObjectReleaseTracker.checkEmpty();\n          if (orr != null) {\n            log.warn(\n                \"Some resources were not closed, shutdown, or released. This has been ignored due to the SuppressObjectReleaseTracker annotation, trying to close them now.\");\n            ObjectReleaseTracker.tryClose();\n          }\n        }\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      \n      HttpClientUtil.resetHttpClientBuilder();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n    }\n    \n    IpTables.unblockAllPorts();\n  }\n\n","sourceOld":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    try {\n      deleteCore();\n      resetExceptionIgnores();\n      \n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        if (!RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressObjectReleaseTracker.class)) {\n          endTrackingSearchers(120, false);\n          String orr = ObjectReleaseTracker.clearObjectTrackerAndCheckEmpty();\n          assertNull(orr, orr);\n        } else {\n          endTrackingSearchers(15, false);\n          String orr = ObjectReleaseTracker.checkEmpty();\n          if (orr != null) {\n            log.warn(\n                \"Some resources were not closed, shutdown, or released. This has been ignored due to the SuppressObjectReleaseTracker annotation, trying to close them now.\");\n            ObjectReleaseTracker.tryClose();\n          }\n        }\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      \n      HttpClientUtil.resetHttpClientBuilder();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n    }\n    \n    IpTables.unblockAllPorts();\n  }\n\n","bugFix":["2319d8709b8b355cbed6fd561e6c2535a76844b4"],"bugIntro":["ad28156288ac00b91352582904d97e6653205757"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"126d6ad24eed13163ba0959435d5a80e5672837c","date":1474567302,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","sourceNew":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    try {\n      deleteCore();\n      resetExceptionIgnores();\n      \n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        if (!RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressObjectReleaseTracker.class)) {\n          endTrackingSearchers(120, false);\n          String orr = ObjectReleaseTracker.clearObjectTrackerAndCheckEmpty(30);\n          assertNull(orr, orr);\n        } else {\n          endTrackingSearchers(15, false);\n          String orr = ObjectReleaseTracker.checkEmpty();\n          if (orr != null) {\n            log.warn(\n                \"Some resources were not closed, shutdown, or released. This has been ignored due to the SuppressObjectReleaseTracker annotation, trying to close them now.\");\n            ObjectReleaseTracker.tryClose();\n          }\n        }\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      \n      HttpClientUtil.resetHttpClientBuilder();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n    }\n    \n    IpTables.unblockAllPorts();\n  }\n\n","sourceOld":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    try {\n      deleteCore();\n      resetExceptionIgnores();\n      \n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        if (!RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressObjectReleaseTracker.class)) {\n          endTrackingSearchers(120, false);\n          String orr = ObjectReleaseTracker.clearObjectTrackerAndCheckEmpty();\n          assertNull(orr, orr);\n        } else {\n          endTrackingSearchers(15, false);\n          String orr = ObjectReleaseTracker.checkEmpty();\n          if (orr != null) {\n            log.warn(\n                \"Some resources were not closed, shutdown, or released. This has been ignored due to the SuppressObjectReleaseTracker annotation, trying to close them now.\");\n            ObjectReleaseTracker.tryClose();\n          }\n        }\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      \n      HttpClientUtil.resetHttpClientBuilder();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n    }\n    \n    IpTables.unblockAllPorts();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fc16166e6be86e96c196f31854d639cd63cb57dd","date":1474877689,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","sourceNew":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    try {\n      deleteCore();\n      resetExceptionIgnores();\n      \n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        if (!RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressObjectReleaseTracker.class)) {\n          endTrackingSearchers(120, false);\n          String orr = ObjectReleaseTracker.clearObjectTrackerAndCheckEmpty(30);\n          assertNull(orr, orr);\n        } else {\n          endTrackingSearchers(15, false);\n          String orr = ObjectReleaseTracker.checkEmpty();\n          if (orr != null) {\n            log.warn(\n                \"Some resources were not closed, shutdown, or released. This has been ignored due to the SuppressObjectReleaseTracker annotation, trying to close them now.\");\n            ObjectReleaseTracker.tryClose();\n          }\n        }\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      \n      HttpClientUtil.resetHttpClientBuilder();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n    }\n    \n    IpTables.unblockAllPorts();\n\n    LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);\n    savedClassLogLevels.clear();\n  }\n\n","sourceOld":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    try {\n      deleteCore();\n      resetExceptionIgnores();\n      \n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        if (!RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressObjectReleaseTracker.class)) {\n          endTrackingSearchers(120, false);\n          String orr = ObjectReleaseTracker.clearObjectTrackerAndCheckEmpty(30);\n          assertNull(orr, orr);\n        } else {\n          endTrackingSearchers(15, false);\n          String orr = ObjectReleaseTracker.checkEmpty();\n          if (orr != null) {\n            log.warn(\n                \"Some resources were not closed, shutdown, or released. This has been ignored due to the SuppressObjectReleaseTracker annotation, trying to close them now.\");\n            ObjectReleaseTracker.tryClose();\n          }\n        }\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      \n      HttpClientUtil.resetHttpClientBuilder();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n    }\n    \n    IpTables.unblockAllPorts();\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","sourceNew":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    try {\n      deleteCore();\n      resetExceptionIgnores();\n      \n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        if (!RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressObjectReleaseTracker.class)) {\n          endTrackingSearchers(120, false);\n          String orr = ObjectReleaseTracker.clearObjectTrackerAndCheckEmpty(30);\n          assertNull(orr, orr);\n        } else {\n          endTrackingSearchers(15, false);\n          String orr = ObjectReleaseTracker.checkEmpty();\n          if (orr != null) {\n            log.warn(\n                \"Some resources were not closed, shutdown, or released. This has been ignored due to the SuppressObjectReleaseTracker annotation, trying to close them now.\");\n            ObjectReleaseTracker.tryClose();\n          }\n        }\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      \n      HttpClientUtil.resetHttpClientBuilder();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n    }\n    \n    IpTables.unblockAllPorts();\n\n    LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);\n    savedClassLogLevels.clear();\n  }\n\n","sourceOld":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    try {\n      deleteCore();\n      resetExceptionIgnores();\n      \n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        if (!RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressObjectReleaseTracker.class)) {\n          endTrackingSearchers(120, false);\n          String orr = ObjectReleaseTracker.clearObjectTrackerAndCheckEmpty();\n          assertNull(orr, orr);\n        } else {\n          endTrackingSearchers(15, false);\n          String orr = ObjectReleaseTracker.checkEmpty();\n          if (orr != null) {\n            log.warn(\n                \"Some resources were not closed, shutdown, or released. This has been ignored due to the SuppressObjectReleaseTracker annotation, trying to close them now.\");\n            ObjectReleaseTracker.tryClose();\n          }\n        }\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      \n      HttpClientUtil.resetHttpClientBuilder();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n    }\n    \n    IpTables.unblockAllPorts();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","pathOld":"/dev/null","sourceNew":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    try {\n      deleteCore();\n      resetExceptionIgnores();\n      \n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        if (!RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressObjectReleaseTracker.class)) {\n          endTrackingSearchers(120, false);\n          String orr = ObjectReleaseTracker.clearObjectTrackerAndCheckEmpty(30);\n          assertNull(orr, orr);\n        } else {\n          endTrackingSearchers(15, false);\n          String orr = ObjectReleaseTracker.checkEmpty();\n          if (orr != null) {\n            log.warn(\n                \"Some resources were not closed, shutdown, or released. This has been ignored due to the SuppressObjectReleaseTracker annotation, trying to close them now.\");\n            ObjectReleaseTracker.tryClose();\n          }\n        }\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      \n      HttpClientUtil.resetHttpClientBuilder();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n    }\n    \n    IpTables.unblockAllPorts();\n\n    LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);\n    savedClassLogLevels.clear();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad28156288ac00b91352582904d97e6653205757","date":1486850922,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","sourceNew":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    try {\n      deleteCore();\n      resetExceptionIgnores();\n      \n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        if (!RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressObjectReleaseTracker.class)) {\n          endTrackingSearchers(120, false);\n          String orr = clearObjectTrackerAndCheckEmpty(120);\n          assertNull(orr, orr);\n        } else {\n          endTrackingSearchers(15, false);\n          String orr = ObjectReleaseTracker.checkEmpty();\n          if (orr != null) {\n            log.warn(\n                \"Some resources were not closed, shutdown, or released. This has been ignored due to the SuppressObjectReleaseTracker annotation, trying to close them now.\");\n            ObjectReleaseTracker.tryClose();\n          }\n        }\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      \n      HttpClientUtil.resetHttpClientBuilder();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n    }\n    \n    IpTables.unblockAllPorts();\n\n    LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);\n    savedClassLogLevels.clear();\n  }\n\n","sourceOld":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    try {\n      deleteCore();\n      resetExceptionIgnores();\n      \n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        if (!RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressObjectReleaseTracker.class)) {\n          endTrackingSearchers(120, false);\n          String orr = ObjectReleaseTracker.clearObjectTrackerAndCheckEmpty(30);\n          assertNull(orr, orr);\n        } else {\n          endTrackingSearchers(15, false);\n          String orr = ObjectReleaseTracker.checkEmpty();\n          if (orr != null) {\n            log.warn(\n                \"Some resources were not closed, shutdown, or released. This has been ignored due to the SuppressObjectReleaseTracker annotation, trying to close them now.\");\n            ObjectReleaseTracker.tryClose();\n          }\n        }\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      \n      HttpClientUtil.resetHttpClientBuilder();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n    }\n    \n    IpTables.unblockAllPorts();\n\n    LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);\n    savedClassLogLevels.clear();\n  }\n\n","bugFix":["03eba9c92a74d53b4960d4098c9dd0f67b459468"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ea06b0afe55bb7add9a9a04d27e87c497480e33","date":1487775171,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","sourceNew":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    try {\n      deleteCore();\n      resetExceptionIgnores();\n      \n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        if (!RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressObjectReleaseTracker.class)) {\n          endTrackingSearchers(120, false);\n          String orr = clearObjectTrackerAndCheckEmpty(120);\n          assertNull(orr, orr);\n        } else {\n          endTrackingSearchers(15, false);\n          String orr = ObjectReleaseTracker.checkEmpty();\n          if (orr != null) {\n            log.warn(\n                \"Some resources were not closed, shutdown, or released. This has been ignored due to the SuppressObjectReleaseTracker annotation, trying to close them now.\");\n            ObjectReleaseTracker.tryClose();\n          }\n        }\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      System.clearProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\");\n      HttpClientUtil.resetHttpClientBuilder();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n    }\n    \n    IpTables.unblockAllPorts();\n\n    LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);\n    savedClassLogLevels.clear();\n  }\n\n","sourceOld":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    try {\n      deleteCore();\n      resetExceptionIgnores();\n      \n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        if (!RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressObjectReleaseTracker.class)) {\n          endTrackingSearchers(120, false);\n          String orr = clearObjectTrackerAndCheckEmpty(120);\n          assertNull(orr, orr);\n        } else {\n          endTrackingSearchers(15, false);\n          String orr = ObjectReleaseTracker.checkEmpty();\n          if (orr != null) {\n            log.warn(\n                \"Some resources were not closed, shutdown, or released. This has been ignored due to the SuppressObjectReleaseTracker annotation, trying to close them now.\");\n            ObjectReleaseTracker.tryClose();\n          }\n        }\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      \n      HttpClientUtil.resetHttpClientBuilder();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n    }\n    \n    IpTables.unblockAllPorts();\n\n    LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);\n    savedClassLogLevels.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ed2d3cbea990a1cd6c54a591a294f629964b01be","date":1488991463,"type":3,"author":"Mark Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","sourceNew":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    try {\n      deleteCore();\n      resetExceptionIgnores();\n      \n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        if (!RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressObjectReleaseTracker.class)) {\n          String orr = clearObjectTrackerAndCheckEmpty(20, false);\n          assertNull(orr, orr);\n        } else {\n          clearObjectTrackerAndCheckEmpty(20, true);\n        }\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      System.clearProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\");\n      HttpClientUtil.resetHttpClientBuilder();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n    }\n    \n    IpTables.unblockAllPorts();\n\n    LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);\n    savedClassLogLevels.clear();\n  }\n\n","sourceOld":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    try {\n      deleteCore();\n      resetExceptionIgnores();\n      \n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        if (!RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressObjectReleaseTracker.class)) {\n          endTrackingSearchers(120, false);\n          String orr = clearObjectTrackerAndCheckEmpty(120);\n          assertNull(orr, orr);\n        } else {\n          endTrackingSearchers(15, false);\n          String orr = ObjectReleaseTracker.checkEmpty();\n          if (orr != null) {\n            log.warn(\n                \"Some resources were not closed, shutdown, or released. This has been ignored due to the SuppressObjectReleaseTracker annotation, trying to close them now.\");\n            ObjectReleaseTracker.tryClose();\n          }\n        }\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      System.clearProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\");\n      HttpClientUtil.resetHttpClientBuilder();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n    }\n    \n    IpTables.unblockAllPorts();\n\n    LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);\n    savedClassLogLevels.clear();\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"767d389403b701039ee599ec2ac8a838f45d8cb7","date":1494468363,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","sourceNew":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    try {\n      deleteCore();\n      resetExceptionIgnores();\n      \n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        if (!RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressObjectReleaseTracker.class)) {\n          String orr = clearObjectTrackerAndCheckEmpty(20, false);\n          assertNull(orr, orr);\n        } else {\n          clearObjectTrackerAndCheckEmpty(20, true);\n        }\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"solr.v2RealPath\");\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      System.clearProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\");\n      HttpClientUtil.resetHttpClientBuilder();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n    }\n    \n    IpTables.unblockAllPorts();\n\n    LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);\n    savedClassLogLevels.clear();\n  }\n\n","sourceOld":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    try {\n      deleteCore();\n      resetExceptionIgnores();\n      \n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        if (!RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressObjectReleaseTracker.class)) {\n          String orr = clearObjectTrackerAndCheckEmpty(20, false);\n          assertNull(orr, orr);\n        } else {\n          clearObjectTrackerAndCheckEmpty(20, true);\n        }\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      System.clearProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\");\n      HttpClientUtil.resetHttpClientBuilder();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n    }\n    \n    IpTables.unblockAllPorts();\n\n    LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);\n    savedClassLogLevels.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b31ebc7a867ddea79d438a8fca876a94e644d11a","date":1494496172,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","sourceNew":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    try {\n      deleteCore();\n      resetExceptionIgnores();\n      \n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        if (!RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressObjectReleaseTracker.class)) {\n          String orr = clearObjectTrackerAndCheckEmpty(20, false);\n          assertNull(orr, orr);\n        } else {\n          clearObjectTrackerAndCheckEmpty(20, true);\n        }\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"solr.v2RealPath\");\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      System.clearProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\");\n      HttpClientUtil.resetHttpClientBuilder();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n    }\n    \n    IpTables.unblockAllPorts();\n\n    LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);\n    savedClassLogLevels.clear();\n  }\n\n","sourceOld":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    try {\n      deleteCore();\n      resetExceptionIgnores();\n      \n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        if (!RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressObjectReleaseTracker.class)) {\n          String orr = clearObjectTrackerAndCheckEmpty(20, false);\n          assertNull(orr, orr);\n        } else {\n          clearObjectTrackerAndCheckEmpty(20, true);\n        }\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      System.clearProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\");\n      HttpClientUtil.resetHttpClientBuilder();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n    }\n    \n    IpTables.unblockAllPorts();\n\n    LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);\n    savedClassLogLevels.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","sourceNew":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    try {\n      deleteCore();\n      resetExceptionIgnores();\n      \n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        if (!RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressObjectReleaseTracker.class)) {\n          String orr = clearObjectTrackerAndCheckEmpty(20, false);\n          assertNull(orr, orr);\n        } else {\n          clearObjectTrackerAndCheckEmpty(20, true);\n        }\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"solr.v2RealPath\");\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      System.clearProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\");\n      HttpClientUtil.resetHttpClientBuilder();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n    }\n    \n    IpTables.unblockAllPorts();\n\n    LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);\n    savedClassLogLevels.clear();\n  }\n\n","sourceOld":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    try {\n      deleteCore();\n      resetExceptionIgnores();\n      \n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        if (!RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressObjectReleaseTracker.class)) {\n          String orr = clearObjectTrackerAndCheckEmpty(20, false);\n          assertNull(orr, orr);\n        } else {\n          clearObjectTrackerAndCheckEmpty(20, true);\n        }\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      System.clearProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\");\n      HttpClientUtil.resetHttpClientBuilder();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n    }\n    \n    IpTables.unblockAllPorts();\n\n    LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);\n    savedClassLogLevels.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"351efe6fdecf9af62134d37ec2582e4a0331a4dc","date":1498149096,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","sourceNew":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    try {\n      deleteCore();\n      resetExceptionIgnores();\n      \n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        if (!RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressObjectReleaseTracker.class)) {\n          String orr = clearObjectTrackerAndCheckEmpty(20, false);\n          assertNull(orr, orr);\n        } else {\n          clearObjectTrackerAndCheckEmpty(20, true);\n        }\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"solr.v2RealPath\");\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      System.clearProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\");\n      HttpClientUtil.resetHttpClientBuilder();\n\n      clearNumericTypesProperties();\n      \n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n    }\n    \n    IpTables.unblockAllPorts();\n\n    LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);\n    savedClassLogLevels.clear();\n  }\n\n","sourceOld":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    try {\n      deleteCore();\n      resetExceptionIgnores();\n      \n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        if (!RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressObjectReleaseTracker.class)) {\n          String orr = clearObjectTrackerAndCheckEmpty(20, false);\n          assertNull(orr, orr);\n        } else {\n          clearObjectTrackerAndCheckEmpty(20, true);\n        }\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"solr.v2RealPath\");\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      System.clearProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\");\n      HttpClientUtil.resetHttpClientBuilder();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n    }\n    \n    IpTables.unblockAllPorts();\n\n    LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);\n    savedClassLogLevels.clear();\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","sourceNew":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    try {\n      deleteCore();\n      resetExceptionIgnores();\n      \n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        if (!RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressObjectReleaseTracker.class)) {\n          String orr = clearObjectTrackerAndCheckEmpty(20, false);\n          assertNull(orr, orr);\n        } else {\n          clearObjectTrackerAndCheckEmpty(20, true);\n        }\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"solr.v2RealPath\");\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      System.clearProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\");\n      HttpClientUtil.resetHttpClientBuilder();\n\n      clearNumericTypesProperties();\n      \n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n    }\n    \n    IpTables.unblockAllPorts();\n\n    LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);\n    savedClassLogLevels.clear();\n  }\n\n","sourceOld":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    try {\n      deleteCore();\n      resetExceptionIgnores();\n      \n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        if (!RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressObjectReleaseTracker.class)) {\n          String orr = clearObjectTrackerAndCheckEmpty(20, false);\n          assertNull(orr, orr);\n        } else {\n          clearObjectTrackerAndCheckEmpty(20, true);\n        }\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"solr.v2RealPath\");\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      System.clearProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\");\n      HttpClientUtil.resetHttpClientBuilder();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n    }\n    \n    IpTables.unblockAllPorts();\n\n    LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);\n    savedClassLogLevels.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","sourceNew":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    try {\n      deleteCore();\n      resetExceptionIgnores();\n      \n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        if (!RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressObjectReleaseTracker.class)) {\n          String orr = clearObjectTrackerAndCheckEmpty(20, false);\n          assertNull(orr, orr);\n        } else {\n          clearObjectTrackerAndCheckEmpty(20, true);\n        }\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"solr.v2RealPath\");\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      System.clearProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\");\n      HttpClientUtil.resetHttpClientBuilder();\n\n      clearNumericTypesProperties();\n      \n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n    }\n    \n    IpTables.unblockAllPorts();\n\n    LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);\n    savedClassLogLevels.clear();\n  }\n\n","sourceOld":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    try {\n      deleteCore();\n      resetExceptionIgnores();\n      \n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        if (!RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressObjectReleaseTracker.class)) {\n          String orr = clearObjectTrackerAndCheckEmpty(20, false);\n          assertNull(orr, orr);\n        } else {\n          clearObjectTrackerAndCheckEmpty(20, true);\n        }\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"solr.v2RealPath\");\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      System.clearProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\");\n      HttpClientUtil.resetHttpClientBuilder();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n    }\n    \n    IpTables.unblockAllPorts();\n\n    LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);\n    savedClassLogLevels.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"596226608eb15ccf94c77978c3aeda172973d10b","date":1504115915,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","sourceNew":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    try {\n      deleteCore();\n      resetExceptionIgnores();\n      \n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        if (!RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressObjectReleaseTracker.class)) {\n          String orr = clearObjectTrackerAndCheckEmpty(20, false);\n          assertNull(orr, orr);\n        } else {\n          clearObjectTrackerAndCheckEmpty(20, true);\n        }\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"solr.v2RealPath\");\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      System.clearProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\");\n      HttpClientUtil.resetHttpClientBuilder();\n\n      clearNumericTypesProperties();\n      \n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n    }\n    \n    IpTables.unblockAllPorts();\n\n    LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);\n    savedClassLogLevels.clear();\n    StartupLoggingUtils.changeLogLevel(initialRootLogLevel);\n  }\n\n","sourceOld":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    try {\n      deleteCore();\n      resetExceptionIgnores();\n      \n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        if (!RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressObjectReleaseTracker.class)) {\n          String orr = clearObjectTrackerAndCheckEmpty(20, false);\n          assertNull(orr, orr);\n        } else {\n          clearObjectTrackerAndCheckEmpty(20, true);\n        }\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"solr.v2RealPath\");\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      System.clearProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\");\n      HttpClientUtil.resetHttpClientBuilder();\n\n      clearNumericTypesProperties();\n      \n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n    }\n    \n    IpTables.unblockAllPorts();\n\n    LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);\n    savedClassLogLevels.clear();\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"df00ac20ec618ed997bacca597432d686193362d","date":1504183645,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","sourceNew":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    try {\n      deleteCore();\n      resetExceptionIgnores();\n      \n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        if (!RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressObjectReleaseTracker.class)) {\n          String orr = clearObjectTrackerAndCheckEmpty(20, false);\n          assertNull(orr, orr);\n        } else {\n          clearObjectTrackerAndCheckEmpty(20, true);\n        }\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"solr.v2RealPath\");\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      System.clearProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\");\n      HttpClientUtil.resetHttpClientBuilder();\n\n      clearNumericTypesProperties();\n      \n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n    }\n    \n    IpTables.unblockAllPorts();\n\n    LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);\n    savedClassLogLevels.clear();\n    StartupLoggingUtils.changeLogLevel(initialRootLogLevel);\n  }\n\n","sourceOld":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    try {\n      deleteCore();\n      resetExceptionIgnores();\n      \n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        if (!RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressObjectReleaseTracker.class)) {\n          String orr = clearObjectTrackerAndCheckEmpty(20, false);\n          assertNull(orr, orr);\n        } else {\n          clearObjectTrackerAndCheckEmpty(20, true);\n        }\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"solr.v2RealPath\");\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      System.clearProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\");\n      HttpClientUtil.resetHttpClientBuilder();\n\n      clearNumericTypesProperties();\n      \n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n    }\n    \n    IpTables.unblockAllPorts();\n\n    LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);\n    savedClassLogLevels.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","sourceNew":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    try {\n      deleteCore();\n      resetExceptionIgnores();\n      \n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        if (!RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressObjectReleaseTracker.class)) {\n          String orr = clearObjectTrackerAndCheckEmpty(20, false);\n          assertNull(orr, orr);\n        } else {\n          clearObjectTrackerAndCheckEmpty(20, true);\n        }\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"solr.v2RealPath\");\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      System.clearProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\");\n      HttpClientUtil.resetHttpClientBuilder();\n\n      clearNumericTypesProperties();\n      \n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n    }\n    \n    IpTables.unblockAllPorts();\n\n    LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);\n    savedClassLogLevels.clear();\n    StartupLoggingUtils.changeLogLevel(initialRootLogLevel);\n  }\n\n","sourceOld":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    try {\n      deleteCore();\n      resetExceptionIgnores();\n      \n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        if (!RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressObjectReleaseTracker.class)) {\n          String orr = clearObjectTrackerAndCheckEmpty(20, false);\n          assertNull(orr, orr);\n        } else {\n          clearObjectTrackerAndCheckEmpty(20, true);\n        }\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"solr.v2RealPath\");\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      System.clearProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\");\n      HttpClientUtil.resetHttpClientBuilder();\n\n      clearNumericTypesProperties();\n      \n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n    }\n    \n    IpTables.unblockAllPorts();\n\n    LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);\n    savedClassLogLevels.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","sourceNew":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    TestInjection.notifyPauseForeverDone();\n    try {\n      try {\n        deleteCore();\n      } catch (Exception e) {\n        log.error(\"Error deleting SolrCore.\");\n      }\n      \n      ExecutorUtil.shutdownAndAwaitTermination(testExecutor);\n\n      resetExceptionIgnores();\n\n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        String orr = clearObjectTrackerAndCheckEmpty(30, false);\n        assertNull(orr, orr);\n      } else {\n        ObjectReleaseTracker.tryClose();\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"solr.v2RealPath\");\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      System.clearProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\");\n      System.clearProperty(\"solr.zkclienttmeout\");\n      HttpClientUtil.resetHttpClientBuilder();\n\n      clearNumericTypesProperties();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n\n      IpTables.unblockAllPorts();\n\n      LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);\n      savedClassLogLevels.clear();\n      StartupLoggingUtils.changeLogLevel(initialRootLogLevel);\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    try {\n      deleteCore();\n      resetExceptionIgnores();\n      \n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        if (!RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressObjectReleaseTracker.class)) {\n          String orr = clearObjectTrackerAndCheckEmpty(20, false);\n          assertNull(orr, orr);\n        } else {\n          clearObjectTrackerAndCheckEmpty(20, true);\n        }\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"solr.v2RealPath\");\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      System.clearProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\");\n      HttpClientUtil.resetHttpClientBuilder();\n\n      clearNumericTypesProperties();\n      \n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n    }\n    \n    IpTables.unblockAllPorts();\n\n    LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);\n    savedClassLogLevels.clear();\n    StartupLoggingUtils.changeLogLevel(initialRootLogLevel);\n  }\n\n","bugFix":["3b28f0928f1f17bf5af380ad693363268fbb7b91","17b96e14c03baace1d03ac0e7655d751818f9685","70505a4870244b22d4d0f1a98951b08b197d5bb0","ec4f25a2171450fd11fca6ecb7a809922c9ec694","351efe6fdecf9af62134d37ec2582e4a0331a4dc","236d6327bc94efef78508850865e102f2d707d9d","ed2d3cbea990a1cd6c54a591a294f629964b01be","57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72","fc16166e6be86e96c196f31854d639cd63cb57dd","596226608eb15ccf94c77978c3aeda172973d10b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9894a2a817cb3ddfbf5fbe786760441068fb1404","date":1544401888,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","sourceNew":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    TestInjection.notifyPauseForeverDone();\n    try {\n      try {\n        deleteCore();\n      } catch (Exception e) {\n        log.error(\"Error deleting SolrCore.\");\n      }\n      \n      ExecutorUtil.shutdownAndAwaitTermination(testExecutor);\n\n      resetExceptionIgnores();\n\n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        String orr = clearObjectTrackerAndCheckEmpty(60, false);\n        assertNull(orr, orr);\n      } else {\n        ObjectReleaseTracker.tryClose();\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"solr.v2RealPath\");\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      System.clearProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\");\n      System.clearProperty(\"solr.zkclienttmeout\");\n      HttpClientUtil.resetHttpClientBuilder();\n\n      clearNumericTypesProperties();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n\n      IpTables.unblockAllPorts();\n\n      LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);\n      savedClassLogLevels.clear();\n      StartupLoggingUtils.changeLogLevel(initialRootLogLevel);\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    TestInjection.notifyPauseForeverDone();\n    try {\n      try {\n        deleteCore();\n      } catch (Exception e) {\n        log.error(\"Error deleting SolrCore.\");\n      }\n      \n      ExecutorUtil.shutdownAndAwaitTermination(testExecutor);\n\n      resetExceptionIgnores();\n\n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        String orr = clearObjectTrackerAndCheckEmpty(30, false);\n        assertNull(orr, orr);\n      } else {\n        ObjectReleaseTracker.tryClose();\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"solr.v2RealPath\");\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      System.clearProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\");\n      System.clearProperty(\"solr.zkclienttmeout\");\n      HttpClientUtil.resetHttpClientBuilder();\n\n      clearNumericTypesProperties();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n\n      IpTables.unblockAllPorts();\n\n      LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);\n      savedClassLogLevels.clear();\n      StartupLoggingUtils.changeLogLevel(initialRootLogLevel);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","sourceNew":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    TestInjection.notifyPauseForeverDone();\n    try {\n      try {\n        deleteCore();\n      } catch (Exception e) {\n        log.error(\"Error deleting SolrCore.\");\n      }\n      \n      ExecutorUtil.shutdownAndAwaitTermination(testExecutor);\n\n      resetExceptionIgnores();\n\n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        String orr = clearObjectTrackerAndCheckEmpty(60, false);\n        assertNull(orr, orr);\n      } else {\n        ObjectReleaseTracker.tryClose();\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"solr.v2RealPath\");\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      System.clearProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\");\n      System.clearProperty(\"solr.zkclienttmeout\");\n      HttpClientUtil.resetHttpClientBuilder();\n      Http2SolrClient.resetSslContextFactory();\n\n      clearNumericTypesProperties();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n\n      IpTables.unblockAllPorts();\n\n      LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);\n      savedClassLogLevels.clear();\n      StartupLoggingUtils.changeLogLevel(initialRootLogLevel);\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    TestInjection.notifyPauseForeverDone();\n    try {\n      try {\n        deleteCore();\n      } catch (Exception e) {\n        log.error(\"Error deleting SolrCore.\");\n      }\n      \n      ExecutorUtil.shutdownAndAwaitTermination(testExecutor);\n\n      resetExceptionIgnores();\n\n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        String orr = clearObjectTrackerAndCheckEmpty(60, false);\n        assertNull(orr, orr);\n      } else {\n        ObjectReleaseTracker.tryClose();\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"solr.v2RealPath\");\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      System.clearProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\");\n      System.clearProperty(\"solr.zkclienttmeout\");\n      HttpClientUtil.resetHttpClientBuilder();\n\n      clearNumericTypesProperties();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n\n      IpTables.unblockAllPorts();\n\n      LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);\n      savedClassLogLevels.clear();\n      StartupLoggingUtils.changeLogLevel(initialRootLogLevel);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5832050525b97d61021a45dac2330a707639600d","date":1550867222,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","sourceNew":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    TestInjection.notifyPauseForeverDone();\n    try {\n      try {\n        deleteCore();\n      } catch (Exception e) {\n        log.error(\"Error deleting SolrCore.\");\n      }\n      \n      ExecutorUtil.shutdownAndAwaitTermination(testExecutor);\n\n      resetExceptionIgnores();\n\n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        String orr = clearObjectTrackerAndCheckEmpty(60, false);\n        assertNull(orr, orr);\n      } else {\n        ObjectReleaseTracker.tryClose();\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"solr.v2RealPath\");\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      System.clearProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\");\n      System.clearProperty(\"solr.zkclienttmeout\");\n      HttpClientUtil.resetHttpClientBuilder();\n      Http2SolrClient.resetSslContextFactory();\n\n      clearNumericTypesProperties();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n\n      StartupLoggingUtils.shutdown();\n\n      IpTables.unblockAllPorts();\n\n      LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);\n      savedClassLogLevels.clear();\n      StartupLoggingUtils.changeLogLevel(initialRootLogLevel);\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    TestInjection.notifyPauseForeverDone();\n    try {\n      try {\n        deleteCore();\n      } catch (Exception e) {\n        log.error(\"Error deleting SolrCore.\");\n      }\n      \n      ExecutorUtil.shutdownAndAwaitTermination(testExecutor);\n\n      resetExceptionIgnores();\n\n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        String orr = clearObjectTrackerAndCheckEmpty(60, false);\n        assertNull(orr, orr);\n      } else {\n        ObjectReleaseTracker.tryClose();\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"solr.v2RealPath\");\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      System.clearProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\");\n      System.clearProperty(\"solr.zkclienttmeout\");\n      HttpClientUtil.resetHttpClientBuilder();\n      Http2SolrClient.resetSslContextFactory();\n\n      clearNumericTypesProperties();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n\n      IpTables.unblockAllPorts();\n\n      LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);\n      savedClassLogLevels.clear();\n      StartupLoggingUtils.changeLogLevel(initialRootLogLevel);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4","date":1551083645,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","sourceNew":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    TestInjection.notifyPauseForeverDone();\n    try {\n      try {\n        deleteCore();\n      } catch (Exception e) {\n        log.error(\"Error deleting SolrCore.\");\n      }\n      \n      ExecutorUtil.shutdownAndAwaitTermination(testExecutor);\n\n      resetExceptionIgnores();\n\n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        String orr = clearObjectTrackerAndCheckEmpty(60, false);\n        assertNull(orr, orr);\n      } else {\n        ObjectReleaseTracker.tryClose();\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"solr.v2RealPath\");\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      System.clearProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\");\n      System.clearProperty(\"solr.zkclienttmeout\");\n      HttpClientUtil.resetHttpClientBuilder();\n      Http2SolrClient.resetSslContextFactory();\n\n      clearNumericTypesProperties();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n\n      StartupLoggingUtils.shutdown();\n\n      IpTables.unblockAllPorts();\n\n      LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);\n      savedClassLogLevels.clear();\n      StartupLoggingUtils.changeLogLevel(initialRootLogLevel);\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    TestInjection.notifyPauseForeverDone();\n    try {\n      try {\n        deleteCore();\n      } catch (Exception e) {\n        log.error(\"Error deleting SolrCore.\");\n      }\n      \n      ExecutorUtil.shutdownAndAwaitTermination(testExecutor);\n\n      resetExceptionIgnores();\n\n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        String orr = clearObjectTrackerAndCheckEmpty(60, false);\n        assertNull(orr, orr);\n      } else {\n        ObjectReleaseTracker.tryClose();\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"solr.v2RealPath\");\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      System.clearProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\");\n      System.clearProperty(\"solr.zkclienttmeout\");\n      HttpClientUtil.resetHttpClientBuilder();\n      Http2SolrClient.resetSslContextFactory();\n\n      clearNumericTypesProperties();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n\n      IpTables.unblockAllPorts();\n\n      LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);\n      savedClassLogLevels.clear();\n      StartupLoggingUtils.changeLogLevel(initialRootLogLevel);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b09263a529ccc99634e455697c798287b964dcb","date":1552241100,"type":3,"author":"erick","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","sourceNew":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    TestInjection.notifyPauseForeverDone();\n    try {\n      try {\n        deleteCore();\n      } catch (Exception e) {\n        log.error(\"Error deleting SolrCore.\");\n      }\n      \n      ExecutorUtil.shutdownAndAwaitTermination(testExecutor);\n\n      resetExceptionIgnores();\n\n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        String orr = clearObjectTrackerAndCheckEmpty(60, false);\n        assertNull(orr, orr);\n      } else {\n        ObjectReleaseTracker.tryClose();\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"solr.v2RealPath\");\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      System.clearProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\");\n      System.clearProperty(\"solr.zkclienttmeout\");\n      HttpClientUtil.resetHttpClientBuilder();\n      Http2SolrClient.resetSslContextFactory();\n\n      clearNumericTypesProperties();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n\n      IpTables.unblockAllPorts();\n\n      LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);\n      savedClassLogLevels.clear();\n      StartupLoggingUtils.changeLogLevel(initialRootLogLevel);\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    TestInjection.notifyPauseForeverDone();\n    try {\n      try {\n        deleteCore();\n      } catch (Exception e) {\n        log.error(\"Error deleting SolrCore.\");\n      }\n      \n      ExecutorUtil.shutdownAndAwaitTermination(testExecutor);\n\n      resetExceptionIgnores();\n\n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        String orr = clearObjectTrackerAndCheckEmpty(60, false);\n        assertNull(orr, orr);\n      } else {\n        ObjectReleaseTracker.tryClose();\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"solr.v2RealPath\");\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      System.clearProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\");\n      System.clearProperty(\"solr.zkclienttmeout\");\n      HttpClientUtil.resetHttpClientBuilder();\n      Http2SolrClient.resetSslContextFactory();\n\n      clearNumericTypesProperties();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n\n      StartupLoggingUtils.shutdown();\n\n      IpTables.unblockAllPorts();\n\n      LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);\n      savedClassLogLevels.clear();\n      StartupLoggingUtils.changeLogLevel(initialRootLogLevel);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1778938cb7fb298e6e07a43e2d5acaf552d61518","date":1559609435,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","sourceNew":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    TestInjection.notifyPauseForeverDone();\n    try {\n      try {\n        deleteCore();\n      } catch (Exception e) {\n        log.error(\"Error deleting SolrCore.\");\n      }\n      \n      ExecutorUtil.shutdownAndAwaitTermination(testExecutor);\n\n      resetExceptionIgnores();\n\n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        String orr = clearObjectTrackerAndCheckEmpty(60, false);\n        assertNull(orr, orr);\n      } else {\n        ObjectReleaseTracker.tryClose();\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"solr.v2RealPath\");\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      System.clearProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\");\n      System.clearProperty(\"solr.zkclienttmeout\");\n      System.clearProperty(ZK_WHITELIST_PROPERTY);\n      HttpClientUtil.resetHttpClientBuilder();\n      Http2SolrClient.resetSslContextFactory();\n\n      clearNumericTypesProperties();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n\n      IpTables.unblockAllPorts();\n\n      LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);\n      savedClassLogLevels.clear();\n      StartupLoggingUtils.changeLogLevel(initialRootLogLevel);\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    TestInjection.notifyPauseForeverDone();\n    try {\n      try {\n        deleteCore();\n      } catch (Exception e) {\n        log.error(\"Error deleting SolrCore.\");\n      }\n      \n      ExecutorUtil.shutdownAndAwaitTermination(testExecutor);\n\n      resetExceptionIgnores();\n\n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        String orr = clearObjectTrackerAndCheckEmpty(60, false);\n        assertNull(orr, orr);\n      } else {\n        ObjectReleaseTracker.tryClose();\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"solr.v2RealPath\");\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      System.clearProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\");\n      System.clearProperty(\"solr.zkclienttmeout\");\n      HttpClientUtil.resetHttpClientBuilder();\n      Http2SolrClient.resetSslContextFactory();\n\n      clearNumericTypesProperties();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n\n      IpTables.unblockAllPorts();\n\n      LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);\n      savedClassLogLevels.clear();\n      StartupLoggingUtils.changeLogLevel(initialRootLogLevel);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1edfe287b5d8d16a9effaad9cf334bedae0c8857","date":1561656486,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","sourceNew":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    TestInjection.notifyPauseForeverDone();\n    try {\n      try {\n        deleteCore();\n      } catch (Exception e) {\n        log.error(\"Error deleting SolrCore.\");\n      }\n      \n      if (null != testExecutor) {\n        ExecutorUtil.shutdownAndAwaitTermination(testExecutor);\n      }\n\n      resetExceptionIgnores();\n\n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        String orr = clearObjectTrackerAndCheckEmpty(60, false);\n        assertNull(orr, orr);\n      } else {\n        ObjectReleaseTracker.tryClose();\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"solr.v2RealPath\");\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      System.clearProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\");\n      System.clearProperty(\"solr.zkclienttmeout\");\n      System.clearProperty(ZK_WHITELIST_PROPERTY);\n      HttpClientUtil.resetHttpClientBuilder();\n      Http2SolrClient.resetSslContextFactory();\n\n      clearNumericTypesProperties();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n\n      IpTables.unblockAllPorts();\n\n      LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);\n      savedClassLogLevels.clear();\n      StartupLoggingUtils.changeLogLevel(initialRootLogLevel);\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    TestInjection.notifyPauseForeverDone();\n    try {\n      try {\n        deleteCore();\n      } catch (Exception e) {\n        log.error(\"Error deleting SolrCore.\");\n      }\n      \n      ExecutorUtil.shutdownAndAwaitTermination(testExecutor);\n\n      resetExceptionIgnores();\n\n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        String orr = clearObjectTrackerAndCheckEmpty(60, false);\n        assertNull(orr, orr);\n      } else {\n        ObjectReleaseTracker.tryClose();\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"solr.v2RealPath\");\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      System.clearProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\");\n      System.clearProperty(\"solr.zkclienttmeout\");\n      System.clearProperty(ZK_WHITELIST_PROPERTY);\n      HttpClientUtil.resetHttpClientBuilder();\n      Http2SolrClient.resetSslContextFactory();\n\n      clearNumericTypesProperties();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n\n      IpTables.unblockAllPorts();\n\n      LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);\n      savedClassLogLevels.clear();\n      StartupLoggingUtils.changeLogLevel(initialRootLogLevel);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bdf107cf16be0f22504ae184fed81596665a244","date":1576012524,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","sourceNew":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    TestInjection.notifyPauseForeverDone();\n    try {\n      try {\n        deleteCore();\n      } catch (Exception e) {\n        log.error(\"Error deleting SolrCore.\");\n      }\n      \n      if (null != testExecutor) {\n        ExecutorUtil.shutdownAndAwaitTermination(testExecutor);\n        testExecutor = null;\n      }\n\n      resetExceptionIgnores();\n\n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        String orr = clearObjectTrackerAndCheckEmpty(60, false);\n        assertNull(orr, orr);\n      } else {\n        ObjectReleaseTracker.tryClose();\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"solr.v2RealPath\");\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      System.clearProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\");\n      System.clearProperty(\"solr.zkclienttmeout\");\n      System.clearProperty(ZK_WHITELIST_PROPERTY);\n      HttpClientUtil.resetHttpClientBuilder();\n      Http2SolrClient.resetSslContextFactory();\n\n      clearNumericTypesProperties();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n\n      IpTables.unblockAllPorts();\n\n      LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);\n      savedClassLogLevels.clear();\n      StartupLoggingUtils.changeLogLevel(initialRootLogLevel);\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    TestInjection.notifyPauseForeverDone();\n    try {\n      try {\n        deleteCore();\n      } catch (Exception e) {\n        log.error(\"Error deleting SolrCore.\");\n      }\n      \n      if (null != testExecutor) {\n        ExecutorUtil.shutdownAndAwaitTermination(testExecutor);\n      }\n\n      resetExceptionIgnores();\n\n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        String orr = clearObjectTrackerAndCheckEmpty(60, false);\n        assertNull(orr, orr);\n      } else {\n        ObjectReleaseTracker.tryClose();\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"solr.v2RealPath\");\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      System.clearProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\");\n      System.clearProperty(\"solr.zkclienttmeout\");\n      System.clearProperty(ZK_WHITELIST_PROPERTY);\n      HttpClientUtil.resetHttpClientBuilder();\n      Http2SolrClient.resetSslContextFactory();\n\n      clearNumericTypesProperties();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n\n      IpTables.unblockAllPorts();\n\n      LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);\n      savedClassLogLevels.clear();\n      StartupLoggingUtils.changeLogLevel(initialRootLogLevel);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a229cb50768e988c50a2106bdae3a92154f428bf","date":1576051038,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","sourceNew":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    TestInjection.notifyPauseForeverDone();\n    try {\n      try {\n        deleteCore();\n      } catch (Exception e) {\n        log.error(\"Error deleting SolrCore.\");\n      }\n      \n      if (null != testExecutor) {\n        ExecutorUtil.shutdownAndAwaitTermination(testExecutor);\n        testExecutor = null;\n      }\n\n      resetExceptionIgnores();\n\n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        String orr = clearObjectTrackerAndCheckEmpty(60, false);\n        assertNull(orr, orr);\n      } else {\n        ObjectReleaseTracker.tryClose();\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"solr.v2RealPath\");\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      System.clearProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\");\n      System.clearProperty(\"solr.zkclienttmeout\");\n      System.clearProperty(ZK_WHITELIST_PROPERTY);\n      HttpClientUtil.resetHttpClientBuilder();\n      Http2SolrClient.resetSslContextFactory();\n\n      clearNumericTypesProperties();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n\n      IpTables.unblockAllPorts();\n\n      LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);\n      savedClassLogLevels.clear();\n      StartupLoggingUtils.changeLogLevel(initialRootLogLevel);\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    TestInjection.notifyPauseForeverDone();\n    try {\n      try {\n        deleteCore();\n      } catch (Exception e) {\n        log.error(\"Error deleting SolrCore.\");\n      }\n      \n      if (null != testExecutor) {\n        ExecutorUtil.shutdownAndAwaitTermination(testExecutor);\n      }\n\n      resetExceptionIgnores();\n\n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        String orr = clearObjectTrackerAndCheckEmpty(60, false);\n        assertNull(orr, orr);\n      } else {\n        ObjectReleaseTracker.tryClose();\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"solr.v2RealPath\");\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      System.clearProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\");\n      System.clearProperty(\"solr.zkclienttmeout\");\n      System.clearProperty(ZK_WHITELIST_PROPERTY);\n      HttpClientUtil.resetHttpClientBuilder();\n      Http2SolrClient.resetSslContextFactory();\n\n      clearNumericTypesProperties();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n\n      IpTables.unblockAllPorts();\n\n      LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);\n      savedClassLogLevels.clear();\n      StartupLoggingUtils.changeLogLevel(initialRootLogLevel);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c38d3299f414132db022cec9d60b2dafc244a7c3","date":1597046674,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#teardownTestCases().mjava","sourceNew":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    TestInjection.notifyPauseForeverDone();\n    try {\n      try {\n        deleteCore();\n      } catch (Exception e) {\n        log.error(\"Error deleting SolrCore.\");\n      }\n      \n      if (null != testExecutor) {\n        ExecutorUtil.shutdownAndAwaitTermination(testExecutor);\n        testExecutor = null;\n      }\n\n      resetExceptionIgnores();\n\n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        String orr = clearObjectTrackerAndCheckEmpty(60, false);\n        assertNull(orr, orr);\n      } else {\n        ObjectReleaseTracker.tryClose();\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"solr.v2RealPath\");\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\");\n      System.clearProperty(\"solr.zkclienttmeout\");\n      System.clearProperty(ZK_WHITELIST_PROPERTY);\n      HttpClientUtil.resetHttpClientBuilder();\n      Http2SolrClient.resetSslContextFactory();\n\n      clearNumericTypesProperties();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n\n      IpTables.unblockAllPorts();\n\n      LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);\n      savedClassLogLevels.clear();\n      StartupLoggingUtils.changeLogLevel(initialRootLogLevel);\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void teardownTestCases() throws Exception {\n    TestInjection.notifyPauseForeverDone();\n    try {\n      try {\n        deleteCore();\n      } catch (Exception e) {\n        log.error(\"Error deleting SolrCore.\");\n      }\n      \n      if (null != testExecutor) {\n        ExecutorUtil.shutdownAndAwaitTermination(testExecutor);\n        testExecutor = null;\n      }\n\n      resetExceptionIgnores();\n\n      if (suiteFailureMarker.wasSuccessful()) {\n        // if the tests passed, make sure everything was closed / released\n        String orr = clearObjectTrackerAndCheckEmpty(60, false);\n        assertNull(orr, orr);\n      } else {\n        ObjectReleaseTracker.tryClose();\n      }\n      resetFactory();\n      coreName = DEFAULT_TEST_CORENAME;\n    } finally {\n      ObjectReleaseTracker.clear();\n      TestInjection.reset();\n      initCoreDataDir = null;\n      System.clearProperty(\"solr.v2RealPath\");\n      System.clearProperty(\"zookeeper.forceSync\");\n      System.clearProperty(\"jetty.testMode\");\n      System.clearProperty(\"tests.shardhandler.randomSeed\");\n      System.clearProperty(\"enable.update.log\");\n      System.clearProperty(\"useCompoundFile\");\n      System.clearProperty(\"urlScheme\");\n      System.clearProperty(\"solr.peerSync.useRangeVersions\");\n      System.clearProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\");\n      System.clearProperty(\"solr.zkclienttmeout\");\n      System.clearProperty(ZK_WHITELIST_PROPERTY);\n      HttpClientUtil.resetHttpClientBuilder();\n      Http2SolrClient.resetSslContextFactory();\n\n      clearNumericTypesProperties();\n\n      // clean up static\n      sslConfig = null;\n      testSolrHome = null;\n\n      IpTables.unblockAllPorts();\n\n      LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);\n      savedClassLogLevels.clear();\n      StartupLoggingUtils.changeLogLevel(initialRootLogLevel);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ad28156288ac00b91352582904d97e6653205757":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"b31ebc7a867ddea79d438a8fca876a94e644d11a":["ed2d3cbea990a1cd6c54a591a294f629964b01be","767d389403b701039ee599ec2ac8a838f45d8cb7"],"df00ac20ec618ed997bacca597432d686193362d":["28288370235ed02234a64753cdbf0c6ec096304a","596226608eb15ccf94c77978c3aeda172973d10b"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["df00ac20ec618ed997bacca597432d686193362d"],"1edfe287b5d8d16a9effaad9cf334bedae0c8857":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"596226608eb15ccf94c77978c3aeda172973d10b":["28288370235ed02234a64753cdbf0c6ec096304a"],"fc16166e6be86e96c196f31854d639cd63cb57dd":["126d6ad24eed13163ba0959435d5a80e5672837c"],"5832050525b97d61021a45dac2330a707639600d":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"7b09263a529ccc99634e455697c798287b964dcb":["0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"0ea06b0afe55bb7add9a9a04d27e87c497480e33":["ad28156288ac00b91352582904d97e6653205757"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["ed2d3cbea990a1cd6c54a591a294f629964b01be","767d389403b701039ee599ec2ac8a838f45d8cb7"],"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["9894a2a817cb3ddfbf5fbe786760441068fb1404"],"e511b092029d56e0d4e30204fba8509c1c2647b6":["80ef99614729c6d6fb7f8a9055a7a442efa87cf8"],"a229cb50768e988c50a2106bdae3a92154f428bf":["1edfe287b5d8d16a9effaad9cf334bedae0c8857","6bdf107cf16be0f22504ae184fed81596665a244"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","df00ac20ec618ed997bacca597432d686193362d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["8381eb1cd44d2e0defb52130de3295a576ac1e7b","fc16166e6be86e96c196f31854d639cd63cb57dd"],"9894a2a817cb3ddfbf5fbe786760441068fb1404":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"80ef99614729c6d6fb7f8a9055a7a442efa87cf8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"351efe6fdecf9af62134d37ec2582e4a0331a4dc":["767d389403b701039ee599ec2ac8a838f45d8cb7"],"8381eb1cd44d2e0defb52130de3295a576ac1e7b":["80ef99614729c6d6fb7f8a9055a7a442efa87cf8","e511b092029d56e0d4e30204fba8509c1c2647b6"],"c38d3299f414132db022cec9d60b2dafc244a7c3":["6bdf107cf16be0f22504ae184fed81596665a244"],"03eba9c92a74d53b4960d4098c9dd0f67b459468":["8381eb1cd44d2e0defb52130de3295a576ac1e7b"],"767d389403b701039ee599ec2ac8a838f45d8cb7":["ed2d3cbea990a1cd6c54a591a294f629964b01be"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["e9017cf144952056066919f1ebc7897ff9bd71b1","351efe6fdecf9af62134d37ec2582e4a0331a4dc"],"28288370235ed02234a64753cdbf0c6ec096304a":["767d389403b701039ee599ec2ac8a838f45d8cb7","351efe6fdecf9af62134d37ec2582e4a0331a4dc"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"126d6ad24eed13163ba0959435d5a80e5672837c":["8381eb1cd44d2e0defb52130de3295a576ac1e7b","03eba9c92a74d53b4960d4098c9dd0f67b459468"],"ed2d3cbea990a1cd6c54a591a294f629964b01be":["0ea06b0afe55bb7add9a9a04d27e87c497480e33"],"6bdf107cf16be0f22504ae184fed81596665a244":["1edfe287b5d8d16a9effaad9cf334bedae0c8857"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["7b09263a529ccc99634e455697c798287b964dcb"],"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4":["1a77e5e21cbd575a8240b0e3926164f15295f4e8","5832050525b97d61021a45dac2330a707639600d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c38d3299f414132db022cec9d60b2dafc244a7c3"]},"commit2Childs":{"ad28156288ac00b91352582904d97e6653205757":["0ea06b0afe55bb7add9a9a04d27e87c497480e33"],"b31ebc7a867ddea79d438a8fca876a94e644d11a":[],"df00ac20ec618ed997bacca597432d686193362d":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["9894a2a817cb3ddfbf5fbe786760441068fb1404"],"596226608eb15ccf94c77978c3aeda172973d10b":["df00ac20ec618ed997bacca597432d686193362d"],"1edfe287b5d8d16a9effaad9cf334bedae0c8857":["a229cb50768e988c50a2106bdae3a92154f428bf","6bdf107cf16be0f22504ae184fed81596665a244"],"fc16166e6be86e96c196f31854d639cd63cb57dd":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"5832050525b97d61021a45dac2330a707639600d":["0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"7b09263a529ccc99634e455697c798287b964dcb":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"0ea06b0afe55bb7add9a9a04d27e87c497480e33":["ed2d3cbea990a1cd6c54a591a294f629964b01be"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["5832050525b97d61021a45dac2330a707639600d","0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"e511b092029d56e0d4e30204fba8509c1c2647b6":["8381eb1cd44d2e0defb52130de3295a576ac1e7b"],"a229cb50768e988c50a2106bdae3a92154f428bf":[],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["ad28156288ac00b91352582904d97e6653205757","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["80ef99614729c6d6fb7f8a9055a7a442efa87cf8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9894a2a817cb3ddfbf5fbe786760441068fb1404":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"80ef99614729c6d6fb7f8a9055a7a442efa87cf8":["e511b092029d56e0d4e30204fba8509c1c2647b6","8381eb1cd44d2e0defb52130de3295a576ac1e7b"],"351efe6fdecf9af62134d37ec2582e4a0331a4dc":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"8381eb1cd44d2e0defb52130de3295a576ac1e7b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","03eba9c92a74d53b4960d4098c9dd0f67b459468","126d6ad24eed13163ba0959435d5a80e5672837c"],"c38d3299f414132db022cec9d60b2dafc244a7c3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"03eba9c92a74d53b4960d4098c9dd0f67b459468":["126d6ad24eed13163ba0959435d5a80e5672837c"],"767d389403b701039ee599ec2ac8a838f45d8cb7":["b31ebc7a867ddea79d438a8fca876a94e644d11a","e9017cf144952056066919f1ebc7897ff9bd71b1","351efe6fdecf9af62134d37ec2582e4a0331a4dc","28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"28288370235ed02234a64753cdbf0c6ec096304a":["df00ac20ec618ed997bacca597432d686193362d","596226608eb15ccf94c77978c3aeda172973d10b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"126d6ad24eed13163ba0959435d5a80e5672837c":["fc16166e6be86e96c196f31854d639cd63cb57dd"],"ed2d3cbea990a1cd6c54a591a294f629964b01be":["b31ebc7a867ddea79d438a8fca876a94e644d11a","e9017cf144952056066919f1ebc7897ff9bd71b1","767d389403b701039ee599ec2ac8a838f45d8cb7"],"6bdf107cf16be0f22504ae184fed81596665a244":["a229cb50768e988c50a2106bdae3a92154f428bf","c38d3299f414132db022cec9d60b2dafc244a7c3"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["1edfe287b5d8d16a9effaad9cf334bedae0c8857"],"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4":["7b09263a529ccc99634e455697c798287b964dcb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b31ebc7a867ddea79d438a8fca876a94e644d11a","a229cb50768e988c50a2106bdae3a92154f428bf","3a7809d1d753b67f48b1a706e17034bf8b624ea3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}