{"path":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#populateFieldInfo(IndexSchema,Map[String,List[String]],SimpleOrderedMap[Object],SchemaField,SchemaField).mjava","commits":[{"id":"0d2039f9b69cef7b394370ee828e100bc25233e1","date":1205614161,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#populateFieldInfo(IndexSchema,Map[String,List[String]],SimpleOrderedMap[Object],SchemaField,SchemaField).mjava","pathOld":"/dev/null","sourceNew":"  private static void populateFieldInfo(IndexSchema schema,\n\t\tMap<String, List<String>> typeusemap, SimpleOrderedMap<Object> fields,\n\t\tSchemaField uniqueField, SchemaField f) {\n      FieldType ft = f.getType();\n      SimpleOrderedMap<Object> field = new SimpleOrderedMap<Object>();\n      field.add( \"type\", ft.getTypeName() );\n      field.add( \"flags\", getFieldFlags(f) );\n      if( f.isRequired() ) {\n        field.add( \"required\", f.isRequired() );\n      }\n      if( f.getDefaultValue() != null ) {\n        field.add( \"default\", f.getDefaultValue() );\n      }\n      if (f == uniqueField){\n        field.add(\"uniqueKey\", true);\n      }\n      if (ft.getAnalyzer().getPositionIncrementGap(f.getName()) != 0) {\n    \t  field.add(\"positionIncrementGap\", ft.getAnalyzer().getPositionIncrementGap(f.getName()));\n      }\n      field.add(\"copyDests\", schema.getCopyFields(f.getName()));\n      field.add(\"copySources\", schema.getCopySources(f.getName()));\n\n      \n      fields.add( f.getName(), field );\n      \n      List<String> v = typeusemap.get( ft.getTypeName() );\n      if( v == null ) {\n        v = new ArrayList<String>();\n      }\n      v.add( f.getName() );\n      typeusemap.put( ft.getTypeName(), v );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#populateFieldInfo(IndexSchema,Map[String,List[String]],SimpleOrderedMap[Object],SchemaField,SchemaField).mjava","pathOld":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#populateFieldInfo(IndexSchema,Map[String,List[String]],SimpleOrderedMap[Object],SchemaField,SchemaField).mjava","sourceNew":"  private static void populateFieldInfo(IndexSchema schema,\n\t\tMap<String, List<String>> typeusemap, SimpleOrderedMap<Object> fields,\n\t\tSchemaField uniqueField, SchemaField f) {\n      FieldType ft = f.getType();\n      SimpleOrderedMap<Object> field = new SimpleOrderedMap<Object>();\n      field.add( \"type\", ft.getTypeName() );\n      field.add( \"flags\", getFieldFlags(f) );\n      if( f.isRequired() ) {\n        field.add( \"required\", f.isRequired() );\n      }\n      if( f.getDefaultValue() != null ) {\n        field.add( \"default\", f.getDefaultValue() );\n      }\n      if (f == uniqueField){\n        field.add(\"uniqueKey\", true);\n      }\n      if (ft.getAnalyzer().getPositionIncrementGap(f.getName()) != 0) {\n    \t  field.add(\"positionIncrementGap\", ft.getAnalyzer().getPositionIncrementGap(f.getName()));\n      }\n      field.add(\"copyDests\", schema.getCopyFields(f.getName()));\n      field.add(\"copySources\", schema.getCopySources(f.getName()));\n\n      \n      fields.add( f.getName(), field );\n      \n      List<String> v = typeusemap.get( ft.getTypeName() );\n      if( v == null ) {\n        v = new ArrayList<String>();\n      }\n      v.add( f.getName() );\n      typeusemap.put( ft.getTypeName(), v );\n  }\n\n","sourceOld":"  private static void populateFieldInfo(IndexSchema schema,\n\t\tMap<String, List<String>> typeusemap, SimpleOrderedMap<Object> fields,\n\t\tSchemaField uniqueField, SchemaField f) {\n      FieldType ft = f.getType();\n      SimpleOrderedMap<Object> field = new SimpleOrderedMap<Object>();\n      field.add( \"type\", ft.getTypeName() );\n      field.add( \"flags\", getFieldFlags(f) );\n      if( f.isRequired() ) {\n        field.add( \"required\", f.isRequired() );\n      }\n      if( f.getDefaultValue() != null ) {\n        field.add( \"default\", f.getDefaultValue() );\n      }\n      if (f == uniqueField){\n        field.add(\"uniqueKey\", true);\n      }\n      if (ft.getAnalyzer().getPositionIncrementGap(f.getName()) != 0) {\n    \t  field.add(\"positionIncrementGap\", ft.getAnalyzer().getPositionIncrementGap(f.getName()));\n      }\n      field.add(\"copyDests\", schema.getCopyFields(f.getName()));\n      field.add(\"copySources\", schema.getCopySources(f.getName()));\n\n      \n      fields.add( f.getName(), field );\n      \n      List<String> v = typeusemap.get( ft.getTypeName() );\n      if( v == null ) {\n        v = new ArrayList<String>();\n      }\n      v.add( f.getName() );\n      typeusemap.put( ft.getTypeName(), v );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d2039f9b69cef7b394370ee828e100bc25233e1":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["0d2039f9b69cef7b394370ee828e100bc25233e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0d2039f9b69cef7b394370ee828e100bc25233e1":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0d2039f9b69cef7b394370ee828e100bc25233e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}