{"path":"lucene/core/src/java/org/apache/lucene/util/CommandLineUtil#newFSDirectory(Class[#-extends-FSDirectory],Path).mjava","commits":[{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/CommandLineUtil#newFSDirectory(Class[#-extends-FSDirectory],Path).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/CommandLineUtil#newFSDirectory(Class[#-extends-FSDirectory],File).mjava","sourceNew":"  /**\n   * Creates a new specific FSDirectory instance\n   * @param clazz The class of the object to be created\n   * @param path The file to be used as parameter constructor\n   * @return The new FSDirectory instance\n   * @throws NoSuchMethodException If the Directory does not have a constructor that takes <code>Path</code>.\n   * @throws InstantiationException If the class is abstract or an interface.\n   * @throws IllegalAccessException If the constructor does not have public visibility.\n   * @throws InvocationTargetException If the constructor throws an exception\n   */\n  public static FSDirectory newFSDirectory(Class<? extends FSDirectory> clazz, Path path) \n      throws NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {\n    // Assuming every FSDirectory has a ctor(Path):\n    Constructor<? extends FSDirectory> ctor = clazz.getConstructor(Path.class);\n    return ctor.newInstance(path);\n  }\n\n","sourceOld":"  /**\n   * Creates a new specific FSDirectory instance\n   * @param clazz The class of the object to be created\n   * @param file The file to be used as parameter constructor\n   * @return The new FSDirectory instance\n   * @throws NoSuchMethodException If the Directory does not have a constructor that takes <code>File</code>.\n   * @throws InstantiationException If the class is abstract or an interface.\n   * @throws IllegalAccessException If the constructor does not have public visibility.\n   * @throws InvocationTargetException If the constructor throws an exception\n   */\n  public static FSDirectory newFSDirectory(Class<? extends FSDirectory> clazz, File file) \n      throws NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {\n    // Assuming every FSDirectory has a ctor(File):\n    Constructor<? extends FSDirectory> ctor = clazz.getConstructor(File.class);\n    return ctor.newInstance(file);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285cdc737de75b7cc7c284a156b20214deb67bca","date":1415535483,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/CommandLineUtil#newFSDirectory(Class[#-extends-FSDirectory],Path).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/CommandLineUtil#newFSDirectory(Class[#-extends-FSDirectory],Path).mjava","sourceNew":"  /**\n   * Creates a new specific FSDirectory instance\n   * @param clazz The class of the object to be created\n   * @param path The file to be used as parameter constructor\n   * @return The new FSDirectory instance\n   * @throws NoSuchMethodException If the Directory does not have a constructor that takes <code>Path</code>.\n   * @throws InstantiationException If the class is abstract or an interface.\n   * @throws IllegalAccessException If the constructor does not have public visibility.\n   * @throws InvocationTargetException If the constructor throws an exception\n   */\n  public static FSDirectory newFSDirectory(Class<? extends FSDirectory> clazz, Path path) \n      throws ReflectiveOperationException {\n    return newFSDirectory(clazz, path, FSLockFactory.getDefault());\n  }\n\n","sourceOld":"  /**\n   * Creates a new specific FSDirectory instance\n   * @param clazz The class of the object to be created\n   * @param path The file to be used as parameter constructor\n   * @return The new FSDirectory instance\n   * @throws NoSuchMethodException If the Directory does not have a constructor that takes <code>Path</code>.\n   * @throws InstantiationException If the class is abstract or an interface.\n   * @throws IllegalAccessException If the constructor does not have public visibility.\n   * @throws InvocationTargetException If the constructor throws an exception\n   */\n  public static FSDirectory newFSDirectory(Class<? extends FSDirectory> clazz, Path path) \n      throws NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {\n    // Assuming every FSDirectory has a ctor(Path):\n    Constructor<? extends FSDirectory> ctor = clazz.getConstructor(Path.class);\n    return ctor.newInstance(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"285cdc737de75b7cc7c284a156b20214deb67bca":["f4abec28b874149a7223e32cc7a01704c27790de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4abec28b874149a7223e32cc7a01704c27790de":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["285cdc737de75b7cc7c284a156b20214deb67bca"]},"commit2Childs":{"285cdc737de75b7cc7c284a156b20214deb67bca":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f4abec28b874149a7223e32cc7a01704c27790de"],"f4abec28b874149a7223e32cc7a01704c27790de":["285cdc737de75b7cc7c284a156b20214deb67bca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}