{"path":"lucene/misc/src/java/org/apache/lucene/document/InetAddressPoint#newSetQuery(String,InetAddress...).mjava","commits":[{"id":"4a52b01a73cacbd2d360240e72d64c0ba353618f","date":1489389749,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/document/InetAddressPoint#newSetQuery(String,InetAddress...).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newSetQuery(String,InetAddress...).mjava","sourceNew":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param values all values to match\n   */\n  public static Query newSetQuery(String field, InetAddress... values) {\n\n    // We must compare the encoded form (InetAddress doesn't implement Comparable, and even if it\n    // did, we do our own thing with ipv4 addresses):\n\n    // NOTE: we could instead convert-per-comparison and save this extra array, at cost of slower sort:\n    byte[][] sortedValues = new byte[values.length][];\n    for(int i=0;i<values.length;i++) {\n      sortedValues[i] = encode(values[i]);\n    }\n\n    Arrays.sort(sortedValues,\n                new Comparator<byte[]>() {\n                  @Override\n                  public int compare(byte[] a, byte[] b) {\n                    return StringHelper.compare(BYTES, a, 0, b, 0);\n                  }\n                });\n\n    final BytesRef encoded = new BytesRef(new byte[BYTES]);\n\n    return new PointInSetQuery(field, 1, BYTES,\n                               new PointInSetQuery.Stream() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == sortedValues.length) {\n                                     return null;\n                                   } else {\n                                     encoded.bytes = sortedValues[upto];\n                                     assert encoded.bytes.length == encoded.length;\n                                     upto++;\n                                     return encoded;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        assert value.length == BYTES;\n        return decode(value).getHostAddress();\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param values all values to match\n   */\n  public static Query newSetQuery(String field, InetAddress... values) {\n\n    // We must compare the encoded form (InetAddress doesn't implement Comparable, and even if it\n    // did, we do our own thing with ipv4 addresses):\n\n    // NOTE: we could instead convert-per-comparison and save this extra array, at cost of slower sort:\n    byte[][] sortedValues = new byte[values.length][];\n    for(int i=0;i<values.length;i++) {\n      sortedValues[i] = encode(values[i]);\n    }\n\n    Arrays.sort(sortedValues,\n                new Comparator<byte[]>() {\n                  @Override\n                  public int compare(byte[] a, byte[] b) {\n                    return StringHelper.compare(BYTES, a, 0, b, 0);\n                  }\n                });\n\n    final BytesRef encoded = new BytesRef(new byte[BYTES]);\n\n    return new PointInSetQuery(field, 1, BYTES,\n                               new PointInSetQuery.Stream() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == sortedValues.length) {\n                                     return null;\n                                   } else {\n                                     encoded.bytes = sortedValues[upto];\n                                     assert encoded.bytes.length == encoded.length;\n                                     upto++;\n                                     return encoded;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        assert value.length == BYTES;\n        return decode(value).getHostAddress();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41f60ea1802fda42d3c91d023406066d00ddb5f8","date":1535615991,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/document/InetAddressPoint#newSetQuery(String,InetAddress...).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/document/InetAddressPoint#newSetQuery(String,InetAddress...).mjava","sourceNew":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param values all values to match\n   */\n  public static Query newSetQuery(String field, InetAddress... values) {\n\n    // We must compare the encoded form (InetAddress doesn't implement Comparable, and even if it\n    // did, we do our own thing with ipv4 addresses):\n\n    // NOTE: we could instead convert-per-comparison and save this extra array, at cost of slower sort:\n    byte[][] sortedValues = new byte[values.length][];\n    for(int i=0;i<values.length;i++) {\n      sortedValues[i] = encode(values[i]);\n    }\n\n    Arrays.sort(sortedValues,\n                new Comparator<byte[]>() {\n                  @Override\n                  public int compare(byte[] a, byte[] b) {\n                    return FutureArrays.compareUnsigned(a, 0, BYTES, b, 0, BYTES);\n                  }\n                });\n\n    final BytesRef encoded = new BytesRef(new byte[BYTES]);\n\n    return new PointInSetQuery(field, 1, BYTES,\n                               new PointInSetQuery.Stream() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == sortedValues.length) {\n                                     return null;\n                                   } else {\n                                     encoded.bytes = sortedValues[upto];\n                                     assert encoded.bytes.length == encoded.length;\n                                     upto++;\n                                     return encoded;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        assert value.length == BYTES;\n        return decode(value).getHostAddress();\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param values all values to match\n   */\n  public static Query newSetQuery(String field, InetAddress... values) {\n\n    // We must compare the encoded form (InetAddress doesn't implement Comparable, and even if it\n    // did, we do our own thing with ipv4 addresses):\n\n    // NOTE: we could instead convert-per-comparison and save this extra array, at cost of slower sort:\n    byte[][] sortedValues = new byte[values.length][];\n    for(int i=0;i<values.length;i++) {\n      sortedValues[i] = encode(values[i]);\n    }\n\n    Arrays.sort(sortedValues,\n                new Comparator<byte[]>() {\n                  @Override\n                  public int compare(byte[] a, byte[] b) {\n                    return StringHelper.compare(BYTES, a, 0, b, 0);\n                  }\n                });\n\n    final BytesRef encoded = new BytesRef(new byte[BYTES]);\n\n    return new PointInSetQuery(field, 1, BYTES,\n                               new PointInSetQuery.Stream() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == sortedValues.length) {\n                                     return null;\n                                   } else {\n                                     encoded.bytes = sortedValues[upto];\n                                     assert encoded.bytes.length == encoded.length;\n                                     upto++;\n                                     return encoded;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        assert value.length == BYTES;\n        return decode(value).getHostAddress();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/document/InetAddressPoint#newSetQuery(String,InetAddress...).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/document/InetAddressPoint#newSetQuery(String,InetAddress...).mjava","sourceNew":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param values all values to match\n   */\n  public static Query newSetQuery(String field, InetAddress... values) {\n\n    // We must compare the encoded form (InetAddress doesn't implement Comparable, and even if it\n    // did, we do our own thing with ipv4 addresses):\n\n    // NOTE: we could instead convert-per-comparison and save this extra array, at cost of slower sort:\n    byte[][] sortedValues = new byte[values.length][];\n    for(int i=0;i<values.length;i++) {\n      sortedValues[i] = encode(values[i]);\n    }\n\n    Arrays.sort(sortedValues,\n                new Comparator<byte[]>() {\n                  @Override\n                  public int compare(byte[] a, byte[] b) {\n                    return Arrays.compareUnsigned(a, 0, BYTES, b, 0, BYTES);\n                  }\n                });\n\n    final BytesRef encoded = new BytesRef(new byte[BYTES]);\n\n    return new PointInSetQuery(field, 1, BYTES,\n                               new PointInSetQuery.Stream() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == sortedValues.length) {\n                                     return null;\n                                   } else {\n                                     encoded.bytes = sortedValues[upto];\n                                     assert encoded.bytes.length == encoded.length;\n                                     upto++;\n                                     return encoded;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        assert value.length == BYTES;\n        return decode(value).getHostAddress();\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param values all values to match\n   */\n  public static Query newSetQuery(String field, InetAddress... values) {\n\n    // We must compare the encoded form (InetAddress doesn't implement Comparable, and even if it\n    // did, we do our own thing with ipv4 addresses):\n\n    // NOTE: we could instead convert-per-comparison and save this extra array, at cost of slower sort:\n    byte[][] sortedValues = new byte[values.length][];\n    for(int i=0;i<values.length;i++) {\n      sortedValues[i] = encode(values[i]);\n    }\n\n    Arrays.sort(sortedValues,\n                new Comparator<byte[]>() {\n                  @Override\n                  public int compare(byte[] a, byte[] b) {\n                    return FutureArrays.compareUnsigned(a, 0, BYTES, b, 0, BYTES);\n                  }\n                });\n\n    final BytesRef encoded = new BytesRef(new byte[BYTES]);\n\n    return new PointInSetQuery(field, 1, BYTES,\n                               new PointInSetQuery.Stream() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == sortedValues.length) {\n                                     return null;\n                                   } else {\n                                     encoded.bytes = sortedValues[upto];\n                                     assert encoded.bytes.length == encoded.length;\n                                     upto++;\n                                     return encoded;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        assert value.length == BYTES;\n        return decode(value).getHostAddress();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["41f60ea1802fda42d3c91d023406066d00ddb5f8"],"41f60ea1802fda42d3c91d023406066d00ddb5f8":["4a52b01a73cacbd2d360240e72d64c0ba353618f"],"4a52b01a73cacbd2d360240e72d64c0ba353618f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b88a121b875f9ae2ac50f85cf46dcb680f126357"]},"commit2Childs":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"41f60ea1802fda42d3c91d023406066d00ddb5f8":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"4a52b01a73cacbd2d360240e72d64c0ba353618f":["41f60ea1802fda42d3c91d023406066d00ddb5f8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4a52b01a73cacbd2d360240e72d64c0ba353618f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}