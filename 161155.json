{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/PreFlexRWSegmentInfosWriter#writeInfo(IndexOutput,SegmentInfo).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/PreFlexRWSegmentInfosWriter#writeInfo(IndexOutput,SegmentInfo).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/codecs/lucene3x/PreFlexRWSegmentInfosWriter#writeInfo(IndexOutput,SegmentInfo).mjava","sourceNew":"  /** Save a single segment's info. */\n  private void writeInfo(IndexOutput output, SegmentInfo si) throws IOException {\n    // we are about to write this SI in 3.x format, dropping all codec information, etc.\n    // so it had better be a 3.x segment or you will get very confusing errors later.\n    assert si.getCodec() instanceof Lucene3xCodec : \"broken test, trying to mix preflex with other codecs\";\n    assert si.getDelCount() <= si.docCount: \"delCount=\" + si.getDelCount() + \" docCount=\" + si.docCount + \" segment=\" + si.name;\n    // Write the Lucene version that created this segment, since 3.1\n    output.writeString(si.getVersion());\n    output.writeString(si.name);\n    output.writeInt(si.docCount);\n    output.writeLong(si.getDelGen());\n\n    output.writeInt(si.getDocStoreOffset());\n    if (si.getDocStoreOffset() != -1) {\n      output.writeString(si.getDocStoreSegment());\n      output.writeByte((byte) (si.getDocStoreIsCompoundFile() ? 1:0));\n    }\n    // pre-4.0 indexes write a byte if there is a single norms file\n    output.writeByte((byte) 1);\n\n    Map<Integer,Long> normGen = si.getNormGen();\n    if (normGen == null) {\n      output.writeInt(SegmentInfo.NO);\n    } else {\n      output.writeInt(normGen.size());\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        output.writeLong(entry.getValue());\n      }\n    }\n\n    output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n    output.writeInt(si.getDelCount());\n    output.writeByte((byte) (si.getHasProxInternal()));\n    output.writeStringStringMap(si.getDiagnostics());\n    output.writeByte((byte) (si.getHasVectorsInternal()));\n  }\n\n","sourceOld":"  /** Save a single segment's info. */\n  private void writeInfo(IndexOutput output, SegmentInfo si) throws IOException {\n    // we are about to write this SI in 3.x format, dropping all codec information, etc.\n    // so it had better be a 3.x segment or you will get very confusing errors later.\n    assert si.getCodec() instanceof Lucene3xCodec : \"broken test, trying to mix preflex with other codecs\";\n    assert si.getDelCount() <= si.docCount: \"delCount=\" + si.getDelCount() + \" docCount=\" + si.docCount + \" segment=\" + si.name;\n    // Write the Lucene version that created this segment, since 3.1\n    output.writeString(si.getVersion());\n    output.writeString(si.name);\n    output.writeInt(si.docCount);\n    output.writeLong(si.getDelGen());\n\n    output.writeInt(si.getDocStoreOffset());\n    if (si.getDocStoreOffset() != -1) {\n      output.writeString(si.getDocStoreSegment());\n      output.writeByte((byte) (si.getDocStoreIsCompoundFile() ? 1:0));\n    }\n    // pre-4.0 indexes write a byte if there is a single norms file\n    output.writeByte((byte) 1);\n\n    Map<Integer,Long> normGen = si.getNormGen();\n    if (normGen == null) {\n      output.writeInt(SegmentInfo.NO);\n    } else {\n      output.writeInt(normGen.size());\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        output.writeLong(entry.getValue());\n      }\n    }\n\n    output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n    output.writeInt(si.getDelCount());\n    output.writeByte((byte) (si.getHasProxInternal()));\n    output.writeStringStringMap(si.getDiagnostics());\n    output.writeByte((byte) (si.getHasVectorsInternal()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2dee33619431ada2a7a07f5fe2dbd94bac6a460","date":1337274029,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/PreFlexRWSegmentInfosWriter#writeInfo(IndexOutput,SegmentInfo).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/PreFlexRWSegmentInfosWriter#writeInfo(IndexOutput,SegmentInfo).mjava","sourceNew":"  /** Save a single segment's info. */\n  private void writeInfo(IndexOutput output, SegmentInfo si) throws IOException {\n    // we are about to write this SI in 3.x format, dropping all codec information, etc.\n    // so it had better be a 3.x segment or you will get very confusing errors later.\n    assert si.getCodec() instanceof Lucene3xCodec : \"broken test, trying to mix preflex with other codecs\";\n    assert si.getDelCount() <= si.docCount: \"delCount=\" + si.getDelCount() + \" docCount=\" + si.docCount + \" segment=\" + si.name;\n    // Write the Lucene version that created this segment, since 3.1\n    output.writeString(si.getVersion());\n    output.writeString(si.name);\n    output.writeInt(si.docCount);\n    output.writeLong(si.getDelGen());\n\n    output.writeInt(si.getDocStoreOffset());\n    if (si.getDocStoreOffset() != -1) {\n      output.writeString(si.getDocStoreSegment());\n      output.writeByte((byte) (si.getDocStoreIsCompoundFile() ? 1:0));\n    }\n    // pre-4.0 indexes write a byte if there is a single norms file\n    output.writeByte((byte) 1);\n\n    Map<Integer,Long> normGen = si.getNormGen();\n    if (normGen == null) {\n      output.writeInt(SegmentInfo.NO);\n    } else {\n      output.writeInt(normGen.size());\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        output.writeLong(entry.getValue());\n      }\n    }\n\n    output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n    output.writeInt(si.getDelCount());\n    output.writeByte((byte) (si.getHasProx() ? 1 : 0));\n    output.writeStringStringMap(si.getDiagnostics());\n    output.writeByte((byte) (si.getHasVectors() ? 1: 0));\n  }\n\n","sourceOld":"  /** Save a single segment's info. */\n  private void writeInfo(IndexOutput output, SegmentInfo si) throws IOException {\n    // we are about to write this SI in 3.x format, dropping all codec information, etc.\n    // so it had better be a 3.x segment or you will get very confusing errors later.\n    assert si.getCodec() instanceof Lucene3xCodec : \"broken test, trying to mix preflex with other codecs\";\n    assert si.getDelCount() <= si.docCount: \"delCount=\" + si.getDelCount() + \" docCount=\" + si.docCount + \" segment=\" + si.name;\n    // Write the Lucene version that created this segment, since 3.1\n    output.writeString(si.getVersion());\n    output.writeString(si.name);\n    output.writeInt(si.docCount);\n    output.writeLong(si.getDelGen());\n\n    output.writeInt(si.getDocStoreOffset());\n    if (si.getDocStoreOffset() != -1) {\n      output.writeString(si.getDocStoreSegment());\n      output.writeByte((byte) (si.getDocStoreIsCompoundFile() ? 1:0));\n    }\n    // pre-4.0 indexes write a byte if there is a single norms file\n    output.writeByte((byte) 1);\n\n    Map<Integer,Long> normGen = si.getNormGen();\n    if (normGen == null) {\n      output.writeInt(SegmentInfo.NO);\n    } else {\n      output.writeInt(normGen.size());\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        output.writeLong(entry.getValue());\n      }\n    }\n\n    output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n    output.writeInt(si.getDelCount());\n    output.writeByte((byte) (si.getHasProxInternal()));\n    output.writeStringStringMap(si.getDiagnostics());\n    output.writeByte((byte) (si.getHasVectorsInternal()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a8b14bc4241c302311422d5c6f7627f8febb86e","date":1337291675,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/PreFlexRWSegmentInfosWriter#writeInfo(IndexOutput,SegmentInfo).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/PreFlexRWSegmentInfosWriter#writeInfo(IndexOutput,SegmentInfo).mjava","sourceNew":"  /** Save a single segment's info. */\n  private void writeInfo(IndexOutput output, SegmentInfo si) throws IOException {\n    // we are about to write this SI in 3.x format, dropping all codec information, etc.\n    // so it had better be a 3.x segment or you will get very confusing errors later.\n    assert si.getCodec() instanceof Lucene3xCodec : \"broken test, trying to mix preflex with other codecs\";\n    assert si.getDelCount() <= si.docCount: \"delCount=\" + si.getDelCount() + \" docCount=\" + si.docCount + \" segment=\" + si.name;\n    // Write the Lucene version that created this segment, since 3.1\n    output.writeString(si.getVersion());\n    output.writeString(si.name);\n    output.writeInt(si.docCount);\n    output.writeLong(si.getDelGen());\n\n    output.writeInt(si.getDocStoreOffset());\n    if (si.getDocStoreOffset() != -1) {\n      output.writeString(si.getDocStoreSegment());\n      output.writeByte((byte) (si.getDocStoreIsCompoundFile() ? 1:0));\n    }\n    // pre-4.0 indexes write a byte if there is a single norms file\n    output.writeByte((byte) 1);\n\n    Map<Integer,Long> normGen = si.getNormGen();\n    if (normGen == null) {\n      output.writeInt(SegmentInfo.NO);\n    } else {\n      output.writeInt(normGen.size());\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        output.writeLong(entry.getValue());\n      }\n    }\n\n    output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n    output.writeInt(si.getDelCount());\n    output.writeByte((byte) (si.getHasProx() ? 1 : 0));\n    output.writeStringStringMap(si.getDiagnostics());\n    output.writeByte((byte) 1);\n  }\n\n","sourceOld":"  /** Save a single segment's info. */\n  private void writeInfo(IndexOutput output, SegmentInfo si) throws IOException {\n    // we are about to write this SI in 3.x format, dropping all codec information, etc.\n    // so it had better be a 3.x segment or you will get very confusing errors later.\n    assert si.getCodec() instanceof Lucene3xCodec : \"broken test, trying to mix preflex with other codecs\";\n    assert si.getDelCount() <= si.docCount: \"delCount=\" + si.getDelCount() + \" docCount=\" + si.docCount + \" segment=\" + si.name;\n    // Write the Lucene version that created this segment, since 3.1\n    output.writeString(si.getVersion());\n    output.writeString(si.name);\n    output.writeInt(si.docCount);\n    output.writeLong(si.getDelGen());\n\n    output.writeInt(si.getDocStoreOffset());\n    if (si.getDocStoreOffset() != -1) {\n      output.writeString(si.getDocStoreSegment());\n      output.writeByte((byte) (si.getDocStoreIsCompoundFile() ? 1:0));\n    }\n    // pre-4.0 indexes write a byte if there is a single norms file\n    output.writeByte((byte) 1);\n\n    Map<Integer,Long> normGen = si.getNormGen();\n    if (normGen == null) {\n      output.writeInt(SegmentInfo.NO);\n    } else {\n      output.writeInt(normGen.size());\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        output.writeLong(entry.getValue());\n      }\n    }\n\n    output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n    output.writeInt(si.getDelCount());\n    output.writeByte((byte) (si.getHasProx() ? 1 : 0));\n    output.writeStringStringMap(si.getDiagnostics());\n    output.writeByte((byte) (si.getHasVectors() ? 1: 0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc97c61094c5498702b29cc2e8309beac50c23dc","date":1337293692,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/PreFlexRWSegmentInfosWriter#writeInfo(IndexOutput,SegmentInfo).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/PreFlexRWSegmentInfosWriter#writeInfo(IndexOutput,SegmentInfo).mjava","sourceNew":"  /** Save a single segment's info. */\n  private void writeInfo(IndexOutput output, SegmentInfo si) throws IOException {\n    // we are about to write this SI in 3.x format, dropping all codec information, etc.\n    // so it had better be a 3.x segment or you will get very confusing errors later.\n    assert si.getCodec() instanceof Lucene3xCodec : \"broken test, trying to mix preflex with other codecs\";\n    assert si.getDelCount() <= si.docCount: \"delCount=\" + si.getDelCount() + \" docCount=\" + si.docCount + \" segment=\" + si.name;\n    // Write the Lucene version that created this segment, since 3.1\n    output.writeString(si.getVersion());\n    output.writeString(si.name);\n    output.writeInt(si.docCount);\n    output.writeLong(si.getDelGen());\n\n    output.writeInt(si.getDocStoreOffset());\n    if (si.getDocStoreOffset() != -1) {\n      output.writeString(si.getDocStoreSegment());\n      output.writeByte((byte) (si.getDocStoreIsCompoundFile() ? 1:0));\n    }\n    // pre-4.0 indexes write a byte if there is a single norms file\n    output.writeByte((byte) 1);\n\n    Map<Integer,Long> normGen = si.getNormGen();\n    if (normGen == null) {\n      output.writeInt(SegmentInfo.NO);\n    } else {\n      output.writeInt(normGen.size());\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        output.writeLong(entry.getValue());\n      }\n    }\n\n    output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n    output.writeInt(si.getDelCount());\n    // hasProx:\n    output.writeByte((byte) 1);\n    output.writeStringStringMap(si.getDiagnostics());\n    // hasVectors:\n    output.writeByte((byte) 1);\n  }\n\n","sourceOld":"  /** Save a single segment's info. */\n  private void writeInfo(IndexOutput output, SegmentInfo si) throws IOException {\n    // we are about to write this SI in 3.x format, dropping all codec information, etc.\n    // so it had better be a 3.x segment or you will get very confusing errors later.\n    assert si.getCodec() instanceof Lucene3xCodec : \"broken test, trying to mix preflex with other codecs\";\n    assert si.getDelCount() <= si.docCount: \"delCount=\" + si.getDelCount() + \" docCount=\" + si.docCount + \" segment=\" + si.name;\n    // Write the Lucene version that created this segment, since 3.1\n    output.writeString(si.getVersion());\n    output.writeString(si.name);\n    output.writeInt(si.docCount);\n    output.writeLong(si.getDelGen());\n\n    output.writeInt(si.getDocStoreOffset());\n    if (si.getDocStoreOffset() != -1) {\n      output.writeString(si.getDocStoreSegment());\n      output.writeByte((byte) (si.getDocStoreIsCompoundFile() ? 1:0));\n    }\n    // pre-4.0 indexes write a byte if there is a single norms file\n    output.writeByte((byte) 1);\n\n    Map<Integer,Long> normGen = si.getNormGen();\n    if (normGen == null) {\n      output.writeInt(SegmentInfo.NO);\n    } else {\n      output.writeInt(normGen.size());\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        output.writeLong(entry.getValue());\n      }\n    }\n\n    output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n    output.writeInt(si.getDelCount());\n    output.writeByte((byte) (si.getHasProx() ? 1 : 0));\n    output.writeStringStringMap(si.getDiagnostics());\n    output.writeByte((byte) 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4356000e349e38c9fb48034695b7c309abd54557","date":1337460341,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/PreFlexRWSegmentInfosWriter#writeInfo(IndexOutput,SegmentInfo).mjava","sourceNew":null,"sourceOld":"  /** Save a single segment's info. */\n  private void writeInfo(IndexOutput output, SegmentInfo si) throws IOException {\n    // we are about to write this SI in 3.x format, dropping all codec information, etc.\n    // so it had better be a 3.x segment or you will get very confusing errors later.\n    assert si.getCodec() instanceof Lucene3xCodec : \"broken test, trying to mix preflex with other codecs\";\n    assert si.getDelCount() <= si.docCount: \"delCount=\" + si.getDelCount() + \" docCount=\" + si.docCount + \" segment=\" + si.name;\n    // Write the Lucene version that created this segment, since 3.1\n    output.writeString(si.getVersion());\n    output.writeString(si.name);\n    output.writeInt(si.docCount);\n    output.writeLong(si.getDelGen());\n\n    output.writeInt(si.getDocStoreOffset());\n    if (si.getDocStoreOffset() != -1) {\n      output.writeString(si.getDocStoreSegment());\n      output.writeByte((byte) (si.getDocStoreIsCompoundFile() ? 1:0));\n    }\n    // pre-4.0 indexes write a byte if there is a single norms file\n    output.writeByte((byte) 1);\n\n    Map<Integer,Long> normGen = si.getNormGen();\n    if (normGen == null) {\n      output.writeInt(SegmentInfo.NO);\n    } else {\n      output.writeInt(normGen.size());\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        output.writeLong(entry.getValue());\n      }\n    }\n\n    output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n    output.writeInt(si.getDelCount());\n    // hasProx:\n    output.writeByte((byte) 1);\n    output.writeStringStringMap(si.getDiagnostics());\n    // hasVectors:\n    output.writeByte((byte) 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/PreFlexRWSegmentInfosWriter#writeInfo(IndexOutput,SegmentInfo).mjava","sourceNew":null,"sourceOld":"  /** Save a single segment's info. */\n  private void writeInfo(IndexOutput output, SegmentInfo si) throws IOException {\n    // we are about to write this SI in 3.x format, dropping all codec information, etc.\n    // so it had better be a 3.x segment or you will get very confusing errors later.\n    assert si.getCodec() instanceof Lucene3xCodec : \"broken test, trying to mix preflex with other codecs\";\n    assert si.getDelCount() <= si.docCount: \"delCount=\" + si.getDelCount() + \" docCount=\" + si.docCount + \" segment=\" + si.name;\n    // Write the Lucene version that created this segment, since 3.1\n    output.writeString(si.getVersion());\n    output.writeString(si.name);\n    output.writeInt(si.docCount);\n    output.writeLong(si.getDelGen());\n\n    output.writeInt(si.getDocStoreOffset());\n    if (si.getDocStoreOffset() != -1) {\n      output.writeString(si.getDocStoreSegment());\n      output.writeByte((byte) (si.getDocStoreIsCompoundFile() ? 1:0));\n    }\n    // pre-4.0 indexes write a byte if there is a single norms file\n    output.writeByte((byte) 1);\n\n    Map<Integer,Long> normGen = si.getNormGen();\n    if (normGen == null) {\n      output.writeInt(SegmentInfo.NO);\n    } else {\n      output.writeInt(normGen.size());\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        output.writeLong(entry.getValue());\n      }\n    }\n\n    output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n    output.writeInt(si.getDelCount());\n    output.writeByte((byte) (si.getHasProxInternal()));\n    output.writeStringStringMap(si.getDiagnostics());\n    output.writeByte((byte) (si.getHasVectorsInternal()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4a8b14bc4241c302311422d5c6f7627f8febb86e":["d2dee33619431ada2a7a07f5fe2dbd94bac6a460"],"d2dee33619431ada2a7a07f5fe2dbd94bac6a460":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4356000e349e38c9fb48034695b7c309abd54557"],"4356000e349e38c9fb48034695b7c309abd54557":["dc97c61094c5498702b29cc2e8309beac50c23dc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dc97c61094c5498702b29cc2e8309beac50c23dc":["4a8b14bc4241c302311422d5c6f7627f8febb86e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"]},"commit2Childs":{"4a8b14bc4241c302311422d5c6f7627f8febb86e":["dc97c61094c5498702b29cc2e8309beac50c23dc"],"d2dee33619431ada2a7a07f5fe2dbd94bac6a460":["4a8b14bc4241c302311422d5c6f7627f8febb86e"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4356000e349e38c9fb48034695b7c309abd54557":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d2dee33619431ada2a7a07f5fe2dbd94bac6a460","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"dc97c61094c5498702b29cc2e8309beac50c23dc":["4356000e349e38c9fb48034695b7c309abd54557"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}