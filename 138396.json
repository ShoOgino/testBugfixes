{"path":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#refresh().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#refresh().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#refresh().mjava","sourceNew":"  public void refresh() throws IOException {\n    // Set to null so that we regenerate the list of pending\n    // files; else we can accumulate same file more than\n    // once\n    assert locked();\n    deletable = null;\n    refresh(null);\n  }\n\n","sourceOld":"  public void refresh() throws IOException {\n    // Set to null so that we regenerate the list of pending\n    // files; else we can accumulate same file more than\n    // once\n    assert locked();\n    deletable = null;\n    refresh(null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46e4a8bdfbafda795ef9c39a2bc2d47095770299","date":1410411846,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#refresh().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#refresh().mjava","sourceNew":"  void refresh() throws IOException {\n    // Set to null so that we regenerate the list of pending\n    // files; else we can accumulate same file more than\n    // once\n    assert locked();\n    deletable = null;\n    refresh(null);\n  }\n\n","sourceOld":"  public void refresh() throws IOException {\n    // Set to null so that we regenerate the list of pending\n    // files; else we can accumulate same file more than\n    // once\n    assert locked();\n    deletable = null;\n    refresh(null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"950882a2bd2a5f9dc16a154871584eaa643d882a","date":1436366563,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#refresh().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#refresh().mjava","sourceNew":"  void refresh() throws IOException {\n    assert locked();\n    deletable.clear();\n    refresh(null);\n  }\n\n","sourceOld":"  void refresh() throws IOException {\n    // Set to null so that we regenerate the list of pending\n    // files; else we can accumulate same file more than\n    // once\n    assert locked();\n    deletable = null;\n    refresh(null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aac05884852c2a15a6aa9153063de70dea4fbcae","date":1441829939,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#refresh().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#refresh().mjava","sourceNew":"  /**\n   * Writer calls this when it has hit an error and had to\n   * roll back, to tell us that there may now be\n   * unreferenced files in the filesystem.  So we re-list\n   * the filesystem and delete such files.  If segmentName\n   * is non-null, we will only delete files corresponding to\n   * that segment.\n   */\n  void refresh() throws IOException {\n    assert locked();\n    deletable.clear();\n\n    String[] files = directory.listAll();\n\n    Matcher m = IndexFileNames.CODEC_FILE_PATTERN.matcher(\"\");\n\n    for(int i=0;i<files.length;i++) {\n      String fileName = files[i];\n      m.reset(fileName);\n      if (!fileName.endsWith(\"write.lock\") &&\n          !refCounts.containsKey(fileName) &&\n          (m.matches() || fileName.startsWith(IndexFileNames.SEGMENTS) \n              // we only try to clear out pending_segments_N during rollback(), because we don't ref-count it\n              // TODO: this is sneaky, should we do this, or change TestIWExceptions? rollback closes anyway, and \n              // any leftover file will be deleted/retried on next IW bootup anyway...\n              || fileName.startsWith(IndexFileNames.PENDING_SEGMENTS))) {\n        // Unreferenced file, so remove it\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"refresh: removing newly created unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deletable.add(fileName);\n      }\n    }\n\n    deletePendingFiles();\n  }\n\n","sourceOld":"  void refresh() throws IOException {\n    assert locked();\n    deletable.clear();\n    refresh(null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#refresh().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#refresh().mjava","sourceNew":"  /**\n   * Writer calls this when it has hit an error and had to\n   * roll back, to tell us that there may now be\n   * unreferenced files in the filesystem.  So we re-list\n   * the filesystem and delete such files.  If segmentName\n   * is non-null, we will only delete files corresponding to\n   * that segment.\n   */\n  void refresh() throws IOException {\n    assert locked();\n    Set<String> toDelete = new HashSet<>();\n\n    String[] files = directory.listAll();\n\n    Matcher m = IndexFileNames.CODEC_FILE_PATTERN.matcher(\"\");\n\n    for(int i=0;i<files.length;i++) {\n      String fileName = files[i];\n      m.reset(fileName);\n      if (!fileName.endsWith(\"write.lock\") &&\n          !refCounts.containsKey(fileName) &&\n          (m.matches() || fileName.startsWith(IndexFileNames.SEGMENTS) \n              // we only try to clear out pending_segments_N during rollback(), because we don't ref-count it\n              // TODO: this is sneaky, should we do this, or change TestIWExceptions? rollback closes anyway, and \n              // any leftover file will be deleted/retried on next IW bootup anyway...\n              || fileName.startsWith(IndexFileNames.PENDING_SEGMENTS))) {\n        // Unreferenced file, so remove it\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"refresh: removing newly created unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        toDelete.add(fileName);\n      }\n    }\n\n    deleteFiles(toDelete);\n  }\n\n","sourceOld":"  /**\n   * Writer calls this when it has hit an error and had to\n   * roll back, to tell us that there may now be\n   * unreferenced files in the filesystem.  So we re-list\n   * the filesystem and delete such files.  If segmentName\n   * is non-null, we will only delete files corresponding to\n   * that segment.\n   */\n  void refresh() throws IOException {\n    assert locked();\n    deletable.clear();\n\n    String[] files = directory.listAll();\n\n    Matcher m = IndexFileNames.CODEC_FILE_PATTERN.matcher(\"\");\n\n    for(int i=0;i<files.length;i++) {\n      String fileName = files[i];\n      m.reset(fileName);\n      if (!fileName.endsWith(\"write.lock\") &&\n          !refCounts.containsKey(fileName) &&\n          (m.matches() || fileName.startsWith(IndexFileNames.SEGMENTS) \n              // we only try to clear out pending_segments_N during rollback(), because we don't ref-count it\n              // TODO: this is sneaky, should we do this, or change TestIWExceptions? rollback closes anyway, and \n              // any leftover file will be deleted/retried on next IW bootup anyway...\n              || fileName.startsWith(IndexFileNames.PENDING_SEGMENTS))) {\n        // Unreferenced file, so remove it\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"refresh: removing newly created unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deletable.add(fileName);\n      }\n    }\n\n    deletePendingFiles();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#refresh().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#refresh().mjava","sourceNew":"  /**\n   * Writer calls this when it has hit an error and had to\n   * roll back, to tell us that there may now be\n   * unreferenced files in the filesystem.  So we re-list\n   * the filesystem and delete such files.  If segmentName\n   * is non-null, we will only delete files corresponding to\n   * that segment.\n   */\n  void refresh() throws IOException {\n    assert locked();\n    Set<String> toDelete = new HashSet<>();\n\n    String[] files = directory.listAll();\n\n    Matcher m = IndexFileNames.CODEC_FILE_PATTERN.matcher(\"\");\n\n    for(int i=0;i<files.length;i++) {\n      String fileName = files[i];\n      m.reset(fileName);\n      if (!fileName.endsWith(\"write.lock\") &&\n          !refCounts.containsKey(fileName) &&\n          (m.matches() || fileName.startsWith(IndexFileNames.SEGMENTS) \n              // we only try to clear out pending_segments_N during rollback(), because we don't ref-count it\n              // TODO: this is sneaky, should we do this, or change TestIWExceptions? rollback closes anyway, and \n              // any leftover file will be deleted/retried on next IW bootup anyway...\n              || fileName.startsWith(IndexFileNames.PENDING_SEGMENTS))) {\n        // Unreferenced file, so remove it\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"refresh: removing newly created unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        toDelete.add(fileName);\n      }\n    }\n\n    deleteFiles(toDelete);\n  }\n\n","sourceOld":"  /**\n   * Writer calls this when it has hit an error and had to\n   * roll back, to tell us that there may now be\n   * unreferenced files in the filesystem.  So we re-list\n   * the filesystem and delete such files.  If segmentName\n   * is non-null, we will only delete files corresponding to\n   * that segment.\n   */\n  void refresh() throws IOException {\n    assert locked();\n    deletable.clear();\n\n    String[] files = directory.listAll();\n\n    Matcher m = IndexFileNames.CODEC_FILE_PATTERN.matcher(\"\");\n\n    for(int i=0;i<files.length;i++) {\n      String fileName = files[i];\n      m.reset(fileName);\n      if (!fileName.endsWith(\"write.lock\") &&\n          !refCounts.containsKey(fileName) &&\n          (m.matches() || fileName.startsWith(IndexFileNames.SEGMENTS) \n              // we only try to clear out pending_segments_N during rollback(), because we don't ref-count it\n              // TODO: this is sneaky, should we do this, or change TestIWExceptions? rollback closes anyway, and \n              // any leftover file will be deleted/retried on next IW bootup anyway...\n              || fileName.startsWith(IndexFileNames.PENDING_SEGMENTS))) {\n        // Unreferenced file, so remove it\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"refresh: removing newly created unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deletable.add(fileName);\n      }\n    }\n\n    deletePendingFiles();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#refresh().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#refresh().mjava","sourceNew":"  /**\n   * Writer calls this when it has hit an error and had to\n   * roll back, to tell us that there may now be\n   * unreferenced files in the filesystem.  So we re-list\n   * the filesystem and delete such files.  If segmentName\n   * is non-null, we will only delete files corresponding to\n   * that segment.\n   */\n  void refresh() throws IOException {\n    assert locked();\n    Set<String> toDelete = new HashSet<>();\n\n    String[] files = directory.listAll();\n\n    Matcher m = IndexFileNames.CODEC_FILE_PATTERN.matcher(\"\");\n\n    for(int i=0;i<files.length;i++) {\n      String fileName = files[i];\n      m.reset(fileName);\n      if (!fileName.endsWith(\"write.lock\") &&\n          !refCounts.containsKey(fileName) &&\n          (m.matches() || fileName.startsWith(IndexFileNames.SEGMENTS) \n              // we only try to clear out pending_segments_N during rollback(), because we don't ref-count it\n              // TODO: this is sneaky, should we do this, or change TestIWExceptions? rollback closes anyway, and \n              // any leftover file will be deleted/retried on next IW bootup anyway...\n              || fileName.startsWith(IndexFileNames.PENDING_SEGMENTS))) {\n        // Unreferenced file, so remove it\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"refresh: removing newly created unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        toDelete.add(fileName);\n      }\n    }\n\n    deleteFiles(toDelete);\n  }\n\n","sourceOld":"  /**\n   * Writer calls this when it has hit an error and had to\n   * roll back, to tell us that there may now be\n   * unreferenced files in the filesystem.  So we re-list\n   * the filesystem and delete such files.  If segmentName\n   * is non-null, we will only delete files corresponding to\n   * that segment.\n   */\n  void refresh() throws IOException {\n    assert locked();\n    deletable.clear();\n\n    String[] files = directory.listAll();\n\n    Matcher m = IndexFileNames.CODEC_FILE_PATTERN.matcher(\"\");\n\n    for(int i=0;i<files.length;i++) {\n      String fileName = files[i];\n      m.reset(fileName);\n      if (!fileName.endsWith(\"write.lock\") &&\n          !refCounts.containsKey(fileName) &&\n          (m.matches() || fileName.startsWith(IndexFileNames.SEGMENTS) \n              // we only try to clear out pending_segments_N during rollback(), because we don't ref-count it\n              // TODO: this is sneaky, should we do this, or change TestIWExceptions? rollback closes anyway, and \n              // any leftover file will be deleted/retried on next IW bootup anyway...\n              || fileName.startsWith(IndexFileNames.PENDING_SEGMENTS))) {\n        // Unreferenced file, so remove it\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"refresh: removing newly created unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deletable.add(fileName);\n      }\n    }\n\n    deletePendingFiles();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#refresh().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#refresh().mjava","sourceNew":"  /**\n   * Writer calls this when it has hit an error and had to\n   * roll back, to tell us that there may now be\n   * unreferenced files in the filesystem.  So we re-list\n   * the filesystem and delete such files.  If segmentName\n   * is non-null, we will only delete files corresponding to\n   * that segment.\n   */\n  void refresh() throws IOException {\n    assert locked();\n    Set<String> toDelete = new HashSet<>();\n\n    String[] files = directory.listAll();\n\n    Matcher m = IndexFileNames.CODEC_FILE_PATTERN.matcher(\"\");\n\n    for(int i=0;i<files.length;i++) {\n      String fileName = files[i];\n      m.reset(fileName);\n      if (!fileName.endsWith(\"write.lock\") &&\n          !refCounts.containsKey(fileName) &&\n          (m.matches() || fileName.startsWith(IndexFileNames.SEGMENTS) \n              // we only try to clear out pending_segments_N during rollback(), because we don't ref-count it\n              // TODO: this is sneaky, should we do this, or change TestIWExceptions? rollback closes anyway, and \n              // any leftover file will be deleted/retried on next IW bootup anyway...\n              || fileName.startsWith(IndexFileNames.PENDING_SEGMENTS))) {\n        // Unreferenced file, so remove it\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"refresh: removing newly created unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        toDelete.add(fileName);\n      }\n    }\n\n    deleteFiles(toDelete);\n  }\n\n","sourceOld":"  /**\n   * Writer calls this when it has hit an error and had to\n   * roll back, to tell us that there may now be\n   * unreferenced files in the filesystem.  So we re-list\n   * the filesystem and delete such files.  If segmentName\n   * is non-null, we will only delete files corresponding to\n   * that segment.\n   */\n  void refresh() throws IOException {\n    assert locked();\n    deletable.clear();\n\n    String[] files = directory.listAll();\n\n    Matcher m = IndexFileNames.CODEC_FILE_PATTERN.matcher(\"\");\n\n    for(int i=0;i<files.length;i++) {\n      String fileName = files[i];\n      m.reset(fileName);\n      if (!fileName.endsWith(\"write.lock\") &&\n          !refCounts.containsKey(fileName) &&\n          (m.matches() || fileName.startsWith(IndexFileNames.SEGMENTS) \n              // we only try to clear out pending_segments_N during rollback(), because we don't ref-count it\n              // TODO: this is sneaky, should we do this, or change TestIWExceptions? rollback closes anyway, and \n              // any leftover file will be deleted/retried on next IW bootup anyway...\n              || fileName.startsWith(IndexFileNames.PENDING_SEGMENTS))) {\n        // Unreferenced file, so remove it\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"refresh: removing newly created unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deletable.add(fileName);\n      }\n    }\n\n    deletePendingFiles();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"46e4a8bdfbafda795ef9c39a2bc2d47095770299":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"aac05884852c2a15a6aa9153063de70dea4fbcae":["950882a2bd2a5f9dc16a154871584eaa643d882a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a207d19eac354d649c3f0e2cce070017c78125e":["aac05884852c2a15a6aa9153063de70dea4fbcae","b470f36a9372c97283360b1304eacbde22df6c0d"],"b470f36a9372c97283360b1304eacbde22df6c0d":["aac05884852c2a15a6aa9153063de70dea4fbcae","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["aac05884852c2a15a6aa9153063de70dea4fbcae","b470f36a9372c97283360b1304eacbde22df6c0d"],"950882a2bd2a5f9dc16a154871584eaa643d882a":["46e4a8bdfbafda795ef9c39a2bc2d47095770299"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["aac05884852c2a15a6aa9153063de70dea4fbcae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a207d19eac354d649c3f0e2cce070017c78125e"]},"commit2Childs":{"46e4a8bdfbafda795ef9c39a2bc2d47095770299":["950882a2bd2a5f9dc16a154871584eaa643d882a"],"aac05884852c2a15a6aa9153063de70dea4fbcae":["5a207d19eac354d649c3f0e2cce070017c78125e","b470f36a9372c97283360b1304eacbde22df6c0d","1e6acbaae7af722f17204ceccf0f7db5753eccf3","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["46e4a8bdfbafda795ef9c39a2bc2d47095770299"],"5a207d19eac354d649c3f0e2cce070017c78125e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"950882a2bd2a5f9dc16a154871584eaa643d882a":["aac05884852c2a15a6aa9153063de70dea4fbcae"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["b470f36a9372c97283360b1304eacbde22df6c0d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}