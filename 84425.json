{"path":"solr/core/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","sourceNew":"  @Test\n  public void testHaversine() throws Exception {\n    clearIndex();\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"gh_s1\", GeoHashUtils.encode(32.7693246, -79.9289094)));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2), \"gh_s1\", GeoHashUtils.encode(32.7693246, -78.9289094)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2), \"gh_s1\", GeoHashUtils.encode(32.7693246, -80.9289094)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4), \"gh_s1\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"45.0\", \"y_td\", \"45.0\",\n            \"gh_s1\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"6\", \"point_hash\", \"32.5, -79.0\", \"point\", \"32.5, -79.0\"));\n    assertU(adoc(\"id\", \"7\", \"point_hash\", \"32.6, -78.0\", \"point\", \"32.6, -78.0\"));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, true, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='1.0471976'\");\n    //SOLR-2114\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(6371.009, true, point, vector(0, 0))\", \"fq\", \"id:6\"), \"//float[@name='score']='8977.814'\");\n    \n    //Geo Hash Haversine\n    //Can verify here: http://www.movable-type.co.uk/scripts/latlong.html, but they use a slightly different radius for the earth, so just be close\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s1, \\\"\" + GeoHashUtils.encode(32, -79) +\n            \"\\\",)\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n    assertQ(req(\"fl\", \"id,point_hash,score\", \"q\", \"{!func}recip(ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", point_hash, \\\"\" + GeoHashUtils.encode(32, -79) + \"\\\"), 1, 1, 0)\"),\n            \"//*[@numFound='7']\", \n            \"//result/doc[1]/str[@name='id'][.='6']\",\n            \"//result/doc[2]/str[@name='id'][.='7']\"//all the rest don't matter\n            );\n\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s1, geohash(32, -79))\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testHaversine() throws Exception {\n    clearIndex();\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"gh_s1\", GeoHashUtils.encode(32.7693246, -79.9289094)));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2), \"gh_s1\", GeoHashUtils.encode(32.7693246, -78.9289094)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2), \"gh_s1\", GeoHashUtils.encode(32.7693246, -80.9289094)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4), \"gh_s1\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"45.0\", \"y_td\", \"45.0\",\n            \"gh_s1\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"6\", \"point_hash\", \"32.5, -79.0\", \"point\", \"32.5, -79.0\"));\n    assertU(adoc(\"id\", \"7\", \"point_hash\", \"32.6, -78.0\", \"point\", \"32.6, -78.0\"));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, true, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='1.0471976'\");\n    //SOLR-2114\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(6371.009, true, point, vector(0, 0))\", \"fq\", \"id:6\"), \"//float[@name='score']='8977.814'\");\n    \n    //Geo Hash Haversine\n    //Can verify here: http://www.movable-type.co.uk/scripts/latlong.html, but they use a slightly different radius for the earth, so just be close\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s1, \\\"\" + GeoHashUtils.encode(32, -79) +\n            \"\\\",)\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n    assertQ(req(\"fl\", \"id,point_hash,score\", \"q\", \"{!func}recip(ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", point_hash, \\\"\" + GeoHashUtils.encode(32, -79) + \"\\\"), 1, 1, 0)\"),\n            \"//*[@numFound='7']\", \n            \"//result/doc[1]/str[@name='id'][.='6']\",\n            \"//result/doc[2]/str[@name='id'][.='7']\"//all the rest don't matter\n            );\n\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s1, geohash(32, -79))\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","sourceNew":"  @Test\n  public void testHaversine() throws Exception {\n    clearIndex();\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"gh_s1\", GeoHashUtils.encode(32.7693246, -79.9289094)));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2), \"gh_s1\", GeoHashUtils.encode(32.7693246, -78.9289094)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2), \"gh_s1\", GeoHashUtils.encode(32.7693246, -80.9289094)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4), \"gh_s1\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"45.0\", \"y_td\", \"45.0\",\n            \"gh_s1\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"6\", \"point_hash\", \"32.5, -79.0\", \"point\", \"32.5, -79.0\"));\n    assertU(adoc(\"id\", \"7\", \"point_hash\", \"32.6, -78.0\", \"point\", \"32.6, -78.0\"));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, true, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='1.0471976'\");\n    //SOLR-2114\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(6371.009, true, point, vector(0, 0))\", \"fq\", \"id:6\"), \"//float[@name='score']='8977.814'\");\n    \n    //Geo Hash Haversine\n    //Can verify here: http://www.movable-type.co.uk/scripts/latlong.html, but they use a slightly different radius for the earth, so just be close\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s1, \\\"\" + GeoHashUtils.encode(32, -79) +\n            \"\\\",)\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n    assertQ(req(\"fl\", \"id,point_hash,score\", \"q\", \"{!func}recip(ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", point_hash, \\\"\" + GeoHashUtils.encode(32, -79) + \"\\\"), 1, 1, 0)\"),\n            \"//*[@numFound='7']\", \n            \"//result/doc[1]/str[@name='id'][.='6']\",\n            \"//result/doc[2]/str[@name='id'][.='7']\"//all the rest don't matter\n            );\n\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s1, geohash(32, -79))\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testHaversine() throws Exception {\n    clearIndex();\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"gh_s1\", GeoHashUtils.encode(32.7693246, -79.9289094)));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2), \"gh_s1\", GeoHashUtils.encode(32.7693246, -78.9289094)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2), \"gh_s1\", GeoHashUtils.encode(32.7693246, -80.9289094)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4), \"gh_s1\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"45.0\", \"y_td\", \"45.0\",\n            \"gh_s1\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"6\", \"point_hash\", \"32.5, -79.0\", \"point\", \"32.5, -79.0\"));\n    assertU(adoc(\"id\", \"7\", \"point_hash\", \"32.6, -78.0\", \"point\", \"32.6, -78.0\"));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, true, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='1.0471976'\");\n    //SOLR-2114\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(6371.009, true, point, vector(0, 0))\", \"fq\", \"id:6\"), \"//float[@name='score']='8977.814'\");\n    \n    //Geo Hash Haversine\n    //Can verify here: http://www.movable-type.co.uk/scripts/latlong.html, but they use a slightly different radius for the earth, so just be close\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s1, \\\"\" + GeoHashUtils.encode(32, -79) +\n            \"\\\",)\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n    assertQ(req(\"fl\", \"id,point_hash,score\", \"q\", \"{!func}recip(ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", point_hash, \\\"\" + GeoHashUtils.encode(32, -79) + \"\\\"), 1, 1, 0)\"),\n            \"//*[@numFound='7']\", \n            \"//result/doc[1]/str[@name='id'][.='6']\",\n            \"//result/doc[2]/str[@name='id'][.='7']\"//all the rest don't matter\n            );\n\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s1, geohash(32, -79))\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","sourceNew":"  @Test\n  public void testHaversine() throws Exception {\n    clearIndex();\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"gh_s1\", GeoHashUtils.encode(32.7693246, -79.9289094)));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2), \"gh_s1\", GeoHashUtils.encode(32.7693246, -78.9289094)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2), \"gh_s1\", GeoHashUtils.encode(32.7693246, -80.9289094)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4), \"gh_s1\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"45.0\", \"y_td\", \"45.0\",\n            \"gh_s1\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"6\", \"point_hash\", \"32.5, -79.0\", \"point\", \"32.5, -79.0\"));\n    assertU(adoc(\"id\", \"7\", \"point_hash\", \"32.6, -78.0\", \"point\", \"32.6, -78.0\"));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, true, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='1.0471976'\");\n    //SOLR-2114\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(6371.009, true, point, vector(0, 0))\", \"fq\", \"id:6\"), \"//float[@name='score']='8977.814'\");\n    \n    //Geo Hash Haversine\n    //Can verify here: http://www.movable-type.co.uk/scripts/latlong.html, but they use a slightly different radius for the earth, so just be close\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s1, \\\"\" + GeoHashUtils.encode(32, -79) +\n            \"\\\",)\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n    assertQ(req(\"fl\", \"id,point_hash,score\", \"q\", \"{!func}recip(ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", point_hash, \\\"\" + GeoHashUtils.encode(32, -79) + \"\\\"), 1, 1, 0)\"),\n            \"//*[@numFound='7']\", \n            \"//result/doc[1]/str[@name='id'][.='6']\",\n            \"//result/doc[2]/str[@name='id'][.='7']\"//all the rest don't matter\n            );\n\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s1, geohash(32, -79))\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testHaversine() throws Exception {\n    clearIndex();\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"gh_s1\", GeoHashUtils.encode(32.7693246, -79.9289094)));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2), \"gh_s1\", GeoHashUtils.encode(32.7693246, -78.9289094)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2), \"gh_s1\", GeoHashUtils.encode(32.7693246, -80.9289094)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4), \"gh_s1\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"45.0\", \"y_td\", \"45.0\",\n            \"gh_s1\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"6\", \"point_hash\", \"32.5, -79.0\", \"point\", \"32.5, -79.0\"));\n    assertU(adoc(\"id\", \"7\", \"point_hash\", \"32.6, -78.0\", \"point\", \"32.6, -78.0\"));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, true, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='1.0471976'\");\n    //SOLR-2114\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(6371.009, true, point, vector(0, 0))\", \"fq\", \"id:6\"), \"//float[@name='score']='8977.814'\");\n    \n    //Geo Hash Haversine\n    //Can verify here: http://www.movable-type.co.uk/scripts/latlong.html, but they use a slightly different radius for the earth, so just be close\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s1, \\\"\" + GeoHashUtils.encode(32, -79) +\n            \"\\\",)\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n    assertQ(req(\"fl\", \"id,point_hash,score\", \"q\", \"{!func}recip(ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", point_hash, \\\"\" + GeoHashUtils.encode(32, -79) + \"\\\"), 1, 1, 0)\"),\n            \"//*[@numFound='7']\", \n            \"//result/doc[1]/str[@name='id'][.='6']\",\n            \"//result/doc[2]/str[@name='id'][.='7']\"//all the rest don't matter\n            );\n\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s1, geohash(32, -79))\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3859e567816d5987602f2a7ae2469fcdf17f745e","date":1329895924,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","sourceNew":"  @Test\n  public void testHaversine() throws Exception {\n    clearIndex();\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"gh_s1\", GeohashUtils.encodeLatLon(32.7693246, -79.9289094)));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2), \"gh_s1\", GeohashUtils.encodeLatLon(32.7693246, -78.9289094)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2), \"gh_s1\", GeohashUtils.encodeLatLon(32.7693246, -80.9289094)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4), \"gh_s1\", GeohashUtils.encodeLatLon(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"45.0\", \"y_td\", \"45.0\",\n            \"gh_s1\", GeohashUtils.encodeLatLon(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"6\", \"point_hash\", \"32.5, -79.0\", \"point\", \"32.5, -79.0\"));\n    assertU(adoc(\"id\", \"7\", \"point_hash\", \"32.6, -78.0\", \"point\", \"32.6, -78.0\"));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, true, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='1.0471976'\");\n    //SOLR-2114\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(6371.009, true, point, vector(0, 0))\", \"fq\", \"id:6\"), \"//float[@name='score']='8977.814'\");\n    \n    //Geo Hash Haversine\n    //Can verify here: http://www.movable-type.co.uk/scripts/latlong.html, but they use a slightly different radius for the earth, so just be close\n    //note: using assertJQ because it supports numeric deltas, and by default too\n    assertJQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s1, \\\"\" + GeohashUtils.encodeLatLon(32, -79) + \"\\\",)\", \"fq\", \"id:1\"),\n        \"/response/docs/[0]/score==122.171875\");\n\n    assertQ(req(\"fl\", \"id,point_hash,score\", \"q\", \"{!func}recip(ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", point_hash, \\\"\" + GeohashUtils.encodeLatLon(32, -79) + \"\\\"), 1, 1, 0)\"),\n            \"//*[@numFound='7']\", \n            \"//result/doc[1]/str[@name='id'][.='6']\",\n            \"//result/doc[2]/str[@name='id'][.='7']\"//all the rest don't matter\n            );\n\n\n    assertJQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s1, geohash(32, -79))\", \"fq\", \"id:1\"),\n        \"/response/docs/[0]/score==122.171875\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testHaversine() throws Exception {\n    clearIndex();\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"gh_s1\", GeoHashUtils.encode(32.7693246, -79.9289094)));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2), \"gh_s1\", GeoHashUtils.encode(32.7693246, -78.9289094)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2), \"gh_s1\", GeoHashUtils.encode(32.7693246, -80.9289094)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4), \"gh_s1\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"45.0\", \"y_td\", \"45.0\",\n            \"gh_s1\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"6\", \"point_hash\", \"32.5, -79.0\", \"point\", \"32.5, -79.0\"));\n    assertU(adoc(\"id\", \"7\", \"point_hash\", \"32.6, -78.0\", \"point\", \"32.6, -78.0\"));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, true, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='1.0471976'\");\n    //SOLR-2114\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(6371.009, true, point, vector(0, 0))\", \"fq\", \"id:6\"), \"//float[@name='score']='8977.814'\");\n    \n    //Geo Hash Haversine\n    //Can verify here: http://www.movable-type.co.uk/scripts/latlong.html, but they use a slightly different radius for the earth, so just be close\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s1, \\\"\" + GeoHashUtils.encode(32, -79) +\n            \"\\\",)\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n    assertQ(req(\"fl\", \"id,point_hash,score\", \"q\", \"{!func}recip(ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", point_hash, \\\"\" + GeoHashUtils.encode(32, -79) + \"\\\"), 1, 1, 0)\"),\n            \"//*[@numFound='7']\", \n            \"//result/doc[1]/str[@name='id'][.='6']\",\n            \"//result/doc[2]/str[@name='id'][.='7']\"//all the rest don't matter\n            );\n\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s1, geohash(32, -79))\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e47768b261c28e7e6032060e8331475c81057953","date":1331681297,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","sourceNew":"  @Test\n  public void testHaversine() throws Exception {\n    clearIndex();\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"gh_s1\", GeohashUtils.encodeLatLon(32.7693246, -79.9289094)));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2), \"gh_s1\", GeohashUtils.encodeLatLon(32.7693246, -78.9289094)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2), \"gh_s1\", GeohashUtils.encodeLatLon(32.7693246, -80.9289094)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4), \"gh_s1\", GeohashUtils.encodeLatLon(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"45.0\", \"y_td\", \"45.0\",\n            \"gh_s1\", GeohashUtils.encodeLatLon(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"6\", \"point_hash\", \"32.5, -79.0\", \"point\", \"32.5, -79.0\"));\n    assertU(adoc(\"id\", \"7\", \"point_hash\", \"32.6, -78.0\", \"point\", \"32.6, -78.0\"));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, true, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='1.0471976'\");\n    //SOLR-2114\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(6371.009, true, point, vector(0, 0))\", \"fq\", \"id:6\"), \"//float[@name='score']='8977.814'\");\n    \n    //Geo Hash Haversine\n    //Can verify here: http://www.movable-type.co.uk/scripts/latlong.html, but they use a slightly different radius for the earth, so just be close\n    //note: using assertJQ because it supports numeric deltas, and by default too\n    assertJQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s1, \\\"\" + GeohashUtils.encodeLatLon(32, -79) + \"\\\",)\", \"fq\", \"id:1\"),\n        \"/response/docs/[0]/score==122.171875\");\n\n    assertQ(req(\"fl\", \"id,point_hash,score\", \"q\", \"{!func}recip(ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", point_hash, \\\"\" + GeohashUtils.encodeLatLon(32, -79) + \"\\\"), 1, 1, 0)\"),\n            \"//*[@numFound='7']\", \n            \"//result/doc[1]/str[@name='id'][.='6']\",\n            \"//result/doc[2]/str[@name='id'][.='7']\"//all the rest don't matter\n            );\n\n\n    assertJQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s1, geohash(32, -79))\", \"fq\", \"id:1\"),\n        \"/response/docs/[0]/score==122.171875\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testHaversine() throws Exception {\n    clearIndex();\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"gh_s1\", GeoHashUtils.encode(32.7693246, -79.9289094)));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2), \"gh_s1\", GeoHashUtils.encode(32.7693246, -78.9289094)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2), \"gh_s1\", GeoHashUtils.encode(32.7693246, -80.9289094)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4), \"gh_s1\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"45.0\", \"y_td\", \"45.0\",\n            \"gh_s1\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"6\", \"point_hash\", \"32.5, -79.0\", \"point\", \"32.5, -79.0\"));\n    assertU(adoc(\"id\", \"7\", \"point_hash\", \"32.6, -78.0\", \"point\", \"32.6, -78.0\"));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, false, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, true, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='1.0471976'\");\n    //SOLR-2114\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(6371.009, true, point, vector(0, 0))\", \"fq\", \"id:6\"), \"//float[@name='score']='8977.814'\");\n    \n    //Geo Hash Haversine\n    //Can verify here: http://www.movable-type.co.uk/scripts/latlong.html, but they use a slightly different radius for the earth, so just be close\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s1, \\\"\" + GeoHashUtils.encode(32, -79) +\n            \"\\\",)\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n    assertQ(req(\"fl\", \"id,point_hash,score\", \"q\", \"{!func}recip(ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", point_hash, \\\"\" + GeoHashUtils.encode(32, -79) + \"\\\"), 1, 1, 0)\"),\n            \"//*[@numFound='7']\", \n            \"//result/doc[1]/str[@name='id'][.='6']\",\n            \"//result/doc[2]/str[@name='id'][.='7']\"//all the rest don't matter\n            );\n\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + DistanceUtils.EARTH_MEAN_RADIUS_KM + \", gh_s1, geohash(32, -79))\", \"fq\", \"id:1\"), \"//float[@name='score']='122.171875'\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e47768b261c28e7e6032060e8331475c81057953":["c26f00b574427b55127e869b935845554afde1fa","3859e567816d5987602f2a7ae2469fcdf17f745e"],"3859e567816d5987602f2a7ae2469fcdf17f745e":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e47768b261c28e7e6032060e8331475c81057953"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["e47768b261c28e7e6032060e8331475c81057953","3859e567816d5987602f2a7ae2469fcdf17f745e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"e47768b261c28e7e6032060e8331475c81057953":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3859e567816d5987602f2a7ae2469fcdf17f745e":["e47768b261c28e7e6032060e8331475c81057953"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}