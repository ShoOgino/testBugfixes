{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#refreshLazyFormat2Collections(boolean).mjava","commits":[{"id":"1072b8e47b50f1c4fb039e1f54a736f381d6f809","date":1438956441,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#refreshLazyFormat2Collections(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Search for any lazy-loadable state format2 collections.\n   */\n  private void refreshLazyFormat2Collections(boolean fullRefresh) throws KeeperException, InterruptedException {\n    List<String> children = null;\n    try {\n      children = zkClient.getChildren(COLLECTIONS_ZKNODE, null, true);\n    } catch (KeeperException.NoNodeException e) {\n      log.warn(\"Error fetching collection names\");\n      // fall through\n    }\n    if (children == null || children.isEmpty()) {\n      synchronized (getUpdateLock()) {\n        this.lazyCollectionStates = new HashMap<>();\n      }\n      return;\n    }\n\n    Map<String, ClusterState.CollectionRef> result = new HashMap<>();\n    for (String collName : children) {\n      if (interestingCollections.contains(collName)) {\n        // We will create an eager collection for any interesting collections.\n        continue;\n      }\n\n      if (!fullRefresh) {\n        // Try to use an already-created lazy collection if it's not a full refresh.\n        ClusterState.CollectionRef existing = lazyCollectionStates.get(collName);\n        if (existing != null) {\n          result.put(collName, existing);\n          continue;\n        }\n      }\n\n      ClusterState.CollectionRef lazyCollectionState = tryMakeLazyCollectionStateFormat2(collName);\n      if (lazyCollectionState != null) {\n        result.put(collName, lazyCollectionState);\n      }\n    }\n\n    synchronized (getUpdateLock()) {\n      this.lazyCollectionStates = result;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bf04c3f77a2936f29948b9c0dd215d82d43f5cf","date":1440482195,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#refreshLazyFormat2Collections(boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Search for any lazy-loadable state format2 collections.\n   */\n  private void refreshLazyFormat2Collections(boolean fullRefresh) throws KeeperException, InterruptedException {\n    List<String> children = null;\n    try {\n      children = zkClient.getChildren(COLLECTIONS_ZKNODE, null, true);\n    } catch (KeeperException.NoNodeException e) {\n      log.warn(\"Error fetching collection names\");\n      // fall through\n    }\n    if (children == null || children.isEmpty()) {\n      synchronized (getUpdateLock()) {\n        this.lazyCollectionStates = new HashMap<>();\n      }\n      return;\n    }\n\n    Map<String, ClusterState.CollectionRef> result = new HashMap<>();\n    for (String collName : children) {\n      if (interestingCollections.contains(collName)) {\n        // We will create an eager collection for any interesting collections.\n        continue;\n      }\n\n      if (!fullRefresh) {\n        // Try to use an already-created lazy collection if it's not a full refresh.\n        ClusterState.CollectionRef existing = lazyCollectionStates.get(collName);\n        if (existing != null) {\n          result.put(collName, existing);\n          continue;\n        }\n      }\n\n      ClusterState.CollectionRef lazyCollectionState = tryMakeLazyCollectionStateFormat2(collName);\n      if (lazyCollectionState != null) {\n        result.put(collName, lazyCollectionState);\n      }\n    }\n\n    synchronized (getUpdateLock()) {\n      this.lazyCollectionStates = result;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8bf04c3f77a2936f29948b9c0dd215d82d43f5cf":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8bf04c3f77a2936f29948b9c0dd215d82d43f5cf"],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"8bf04c3f77a2936f29948b9c0dd215d82d43f5cf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["8bf04c3f77a2936f29948b9c0dd215d82d43f5cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}