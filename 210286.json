{"path":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","commits":[{"id":"d94d6afa51157e490fc169e192a154ffc4cdad0b","date":1283184289,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * By default PrecedenceQueryParser uses {@link MultiTermQuery#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT}\n   * when creating a PrefixQuery, WildcardQuery or RangeQuery. This implementation is generally preferable because it \n   * a) Runs faster b) Does not have the scarcity of terms unduly influence score \n   * c) avoids any \"TooManyBooleanClauses\" exception.\n   * However, if your application really needs to use the\n   * old-fashioned BooleanQuery expansion rewriting and the above\n   * points are not relevant then use this to change\n   * the rewrite method.\n   */\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method) {\n    multiTermRewriteMethod = method;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecaea79e307d83311c31273b0ea89b9fdb0c5a32","date":1287584790,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","sourceNew":null,"sourceOld":"  /**\n   * By default PrecedenceQueryParser uses {@link MultiTermQuery#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT}\n   * when creating a PrefixQuery, WildcardQuery or RangeQuery. This implementation is generally preferable because it \n   * a) Runs faster b) Does not have the scarcity of terms unduly influence score \n   * c) avoids any \"TooManyBooleanClauses\" exception.\n   * However, if your application really needs to use the\n   * old-fashioned BooleanQuery expansion rewriting and the above\n   * points are not relevant then use this to change\n   * the rewrite method.\n   */\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method) {\n    multiTermRewriteMethod = method;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8017ab6544f30f93b106e419e7298173bad77f69","date":1287608126,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","sourceNew":null,"sourceOld":"  /**\n   * By default PrecedenceQueryParser uses {@link MultiTermQuery#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT}\n   * when creating a PrefixQuery, WildcardQuery or RangeQuery. This implementation is generally preferable because it \n   * a) Runs faster b) Does not have the scarcity of terms unduly influence score \n   * c) avoids any \"TooManyBooleanClauses\" exception.\n   * However, if your application really needs to use the\n   * old-fashioned BooleanQuery expansion rewriting and the above\n   * points are not relevant then use this to change\n   * the rewrite method.\n   */\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method) {\n    multiTermRewriteMethod = method;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ecaea79e307d83311c31273b0ea89b9fdb0c5a32":["d94d6afa51157e490fc169e192a154ffc4cdad0b"],"d94d6afa51157e490fc169e192a154ffc4cdad0b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8017ab6544f30f93b106e419e7298173bad77f69":["d94d6afa51157e490fc169e192a154ffc4cdad0b","ecaea79e307d83311c31273b0ea89b9fdb0c5a32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ecaea79e307d83311c31273b0ea89b9fdb0c5a32"]},"commit2Childs":{"ecaea79e307d83311c31273b0ea89b9fdb0c5a32":["8017ab6544f30f93b106e419e7298173bad77f69","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d94d6afa51157e490fc169e192a154ffc4cdad0b":["ecaea79e307d83311c31273b0ea89b9fdb0c5a32","8017ab6544f30f93b106e419e7298173bad77f69"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d94d6afa51157e490fc169e192a154ffc4cdad0b"],"8017ab6544f30f93b106e419e7298173bad77f69":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8017ab6544f30f93b106e419e7298173bad77f69","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}