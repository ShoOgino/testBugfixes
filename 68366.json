{"path":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity#explainScore(int,Explanation,IDFStats,NumericDocValues,float[]).mjava","commits":[{"id":"615370d2b876c3435773b5174df2e2242ad7981a","date":1495117651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity#explainScore(int,Explanation,IDFStats,NumericDocValues,float[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity#explainScore(int,Explanation,IDFStats,NumericDocValues).mjava","sourceNew":"  private Explanation explainScore(int doc, Explanation freq, IDFStats stats, NumericDocValues norms, float[] normTable) throws IOException {\n    Explanation queryExpl = Explanation.match(stats.boost, \"boost\");\n    Explanation fieldExpl = explainField(doc, freq, stats, norms, normTable);\n    if (stats.boost == 1f) {\n      return fieldExpl;\n    }\n    return Explanation.match(\n        queryExpl.getValue() * fieldExpl.getValue(),\n        \"score(doc=\"+doc+\",freq=\"+freq.getValue()+\"), product of:\",\n        queryExpl, fieldExpl);\n  }\n\n","sourceOld":"  private Explanation explainScore(int doc, Explanation freq, IDFStats stats, NumericDocValues norms) throws IOException {\n    Explanation queryExpl = Explanation.match(stats.boost, \"boost\");\n    Explanation fieldExpl = explainField(doc, freq, stats, norms);\n    if (stats.boost == 1f) {\n      return fieldExpl;\n    }\n    return Explanation.match(\n        queryExpl.getValue() * fieldExpl.getValue(),\n        \"score(doc=\"+doc+\",freq=\"+freq.getValue()+\"), product of:\",\n        queryExpl, fieldExpl);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity#explainScore(int,Explanation,IDFStats,NumericDocValues,float[]).mjava","pathOld":"/dev/null","sourceNew":"  private Explanation explainScore(int doc, Explanation freq, IDFStats stats, NumericDocValues norms, float[] normTable) throws IOException {\n    Explanation queryExpl = Explanation.match(stats.boost, \"boost\");\n    Explanation fieldExpl = explainField(doc, freq, stats, norms, normTable);\n    if (stats.boost == 1f) {\n      return fieldExpl;\n    }\n    return Explanation.match(\n        queryExpl.getValue() * fieldExpl.getValue(),\n        \"score(doc=\"+doc+\",freq=\"+freq.getValue()+\"), product of:\",\n        queryExpl, fieldExpl);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46","date":1508899684,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity#explainScore(int,Explanation,IDFStats,NumericDocValues,float[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity#explainScore(int,Explanation,IDFStats,NumericDocValues,float[]).mjava","sourceNew":"  private Explanation explainScore(int doc, Explanation freq, IDFStats stats, NumericDocValues norms, float[] normTable) throws IOException {\n    List<Explanation> subs = new ArrayList<Explanation>();\n    if (stats.boost != 1F) {\n      subs.add(Explanation.match(stats.boost, \"boost\"));\n    }\n    subs.add(stats.idf);\n    Explanation tf = Explanation.match(tf(freq.getValue()), \"tf(freq=\"+freq.getValue()+\"), with freq of:\", freq);\n    subs.add(tf);\n\n    float norm;\n    if (norms == null) {\n      norm = 1f;\n    } else if (norms.advanceExact(doc) == false) {\n      norm = 0f;\n    } else {\n      norm = normTable[(int) (norms.longValue() & 0xFF)];\n    }\n    \n    Explanation fieldNorm = Explanation.match(\n        norm,\n        \"fieldNorm(doc=\" + doc + \")\");\n    subs.add(fieldNorm);\n    \n    return Explanation.match(\n        stats.queryWeight * tf.getValue() * norm,\n        \"score(doc=\"+doc+\",freq=\"+freq.getValue()+\"), product of:\",\n        subs);\n  }\n\n","sourceOld":"  private Explanation explainScore(int doc, Explanation freq, IDFStats stats, NumericDocValues norms, float[] normTable) throws IOException {\n    Explanation queryExpl = Explanation.match(stats.boost, \"boost\");\n    Explanation fieldExpl = explainField(doc, freq, stats, norms, normTable);\n    if (stats.boost == 1f) {\n      return fieldExpl;\n    }\n    return Explanation.match(\n        queryExpl.getValue() * fieldExpl.getValue(),\n        \"score(doc=\"+doc+\",freq=\"+freq.getValue()+\"), product of:\",\n        queryExpl, fieldExpl);\n  }\n\n","bugFix":null,"bugIntro":["0f82a9bd302914a72572934ddb0a4ee15edfe4c6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0f82a9bd302914a72572934ddb0a4ee15edfe4c6","date":1509493555,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity#explainScore(int,Explanation,IDFStats,NumericDocValues,float[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity#explainScore(int,Explanation,IDFStats,NumericDocValues,float[]).mjava","sourceNew":"  private Explanation explainScore(int doc, Explanation freq, IDFStats stats, NumericDocValues norms, float[] normTable) throws IOException {\n    List<Explanation> subs = new ArrayList<Explanation>();\n    if (stats.boost != 1F) {\n      subs.add(Explanation.match(stats.boost, \"boost\"));\n    }\n    subs.add(stats.idf);\n    Explanation tf = Explanation.match(tf(freq.getValue()), \"tf(freq=\"+freq.getValue()+\"), with freq of:\", freq);\n    subs.add(tf);\n\n    float norm;\n    if (norms == null) {\n      norm = 1f;\n    } else {\n      boolean found = norms.advanceExact(doc);\n      assert found;\n      norm = normTable[(int) (norms.longValue() & 0xFF)];\n    }\n    \n    Explanation fieldNorm = Explanation.match(\n        norm,\n        \"fieldNorm(doc=\" + doc + \")\");\n    subs.add(fieldNorm);\n    \n    return Explanation.match(\n        stats.queryWeight * tf.getValue() * norm,\n        \"score(doc=\"+doc+\",freq=\"+freq.getValue()+\"), product of:\",\n        subs);\n  }\n\n","sourceOld":"  private Explanation explainScore(int doc, Explanation freq, IDFStats stats, NumericDocValues norms, float[] normTable) throws IOException {\n    List<Explanation> subs = new ArrayList<Explanation>();\n    if (stats.boost != 1F) {\n      subs.add(Explanation.match(stats.boost, \"boost\"));\n    }\n    subs.add(stats.idf);\n    Explanation tf = Explanation.match(tf(freq.getValue()), \"tf(freq=\"+freq.getValue()+\"), with freq of:\", freq);\n    subs.add(tf);\n\n    float norm;\n    if (norms == null) {\n      norm = 1f;\n    } else if (norms.advanceExact(doc) == false) {\n      norm = 0f;\n    } else {\n      norm = normTable[(int) (norms.longValue() & 0xFF)];\n    }\n    \n    Explanation fieldNorm = Explanation.match(\n        norm,\n        \"fieldNorm(doc=\" + doc + \")\");\n    subs.add(fieldNorm);\n    \n    return Explanation.match(\n        stats.queryWeight * tf.getValue() * norm,\n        \"score(doc=\"+doc+\",freq=\"+freq.getValue()+\"), product of:\",\n        subs);\n  }\n\n","bugFix":["ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf","date":1514891219,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity#explainScore(int,Explanation,IDFStats,NumericDocValues,float[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity#explainScore(int,Explanation,IDFStats,NumericDocValues,float[]).mjava","sourceNew":"  private Explanation explainScore(int doc, Explanation freq, IDFStats stats, NumericDocValues norms, float[] normTable) throws IOException {\n    List<Explanation> subs = new ArrayList<Explanation>();\n    if (stats.boost != 1F) {\n      subs.add(Explanation.match(stats.boost, \"boost\"));\n    }\n    subs.add(stats.idf);\n    Explanation tf = Explanation.match(tf(freq.getValue().floatValue()), \"tf(freq=\"+freq.getValue()+\"), with freq of:\", freq);\n    subs.add(tf);\n\n    float norm;\n    if (norms == null) {\n      norm = 1f;\n    } else {\n      boolean found = norms.advanceExact(doc);\n      assert found;\n      norm = normTable[(int) (norms.longValue() & 0xFF)];\n    }\n    \n    Explanation fieldNorm = Explanation.match(\n        norm,\n        \"fieldNorm(doc=\" + doc + \")\");\n    subs.add(fieldNorm);\n    \n    return Explanation.match(\n        stats.queryWeight * tf.getValue().floatValue() * norm,\n        \"score(doc=\"+doc+\",freq=\"+freq.getValue()+\"), product of:\",\n        subs);\n  }\n\n","sourceOld":"  private Explanation explainScore(int doc, Explanation freq, IDFStats stats, NumericDocValues norms, float[] normTable) throws IOException {\n    List<Explanation> subs = new ArrayList<Explanation>();\n    if (stats.boost != 1F) {\n      subs.add(Explanation.match(stats.boost, \"boost\"));\n    }\n    subs.add(stats.idf);\n    Explanation tf = Explanation.match(tf(freq.getValue()), \"tf(freq=\"+freq.getValue()+\"), with freq of:\", freq);\n    subs.add(tf);\n\n    float norm;\n    if (norms == null) {\n      norm = 1f;\n    } else {\n      boolean found = norms.advanceExact(doc);\n      assert found;\n      norm = normTable[(int) (norms.longValue() & 0xFF)];\n    }\n    \n    Explanation fieldNorm = Explanation.match(\n        norm,\n        \"fieldNorm(doc=\" + doc + \")\");\n    subs.add(fieldNorm);\n    \n    return Explanation.match(\n        stats.queryWeight * tf.getValue() * norm,\n        \"score(doc=\"+doc+\",freq=\"+freq.getValue()+\"), product of:\",\n        subs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68d6cb7f0f019661a784bd0e5a21e85b5f812af6","date":1515075216,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity#explainScore(int,Explanation,IDFStats,NumericDocValues,float[]).mjava","sourceNew":null,"sourceOld":"  private Explanation explainScore(int doc, Explanation freq, IDFStats stats, NumericDocValues norms, float[] normTable) throws IOException {\n    List<Explanation> subs = new ArrayList<Explanation>();\n    if (stats.boost != 1F) {\n      subs.add(Explanation.match(stats.boost, \"boost\"));\n    }\n    subs.add(stats.idf);\n    Explanation tf = Explanation.match(tf(freq.getValue().floatValue()), \"tf(freq=\"+freq.getValue()+\"), with freq of:\", freq);\n    subs.add(tf);\n\n    float norm;\n    if (norms == null) {\n      norm = 1f;\n    } else {\n      boolean found = norms.advanceExact(doc);\n      assert found;\n      norm = normTable[(int) (norms.longValue() & 0xFF)];\n    }\n    \n    Explanation fieldNorm = Explanation.match(\n        norm,\n        \"fieldNorm(doc=\" + doc + \")\");\n    subs.add(fieldNorm);\n    \n    return Explanation.match(\n        stats.queryWeight * tf.getValue().floatValue() * norm,\n        \"score(doc=\"+doc+\",freq=\"+freq.getValue()+\"), product of:\",\n        subs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity#explainScore(int,Explanation,IDFStats,NumericDocValues,float[]).mjava","sourceNew":null,"sourceOld":"  private Explanation explainScore(int doc, Explanation freq, IDFStats stats, NumericDocValues norms, float[] normTable) throws IOException {\n    List<Explanation> subs = new ArrayList<Explanation>();\n    if (stats.boost != 1F) {\n      subs.add(Explanation.match(stats.boost, \"boost\"));\n    }\n    subs.add(stats.idf);\n    Explanation tf = Explanation.match(tf(freq.getValue().floatValue()), \"tf(freq=\"+freq.getValue()+\"), with freq of:\", freq);\n    subs.add(tf);\n\n    float norm;\n    if (norms == null) {\n      norm = 1f;\n    } else {\n      boolean found = norms.advanceExact(doc);\n      assert found;\n      norm = normTable[(int) (norms.longValue() & 0xFF)];\n    }\n    \n    Explanation fieldNorm = Explanation.match(\n        norm,\n        \"fieldNorm(doc=\" + doc + \")\");\n    subs.add(fieldNorm);\n    \n    return Explanation.match(\n        stats.queryWeight * tf.getValue().floatValue() * norm,\n        \"score(doc=\"+doc+\",freq=\"+freq.getValue()+\"), product of:\",\n        subs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","615370d2b876c3435773b5174df2e2242ad7981a"],"ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46":["615370d2b876c3435773b5174df2e2242ad7981a"],"615370d2b876c3435773b5174df2e2242ad7981a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf":["0f82a9bd302914a72572934ddb0a4ee15edfe4c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f82a9bd302914a72572934ddb0a4ee15edfe4c6":["ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["b94236357aaa22b76c10629851fe4e376e0cea82"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46":["0f82a9bd302914a72572934ddb0a4ee15edfe4c6"],"615370d2b876c3435773b5174df2e2242ad7981a":["e9017cf144952056066919f1ebc7897ff9bd71b1","ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46"],"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf":["b94236357aaa22b76c10629851fe4e376e0cea82","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","615370d2b876c3435773b5174df2e2242ad7981a"],"0f82a9bd302914a72572934ddb0a4ee15edfe4c6":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}