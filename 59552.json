{"path":"lucene/core/src/java/org/apache/lucene/index/StoredFieldsConsumer#addField(IndexableField,FieldInfo).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StoredFieldsConsumer#addField(IndexableField,FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/StoredFieldsConsumer#addField(IndexableField,FieldInfo).mjava","sourceNew":"  public void addField(IndexableField field, FieldInfo fieldInfo) throws IOException {\n    if (numStoredFields == storedFields.length) {\n      int newSize = ArrayUtil.oversize(numStoredFields + 1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n      IndexableField[] newArray = new IndexableField[newSize];\n      System.arraycopy(storedFields, 0, newArray, 0, numStoredFields);\n      storedFields = newArray;\n      \n      FieldInfo[] newInfoArray = new FieldInfo[newSize];\n      System.arraycopy(fieldInfos, 0, newInfoArray, 0, numStoredFields);\n      fieldInfos = newInfoArray;\n    }\n\n    storedFields[numStoredFields] = field;\n    fieldInfos[numStoredFields] = fieldInfo;\n    numStoredFields++;\n\n    assert docState.testPoint(\"StoredFieldsWriterPerThread.processFields.writeField\");\n  }\n\n","sourceOld":"  public void addField(IndexableField field, FieldInfo fieldInfo) throws IOException {\n    if (numStoredFields == storedFields.length) {\n      int newSize = ArrayUtil.oversize(numStoredFields + 1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n      IndexableField[] newArray = new IndexableField[newSize];\n      System.arraycopy(storedFields, 0, newArray, 0, numStoredFields);\n      storedFields = newArray;\n      \n      FieldInfo[] newInfoArray = new FieldInfo[newSize];\n      System.arraycopy(fieldInfos, 0, newInfoArray, 0, numStoredFields);\n      fieldInfos = newInfoArray;\n    }\n\n    storedFields[numStoredFields] = field;\n    fieldInfos[numStoredFields] = fieldInfo;\n    numStoredFields++;\n\n    assert docState.testPoint(\"StoredFieldsWriterPerThread.processFields.writeField\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StoredFieldsConsumer#addField(IndexableField,FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StoredFieldsConsumer#addField(IndexableField,FieldInfo).mjava","sourceNew":"  public void addField(IndexableField field, FieldInfo fieldInfo) {\n    if (numStoredFields == storedFields.length) {\n      int newSize = ArrayUtil.oversize(numStoredFields + 1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n      IndexableField[] newArray = new IndexableField[newSize];\n      System.arraycopy(storedFields, 0, newArray, 0, numStoredFields);\n      storedFields = newArray;\n      \n      FieldInfo[] newInfoArray = new FieldInfo[newSize];\n      System.arraycopy(fieldInfos, 0, newInfoArray, 0, numStoredFields);\n      fieldInfos = newInfoArray;\n    }\n\n    storedFields[numStoredFields] = field;\n    fieldInfos[numStoredFields] = fieldInfo;\n    numStoredFields++;\n\n    assert docState.testPoint(\"StoredFieldsWriterPerThread.processFields.writeField\");\n  }\n\n","sourceOld":"  public void addField(IndexableField field, FieldInfo fieldInfo) throws IOException {\n    if (numStoredFields == storedFields.length) {\n      int newSize = ArrayUtil.oversize(numStoredFields + 1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n      IndexableField[] newArray = new IndexableField[newSize];\n      System.arraycopy(storedFields, 0, newArray, 0, numStoredFields);\n      storedFields = newArray;\n      \n      FieldInfo[] newInfoArray = new FieldInfo[newSize];\n      System.arraycopy(fieldInfos, 0, newInfoArray, 0, numStoredFields);\n      fieldInfos = newInfoArray;\n    }\n\n    storedFields[numStoredFields] = field;\n    fieldInfos[numStoredFields] = fieldInfo;\n    numStoredFields++;\n\n    assert docState.testPoint(\"StoredFieldsWriterPerThread.processFields.writeField\");\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a","date":1341524239,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StoredFieldsConsumer#addField(StorableField,FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StoredFieldsConsumer#addField(IndexableField,FieldInfo).mjava","sourceNew":"  public void addField(StorableField field, FieldInfo fieldInfo) {\n    if (numStoredFields == storedFields.length) {\n      int newSize = ArrayUtil.oversize(numStoredFields + 1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n      StorableField[] newArray = new StorableField[newSize];\n      System.arraycopy(storedFields, 0, newArray, 0, numStoredFields);\n      storedFields = newArray;\n      \n      FieldInfo[] newInfoArray = new FieldInfo[newSize];\n      System.arraycopy(fieldInfos, 0, newInfoArray, 0, numStoredFields);\n      fieldInfos = newInfoArray;\n    }\n\n    storedFields[numStoredFields] = field;\n    fieldInfos[numStoredFields] = fieldInfo;\n    numStoredFields++;\n\n    assert docState.testPoint(\"StoredFieldsWriterPerThread.processFields.writeField\");\n  }\n\n","sourceOld":"  public void addField(IndexableField field, FieldInfo fieldInfo) {\n    if (numStoredFields == storedFields.length) {\n      int newSize = ArrayUtil.oversize(numStoredFields + 1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n      IndexableField[] newArray = new IndexableField[newSize];\n      System.arraycopy(storedFields, 0, newArray, 0, numStoredFields);\n      storedFields = newArray;\n      \n      FieldInfo[] newInfoArray = new FieldInfo[newSize];\n      System.arraycopy(fieldInfos, 0, newInfoArray, 0, numStoredFields);\n      fieldInfos = newInfoArray;\n    }\n\n    storedFields[numStoredFields] = field;\n    fieldInfos[numStoredFields] = fieldInfo;\n    numStoredFields++;\n\n    assert docState.testPoint(\"StoredFieldsWriterPerThread.processFields.writeField\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StoredFieldsConsumer#addField(IndexableField,FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StoredFieldsConsumer#addField(IndexableField,FieldInfo).mjava","sourceNew":"  public void addField(IndexableField field, FieldInfo fieldInfo) {\n    if (numStoredFields == storedFields.length) {\n      int newSize = ArrayUtil.oversize(numStoredFields + 1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n      IndexableField[] newArray = new IndexableField[newSize];\n      System.arraycopy(storedFields, 0, newArray, 0, numStoredFields);\n      storedFields = newArray;\n      \n      FieldInfo[] newInfoArray = new FieldInfo[newSize];\n      System.arraycopy(fieldInfos, 0, newInfoArray, 0, numStoredFields);\n      fieldInfos = newInfoArray;\n    }\n\n    storedFields[numStoredFields] = field;\n    fieldInfos[numStoredFields] = fieldInfo;\n    numStoredFields++;\n\n    assert docState.testPoint(\"StoredFieldsWriterPerThread.processFields.writeField\");\n  }\n\n","sourceOld":"  public void addField(IndexableField field, FieldInfo fieldInfo) throws IOException {\n    if (numStoredFields == storedFields.length) {\n      int newSize = ArrayUtil.oversize(numStoredFields + 1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n      IndexableField[] newArray = new IndexableField[newSize];\n      System.arraycopy(storedFields, 0, newArray, 0, numStoredFields);\n      storedFields = newArray;\n      \n      FieldInfo[] newInfoArray = new FieldInfo[newSize];\n      System.arraycopy(fieldInfos, 0, newInfoArray, 0, numStoredFields);\n      fieldInfos = newInfoArray;\n    }\n\n    storedFields[numStoredFields] = field;\n    fieldInfos[numStoredFields] = fieldInfo;\n    numStoredFields++;\n\n    assert docState.testPoint(\"StoredFieldsWriterPerThread.processFields.writeField\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StoredFieldsConsumer#addField(StorableField,FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StoredFieldsConsumer#addField(IndexableField,FieldInfo).mjava","sourceNew":"  public void addField(StorableField field, FieldInfo fieldInfo) {\n    if (numStoredFields == storedFields.length) {\n      int newSize = ArrayUtil.oversize(numStoredFields + 1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n      StorableField[] newArray = new StorableField[newSize];\n      System.arraycopy(storedFields, 0, newArray, 0, numStoredFields);\n      storedFields = newArray;\n      \n      FieldInfo[] newInfoArray = new FieldInfo[newSize];\n      System.arraycopy(fieldInfos, 0, newInfoArray, 0, numStoredFields);\n      fieldInfos = newInfoArray;\n    }\n\n    storedFields[numStoredFields] = field;\n    fieldInfos[numStoredFields] = fieldInfo;\n    numStoredFields++;\n\n    assert docState.testPoint(\"StoredFieldsWriterPerThread.processFields.writeField\");\n  }\n\n","sourceOld":"  public void addField(IndexableField field, FieldInfo fieldInfo) {\n    if (numStoredFields == storedFields.length) {\n      int newSize = ArrayUtil.oversize(numStoredFields + 1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n      IndexableField[] newArray = new IndexableField[newSize];\n      System.arraycopy(storedFields, 0, newArray, 0, numStoredFields);\n      storedFields = newArray;\n      \n      FieldInfo[] newInfoArray = new FieldInfo[newSize];\n      System.arraycopy(fieldInfos, 0, newInfoArray, 0, numStoredFields);\n      fieldInfos = newInfoArray;\n    }\n\n    storedFields[numStoredFields] = field;\n    fieldInfos[numStoredFields] = fieldInfo;\n    numStoredFields++;\n\n    assert docState.testPoint(\"StoredFieldsWriterPerThread.processFields.writeField\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1d028314cced5858683a1bb4741423d0f934257b":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a"],"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d028314cced5858683a1bb4741423d0f934257b"]},"commit2Childs":{"1d028314cced5858683a1bb4741423d0f934257b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a":["1d028314cced5858683a1bb4741423d0f934257b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["1d028314cced5858683a1bb4741423d0f934257b","33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}