{"path":"src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#parseQueryString(String).mjava","commits":[{"id":"d80013b5e260def972025c93a0b08524f9c38f49","date":1170102801,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#parseQueryString(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given a standard query string map it into solr params\n   */\n    public static MultiMapSolrParams parseQueryString(String queryString) \n  {\n    Map<String,String[]> map = new HashMap<String, String[]>();\n    if( queryString != null && queryString.length() > 0 ) {\n      for( String kv : queryString.split( \"&\" ) ) {\n        int idx = kv.indexOf( '=' );\n        if( idx > 0 ) {\n          String name = URLDecoder.decode( kv.substring( 0, idx ));\n          String value = URLDecoder.decode( kv.substring( idx+1 ));\n          MultiMapSolrParams.addParam( name, value, map );\n        }\n        else {\n          String name = URLDecoder.decode( kv );\n          MultiMapSolrParams.addParam( name, \"\", map );\n        }\n      }\n    }\n    return new MultiMapSolrParams( map );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1ee926a1176d00189d6fb3c70f739f21ffc731c3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"440157898846af9a00b84382942df3f6e3c41a93","date":1175189311,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#parseQueryString(String).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#parseQueryString(String).mjava","sourceNew":"  /**\n   * Given a standard query string map it into solr params\n   */\n  public static MultiMapSolrParams parseQueryString(String queryString) \n  {\n    Map<String,String[]> map = new HashMap<String, String[]>();\n    if( queryString != null && queryString.length() > 0 ) {\n      for( String kv : queryString.split( \"&\" ) ) {\n        int idx = kv.indexOf( '=' );\n        if( idx > 0 ) {\n          String name = URLDecoder.decode( kv.substring( 0, idx ));\n          String value = URLDecoder.decode( kv.substring( idx+1 ));\n          MultiMapSolrParams.addParam( name, value, map );\n        }\n        else {\n          String name = URLDecoder.decode( kv );\n          MultiMapSolrParams.addParam( name, \"\", map );\n        }\n      }\n    }\n    return new MultiMapSolrParams( map );\n  }\n\n","sourceOld":"  /**\n   * Given a standard query string map it into solr params\n   */\n    public static MultiMapSolrParams parseQueryString(String queryString) \n  {\n    Map<String,String[]> map = new HashMap<String, String[]>();\n    if( queryString != null && queryString.length() > 0 ) {\n      for( String kv : queryString.split( \"&\" ) ) {\n        int idx = kv.indexOf( '=' );\n        if( idx > 0 ) {\n          String name = URLDecoder.decode( kv.substring( 0, idx ));\n          String value = URLDecoder.decode( kv.substring( idx+1 ));\n          MultiMapSolrParams.addParam( name, value, map );\n        }\n        else {\n          String name = URLDecoder.decode( kv );\n          MultiMapSolrParams.addParam( name, \"\", map );\n        }\n      }\n    }\n    return new MultiMapSolrParams( map );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1ee926a1176d00189d6fb3c70f739f21ffc731c3","date":1175399022,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#parseQueryString(String).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#parseQueryString(String).mjava","sourceNew":"  /**\n   * Given a standard query string map it into solr params\n   */\n  public static MultiMapSolrParams parseQueryString(String queryString) \n  {\n    Map<String,String[]> map = new HashMap<String, String[]>();\n    if( queryString != null && queryString.length() > 0 ) {\n      try {\n        for( String kv : queryString.split( \"&\" ) ) {\n          int idx = kv.indexOf( '=' );\n          if( idx > 0 ) {\n            String name = URLDecoder.decode( kv.substring( 0, idx ), \"UTF-8\");\n            String value = URLDecoder.decode( kv.substring( idx+1 ), \"UTF-8\");\n            MultiMapSolrParams.addParam( name, value, map );\n          }\n          else {\n            String name = URLDecoder.decode( kv, \"UTF-8\" );\n            MultiMapSolrParams.addParam( name, \"\", map );\n          }\n        }\n      }\n      catch( UnsupportedEncodingException uex ) {\n        throw new SolrException( 500, uex );\n      }\n    }\n    return new MultiMapSolrParams( map );\n  }\n\n","sourceOld":"  /**\n   * Given a standard query string map it into solr params\n   */\n  public static MultiMapSolrParams parseQueryString(String queryString) \n  {\n    Map<String,String[]> map = new HashMap<String, String[]>();\n    if( queryString != null && queryString.length() > 0 ) {\n      for( String kv : queryString.split( \"&\" ) ) {\n        int idx = kv.indexOf( '=' );\n        if( idx > 0 ) {\n          String name = URLDecoder.decode( kv.substring( 0, idx ));\n          String value = URLDecoder.decode( kv.substring( idx+1 ));\n          MultiMapSolrParams.addParam( name, value, map );\n        }\n        else {\n          String name = URLDecoder.decode( kv );\n          MultiMapSolrParams.addParam( name, \"\", map );\n        }\n      }\n    }\n    return new MultiMapSolrParams( map );\n  }\n\n","bugFix":["d80013b5e260def972025c93a0b08524f9c38f49"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996","date":1180477701,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#parseQueryString(String).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#parseQueryString(String).mjava","sourceNew":"  /**\n   * Given a standard query string map it into solr params\n   */\n  public static MultiMapSolrParams parseQueryString(String queryString) \n  {\n    Map<String,String[]> map = new HashMap<String, String[]>();\n    if( queryString != null && queryString.length() > 0 ) {\n      try {\n        for( String kv : queryString.split( \"&\" ) ) {\n          int idx = kv.indexOf( '=' );\n          if( idx > 0 ) {\n            String name = URLDecoder.decode( kv.substring( 0, idx ), \"UTF-8\");\n            String value = URLDecoder.decode( kv.substring( idx+1 ), \"UTF-8\");\n            MultiMapSolrParams.addParam( name, value, map );\n          }\n          else {\n            String name = URLDecoder.decode( kv, \"UTF-8\" );\n            MultiMapSolrParams.addParam( name, \"\", map );\n          }\n        }\n      }\n      catch( UnsupportedEncodingException uex ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, uex );\n      }\n    }\n    return new MultiMapSolrParams( map );\n  }\n\n","sourceOld":"  /**\n   * Given a standard query string map it into solr params\n   */\n  public static MultiMapSolrParams parseQueryString(String queryString) \n  {\n    Map<String,String[]> map = new HashMap<String, String[]>();\n    if( queryString != null && queryString.length() > 0 ) {\n      try {\n        for( String kv : queryString.split( \"&\" ) ) {\n          int idx = kv.indexOf( '=' );\n          if( idx > 0 ) {\n            String name = URLDecoder.decode( kv.substring( 0, idx ), \"UTF-8\");\n            String value = URLDecoder.decode( kv.substring( idx+1 ), \"UTF-8\");\n            MultiMapSolrParams.addParam( name, value, map );\n          }\n          else {\n            String name = URLDecoder.decode( kv, \"UTF-8\" );\n            MultiMapSolrParams.addParam( name, \"\", map );\n          }\n        }\n      }\n      catch( UnsupportedEncodingException uex ) {\n        throw new SolrException( 500, uex );\n      }\n    }\n    return new MultiMapSolrParams( map );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#parseQueryString(String).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#parseQueryString(String).mjava","sourceNew":"  /**\n   * Given a standard query string map it into solr params\n   */\n  public static MultiMapSolrParams parseQueryString(String queryString) \n  {\n    Map<String,String[]> map = new HashMap<String, String[]>();\n    if( queryString != null && queryString.length() > 0 ) {\n      try {\n        for( String kv : queryString.split( \"&\" ) ) {\n          int idx = kv.indexOf( '=' );\n          if( idx > 0 ) {\n            String name = URLDecoder.decode( kv.substring( 0, idx ), \"UTF-8\");\n            String value = URLDecoder.decode( kv.substring( idx+1 ), \"UTF-8\");\n            MultiMapSolrParams.addParam( name, value, map );\n          }\n          else {\n            String name = URLDecoder.decode( kv, \"UTF-8\" );\n            MultiMapSolrParams.addParam( name, \"\", map );\n          }\n        }\n      }\n      catch( UnsupportedEncodingException uex ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, uex );\n      }\n    }\n    return new MultiMapSolrParams( map );\n  }\n\n","sourceOld":"  /**\n   * Given a standard query string map it into solr params\n   */\n  public static MultiMapSolrParams parseQueryString(String queryString) \n  {\n    Map<String,String[]> map = new HashMap<String, String[]>();\n    if( queryString != null && queryString.length() > 0 ) {\n      try {\n        for( String kv : queryString.split( \"&\" ) ) {\n          int idx = kv.indexOf( '=' );\n          if( idx > 0 ) {\n            String name = URLDecoder.decode( kv.substring( 0, idx ), \"UTF-8\");\n            String value = URLDecoder.decode( kv.substring( idx+1 ), \"UTF-8\");\n            MultiMapSolrParams.addParam( name, value, map );\n          }\n          else {\n            String name = URLDecoder.decode( kv, \"UTF-8\" );\n            MultiMapSolrParams.addParam( name, \"\", map );\n          }\n        }\n      }\n      catch( UnsupportedEncodingException uex ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, uex );\n      }\n    }\n    return new MultiMapSolrParams( map );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"440157898846af9a00b84382942df3f6e3c41a93":["d80013b5e260def972025c93a0b08524f9c38f49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1ee926a1176d00189d6fb3c70f739f21ffc731c3":["440157898846af9a00b84382942df3f6e3c41a93"],"ad94625fb8d088209f46650c8097196fec67f00c":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["1ee926a1176d00189d6fb3c70f739f21ffc731c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d80013b5e260def972025c93a0b08524f9c38f49":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"]},"commit2Childs":{"440157898846af9a00b84382942df3f6e3c41a93":["1ee926a1176d00189d6fb3c70f739f21ffc731c3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["d80013b5e260def972025c93a0b08524f9c38f49"],"1ee926a1176d00189d6fb3c70f739f21ffc731c3":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["ad94625fb8d088209f46650c8097196fec67f00c"],"d80013b5e260def972025c93a0b08524f9c38f49":["440157898846af9a00b84382942df3f6e3c41a93"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}