{"path":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","commits":[{"id":"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c","date":1531585717,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      private boolean queryContains(byte[] t, int point) {\n        final int yIdx = 2 * LatLonPoint.BYTES * point;\n        final int xIdx = yIdx + LatLonPoint.BYTES;\n\n        if (FutureArrays.compareUnsigned(t, yIdx, xIdx, bbox, 0, LatLonPoint.BYTES) < 0 ||                     //minY\n            FutureArrays.compareUnsigned(t, yIdx, xIdx, bbox, 2 * LatLonPoint.BYTES, 3 * LatLonPoint.BYTES) > 0 ||  //maxY\n            FutureArrays.compareUnsigned(t, xIdx, xIdx + LatLonPoint.BYTES, bbox, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES) < 0 || // minX\n            FutureArrays.compareUnsigned(t, xIdx, xIdx + LatLonPoint.BYTES, bbox, 3 * LatLonPoint.BYTES, bbox.length) > 0) {\n          return false;\n        }\n        return true;\n      }\n\n      private boolean queryIntersects(int ax, int ay, int bx, int by, int cx, int cy) {\n        // top\n        if (Tessellator.linesIntersect(minX, maxY, maxX, maxY, ax, ay, bx, by) ||\n            Tessellator.linesIntersect(minX, maxY, maxX, maxY, bx, by, cx, cy) ||\n            Tessellator.linesIntersect(minX, maxY, maxX, maxY, cx, cy, ax, ay)) {\n          return true;\n        }\n\n        // bottom\n        if (Tessellator.linesIntersect(minX, minY, maxX, minY, ax, ay, bx, by) ||\n            Tessellator.linesIntersect(minX, minY, maxX, minY, bx, by, cx, cy) ||\n            Tessellator.linesIntersect(minX, minY, maxX, minY, cx, cy, ax, ay)) {\n          return true;\n        }\n\n        // left\n        if (Tessellator.linesIntersect(minX, minY, minX, maxY, ax, ay, bx, by) ||\n            Tessellator.linesIntersect(minX, minY, minX, maxY, bx, by, cx, cy) ||\n            Tessellator.linesIntersect(minX, minY, minX, maxY, cx, cy, ax, ay)) {\n          return true;\n        }\n\n        // right\n        if (Tessellator.linesIntersect(maxX, minY, maxX, maxY, ax, ay, bx, by) ||\n            Tessellator.linesIntersect(maxX, minY, maxX, maxY, bx, by, cx, cy) ||\n            Tessellator.linesIntersect(maxX, minY, maxX, maxY, cx, cy, ax, ay)) {\n          return true;\n        }\n        return false;\n      }\n\n      private boolean queryCrossesTriangle(byte[] t) {\n        // 1. query contains any triangle points\n        if (queryContains(t, 0) || queryContains(t, 1) || queryContains(t, 2)) {\n          return true;\n        }\n\n        int aY = NumericUtils.sortableBytesToInt(t, 0);\n        int aX = NumericUtils.sortableBytesToInt(t, LatLonPoint.BYTES);\n        int bY = NumericUtils.sortableBytesToInt(t, 2 * LatLonPoint.BYTES);\n        int bX = NumericUtils.sortableBytesToInt(t, 3 * LatLonPoint.BYTES);\n        int cY = NumericUtils.sortableBytesToInt(t, 4 * LatLonPoint.BYTES);\n        int cX = NumericUtils.sortableBytesToInt(t, 5 * LatLonPoint.BYTES);\n\n        int tMinX = StrictMath.min(StrictMath.min(aX, bX), cX);\n        int tMaxX = StrictMath.max(StrictMath.max(aX, bX), cX);\n        int tMinY = StrictMath.min(StrictMath.min(aY, bY), cY);\n        int tMaxY = StrictMath.max(StrictMath.max(aY, bY), cY);\n\n        // 2. check bounding boxes are disjoint\n        if (tMaxX < minX || tMinX > maxX || tMinY > maxY || tMaxY < minY) {\n          return false;\n        }\n\n        // 3. check triangle contains any query points\n        if (Tessellator.pointInTriangle(minX, minY, aX, aY, bX, bY, cX, cY)) {\n          return true;\n        } else if (Tessellator.pointInTriangle(maxX, minY, aX, aY, bX, bY, cX, cY)) {\n          return true;\n        } else if (Tessellator.pointInTriangle(maxX, maxY, aX, aY, bX, bY, cX, cY)) {\n          return true;\n        } else if (Tessellator.pointInTriangle(minX, maxY, aX, aY, bX, bY, cX, cY)) {\n          return true;\n        }\n\n\n        // 4. last ditch effort: check crossings\n        if (queryIntersects(aX, aY, bX, bY, cX, cY)) {\n          return true;\n        }\n        return false;\n      }\n\n      private Relation relateRangeToQuery(byte[] minTriangle, byte[] maxTriangle) {\n        // compute bounding box\n        int minXOfs = 0;\n        int minYOfs = 0;\n        int maxXOfs = 0;\n        int maxYOfs = 0;\n        for (int d = 1; d < 3; ++d) {\n          // check minX\n          int aOfs = (minXOfs * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n          int bOfs = (d * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n          if (FutureArrays.compareUnsigned(minTriangle, bOfs, bOfs + LatLonPoint.BYTES, minTriangle, aOfs, aOfs + LatLonPoint.BYTES) < 0) {\n            minXOfs = d;\n          }\n          // check maxX\n          aOfs = (maxXOfs * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n          if (FutureArrays.compareUnsigned(maxTriangle, bOfs, bOfs + LatLonPoint.BYTES, maxTriangle, aOfs, aOfs + LatLonPoint.BYTES) > 0) {\n            maxXOfs = d;\n          }\n          // check minY\n          aOfs = minYOfs * 2 * LatLonPoint.BYTES;\n          bOfs = d * 2 * LatLonPoint.BYTES;\n          if (FutureArrays.compareUnsigned(minTriangle, bOfs, bOfs + LatLonPoint.BYTES, minTriangle, aOfs, aOfs + LatLonPoint.BYTES) < 0) {\n            minYOfs = d;\n          }\n          // check maxY\n          aOfs = maxYOfs * 2 * LatLonPoint.BYTES;\n          if (FutureArrays.compareUnsigned(maxTriangle, bOfs, bOfs + LatLonPoint.BYTES, maxTriangle, aOfs, aOfs + LatLonPoint.BYTES) > 0) {\n            maxYOfs = d;\n          }\n        }\n        minXOfs = (minXOfs * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n        maxXOfs = (maxXOfs * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n        minYOfs *= 2 * LatLonPoint.BYTES;\n        maxYOfs *= 2 * LatLonPoint.BYTES;\n\n        // check bounding box (DISJOINT)\n        if (FutureArrays.compareUnsigned(minTriangle, minXOfs, minXOfs + LatLonPoint.BYTES, bbox, 3 * LatLonPoint.BYTES, 4 * LatLonPoint.BYTES) > 0 ||\n            FutureArrays.compareUnsigned(maxTriangle, maxXOfs, maxXOfs + LatLonPoint.BYTES, bbox, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES) < 0 ||\n            FutureArrays.compareUnsigned(minTriangle, minYOfs, minYOfs + LatLonPoint.BYTES, bbox, 2 * LatLonPoint.BYTES, 3 * LatLonPoint.BYTES) > 0 ||\n            FutureArrays.compareUnsigned(maxTriangle, maxYOfs, maxYOfs + LatLonPoint.BYTES, bbox, 0, LatLonPoint.BYTES) < 0) {\n          return Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        if (FutureArrays.compareUnsigned(minTriangle, minXOfs, minXOfs + LatLonPoint.BYTES, bbox, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES) > 0 &&\n            FutureArrays.compareUnsigned(maxTriangle, maxXOfs, maxXOfs + LatLonPoint.BYTES, bbox, 3 * LatLonPoint.BYTES, 4 * LatLonPoint.BYTES) < 0 &&\n            FutureArrays.compareUnsigned(minTriangle, minYOfs, minYOfs + LatLonPoint.BYTES, bbox, 0, LatLonPoint.BYTES) > 0 &&\n            FutureArrays.compareUnsigned(maxTriangle, maxYOfs, maxYOfs + LatLonPoint.BYTES, bbox, 2 * LatLonPoint.BYTES, 2 * LatLonPoint.BYTES) < 0) {\n          return Relation.CELL_INSIDE_QUERY;\n        }\n        return Relation.CELL_CROSSES_QUERY;\n      }\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) throws IOException {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] t) throws IOException {\n            if (queryCrossesTriangle(t)) {\n              adder.add(docID);\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minTriangle, byte[] maxTriangle) {\n            return relateRangeToQuery(minTriangle, maxTriangle);\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the bounding box query.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedTriangle) {\n            if (queryCrossesTriangle(packedTriangle)) {\n              result.clear(docID);\n              cost[0]--;\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            Relation r = relateRangeToQuery(minPackedValue, maxPackedValue);\n            if (r == Relation.CELL_OUTSIDE_QUERY) {\n              return Relation.CELL_INSIDE_QUERY;\n            } else if (r == Relation.CELL_INSIDE_QUERY || r == Relation.CELL_CROSSES_QUERY) {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n            return r;\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        boolean allDocsMatch = true;\n        if (values.getDocCount() != reader.maxDoc() ||\n            relateRangeToQuery(values.getMinPackedValue(), values.getMaxPackedValue()) != Relation.CELL_INSIDE_QUERY) {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              return new ConstantScoreScorer(weight, score(),\n                  DocIdSetIterator.all(reader.maxDoc()));\n            }\n\n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              if (values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the query\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[]{reader.maxDoc()};\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n\n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      private boolean queryContains(byte[] t, int point) {\n        final int yIdx = 2 * LatLonPoint.BYTES * point;\n        final int xIdx = yIdx + LatLonPoint.BYTES;\n\n        if (FutureArrays.compareUnsigned(t, yIdx, xIdx, bbox, 0, LatLonPoint.BYTES) < 0 ||                     //minY\n            FutureArrays.compareUnsigned(t, yIdx, xIdx, bbox, 2 * LatLonPoint.BYTES, 3 * LatLonPoint.BYTES) > 0 ||  //maxY\n            FutureArrays.compareUnsigned(t, xIdx, xIdx + LatLonPoint.BYTES, bbox, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES) < 0 || // minX\n            FutureArrays.compareUnsigned(t, xIdx, xIdx + LatLonPoint.BYTES, bbox, 3 * LatLonPoint.BYTES, bbox.length) > 0) {\n          return false;\n        }\n        return true;\n      }\n\n      private boolean queryIntersects(int ax, int ay, int bx, int by, int cx, int cy) {\n        // top\n        if (Tessellator.linesIntersect(minX, maxY, maxX, maxY, ax, ay, bx, by) ||\n            Tessellator.linesIntersect(minX, maxY, maxX, maxY, bx, by, cx, cy) ||\n            Tessellator.linesIntersect(minX, maxY, maxX, maxY, cx, cy, ax, ay)) {\n          return true;\n        }\n\n        // bottom\n        if (Tessellator.linesIntersect(minX, minY, maxX, minY, ax, ay, bx, by) ||\n            Tessellator.linesIntersect(minX, minY, maxX, minY, bx, by, cx, cy) ||\n            Tessellator.linesIntersect(minX, minY, maxX, minY, cx, cy, ax, ay)) {\n          return true;\n        }\n\n        // left\n        if (Tessellator.linesIntersect(minX, minY, minX, maxY, ax, ay, bx, by) ||\n            Tessellator.linesIntersect(minX, minY, minX, maxY, bx, by, cx, cy) ||\n            Tessellator.linesIntersect(minX, minY, minX, maxY, cx, cy, ax, ay)) {\n          return true;\n        }\n\n        // right\n        if (Tessellator.linesIntersect(maxX, minY, maxX, maxY, ax, ay, bx, by) ||\n            Tessellator.linesIntersect(maxX, minY, maxX, maxY, bx, by, cx, cy) ||\n            Tessellator.linesIntersect(maxX, minY, maxX, maxY, cx, cy, ax, ay)) {\n          return true;\n        }\n        return false;\n      }\n\n      private boolean queryCrossesTriangle(byte[] t) {\n        // 1. query contains any triangle points\n        if (queryContains(t, 0) || queryContains(t, 1) || queryContains(t, 2)) {\n          return true;\n        }\n\n        int aY = NumericUtils.sortableBytesToInt(t, 0);\n        int aX = NumericUtils.sortableBytesToInt(t, LatLonPoint.BYTES);\n        int bY = NumericUtils.sortableBytesToInt(t, 2 * LatLonPoint.BYTES);\n        int bX = NumericUtils.sortableBytesToInt(t, 3 * LatLonPoint.BYTES);\n        int cY = NumericUtils.sortableBytesToInt(t, 4 * LatLonPoint.BYTES);\n        int cX = NumericUtils.sortableBytesToInt(t, 5 * LatLonPoint.BYTES);\n\n        int tMinX = StrictMath.min(StrictMath.min(aX, bX), cX);\n        int tMaxX = StrictMath.max(StrictMath.max(aX, bX), cX);\n        int tMinY = StrictMath.min(StrictMath.min(aY, bY), cY);\n        int tMaxY = StrictMath.max(StrictMath.max(aY, bY), cY);\n\n        // 2. check bounding boxes are disjoint\n        if (tMaxX < minX || tMinX > maxX || tMinY > maxY || tMaxY < minY) {\n          return false;\n        }\n\n        // 3. check triangle contains any query points\n        if (Tessellator.pointInTriangle(minX, minY, aX, aY, bX, bY, cX, cY)) {\n          return true;\n        } else if (Tessellator.pointInTriangle(maxX, minY, aX, aY, bX, bY, cX, cY)) {\n          return true;\n        } else if (Tessellator.pointInTriangle(maxX, maxY, aX, aY, bX, bY, cX, cY)) {\n          return true;\n        } else if (Tessellator.pointInTriangle(minX, maxY, aX, aY, bX, bY, cX, cY)) {\n          return true;\n        }\n\n\n        // 4. last ditch effort: check crossings\n        if (queryIntersects(aX, aY, bX, bY, cX, cY)) {\n          return true;\n        }\n        return false;\n      }\n\n      private Relation relateRangeToQuery(byte[] minTriangle, byte[] maxTriangle) {\n        // compute bounding box\n        int minXOfs = 0;\n        int minYOfs = 0;\n        int maxXOfs = 0;\n        int maxYOfs = 0;\n        for (int d = 1; d < 3; ++d) {\n          // check minX\n          int aOfs = (minXOfs * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n          int bOfs = (d * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n          if (FutureArrays.compareUnsigned(minTriangle, bOfs, bOfs + LatLonPoint.BYTES, minTriangle, aOfs, aOfs + LatLonPoint.BYTES) < 0) {\n            minXOfs = d;\n          }\n          // check maxX\n          aOfs = (maxXOfs * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n          if (FutureArrays.compareUnsigned(maxTriangle, bOfs, bOfs + LatLonPoint.BYTES, maxTriangle, aOfs, aOfs + LatLonPoint.BYTES) > 0) {\n            maxXOfs = d;\n          }\n          // check minY\n          aOfs = minYOfs * 2 * LatLonPoint.BYTES;\n          bOfs = d * 2 * LatLonPoint.BYTES;\n          if (FutureArrays.compareUnsigned(minTriangle, bOfs, bOfs + LatLonPoint.BYTES, minTriangle, aOfs, aOfs + LatLonPoint.BYTES) < 0) {\n            minYOfs = d;\n          }\n          // check maxY\n          aOfs = maxYOfs * 2 * LatLonPoint.BYTES;\n          if (FutureArrays.compareUnsigned(maxTriangle, bOfs, bOfs + LatLonPoint.BYTES, maxTriangle, aOfs, aOfs + LatLonPoint.BYTES) > 0) {\n            maxYOfs = d;\n          }\n        }\n        minXOfs = (minXOfs * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n        maxXOfs = (maxXOfs * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n        minYOfs *= 2 * LatLonPoint.BYTES;\n        maxYOfs *= 2 * LatLonPoint.BYTES;\n\n        // check bounding box (DISJOINT)\n        if (FutureArrays.compareUnsigned(minTriangle, minXOfs, minXOfs + LatLonPoint.BYTES, bbox, 3 * LatLonPoint.BYTES, 4 * LatLonPoint.BYTES) > 0 ||\n            FutureArrays.compareUnsigned(maxTriangle, maxXOfs, maxXOfs + LatLonPoint.BYTES, bbox, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES) < 0 ||\n            FutureArrays.compareUnsigned(minTriangle, minYOfs, minYOfs + LatLonPoint.BYTES, bbox, 2 * LatLonPoint.BYTES, 3 * LatLonPoint.BYTES) > 0 ||\n            FutureArrays.compareUnsigned(maxTriangle, maxYOfs, maxYOfs + LatLonPoint.BYTES, bbox, 0, LatLonPoint.BYTES) < 0) {\n          return Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        if (FutureArrays.compareUnsigned(minTriangle, minXOfs, minXOfs + LatLonPoint.BYTES, bbox, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES) > 0 &&\n            FutureArrays.compareUnsigned(maxTriangle, maxXOfs, maxXOfs + LatLonPoint.BYTES, bbox, 3 * LatLonPoint.BYTES, 4 * LatLonPoint.BYTES) < 0 &&\n            FutureArrays.compareUnsigned(minTriangle, minYOfs, minYOfs + LatLonPoint.BYTES, bbox, 0, LatLonPoint.BYTES) > 0 &&\n            FutureArrays.compareUnsigned(maxTriangle, maxYOfs, maxYOfs + LatLonPoint.BYTES, bbox, 2 * LatLonPoint.BYTES, 2 * LatLonPoint.BYTES) < 0) {\n          return Relation.CELL_INSIDE_QUERY;\n        }\n        return Relation.CELL_CROSSES_QUERY;\n      }\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) throws IOException {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] t) throws IOException {\n            if (queryCrossesTriangle(t)) {\n              adder.add(docID);\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minTriangle, byte[] maxTriangle) {\n            return relateRangeToQuery(minTriangle, maxTriangle);\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the bounding box query.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedTriangle) {\n            if (queryCrossesTriangle(packedTriangle)) {\n              result.clear(docID);\n              cost[0]--;\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            Relation r = relateRangeToQuery(minPackedValue, maxPackedValue);\n            if (r == Relation.CELL_OUTSIDE_QUERY) {\n              return Relation.CELL_INSIDE_QUERY;\n            } else if (r == Relation.CELL_INSIDE_QUERY || r == Relation.CELL_CROSSES_QUERY) {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n            return r;\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        boolean allDocsMatch = true;\n        if (values.getDocCount() != reader.maxDoc() ||\n            relateRangeToQuery(values.getMinPackedValue(), values.getMaxPackedValue()) != Relation.CELL_INSIDE_QUERY) {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              return new ConstantScoreScorer(weight, score(),\n                  DocIdSetIterator.all(reader.maxDoc()));\n            }\n\n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              if (values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the query\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[]{reader.maxDoc()};\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n\n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      private boolean queryContains(byte[] t, int point) {\n        final int yIdx = 2 * LatLonPoint.BYTES * point;\n        final int xIdx = yIdx + LatLonPoint.BYTES;\n\n        if (FutureArrays.compareUnsigned(t, yIdx, xIdx, bbox, 0, LatLonPoint.BYTES) < 0 ||                     //minY\n            FutureArrays.compareUnsigned(t, yIdx, xIdx, bbox, 2 * LatLonPoint.BYTES, 3 * LatLonPoint.BYTES) > 0 ||  //maxY\n            FutureArrays.compareUnsigned(t, xIdx, xIdx + LatLonPoint.BYTES, bbox, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES) < 0 || // minX\n            FutureArrays.compareUnsigned(t, xIdx, xIdx + LatLonPoint.BYTES, bbox, 3 * LatLonPoint.BYTES, bbox.length) > 0) {\n          return false;\n        }\n        return true;\n      }\n\n      private boolean queryIntersects(int ax, int ay, int bx, int by, int cx, int cy) {\n        // top\n        if (Tessellator.linesIntersect(minX, maxY, maxX, maxY, ax, ay, bx, by) ||\n            Tessellator.linesIntersect(minX, maxY, maxX, maxY, bx, by, cx, cy) ||\n            Tessellator.linesIntersect(minX, maxY, maxX, maxY, cx, cy, ax, ay)) {\n          return true;\n        }\n\n        // bottom\n        if (Tessellator.linesIntersect(minX, minY, maxX, minY, ax, ay, bx, by) ||\n            Tessellator.linesIntersect(minX, minY, maxX, minY, bx, by, cx, cy) ||\n            Tessellator.linesIntersect(minX, minY, maxX, minY, cx, cy, ax, ay)) {\n          return true;\n        }\n\n        // left\n        if (Tessellator.linesIntersect(minX, minY, minX, maxY, ax, ay, bx, by) ||\n            Tessellator.linesIntersect(minX, minY, minX, maxY, bx, by, cx, cy) ||\n            Tessellator.linesIntersect(minX, minY, minX, maxY, cx, cy, ax, ay)) {\n          return true;\n        }\n\n        // right\n        if (Tessellator.linesIntersect(maxX, minY, maxX, maxY, ax, ay, bx, by) ||\n            Tessellator.linesIntersect(maxX, minY, maxX, maxY, bx, by, cx, cy) ||\n            Tessellator.linesIntersect(maxX, minY, maxX, maxY, cx, cy, ax, ay)) {\n          return true;\n        }\n        return false;\n      }\n\n      private boolean queryCrossesTriangle(byte[] t) {\n        // 1. query contains any triangle points\n        if (queryContains(t, 0) || queryContains(t, 1) || queryContains(t, 2)) {\n          return true;\n        }\n\n        int aY = NumericUtils.sortableBytesToInt(t, 0);\n        int aX = NumericUtils.sortableBytesToInt(t, LatLonPoint.BYTES);\n        int bY = NumericUtils.sortableBytesToInt(t, 2 * LatLonPoint.BYTES);\n        int bX = NumericUtils.sortableBytesToInt(t, 3 * LatLonPoint.BYTES);\n        int cY = NumericUtils.sortableBytesToInt(t, 4 * LatLonPoint.BYTES);\n        int cX = NumericUtils.sortableBytesToInt(t, 5 * LatLonPoint.BYTES);\n\n        int tMinX = StrictMath.min(StrictMath.min(aX, bX), cX);\n        int tMaxX = StrictMath.max(StrictMath.max(aX, bX), cX);\n        int tMinY = StrictMath.min(StrictMath.min(aY, bY), cY);\n        int tMaxY = StrictMath.max(StrictMath.max(aY, bY), cY);\n\n        // 2. check bounding boxes are disjoint\n        if (tMaxX < minX || tMinX > maxX || tMinY > maxY || tMaxY < minY) {\n          return false;\n        }\n\n        // 3. check triangle contains any query points\n        if (Tessellator.pointInTriangle(minX, minY, aX, aY, bX, bY, cX, cY)) {\n          return true;\n        } else if (Tessellator.pointInTriangle(maxX, minY, aX, aY, bX, bY, cX, cY)) {\n          return true;\n        } else if (Tessellator.pointInTriangle(maxX, maxY, aX, aY, bX, bY, cX, cY)) {\n          return true;\n        } else if (Tessellator.pointInTriangle(minX, maxY, aX, aY, bX, bY, cX, cY)) {\n          return true;\n        }\n\n\n        // 4. last ditch effort: check crossings\n        if (queryIntersects(aX, aY, bX, bY, cX, cY)) {\n          return true;\n        }\n        return false;\n      }\n\n      private Relation relateRangeToQuery(byte[] minTriangle, byte[] maxTriangle) {\n        // compute bounding box\n        int minXOfs = 0;\n        int minYOfs = 0;\n        int maxXOfs = 0;\n        int maxYOfs = 0;\n        for (int d = 1; d < 3; ++d) {\n          // check minX\n          int aOfs = (minXOfs * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n          int bOfs = (d * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n          if (FutureArrays.compareUnsigned(minTriangle, bOfs, bOfs + LatLonPoint.BYTES, minTriangle, aOfs, aOfs + LatLonPoint.BYTES) < 0) {\n            minXOfs = d;\n          }\n          // check maxX\n          aOfs = (maxXOfs * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n          if (FutureArrays.compareUnsigned(maxTriangle, bOfs, bOfs + LatLonPoint.BYTES, maxTriangle, aOfs, aOfs + LatLonPoint.BYTES) > 0) {\n            maxXOfs = d;\n          }\n          // check minY\n          aOfs = minYOfs * 2 * LatLonPoint.BYTES;\n          bOfs = d * 2 * LatLonPoint.BYTES;\n          if (FutureArrays.compareUnsigned(minTriangle, bOfs, bOfs + LatLonPoint.BYTES, minTriangle, aOfs, aOfs + LatLonPoint.BYTES) < 0) {\n            minYOfs = d;\n          }\n          // check maxY\n          aOfs = maxYOfs * 2 * LatLonPoint.BYTES;\n          if (FutureArrays.compareUnsigned(maxTriangle, bOfs, bOfs + LatLonPoint.BYTES, maxTriangle, aOfs, aOfs + LatLonPoint.BYTES) > 0) {\n            maxYOfs = d;\n          }\n        }\n        minXOfs = (minXOfs * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n        maxXOfs = (maxXOfs * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n        minYOfs *= 2 * LatLonPoint.BYTES;\n        maxYOfs *= 2 * LatLonPoint.BYTES;\n\n        // check bounding box (DISJOINT)\n        if (FutureArrays.compareUnsigned(minTriangle, minXOfs, minXOfs + LatLonPoint.BYTES, bbox, 3 * LatLonPoint.BYTES, 4 * LatLonPoint.BYTES) > 0 ||\n            FutureArrays.compareUnsigned(maxTriangle, maxXOfs, maxXOfs + LatLonPoint.BYTES, bbox, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES) < 0 ||\n            FutureArrays.compareUnsigned(minTriangle, minYOfs, minYOfs + LatLonPoint.BYTES, bbox, 2 * LatLonPoint.BYTES, 3 * LatLonPoint.BYTES) > 0 ||\n            FutureArrays.compareUnsigned(maxTriangle, maxYOfs, maxYOfs + LatLonPoint.BYTES, bbox, 0, LatLonPoint.BYTES) < 0) {\n          return Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        if (FutureArrays.compareUnsigned(minTriangle, minXOfs, minXOfs + LatLonPoint.BYTES, bbox, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES) > 0 &&\n            FutureArrays.compareUnsigned(maxTriangle, maxXOfs, maxXOfs + LatLonPoint.BYTES, bbox, 3 * LatLonPoint.BYTES, 4 * LatLonPoint.BYTES) < 0 &&\n            FutureArrays.compareUnsigned(minTriangle, minYOfs, minYOfs + LatLonPoint.BYTES, bbox, 0, LatLonPoint.BYTES) > 0 &&\n            FutureArrays.compareUnsigned(maxTriangle, maxYOfs, maxYOfs + LatLonPoint.BYTES, bbox, 2 * LatLonPoint.BYTES, 2 * LatLonPoint.BYTES) < 0) {\n          return Relation.CELL_INSIDE_QUERY;\n        }\n        return Relation.CELL_CROSSES_QUERY;\n      }\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) throws IOException {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] t) throws IOException {\n            if (queryCrossesTriangle(t)) {\n              adder.add(docID);\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minTriangle, byte[] maxTriangle) {\n            return relateRangeToQuery(minTriangle, maxTriangle);\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the bounding box query.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedTriangle) {\n            if (queryCrossesTriangle(packedTriangle)) {\n              result.clear(docID);\n              cost[0]--;\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            Relation r = relateRangeToQuery(minPackedValue, maxPackedValue);\n            if (r == Relation.CELL_OUTSIDE_QUERY) {\n              return Relation.CELL_INSIDE_QUERY;\n            } else if (r == Relation.CELL_INSIDE_QUERY || r == Relation.CELL_CROSSES_QUERY) {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n            return r;\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        boolean allDocsMatch = true;\n        if (values.getDocCount() != reader.maxDoc() ||\n            relateRangeToQuery(values.getMinPackedValue(), values.getMaxPackedValue()) != Relation.CELL_INSIDE_QUERY) {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              return new ConstantScoreScorer(weight, score(),\n                  DocIdSetIterator.all(reader.maxDoc()));\n            }\n\n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              if (values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the query\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[]{reader.maxDoc()};\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n\n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f62d73fcb44b07f005bbdb88086af50e9064ecb2","date":1532024945,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      private boolean edgeIntersectsQuery(double ax, double ay, double bx, double by) {\n        // top\n        if (orient(ax, ay, bx, by, minX, maxY) * orient(ax, ay, bx, by, maxX, maxY) <= 0 &&\n            orient(minX, maxY, maxX, maxY, ax, ay) * orient(minX, maxY, maxX, maxY, bx, by) <= 0) {\n          return true;\n        }\n\n        // right\n        if (orient(ax, ay, bx, by, maxX, maxY) * orient(ax, ay, bx, by, maxX, minY) <= 0 &&\n            orient(maxX, maxY, maxX, minY, ax, ay) * orient(maxX, maxY, maxX, minY, bx, by) <= 0) {\n          return true;\n        }\n\n        // bottom\n        if (orient(ax, ay, bx, by, maxX, minY) * orient(ax, ay, bx, by, minX, minY) <= 0 &&\n            orient(maxX, minY, minX, minY, ax, ay) * orient(maxX, minY, minX, minY, bx, by) <= 0) {\n          return true;\n        }\n\n        // left\n        if (orient(ax, ay, bx, by, minX, minY) * orient(ax, ay, bx, by, minX, maxY) <= 0 &&\n            orient(minX, minY, minX, maxY, ax, ay) * orient(minX, minY, minX, maxY, bx, by) <= 0) {\n          return true;\n        }\n        return false;\n      }\n\n      private boolean queryContains(byte[] t, int point) {\n        final int yIdx = 2 * LatLonPoint.BYTES * point;\n        final int xIdx = yIdx + LatLonPoint.BYTES;\n\n        if (FutureArrays.compareUnsigned(t, yIdx, xIdx, bbox, 0, LatLonPoint.BYTES) < 0 ||                     //minY\n            FutureArrays.compareUnsigned(t, yIdx, xIdx, bbox, 2 * LatLonPoint.BYTES, 3 * LatLonPoint.BYTES) > 0 ||  //maxY\n            FutureArrays.compareUnsigned(t, xIdx, xIdx + LatLonPoint.BYTES, bbox, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES) < 0 || // minX\n            FutureArrays.compareUnsigned(t, xIdx, xIdx + LatLonPoint.BYTES, bbox, 3 * LatLonPoint.BYTES, bbox.length) > 0) {\n          return false;\n        }\n        return true;\n      }\n\n      private boolean queryIntersects(int ax, int ay, int bx, int by, int cx, int cy) {\n        // check each edge of the triangle against the query\n        if (edgeIntersectsQuery(ax, ay, bx, by) ||\n            edgeIntersectsQuery(bx, by, cx, cy) ||\n            edgeIntersectsQuery(cx, cy, ax, ay)) {\n          return true;\n        }\n        return false;\n      }\n\n      private boolean queryCrossesTriangle(byte[] t) {\n        // 1. query contains any triangle points\n        if (queryContains(t, 0) || queryContains(t, 1) || queryContains(t, 2)) {\n          return true;\n        }\n\n        int aY = NumericUtils.sortableBytesToInt(t, 0);\n        int aX = NumericUtils.sortableBytesToInt(t, LatLonPoint.BYTES);\n        int bY = NumericUtils.sortableBytesToInt(t, 2 * LatLonPoint.BYTES);\n        int bX = NumericUtils.sortableBytesToInt(t, 3 * LatLonPoint.BYTES);\n        int cY = NumericUtils.sortableBytesToInt(t, 4 * LatLonPoint.BYTES);\n        int cX = NumericUtils.sortableBytesToInt(t, 5 * LatLonPoint.BYTES);\n\n        int tMinX = StrictMath.min(StrictMath.min(aX, bX), cX);\n        int tMaxX = StrictMath.max(StrictMath.max(aX, bX), cX);\n        int tMinY = StrictMath.min(StrictMath.min(aY, bY), cY);\n        int tMaxY = StrictMath.max(StrictMath.max(aY, bY), cY);\n\n        // 2. check bounding boxes are disjoint\n        if (tMaxX < minX || tMinX > maxX || tMinY > maxY || tMaxY < minY) {\n          return false;\n        }\n\n        // 3. check triangle contains any query points\n        if (Tessellator.pointInTriangle(minX, minY, aX, aY, bX, bY, cX, cY)) {\n          return true;\n        } else if (Tessellator.pointInTriangle(maxX, minY, aX, aY, bX, bY, cX, cY)) {\n          return true;\n        } else if (Tessellator.pointInTriangle(maxX, maxY, aX, aY, bX, bY, cX, cY)) {\n          return true;\n        } else if (Tessellator.pointInTriangle(minX, maxY, aX, aY, bX, bY, cX, cY)) {\n          return true;\n        }\n\n\n        // 4. last ditch effort: check crossings\n        if (queryIntersects(aX, aY, bX, bY, cX, cY)) {\n          return true;\n        }\n        return false;\n      }\n\n      private Relation relateRangeToQuery(byte[] minTriangle, byte[] maxTriangle) {\n        // compute bounding box\n        int minXOfs = 0;\n        int minYOfs = 0;\n        int maxXOfs = 0;\n        int maxYOfs = 0;\n        for (int d = 1; d < 3; ++d) {\n          // check minX\n          int aOfs = (minXOfs * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n          int bOfs = (d * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n          if (FutureArrays.compareUnsigned(minTriangle, bOfs, bOfs + LatLonPoint.BYTES, minTriangle, aOfs, aOfs + LatLonPoint.BYTES) < 0) {\n            minXOfs = d;\n          }\n          // check maxX\n          aOfs = (maxXOfs * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n          if (FutureArrays.compareUnsigned(maxTriangle, bOfs, bOfs + LatLonPoint.BYTES, maxTriangle, aOfs, aOfs + LatLonPoint.BYTES) > 0) {\n            maxXOfs = d;\n          }\n          // check minY\n          aOfs = minYOfs * 2 * LatLonPoint.BYTES;\n          bOfs = d * 2 * LatLonPoint.BYTES;\n          if (FutureArrays.compareUnsigned(minTriangle, bOfs, bOfs + LatLonPoint.BYTES, minTriangle, aOfs, aOfs + LatLonPoint.BYTES) < 0) {\n            minYOfs = d;\n          }\n          // check maxY\n          aOfs = maxYOfs * 2 * LatLonPoint.BYTES;\n          if (FutureArrays.compareUnsigned(maxTriangle, bOfs, bOfs + LatLonPoint.BYTES, maxTriangle, aOfs, aOfs + LatLonPoint.BYTES) > 0) {\n            maxYOfs = d;\n          }\n        }\n        minXOfs = (minXOfs * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n        maxXOfs = (maxXOfs * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n        minYOfs *= 2 * LatLonPoint.BYTES;\n        maxYOfs *= 2 * LatLonPoint.BYTES;\n\n        // check bounding box (DISJOINT)\n        if (FutureArrays.compareUnsigned(minTriangle, minXOfs, minXOfs + LatLonPoint.BYTES, bbox, 3 * LatLonPoint.BYTES, 4 * LatLonPoint.BYTES) > 0 ||\n            FutureArrays.compareUnsigned(maxTriangle, maxXOfs, maxXOfs + LatLonPoint.BYTES, bbox, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES) < 0 ||\n            FutureArrays.compareUnsigned(minTriangle, minYOfs, minYOfs + LatLonPoint.BYTES, bbox, 2 * LatLonPoint.BYTES, 3 * LatLonPoint.BYTES) > 0 ||\n            FutureArrays.compareUnsigned(maxTriangle, maxYOfs, maxYOfs + LatLonPoint.BYTES, bbox, 0, LatLonPoint.BYTES) < 0) {\n          return Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        if (FutureArrays.compareUnsigned(minTriangle, minXOfs, minXOfs + LatLonPoint.BYTES, bbox, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES) > 0 &&\n            FutureArrays.compareUnsigned(maxTriangle, maxXOfs, maxXOfs + LatLonPoint.BYTES, bbox, 3 * LatLonPoint.BYTES, 4 * LatLonPoint.BYTES) < 0 &&\n            FutureArrays.compareUnsigned(minTriangle, minYOfs, minYOfs + LatLonPoint.BYTES, bbox, 0, LatLonPoint.BYTES) > 0 &&\n            FutureArrays.compareUnsigned(maxTriangle, maxYOfs, maxYOfs + LatLonPoint.BYTES, bbox, 2 * LatLonPoint.BYTES, 2 * LatLonPoint.BYTES) < 0) {\n          return Relation.CELL_INSIDE_QUERY;\n        }\n        return Relation.CELL_CROSSES_QUERY;\n      }\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) throws IOException {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] t) throws IOException {\n            if (queryCrossesTriangle(t)) {\n              adder.add(docID);\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minTriangle, byte[] maxTriangle) {\n            return relateRangeToQuery(minTriangle, maxTriangle);\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the bounding box query.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedTriangle) {\n            if (queryCrossesTriangle(packedTriangle)) {\n              result.clear(docID);\n              cost[0]--;\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            Relation r = relateRangeToQuery(minPackedValue, maxPackedValue);\n            if (r == Relation.CELL_OUTSIDE_QUERY) {\n              return Relation.CELL_INSIDE_QUERY;\n            } else if (r == Relation.CELL_INSIDE_QUERY || r == Relation.CELL_CROSSES_QUERY) {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n            return r;\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        boolean allDocsMatch = true;\n        if (values.getDocCount() != reader.maxDoc() ||\n            relateRangeToQuery(values.getMinPackedValue(), values.getMaxPackedValue()) != Relation.CELL_INSIDE_QUERY) {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              return new ConstantScoreScorer(weight, score(),\n                  DocIdSetIterator.all(reader.maxDoc()));\n            }\n\n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              if (values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the query\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[]{reader.maxDoc()};\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n\n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      private boolean queryContains(byte[] t, int point) {\n        final int yIdx = 2 * LatLonPoint.BYTES * point;\n        final int xIdx = yIdx + LatLonPoint.BYTES;\n\n        if (FutureArrays.compareUnsigned(t, yIdx, xIdx, bbox, 0, LatLonPoint.BYTES) < 0 ||                     //minY\n            FutureArrays.compareUnsigned(t, yIdx, xIdx, bbox, 2 * LatLonPoint.BYTES, 3 * LatLonPoint.BYTES) > 0 ||  //maxY\n            FutureArrays.compareUnsigned(t, xIdx, xIdx + LatLonPoint.BYTES, bbox, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES) < 0 || // minX\n            FutureArrays.compareUnsigned(t, xIdx, xIdx + LatLonPoint.BYTES, bbox, 3 * LatLonPoint.BYTES, bbox.length) > 0) {\n          return false;\n        }\n        return true;\n      }\n\n      private boolean queryIntersects(int ax, int ay, int bx, int by, int cx, int cy) {\n        // top\n        if (Tessellator.linesIntersect(minX, maxY, maxX, maxY, ax, ay, bx, by) ||\n            Tessellator.linesIntersect(minX, maxY, maxX, maxY, bx, by, cx, cy) ||\n            Tessellator.linesIntersect(minX, maxY, maxX, maxY, cx, cy, ax, ay)) {\n          return true;\n        }\n\n        // bottom\n        if (Tessellator.linesIntersect(minX, minY, maxX, minY, ax, ay, bx, by) ||\n            Tessellator.linesIntersect(minX, minY, maxX, minY, bx, by, cx, cy) ||\n            Tessellator.linesIntersect(minX, minY, maxX, minY, cx, cy, ax, ay)) {\n          return true;\n        }\n\n        // left\n        if (Tessellator.linesIntersect(minX, minY, minX, maxY, ax, ay, bx, by) ||\n            Tessellator.linesIntersect(minX, minY, minX, maxY, bx, by, cx, cy) ||\n            Tessellator.linesIntersect(minX, minY, minX, maxY, cx, cy, ax, ay)) {\n          return true;\n        }\n\n        // right\n        if (Tessellator.linesIntersect(maxX, minY, maxX, maxY, ax, ay, bx, by) ||\n            Tessellator.linesIntersect(maxX, minY, maxX, maxY, bx, by, cx, cy) ||\n            Tessellator.linesIntersect(maxX, minY, maxX, maxY, cx, cy, ax, ay)) {\n          return true;\n        }\n        return false;\n      }\n\n      private boolean queryCrossesTriangle(byte[] t) {\n        // 1. query contains any triangle points\n        if (queryContains(t, 0) || queryContains(t, 1) || queryContains(t, 2)) {\n          return true;\n        }\n\n        int aY = NumericUtils.sortableBytesToInt(t, 0);\n        int aX = NumericUtils.sortableBytesToInt(t, LatLonPoint.BYTES);\n        int bY = NumericUtils.sortableBytesToInt(t, 2 * LatLonPoint.BYTES);\n        int bX = NumericUtils.sortableBytesToInt(t, 3 * LatLonPoint.BYTES);\n        int cY = NumericUtils.sortableBytesToInt(t, 4 * LatLonPoint.BYTES);\n        int cX = NumericUtils.sortableBytesToInt(t, 5 * LatLonPoint.BYTES);\n\n        int tMinX = StrictMath.min(StrictMath.min(aX, bX), cX);\n        int tMaxX = StrictMath.max(StrictMath.max(aX, bX), cX);\n        int tMinY = StrictMath.min(StrictMath.min(aY, bY), cY);\n        int tMaxY = StrictMath.max(StrictMath.max(aY, bY), cY);\n\n        // 2. check bounding boxes are disjoint\n        if (tMaxX < minX || tMinX > maxX || tMinY > maxY || tMaxY < minY) {\n          return false;\n        }\n\n        // 3. check triangle contains any query points\n        if (Tessellator.pointInTriangle(minX, minY, aX, aY, bX, bY, cX, cY)) {\n          return true;\n        } else if (Tessellator.pointInTriangle(maxX, minY, aX, aY, bX, bY, cX, cY)) {\n          return true;\n        } else if (Tessellator.pointInTriangle(maxX, maxY, aX, aY, bX, bY, cX, cY)) {\n          return true;\n        } else if (Tessellator.pointInTriangle(minX, maxY, aX, aY, bX, bY, cX, cY)) {\n          return true;\n        }\n\n\n        // 4. last ditch effort: check crossings\n        if (queryIntersects(aX, aY, bX, bY, cX, cY)) {\n          return true;\n        }\n        return false;\n      }\n\n      private Relation relateRangeToQuery(byte[] minTriangle, byte[] maxTriangle) {\n        // compute bounding box\n        int minXOfs = 0;\n        int minYOfs = 0;\n        int maxXOfs = 0;\n        int maxYOfs = 0;\n        for (int d = 1; d < 3; ++d) {\n          // check minX\n          int aOfs = (minXOfs * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n          int bOfs = (d * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n          if (FutureArrays.compareUnsigned(minTriangle, bOfs, bOfs + LatLonPoint.BYTES, minTriangle, aOfs, aOfs + LatLonPoint.BYTES) < 0) {\n            minXOfs = d;\n          }\n          // check maxX\n          aOfs = (maxXOfs * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n          if (FutureArrays.compareUnsigned(maxTriangle, bOfs, bOfs + LatLonPoint.BYTES, maxTriangle, aOfs, aOfs + LatLonPoint.BYTES) > 0) {\n            maxXOfs = d;\n          }\n          // check minY\n          aOfs = minYOfs * 2 * LatLonPoint.BYTES;\n          bOfs = d * 2 * LatLonPoint.BYTES;\n          if (FutureArrays.compareUnsigned(minTriangle, bOfs, bOfs + LatLonPoint.BYTES, minTriangle, aOfs, aOfs + LatLonPoint.BYTES) < 0) {\n            minYOfs = d;\n          }\n          // check maxY\n          aOfs = maxYOfs * 2 * LatLonPoint.BYTES;\n          if (FutureArrays.compareUnsigned(maxTriangle, bOfs, bOfs + LatLonPoint.BYTES, maxTriangle, aOfs, aOfs + LatLonPoint.BYTES) > 0) {\n            maxYOfs = d;\n          }\n        }\n        minXOfs = (minXOfs * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n        maxXOfs = (maxXOfs * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n        minYOfs *= 2 * LatLonPoint.BYTES;\n        maxYOfs *= 2 * LatLonPoint.BYTES;\n\n        // check bounding box (DISJOINT)\n        if (FutureArrays.compareUnsigned(minTriangle, minXOfs, minXOfs + LatLonPoint.BYTES, bbox, 3 * LatLonPoint.BYTES, 4 * LatLonPoint.BYTES) > 0 ||\n            FutureArrays.compareUnsigned(maxTriangle, maxXOfs, maxXOfs + LatLonPoint.BYTES, bbox, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES) < 0 ||\n            FutureArrays.compareUnsigned(minTriangle, minYOfs, minYOfs + LatLonPoint.BYTES, bbox, 2 * LatLonPoint.BYTES, 3 * LatLonPoint.BYTES) > 0 ||\n            FutureArrays.compareUnsigned(maxTriangle, maxYOfs, maxYOfs + LatLonPoint.BYTES, bbox, 0, LatLonPoint.BYTES) < 0) {\n          return Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        if (FutureArrays.compareUnsigned(minTriangle, minXOfs, minXOfs + LatLonPoint.BYTES, bbox, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES) > 0 &&\n            FutureArrays.compareUnsigned(maxTriangle, maxXOfs, maxXOfs + LatLonPoint.BYTES, bbox, 3 * LatLonPoint.BYTES, 4 * LatLonPoint.BYTES) < 0 &&\n            FutureArrays.compareUnsigned(minTriangle, minYOfs, minYOfs + LatLonPoint.BYTES, bbox, 0, LatLonPoint.BYTES) > 0 &&\n            FutureArrays.compareUnsigned(maxTriangle, maxYOfs, maxYOfs + LatLonPoint.BYTES, bbox, 2 * LatLonPoint.BYTES, 2 * LatLonPoint.BYTES) < 0) {\n          return Relation.CELL_INSIDE_QUERY;\n        }\n        return Relation.CELL_CROSSES_QUERY;\n      }\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) throws IOException {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] t) throws IOException {\n            if (queryCrossesTriangle(t)) {\n              adder.add(docID);\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minTriangle, byte[] maxTriangle) {\n            return relateRangeToQuery(minTriangle, maxTriangle);\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the bounding box query.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedTriangle) {\n            if (queryCrossesTriangle(packedTriangle)) {\n              result.clear(docID);\n              cost[0]--;\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            Relation r = relateRangeToQuery(minPackedValue, maxPackedValue);\n            if (r == Relation.CELL_OUTSIDE_QUERY) {\n              return Relation.CELL_INSIDE_QUERY;\n            } else if (r == Relation.CELL_INSIDE_QUERY || r == Relation.CELL_CROSSES_QUERY) {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n            return r;\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        boolean allDocsMatch = true;\n        if (values.getDocCount() != reader.maxDoc() ||\n            relateRangeToQuery(values.getMinPackedValue(), values.getMaxPackedValue()) != Relation.CELL_INSIDE_QUERY) {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              return new ConstantScoreScorer(weight, score(),\n                  DocIdSetIterator.all(reader.maxDoc()));\n            }\n\n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              if (values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the query\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[]{reader.maxDoc()};\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n\n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d34b94649d192090c69ea2d06a64c1a5872528fa","date":1533310247,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      private boolean edgeIntersectsQuery(double ax, double ay, double bx, double by) {\n        // top\n        if (orient(ax, ay, bx, by, minX, maxY) * orient(ax, ay, bx, by, maxX, maxY) <= 0 &&\n            orient(minX, maxY, maxX, maxY, ax, ay) * orient(minX, maxY, maxX, maxY, bx, by) <= 0) {\n          return true;\n        }\n\n        // right\n        if (orient(ax, ay, bx, by, maxX, maxY) * orient(ax, ay, bx, by, maxX, minY) <= 0 &&\n            orient(maxX, maxY, maxX, minY, ax, ay) * orient(maxX, maxY, maxX, minY, bx, by) <= 0) {\n          return true;\n        }\n\n        // bottom\n        if (orient(ax, ay, bx, by, maxX, minY) * orient(ax, ay, bx, by, minX, minY) <= 0 &&\n            orient(maxX, minY, minX, minY, ax, ay) * orient(maxX, minY, minX, minY, bx, by) <= 0) {\n          return true;\n        }\n\n        // left\n        if (orient(ax, ay, bx, by, minX, minY) * orient(ax, ay, bx, by, minX, maxY) <= 0 &&\n            orient(minX, minY, minX, maxY, ax, ay) * orient(minX, minY, minX, maxY, bx, by) <= 0) {\n          return true;\n        }\n        return false;\n      }\n\n      private boolean queryContains(byte[] t, int point) {\n        final int yIdx = 2 * LatLonPoint.BYTES * point;\n        final int xIdx = yIdx + LatLonPoint.BYTES;\n\n        if (FutureArrays.compareUnsigned(t, yIdx, xIdx, bbox, 0, LatLonPoint.BYTES) < 0 ||                     //minY\n            FutureArrays.compareUnsigned(t, yIdx, xIdx, bbox, 2 * LatLonPoint.BYTES, 3 * LatLonPoint.BYTES) > 0 ||  //maxY\n            FutureArrays.compareUnsigned(t, xIdx, xIdx + LatLonPoint.BYTES, bbox, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES) < 0 || // minX\n            FutureArrays.compareUnsigned(t, xIdx, xIdx + LatLonPoint.BYTES, bbox, 3 * LatLonPoint.BYTES, bbox.length) > 0) {\n          return false;\n        }\n        return true;\n      }\n\n      private boolean queryIntersects(int ax, int ay, int bx, int by, int cx, int cy) {\n        // check each edge of the triangle against the query\n        if (edgeIntersectsQuery(ax, ay, bx, by) ||\n            edgeIntersectsQuery(bx, by, cx, cy) ||\n            edgeIntersectsQuery(cx, cy, ax, ay)) {\n          return true;\n        }\n        return false;\n      }\n\n      private boolean queryCrossesTriangle(byte[] t) {\n        // 1. query contains any triangle points\n        if (queryContains(t, 0) || queryContains(t, 1) || queryContains(t, 2)) {\n          return true;\n        }\n\n        int aY = NumericUtils.sortableBytesToInt(t, 0);\n        int aX = NumericUtils.sortableBytesToInt(t, LatLonPoint.BYTES);\n        int bY = NumericUtils.sortableBytesToInt(t, 2 * LatLonPoint.BYTES);\n        int bX = NumericUtils.sortableBytesToInt(t, 3 * LatLonPoint.BYTES);\n        int cY = NumericUtils.sortableBytesToInt(t, 4 * LatLonPoint.BYTES);\n        int cX = NumericUtils.sortableBytesToInt(t, 5 * LatLonPoint.BYTES);\n\n        int tMinX = StrictMath.min(StrictMath.min(aX, bX), cX);\n        int tMaxX = StrictMath.max(StrictMath.max(aX, bX), cX);\n        int tMinY = StrictMath.min(StrictMath.min(aY, bY), cY);\n        int tMaxY = StrictMath.max(StrictMath.max(aY, bY), cY);\n\n        // 2. check bounding boxes are disjoint\n        if (tMaxX < minX || tMinX > maxX || tMinY > maxY || tMaxY < minY) {\n          return false;\n        }\n\n        // 3. check triangle contains any query points\n        if (Tessellator.pointInTriangle(minX, minY, aX, aY, bX, bY, cX, cY)) {\n          return true;\n        } else if (Tessellator.pointInTriangle(maxX, minY, aX, aY, bX, bY, cX, cY)) {\n          return true;\n        } else if (Tessellator.pointInTriangle(maxX, maxY, aX, aY, bX, bY, cX, cY)) {\n          return true;\n        } else if (Tessellator.pointInTriangle(minX, maxY, aX, aY, bX, bY, cX, cY)) {\n          return true;\n        }\n\n\n        // 4. last ditch effort: check crossings\n        if (queryIntersects(aX, aY, bX, bY, cX, cY)) {\n          return true;\n        }\n        return false;\n      }\n\n      private Relation relateRangeToQuery(byte[] minTriangle, byte[] maxTriangle) {\n        // compute bounding box\n        int minXOfs = 0;\n        int minYOfs = 0;\n        int maxXOfs = 0;\n        int maxYOfs = 0;\n        for (int d = 1; d < 3; ++d) {\n          // check minX\n          int aOfs = (minXOfs * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n          int bOfs = (d * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n          if (FutureArrays.compareUnsigned(minTriangle, bOfs, bOfs + LatLonPoint.BYTES, minTriangle, aOfs, aOfs + LatLonPoint.BYTES) < 0) {\n            minXOfs = d;\n          }\n          // check maxX\n          aOfs = (maxXOfs * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n          if (FutureArrays.compareUnsigned(maxTriangle, bOfs, bOfs + LatLonPoint.BYTES, maxTriangle, aOfs, aOfs + LatLonPoint.BYTES) > 0) {\n            maxXOfs = d;\n          }\n          // check minY\n          aOfs = minYOfs * 2 * LatLonPoint.BYTES;\n          bOfs = d * 2 * LatLonPoint.BYTES;\n          if (FutureArrays.compareUnsigned(minTriangle, bOfs, bOfs + LatLonPoint.BYTES, minTriangle, aOfs, aOfs + LatLonPoint.BYTES) < 0) {\n            minYOfs = d;\n          }\n          // check maxY\n          aOfs = maxYOfs * 2 * LatLonPoint.BYTES;\n          if (FutureArrays.compareUnsigned(maxTriangle, bOfs, bOfs + LatLonPoint.BYTES, maxTriangle, aOfs, aOfs + LatLonPoint.BYTES) > 0) {\n            maxYOfs = d;\n          }\n        }\n        minXOfs = (minXOfs * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n        maxXOfs = (maxXOfs * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n        minYOfs *= 2 * LatLonPoint.BYTES;\n        maxYOfs *= 2 * LatLonPoint.BYTES;\n\n        // check bounding box (DISJOINT)\n        if (FutureArrays.compareUnsigned(minTriangle, minXOfs, minXOfs + LatLonPoint.BYTES, bbox, 3 * LatLonPoint.BYTES, 4 * LatLonPoint.BYTES) > 0 ||\n            FutureArrays.compareUnsigned(maxTriangle, maxXOfs, maxXOfs + LatLonPoint.BYTES, bbox, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES) < 0 ||\n            FutureArrays.compareUnsigned(minTriangle, minYOfs, minYOfs + LatLonPoint.BYTES, bbox, 2 * LatLonPoint.BYTES, 3 * LatLonPoint.BYTES) > 0 ||\n            FutureArrays.compareUnsigned(maxTriangle, maxYOfs, maxYOfs + LatLonPoint.BYTES, bbox, 0, LatLonPoint.BYTES) < 0) {\n          return Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        if (FutureArrays.compareUnsigned(minTriangle, minXOfs, minXOfs + LatLonPoint.BYTES, bbox, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES) > 0 &&\n            FutureArrays.compareUnsigned(maxTriangle, maxXOfs, maxXOfs + LatLonPoint.BYTES, bbox, 3 * LatLonPoint.BYTES, 4 * LatLonPoint.BYTES) < 0 &&\n            FutureArrays.compareUnsigned(minTriangle, minYOfs, minYOfs + LatLonPoint.BYTES, bbox, 0, LatLonPoint.BYTES) > 0 &&\n            FutureArrays.compareUnsigned(maxTriangle, maxYOfs, maxYOfs + LatLonPoint.BYTES, bbox, 2 * LatLonPoint.BYTES, 2 * LatLonPoint.BYTES) < 0) {\n          return Relation.CELL_INSIDE_QUERY;\n        }\n        return Relation.CELL_CROSSES_QUERY;\n      }\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) throws IOException {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] t) throws IOException {\n            if (queryCrossesTriangle(t)) {\n              adder.add(docID);\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minTriangle, byte[] maxTriangle) {\n            return relateRangeToQuery(minTriangle, maxTriangle);\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the bounding box query.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedTriangle) {\n            if (queryCrossesTriangle(packedTriangle) == false) {\n              result.clear(docID);\n              cost[0]--;\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            Relation r = relateRangeToQuery(minPackedValue, maxPackedValue);\n            if (r == Relation.CELL_OUTSIDE_QUERY) {\n              return Relation.CELL_INSIDE_QUERY;\n            } else if (r == Relation.CELL_INSIDE_QUERY) {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n            return r;\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        boolean allDocsMatch = true;\n        if (values.getDocCount() != reader.maxDoc() ||\n            relateRangeToQuery(values.getMinPackedValue(), values.getMaxPackedValue()) != Relation.CELL_INSIDE_QUERY) {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              return new ConstantScoreScorer(weight, score(),\n                  DocIdSetIterator.all(reader.maxDoc()));\n            }\n\n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              if (values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the query\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[]{reader.maxDoc()};\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n\n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      private boolean edgeIntersectsQuery(double ax, double ay, double bx, double by) {\n        // top\n        if (orient(ax, ay, bx, by, minX, maxY) * orient(ax, ay, bx, by, maxX, maxY) <= 0 &&\n            orient(minX, maxY, maxX, maxY, ax, ay) * orient(minX, maxY, maxX, maxY, bx, by) <= 0) {\n          return true;\n        }\n\n        // right\n        if (orient(ax, ay, bx, by, maxX, maxY) * orient(ax, ay, bx, by, maxX, minY) <= 0 &&\n            orient(maxX, maxY, maxX, minY, ax, ay) * orient(maxX, maxY, maxX, minY, bx, by) <= 0) {\n          return true;\n        }\n\n        // bottom\n        if (orient(ax, ay, bx, by, maxX, minY) * orient(ax, ay, bx, by, minX, minY) <= 0 &&\n            orient(maxX, minY, minX, minY, ax, ay) * orient(maxX, minY, minX, minY, bx, by) <= 0) {\n          return true;\n        }\n\n        // left\n        if (orient(ax, ay, bx, by, minX, minY) * orient(ax, ay, bx, by, minX, maxY) <= 0 &&\n            orient(minX, minY, minX, maxY, ax, ay) * orient(minX, minY, minX, maxY, bx, by) <= 0) {\n          return true;\n        }\n        return false;\n      }\n\n      private boolean queryContains(byte[] t, int point) {\n        final int yIdx = 2 * LatLonPoint.BYTES * point;\n        final int xIdx = yIdx + LatLonPoint.BYTES;\n\n        if (FutureArrays.compareUnsigned(t, yIdx, xIdx, bbox, 0, LatLonPoint.BYTES) < 0 ||                     //minY\n            FutureArrays.compareUnsigned(t, yIdx, xIdx, bbox, 2 * LatLonPoint.BYTES, 3 * LatLonPoint.BYTES) > 0 ||  //maxY\n            FutureArrays.compareUnsigned(t, xIdx, xIdx + LatLonPoint.BYTES, bbox, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES) < 0 || // minX\n            FutureArrays.compareUnsigned(t, xIdx, xIdx + LatLonPoint.BYTES, bbox, 3 * LatLonPoint.BYTES, bbox.length) > 0) {\n          return false;\n        }\n        return true;\n      }\n\n      private boolean queryIntersects(int ax, int ay, int bx, int by, int cx, int cy) {\n        // check each edge of the triangle against the query\n        if (edgeIntersectsQuery(ax, ay, bx, by) ||\n            edgeIntersectsQuery(bx, by, cx, cy) ||\n            edgeIntersectsQuery(cx, cy, ax, ay)) {\n          return true;\n        }\n        return false;\n      }\n\n      private boolean queryCrossesTriangle(byte[] t) {\n        // 1. query contains any triangle points\n        if (queryContains(t, 0) || queryContains(t, 1) || queryContains(t, 2)) {\n          return true;\n        }\n\n        int aY = NumericUtils.sortableBytesToInt(t, 0);\n        int aX = NumericUtils.sortableBytesToInt(t, LatLonPoint.BYTES);\n        int bY = NumericUtils.sortableBytesToInt(t, 2 * LatLonPoint.BYTES);\n        int bX = NumericUtils.sortableBytesToInt(t, 3 * LatLonPoint.BYTES);\n        int cY = NumericUtils.sortableBytesToInt(t, 4 * LatLonPoint.BYTES);\n        int cX = NumericUtils.sortableBytesToInt(t, 5 * LatLonPoint.BYTES);\n\n        int tMinX = StrictMath.min(StrictMath.min(aX, bX), cX);\n        int tMaxX = StrictMath.max(StrictMath.max(aX, bX), cX);\n        int tMinY = StrictMath.min(StrictMath.min(aY, bY), cY);\n        int tMaxY = StrictMath.max(StrictMath.max(aY, bY), cY);\n\n        // 2. check bounding boxes are disjoint\n        if (tMaxX < minX || tMinX > maxX || tMinY > maxY || tMaxY < minY) {\n          return false;\n        }\n\n        // 3. check triangle contains any query points\n        if (Tessellator.pointInTriangle(minX, minY, aX, aY, bX, bY, cX, cY)) {\n          return true;\n        } else if (Tessellator.pointInTriangle(maxX, minY, aX, aY, bX, bY, cX, cY)) {\n          return true;\n        } else if (Tessellator.pointInTriangle(maxX, maxY, aX, aY, bX, bY, cX, cY)) {\n          return true;\n        } else if (Tessellator.pointInTriangle(minX, maxY, aX, aY, bX, bY, cX, cY)) {\n          return true;\n        }\n\n\n        // 4. last ditch effort: check crossings\n        if (queryIntersects(aX, aY, bX, bY, cX, cY)) {\n          return true;\n        }\n        return false;\n      }\n\n      private Relation relateRangeToQuery(byte[] minTriangle, byte[] maxTriangle) {\n        // compute bounding box\n        int minXOfs = 0;\n        int minYOfs = 0;\n        int maxXOfs = 0;\n        int maxYOfs = 0;\n        for (int d = 1; d < 3; ++d) {\n          // check minX\n          int aOfs = (minXOfs * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n          int bOfs = (d * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n          if (FutureArrays.compareUnsigned(minTriangle, bOfs, bOfs + LatLonPoint.BYTES, minTriangle, aOfs, aOfs + LatLonPoint.BYTES) < 0) {\n            minXOfs = d;\n          }\n          // check maxX\n          aOfs = (maxXOfs * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n          if (FutureArrays.compareUnsigned(maxTriangle, bOfs, bOfs + LatLonPoint.BYTES, maxTriangle, aOfs, aOfs + LatLonPoint.BYTES) > 0) {\n            maxXOfs = d;\n          }\n          // check minY\n          aOfs = minYOfs * 2 * LatLonPoint.BYTES;\n          bOfs = d * 2 * LatLonPoint.BYTES;\n          if (FutureArrays.compareUnsigned(minTriangle, bOfs, bOfs + LatLonPoint.BYTES, minTriangle, aOfs, aOfs + LatLonPoint.BYTES) < 0) {\n            minYOfs = d;\n          }\n          // check maxY\n          aOfs = maxYOfs * 2 * LatLonPoint.BYTES;\n          if (FutureArrays.compareUnsigned(maxTriangle, bOfs, bOfs + LatLonPoint.BYTES, maxTriangle, aOfs, aOfs + LatLonPoint.BYTES) > 0) {\n            maxYOfs = d;\n          }\n        }\n        minXOfs = (minXOfs * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n        maxXOfs = (maxXOfs * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n        minYOfs *= 2 * LatLonPoint.BYTES;\n        maxYOfs *= 2 * LatLonPoint.BYTES;\n\n        // check bounding box (DISJOINT)\n        if (FutureArrays.compareUnsigned(minTriangle, minXOfs, minXOfs + LatLonPoint.BYTES, bbox, 3 * LatLonPoint.BYTES, 4 * LatLonPoint.BYTES) > 0 ||\n            FutureArrays.compareUnsigned(maxTriangle, maxXOfs, maxXOfs + LatLonPoint.BYTES, bbox, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES) < 0 ||\n            FutureArrays.compareUnsigned(minTriangle, minYOfs, minYOfs + LatLonPoint.BYTES, bbox, 2 * LatLonPoint.BYTES, 3 * LatLonPoint.BYTES) > 0 ||\n            FutureArrays.compareUnsigned(maxTriangle, maxYOfs, maxYOfs + LatLonPoint.BYTES, bbox, 0, LatLonPoint.BYTES) < 0) {\n          return Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        if (FutureArrays.compareUnsigned(minTriangle, minXOfs, minXOfs + LatLonPoint.BYTES, bbox, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES) > 0 &&\n            FutureArrays.compareUnsigned(maxTriangle, maxXOfs, maxXOfs + LatLonPoint.BYTES, bbox, 3 * LatLonPoint.BYTES, 4 * LatLonPoint.BYTES) < 0 &&\n            FutureArrays.compareUnsigned(minTriangle, minYOfs, minYOfs + LatLonPoint.BYTES, bbox, 0, LatLonPoint.BYTES) > 0 &&\n            FutureArrays.compareUnsigned(maxTriangle, maxYOfs, maxYOfs + LatLonPoint.BYTES, bbox, 2 * LatLonPoint.BYTES, 2 * LatLonPoint.BYTES) < 0) {\n          return Relation.CELL_INSIDE_QUERY;\n        }\n        return Relation.CELL_CROSSES_QUERY;\n      }\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) throws IOException {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] t) throws IOException {\n            if (queryCrossesTriangle(t)) {\n              adder.add(docID);\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minTriangle, byte[] maxTriangle) {\n            return relateRangeToQuery(minTriangle, maxTriangle);\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the bounding box query.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedTriangle) {\n            if (queryCrossesTriangle(packedTriangle)) {\n              result.clear(docID);\n              cost[0]--;\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            Relation r = relateRangeToQuery(minPackedValue, maxPackedValue);\n            if (r == Relation.CELL_OUTSIDE_QUERY) {\n              return Relation.CELL_INSIDE_QUERY;\n            } else if (r == Relation.CELL_INSIDE_QUERY || r == Relation.CELL_CROSSES_QUERY) {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n            return r;\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        boolean allDocsMatch = true;\n        if (values.getDocCount() != reader.maxDoc() ||\n            relateRangeToQuery(values.getMinPackedValue(), values.getMaxPackedValue()) != Relation.CELL_INSIDE_QUERY) {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              return new ConstantScoreScorer(weight, score(),\n                  DocIdSetIterator.all(reader.maxDoc()));\n            }\n\n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              if (values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the query\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[]{reader.maxDoc()};\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n\n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97f74f84954e9fefbac4cb38b9bf339e1757600d","date":1533750605,"type":4,"author":"Nicholas Knize","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":null,"sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      private boolean edgeIntersectsQuery(double ax, double ay, double bx, double by) {\n        // top\n        if (orient(ax, ay, bx, by, minX, maxY) * orient(ax, ay, bx, by, maxX, maxY) <= 0 &&\n            orient(minX, maxY, maxX, maxY, ax, ay) * orient(minX, maxY, maxX, maxY, bx, by) <= 0) {\n          return true;\n        }\n\n        // right\n        if (orient(ax, ay, bx, by, maxX, maxY) * orient(ax, ay, bx, by, maxX, minY) <= 0 &&\n            orient(maxX, maxY, maxX, minY, ax, ay) * orient(maxX, maxY, maxX, minY, bx, by) <= 0) {\n          return true;\n        }\n\n        // bottom\n        if (orient(ax, ay, bx, by, maxX, minY) * orient(ax, ay, bx, by, minX, minY) <= 0 &&\n            orient(maxX, minY, minX, minY, ax, ay) * orient(maxX, minY, minX, minY, bx, by) <= 0) {\n          return true;\n        }\n\n        // left\n        if (orient(ax, ay, bx, by, minX, minY) * orient(ax, ay, bx, by, minX, maxY) <= 0 &&\n            orient(minX, minY, minX, maxY, ax, ay) * orient(minX, minY, minX, maxY, bx, by) <= 0) {\n          return true;\n        }\n        return false;\n      }\n\n      private boolean queryContains(byte[] t, int point) {\n        final int yIdx = 2 * LatLonPoint.BYTES * point;\n        final int xIdx = yIdx + LatLonPoint.BYTES;\n\n        if (FutureArrays.compareUnsigned(t, yIdx, xIdx, bbox, 0, LatLonPoint.BYTES) < 0 ||                     //minY\n            FutureArrays.compareUnsigned(t, yIdx, xIdx, bbox, 2 * LatLonPoint.BYTES, 3 * LatLonPoint.BYTES) > 0 ||  //maxY\n            FutureArrays.compareUnsigned(t, xIdx, xIdx + LatLonPoint.BYTES, bbox, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES) < 0 || // minX\n            FutureArrays.compareUnsigned(t, xIdx, xIdx + LatLonPoint.BYTES, bbox, 3 * LatLonPoint.BYTES, bbox.length) > 0) {\n          return false;\n        }\n        return true;\n      }\n\n      private boolean queryIntersects(int ax, int ay, int bx, int by, int cx, int cy) {\n        // check each edge of the triangle against the query\n        if (edgeIntersectsQuery(ax, ay, bx, by) ||\n            edgeIntersectsQuery(bx, by, cx, cy) ||\n            edgeIntersectsQuery(cx, cy, ax, ay)) {\n          return true;\n        }\n        return false;\n      }\n\n      private boolean queryCrossesTriangle(byte[] t) {\n        // 1. query contains any triangle points\n        if (queryContains(t, 0) || queryContains(t, 1) || queryContains(t, 2)) {\n          return true;\n        }\n\n        int aY = NumericUtils.sortableBytesToInt(t, 0);\n        int aX = NumericUtils.sortableBytesToInt(t, LatLonPoint.BYTES);\n        int bY = NumericUtils.sortableBytesToInt(t, 2 * LatLonPoint.BYTES);\n        int bX = NumericUtils.sortableBytesToInt(t, 3 * LatLonPoint.BYTES);\n        int cY = NumericUtils.sortableBytesToInt(t, 4 * LatLonPoint.BYTES);\n        int cX = NumericUtils.sortableBytesToInt(t, 5 * LatLonPoint.BYTES);\n\n        int tMinX = StrictMath.min(StrictMath.min(aX, bX), cX);\n        int tMaxX = StrictMath.max(StrictMath.max(aX, bX), cX);\n        int tMinY = StrictMath.min(StrictMath.min(aY, bY), cY);\n        int tMaxY = StrictMath.max(StrictMath.max(aY, bY), cY);\n\n        // 2. check bounding boxes are disjoint\n        if (tMaxX < minX || tMinX > maxX || tMinY > maxY || tMaxY < minY) {\n          return false;\n        }\n\n        // 3. check triangle contains any query points\n        if (Tessellator.pointInTriangle(minX, minY, aX, aY, bX, bY, cX, cY)) {\n          return true;\n        } else if (Tessellator.pointInTriangle(maxX, minY, aX, aY, bX, bY, cX, cY)) {\n          return true;\n        } else if (Tessellator.pointInTriangle(maxX, maxY, aX, aY, bX, bY, cX, cY)) {\n          return true;\n        } else if (Tessellator.pointInTriangle(minX, maxY, aX, aY, bX, bY, cX, cY)) {\n          return true;\n        }\n\n\n        // 4. last ditch effort: check crossings\n        if (queryIntersects(aX, aY, bX, bY, cX, cY)) {\n          return true;\n        }\n        return false;\n      }\n\n      private Relation relateRangeToQuery(byte[] minTriangle, byte[] maxTriangle) {\n        // compute bounding box\n        int minXOfs = 0;\n        int minYOfs = 0;\n        int maxXOfs = 0;\n        int maxYOfs = 0;\n        for (int d = 1; d < 3; ++d) {\n          // check minX\n          int aOfs = (minXOfs * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n          int bOfs = (d * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n          if (FutureArrays.compareUnsigned(minTriangle, bOfs, bOfs + LatLonPoint.BYTES, minTriangle, aOfs, aOfs + LatLonPoint.BYTES) < 0) {\n            minXOfs = d;\n          }\n          // check maxX\n          aOfs = (maxXOfs * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n          if (FutureArrays.compareUnsigned(maxTriangle, bOfs, bOfs + LatLonPoint.BYTES, maxTriangle, aOfs, aOfs + LatLonPoint.BYTES) > 0) {\n            maxXOfs = d;\n          }\n          // check minY\n          aOfs = minYOfs * 2 * LatLonPoint.BYTES;\n          bOfs = d * 2 * LatLonPoint.BYTES;\n          if (FutureArrays.compareUnsigned(minTriangle, bOfs, bOfs + LatLonPoint.BYTES, minTriangle, aOfs, aOfs + LatLonPoint.BYTES) < 0) {\n            minYOfs = d;\n          }\n          // check maxY\n          aOfs = maxYOfs * 2 * LatLonPoint.BYTES;\n          if (FutureArrays.compareUnsigned(maxTriangle, bOfs, bOfs + LatLonPoint.BYTES, maxTriangle, aOfs, aOfs + LatLonPoint.BYTES) > 0) {\n            maxYOfs = d;\n          }\n        }\n        minXOfs = (minXOfs * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n        maxXOfs = (maxXOfs * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n        minYOfs *= 2 * LatLonPoint.BYTES;\n        maxYOfs *= 2 * LatLonPoint.BYTES;\n\n        // check bounding box (DISJOINT)\n        if (FutureArrays.compareUnsigned(minTriangle, minXOfs, minXOfs + LatLonPoint.BYTES, bbox, 3 * LatLonPoint.BYTES, 4 * LatLonPoint.BYTES) > 0 ||\n            FutureArrays.compareUnsigned(maxTriangle, maxXOfs, maxXOfs + LatLonPoint.BYTES, bbox, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES) < 0 ||\n            FutureArrays.compareUnsigned(minTriangle, minYOfs, minYOfs + LatLonPoint.BYTES, bbox, 2 * LatLonPoint.BYTES, 3 * LatLonPoint.BYTES) > 0 ||\n            FutureArrays.compareUnsigned(maxTriangle, maxYOfs, maxYOfs + LatLonPoint.BYTES, bbox, 0, LatLonPoint.BYTES) < 0) {\n          return Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        if (FutureArrays.compareUnsigned(minTriangle, minXOfs, minXOfs + LatLonPoint.BYTES, bbox, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES) > 0 &&\n            FutureArrays.compareUnsigned(maxTriangle, maxXOfs, maxXOfs + LatLonPoint.BYTES, bbox, 3 * LatLonPoint.BYTES, 4 * LatLonPoint.BYTES) < 0 &&\n            FutureArrays.compareUnsigned(minTriangle, minYOfs, minYOfs + LatLonPoint.BYTES, bbox, 0, LatLonPoint.BYTES) > 0 &&\n            FutureArrays.compareUnsigned(maxTriangle, maxYOfs, maxYOfs + LatLonPoint.BYTES, bbox, 2 * LatLonPoint.BYTES, 2 * LatLonPoint.BYTES) < 0) {\n          return Relation.CELL_INSIDE_QUERY;\n        }\n        return Relation.CELL_CROSSES_QUERY;\n      }\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) throws IOException {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] t) throws IOException {\n            if (queryCrossesTriangle(t)) {\n              adder.add(docID);\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minTriangle, byte[] maxTriangle) {\n            return relateRangeToQuery(minTriangle, maxTriangle);\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the bounding box query.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedTriangle) {\n            if (queryCrossesTriangle(packedTriangle) == false) {\n              result.clear(docID);\n              cost[0]--;\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            Relation r = relateRangeToQuery(minPackedValue, maxPackedValue);\n            if (r == Relation.CELL_OUTSIDE_QUERY) {\n              return Relation.CELL_INSIDE_QUERY;\n            } else if (r == Relation.CELL_INSIDE_QUERY) {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n            return r;\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        boolean allDocsMatch = true;\n        if (values.getDocCount() != reader.maxDoc() ||\n            relateRangeToQuery(values.getMinPackedValue(), values.getMaxPackedValue()) != Relation.CELL_INSIDE_QUERY) {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              return new ConstantScoreScorer(weight, score(),\n                  DocIdSetIterator.all(reader.maxDoc()));\n            }\n\n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              if (values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the query\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[]{reader.maxDoc()};\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n\n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d34b94649d192090c69ea2d06a64c1a5872528fa":["f62d73fcb44b07f005bbdb88086af50e9064ecb2"],"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"],"97f74f84954e9fefbac4cb38b9bf339e1757600d":["d34b94649d192090c69ea2d06a64c1a5872528fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["97f74f84954e9fefbac4cb38b9bf339e1757600d"],"f62d73fcb44b07f005bbdb88086af50e9064ecb2":["06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"]},"commit2Childs":{"d34b94649d192090c69ea2d06a64c1a5872528fa":["97f74f84954e9fefbac4cb38b9bf339e1757600d"],"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","f62d73fcb44b07f005bbdb88086af50e9064ecb2","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06fc6aedefe19d7a0b0d82dac953a4f161e16b5c","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"97f74f84954e9fefbac4cb38b9bf339e1757600d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f62d73fcb44b07f005bbdb88086af50e9064ecb2":["d34b94649d192090c69ea2d06a64c1a5872528fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}