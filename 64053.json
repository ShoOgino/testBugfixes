{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnum#pushFrame(FST.Arc[Pair[BytesRef,Long]],Pair[BytesRef,Long],int).mjava","commits":[{"id":"6256acedd658c13275a01e4ba106a621956a22f6","date":1400192928,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnum#pushFrame(FST.Arc[Pair[BytesRef,Long]],Pair[BytesRef,Long],int).mjava","pathOld":"/dev/null","sourceNew":"  // Pushes a frame we seek'd to\n  IDVersionSegmentTermsEnumFrame pushFrame(FST.Arc<Pair<BytesRef,Long>> arc, Pair<BytesRef,Long> frameData, int length) throws IOException {\n    scratchReader.reset(frameData.output1.bytes, frameData.output1.offset, frameData.output1.length);\n    final long code = scratchReader.readVLong();\n    final long fpSeek = code >>> VersionBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS;\n    final IDVersionSegmentTermsEnumFrame f = getFrame(1+currentFrame.ord);\n    f.hasTerms = (code & VersionBlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS) != 0;\n    f.hasTermsOrig = f.hasTerms;\n    f.isFloor = (code & VersionBlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR) != 0;\n    if (f.isFloor) {\n      f.setFloorData(scratchReader, frameData.output1);\n    }\n    pushFrame(arc, fpSeek, length);\n\n    return f;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e82ae1be1dc68d59626e4bb94d2029d309b20878","date":1400195857,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnum#pushFrame(FST.Arc[Pair[BytesRef,Long]],Pair[BytesRef,Long],int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnum#pushFrame(FST.Arc[Pair[BytesRef,Long]],Pair[BytesRef,Long],int).mjava","sourceNew":"  // Pushes a frame we seek'd to\n  IDVersionSegmentTermsEnumFrame pushFrame(FST.Arc<Pair<BytesRef,Long>> arc, Pair<BytesRef,Long> frameData, int length) throws IOException {\n    scratchReader.reset(frameData.output1.bytes, frameData.output1.offset, frameData.output1.length);\n    final long code = scratchReader.readVLong();\n    final long fpSeek = code >>> VersionBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS;\n    final IDVersionSegmentTermsEnumFrame f = getFrame(1+currentFrame.ord);\n    f.maxIDVersion = Long.MAX_VALUE - frameData.output2;\n    f.hasTerms = (code & VersionBlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS) != 0;\n    f.hasTermsOrig = f.hasTerms;\n    f.isFloor = (code & VersionBlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR) != 0;\n    if (f.isFloor) {\n      f.setFloorData(scratchReader, frameData.output1);\n    }\n    pushFrame(arc, fpSeek, length);\n\n    return f;\n  }\n\n","sourceOld":"  // Pushes a frame we seek'd to\n  IDVersionSegmentTermsEnumFrame pushFrame(FST.Arc<Pair<BytesRef,Long>> arc, Pair<BytesRef,Long> frameData, int length) throws IOException {\n    scratchReader.reset(frameData.output1.bytes, frameData.output1.offset, frameData.output1.length);\n    final long code = scratchReader.readVLong();\n    final long fpSeek = code >>> VersionBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS;\n    final IDVersionSegmentTermsEnumFrame f = getFrame(1+currentFrame.ord);\n    f.hasTerms = (code & VersionBlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS) != 0;\n    f.hasTermsOrig = f.hasTerms;\n    f.isFloor = (code & VersionBlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR) != 0;\n    if (f.isFloor) {\n      f.setFloorData(scratchReader, frameData.output1);\n    }\n    pushFrame(arc, fpSeek, length);\n\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e","date":1400786907,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnum#pushFrame(FST.Arc[Pair[BytesRef,Long]],Pair[BytesRef,Long],int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnum#pushFrame(FST.Arc[Pair[BytesRef,Long]],Pair[BytesRef,Long],int).mjava","sourceNew":"  // Pushes a frame we seek'd to\n  IDVersionSegmentTermsEnumFrame pushFrame(FST.Arc<Pair<BytesRef,Long>> arc, Pair<BytesRef,Long> frameData, int length) throws IOException {\n    scratchReader.reset(frameData.output1.bytes, frameData.output1.offset, frameData.output1.length);\n    final long code = scratchReader.readVLong();\n    final long fpSeek = code >>> VersionBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS;\n    final IDVersionSegmentTermsEnumFrame f = getFrame(1+currentFrame.ord);\n    f.maxIDVersion = Long.MAX_VALUE - frameData.output2;\n    f.hasTerms = (code & VersionBlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS) != 0;\n    f.hasTermsOrig = f.hasTerms;\n    f.isFloor = (code & VersionBlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR) != 0;\n    if (f.isFloor) {\n      f.setFloorData(scratchReader, frameData.output1);\n    }\n    pushFrame(arc, fpSeek, length);\n\n    return f;\n  }\n\n","sourceOld":"  // Pushes a frame we seek'd to\n  IDVersionSegmentTermsEnumFrame pushFrame(FST.Arc<Pair<BytesRef,Long>> arc, Pair<BytesRef,Long> frameData, int length) throws IOException {\n    scratchReader.reset(frameData.output1.bytes, frameData.output1.offset, frameData.output1.length);\n    final long code = scratchReader.readVLong();\n    final long fpSeek = code >>> VersionBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS;\n    final IDVersionSegmentTermsEnumFrame f = getFrame(1+currentFrame.ord);\n    f.maxIDVersion = Long.MAX_VALUE - frameData.output2;\n    f.hasTerms = (code & VersionBlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS) != 0;\n    f.hasTermsOrig = f.hasTerms;\n    f.isFloor = (code & VersionBlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR) != 0;\n    if (f.isFloor) {\n      f.setFloorData(scratchReader, frameData.output1);\n    }\n    pushFrame(arc, fpSeek, length);\n\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e":["e82ae1be1dc68d59626e4bb94d2029d309b20878"],"6256acedd658c13275a01e4ba106a621956a22f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e82ae1be1dc68d59626e4bb94d2029d309b20878":["6256acedd658c13275a01e4ba106a621956a22f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e":[],"6256acedd658c13275a01e4ba106a621956a22f6":["e82ae1be1dc68d59626e4bb94d2029d309b20878"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6256acedd658c13275a01e4ba106a621956a22f6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e82ae1be1dc68d59626e4bb94d2029d309b20878":["3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}