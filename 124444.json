{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#setMaxShingleSize(int).mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#setMaxShingleSize(int).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#setMaxShingleSize(int).mjava","sourceNew":"  /**\n   * Set the max shingle size (default: 2)\n   *\n   * @param maxShingleSize max size of output shingles\n   */\n  public void setMaxShingleSize(int maxShingleSize) {\n    if (maxShingleSize < 2) {\n      throw new IllegalArgumentException(\"Max shingle size must be >= 2\");\n    }\n    shingles = new StringBuffer[maxShingleSize];\n    for (int i = 0; i < shingles.length; i++) {\n      shingles[i] = new StringBuffer();\n    }\n    this.maxShingleSize = maxShingleSize;\n  }\n\n","sourceOld":"  /**\n   * Set the max shingle size (default: 2)\n   *\n   * @param maxShingleSize max size of output shingles\n   */\n  public void setMaxShingleSize(int maxShingleSize) {\n    if (maxShingleSize < 2) {\n      throw new IllegalArgumentException(\"Max shingle size must be >= 2\");\n    }\n    shingles = new StringBuffer[maxShingleSize];\n    for (int i = 0; i < shingles.length; i++) {\n      shingles[i] = new StringBuffer();\n    }\n    this.maxShingleSize = maxShingleSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c","date":1254521470,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#setMaxShingleSize(int).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#setMaxShingleSize(int).mjava","sourceNew":"  /**\n   * Set the max shingle size (default: 2)\n   *\n   * @param maxShingleSize max size of output shingles\n   */\n  public void setMaxShingleSize(int maxShingleSize) {\n    if (maxShingleSize < 2) {\n      throw new IllegalArgumentException(\"Max shingle size must be >= 2\");\n    }\n    shingles = new StringBuilder[maxShingleSize];\n    for (int i = 0; i < shingles.length; i++) {\n      shingles[i] = new StringBuilder();\n    }\n    this.maxShingleSize = maxShingleSize;\n  }\n\n","sourceOld":"  /**\n   * Set the max shingle size (default: 2)\n   *\n   * @param maxShingleSize max size of output shingles\n   */\n  public void setMaxShingleSize(int maxShingleSize) {\n    if (maxShingleSize < 2) {\n      throw new IllegalArgumentException(\"Max shingle size must be >= 2\");\n    }\n    shingles = new StringBuffer[maxShingleSize];\n    for (int i = 0; i < shingles.length; i++) {\n      shingles[i] = new StringBuffer();\n    }\n    this.maxShingleSize = maxShingleSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf5d35662f99ce0a5b777b6b1585aa3a3ffa8f39","date":1264946641,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#setMaxShingleSize(int).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#setMaxShingleSize(int).mjava","sourceNew":"  /**\n   * Set the max shingle size (default: 2)\n   *\n   * @param maxShingleSize max size of output shingles\n   */\n  public void setMaxShingleSize(int maxShingleSize) {\n    if (maxShingleSize < 2) {\n      throw new IllegalArgumentException(\"Max shingle size must be >= 2\");\n    }\n    this.maxShingleSize = maxShingleSize;\n  }\n\n","sourceOld":"  /**\n   * Set the max shingle size (default: 2)\n   *\n   * @param maxShingleSize max size of output shingles\n   */\n  public void setMaxShingleSize(int maxShingleSize) {\n    if (maxShingleSize < 2) {\n      throw new IllegalArgumentException(\"Max shingle size must be >= 2\");\n    }\n    shingles = new StringBuilder[maxShingleSize];\n    for (int i = 0; i < shingles.length; i++) {\n      shingles[i] = new StringBuilder();\n    }\n    this.maxShingleSize = maxShingleSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#setMaxShingleSize(int).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#setMaxShingleSize(int).mjava","sourceNew":"  /**\n   * Set the max shingle size (default: 2)\n   *\n   * @param maxShingleSize max size of output shingles\n   */\n  public void setMaxShingleSize(int maxShingleSize) {\n    if (maxShingleSize < 2) {\n      throw new IllegalArgumentException(\"Max shingle size must be >= 2\");\n    }\n    this.maxShingleSize = maxShingleSize;\n  }\n\n","sourceOld":"  /**\n   * Set the max shingle size (default: 2)\n   *\n   * @param maxShingleSize max size of output shingles\n   */\n  public void setMaxShingleSize(int maxShingleSize) {\n    if (maxShingleSize < 2) {\n      throw new IllegalArgumentException(\"Max shingle size must be >= 2\");\n    }\n    this.maxShingleSize = maxShingleSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cf5d35662f99ce0a5b777b6b1585aa3a3ffa8f39":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cf5d35662f99ce0a5b777b6b1585aa3a3ffa8f39"]},"commit2Childs":{"cf5d35662f99ce0a5b777b6b1585aa3a3ffa8f39":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["cf5d35662f99ce0a5b777b6b1585aa3a3ffa8f39"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}