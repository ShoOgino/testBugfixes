{"path":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedExactQuery(String,String[],boolean).mjava","commits":[{"id":"0ff61c2e5ce6b1f26a271d9d454206db1917d628","date":1491505661,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedExactQuery(String,String[],boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param fieldName the field to use for indexing and searching against\n   * @param numbers list of 20 values to index in 10 docs (pairwise)\n   * @param searchable set to true if searches against \"field\" should succeed, false if field is only stored and searches should always get numFound=0\n   */\n  private void testPointFieldMultiValuedExactQuery(final String fieldName, final String[] numbers,\n                                                   final boolean searchable) throws Exception {\n    \n    final String MATCH_ONE = \"//*[@numFound='\" + (searchable ? \"1\" : \"0\") + \"']\";\n    final String MATCH_TWO = \"//*[@numFound='\" + (searchable ? \"2\" : \"0\") + \"']\";\n    \n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    assertU(commit());\n    for (int i = 0; i < 20; i++) {\n      if (h.getCore().getLatestSchema().getField(fieldName).getType() instanceof DatePointField) {\n        assertQ(req(\"q\", fieldName + \":\\\"\" + numbers[i] + \"\\\"\"),\n                MATCH_ONE);\n      } else {\n        assertQ(req(\"q\", fieldName + \":\" + numbers[i].replace(\"-\", \"\\\\-\")),\n                MATCH_ONE);\n      }\n    }\n    \n    for (int i = 0; i < 20; i++) {\n      if (h.getCore().getLatestSchema().getField(fieldName).getType() instanceof DatePointField) {\n        assertQ(req(\"q\", fieldName + \":\\\"\" + numbers[i] + \"\\\"\" + \" OR \" + fieldName + \":\\\"\" + numbers[(i+1)%10]+\"\\\"\"),\n                MATCH_TWO);\n      } else {\n        assertQ(req(\"q\", fieldName + \":\" + numbers[i].replace(\"-\", \"\\\\-\") + \" OR \" + fieldName + \":\" + numbers[(i+1)%10].replace(\"-\", \"\\\\-\")),\n                MATCH_TWO);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedExactQuery(String,String[],boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param fieldName the field to use for indexing and searching against\n   * @param numbers list of 20 values to index in 10 docs (pairwise)\n   * @param searchable set to true if searches against \"field\" should succeed, false if field is only stored and searches should always get numFound=0\n   */\n  private void testPointFieldMultiValuedExactQuery(final String fieldName, final String[] numbers,\n                                                   final boolean searchable) throws Exception {\n    \n    final String MATCH_ONE = \"//*[@numFound='\" + (searchable ? \"1\" : \"0\") + \"']\";\n    final String MATCH_TWO = \"//*[@numFound='\" + (searchable ? \"2\" : \"0\") + \"']\";\n    \n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    assertU(commit());\n    for (int i = 0; i < 20; i++) {\n      if (h.getCore().getLatestSchema().getField(fieldName).getType() instanceof DatePointField) {\n        assertQ(req(\"q\", fieldName + \":\\\"\" + numbers[i] + \"\\\"\"),\n                MATCH_ONE);\n      } else {\n        assertQ(req(\"q\", fieldName + \":\" + numbers[i].replace(\"-\", \"\\\\-\")),\n                MATCH_ONE);\n      }\n    }\n    \n    for (int i = 0; i < 20; i++) {\n      if (h.getCore().getLatestSchema().getField(fieldName).getType() instanceof DatePointField) {\n        assertQ(req(\"q\", fieldName + \":\\\"\" + numbers[i] + \"\\\"\" + \" OR \" + fieldName + \":\\\"\" + numbers[(i+1)%10]+\"\\\"\"),\n                MATCH_TWO);\n      } else {\n        assertQ(req(\"q\", fieldName + \":\" + numbers[i].replace(\"-\", \"\\\\-\") + \" OR \" + fieldName + \":\" + numbers[(i+1)%10].replace(\"-\", \"\\\\-\")),\n                MATCH_TWO);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac5a6354a5800dd1ade225010d614eeb8acf9152","date":1499731103,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedExactQuery(String,String[],boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedExactQuery(String,String[],boolean).mjava","sourceNew":"  /**\n   * @param fieldName the field to use for indexing and searching against\n   * @param numbers list of 20 values to index in 10 docs (pairwise)\n   * @param searchable set to true if searches against \"field\" should succeed, false if field is only stored and searches should always get numFound=0\n   */\n  private void testPointFieldMultiValuedExactQuery(final String fieldName, final String[] numbers,\n                                                   final boolean searchable) throws Exception {\n    \n    final String MATCH_ONE = \"//*[@numFound='\" + (searchable ? \"1\" : \"0\") + \"']\";\n    final String MATCH_TWO = \"//*[@numFound='\" + (searchable ? \"2\" : \"0\") + \"']\";\n    \n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    assertU(commit());\n    FieldType type = h.getCore().getLatestSchema().getField(fieldName).getType();\n    for (int i = 0; i < 20; i++) {\n      if (type instanceof DatePointField) {\n        assertQ(req(\"q\", fieldName + \":\\\"\" + numbers[i] + \"\\\"\"),\n                MATCH_ONE);\n      } else {\n        assertQ(req(\"q\", fieldName + \":\" + numbers[i].replace(\"-\", \"\\\\-\")),\n                MATCH_ONE);\n      }\n    }\n    \n    for (int i = 0; i < 20; i++) {\n      if (type instanceof DatePointField) {\n        assertQ(req(\"q\", fieldName + \":\\\"\" + numbers[i] + \"\\\"\" + \" OR \" + fieldName + \":\\\"\" + numbers[(i+1)%10]+\"\\\"\"),\n                MATCH_TWO);\n      } else {\n        assertQ(req(\"q\", fieldName + \":\" + numbers[i].replace(\"-\", \"\\\\-\") + \" OR \" + fieldName + \":\" + numbers[(i+1)%10].replace(\"-\", \"\\\\-\")),\n                MATCH_TWO);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @param fieldName the field to use for indexing and searching against\n   * @param numbers list of 20 values to index in 10 docs (pairwise)\n   * @param searchable set to true if searches against \"field\" should succeed, false if field is only stored and searches should always get numFound=0\n   */\n  private void testPointFieldMultiValuedExactQuery(final String fieldName, final String[] numbers,\n                                                   final boolean searchable) throws Exception {\n    \n    final String MATCH_ONE = \"//*[@numFound='\" + (searchable ? \"1\" : \"0\") + \"']\";\n    final String MATCH_TWO = \"//*[@numFound='\" + (searchable ? \"2\" : \"0\") + \"']\";\n    \n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    assertU(commit());\n    for (int i = 0; i < 20; i++) {\n      if (h.getCore().getLatestSchema().getField(fieldName).getType() instanceof DatePointField) {\n        assertQ(req(\"q\", fieldName + \":\\\"\" + numbers[i] + \"\\\"\"),\n                MATCH_ONE);\n      } else {\n        assertQ(req(\"q\", fieldName + \":\" + numbers[i].replace(\"-\", \"\\\\-\")),\n                MATCH_ONE);\n      }\n    }\n    \n    for (int i = 0; i < 20; i++) {\n      if (h.getCore().getLatestSchema().getField(fieldName).getType() instanceof DatePointField) {\n        assertQ(req(\"q\", fieldName + \":\\\"\" + numbers[i] + \"\\\"\" + \" OR \" + fieldName + \":\\\"\" + numbers[(i+1)%10]+\"\\\"\"),\n                MATCH_TWO);\n      } else {\n        assertQ(req(\"q\", fieldName + \":\" + numbers[i].replace(\"-\", \"\\\\-\") + \" OR \" + fieldName + \":\" + numbers[(i+1)%10].replace(\"-\", \"\\\\-\")),\n                MATCH_TWO);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9a989a32a073c55e3aef6f807a3474184bbcf49","date":1499930209,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedExactQuery(String,String[],boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedExactQuery(String,String[],boolean).mjava","sourceNew":"  /**\n   * @param fieldName the field to use for indexing and searching against\n   * @param numbers list of 20 values to index in 10 docs (pairwise)\n   * @param searchable set to true if searches against \"field\" should succeed, false if field is only stored and searches should always get numFound=0\n   */\n  private void testPointFieldMultiValuedExactQuery(final String fieldName, final String[] numbers,\n                                                   final boolean searchable) throws Exception {\n    \n    final String MATCH_ONE = \"//*[@numFound='\" + (searchable ? \"1\" : \"0\") + \"']\";\n    final String MATCH_TWO = \"//*[@numFound='\" + (searchable ? \"2\" : \"0\") + \"']\";\n    \n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    assertU(commit());\n    FieldType type = h.getCore().getLatestSchema().getField(fieldName).getType();\n    for (int i = 0; i < 20; i++) {\n      if (type instanceof DatePointField) {\n        assertQ(req(\"q\", fieldName + \":\\\"\" + numbers[i] + \"\\\"\"),\n                MATCH_ONE);\n      } else {\n        assertQ(req(\"q\", fieldName + \":\" + numbers[i].replace(\"-\", \"\\\\-\")),\n                MATCH_ONE);\n      }\n    }\n    \n    for (int i = 0; i < 20; i++) {\n      if (type instanceof DatePointField) {\n        assertQ(req(\"q\", fieldName + \":\\\"\" + numbers[i] + \"\\\"\" + \" OR \" + fieldName + \":\\\"\" + numbers[(i+1)%10]+\"\\\"\"),\n                MATCH_TWO);\n      } else {\n        assertQ(req(\"q\", fieldName + \":\" + numbers[i].replace(\"-\", \"\\\\-\") + \" OR \" + fieldName + \":\" + numbers[(i+1)%10].replace(\"-\", \"\\\\-\")),\n                MATCH_TWO);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @param fieldName the field to use for indexing and searching against\n   * @param numbers list of 20 values to index in 10 docs (pairwise)\n   * @param searchable set to true if searches against \"field\" should succeed, false if field is only stored and searches should always get numFound=0\n   */\n  private void testPointFieldMultiValuedExactQuery(final String fieldName, final String[] numbers,\n                                                   final boolean searchable) throws Exception {\n    \n    final String MATCH_ONE = \"//*[@numFound='\" + (searchable ? \"1\" : \"0\") + \"']\";\n    final String MATCH_TWO = \"//*[@numFound='\" + (searchable ? \"2\" : \"0\") + \"']\";\n    \n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    assertU(commit());\n    for (int i = 0; i < 20; i++) {\n      if (h.getCore().getLatestSchema().getField(fieldName).getType() instanceof DatePointField) {\n        assertQ(req(\"q\", fieldName + \":\\\"\" + numbers[i] + \"\\\"\"),\n                MATCH_ONE);\n      } else {\n        assertQ(req(\"q\", fieldName + \":\" + numbers[i].replace(\"-\", \"\\\\-\")),\n                MATCH_ONE);\n      }\n    }\n    \n    for (int i = 0; i < 20; i++) {\n      if (h.getCore().getLatestSchema().getField(fieldName).getType() instanceof DatePointField) {\n        assertQ(req(\"q\", fieldName + \":\\\"\" + numbers[i] + \"\\\"\" + \" OR \" + fieldName + \":\\\"\" + numbers[(i+1)%10]+\"\\\"\"),\n                MATCH_TWO);\n      } else {\n        assertQ(req(\"q\", fieldName + \":\" + numbers[i].replace(\"-\", \"\\\\-\") + \" OR \" + fieldName + \":\" + numbers[(i+1)%10].replace(\"-\", \"\\\\-\")),\n                MATCH_TWO);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb569fd721c41eafc2a2d788499a7df490c7f1a5","date":1499930871,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedExactQuery(String,String[],boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedExactQuery(String,String[],boolean).mjava","sourceNew":"  /**\n   * @param fieldName the field to use for indexing and searching against\n   * @param numbers list of 20 values to index in 10 docs (pairwise)\n   * @param searchable set to true if searches against \"field\" should succeed, false if field is only stored and searches should always get numFound=0\n   */\n  private void testPointFieldMultiValuedExactQuery(final String fieldName, final String[] numbers,\n                                                   final boolean searchable) throws Exception {\n    \n    final String MATCH_ONE = \"//*[@numFound='\" + (searchable ? \"1\" : \"0\") + \"']\";\n    final String MATCH_TWO = \"//*[@numFound='\" + (searchable ? \"2\" : \"0\") + \"']\";\n    \n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    assertU(commit());\n    FieldType type = h.getCore().getLatestSchema().getField(fieldName).getType();\n    for (int i = 0; i < 20; i++) {\n      if (type instanceof DatePointField) {\n        assertQ(req(\"q\", fieldName + \":\\\"\" + numbers[i] + \"\\\"\"),\n                MATCH_ONE);\n      } else {\n        assertQ(req(\"q\", fieldName + \":\" + numbers[i].replace(\"-\", \"\\\\-\")),\n                MATCH_ONE);\n      }\n    }\n    \n    for (int i = 0; i < 20; i++) {\n      if (type instanceof DatePointField) {\n        assertQ(req(\"q\", fieldName + \":\\\"\" + numbers[i] + \"\\\"\" + \" OR \" + fieldName + \":\\\"\" + numbers[(i+1)%10]+\"\\\"\"),\n                MATCH_TWO);\n      } else {\n        assertQ(req(\"q\", fieldName + \":\" + numbers[i].replace(\"-\", \"\\\\-\") + \" OR \" + fieldName + \":\" + numbers[(i+1)%10].replace(\"-\", \"\\\\-\")),\n                MATCH_TWO);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @param fieldName the field to use for indexing and searching against\n   * @param numbers list of 20 values to index in 10 docs (pairwise)\n   * @param searchable set to true if searches against \"field\" should succeed, false if field is only stored and searches should always get numFound=0\n   */\n  private void testPointFieldMultiValuedExactQuery(final String fieldName, final String[] numbers,\n                                                   final boolean searchable) throws Exception {\n    \n    final String MATCH_ONE = \"//*[@numFound='\" + (searchable ? \"1\" : \"0\") + \"']\";\n    final String MATCH_TWO = \"//*[@numFound='\" + (searchable ? \"2\" : \"0\") + \"']\";\n    \n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    assertU(commit());\n    for (int i = 0; i < 20; i++) {\n      if (h.getCore().getLatestSchema().getField(fieldName).getType() instanceof DatePointField) {\n        assertQ(req(\"q\", fieldName + \":\\\"\" + numbers[i] + \"\\\"\"),\n                MATCH_ONE);\n      } else {\n        assertQ(req(\"q\", fieldName + \":\" + numbers[i].replace(\"-\", \"\\\\-\")),\n                MATCH_ONE);\n      }\n    }\n    \n    for (int i = 0; i < 20; i++) {\n      if (h.getCore().getLatestSchema().getField(fieldName).getType() instanceof DatePointField) {\n        assertQ(req(\"q\", fieldName + \":\\\"\" + numbers[i] + \"\\\"\" + \" OR \" + fieldName + \":\\\"\" + numbers[(i+1)%10]+\"\\\"\"),\n                MATCH_TWO);\n      } else {\n        assertQ(req(\"q\", fieldName + \":\" + numbers[i].replace(\"-\", \"\\\\-\") + \" OR \" + fieldName + \":\" + numbers[(i+1)%10].replace(\"-\", \"\\\\-\")),\n                MATCH_TWO);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e844d4f9ba6804f10747d7e51e83a9a8868c94","date":1500054875,"type":5,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestPointFieldMultiValuedExactQuery(String,String[],boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedExactQuery(String,String[],boolean).mjava","sourceNew":"  /**\n   * @param fieldName the field to use for indexing and searching against\n   * @param numbers list of 20 values to index in 10 docs (pairwise)\n   * @param searchable set to true if searches against \"field\" should succeed, false if field is only stored and searches should always get numFound=0\n   */\n  private void doTestPointFieldMultiValuedExactQuery(final String fieldName, final String[] numbers,\n                                                     final boolean searchable) throws Exception {\n    \n    final String MATCH_ONE = \"//*[@numFound='\" + (searchable ? \"1\" : \"0\") + \"']\";\n    final String MATCH_TWO = \"//*[@numFound='\" + (searchable ? \"2\" : \"0\") + \"']\";\n    \n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    assertU(commit());\n    FieldType type = h.getCore().getLatestSchema().getField(fieldName).getType();\n    for (int i = 0; i < 20; i++) {\n      if (type instanceof DatePointField) {\n        assertQ(req(\"q\", fieldName + \":\\\"\" + numbers[i] + \"\\\"\"),\n                MATCH_ONE);\n      } else {\n        assertQ(req(\"q\", fieldName + \":\" + numbers[i].replace(\"-\", \"\\\\-\")),\n                MATCH_ONE);\n      }\n    }\n    \n    for (int i = 0; i < 20; i++) {\n      if (type instanceof DatePointField) {\n        assertQ(req(\"q\", fieldName + \":\\\"\" + numbers[i] + \"\\\"\" + \" OR \" + fieldName + \":\\\"\" + numbers[(i+1)%10]+\"\\\"\"),\n                MATCH_TWO);\n      } else {\n        assertQ(req(\"q\", fieldName + \":\" + numbers[i].replace(\"-\", \"\\\\-\") + \" OR \" + fieldName + \":\" + numbers[(i+1)%10].replace(\"-\", \"\\\\-\")),\n                MATCH_TWO);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @param fieldName the field to use for indexing and searching against\n   * @param numbers list of 20 values to index in 10 docs (pairwise)\n   * @param searchable set to true if searches against \"field\" should succeed, false if field is only stored and searches should always get numFound=0\n   */\n  private void testPointFieldMultiValuedExactQuery(final String fieldName, final String[] numbers,\n                                                   final boolean searchable) throws Exception {\n    \n    final String MATCH_ONE = \"//*[@numFound='\" + (searchable ? \"1\" : \"0\") + \"']\";\n    final String MATCH_TWO = \"//*[@numFound='\" + (searchable ? \"2\" : \"0\") + \"']\";\n    \n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    assertU(commit());\n    FieldType type = h.getCore().getLatestSchema().getField(fieldName).getType();\n    for (int i = 0; i < 20; i++) {\n      if (type instanceof DatePointField) {\n        assertQ(req(\"q\", fieldName + \":\\\"\" + numbers[i] + \"\\\"\"),\n                MATCH_ONE);\n      } else {\n        assertQ(req(\"q\", fieldName + \":\" + numbers[i].replace(\"-\", \"\\\\-\")),\n                MATCH_ONE);\n      }\n    }\n    \n    for (int i = 0; i < 20; i++) {\n      if (type instanceof DatePointField) {\n        assertQ(req(\"q\", fieldName + \":\\\"\" + numbers[i] + \"\\\"\" + \" OR \" + fieldName + \":\\\"\" + numbers[(i+1)%10]+\"\\\"\"),\n                MATCH_TWO);\n      } else {\n        assertQ(req(\"q\", fieldName + \":\" + numbers[i].replace(\"-\", \"\\\\-\") + \" OR \" + fieldName + \":\" + numbers[(i+1)%10].replace(\"-\", \"\\\\-\")),\n                MATCH_TWO);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaf90fc29510e72665ac7934f34c3d1c25efad64","date":1500354819,"type":5,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestPointFieldMultiValuedExactQuery(String,String[],boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedExactQuery(String,String[],boolean).mjava","sourceNew":"  /**\n   * @param fieldName the field to use for indexing and searching against\n   * @param numbers list of 20 values to index in 10 docs (pairwise)\n   * @param searchable set to true if searches against \"field\" should succeed, false if field is only stored and searches should always get numFound=0\n   */\n  private void doTestPointFieldMultiValuedExactQuery(final String fieldName, final String[] numbers,\n                                                     final boolean searchable) throws Exception {\n    \n    final String MATCH_ONE = \"//*[@numFound='\" + (searchable ? \"1\" : \"0\") + \"']\";\n    final String MATCH_TWO = \"//*[@numFound='\" + (searchable ? \"2\" : \"0\") + \"']\";\n    \n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    assertU(commit());\n    FieldType type = h.getCore().getLatestSchema().getField(fieldName).getType();\n    for (int i = 0; i < 20; i++) {\n      if (type instanceof DatePointField) {\n        assertQ(req(\"q\", fieldName + \":\\\"\" + numbers[i] + \"\\\"\"),\n                MATCH_ONE);\n      } else {\n        assertQ(req(\"q\", fieldName + \":\" + numbers[i].replace(\"-\", \"\\\\-\")),\n                MATCH_ONE);\n      }\n    }\n    \n    for (int i = 0; i < 20; i++) {\n      if (type instanceof DatePointField) {\n        assertQ(req(\"q\", fieldName + \":\\\"\" + numbers[i] + \"\\\"\" + \" OR \" + fieldName + \":\\\"\" + numbers[(i+1)%10]+\"\\\"\"),\n                MATCH_TWO);\n      } else {\n        assertQ(req(\"q\", fieldName + \":\" + numbers[i].replace(\"-\", \"\\\\-\") + \" OR \" + fieldName + \":\" + numbers[(i+1)%10].replace(\"-\", \"\\\\-\")),\n                MATCH_TWO);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @param fieldName the field to use for indexing and searching against\n   * @param numbers list of 20 values to index in 10 docs (pairwise)\n   * @param searchable set to true if searches against \"field\" should succeed, false if field is only stored and searches should always get numFound=0\n   */\n  private void testPointFieldMultiValuedExactQuery(final String fieldName, final String[] numbers,\n                                                   final boolean searchable) throws Exception {\n    \n    final String MATCH_ONE = \"//*[@numFound='\" + (searchable ? \"1\" : \"0\") + \"']\";\n    final String MATCH_TWO = \"//*[@numFound='\" + (searchable ? \"2\" : \"0\") + \"']\";\n    \n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    assertU(commit());\n    FieldType type = h.getCore().getLatestSchema().getField(fieldName).getType();\n    for (int i = 0; i < 20; i++) {\n      if (type instanceof DatePointField) {\n        assertQ(req(\"q\", fieldName + \":\\\"\" + numbers[i] + \"\\\"\"),\n                MATCH_ONE);\n      } else {\n        assertQ(req(\"q\", fieldName + \":\" + numbers[i].replace(\"-\", \"\\\\-\")),\n                MATCH_ONE);\n      }\n    }\n    \n    for (int i = 0; i < 20; i++) {\n      if (type instanceof DatePointField) {\n        assertQ(req(\"q\", fieldName + \":\\\"\" + numbers[i] + \"\\\"\" + \" OR \" + fieldName + \":\\\"\" + numbers[(i+1)%10]+\"\\\"\"),\n                MATCH_TWO);\n      } else {\n        assertQ(req(\"q\", fieldName + \":\" + numbers[i].replace(\"-\", \"\\\\-\") + \" OR \" + fieldName + \":\" + numbers[(i+1)%10].replace(\"-\", \"\\\\-\")),\n                MATCH_TWO);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":["fb569fd721c41eafc2a2d788499a7df490c7f1a5","17e844d4f9ba6804f10747d7e51e83a9a8868c94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"17e844d4f9ba6804f10747d7e51e83a9a8868c94":["ac5a6354a5800dd1ade225010d614eeb8acf9152"],"ac5a6354a5800dd1ade225010d614eeb8acf9152":["0ff61c2e5ce6b1f26a271d9d454206db1917d628"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","ac5a6354a5800dd1ade225010d614eeb8acf9152"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e844d4f9ba6804f10747d7e51e83a9a8868c94"],"0ff61c2e5ce6b1f26a271d9d454206db1917d628":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["fb569fd721c41eafc2a2d788499a7df490c7f1a5","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","0ff61c2e5ce6b1f26a271d9d454206db1917d628"],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":["aaf90fc29510e72665ac7934f34c3d1c25efad64"],"17e844d4f9ba6804f10747d7e51e83a9a8868c94":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ac5a6354a5800dd1ade225010d614eeb8acf9152":["17e844d4f9ba6804f10747d7e51e83a9a8868c94","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["fb569fd721c41eafc2a2d788499a7df490c7f1a5"],"0ff61c2e5ce6b1f26a271d9d454206db1917d628":["ac5a6354a5800dd1ade225010d614eeb8acf9152"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}