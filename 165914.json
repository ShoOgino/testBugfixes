{"path":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedSkipReader#BlockPackedSkipReader(IndexInput,int,int,boolean,boolean,boolean).mjava","commits":[{"id":"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","date":1343686506,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedSkipReader#BlockPackedSkipReader(IndexInput,int,int,boolean,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public BlockPackedSkipReader(IndexInput skipStream, int maxSkipLevels, int skipInterval, boolean hasPos, boolean hasOffsets, boolean hasPayloads) {\n    super(skipStream, maxSkipLevels, skipInterval);\n    docPointer = new long[maxSkipLevels];\n    if (hasPos) {\n      posPointer = new long[maxSkipLevels];\n      posBufferUpto = new int[maxSkipLevels];\n      if (hasPayloads) {\n        payloadByteUpto = new int[maxSkipLevels];\n      } else {\n        payloadByteUpto = null;\n      }\n      if (hasOffsets) {\n        endOffset = new int[maxSkipLevels];\n      } else {\n        endOffset = null;\n      }\n      if (hasOffsets || hasPayloads) {\n        payPointer = new long[maxSkipLevels];\n      } else {\n        payPointer = null;\n      }\n    } else {\n      posPointer = null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f81e20fb7784c464473faba4f1fdd4f775e8ee87"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f81e20fb7784c464473faba4f1fdd4f775e8ee87","date":1343937502,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedSkipReader#BlockPackedSkipReader(IndexInput,int,int,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedSkipReader#BlockPackedSkipReader(IndexInput,int,int,boolean,boolean,boolean).mjava","sourceNew":"  public BlockPackedSkipReader(IndexInput skipStream, int maxSkipLevels, int skipInterval, boolean hasPos, boolean hasOffsets, boolean hasPayloads) {\n    super(skipStream, maxSkipLevels, skipInterval);\n    docPointer = new long[maxSkipLevels];\n    if (hasPos) {\n      posPointer = new long[maxSkipLevels];\n      posBufferUpto = new int[maxSkipLevels];\n      if (hasPayloads) {\n        payloadByteUpto = new int[maxSkipLevels];\n      } else {\n        payloadByteUpto = null;\n      }\n      if (hasOffsets) {\n        startOffset = new int[maxSkipLevels];\n      } else {\n        startOffset = null;\n      }\n      if (hasOffsets || hasPayloads) {\n        payPointer = new long[maxSkipLevels];\n      } else {\n        payPointer = null;\n      }\n    } else {\n      posPointer = null;\n    }\n  }\n\n","sourceOld":"  public BlockPackedSkipReader(IndexInput skipStream, int maxSkipLevels, int skipInterval, boolean hasPos, boolean hasOffsets, boolean hasPayloads) {\n    super(skipStream, maxSkipLevels, skipInterval);\n    docPointer = new long[maxSkipLevels];\n    if (hasPos) {\n      posPointer = new long[maxSkipLevels];\n      posBufferUpto = new int[maxSkipLevels];\n      if (hasPayloads) {\n        payloadByteUpto = new int[maxSkipLevels];\n      } else {\n        payloadByteUpto = null;\n      }\n      if (hasOffsets) {\n        endOffset = new int[maxSkipLevels];\n      } else {\n        endOffset = null;\n      }\n      if (hasOffsets || hasPayloads) {\n        payPointer = new long[maxSkipLevels];\n      } else {\n        payPointer = null;\n      }\n    } else {\n      posPointer = null;\n    }\n  }\n\n","bugFix":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e3359210474c12c0b79e6400450313e3d7ef2bb","date":1344347790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedSkipReader#BlockPackedSkipReader(IndexInput,int,int,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedSkipReader#BlockPackedSkipReader(IndexInput,int,int,boolean,boolean,boolean).mjava","sourceNew":"  public BlockPackedSkipReader(IndexInput skipStream, int maxSkipLevels, int blockSize, boolean hasPos, boolean hasOffsets, boolean hasPayloads) {\n    super(skipStream, maxSkipLevels, blockSize, 8);\n    this.blockSize = blockSize;\n    docPointer = new long[maxSkipLevels];\n    if (hasPos) {\n      posPointer = new long[maxSkipLevels];\n      posBufferUpto = new int[maxSkipLevels];\n      if (hasPayloads) {\n        payloadByteUpto = new int[maxSkipLevels];\n      } else {\n        payloadByteUpto = null;\n      }\n      if (hasOffsets) {\n        startOffset = new int[maxSkipLevels];\n      } else {\n        startOffset = null;\n      }\n      if (hasOffsets || hasPayloads) {\n        payPointer = new long[maxSkipLevels];\n      } else {\n        payPointer = null;\n      }\n    } else {\n      posPointer = null;\n    }\n  }\n\n","sourceOld":"  public BlockPackedSkipReader(IndexInput skipStream, int maxSkipLevels, int skipInterval, boolean hasPos, boolean hasOffsets, boolean hasPayloads) {\n    super(skipStream, maxSkipLevels, skipInterval);\n    docPointer = new long[maxSkipLevels];\n    if (hasPos) {\n      posPointer = new long[maxSkipLevels];\n      posBufferUpto = new int[maxSkipLevels];\n      if (hasPayloads) {\n        payloadByteUpto = new int[maxSkipLevels];\n      } else {\n        payloadByteUpto = null;\n      }\n      if (hasOffsets) {\n        startOffset = new int[maxSkipLevels];\n      } else {\n        startOffset = null;\n      }\n      if (hasOffsets || hasPayloads) {\n        payPointer = new long[maxSkipLevels];\n      } else {\n        payPointer = null;\n      }\n    } else {\n      posPointer = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6b41208259e8566cba0ecac7da6a331ea9732dd","date":1344551376,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedSkipReader#BlockPackedSkipReader(IndexInput,int,int,boolean,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  public BlockPackedSkipReader(IndexInput skipStream, int maxSkipLevels, int blockSize, boolean hasPos, boolean hasOffsets, boolean hasPayloads) {\n    super(skipStream, maxSkipLevels, blockSize, 8);\n    this.blockSize = blockSize;\n    docPointer = new long[maxSkipLevels];\n    if (hasPos) {\n      posPointer = new long[maxSkipLevels];\n      posBufferUpto = new int[maxSkipLevels];\n      if (hasPayloads) {\n        payloadByteUpto = new int[maxSkipLevels];\n      } else {\n        payloadByteUpto = null;\n      }\n      if (hasOffsets) {\n        startOffset = new int[maxSkipLevels];\n      } else {\n        startOffset = null;\n      }\n      if (hasOffsets || hasPayloads) {\n        payPointer = new long[maxSkipLevels];\n      } else {\n        payPointer = null;\n      }\n    } else {\n      posPointer = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["f81e20fb7784c464473faba4f1fdd4f775e8ee87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e6b41208259e8566cba0ecac7da6a331ea9732dd":["0e3359210474c12c0b79e6400450313e3d7ef2bb"],"f81e20fb7784c464473faba4f1fdd4f775e8ee87":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df"]},"commit2Childs":{"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":["f81e20fb7784c464473faba4f1fdd4f775e8ee87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["e6b41208259e8566cba0ecac7da6a331ea9732dd"],"f81e20fb7784c464473faba4f1fdd4f775e8ee87":["0e3359210474c12c0b79e6400450313e3d7ef2bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e6b41208259e8566cba0ecac7da6a331ea9732dd":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","e6b41208259e8566cba0ecac7da6a331ea9732dd"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}