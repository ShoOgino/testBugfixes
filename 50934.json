{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/RestoreTriggerStateTest#setupCluster().mjava","commits":[{"id":"0215c504dd86fecb28c636f37ebcfb2906a839ec","date":1522393878,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/RestoreTriggerStateTest#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    // disable .scheduled_maintenance\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.scheduled_maintenance'}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    SolrClient solrClient = cluster.getSolrClient();\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    actionConstructorCalled = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acfe8d3b837b6b66eaddf114bb99cf9e2257764d","date":1522406637,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/RestoreTriggerStateTest#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    // disable .scheduled_maintenance\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.scheduled_maintenance'}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    SolrClient solrClient = cluster.getSolrClient();\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    actionConstructorCalled = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/RestoreTriggerStateTest#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/RestoreTriggerStateTest#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n\n    // disable .scheduled_maintenance (once it exists)\n    CloudTestUtils.waitForTriggerToBeScheduled(cluster.getOpenOverseer().getSolrCloudManager(), \".scheduled_maintenance\");\n    CloudTestUtils.suspendTrigger(cluster.getOpenOverseer().getSolrCloudManager(), \".scheduled_maintenance\");\n    \n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    actionConstructorCalled = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    // disable .scheduled_maintenance\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.scheduled_maintenance'}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    SolrClient solrClient = cluster.getSolrClient();\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    actionConstructorCalled = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/RestoreTriggerStateTest#setupCluster().mjava","sourceNew":null,"sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n\n    // disable .scheduled_maintenance (once it exists)\n    CloudTestUtils.waitForTriggerToBeScheduled(cluster.getOpenOverseer().getSolrCloudManager(), \".scheduled_maintenance\");\n    CloudTestUtils.suspendTrigger(cluster.getOpenOverseer().getSolrCloudManager(), \".scheduled_maintenance\");\n    \n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    actionConstructorCalled = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["89948af0461fead48f44ba8fb7866f107ce83f22"],"0215c504dd86fecb28c636f37ebcfb2906a839ec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"acfe8d3b837b6b66eaddf114bb99cf9e2257764d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0215c504dd86fecb28c636f37ebcfb2906a839ec"],"89948af0461fead48f44ba8fb7866f107ce83f22":["acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0215c504dd86fecb28c636f37ebcfb2906a839ec":["acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0215c504dd86fecb28c636f37ebcfb2906a839ec","acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"acfe8d3b837b6b66eaddf114bb99cf9e2257764d":["89948af0461fead48f44ba8fb7866f107ce83f22"],"89948af0461fead48f44ba8fb7866f107ce83f22":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}