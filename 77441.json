{"path":"solr/src/java/org/apache/solr/search/function/ScaleFloatFunction#createScaleInfo(Map,IndexReader).mjava","commits":[{"id":"bf86dfc469b73b567b31e1c3562f075096bd005b","date":1294505468,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/ScaleFloatFunction#createScaleInfo(Map,IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  private ScaleInfo createScaleInfo(Map context, IndexReader reader) throws IOException {\n    IndexReader.ReaderContext ctx = ValueSource.readerToContext(context, reader);\n    while (ctx.parent != null) ctx = ctx.parent;\n    AtomicReaderContext[] leaves = ctx.leaves();\n    if (ctx == null) leaves = new AtomicReaderContext[] {(AtomicReaderContext)ctx};\n\n    float minVal = Float.POSITIVE_INFINITY;\n    float maxVal = Float.NEGATIVE_INFINITY;\n\n    for (AtomicReaderContext leaf : leaves) {\n      int maxDoc = leaf.reader.maxDoc();\n      DocValues vals =  source.getValues(context, leaf.reader);\n      for (int i=0; i<maxDoc; i++) {\n\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      }\n      if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n    }\n\n    if (minVal == Float.POSITIVE_INFINITY) {\n    // must have been an empty index\n      minVal = maxVal = 0;\n    }\n\n    ScaleInfo scaleInfo = new ScaleInfo();\n    scaleInfo.minVal = minVal;\n    scaleInfo.maxVal = maxVal;\n    context.put(this.source, scaleInfo);\n    return scaleInfo;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","date":1294747166,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/ScaleFloatFunction#createScaleInfo(Map,IndexReader).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/ScaleFloatFunction#createScaleInfo(Map,IndexReader).mjava","sourceNew":"  private ScaleInfo createScaleInfo(Map context, IndexReader reader) throws IOException {\n    IndexReader.ReaderContext ctx = ValueSource.readerToContext(context, reader);\n    while (ctx.parent != null) ctx = ctx.parent;\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(ctx);\n\n    float minVal = Float.POSITIVE_INFINITY;\n    float maxVal = Float.NEGATIVE_INFINITY;\n\n    for (AtomicReaderContext leaf : leaves) {\n      int maxDoc = leaf.reader.maxDoc();\n      DocValues vals =  source.getValues(context, leaf.reader);\n      for (int i=0; i<maxDoc; i++) {\n\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      }\n      if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n    }\n\n    if (minVal == Float.POSITIVE_INFINITY) {\n    // must have been an empty index\n      minVal = maxVal = 0;\n    }\n\n    ScaleInfo scaleInfo = new ScaleInfo();\n    scaleInfo.minVal = minVal;\n    scaleInfo.maxVal = maxVal;\n    context.put(this.source, scaleInfo);\n    return scaleInfo;\n  }\n\n","sourceOld":"  private ScaleInfo createScaleInfo(Map context, IndexReader reader) throws IOException {\n    IndexReader.ReaderContext ctx = ValueSource.readerToContext(context, reader);\n    while (ctx.parent != null) ctx = ctx.parent;\n    AtomicReaderContext[] leaves = ctx.leaves();\n    if (ctx == null) leaves = new AtomicReaderContext[] {(AtomicReaderContext)ctx};\n\n    float minVal = Float.POSITIVE_INFINITY;\n    float maxVal = Float.NEGATIVE_INFINITY;\n\n    for (AtomicReaderContext leaf : leaves) {\n      int maxDoc = leaf.reader.maxDoc();\n      DocValues vals =  source.getValues(context, leaf.reader);\n      for (int i=0; i<maxDoc; i++) {\n\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      }\n      if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n    }\n\n    if (minVal == Float.POSITIVE_INFINITY) {\n    // must have been an empty index\n      minVal = maxVal = 0;\n    }\n\n    ScaleInfo scaleInfo = new ScaleInfo();\n    scaleInfo.minVal = minVal;\n    scaleInfo.maxVal = maxVal;\n    context.put(this.source, scaleInfo);\n    return scaleInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c220849f876de24a79f756f65b3eb045db59f63f","date":1294902803,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/ScaleFloatFunction#createScaleInfo(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/ScaleFloatFunction#createScaleInfo(Map,IndexReader).mjava","sourceNew":"  private ScaleInfo createScaleInfo(Map context, AtomicReaderContext readerContext) throws IOException {\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(ReaderUtil.getTopLevelContext(readerContext));\n\n    float minVal = Float.POSITIVE_INFINITY;\n    float maxVal = Float.NEGATIVE_INFINITY;\n\n    for (AtomicReaderContext leaf : leaves) {\n      int maxDoc = leaf.reader.maxDoc();\n      DocValues vals =  source.getValues(context, leaf);\n      for (int i=0; i<maxDoc; i++) {\n\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      }\n      if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n    }\n\n    if (minVal == Float.POSITIVE_INFINITY) {\n    // must have been an empty index\n      minVal = maxVal = 0;\n    }\n\n    ScaleInfo scaleInfo = new ScaleInfo();\n    scaleInfo.minVal = minVal;\n    scaleInfo.maxVal = maxVal;\n    context.put(this.source, scaleInfo);\n    return scaleInfo;\n  }\n\n","sourceOld":"  private ScaleInfo createScaleInfo(Map context, IndexReader reader) throws IOException {\n    IndexReader.ReaderContext ctx = ValueSource.readerToContext(context, reader);\n    while (ctx.parent != null) ctx = ctx.parent;\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(ctx);\n\n    float minVal = Float.POSITIVE_INFINITY;\n    float maxVal = Float.NEGATIVE_INFINITY;\n\n    for (AtomicReaderContext leaf : leaves) {\n      int maxDoc = leaf.reader.maxDoc();\n      DocValues vals =  source.getValues(context, leaf.reader);\n      for (int i=0; i<maxDoc; i++) {\n\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      }\n      if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n    }\n\n    if (minVal == Float.POSITIVE_INFINITY) {\n    // must have been an empty index\n      minVal = maxVal = 0;\n    }\n\n    ScaleInfo scaleInfo = new ScaleInfo();\n    scaleInfo.minVal = minVal;\n    scaleInfo.maxVal = maxVal;\n    context.put(this.source, scaleInfo);\n    return scaleInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c220849f876de24a79f756f65b3eb045db59f63f":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"bf86dfc469b73b567b31e1c3562f075096bd005b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["bf86dfc469b73b567b31e1c3562f075096bd005b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c220849f876de24a79f756f65b3eb045db59f63f"]},"commit2Childs":{"c220849f876de24a79f756f65b3eb045db59f63f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bf86dfc469b73b567b31e1c3562f075096bd005b":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bf86dfc469b73b567b31e1c3562f075096bd005b"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["c220849f876de24a79f756f65b3eb045db59f63f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}