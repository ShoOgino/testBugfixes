{"path":"lucene/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfo,int,IOContext).mjava","commits":[{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfo,int,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#get(boolean,SegmentInfo,boolean,int,IOContext).mjava","sourceNew":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public SegmentReader(SegmentInfo si, int termInfosIndexDivisor, IOContext context) throws IOException {\n    this.si = si;\n    boolean success = false;\n    try {\n      core = new SegmentCoreReaders(this, si.dir, si, context, termInfosIndexDivisor);\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = new BitVector(directory(), si.getDelFileName(), new IOContext(IOContext.READ, true));\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.docCount - si.getDelCount();\n      assert checkLiveCounts(false);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  private static SegmentReader get(boolean readOnly,\n                                  SegmentInfo si,\n                                  boolean doOpenStores,\n                                  int termInfosIndexDivisor,\n                                  IOContext context)\n    throws CorruptIndexException, IOException {\n    \n    SegmentReader instance = new SegmentReader(readOnly, si);\n    boolean success = false;\n    try {\n      instance.core = new SegmentCoreReaders(instance, si.dir, si, context, termInfosIndexDivisor);\n      if (doOpenStores) {\n        instance.core.openDocStores(si);\n      }\n      instance.loadLiveDocs(context);\n      success = true;\n    } finally {\n\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        instance.doClose();\n      }\n    }\n    return instance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89c3b83c5239d5839412faa883f647059bf29a50","date":1324495172,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfo,int,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfo,int,IOContext).mjava","sourceNew":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public SegmentReader(SegmentInfo si, int termInfosIndexDivisor, IOContext context) throws IOException {\n    this.si = si;\n    core = new SegmentCoreReaders(this, si.dir, si, context, termInfosIndexDivisor);\n    boolean success = false;\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = new BitVector(directory(), si.getDelFileName(), new IOContext(IOContext.READ, true));\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.docCount - si.getDelCount();\n      assert checkLiveCounts(false);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        core.decRef();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public SegmentReader(SegmentInfo si, int termInfosIndexDivisor, IOContext context) throws IOException {\n    this.si = si;\n    boolean success = false;\n    try {\n      core = new SegmentCoreReaders(this, si.dir, si, context, termInfosIndexDivisor);\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = new BitVector(directory(), si.getDelFileName(), new IOContext(IOContext.READ, true));\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.docCount - si.getDelCount();\n      assert checkLiveCounts(false);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3a73b15d807e41306466aec106b4cb85b8d5335","date":1326993385,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfo,int,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfo,int,IOContext).mjava","sourceNew":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public SegmentReader(SegmentInfo si, int termInfosIndexDivisor, IOContext context) throws IOException {\n    this.si = si;\n    core = new SegmentCoreReaders(this, si.dir, si, context, termInfosIndexDivisor);\n    boolean success = false;\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = si.getCodec().liveDocsFormat().readLiveDocs(directory(), si, new IOContext(IOContext.READ, true));\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.docCount - si.getDelCount();\n      assert checkLiveCounts(false);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        core.decRef();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public SegmentReader(SegmentInfo si, int termInfosIndexDivisor, IOContext context) throws IOException {\n    this.si = si;\n    core = new SegmentCoreReaders(this, si.dir, si, context, termInfosIndexDivisor);\n    boolean success = false;\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = new BitVector(directory(), si.getDelFileName(), new IOContext(IOContext.READ, true));\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.docCount - si.getDelCount();\n      assert checkLiveCounts(false);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        core.decRef();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3d53ad7b9687e0dfaacaab099d3c7e98bfbe78e","date":1327757020,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfo,int,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfo,int,IOContext).mjava","sourceNew":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public SegmentReader(SegmentInfo si, int termInfosIndexDivisor, IOContext context) throws IOException {\n    this.si = si;\n    core = new SegmentCoreReaders(this, si.dir, si, context, termInfosIndexDivisor);\n    boolean success = false;\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = si.getCodec().liveDocsFormat().readLiveDocs(directory(), si, new IOContext(IOContext.READ, true));\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.docCount - si.getDelCount();\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        core.decRef();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public SegmentReader(SegmentInfo si, int termInfosIndexDivisor, IOContext context) throws IOException {\n    this.si = si;\n    core = new SegmentCoreReaders(this, si.dir, si, context, termInfosIndexDivisor);\n    boolean success = false;\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = si.getCodec().liveDocsFormat().readLiveDocs(directory(), si, new IOContext(IOContext.READ, true));\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.docCount - si.getDelCount();\n      assert checkLiveCounts(false);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        core.decRef();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31","date":1327836826,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfo,int,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfo,int,IOContext).mjava","sourceNew":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public SegmentReader(SegmentInfo si, int termInfosIndexDivisor, IOContext context) throws IOException {\n    this.si = si;\n    core = new SegmentCoreReaders(this, si.dir, si, context, termInfosIndexDivisor);\n    boolean success = false;\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = si.getCodec().liveDocsFormat().readLiveDocs(directory(), si, new IOContext(IOContext.READ, true));\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.docCount - si.getDelCount();\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        core.decRef();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public SegmentReader(SegmentInfo si, int termInfosIndexDivisor, IOContext context) throws IOException {\n    this.si = si;\n    core = new SegmentCoreReaders(this, si.dir, si, context, termInfosIndexDivisor);\n    boolean success = false;\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = new BitVector(directory(), si.getDelFileName(), new IOContext(IOContext.READ, true));\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.docCount - si.getDelCount();\n      assert checkLiveCounts(false);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        core.decRef();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfo,int,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfo,int,IOContext).mjava","sourceNew":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public SegmentReader(SegmentInfo si, int termInfosIndexDivisor, IOContext context) throws IOException {\n    this.si = si;\n    core = new SegmentCoreReaders(this, si.dir, si, context, termInfosIndexDivisor);\n    boolean success = false;\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = si.getCodec().liveDocsFormat().readLiveDocs(directory(), si, new IOContext(IOContext.READ, true));\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.docCount - si.getDelCount();\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        core.decRef();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public SegmentReader(SegmentInfo si, int termInfosIndexDivisor, IOContext context) throws IOException {\n    this.si = si;\n    core = new SegmentCoreReaders(this, si.dir, si, context, termInfosIndexDivisor);\n    boolean success = false;\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = new BitVector(directory(), si.getDelFileName(), new IOContext(IOContext.READ, true));\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.docCount - si.getDelCount();\n      assert checkLiveCounts(false);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        core.decRef();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfo,int,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfo,int,IOContext).mjava","sourceNew":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public SegmentReader(SegmentInfo si, int termInfosIndexDivisor, IOContext context) throws IOException {\n    this.si = si;\n    core = new SegmentCoreReaders(this, si.dir, si, context, termInfosIndexDivisor);\n    boolean success = false;\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = si.getCodec().liveDocsFormat().readLiveDocs(directory(), si, new IOContext(IOContext.READ, true));\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.docCount - si.getDelCount();\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        core.decRef();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public SegmentReader(SegmentInfo si, int termInfosIndexDivisor, IOContext context) throws IOException {\n    this.si = si;\n    core = new SegmentCoreReaders(this, si.dir, si, context, termInfosIndexDivisor);\n    boolean success = false;\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = si.getCodec().liveDocsFormat().readLiveDocs(directory(), si, new IOContext(IOContext.READ, true));\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.docCount - si.getDelCount();\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        core.decRef();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"e3a73b15d807e41306466aec106b4cb85b8d5335":["89c3b83c5239d5839412faa883f647059bf29a50"],"89c3b83c5239d5839412faa883f647059bf29a50":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d3d53ad7b9687e0dfaacaab099d3c7e98bfbe78e":["e3a73b15d807e41306466aec106b4cb85b8d5335"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["89c3b83c5239d5839412faa883f647059bf29a50","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31":["89c3b83c5239d5839412faa883f647059bf29a50","d3d53ad7b9687e0dfaacaab099d3c7e98bfbe78e"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e3a73b15d807e41306466aec106b4cb85b8d5335":["d3d53ad7b9687e0dfaacaab099d3c7e98bfbe78e"],"89c3b83c5239d5839412faa883f647059bf29a50":["e3a73b15d807e41306466aec106b4cb85b8d5335","fd92b8bcc88e969302510acf77bd6970da3994c4","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"d3d53ad7b9687e0dfaacaab099d3c7e98bfbe78e":["c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","fd92b8bcc88e969302510acf77bd6970da3994c4"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["89c3b83c5239d5839412faa883f647059bf29a50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fd92b8bcc88e969302510acf77bd6970da3994c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}