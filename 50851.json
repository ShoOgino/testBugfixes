{"path":"solr/core/src/java/org/apache/solr/search/stats/ExactStatsCache#doMergeToGlobalStats(SolrQueryRequest,List[ShardResponse]).mjava","commits":[{"id":"df72a23fb74bebe914e3f3972063a884327c0436","date":1570470832,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/stats/ExactStatsCache#doMergeToGlobalStats(SolrQueryRequest,List[ShardResponse]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/stats/ExactStatsCache#mergeToGlobalStats(SolrQueryRequest,List[ShardResponse]).mjava","sourceNew":"  @Override\n  protected void doMergeToGlobalStats(SolrQueryRequest req, List<ShardResponse> responses) {\n    Set<Term> allTerms = new HashSet<>();\n    for (ShardResponse r : responses) {\n      log.debug(\"Merging to global stats, shard={}, response={}\", r.getShard(), r.getSolrResponse().getResponse());\n      // response's \"shard\" is really a shardURL, or even a list of URLs\n      String shard = r.getShard();\n      SolrResponse res = r.getSolrResponse();\n      if (res.getException() != null) {\n        log.debug(\"Exception response={}\", res);\n        continue;\n      }\n      if (res.getResponse().get(ShardParams.SHARD_NAME) != null) {\n        shard = (String) res.getResponse().get(ShardParams.SHARD_NAME);\n      }\n      NamedList<Object> nl = res.getResponse();\n\n      String termStatsString = (String) nl.get(TERM_STATS_KEY);\n      if (termStatsString != null) {\n        addToPerShardTermStats(req, shard, termStatsString);\n      }\n      Set<Term> terms = StatsUtil.termsFromEncodedString((String) nl.get(TERMS_KEY));\n      allTerms.addAll(terms);\n      String colStatsString = (String) nl.get(COL_STATS_KEY);\n      Map<String,CollectionStats> colStats = StatsUtil.colStatsMapFromString(colStatsString);\n      if (colStats != null) {\n        addToPerShardColStats(req, shard, colStats);\n      }\n    }\n    if (allTerms.size() > 0) {\n      req.getContext().put(TERMS_KEY, StatsUtil.termsToEncodedString(allTerms));\n    }\n    if (log.isDebugEnabled()) printStats(req);\n  }\n\n","sourceOld":"  @Override\n  public void mergeToGlobalStats(SolrQueryRequest req, List<ShardResponse> responses) {\n    Set<Object> allTerms = new HashSet<>();\n    for (ShardResponse r : responses) {\n      log.debug(\"Merging to global stats, shard={}, response={}\", r.getShard(), r.getSolrResponse().getResponse());\n      String shard = r.getShard();\n      SolrResponse res = r.getSolrResponse();\n      NamedList<Object> nl = res.getResponse();\n\n      // TODO: nl == null if not all shards respond (no server hosting shard)\n      String termStatsString = (String) nl.get(TERM_STATS_KEY);\n      if (termStatsString != null) {\n        addToPerShardTermStats(req, shard, termStatsString);\n      }\n      List<Object> terms = nl.getAll(TERMS_KEY);\n      allTerms.addAll(terms);\n      String colStatsString = (String) nl.get(COL_STATS_KEY);\n      Map<String,CollectionStats> colStats = StatsUtil.colStatsMapFromString(colStatsString);\n      if (colStats != null) {\n        addToPerShardColStats(req, shard, colStats);\n      }\n    }\n    if (allTerms.size() > 0) {\n      req.getContext().put(TERMS_KEY, Lists.newArrayList(allTerms));\n    }\n    if (log.isDebugEnabled()) printStats(req);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/stats/ExactStatsCache#doMergeToGlobalStats(SolrQueryRequest,List[ShardResponse]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void doMergeToGlobalStats(SolrQueryRequest req, List<ShardResponse> responses) {\n    Set<Term> allTerms = new HashSet<>();\n    for (ShardResponse r : responses) {\n      log.debug(\"Merging to global stats, shard={}, response={}\", r.getShard(), r.getSolrResponse().getResponse());\n      // response's \"shard\" is really a shardURL, or even a list of URLs\n      String shard = r.getShard();\n      SolrResponse res = r.getSolrResponse();\n      if (res.getException() != null) {\n        log.debug(\"Exception response={}\", res);\n        continue;\n      }\n      if (res.getResponse().get(ShardParams.SHARD_NAME) != null) {\n        shard = (String) res.getResponse().get(ShardParams.SHARD_NAME);\n      }\n      NamedList<Object> nl = res.getResponse();\n\n      String termStatsString = (String) nl.get(TERM_STATS_KEY);\n      if (termStatsString != null) {\n        addToPerShardTermStats(req, shard, termStatsString);\n      }\n      Set<Term> terms = StatsUtil.termsFromEncodedString((String) nl.get(TERMS_KEY));\n      allTerms.addAll(terms);\n      String colStatsString = (String) nl.get(COL_STATS_KEY);\n      Map<String,CollectionStats> colStats = StatsUtil.colStatsMapFromString(colStatsString);\n      if (colStats != null) {\n        addToPerShardColStats(req, shard, colStats);\n      }\n    }\n    if (allTerms.size() > 0) {\n      req.getContext().put(TERMS_KEY, StatsUtil.termsToEncodedString(allTerms));\n    }\n    if (log.isDebugEnabled()) printStats(req);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/stats/ExactStatsCache#doMergeToGlobalStats(SolrQueryRequest,List[ShardResponse]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/stats/ExactStatsCache#doMergeToGlobalStats(SolrQueryRequest,List[ShardResponse]).mjava","sourceNew":"  @Override\n  protected void doMergeToGlobalStats(SolrQueryRequest req, List<ShardResponse> responses) {\n    Set<Term> allTerms = new HashSet<>();\n    for (ShardResponse r : responses) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"Merging to global stats, shard={}, response={}\", r.getShard(), r.getSolrResponse().getResponse());\n      }\n      // response's \"shard\" is really a shardURL, or even a list of URLs\n      String shard = r.getShard();\n      SolrResponse res = r.getSolrResponse();\n      if (res.getException() != null) {\n        log.debug(\"Exception response={}\", res);\n        continue;\n      }\n      if (res.getResponse().get(ShardParams.SHARD_NAME) != null) {\n        shard = (String) res.getResponse().get(ShardParams.SHARD_NAME);\n      }\n      NamedList<Object> nl = res.getResponse();\n\n      String termStatsString = (String) nl.get(TERM_STATS_KEY);\n      if (termStatsString != null) {\n        addToPerShardTermStats(req, shard, termStatsString);\n      }\n      Set<Term> terms = StatsUtil.termsFromEncodedString((String) nl.get(TERMS_KEY));\n      allTerms.addAll(terms);\n      String colStatsString = (String) nl.get(COL_STATS_KEY);\n      Map<String,CollectionStats> colStats = StatsUtil.colStatsMapFromString(colStatsString);\n      if (colStats != null) {\n        addToPerShardColStats(req, shard, colStats);\n      }\n    }\n    if (allTerms.size() > 0) {\n      req.getContext().put(TERMS_KEY, StatsUtil.termsToEncodedString(allTerms));\n    }\n    if (log.isDebugEnabled()) printStats(req);\n  }\n\n","sourceOld":"  @Override\n  protected void doMergeToGlobalStats(SolrQueryRequest req, List<ShardResponse> responses) {\n    Set<Term> allTerms = new HashSet<>();\n    for (ShardResponse r : responses) {\n      log.debug(\"Merging to global stats, shard={}, response={}\", r.getShard(), r.getSolrResponse().getResponse());\n      // response's \"shard\" is really a shardURL, or even a list of URLs\n      String shard = r.getShard();\n      SolrResponse res = r.getSolrResponse();\n      if (res.getException() != null) {\n        log.debug(\"Exception response={}\", res);\n        continue;\n      }\n      if (res.getResponse().get(ShardParams.SHARD_NAME) != null) {\n        shard = (String) res.getResponse().get(ShardParams.SHARD_NAME);\n      }\n      NamedList<Object> nl = res.getResponse();\n\n      String termStatsString = (String) nl.get(TERM_STATS_KEY);\n      if (termStatsString != null) {\n        addToPerShardTermStats(req, shard, termStatsString);\n      }\n      Set<Term> terms = StatsUtil.termsFromEncodedString((String) nl.get(TERMS_KEY));\n      allTerms.addAll(terms);\n      String colStatsString = (String) nl.get(COL_STATS_KEY);\n      Map<String,CollectionStats> colStats = StatsUtil.colStatsMapFromString(colStatsString);\n      if (colStats != null) {\n        addToPerShardColStats(req, shard, colStats);\n      }\n    }\n    if (allTerms.size() > 0) {\n      req.getContext().put(TERMS_KEY, StatsUtil.termsToEncodedString(allTerms));\n    }\n    if (log.isDebugEnabled()) printStats(req);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4d143a4ed5613dfe05afe5990093198084c693e","date":1601294688,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/stats/ExactStatsCache#doMergeToGlobalStats(SolrQueryRequest,List[ShardResponse]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/stats/ExactStatsCache#doMergeToGlobalStats(SolrQueryRequest,List[ShardResponse]).mjava","sourceNew":"  @Override\n  protected void doMergeToGlobalStats(SolrQueryRequest req, List<ShardResponse> responses) {\n    Set<Term> allTerms = new HashSet<>();\n    for (ShardResponse r : responses) {\n      if (\"true\".equalsIgnoreCase(req.getParams().get(ShardParams.SHARDS_TOLERANT)) && r.getException() != null) {\n        // Can't expect stats if there was an exception for this request on any shard\n        // this should only happen when using shards.tolerant=true\n        log.debug(\"Exception shard response={}\", r);\n        continue;\n      }\n      if (log.isDebugEnabled()) {\n        log.debug(\"Merging to global stats, shard={}, response={}\", r.getShard(), r.getSolrResponse().getResponse());\n      }\n      // response's \"shard\" is really a shardURL, or even a list of URLs\n      String shard = r.getShard();\n      SolrResponse res = r.getSolrResponse();\n      if (res.getException() != null) {\n        log.debug(\"Exception response={}\", res);\n        continue;\n      }\n      if (res.getResponse().get(ShardParams.SHARD_NAME) != null) {\n        shard = (String) res.getResponse().get(ShardParams.SHARD_NAME);\n      }\n      NamedList<Object> nl = res.getResponse();\n\n      String termStatsString = (String) nl.get(TERM_STATS_KEY);\n      if (termStatsString != null) {\n        addToPerShardTermStats(req, shard, termStatsString);\n      }\n      Set<Term> terms = StatsUtil.termsFromEncodedString((String) nl.get(TERMS_KEY));\n      allTerms.addAll(terms);\n      String colStatsString = (String) nl.get(COL_STATS_KEY);\n      Map<String,CollectionStats> colStats = StatsUtil.colStatsMapFromString(colStatsString);\n      if (colStats != null) {\n        addToPerShardColStats(req, shard, colStats);\n      }\n    }\n    if (allTerms.size() > 0) {\n      req.getContext().put(TERMS_KEY, StatsUtil.termsToEncodedString(allTerms));\n    }\n    if (log.isDebugEnabled()) printStats(req);\n  }\n\n","sourceOld":"  @Override\n  protected void doMergeToGlobalStats(SolrQueryRequest req, List<ShardResponse> responses) {\n    Set<Term> allTerms = new HashSet<>();\n    for (ShardResponse r : responses) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"Merging to global stats, shard={}, response={}\", r.getShard(), r.getSolrResponse().getResponse());\n      }\n      // response's \"shard\" is really a shardURL, or even a list of URLs\n      String shard = r.getShard();\n      SolrResponse res = r.getSolrResponse();\n      if (res.getException() != null) {\n        log.debug(\"Exception response={}\", res);\n        continue;\n      }\n      if (res.getResponse().get(ShardParams.SHARD_NAME) != null) {\n        shard = (String) res.getResponse().get(ShardParams.SHARD_NAME);\n      }\n      NamedList<Object> nl = res.getResponse();\n\n      String termStatsString = (String) nl.get(TERM_STATS_KEY);\n      if (termStatsString != null) {\n        addToPerShardTermStats(req, shard, termStatsString);\n      }\n      Set<Term> terms = StatsUtil.termsFromEncodedString((String) nl.get(TERMS_KEY));\n      allTerms.addAll(terms);\n      String colStatsString = (String) nl.get(COL_STATS_KEY);\n      Map<String,CollectionStats> colStats = StatsUtil.colStatsMapFromString(colStatsString);\n      if (colStats != null) {\n        addToPerShardColStats(req, shard, colStats);\n      }\n    }\n    if (allTerms.size() > 0) {\n      req.getContext().put(TERMS_KEY, StatsUtil.termsToEncodedString(allTerms));\n    }\n    if (log.isDebugEnabled()) printStats(req);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["df72a23fb74bebe914e3f3972063a884327c0436"],"b4d143a4ed5613dfe05afe5990093198084c693e":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"df72a23fb74bebe914e3f3972063a884327c0436":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4d143a4ed5613dfe05afe5990093198084c693e"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","df72a23fb74bebe914e3f3972063a884327c0436"]},"commit2Childs":{"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["b4d143a4ed5613dfe05afe5990093198084c693e"],"b4d143a4ed5613dfe05afe5990093198084c693e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["df72a23fb74bebe914e3f3972063a884327c0436","b0b597c65628ca9e73913a07e81691f8229bae35"],"df72a23fb74bebe914e3f3972063a884327c0436":["54faedfb0e03479a38f5ee82f2dfaeea536e9404","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}