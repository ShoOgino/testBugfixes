{"path":"src/java/org/apache/lucene/search/Searcher#search(Query,Filter,HitCollector).mjava","commits":[{"id":"bf4e1d12af525a2fb396e59a2d3aa7140cb727a1","date":1001444615,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Searcher#search(Query,Filter,HitCollector).mjava","pathOld":"/dev/null","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   *\n   * <p>Applications should only use this if they need <it>all</it> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, a bitset used to eliminate some documents\n   * @param results to receive hits\n   */\n  public abstract void search(Query query, Filter filter, HitCollector results)\n    throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce2d38fca9678b74e922c3d472944968909f7799","date":1013648326,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Searcher#search(Query,Filter,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/Searcher#search(Query,Filter,HitCollector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, a bitset used to eliminate some documents\n   * @param results to receive hits\n   */\n  public abstract void search(Query query, Filter filter, HitCollector results)\n    throws IOException;\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   *\n   * <p>Applications should only use this if they need <it>all</it> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, a bitset used to eliminate some documents\n   * @param results to receive hits\n   */\n  public abstract void search(Query query, Filter filter, HitCollector results)\n    throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c7454619ea6a0710272c1dd947345cee64489f6","date":1026927484,"type":5,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Searchable#search(Query,Filter,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/Searcher#search(Query,Filter,HitCollector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, a bitset used to eliminate some documents\n   * @param results to receive hits\n   */\n  public abstract void search(Query query, Filter filter, HitCollector results)\n    throws IOException;\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, a bitset used to eliminate some documents\n   * @param results to receive hits\n   */\n  public abstract void search(Query query, Filter filter, HitCollector results)\n    throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ceaa9738cad9616d1831286111af106e13e0e4b","date":1114543820,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Searcher#search(Query,Filter,HitCollector).mjava","pathOld":"/dev/null","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   * <br>HitCollector-based access to remote indexes is discouraged.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, a bitset used to eliminate some documents\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public void search(Query query, Filter filter, HitCollector results)\n    throws IOException {\n    search(createWeight(query), filter, results);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52ce7e961a8217faac8128e3c8fe67819eefdde9","date":1201979043,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Searcher#search(Query,Filter,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/Searcher#search(Query,Filter,HitCollector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   * <br>HitCollector-based access to remote indexes is discouraged.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, used to permit documents to be collected.\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public void search(Query query, Filter filter, HitCollector results)\n    throws IOException {\n    search(createWeight(query), filter, results);\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   * <br>HitCollector-based access to remote indexes is discouraged.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, a bitset used to eliminate some documents\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public void search(Query query, Filter filter, HitCollector results)\n    throws IOException {\n    search(createWeight(query), filter, results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Searcher#search(Query,Filter,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/Searcher#search(Query,Filter,HitCollector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   * <br>HitCollector-based access to remote indexes is discouraged.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query, Filter, int))}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, used to permit documents to be collected.\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public void search(Query query, Filter filter, HitCollector results)\n    throws IOException {\n    search(createWeight(query), filter, results);\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   * <br>HitCollector-based access to remote indexes is discouraged.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, used to permit documents to be collected.\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public void search(Query query, Filter filter, HitCollector results)\n    throws IOException {\n    search(createWeight(query), filter, results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a27a24aac4a53ec0af1f168a3b1ab4a06a042250","date":1211570705,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Searcher#search(Query,Filter,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/Searcher#search(Query,Filter,HitCollector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every matching\n   * document.\n   * <br>HitCollector-based access to remote indexes is discouraged.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query, Filter, int))}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, used to permit documents to be collected.\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public void search(Query query, Filter filter, HitCollector results)\n    throws IOException {\n    search(createWeight(query), filter, results);\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   * <br>HitCollector-based access to remote indexes is discouraged.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query, Filter, int))}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, used to permit documents to be collected.\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public void search(Query query, Filter filter, HitCollector results)\n    throws IOException {\n    search(createWeight(query), filter, results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7404f7917ce1d72ef4d478dea20025ba08bfb9a2","date":1219075110,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Searcher#search(Query,Filter,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/Searcher#search(Query,Filter,HitCollector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every matching\n   * document.\n   * <br>HitCollector-based access to remote indexes is discouraged.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query, Filter, int)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, used to permit documents to be collected.\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public void search(Query query, Filter filter, HitCollector results)\n    throws IOException {\n    search(createWeight(query), filter, results);\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every matching\n   * document.\n   * <br>HitCollector-based access to remote indexes is discouraged.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query, Filter, int))}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, used to permit documents to be collected.\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public void search(Query query, Filter filter, HitCollector results)\n    throws IOException {\n    search(createWeight(query), filter, results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64714133cf5ec732e3bbceee63351bb9af0117dc","date":1239647636,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Searcher#search(Query,Filter,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/Searcher#search(Query,Filter,HitCollector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every matching\n   * document.\n   * <br>HitCollector-based access to remote indexes is discouraged.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query, Filter, int)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, used to permit documents to be collected.\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   * @deprecated use {@link #search(Query, Filter, Collector)} instead.\n   */\n  public void search(Query query, Filter filter, HitCollector results)\n    throws IOException {\n    search(createWeight(query), filter, results);\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every matching\n   * document.\n   * <br>HitCollector-based access to remote indexes is discouraged.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query, Filter, int)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, used to permit documents to be collected.\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public void search(Query query, Filter filter, HitCollector results)\n    throws IOException {\n    search(createWeight(query), filter, results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Searcher#search(Query,Filter,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/Searcher#search(Query,Filter,HitCollector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every matching\n   * document.\n   * <br>HitCollector-based access to remote indexes is discouraged.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query, Filter, int)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, used to permit documents to be collected.\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   * @deprecated use {@link #search(Query, Filter, Collector)} instead.\n   */\n  public void search(Query query, Filter filter, HitCollector results)\n    throws IOException {\n    search(createQueryWeight(query), filter, new HitCollectorWrapper(results));\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every matching\n   * document.\n   * <br>HitCollector-based access to remote indexes is discouraged.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query, Filter, int)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, used to permit documents to be collected.\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   * @deprecated use {@link #search(Query, Filter, Collector)} instead.\n   */\n  public void search(Query query, Filter filter, HitCollector results)\n    throws IOException {\n    search(createWeight(query), filter, results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe941135bdfc28c81e20b4d21422f8726af34925","date":1250040150,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Searcher#search(Query,Filter,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/Searcher#search(Query,Filter,HitCollector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every matching\n   * document.\n   * <br>HitCollector-based access to remote indexes is discouraged.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query, Filter, int)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, used to permit documents to be collected.\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   * @deprecated use {@link #search(Query, Filter, Collector)} instead.\n   */\n  public void search(Query query, Filter filter, HitCollector results)\n    throws IOException {\n    search(createWeight(query), filter, new HitCollectorWrapper(results));\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every matching\n   * document.\n   * <br>HitCollector-based access to remote indexes is discouraged.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query, Filter, int)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, used to permit documents to be collected.\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   * @deprecated use {@link #search(Query, Filter, Collector)} instead.\n   */\n  public void search(Query query, Filter filter, HitCollector results)\n    throws IOException {\n    search(createQueryWeight(query), filter, new HitCollectorWrapper(results));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61cbcf396559d597a914594d7e2830c142ecfd91","date":1255444081,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/Searcher#search(Query,Filter,HitCollector).mjava","sourceNew":null,"sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every matching\n   * document.\n   * <br>HitCollector-based access to remote indexes is discouraged.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query, Filter, int)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, used to permit documents to be collected.\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   * @deprecated use {@link #search(Query, Filter, Collector)} instead.\n   */\n  public void search(Query query, Filter filter, HitCollector results)\n    throws IOException {\n    search(createWeight(query), filter, new HitCollectorWrapper(results));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ceaa9738cad9616d1831286111af106e13e0e4b":["9c7454619ea6a0710272c1dd947345cee64489f6"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["7404f7917ce1d72ef4d478dea20025ba08bfb9a2"],"fe941135bdfc28c81e20b4d21422f8726af34925":["052fac7830290bd38a04cddee1a121ee07656b56"],"bf4e1d12af525a2fb396e59a2d3aa7140cb727a1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a27a24aac4a53ec0af1f168a3b1ab4a06a042250":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"7404f7917ce1d72ef4d478dea20025ba08bfb9a2":["a27a24aac4a53ec0af1f168a3b1ab4a06a042250"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"61cbcf396559d597a914594d7e2830c142ecfd91":["fe941135bdfc28c81e20b4d21422f8726af34925"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["52ce7e961a8217faac8128e3c8fe67819eefdde9"],"52ce7e961a8217faac8128e3c8fe67819eefdde9":["4ceaa9738cad9616d1831286111af106e13e0e4b"],"9c7454619ea6a0710272c1dd947345cee64489f6":["ce2d38fca9678b74e922c3d472944968909f7799"],"ce2d38fca9678b74e922c3d472944968909f7799":["bf4e1d12af525a2fb396e59a2d3aa7140cb727a1"],"052fac7830290bd38a04cddee1a121ee07656b56":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["61cbcf396559d597a914594d7e2830c142ecfd91"]},"commit2Childs":{"4ceaa9738cad9616d1831286111af106e13e0e4b":["52ce7e961a8217faac8128e3c8fe67819eefdde9"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["052fac7830290bd38a04cddee1a121ee07656b56"],"fe941135bdfc28c81e20b4d21422f8726af34925":["61cbcf396559d597a914594d7e2830c142ecfd91"],"bf4e1d12af525a2fb396e59a2d3aa7140cb727a1":["ce2d38fca9678b74e922c3d472944968909f7799"],"a27a24aac4a53ec0af1f168a3b1ab4a06a042250":["7404f7917ce1d72ef4d478dea20025ba08bfb9a2"],"7404f7917ce1d72ef4d478dea20025ba08bfb9a2":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bf4e1d12af525a2fb396e59a2d3aa7140cb727a1"],"61cbcf396559d597a914594d7e2830c142ecfd91":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9c7454619ea6a0710272c1dd947345cee64489f6":["4ceaa9738cad9616d1831286111af106e13e0e4b"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["a27a24aac4a53ec0af1f168a3b1ab4a06a042250"],"52ce7e961a8217faac8128e3c8fe67819eefdde9":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"ce2d38fca9678b74e922c3d472944968909f7799":["9c7454619ea6a0710272c1dd947345cee64489f6"],"052fac7830290bd38a04cddee1a121ee07656b56":["fe941135bdfc28c81e20b4d21422f8726af34925"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}