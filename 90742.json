{"path":"lucene/core/src/test/org/apache/lucene/util/TestWAH8DocIdSet#assertEquals(int,FixedBitSet,WAH8DocIdSet).mjava","commits":[{"id":"794214a4691ccb0a156a9ea0dfd8663ab9f05bb4","date":1373484264,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestWAH8DocIdSet#assertEquals(int,FixedBitSet,WAH8DocIdSet).mjava","pathOld":"/dev/null","sourceNew":"  public void assertEquals(int numBits, FixedBitSet ds1, WAH8DocIdSet ds2) throws IOException {\n    assertEquals(ds1.cardinality(), ds2.cardinality());\n\n    // nextDoc\n    DocIdSetIterator it1 = ds1.iterator();\n    DocIdSetIterator it2 = ds2.iterator();\n    assertEquals(it1.docID(), it2.docID());\n    for (int doc = it1.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = it1.nextDoc()) {\n      assertEquals(doc, it2.nextDoc());\n      assertEquals(it1.docID(), it2.docID());\n    }\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, it2.nextDoc());\n    assertEquals(it1.docID(), it2.docID());\n\n    // nextDoc / advance\n    it1 = ds1.iterator();\n    it2 = ds2.iterator();\n    for (int doc = -1; doc != DocIdSetIterator.NO_MORE_DOCS;) {\n      if (random().nextBoolean()) {\n        doc = it1.nextDoc();\n        assertEquals(doc, it2.nextDoc());\n        assertEquals(it1.docID(), it2.docID());\n      } else {\n        final int target = doc + 1 + random().nextInt(random().nextBoolean() ? 64 : numBits / 64);\n        doc = it1.advance(target);\n        assertEquals(doc, it2.advance(target));\n        assertEquals(it1.docID(), it2.docID());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7581da3051efe8071ae92ac7eca27a270bc4611e","date":1373613227,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestWAH8DocIdSet#assertEquals(int,FixedBitSet,WAH8DocIdSet).mjava","sourceNew":null,"sourceOld":"  public void assertEquals(int numBits, FixedBitSet ds1, WAH8DocIdSet ds2) throws IOException {\n    assertEquals(ds1.cardinality(), ds2.cardinality());\n\n    // nextDoc\n    DocIdSetIterator it1 = ds1.iterator();\n    DocIdSetIterator it2 = ds2.iterator();\n    assertEquals(it1.docID(), it2.docID());\n    for (int doc = it1.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = it1.nextDoc()) {\n      assertEquals(doc, it2.nextDoc());\n      assertEquals(it1.docID(), it2.docID());\n    }\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, it2.nextDoc());\n    assertEquals(it1.docID(), it2.docID());\n\n    // nextDoc / advance\n    it1 = ds1.iterator();\n    it2 = ds2.iterator();\n    for (int doc = -1; doc != DocIdSetIterator.NO_MORE_DOCS;) {\n      if (random().nextBoolean()) {\n        doc = it1.nextDoc();\n        assertEquals(doc, it2.nextDoc());\n        assertEquals(it1.docID(), it2.docID());\n      } else {\n        final int target = doc + 1 + random().nextInt(random().nextBoolean() ? 64 : numBits / 64);\n        doc = it1.advance(target);\n        assertEquals(doc, it2.advance(target));\n        assertEquals(it1.docID(), it2.docID());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"794214a4691ccb0a156a9ea0dfd8663ab9f05bb4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7581da3051efe8071ae92ac7eca27a270bc4611e":["794214a4691ccb0a156a9ea0dfd8663ab9f05bb4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7581da3051efe8071ae92ac7eca27a270bc4611e"]},"commit2Childs":{"794214a4691ccb0a156a9ea0dfd8663ab9f05bb4":["7581da3051efe8071ae92ac7eca27a270bc4611e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["794214a4691ccb0a156a9ea0dfd8663ab9f05bb4"],"7581da3051efe8071ae92ac7eca27a270bc4611e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}