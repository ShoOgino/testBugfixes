{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/TestTermFreqIterator#testRaw().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/TestTermFreqIterator#testRaw().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/TestTermFreqIterator#testRaw().mjava","sourceNew":"  public void testRaw() throws Exception {\n    int num = atLeast(10000);\n    \n    Comparator<BytesRef> comparator = BytesRef.getUTF8SortedAsUnicodeComparator();\n    BytesRefHash sorted = new BytesRefHash();\n    TermFreq[] unsorted = new TermFreq[num];\n    byte[] buffer = new byte[0];\n    ByteArrayDataOutput output = new ByteArrayDataOutput(buffer);\n\n    final Random random = new Random(random().nextLong());\n    for (int i = 0; i < num; i++) {\n      BytesRef spare;\n      long weight;\n      do {\n        spare = new BytesRef(_TestUtil.randomUnicodeString(random));\n        if (spare.length + 8 >= buffer.length) {\n          buffer = ArrayUtil.grow(buffer, spare.length + 8);\n        }\n        output.reset(buffer);\n        output.writeBytes(spare.bytes, spare.offset, spare.length);\n        weight = random.nextLong();\n        output.writeLong(weight);\n        \n      } while (sorted.add(new BytesRef(buffer, 0, output.getPosition())) < 0);\n      unsorted[i] = new TermFreq(spare, weight);\n    }\n    \n    // test the sorted iterator wrapper\n    TermFreqIterator wrapper = new SortedTermFreqIteratorWrapper(new TermFreqArrayIterator(unsorted), comparator, true);\n    int[] sort = sorted.sort(comparator);\n    int size = sorted.size();\n    BytesRef spare = new BytesRef();\n    for (int i = 0; i < size; i++) {\n      sorted.get(sort[i], spare);\n      spare.length -= 8; // sub the long value\n      assertEquals(spare, wrapper.next());\n      spare.offset = spare.offset + spare.length;\n      spare.length = 8;\n      assertEquals(asLong(spare), wrapper.weight());\n    }\n    assertNull(wrapper.next());\n  }\n\n","sourceOld":"  public void testRaw() throws Exception {\n    int num = atLeast(10000);\n    \n    Comparator<BytesRef> comparator = BytesRef.getUTF8SortedAsUnicodeComparator();\n    BytesRefHash sorted = new BytesRefHash();\n    TermFreq[] unsorted = new TermFreq[num];\n    byte[] buffer = new byte[0];\n    ByteArrayDataOutput output = new ByteArrayDataOutput(buffer);\n\n    final Random random = new Random(random().nextLong());\n    for (int i = 0; i < num; i++) {\n      BytesRef spare;\n      long weight;\n      do {\n        spare = new BytesRef(_TestUtil.randomUnicodeString(random));\n        if (spare.length + 8 >= buffer.length) {\n          buffer = ArrayUtil.grow(buffer, spare.length + 8);\n        }\n        output.reset(buffer);\n        output.writeBytes(spare.bytes, spare.offset, spare.length);\n        weight = random.nextLong();\n        output.writeLong(weight);\n        \n      } while (sorted.add(new BytesRef(buffer, 0, output.getPosition())) < 0);\n      unsorted[i] = new TermFreq(spare, weight);\n    }\n    \n    // test the sorted iterator wrapper\n    TermFreqIterator wrapper = new SortedTermFreqIteratorWrapper(new TermFreqArrayIterator(unsorted), comparator, true);\n    int[] sort = sorted.sort(comparator);\n    int size = sorted.size();\n    BytesRef spare = new BytesRef();\n    for (int i = 0; i < size; i++) {\n      sorted.get(sort[i], spare);\n      spare.length -= 8; // sub the long value\n      assertEquals(spare, wrapper.next());\n      spare.offset = spare.offset + spare.length;\n      spare.length = 8;\n      assertEquals(asLong(spare), wrapper.weight());\n    }\n    assertNull(wrapper.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c784b25e28b81ddedff2b97738c8286773f00f15","date":1352150231,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/TestTermFreqIterator#testRaw().mjava","sourceNew":null,"sourceOld":"  public void testRaw() throws Exception {\n    int num = atLeast(10000);\n    \n    Comparator<BytesRef> comparator = BytesRef.getUTF8SortedAsUnicodeComparator();\n    BytesRefHash sorted = new BytesRefHash();\n    TermFreq[] unsorted = new TermFreq[num];\n    byte[] buffer = new byte[0];\n    ByteArrayDataOutput output = new ByteArrayDataOutput(buffer);\n\n    final Random random = new Random(random().nextLong());\n    for (int i = 0; i < num; i++) {\n      BytesRef spare;\n      long weight;\n      do {\n        spare = new BytesRef(_TestUtil.randomUnicodeString(random));\n        if (spare.length + 8 >= buffer.length) {\n          buffer = ArrayUtil.grow(buffer, spare.length + 8);\n        }\n        output.reset(buffer);\n        output.writeBytes(spare.bytes, spare.offset, spare.length);\n        weight = random.nextLong();\n        output.writeLong(weight);\n        \n      } while (sorted.add(new BytesRef(buffer, 0, output.getPosition())) < 0);\n      unsorted[i] = new TermFreq(spare, weight);\n    }\n    \n    // test the sorted iterator wrapper\n    TermFreqIterator wrapper = new SortedTermFreqIteratorWrapper(new TermFreqArrayIterator(unsorted), comparator, true);\n    int[] sort = sorted.sort(comparator);\n    int size = sorted.size();\n    BytesRef spare = new BytesRef();\n    for (int i = 0; i < size; i++) {\n      sorted.get(sort[i], spare);\n      spare.length -= 8; // sub the long value\n      assertEquals(spare, wrapper.next());\n      spare.offset = spare.offset + spare.length;\n      spare.length = 8;\n      assertEquals(asLong(spare), wrapper.weight());\n    }\n    assertNull(wrapper.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c784b25e28b81ddedff2b97738c8286773f00f15"],"c784b25e28b81ddedff2b97738c8286773f00f15":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["c784b25e28b81ddedff2b97738c8286773f00f15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"c784b25e28b81ddedff2b97738c8286773f00f15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}