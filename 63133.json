{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/ElisionFilter#incrementToken().mjava","commits":[{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/ElisionFilter#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the next input Token with term() without elisioned start\n   */\n  public final boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] termBuffer = termAtt.termBuffer();\n      int termLength = termAtt.termLength();\n\n      int minPoz = Integer.MAX_VALUE;\n      for (int i = 0; i < apostrophes.length; i++) {\n        char apos = apostrophes[i];\n        // The equivalent of String.indexOf(ch)\n        for (int poz = 0; poz < termLength ; poz++) {\n          if (termBuffer[poz] == apos) {\n            minPoz = Math.min(poz, minPoz);\n            break;\n          }\n        }\n      }\n\n      // An apostrophe has been found. If the prefix is an article strip it off.\n      if (minPoz != Integer.MAX_VALUE\n          && articles.contains(new String(termAtt.termBuffer(), 0, minPoz).toLowerCase())) {\n        termAtt.setTermBuffer(termAtt.termBuffer(), minPoz + 1, termAtt.termLength() - (minPoz + 1));\n      }\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45b06c3ff8a4d9d3d751dd311e51c59303c2719c","date":1250600126,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/ElisionFilter#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/ElisionFilter#incrementToken().mjava","sourceNew":"  /**\n   * Increments the {@link TokenStream} with a {@link TermAttribute} without elisioned start\n   */\n  public final boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] termBuffer = termAtt.termBuffer();\n      int termLength = termAtt.termLength();\n\n      int minPoz = Integer.MAX_VALUE;\n      for (int i = 0; i < apostrophes.length; i++) {\n        char apos = apostrophes[i];\n        // The equivalent of String.indexOf(ch)\n        for (int poz = 0; poz < termLength ; poz++) {\n          if (termBuffer[poz] == apos) {\n            minPoz = Math.min(poz, minPoz);\n            break;\n          }\n        }\n      }\n\n      // An apostrophe has been found. If the prefix is an article strip it off.\n      if (minPoz != Integer.MAX_VALUE\n          && articles.contains(new String(termAtt.termBuffer(), 0, minPoz).toLowerCase())) {\n        termAtt.setTermBuffer(termAtt.termBuffer(), minPoz + 1, termAtt.termLength() - (minPoz + 1));\n      }\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the next input Token with term() without elisioned start\n   */\n  public final boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] termBuffer = termAtt.termBuffer();\n      int termLength = termAtt.termLength();\n\n      int minPoz = Integer.MAX_VALUE;\n      for (int i = 0; i < apostrophes.length; i++) {\n        char apos = apostrophes[i];\n        // The equivalent of String.indexOf(ch)\n        for (int poz = 0; poz < termLength ; poz++) {\n          if (termBuffer[poz] == apos) {\n            minPoz = Math.min(poz, minPoz);\n            break;\n          }\n        }\n      }\n\n      // An apostrophe has been found. If the prefix is an article strip it off.\n      if (minPoz != Integer.MAX_VALUE\n          && articles.contains(new String(termAtt.termBuffer(), 0, minPoz).toLowerCase())) {\n        termAtt.setTermBuffer(termAtt.termBuffer(), minPoz + 1, termAtt.termLength() - (minPoz + 1));\n      }\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"40523ae1f45a88d0c91e97fa61bc86ffdf1ee9ba","date":1256901910,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/ElisionFilter#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/ElisionFilter#incrementToken().mjava","sourceNew":"  /**\n   * Increments the {@link TokenStream} with a {@link TermAttribute} without elisioned start\n   */\n  public final boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] termBuffer = termAtt.termBuffer();\n      int termLength = termAtt.termLength();\n\n      int minPoz = Integer.MAX_VALUE;\n      for (int i = 0; i < apostrophes.length; i++) {\n        char apos = apostrophes[i];\n        // The equivalent of String.indexOf(ch)\n        for (int poz = 0; poz < termLength ; poz++) {\n          if (termBuffer[poz] == apos) {\n            minPoz = Math.min(poz, minPoz);\n            break;\n          }\n        }\n      }\n\n      // An apostrophe has been found. If the prefix is an article strip it off.\n      if (minPoz != Integer.MAX_VALUE\n          && articles.contains(termAtt.termBuffer(), 0, minPoz)) {\n        termAtt.setTermBuffer(termAtt.termBuffer(), minPoz + 1, termAtt.termLength() - (minPoz + 1));\n      }\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * Increments the {@link TokenStream} with a {@link TermAttribute} without elisioned start\n   */\n  public final boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] termBuffer = termAtt.termBuffer();\n      int termLength = termAtt.termLength();\n\n      int minPoz = Integer.MAX_VALUE;\n      for (int i = 0; i < apostrophes.length; i++) {\n        char apos = apostrophes[i];\n        // The equivalent of String.indexOf(ch)\n        for (int poz = 0; poz < termLength ; poz++) {\n          if (termBuffer[poz] == apos) {\n            minPoz = Math.min(poz, minPoz);\n            break;\n          }\n        }\n      }\n\n      // An apostrophe has been found. If the prefix is an article strip it off.\n      if (minPoz != Integer.MAX_VALUE\n          && articles.contains(new String(termAtt.termBuffer(), 0, minPoz).toLowerCase())) {\n        termAtt.setTermBuffer(termAtt.termBuffer(), minPoz + 1, termAtt.termLength() - (minPoz + 1));\n      }\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/ElisionFilter#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/ElisionFilter#incrementToken().mjava","sourceNew":"  /**\n   * Increments the {@link TokenStream} with a {@link TermAttribute} without elisioned start\n   */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] termBuffer = termAtt.termBuffer();\n      int termLength = termAtt.termLength();\n\n      int minPoz = Integer.MAX_VALUE;\n      for (int i = 0; i < apostrophes.length; i++) {\n        char apos = apostrophes[i];\n        // The equivalent of String.indexOf(ch)\n        for (int poz = 0; poz < termLength ; poz++) {\n          if (termBuffer[poz] == apos) {\n            minPoz = Math.min(poz, minPoz);\n            break;\n          }\n        }\n      }\n\n      // An apostrophe has been found. If the prefix is an article strip it off.\n      if (minPoz != Integer.MAX_VALUE\n          && articles.contains(termAtt.termBuffer(), 0, minPoz)) {\n        termAtt.setTermBuffer(termAtt.termBuffer(), minPoz + 1, termAtt.termLength() - (minPoz + 1));\n      }\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * Increments the {@link TokenStream} with a {@link TermAttribute} without elisioned start\n   */\n  public final boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] termBuffer = termAtt.termBuffer();\n      int termLength = termAtt.termLength();\n\n      int minPoz = Integer.MAX_VALUE;\n      for (int i = 0; i < apostrophes.length; i++) {\n        char apos = apostrophes[i];\n        // The equivalent of String.indexOf(ch)\n        for (int poz = 0; poz < termLength ; poz++) {\n          if (termBuffer[poz] == apos) {\n            minPoz = Math.min(poz, minPoz);\n            break;\n          }\n        }\n      }\n\n      // An apostrophe has been found. If the prefix is an article strip it off.\n      if (minPoz != Integer.MAX_VALUE\n          && articles.contains(termAtt.termBuffer(), 0, minPoz)) {\n        termAtt.setTermBuffer(termAtt.termBuffer(), minPoz + 1, termAtt.termLength() - (minPoz + 1));\n      }\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/ElisionFilter#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/ElisionFilter#incrementToken().mjava","sourceNew":"  /**\n   * Increments the {@link TokenStream} with a {@link TermAttribute} without elisioned start\n   */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] termBuffer = termAtt.termBuffer();\n      int termLength = termAtt.termLength();\n\n      int minPoz = Integer.MAX_VALUE;\n      for (int i = 0; i < apostrophes.length; i++) {\n        char apos = apostrophes[i];\n        // The equivalent of String.indexOf(ch)\n        for (int poz = 0; poz < termLength ; poz++) {\n          if (termBuffer[poz] == apos) {\n            minPoz = Math.min(poz, minPoz);\n            break;\n          }\n        }\n      }\n\n      // An apostrophe has been found. If the prefix is an article strip it off.\n      if (minPoz != Integer.MAX_VALUE\n          && articles.contains(termAtt.termBuffer(), 0, minPoz)) {\n        termAtt.setTermBuffer(termAtt.termBuffer(), minPoz + 1, termAtt.termLength() - (minPoz + 1));\n      }\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * Increments the {@link TokenStream} with a {@link TermAttribute} without elisioned start\n   */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] termBuffer = termAtt.termBuffer();\n      int termLength = termAtt.termLength();\n\n      int minPoz = Integer.MAX_VALUE;\n      for (int i = 0; i < apostrophes.length; i++) {\n        char apos = apostrophes[i];\n        // The equivalent of String.indexOf(ch)\n        for (int poz = 0; poz < termLength ; poz++) {\n          if (termBuffer[poz] == apos) {\n            minPoz = Math.min(poz, minPoz);\n            break;\n          }\n        }\n      }\n\n      // An apostrophe has been found. If the prefix is an article strip it off.\n      if (minPoz != Integer.MAX_VALUE\n          && articles.contains(termAtt.termBuffer(), 0, minPoz)) {\n        termAtt.setTermBuffer(termAtt.termBuffer(), minPoz + 1, termAtt.termLength() - (minPoz + 1));\n      }\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"40523ae1f45a88d0c91e97fa61bc86ffdf1ee9ba":["45b06c3ff8a4d9d3d751dd311e51c59303c2719c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b5756469957918cac40a831acec9cf01c8c2bb3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["40523ae1f45a88d0c91e97fa61bc86ffdf1ee9ba"],"45b06c3ff8a4d9d3d751dd311e51c59303c2719c":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"]},"commit2Childs":{"40523ae1f45a88d0c91e97fa61bc86ffdf1ee9ba":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["45b06c3ff8a4d9d3d751dd311e51c59303c2719c"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"45b06c3ff8a4d9d3d751dd311e51c59303c2719c":["40523ae1f45a88d0c91e97fa61bc86ffdf1ee9ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}