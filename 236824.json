{"path":"lucene/core/src/java/org/apache/lucene/codecs/pfor/PForUtil#getNumBits(int[],int).mjava","commits":[{"id":"824ab25acd22f2eca198755bafab3cb8b7878493","date":1341276186,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pfor/PForUtil#getNumBits(int[],int).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: shall we use 32 NumBits directly if it exceeds 28 bits?\n  static int getNumBits(final int[] data, int size) {\n    int optBits=1;\n    int optSize=estimateCompressedSize(data,size,1);\n    for (int i=2; i<=32; ++i) {\n      int curSize=estimateCompressedSize(data,size,i);\n      if (curSize<optSize) {\n        optSize=curSize;\n        optBits=i;\n      }\n    }\n    return optBits;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5373bc7574123da55ae25e216b6d768ccb1dcd91","date":1342013351,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pfor/PForUtil#getNumBits(int[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pfor/PForUtil#getNumBits(int[],int).mjava","sourceNew":"  /**\n   * Estimate best number of frame bits according to minimum compressed size.\n   * It will run 32 times.\n   */\n  static int getNumBits(final int[] data, int size) {\n    int optBits=1;\n    int optSize=estimateCompressedSize(data,size,1);\n    for (int i=2; i<=32; ++i) {\n      int curSize=estimateCompressedSize(data,size,i);\n      if (curSize<optSize) {\n        optSize=curSize;\n        optBits=i;\n      }\n    }\n    return optBits;\n  }\n\n","sourceOld":"  // TODO: shall we use 32 NumBits directly if it exceeds 28 bits?\n  static int getNumBits(final int[] data, int size) {\n    int optBits=1;\n    int optSize=estimateCompressedSize(data,size,1);\n    for (int i=2; i<=32; ++i) {\n      int curSize=estimateCompressedSize(data,size,i);\n      if (curSize<optSize) {\n        optSize=curSize;\n        optBits=i;\n      }\n    }\n    return optBits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48d40647dc87c7b55ffe4d9dca73f63a3cebc58b","date":1342134079,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pfor/PForUtil#getNumBits(int[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pfor/PForUtil#getNumBits(int[],int).mjava","sourceNew":"  /**\n   * Estimate best number of frame bits according to minimum compressed size.\n   * It will run 32 times.\n   */\n  static int getNumBits(final int[] data, int size) {\n    if (isAllZero(data))\n      return 0;\n    int optBits=1;\n    int optSize=estimateCompressedSize(data,size,optBits);\n    for (int i=2; i<=32; ++i) {\n      int curSize=estimateCompressedSize(data,size,i);\n      if (curSize<optSize) {\n        optSize=curSize;\n        optBits=i;\n      }\n    }\n    return optBits;\n  }\n\n","sourceOld":"  /**\n   * Estimate best number of frame bits according to minimum compressed size.\n   * It will run 32 times.\n   */\n  static int getNumBits(final int[] data, int size) {\n    int optBits=1;\n    int optSize=estimateCompressedSize(data,size,1);\n    for (int i=2; i<=32; ++i) {\n      int curSize=estimateCompressedSize(data,size,i);\n      if (curSize<optSize) {\n        optSize=curSize;\n        optBits=i;\n      }\n    }\n    return optBits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a91a0a325d8dbf4d5759c5b368c5eae7ec8483b5","date":1342443326,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pfor/PForUtil#getNumBits(int[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pfor/PForUtil#getNumBits(int[],int).mjava","sourceNew":"  /**\n   * Estimate best number of frame bits according to minimum compressed size.\n   * It will run 32 times.\n   */\n  static int getNumBits(final int[] data) {\n    if (isAllEqual(data)) {\n      return 0;\n    }\n    int optBits=1;\n    int optSize=estimateCompressedSize(data,optBits);\n    for (int i=2; i<=32; ++i) {\n      int curSize=estimateCompressedSize(data,i);\n      if (curSize<optSize) {\n        optSize=curSize;\n        optBits=i;\n      }\n    }\n    return optBits;\n  }\n\n","sourceOld":"  /**\n   * Estimate best number of frame bits according to minimum compressed size.\n   * It will run 32 times.\n   */\n  static int getNumBits(final int[] data, int size) {\n    if (isAllZero(data))\n      return 0;\n    int optBits=1;\n    int optSize=estimateCompressedSize(data,size,optBits);\n    for (int i=2; i<=32; ++i) {\n      int curSize=estimateCompressedSize(data,size,i);\n      if (curSize<optSize) {\n        optSize=curSize;\n        optBits=i;\n      }\n    }\n    return optBits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"824ab25acd22f2eca198755bafab3cb8b7878493":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5373bc7574123da55ae25e216b6d768ccb1dcd91":["824ab25acd22f2eca198755bafab3cb8b7878493"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a91a0a325d8dbf4d5759c5b368c5eae7ec8483b5":["48d40647dc87c7b55ffe4d9dca73f63a3cebc58b"],"48d40647dc87c7b55ffe4d9dca73f63a3cebc58b":["5373bc7574123da55ae25e216b6d768ccb1dcd91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"824ab25acd22f2eca198755bafab3cb8b7878493":["5373bc7574123da55ae25e216b6d768ccb1dcd91"],"5373bc7574123da55ae25e216b6d768ccb1dcd91":["48d40647dc87c7b55ffe4d9dca73f63a3cebc58b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["824ab25acd22f2eca198755bafab3cb8b7878493","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a91a0a325d8dbf4d5759c5b368c5eae7ec8483b5":[],"48d40647dc87c7b55ffe4d9dca73f63a3cebc58b":["a91a0a325d8dbf4d5759c5b368c5eae7ec8483b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a91a0a325d8dbf4d5759c5b368c5eae7ec8483b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}