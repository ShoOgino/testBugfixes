{"path":"lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf#doTest(int,int,int,float).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf#doTest(int,int,int,float).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermdocPerf#doTest(int,int,int,float).mjava","sourceNew":"  public int doTest(int iter, int ndocs, int maxTF, float percentDocs) throws IOException {\n    Directory dir = newDirectory();\n\n    long start = System.currentTimeMillis();\n    addDocs(random, dir, ndocs, \"foo\", \"val\", maxTF, percentDocs);\n    long end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for creation of \" + ndocs + \" docs = \" + (end-start));\n\n    IndexReader reader = IndexReader.open(dir);\n\n    TermsEnum tenum = MultiFields.getTerms(reader, \"foo\").iterator(null);\n\n    start = System.currentTimeMillis();\n\n    int ret=0;\n    DocsEnum tdocs = null;\n    for (int i=0; i<iter; i++) {\n      tenum.seekCeil(new BytesRef(\"val\"));\n      tdocs = _TestUtil.docs(random, tenum, MultiFields.getLiveDocs(reader), tdocs, false);\n      while (tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        ret += tdocs.docID();\n      }\n    }\n\n    end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for \" + iter + \" TermDocs iteration: \" + (end-start));\n\n    return ret;\n  }\n\n","sourceOld":"  public int doTest(int iter, int ndocs, int maxTF, float percentDocs) throws IOException {\n    Directory dir = newDirectory();\n\n    long start = System.currentTimeMillis();\n    addDocs(random, dir, ndocs, \"foo\", \"val\", maxTF, percentDocs);\n    long end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for creation of \" + ndocs + \" docs = \" + (end-start));\n\n    IndexReader reader = IndexReader.open(dir);\n\n    TermsEnum tenum = MultiFields.getTerms(reader, \"foo\").iterator(null);\n\n    start = System.currentTimeMillis();\n\n    int ret=0;\n    DocsEnum tdocs = null;\n    for (int i=0; i<iter; i++) {\n      tenum.seekCeil(new BytesRef(\"val\"));\n      tdocs = _TestUtil.docs(random, tenum, MultiFields.getLiveDocs(reader), tdocs, false);\n      while (tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        ret += tdocs.docID();\n      }\n    }\n\n    end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for \" + iter + \" TermDocs iteration: \" + (end-start));\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf#doTest(int,int,int,float).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf#doTest(int,int,int,float).mjava","sourceNew":"  public int doTest(int iter, int ndocs, int maxTF, float percentDocs) throws IOException {\n    Directory dir = newDirectory();\n\n    long start = System.currentTimeMillis();\n    addDocs(random, dir, ndocs, \"foo\", \"val\", maxTF, percentDocs);\n    long end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for creation of \" + ndocs + \" docs = \" + (end-start));\n\n    IndexReader reader = IndexReader.open(dir);\n\n    TermsEnum tenum = MultiFields.getTerms(reader, \"foo\").iterator(null);\n\n    start = System.currentTimeMillis();\n\n    int ret=0;\n    DocsEnum tdocs = null;\n    for (int i=0; i<iter; i++) {\n      tenum.seekCeil(new BytesRef(\"val\"));\n      tdocs = _TestUtil.docs(random, tenum, MultiFields.getLiveDocs(reader), tdocs, false);\n      while (tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        ret += tdocs.docID();\n      }\n    }\n\n    end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for \" + iter + \" TermDocs iteration: \" + (end-start));\n\n    return ret;\n  }\n\n","sourceOld":"  public int doTest(int iter, int ndocs, int maxTF, float percentDocs) throws IOException {\n    Directory dir = newDirectory();\n\n    long start = System.currentTimeMillis();\n    addDocs(random, dir, ndocs, \"foo\", \"val\", maxTF, percentDocs);\n    long end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for creation of \" + ndocs + \" docs = \" + (end-start));\n\n    IndexReader reader = IndexReader.open(dir);\n\n    TermsEnum tenum = MultiFields.getTerms(reader, \"foo\").iterator(null);\n\n    start = System.currentTimeMillis();\n\n    int ret=0;\n    DocsEnum tdocs = null;\n    for (int i=0; i<iter; i++) {\n      tenum.seekCeil(new BytesRef(\"val\"));\n      tdocs = _TestUtil.docs(random, tenum, MultiFields.getLiveDocs(reader), tdocs, false);\n      while (tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        ret += tdocs.docID();\n      }\n    }\n\n    end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for \" + iter + \" TermDocs iteration: \" + (end-start));\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf#doTest(int,int,int,float).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf#doTest(int,int,int,float).mjava","sourceNew":"  public int doTest(int iter, int ndocs, int maxTF, float percentDocs) throws IOException {\n    Directory dir = newDirectory();\n\n    long start = System.currentTimeMillis();\n    addDocs(random, dir, ndocs, \"foo\", \"val\", maxTF, percentDocs);\n    long end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for creation of \" + ndocs + \" docs = \" + (end-start));\n\n    IndexReader reader = IndexReader.open(dir);\n\n    TermsEnum tenum = MultiFields.getTerms(reader, \"foo\").iterator(null);\n\n    start = System.currentTimeMillis();\n\n    int ret=0;\n    DocsEnum tdocs = null;\n    for (int i=0; i<iter; i++) {\n      tenum.seekCeil(new BytesRef(\"val\"));\n      tdocs = _TestUtil.docs(random, tenum, MultiFields.getLiveDocs(reader), tdocs, false);\n      while (tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        ret += tdocs.docID();\n      }\n    }\n\n    end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for \" + iter + \" TermDocs iteration: \" + (end-start));\n\n    return ret;\n  }\n\n","sourceOld":"  public int doTest(int iter, int ndocs, int maxTF, float percentDocs) throws IOException {\n    Directory dir = newDirectory();\n\n    long start = System.currentTimeMillis();\n    addDocs(random, dir, ndocs, \"foo\", \"val\", maxTF, percentDocs);\n    long end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for creation of \" + ndocs + \" docs = \" + (end-start));\n\n    IndexReader reader = IndexReader.open(dir);\n\n    TermsEnum tenum = MultiFields.getTerms(reader, \"foo\").iterator(null);\n\n    start = System.currentTimeMillis();\n\n    int ret=0;\n    DocsEnum tdocs = null;\n    for (int i=0; i<iter; i++) {\n      tenum.seekCeil(new BytesRef(\"val\"));\n      tdocs = _TestUtil.docs(random, tenum, MultiFields.getLiveDocs(reader), tdocs, false);\n      while (tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        ret += tdocs.docID();\n      }\n    }\n\n    end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for \" + iter + \" TermDocs iteration: \" + (end-start));\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf#doTest(int,int,int,float).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf#doTest(int,int,int,float).mjava","sourceNew":"  public int doTest(int iter, int ndocs, int maxTF, float percentDocs) throws IOException {\n    Directory dir = newDirectory();\n\n    long start = System.currentTimeMillis();\n    addDocs(random(), dir, ndocs, \"foo\", \"val\", maxTF, percentDocs);\n    long end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for creation of \" + ndocs + \" docs = \" + (end-start));\n\n    IndexReader reader = IndexReader.open(dir);\n\n    TermsEnum tenum = MultiFields.getTerms(reader, \"foo\").iterator(null);\n\n    start = System.currentTimeMillis();\n\n    int ret=0;\n    DocsEnum tdocs = null;\n    final Random random = new Random(random().nextLong());\n    for (int i=0; i<iter; i++) {\n      tenum.seekCeil(new BytesRef(\"val\"));\n      tdocs = _TestUtil.docs(random, tenum, MultiFields.getLiveDocs(reader), tdocs, false);\n      while (tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        ret += tdocs.docID();\n      }\n    }\n\n    end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for \" + iter + \" TermDocs iteration: \" + (end-start));\n\n    return ret;\n  }\n\n","sourceOld":"  public int doTest(int iter, int ndocs, int maxTF, float percentDocs) throws IOException {\n    Directory dir = newDirectory();\n\n    long start = System.currentTimeMillis();\n    addDocs(random, dir, ndocs, \"foo\", \"val\", maxTF, percentDocs);\n    long end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for creation of \" + ndocs + \" docs = \" + (end-start));\n\n    IndexReader reader = IndexReader.open(dir);\n\n    TermsEnum tenum = MultiFields.getTerms(reader, \"foo\").iterator(null);\n\n    start = System.currentTimeMillis();\n\n    int ret=0;\n    DocsEnum tdocs = null;\n    for (int i=0; i<iter; i++) {\n      tenum.seekCeil(new BytesRef(\"val\"));\n      tdocs = _TestUtil.docs(random, tenum, MultiFields.getLiveDocs(reader), tdocs, false);\n      while (tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        ret += tdocs.docID();\n      }\n    }\n\n    end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for \" + iter + \" TermDocs iteration: \" + (end-start));\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf#doTest(int,int,int,float).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf#doTest(int,int,int,float).mjava","sourceNew":"  public int doTest(int iter, int ndocs, int maxTF, float percentDocs) throws IOException {\n    Directory dir = newDirectory();\n\n    long start = System.currentTimeMillis();\n    addDocs(random(), dir, ndocs, \"foo\", \"val\", maxTF, percentDocs);\n    long end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for creation of \" + ndocs + \" docs = \" + (end-start));\n\n    IndexReader reader = DirectoryReader.open(dir);\n\n    TermsEnum tenum = MultiFields.getTerms(reader, \"foo\").iterator(null);\n\n    start = System.currentTimeMillis();\n\n    int ret=0;\n    DocsEnum tdocs = null;\n    final Random random = new Random(random().nextLong());\n    for (int i=0; i<iter; i++) {\n      tenum.seekCeil(new BytesRef(\"val\"));\n      tdocs = _TestUtil.docs(random, tenum, MultiFields.getLiveDocs(reader), tdocs, false);\n      while (tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        ret += tdocs.docID();\n      }\n    }\n\n    end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for \" + iter + \" TermDocs iteration: \" + (end-start));\n\n    return ret;\n  }\n\n","sourceOld":"  public int doTest(int iter, int ndocs, int maxTF, float percentDocs) throws IOException {\n    Directory dir = newDirectory();\n\n    long start = System.currentTimeMillis();\n    addDocs(random(), dir, ndocs, \"foo\", \"val\", maxTF, percentDocs);\n    long end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for creation of \" + ndocs + \" docs = \" + (end-start));\n\n    IndexReader reader = IndexReader.open(dir);\n\n    TermsEnum tenum = MultiFields.getTerms(reader, \"foo\").iterator(null);\n\n    start = System.currentTimeMillis();\n\n    int ret=0;\n    DocsEnum tdocs = null;\n    final Random random = new Random(random().nextLong());\n    for (int i=0; i<iter; i++) {\n      tenum.seekCeil(new BytesRef(\"val\"));\n      tdocs = _TestUtil.docs(random, tenum, MultiFields.getLiveDocs(reader), tdocs, false);\n      while (tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        ret += tdocs.docID();\n      }\n    }\n\n    end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for \" + iter + \" TermDocs iteration: \" + (end-start));\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"02331260bb246364779cb6f04919ca47900d01bb","date":1343749884,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf#doTest(int,int,int,float).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf#doTest(int,int,int,float).mjava","sourceNew":"  public int doTest(int iter, int ndocs, int maxTF, float percentDocs) throws IOException {\n    Directory dir = newDirectory();\n\n    long start = System.currentTimeMillis();\n    addDocs(random(), dir, ndocs, \"foo\", \"val\", maxTF, percentDocs);\n    long end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for creation of \" + ndocs + \" docs = \" + (end-start));\n\n    IndexReader reader = DirectoryReader.open(dir);\n\n    TermsEnum tenum = MultiFields.getTerms(reader, \"foo\").iterator(null);\n\n    start = System.currentTimeMillis();\n\n    int ret=0;\n    DocsEnum tdocs = null;\n    final Random random = new Random(random().nextLong());\n    for (int i=0; i<iter; i++) {\n      tenum.seekCeil(new BytesRef(\"val\"));\n      tdocs = _TestUtil.docs(random, tenum, MultiFields.getLiveDocs(reader), tdocs, 0);\n      while (tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        ret += tdocs.docID();\n      }\n    }\n\n    end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for \" + iter + \" TermDocs iteration: \" + (end-start));\n\n    return ret;\n  }\n\n","sourceOld":"  public int doTest(int iter, int ndocs, int maxTF, float percentDocs) throws IOException {\n    Directory dir = newDirectory();\n\n    long start = System.currentTimeMillis();\n    addDocs(random(), dir, ndocs, \"foo\", \"val\", maxTF, percentDocs);\n    long end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for creation of \" + ndocs + \" docs = \" + (end-start));\n\n    IndexReader reader = DirectoryReader.open(dir);\n\n    TermsEnum tenum = MultiFields.getTerms(reader, \"foo\").iterator(null);\n\n    start = System.currentTimeMillis();\n\n    int ret=0;\n    DocsEnum tdocs = null;\n    final Random random = new Random(random().nextLong());\n    for (int i=0; i<iter; i++) {\n      tenum.seekCeil(new BytesRef(\"val\"));\n      tdocs = _TestUtil.docs(random, tenum, MultiFields.getLiveDocs(reader), tdocs, false);\n      while (tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        ret += tdocs.docID();\n      }\n    }\n\n    end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for \" + iter + \" TermDocs iteration: \" + (end-start));\n\n    return ret;\n  }\n\n","bugFix":["872cff1d3a554e0cd64014cd97f88d3002b0f491"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf#doTest(int,int,int,float).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf#doTest(int,int,int,float).mjava","sourceNew":"  public int doTest(int iter, int ndocs, int maxTF, float percentDocs) throws IOException {\n    Directory dir = newDirectory();\n\n    long start = System.currentTimeMillis();\n    addDocs(random(), dir, ndocs, \"foo\", \"val\", maxTF, percentDocs);\n    long end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for creation of \" + ndocs + \" docs = \" + (end-start));\n\n    IndexReader reader = DirectoryReader.open(dir);\n\n    TermsEnum tenum = MultiFields.getTerms(reader, \"foo\").iterator(null);\n\n    start = System.currentTimeMillis();\n\n    int ret=0;\n    DocsEnum tdocs = null;\n    final Random random = new Random(random().nextLong());\n    for (int i=0; i<iter; i++) {\n      tenum.seekCeil(new BytesRef(\"val\"));\n      tdocs = _TestUtil.docs(random, tenum, MultiFields.getLiveDocs(reader), tdocs, 0);\n      while (tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        ret += tdocs.docID();\n      }\n    }\n\n    end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for \" + iter + \" TermDocs iteration: \" + (end-start));\n\n    return ret;\n  }\n\n","sourceOld":"  public int doTest(int iter, int ndocs, int maxTF, float percentDocs) throws IOException {\n    Directory dir = newDirectory();\n\n    long start = System.currentTimeMillis();\n    addDocs(random(), dir, ndocs, \"foo\", \"val\", maxTF, percentDocs);\n    long end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for creation of \" + ndocs + \" docs = \" + (end-start));\n\n    IndexReader reader = DirectoryReader.open(dir);\n\n    TermsEnum tenum = MultiFields.getTerms(reader, \"foo\").iterator(null);\n\n    start = System.currentTimeMillis();\n\n    int ret=0;\n    DocsEnum tdocs = null;\n    final Random random = new Random(random().nextLong());\n    for (int i=0; i<iter; i++) {\n      tenum.seekCeil(new BytesRef(\"val\"));\n      tdocs = _TestUtil.docs(random, tenum, MultiFields.getLiveDocs(reader), tdocs, false);\n      while (tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        ret += tdocs.docID();\n      }\n    }\n\n    end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for \" + iter + \" TermDocs iteration: \" + (end-start));\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf#doTest(int,int,int,float).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf#doTest(int,int,int,float).mjava","sourceNew":"  public int doTest(int iter, int ndocs, int maxTF, float percentDocs) throws IOException {\n    Directory dir = newDirectory();\n\n    long start = System.currentTimeMillis();\n    addDocs(random(), dir, ndocs, \"foo\", \"val\", maxTF, percentDocs);\n    long end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for creation of \" + ndocs + \" docs = \" + (end-start));\n\n    IndexReader reader = DirectoryReader.open(dir);\n\n    TermsEnum tenum = MultiFields.getTerms(reader, \"foo\").iterator(null);\n\n    start = System.currentTimeMillis();\n\n    int ret=0;\n    DocsEnum tdocs = null;\n    final Random random = new Random(random().nextLong());\n    for (int i=0; i<iter; i++) {\n      tenum.seekCeil(new BytesRef(\"val\"));\n      tdocs = _TestUtil.docs(random, tenum, MultiFields.getLiveDocs(reader), tdocs, 0);\n      while (tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        ret += tdocs.docID();\n      }\n    }\n\n    end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for \" + iter + \" TermDocs iteration: \" + (end-start));\n\n    return ret;\n  }\n\n","sourceOld":"  public int doTest(int iter, int ndocs, int maxTF, float percentDocs) throws IOException {\n    Directory dir = newDirectory();\n\n    long start = System.currentTimeMillis();\n    addDocs(random(), dir, ndocs, \"foo\", \"val\", maxTF, percentDocs);\n    long end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for creation of \" + ndocs + \" docs = \" + (end-start));\n\n    IndexReader reader = DirectoryReader.open(dir);\n\n    TermsEnum tenum = MultiFields.getTerms(reader, \"foo\").iterator(null);\n\n    start = System.currentTimeMillis();\n\n    int ret=0;\n    DocsEnum tdocs = null;\n    final Random random = new Random(random().nextLong());\n    for (int i=0; i<iter; i++) {\n      tenum.seekCeil(new BytesRef(\"val\"));\n      tdocs = _TestUtil.docs(random, tenum, MultiFields.getLiveDocs(reader), tdocs, false);\n      while (tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        ret += tdocs.docID();\n      }\n    }\n\n    end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for \" + iter + \" TermDocs iteration: \" + (end-start));\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15250ca94ba8ab3bcdd476daf6bf3f3febb92640","date":1355200097,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf#doTest(int,int,int,float).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf#doTest(int,int,int,float).mjava","sourceNew":"  public int doTest(int iter, int ndocs, int maxTF, float percentDocs) throws IOException {\n    Directory dir = newDirectory();\n\n    long start = System.currentTimeMillis();\n    addDocs(random(), dir, ndocs, \"foo\", \"val\", maxTF, percentDocs);\n    long end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for creation of \" + ndocs + \" docs = \" + (end-start));\n\n    IndexReader reader = DirectoryReader.open(dir);\n\n    TermsEnum tenum = MultiFields.getTerms(reader, \"foo\").iterator(null);\n\n    start = System.currentTimeMillis();\n\n    int ret=0;\n    DocsEnum tdocs = null;\n    final Random random = new Random(random().nextLong());\n    for (int i=0; i<iter; i++) {\n      tenum.seekCeil(new BytesRef(\"val\"));\n      tdocs = _TestUtil.docs(random, tenum, MultiFields.getLiveDocs(reader), tdocs, DocsEnum.FLAG_NONE);\n      while (tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        ret += tdocs.docID();\n      }\n    }\n\n    end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for \" + iter + \" TermDocs iteration: \" + (end-start));\n\n    return ret;\n  }\n\n","sourceOld":"  public int doTest(int iter, int ndocs, int maxTF, float percentDocs) throws IOException {\n    Directory dir = newDirectory();\n\n    long start = System.currentTimeMillis();\n    addDocs(random(), dir, ndocs, \"foo\", \"val\", maxTF, percentDocs);\n    long end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for creation of \" + ndocs + \" docs = \" + (end-start));\n\n    IndexReader reader = DirectoryReader.open(dir);\n\n    TermsEnum tenum = MultiFields.getTerms(reader, \"foo\").iterator(null);\n\n    start = System.currentTimeMillis();\n\n    int ret=0;\n    DocsEnum tdocs = null;\n    final Random random = new Random(random().nextLong());\n    for (int i=0; i<iter; i++) {\n      tenum.seekCeil(new BytesRef(\"val\"));\n      tdocs = _TestUtil.docs(random, tenum, MultiFields.getLiveDocs(reader), tdocs, 0);\n      while (tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        ret += tdocs.docID();\n      }\n    }\n\n    end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for \" + iter + \" TermDocs iteration: \" + (end-start));\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf#doTest(int,int,int,float).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf#doTest(int,int,int,float).mjava","sourceNew":"  public int doTest(int iter, int ndocs, int maxTF, float percentDocs) throws IOException {\n    Directory dir = newDirectory();\n\n    long start = System.currentTimeMillis();\n    addDocs(random(), dir, ndocs, \"foo\", \"val\", maxTF, percentDocs);\n    long end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for creation of \" + ndocs + \" docs = \" + (end-start));\n\n    IndexReader reader = DirectoryReader.open(dir);\n\n    TermsEnum tenum = MultiFields.getTerms(reader, \"foo\").iterator(null);\n\n    start = System.currentTimeMillis();\n\n    int ret=0;\n    DocsEnum tdocs = null;\n    final Random random = new Random(random().nextLong());\n    for (int i=0; i<iter; i++) {\n      tenum.seekCeil(new BytesRef(\"val\"));\n      tdocs = _TestUtil.docs(random, tenum, MultiFields.getLiveDocs(reader), tdocs, DocsEnum.FLAG_NONE);\n      while (tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        ret += tdocs.docID();\n      }\n    }\n\n    end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for \" + iter + \" TermDocs iteration: \" + (end-start));\n\n    return ret;\n  }\n\n","sourceOld":"  public int doTest(int iter, int ndocs, int maxTF, float percentDocs) throws IOException {\n    Directory dir = newDirectory();\n\n    long start = System.currentTimeMillis();\n    addDocs(random(), dir, ndocs, \"foo\", \"val\", maxTF, percentDocs);\n    long end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for creation of \" + ndocs + \" docs = \" + (end-start));\n\n    IndexReader reader = DirectoryReader.open(dir);\n\n    TermsEnum tenum = MultiFields.getTerms(reader, \"foo\").iterator(null);\n\n    start = System.currentTimeMillis();\n\n    int ret=0;\n    DocsEnum tdocs = null;\n    final Random random = new Random(random().nextLong());\n    for (int i=0; i<iter; i++) {\n      tenum.seekCeil(new BytesRef(\"val\"));\n      tdocs = _TestUtil.docs(random, tenum, MultiFields.getLiveDocs(reader), tdocs, 0);\n      while (tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        ret += tdocs.docID();\n      }\n    }\n\n    end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for \" + iter + \" TermDocs iteration: \" + (end-start));\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf#doTest(int,int,int,float).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf#doTest(int,int,int,float).mjava","sourceNew":"  public int doTest(int iter, int ndocs, int maxTF, float percentDocs) throws IOException {\n    Directory dir = newDirectory();\n\n    long start = System.currentTimeMillis();\n    addDocs(random(), dir, ndocs, \"foo\", \"val\", maxTF, percentDocs);\n    long end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for creation of \" + ndocs + \" docs = \" + (end-start));\n\n    IndexReader reader = DirectoryReader.open(dir);\n\n    TermsEnum tenum = MultiFields.getTerms(reader, \"foo\").iterator(null);\n\n    start = System.currentTimeMillis();\n\n    int ret=0;\n    DocsEnum tdocs = null;\n    final Random random = new Random(random().nextLong());\n    for (int i=0; i<iter; i++) {\n      tenum.seekCeil(new BytesRef(\"val\"));\n      tdocs = TestUtil.docs(random, tenum, MultiFields.getLiveDocs(reader), tdocs, DocsEnum.FLAG_NONE);\n      while (tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        ret += tdocs.docID();\n      }\n    }\n\n    end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for \" + iter + \" TermDocs iteration: \" + (end-start));\n\n    return ret;\n  }\n\n","sourceOld":"  public int doTest(int iter, int ndocs, int maxTF, float percentDocs) throws IOException {\n    Directory dir = newDirectory();\n\n    long start = System.currentTimeMillis();\n    addDocs(random(), dir, ndocs, \"foo\", \"val\", maxTF, percentDocs);\n    long end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for creation of \" + ndocs + \" docs = \" + (end-start));\n\n    IndexReader reader = DirectoryReader.open(dir);\n\n    TermsEnum tenum = MultiFields.getTerms(reader, \"foo\").iterator(null);\n\n    start = System.currentTimeMillis();\n\n    int ret=0;\n    DocsEnum tdocs = null;\n    final Random random = new Random(random().nextLong());\n    for (int i=0; i<iter; i++) {\n      tenum.seekCeil(new BytesRef(\"val\"));\n      tdocs = _TestUtil.docs(random, tenum, MultiFields.getLiveDocs(reader), tdocs, DocsEnum.FLAG_NONE);\n      while (tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        ret += tdocs.docID();\n      }\n    }\n\n    end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for \" + iter + \" TermDocs iteration: \" + (end-start));\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf#doTest(int,int,int,float).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf#doTest(int,int,int,float).mjava","sourceNew":"  public int doTest(int iter, int ndocs, int maxTF, float percentDocs) throws IOException {\n    Directory dir = newDirectory();\n\n    long start = System.currentTimeMillis();\n    addDocs(random(), dir, ndocs, \"foo\", \"val\", maxTF, percentDocs);\n    long end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for creation of \" + ndocs + \" docs = \" + (end-start));\n\n    IndexReader reader = DirectoryReader.open(dir);\n\n    TermsEnum tenum = MultiFields.getTerms(reader, \"foo\").iterator(null);\n\n    start = System.currentTimeMillis();\n\n    int ret=0;\n    PostingsEnum tdocs = null;\n    final Random random = new Random(random().nextLong());\n    for (int i=0; i<iter; i++) {\n      tenum.seekCeil(new BytesRef(\"val\"));\n      tdocs = TestUtil.docs(random, tenum, MultiFields.getLiveDocs(reader), tdocs, PostingsEnum.FLAG_NONE);\n      while (tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        ret += tdocs.docID();\n      }\n    }\n\n    end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for \" + iter + \" TermDocs iteration: \" + (end-start));\n\n    return ret;\n  }\n\n","sourceOld":"  public int doTest(int iter, int ndocs, int maxTF, float percentDocs) throws IOException {\n    Directory dir = newDirectory();\n\n    long start = System.currentTimeMillis();\n    addDocs(random(), dir, ndocs, \"foo\", \"val\", maxTF, percentDocs);\n    long end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for creation of \" + ndocs + \" docs = \" + (end-start));\n\n    IndexReader reader = DirectoryReader.open(dir);\n\n    TermsEnum tenum = MultiFields.getTerms(reader, \"foo\").iterator(null);\n\n    start = System.currentTimeMillis();\n\n    int ret=0;\n    DocsEnum tdocs = null;\n    final Random random = new Random(random().nextLong());\n    for (int i=0; i<iter; i++) {\n      tenum.seekCeil(new BytesRef(\"val\"));\n      tdocs = TestUtil.docs(random, tenum, MultiFields.getLiveDocs(reader), tdocs, DocsEnum.FLAG_NONE);\n      while (tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        ret += tdocs.docID();\n      }\n    }\n\n    end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for \" + iter + \" TermDocs iteration: \" + (end-start));\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf#doTest(int,int,int,float).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf#doTest(int,int,int,float).mjava","sourceNew":"  public int doTest(int iter, int ndocs, int maxTF, float percentDocs) throws IOException {\n    Directory dir = newDirectory();\n\n    long start = System.currentTimeMillis();\n    addDocs(random(), dir, ndocs, \"foo\", \"val\", maxTF, percentDocs);\n    long end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for creation of \" + ndocs + \" docs = \" + (end-start));\n\n    IndexReader reader = DirectoryReader.open(dir);\n\n    TermsEnum tenum = MultiFields.getTerms(reader, \"foo\").iterator(null);\n\n    start = System.currentTimeMillis();\n\n    int ret=0;\n    PostingsEnum tdocs = null;\n    final Random random = new Random(random().nextLong());\n    for (int i=0; i<iter; i++) {\n      tenum.seekCeil(new BytesRef(\"val\"));\n      tdocs = TestUtil.docs(random, tenum, MultiFields.getLiveDocs(reader), tdocs, PostingsEnum.NONE);\n      while (tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        ret += tdocs.docID();\n      }\n    }\n\n    end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for \" + iter + \" TermDocs iteration: \" + (end-start));\n\n    return ret;\n  }\n\n","sourceOld":"  public int doTest(int iter, int ndocs, int maxTF, float percentDocs) throws IOException {\n    Directory dir = newDirectory();\n\n    long start = System.currentTimeMillis();\n    addDocs(random(), dir, ndocs, \"foo\", \"val\", maxTF, percentDocs);\n    long end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for creation of \" + ndocs + \" docs = \" + (end-start));\n\n    IndexReader reader = DirectoryReader.open(dir);\n\n    TermsEnum tenum = MultiFields.getTerms(reader, \"foo\").iterator(null);\n\n    start = System.currentTimeMillis();\n\n    int ret=0;\n    PostingsEnum tdocs = null;\n    final Random random = new Random(random().nextLong());\n    for (int i=0; i<iter; i++) {\n      tenum.seekCeil(new BytesRef(\"val\"));\n      tdocs = TestUtil.docs(random, tenum, MultiFields.getLiveDocs(reader), tdocs, PostingsEnum.FLAG_NONE);\n      while (tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        ret += tdocs.docID();\n      }\n    }\n\n    end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for \" + iter + \" TermDocs iteration: \" + (end-start));\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf#doTest(int,int,int,float).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf#doTest(int,int,int,float).mjava","sourceNew":"  public int doTest(int iter, int ndocs, int maxTF, float percentDocs) throws IOException {\n    Directory dir = newDirectory();\n\n    long start = System.currentTimeMillis();\n    addDocs(random(), dir, ndocs, \"foo\", \"val\", maxTF, percentDocs);\n    long end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for creation of \" + ndocs + \" docs = \" + (end-start));\n\n    IndexReader reader = DirectoryReader.open(dir);\n\n    TermsEnum tenum = MultiFields.getTerms(reader, \"foo\").iterator();\n\n    start = System.currentTimeMillis();\n\n    int ret=0;\n    PostingsEnum tdocs = null;\n    final Random random = new Random(random().nextLong());\n    for (int i=0; i<iter; i++) {\n      tenum.seekCeil(new BytesRef(\"val\"));\n      tdocs = TestUtil.docs(random, tenum, MultiFields.getLiveDocs(reader), tdocs, PostingsEnum.NONE);\n      while (tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        ret += tdocs.docID();\n      }\n    }\n\n    end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for \" + iter + \" TermDocs iteration: \" + (end-start));\n\n    return ret;\n  }\n\n","sourceOld":"  public int doTest(int iter, int ndocs, int maxTF, float percentDocs) throws IOException {\n    Directory dir = newDirectory();\n\n    long start = System.currentTimeMillis();\n    addDocs(random(), dir, ndocs, \"foo\", \"val\", maxTF, percentDocs);\n    long end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for creation of \" + ndocs + \" docs = \" + (end-start));\n\n    IndexReader reader = DirectoryReader.open(dir);\n\n    TermsEnum tenum = MultiFields.getTerms(reader, \"foo\").iterator(null);\n\n    start = System.currentTimeMillis();\n\n    int ret=0;\n    PostingsEnum tdocs = null;\n    final Random random = new Random(random().nextLong());\n    for (int i=0; i<iter; i++) {\n      tenum.seekCeil(new BytesRef(\"val\"));\n      tdocs = TestUtil.docs(random, tenum, MultiFields.getLiveDocs(reader), tdocs, PostingsEnum.NONE);\n      while (tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        ret += tdocs.docID();\n      }\n    }\n\n    end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for \" + iter + \" TermDocs iteration: \" + (end-start));\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf#doTest(int,int,int,float).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf#doTest(int,int,int,float).mjava","sourceNew":"  public int doTest(int iter, int ndocs, int maxTF, float percentDocs) throws IOException {\n    Directory dir = newDirectory();\n\n    long start = System.currentTimeMillis();\n    addDocs(random(), dir, ndocs, \"foo\", \"val\", maxTF, percentDocs);\n    long end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for creation of \" + ndocs + \" docs = \" + (end-start));\n\n    IndexReader reader = DirectoryReader.open(dir);\n\n    TermsEnum tenum = MultiFields.getTerms(reader, \"foo\").iterator();\n\n    start = System.currentTimeMillis();\n\n    int ret=0;\n    PostingsEnum tdocs = null;\n    final Random random = new Random(random().nextLong());\n    for (int i=0; i<iter; i++) {\n      tenum.seekCeil(new BytesRef(\"val\"));\n      tdocs = TestUtil.docs(random, tenum, tdocs, PostingsEnum.NONE);\n      while (tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        ret += tdocs.docID();\n      }\n    }\n\n    end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for \" + iter + \" TermDocs iteration: \" + (end-start));\n\n    return ret;\n  }\n\n","sourceOld":"  public int doTest(int iter, int ndocs, int maxTF, float percentDocs) throws IOException {\n    Directory dir = newDirectory();\n\n    long start = System.currentTimeMillis();\n    addDocs(random(), dir, ndocs, \"foo\", \"val\", maxTF, percentDocs);\n    long end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for creation of \" + ndocs + \" docs = \" + (end-start));\n\n    IndexReader reader = DirectoryReader.open(dir);\n\n    TermsEnum tenum = MultiFields.getTerms(reader, \"foo\").iterator();\n\n    start = System.currentTimeMillis();\n\n    int ret=0;\n    PostingsEnum tdocs = null;\n    final Random random = new Random(random().nextLong());\n    for (int i=0; i<iter; i++) {\n      tenum.seekCeil(new BytesRef(\"val\"));\n      tdocs = TestUtil.docs(random, tenum, MultiFields.getLiveDocs(reader), tdocs, PostingsEnum.NONE);\n      while (tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        ret += tdocs.docID();\n      }\n    }\n\n    end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for \" + iter + \" TermDocs iteration: \" + (end-start));\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf#doTest(int,int,int,float).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf#doTest(int,int,int,float).mjava","sourceNew":"  public int doTest(int iter, int ndocs, int maxTF, float percentDocs) throws IOException {\n    Directory dir = newDirectory();\n\n    long start = System.currentTimeMillis();\n    addDocs(random(), dir, ndocs, \"foo\", \"val\", maxTF, percentDocs);\n    long end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for creation of \" + ndocs + \" docs = \" + (end-start));\n\n    IndexReader reader = DirectoryReader.open(dir);\n\n    TermsEnum tenum = MultiTerms.getTerms(reader, \"foo\").iterator();\n\n    start = System.currentTimeMillis();\n\n    int ret=0;\n    PostingsEnum tdocs = null;\n    final Random random = new Random(random().nextLong());\n    for (int i=0; i<iter; i++) {\n      tenum.seekCeil(new BytesRef(\"val\"));\n      tdocs = TestUtil.docs(random, tenum, tdocs, PostingsEnum.NONE);\n      while (tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        ret += tdocs.docID();\n      }\n    }\n\n    end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for \" + iter + \" TermDocs iteration: \" + (end-start));\n\n    return ret;\n  }\n\n","sourceOld":"  public int doTest(int iter, int ndocs, int maxTF, float percentDocs) throws IOException {\n    Directory dir = newDirectory();\n\n    long start = System.currentTimeMillis();\n    addDocs(random(), dir, ndocs, \"foo\", \"val\", maxTF, percentDocs);\n    long end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for creation of \" + ndocs + \" docs = \" + (end-start));\n\n    IndexReader reader = DirectoryReader.open(dir);\n\n    TermsEnum tenum = MultiFields.getTerms(reader, \"foo\").iterator();\n\n    start = System.currentTimeMillis();\n\n    int ret=0;\n    PostingsEnum tdocs = null;\n    final Random random = new Random(random().nextLong());\n    for (int i=0; i<iter; i++) {\n      tenum.seekCeil(new BytesRef(\"val\"));\n      tdocs = TestUtil.docs(random, tenum, tdocs, PostingsEnum.NONE);\n      while (tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        ret += tdocs.docID();\n      }\n    }\n\n    end = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"milliseconds for \" + iter + \" TermDocs iteration: \" + (end-start));\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["02331260bb246364779cb6f04919ca47900d01bb","15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"6613659748fe4411a7dcf85266e55db1f95f7315":["15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"51f5280f31484820499077f41fcdfe92d527d9dc":["6613659748fe4411a7dcf85266e55db1f95f7315"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["02331260bb246364779cb6f04919ca47900d01bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","02331260bb246364779cb6f04919ca47900d01bb"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","02331260bb246364779cb6f04919ca47900d01bb"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"02331260bb246364779cb6f04919ca47900d01bb":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"6613659748fe4411a7dcf85266e55db1f95f7315":["51f5280f31484820499077f41fcdfe92d527d9dc"],"51f5280f31484820499077f41fcdfe92d527d9dc":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","02331260bb246364779cb6f04919ca47900d01bb"],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","6613659748fe4411a7dcf85266e55db1f95f7315"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"02331260bb246364779cb6f04919ca47900d01bb":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","15250ca94ba8ab3bcdd476daf6bf3f3febb92640","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}