{"path":"lucene/core/src/java/org/apache/lucene/search/FilteringFieldComparator#wrapToFilteringComparator(FieldComparator[#],boolean,boolean).mjava","commits":[{"id":"e18fac0122568cb02eb2c92608ca703a723bbbd6","date":1592942698,"type":0,"author":"Mayya Sharipova","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FilteringFieldComparator#wrapToFilteringComparator(FieldComparator[#],boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Try to wrap a given field comparator to add to it a functionality to skip over non-competitive docs.\n   * If for the given comparator the skip functionality is not implemented, return the comparator itself.\n   * @param comparator – comparator to wrap\n   * @param reverse – if this sort is reverse\n   * @param singleSort – true if this sort is based on a single field and there are no other sort fields for tie breaking\n   * @return comparator wrapped as a filtering comparator or the original comparator if the filtering functionality\n   * is not implemented for it\n   */\n  public static FieldComparator<?> wrapToFilteringComparator(FieldComparator<?> comparator, boolean reverse, boolean singleSort) {\n    Class<?> comparatorClass = comparator.getClass();\n    if (comparatorClass == FieldComparator.LongComparator.class){\n      return new FilteringNumericComparator<>((FieldComparator.LongComparator) comparator, reverse, singleSort);\n    }\n    if (comparatorClass == FieldComparator.IntComparator.class){\n      return new FilteringNumericComparator<>((FieldComparator.IntComparator) comparator, reverse, singleSort);\n    }\n    if (comparatorClass == FieldComparator.DoubleComparator.class){\n      return new FilteringNumericComparator<>((FieldComparator.DoubleComparator) comparator, reverse, singleSort);\n    }\n    if (comparatorClass == FieldComparator.FloatComparator.class){\n      return new FilteringNumericComparator<>((FieldComparator.FloatComparator) comparator, reverse, singleSort);\n    }\n    return comparator;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241","date":1599588987,"type":4,"author":"Mayya Sharipova","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilteringFieldComparator#wrapToFilteringComparator(FieldComparator[#],boolean,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Try to wrap a given field comparator to add to it a functionality to skip over non-competitive docs.\n   * If for the given comparator the skip functionality is not implemented, return the comparator itself.\n   * @param comparator – comparator to wrap\n   * @param reverse – if this sort is reverse\n   * @param singleSort – true if this sort is based on a single field and there are no other sort fields for tie breaking\n   * @return comparator wrapped as a filtering comparator or the original comparator if the filtering functionality\n   * is not implemented for it\n   */\n  public static FieldComparator<?> wrapToFilteringComparator(FieldComparator<?> comparator, boolean reverse, boolean singleSort) {\n    Class<?> comparatorClass = comparator.getClass();\n    if (comparatorClass == FieldComparator.LongComparator.class){\n      return new FilteringNumericComparator<>((FieldComparator.LongComparator) comparator, reverse, singleSort);\n    }\n    if (comparatorClass == FieldComparator.IntComparator.class){\n      return new FilteringNumericComparator<>((FieldComparator.IntComparator) comparator, reverse, singleSort);\n    }\n    if (comparatorClass == FieldComparator.DoubleComparator.class){\n      return new FilteringNumericComparator<>((FieldComparator.DoubleComparator) comparator, reverse, singleSort);\n    }\n    if (comparatorClass == FieldComparator.FloatComparator.class){\n      return new FilteringNumericComparator<>((FieldComparator.FloatComparator) comparator, reverse, singleSort);\n    }\n    return comparator;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e18fac0122568cb02eb2c92608ca703a723bbbd6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241"],"e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241":["e18fac0122568cb02eb2c92608ca703a723bbbd6"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e18fac0122568cb02eb2c92608ca703a723bbbd6"],"e18fac0122568cb02eb2c92608ca703a723bbbd6":["e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}