{"path":"src/test/org/apache/solr/common/util/TestHash#testHash().mjava","commits":[{"id":"80c633e661becbcb6deb6ea2ef4588d230102f50","date":1234308117,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/common/util/TestHash#testHash().mjava","pathOld":"/dev/null","sourceNew":"  public void testHash() {\n    Random r = new Random(0);\n    int[] utf32 = new int[20];\n    tstEquiv(utf32,0);\n\n    utf32[0]=0x10000;\n    tstEquiv(utf32,1);\n    utf32[0]=0x8000;\n    tstEquiv(utf32,1);\n    utf32[0]=Character.MAX_CODE_POINT;\n    tstEquiv(utf32,1);\n\n    for (int iter=0; iter<10000; iter++) {\n      int len = r.nextInt(utf32.length+1);\n      for (int i=0; i<len; i++) {\n        int codePoint;\n        do  {\n          codePoint = r.nextInt(Character.MAX_CODE_POINT+1);\n        } while((codePoint & 0xF800) == 0xD800);  // avoid surrogate code points\n        utf32[i] = codePoint;\n      }\n      // System.out.println(\"len=\"+len + \",\"+utf32[0]+\",\"+utf32[1]);\n      tstEquiv(utf32, len);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/common/util/TestHash#testHash().mjava","pathOld":"src/test/org/apache/solr/common/util/TestHash#testHash().mjava","sourceNew":"  public void testHash() {\n    Random r = new Random(0);\n    int[] utf32 = new int[20];\n    tstEquiv(utf32,0);\n\n    utf32[0]=0x10000;\n    tstEquiv(utf32,1);\n    utf32[0]=0x8000;\n    tstEquiv(utf32,1);\n    utf32[0]=Character.MAX_CODE_POINT;\n    tstEquiv(utf32,1);\n\n    for (int iter=0; iter<10000; iter++) {\n      int len = r.nextInt(utf32.length+1);\n      for (int i=0; i<len; i++) {\n        int codePoint;\n        do  {\n          codePoint = r.nextInt(Character.MAX_CODE_POINT+1);\n        } while((codePoint & 0xF800) == 0xD800);  // avoid surrogate code points\n        utf32[i] = codePoint;\n      }\n      // System.out.println(\"len=\"+len + \",\"+utf32[0]+\",\"+utf32[1]);\n      tstEquiv(utf32, len);\n    }\n  }\n\n","sourceOld":"  public void testHash() {\n    Random r = new Random(0);\n    int[] utf32 = new int[20];\n    tstEquiv(utf32,0);\n\n    utf32[0]=0x10000;\n    tstEquiv(utf32,1);\n    utf32[0]=0x8000;\n    tstEquiv(utf32,1);\n    utf32[0]=Character.MAX_CODE_POINT;\n    tstEquiv(utf32,1);\n\n    for (int iter=0; iter<10000; iter++) {\n      int len = r.nextInt(utf32.length+1);\n      for (int i=0; i<len; i++) {\n        int codePoint;\n        do  {\n          codePoint = r.nextInt(Character.MAX_CODE_POINT+1);\n        } while((codePoint & 0xF800) == 0xD800);  // avoid surrogate code points\n        utf32[i] = codePoint;\n      }\n      // System.out.println(\"len=\"+len + \",\"+utf32[0]+\",\"+utf32[1]);\n      tstEquiv(utf32, len);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["80c633e661becbcb6deb6ea2ef4588d230102f50"],"80c633e661becbcb6deb6ea2ef4588d230102f50":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["80c633e661becbcb6deb6ea2ef4588d230102f50"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"80c633e661becbcb6deb6ea2ef4588d230102f50":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}