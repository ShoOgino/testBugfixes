{"path":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#formGrams(String,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#formGrams(String,int).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#formGrams(String,int).mjava","sourceNew":"  /**\n   * Form all ngrams for a given word.\n   * @param text the word to parse\n   * @param ng the ngram length e.g. 3\n   * @return an array of all ngrams in the word and note that duplicates are not removed\n   */\n  private static String[] formGrams(String text, int ng) {\n    int len = text.length();\n    String[] res = new String[len - ng + 1];\n    for (int i = 0; i < len - ng + 1; i++) {\n      res[i] = text.substring(i, i + ng);\n    }\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Form all ngrams for a given word.\n   * @param text the word to parse\n   * @param ng the ngram length e.g. 3\n   * @return an array of all ngrams in the word and note that duplicates are not removed\n   */\n  private static String[] formGrams(String text, int ng) {\n    int len = text.length();\n    String[] res = new String[len - ng + 1];\n    for (int i = 0; i < len - ng + 1; i++) {\n      res[i] = text.substring(i, i + ng);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e230a61047bc041516c811baa08a7174d6f8322a","date":1306175633,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#formGrams(String,int).mjava","pathOld":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#formGrams(String,int).mjava","sourceNew":"  /**\n   * Form all ngrams for a given word.\n   * @param text the word to parse\n   * @param ng the ngram length e.g. 3\n   * @return an array of all ngrams in the word and note that duplicates are not removed\n   */\n  private static String[] formGrams(String text, int ng) {\n    int len = text.length();\n    String[] res = new String[len - ng + 1];\n    for (int i = 0; i < len - ng + 1; i++) {\n      res[i] = text.substring(i, i + ng);\n    }\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Form all ngrams for a given word.\n   * @param text the word to parse\n   * @param ng the ngram length e.g. 3\n   * @return an array of all ngrams in the word and note that duplicates are not removed\n   */\n  private static String[] formGrams(String text, int ng) {\n    int len = text.length();\n    String[] res = new String[len - ng + 1];\n    for (int i = 0; i < len - ng + 1; i++) {\n      res[i] = text.substring(i, i + ng);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#formGrams(String,int).mjava","pathOld":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#formGrams(String,int).mjava","sourceNew":"  /**\n   * Form all ngrams for a given word.\n   * @param text the word to parse\n   * @param ng the ngram length e.g. 3\n   * @return an array of all ngrams in the word and note that duplicates are not removed\n   */\n  private static String[] formGrams(String text, int ng) {\n    int len = text.length();\n    String[] res = new String[len - ng + 1];\n    for (int i = 0; i < len - ng + 1; i++) {\n      res[i] = text.substring(i, i + ng);\n    }\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Form all ngrams for a given word.\n   * @param text the word to parse\n   * @param ng the ngram length e.g. 3\n   * @return an array of all ngrams in the word and note that duplicates are not removed\n   */\n  private static String[] formGrams(String text, int ng) {\n    int len = text.length();\n    String[] res = new String[len - ng + 1];\n    for (int i = 0; i < len - ng + 1; i++) {\n      res[i] = text.substring(i, i + ng);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#formGrams(String,int).mjava","pathOld":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#formGrams(String,int).mjava","sourceNew":"  /**\n   * Form all ngrams for a given word.\n   * @param text the word to parse\n   * @param ng the ngram length e.g. 3\n   * @return an array of all ngrams in the word and note that duplicates are not removed\n   */\n  private static String[] formGrams(String text, int ng) {\n    int len = text.length();\n    String[] res = new String[len - ng + 1];\n    for (int i = 0; i < len - ng + 1; i++) {\n      res[i] = text.substring(i, i + ng);\n    }\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Form all ngrams for a given word.\n   * @param text the word to parse\n   * @param ng the ngram length e.g. 3\n   * @return an array of all ngrams in the word and note that duplicates are not removed\n   */\n  private static String[] formGrams(String text, int ng) {\n    int len = text.length();\n    String[] res = new String[len - ng + 1];\n    for (int i = 0; i < len - ng + 1; i++) {\n      res[i] = text.substring(i, i + ng);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e230a61047bc041516c811baa08a7174d6f8322a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["9454a6510e2db155fb01faa5c049b06ece95fab9","e230a61047bc041516c811baa08a7174d6f8322a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e230a61047bc041516c811baa08a7174d6f8322a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["9454a6510e2db155fb01faa5c049b06ece95fab9","e230a61047bc041516c811baa08a7174d6f8322a"]},"commit2Childs":{"e230a61047bc041516c811baa08a7174d6f8322a":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e230a61047bc041516c811baa08a7174d6f8322a","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}