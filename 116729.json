{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockPostingsEnum#advance(int).mjava","commits":[{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockPostingsEnum#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockDocsAndPositionsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n\n      if (target > nextSkipDoc) {\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new Lucene50SkipReader(docIn.clone(),\n                                           MAX_SKIP_LEVELS,\n                                           BLOCK_SIZE,\n                                           true,\n                                           indexHasOffsets,\n                                           indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, posTermStartFP, payTermStartFP, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();\n          docIn.seek(skipper.getDocPointer());\n          posPendingFP = skipper.getPosPointer();\n          posPendingCount = skipper.getPosBufferUpto();\n        }\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        position = 0;\n        return doc = accum;\n      } else {\n        return nextDoc();\n      }\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n\n      if (target > nextSkipDoc) {\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new Lucene50SkipReader(docIn.clone(),\n                                           MAX_SKIP_LEVELS,\n                                           BLOCK_SIZE,\n                                           true,\n                                           indexHasOffsets,\n                                           indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, posTermStartFP, payTermStartFP, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();\n          docIn.seek(skipper.getDocPointer());\n          posPendingFP = skipper.getPosPointer();\n          posPendingCount = skipper.getPosBufferUpto();\n        }\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        position = 0;\n        return doc = accum;\n      } else {\n        return nextDoc();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9","date":1434069165,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockPostingsEnum#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockPostingsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n\n      if (target > nextSkipDoc) {\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new Lucene50SkipReader(docIn.clone(),\n                                           MAX_SKIP_LEVELS,\n                                           true,\n                                           indexHasOffsets,\n                                           indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, posTermStartFP, payTermStartFP, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();\n          docIn.seek(skipper.getDocPointer());\n          posPendingFP = skipper.getPosPointer();\n          posPendingCount = skipper.getPosBufferUpto();\n        }\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        position = 0;\n        return doc = accum;\n      } else {\n        return nextDoc();\n      }\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n\n      if (target > nextSkipDoc) {\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new Lucene50SkipReader(docIn.clone(),\n                                           MAX_SKIP_LEVELS,\n                                           BLOCK_SIZE,\n                                           true,\n                                           indexHasOffsets,\n                                           indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, posTermStartFP, payTermStartFP, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();\n          docIn.seek(skipper.getDocPointer());\n          posPendingFP = skipper.getPosPointer();\n          posPendingCount = skipper.getPosBufferUpto();\n        }\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        position = 0;\n        return doc = accum;\n      } else {\n        return nextDoc();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockPostingsEnum#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockPostingsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n\n      if (target > nextSkipDoc) {\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new Lucene50SkipReader(docIn.clone(),\n                                           MAX_SKIP_LEVELS,\n                                           true,\n                                           indexHasOffsets,\n                                           indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, posTermStartFP, payTermStartFP, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();\n          docIn.seek(skipper.getDocPointer());\n          posPendingFP = skipper.getPosPointer();\n          posPendingCount = skipper.getPosBufferUpto();\n        }\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      position = 0;\n      return doc = accum;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n\n      if (target > nextSkipDoc) {\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new Lucene50SkipReader(docIn.clone(),\n                                           MAX_SKIP_LEVELS,\n                                           true,\n                                           indexHasOffsets,\n                                           indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, posTermStartFP, payTermStartFP, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();\n          docIn.seek(skipper.getDocPointer());\n          posPendingFP = skipper.getPosPointer();\n          posPendingCount = skipper.getPosBufferUpto();\n        }\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        position = 0;\n        return doc = accum;\n      } else {\n        return nextDoc();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"622a708571e534680618b3c5e0c28ac539a47776","date":1517406892,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockPostingsEnum#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockPostingsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n\n      if (target > nextSkipDoc) {\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new Lucene50SkipReader(version,\n                                           docIn.clone(),\n                                           MAX_SKIP_LEVELS,\n                                           true,\n                                           indexHasOffsets,\n                                           indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, posTermStartFP, payTermStartFP, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();\n          docIn.seek(skipper.getDocPointer());\n          posPendingFP = skipper.getPosPointer();\n          posPendingCount = skipper.getPosBufferUpto();\n        }\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      position = 0;\n      return doc = accum;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n\n      if (target > nextSkipDoc) {\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new Lucene50SkipReader(docIn.clone(),\n                                           MAX_SKIP_LEVELS,\n                                           true,\n                                           indexHasOffsets,\n                                           indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, posTermStartFP, payTermStartFP, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();\n          docIn.seek(skipper.getDocPointer());\n          posPendingFP = skipper.getPosPointer();\n          posPendingCount = skipper.getPosBufferUpto();\n        }\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      position = 0;\n      return doc = accum;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9089237f2fb93105f12a1135e60257f4cf8ed41","date":1562086738,"type":3,"author":"Mayya Sharipova","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockPostingsEnum#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockPostingsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n\n      if (target > nextSkipDoc) {\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new Lucene50SkipReader(version,\n                                           docIn.clone(),\n                                           MAX_SKIP_LEVELS,\n                                           true,\n                                           indexHasOffsets,\n                                           indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, posTermStartFP, payTermStartFP, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target) + 1;\n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();\n          docIn.seek(skipper.getDocPointer());\n          posPendingFP = skipper.getPosPointer();\n          posPendingCount = skipper.getPosBufferUpto();\n        }\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      position = 0;\n      return doc = accum;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n\n      if (target > nextSkipDoc) {\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new Lucene50SkipReader(version,\n                                           docIn.clone(),\n                                           MAX_SKIP_LEVELS,\n                                           true,\n                                           indexHasOffsets,\n                                           indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, posTermStartFP, payTermStartFP, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();\n          docIn.seek(skipper.getDocPointer());\n          posPendingFP = skipper.getPosPointer();\n          posPendingCount = skipper.getPosBufferUpto();\n        }\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      position = 0;\n      return doc = accum;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8dd25829321d66cd54ea7d40a4130e0d2a29bec","date":1562680889,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockImpactsPostingsEnum#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockPostingsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      if (target > nextSkipDoc) {\n        advanceShallow(target);\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        if (seekTo >= 0) {\n          docIn.seek(seekTo);\n          seekTo = -1;\n        }\n        refillDocs();\n      }\n\n      // Now scan:\n      while (true) {\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n      position = 0;\n\n      return doc = accum;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n\n      if (target > nextSkipDoc) {\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new Lucene50SkipReader(version,\n                                           docIn.clone(),\n                                           MAX_SKIP_LEVELS,\n                                           true,\n                                           indexHasOffsets,\n                                           indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, posTermStartFP, payTermStartFP, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target) + 1;\n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();\n          docIn.seek(skipper.getDocPointer());\n          posPendingFP = skipper.getPosPointer();\n          posPendingCount = skipper.getPosBufferUpto();\n        }\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      position = 0;\n      return doc = accum;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"],"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["51f5280f31484820499077f41fcdfe92d527d9dc"],"f8dd25829321d66cd54ea7d40a4130e0d2a29bec":["a9089237f2fb93105f12a1135e60257f4cf8ed41"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"622a708571e534680618b3c5e0c28ac539a47776":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"a9089237f2fb93105f12a1135e60257f4cf8ed41":["622a708571e534680618b3c5e0c28ac539a47776"],"51f5280f31484820499077f41fcdfe92d527d9dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f8dd25829321d66cd54ea7d40a4130e0d2a29bec"]},"commit2Childs":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["622a708571e534680618b3c5e0c28ac539a47776"],"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"f8dd25829321d66cd54ea7d40a4130e0d2a29bec":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["51f5280f31484820499077f41fcdfe92d527d9dc"],"622a708571e534680618b3c5e0c28ac539a47776":["a9089237f2fb93105f12a1135e60257f4cf8ed41"],"a9089237f2fb93105f12a1135e60257f4cf8ed41":["f8dd25829321d66cd54ea7d40a4130e0d2a29bec"],"51f5280f31484820499077f41fcdfe92d527d9dc":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}