{"path":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimpleReplicaNode#SimpleReplicaNode(Random,int,int,Path,long,int,SearcherFactory,boolean).mjava","commits":[{"id":"38cf1409ac117286eb0df7d6ef31d9cfdad8cfec","date":1454767455,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimpleReplicaNode#SimpleReplicaNode(Random,int,int,Path,long,int,SearcherFactory,boolean).mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimpleReplicaNode#SimpleReplicaNode(Random,int,int,Path,long,int,SearcherFactory).mjava","sourceNew":"  public SimpleReplicaNode(Random random, int id, int tcpPort, Path indexPath, long curPrimaryGen, int primaryTCPPort, SearcherFactory searcherFactory, boolean doCheckIndexOnClose) throws IOException {\n    super(id, getDirectory(random, id, indexPath, doCheckIndexOnClose), searcherFactory);\n    this.tcpPort = tcpPort;\n    this.random = new Random(random.nextLong());\n\n    // Random IO throttling on file copies: 5 - 20 MB/sec:\n    double mbPerSec = 5 * (1.0 + 3*random.nextDouble());\n    message(String.format(Locale.ROOT, \"top: will rate limit file fetch to %.2f MB/sec\", mbPerSec));\n    fetchRateLimiter = new RateLimiter.SimpleRateLimiter(mbPerSec);\n    this.curPrimaryTCPPort = primaryTCPPort;\n    \n    start(curPrimaryGen);\n\n    // Handles fetching files from primary:\n    jobs = new Jobs(this);\n    jobs.setName(\"R\" + id + \".copyJobs\");\n    jobs.setDaemon(true);\n    jobs.start();\n  }\n\n","sourceOld":"  public SimpleReplicaNode(Random random, int id, int tcpPort, Path indexPath, long curPrimaryGen, int primaryTCPPort, SearcherFactory searcherFactory) throws IOException {\n    super(id, getDirectory(random, id, indexPath), searcherFactory);\n    this.tcpPort = tcpPort;\n    this.random = new Random(random.nextLong());\n\n    // Random IO throttling on file copies: 5 - 20 MB/sec:\n    double mbPerSec = 5 * (1.0 + 3*random.nextDouble());\n    message(String.format(Locale.ROOT, \"top: will rate limit file fetch to %.2f MB/sec\", mbPerSec));\n    fetchRateLimiter = new RateLimiter.SimpleRateLimiter(mbPerSec);\n    this.curPrimaryTCPPort = primaryTCPPort;\n    \n    start(curPrimaryGen);\n\n    // Handles fetching files from primary:\n    jobs = new Jobs(this);\n    jobs.setName(\"R\" + id + \".copyJobs\");\n    jobs.setDaemon(true);\n    jobs.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b844e2ae5435a8d4d925003c10027c25e26e02d","date":1455044345,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimpleReplicaNode#SimpleReplicaNode(Random,int,int,Path,long,int,SearcherFactory,boolean).mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimpleReplicaNode#SimpleReplicaNode(Random,int,int,Path,long,int,SearcherFactory,boolean).mjava","sourceNew":"  public SimpleReplicaNode(Random random, int id, int tcpPort, Path indexPath, long curPrimaryGen, int primaryTCPPort,\n                           SearcherFactory searcherFactory, boolean doCheckIndexOnClose) throws IOException {\n    super(id, getDirectory(random, id, indexPath, doCheckIndexOnClose), searcherFactory, System.out);\n    this.tcpPort = tcpPort;\n    this.random = new Random(random.nextLong());\n\n    // Random IO throttling on file copies: 5 - 20 MB/sec:\n    double mbPerSec = 5 * (1.0 + 3*random.nextDouble());\n    message(String.format(Locale.ROOT, \"top: will rate limit file fetch to %.2f MB/sec\", mbPerSec));\n    fetchRateLimiter = new RateLimiter.SimpleRateLimiter(mbPerSec);\n    this.curPrimaryTCPPort = primaryTCPPort;\n    \n    start(curPrimaryGen);\n\n    // Handles fetching files from primary:\n    jobs = new Jobs(this);\n    jobs.setName(\"R\" + id + \".copyJobs\");\n    jobs.setDaemon(true);\n    jobs.start();\n  }\n\n","sourceOld":"  public SimpleReplicaNode(Random random, int id, int tcpPort, Path indexPath, long curPrimaryGen, int primaryTCPPort, SearcherFactory searcherFactory, boolean doCheckIndexOnClose) throws IOException {\n    super(id, getDirectory(random, id, indexPath, doCheckIndexOnClose), searcherFactory);\n    this.tcpPort = tcpPort;\n    this.random = new Random(random.nextLong());\n\n    // Random IO throttling on file copies: 5 - 20 MB/sec:\n    double mbPerSec = 5 * (1.0 + 3*random.nextDouble());\n    message(String.format(Locale.ROOT, \"top: will rate limit file fetch to %.2f MB/sec\", mbPerSec));\n    fetchRateLimiter = new RateLimiter.SimpleRateLimiter(mbPerSec);\n    this.curPrimaryTCPPort = primaryTCPPort;\n    \n    start(curPrimaryGen);\n\n    // Handles fetching files from primary:\n    jobs = new Jobs(this);\n    jobs.setName(\"R\" + id + \".copyJobs\");\n    jobs.setDaemon(true);\n    jobs.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68496c2200e559fb7802f7575427b7a482659afb","date":1455207618,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimpleReplicaNode#SimpleReplicaNode(Random,int,int,Path,long,int,SearcherFactory,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public SimpleReplicaNode(Random random, int id, int tcpPort, Path indexPath, long curPrimaryGen, int primaryTCPPort,\n                           SearcherFactory searcherFactory, boolean doCheckIndexOnClose) throws IOException {\n    super(id, getDirectory(random, id, indexPath, doCheckIndexOnClose), searcherFactory, System.out);\n    this.tcpPort = tcpPort;\n    this.random = new Random(random.nextLong());\n\n    // Random IO throttling on file copies: 5 - 20 MB/sec:\n    double mbPerSec = 5 * (1.0 + 3*random.nextDouble());\n    message(String.format(Locale.ROOT, \"top: will rate limit file fetch to %.2f MB/sec\", mbPerSec));\n    fetchRateLimiter = new RateLimiter.SimpleRateLimiter(mbPerSec);\n    this.curPrimaryTCPPort = primaryTCPPort;\n    \n    start(curPrimaryGen);\n\n    // Handles fetching files from primary:\n    jobs = new Jobs(this);\n    jobs.setName(\"R\" + id + \".copyJobs\");\n    jobs.setDaemon(true);\n    jobs.start();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2b844e2ae5435a8d4d925003c10027c25e26e02d":["38cf1409ac117286eb0df7d6ef31d9cfdad8cfec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68496c2200e559fb7802f7575427b7a482659afb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2b844e2ae5435a8d4d925003c10027c25e26e02d"],"38cf1409ac117286eb0df7d6ef31d9cfdad8cfec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68496c2200e559fb7802f7575427b7a482659afb"]},"commit2Childs":{"2b844e2ae5435a8d4d925003c10027c25e26e02d":["68496c2200e559fb7802f7575427b7a482659afb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["68496c2200e559fb7802f7575427b7a482659afb","38cf1409ac117286eb0df7d6ef31d9cfdad8cfec"],"68496c2200e559fb7802f7575427b7a482659afb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"38cf1409ac117286eb0df7d6ef31d9cfdad8cfec":["2b844e2ae5435a8d4d925003c10027c25e26e02d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}