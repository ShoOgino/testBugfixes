{"path":"solr/core/src/java/org/apache/solr/security/JWTVerificationkeyResolver#resolveKey(JsonWebSignature,List[JsonWebStructure]).mjava","commits":[{"id":"43b93409dee3306c3446b1f24bced7b660398bd3","date":1568113307,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/JWTVerificationkeyResolver#resolveKey(JsonWebSignature,List[JsonWebStructure]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Key resolveKey(JsonWebSignature jws, List<JsonWebStructure> nestingContext) throws UnresolvableKeyException {\n    JsonWebKey theChosenOne;\n    List<JsonWebKey> jsonWebKeys = new ArrayList<>();\n\n\n    try {\n      // Add all keys into a master list\n      for (HttpsJwks hjwks : issuerConfig.getHttpsJwks()) {\n        jsonWebKeys.addAll(hjwks.getJsonWebKeys());\n      }\n\n      theChosenOne = verificationJwkSelector.select(jws, jsonWebKeys);\n      if (theChosenOne == null) {\n        log.debug(\"Refreshing JWKs from all {} locations, as no suitable verification key for JWS w/ header {} was found in {}\",\n            issuerConfig.getHttpsJwks().size(), jws.getHeaders().getFullHeaderAsJsonString(), jsonWebKeys);\n\n        jsonWebKeys.clear();\n        for (HttpsJwks hjwks : issuerConfig.getHttpsJwks()) {\n          hjwks.refresh();\n          jsonWebKeys.addAll(hjwks.getJsonWebKeys());\n        }\n        theChosenOne = verificationJwkSelector.select(jws, jsonWebKeys);\n      }\n    } catch (JoseException | IOException e) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Unable to find a suitable verification key for JWS w/ header \").append(jws.getHeaders().getFullHeaderAsJsonString());\n      sb.append(\" due to an unexpected exception (\").append(e).append(\") while obtaining or using keys from JWKS endpoints at \");\n      sb.append(issuerConfig.getJwksUrl());\n      throw new UnresolvableKeyException(sb.toString(), e);\n    }\n\n    if (theChosenOne == null) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Unable to find a suitable verification key for JWS w/ header \").append(jws.getHeaders().getFullHeaderAsJsonString());\n      sb.append(\" from JWKs \").append(jsonWebKeys).append(\" obtained from \").append(issuerConfig.getJwksUrl());\n      throw new UnresolvableKeyException(sb.toString());\n    }\n\n    return theChosenOne.getKey();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ac780c217504f0ca673ac5dcb98768984267c60","date":1568879420,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/JWTVerificationkeyResolver#resolveKey(JsonWebSignature,List[JsonWebStructure]).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/JWTVerificationkeyResolver#resolveKey(JsonWebSignature,List[JsonWebStructure]).mjava","sourceNew":"  @Override\n  public Key resolveKey(JsonWebSignature jws, List<JsonWebStructure> nestingContext) throws UnresolvableKeyException {\n    JsonWebKey theChosenOne;\n    List<JsonWebKey> jsonWebKeys = new ArrayList<>();\n\n    String keysSource = \"N/A\";\n    try {\n      String tokenIssuer = JwtClaims.parse(jws.getUnverifiedPayload()).getIssuer();\n      JWTIssuerConfig issuerConfig;\n      if (tokenIssuer == null) {\n        if (requireIssuer) {\n          throw new UnresolvableKeyException(\"Token does not contain required issuer claim\");\n        } else if (issuerConfigs.size() == 1) {\n          issuerConfig = issuerConfigs.values().iterator().next();\n        } else {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Signature verifiction not supported for multiple issuers without 'iss' claim in token.\");\n        }\n      } else {\n        issuerConfig = issuerConfigs.get(tokenIssuer);\n        if (issuerConfig == null) {\n          if (issuerConfigs.size() > 1) {\n            throw new UnresolvableKeyException(\"No issuers configured for iss='\" + tokenIssuer + \"', cannot validate signature\");\n          } else if (issuerConfigs.size() == 1) {\n            issuerConfig = issuerConfigs.values().iterator().next();\n            log.debug(\"No issuer matching token's iss claim, but exactly one configured, selecting that one\");\n          } else {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Signature verifiction failed due to no configured issuer with id \" + tokenIssuer);\n          }\n        }\n      }\n\n      // Add all keys into a master list\n      if (issuerConfig.usesHttpsJwk()) {\n        keysSource = \"[\" + String.join(\", \", issuerConfig.getJwksUrls()) + \"]\";\n        for (HttpsJwks hjwks : issuerConfig.getHttpsJwks()) {\n          jsonWebKeys.addAll(hjwks.getJsonWebKeys());\n        }\n      } else {\n        keysSource = \"static list of keys in security.json\";\n        jsonWebKeys.addAll(issuerConfig.getJsonWebKeySet().getJsonWebKeys());\n      }\n\n      theChosenOne = verificationJwkSelector.select(jws, jsonWebKeys);\n      if (theChosenOne == null && issuerConfig.usesHttpsJwk()) {\n        log.debug(\"Refreshing JWKs from all {} locations, as no suitable verification key for JWS w/ header {} was found in {}\",\n            issuerConfig.getHttpsJwks().size(), jws.getHeaders().getFullHeaderAsJsonString(), jsonWebKeys);\n\n        jsonWebKeys.clear();\n        for (HttpsJwks hjwks : issuerConfig.getHttpsJwks()) {\n          hjwks.refresh();\n          jsonWebKeys.addAll(hjwks.getJsonWebKeys());\n        }\n        theChosenOne = verificationJwkSelector.select(jws, jsonWebKeys);\n      }\n    } catch (JoseException | IOException | InvalidJwtException | MalformedClaimException e) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Unable to find a suitable verification key for JWS w/ header \").append(jws.getHeaders().getFullHeaderAsJsonString());\n      sb.append(\" due to an unexpected exception (\").append(e).append(\") while obtaining or using keys from source \");\n      sb.append(keysSource);\n      throw new UnresolvableKeyException(sb.toString(), e);\n    }\n\n    if (theChosenOne == null) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Unable to find a suitable verification key for JWS w/ header \").append(jws.getHeaders().getFullHeaderAsJsonString());\n      sb.append(\" from \").append(jsonWebKeys.size()).append(\" keys from source \").append(keysSource);\n      throw new UnresolvableKeyException(sb.toString());\n    }\n\n    return theChosenOne.getKey();\n  }\n\n","sourceOld":"  @Override\n  public Key resolveKey(JsonWebSignature jws, List<JsonWebStructure> nestingContext) throws UnresolvableKeyException {\n    JsonWebKey theChosenOne;\n    List<JsonWebKey> jsonWebKeys = new ArrayList<>();\n\n\n    try {\n      // Add all keys into a master list\n      for (HttpsJwks hjwks : issuerConfig.getHttpsJwks()) {\n        jsonWebKeys.addAll(hjwks.getJsonWebKeys());\n      }\n\n      theChosenOne = verificationJwkSelector.select(jws, jsonWebKeys);\n      if (theChosenOne == null) {\n        log.debug(\"Refreshing JWKs from all {} locations, as no suitable verification key for JWS w/ header {} was found in {}\",\n            issuerConfig.getHttpsJwks().size(), jws.getHeaders().getFullHeaderAsJsonString(), jsonWebKeys);\n\n        jsonWebKeys.clear();\n        for (HttpsJwks hjwks : issuerConfig.getHttpsJwks()) {\n          hjwks.refresh();\n          jsonWebKeys.addAll(hjwks.getJsonWebKeys());\n        }\n        theChosenOne = verificationJwkSelector.select(jws, jsonWebKeys);\n      }\n    } catch (JoseException | IOException e) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Unable to find a suitable verification key for JWS w/ header \").append(jws.getHeaders().getFullHeaderAsJsonString());\n      sb.append(\" due to an unexpected exception (\").append(e).append(\") while obtaining or using keys from JWKS endpoints at \");\n      sb.append(issuerConfig.getJwksUrl());\n      throw new UnresolvableKeyException(sb.toString(), e);\n    }\n\n    if (theChosenOne == null) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Unable to find a suitable verification key for JWS w/ header \").append(jws.getHeaders().getFullHeaderAsJsonString());\n      sb.append(\" from JWKs \").append(jsonWebKeys).append(\" obtained from \").append(issuerConfig.getJwksUrl());\n      throw new UnresolvableKeyException(sb.toString());\n    }\n\n    return theChosenOne.getKey();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/JWTVerificationkeyResolver#resolveKey(JsonWebSignature,List[JsonWebStructure]).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/JWTVerificationkeyResolver#resolveKey(JsonWebSignature,List[JsonWebStructure]).mjava","sourceNew":"  @Override\n  public Key resolveKey(JsonWebSignature jws, List<JsonWebStructure> nestingContext) throws UnresolvableKeyException {\n    JsonWebKey theChosenOne;\n    List<JsonWebKey> jsonWebKeys = new ArrayList<>();\n\n    String keysSource = \"N/A\";\n    try {\n      String tokenIssuer = JwtClaims.parse(jws.getUnverifiedPayload()).getIssuer();\n      JWTIssuerConfig issuerConfig;\n      if (tokenIssuer == null) {\n        if (requireIssuer) {\n          throw new UnresolvableKeyException(\"Token does not contain required issuer claim\");\n        } else if (issuerConfigs.size() == 1) {\n          issuerConfig = issuerConfigs.values().iterator().next();\n        } else {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Signature verifiction not supported for multiple issuers without 'iss' claim in token.\");\n        }\n      } else {\n        issuerConfig = issuerConfigs.get(tokenIssuer);\n        if (issuerConfig == null) {\n          if (issuerConfigs.size() > 1) {\n            throw new UnresolvableKeyException(\"No issuers configured for iss='\" + tokenIssuer + \"', cannot validate signature\");\n          } else if (issuerConfigs.size() == 1) {\n            issuerConfig = issuerConfigs.values().iterator().next();\n            log.debug(\"No issuer matching token's iss claim, but exactly one configured, selecting that one\");\n          } else {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Signature verifiction failed due to no configured issuer with id \" + tokenIssuer);\n          }\n        }\n      }\n\n      // Add all keys into a master list\n      if (issuerConfig.usesHttpsJwk()) {\n        keysSource = \"[\" + String.join(\", \", issuerConfig.getJwksUrls()) + \"]\";\n        for (HttpsJwks hjwks : issuerConfig.getHttpsJwks()) {\n          jsonWebKeys.addAll(hjwks.getJsonWebKeys());\n        }\n      } else {\n        keysSource = \"static list of keys in security.json\";\n        jsonWebKeys.addAll(issuerConfig.getJsonWebKeySet().getJsonWebKeys());\n      }\n\n      theChosenOne = verificationJwkSelector.select(jws, jsonWebKeys);\n      if (theChosenOne == null && issuerConfig.usesHttpsJwk()) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"Refreshing JWKs from all {} locations, as no suitable verification key for JWS w/ header {} was found in {}\",\n              issuerConfig.getHttpsJwks().size(), jws.getHeaders().getFullHeaderAsJsonString(), jsonWebKeys);\n        }\n\n        jsonWebKeys.clear();\n        for (HttpsJwks hjwks : issuerConfig.getHttpsJwks()) {\n          hjwks.refresh();\n          jsonWebKeys.addAll(hjwks.getJsonWebKeys());\n        }\n        theChosenOne = verificationJwkSelector.select(jws, jsonWebKeys);\n      }\n    } catch (JoseException | IOException | InvalidJwtException | MalformedClaimException e) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Unable to find a suitable verification key for JWS w/ header \").append(jws.getHeaders().getFullHeaderAsJsonString());\n      sb.append(\" due to an unexpected exception (\").append(e).append(\") while obtaining or using keys from source \");\n      sb.append(keysSource);\n      throw new UnresolvableKeyException(sb.toString(), e);\n    }\n\n    if (theChosenOne == null) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Unable to find a suitable verification key for JWS w/ header \").append(jws.getHeaders().getFullHeaderAsJsonString());\n      sb.append(\" from \").append(jsonWebKeys.size()).append(\" keys from source \").append(keysSource);\n      throw new UnresolvableKeyException(sb.toString());\n    }\n\n    return theChosenOne.getKey();\n  }\n\n","sourceOld":"  @Override\n  public Key resolveKey(JsonWebSignature jws, List<JsonWebStructure> nestingContext) throws UnresolvableKeyException {\n    JsonWebKey theChosenOne;\n    List<JsonWebKey> jsonWebKeys = new ArrayList<>();\n\n    String keysSource = \"N/A\";\n    try {\n      String tokenIssuer = JwtClaims.parse(jws.getUnverifiedPayload()).getIssuer();\n      JWTIssuerConfig issuerConfig;\n      if (tokenIssuer == null) {\n        if (requireIssuer) {\n          throw new UnresolvableKeyException(\"Token does not contain required issuer claim\");\n        } else if (issuerConfigs.size() == 1) {\n          issuerConfig = issuerConfigs.values().iterator().next();\n        } else {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Signature verifiction not supported for multiple issuers without 'iss' claim in token.\");\n        }\n      } else {\n        issuerConfig = issuerConfigs.get(tokenIssuer);\n        if (issuerConfig == null) {\n          if (issuerConfigs.size() > 1) {\n            throw new UnresolvableKeyException(\"No issuers configured for iss='\" + tokenIssuer + \"', cannot validate signature\");\n          } else if (issuerConfigs.size() == 1) {\n            issuerConfig = issuerConfigs.values().iterator().next();\n            log.debug(\"No issuer matching token's iss claim, but exactly one configured, selecting that one\");\n          } else {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Signature verifiction failed due to no configured issuer with id \" + tokenIssuer);\n          }\n        }\n      }\n\n      // Add all keys into a master list\n      if (issuerConfig.usesHttpsJwk()) {\n        keysSource = \"[\" + String.join(\", \", issuerConfig.getJwksUrls()) + \"]\";\n        for (HttpsJwks hjwks : issuerConfig.getHttpsJwks()) {\n          jsonWebKeys.addAll(hjwks.getJsonWebKeys());\n        }\n      } else {\n        keysSource = \"static list of keys in security.json\";\n        jsonWebKeys.addAll(issuerConfig.getJsonWebKeySet().getJsonWebKeys());\n      }\n\n      theChosenOne = verificationJwkSelector.select(jws, jsonWebKeys);\n      if (theChosenOne == null && issuerConfig.usesHttpsJwk()) {\n        log.debug(\"Refreshing JWKs from all {} locations, as no suitable verification key for JWS w/ header {} was found in {}\",\n            issuerConfig.getHttpsJwks().size(), jws.getHeaders().getFullHeaderAsJsonString(), jsonWebKeys);\n\n        jsonWebKeys.clear();\n        for (HttpsJwks hjwks : issuerConfig.getHttpsJwks()) {\n          hjwks.refresh();\n          jsonWebKeys.addAll(hjwks.getJsonWebKeys());\n        }\n        theChosenOne = verificationJwkSelector.select(jws, jsonWebKeys);\n      }\n    } catch (JoseException | IOException | InvalidJwtException | MalformedClaimException e) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Unable to find a suitable verification key for JWS w/ header \").append(jws.getHeaders().getFullHeaderAsJsonString());\n      sb.append(\" due to an unexpected exception (\").append(e).append(\") while obtaining or using keys from source \");\n      sb.append(keysSource);\n      throw new UnresolvableKeyException(sb.toString(), e);\n    }\n\n    if (theChosenOne == null) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Unable to find a suitable verification key for JWS w/ header \").append(jws.getHeaders().getFullHeaderAsJsonString());\n      sb.append(\" from \").append(jsonWebKeys.size()).append(\" keys from source \").append(keysSource);\n      throw new UnresolvableKeyException(sb.toString());\n    }\n\n    return theChosenOne.getKey();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e","date":1596664368,"type":3,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/JWTVerificationkeyResolver#resolveKey(JsonWebSignature,List[JsonWebStructure]).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/JWTVerificationkeyResolver#resolveKey(JsonWebSignature,List[JsonWebStructure]).mjava","sourceNew":"  @Override\n  public Key resolveKey(JsonWebSignature jws, List<JsonWebStructure> nestingContext) throws UnresolvableKeyException {\n    JsonWebKey theChosenOne;\n    List<JsonWebKey> jsonWebKeys = new ArrayList<>();\n\n    String keysSource = \"N/A\";\n    try {\n      String tokenIssuer = JwtClaims.parse(jws.getUnverifiedPayload()).getIssuer();\n      JWTIssuerConfig issuerConfig;\n      if (tokenIssuer == null) {\n        if (requireIssuer) {\n          throw new UnresolvableKeyException(\"Token does not contain required issuer claim\");\n        } else if (issuerConfigs.size() == 1) {\n          issuerConfig = issuerConfigs.values().iterator().next();\n        } else {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Signature verifiction not supported for multiple issuers without 'iss' claim in token.\");\n        }\n      } else {\n        issuerConfig = issuerConfigs.get(tokenIssuer);\n        if (issuerConfig == null) {\n          if (issuerConfigs.size() > 1) {\n            throw new UnresolvableKeyException(\"No issuers configured for iss='\" + tokenIssuer + \"', cannot validate signature\");\n          } else if (issuerConfigs.size() == 1) {\n            issuerConfig = issuerConfigs.values().iterator().next();\n            log.debug(\"No issuer matching token's iss claim, but exactly one configured, selecting that one\");\n          } else {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Signature verifiction failed due to no configured issuer with id \" + tokenIssuer);\n          }\n        }\n      }\n\n      // Add all keys into a leader list\n      if (issuerConfig.usesHttpsJwk()) {\n        keysSource = \"[\" + String.join(\", \", issuerConfig.getJwksUrls()) + \"]\";\n        for (HttpsJwks hjwks : issuerConfig.getHttpsJwks()) {\n          jsonWebKeys.addAll(hjwks.getJsonWebKeys());\n        }\n      } else {\n        keysSource = \"static list of keys in security.json\";\n        jsonWebKeys.addAll(issuerConfig.getJsonWebKeySet().getJsonWebKeys());\n      }\n\n      theChosenOne = verificationJwkSelector.select(jws, jsonWebKeys);\n      if (theChosenOne == null && issuerConfig.usesHttpsJwk()) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"Refreshing JWKs from all {} locations, as no suitable verification key for JWS w/ header {} was found in {}\",\n              issuerConfig.getHttpsJwks().size(), jws.getHeaders().getFullHeaderAsJsonString(), jsonWebKeys);\n        }\n\n        jsonWebKeys.clear();\n        for (HttpsJwks hjwks : issuerConfig.getHttpsJwks()) {\n          hjwks.refresh();\n          jsonWebKeys.addAll(hjwks.getJsonWebKeys());\n        }\n        theChosenOne = verificationJwkSelector.select(jws, jsonWebKeys);\n      }\n    } catch (JoseException | IOException | InvalidJwtException | MalformedClaimException e) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Unable to find a suitable verification key for JWS w/ header \").append(jws.getHeaders().getFullHeaderAsJsonString());\n      sb.append(\" due to an unexpected exception (\").append(e).append(\") while obtaining or using keys from source \");\n      sb.append(keysSource);\n      throw new UnresolvableKeyException(sb.toString(), e);\n    }\n\n    if (theChosenOne == null) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Unable to find a suitable verification key for JWS w/ header \").append(jws.getHeaders().getFullHeaderAsJsonString());\n      sb.append(\" from \").append(jsonWebKeys.size()).append(\" keys from source \").append(keysSource);\n      throw new UnresolvableKeyException(sb.toString());\n    }\n\n    return theChosenOne.getKey();\n  }\n\n","sourceOld":"  @Override\n  public Key resolveKey(JsonWebSignature jws, List<JsonWebStructure> nestingContext) throws UnresolvableKeyException {\n    JsonWebKey theChosenOne;\n    List<JsonWebKey> jsonWebKeys = new ArrayList<>();\n\n    String keysSource = \"N/A\";\n    try {\n      String tokenIssuer = JwtClaims.parse(jws.getUnverifiedPayload()).getIssuer();\n      JWTIssuerConfig issuerConfig;\n      if (tokenIssuer == null) {\n        if (requireIssuer) {\n          throw new UnresolvableKeyException(\"Token does not contain required issuer claim\");\n        } else if (issuerConfigs.size() == 1) {\n          issuerConfig = issuerConfigs.values().iterator().next();\n        } else {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Signature verifiction not supported for multiple issuers without 'iss' claim in token.\");\n        }\n      } else {\n        issuerConfig = issuerConfigs.get(tokenIssuer);\n        if (issuerConfig == null) {\n          if (issuerConfigs.size() > 1) {\n            throw new UnresolvableKeyException(\"No issuers configured for iss='\" + tokenIssuer + \"', cannot validate signature\");\n          } else if (issuerConfigs.size() == 1) {\n            issuerConfig = issuerConfigs.values().iterator().next();\n            log.debug(\"No issuer matching token's iss claim, but exactly one configured, selecting that one\");\n          } else {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Signature verifiction failed due to no configured issuer with id \" + tokenIssuer);\n          }\n        }\n      }\n\n      // Add all keys into a master list\n      if (issuerConfig.usesHttpsJwk()) {\n        keysSource = \"[\" + String.join(\", \", issuerConfig.getJwksUrls()) + \"]\";\n        for (HttpsJwks hjwks : issuerConfig.getHttpsJwks()) {\n          jsonWebKeys.addAll(hjwks.getJsonWebKeys());\n        }\n      } else {\n        keysSource = \"static list of keys in security.json\";\n        jsonWebKeys.addAll(issuerConfig.getJsonWebKeySet().getJsonWebKeys());\n      }\n\n      theChosenOne = verificationJwkSelector.select(jws, jsonWebKeys);\n      if (theChosenOne == null && issuerConfig.usesHttpsJwk()) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"Refreshing JWKs from all {} locations, as no suitable verification key for JWS w/ header {} was found in {}\",\n              issuerConfig.getHttpsJwks().size(), jws.getHeaders().getFullHeaderAsJsonString(), jsonWebKeys);\n        }\n\n        jsonWebKeys.clear();\n        for (HttpsJwks hjwks : issuerConfig.getHttpsJwks()) {\n          hjwks.refresh();\n          jsonWebKeys.addAll(hjwks.getJsonWebKeys());\n        }\n        theChosenOne = verificationJwkSelector.select(jws, jsonWebKeys);\n      }\n    } catch (JoseException | IOException | InvalidJwtException | MalformedClaimException e) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Unable to find a suitable verification key for JWS w/ header \").append(jws.getHeaders().getFullHeaderAsJsonString());\n      sb.append(\" due to an unexpected exception (\").append(e).append(\") while obtaining or using keys from source \");\n      sb.append(keysSource);\n      throw new UnresolvableKeyException(sb.toString(), e);\n    }\n\n    if (theChosenOne == null) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Unable to find a suitable verification key for JWS w/ header \").append(jws.getHeaders().getFullHeaderAsJsonString());\n      sb.append(\" from \").append(jsonWebKeys.size()).append(\" keys from source \").append(keysSource);\n      throw new UnresolvableKeyException(sb.toString());\n    }\n\n    return theChosenOne.getKey();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["1ac780c217504f0ca673ac5dcb98768984267c60"],"1ac780c217504f0ca673ac5dcb98768984267c60":["43b93409dee3306c3446b1f24bced7b660398bd3"],"43b93409dee3306c3446b1f24bced7b660398bd3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"]},"commit2Childs":{"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"1ac780c217504f0ca673ac5dcb98768984267c60":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"43b93409dee3306c3446b1f24bced7b660398bd3":["1ac780c217504f0ca673ac5dcb98768984267c60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["43b93409dee3306c3446b1f24bced7b660398bd3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}