{"path":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/SpanNearBuilder#getSpanQuery(Element).mjava","commits":[{"id":"d3c3c2404d1200c39220fa15054fae854db4e1ee","date":1140827958,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/SpanNearBuilder#getSpanQuery(Element).mjava","pathOld":"/dev/null","sourceNew":"\tpublic SpanQuery getSpanQuery(Element e) throws ParserException\r\n\t{\r\n\t\tString slopString=e.getAttribute(\"slop\");\r\n\t\tif((slopString==null)||(slopString.length()==0))\r\n\t\t{\r\n\t\t\tthrow new ParserException(\"SpanTermQuery missing slop property \");\t\t\t\r\n\t\t}\r\n\t\tint slop=Integer.parseInt(slopString);\r\n\t\tboolean inOrder=DOMUtils.getAttribute(e,\"inOrder\",false);\r\n\t\tArrayList spans=new ArrayList();\r\n\t\tfor (Node kid = e.getFirstChild(); kid != null; kid = kid.getNextSibling())\r\n\t\t{\r\n\t\t\t\tif (kid.getNodeType() == Node.ELEMENT_NODE) \r\n\t\t\t\t{\r\n\t\t\t\t\tspans.add(factory.getSpanQuery((Element) kid));\r\n\t\t\t\t}\r\n\t\t}\r\n\t\tSpanQuery[] spanQueries=(SpanQuery[]) spans.toArray(new SpanQuery[spans.size()]);\r\n\t\tSpanNearQuery snq=new SpanNearQuery(spanQueries,slop,inOrder);\r\n\t\treturn snq;\r\n\t}\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f36e18a5e46a204b9cdbed5aab560b9c37b93d3","date":1141249757,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/SpanNearBuilder#getSpanQuery(Element).mjava","pathOld":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/SpanNearBuilder#getSpanQuery(Element).mjava","sourceNew":"\tpublic SpanQuery getSpanQuery(Element e) throws ParserException\r\n\t{\r\n \t\tString slopString=DOMUtils.getAttributeOrFail(e,\"slop\");\r\n  \t\tint slop=Integer.parseInt(slopString);\r\n\t\tboolean inOrder=DOMUtils.getAttribute(e,\"inOrder\",false);\r\n\t\tArrayList spans=new ArrayList();\r\n\t\tfor (Node kid = e.getFirstChild(); kid != null; kid = kid.getNextSibling())\r\n\t\t{\r\n\t\t\t\tif (kid.getNodeType() == Node.ELEMENT_NODE) \r\n\t\t\t\t{\r\n\t\t\t\t\tspans.add(factory.getSpanQuery((Element) kid));\r\n\t\t\t\t}\r\n\t\t}\r\n\t\tSpanQuery[] spanQueries=(SpanQuery[]) spans.toArray(new SpanQuery[spans.size()]);\r\n\t\tSpanNearQuery snq=new SpanNearQuery(spanQueries,slop,inOrder);\r\n\t\treturn snq;\r\n\t}\r\n\n","sourceOld":"\tpublic SpanQuery getSpanQuery(Element e) throws ParserException\r\n\t{\r\n\t\tString slopString=e.getAttribute(\"slop\");\r\n\t\tif((slopString==null)||(slopString.length()==0))\r\n\t\t{\r\n\t\t\tthrow new ParserException(\"SpanTermQuery missing slop property \");\t\t\t\r\n\t\t}\r\n\t\tint slop=Integer.parseInt(slopString);\r\n\t\tboolean inOrder=DOMUtils.getAttribute(e,\"inOrder\",false);\r\n\t\tArrayList spans=new ArrayList();\r\n\t\tfor (Node kid = e.getFirstChild(); kid != null; kid = kid.getNextSibling())\r\n\t\t{\r\n\t\t\t\tif (kid.getNodeType() == Node.ELEMENT_NODE) \r\n\t\t\t\t{\r\n\t\t\t\t\tspans.add(factory.getSpanQuery((Element) kid));\r\n\t\t\t\t}\r\n\t\t}\r\n\t\tSpanQuery[] spanQueries=(SpanQuery[]) spans.toArray(new SpanQuery[spans.size()]);\r\n\t\tSpanNearQuery snq=new SpanNearQuery(spanQueries,slop,inOrder);\r\n\t\treturn snq;\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a361a621b184d9b73c9c9a37323a9845b8f8260","date":1226370946,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/SpanNearBuilder#getSpanQuery(Element).mjava","pathOld":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/SpanNearBuilder#getSpanQuery(Element).mjava","sourceNew":"\tpublic SpanQuery getSpanQuery(Element e) throws ParserException\n\t{\n \t\tString slopString=DOMUtils.getAttributeOrFail(e,\"slop\");\n  \t\tint slop=Integer.parseInt(slopString);\n\t\tboolean inOrder=DOMUtils.getAttribute(e,\"inOrder\",false);\n\t\tArrayList spans=new ArrayList();\n\t\tfor (Node kid = e.getFirstChild(); kid != null; kid = kid.getNextSibling())\n\t\t{\n\t\t\t\tif (kid.getNodeType() == Node.ELEMENT_NODE) \n\t\t\t\t{\n\t\t\t\t\tspans.add(factory.getSpanQuery((Element) kid));\n\t\t\t\t}\n\t\t}\n\t\tSpanQuery[] spanQueries=(SpanQuery[]) spans.toArray(new SpanQuery[spans.size()]);\n\t\tSpanNearQuery snq=new SpanNearQuery(spanQueries,slop,inOrder);\n\t\treturn snq;\n\t}\n\n","sourceOld":"\tpublic SpanQuery getSpanQuery(Element e) throws ParserException\r\n\t{\r\n \t\tString slopString=DOMUtils.getAttributeOrFail(e,\"slop\");\r\n  \t\tint slop=Integer.parseInt(slopString);\r\n\t\tboolean inOrder=DOMUtils.getAttribute(e,\"inOrder\",false);\r\n\t\tArrayList spans=new ArrayList();\r\n\t\tfor (Node kid = e.getFirstChild(); kid != null; kid = kid.getNextSibling())\r\n\t\t{\r\n\t\t\t\tif (kid.getNodeType() == Node.ELEMENT_NODE) \r\n\t\t\t\t{\r\n\t\t\t\t\tspans.add(factory.getSpanQuery((Element) kid));\r\n\t\t\t\t}\r\n\t\t}\r\n\t\tSpanQuery[] spanQueries=(SpanQuery[]) spans.toArray(new SpanQuery[spans.size()]);\r\n\t\tSpanNearQuery snq=new SpanNearQuery(spanQueries,slop,inOrder);\r\n\t\treturn snq;\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69d87d34a81230de56333f52f590caeb6d80667","date":1257848306,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/SpanNearBuilder#getSpanQuery(Element).mjava","pathOld":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/SpanNearBuilder#getSpanQuery(Element).mjava","sourceNew":"\tpublic SpanQuery getSpanQuery(Element e) throws ParserException\n\t{\n \t\tString slopString=DOMUtils.getAttributeOrFail(e,\"slop\");\n  \t\tint slop=Integer.parseInt(slopString);\n\t\tboolean inOrder=DOMUtils.getAttribute(e,\"inOrder\",false);\n\t\tArrayList<SpanQuery> spans=new ArrayList<SpanQuery>();\n\t\tfor (Node kid = e.getFirstChild(); kid != null; kid = kid.getNextSibling())\n\t\t{\n\t\t\t\tif (kid.getNodeType() == Node.ELEMENT_NODE) \n\t\t\t\t{\n\t\t\t\t\tspans.add(factory.getSpanQuery((Element) kid));\n\t\t\t\t}\n\t\t}\n\t\tSpanQuery[] spanQueries= spans.toArray(new SpanQuery[spans.size()]);\n\t\tSpanNearQuery snq=new SpanNearQuery(spanQueries,slop,inOrder);\n\t\treturn snq;\n\t}\n\n","sourceOld":"\tpublic SpanQuery getSpanQuery(Element e) throws ParserException\n\t{\n \t\tString slopString=DOMUtils.getAttributeOrFail(e,\"slop\");\n  \t\tint slop=Integer.parseInt(slopString);\n\t\tboolean inOrder=DOMUtils.getAttribute(e,\"inOrder\",false);\n\t\tArrayList spans=new ArrayList();\n\t\tfor (Node kid = e.getFirstChild(); kid != null; kid = kid.getNextSibling())\n\t\t{\n\t\t\t\tif (kid.getNodeType() == Node.ELEMENT_NODE) \n\t\t\t\t{\n\t\t\t\t\tspans.add(factory.getSpanQuery((Element) kid));\n\t\t\t\t}\n\t\t}\n\t\tSpanQuery[] spanQueries=(SpanQuery[]) spans.toArray(new SpanQuery[spans.size()]);\n\t\tSpanNearQuery snq=new SpanNearQuery(spanQueries,slop,inOrder);\n\t\treturn snq;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/SpanNearBuilder#getSpanQuery(Element).mjava","pathOld":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/SpanNearBuilder#getSpanQuery(Element).mjava","sourceNew":"\tpublic SpanQuery getSpanQuery(Element e) throws ParserException\n\t{\n \t\tString slopString=DOMUtils.getAttributeOrFail(e,\"slop\");\n  \t\tint slop=Integer.parseInt(slopString);\n\t\tboolean inOrder=DOMUtils.getAttribute(e,\"inOrder\",false);\n\t\tArrayList<SpanQuery> spans=new ArrayList<SpanQuery>();\n\t\tfor (Node kid = e.getFirstChild(); kid != null; kid = kid.getNextSibling())\n\t\t{\n\t\t\t\tif (kid.getNodeType() == Node.ELEMENT_NODE) \n\t\t\t\t{\n\t\t\t\t\tspans.add(factory.getSpanQuery((Element) kid));\n\t\t\t\t}\n\t\t}\n\t\tSpanQuery[] spanQueries= spans.toArray(new SpanQuery[spans.size()]);\n\t\tSpanNearQuery snq=new SpanNearQuery(spanQueries,slop,inOrder);\n\t\treturn snq;\n\t}\n\n","sourceOld":"\tpublic SpanQuery getSpanQuery(Element e) throws ParserException\n\t{\n \t\tString slopString=DOMUtils.getAttributeOrFail(e,\"slop\");\n  \t\tint slop=Integer.parseInt(slopString);\n\t\tboolean inOrder=DOMUtils.getAttribute(e,\"inOrder\",false);\n\t\tArrayList<SpanQuery> spans=new ArrayList<SpanQuery>();\n\t\tfor (Node kid = e.getFirstChild(); kid != null; kid = kid.getNextSibling())\n\t\t{\n\t\t\t\tif (kid.getNodeType() == Node.ELEMENT_NODE) \n\t\t\t\t{\n\t\t\t\t\tspans.add(factory.getSpanQuery((Element) kid));\n\t\t\t\t}\n\t\t}\n\t\tSpanQuery[] spanQueries= spans.toArray(new SpanQuery[spans.size()]);\n\t\tSpanNearQuery snq=new SpanNearQuery(spanQueries,slop,inOrder);\n\t\treturn snq;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c69d87d34a81230de56333f52f590caeb6d80667":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["4f36e18a5e46a204b9cdbed5aab560b9c37b93d3"],"d3c3c2404d1200c39220fa15054fae854db4e1ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4f36e18a5e46a204b9cdbed5aab560b9c37b93d3":["d3c3c2404d1200c39220fa15054fae854db4e1ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c69d87d34a81230de56333f52f590caeb6d80667"]},"commit2Childs":{"c69d87d34a81230de56333f52f590caeb6d80667":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3c3c2404d1200c39220fa15054fae854db4e1ee"],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["c69d87d34a81230de56333f52f590caeb6d80667"],"d3c3c2404d1200c39220fa15054fae854db4e1ee":["4f36e18a5e46a204b9cdbed5aab560b9c37b93d3"],"4f36e18a5e46a204b9cdbed5aab560b9c37b93d3":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}