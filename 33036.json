{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getSortedNumeric(FieldInfo).mjava","commits":[{"id":"d14ffaac9c4a4a2c750bf0cd956506802561e062","date":1402602036,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getSortedNumeric(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public synchronized SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericRawValues instance = sortedNumericInstances.get(field.number);\n    final SortedNumericEntry entry = sortedNumerics.get(field.number);\n    if (instance == null) {\n      // Lazy load\n      instance = loadSortedNumeric(entry);\n      sortedNumericInstances.put(field.number, instance);\n    }\n    \n    if (entry.docToAddress == null) {\n      final NumericDocValues single = instance.values;\n      final Bits docsWithField = getMissingBits(field.number, entry.values.missingOffset, entry.values.missingBytes);\n      return DocValues.singleton(single, docsWithField);\n    } else {\n      final NumericDocValues docToAddress = instance.docToAddress;\n      final NumericDocValues values = instance.values;\n      \n      return new SortedNumericDocValues() {\n        int valueStart;\n        int valueLimit;\n        \n        @Override\n        public void setDocument(int doc) {\n          valueStart = (int) docToAddress.get(doc);\n          valueLimit = (int) docToAddress.get(doc+1);\n        }\n        \n        @Override\n        public long valueAt(int index) {\n          return values.get(valueStart + index);\n        }\n        \n        @Override\n        public int count() {\n          return valueLimit - valueStart;\n        }\n      };\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getSortedNumeric(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public synchronized SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericRawValues instance = sortedNumericInstances.get(field.number);\n    final SortedNumericEntry entry = sortedNumerics.get(field.number);\n    if (instance == null) {\n      // Lazy load\n      instance = loadSortedNumeric(entry);\n      sortedNumericInstances.put(field.number, instance);\n    }\n    \n    if (entry.docToAddress == null) {\n      final NumericDocValues single = instance.values;\n      final Bits docsWithField = getMissingBits(field.number, entry.values.missingOffset, entry.values.missingBytes);\n      return DocValues.singleton(single, docsWithField);\n    } else {\n      final NumericDocValues docToAddress = instance.docToAddress;\n      final NumericDocValues values = instance.values;\n      \n      return new SortedNumericDocValues() {\n        int valueStart;\n        int valueLimit;\n        \n        @Override\n        public void setDocument(int doc) {\n          valueStart = (int) docToAddress.get(doc);\n          valueLimit = (int) docToAddress.get(doc+1);\n        }\n        \n        @Override\n        public long valueAt(int index) {\n          return values.get(valueStart + index);\n        }\n        \n        @Override\n        public int count() {\n          return valueLimit - valueStart;\n        }\n      };\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0936055c0eed56be3e4ae5c9db5b0e355390736a","date":1410874015,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getSortedNumeric(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getSortedNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public synchronized SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericRawValues instance = sortedNumericInstances.get(field.name);\n    final SortedNumericEntry entry = sortedNumerics.get(field.name);\n    if (instance == null) {\n      // Lazy load\n      instance = loadSortedNumeric(entry);\n      sortedNumericInstances.put(field.name, instance);\n    }\n    \n    if (entry.docToAddress == null) {\n      final NumericDocValues single = instance.values.numerics;\n      final Bits docsWithField = getMissingBits(field, entry.values.missingOffset, entry.values.missingBytes);\n      return DocValues.singleton(single, docsWithField);\n    } else {\n      final NumericDocValues docToAddress = instance.docToAddress.numerics;\n      final NumericDocValues values = instance.values.numerics;\n      \n      return new SortedNumericDocValues() {\n        int valueStart;\n        int valueLimit;\n        \n        @Override\n        public void setDocument(int doc) {\n          valueStart = (int) docToAddress.get(doc);\n          valueLimit = (int) docToAddress.get(doc+1);\n        }\n        \n        @Override\n        public long valueAt(int index) {\n          return values.get(valueStart + index);\n        }\n        \n        @Override\n        public int count() {\n          return valueLimit - valueStart;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericRawValues instance = sortedNumericInstances.get(field.number);\n    final SortedNumericEntry entry = sortedNumerics.get(field.number);\n    if (instance == null) {\n      // Lazy load\n      instance = loadSortedNumeric(entry);\n      sortedNumericInstances.put(field.number, instance);\n    }\n    \n    if (entry.docToAddress == null) {\n      final NumericDocValues single = instance.values;\n      final Bits docsWithField = getMissingBits(field.number, entry.values.missingOffset, entry.values.missingBytes);\n      return DocValues.singleton(single, docsWithField);\n    } else {\n      final NumericDocValues docToAddress = instance.docToAddress;\n      final NumericDocValues values = instance.values;\n      \n      return new SortedNumericDocValues() {\n        int valueStart;\n        int valueLimit;\n        \n        @Override\n        public void setDocument(int doc) {\n          valueStart = (int) docToAddress.get(doc);\n          valueLimit = (int) docToAddress.get(doc+1);\n        }\n        \n        @Override\n        public long valueAt(int index) {\n          return values.get(valueStart + index);\n        }\n        \n        @Override\n        public int count() {\n          return valueLimit - valueStart;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f80fee115148a0e4a0574560be06b494de821","date":1412069872,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getSortedNumeric(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getSortedNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public synchronized SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericRawValues instance = sortedNumericInstances.get(field.name);\n    final SortedNumericEntry entry = sortedNumerics.get(field.name);\n    if (instance == null) {\n      // Lazy load\n      instance = loadSortedNumeric(entry);\n      if (!merging) {\n        sortedNumericInstances.put(field.name, instance);\n        ramBytesUsed.addAndGet(instance.ramBytesUsed());\n      }\n    }\n    \n    if (entry.docToAddress == null) {\n      final NumericDocValues single = instance.values.numerics;\n      final Bits docsWithField = getMissingBits(field, entry.values.missingOffset, entry.values.missingBytes);\n      return DocValues.singleton(single, docsWithField);\n    } else {\n      final NumericDocValues docToAddress = instance.docToAddress.numerics;\n      final NumericDocValues values = instance.values.numerics;\n      \n      return new SortedNumericDocValues() {\n        int valueStart;\n        int valueLimit;\n        \n        @Override\n        public void setDocument(int doc) {\n          valueStart = (int) docToAddress.get(doc);\n          valueLimit = (int) docToAddress.get(doc+1);\n        }\n        \n        @Override\n        public long valueAt(int index) {\n          return values.get(valueStart + index);\n        }\n        \n        @Override\n        public int count() {\n          return valueLimit - valueStart;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericRawValues instance = sortedNumericInstances.get(field.name);\n    final SortedNumericEntry entry = sortedNumerics.get(field.name);\n    if (instance == null) {\n      // Lazy load\n      instance = loadSortedNumeric(entry);\n      sortedNumericInstances.put(field.name, instance);\n    }\n    \n    if (entry.docToAddress == null) {\n      final NumericDocValues single = instance.values.numerics;\n      final Bits docsWithField = getMissingBits(field, entry.values.missingOffset, entry.values.missingBytes);\n      return DocValues.singleton(single, docsWithField);\n    } else {\n      final NumericDocValues docToAddress = instance.docToAddress.numerics;\n      final NumericDocValues values = instance.values.numerics;\n      \n      return new SortedNumericDocValues() {\n        int valueStart;\n        int valueLimit;\n        \n        @Override\n        public void setDocument(int doc) {\n          valueStart = (int) docToAddress.get(doc);\n          valueLimit = (int) docToAddress.get(doc+1);\n        }\n        \n        @Override\n        public long valueAt(int index) {\n          return values.get(valueStart + index);\n        }\n        \n        @Override\n        public int count() {\n          return valueLimit - valueStart;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getSortedNumeric(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getSortedNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public synchronized SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericRawValues instance = sortedNumericInstances.get(field.name);\n    final SortedNumericEntry entry = sortedNumerics.get(field.name);\n    if (instance == null) {\n      // Lazy load\n      instance = loadSortedNumeric(entry);\n      if (!merging) {\n        sortedNumericInstances.put(field.name, instance);\n        ramBytesUsed.addAndGet(instance.ramBytesUsed());\n      }\n    }\n    \n    if (entry.docToAddress == null) {\n      final NumericDocValues single = instance.values.numerics;\n      final Bits docsWithField = getMissingBits(field, entry.values.missingOffset, entry.values.missingBytes);\n      return DocValues.singleton(single, docsWithField);\n    } else {\n      final NumericDocValues docToAddress = instance.docToAddress.numerics;\n      final NumericDocValues values = instance.values.numerics;\n      \n      return new SortedNumericDocValues() {\n        int valueStart;\n        int valueLimit;\n        \n        @Override\n        public void setDocument(int doc) {\n          valueStart = (int) docToAddress.get(doc);\n          valueLimit = (int) docToAddress.get(doc+1);\n        }\n        \n        @Override\n        public long valueAt(int index) {\n          return values.get(valueStart + index);\n        }\n        \n        @Override\n        public int count() {\n          return valueLimit - valueStart;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericRawValues instance = sortedNumericInstances.get(field.name);\n    final SortedNumericEntry entry = sortedNumerics.get(field.name);\n    if (instance == null) {\n      // Lazy load\n      instance = loadSortedNumeric(entry);\n      sortedNumericInstances.put(field.name, instance);\n    }\n    \n    if (entry.docToAddress == null) {\n      final NumericDocValues single = instance.values.numerics;\n      final Bits docsWithField = getMissingBits(field, entry.values.missingOffset, entry.values.missingBytes);\n      return DocValues.singleton(single, docsWithField);\n    } else {\n      final NumericDocValues docToAddress = instance.docToAddress.numerics;\n      final NumericDocValues values = instance.values.numerics;\n      \n      return new SortedNumericDocValues() {\n        int valueStart;\n        int valueLimit;\n        \n        @Override\n        public void setDocument(int doc) {\n          valueStart = (int) docToAddress.get(doc);\n          valueLimit = (int) docToAddress.get(doc+1);\n        }\n        \n        @Override\n        public long valueAt(int index) {\n          return values.get(valueStart + index);\n        }\n        \n        @Override\n        public int count() {\n          return valueLimit - valueStart;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getSortedNumeric(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getSortedNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public synchronized SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericRawValues instance = sortedNumericInstances.get(field.name);\n    final SortedNumericEntry entry = sortedNumerics.get(field.name);\n    if (instance == null) {\n      // Lazy load\n      instance = loadSortedNumeric(entry);\n      if (!merging) {\n        sortedNumericInstances.put(field.name, instance);\n        ramBytesUsed.addAndGet(instance.ramBytesUsed());\n      }\n    }\n    \n    if (entry.docToAddress == null) {\n      final LegacyNumericDocValues single = instance.values.numerics;\n      final Bits docsWithField = getMissingBits(field, entry.values.missingOffset, entry.values.missingBytes);\n      return DocValues.singleton(new LegacyNumericDocValuesWrapper(docsWithField, single));\n    } else {\n      final LegacyNumericDocValues docToAddress = instance.docToAddress.numerics;\n      final LegacyNumericDocValues values = instance.values.numerics;\n      \n      return new LegacySortedNumericDocValuesWrapper(new LegacySortedNumericDocValues() {\n        int valueStart;\n        int valueLimit;\n        \n        @Override\n        public void setDocument(int doc) {\n          valueStart = (int) docToAddress.get(doc);\n          valueLimit = (int) docToAddress.get(doc+1);\n        }\n        \n        @Override\n        public long valueAt(int index) {\n          return values.get(valueStart + index);\n        }\n        \n        @Override\n        public int count() {\n          return valueLimit - valueStart;\n        }\n        }, maxDoc);\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericRawValues instance = sortedNumericInstances.get(field.name);\n    final SortedNumericEntry entry = sortedNumerics.get(field.name);\n    if (instance == null) {\n      // Lazy load\n      instance = loadSortedNumeric(entry);\n      if (!merging) {\n        sortedNumericInstances.put(field.name, instance);\n        ramBytesUsed.addAndGet(instance.ramBytesUsed());\n      }\n    }\n    \n    if (entry.docToAddress == null) {\n      final NumericDocValues single = instance.values.numerics;\n      final Bits docsWithField = getMissingBits(field, entry.values.missingOffset, entry.values.missingBytes);\n      return DocValues.singleton(single, docsWithField);\n    } else {\n      final NumericDocValues docToAddress = instance.docToAddress.numerics;\n      final NumericDocValues values = instance.values.numerics;\n      \n      return new SortedNumericDocValues() {\n        int valueStart;\n        int valueLimit;\n        \n        @Override\n        public void setDocument(int doc) {\n          valueStart = (int) docToAddress.get(doc);\n          valueLimit = (int) docToAddress.get(doc+1);\n        }\n        \n        @Override\n        public long valueAt(int index) {\n          return values.get(valueStart + index);\n        }\n        \n        @Override\n        public int count() {\n          return valueLimit - valueStart;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getSortedNumeric(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getSortedNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public synchronized SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericRawValues instance = sortedNumericInstances.get(field.name);\n    final SortedNumericEntry entry = sortedNumerics.get(field.name);\n    if (instance == null) {\n      // Lazy load\n      instance = loadSortedNumeric(entry);\n      if (!merging) {\n        sortedNumericInstances.put(field.name, instance);\n        ramBytesUsed.addAndGet(instance.ramBytesUsed());\n      }\n    }\n    \n    if (entry.docToAddress == null) {\n      final LegacyNumericDocValues single = instance.values.numerics;\n      final Bits docsWithField = getMissingBits(field, entry.values.missingOffset, entry.values.missingBytes);\n      return DocValues.singleton(new LegacyNumericDocValuesWrapper(docsWithField, single));\n    } else {\n      final LegacyNumericDocValues docToAddress = instance.docToAddress.numerics;\n      final LegacyNumericDocValues values = instance.values.numerics;\n      \n      return new LegacySortedNumericDocValuesWrapper(new LegacySortedNumericDocValues() {\n        int valueStart;\n        int valueLimit;\n        \n        @Override\n        public void setDocument(int doc) {\n          valueStart = (int) docToAddress.get(doc);\n          valueLimit = (int) docToAddress.get(doc+1);\n        }\n        \n        @Override\n        public long valueAt(int index) {\n          return values.get(valueStart + index);\n        }\n        \n        @Override\n        public int count() {\n          return valueLimit - valueStart;\n        }\n        }, maxDoc);\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericRawValues instance = sortedNumericInstances.get(field.name);\n    final SortedNumericEntry entry = sortedNumerics.get(field.name);\n    if (instance == null) {\n      // Lazy load\n      instance = loadSortedNumeric(entry);\n      if (!merging) {\n        sortedNumericInstances.put(field.name, instance);\n        ramBytesUsed.addAndGet(instance.ramBytesUsed());\n      }\n    }\n    \n    if (entry.docToAddress == null) {\n      final NumericDocValues single = instance.values.numerics;\n      final Bits docsWithField = getMissingBits(field, entry.values.missingOffset, entry.values.missingBytes);\n      return DocValues.singleton(single, docsWithField);\n    } else {\n      final NumericDocValues docToAddress = instance.docToAddress.numerics;\n      final NumericDocValues values = instance.values.numerics;\n      \n      return new SortedNumericDocValues() {\n        int valueStart;\n        int valueLimit;\n        \n        @Override\n        public void setDocument(int doc) {\n          valueStart = (int) docToAddress.get(doc);\n          valueLimit = (int) docToAddress.get(doc+1);\n        }\n        \n        @Override\n        public long valueAt(int index) {\n          return values.get(valueStart + index);\n        }\n        \n        @Override\n        public int count() {\n          return valueLimit - valueStart;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getSortedNumeric(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getSortedNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public synchronized SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericRawValues instance = sortedNumericInstances.get(field.name);\n    final SortedNumericEntry entry = sortedNumerics.get(field.name);\n    if (instance == null) {\n      // Lazy load\n      instance = loadSortedNumeric(entry);\n      if (!merging) {\n        sortedNumericInstances.put(field.name, instance);\n        ramBytesUsed.addAndGet(instance.ramBytesUsed());\n      }\n    }\n    \n    if (entry.docToAddress == null) {\n      final LegacyNumericDocValues single = instance.values.numerics;\n      final Bits docsWithField = getMissingBits(field, entry.values.missingOffset, entry.values.missingBytes);\n      return DocValues.singleton(new LegacyNumericDocValuesWrapper(docsWithField, single));\n    } else {\n      final LegacyNumericDocValues docToAddress = instance.docToAddress.numerics;\n      final LegacyNumericDocValues values = instance.values.numerics;\n      \n      return new LegacySortedNumericDocValuesWrapper(new LegacySortedNumericDocValues() {\n        int valueStart;\n        int valueLimit;\n        \n        @Override\n        public void setDocument(int doc) {\n          valueStart = (int) docToAddress.get(doc);\n          valueLimit = (int) docToAddress.get(doc+1);\n        }\n        \n        @Override\n        public long valueAt(int index) {\n          return values.get(valueStart + index);\n        }\n        \n        @Override\n        public int count() {\n          return valueLimit - valueStart;\n        }\n        }, maxDoc);\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericRawValues instance = sortedNumericInstances.get(field.name);\n    final SortedNumericEntry entry = sortedNumerics.get(field.name);\n    if (instance == null) {\n      // Lazy load\n      instance = loadSortedNumeric(entry);\n      if (!merging) {\n        sortedNumericInstances.put(field.name, instance);\n        ramBytesUsed.addAndGet(instance.ramBytesUsed());\n      }\n    }\n    \n    if (entry.docToAddress == null) {\n      final NumericDocValues single = instance.values.numerics;\n      final Bits docsWithField = getMissingBits(field, entry.values.missingOffset, entry.values.missingBytes);\n      return DocValues.singleton(single, docsWithField);\n    } else {\n      final NumericDocValues docToAddress = instance.docToAddress.numerics;\n      final NumericDocValues values = instance.values.numerics;\n      \n      return new SortedNumericDocValues() {\n        int valueStart;\n        int valueLimit;\n        \n        @Override\n        public void setDocument(int doc) {\n          valueStart = (int) docToAddress.get(doc);\n          valueLimit = (int) docToAddress.get(doc+1);\n        }\n        \n        @Override\n        public long valueAt(int index) {\n          return values.get(valueStart + index);\n        }\n        \n        @Override\n        public int count() {\n          return valueLimit - valueStart;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f18fb78980c55a781fd9fdc505634171059b1d","date":1567674462,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getSortedNumeric(FieldInfo).mjava","sourceNew":null,"sourceOld":"  @Override\n  public synchronized SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericRawValues instance = sortedNumericInstances.get(field.name);\n    final SortedNumericEntry entry = sortedNumerics.get(field.name);\n    if (instance == null) {\n      // Lazy load\n      instance = loadSortedNumeric(entry);\n      if (!merging) {\n        sortedNumericInstances.put(field.name, instance);\n        ramBytesUsed.addAndGet(instance.ramBytesUsed());\n      }\n    }\n    \n    if (entry.docToAddress == null) {\n      final LegacyNumericDocValues single = instance.values.numerics;\n      final Bits docsWithField = getMissingBits(field, entry.values.missingOffset, entry.values.missingBytes);\n      return DocValues.singleton(new LegacyNumericDocValuesWrapper(docsWithField, single));\n    } else {\n      final LegacyNumericDocValues docToAddress = instance.docToAddress.numerics;\n      final LegacyNumericDocValues values = instance.values.numerics;\n      \n      return new LegacySortedNumericDocValuesWrapper(new LegacySortedNumericDocValues() {\n        int valueStart;\n        int valueLimit;\n        \n        @Override\n        public void setDocument(int doc) {\n          valueStart = (int) docToAddress.get(doc);\n          valueLimit = (int) docToAddress.get(doc+1);\n        }\n        \n        @Override\n        public long valueAt(int index) {\n          return values.get(valueStart + index);\n        }\n        \n        @Override\n        public int count() {\n          return valueLimit - valueStart;\n        }\n        }, maxDoc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bc8f80fee115148a0e4a0574560be06b494de821":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["0936055c0eed56be3e4ae5c9db5b0e355390736a","bc8f80fee115148a0e4a0574560be06b494de821"],"74f18fb78980c55a781fd9fdc505634171059b1d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["9bb9a29a5e71a90295f175df8919802993142c9a","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["9bb9a29a5e71a90295f175df8919802993142c9a"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["d14ffaac9c4a4a2c750bf0cd956506802561e062"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9bb9a29a5e71a90295f175df8919802993142c9a","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["74f18fb78980c55a781fd9fdc505634171059b1d"],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"bc8f80fee115148a0e4a0574560be06b494de821":["9bb9a29a5e71a90295f175df8919802993142c9a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"74f18fb78980c55a781fd9fdc505634171059b1d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["74f18fb78980c55a781fd9fdc505634171059b1d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["bc8f80fee115148a0e4a0574560be06b494de821","9bb9a29a5e71a90295f175df8919802993142c9a"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["0936055c0eed56be3e4ae5c9db5b0e355390736a","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}