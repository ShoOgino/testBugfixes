{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#SynonymFilterFactory(Map[String,String]).mjava","commits":[{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#SynonymFilterFactory(Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  public SynonymFilterFactory(Map<String,String> args) {\n    super(args);\n    ignoreCase = getBoolean(args, \"ignoreCase\", false);\n    tokenizerFactory = args.remove(\"tokenizerFactory\");\n    if (tokenizerFactory != null) {\n      assureMatchVersion();\n    }\n    synonyms = args.remove(\"synonyms\");\n    if (synonyms == null) {\n      throw new IllegalArgumentException(\"Missing required argument 'synonyms'.\");\n    }\n    format = args.remove(\"format\");\n    expand = getBoolean(args, \"expand\", true);\n\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ecd7bd52bf60fcbfecf79b3d2467cf7514ae16db"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dcae30df9fe9300569835aef42ec65802c7c0afb","date":1364859933,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#SynonymFilterFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#SynonymFilterFactory(Map[String,String]).mjava","sourceNew":"  public SynonymFilterFactory(Map<String,String> args) {\n    super(args);\n    ignoreCase = getBoolean(args, \"ignoreCase\", false);\n    tokenizerFactory = get(args, \"tokenizerFactory\");\n    if (tokenizerFactory != null) {\n      assureMatchVersion();\n    }\n    synonyms = require(args, \"synonyms\");\n    format = get(args, \"format\");\n    expand = getBoolean(args, \"expand\", true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  public SynonymFilterFactory(Map<String,String> args) {\n    super(args);\n    ignoreCase = getBoolean(args, \"ignoreCase\", false);\n    tokenizerFactory = args.remove(\"tokenizerFactory\");\n    if (tokenizerFactory != null) {\n      assureMatchVersion();\n    }\n    synonyms = args.remove(\"synonyms\");\n    if (synonyms == null) {\n      throw new IllegalArgumentException(\"Missing required argument 'synonyms'.\");\n    }\n    format = args.remove(\"format\");\n    expand = getBoolean(args, \"expand\", true);\n\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":null,"bugIntro":["ecd7bd52bf60fcbfecf79b3d2467cf7514ae16db"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ecd7bd52bf60fcbfecf79b3d2467cf7514ae16db","date":1368552110,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#SynonymFilterFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#SynonymFilterFactory(Map[String,String]).mjava","sourceNew":"  public SynonymFilterFactory(Map<String,String> args) {\n    super(args);\n    ignoreCase = getBoolean(args, \"ignoreCase\", false);\n    synonyms = require(args, \"synonyms\");\n    format = get(args, \"format\");\n    expand = getBoolean(args, \"expand\", true);\n\n    tokenizerFactory = get(args, \"tokenizerFactory\");\n    if (tokenizerFactory != null) {\n      assureMatchVersion();\n      tokArgs.put(\"luceneMatchVersion\", getLuceneMatchVersion().toString());\n      for (Iterator<String> itr = args.keySet().iterator(); itr.hasNext();) {\n        String key = itr.next();\n        tokArgs.put(key.replaceAll(\"^tokenizerFactory\\\\.\",\"\"), args.get(key));\n        itr.remove();\n      }\n    }\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  public SynonymFilterFactory(Map<String,String> args) {\n    super(args);\n    ignoreCase = getBoolean(args, \"ignoreCase\", false);\n    tokenizerFactory = get(args, \"tokenizerFactory\");\n    if (tokenizerFactory != null) {\n      assureMatchVersion();\n    }\n    synonyms = require(args, \"synonyms\");\n    format = get(args, \"format\");\n    expand = getBoolean(args, \"expand\", true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd","dcae30df9fe9300569835aef42ec65802c7c0afb"],"bugIntro":["623b5245fbd9d5af9f458826ba9ed3d6212db24d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a1607c8d45d996ef40c243758811c95b3670fd4d","date":1374047432,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#SynonymFilterFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#SynonymFilterFactory(Map[String,String]).mjava","sourceNew":"  public SynonymFilterFactory(Map<String,String> args) {\n    super(args);\n    ignoreCase = getBoolean(args, \"ignoreCase\", false);\n    synonyms = require(args, \"synonyms\");\n    format = get(args, \"format\");\n    expand = getBoolean(args, \"expand\", true);\n\n    analyzerName = get(args, \"analyzer\");\n    tokenizerFactory = get(args, \"tokenizerFactory\");\n    if (analyzerName != null && tokenizerFactory != null) {\n      throw new IllegalArgumentException(\"Analyzer and TokenizerFactory can't be specified both: \" +\n                                         analyzerName + \" and \" + tokenizerFactory);\n    }\n\n    if (tokenizerFactory != null) {\n      assureMatchVersion();\n      tokArgs.put(\"luceneMatchVersion\", getLuceneMatchVersion().toString());\n      for (Iterator<String> itr = args.keySet().iterator(); itr.hasNext();) {\n        String key = itr.next();\n        tokArgs.put(key.replaceAll(\"^tokenizerFactory\\\\.\",\"\"), args.get(key));\n        itr.remove();\n      }\n    }\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  public SynonymFilterFactory(Map<String,String> args) {\n    super(args);\n    ignoreCase = getBoolean(args, \"ignoreCase\", false);\n    synonyms = require(args, \"synonyms\");\n    format = get(args, \"format\");\n    expand = getBoolean(args, \"expand\", true);\n\n    tokenizerFactory = get(args, \"tokenizerFactory\");\n    if (tokenizerFactory != null) {\n      assureMatchVersion();\n      tokArgs.put(\"luceneMatchVersion\", getLuceneMatchVersion().toString());\n      for (Iterator<String> itr = args.keySet().iterator(); itr.hasNext();) {\n        String key = itr.next();\n        tokArgs.put(key.replaceAll(\"^tokenizerFactory\\\\.\",\"\"), args.get(key));\n        itr.remove();\n      }\n    }\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#SynonymFilterFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#SynonymFilterFactory(Map[String,String]).mjava","sourceNew":"  public SynonymFilterFactory(Map<String,String> args) {\n    super(args);\n    ignoreCase = getBoolean(args, \"ignoreCase\", false);\n    synonyms = require(args, \"synonyms\");\n    format = get(args, \"format\");\n    expand = getBoolean(args, \"expand\", true);\n\n    analyzerName = get(args, \"analyzer\");\n    tokenizerFactory = get(args, \"tokenizerFactory\");\n    if (analyzerName != null && tokenizerFactory != null) {\n      throw new IllegalArgumentException(\"Analyzer and TokenizerFactory can't be specified both: \" +\n                                         analyzerName + \" and \" + tokenizerFactory);\n    }\n\n    if (tokenizerFactory != null) {\n      assureMatchVersion();\n      tokArgs.put(\"luceneMatchVersion\", getLuceneMatchVersion().toString());\n      for (Iterator<String> itr = args.keySet().iterator(); itr.hasNext();) {\n        String key = itr.next();\n        tokArgs.put(key.replaceAll(\"^tokenizerFactory\\\\.\",\"\"), args.get(key));\n        itr.remove();\n      }\n    }\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  public SynonymFilterFactory(Map<String,String> args) {\n    super(args);\n    ignoreCase = getBoolean(args, \"ignoreCase\", false);\n    synonyms = require(args, \"synonyms\");\n    format = get(args, \"format\");\n    expand = getBoolean(args, \"expand\", true);\n\n    tokenizerFactory = get(args, \"tokenizerFactory\");\n    if (tokenizerFactory != null) {\n      assureMatchVersion();\n      tokArgs.put(\"luceneMatchVersion\", getLuceneMatchVersion().toString());\n      for (Iterator<String> itr = args.keySet().iterator(); itr.hasNext();) {\n        String key = itr.next();\n        tokArgs.put(key.replaceAll(\"^tokenizerFactory\\\\.\",\"\"), args.get(key));\n        itr.remove();\n      }\n    }\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"623b5245fbd9d5af9f458826ba9ed3d6212db24d","date":1421078865,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#SynonymFilterFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#SynonymFilterFactory(Map[String,String]).mjava","sourceNew":"  public SynonymFilterFactory(Map<String,String> args) {\n    super(args);\n    ignoreCase = getBoolean(args, \"ignoreCase\", false);\n    synonyms = require(args, \"synonyms\");\n    format = get(args, \"format\");\n    expand = getBoolean(args, \"expand\", true);\n\n    analyzerName = get(args, \"analyzer\");\n    tokenizerFactory = get(args, \"tokenizerFactory\");\n    if (analyzerName != null && tokenizerFactory != null) {\n      throw new IllegalArgumentException(\"Analyzer and TokenizerFactory can't be specified both: \" +\n                                         analyzerName + \" and \" + tokenizerFactory);\n    }\n\n    if (tokenizerFactory != null) {\n      tokArgs.put(\"luceneMatchVersion\", getLuceneMatchVersion().toString());\n      for (Iterator<String> itr = args.keySet().iterator(); itr.hasNext();) {\n        String key = itr.next();\n        tokArgs.put(key.replaceAll(\"^tokenizerFactory\\\\.\",\"\"), args.get(key));\n        itr.remove();\n      }\n    }\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  public SynonymFilterFactory(Map<String,String> args) {\n    super(args);\n    ignoreCase = getBoolean(args, \"ignoreCase\", false);\n    synonyms = require(args, \"synonyms\");\n    format = get(args, \"format\");\n    expand = getBoolean(args, \"expand\", true);\n\n    analyzerName = get(args, \"analyzer\");\n    tokenizerFactory = get(args, \"tokenizerFactory\");\n    if (analyzerName != null && tokenizerFactory != null) {\n      throw new IllegalArgumentException(\"Analyzer and TokenizerFactory can't be specified both: \" +\n                                         analyzerName + \" and \" + tokenizerFactory);\n    }\n\n    if (tokenizerFactory != null) {\n      assureMatchVersion();\n      tokArgs.put(\"luceneMatchVersion\", getLuceneMatchVersion().toString());\n      for (Iterator<String> itr = args.keySet().iterator(); itr.hasNext();) {\n        String key = itr.next();\n        tokArgs.put(key.replaceAll(\"^tokenizerFactory\\\\.\",\"\"), args.get(key));\n        itr.remove();\n      }\n    }\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":["ecd7bd52bf60fcbfecf79b3d2467cf7514ae16db"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ecd7bd52bf60fcbfecf79b3d2467cf7514ae16db":["dcae30df9fe9300569835aef42ec65802c7c0afb"],"dcae30df9fe9300569835aef42ec65802c7c0afb":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["ecd7bd52bf60fcbfecf79b3d2467cf7514ae16db"],"623b5245fbd9d5af9f458826ba9ed3d6212db24d":["a1607c8d45d996ef40c243758811c95b3670fd4d"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a1607c8d45d996ef40c243758811c95b3670fd4d":["ecd7bd52bf60fcbfecf79b3d2467cf7514ae16db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["623b5245fbd9d5af9f458826ba9ed3d6212db24d"]},"commit2Childs":{"ecd7bd52bf60fcbfecf79b3d2467cf7514ae16db":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","a1607c8d45d996ef40c243758811c95b3670fd4d"],"dcae30df9fe9300569835aef42ec65802c7c0afb":["ecd7bd52bf60fcbfecf79b3d2467cf7514ae16db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"623b5245fbd9d5af9f458826ba9ed3d6212db24d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["dcae30df9fe9300569835aef42ec65802c7c0afb"],"a1607c8d45d996ef40c243758811c95b3670fd4d":["623b5245fbd9d5af9f458826ba9ed3d6212db24d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}