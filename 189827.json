{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#waitForLeaderToSeeDownState(CoreDescriptor,String,boolean).mjava","commits":[{"id":"6b834dd353486678973f4157b3ba402ac3a7ca88","date":1329782329,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#waitForLeaderToSeeDownState(CoreDescriptor,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#waitForLeaderToSeeDownState(CoreDescriptor,String).mjava","sourceNew":"  private ZkCoreNodeProps waitForLeaderToSeeDownState(\n      CoreDescriptor descriptor, final String shardZkNodeName, boolean waitForNotLive) {\n    CloudDescriptor cloudDesc = descriptor.getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shard = cloudDesc.getShardId();\n    ZkCoreNodeProps leaderProps;\n    try {\n      // go straight to zk, not the cloud state - we must have current info\n      leaderProps = getLeaderProps(collection, shard);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (KeeperException e) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    String leaderBaseUrl = leaderProps.getBaseUrl();\n    String leaderCoreName = leaderProps.getCoreName();\n    \n    String ourUrl = ZkCoreNodeProps.getCoreUrl(getBaseUrl(),\n        descriptor.getName());\n    \n    boolean isLeader = leaderProps.getCoreUrl().equals(ourUrl);\n    if (!isLeader && !SKIP_AUTO_RECOVERY) {\n      // wait until the leader sees us as down before we are willing to accept\n      // updates.\n      CommonsHttpSolrServer server = null;\n      try {\n        server = new CommonsHttpSolrServer(leaderBaseUrl);\n      } catch (MalformedURLException e) {\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n      server.setConnectionTimeout(45000);\n      server.setSoTimeout(45000);\n      WaitForState prepCmd = new WaitForState();\n      prepCmd.setCoreName(leaderCoreName);\n      prepCmd.setNodeName(getNodeName());\n      prepCmd.setCoreNodeName(shardZkNodeName);\n      prepCmd.setState(ZkStateReader.DOWN);\n      prepCmd.setPauseFor(6000);\n      if (waitForNotLive){\n        prepCmd.setCheckLive(false);\n      }\n                          \n      \n      try {\n        server.request(prepCmd);\n      } catch (Exception e) {\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Could not talk to the leader\", e);\n      }\n      server.shutdown();\n    }\n    return leaderProps;\n  }\n\n","sourceOld":"  private ZkCoreNodeProps waitForLeaderToSeeDownState(\n      CoreDescriptor descriptor, final String shardZkNodeName) {\n    CloudDescriptor cloudDesc = descriptor.getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shard = cloudDesc.getShardId();\n    ZkCoreNodeProps leaderProps;\n    try {\n      // go straight to zk, not the cloud state - we must have current info\n      leaderProps = getLeaderProps(collection, shard);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (KeeperException e) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    String leaderBaseUrl = leaderProps.getBaseUrl();\n    String leaderCoreName = leaderProps.getCoreName();\n    \n    String ourUrl = ZkCoreNodeProps.getCoreUrl(getBaseUrl(),\n        descriptor.getName());\n    \n    boolean isLeader = leaderProps.getCoreUrl().equals(ourUrl);\n    if (!isLeader && !SKIP_AUTO_RECOVERY) {\n      // wait until the leader sees us as down before we are willing to accept\n      // updates.\n      CommonsHttpSolrServer server = null;\n      try {\n        server = new CommonsHttpSolrServer(leaderBaseUrl);\n      } catch (MalformedURLException e) {\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n      server.setConnectionTimeout(45000);\n      server.setSoTimeout(45000);\n      WaitForState prepCmd = new WaitForState();\n      prepCmd.setCoreName(leaderCoreName);\n      prepCmd.setNodeName(getNodeName());\n      prepCmd.setCoreNodeName(shardZkNodeName);\n      prepCmd.setState(ZkStateReader.DOWN);\n      prepCmd.setCheckLive(false);\n      \n      try {\n        server.request(prepCmd);\n      } catch (Exception e) {\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Could not talk to the leader\", e);\n      }\n      server.shutdown();\n    }\n    return leaderProps;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607ced52f2419a5f6bc6fddc1135855cf896374e","date":1329793508,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#waitForLeaderToSeeDownState(CoreDescriptor,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#waitForLeaderToSeeDownState(CoreDescriptor,String,boolean).mjava","sourceNew":"  private ZkCoreNodeProps waitForLeaderToSeeDownState(\n      CoreDescriptor descriptor, final String shardZkNodeName, boolean waitForNotLive) {\n    CloudDescriptor cloudDesc = descriptor.getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shard = cloudDesc.getShardId();\n    ZkCoreNodeProps leaderProps;\n    try {\n      // go straight to zk, not the cloud state - we must have current info\n      leaderProps = getLeaderProps(collection, shard);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (KeeperException e) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    String leaderBaseUrl = leaderProps.getBaseUrl();\n    String leaderCoreName = leaderProps.getCoreName();\n    \n    String ourUrl = ZkCoreNodeProps.getCoreUrl(getBaseUrl(),\n        descriptor.getName());\n    \n    boolean isLeader = leaderProps.getCoreUrl().equals(ourUrl);\n    if (!isLeader && !SKIP_AUTO_RECOVERY) {\n      // wait until the leader sees us as down before we are willing to accept\n      // updates.\n      CommonsHttpSolrServer server = null;\n      try {\n        server = new CommonsHttpSolrServer(leaderBaseUrl);\n      } catch (MalformedURLException e) {\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n      server.setConnectionTimeout(45000);\n      server.setSoTimeout(45000);\n      WaitForState prepCmd = new WaitForState();\n      prepCmd.setCoreName(leaderCoreName);\n      prepCmd.setNodeName(getNodeName());\n      prepCmd.setCoreNodeName(shardZkNodeName);\n      prepCmd.setState(ZkStateReader.DOWN);\n      prepCmd.setPauseFor(10000);\n      if (waitForNotLive){\n        prepCmd.setCheckLive(false);\n      }\n                          \n      \n      try {\n        server.request(prepCmd);\n      } catch (Exception e) {\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Could not talk to the leader\", e);\n      }\n      server.shutdown();\n    }\n    return leaderProps;\n  }\n\n","sourceOld":"  private ZkCoreNodeProps waitForLeaderToSeeDownState(\n      CoreDescriptor descriptor, final String shardZkNodeName, boolean waitForNotLive) {\n    CloudDescriptor cloudDesc = descriptor.getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shard = cloudDesc.getShardId();\n    ZkCoreNodeProps leaderProps;\n    try {\n      // go straight to zk, not the cloud state - we must have current info\n      leaderProps = getLeaderProps(collection, shard);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (KeeperException e) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    String leaderBaseUrl = leaderProps.getBaseUrl();\n    String leaderCoreName = leaderProps.getCoreName();\n    \n    String ourUrl = ZkCoreNodeProps.getCoreUrl(getBaseUrl(),\n        descriptor.getName());\n    \n    boolean isLeader = leaderProps.getCoreUrl().equals(ourUrl);\n    if (!isLeader && !SKIP_AUTO_RECOVERY) {\n      // wait until the leader sees us as down before we are willing to accept\n      // updates.\n      CommonsHttpSolrServer server = null;\n      try {\n        server = new CommonsHttpSolrServer(leaderBaseUrl);\n      } catch (MalformedURLException e) {\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n      server.setConnectionTimeout(45000);\n      server.setSoTimeout(45000);\n      WaitForState prepCmd = new WaitForState();\n      prepCmd.setCoreName(leaderCoreName);\n      prepCmd.setNodeName(getNodeName());\n      prepCmd.setCoreNodeName(shardZkNodeName);\n      prepCmd.setState(ZkStateReader.DOWN);\n      prepCmd.setPauseFor(6000);\n      if (waitForNotLive){\n        prepCmd.setCheckLive(false);\n      }\n                          \n      \n      try {\n        server.request(prepCmd);\n      } catch (Exception e) {\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Could not talk to the leader\", e);\n      }\n      server.shutdown();\n    }\n    return leaderProps;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90ea89f2d30bb2f567b801c0ba81e1c2f3dc9c8","date":1329853856,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#waitForLeaderToSeeDownState(CoreDescriptor,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#waitForLeaderToSeeDownState(CoreDescriptor,String,boolean).mjava","sourceNew":"  private ZkCoreNodeProps waitForLeaderToSeeDownState(\n      CoreDescriptor descriptor, final String shardZkNodeName, boolean waitForNotLive) {\n    CloudDescriptor cloudDesc = descriptor.getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shard = cloudDesc.getShardId();\n    ZkCoreNodeProps leaderProps;\n    try {\n      // go straight to zk, not the cloud state - we must have current info\n      leaderProps = getLeaderProps(collection, shard);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (KeeperException e) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    String leaderBaseUrl = leaderProps.getBaseUrl();\n    String leaderCoreName = leaderProps.getCoreName();\n    \n    String ourUrl = ZkCoreNodeProps.getCoreUrl(getBaseUrl(),\n        descriptor.getName());\n    \n    boolean isLeader = leaderProps.getCoreUrl().equals(ourUrl);\n    if (!isLeader && !SKIP_AUTO_RECOVERY) {\n      // wait until the leader sees us as down before we are willing to accept\n      // updates.\n      CommonsHttpSolrServer server = null;\n      try {\n        server = new CommonsHttpSolrServer(leaderBaseUrl);\n      } catch (MalformedURLException e) {\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n      server.setConnectionTimeout(45000);\n      server.setSoTimeout(45000);\n      WaitForState prepCmd = new WaitForState();\n      prepCmd.setCoreName(leaderCoreName);\n      prepCmd.setNodeName(getNodeName());\n      prepCmd.setCoreNodeName(shardZkNodeName);\n      prepCmd.setState(ZkStateReader.DOWN);\n      prepCmd.setPauseFor(5000);\n      if (waitForNotLive){\n        prepCmd.setCheckLive(false);\n      }\n                          \n      \n      try {\n        server.request(prepCmd);\n      } catch (Exception e) {\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Could not talk to the leader\", e);\n      }\n      server.shutdown();\n    }\n    return leaderProps;\n  }\n\n","sourceOld":"  private ZkCoreNodeProps waitForLeaderToSeeDownState(\n      CoreDescriptor descriptor, final String shardZkNodeName, boolean waitForNotLive) {\n    CloudDescriptor cloudDesc = descriptor.getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shard = cloudDesc.getShardId();\n    ZkCoreNodeProps leaderProps;\n    try {\n      // go straight to zk, not the cloud state - we must have current info\n      leaderProps = getLeaderProps(collection, shard);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (KeeperException e) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    String leaderBaseUrl = leaderProps.getBaseUrl();\n    String leaderCoreName = leaderProps.getCoreName();\n    \n    String ourUrl = ZkCoreNodeProps.getCoreUrl(getBaseUrl(),\n        descriptor.getName());\n    \n    boolean isLeader = leaderProps.getCoreUrl().equals(ourUrl);\n    if (!isLeader && !SKIP_AUTO_RECOVERY) {\n      // wait until the leader sees us as down before we are willing to accept\n      // updates.\n      CommonsHttpSolrServer server = null;\n      try {\n        server = new CommonsHttpSolrServer(leaderBaseUrl);\n      } catch (MalformedURLException e) {\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n      server.setConnectionTimeout(45000);\n      server.setSoTimeout(45000);\n      WaitForState prepCmd = new WaitForState();\n      prepCmd.setCoreName(leaderCoreName);\n      prepCmd.setNodeName(getNodeName());\n      prepCmd.setCoreNodeName(shardZkNodeName);\n      prepCmd.setState(ZkStateReader.DOWN);\n      prepCmd.setPauseFor(10000);\n      if (waitForNotLive){\n        prepCmd.setCheckLive(false);\n      }\n                          \n      \n      try {\n        server.request(prepCmd);\n      } catch (Exception e) {\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Could not talk to the leader\", e);\n      }\n      server.shutdown();\n    }\n    return leaderProps;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca34ccd7068cc05e01744c69dd0323698bb9b296","date":1330103794,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#waitForLeaderToSeeDownState(CoreDescriptor,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#waitForLeaderToSeeDownState(CoreDescriptor,String,boolean).mjava","sourceNew":"  private ZkCoreNodeProps waitForLeaderToSeeDownState(\n      CoreDescriptor descriptor, final String shardZkNodeName, boolean waitForNotLive) {\n    CloudDescriptor cloudDesc = descriptor.getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shard = cloudDesc.getShardId();\n    ZkCoreNodeProps leaderProps;\n    try {\n      // go straight to zk, not the cloud state - we must have current info\n      leaderProps = getLeaderProps(collection, shard);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (KeeperException e) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    String leaderBaseUrl = leaderProps.getBaseUrl();\n    String leaderCoreName = leaderProps.getCoreName();\n    \n    String ourUrl = ZkCoreNodeProps.getCoreUrl(getBaseUrl(),\n        descriptor.getName());\n    \n    boolean isLeader = leaderProps.getCoreUrl().equals(ourUrl);\n    if (!isLeader && !SKIP_AUTO_RECOVERY) {\n      // wait until the leader sees us as down before we are willing to accept\n      // updates.\n      CommonsHttpSolrServer server = null;\n      try {\n        server = new CommonsHttpSolrServer(leaderBaseUrl);\n      } catch (MalformedURLException e) {\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n      server.setConnectionTimeout(45000);\n      server.setSoTimeout(45000);\n      WaitForState prepCmd = new WaitForState();\n      prepCmd.setCoreName(leaderCoreName);\n      prepCmd.setNodeName(getNodeName());\n      prepCmd.setCoreNodeName(shardZkNodeName);\n      prepCmd.setState(ZkStateReader.DOWN);\n      prepCmd.setPauseFor(5000);\n      if (waitForNotLive){\n        prepCmd.setCheckLive(false);\n      }\n      \n      // let's retry a couple times - perhaps the leader just went down,\n      // or perhaps he is just not quite ready for us yet\n      for (int i = 0; i < 3; i++) {\n        try {\n          server.request(prepCmd);\n          break;\n        } catch (Exception e) {\n          SolrException.log(log, \"There was a problem making a request to the leader\", e);\n          try {\n            Thread.sleep(2000);\n          } catch (InterruptedException e1) {\n            Thread.currentThread().interrupt();\n          }\n        }\n      }\n      \n      server.shutdown();\n    }\n    return leaderProps;\n  }\n\n","sourceOld":"  private ZkCoreNodeProps waitForLeaderToSeeDownState(\n      CoreDescriptor descriptor, final String shardZkNodeName, boolean waitForNotLive) {\n    CloudDescriptor cloudDesc = descriptor.getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shard = cloudDesc.getShardId();\n    ZkCoreNodeProps leaderProps;\n    try {\n      // go straight to zk, not the cloud state - we must have current info\n      leaderProps = getLeaderProps(collection, shard);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (KeeperException e) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    String leaderBaseUrl = leaderProps.getBaseUrl();\n    String leaderCoreName = leaderProps.getCoreName();\n    \n    String ourUrl = ZkCoreNodeProps.getCoreUrl(getBaseUrl(),\n        descriptor.getName());\n    \n    boolean isLeader = leaderProps.getCoreUrl().equals(ourUrl);\n    if (!isLeader && !SKIP_AUTO_RECOVERY) {\n      // wait until the leader sees us as down before we are willing to accept\n      // updates.\n      CommonsHttpSolrServer server = null;\n      try {\n        server = new CommonsHttpSolrServer(leaderBaseUrl);\n      } catch (MalformedURLException e) {\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n      server.setConnectionTimeout(45000);\n      server.setSoTimeout(45000);\n      WaitForState prepCmd = new WaitForState();\n      prepCmd.setCoreName(leaderCoreName);\n      prepCmd.setNodeName(getNodeName());\n      prepCmd.setCoreNodeName(shardZkNodeName);\n      prepCmd.setState(ZkStateReader.DOWN);\n      prepCmd.setPauseFor(5000);\n      if (waitForNotLive){\n        prepCmd.setCheckLive(false);\n      }\n                          \n      \n      try {\n        server.request(prepCmd);\n      } catch (Exception e) {\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Could not talk to the leader\", e);\n      }\n      server.shutdown();\n    }\n    return leaderProps;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9813dd0748537c429b7c0a9b4723ea1ba496c047","date":1330304954,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#waitForLeaderToSeeDownState(CoreDescriptor,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#waitForLeaderToSeeDownState(CoreDescriptor,String,boolean).mjava","sourceNew":"  private ZkCoreNodeProps waitForLeaderToSeeDownState(\n      CoreDescriptor descriptor, final String coreZkNodeName) {\n    CloudDescriptor cloudDesc = descriptor.getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shard = cloudDesc.getShardId();\n    ZkCoreNodeProps leaderProps;\n    try {\n      // go straight to zk, not the cloud state - we must have current info\n      leaderProps = getLeaderProps(collection, shard);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (KeeperException e) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    String leaderBaseUrl = leaderProps.getBaseUrl();\n    String leaderCoreName = leaderProps.getCoreName();\n    \n    String ourUrl = ZkCoreNodeProps.getCoreUrl(getBaseUrl(),\n        descriptor.getName());\n    \n    boolean isLeader = leaderProps.getCoreUrl().equals(ourUrl);\n    if (!isLeader && !SKIP_AUTO_RECOVERY) {\n      CommonsHttpSolrServer server = null;\n      try {\n        server = new CommonsHttpSolrServer(leaderBaseUrl);\n      } catch (MalformedURLException e) {\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n      server.setConnectionTimeout(45000);\n      server.setSoTimeout(45000);\n      WaitForState prepCmd = new WaitForState();\n      prepCmd.setCoreName(leaderCoreName);\n      prepCmd.setNodeName(getNodeName());\n      prepCmd.setCoreNodeName(coreZkNodeName);\n      prepCmd.setState(ZkStateReader.DOWN);\n      prepCmd.setPauseFor(0);\n      \n      // let's retry a couple times - perhaps the leader just went down,\n      // or perhaps he is just not quite ready for us yet\n      for (int i = 0; i < 3; i++) {\n        try {\n          server.request(prepCmd);\n          break;\n        } catch (Exception e) {\n          SolrException.log(log, \"There was a problem making a request to the leader\", e);\n          try {\n            Thread.sleep(2000);\n          } catch (InterruptedException e1) {\n            Thread.currentThread().interrupt();\n          }\n        }\n      }\n      \n      server.shutdown();\n    }\n    return leaderProps;\n  }\n\n","sourceOld":"  private ZkCoreNodeProps waitForLeaderToSeeDownState(\n      CoreDescriptor descriptor, final String shardZkNodeName, boolean waitForNotLive) {\n    CloudDescriptor cloudDesc = descriptor.getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shard = cloudDesc.getShardId();\n    ZkCoreNodeProps leaderProps;\n    try {\n      // go straight to zk, not the cloud state - we must have current info\n      leaderProps = getLeaderProps(collection, shard);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (KeeperException e) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    String leaderBaseUrl = leaderProps.getBaseUrl();\n    String leaderCoreName = leaderProps.getCoreName();\n    \n    String ourUrl = ZkCoreNodeProps.getCoreUrl(getBaseUrl(),\n        descriptor.getName());\n    \n    boolean isLeader = leaderProps.getCoreUrl().equals(ourUrl);\n    if (!isLeader && !SKIP_AUTO_RECOVERY) {\n      // wait until the leader sees us as down before we are willing to accept\n      // updates.\n      CommonsHttpSolrServer server = null;\n      try {\n        server = new CommonsHttpSolrServer(leaderBaseUrl);\n      } catch (MalformedURLException e) {\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n      server.setConnectionTimeout(45000);\n      server.setSoTimeout(45000);\n      WaitForState prepCmd = new WaitForState();\n      prepCmd.setCoreName(leaderCoreName);\n      prepCmd.setNodeName(getNodeName());\n      prepCmd.setCoreNodeName(shardZkNodeName);\n      prepCmd.setState(ZkStateReader.DOWN);\n      prepCmd.setPauseFor(5000);\n      if (waitForNotLive){\n        prepCmd.setCheckLive(false);\n      }\n      \n      // let's retry a couple times - perhaps the leader just went down,\n      // or perhaps he is just not quite ready for us yet\n      for (int i = 0; i < 3; i++) {\n        try {\n          server.request(prepCmd);\n          break;\n        } catch (Exception e) {\n          SolrException.log(log, \"There was a problem making a request to the leader\", e);\n          try {\n            Thread.sleep(2000);\n          } catch (InterruptedException e1) {\n            Thread.currentThread().interrupt();\n          }\n        }\n      }\n      \n      server.shutdown();\n    }\n    return leaderProps;\n  }\n\n","bugFix":null,"bugIntro":["a6378064655e76cd7b908b1cab4ce425b384b508","bbb0b5c5101d175049b4ced1462f4c266d32fc63"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"9813dd0748537c429b7c0a9b4723ea1ba496c047":["ca34ccd7068cc05e01744c69dd0323698bb9b296"],"6b834dd353486678973f4157b3ba402ac3a7ca88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d90ea89f2d30bb2f567b801c0ba81e1c2f3dc9c8":["607ced52f2419a5f6bc6fddc1135855cf896374e"],"ca34ccd7068cc05e01744c69dd0323698bb9b296":["d90ea89f2d30bb2f567b801c0ba81e1c2f3dc9c8"],"607ced52f2419a5f6bc6fddc1135855cf896374e":["6b834dd353486678973f4157b3ba402ac3a7ca88"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9813dd0748537c429b7c0a9b4723ea1ba496c047"]},"commit2Childs":{"9813dd0748537c429b7c0a9b4723ea1ba496c047":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6b834dd353486678973f4157b3ba402ac3a7ca88":["607ced52f2419a5f6bc6fddc1135855cf896374e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6b834dd353486678973f4157b3ba402ac3a7ca88"],"d90ea89f2d30bb2f567b801c0ba81e1c2f3dc9c8":["ca34ccd7068cc05e01744c69dd0323698bb9b296"],"ca34ccd7068cc05e01744c69dd0323698bb9b296":["9813dd0748537c429b7c0a9b4723ea1ba496c047"],"607ced52f2419a5f6bc6fddc1135855cf896374e":["d90ea89f2d30bb2f567b801c0ba81e1c2f3dc9c8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}