{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser#parse(String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser#parse(String).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser#parse(String).mjava","sourceNew":"  @Override\n  public Query parse(String query) throws ParseException {\n    if (isPass2ResolvingPhrases) {\n      MultiTermQuery.RewriteMethod oldMethod = getMultiTermRewriteMethod();\n      try {\n        // Temporarily force BooleanQuery rewrite so that Parser will\n        // generate visible\n        // collection of terms which we can convert into SpanQueries.\n        // ConstantScoreRewrite mode produces an\n        // opaque ConstantScoreQuery object which cannot be interrogated for\n        // terms in the same way a BooleanQuery can.\n        // QueryParser is not guaranteed threadsafe anyway so this temporary\n        // state change should not\n        // present an issue\n        setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n        return super.parse(query);\n      } finally {\n        setMultiTermRewriteMethod(oldMethod);\n      }\n    }\n\n    // First pass - parse the top-level query recording any PhraseQuerys\n    // which will need to be resolved\n    complexPhrases = new ArrayList<ComplexPhraseQuery>();\n    Query q = super.parse(query);\n\n    // Perform second pass, using this QueryParser to parse any nested\n    // PhraseQueries with different\n    // set of syntax restrictions (i.e. all fields must be same)\n    isPass2ResolvingPhrases = true;\n    try {\n      for (Iterator<ComplexPhraseQuery> iterator = complexPhrases.iterator(); iterator.hasNext();) {\n        currentPhraseQuery = iterator.next();\n        // in each phrase, now parse the contents between quotes as a\n        // separate parse operation\n        currentPhraseQuery.parsePhraseElements(this);\n      }\n    } finally {\n      isPass2ResolvingPhrases = false;\n    }\n    return q;\n  }\n\n","sourceOld":"  @Override\n  public Query parse(String query) throws ParseException {\n    if (isPass2ResolvingPhrases) {\n      MultiTermQuery.RewriteMethod oldMethod = getMultiTermRewriteMethod();\n      try {\n        // Temporarily force BooleanQuery rewrite so that Parser will\n        // generate visible\n        // collection of terms which we can convert into SpanQueries.\n        // ConstantScoreRewrite mode produces an\n        // opaque ConstantScoreQuery object which cannot be interrogated for\n        // terms in the same way a BooleanQuery can.\n        // QueryParser is not guaranteed threadsafe anyway so this temporary\n        // state change should not\n        // present an issue\n        setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n        return super.parse(query);\n      } finally {\n        setMultiTermRewriteMethod(oldMethod);\n      }\n    }\n\n    // First pass - parse the top-level query recording any PhraseQuerys\n    // which will need to be resolved\n    complexPhrases = new ArrayList<ComplexPhraseQuery>();\n    Query q = super.parse(query);\n\n    // Perform second pass, using this QueryParser to parse any nested\n    // PhraseQueries with different\n    // set of syntax restrictions (i.e. all fields must be same)\n    isPass2ResolvingPhrases = true;\n    try {\n      for (Iterator<ComplexPhraseQuery> iterator = complexPhrases.iterator(); iterator.hasNext();) {\n        currentPhraseQuery = iterator.next();\n        // in each phrase, now parse the contents between quotes as a\n        // separate parse operation\n        currentPhraseQuery.parsePhraseElements(this);\n      }\n    } finally {\n      isPass2ResolvingPhrases = false;\n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser#parse(String).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser#parse(String).mjava","sourceNew":"  @Override\n  public Query parse(String query) throws ParseException {\n    if (isPass2ResolvingPhrases) {\n      MultiTermQuery.RewriteMethod oldMethod = getMultiTermRewriteMethod();\n      try {\n        // Temporarily force BooleanQuery rewrite so that Parser will\n        // generate visible\n        // collection of terms which we can convert into SpanQueries.\n        // ConstantScoreRewrite mode produces an\n        // opaque ConstantScoreQuery object which cannot be interrogated for\n        // terms in the same way a BooleanQuery can.\n        // QueryParser is not guaranteed threadsafe anyway so this temporary\n        // state change should not\n        // present an issue\n        setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n        return super.parse(query);\n      } finally {\n        setMultiTermRewriteMethod(oldMethod);\n      }\n    }\n\n    // First pass - parse the top-level query recording any PhraseQuerys\n    // which will need to be resolved\n    complexPhrases = new ArrayList<>();\n    Query q = super.parse(query);\n\n    // Perform second pass, using this QueryParser to parse any nested\n    // PhraseQueries with different\n    // set of syntax restrictions (i.e. all fields must be same)\n    isPass2ResolvingPhrases = true;\n    try {\n      for (Iterator<ComplexPhraseQuery> iterator = complexPhrases.iterator(); iterator.hasNext();) {\n        currentPhraseQuery = iterator.next();\n        // in each phrase, now parse the contents between quotes as a\n        // separate parse operation\n        currentPhraseQuery.parsePhraseElements(this);\n      }\n    } finally {\n      isPass2ResolvingPhrases = false;\n    }\n    return q;\n  }\n\n","sourceOld":"  @Override\n  public Query parse(String query) throws ParseException {\n    if (isPass2ResolvingPhrases) {\n      MultiTermQuery.RewriteMethod oldMethod = getMultiTermRewriteMethod();\n      try {\n        // Temporarily force BooleanQuery rewrite so that Parser will\n        // generate visible\n        // collection of terms which we can convert into SpanQueries.\n        // ConstantScoreRewrite mode produces an\n        // opaque ConstantScoreQuery object which cannot be interrogated for\n        // terms in the same way a BooleanQuery can.\n        // QueryParser is not guaranteed threadsafe anyway so this temporary\n        // state change should not\n        // present an issue\n        setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n        return super.parse(query);\n      } finally {\n        setMultiTermRewriteMethod(oldMethod);\n      }\n    }\n\n    // First pass - parse the top-level query recording any PhraseQuerys\n    // which will need to be resolved\n    complexPhrases = new ArrayList<ComplexPhraseQuery>();\n    Query q = super.parse(query);\n\n    // Perform second pass, using this QueryParser to parse any nested\n    // PhraseQueries with different\n    // set of syntax restrictions (i.e. all fields must be same)\n    isPass2ResolvingPhrases = true;\n    try {\n      for (Iterator<ComplexPhraseQuery> iterator = complexPhrases.iterator(); iterator.hasNext();) {\n        currentPhraseQuery = iterator.next();\n        // in each phrase, now parse the contents between quotes as a\n        // separate parse operation\n        currentPhraseQuery.parsePhraseElements(this);\n      }\n    } finally {\n      isPass2ResolvingPhrases = false;\n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2713584a660051cd646423be682771e3bbd99985","date":1425046322,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser#parse(String).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser#parse(String).mjava","sourceNew":"  @Override\n  public Query parse(String query) throws ParseException {\n    if (isPass2ResolvingPhrases) {\n      MultiTermQuery.RewriteMethod oldMethod = getMultiTermRewriteMethod();\n      try {\n        // Temporarily force BooleanQuery rewrite so that Parser will\n        // generate visible\n        // collection of terms which we can convert into SpanQueries.\n        // ConstantScoreRewrite mode produces an\n        // opaque ConstantScoreQuery object which cannot be interrogated for\n        // terms in the same way a BooleanQuery can.\n        // QueryParser is not guaranteed threadsafe anyway so this temporary\n        // state change should not\n        // present an issue\n        setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n        return super.parse(query);\n      } finally {\n        setMultiTermRewriteMethod(oldMethod);\n      }\n    }\n\n    // First pass - parse the top-level query recording any PhraseQuerys\n    // which will need to be resolved\n    complexPhrases = new ArrayList<>();\n    Query q = super.parse(query);\n\n    // Perform second pass, using this QueryParser to parse any nested\n    // PhraseQueries with different\n    // set of syntax restrictions (i.e. all fields must be same)\n    isPass2ResolvingPhrases = true;\n    try {\n      for (Iterator<ComplexPhraseQuery> iterator = complexPhrases.iterator(); iterator.hasNext();) {\n        currentPhraseQuery = iterator.next();\n        // in each phrase, now parse the contents between quotes as a\n        // separate parse operation\n        currentPhraseQuery.parsePhraseElements(this);\n      }\n    } finally {\n      isPass2ResolvingPhrases = false;\n    }\n    return q;\n  }\n\n","sourceOld":"  @Override\n  public Query parse(String query) throws ParseException {\n    if (isPass2ResolvingPhrases) {\n      MultiTermQuery.RewriteMethod oldMethod = getMultiTermRewriteMethod();\n      try {\n        // Temporarily force BooleanQuery rewrite so that Parser will\n        // generate visible\n        // collection of terms which we can convert into SpanQueries.\n        // ConstantScoreRewrite mode produces an\n        // opaque ConstantScoreQuery object which cannot be interrogated for\n        // terms in the same way a BooleanQuery can.\n        // QueryParser is not guaranteed threadsafe anyway so this temporary\n        // state change should not\n        // present an issue\n        setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n        return super.parse(query);\n      } finally {\n        setMultiTermRewriteMethod(oldMethod);\n      }\n    }\n\n    // First pass - parse the top-level query recording any PhraseQuerys\n    // which will need to be resolved\n    complexPhrases = new ArrayList<>();\n    Query q = super.parse(query);\n\n    // Perform second pass, using this QueryParser to parse any nested\n    // PhraseQueries with different\n    // set of syntax restrictions (i.e. all fields must be same)\n    isPass2ResolvingPhrases = true;\n    try {\n      for (Iterator<ComplexPhraseQuery> iterator = complexPhrases.iterator(); iterator.hasNext();) {\n        currentPhraseQuery = iterator.next();\n        // in each phrase, now parse the contents between quotes as a\n        // separate parse operation\n        currentPhraseQuery.parsePhraseElements(this);\n      }\n    } finally {\n      isPass2ResolvingPhrases = false;\n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser#parse(String).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser#parse(String).mjava","sourceNew":"  @Override\n  public Query parse(String query) throws ParseException {\n    if (isPass2ResolvingPhrases) {\n      MultiTermQuery.RewriteMethod oldMethod = getMultiTermRewriteMethod();\n      try {\n        // Temporarily force BooleanQuery rewrite so that Parser will\n        // generate visible\n        // collection of terms which we can convert into SpanQueries.\n        // ConstantScoreRewrite mode produces an\n        // opaque ConstantScoreQuery object which cannot be interrogated for\n        // terms in the same way a BooleanQuery can.\n        // QueryParser is not guaranteed threadsafe anyway so this temporary\n        // state change should not\n        // present an issue\n        setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n        return super.parse(query);\n      } finally {\n        setMultiTermRewriteMethod(oldMethod);\n      }\n    }\n\n    // First pass - parse the top-level query recording any PhraseQuerys\n    // which will need to be resolved\n    complexPhrases = new ArrayList<>();\n    Query q = super.parse(query);\n\n    // Perform second pass, using this QueryParser to parse any nested\n    // PhraseQueries with different\n    // set of syntax restrictions (i.e. all fields must be same)\n    isPass2ResolvingPhrases = true;\n    try {\n      for (Iterator<ComplexPhraseQuery> iterator = complexPhrases.iterator(); iterator.hasNext();) {\n        currentPhraseQuery = iterator.next();\n        // in each phrase, now parse the contents between quotes as a\n        // separate parse operation\n        currentPhraseQuery.parsePhraseElements(this);\n      }\n    } finally {\n      isPass2ResolvingPhrases = false;\n    }\n    return q;\n  }\n\n","sourceOld":"  @Override\n  public Query parse(String query) throws ParseException {\n    if (isPass2ResolvingPhrases) {\n      MultiTermQuery.RewriteMethod oldMethod = getMultiTermRewriteMethod();\n      try {\n        // Temporarily force BooleanQuery rewrite so that Parser will\n        // generate visible\n        // collection of terms which we can convert into SpanQueries.\n        // ConstantScoreRewrite mode produces an\n        // opaque ConstantScoreQuery object which cannot be interrogated for\n        // terms in the same way a BooleanQuery can.\n        // QueryParser is not guaranteed threadsafe anyway so this temporary\n        // state change should not\n        // present an issue\n        setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n        return super.parse(query);\n      } finally {\n        setMultiTermRewriteMethod(oldMethod);\n      }\n    }\n\n    // First pass - parse the top-level query recording any PhraseQuerys\n    // which will need to be resolved\n    complexPhrases = new ArrayList<>();\n    Query q = super.parse(query);\n\n    // Perform second pass, using this QueryParser to parse any nested\n    // PhraseQueries with different\n    // set of syntax restrictions (i.e. all fields must be same)\n    isPass2ResolvingPhrases = true;\n    try {\n      for (Iterator<ComplexPhraseQuery> iterator = complexPhrases.iterator(); iterator.hasNext();) {\n        currentPhraseQuery = iterator.next();\n        // in each phrase, now parse the contents between quotes as a\n        // separate parse operation\n        currentPhraseQuery.parsePhraseElements(this);\n      }\n    } finally {\n      isPass2ResolvingPhrases = false;\n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","2713584a660051cd646423be682771e3bbd99985"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2713584a660051cd646423be682771e3bbd99985":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2713584a660051cd646423be682771e3bbd99985"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2713584a660051cd646423be682771e3bbd99985"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"2713584a660051cd646423be682771e3bbd99985":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}