{"path":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeFields().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeFields().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentMerger#mergeFields().mjava","sourceNew":"  /**\n   *\n   * @return The number of documents in all of the readers\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  private int mergeFields() throws CorruptIndexException, IOException {\n    final StoredFieldsWriter fieldsWriter = codec.storedFieldsFormat().fieldsWriter(directory, segment, context);\n    \n    try {\n      return fieldsWriter.merge(mergeState);\n    } finally {\n      fieldsWriter.close();\n    }\n  }\n\n","sourceOld":"  /**\n   *\n   * @return The number of documents in all of the readers\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  private int mergeFields() throws CorruptIndexException, IOException {\n    final StoredFieldsWriter fieldsWriter = codec.storedFieldsFormat().fieldsWriter(directory, segment, context);\n    \n    try {\n      return fieldsWriter.merge(mergeState);\n    } finally {\n      fieldsWriter.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"129c6e8ac0c0d9a110ba29e4b5f1889374f30076","date":1337725510,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeFields().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeFields().mjava","sourceNew":"  /**\n   *\n   * @return The number of documents in all of the readers\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  private int mergeFields() throws CorruptIndexException, IOException {\n    final StoredFieldsWriter fieldsWriter = codec.storedFieldsFormat().fieldsWriter(directory, mergeState.segmentInfo, context);\n    \n    try {\n      return fieldsWriter.merge(mergeState);\n    } finally {\n      fieldsWriter.close();\n    }\n  }\n\n","sourceOld":"  /**\n   *\n   * @return The number of documents in all of the readers\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  private int mergeFields() throws CorruptIndexException, IOException {\n    final StoredFieldsWriter fieldsWriter = codec.storedFieldsFormat().fieldsWriter(directory, segment, context);\n    \n    try {\n      return fieldsWriter.merge(mergeState);\n    } finally {\n      fieldsWriter.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeFields().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeFields().mjava","sourceNew":"  /**\n   *\n   * @return The number of documents in all of the readers\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  private int mergeFields() throws CorruptIndexException, IOException {\n    final StoredFieldsWriter fieldsWriter = codec.storedFieldsFormat().fieldsWriter(directory, mergeState.segmentInfo, context);\n    \n    try {\n      return fieldsWriter.merge(mergeState);\n    } finally {\n      fieldsWriter.close();\n    }\n  }\n\n","sourceOld":"  /**\n   *\n   * @return The number of documents in all of the readers\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  private int mergeFields() throws CorruptIndexException, IOException {\n    final StoredFieldsWriter fieldsWriter = codec.storedFieldsFormat().fieldsWriter(directory, segment, context);\n    \n    try {\n      return fieldsWriter.merge(mergeState);\n    } finally {\n      fieldsWriter.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeFields().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeFields().mjava","sourceNew":"  /**\n   *\n   * @return The number of documents in all of the readers\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  private int mergeFields() throws IOException {\n    final StoredFieldsWriter fieldsWriter = codec.storedFieldsFormat().fieldsWriter(directory, mergeState.segmentInfo, context);\n    \n    try {\n      return fieldsWriter.merge(mergeState);\n    } finally {\n      fieldsWriter.close();\n    }\n  }\n\n","sourceOld":"  /**\n   *\n   * @return The number of documents in all of the readers\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  private int mergeFields() throws CorruptIndexException, IOException {\n    final StoredFieldsWriter fieldsWriter = codec.storedFieldsFormat().fieldsWriter(directory, mergeState.segmentInfo, context);\n    \n    try {\n      return fieldsWriter.merge(mergeState);\n    } finally {\n      fieldsWriter.close();\n    }\n  }\n\n","bugFix":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeFields().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeFields().mjava","sourceNew":"  /**\n   *\n   * @return The number of documents in all of the readers\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  private int mergeFields() throws IOException {\n    final StoredFieldsWriter fieldsWriter = codec.storedFieldsFormat().fieldsWriter(directory, mergeState.segmentInfo, context);\n    \n    try {\n      return fieldsWriter.merge(mergeState);\n    } finally {\n      fieldsWriter.close();\n    }\n  }\n\n","sourceOld":"  /**\n   *\n   * @return The number of documents in all of the readers\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  private int mergeFields() throws CorruptIndexException, IOException {\n    final StoredFieldsWriter fieldsWriter = codec.storedFieldsFormat().fieldsWriter(directory, mergeState.segmentInfo, context);\n    \n    try {\n      return fieldsWriter.merge(mergeState);\n    } finally {\n      fieldsWriter.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22a2e66dfda83847e80095b8693c660742ab3e9c","date":1408628796,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeFields().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeFields().mjava","sourceNew":"  /**\n   * Merge stored fields from each of the segments into the new one.\n   * @return The number of documents in all of the readers\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  private int mergeFields() throws IOException {\n    final StoredFieldsWriter fieldsWriter = codec.storedFieldsFormat().fieldsWriter(directory, mergeState.segmentInfo, context);\n    \n    boolean success = false;\n    int numDocs;\n    try {\n      numDocs = fieldsWriter.merge(mergeState);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(fieldsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(fieldsWriter);\n      }\n    }\n    return numDocs;\n  }\n\n","sourceOld":"  /**\n   *\n   * @return The number of documents in all of the readers\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  private int mergeFields() throws IOException {\n    final StoredFieldsWriter fieldsWriter = codec.storedFieldsFormat().fieldsWriter(directory, mergeState.segmentInfo, context);\n    \n    try {\n      return fieldsWriter.merge(mergeState);\n    } finally {\n      fieldsWriter.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81f984bc3fef371bf2393a453ebd7835bcb0ee8d","date":1418246768,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeFields().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeFields().mjava","sourceNew":"  /**\n   * Merge stored fields from each of the segments into the new one.\n   * @return The number of documents in all of the readers\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  private int mergeFields() throws IOException {\n    try (StoredFieldsWriter fieldsWriter = codec.storedFieldsFormat().fieldsWriter(directory, mergeState.segmentInfo, context)) {\n      return fieldsWriter.merge(mergeState);\n    }\n  }\n\n","sourceOld":"  /**\n   * Merge stored fields from each of the segments into the new one.\n   * @return The number of documents in all of the readers\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  private int mergeFields() throws IOException {\n    final StoredFieldsWriter fieldsWriter = codec.storedFieldsFormat().fieldsWriter(directory, mergeState.segmentInfo, context);\n    \n    boolean success = false;\n    int numDocs;\n    try {\n      numDocs = fieldsWriter.merge(mergeState);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(fieldsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(fieldsWriter);\n      }\n    }\n    return numDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"81f984bc3fef371bf2393a453ebd7835bcb0ee8d":["22a2e66dfda83847e80095b8693c660742ab3e9c"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","129c6e8ac0c0d9a110ba29e4b5f1889374f30076"],"129c6e8ac0c0d9a110ba29e4b5f1889374f30076":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22a2e66dfda83847e80095b8693c660742ab3e9c":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["81f984bc3fef371bf2393a453ebd7835bcb0ee8d"]},"commit2Childs":{"81f984bc3fef371bf2393a453ebd7835bcb0ee8d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"129c6e8ac0c0d9a110ba29e4b5f1889374f30076":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","129c6e8ac0c0d9a110ba29e4b5f1889374f30076"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"22a2e66dfda83847e80095b8693c660742ab3e9c":["81f984bc3fef371bf2393a453ebd7835bcb0ee8d"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","22a2e66dfda83847e80095b8693c660742ab3e9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}