{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDataImportHandlerTestCase#runFullImport(String,Map[String,String]).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDataImportHandlerTestCase#runFullImport(String,Map[String,String]).mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/AbstractDataImportHandlerTestCase#runFullImport(String,Map[String,String]).mjava","sourceNew":"  /**\n   * Runs a full-import using the given dataConfig and the provided request parameters.\n   *\n   * By default, debug=on, clean=true and commit=true are passed which can be overridden.\n   *\n   * @param dataConfig the data-config xml as a string\n   * @param extraParams any extra request parameters needed to be passed to DataImportHandler\n   * @throws Exception in case of any error\n   */\n  protected void runFullImport(String dataConfig, Map<String, String> extraParams) throws Exception {\n    HashMap<String, String> params = new HashMap<String, String>();\n    params.put(\"command\", \"full-import\");\n    params.put(\"debug\", \"on\");\n    params.put(\"dataConfig\", dataConfig);\n    params.put(\"clean\", \"true\");\n    params.put(\"commit\", \"true\");\n    params.putAll(extraParams);\n    NamedList l = new NamedList();\n    for (Map.Entry<String, String> e : params.entrySet()) {\n      l.add(e.getKey(),e.getValue());\n    }\n    LocalSolrQueryRequest request = new LocalSolrQueryRequest(h.getCore(), l);  \n    h.query(\"/dataimport\", request);\n  }\n\n","sourceOld":"  /**\n   * Runs a full-import using the given dataConfig and the provided request parameters.\n   *\n   * By default, debug=on, clean=true and commit=true are passed which can be overridden.\n   *\n   * @param dataConfig the data-config xml as a string\n   * @param extraParams any extra request parameters needed to be passed to DataImportHandler\n   * @throws Exception in case of any error\n   */\n  protected void runFullImport(String dataConfig, Map<String, String> extraParams) throws Exception {\n    HashMap<String, String> params = new HashMap<String, String>();\n    params.put(\"command\", \"full-import\");\n    params.put(\"debug\", \"on\");\n    params.put(\"dataConfig\", dataConfig);\n    params.put(\"clean\", \"true\");\n    params.put(\"commit\", \"true\");\n    params.putAll(extraParams);\n    NamedList l = new NamedList();\n    for (Map.Entry<String, String> e : params.entrySet()) {\n      l.add(e.getKey(),e.getValue());\n    }\n    LocalSolrQueryRequest request = new LocalSolrQueryRequest(h.getCore(), l);  \n    h.query(\"/dataimport\", request);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDataImportHandlerTestCase#runFullImport(String,Map[String,String]).mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/AbstractDataImportHandlerTestCase#runFullImport(String,Map[String,String]).mjava","sourceNew":"  /**\n   * Runs a full-import using the given dataConfig and the provided request parameters.\n   *\n   * By default, debug=on, clean=true and commit=true are passed which can be overridden.\n   *\n   * @param dataConfig the data-config xml as a string\n   * @param extraParams any extra request parameters needed to be passed to DataImportHandler\n   * @throws Exception in case of any error\n   */\n  protected void runFullImport(String dataConfig, Map<String, String> extraParams) throws Exception {\n    HashMap<String, String> params = new HashMap<String, String>();\n    params.put(\"command\", \"full-import\");\n    params.put(\"debug\", \"on\");\n    params.put(\"dataConfig\", dataConfig);\n    params.put(\"clean\", \"true\");\n    params.put(\"commit\", \"true\");\n    params.putAll(extraParams);\n    NamedList l = new NamedList();\n    for (Map.Entry<String, String> e : params.entrySet()) {\n      l.add(e.getKey(),e.getValue());\n    }\n    LocalSolrQueryRequest request = new LocalSolrQueryRequest(h.getCore(), l);  \n    h.query(\"/dataimport\", request);\n  }\n\n","sourceOld":"  /**\n   * Runs a full-import using the given dataConfig and the provided request parameters.\n   *\n   * By default, debug=on, clean=true and commit=true are passed which can be overridden.\n   *\n   * @param dataConfig the data-config xml as a string\n   * @param extraParams any extra request parameters needed to be passed to DataImportHandler\n   * @throws Exception in case of any error\n   */\n  protected void runFullImport(String dataConfig, Map<String, String> extraParams) throws Exception {\n    HashMap<String, String> params = new HashMap<String, String>();\n    params.put(\"command\", \"full-import\");\n    params.put(\"debug\", \"on\");\n    params.put(\"dataConfig\", dataConfig);\n    params.put(\"clean\", \"true\");\n    params.put(\"commit\", \"true\");\n    params.putAll(extraParams);\n    NamedList l = new NamedList();\n    for (Map.Entry<String, String> e : params.entrySet()) {\n      l.add(e.getKey(),e.getValue());\n    }\n    LocalSolrQueryRequest request = new LocalSolrQueryRequest(h.getCore(), l);  \n    h.query(\"/dataimport\", request);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDataImportHandlerTestCase#runFullImport(String,Map[String,String]).mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDataImportHandlerTestCase#runFullImport(String,Map[String,String]).mjava","sourceNew":"  /**\n   * Runs a full-import using the given dataConfig and the provided request parameters.\n   *\n   * By default, debug=on, clean=true and commit=true are passed which can be overridden.\n   *\n   * @param dataConfig the data-config xml as a string\n   * @param extraParams any extra request parameters needed to be passed to DataImportHandler\n   * @throws Exception in case of any error\n   */\n  protected void runFullImport(String dataConfig, Map<String, String> extraParams) throws Exception {\n    HashMap<String, String> params = new HashMap<>();\n    params.put(\"command\", \"full-import\");\n    params.put(\"debug\", \"on\");\n    params.put(\"dataConfig\", dataConfig);\n    params.put(\"clean\", \"true\");\n    params.put(\"commit\", \"true\");\n    params.putAll(extraParams);\n    NamedList l = new NamedList();\n    for (Map.Entry<String, String> e : params.entrySet()) {\n      l.add(e.getKey(),e.getValue());\n    }\n    LocalSolrQueryRequest request = new LocalSolrQueryRequest(h.getCore(), l);  \n    h.query(\"/dataimport\", request);\n  }\n\n","sourceOld":"  /**\n   * Runs a full-import using the given dataConfig and the provided request parameters.\n   *\n   * By default, debug=on, clean=true and commit=true are passed which can be overridden.\n   *\n   * @param dataConfig the data-config xml as a string\n   * @param extraParams any extra request parameters needed to be passed to DataImportHandler\n   * @throws Exception in case of any error\n   */\n  protected void runFullImport(String dataConfig, Map<String, String> extraParams) throws Exception {\n    HashMap<String, String> params = new HashMap<String, String>();\n    params.put(\"command\", \"full-import\");\n    params.put(\"debug\", \"on\");\n    params.put(\"dataConfig\", dataConfig);\n    params.put(\"clean\", \"true\");\n    params.put(\"commit\", \"true\");\n    params.putAll(extraParams);\n    NamedList l = new NamedList();\n    for (Map.Entry<String, String> e : params.entrySet()) {\n      l.add(e.getKey(),e.getValue());\n    }\n    LocalSolrQueryRequest request = new LocalSolrQueryRequest(h.getCore(), l);  \n    h.query(\"/dataimport\", request);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDataImportHandlerTestCase#runFullImport(String,Map[String,String]).mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDataImportHandlerTestCase#runFullImport(String,Map[String,String]).mjava","sourceNew":"  /**\n   * Runs a full-import using the given dataConfig and the provided request parameters.\n   *\n   * By default, debug=on, clean=true and commit=true are passed which can be overridden.\n   *\n   * @param dataConfig the data-config xml as a string\n   * @param extraParams any extra request parameters needed to be passed to DataImportHandler\n   * @throws Exception in case of any error\n   */\n  @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n  protected void runFullImport(String dataConfig, Map<String, String> extraParams) throws Exception {\n    HashMap<String, String> params = new HashMap<>();\n    params.put(\"command\", \"full-import\");\n    params.put(\"debug\", \"on\");\n    params.put(\"dataConfig\", dataConfig);\n    params.put(\"clean\", \"true\");\n    params.put(\"commit\", \"true\");\n    params.putAll(extraParams);\n    NamedList l = new NamedList();\n    for (Map.Entry<String, String> e : params.entrySet()) {\n      l.add(e.getKey(),e.getValue());\n    }\n    LocalSolrQueryRequest request = new LocalSolrQueryRequest(h.getCore(), l);  \n    h.query(\"/dataimport\", request);\n  }\n\n","sourceOld":"  /**\n   * Runs a full-import using the given dataConfig and the provided request parameters.\n   *\n   * By default, debug=on, clean=true and commit=true are passed which can be overridden.\n   *\n   * @param dataConfig the data-config xml as a string\n   * @param extraParams any extra request parameters needed to be passed to DataImportHandler\n   * @throws Exception in case of any error\n   */\n  protected void runFullImport(String dataConfig, Map<String, String> extraParams) throws Exception {\n    HashMap<String, String> params = new HashMap<>();\n    params.put(\"command\", \"full-import\");\n    params.put(\"debug\", \"on\");\n    params.put(\"dataConfig\", dataConfig);\n    params.put(\"clean\", \"true\");\n    params.put(\"commit\", \"true\");\n    params.putAll(extraParams);\n    NamedList l = new NamedList();\n    for (Map.Entry<String, String> e : params.entrySet()) {\n      l.add(e.getKey(),e.getValue());\n    }\n    LocalSolrQueryRequest request = new LocalSolrQueryRequest(h.getCore(), l);  \n    h.query(\"/dataimport\", request);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDataImportHandlerTestCase#runFullImport(String,Map[String,String]).mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDataImportHandlerTestCase#runFullImport(String,Map[String,String]).mjava","sourceNew":"  /**\n   * Runs a full-import using the given dataConfig and the provided request parameters.\n   *\n   * By default, debug=on, clean=true and commit=true are passed which can be overridden.\n   *\n   * @param dataConfig the data-config xml as a string\n   * @param extraParams any extra request parameters needed to be passed to DataImportHandler\n   * @throws Exception in case of any error\n   */\n  protected void runFullImport(String dataConfig, Map<String, String> extraParams) throws Exception {\n    HashMap<String, String> params = new HashMap<>();\n    params.put(\"command\", \"full-import\");\n    params.put(\"debug\", \"on\");\n    params.put(\"dataConfig\", dataConfig);\n    params.put(\"clean\", \"true\");\n    params.put(\"commit\", \"true\");\n    params.putAll(extraParams);\n    NamedList l = new NamedList();\n    for (Map.Entry<String, String> e : params.entrySet()) {\n      l.add(e.getKey(),e.getValue());\n    }\n    LocalSolrQueryRequest request = new LocalSolrQueryRequest(h.getCore(), l);  \n    h.query(\"/dataimport\", request);\n  }\n\n","sourceOld":"  /**\n   * Runs a full-import using the given dataConfig and the provided request parameters.\n   *\n   * By default, debug=on, clean=true and commit=true are passed which can be overridden.\n   *\n   * @param dataConfig the data-config xml as a string\n   * @param extraParams any extra request parameters needed to be passed to DataImportHandler\n   * @throws Exception in case of any error\n   */\n  @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n  protected void runFullImport(String dataConfig, Map<String, String> extraParams) throws Exception {\n    HashMap<String, String> params = new HashMap<>();\n    params.put(\"command\", \"full-import\");\n    params.put(\"debug\", \"on\");\n    params.put(\"dataConfig\", dataConfig);\n    params.put(\"clean\", \"true\");\n    params.put(\"commit\", \"true\");\n    params.putAll(extraParams);\n    NamedList l = new NamedList();\n    for (Map.Entry<String, String> e : params.entrySet()) {\n      l.add(e.getKey(),e.getValue());\n    }\n    LocalSolrQueryRequest request = new LocalSolrQueryRequest(h.getCore(), l);  \n    h.query(\"/dataimport\", request);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"024e13388acbf5562fcbb77a129620982a5e2d79","date":1591531835,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDataImportHandlerTestCase#runFullImport(String,Map[String,String]).mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDataImportHandlerTestCase#runFullImport(String,Map[String,String]).mjava","sourceNew":"  /**\n   * Runs a full-import using the given dataConfig and the provided request parameters.\n   *\n   * By default, debug=on, clean=true and commit=true are passed which can be overridden.\n   *\n   * @param dataConfig the data-config xml as a string\n   * @param extraParams any extra request parameters needed to be passed to DataImportHandler\n   * @throws Exception in case of any error\n   */\n  @SuppressWarnings({\"unchecked\"})\n  protected void runFullImport(String dataConfig, Map<String, String> extraParams) throws Exception {\n    HashMap<String, String> params = new HashMap<>();\n    params.put(\"command\", \"full-import\");\n    params.put(\"debug\", \"on\");\n    params.put(\"dataConfig\", dataConfig);\n    params.put(\"clean\", \"true\");\n    params.put(\"commit\", \"true\");\n    params.putAll(extraParams);\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList l = new NamedList();\n    for (Map.Entry<String, String> e : params.entrySet()) {\n      l.add(e.getKey(),e.getValue());\n    }\n    LocalSolrQueryRequest request = new LocalSolrQueryRequest(h.getCore(), l);  \n    h.query(\"/dataimport\", request);\n  }\n\n","sourceOld":"  /**\n   * Runs a full-import using the given dataConfig and the provided request parameters.\n   *\n   * By default, debug=on, clean=true and commit=true are passed which can be overridden.\n   *\n   * @param dataConfig the data-config xml as a string\n   * @param extraParams any extra request parameters needed to be passed to DataImportHandler\n   * @throws Exception in case of any error\n   */\n  protected void runFullImport(String dataConfig, Map<String, String> extraParams) throws Exception {\n    HashMap<String, String> params = new HashMap<>();\n    params.put(\"command\", \"full-import\");\n    params.put(\"debug\", \"on\");\n    params.put(\"dataConfig\", dataConfig);\n    params.put(\"clean\", \"true\");\n    params.put(\"commit\", \"true\");\n    params.putAll(extraParams);\n    NamedList l = new NamedList();\n    for (Map.Entry<String, String> e : params.entrySet()) {\n      l.add(e.getKey(),e.getValue());\n    }\n    LocalSolrQueryRequest request = new LocalSolrQueryRequest(h.getCore(), l);  \n    h.query(\"/dataimport\", request);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDataImportHandlerTestCase#runFullImport(String,Map[String,String]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Runs a full-import using the given dataConfig and the provided request parameters.\n   *\n   * By default, debug=on, clean=true and commit=true are passed which can be overridden.\n   *\n   * @param dataConfig the data-config xml as a string\n   * @param extraParams any extra request parameters needed to be passed to DataImportHandler\n   * @throws Exception in case of any error\n   */\n  @SuppressWarnings({\"unchecked\"})\n  protected void runFullImport(String dataConfig, Map<String, String> extraParams) throws Exception {\n    HashMap<String, String> params = new HashMap<>();\n    params.put(\"command\", \"full-import\");\n    params.put(\"debug\", \"on\");\n    params.put(\"dataConfig\", dataConfig);\n    params.put(\"clean\", \"true\");\n    params.put(\"commit\", \"true\");\n    params.putAll(extraParams);\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList l = new NamedList();\n    for (Map.Entry<String, String> e : params.entrySet()) {\n      l.add(e.getKey(),e.getValue());\n    }\n    LocalSolrQueryRequest request = new LocalSolrQueryRequest(h.getCore(), l);  \n    h.query(\"/dataimport\", request);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c26f00b574427b55127e869b935845554afde1fa"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["024e13388acbf5562fcbb77a129620982a5e2d79"],"024e13388acbf5562fcbb77a129620982a5e2d79":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"024e13388acbf5562fcbb77a129620982a5e2d79":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["024e13388acbf5562fcbb77a129620982a5e2d79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}