{"path":"lucene/src/java/org/apache/lucene/document/CompressionTools#decompress(byte[],int,int).mjava","commits":[{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/CompressionTools#decompress(byte[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Decompress the byte array previously returned by\n   *  compress */\n  public static byte[] decompress(byte[] value, int offset, int length) throws DataFormatException {\n    // Create an expandable byte array to hold the decompressed data\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(length);\n\n    Inflater decompressor = new Inflater();\n\n    try {\n      decompressor.setInput(value, offset, length);\n\n      // Decompress the data\n      final byte[] buf = new byte[1024];\n      while (!decompressor.finished()) {\n        int count = decompressor.inflate(buf);\n        bos.write(buf, 0, count);\n      }\n    } finally {  \n      decompressor.end();\n    }\n    \n    return bos.toByteArray();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/CompressionTools#decompress(byte[],int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/CompressionTools#decompress(byte[],int,int).mjava","sourceNew":"  /** Decompress the byte array previously returned by\n   *  compress */\n  public static byte[] decompress(byte[] value, int offset, int length) throws DataFormatException {\n    // Create an expandable byte array to hold the decompressed data\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(length);\n\n    Inflater decompressor = new Inflater();\n\n    try {\n      decompressor.setInput(value, offset, length);\n\n      // Decompress the data\n      final byte[] buf = new byte[1024];\n      while (!decompressor.finished()) {\n        int count = decompressor.inflate(buf);\n        bos.write(buf, 0, count);\n      }\n    } finally {  \n      decompressor.end();\n    }\n    \n    return bos.toByteArray();\n  }\n\n","sourceOld":"  /** Decompress the byte array previously returned by\n   *  compress */\n  public static byte[] decompress(byte[] value, int offset, int length) throws DataFormatException {\n    // Create an expandable byte array to hold the decompressed data\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(length);\n\n    Inflater decompressor = new Inflater();\n\n    try {\n      decompressor.setInput(value, offset, length);\n\n      // Decompress the data\n      final byte[] buf = new byte[1024];\n      while (!decompressor.finished()) {\n        int count = decompressor.inflate(buf);\n        bos.write(buf, 0, count);\n      }\n    } finally {  \n      decompressor.end();\n    }\n    \n    return bos.toByteArray();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}