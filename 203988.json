{"path":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingIndexSearcher#wrapFilter(Query,Filter).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingIndexSearcher#wrapFilter(Query,Filter).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/AssertingIndexSearcher#wrapFilter(Query,Filter).mjava","sourceNew":"  @Override\n  protected Query wrapFilter(Query query, Filter filter) {\n    if (random.nextBoolean())\n      return super.wrapFilter(query, filter);\n    return (filter == null) ? query : new FilteredQuery(query, filter) {\n      @Override\n      protected boolean useRandomAccess(Bits bits, int firstFilterDoc) {\n        return random.nextBoolean();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  protected Query wrapFilter(Query query, Filter filter) {\n    if (random.nextBoolean())\n      return super.wrapFilter(query, filter);\n    return (filter == null) ? query : new FilteredQuery(query, filter) {\n      @Override\n      protected boolean useRandomAccess(Bits bits, int firstFilterDoc) {\n        return random.nextBoolean();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc7674a6feb46b954ebfb8ace9eb0383adb93de9","date":1348214796,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingIndexSearcher#wrapFilter(Query,Filter).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingIndexSearcher#wrapFilter(Query,Filter).mjava","sourceNew":"  @Override\n  protected Query wrapFilter(Query query, Filter filter) {\n    if (random.nextBoolean())\n      return super.wrapFilter(query, filter);\n    return (filter == null) ? query : new FilteredQuery(query, filter, _TestUtil.randomFilterStrategy(random));\n  }\n\n","sourceOld":"  @Override\n  protected Query wrapFilter(Query query, Filter filter) {\n    if (random.nextBoolean())\n      return super.wrapFilter(query, filter);\n    return (filter == null) ? query : new FilteredQuery(query, filter) {\n      @Override\n      protected boolean useRandomAccess(Bits bits, int firstFilterDoc) {\n        return random.nextBoolean();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingIndexSearcher#wrapFilter(Query,Filter).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingIndexSearcher#wrapFilter(Query,Filter).mjava","sourceNew":"  @Override\n  protected Query wrapFilter(Query query, Filter filter) {\n    if (random.nextBoolean())\n      return super.wrapFilter(query, filter);\n    return (filter == null) ? query : new FilteredQuery(query, filter, TestUtil.randomFilterStrategy(random));\n  }\n\n","sourceOld":"  @Override\n  protected Query wrapFilter(Query query, Filter filter) {\n    if (random.nextBoolean())\n      return super.wrapFilter(query, filter);\n    return (filter == null) ? query : new FilteredQuery(query, filter, _TestUtil.randomFilterStrategy(random));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingIndexSearcher#wrapFilter(Query,Filter).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected Query wrapFilter(Query query, Filter filter) {\n    if (random.nextBoolean())\n      return super.wrapFilter(query, filter);\n    return (filter == null) ? query : new FilteredQuery(query, filter, TestUtil.randomFilterStrategy(random));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6613659748fe4411a7dcf85266e55db1f95f7315":["cc7674a6feb46b954ebfb8ace9eb0383adb93de9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["6613659748fe4411a7dcf85266e55db1f95f7315"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc7674a6feb46b954ebfb8ace9eb0383adb93de9":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"]},"commit2Childs":{"6613659748fe4411a7dcf85266e55db1f95f7315":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cc7674a6feb46b954ebfb8ace9eb0383adb93de9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cc7674a6feb46b954ebfb8ace9eb0383adb93de9":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}