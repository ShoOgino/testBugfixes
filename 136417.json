{"path":"lucene/classification/src/test/org/apache/lucene/classification/utils/DocToDoubleVectorUtilsTest#testSparseFreqDoubleArrayConversion().mjava","commits":[{"id":"b1ce302c8330eae47fb0d4ab045c8a7d708e5585","date":1407490641,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/utils/DocToDoubleVectorUtilsTest#testSparseFreqDoubleArrayConversion().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSparseFreqDoubleArrayConversion() throws Exception {\n    Terms fieldTerms = MultiFields.getTerms(index, \"text\");\n    IndexSearcher indexSearcher = new IndexSearcher(index);\n    for (ScoreDoc scoreDoc : indexSearcher.search(new MatchAllDocsQuery(), Integer.MAX_VALUE).scoreDocs) {\n      Terms docTerms = index.getTermVector(scoreDoc.doc, \"text\");\n      Double[] vector = DocToDoubleVectorUtils.toSparseLocalFreqDoubleArray(docTerms, fieldTerms);\n      assertNotNull(vector);\n      assertTrue(vector.length > 0);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0d0737ec002c98d1dd21819dd488e43956ab9e9d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0d0737ec002c98d1dd21819dd488e43956ab9e9d","date":1407614820,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/utils/DocToDoubleVectorUtilsTest#testSparseFreqDoubleArrayConversion().mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/utils/DocToDoubleVectorUtilsTest#testSparseFreqDoubleArrayConversion().mjava","sourceNew":"  @Test\n  public void testSparseFreqDoubleArrayConversion() throws Exception {\n    Terms fieldTerms = MultiFields.getTerms(index, \"text\");\n    if (fieldTerms != null && fieldTerms.size() != -1) {\n      IndexSearcher indexSearcher = new IndexSearcher(index);\n      for (ScoreDoc scoreDoc : indexSearcher.search(new MatchAllDocsQuery(), Integer.MAX_VALUE).scoreDocs) {\n        Terms docTerms = index.getTermVector(scoreDoc.doc, \"text\");\n        Double[] vector = DocToDoubleVectorUtils.toSparseLocalFreqDoubleArray(docTerms, fieldTerms);\n        assertNotNull(vector);\n        assertTrue(vector.length > 0);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSparseFreqDoubleArrayConversion() throws Exception {\n    Terms fieldTerms = MultiFields.getTerms(index, \"text\");\n    IndexSearcher indexSearcher = new IndexSearcher(index);\n    for (ScoreDoc scoreDoc : indexSearcher.search(new MatchAllDocsQuery(), Integer.MAX_VALUE).scoreDocs) {\n      Terms docTerms = index.getTermVector(scoreDoc.doc, \"text\");\n      Double[] vector = DocToDoubleVectorUtils.toSparseLocalFreqDoubleArray(docTerms, fieldTerms);\n      assertNotNull(vector);\n      assertTrue(vector.length > 0);\n    }\n  }\n\n","bugFix":["b1ce302c8330eae47fb0d4ab045c8a7d708e5585"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/utils/DocToDoubleVectorUtilsTest#testSparseFreqDoubleArrayConversion().mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/utils/DocToDoubleVectorUtilsTest#testSparseFreqDoubleArrayConversion().mjava","sourceNew":"  @Test\n  public void testSparseFreqDoubleArrayConversion() throws Exception {\n    Terms fieldTerms = MultiTerms.getTerms(index, \"text\");\n    if (fieldTerms != null && fieldTerms.size() != -1) {\n      IndexSearcher indexSearcher = new IndexSearcher(index);\n      for (ScoreDoc scoreDoc : indexSearcher.search(new MatchAllDocsQuery(), Integer.MAX_VALUE).scoreDocs) {\n        Terms docTerms = index.getTermVector(scoreDoc.doc, \"text\");\n        Double[] vector = DocToDoubleVectorUtils.toSparseLocalFreqDoubleArray(docTerms, fieldTerms);\n        assertNotNull(vector);\n        assertTrue(vector.length > 0);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSparseFreqDoubleArrayConversion() throws Exception {\n    Terms fieldTerms = MultiFields.getTerms(index, \"text\");\n    if (fieldTerms != null && fieldTerms.size() != -1) {\n      IndexSearcher indexSearcher = new IndexSearcher(index);\n      for (ScoreDoc scoreDoc : indexSearcher.search(new MatchAllDocsQuery(), Integer.MAX_VALUE).scoreDocs) {\n        Terms docTerms = index.getTermVector(scoreDoc.doc, \"text\");\n        Double[] vector = DocToDoubleVectorUtils.toSparseLocalFreqDoubleArray(docTerms, fieldTerms);\n        assertNotNull(vector);\n        assertTrue(vector.length > 0);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1ce302c8330eae47fb0d4ab045c8a7d708e5585":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"04e775de416dd2d8067b10db1c8af975a1d5017e":["0d0737ec002c98d1dd21819dd488e43956ab9e9d"],"0d0737ec002c98d1dd21819dd488e43956ab9e9d":["b1ce302c8330eae47fb0d4ab045c8a7d708e5585"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"]},"commit2Childs":{"b1ce302c8330eae47fb0d4ab045c8a7d708e5585":["0d0737ec002c98d1dd21819dd488e43956ab9e9d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b1ce302c8330eae47fb0d4ab045c8a7d708e5585"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d0737ec002c98d1dd21819dd488e43956ab9e9d":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}