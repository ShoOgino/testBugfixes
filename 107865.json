{"path":"solr/core/src/test/org/apache/solr/store/blockcache/BlockDirectoryTest#ensureCacheConfigurable().mjava","commits":[{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/store/blockcache/BlockDirectoryTest#ensureCacheConfigurable().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Verify the configuration options for the block cache are handled\n   * appropriately.\n   */\n  @Test\n  public void ensureCacheConfigurable() throws Exception {\n    IOContext mergeContext = new IOContext(new MergeInfo(1,1,false,1));\n\n    BlockDirectory d = directory;\n    assertTrue(d.useReadCache(\"\", IOContext.DEFAULT));\n    assertTrue(d.useWriteCache(\"\", IOContext.DEFAULT));\n    assertFalse(d.useWriteCache(\"\", mergeContext));\n\n    d = new BlockDirectory(\"test\", directory, mapperCache, null, true, false);\n    assertTrue(d.useReadCache(\"\", IOContext.DEFAULT));\n    assertFalse(d.useWriteCache(\"\", IOContext.DEFAULT));\n    assertFalse(d.useWriteCache(\"\", mergeContext));\n\n    d = new BlockDirectory(\"test\", directory, mapperCache, null, false, true);\n    assertFalse(d.useReadCache(\"\", IOContext.DEFAULT));\n    assertTrue(d.useWriteCache(\"\", IOContext.DEFAULT));\n    assertFalse(d.useWriteCache(\"\", mergeContext));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/store/blockcache/BlockDirectoryTest#ensureCacheConfigurable().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Verify the configuration options for the block cache are handled\n   * appropriately.\n   */\n  @Test\n  public void ensureCacheConfigurable() throws Exception {\n    IOContext mergeContext = new IOContext(new MergeInfo(1,1,false,1));\n\n    BlockDirectory d = directory;\n    assertTrue(d.useReadCache(\"\", IOContext.DEFAULT));\n    assertTrue(d.useWriteCache(\"\", IOContext.DEFAULT));\n    assertFalse(d.useWriteCache(\"\", mergeContext));\n\n    d = new BlockDirectory(\"test\", directory, mapperCache, null, true, false);\n    assertTrue(d.useReadCache(\"\", IOContext.DEFAULT));\n    assertFalse(d.useWriteCache(\"\", IOContext.DEFAULT));\n    assertFalse(d.useWriteCache(\"\", mergeContext));\n\n    d = new BlockDirectory(\"test\", directory, mapperCache, null, false, true);\n    assertFalse(d.useReadCache(\"\", IOContext.DEFAULT));\n    assertTrue(d.useWriteCache(\"\", IOContext.DEFAULT));\n    assertFalse(d.useWriteCache(\"\", mergeContext));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3dc3a264df0764958b41674928fb4de15a0a977","date":1479225941,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/store/blockcache/BlockDirectoryTest#ensureCacheConfigurable().mjava","pathOld":"solr/core/src/test/org/apache/solr/store/blockcache/BlockDirectoryTest#ensureCacheConfigurable().mjava","sourceNew":"  /**\n   * Verify the configuration options for the block cache are handled\n   * appropriately.\n   */\n  @Test\n  public void ensureCacheConfigurable() throws Exception {\n    IOContext mergeContext = new IOContext(new MergeInfo(1,1,false,1));\n\n    BlockDirectory d = directory;\n    assertTrue(d.useReadCache(\"\", IOContext.DEFAULT));\n    if (d.getCache() instanceof MapperCache) {\n      assertTrue(d.useWriteCache(\"\", IOContext.DEFAULT));\n    } else {\n      assertFalse(d.useWriteCache(\"\", IOContext.DEFAULT));\n    }\n    assertFalse(d.useWriteCache(\"\", mergeContext));\n\n    d = new BlockDirectory(\"test\", directory, mapperCache, null, true, false);\n    assertTrue(d.useReadCache(\"\", IOContext.DEFAULT));\n    assertFalse(d.useWriteCache(\"\", IOContext.DEFAULT));\n    assertFalse(d.useWriteCache(\"\", mergeContext));\n\n    d = new BlockDirectory(\"test\", directory, mapperCache, null, false, true);\n    assertFalse(d.useReadCache(\"\", IOContext.DEFAULT));\n    if (d.getCache() instanceof MapperCache) {\n      assertTrue(d.useWriteCache(\"\", IOContext.DEFAULT));\n    } else {\n      assertFalse(d.useWriteCache(\"\", IOContext.DEFAULT));\n    }\n    assertFalse(d.useWriteCache(\"\", mergeContext));\n  }\n\n","sourceOld":"  /**\n   * Verify the configuration options for the block cache are handled\n   * appropriately.\n   */\n  @Test\n  public void ensureCacheConfigurable() throws Exception {\n    IOContext mergeContext = new IOContext(new MergeInfo(1,1,false,1));\n\n    BlockDirectory d = directory;\n    assertTrue(d.useReadCache(\"\", IOContext.DEFAULT));\n    assertTrue(d.useWriteCache(\"\", IOContext.DEFAULT));\n    assertFalse(d.useWriteCache(\"\", mergeContext));\n\n    d = new BlockDirectory(\"test\", directory, mapperCache, null, true, false);\n    assertTrue(d.useReadCache(\"\", IOContext.DEFAULT));\n    assertFalse(d.useWriteCache(\"\", IOContext.DEFAULT));\n    assertFalse(d.useWriteCache(\"\", mergeContext));\n\n    d = new BlockDirectory(\"test\", directory, mapperCache, null, false, true);\n    assertFalse(d.useReadCache(\"\", IOContext.DEFAULT));\n    assertTrue(d.useWriteCache(\"\", IOContext.DEFAULT));\n    assertFalse(d.useWriteCache(\"\", mergeContext));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/store/blockcache/BlockDirectoryTest#ensureCacheConfigurable().mjava","pathOld":"solr/core/src/test/org/apache/solr/store/blockcache/BlockDirectoryTest#ensureCacheConfigurable().mjava","sourceNew":"  /**\n   * Verify the configuration options for the block cache are handled\n   * appropriately.\n   */\n  @Test\n  public void ensureCacheConfigurable() throws Exception {\n    IOContext mergeContext = new IOContext(new MergeInfo(1,1,false,1));\n\n    BlockDirectory d = directory;\n    assertTrue(d.useReadCache(\"\", IOContext.DEFAULT));\n    if (d.getCache() instanceof MapperCache) {\n      assertTrue(d.useWriteCache(\"\", IOContext.DEFAULT));\n    } else {\n      assertFalse(d.useWriteCache(\"\", IOContext.DEFAULT));\n    }\n    assertFalse(d.useWriteCache(\"\", mergeContext));\n\n    d = new BlockDirectory(\"test\", directory, mapperCache, null, true, false);\n    assertTrue(d.useReadCache(\"\", IOContext.DEFAULT));\n    assertFalse(d.useWriteCache(\"\", IOContext.DEFAULT));\n    assertFalse(d.useWriteCache(\"\", mergeContext));\n\n    d = new BlockDirectory(\"test\", directory, mapperCache, null, false, true);\n    assertFalse(d.useReadCache(\"\", IOContext.DEFAULT));\n    if (d.getCache() instanceof MapperCache) {\n      assertTrue(d.useWriteCache(\"\", IOContext.DEFAULT));\n    } else {\n      assertFalse(d.useWriteCache(\"\", IOContext.DEFAULT));\n    }\n    assertFalse(d.useWriteCache(\"\", mergeContext));\n  }\n\n","sourceOld":"  /**\n   * Verify the configuration options for the block cache are handled\n   * appropriately.\n   */\n  @Test\n  public void ensureCacheConfigurable() throws Exception {\n    IOContext mergeContext = new IOContext(new MergeInfo(1,1,false,1));\n\n    BlockDirectory d = directory;\n    assertTrue(d.useReadCache(\"\", IOContext.DEFAULT));\n    assertTrue(d.useWriteCache(\"\", IOContext.DEFAULT));\n    assertFalse(d.useWriteCache(\"\", mergeContext));\n\n    d = new BlockDirectory(\"test\", directory, mapperCache, null, true, false);\n    assertTrue(d.useReadCache(\"\", IOContext.DEFAULT));\n    assertFalse(d.useWriteCache(\"\", IOContext.DEFAULT));\n    assertFalse(d.useWriteCache(\"\", mergeContext));\n\n    d = new BlockDirectory(\"test\", directory, mapperCache, null, false, true);\n    assertFalse(d.useReadCache(\"\", IOContext.DEFAULT));\n    assertTrue(d.useWriteCache(\"\", IOContext.DEFAULT));\n    assertFalse(d.useWriteCache(\"\", mergeContext));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b3dc3a264df0764958b41674928fb4de15a0a977":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["849494cf2f3a96af5c8c84995108ddd8456fcd04","b3dc3a264df0764958b41674928fb4de15a0a977"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b3dc3a264df0764958b41674928fb4de15a0a977"]},"commit2Childs":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["b3dc3a264df0764958b41674928fb4de15a0a977","37a0f60745e53927c4c876cfe5b5a58170f0646c","a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"b3dc3a264df0764958b41674928fb4de15a0a977":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}