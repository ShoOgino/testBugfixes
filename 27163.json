{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/BaseSampleTestTopK#createSampler(int,ScoredDocIDs,boolean).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/BaseSampleTestTopK#createSampler(int,ScoredDocIDs,boolean).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/sampling/BaseSampleTestTopK#createSampler(int,ScoredDocIDs,boolean).mjava","sourceNew":"  private Sampler createSampler(int nTrial, ScoredDocIDs scoredDocIDs, boolean useRandomSampler) {\n    SamplingParams samplingParams = new SamplingParams();\n    \n    final double retryFactor = Math.pow(1.01, nTrial);\n    samplingParams.setSampleRatio(0.8 * retryFactor);\n    samplingParams.setMinSampleSize((int) (100 * retryFactor));\n    samplingParams.setMaxSampleSize((int) (10000 * retryFactor));\n    samplingParams.setOversampleFactor(5.0 * retryFactor);\n\n    samplingParams.setSampingThreshold(11000); //force sampling \n    Sampler sampler = useRandomSampler ? \n        new RandomSampler(samplingParams, new Random(random().nextLong())) :\n          new RepeatableSampler(samplingParams);\n    assertTrue(\"must enable sampling for this test!\",sampler.shouldSample(scoredDocIDs));\n    return sampler;\n  }\n\n","sourceOld":"  private Sampler createSampler(int nTrial, ScoredDocIDs scoredDocIDs, boolean useRandomSampler) {\n    SamplingParams samplingParams = new SamplingParams();\n    \n    final double retryFactor = Math.pow(1.01, nTrial);\n    samplingParams.setSampleRatio(0.8 * retryFactor);\n    samplingParams.setMinSampleSize((int) (100 * retryFactor));\n    samplingParams.setMaxSampleSize((int) (10000 * retryFactor));\n    samplingParams.setOversampleFactor(5.0 * retryFactor);\n\n    samplingParams.setSampingThreshold(11000); //force sampling \n    Sampler sampler = useRandomSampler ? \n        new RandomSampler(samplingParams, new Random(random().nextLong())) :\n          new RepeatableSampler(samplingParams);\n    assertTrue(\"must enable sampling for this test!\",sampler.shouldSample(scoredDocIDs));\n    return sampler;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f966f30f7a3c7572144def6ccf5ac80071ae522a","date":1355083598,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/BaseSampleTestTopK#createSampler(int,ScoredDocIDs,boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/BaseSampleTestTopK#createSampler(int,ScoredDocIDs,boolean).mjava","sourceNew":"  private Sampler createSampler(int nTrial, ScoredDocIDs scoredDocIDs, boolean useRandomSampler) {\n    SamplingParams samplingParams = new SamplingParams();\n    \n    final double retryFactor = Math.pow(1.01, nTrial);\n    samplingParams.setSampleRatio(0.8 * retryFactor);\n    samplingParams.setMinSampleSize((int) (100 * retryFactor));\n    samplingParams.setMaxSampleSize((int) (10000 * retryFactor));\n    samplingParams.setOversampleFactor(5.0 * retryFactor);\n\n    samplingParams.setSamplingThreshold(11000); //force sampling \n    Sampler sampler = useRandomSampler ? \n        new RandomSampler(samplingParams, new Random(random().nextLong())) :\n          new RepeatableSampler(samplingParams);\n    assertTrue(\"must enable sampling for this test!\",sampler.shouldSample(scoredDocIDs));\n    return sampler;\n  }\n\n","sourceOld":"  private Sampler createSampler(int nTrial, ScoredDocIDs scoredDocIDs, boolean useRandomSampler) {\n    SamplingParams samplingParams = new SamplingParams();\n    \n    final double retryFactor = Math.pow(1.01, nTrial);\n    samplingParams.setSampleRatio(0.8 * retryFactor);\n    samplingParams.setMinSampleSize((int) (100 * retryFactor));\n    samplingParams.setMaxSampleSize((int) (10000 * retryFactor));\n    samplingParams.setOversampleFactor(5.0 * retryFactor);\n\n    samplingParams.setSampingThreshold(11000); //force sampling \n    Sampler sampler = useRandomSampler ? \n        new RandomSampler(samplingParams, new Random(random().nextLong())) :\n          new RepeatableSampler(samplingParams);\n    assertTrue(\"must enable sampling for this test!\",sampler.shouldSample(scoredDocIDs));\n    return sampler;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/BaseSampleTestTopK#createSampler(int,ScoredDocIDs,boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/BaseSampleTestTopK#createSampler(int,ScoredDocIDs,boolean).mjava","sourceNew":"  private Sampler createSampler(int nTrial, ScoredDocIDs scoredDocIDs, boolean useRandomSampler) {\n    SamplingParams samplingParams = new SamplingParams();\n    \n    final double retryFactor = Math.pow(1.01, nTrial);\n    samplingParams.setSampleRatio(0.8 * retryFactor);\n    samplingParams.setMinSampleSize((int) (100 * retryFactor));\n    samplingParams.setMaxSampleSize((int) (10000 * retryFactor));\n    samplingParams.setOversampleFactor(5.0 * retryFactor);\n\n    samplingParams.setSamplingThreshold(11000); //force sampling \n    Sampler sampler = useRandomSampler ? \n        new RandomSampler(samplingParams, new Random(random().nextLong())) :\n          new RepeatableSampler(samplingParams);\n    assertTrue(\"must enable sampling for this test!\",sampler.shouldSample(scoredDocIDs));\n    return sampler;\n  }\n\n","sourceOld":"  private Sampler createSampler(int nTrial, ScoredDocIDs scoredDocIDs, boolean useRandomSampler) {\n    SamplingParams samplingParams = new SamplingParams();\n    \n    final double retryFactor = Math.pow(1.01, nTrial);\n    samplingParams.setSampleRatio(0.8 * retryFactor);\n    samplingParams.setMinSampleSize((int) (100 * retryFactor));\n    samplingParams.setMaxSampleSize((int) (10000 * retryFactor));\n    samplingParams.setOversampleFactor(5.0 * retryFactor);\n\n    samplingParams.setSampingThreshold(11000); //force sampling \n    Sampler sampler = useRandomSampler ? \n        new RandomSampler(samplingParams, new Random(random().nextLong())) :\n          new RepeatableSampler(samplingParams);\n    assertTrue(\"must enable sampling for this test!\",sampler.shouldSample(scoredDocIDs));\n    return sampler;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42f51b3ab4258ff4623227b0db011b8bb83db5c7","date":1358164991,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/BaseSampleTestTopK#createSampler(int,ScoredDocIDs,boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/BaseSampleTestTopK#createSampler(int,ScoredDocIDs,boolean).mjava","sourceNew":"  private Sampler createSampler(int nTrial, ScoredDocIDs scoredDocIDs, boolean useRandomSampler) {\n    SamplingParams samplingParams = new SamplingParams();\n    \n    final double retryFactor = Math.pow(1.01, nTrial);\n    samplingParams.setSampleRatio(0.8 * retryFactor);\n    samplingParams.setMinSampleSize((int) (100 * retryFactor));\n    samplingParams.setMaxSampleSize((int) (10000 * retryFactor));\n    samplingParams.setOversampleFactor(5.0 * retryFactor);\n    samplingParams.setSamplingThreshold(11000); //force sampling\n\n    Sampler sampler = useRandomSampler ? \n        new RandomSampler(samplingParams, new Random(random().nextLong())) :\n          new RepeatableSampler(samplingParams);\n    assertTrue(\"must enable sampling for this test!\",sampler.shouldSample(scoredDocIDs));\n    return sampler;\n  }\n\n","sourceOld":"  private Sampler createSampler(int nTrial, ScoredDocIDs scoredDocIDs, boolean useRandomSampler) {\n    SamplingParams samplingParams = new SamplingParams();\n    \n    final double retryFactor = Math.pow(1.01, nTrial);\n    samplingParams.setSampleRatio(0.8 * retryFactor);\n    samplingParams.setMinSampleSize((int) (100 * retryFactor));\n    samplingParams.setMaxSampleSize((int) (10000 * retryFactor));\n    samplingParams.setOversampleFactor(5.0 * retryFactor);\n\n    samplingParams.setSamplingThreshold(11000); //force sampling \n    Sampler sampler = useRandomSampler ? \n        new RandomSampler(samplingParams, new Random(random().nextLong())) :\n          new RepeatableSampler(samplingParams);\n    assertTrue(\"must enable sampling for this test!\",sampler.shouldSample(scoredDocIDs));\n    return sampler;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/BaseSampleTestTopK#createSampler(int,ScoredDocIDs,boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/BaseSampleTestTopK#createSampler(int,ScoredDocIDs,boolean).mjava","sourceNew":"  private Sampler createSampler(int nTrial, ScoredDocIDs scoredDocIDs, boolean useRandomSampler) {\n    SamplingParams samplingParams = new SamplingParams();\n    \n    final double retryFactor = Math.pow(1.01, nTrial);\n    samplingParams.setSampleRatio(0.8 * retryFactor);\n    samplingParams.setMinSampleSize((int) (100 * retryFactor));\n    samplingParams.setMaxSampleSize((int) (10000 * retryFactor));\n    samplingParams.setOversampleFactor(5.0 * retryFactor);\n    samplingParams.setSamplingThreshold(11000); //force sampling\n\n    Sampler sampler = useRandomSampler ? \n        new RandomSampler(samplingParams, new Random(random().nextLong())) :\n          new RepeatableSampler(samplingParams);\n    assertTrue(\"must enable sampling for this test!\",sampler.shouldSample(scoredDocIDs));\n    return sampler;\n  }\n\n","sourceOld":"  private Sampler createSampler(int nTrial, ScoredDocIDs scoredDocIDs, boolean useRandomSampler) {\n    SamplingParams samplingParams = new SamplingParams();\n    \n    final double retryFactor = Math.pow(1.01, nTrial);\n    samplingParams.setSampleRatio(0.8 * retryFactor);\n    samplingParams.setMinSampleSize((int) (100 * retryFactor));\n    samplingParams.setMaxSampleSize((int) (10000 * retryFactor));\n    samplingParams.setOversampleFactor(5.0 * retryFactor);\n\n    samplingParams.setSamplingThreshold(11000); //force sampling \n    Sampler sampler = useRandomSampler ? \n        new RandomSampler(samplingParams, new Random(random().nextLong())) :\n          new RepeatableSampler(samplingParams);\n    assertTrue(\"must enable sampling for this test!\",sampler.shouldSample(scoredDocIDs));\n    return sampler;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/BaseSampleTestTopK#createSampler(int,boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/BaseSampleTestTopK#createSampler(int,ScoredDocIDs,boolean).mjava","sourceNew":"  private Sampler createSampler(int nTrial, boolean useRandomSampler) {\n    SamplingParams samplingParams = new SamplingParams();\n    \n    final double retryFactor = Math.pow(1.01, nTrial);\n    samplingParams.setSampleRatio(0.8 * retryFactor);\n    samplingParams.setMinSampleSize((int) (100 * retryFactor));\n    samplingParams.setMaxSampleSize((int) (10000 * retryFactor));\n    samplingParams.setOversampleFactor(5.0 * retryFactor);\n    samplingParams.setSamplingThreshold(11000); //force sampling\n\n    Sampler sampler = useRandomSampler ? \n        new RandomSampler(samplingParams, new Random(random().nextLong())) :\n          new RepeatableSampler(samplingParams);\n    return sampler;\n  }\n\n","sourceOld":"  private Sampler createSampler(int nTrial, ScoredDocIDs scoredDocIDs, boolean useRandomSampler) {\n    SamplingParams samplingParams = new SamplingParams();\n    \n    final double retryFactor = Math.pow(1.01, nTrial);\n    samplingParams.setSampleRatio(0.8 * retryFactor);\n    samplingParams.setMinSampleSize((int) (100 * retryFactor));\n    samplingParams.setMaxSampleSize((int) (10000 * retryFactor));\n    samplingParams.setOversampleFactor(5.0 * retryFactor);\n    samplingParams.setSamplingThreshold(11000); //force sampling\n\n    Sampler sampler = useRandomSampler ? \n        new RandomSampler(samplingParams, new Random(random().nextLong())) :\n          new RepeatableSampler(samplingParams);\n    assertTrue(\"must enable sampling for this test!\",sampler.shouldSample(scoredDocIDs));\n    return sampler;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"42f51b3ab4258ff4623227b0db011b8bb83db5c7":["f966f30f7a3c7572144def6ccf5ac80071ae522a"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["407687e67faf6e1f02a211ca078d8e3eed631027","42f51b3ab4258ff4623227b0db011b8bb83db5c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["b89678825b68eccaf09e6ab71675fc0b0af1e099","f966f30f7a3c7572144def6ccf5ac80071ae522a"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["42f51b3ab4258ff4623227b0db011b8bb83db5c7"],"f966f30f7a3c7572144def6ccf5ac80071ae522a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["571abba77e55fea386a38c0024f72ffa5b37a9ad"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["407687e67faf6e1f02a211ca078d8e3eed631027","f966f30f7a3c7572144def6ccf5ac80071ae522a"],"42f51b3ab4258ff4623227b0db011b8bb83db5c7":["8917bfede3b4ca30f4305c1e391e9218959cd723","571abba77e55fea386a38c0024f72ffa5b37a9ad"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"407687e67faf6e1f02a211ca078d8e3eed631027":["8917bfede3b4ca30f4305c1e391e9218959cd723"],"f966f30f7a3c7572144def6ccf5ac80071ae522a":["42f51b3ab4258ff4623227b0db011b8bb83db5c7","407687e67faf6e1f02a211ca078d8e3eed631027"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8917bfede3b4ca30f4305c1e391e9218959cd723","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}