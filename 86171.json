{"path":"src/java/org/apache/solr/handler/XppUpdateRequestHandler#update(Reader).mjava","commits":[{"id":"2b27e1327d2a2f9ea6abc93e203d0219091f09f3","date":1183228826,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XppUpdateRequestHandler#update(Reader).mjava","pathOld":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#update(Reader).mjava","sourceNew":"  public NamedList update( Reader reader ) throws Exception\n  {\n    SolrCore core = SolrCore.getSolrCore();\n    IndexSchema schema = core.getSchema();\n    UpdateHandler updateHandler = core.getUpdateHandler();\n    \n    // TODO: What results should be returned?\n    SimpleOrderedMap res = new SimpleOrderedMap();\n\n    XmlPullParser xpp = factory.newPullParser();\n    long startTime=System.currentTimeMillis();\n\n      xpp.setInput(reader);\n      xpp.nextTag();\n\n      String currTag = xpp.getName();\n      if (\"add\".equals(currTag)) {\n        log.finest(\"SolrCore.update(add)\");\n        AddUpdateCommand cmd = new AddUpdateCommand();\n        cmd.allowDups=false;  // the default\n\n        int status=0;\n        boolean pendingAttr=false, committedAttr=false;\n        int attrcount = xpp.getAttributeCount();\n        for (int i=0; i<attrcount; i++) {\n          String attrName = xpp.getAttributeName(i);\n          String attrVal = xpp.getAttributeValue(i);\n          if (\"allowDups\".equals(attrName)) {\n            cmd.allowDups = StrUtils.parseBoolean(attrVal);\n          } else if (\"overwritePending\".equals(attrName)) {\n            cmd.overwritePending = StrUtils.parseBoolean(attrVal);\n            pendingAttr=true;\n          } else if (\"overwriteCommitted\".equals(attrName)) {\n            cmd.overwriteCommitted = StrUtils.parseBoolean(attrVal);\n            committedAttr=true;\n          } else {\n            log.warning(\"Unknown attribute id in add:\" + attrName);\n          }\n        }\n\n        //set defaults for committed and pending based on allowDups value\n        if (!pendingAttr) cmd.overwritePending=!cmd.allowDups;\n        if (!committedAttr) cmd.overwriteCommitted=!cmd.allowDups;\n\n        DocumentBuilder builder = new DocumentBuilder(schema);\n        SchemaField uniqueKeyField = schema.getUniqueKeyField();\n        int eventType=0;\n        // accumulate responses\n        List<String> added = new ArrayList<String>(10);\n        while(true) {\n          // this may be our second time through the loop in the case\n          // that there are multiple docs in the add... so make sure that\n          // objects can handle that.\n\n          cmd.indexedId = null;  // reset the id for this add\n\n          if (eventType !=0) {\n            eventType=xpp.getEventType();\n            if (eventType==XmlPullParser.END_DOCUMENT) break;\n          }\n          // eventType = xpp.next();\n          eventType = xpp.nextTag();\n          if (eventType == XmlPullParser.END_TAG || eventType == XmlPullParser.END_DOCUMENT) break;  // should match </add>\n\n          readDoc(builder,xpp);\n          builder.endDoc();\n          cmd.doc = builder.getDoc();\n          log.finest(\"adding doc...\");\n          updateHandler.addDoc(cmd);\n          String docId = null;\n          if (uniqueKeyField!=null)\n            docId = schema.printableUniqueKey(cmd.doc);\n          added.add(docId);\n          \n        } // end while\n        // write log and result\n        StringBuilder out = new StringBuilder();\n        for (String docId: added)\n          if(docId != null)\n            out.append(docId + \",\");\n        String outMsg = out.toString();\n        if(outMsg.length() > 0)\n          outMsg = outMsg.substring(0, outMsg.length() - 1);\n        log.info(\"added id={\" + outMsg  + \"} in \" + (System.currentTimeMillis()-startTime) + \"ms\");\n        \n        // Add output \n        res.add( \"added\", outMsg );\n    } // end add\n\n      else if (\"commit\".equals(currTag) || \"optimize\".equals(currTag)) {\n        log.finest(\"parsing \"+currTag);\n        \n          CommitUpdateCommand cmd = new CommitUpdateCommand(\"optimize\".equals(currTag));\n\n          boolean sawWaitSearcher=false, sawWaitFlush=false;\n          int attrcount = xpp.getAttributeCount();\n          for (int i=0; i<attrcount; i++) {\n            String attrName = xpp.getAttributeName(i);\n            String attrVal = xpp.getAttributeValue(i);\n            if (\"waitFlush\".equals(attrName)) {\n              cmd.waitFlush = StrUtils.parseBoolean(attrVal);\n              sawWaitFlush=true;\n            } else if (\"waitSearcher\".equals(attrName)) {\n              cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n              sawWaitSearcher=true;\n            } else {\n              log.warning(\"unexpected attribute commit/@\" + attrName);\n            }\n          }\n\n          // If waitFlush is specified and waitSearcher wasn't, then\n          // clear waitSearcher.\n          if (sawWaitFlush && !sawWaitSearcher) {\n            cmd.waitSearcher=false;\n          }\n\n          updateHandler.commit(cmd);\n          if (\"optimize\".equals(currTag)) {\n            log.info(\"optimize 0 \"+(System.currentTimeMillis()-startTime));\n          }\n          else {\n            log.info(\"commit 0 \"+(System.currentTimeMillis()-startTime));\n          }\n          while (true) {\n            int eventType = xpp.nextTag();\n            if (eventType == XmlPullParser.END_TAG) break; // match </commit>\n          }\n          \n          // add debug output\n          res.add( cmd.optimize?\"optimize\":\"commit\", \"\" );\n      }  // end commit\n\n    else if (\"delete\".equals(currTag)) {\n      log.finest(\"parsing delete\");\n\n        DeleteUpdateCommand cmd = new DeleteUpdateCommand();\n        cmd.fromPending=true;\n        cmd.fromCommitted=true;\n        int attrcount = xpp.getAttributeCount();\n        for (int i=0; i<attrcount; i++) {\n          String attrName = xpp.getAttributeName(i);\n          String attrVal = xpp.getAttributeValue(i);\n          if (\"fromPending\".equals(attrName)) {\n            cmd.fromPending = StrUtils.parseBoolean(attrVal);\n          } else if (\"fromCommitted\".equals(attrName)) {\n            cmd.fromCommitted = StrUtils.parseBoolean(attrVal);\n          } else {\n            log.warning(\"unexpected attribute delete/@\" + attrName);\n          }\n        }\n\n        int eventType = xpp.nextTag();\n        currTag = xpp.getName();\n        String val = xpp.nextText();\n\n        if (\"id\".equals(currTag)) {\n          cmd.id =  val;\n          updateHandler.delete(cmd);\n          log.info(\"delete(id \" + val + \") 0 \" +\n                   (System.currentTimeMillis()-startTime));\n        } else if (\"query\".equals(currTag)) {\n          cmd.query =  val;\n          updateHandler.deleteByQuery(cmd);\n          log.info(\"deleteByQuery(query \" + val + \") 0 \" +\n                   (System.currentTimeMillis()-startTime));\n        } else {\n          log.warning(\"unexpected XML tag /delete/\"+currTag);\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"unexpected XML tag /delete/\"+currTag);\n        }\n\n          res.add( \"delete\", \"\" );\n\n        while (xpp.nextTag() != XmlPullParser.END_TAG);\n      } // end delete\n      return res;\n  }\n\n","sourceOld":"  public NamedList update( Reader reader ) throws Exception\n  {\n    SolrCore core = SolrCore.getSolrCore();\n    IndexSchema schema = core.getSchema();\n    UpdateHandler updateHandler = core.getUpdateHandler();\n    \n    // TODO: What results should be returned?\n    SimpleOrderedMap res = new SimpleOrderedMap();\n\n    XmlPullParser xpp = factory.newPullParser();\n    long startTime=System.currentTimeMillis();\n\n      xpp.setInput(reader);\n      xpp.nextTag();\n\n      String currTag = xpp.getName();\n      if (\"add\".equals(currTag)) {\n        log.finest(\"SolrCore.update(add)\");\n        AddUpdateCommand cmd = new AddUpdateCommand();\n        cmd.allowDups=false;  // the default\n\n        int status=0;\n        boolean pendingAttr=false, committedAttr=false;\n        int attrcount = xpp.getAttributeCount();\n        for (int i=0; i<attrcount; i++) {\n          String attrName = xpp.getAttributeName(i);\n          String attrVal = xpp.getAttributeValue(i);\n          if (\"allowDups\".equals(attrName)) {\n            cmd.allowDups = StrUtils.parseBoolean(attrVal);\n          } else if (\"overwritePending\".equals(attrName)) {\n            cmd.overwritePending = StrUtils.parseBoolean(attrVal);\n            pendingAttr=true;\n          } else if (\"overwriteCommitted\".equals(attrName)) {\n            cmd.overwriteCommitted = StrUtils.parseBoolean(attrVal);\n            committedAttr=true;\n          } else {\n            log.warning(\"Unknown attribute id in add:\" + attrName);\n          }\n        }\n\n        //set defaults for committed and pending based on allowDups value\n        if (!pendingAttr) cmd.overwritePending=!cmd.allowDups;\n        if (!committedAttr) cmd.overwriteCommitted=!cmd.allowDups;\n\n        DocumentBuilder builder = new DocumentBuilder(schema);\n        SchemaField uniqueKeyField = schema.getUniqueKeyField();\n        int eventType=0;\n        // accumulate responses\n        List<String> added = new ArrayList<String>(10);\n        while(true) {\n          // this may be our second time through the loop in the case\n          // that there are multiple docs in the add... so make sure that\n          // objects can handle that.\n\n          cmd.indexedId = null;  // reset the id for this add\n\n          if (eventType !=0) {\n            eventType=xpp.getEventType();\n            if (eventType==XmlPullParser.END_DOCUMENT) break;\n          }\n          // eventType = xpp.next();\n          eventType = xpp.nextTag();\n          if (eventType == XmlPullParser.END_TAG || eventType == XmlPullParser.END_DOCUMENT) break;  // should match </add>\n\n          readDoc(builder,xpp);\n          builder.endDoc();\n          cmd.doc = builder.getDoc();\n          log.finest(\"adding doc...\");\n          updateHandler.addDoc(cmd);\n          String docId = null;\n          if (uniqueKeyField!=null)\n            docId = schema.printableUniqueKey(cmd.doc);\n          added.add(docId);\n          \n        } // end while\n        // write log and result\n        StringBuilder out = new StringBuilder();\n        for (String docId: added)\n          if(docId != null)\n            out.append(docId + \",\");\n        String outMsg = out.toString();\n        if(outMsg.length() > 0)\n          outMsg = outMsg.substring(0, outMsg.length() - 1);\n        log.info(\"added id={\" + outMsg  + \"} in \" + (System.currentTimeMillis()-startTime) + \"ms\");\n        \n        // Add output \n        res.add( \"added\", outMsg );\n    } // end add\n\n      else if (\"commit\".equals(currTag) || \"optimize\".equals(currTag)) {\n        log.finest(\"parsing \"+currTag);\n        \n          CommitUpdateCommand cmd = new CommitUpdateCommand(\"optimize\".equals(currTag));\n\n          boolean sawWaitSearcher=false, sawWaitFlush=false;\n          int attrcount = xpp.getAttributeCount();\n          for (int i=0; i<attrcount; i++) {\n            String attrName = xpp.getAttributeName(i);\n            String attrVal = xpp.getAttributeValue(i);\n            if (\"waitFlush\".equals(attrName)) {\n              cmd.waitFlush = StrUtils.parseBoolean(attrVal);\n              sawWaitFlush=true;\n            } else if (\"waitSearcher\".equals(attrName)) {\n              cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n              sawWaitSearcher=true;\n            } else {\n              log.warning(\"unexpected attribute commit/@\" + attrName);\n            }\n          }\n\n          // If waitFlush is specified and waitSearcher wasn't, then\n          // clear waitSearcher.\n          if (sawWaitFlush && !sawWaitSearcher) {\n            cmd.waitSearcher=false;\n          }\n\n          updateHandler.commit(cmd);\n          if (\"optimize\".equals(currTag)) {\n            log.info(\"optimize 0 \"+(System.currentTimeMillis()-startTime));\n          }\n          else {\n            log.info(\"commit 0 \"+(System.currentTimeMillis()-startTime));\n          }\n          while (true) {\n            int eventType = xpp.nextTag();\n            if (eventType == XmlPullParser.END_TAG) break; // match </commit>\n          }\n          \n          // add debug output\n          res.add( cmd.optimize?\"optimize\":\"commit\", \"\" );\n      }  // end commit\n\n    else if (\"delete\".equals(currTag)) {\n      log.finest(\"parsing delete\");\n\n        DeleteUpdateCommand cmd = new DeleteUpdateCommand();\n        cmd.fromPending=true;\n        cmd.fromCommitted=true;\n        int attrcount = xpp.getAttributeCount();\n        for (int i=0; i<attrcount; i++) {\n          String attrName = xpp.getAttributeName(i);\n          String attrVal = xpp.getAttributeValue(i);\n          if (\"fromPending\".equals(attrName)) {\n            cmd.fromPending = StrUtils.parseBoolean(attrVal);\n          } else if (\"fromCommitted\".equals(attrName)) {\n            cmd.fromCommitted = StrUtils.parseBoolean(attrVal);\n          } else {\n            log.warning(\"unexpected attribute delete/@\" + attrName);\n          }\n        }\n\n        int eventType = xpp.nextTag();\n        currTag = xpp.getName();\n        String val = xpp.nextText();\n\n        if (\"id\".equals(currTag)) {\n          cmd.id =  val;\n          updateHandler.delete(cmd);\n          log.info(\"delete(id \" + val + \") 0 \" +\n                   (System.currentTimeMillis()-startTime));\n        } else if (\"query\".equals(currTag)) {\n          cmd.query =  val;\n          updateHandler.deleteByQuery(cmd);\n          log.info(\"deleteByQuery(query \" + val + \") 0 \" +\n                   (System.currentTimeMillis()-startTime));\n        } else {\n          log.warning(\"unexpected XML tag /delete/\"+currTag);\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"unexpected XML tag /delete/\"+currTag);\n        }\n\n          res.add( \"delete\", \"\" );\n\n        while (xpp.nextTag() != XmlPullParser.END_TAG);\n      } // end delete\n      return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5885124115570b7d9ef89b27bc02cbbf0fc9b7a7","date":1198778275,"type":4,"author":"Ryan McKinley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/solr/handler/XppUpdateRequestHandler#update(Reader).mjava","sourceNew":null,"sourceOld":"  public NamedList update( Reader reader ) throws Exception\n  {\n    SolrCore core = SolrCore.getSolrCore();\n    IndexSchema schema = core.getSchema();\n    UpdateHandler updateHandler = core.getUpdateHandler();\n    \n    // TODO: What results should be returned?\n    SimpleOrderedMap res = new SimpleOrderedMap();\n\n    XmlPullParser xpp = factory.newPullParser();\n    long startTime=System.currentTimeMillis();\n\n      xpp.setInput(reader);\n      xpp.nextTag();\n\n      String currTag = xpp.getName();\n      if (\"add\".equals(currTag)) {\n        log.finest(\"SolrCore.update(add)\");\n        AddUpdateCommand cmd = new AddUpdateCommand();\n        cmd.allowDups=false;  // the default\n\n        int status=0;\n        boolean pendingAttr=false, committedAttr=false;\n        int attrcount = xpp.getAttributeCount();\n        for (int i=0; i<attrcount; i++) {\n          String attrName = xpp.getAttributeName(i);\n          String attrVal = xpp.getAttributeValue(i);\n          if (\"allowDups\".equals(attrName)) {\n            cmd.allowDups = StrUtils.parseBoolean(attrVal);\n          } else if (\"overwritePending\".equals(attrName)) {\n            cmd.overwritePending = StrUtils.parseBoolean(attrVal);\n            pendingAttr=true;\n          } else if (\"overwriteCommitted\".equals(attrName)) {\n            cmd.overwriteCommitted = StrUtils.parseBoolean(attrVal);\n            committedAttr=true;\n          } else {\n            log.warning(\"Unknown attribute id in add:\" + attrName);\n          }\n        }\n\n        //set defaults for committed and pending based on allowDups value\n        if (!pendingAttr) cmd.overwritePending=!cmd.allowDups;\n        if (!committedAttr) cmd.overwriteCommitted=!cmd.allowDups;\n\n        DocumentBuilder builder = new DocumentBuilder(schema);\n        SchemaField uniqueKeyField = schema.getUniqueKeyField();\n        int eventType=0;\n        // accumulate responses\n        List<String> added = new ArrayList<String>(10);\n        while(true) {\n          // this may be our second time through the loop in the case\n          // that there are multiple docs in the add... so make sure that\n          // objects can handle that.\n\n          cmd.indexedId = null;  // reset the id for this add\n\n          if (eventType !=0) {\n            eventType=xpp.getEventType();\n            if (eventType==XmlPullParser.END_DOCUMENT) break;\n          }\n          // eventType = xpp.next();\n          eventType = xpp.nextTag();\n          if (eventType == XmlPullParser.END_TAG || eventType == XmlPullParser.END_DOCUMENT) break;  // should match </add>\n\n          readDoc(builder,xpp);\n          builder.endDoc();\n          cmd.doc = builder.getDoc();\n          log.finest(\"adding doc...\");\n          updateHandler.addDoc(cmd);\n          String docId = null;\n          if (uniqueKeyField!=null)\n            docId = schema.printableUniqueKey(cmd.doc);\n          added.add(docId);\n          \n        } // end while\n        // write log and result\n        StringBuilder out = new StringBuilder();\n        for (String docId: added)\n          if(docId != null)\n            out.append(docId + \",\");\n        String outMsg = out.toString();\n        if(outMsg.length() > 0)\n          outMsg = outMsg.substring(0, outMsg.length() - 1);\n        log.info(\"added id={\" + outMsg  + \"} in \" + (System.currentTimeMillis()-startTime) + \"ms\");\n        \n        // Add output \n        res.add( \"added\", outMsg );\n    } // end add\n\n      else if (\"commit\".equals(currTag) || \"optimize\".equals(currTag)) {\n        log.finest(\"parsing \"+currTag);\n        \n          CommitUpdateCommand cmd = new CommitUpdateCommand(\"optimize\".equals(currTag));\n\n          boolean sawWaitSearcher=false, sawWaitFlush=false;\n          int attrcount = xpp.getAttributeCount();\n          for (int i=0; i<attrcount; i++) {\n            String attrName = xpp.getAttributeName(i);\n            String attrVal = xpp.getAttributeValue(i);\n            if (\"waitFlush\".equals(attrName)) {\n              cmd.waitFlush = StrUtils.parseBoolean(attrVal);\n              sawWaitFlush=true;\n            } else if (\"waitSearcher\".equals(attrName)) {\n              cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n              sawWaitSearcher=true;\n            } else {\n              log.warning(\"unexpected attribute commit/@\" + attrName);\n            }\n          }\n\n          // If waitFlush is specified and waitSearcher wasn't, then\n          // clear waitSearcher.\n          if (sawWaitFlush && !sawWaitSearcher) {\n            cmd.waitSearcher=false;\n          }\n\n          updateHandler.commit(cmd);\n          if (\"optimize\".equals(currTag)) {\n            log.info(\"optimize 0 \"+(System.currentTimeMillis()-startTime));\n          }\n          else {\n            log.info(\"commit 0 \"+(System.currentTimeMillis()-startTime));\n          }\n          while (true) {\n            int eventType = xpp.nextTag();\n            if (eventType == XmlPullParser.END_TAG) break; // match </commit>\n          }\n          \n          // add debug output\n          res.add( cmd.optimize?\"optimize\":\"commit\", \"\" );\n      }  // end commit\n\n    else if (\"delete\".equals(currTag)) {\n      log.finest(\"parsing delete\");\n\n        DeleteUpdateCommand cmd = new DeleteUpdateCommand();\n        cmd.fromPending=true;\n        cmd.fromCommitted=true;\n        int attrcount = xpp.getAttributeCount();\n        for (int i=0; i<attrcount; i++) {\n          String attrName = xpp.getAttributeName(i);\n          String attrVal = xpp.getAttributeValue(i);\n          if (\"fromPending\".equals(attrName)) {\n            cmd.fromPending = StrUtils.parseBoolean(attrVal);\n          } else if (\"fromCommitted\".equals(attrName)) {\n            cmd.fromCommitted = StrUtils.parseBoolean(attrVal);\n          } else {\n            log.warning(\"unexpected attribute delete/@\" + attrName);\n          }\n        }\n\n        int eventType = xpp.nextTag();\n        currTag = xpp.getName();\n        String val = xpp.nextText();\n\n        if (\"id\".equals(currTag)) {\n          cmd.id =  val;\n          updateHandler.delete(cmd);\n          log.info(\"delete(id \" + val + \") 0 \" +\n                   (System.currentTimeMillis()-startTime));\n        } else if (\"query\".equals(currTag)) {\n          cmd.query =  val;\n          updateHandler.deleteByQuery(cmd);\n          log.info(\"deleteByQuery(query \" + val + \") 0 \" +\n                   (System.currentTimeMillis()-startTime));\n        } else {\n          log.warning(\"unexpected XML tag /delete/\"+currTag);\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"unexpected XML tag /delete/\"+currTag);\n        }\n\n          res.add( \"delete\", \"\" );\n\n        while (xpp.nextTag() != XmlPullParser.END_TAG);\n      } // end delete\n      return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"2b27e1327d2a2f9ea6abc93e203d0219091f09f3":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"5885124115570b7d9ef89b27bc02cbbf0fc9b7a7":["2b27e1327d2a2f9ea6abc93e203d0219091f09f3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["2b27e1327d2a2f9ea6abc93e203d0219091f09f3"],"2b27e1327d2a2f9ea6abc93e203d0219091f09f3":["5885124115570b7d9ef89b27bc02cbbf0fc9b7a7"],"5885124115570b7d9ef89b27bc02cbbf0fc9b7a7":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5885124115570b7d9ef89b27bc02cbbf0fc9b7a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}