{"path":"lucene/src/java/org/apache/lucene/search/spans/NearSpansUnordered#skipTo(int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/NearSpansUnordered#skipTo(int).mjava","pathOld":"src/java/org/apache/lucene/search/spans/NearSpansUnordered#skipTo(int).mjava","sourceNew":"  @Override\n  public boolean skipTo(int target) throws IOException {\n    if (firstTime) {                              // initialize\n      initList(false);\n      for (SpansCell cell = first; more && cell!=null; cell=cell.next) {\n        more = cell.skipTo(target);               // skip all\n      }\n      if (more) {\n        listToQueue();\n      }\n      firstTime = false;\n    } else {                                      // normal case\n      while (more && min().doc() < target) {      // skip as needed\n        if (min().skipTo(target)) {\n          queue.updateTop();\n        } else {\n          more = false;\n        }\n      }\n    }\n    return more && (atMatch() ||  next());\n  }\n\n","sourceOld":"  @Override\n  public boolean skipTo(int target) throws IOException {\n    if (firstTime) {                              // initialize\n      initList(false);\n      for (SpansCell cell = first; more && cell!=null; cell=cell.next) {\n        more = cell.skipTo(target);               // skip all\n      }\n      if (more) {\n        listToQueue();\n      }\n      firstTime = false;\n    } else {                                      // normal case\n      while (more && min().doc() < target) {      // skip as needed\n        if (min().skipTo(target)) {\n          queue.updateTop();\n        } else {\n          more = false;\n        }\n      }\n    }\n    return more && (atMatch() ||  next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansUnordered#skipTo(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/NearSpansUnordered#skipTo(int).mjava","sourceNew":"  @Override\n  public boolean skipTo(int target) throws IOException {\n    if (firstTime) {                              // initialize\n      initList(false);\n      for (SpansCell cell = first; more && cell!=null; cell=cell.next) {\n        more = cell.skipTo(target);               // skip all\n      }\n      if (more) {\n        listToQueue();\n      }\n      firstTime = false;\n    } else {                                      // normal case\n      while (more && min().doc() < target) {      // skip as needed\n        if (min().skipTo(target)) {\n          queue.updateTop();\n        } else {\n          more = false;\n        }\n      }\n    }\n    return more && (atMatch() ||  next());\n  }\n\n","sourceOld":"  @Override\n  public boolean skipTo(int target) throws IOException {\n    if (firstTime) {                              // initialize\n      initList(false);\n      for (SpansCell cell = first; more && cell!=null; cell=cell.next) {\n        more = cell.skipTo(target);               // skip all\n      }\n      if (more) {\n        listToQueue();\n      }\n      firstTime = false;\n    } else {                                      // normal case\n      while (more && min().doc() < target) {      // skip as needed\n        if (min().skipTo(target)) {\n          queue.updateTop();\n        } else {\n          more = false;\n        }\n      }\n    }\n    return more && (atMatch() ||  next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}