{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/AbstractAnalyticsFacetCloudTest#[T-extends-Comparable[T]]_calculateStat(ArrayList[ArrayList[T]],String).mjava","commits":[{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/AbstractAnalyticsFacetCloudTest#[T-extends-Comparable[T]]_calculateStat(ArrayList[ArrayList[T]],String).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n  public <T extends Comparable<T>> ArrayList calculateStat(ArrayList<ArrayList<T>> lists, String stat) {\n    ArrayList result;\n    if (stat.contains(\"perc_\")) {\n      result = new ArrayList<T>();\n      for (List<T> list : lists) {\n        if( list.size() == 0) continue;\n        int ord = (int) Math.ceil(Double.parseDouble(stat.substring(5))/100 * list.size()) - 1;\n        ArrayList<Integer> percs = new ArrayList<>(1);\n        percs.add(ord);\n        OrdinalCalculator.putOrdinalsInPosition(list, percs);\n        result.add(list.get(ord));\n      }\n    } else if (stat.equals(\"count\")) {\n      result = new ArrayList<Long>();\n      for (List<T> list : lists) {\n        result.add((long)list.size());\n      }\n    } else if (stat.equals(\"missing\")) {\n      result = new ArrayList<Long>();\n      for (ArrayList<T> list : lists) {\n        result.add(calculateMissing(list,latestType));\n      }\n    } else if (stat.equals(\"unique\")) {\n      result = new ArrayList<Long>();\n      for (List<T> list : lists) {\n        HashSet<T> set = new HashSet<>();\n        set.addAll(list);\n        result.add((long)set.size());\n      }\n    } else if (stat.equals(\"max\")) {\n      result = new ArrayList<T>();\n      for (List<T> list : lists) {\n        if( list.size() == 0) continue;\n        Collections.sort(list);\n        result.add(list.get(list.size()-1));\n      }\n    } else if (stat.equals(\"min\")) {\n      result = new ArrayList<T>();\n      for (List<T> list : lists) {\n        if( list.size() == 0) continue;\n        Collections.sort((List<T>)list);\n        result.add(list.get(0));\n      }\n    } else {\n      result = null;\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/AbstractAnalyticsFacetCloudTest#[T-extends-Comparable[T]]_calculateStat(ArrayList[ArrayList[T]],String).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n  public <T extends Comparable<T>> ArrayList calculateStat(ArrayList<ArrayList<T>> lists, String stat) {\n    ArrayList result;\n    if (stat.contains(\"perc_\")) {\n      result = new ArrayList<T>();\n      for (List<T> list : lists) {\n        if( list.size() == 0) continue;\n        int ord = (int) Math.ceil(Double.parseDouble(stat.substring(5))/100 * list.size()) - 1;\n        ArrayList<Integer> percs = new ArrayList<>(1);\n        percs.add(ord);\n        OrdinalCalculator.putOrdinalsInPosition(list, percs);\n        result.add(list.get(ord));\n      }\n    } else if (stat.equals(\"count\")) {\n      result = new ArrayList<Long>();\n      for (List<T> list : lists) {\n        result.add((long)list.size());\n      }\n    } else if (stat.equals(\"missing\")) {\n      result = new ArrayList<Long>();\n      for (ArrayList<T> list : lists) {\n        result.add(calculateMissing(list,latestType));\n      }\n    } else if (stat.equals(\"unique\")) {\n      result = new ArrayList<Long>();\n      for (List<T> list : lists) {\n        HashSet<T> set = new HashSet<>();\n        set.addAll(list);\n        result.add((long)set.size());\n      }\n    } else if (stat.equals(\"max\")) {\n      result = new ArrayList<T>();\n      for (List<T> list : lists) {\n        if( list.size() == 0) continue;\n        Collections.sort(list);\n        result.add(list.get(list.size()-1));\n      }\n    } else if (stat.equals(\"min\")) {\n      result = new ArrayList<T>();\n      for (List<T> list : lists) {\n        if( list.size() == 0) continue;\n        Collections.sort((List<T>)list);\n        result.add(list.get(0));\n      }\n    } else {\n      result = null;\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/AbstractAnalyticsFacetCloudTest#[T-extends-Comparable[T]]_calculateStat(ArrayList[ArrayList[T]],String).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n  public <T extends Comparable<T>> ArrayList calculateStat(ArrayList<ArrayList<T>> lists, String stat) {\n    ArrayList result;\n    if (stat.contains(\"perc_\")) {\n      result = new ArrayList<T>();\n      for (List<T> list : lists) {\n        if( list.size() == 0) continue;\n        int ord = (int) Math.ceil(Double.parseDouble(stat.substring(5))/100 * list.size()) - 1;\n        ArrayList<Integer> percs = new ArrayList<>(1);\n        percs.add(ord);\n        OrdinalCalculator.putOrdinalsInPosition(list, percs);\n        result.add(list.get(ord));\n      }\n    } else if (stat.equals(\"count\")) {\n      result = new ArrayList<Long>();\n      for (List<T> list : lists) {\n        result.add((long)list.size());\n      }\n    } else if (stat.equals(\"missing\")) {\n      result = new ArrayList<Long>();\n      for (ArrayList<T> list : lists) {\n        result.add(calculateMissing(list,latestType));\n      }\n    } else if (stat.equals(\"unique\")) {\n      result = new ArrayList<Long>();\n      for (List<T> list : lists) {\n        HashSet<T> set = new HashSet<>();\n        set.addAll(list);\n        result.add((long)set.size());\n      }\n    } else if (stat.equals(\"max\")) {\n      result = new ArrayList<T>();\n      for (List<T> list : lists) {\n        if( list.size() == 0) continue;\n        Collections.sort(list);\n        result.add(list.get(list.size()-1));\n      }\n    } else if (stat.equals(\"min\")) {\n      result = new ArrayList<T>();\n      for (List<T> list : lists) {\n        if( list.size() == 0) continue;\n        Collections.sort((List<T>)list);\n        result.add(list.get(0));\n      }\n    } else {\n      result = null;\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":4,"author":"Houston Putman","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/AbstractAnalyticsFacetCloudTest#[T-extends-Comparable[T]]_calculateStat(ArrayList[ArrayList[T]],String).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n  public <T extends Comparable<T>> ArrayList calculateStat(ArrayList<ArrayList<T>> lists, String stat) {\n    ArrayList result;\n    if (stat.contains(\"perc_\")) {\n      result = new ArrayList<T>();\n      for (List<T> list : lists) {\n        if( list.size() == 0) continue;\n        int ord = (int) Math.ceil(Double.parseDouble(stat.substring(5))/100 * list.size()) - 1;\n        ArrayList<Integer> percs = new ArrayList<>(1);\n        percs.add(ord);\n        OrdinalCalculator.putOrdinalsInPosition(list, percs);\n        result.add(list.get(ord));\n      }\n    } else if (stat.equals(\"count\")) {\n      result = new ArrayList<Long>();\n      for (List<T> list : lists) {\n        result.add((long)list.size());\n      }\n    } else if (stat.equals(\"missing\")) {\n      result = new ArrayList<Long>();\n      for (ArrayList<T> list : lists) {\n        result.add(calculateMissing(list,latestType));\n      }\n    } else if (stat.equals(\"unique\")) {\n      result = new ArrayList<Long>();\n      for (List<T> list : lists) {\n        HashSet<T> set = new HashSet<>();\n        set.addAll(list);\n        result.add((long)set.size());\n      }\n    } else if (stat.equals(\"max\")) {\n      result = new ArrayList<T>();\n      for (List<T> list : lists) {\n        if( list.size() == 0) continue;\n        Collections.sort(list);\n        result.add(list.get(list.size()-1));\n      }\n    } else if (stat.equals(\"min\")) {\n      result = new ArrayList<T>();\n      for (List<T> list : lists) {\n        if( list.size() == 0) continue;\n        Collections.sort((List<T>)list);\n        result.add(list.get(0));\n      }\n    } else {\n      result = null;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","3bd4c6955956e76c96eb12dfe64108ed03522983"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}