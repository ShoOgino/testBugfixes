{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/CoalesceEvaluatorTest#twoFieldsWithValues().mjava","commits":[{"id":"6c73f5c06ecda4281a8efee68d5fb9dafb92c1c4","date":1491098284,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/CoalesceEvaluatorTest#twoFieldsWithValues().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void twoFieldsWithValues() throws Exception{\n    StreamEvaluator evaluator = factory.constructEvaluator(\"coalesce(a,b)\");\n    Object result;\n    \n    values.clear();\n    values.put(\"a\", null);\n    values.put(\"b\", 2);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertEquals(2, result);\n    \n    values.clear();\n    values.put(\"a\", 1.1);\n    values.put(\"b\", null);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertEquals(1.1D, result);\n    \n    values.clear();\n    values.put(\"a\", \"foo\");\n    values.put(\"b\", 2.1);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertEquals(\"foo\", result);\n\n    values.clear();\n    values.put(\"a\", true);\n    values.put(\"b\", 2.1);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertEquals(true, result);\n    \n\n    values.clear();\n    values.put(\"a\", null);\n    values.put(\"b\", false);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertEquals(false, result);\n\n    values.clear();\n    values.put(\"a\", null);\n    values.put(\"b\", null);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertNull(result);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d97e737ece4381771c200f1c5030a5a167c09977","date":1491219821,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/CoalesceEvaluatorTest#twoFieldsWithValues().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void twoFieldsWithValues() throws Exception{\n    StreamEvaluator evaluator = factory.constructEvaluator(\"coalesce(a,b)\");\n    Object result;\n    \n    values.clear();\n    values.put(\"a\", null);\n    values.put(\"b\", 2);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertEquals(2, result);\n    \n    values.clear();\n    values.put(\"a\", 1.1);\n    values.put(\"b\", null);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertEquals(1.1D, result);\n    \n    values.clear();\n    values.put(\"a\", \"foo\");\n    values.put(\"b\", 2.1);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertEquals(\"foo\", result);\n\n    values.clear();\n    values.put(\"a\", true);\n    values.put(\"b\", 2.1);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertEquals(true, result);\n    \n\n    values.clear();\n    values.put(\"a\", null);\n    values.put(\"b\", false);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertEquals(false, result);\n\n    values.clear();\n    values.put(\"a\", null);\n    values.put(\"b\", null);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertNull(result);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1e7de64990e3928b90142a52fb92eeff556475","date":1503713257,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/CoalesceEvaluatorTest#twoFieldsWithValues().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/CoalesceEvaluatorTest#twoFieldsWithValues().mjava","sourceNew":"  @Test\n  public void twoFieldsWithValues() throws Exception{\n    StreamEvaluator evaluator = factory.constructEvaluator(\"coalesce(a,b)\");\n    Object result;\n    \n    values.clear();\n    values.put(\"a\", null);\n    values.put(\"b\", 2);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertEquals(2L, result);\n    \n    values.clear();\n    values.put(\"a\", 1.1);\n    values.put(\"b\", null);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertEquals(1.1D, result);\n    \n    values.clear();\n    values.put(\"a\", \"foo\");\n    values.put(\"b\", 2.1);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertEquals(\"foo\", result);\n\n    values.clear();\n    values.put(\"a\", true);\n    values.put(\"b\", 2.1);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertEquals(true, result);\n    \n\n    values.clear();\n    values.put(\"a\", null);\n    values.put(\"b\", false);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertEquals(false, result);\n\n    values.clear();\n    values.put(\"a\", null);\n    values.put(\"b\", null);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertNull(result);\n  }\n\n","sourceOld":"  @Test\n  public void twoFieldsWithValues() throws Exception{\n    StreamEvaluator evaluator = factory.constructEvaluator(\"coalesce(a,b)\");\n    Object result;\n    \n    values.clear();\n    values.put(\"a\", null);\n    values.put(\"b\", 2);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertEquals(2, result);\n    \n    values.clear();\n    values.put(\"a\", 1.1);\n    values.put(\"b\", null);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertEquals(1.1D, result);\n    \n    values.clear();\n    values.put(\"a\", \"foo\");\n    values.put(\"b\", 2.1);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertEquals(\"foo\", result);\n\n    values.clear();\n    values.put(\"a\", true);\n    values.put(\"b\", 2.1);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertEquals(true, result);\n    \n\n    values.clear();\n    values.put(\"a\", null);\n    values.put(\"b\", false);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertEquals(false, result);\n\n    values.clear();\n    values.put(\"a\", null);\n    values.put(\"b\", null);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertNull(result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45c28dbb559366e1f4ef8077346552bfb3f7ecf6","date":1503738439,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/CoalesceEvaluatorTest#twoFieldsWithValues().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/CoalesceEvaluatorTest#twoFieldsWithValues().mjava","sourceNew":"  @Test\n  public void twoFieldsWithValues() throws Exception{\n    StreamEvaluator evaluator = factory.constructEvaluator(\"coalesce(a,b)\");\n    Object result;\n    \n    values.clear();\n    values.put(\"a\", null);\n    values.put(\"b\", 2);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertEquals(2L, result);\n    \n    values.clear();\n    values.put(\"a\", 1.1);\n    values.put(\"b\", null);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertEquals(1.1D, result);\n    \n    values.clear();\n    values.put(\"a\", \"foo\");\n    values.put(\"b\", 2.1);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertEquals(\"foo\", result);\n\n    values.clear();\n    values.put(\"a\", true);\n    values.put(\"b\", 2.1);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertEquals(true, result);\n    \n\n    values.clear();\n    values.put(\"a\", null);\n    values.put(\"b\", false);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertEquals(false, result);\n\n    values.clear();\n    values.put(\"a\", null);\n    values.put(\"b\", null);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertNull(result);\n  }\n\n","sourceOld":"  @Test\n  public void twoFieldsWithValues() throws Exception{\n    StreamEvaluator evaluator = factory.constructEvaluator(\"coalesce(a,b)\");\n    Object result;\n    \n    values.clear();\n    values.put(\"a\", null);\n    values.put(\"b\", 2);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertEquals(2, result);\n    \n    values.clear();\n    values.put(\"a\", 1.1);\n    values.put(\"b\", null);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertEquals(1.1D, result);\n    \n    values.clear();\n    values.put(\"a\", \"foo\");\n    values.put(\"b\", 2.1);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertEquals(\"foo\", result);\n\n    values.clear();\n    values.put(\"a\", true);\n    values.put(\"b\", 2.1);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertEquals(true, result);\n    \n\n    values.clear();\n    values.put(\"a\", null);\n    values.put(\"b\", false);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertEquals(false, result);\n\n    values.clear();\n    values.put(\"a\", null);\n    values.put(\"b\", null);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertNull(result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/CoalesceEvaluatorTest#twoFieldsWithValues().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/CoalesceEvaluatorTest#twoFieldsWithValues().mjava","sourceNew":"  @Test\n  public void twoFieldsWithValues() throws Exception{\n    StreamEvaluator evaluator = factory.constructEvaluator(\"coalesce(a,b)\");\n    Object result;\n    \n    values.clear();\n    values.put(\"a\", null);\n    values.put(\"b\", 2);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertEquals(2L, result);\n    \n    values.clear();\n    values.put(\"a\", 1.1);\n    values.put(\"b\", null);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertEquals(1.1D, result);\n    \n    values.clear();\n    values.put(\"a\", \"foo\");\n    values.put(\"b\", 2.1);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertEquals(\"foo\", result);\n\n    values.clear();\n    values.put(\"a\", true);\n    values.put(\"b\", 2.1);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertEquals(true, result);\n    \n\n    values.clear();\n    values.put(\"a\", null);\n    values.put(\"b\", false);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertEquals(false, result);\n\n    values.clear();\n    values.put(\"a\", null);\n    values.put(\"b\", null);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertNull(result);\n  }\n\n","sourceOld":"  @Test\n  public void twoFieldsWithValues() throws Exception{\n    StreamEvaluator evaluator = factory.constructEvaluator(\"coalesce(a,b)\");\n    Object result;\n    \n    values.clear();\n    values.put(\"a\", null);\n    values.put(\"b\", 2);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertEquals(2, result);\n    \n    values.clear();\n    values.put(\"a\", 1.1);\n    values.put(\"b\", null);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertEquals(1.1D, result);\n    \n    values.clear();\n    values.put(\"a\", \"foo\");\n    values.put(\"b\", 2.1);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertEquals(\"foo\", result);\n\n    values.clear();\n    values.put(\"a\", true);\n    values.put(\"b\", 2.1);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertEquals(true, result);\n    \n\n    values.clear();\n    values.put(\"a\", null);\n    values.put(\"b\", false);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertEquals(false, result);\n\n    values.clear();\n    values.put(\"a\", null);\n    values.put(\"b\", null);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertNull(result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d7ec8367e3d451bb6e9ff83e43419ea2452dea5","date":1512445603,"type":4,"author":"Joel Bernstein","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/CoalesceEvaluatorTest#twoFieldsWithValues().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void twoFieldsWithValues() throws Exception{\n    StreamEvaluator evaluator = factory.constructEvaluator(\"coalesce(a,b)\");\n    Object result;\n    \n    values.clear();\n    values.put(\"a\", null);\n    values.put(\"b\", 2);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertEquals(2L, result);\n    \n    values.clear();\n    values.put(\"a\", 1.1);\n    values.put(\"b\", null);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertEquals(1.1D, result);\n    \n    values.clear();\n    values.put(\"a\", \"foo\");\n    values.put(\"b\", 2.1);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertEquals(\"foo\", result);\n\n    values.clear();\n    values.put(\"a\", true);\n    values.put(\"b\", 2.1);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertEquals(true, result);\n    \n\n    values.clear();\n    values.put(\"a\", null);\n    values.put(\"b\", false);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertEquals(false, result);\n\n    values.clear();\n    values.put(\"a\", null);\n    values.put(\"b\", null);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertNull(result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["d97e737ece4381771c200f1c5030a5a167c09977","45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"7d7ec8367e3d451bb6e9ff83e43419ea2452dea5":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"6c73f5c06ecda4281a8efee68d5fb9dafb92c1c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["6c73f5c06ecda4281a8efee68d5fb9dafb92c1c4","ba1e7de64990e3928b90142a52fb92eeff556475"],"ba1e7de64990e3928b90142a52fb92eeff556475":["6c73f5c06ecda4281a8efee68d5fb9dafb92c1c4"],"d97e737ece4381771c200f1c5030a5a167c09977":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7d7ec8367e3d451bb6e9ff83e43419ea2452dea5"]},"commit2Childs":{"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"7d7ec8367e3d451bb6e9ff83e43419ea2452dea5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6c73f5c06ecda4281a8efee68d5fb9dafb92c1c4":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6","ba1e7de64990e3928b90142a52fb92eeff556475"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6c73f5c06ecda4281a8efee68d5fb9dafb92c1c4","d97e737ece4381771c200f1c5030a5a167c09977"],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","7d7ec8367e3d451bb6e9ff83e43419ea2452dea5"],"d97e737ece4381771c200f1c5030a5a167c09977":["3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"ba1e7de64990e3928b90142a52fb92eeff556475":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}