{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,boolean).mjava","commits":[{"id":"2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9","date":1371479482,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public CloudSolrServer(String zkHost, boolean updatesToLeaders) throws MalformedURLException {\n    this.zkHost = zkHost;\n    this.myClient = HttpClientUtil.createClient(null);\n    this.lbServer = new LBHttpSolrServer(myClient);\n    this.updatesToLeaders = updatesToLeaders;\n}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public CloudSolrServer(String zkHost, boolean updatesToLeaders) throws MalformedURLException {\n    this.zkHost = zkHost;\n    this.myClient = HttpClientUtil.createClient(null);\n    this.lbServer = new LBHttpSolrServer(myClient);\n    this.updatesToLeaders = updatesToLeaders;\n}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5fc588fc7c6e55c0d778665292d023bf8d5f3b1","date":1378862385,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,boolean).mjava","sourceNew":"  public CloudSolrServer(String zkHost, boolean updatesToLeaders)\n      throws MalformedURLException {\n    this.zkHost = zkHost;\n    this.myClient = HttpClientUtil.createClient(null);\n    this.lbServer = new LBHttpSolrServer(myClient);\n    this.updatesToLeaders = updatesToLeaders;\n  }\n\n","sourceOld":"  public CloudSolrServer(String zkHost, boolean updatesToLeaders) throws MalformedURLException {\n    this.zkHost = zkHost;\n    this.myClient = HttpClientUtil.createClient(null);\n    this.lbServer = new LBHttpSolrServer(myClient);\n    this.updatesToLeaders = updatesToLeaders;\n}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4fb788ea821fd2677915770f1cada8122fce2cce","date":1379008291,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,boolean).mjava","sourceNew":"  public CloudSolrServer(String zkHost, boolean updatesToLeaders)\n      throws MalformedURLException {\n    this.zkHost = zkHost;\n    this.myClient = HttpClientUtil.createClient(null);\n    this.lbServer = new LBHttpSolrServer(myClient);\n    this.updatesToLeaders = updatesToLeaders;\n    shutdownLBHttpSolrServer = true;\n  }\n\n","sourceOld":"  public CloudSolrServer(String zkHost, boolean updatesToLeaders)\n      throws MalformedURLException {\n    this.zkHost = zkHost;\n    this.myClient = HttpClientUtil.createClient(null);\n    this.lbServer = new LBHttpSolrServer(myClient);\n    this.updatesToLeaders = updatesToLeaders;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53764ade528df7aa0563b47409995911a869be79","date":1382153048,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,boolean).mjava","sourceNew":"  public CloudSolrServer(String zkHost, boolean updatesToLeaders)\n      throws MalformedURLException {\n    this.zkHost = zkHost;\n    this.myClient = HttpClientUtil.createClient(null);\n    this.lbServer = new LBHttpSolrServer(myClient);\n    this.lbServer.setRequestWriter(new BinaryRequestWriter());\n    this.lbServer.setParser(new BinaryResponseParser());\n    this.updatesToLeaders = updatesToLeaders;\n    shutdownLBHttpSolrServer = true;\n  }\n\n","sourceOld":"  public CloudSolrServer(String zkHost, boolean updatesToLeaders)\n      throws MalformedURLException {\n    this.zkHost = zkHost;\n    this.myClient = HttpClientUtil.createClient(null);\n    this.lbServer = new LBHttpSolrServer(myClient);\n    this.updatesToLeaders = updatesToLeaders;\n    shutdownLBHttpSolrServer = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0622fbd990643ae4cacb693db6a0c82cf8916ae2","date":1397637446,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,boolean).mjava","sourceNew":"  public CloudSolrServer(String zkHost, boolean updatesToLeaders) throws MalformedURLException {\n    this(zkHost, updatesToLeaders, 60);\n  }\n\n","sourceOld":"  public CloudSolrServer(String zkHost, boolean updatesToLeaders)\n      throws MalformedURLException {\n    this.zkHost = zkHost;\n    this.myClient = HttpClientUtil.createClient(null);\n    this.lbServer = new LBHttpSolrServer(myClient);\n    this.lbServer.setRequestWriter(new BinaryRequestWriter());\n    this.lbServer.setParser(new BinaryResponseParser());\n    this.updatesToLeaders = updatesToLeaders;\n    shutdownLBHttpSolrServer = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5a233896b7f16ac9b4ed601ef8207d98f1f0500","date":1398857046,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,boolean).mjava","sourceNew":"  public CloudSolrServer(String zkHost, boolean updatesToLeaders)\n      throws MalformedURLException {\n    this.zkHost = zkHost;\n    this.myClient = HttpClientUtil.createClient(null);\n    this.lbServer = new LBHttpSolrServer(myClient);\n    this.lbServer.setRequestWriter(new BinaryRequestWriter());\n    this.lbServer.setParser(new BinaryResponseParser());\n    this.updatesToLeaders = updatesToLeaders;\n    shutdownLBHttpSolrServer = true;\n  }\n\n","sourceOld":"  public CloudSolrServer(String zkHost, boolean updatesToLeaders) throws MalformedURLException {\n    this(zkHost, updatesToLeaders, 60);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6f693ed86f289b2e42b46684409b3997f2c264a","date":1404319832,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,boolean).mjava","sourceNew":"  public CloudSolrServer(String zkHost, boolean updatesToLeaders)\n      throws MalformedURLException {\n    this.zkHost = zkHost;\n    this.myClient = HttpClientUtil.createClient(null);\n    this.lbServer = new LBHttpSolrServer(myClient);\n    this.lbServer.setRequestWriter(new BinaryRequestWriter());\n    this.lbServer.setParser(new BinaryResponseParser());\n    this.updatesToLeaders = updatesToLeaders;\n    shutdownLBHttpSolrServer = true;\n    setupStateVerParamOnQueryString(lbServer);\n  }\n\n","sourceOld":"  public CloudSolrServer(String zkHost, boolean updatesToLeaders)\n      throws MalformedURLException {\n    this.zkHost = zkHost;\n    this.myClient = HttpClientUtil.createClient(null);\n    this.lbServer = new LBHttpSolrServer(myClient);\n    this.lbServer.setRequestWriter(new BinaryRequestWriter());\n    this.lbServer.setParser(new BinaryResponseParser());\n    this.updatesToLeaders = updatesToLeaders;\n    shutdownLBHttpSolrServer = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c07fa58a256dccf8b95364855fd5e9ad4d1401","date":1404386015,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,boolean).mjava","sourceNew":"  public CloudSolrServer(String zkHost, boolean updatesToLeaders)\n      throws MalformedURLException {\n    this.zkHost = zkHost;\n    this.myClient = HttpClientUtil.createClient(null);\n    this.lbServer = new LBHttpSolrServer(myClient);\n    this.lbServer.setRequestWriter(new BinaryRequestWriter());\n    this.lbServer.setParser(new BinaryResponseParser());\n    this.updatesToLeaders = updatesToLeaders;\n    shutdownLBHttpSolrServer = true;\n  }\n\n","sourceOld":"  public CloudSolrServer(String zkHost, boolean updatesToLeaders)\n      throws MalformedURLException {\n    this.zkHost = zkHost;\n    this.myClient = HttpClientUtil.createClient(null);\n    this.lbServer = new LBHttpSolrServer(myClient);\n    this.lbServer.setRequestWriter(new BinaryRequestWriter());\n    this.lbServer.setParser(new BinaryResponseParser());\n    this.updatesToLeaders = updatesToLeaders;\n    shutdownLBHttpSolrServer = true;\n    setupStateVerParamOnQueryString(lbServer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52209f74dc33b64e2e3576fe15b8c2d312809d7","date":1408896505,"type":3,"author":"Shawn Heisey","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,boolean).mjava","sourceNew":"  /**\n   * @param zkHost\n   *          A zookeeper client endpoint.\n   * @param updatesToLeaders\n   *          If true, sends updates only to shard leaders.\n   * @see #CloudSolrServer(String) for full description and details on zkHost\n   */\n  public CloudSolrServer(String zkHost, boolean updatesToLeaders) {\n    this.zkHost = zkHost;\n    this.myClient = HttpClientUtil.createClient(null);\n    this.lbServer = new LBHttpSolrServer(myClient);\n    this.lbServer.setRequestWriter(new BinaryRequestWriter());\n    this.lbServer.setParser(new BinaryResponseParser());\n    this.updatesToLeaders = updatesToLeaders;\n    shutdownLBHttpSolrServer = true;\n  }\n\n","sourceOld":"  public CloudSolrServer(String zkHost, boolean updatesToLeaders)\n      throws MalformedURLException {\n    this.zkHost = zkHost;\n    this.myClient = HttpClientUtil.createClient(null);\n    this.lbServer = new LBHttpSolrServer(myClient);\n    this.lbServer.setRequestWriter(new BinaryRequestWriter());\n    this.lbServer.setParser(new BinaryResponseParser());\n    this.updatesToLeaders = updatesToLeaders;\n    shutdownLBHttpSolrServer = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279b175e5e66258442d2123a50f052219a9cc1b","date":1410531077,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,boolean).mjava","sourceNew":"  /**\n   * @param zkHost\n   *          A zookeeper client endpoint.\n   * @param updatesToLeaders\n   *          If true, sends updates only to shard leaders.\n   * @see #CloudSolrServer(String) for full description and details on zkHost\n   */\n  public CloudSolrServer(String zkHost, boolean updatesToLeaders) {\n    this.zkHost = zkHost;\n    this.myClient = HttpClientUtil.createClient(null);\n    this.lbServer = new LBHttpSolrServer(myClient);\n    this.lbServer.setRequestWriter(new BinaryRequestWriter());\n    this.lbServer.setParser(new BinaryResponseParser());\n    this.updatesToLeaders = updatesToLeaders;\n    shutdownLBHttpSolrServer = true;\n    setupStateVerParamOnQueryString(lbServer);\n  }\n\n","sourceOld":"  /**\n   * @param zkHost\n   *          A zookeeper client endpoint.\n   * @param updatesToLeaders\n   *          If true, sends updates only to shard leaders.\n   * @see #CloudSolrServer(String) for full description and details on zkHost\n   */\n  public CloudSolrServer(String zkHost, boolean updatesToLeaders) {\n    this.zkHost = zkHost;\n    this.myClient = HttpClientUtil.createClient(null);\n    this.lbServer = new LBHttpSolrServer(myClient);\n    this.lbServer.setRequestWriter(new BinaryRequestWriter());\n    this.lbServer.setParser(new BinaryResponseParser());\n    this.updatesToLeaders = updatesToLeaders;\n    shutdownLBHttpSolrServer = true;\n  }\n\n","bugFix":null,"bugIntro":["403b6d8b3e6cec80048e9cfc481bbffdd57517bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"403b6d8b3e6cec80048e9cfc481bbffdd57517bb","date":1410598299,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,boolean).mjava","sourceNew":"  /**\n   * @param zkHost\n   *          A zookeeper client endpoint.\n   * @param updatesToLeaders\n   *          If true, sends updates only to shard leaders.\n   * @see #CloudSolrServer(String) for full description and details on zkHost\n   */\n  public CloudSolrServer(String zkHost, boolean updatesToLeaders) {\n    this.zkHost = zkHost;\n    this.myClient = HttpClientUtil.createClient(null);\n    this.lbServer = new LBHttpSolrServer(myClient);\n    this.lbServer.setRequestWriter(new BinaryRequestWriter());\n    this.lbServer.setParser(new BinaryResponseParser());\n    this.updatesToLeaders = updatesToLeaders;\n    shutdownLBHttpSolrServer = true;\n    lbServer.addQueryParams(STATE_VERSION);\n  }\n\n","sourceOld":"  /**\n   * @param zkHost\n   *          A zookeeper client endpoint.\n   * @param updatesToLeaders\n   *          If true, sends updates only to shard leaders.\n   * @see #CloudSolrServer(String) for full description and details on zkHost\n   */\n  public CloudSolrServer(String zkHost, boolean updatesToLeaders) {\n    this.zkHost = zkHost;\n    this.myClient = HttpClientUtil.createClient(null);\n    this.lbServer = new LBHttpSolrServer(myClient);\n    this.lbServer.setRequestWriter(new BinaryRequestWriter());\n    this.lbServer.setParser(new BinaryResponseParser());\n    this.updatesToLeaders = updatesToLeaders;\n    shutdownLBHttpSolrServer = true;\n    setupStateVerParamOnQueryString(lbServer);\n  }\n\n","bugFix":["9279b175e5e66258442d2123a50f052219a9cc1b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"791652abeeebb8642f54a7b42ca914c55805479a","date":1413382171,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,boolean).mjava","sourceNew":"  /**\n   * @param zkHost\n   *          A zookeeper client endpoint.\n   * @param updatesToLeaders\n   *          If true, sends updates only to shard leaders.\n   * @see #CloudSolrServer(String) for full description and details on zkHost\n   */\n  public CloudSolrServer(String zkHost, boolean updatesToLeaders) {\n    this(zkHost, updatesToLeaders, null);\n  }\n\n","sourceOld":"  /**\n   * @param zkHost\n   *          A zookeeper client endpoint.\n   * @param updatesToLeaders\n   *          If true, sends updates only to shard leaders.\n   * @see #CloudSolrServer(String) for full description and details on zkHost\n   */\n  public CloudSolrServer(String zkHost, boolean updatesToLeaders) {\n    this.zkHost = zkHost;\n    this.myClient = HttpClientUtil.createClient(null);\n    this.lbServer = new LBHttpSolrServer(myClient);\n    this.lbServer.setRequestWriter(new BinaryRequestWriter());\n    this.lbServer.setParser(new BinaryResponseParser());\n    this.updatesToLeaders = updatesToLeaders;\n    shutdownLBHttpSolrServer = true;\n    lbServer.addQueryParams(STATE_VERSION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","date":1413458798,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,boolean).mjava","sourceNew":"  /**\n   * @param zkHost\n   *          A zookeeper client endpoint.\n   * @param updatesToLeaders\n   *          If true, sends updates only to shard leaders.\n   * @see #CloudSolrServer(String) for full description and details on zkHost\n   */\n  public CloudSolrServer(String zkHost, boolean updatesToLeaders) {\n    this(zkHost, updatesToLeaders, null);\n  }\n\n","sourceOld":"  /**\n   * @param zkHost\n   *          A zookeeper client endpoint.\n   * @param updatesToLeaders\n   *          If true, sends updates only to shard leaders.\n   * @see #CloudSolrServer(String) for full description and details on zkHost\n   */\n  public CloudSolrServer(String zkHost, boolean updatesToLeaders) {\n    this.zkHost = zkHost;\n    this.myClient = HttpClientUtil.createClient(null);\n    this.lbServer = new LBHttpSolrServer(myClient);\n    this.lbServer.setRequestWriter(new BinaryRequestWriter());\n    this.lbServer.setParser(new BinaryResponseParser());\n    this.updatesToLeaders = updatesToLeaders;\n    shutdownLBHttpSolrServer = true;\n    lbServer.addQueryParams(STATE_VERSION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,boolean).mjava","sourceNew":"  public CloudSolrServer(String zkHost, boolean updatesToLeaders) {\n    super(zkHost, updatesToLeaders);\n  }\n\n","sourceOld":"  /**\n   * @param zkHost\n   *          A zookeeper client endpoint.\n   * @param updatesToLeaders\n   *          If true, sends updates only to shard leaders.\n   * @see #CloudSolrServer(String) for full description and details on zkHost\n   */\n  public CloudSolrServer(String zkHost, boolean updatesToLeaders) {\n    this(zkHost, updatesToLeaders, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0080a8fdc299a09124dea014ed206981c1b8c54","date":1420037360,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,boolean).mjava","sourceNew":null,"sourceOld":"  public CloudSolrServer(String zkHost, boolean updatesToLeaders) {\n    super(zkHost, updatesToLeaders);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"403b6d8b3e6cec80048e9cfc481bbffdd57517bb":["9279b175e5e66258442d2123a50f052219a9cc1b"],"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84":["403b6d8b3e6cec80048e9cfc481bbffdd57517bb","791652abeeebb8642f54a7b42ca914c55805479a"],"2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9"],"d5fc588fc7c6e55c0d778665292d023bf8d5f3b1":["2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"bafca15d8e408346a67f4282ad1143b88023893b":["791652abeeebb8642f54a7b42ca914c55805479a"],"e52209f74dc33b64e2e3576fe15b8c2d312809d7":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"9279b175e5e66258442d2123a50f052219a9cc1b":["e52209f74dc33b64e2e3576fe15b8c2d312809d7"],"4fb788ea821fd2677915770f1cada8122fce2cce":["d5fc588fc7c6e55c0d778665292d023bf8d5f3b1"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"53764ade528df7aa0563b47409995911a869be79":["4fb788ea821fd2677915770f1cada8122fce2cce"],"791652abeeebb8642f54a7b42ca914c55805479a":["403b6d8b3e6cec80048e9cfc481bbffdd57517bb"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["53764ade528df7aa0563b47409995911a869be79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c0080a8fdc299a09124dea014ed206981c1b8c54"],"c0080a8fdc299a09124dea014ed206981c1b8c54":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"403b6d8b3e6cec80048e9cfc481bbffdd57517bb":["c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","791652abeeebb8642f54a7b42ca914c55805479a"],"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84":[],"2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9":["37a0f60745e53927c4c876cfe5b5a58170f0646c","d5fc588fc7c6e55c0d778665292d023bf8d5f3b1"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"d5fc588fc7c6e55c0d778665292d023bf8d5f3b1":["4fb788ea821fd2677915770f1cada8122fce2cce"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["e52209f74dc33b64e2e3576fe15b8c2d312809d7"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"bafca15d8e408346a67f4282ad1143b88023893b":["c0080a8fdc299a09124dea014ed206981c1b8c54"],"e52209f74dc33b64e2e3576fe15b8c2d312809d7":["9279b175e5e66258442d2123a50f052219a9cc1b"],"9279b175e5e66258442d2123a50f052219a9cc1b":["403b6d8b3e6cec80048e9cfc481bbffdd57517bb"],"4fb788ea821fd2677915770f1cada8122fce2cce":["53764ade528df7aa0563b47409995911a869be79"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"53764ade528df7aa0563b47409995911a869be79":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"791652abeeebb8642f54a7b42ca914c55805479a":["c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","bafca15d8e408346a67f4282ad1143b88023893b"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"c0080a8fdc299a09124dea014ed206981c1b8c54":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}