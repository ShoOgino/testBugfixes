{"path":"lucene/core/src/java/org/apache/lucene/search/MatchAllDocsQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","commits":[{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MatchAllDocsQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MatchAllDocsQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public String toString() {\n        return \"weight(\" + MatchAllDocsQuery.this + \")\";\n      }\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        return new ConstantScoreScorer(this, score(), DocIdSetIterator.all(context.reader().maxDoc()));\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        final float score = score();\n        final int maxDoc = context.reader().maxDoc();\n        return new BulkScorer() {\n          @Override\n          public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n            max = Math.min(max, maxDoc);\n            FakeScorer scorer = new FakeScorer();\n            scorer.score = score;\n            collector.setScorer(scorer);\n            for (int doc = min; doc < max; ++doc) {\n              scorer.doc = doc;\n              if (acceptDocs == null || acceptDocs.get(doc)) {\n                collector.collect(doc);\n              }\n            }\n            return max == maxDoc ? DocIdSetIterator.NO_MORE_DOCS : max;\n          }\n          @Override\n          public long cost() {\n            return maxDoc;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public String toString() {\n        return \"weight(\" + MatchAllDocsQuery.this + \")\";\n      }\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        return new ConstantScoreScorer(this, score(), DocIdSetIterator.all(context.reader().maxDoc()));\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        final float score = score();\n        final int maxDoc = context.reader().maxDoc();\n        return new BulkScorer() {\n          @Override\n          public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n            max = Math.min(max, maxDoc);\n            FakeScorer scorer = new FakeScorer();\n            scorer.score = score;\n            collector.setScorer(scorer);\n            for (int doc = min; doc < max; ++doc) {\n              scorer.doc = doc;\n              if (acceptDocs == null || acceptDocs.get(doc)) {\n                collector.collect(doc);\n              }\n            }\n            return max == maxDoc ? DocIdSetIterator.NO_MORE_DOCS : max;\n          }\n          @Override\n          public long cost() {\n            return maxDoc;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MatchAllDocsQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MatchAllDocsQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public String toString() {\n        return \"weight(\" + MatchAllDocsQuery.this + \")\";\n      }\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        return new ConstantScoreScorer(this, score(), DocIdSetIterator.all(context.reader().maxDoc()));\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        final float score = score();\n        final int maxDoc = context.reader().maxDoc();\n        return new BulkScorer() {\n          @Override\n          public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n            max = Math.min(max, maxDoc);\n            FakeScorer scorer = new FakeScorer();\n            scorer.score = score;\n            collector.setScorer(scorer);\n            for (int doc = min; doc < max; ++doc) {\n              scorer.doc = doc;\n              if (acceptDocs == null || acceptDocs.get(doc)) {\n                collector.collect(doc);\n              }\n            }\n            return max == maxDoc ? DocIdSetIterator.NO_MORE_DOCS : max;\n          }\n          @Override\n          public long cost() {\n            return maxDoc;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public String toString() {\n        return \"weight(\" + MatchAllDocsQuery.this + \")\";\n      }\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        return new ConstantScoreScorer(this, score(), DocIdSetIterator.all(context.reader().maxDoc()));\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        final float score = score();\n        final int maxDoc = context.reader().maxDoc();\n        return new BulkScorer() {\n          @Override\n          public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n            max = Math.min(max, maxDoc);\n            FakeScorer scorer = new FakeScorer();\n            scorer.score = score;\n            collector.setScorer(scorer);\n            for (int doc = min; doc < max; ++doc) {\n              scorer.doc = doc;\n              if (acceptDocs == null || acceptDocs.get(doc)) {\n                collector.collect(doc);\n              }\n            }\n            return max == maxDoc ? DocIdSetIterator.NO_MORE_DOCS : max;\n          }\n          @Override\n          public long cost() {\n            return maxDoc;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3","date":1536316907,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MatchAllDocsQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MatchAllDocsQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public String toString() {\n        return \"weight(\" + MatchAllDocsQuery.this + \")\";\n      }\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        return new ConstantScoreScorer(this, score(), DocIdSetIterator.all(context.reader().maxDoc()));\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        final float score = score();\n        final int maxDoc = context.reader().maxDoc();\n        return new BulkScorer() {\n          @Override\n          public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n            max = Math.min(max, maxDoc);\n            ScoreAndDoc scorer = new ScoreAndDoc();\n            scorer.score = score;\n            collector.setScorer(scorer);\n            for (int doc = min; doc < max; ++doc) {\n              scorer.doc = doc;\n              if (acceptDocs == null || acceptDocs.get(doc)) {\n                collector.collect(doc);\n              }\n            }\n            return max == maxDoc ? DocIdSetIterator.NO_MORE_DOCS : max;\n          }\n          @Override\n          public long cost() {\n            return maxDoc;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public String toString() {\n        return \"weight(\" + MatchAllDocsQuery.this + \")\";\n      }\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        return new ConstantScoreScorer(this, score(), DocIdSetIterator.all(context.reader().maxDoc()));\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        final float score = score();\n        final int maxDoc = context.reader().maxDoc();\n        return new BulkScorer() {\n          @Override\n          public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n            max = Math.min(max, maxDoc);\n            FakeScorer scorer = new FakeScorer();\n            scorer.score = score;\n            collector.setScorer(scorer);\n            for (int doc = min; doc < max; ++doc) {\n              scorer.doc = doc;\n              if (acceptDocs == null || acceptDocs.get(doc)) {\n                collector.collect(doc);\n              }\n            }\n            return max == maxDoc ? DocIdSetIterator.NO_MORE_DOCS : max;\n          }\n          @Override\n          public long cost() {\n            return maxDoc;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c226b0eeb8b028f572020f459851a663a2c064e","date":1542377651,"type":3,"author":"Christophe Bismuth","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MatchAllDocsQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MatchAllDocsQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public String toString() {\n        return \"weight(\" + MatchAllDocsQuery.this + \")\";\n      }\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        return new ConstantScoreScorer(this, score(), scoreMode, DocIdSetIterator.all(context.reader().maxDoc()));\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        final float score = score();\n        final int maxDoc = context.reader().maxDoc();\n        return new BulkScorer() {\n          @Override\n          public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n            max = Math.min(max, maxDoc);\n            ScoreAndDoc scorer = new ScoreAndDoc();\n            scorer.score = score;\n            collector.setScorer(scorer);\n            for (int doc = min; doc < max; ++doc) {\n              scorer.doc = doc;\n              if (acceptDocs == null || acceptDocs.get(doc)) {\n                collector.collect(doc);\n              }\n            }\n            return max == maxDoc ? DocIdSetIterator.NO_MORE_DOCS : max;\n          }\n          @Override\n          public long cost() {\n            return maxDoc;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public String toString() {\n        return \"weight(\" + MatchAllDocsQuery.this + \")\";\n      }\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        return new ConstantScoreScorer(this, score(), DocIdSetIterator.all(context.reader().maxDoc()));\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        final float score = score();\n        final int maxDoc = context.reader().maxDoc();\n        return new BulkScorer() {\n          @Override\n          public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n            max = Math.min(max, maxDoc);\n            ScoreAndDoc scorer = new ScoreAndDoc();\n            scorer.score = score;\n            collector.setScorer(scorer);\n            for (int doc = min; doc < max; ++doc) {\n              scorer.doc = doc;\n              if (acceptDocs == null || acceptDocs.get(doc)) {\n                collector.collect(doc);\n              }\n            }\n            return max == maxDoc ? DocIdSetIterator.NO_MORE_DOCS : max;\n          }\n          @Override\n          public long cost() {\n            return maxDoc;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea2b4f7d8eea46fb10842f432db521b9d7aa5402","date":1544691709,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MatchAllDocsQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MatchAllDocsQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public String toString() {\n        return \"weight(\" + MatchAllDocsQuery.this + \")\";\n      }\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        return new ConstantScoreScorer(this, score(), scoreMode, DocIdSetIterator.all(context.reader().maxDoc()));\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        if (scoreMode == ScoreMode.TOP_SCORES) {\n          return super.bulkScorer(context);\n        }\n        final float score = score();\n        final int maxDoc = context.reader().maxDoc();\n        return new BulkScorer() {\n          @Override\n          public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n            max = Math.min(max, maxDoc);\n            ScoreAndDoc scorer = new ScoreAndDoc();\n            scorer.score = score;\n            collector.setScorer(scorer);\n            for (int doc = min; doc < max; ++doc) {\n              scorer.doc = doc;\n              if (acceptDocs == null || acceptDocs.get(doc)) {\n                collector.collect(doc);\n              }\n            }\n            return max == maxDoc ? DocIdSetIterator.NO_MORE_DOCS : max;\n          }\n          @Override\n          public long cost() {\n            return maxDoc;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public String toString() {\n        return \"weight(\" + MatchAllDocsQuery.this + \")\";\n      }\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        return new ConstantScoreScorer(this, score(), scoreMode, DocIdSetIterator.all(context.reader().maxDoc()));\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        final float score = score();\n        final int maxDoc = context.reader().maxDoc();\n        return new BulkScorer() {\n          @Override\n          public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n            max = Math.min(max, maxDoc);\n            ScoreAndDoc scorer = new ScoreAndDoc();\n            scorer.score = score;\n            collector.setScorer(scorer);\n            for (int doc = min; doc < max; ++doc) {\n              scorer.doc = doc;\n              if (acceptDocs == null || acceptDocs.get(doc)) {\n                collector.collect(doc);\n              }\n            }\n            return max == maxDoc ? DocIdSetIterator.NO_MORE_DOCS : max;\n          }\n          @Override\n          public long cost() {\n            return maxDoc;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e18fac0122568cb02eb2c92608ca703a723bbbd6","date":1592942698,"type":3,"author":"Mayya Sharipova","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MatchAllDocsQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MatchAllDocsQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public String toString() {\n        return \"weight(\" + MatchAllDocsQuery.this + \")\";\n      }\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        return new ConstantScoreScorer(this, score(), scoreMode, DocIdSetIterator.all(context.reader().maxDoc()));\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        if (scoreMode.isExhaustive() == false) {\n          return super.bulkScorer(context);\n        }\n        final float score = score();\n        final int maxDoc = context.reader().maxDoc();\n        return new BulkScorer() {\n          @Override\n          public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n            max = Math.min(max, maxDoc);\n            ScoreAndDoc scorer = new ScoreAndDoc();\n            scorer.score = score;\n            collector.setScorer(scorer);\n            for (int doc = min; doc < max; ++doc) {\n              scorer.doc = doc;\n              if (acceptDocs == null || acceptDocs.get(doc)) {\n                collector.collect(doc);\n              }\n            }\n            return max == maxDoc ? DocIdSetIterator.NO_MORE_DOCS : max;\n          }\n          @Override\n          public long cost() {\n            return maxDoc;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public String toString() {\n        return \"weight(\" + MatchAllDocsQuery.this + \")\";\n      }\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        return new ConstantScoreScorer(this, score(), scoreMode, DocIdSetIterator.all(context.reader().maxDoc()));\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        if (scoreMode == ScoreMode.TOP_SCORES) {\n          return super.bulkScorer(context);\n        }\n        final float score = score();\n        final int maxDoc = context.reader().maxDoc();\n        return new BulkScorer() {\n          @Override\n          public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n            max = Math.min(max, maxDoc);\n            ScoreAndDoc scorer = new ScoreAndDoc();\n            scorer.score = score;\n            collector.setScorer(scorer);\n            for (int doc = min; doc < max; ++doc) {\n              scorer.doc = doc;\n              if (acceptDocs == null || acceptDocs.get(doc)) {\n                collector.collect(doc);\n              }\n            }\n            return max == maxDoc ? DocIdSetIterator.NO_MORE_DOCS : max;\n          }\n          @Override\n          public long cost() {\n            return maxDoc;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ea2b4f7d8eea46fb10842f432db521b9d7aa5402":["9c226b0eeb8b028f572020f459851a663a2c064e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["417142ff08fda9cf0b72d5133e63097a166c6458"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e18fac0122568cb02eb2c92608ca703a723bbbd6":["ea2b4f7d8eea46fb10842f432db521b9d7aa5402"],"9c226b0eeb8b028f572020f459851a663a2c064e":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e18fac0122568cb02eb2c92608ca703a723bbbd6"],"417142ff08fda9cf0b72d5133e63097a166c6458":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"ea2b4f7d8eea46fb10842f432db521b9d7aa5402":["e18fac0122568cb02eb2c92608ca703a723bbbd6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["9c226b0eeb8b028f572020f459851a663a2c064e"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"e18fac0122568cb02eb2c92608ca703a723bbbd6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9c226b0eeb8b028f572020f459851a663a2c064e":["ea2b4f7d8eea46fb10842f432db521b9d7aa5402"],"417142ff08fda9cf0b72d5133e63097a166c6458":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}