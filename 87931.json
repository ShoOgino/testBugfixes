{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MultiKmeansEvaluator#doWork(Object...).mjava","commits":[{"id":"09b9e1f390acfc30c7a60da79f64bab7244c6313","date":1516740877,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MultiKmeansEvaluator#doWork(Object...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n\n    if(values.length != 3) {\n      throw new IOException(\"The multiKmeans function expects three parameters; a matrix to cluster, k and number of trials.\");\n    }\n\n    Object value1 = values[0];\n    Object value2 = values[1];\n    Object value3 = values[2];\n\n    Matrix matrix = null;\n    int k = 0;\n    int trials=0;\n\n    if(value1 instanceof Matrix) {\n      matrix = (Matrix)value1;\n    } else {\n      throw new IOException(\"The first parameter for multiKmeans should be the observation matrix.\");\n    }\n\n    if(value2 instanceof Number) {\n      k = ((Number)value2).intValue();\n    } else {\n      throw new IOException(\"The second parameter for multiKmeans should be k.\");\n    }\n\n    if(value3 instanceof Number) {\n      trials= ((Number)value3).intValue();\n    } else {\n      throw new IOException(\"The third parameter for multiKmeans should be trials.\");\n    }\n\n    KMeansPlusPlusClusterer<KmeansEvaluator.ClusterPoint> kmeans = new KMeansPlusPlusClusterer(k, maxIterations);\n    MultiKMeansPlusPlusClusterer multiKmeans = new MultiKMeansPlusPlusClusterer(kmeans, trials);\n\n    List<KmeansEvaluator.ClusterPoint> points = new ArrayList();\n    double[][] data = matrix.getData();\n\n    List<String> ids = matrix.getRowLabels();\n\n    for(int i=0; i<data.length; i++) {\n      double[] vec = data[i];\n      points.add(new KmeansEvaluator.ClusterPoint(ids.get(i), vec));\n    }\n\n    Map fields = new HashMap();\n\n    fields.put(\"k\", k);\n    fields.put(\"trials\", trials);\n    fields.put(\"distance\", \"euclidean\");\n    fields.put(\"maxIterations\", maxIterations);\n\n    return new KmeansEvaluator.ClusterTuple(fields, multiKmeans.cluster(points), matrix.getColumnLabels());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441","date":1516881857,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MultiKmeansEvaluator#doWork(Object...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n\n    if(values.length != 3) {\n      throw new IOException(\"The multiKmeans function expects three parameters; a matrix to cluster, k and number of trials.\");\n    }\n\n    Object value1 = values[0];\n    Object value2 = values[1];\n    Object value3 = values[2];\n\n    Matrix matrix = null;\n    int k = 0;\n    int trials=0;\n\n    if(value1 instanceof Matrix) {\n      matrix = (Matrix)value1;\n    } else {\n      throw new IOException(\"The first parameter for multiKmeans should be the observation matrix.\");\n    }\n\n    if(value2 instanceof Number) {\n      k = ((Number)value2).intValue();\n    } else {\n      throw new IOException(\"The second parameter for multiKmeans should be k.\");\n    }\n\n    if(value3 instanceof Number) {\n      trials= ((Number)value3).intValue();\n    } else {\n      throw new IOException(\"The third parameter for multiKmeans should be trials.\");\n    }\n\n    KMeansPlusPlusClusterer<KmeansEvaluator.ClusterPoint> kmeans = new KMeansPlusPlusClusterer(k, maxIterations);\n    MultiKMeansPlusPlusClusterer multiKmeans = new MultiKMeansPlusPlusClusterer(kmeans, trials);\n\n    List<KmeansEvaluator.ClusterPoint> points = new ArrayList();\n    double[][] data = matrix.getData();\n\n    List<String> ids = matrix.getRowLabels();\n\n    for(int i=0; i<data.length; i++) {\n      double[] vec = data[i];\n      points.add(new KmeansEvaluator.ClusterPoint(ids.get(i), vec));\n    }\n\n    Map fields = new HashMap();\n\n    fields.put(\"k\", k);\n    fields.put(\"trials\", trials);\n    fields.put(\"distance\", \"euclidean\");\n    fields.put(\"maxIterations\", maxIterations);\n\n    return new KmeansEvaluator.ClusterTuple(fields, multiKmeans.cluster(points), matrix.getColumnLabels());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","date":1591579911,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MultiKmeansEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MultiKmeansEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\"})\n  public Object doWork(Object... values) throws IOException {\n\n    if(values.length != 3) {\n      throw new IOException(\"The multiKmeans function expects three parameters; a matrix to cluster, k and number of trials.\");\n    }\n\n    Object value1 = values[0];\n    Object value2 = values[1];\n    Object value3 = values[2];\n\n    Matrix matrix = null;\n    int k = 0;\n    int trials=0;\n\n    if(value1 instanceof Matrix) {\n      matrix = (Matrix)value1;\n    } else {\n      throw new IOException(\"The first parameter for multiKmeans should be the observation matrix.\");\n    }\n\n    if(value2 instanceof Number) {\n      k = ((Number)value2).intValue();\n    } else {\n      throw new IOException(\"The second parameter for multiKmeans should be k.\");\n    }\n\n    if(value3 instanceof Number) {\n      trials= ((Number)value3).intValue();\n    } else {\n      throw new IOException(\"The third parameter for multiKmeans should be trials.\");\n    }\n\n    @SuppressWarnings({\"rawtypes\"})\n    KMeansPlusPlusClusterer<KmeansEvaluator.ClusterPoint> kmeans = new KMeansPlusPlusClusterer(k, maxIterations);\n    @SuppressWarnings({\"rawtypes\"})\n    MultiKMeansPlusPlusClusterer multiKmeans = new MultiKMeansPlusPlusClusterer(kmeans, trials);\n\n    List<KmeansEvaluator.ClusterPoint> points = new ArrayList<>();\n    double[][] data = matrix.getData();\n\n    List<String> ids = matrix.getRowLabels();\n\n    for(int i=0; i<data.length; i++) {\n      double[] vec = data[i];\n      points.add(new KmeansEvaluator.ClusterPoint(ids.get(i), vec));\n    }\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map fields = new HashMap();\n\n    fields.put(\"k\", k);\n    fields.put(\"trials\", trials);\n    fields.put(\"distance\", \"euclidean\");\n    fields.put(\"maxIterations\", maxIterations);\n\n    return new KmeansEvaluator.ClusterTuple(fields, multiKmeans.cluster(points), matrix.getColumnLabels());\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object... values) throws IOException {\n\n    if(values.length != 3) {\n      throw new IOException(\"The multiKmeans function expects three parameters; a matrix to cluster, k and number of trials.\");\n    }\n\n    Object value1 = values[0];\n    Object value2 = values[1];\n    Object value3 = values[2];\n\n    Matrix matrix = null;\n    int k = 0;\n    int trials=0;\n\n    if(value1 instanceof Matrix) {\n      matrix = (Matrix)value1;\n    } else {\n      throw new IOException(\"The first parameter for multiKmeans should be the observation matrix.\");\n    }\n\n    if(value2 instanceof Number) {\n      k = ((Number)value2).intValue();\n    } else {\n      throw new IOException(\"The second parameter for multiKmeans should be k.\");\n    }\n\n    if(value3 instanceof Number) {\n      trials= ((Number)value3).intValue();\n    } else {\n      throw new IOException(\"The third parameter for multiKmeans should be trials.\");\n    }\n\n    KMeansPlusPlusClusterer<KmeansEvaluator.ClusterPoint> kmeans = new KMeansPlusPlusClusterer(k, maxIterations);\n    MultiKMeansPlusPlusClusterer multiKmeans = new MultiKMeansPlusPlusClusterer(kmeans, trials);\n\n    List<KmeansEvaluator.ClusterPoint> points = new ArrayList();\n    double[][] data = matrix.getData();\n\n    List<String> ids = matrix.getRowLabels();\n\n    for(int i=0; i<data.length; i++) {\n      double[] vec = data[i];\n      points.add(new KmeansEvaluator.ClusterPoint(ids.get(i), vec));\n    }\n\n    Map fields = new HashMap();\n\n    fields.put(\"k\", k);\n    fields.put(\"trials\", trials);\n    fields.put(\"distance\", \"euclidean\");\n    fields.put(\"maxIterations\", maxIterations);\n\n    return new KmeansEvaluator.ClusterTuple(fields, multiKmeans.cluster(points), matrix.getColumnLabels());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09b9e1f390acfc30c7a60da79f64bab7244c6313":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","09b9e1f390acfc30c7a60da79f64bab7244c6313"]},"commit2Childs":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09b9e1f390acfc30c7a60da79f64bab7244c6313","43a787a75ad72a9bf26e8ff714d8b6d01f9eb441"],"09b9e1f390acfc30c7a60da79f64bab7244c6313":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441"],"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}