{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/AddReplicaCmd#buildReplicaPositions(SolrCloudManager,ClusterState,String,ZkNodeProps,EnumMap[Replica.Type,Integer],AtomicReference[PolicyHelper.SessionWrapper]).mjava","commits":[{"id":"deea3439de4f487ae553317e50d5d641ca386374","date":1537522941,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/AddReplicaCmd#buildReplicaPositions(SolrCloudManager,ClusterState,String,ZkNodeProps,EnumMap[Replica.Type,Integer],AtomicReference[PolicyHelper.SessionWrapper]).mjava","pathOld":"/dev/null","sourceNew":"  public static List<ReplicaPosition> buildReplicaPositions(SolrCloudManager cloudManager, ClusterState clusterState,\n                                                            String collectionName, ZkNodeProps message,\n                                                            EnumMap<Replica.Type, Integer> replicaTypeVsCount,\n                                                            AtomicReference< PolicyHelper.SessionWrapper> sessionWrapper) throws IOException, InterruptedException {\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    int numNrtReplicas = replicaTypeVsCount.get(Replica.Type.NRT);\n    int numPullReplicas = replicaTypeVsCount.get(Replica.Type.PULL);\n    int numTlogReplicas = replicaTypeVsCount.get(Replica.Type.TLOG);\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n\n    String node = message.getStr(CoreAdminParams.NODE);\n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n    if (createNodeSetStr == null) {\n      if (node != null) {\n        message.getProperties().put(OverseerCollectionMessageHandler.CREATE_NODE_SET, node);\n        createNodeSetStr = node;\n      }\n    }\n\n    List<ReplicaPosition> positions = null;\n    if (!skipCreateReplicaInClusterState) {\n      if (CloudUtil.usePolicyFramework(collection, cloudManager)) {\n        if (node == null) {\n          if (collection.getPolicyName() != null) message.getProperties().put(Policy.POLICY, collection.getPolicyName());\n          positions = Assign.identifyNodes(cloudManager,\n              clusterState,\n              Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, OverseerCollectionMessageHandler.RANDOM),\n              collection.getName(),\n              message,\n              Collections.singletonList(sliceName),\n              numNrtReplicas,\n              numTlogReplicas,\n              numPullReplicas);\n          sessionWrapper.set(PolicyHelper.getLastSessionWrapper(true));\n        }\n      } else {\n        List<Assign.ReplicaCount> sortedNodeList = Assign.getNodesForNewReplicas(clusterState, collection.getName(), sliceName, numNrtReplicas,\n            numTlogReplicas, numPullReplicas, createNodeSetStr, cloudManager);\n        int i = 0;\n        positions = new ArrayList<>();\n        for (Map.Entry<Replica.Type, Integer> e : replicaTypeVsCount.entrySet()) {\n          for (int j = 0; j < e.getValue(); j++) {\n            positions.add(new ReplicaPosition(sliceName, j + 1, e.getKey(), sortedNodeList.get(i % sortedNodeList.size()).nodeName));\n            i++;\n          }\n        }\n      }\n    }\n\n    if (positions == null)  {\n      assert node != null;\n      if (node == null) {\n        // in case asserts are disabled\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"A node should have been identified to add replica but wasn't. Please inform solr developers at SOLR-9317\");\n      }\n      // it is unlikely that multiple replicas have been requested to be created on\n      // the same node, but we've got to accommodate.\n      positions = new ArrayList<>(totalReplicas);\n      int i = 0;\n      for (Map.Entry<Replica.Type, Integer> entry : replicaTypeVsCount.entrySet()) {\n        for (int j = 0; j < entry.getValue(); j++) {\n          positions.add(new ReplicaPosition(sliceName, i++, entry.getKey(), node));\n        }\n      }\n    }\n    return positions;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1fec8b37cbb6884a64d39565e9dd7b4522a0598","date":1537699559,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/AddReplicaCmd#buildReplicaPositions(SolrCloudManager,ClusterState,String,ZkNodeProps,EnumMap[Replica.Type,Integer],AtomicReference[PolicyHelper.SessionWrapper]).mjava","pathOld":"/dev/null","sourceNew":"  public static List<ReplicaPosition> buildReplicaPositions(SolrCloudManager cloudManager, ClusterState clusterState,\n                                                            String collectionName, ZkNodeProps message,\n                                                            EnumMap<Replica.Type, Integer> replicaTypeVsCount,\n                                                            AtomicReference< PolicyHelper.SessionWrapper> sessionWrapper) throws IOException, InterruptedException {\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    int numNrtReplicas = replicaTypeVsCount.get(Replica.Type.NRT);\n    int numPullReplicas = replicaTypeVsCount.get(Replica.Type.PULL);\n    int numTlogReplicas = replicaTypeVsCount.get(Replica.Type.TLOG);\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n\n    String node = message.getStr(CoreAdminParams.NODE);\n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n    if (createNodeSetStr == null) {\n      if (node != null) {\n        message.getProperties().put(OverseerCollectionMessageHandler.CREATE_NODE_SET, node);\n        createNodeSetStr = node;\n      }\n    }\n\n    List<ReplicaPosition> positions = null;\n    if (!skipCreateReplicaInClusterState) {\n      if (CloudUtil.usePolicyFramework(collection, cloudManager)) {\n        if (node == null) {\n          if (collection.getPolicyName() != null) message.getProperties().put(Policy.POLICY, collection.getPolicyName());\n          positions = Assign.identifyNodes(cloudManager,\n              clusterState,\n              Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, OverseerCollectionMessageHandler.RANDOM),\n              collection.getName(),\n              message,\n              Collections.singletonList(sliceName),\n              numNrtReplicas,\n              numTlogReplicas,\n              numPullReplicas);\n          sessionWrapper.set(PolicyHelper.getLastSessionWrapper(true));\n        }\n      } else {\n        List<Assign.ReplicaCount> sortedNodeList = Assign.getNodesForNewReplicas(clusterState, collection.getName(), sliceName, numNrtReplicas,\n            numTlogReplicas, numPullReplicas, createNodeSetStr, cloudManager);\n        int i = 0;\n        positions = new ArrayList<>();\n        for (Map.Entry<Replica.Type, Integer> e : replicaTypeVsCount.entrySet()) {\n          for (int j = 0; j < e.getValue(); j++) {\n            positions.add(new ReplicaPosition(sliceName, j + 1, e.getKey(), sortedNodeList.get(i % sortedNodeList.size()).nodeName));\n            i++;\n          }\n        }\n      }\n    }\n\n    if (positions == null)  {\n      assert node != null;\n      if (node == null) {\n        // in case asserts are disabled\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"A node should have been identified to add replica but wasn't. Please inform solr developers at SOLR-9317\");\n      }\n      // it is unlikely that multiple replicas have been requested to be created on\n      // the same node, but we've got to accommodate.\n      positions = new ArrayList<>(totalReplicas);\n      int i = 0;\n      for (Map.Entry<Replica.Type, Integer> entry : replicaTypeVsCount.entrySet()) {\n        for (int j = 0; j < entry.getValue(); j++) {\n          positions.add(new ReplicaPosition(sliceName, i++, entry.getKey(), node));\n        }\n      }\n    }\n    return positions;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9f71a1c6c905e9489b4d25c83c8d628d978a8ea","date":1538045138,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/AddReplicaCmd#buildReplicaPositions(SolrCloudManager,ClusterState,String,ZkNodeProps,EnumMap[Replica.Type,Integer],AtomicReference[PolicyHelper.SessionWrapper]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/AddReplicaCmd#buildReplicaPositions(SolrCloudManager,ClusterState,String,ZkNodeProps,EnumMap[Replica.Type,Integer],AtomicReference[PolicyHelper.SessionWrapper]).mjava","sourceNew":"  public static List<ReplicaPosition> buildReplicaPositions(SolrCloudManager cloudManager, ClusterState clusterState,\n                                                            String collectionName, ZkNodeProps message,\n                                                            EnumMap<Replica.Type, Integer> replicaTypeVsCount,\n                                                            AtomicReference< PolicyHelper.SessionWrapper> sessionWrapper) throws IOException, InterruptedException {\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n    boolean skipNodeAssignment = message.getBool(SKIP_NODE_ASSIGNMENT, false);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    int numNrtReplicas = replicaTypeVsCount.get(Replica.Type.NRT);\n    int numPullReplicas = replicaTypeVsCount.get(Replica.Type.PULL);\n    int numTlogReplicas = replicaTypeVsCount.get(Replica.Type.TLOG);\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n\n    String node = message.getStr(CoreAdminParams.NODE);\n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n    if (createNodeSetStr == null) {\n      if (node != null) {\n        message.getProperties().put(OverseerCollectionMessageHandler.CREATE_NODE_SET, node);\n        createNodeSetStr = node;\n      }\n    }\n\n    List<ReplicaPosition> positions = null;\n    if (!skipCreateReplicaInClusterState && !skipNodeAssignment) {\n\n      positions = Assign.getNodesForNewReplicas(clusterState, collection.getName(), sliceName, numNrtReplicas,\n                    numTlogReplicas, numPullReplicas, createNodeSetStr, cloudManager);\n      sessionWrapper.set(PolicyHelper.getLastSessionWrapper(true));\n    }\n\n    if (positions == null)  {\n      assert node != null;\n      if (node == null) {\n        // in case asserts are disabled\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"A node should have been identified to add replica but wasn't. Please inform solr developers at SOLR-9317\");\n      }\n      // it is unlikely that multiple replicas have been requested to be created on\n      // the same node, but we've got to accommodate.\n      positions = new ArrayList<>(totalReplicas);\n      int i = 0;\n      for (Map.Entry<Replica.Type, Integer> entry : replicaTypeVsCount.entrySet()) {\n        for (int j = 0; j < entry.getValue(); j++) {\n          positions.add(new ReplicaPosition(sliceName, i++, entry.getKey(), node));\n        }\n      }\n    }\n    return positions;\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> buildReplicaPositions(SolrCloudManager cloudManager, ClusterState clusterState,\n                                                            String collectionName, ZkNodeProps message,\n                                                            EnumMap<Replica.Type, Integer> replicaTypeVsCount,\n                                                            AtomicReference< PolicyHelper.SessionWrapper> sessionWrapper) throws IOException, InterruptedException {\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    int numNrtReplicas = replicaTypeVsCount.get(Replica.Type.NRT);\n    int numPullReplicas = replicaTypeVsCount.get(Replica.Type.PULL);\n    int numTlogReplicas = replicaTypeVsCount.get(Replica.Type.TLOG);\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n\n    String node = message.getStr(CoreAdminParams.NODE);\n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n    if (createNodeSetStr == null) {\n      if (node != null) {\n        message.getProperties().put(OverseerCollectionMessageHandler.CREATE_NODE_SET, node);\n        createNodeSetStr = node;\n      }\n    }\n\n    List<ReplicaPosition> positions = null;\n    if (!skipCreateReplicaInClusterState) {\n      if (CloudUtil.usePolicyFramework(collection, cloudManager)) {\n        if (node == null) {\n          if (collection.getPolicyName() != null) message.getProperties().put(Policy.POLICY, collection.getPolicyName());\n          positions = Assign.identifyNodes(cloudManager,\n              clusterState,\n              Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, OverseerCollectionMessageHandler.RANDOM),\n              collection.getName(),\n              message,\n              Collections.singletonList(sliceName),\n              numNrtReplicas,\n              numTlogReplicas,\n              numPullReplicas);\n          sessionWrapper.set(PolicyHelper.getLastSessionWrapper(true));\n        }\n      } else {\n        List<Assign.ReplicaCount> sortedNodeList = Assign.getNodesForNewReplicas(clusterState, collection.getName(), sliceName, numNrtReplicas,\n            numTlogReplicas, numPullReplicas, createNodeSetStr, cloudManager);\n        int i = 0;\n        positions = new ArrayList<>();\n        for (Map.Entry<Replica.Type, Integer> e : replicaTypeVsCount.entrySet()) {\n          for (int j = 0; j < e.getValue(); j++) {\n            positions.add(new ReplicaPosition(sliceName, j + 1, e.getKey(), sortedNodeList.get(i % sortedNodeList.size()).nodeName));\n            i++;\n          }\n        }\n      }\n    }\n\n    if (positions == null)  {\n      assert node != null;\n      if (node == null) {\n        // in case asserts are disabled\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"A node should have been identified to add replica but wasn't. Please inform solr developers at SOLR-9317\");\n      }\n      // it is unlikely that multiple replicas have been requested to be created on\n      // the same node, but we've got to accommodate.\n      positions = new ArrayList<>(totalReplicas);\n      int i = 0;\n      for (Map.Entry<Replica.Type, Integer> entry : replicaTypeVsCount.entrySet()) {\n        for (int j = 0; j < entry.getValue(); j++) {\n          positions.add(new ReplicaPosition(sliceName, i++, entry.getKey(), node));\n        }\n      }\n    }\n    return positions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/AddReplicaCmd#buildReplicaPositions(SolrCloudManager,ClusterState,String,ZkNodeProps,EnumMap[Replica.Type,Integer],AtomicReference[PolicyHelper.SessionWrapper]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/AddReplicaCmd#buildReplicaPositions(SolrCloudManager,ClusterState,String,ZkNodeProps,EnumMap[Replica.Type,Integer],AtomicReference[PolicyHelper.SessionWrapper]).mjava","sourceNew":"  public static List<ReplicaPosition> buildReplicaPositions(SolrCloudManager cloudManager, ClusterState clusterState,\n                                                            String collectionName, ZkNodeProps message,\n                                                            EnumMap<Replica.Type, Integer> replicaTypeVsCount,\n                                                            AtomicReference< PolicyHelper.SessionWrapper> sessionWrapper) throws IOException, InterruptedException {\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n    boolean skipNodeAssignment = message.getBool(CollectionAdminParams.SKIP_NODE_ASSIGNMENT, false);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    int numNrtReplicas = replicaTypeVsCount.get(Replica.Type.NRT);\n    int numPullReplicas = replicaTypeVsCount.get(Replica.Type.PULL);\n    int numTlogReplicas = replicaTypeVsCount.get(Replica.Type.TLOG);\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n\n    String node = message.getStr(CoreAdminParams.NODE);\n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n    if (createNodeSetStr == null) {\n      if (node != null) {\n        message.getProperties().put(OverseerCollectionMessageHandler.CREATE_NODE_SET, node);\n        createNodeSetStr = node;\n      }\n    }\n\n    List<ReplicaPosition> positions = null;\n    if (!skipCreateReplicaInClusterState && !skipNodeAssignment) {\n\n      positions = Assign.getNodesForNewReplicas(clusterState, collection.getName(), sliceName, numNrtReplicas,\n                    numTlogReplicas, numPullReplicas, createNodeSetStr, cloudManager);\n      sessionWrapper.set(PolicyHelper.getLastSessionWrapper(true));\n    }\n\n    if (positions == null)  {\n      assert node != null;\n      if (node == null) {\n        // in case asserts are disabled\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"A node should have been identified to add replica but wasn't. Please inform solr developers at SOLR-9317\");\n      }\n      // it is unlikely that multiple replicas have been requested to be created on\n      // the same node, but we've got to accommodate.\n      positions = new ArrayList<>(totalReplicas);\n      int i = 0;\n      for (Map.Entry<Replica.Type, Integer> entry : replicaTypeVsCount.entrySet()) {\n        for (int j = 0; j < entry.getValue(); j++) {\n          positions.add(new ReplicaPosition(sliceName, i++, entry.getKey(), node));\n        }\n      }\n    }\n    return positions;\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> buildReplicaPositions(SolrCloudManager cloudManager, ClusterState clusterState,\n                                                            String collectionName, ZkNodeProps message,\n                                                            EnumMap<Replica.Type, Integer> replicaTypeVsCount,\n                                                            AtomicReference< PolicyHelper.SessionWrapper> sessionWrapper) throws IOException, InterruptedException {\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n    boolean skipNodeAssignment = message.getBool(SKIP_NODE_ASSIGNMENT, false);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    int numNrtReplicas = replicaTypeVsCount.get(Replica.Type.NRT);\n    int numPullReplicas = replicaTypeVsCount.get(Replica.Type.PULL);\n    int numTlogReplicas = replicaTypeVsCount.get(Replica.Type.TLOG);\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n\n    String node = message.getStr(CoreAdminParams.NODE);\n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n    if (createNodeSetStr == null) {\n      if (node != null) {\n        message.getProperties().put(OverseerCollectionMessageHandler.CREATE_NODE_SET, node);\n        createNodeSetStr = node;\n      }\n    }\n\n    List<ReplicaPosition> positions = null;\n    if (!skipCreateReplicaInClusterState && !skipNodeAssignment) {\n\n      positions = Assign.getNodesForNewReplicas(clusterState, collection.getName(), sliceName, numNrtReplicas,\n                    numTlogReplicas, numPullReplicas, createNodeSetStr, cloudManager);\n      sessionWrapper.set(PolicyHelper.getLastSessionWrapper(true));\n    }\n\n    if (positions == null)  {\n      assert node != null;\n      if (node == null) {\n        // in case asserts are disabled\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"A node should have been identified to add replica but wasn't. Please inform solr developers at SOLR-9317\");\n      }\n      // it is unlikely that multiple replicas have been requested to be created on\n      // the same node, but we've got to accommodate.\n      positions = new ArrayList<>(totalReplicas);\n      int i = 0;\n      for (Map.Entry<Replica.Type, Integer> entry : replicaTypeVsCount.entrySet()) {\n        for (int j = 0; j < entry.getValue(); j++) {\n          positions.add(new ReplicaPosition(sliceName, i++, entry.getKey(), node));\n        }\n      }\n    }\n    return positions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/AddReplicaCmd#buildReplicaPositions(SolrCloudManager,ClusterState,String,ZkNodeProps,EnumMap[Replica.Type,Integer],AtomicReference[PolicyHelper.SessionWrapper]).mjava","sourceNew":null,"sourceOld":"  public static List<ReplicaPosition> buildReplicaPositions(SolrCloudManager cloudManager, ClusterState clusterState,\n                                                            String collectionName, ZkNodeProps message,\n                                                            EnumMap<Replica.Type, Integer> replicaTypeVsCount,\n                                                            AtomicReference< PolicyHelper.SessionWrapper> sessionWrapper) throws IOException, InterruptedException {\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n    boolean skipNodeAssignment = message.getBool(CollectionAdminParams.SKIP_NODE_ASSIGNMENT, false);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    int numNrtReplicas = replicaTypeVsCount.get(Replica.Type.NRT);\n    int numPullReplicas = replicaTypeVsCount.get(Replica.Type.PULL);\n    int numTlogReplicas = replicaTypeVsCount.get(Replica.Type.TLOG);\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n\n    String node = message.getStr(CoreAdminParams.NODE);\n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n    if (createNodeSetStr == null) {\n      if (node != null) {\n        message.getProperties().put(OverseerCollectionMessageHandler.CREATE_NODE_SET, node);\n        createNodeSetStr = node;\n      }\n    }\n\n    List<ReplicaPosition> positions = null;\n    if (!skipCreateReplicaInClusterState && !skipNodeAssignment) {\n\n      positions = Assign.getNodesForNewReplicas(clusterState, collection.getName(), sliceName, numNrtReplicas,\n                    numTlogReplicas, numPullReplicas, createNodeSetStr, cloudManager);\n      sessionWrapper.set(PolicyHelper.getLastSessionWrapper(true));\n    }\n\n    if (positions == null)  {\n      assert node != null;\n      if (node == null) {\n        // in case asserts are disabled\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"A node should have been identified to add replica but wasn't. Please inform solr developers at SOLR-9317\");\n      }\n      // it is unlikely that multiple replicas have been requested to be created on\n      // the same node, but we've got to accommodate.\n      positions = new ArrayList<>(totalReplicas);\n      int i = 0;\n      for (Map.Entry<Replica.Type, Integer> entry : replicaTypeVsCount.entrySet()) {\n        for (int j = 0; j < entry.getValue(); j++) {\n          positions.add(new ReplicaPosition(sliceName, i++, entry.getKey(), node));\n        }\n      }\n    }\n    return positions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"e9f71a1c6c905e9489b4d25c83c8d628d978a8ea":["f1fec8b37cbb6884a64d39565e9dd7b4522a0598"],"f1fec8b37cbb6884a64d39565e9dd7b4522a0598":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","deea3439de4f487ae553317e50d5d641ca386374"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"deea3439de4f487ae553317e50d5d641ca386374":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["e9f71a1c6c905e9489b4d25c83c8d628d978a8ea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9f71a1c6c905e9489b4d25c83c8d628d978a8ea":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"f1fec8b37cbb6884a64d39565e9dd7b4522a0598":["e9f71a1c6c905e9489b4d25c83c8d628d978a8ea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f1fec8b37cbb6884a64d39565e9dd7b4522a0598","deea3439de4f487ae553317e50d5d641ca386374"],"deea3439de4f487ae553317e50d5d641ca386374":["f1fec8b37cbb6884a64d39565e9dd7b4522a0598"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}