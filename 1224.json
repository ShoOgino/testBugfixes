{"path":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#buildCoreParams(SolrParams).mjava","commits":[{"id":"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","date":1448892165,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#buildCoreParams(SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  protected static Map<String, String> buildCoreParams(SolrParams params) {\n\n    Map<String, String> coreParams = new HashMap<>();\n\n    // standard core create parameters\n    for (String param : paramToProp.keySet()) {\n      String value = params.get(param, null);\n      if (StringUtils.isNotEmpty(value)) {\n        coreParams.put(paramToProp.get(param), value);\n      }\n    }\n\n    // extra properties\n    Iterator<String> paramsIt = params.getParameterNamesIterator();\n    while (paramsIt.hasNext()) {\n      String param = paramsIt.next();\n      if (param.startsWith(CoreAdminParams.PROPERTY_PREFIX)) {\n        String propName = param.substring(CoreAdminParams.PROPERTY_PREFIX.length());\n        String propValue = params.get(param);\n        coreParams.put(propName, propValue);\n      }\n      if (param.startsWith(ZkController.COLLECTION_PARAM_PREFIX)) {\n        coreParams.put(param, params.get(param));\n      }\n    }\n\n    return coreParams;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0","date":1571070979,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#buildCoreParams(SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#buildCoreParams(SolrParams).mjava","sourceNew":"  protected static Map<String, String> buildCoreParams(SolrParams params) {\n\n    Map<String, String> coreParams = new HashMap<>();\n\n    // standard core create parameters\n    for (Map.Entry<String, String> entry : paramToProp.entrySet()) {\n      String value = params.get(entry.getKey(), null);\n      if (StringUtils.isNotEmpty(value)) {\n        coreParams.put(entry.getValue(), value);\n      }\n    }\n\n    // extra properties\n    Iterator<String> paramsIt = params.getParameterNamesIterator();\n    while (paramsIt.hasNext()) {\n      String param = paramsIt.next();\n      if (param.startsWith(CoreAdminParams.PROPERTY_PREFIX)) {\n        String propName = param.substring(CoreAdminParams.PROPERTY_PREFIX.length());\n        String propValue = params.get(param);\n        coreParams.put(propName, propValue);\n      }\n      if (param.startsWith(ZkController.COLLECTION_PARAM_PREFIX)) {\n        coreParams.put(param, params.get(param));\n      }\n    }\n\n    return coreParams;\n  }\n\n","sourceOld":"  protected static Map<String, String> buildCoreParams(SolrParams params) {\n\n    Map<String, String> coreParams = new HashMap<>();\n\n    // standard core create parameters\n    for (String param : paramToProp.keySet()) {\n      String value = params.get(param, null);\n      if (StringUtils.isNotEmpty(value)) {\n        coreParams.put(paramToProp.get(param), value);\n      }\n    }\n\n    // extra properties\n    Iterator<String> paramsIt = params.getParameterNamesIterator();\n    while (paramsIt.hasNext()) {\n      String param = paramsIt.next();\n      if (param.startsWith(CoreAdminParams.PROPERTY_PREFIX)) {\n        String propName = param.substring(CoreAdminParams.PROPERTY_PREFIX.length());\n        String propValue = params.get(param);\n        coreParams.put(propName, propValue);\n      }\n      if (param.startsWith(ZkController.COLLECTION_PARAM_PREFIX)) {\n        coreParams.put(param, params.get(param));\n      }\n    }\n\n    return coreParams;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#buildCoreParams(SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#buildCoreParams(SolrParams).mjava","sourceNew":"  protected static Map<String, String> buildCoreParams(SolrParams params) {\n\n    Map<String, String> coreParams = new HashMap<>();\n\n    // standard core create parameters\n    for (Map.Entry<String, String> entry : paramToProp.entrySet()) {\n      String value = params.get(entry.getKey(), null);\n      if (StringUtils.isNotEmpty(value)) {\n        coreParams.put(entry.getValue(), value);\n      }\n    }\n\n    // extra properties\n    Iterator<String> paramsIt = params.getParameterNamesIterator();\n    while (paramsIt.hasNext()) {\n      String param = paramsIt.next();\n      if (param.startsWith(CoreAdminParams.PROPERTY_PREFIX)) {\n        String propName = param.substring(CoreAdminParams.PROPERTY_PREFIX.length());\n        String propValue = params.get(param);\n        coreParams.put(propName, propValue);\n      }\n      if (param.startsWith(ZkController.COLLECTION_PARAM_PREFIX)) {\n        coreParams.put(param, params.get(param));\n      }\n    }\n\n    return coreParams;\n  }\n\n","sourceOld":"  protected static Map<String, String> buildCoreParams(SolrParams params) {\n\n    Map<String, String> coreParams = new HashMap<>();\n\n    // standard core create parameters\n    for (String param : paramToProp.keySet()) {\n      String value = params.get(param, null);\n      if (StringUtils.isNotEmpty(value)) {\n        coreParams.put(paramToProp.get(param), value);\n      }\n    }\n\n    // extra properties\n    Iterator<String> paramsIt = params.getParameterNamesIterator();\n    while (paramsIt.hasNext()) {\n      String param = paramsIt.next();\n      if (param.startsWith(CoreAdminParams.PROPERTY_PREFIX)) {\n        String propName = param.substring(CoreAdminParams.PROPERTY_PREFIX.length());\n        String propValue = params.get(param);\n        coreParams.put(propName, propValue);\n      }\n      if (param.startsWith(ZkController.COLLECTION_PARAM_PREFIX)) {\n        coreParams.put(param, params.get(param));\n      }\n    }\n\n    return coreParams;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0"],"b0b597c65628ca9e73913a07e81691f8229bae35":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0"]},"commit2Childs":{"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}