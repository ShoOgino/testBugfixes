{"path":"sandbox/contributions/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragment(TokenStream,String).mjava","commits":[{"id":"db2e1c87dfa9ca908febe5b39f6dd3dee2fbe9e2","date":1081470871,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"sandbox/contributions/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragment(TokenStream,String).mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant section.\n\t * The document text is analysed in chunks to record hit statistics\n\t * across the document. After accumulating stats, the fragment with the highest score\n\t * is returned\n\t *\n\t * @param tokenStream   a stream of tokens identified in the text parameter, including offset information. \n\t * This is typically produced by an analyzer re-parsing a document's \n\t * text. Some work may be done on retrieving TokenStreams more efficently \n\t * by adding support for storing original text position data in the Lucene\n\t * index but this support is not currently available (as of Lucene 1.4 rc2).  \n\t * @param text text to highlight terms in\n\t *\n\t * @return highlighted text fragment or null if no terms found\n\t */\n\tpublic final String getBestFragment(TokenStream tokenStream, String text)\n\t\tthrows IOException\n\t{\n\t\tString[] results = getBestFragments(tokenStream,text, 1);\n\t\tif (results.length > 0)\n\t\t{\n\t\t\treturn results[0];\n\t\t}\n\t\treturn null;\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"043c298cb215f13ba7b9b81d20760704e8f93d66","date":1107566743,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragment(TokenStream,String).mjava","pathOld":"sandbox/contributions/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragment(TokenStream,String).mjava","sourceNew":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant section.\n\t * The document text is analysed in chunks to record hit statistics\n\t * across the document. After accumulating stats, the fragment with the highest score\n\t * is returned\n\t *\n\t * @param tokenStream   a stream of tokens identified in the text parameter, including offset information. \n\t * This is typically produced by an analyzer re-parsing a document's \n\t * text. Some work may be done on retrieving TokenStreams more efficently \n\t * by adding support for storing original text position data in the Lucene\n\t * index but this support is not currently available (as of Lucene 1.4 rc2).  \n\t * @param text text to highlight terms in\n\t *\n\t * @return highlighted text fragment or null if no terms found\n\t */\n\tpublic final String getBestFragment(TokenStream tokenStream, String text)\n\t\tthrows IOException\n\t{\n\t\tString[] results = getBestFragments(tokenStream,text, 1);\n\t\tif (results.length > 0)\n\t\t{\n\t\t\treturn results[0];\n\t\t}\n\t\treturn null;\n\t}\n\n","sourceOld":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant section.\n\t * The document text is analysed in chunks to record hit statistics\n\t * across the document. After accumulating stats, the fragment with the highest score\n\t * is returned\n\t *\n\t * @param tokenStream   a stream of tokens identified in the text parameter, including offset information. \n\t * This is typically produced by an analyzer re-parsing a document's \n\t * text. Some work may be done on retrieving TokenStreams more efficently \n\t * by adding support for storing original text position data in the Lucene\n\t * index but this support is not currently available (as of Lucene 1.4 rc2).  \n\t * @param text text to highlight terms in\n\t *\n\t * @return highlighted text fragment or null if no terms found\n\t */\n\tpublic final String getBestFragment(TokenStream tokenStream, String text)\n\t\tthrows IOException\n\t{\n\t\tString[] results = getBestFragments(tokenStream,text, 1);\n\t\tif (results.length > 0)\n\t\t{\n\t\t\treturn results[0];\n\t\t}\n\t\treturn null;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["db2e1c87dfa9ca908febe5b39f6dd3dee2fbe9e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"db2e1c87dfa9ca908febe5b39f6dd3dee2fbe9e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["db2e1c87dfa9ca908febe5b39f6dd3dee2fbe9e2"],"db2e1c87dfa9ca908febe5b39f6dd3dee2fbe9e2":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}