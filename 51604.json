{"path":"solr/src/java/org/apache/solr/handler/component/QueryComponent#doFieldSortValues(ResponseBuilder,SolrIndexSearcher).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryComponent#doFieldSortValues(ResponseBuilder,SolrIndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  protected void doFieldSortValues(ResponseBuilder rb, SolrIndexSearcher searcher) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    // The query cache doesn't currently store sort field values, and SolrIndexSearcher doesn't\n    // currently have an option to return sort field values.  Because of this, we\n    // take the documents given and re-derive the sort values.\n    boolean fsv = req.getParams().getBool(ResponseBuilder.FIELD_SORT_VALUES,false);\n    if(fsv){\n      Sort sort = rb.getSortSpec().getSort();\n      SortField[] sortFields = sort==null ? new SortField[]{SortField.FIELD_SCORE} : sort.getSort();\n      NamedList sortVals = new NamedList(); // order is important for the sort fields\n      Field field = new Field(\"dummy\", \"\", Field.Store.YES, Field.Index.NO); // a dummy Field\n\n      SolrIndexReader reader = searcher.getReader();\n      SolrIndexReader[] readers = reader.getLeafReaders();\n      SolrIndexReader subReader = reader;\n      if (readers.length==1) {\n        // if there is a single segment, use that subReader and avoid looking up each time\n        subReader = readers[0];\n        readers=null;\n      }\n      int[] offsets = reader.getLeafOffsets();\n\n      for (SortField sortField: sortFields) {\n        int type = sortField.getType();\n        if (type==SortField.SCORE || type==SortField.DOC) continue;\n\n        FieldComparator comparator = null;\n        FieldComparator comparators[] = (readers==null) ? null : new FieldComparator[readers.length];\n\n        String fieldname = sortField.getField();\n        FieldType ft = fieldname==null ? null : req.getSchema().getFieldTypeNoEx(fieldname);\n\n        DocList docList = rb.getResults().docList;\n        ArrayList<Object> vals = new ArrayList<Object>(docList.size());\n        DocIterator it = rb.getResults().docList.iterator();\n\n        int offset = 0;\n        int idx = 0;\n\n        while(it.hasNext()) {\n          int doc = it.nextDoc();\n          if (readers != null) {\n            idx = SolrIndexReader.readerIndex(doc, offsets);\n            subReader = readers[idx];\n            offset = offsets[idx];\n            comparator = comparators[idx];\n          }\n\n          if (comparator == null) {\n            comparator = sortField.getComparator(1,0);\n            comparator.setNextReader(subReader, offset);\n            if (comparators != null)\n              comparators[idx] = comparator;\n          }\n\n          doc -= offset;  // adjust for what segment this is in\n          comparator.copy(0, doc);\n          Object val = comparator.value(0);\n\n          // Sortable float, double, int, long types all just use a string\n          // comparator. For these, we need to put the type into a readable\n          // format.  One reason for this is that XML can't represent all\n          // string values (or even all unicode code points).\n          // indexedToReadable() should be a no-op and should\n          // thus be harmless anyway (for all current ways anyway)\n          if (val instanceof String) {\n            field.setValue((String)val);\n            val = ft.toObject(field);\n          }\n\n          vals.add(val);\n        }\n\n        sortVals.add(fieldname, vals);\n      }\n\n      rsp.add(\"sort_values\", sortVals);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryComponent#doFieldSortValues(ResponseBuilder,SolrIndexSearcher).mjava","sourceNew":null,"sourceOld":"  protected void doFieldSortValues(ResponseBuilder rb, SolrIndexSearcher searcher) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    // The query cache doesn't currently store sort field values, and SolrIndexSearcher doesn't\n    // currently have an option to return sort field values.  Because of this, we\n    // take the documents given and re-derive the sort values.\n    boolean fsv = req.getParams().getBool(ResponseBuilder.FIELD_SORT_VALUES,false);\n    if(fsv){\n      Sort sort = rb.getSortSpec().getSort();\n      SortField[] sortFields = sort==null ? new SortField[]{SortField.FIELD_SCORE} : sort.getSort();\n      NamedList sortVals = new NamedList(); // order is important for the sort fields\n      Field field = new Field(\"dummy\", \"\", Field.Store.YES, Field.Index.NO); // a dummy Field\n\n      SolrIndexReader reader = searcher.getReader();\n      SolrIndexReader[] readers = reader.getLeafReaders();\n      SolrIndexReader subReader = reader;\n      if (readers.length==1) {\n        // if there is a single segment, use that subReader and avoid looking up each time\n        subReader = readers[0];\n        readers=null;\n      }\n      int[] offsets = reader.getLeafOffsets();\n\n      for (SortField sortField: sortFields) {\n        int type = sortField.getType();\n        if (type==SortField.SCORE || type==SortField.DOC) continue;\n\n        FieldComparator comparator = null;\n        FieldComparator comparators[] = (readers==null) ? null : new FieldComparator[readers.length];\n\n        String fieldname = sortField.getField();\n        FieldType ft = fieldname==null ? null : req.getSchema().getFieldTypeNoEx(fieldname);\n\n        DocList docList = rb.getResults().docList;\n        ArrayList<Object> vals = new ArrayList<Object>(docList.size());\n        DocIterator it = rb.getResults().docList.iterator();\n\n        int offset = 0;\n        int idx = 0;\n\n        while(it.hasNext()) {\n          int doc = it.nextDoc();\n          if (readers != null) {\n            idx = SolrIndexReader.readerIndex(doc, offsets);\n            subReader = readers[idx];\n            offset = offsets[idx];\n            comparator = comparators[idx];\n          }\n\n          if (comparator == null) {\n            comparator = sortField.getComparator(1,0);\n            comparator.setNextReader(subReader, offset);\n            if (comparators != null)\n              comparators[idx] = comparator;\n          }\n\n          doc -= offset;  // adjust for what segment this is in\n          comparator.copy(0, doc);\n          Object val = comparator.value(0);\n\n          // Sortable float, double, int, long types all just use a string\n          // comparator. For these, we need to put the type into a readable\n          // format.  One reason for this is that XML can't represent all\n          // string values (or even all unicode code points).\n          // indexedToReadable() should be a no-op and should\n          // thus be harmless anyway (for all current ways anyway)\n          if (val instanceof String) {\n            field.setValue((String)val);\n            val = ft.toObject(field);\n          }\n\n          vals.add(val);\n        }\n\n        sortVals.add(fieldname, vals);\n      }\n\n      rsp.add(\"sort_values\", sortVals);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryComponent#doFieldSortValues(ResponseBuilder,SolrIndexSearcher).mjava","pathOld":"src/java/org/apache/solr/handler/component/QueryComponent#doFieldSortValues(ResponseBuilder,SolrIndexSearcher).mjava","sourceNew":"  protected void doFieldSortValues(ResponseBuilder rb, SolrIndexSearcher searcher) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    // The query cache doesn't currently store sort field values, and SolrIndexSearcher doesn't\n    // currently have an option to return sort field values.  Because of this, we\n    // take the documents given and re-derive the sort values.\n    boolean fsv = req.getParams().getBool(ResponseBuilder.FIELD_SORT_VALUES,false);\n    if(fsv){\n      Sort sort = rb.getSortSpec().getSort();\n      SortField[] sortFields = sort==null ? new SortField[]{SortField.FIELD_SCORE} : sort.getSort();\n      NamedList sortVals = new NamedList(); // order is important for the sort fields\n      Field field = new Field(\"dummy\", \"\", Field.Store.YES, Field.Index.NO); // a dummy Field\n\n      SolrIndexReader reader = searcher.getReader();\n      SolrIndexReader[] readers = reader.getLeafReaders();\n      SolrIndexReader subReader = reader;\n      if (readers.length==1) {\n        // if there is a single segment, use that subReader and avoid looking up each time\n        subReader = readers[0];\n        readers=null;\n      }\n      int[] offsets = reader.getLeafOffsets();\n\n      for (SortField sortField: sortFields) {\n        int type = sortField.getType();\n        if (type==SortField.SCORE || type==SortField.DOC) continue;\n\n        FieldComparator comparator = null;\n        FieldComparator comparators[] = (readers==null) ? null : new FieldComparator[readers.length];\n\n        String fieldname = sortField.getField();\n        FieldType ft = fieldname==null ? null : req.getSchema().getFieldTypeNoEx(fieldname);\n\n        DocList docList = rb.getResults().docList;\n        ArrayList<Object> vals = new ArrayList<Object>(docList.size());\n        DocIterator it = rb.getResults().docList.iterator();\n\n        int offset = 0;\n        int idx = 0;\n\n        while(it.hasNext()) {\n          int doc = it.nextDoc();\n          if (readers != null) {\n            idx = SolrIndexReader.readerIndex(doc, offsets);\n            subReader = readers[idx];\n            offset = offsets[idx];\n            comparator = comparators[idx];\n          }\n\n          if (comparator == null) {\n            comparator = sortField.getComparator(1,0);\n            comparator.setNextReader(subReader, offset);\n            if (comparators != null)\n              comparators[idx] = comparator;\n          }\n\n          doc -= offset;  // adjust for what segment this is in\n          comparator.copy(0, doc);\n          Object val = comparator.value(0);\n\n          // Sortable float, double, int, long types all just use a string\n          // comparator. For these, we need to put the type into a readable\n          // format.  One reason for this is that XML can't represent all\n          // string values (or even all unicode code points).\n          // indexedToReadable() should be a no-op and should\n          // thus be harmless anyway (for all current ways anyway)\n          if (val instanceof String) {\n            field.setValue((String)val);\n            val = ft.toObject(field);\n          }\n\n          vals.add(val);\n        }\n\n        sortVals.add(fieldname, vals);\n      }\n\n      rsp.add(\"sort_values\", sortVals);\n    }\n  }\n\n","sourceOld":"  protected void doFieldSortValues(ResponseBuilder rb, SolrIndexSearcher searcher) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    // The query cache doesn't currently store sort field values, and SolrIndexSearcher doesn't\n    // currently have an option to return sort field values.  Because of this, we\n    // take the documents given and re-derive the sort values.\n    boolean fsv = req.getParams().getBool(ResponseBuilder.FIELD_SORT_VALUES,false);\n    if(fsv){\n      Sort sort = rb.getSortSpec().getSort();\n      SortField[] sortFields = sort==null ? new SortField[]{SortField.FIELD_SCORE} : sort.getSort();\n      NamedList sortVals = new NamedList(); // order is important for the sort fields\n      Field field = new Field(\"dummy\", \"\", Field.Store.YES, Field.Index.NO); // a dummy Field\n\n      SolrIndexReader reader = searcher.getReader();\n      SolrIndexReader[] readers = reader.getLeafReaders();\n      SolrIndexReader subReader = reader;\n      if (readers.length==1) {\n        // if there is a single segment, use that subReader and avoid looking up each time\n        subReader = readers[0];\n        readers=null;\n      }\n      int[] offsets = reader.getLeafOffsets();\n\n      for (SortField sortField: sortFields) {\n        int type = sortField.getType();\n        if (type==SortField.SCORE || type==SortField.DOC) continue;\n\n        FieldComparator comparator = null;\n        FieldComparator comparators[] = (readers==null) ? null : new FieldComparator[readers.length];\n\n        String fieldname = sortField.getField();\n        FieldType ft = fieldname==null ? null : req.getSchema().getFieldTypeNoEx(fieldname);\n\n        DocList docList = rb.getResults().docList;\n        ArrayList<Object> vals = new ArrayList<Object>(docList.size());\n        DocIterator it = rb.getResults().docList.iterator();\n\n        int offset = 0;\n        int idx = 0;\n\n        while(it.hasNext()) {\n          int doc = it.nextDoc();\n          if (readers != null) {\n            idx = SolrIndexReader.readerIndex(doc, offsets);\n            subReader = readers[idx];\n            offset = offsets[idx];\n            comparator = comparators[idx];\n          }\n\n          if (comparator == null) {\n            comparator = sortField.getComparator(1,0);\n            comparator.setNextReader(subReader, offset);\n            if (comparators != null)\n              comparators[idx] = comparator;\n          }\n\n          doc -= offset;  // adjust for what segment this is in\n          comparator.copy(0, doc);\n          Object val = comparator.value(0);\n\n          // Sortable float, double, int, long types all just use a string\n          // comparator. For these, we need to put the type into a readable\n          // format.  One reason for this is that XML can't represent all\n          // string values (or even all unicode code points).\n          // indexedToReadable() should be a no-op and should\n          // thus be harmless anyway (for all current ways anyway)\n          if (val instanceof String) {\n            field.setValue((String)val);\n            val = ft.toObject(field);\n          }\n\n          vals.add(val);\n        }\n\n        sortVals.add(fieldname, vals);\n      }\n\n      rsp.add(\"sort_values\", sortVals);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryComponent#doFieldSortValues(ResponseBuilder,SolrIndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  protected void doFieldSortValues(ResponseBuilder rb, SolrIndexSearcher searcher) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    // The query cache doesn't currently store sort field values, and SolrIndexSearcher doesn't\n    // currently have an option to return sort field values.  Because of this, we\n    // take the documents given and re-derive the sort values.\n    boolean fsv = req.getParams().getBool(ResponseBuilder.FIELD_SORT_VALUES,false);\n    if(fsv){\n      Sort sort = rb.getSortSpec().getSort();\n      SortField[] sortFields = sort==null ? new SortField[]{SortField.FIELD_SCORE} : sort.getSort();\n      NamedList sortVals = new NamedList(); // order is important for the sort fields\n      Field field = new Field(\"dummy\", \"\", Field.Store.YES, Field.Index.NO); // a dummy Field\n\n      SolrIndexReader reader = searcher.getReader();\n      SolrIndexReader[] readers = reader.getLeafReaders();\n      SolrIndexReader subReader = reader;\n      if (readers.length==1) {\n        // if there is a single segment, use that subReader and avoid looking up each time\n        subReader = readers[0];\n        readers=null;\n      }\n      int[] offsets = reader.getLeafOffsets();\n\n      for (SortField sortField: sortFields) {\n        int type = sortField.getType();\n        if (type==SortField.SCORE || type==SortField.DOC) continue;\n\n        FieldComparator comparator = null;\n        FieldComparator comparators[] = (readers==null) ? null : new FieldComparator[readers.length];\n\n        String fieldname = sortField.getField();\n        FieldType ft = fieldname==null ? null : req.getSchema().getFieldTypeNoEx(fieldname);\n\n        DocList docList = rb.getResults().docList;\n        ArrayList<Object> vals = new ArrayList<Object>(docList.size());\n        DocIterator it = rb.getResults().docList.iterator();\n\n        int offset = 0;\n        int idx = 0;\n\n        while(it.hasNext()) {\n          int doc = it.nextDoc();\n          if (readers != null) {\n            idx = SolrIndexReader.readerIndex(doc, offsets);\n            subReader = readers[idx];\n            offset = offsets[idx];\n            comparator = comparators[idx];\n          }\n\n          if (comparator == null) {\n            comparator = sortField.getComparator(1,0);\n            comparator.setNextReader(subReader, offset);\n            if (comparators != null)\n              comparators[idx] = comparator;\n          }\n\n          doc -= offset;  // adjust for what segment this is in\n          comparator.copy(0, doc);\n          Object val = comparator.value(0);\n\n          // Sortable float, double, int, long types all just use a string\n          // comparator. For these, we need to put the type into a readable\n          // format.  One reason for this is that XML can't represent all\n          // string values (or even all unicode code points).\n          // indexedToReadable() should be a no-op and should\n          // thus be harmless anyway (for all current ways anyway)\n          if (val instanceof String) {\n            field.setValue((String)val);\n            val = ft.toObject(field);\n          }\n\n          vals.add(val);\n        }\n\n        sortVals.add(fieldname, vals);\n      }\n\n      rsp.add(\"sort_values\", sortVals);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"be20f9fed1d3edcb1c84abcc39df87a90fab22df","date":1275590285,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryComponent#doFieldSortValues(ResponseBuilder,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryComponent#doFieldSortValues(ResponseBuilder,SolrIndexSearcher).mjava","sourceNew":"  protected void doFieldSortValues(ResponseBuilder rb, SolrIndexSearcher searcher) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    // The query cache doesn't currently store sort field values, and SolrIndexSearcher doesn't\n    // currently have an option to return sort field values.  Because of this, we\n    // take the documents given and re-derive the sort values.\n    boolean fsv = req.getParams().getBool(ResponseBuilder.FIELD_SORT_VALUES,false);\n    if(fsv){\n      Sort sort = rb.getSortSpec().getSort();\n      SortField[] sortFields = sort==null ? new SortField[]{SortField.FIELD_SCORE} : sort.getSort();\n      NamedList sortVals = new NamedList(); // order is important for the sort fields\n      Field field = new Field(\"dummy\", \"\", Field.Store.YES, Field.Index.NO); // a dummy Field\n\n      SolrIndexReader reader = searcher.getReader();\n      SolrIndexReader[] readers = reader.getLeafReaders();\n      SolrIndexReader subReader = reader;\n      if (readers.length==1) {\n        // if there is a single segment, use that subReader and avoid looking up each time\n        subReader = readers[0];\n        readers=null;\n      }\n      int[] offsets = reader.getLeafOffsets();\n\n      for (SortField sortField: sortFields) {\n        int type = sortField.getType();\n        if (type==SortField.SCORE || type==SortField.DOC) continue;\n\n        FieldComparator comparator = null;\n        FieldComparator comparators[] = (readers==null) ? null : new FieldComparator[readers.length];\n\n        String fieldname = sortField.getField();\n        FieldType ft = fieldname==null ? null : req.getSchema().getFieldTypeNoEx(fieldname);\n\n        DocList docList = rb.getResults().docList;\n        ArrayList<Object> vals = new ArrayList<Object>(docList.size());\n        DocIterator it = rb.getResults().docList.iterator();\n\n        int offset = 0;\n        int idx = 0;\n\n        while(it.hasNext()) {\n          int doc = it.nextDoc();\n          if (readers != null) {\n            idx = SolrIndexReader.readerIndex(doc, offsets);\n            subReader = readers[idx];\n            offset = offsets[idx];\n            comparator = comparators[idx];\n          }\n\n          if (comparator == null) {\n            comparator = sortField.getComparator(1,0);\n            comparator.setNextReader(subReader, offset);\n            if (comparators != null)\n              comparators[idx] = comparator;\n          }\n\n          doc -= offset;  // adjust for what segment this is in\n          comparator.copy(0, doc);\n          Object val = comparator.value(0);\n\n          // Sortable float, double, int, long types all just use a string\n          // comparator. For these, we need to put the type into a readable\n          // format.  One reason for this is that XML can't represent all\n          // string values (or even all unicode code points).\n          // indexedToReadable() should be a no-op and should\n          // thus be harmless anyway (for all current ways anyway)\n          if (val instanceof String) {\n            field.setValue((String)val);\n            val = ft.toObject(field);\n          }\n\n          // Must do the same conversion when sorting by a\n          // String field in Lucene, which returns the terms\n          // data as BytesRef:\n          if (val instanceof BytesRef) {\n            field.setValue(((BytesRef)val).utf8ToString());\n            val = ft.toObject(field);\n          }\n\n          vals.add(val);\n        }\n\n        sortVals.add(fieldname, vals);\n      }\n\n      rsp.add(\"sort_values\", sortVals);\n    }\n  }\n\n","sourceOld":"  protected void doFieldSortValues(ResponseBuilder rb, SolrIndexSearcher searcher) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    // The query cache doesn't currently store sort field values, and SolrIndexSearcher doesn't\n    // currently have an option to return sort field values.  Because of this, we\n    // take the documents given and re-derive the sort values.\n    boolean fsv = req.getParams().getBool(ResponseBuilder.FIELD_SORT_VALUES,false);\n    if(fsv){\n      Sort sort = rb.getSortSpec().getSort();\n      SortField[] sortFields = sort==null ? new SortField[]{SortField.FIELD_SCORE} : sort.getSort();\n      NamedList sortVals = new NamedList(); // order is important for the sort fields\n      Field field = new Field(\"dummy\", \"\", Field.Store.YES, Field.Index.NO); // a dummy Field\n\n      SolrIndexReader reader = searcher.getReader();\n      SolrIndexReader[] readers = reader.getLeafReaders();\n      SolrIndexReader subReader = reader;\n      if (readers.length==1) {\n        // if there is a single segment, use that subReader and avoid looking up each time\n        subReader = readers[0];\n        readers=null;\n      }\n      int[] offsets = reader.getLeafOffsets();\n\n      for (SortField sortField: sortFields) {\n        int type = sortField.getType();\n        if (type==SortField.SCORE || type==SortField.DOC) continue;\n\n        FieldComparator comparator = null;\n        FieldComparator comparators[] = (readers==null) ? null : new FieldComparator[readers.length];\n\n        String fieldname = sortField.getField();\n        FieldType ft = fieldname==null ? null : req.getSchema().getFieldTypeNoEx(fieldname);\n\n        DocList docList = rb.getResults().docList;\n        ArrayList<Object> vals = new ArrayList<Object>(docList.size());\n        DocIterator it = rb.getResults().docList.iterator();\n\n        int offset = 0;\n        int idx = 0;\n\n        while(it.hasNext()) {\n          int doc = it.nextDoc();\n          if (readers != null) {\n            idx = SolrIndexReader.readerIndex(doc, offsets);\n            subReader = readers[idx];\n            offset = offsets[idx];\n            comparator = comparators[idx];\n          }\n\n          if (comparator == null) {\n            comparator = sortField.getComparator(1,0);\n            comparator.setNextReader(subReader, offset);\n            if (comparators != null)\n              comparators[idx] = comparator;\n          }\n\n          doc -= offset;  // adjust for what segment this is in\n          comparator.copy(0, doc);\n          Object val = comparator.value(0);\n\n          // Sortable float, double, int, long types all just use a string\n          // comparator. For these, we need to put the type into a readable\n          // format.  One reason for this is that XML can't represent all\n          // string values (or even all unicode code points).\n          // indexedToReadable() should be a no-op and should\n          // thus be harmless anyway (for all current ways anyway)\n          if (val instanceof String) {\n            field.setValue((String)val);\n            val = ft.toObject(field);\n          }\n\n          vals.add(val);\n        }\n\n        sortVals.add(fieldname, vals);\n      }\n\n      rsp.add(\"sort_values\", sortVals);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9eed5547b2f58afdc475cc06312622f5bcf220c2","date":1284156494,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryComponent#doFieldSortValues(ResponseBuilder,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryComponent#doFieldSortValues(ResponseBuilder,SolrIndexSearcher).mjava","sourceNew":"  protected void doFieldSortValues(ResponseBuilder rb, SolrIndexSearcher searcher) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    // The query cache doesn't currently store sort field values, and SolrIndexSearcher doesn't\n    // currently have an option to return sort field values.  Because of this, we\n    // take the documents given and re-derive the sort values.\n    boolean fsv = req.getParams().getBool(ResponseBuilder.FIELD_SORT_VALUES,false);\n    if(fsv){\n      Sort sort = rb.getSortSpec().getSort();\n      SortField[] sortFields = sort==null ? new SortField[]{SortField.FIELD_SCORE} : sort.getSort();\n      NamedList sortVals = new NamedList(); // order is important for the sort fields\n      Field field = new Field(\"dummy\", \"\", Field.Store.YES, Field.Index.NO); // a dummy Field\n\n      SolrIndexReader reader = searcher.getReader();\n      SolrIndexReader[] readers = reader.getLeafReaders();\n      SolrIndexReader subReader = reader;\n      if (readers.length==1) {\n        // if there is a single segment, use that subReader and avoid looking up each time\n        subReader = readers[0];\n        readers=null;\n      }\n      int[] offsets = reader.getLeafOffsets();\n\n      for (SortField sortField: sortFields) {\n        int type = sortField.getType();\n        if (type==SortField.SCORE || type==SortField.DOC) continue;\n\n        FieldComparator comparator = null;\n        FieldComparator comparators[] = (readers==null) ? null : new FieldComparator[readers.length];\n\n        String fieldname = sortField.getField();\n        FieldType ft = fieldname==null ? null : req.getSchema().getFieldTypeNoEx(fieldname);\n\n        DocList docList = rb.getResults().docList;\n        ArrayList<Object> vals = new ArrayList<Object>(docList.size());\n        DocIterator it = rb.getResults().docList.iterator();\n\n        int offset = 0;\n        int idx = 0;\n\n        while(it.hasNext()) {\n          int doc = it.nextDoc();\n          if (readers != null) {\n            idx = SolrIndexReader.readerIndex(doc, offsets);\n            subReader = readers[idx];\n            offset = offsets[idx];\n            comparator = comparators[idx];\n          }\n\n          if (comparator == null) {\n            comparator = sortField.getComparator(1,0);\n            comparator = comparator.setNextReader(subReader, offset);\n            if (comparators != null)\n              comparators[idx] = comparator;\n          }\n\n          doc -= offset;  // adjust for what segment this is in\n          comparator.copy(0, doc);\n          Object val = comparator.value(0);\n\n          // Sortable float, double, int, long types all just use a string\n          // comparator. For these, we need to put the type into a readable\n          // format.  One reason for this is that XML can't represent all\n          // string values (or even all unicode code points).\n          // indexedToReadable() should be a no-op and should\n          // thus be harmless anyway (for all current ways anyway)\n          if (val instanceof String) {\n            field.setValue((String)val);\n            val = ft.toObject(field);\n          }\n\n          // Must do the same conversion when sorting by a\n          // String field in Lucene, which returns the terms\n          // data as BytesRef:\n          if (val instanceof BytesRef) {\n            field.setValue(((BytesRef)val).utf8ToString());\n            val = ft.toObject(field);\n          }\n\n          vals.add(val);\n        }\n\n        sortVals.add(fieldname, vals);\n      }\n\n      rsp.add(\"sort_values\", sortVals);\n    }\n  }\n\n","sourceOld":"  protected void doFieldSortValues(ResponseBuilder rb, SolrIndexSearcher searcher) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    // The query cache doesn't currently store sort field values, and SolrIndexSearcher doesn't\n    // currently have an option to return sort field values.  Because of this, we\n    // take the documents given and re-derive the sort values.\n    boolean fsv = req.getParams().getBool(ResponseBuilder.FIELD_SORT_VALUES,false);\n    if(fsv){\n      Sort sort = rb.getSortSpec().getSort();\n      SortField[] sortFields = sort==null ? new SortField[]{SortField.FIELD_SCORE} : sort.getSort();\n      NamedList sortVals = new NamedList(); // order is important for the sort fields\n      Field field = new Field(\"dummy\", \"\", Field.Store.YES, Field.Index.NO); // a dummy Field\n\n      SolrIndexReader reader = searcher.getReader();\n      SolrIndexReader[] readers = reader.getLeafReaders();\n      SolrIndexReader subReader = reader;\n      if (readers.length==1) {\n        // if there is a single segment, use that subReader and avoid looking up each time\n        subReader = readers[0];\n        readers=null;\n      }\n      int[] offsets = reader.getLeafOffsets();\n\n      for (SortField sortField: sortFields) {\n        int type = sortField.getType();\n        if (type==SortField.SCORE || type==SortField.DOC) continue;\n\n        FieldComparator comparator = null;\n        FieldComparator comparators[] = (readers==null) ? null : new FieldComparator[readers.length];\n\n        String fieldname = sortField.getField();\n        FieldType ft = fieldname==null ? null : req.getSchema().getFieldTypeNoEx(fieldname);\n\n        DocList docList = rb.getResults().docList;\n        ArrayList<Object> vals = new ArrayList<Object>(docList.size());\n        DocIterator it = rb.getResults().docList.iterator();\n\n        int offset = 0;\n        int idx = 0;\n\n        while(it.hasNext()) {\n          int doc = it.nextDoc();\n          if (readers != null) {\n            idx = SolrIndexReader.readerIndex(doc, offsets);\n            subReader = readers[idx];\n            offset = offsets[idx];\n            comparator = comparators[idx];\n          }\n\n          if (comparator == null) {\n            comparator = sortField.getComparator(1,0);\n            comparator.setNextReader(subReader, offset);\n            if (comparators != null)\n              comparators[idx] = comparator;\n          }\n\n          doc -= offset;  // adjust for what segment this is in\n          comparator.copy(0, doc);\n          Object val = comparator.value(0);\n\n          // Sortable float, double, int, long types all just use a string\n          // comparator. For these, we need to put the type into a readable\n          // format.  One reason for this is that XML can't represent all\n          // string values (or even all unicode code points).\n          // indexedToReadable() should be a no-op and should\n          // thus be harmless anyway (for all current ways anyway)\n          if (val instanceof String) {\n            field.setValue((String)val);\n            val = ft.toObject(field);\n          }\n\n          // Must do the same conversion when sorting by a\n          // String field in Lucene, which returns the terms\n          // data as BytesRef:\n          if (val instanceof BytesRef) {\n            field.setValue(((BytesRef)val).utf8ToString());\n            val = ft.toObject(field);\n          }\n\n          vals.add(val);\n        }\n\n        sortVals.add(fieldname, vals);\n      }\n\n      rsp.add(\"sort_values\", sortVals);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryComponent#doFieldSortValues(ResponseBuilder,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryComponent#doFieldSortValues(ResponseBuilder,SolrIndexSearcher).mjava","sourceNew":"  protected void doFieldSortValues(ResponseBuilder rb, SolrIndexSearcher searcher) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    // The query cache doesn't currently store sort field values, and SolrIndexSearcher doesn't\n    // currently have an option to return sort field values.  Because of this, we\n    // take the documents given and re-derive the sort values.\n    boolean fsv = req.getParams().getBool(ResponseBuilder.FIELD_SORT_VALUES,false);\n    if(fsv){\n      Sort sort = rb.getSortSpec().getSort();\n      SortField[] sortFields = sort==null ? new SortField[]{SortField.FIELD_SCORE} : sort.getSort();\n      NamedList sortVals = new NamedList(); // order is important for the sort fields\n      Field field = new Field(\"dummy\", \"\", Field.Store.YES, Field.Index.NO); // a dummy Field\n\n      SolrIndexReader reader = searcher.getReader();\n      SolrIndexReader[] readers = reader.getLeafReaders();\n      SolrIndexReader subReader = reader;\n      if (readers.length==1) {\n        // if there is a single segment, use that subReader and avoid looking up each time\n        subReader = readers[0];\n        readers=null;\n      }\n      int[] offsets = reader.getLeafOffsets();\n\n      for (SortField sortField: sortFields) {\n        int type = sortField.getType();\n        if (type==SortField.SCORE || type==SortField.DOC) continue;\n\n        FieldComparator comparator = null;\n        FieldComparator comparators[] = (readers==null) ? null : new FieldComparator[readers.length];\n\n        String fieldname = sortField.getField();\n        FieldType ft = fieldname==null ? null : req.getSchema().getFieldTypeNoEx(fieldname);\n\n        DocList docList = rb.getResults().docList;\n        ArrayList<Object> vals = new ArrayList<Object>(docList.size());\n        DocIterator it = rb.getResults().docList.iterator();\n\n        int offset = 0;\n        int idx = 0;\n\n        while(it.hasNext()) {\n          int doc = it.nextDoc();\n          if (readers != null) {\n            idx = SolrIndexReader.readerIndex(doc, offsets);\n            subReader = readers[idx];\n            offset = offsets[idx];\n            comparator = comparators[idx];\n          }\n\n          if (comparator == null) {\n            comparator = sortField.getComparator(1,0);\n            comparator = comparator.setNextReader(subReader, offset);\n            if (comparators != null)\n              comparators[idx] = comparator;\n          }\n\n          doc -= offset;  // adjust for what segment this is in\n          comparator.copy(0, doc);\n          Object val = comparator.value(0);\n\n          // Sortable float, double, int, long types all just use a string\n          // comparator. For these, we need to put the type into a readable\n          // format.  One reason for this is that XML can't represent all\n          // string values (or even all unicode code points).\n          // indexedToReadable() should be a no-op and should\n          // thus be harmless anyway (for all current ways anyway)\n          if (val instanceof String) {\n            field.setValue((String)val);\n            val = ft.toObject(field);\n          }\n\n          // Must do the same conversion when sorting by a\n          // String field in Lucene, which returns the terms\n          // data as BytesRef:\n          if (val instanceof BytesRef) {\n            field.setValue(((BytesRef)val).utf8ToString());\n            val = ft.toObject(field);\n          }\n\n          vals.add(val);\n        }\n\n        sortVals.add(fieldname, vals);\n      }\n\n      rsp.add(\"sort_values\", sortVals);\n    }\n  }\n\n","sourceOld":"  protected void doFieldSortValues(ResponseBuilder rb, SolrIndexSearcher searcher) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    // The query cache doesn't currently store sort field values, and SolrIndexSearcher doesn't\n    // currently have an option to return sort field values.  Because of this, we\n    // take the documents given and re-derive the sort values.\n    boolean fsv = req.getParams().getBool(ResponseBuilder.FIELD_SORT_VALUES,false);\n    if(fsv){\n      Sort sort = rb.getSortSpec().getSort();\n      SortField[] sortFields = sort==null ? new SortField[]{SortField.FIELD_SCORE} : sort.getSort();\n      NamedList sortVals = new NamedList(); // order is important for the sort fields\n      Field field = new Field(\"dummy\", \"\", Field.Store.YES, Field.Index.NO); // a dummy Field\n\n      SolrIndexReader reader = searcher.getReader();\n      SolrIndexReader[] readers = reader.getLeafReaders();\n      SolrIndexReader subReader = reader;\n      if (readers.length==1) {\n        // if there is a single segment, use that subReader and avoid looking up each time\n        subReader = readers[0];\n        readers=null;\n      }\n      int[] offsets = reader.getLeafOffsets();\n\n      for (SortField sortField: sortFields) {\n        int type = sortField.getType();\n        if (type==SortField.SCORE || type==SortField.DOC) continue;\n\n        FieldComparator comparator = null;\n        FieldComparator comparators[] = (readers==null) ? null : new FieldComparator[readers.length];\n\n        String fieldname = sortField.getField();\n        FieldType ft = fieldname==null ? null : req.getSchema().getFieldTypeNoEx(fieldname);\n\n        DocList docList = rb.getResults().docList;\n        ArrayList<Object> vals = new ArrayList<Object>(docList.size());\n        DocIterator it = rb.getResults().docList.iterator();\n\n        int offset = 0;\n        int idx = 0;\n\n        while(it.hasNext()) {\n          int doc = it.nextDoc();\n          if (readers != null) {\n            idx = SolrIndexReader.readerIndex(doc, offsets);\n            subReader = readers[idx];\n            offset = offsets[idx];\n            comparator = comparators[idx];\n          }\n\n          if (comparator == null) {\n            comparator = sortField.getComparator(1,0);\n            comparator.setNextReader(subReader, offset);\n            if (comparators != null)\n              comparators[idx] = comparator;\n          }\n\n          doc -= offset;  // adjust for what segment this is in\n          comparator.copy(0, doc);\n          Object val = comparator.value(0);\n\n          // Sortable float, double, int, long types all just use a string\n          // comparator. For these, we need to put the type into a readable\n          // format.  One reason for this is that XML can't represent all\n          // string values (or even all unicode code points).\n          // indexedToReadable() should be a no-op and should\n          // thus be harmless anyway (for all current ways anyway)\n          if (val instanceof String) {\n            field.setValue((String)val);\n            val = ft.toObject(field);\n          }\n\n          // Must do the same conversion when sorting by a\n          // String field in Lucene, which returns the terms\n          // data as BytesRef:\n          if (val instanceof BytesRef) {\n            field.setValue(((BytesRef)val).utf8ToString());\n            val = ft.toObject(field);\n          }\n\n          vals.add(val);\n        }\n\n        sortVals.add(fieldname, vals);\n      }\n\n      rsp.add(\"sort_values\", sortVals);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"323f871ffe96b871d8c534a614be60751bb023c2","date":1294820532,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryComponent#doFieldSortValues(ResponseBuilder,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryComponent#doFieldSortValues(ResponseBuilder,SolrIndexSearcher).mjava","sourceNew":"  protected void doFieldSortValues(ResponseBuilder rb, SolrIndexSearcher searcher) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    // The query cache doesn't currently store sort field values, and SolrIndexSearcher doesn't\n    // currently have an option to return sort field values.  Because of this, we\n    // take the documents given and re-derive the sort values.\n    boolean fsv = req.getParams().getBool(ResponseBuilder.FIELD_SORT_VALUES,false);\n    if(fsv){\n      Sort sort = rb.getSortSpec().getSort();\n      SortField[] sortFields = sort==null ? new SortField[]{SortField.FIELD_SCORE} : sort.getSort();\n      NamedList sortVals = new NamedList(); // order is important for the sort fields\n      Field field = new Field(\"dummy\", \"\", Field.Store.YES, Field.Index.NO); // a dummy Field\n      ReaderContext topReaderContext = searcher.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      AtomicReaderContext currentLeaf = null;\n      if (leaves.length==1) {\n        // if there is a single segment, use that subReader and avoid looking up each time\n        currentLeaf = leaves[0];\n        leaves=null;\n      }\n\n      for (SortField sortField: sortFields) {\n        int type = sortField.getType();\n        if (type==SortField.SCORE || type==SortField.DOC) continue;\n\n        FieldComparator comparator = null;\n        FieldComparator comparators[] = (leaves==null) ? null : new FieldComparator[leaves.length];\n\n        String fieldname = sortField.getField();\n        FieldType ft = fieldname==null ? null : req.getSchema().getFieldTypeNoEx(fieldname);\n\n        DocList docList = rb.getResults().docList;\n        ArrayList<Object> vals = new ArrayList<Object>(docList.size());\n        DocIterator it = rb.getResults().docList.iterator();\n\n        int idx = 0;\n\n        while(it.hasNext()) {\n          int doc = it.nextDoc();\n          if (leaves != null) {\n            idx = ReaderUtil.subIndex(doc, leaves);\n            currentLeaf = leaves[idx];\n            comparator = comparators[idx];\n          }\n\n          if (comparator == null) {\n            comparator = sortField.getComparator(1,0);\n            comparator = comparator.setNextReader(currentLeaf);\n            if (comparators != null)\n              comparators[idx] = comparator;\n          }\n\n          doc -= currentLeaf.docBase;  // adjust for what segment this is in\n          comparator.copy(0, doc);\n          Object val = comparator.value(0);\n\n          // Sortable float, double, int, long types all just use a string\n          // comparator. For these, we need to put the type into a readable\n          // format.  One reason for this is that XML can't represent all\n          // string values (or even all unicode code points).\n          // indexedToReadable() should be a no-op and should\n          // thus be harmless anyway (for all current ways anyway)\n          if (val instanceof String) {\n            field.setValue((String)val);\n            val = ft.toObject(field);\n          }\n\n          // Must do the same conversion when sorting by a\n          // String field in Lucene, which returns the terms\n          // data as BytesRef:\n          if (val instanceof BytesRef) {\n            field.setValue(((BytesRef)val).utf8ToString());\n            val = ft.toObject(field);\n          }\n\n          vals.add(val);\n        }\n\n        sortVals.add(fieldname, vals);\n      }\n\n      rsp.add(\"sort_values\", sortVals);\n    }\n  }\n\n","sourceOld":"  protected void doFieldSortValues(ResponseBuilder rb, SolrIndexSearcher searcher) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    // The query cache doesn't currently store sort field values, and SolrIndexSearcher doesn't\n    // currently have an option to return sort field values.  Because of this, we\n    // take the documents given and re-derive the sort values.\n    boolean fsv = req.getParams().getBool(ResponseBuilder.FIELD_SORT_VALUES,false);\n    if(fsv){\n      Sort sort = rb.getSortSpec().getSort();\n      SortField[] sortFields = sort==null ? new SortField[]{SortField.FIELD_SCORE} : sort.getSort();\n      NamedList sortVals = new NamedList(); // order is important for the sort fields\n      Field field = new Field(\"dummy\", \"\", Field.Store.YES, Field.Index.NO); // a dummy Field\n\n      SolrIndexReader reader = searcher.getReader();\n      SolrIndexReader[] readers = reader.getLeafReaders();\n      SolrIndexReader subReader = reader;\n      if (readers.length==1) {\n        // if there is a single segment, use that subReader and avoid looking up each time\n        subReader = readers[0];\n        readers=null;\n      }\n      int[] offsets = reader.getLeafOffsets();\n\n      for (SortField sortField: sortFields) {\n        int type = sortField.getType();\n        if (type==SortField.SCORE || type==SortField.DOC) continue;\n\n        FieldComparator comparator = null;\n        FieldComparator comparators[] = (readers==null) ? null : new FieldComparator[readers.length];\n\n        String fieldname = sortField.getField();\n        FieldType ft = fieldname==null ? null : req.getSchema().getFieldTypeNoEx(fieldname);\n\n        DocList docList = rb.getResults().docList;\n        ArrayList<Object> vals = new ArrayList<Object>(docList.size());\n        DocIterator it = rb.getResults().docList.iterator();\n\n        int offset = 0;\n        int idx = 0;\n\n        while(it.hasNext()) {\n          int doc = it.nextDoc();\n          if (readers != null) {\n            idx = SolrIndexReader.readerIndex(doc, offsets);\n            subReader = readers[idx];\n            offset = offsets[idx];\n            comparator = comparators[idx];\n          }\n\n          if (comparator == null) {\n            comparator = sortField.getComparator(1,0);\n            comparator = comparator.setNextReader(subReader, offset);\n            if (comparators != null)\n              comparators[idx] = comparator;\n          }\n\n          doc -= offset;  // adjust for what segment this is in\n          comparator.copy(0, doc);\n          Object val = comparator.value(0);\n\n          // Sortable float, double, int, long types all just use a string\n          // comparator. For these, we need to put the type into a readable\n          // format.  One reason for this is that XML can't represent all\n          // string values (or even all unicode code points).\n          // indexedToReadable() should be a no-op and should\n          // thus be harmless anyway (for all current ways anyway)\n          if (val instanceof String) {\n            field.setValue((String)val);\n            val = ft.toObject(field);\n          }\n\n          // Must do the same conversion when sorting by a\n          // String field in Lucene, which returns the terms\n          // data as BytesRef:\n          if (val instanceof BytesRef) {\n            field.setValue(((BytesRef)val).utf8ToString());\n            val = ft.toObject(field);\n          }\n\n          vals.add(val);\n        }\n\n        sortVals.add(fieldname, vals);\n      }\n\n      rsp.add(\"sort_values\", sortVals);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryComponent#doFieldSortValues(ResponseBuilder,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryComponent#doFieldSortValues(ResponseBuilder,SolrIndexSearcher).mjava","sourceNew":"  protected void doFieldSortValues(ResponseBuilder rb, SolrIndexSearcher searcher) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    // The query cache doesn't currently store sort field values, and SolrIndexSearcher doesn't\n    // currently have an option to return sort field values.  Because of this, we\n    // take the documents given and re-derive the sort values.\n    boolean fsv = req.getParams().getBool(ResponseBuilder.FIELD_SORT_VALUES,false);\n    if(fsv){\n      Sort sort = rb.getSortSpec().getSort();\n      SortField[] sortFields = sort==null ? new SortField[]{SortField.FIELD_SCORE} : sort.getSort();\n      NamedList sortVals = new NamedList(); // order is important for the sort fields\n      Field field = new Field(\"dummy\", \"\", Field.Store.YES, Field.Index.NO); // a dummy Field\n      ReaderContext topReaderContext = searcher.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      AtomicReaderContext currentLeaf = null;\n      if (leaves.length==1) {\n        // if there is a single segment, use that subReader and avoid looking up each time\n        currentLeaf = leaves[0];\n        leaves=null;\n      }\n\n      for (SortField sortField: sortFields) {\n        int type = sortField.getType();\n        if (type==SortField.SCORE || type==SortField.DOC) continue;\n\n        FieldComparator comparator = null;\n        FieldComparator comparators[] = (leaves==null) ? null : new FieldComparator[leaves.length];\n\n        String fieldname = sortField.getField();\n        FieldType ft = fieldname==null ? null : req.getSchema().getFieldTypeNoEx(fieldname);\n\n        DocList docList = rb.getResults().docList;\n        ArrayList<Object> vals = new ArrayList<Object>(docList.size());\n        DocIterator it = rb.getResults().docList.iterator();\n\n        int idx = 0;\n\n        while(it.hasNext()) {\n          int doc = it.nextDoc();\n          if (leaves != null) {\n            idx = ReaderUtil.subIndex(doc, leaves);\n            currentLeaf = leaves[idx];\n            comparator = comparators[idx];\n          }\n\n          if (comparator == null) {\n            comparator = sortField.getComparator(1,0);\n            comparator = comparator.setNextReader(currentLeaf);\n            if (comparators != null)\n              comparators[idx] = comparator;\n          }\n\n          doc -= currentLeaf.docBase;  // adjust for what segment this is in\n          comparator.copy(0, doc);\n          Object val = comparator.value(0);\n\n          // Sortable float, double, int, long types all just use a string\n          // comparator. For these, we need to put the type into a readable\n          // format.  One reason for this is that XML can't represent all\n          // string values (or even all unicode code points).\n          // indexedToReadable() should be a no-op and should\n          // thus be harmless anyway (for all current ways anyway)\n          if (val instanceof String) {\n            field.setValue((String)val);\n            val = ft.toObject(field);\n          }\n\n          // Must do the same conversion when sorting by a\n          // String field in Lucene, which returns the terms\n          // data as BytesRef:\n          if (val instanceof BytesRef) {\n            field.setValue(((BytesRef)val).utf8ToString());\n            val = ft.toObject(field);\n          }\n\n          vals.add(val);\n        }\n\n        sortVals.add(fieldname, vals);\n      }\n\n      rsp.add(\"sort_values\", sortVals);\n    }\n  }\n\n","sourceOld":"  protected void doFieldSortValues(ResponseBuilder rb, SolrIndexSearcher searcher) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    // The query cache doesn't currently store sort field values, and SolrIndexSearcher doesn't\n    // currently have an option to return sort field values.  Because of this, we\n    // take the documents given and re-derive the sort values.\n    boolean fsv = req.getParams().getBool(ResponseBuilder.FIELD_SORT_VALUES,false);\n    if(fsv){\n      Sort sort = rb.getSortSpec().getSort();\n      SortField[] sortFields = sort==null ? new SortField[]{SortField.FIELD_SCORE} : sort.getSort();\n      NamedList sortVals = new NamedList(); // order is important for the sort fields\n      Field field = new Field(\"dummy\", \"\", Field.Store.YES, Field.Index.NO); // a dummy Field\n\n      SolrIndexReader reader = searcher.getReader();\n      SolrIndexReader[] readers = reader.getLeafReaders();\n      SolrIndexReader subReader = reader;\n      if (readers.length==1) {\n        // if there is a single segment, use that subReader and avoid looking up each time\n        subReader = readers[0];\n        readers=null;\n      }\n      int[] offsets = reader.getLeafOffsets();\n\n      for (SortField sortField: sortFields) {\n        int type = sortField.getType();\n        if (type==SortField.SCORE || type==SortField.DOC) continue;\n\n        FieldComparator comparator = null;\n        FieldComparator comparators[] = (readers==null) ? null : new FieldComparator[readers.length];\n\n        String fieldname = sortField.getField();\n        FieldType ft = fieldname==null ? null : req.getSchema().getFieldTypeNoEx(fieldname);\n\n        DocList docList = rb.getResults().docList;\n        ArrayList<Object> vals = new ArrayList<Object>(docList.size());\n        DocIterator it = rb.getResults().docList.iterator();\n\n        int offset = 0;\n        int idx = 0;\n\n        while(it.hasNext()) {\n          int doc = it.nextDoc();\n          if (readers != null) {\n            idx = SolrIndexReader.readerIndex(doc, offsets);\n            subReader = readers[idx];\n            offset = offsets[idx];\n            comparator = comparators[idx];\n          }\n\n          if (comparator == null) {\n            comparator = sortField.getComparator(1,0);\n            comparator = comparator.setNextReader(subReader, offset);\n            if (comparators != null)\n              comparators[idx] = comparator;\n          }\n\n          doc -= offset;  // adjust for what segment this is in\n          comparator.copy(0, doc);\n          Object val = comparator.value(0);\n\n          // Sortable float, double, int, long types all just use a string\n          // comparator. For these, we need to put the type into a readable\n          // format.  One reason for this is that XML can't represent all\n          // string values (or even all unicode code points).\n          // indexedToReadable() should be a no-op and should\n          // thus be harmless anyway (for all current ways anyway)\n          if (val instanceof String) {\n            field.setValue((String)val);\n            val = ft.toObject(field);\n          }\n\n          // Must do the same conversion when sorting by a\n          // String field in Lucene, which returns the terms\n          // data as BytesRef:\n          if (val instanceof BytesRef) {\n            field.setValue(((BytesRef)val).utf8ToString());\n            val = ft.toObject(field);\n          }\n\n          vals.add(val);\n        }\n\n        sortVals.add(fieldname, vals);\n      }\n\n      rsp.add(\"sort_values\", sortVals);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"771281b4c7dc712b48ba338b970b49007ca402a1","date":1295480908,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryComponent#doFieldSortValues(ResponseBuilder,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryComponent#doFieldSortValues(ResponseBuilder,SolrIndexSearcher).mjava","sourceNew":"  protected void doFieldSortValues(ResponseBuilder rb, SolrIndexSearcher searcher) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    // The query cache doesn't currently store sort field values, and SolrIndexSearcher doesn't\n    // currently have an option to return sort field values.  Because of this, we\n    // take the documents given and re-derive the sort values.\n    boolean fsv = req.getParams().getBool(ResponseBuilder.FIELD_SORT_VALUES,false);\n    if(fsv){\n      Sort sort = searcher.weightSort(rb.getSortSpec().getSort());\n      SortField[] sortFields = sort==null ? new SortField[]{SortField.FIELD_SCORE} : sort.getSort();\n      NamedList sortVals = new NamedList(); // order is important for the sort fields\n      Field field = new Field(\"dummy\", \"\", Field.Store.YES, Field.Index.NO); // a dummy Field\n      ReaderContext topReaderContext = searcher.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      AtomicReaderContext currentLeaf = null;\n      if (leaves.length==1) {\n        // if there is a single segment, use that subReader and avoid looking up each time\n        currentLeaf = leaves[0];\n        leaves=null;\n      }\n\n      for (SortField sortField: sortFields) {\n        int type = sortField.getType();\n        if (type==SortField.SCORE || type==SortField.DOC) continue;\n\n        FieldComparator comparator = null;\n        FieldComparator comparators[] = (leaves==null) ? null : new FieldComparator[leaves.length];\n\n        String fieldname = sortField.getField();\n        FieldType ft = fieldname==null ? null : req.getSchema().getFieldTypeNoEx(fieldname);\n\n        DocList docList = rb.getResults().docList;\n        ArrayList<Object> vals = new ArrayList<Object>(docList.size());\n        DocIterator it = rb.getResults().docList.iterator();\n\n        int idx = 0;\n\n        while(it.hasNext()) {\n          int doc = it.nextDoc();\n          if (leaves != null) {\n            idx = ReaderUtil.subIndex(doc, leaves);\n            currentLeaf = leaves[idx];\n            comparator = comparators[idx];\n          }\n\n          if (comparator == null) {\n            comparator = sortField.getComparator(1,0);\n            comparator = comparator.setNextReader(currentLeaf);\n            if (comparators != null)\n              comparators[idx] = comparator;\n          }\n\n          doc -= currentLeaf.docBase;  // adjust for what segment this is in\n          comparator.copy(0, doc);\n          Object val = comparator.value(0);\n\n          // Sortable float, double, int, long types all just use a string\n          // comparator. For these, we need to put the type into a readable\n          // format.  One reason for this is that XML can't represent all\n          // string values (or even all unicode code points).\n          // indexedToReadable() should be a no-op and should\n          // thus be harmless anyway (for all current ways anyway)\n          if (val instanceof String) {\n            field.setValue((String)val);\n            val = ft.toObject(field);\n          }\n\n          // Must do the same conversion when sorting by a\n          // String field in Lucene, which returns the terms\n          // data as BytesRef:\n          if (val instanceof BytesRef) {\n            field.setValue(((BytesRef)val).utf8ToString());\n            val = ft.toObject(field);\n          }\n\n          vals.add(val);\n        }\n\n        sortVals.add(fieldname, vals);\n      }\n\n      rsp.add(\"sort_values\", sortVals);\n    }\n  }\n\n","sourceOld":"  protected void doFieldSortValues(ResponseBuilder rb, SolrIndexSearcher searcher) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    // The query cache doesn't currently store sort field values, and SolrIndexSearcher doesn't\n    // currently have an option to return sort field values.  Because of this, we\n    // take the documents given and re-derive the sort values.\n    boolean fsv = req.getParams().getBool(ResponseBuilder.FIELD_SORT_VALUES,false);\n    if(fsv){\n      Sort sort = rb.getSortSpec().getSort();\n      SortField[] sortFields = sort==null ? new SortField[]{SortField.FIELD_SCORE} : sort.getSort();\n      NamedList sortVals = new NamedList(); // order is important for the sort fields\n      Field field = new Field(\"dummy\", \"\", Field.Store.YES, Field.Index.NO); // a dummy Field\n      ReaderContext topReaderContext = searcher.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      AtomicReaderContext currentLeaf = null;\n      if (leaves.length==1) {\n        // if there is a single segment, use that subReader and avoid looking up each time\n        currentLeaf = leaves[0];\n        leaves=null;\n      }\n\n      for (SortField sortField: sortFields) {\n        int type = sortField.getType();\n        if (type==SortField.SCORE || type==SortField.DOC) continue;\n\n        FieldComparator comparator = null;\n        FieldComparator comparators[] = (leaves==null) ? null : new FieldComparator[leaves.length];\n\n        String fieldname = sortField.getField();\n        FieldType ft = fieldname==null ? null : req.getSchema().getFieldTypeNoEx(fieldname);\n\n        DocList docList = rb.getResults().docList;\n        ArrayList<Object> vals = new ArrayList<Object>(docList.size());\n        DocIterator it = rb.getResults().docList.iterator();\n\n        int idx = 0;\n\n        while(it.hasNext()) {\n          int doc = it.nextDoc();\n          if (leaves != null) {\n            idx = ReaderUtil.subIndex(doc, leaves);\n            currentLeaf = leaves[idx];\n            comparator = comparators[idx];\n          }\n\n          if (comparator == null) {\n            comparator = sortField.getComparator(1,0);\n            comparator = comparator.setNextReader(currentLeaf);\n            if (comparators != null)\n              comparators[idx] = comparator;\n          }\n\n          doc -= currentLeaf.docBase;  // adjust for what segment this is in\n          comparator.copy(0, doc);\n          Object val = comparator.value(0);\n\n          // Sortable float, double, int, long types all just use a string\n          // comparator. For these, we need to put the type into a readable\n          // format.  One reason for this is that XML can't represent all\n          // string values (or even all unicode code points).\n          // indexedToReadable() should be a no-op and should\n          // thus be harmless anyway (for all current ways anyway)\n          if (val instanceof String) {\n            field.setValue((String)val);\n            val = ft.toObject(field);\n          }\n\n          // Must do the same conversion when sorting by a\n          // String field in Lucene, which returns the terms\n          // data as BytesRef:\n          if (val instanceof BytesRef) {\n            field.setValue(((BytesRef)val).utf8ToString());\n            val = ft.toObject(field);\n          }\n\n          vals.add(val);\n        }\n\n        sortVals.add(fieldname, vals);\n      }\n\n      rsp.add(\"sort_values\", sortVals);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryComponent#doFieldSortValues(ResponseBuilder,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryComponent#doFieldSortValues(ResponseBuilder,SolrIndexSearcher).mjava","sourceNew":"  protected void doFieldSortValues(ResponseBuilder rb, SolrIndexSearcher searcher) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    // The query cache doesn't currently store sort field values, and SolrIndexSearcher doesn't\n    // currently have an option to return sort field values.  Because of this, we\n    // take the documents given and re-derive the sort values.\n    boolean fsv = req.getParams().getBool(ResponseBuilder.FIELD_SORT_VALUES,false);\n    if(fsv){\n      Sort sort = searcher.weightSort(rb.getSortSpec().getSort());\n      SortField[] sortFields = sort==null ? new SortField[]{SortField.FIELD_SCORE} : sort.getSort();\n      NamedList sortVals = new NamedList(); // order is important for the sort fields\n      Field field = new Field(\"dummy\", \"\", Field.Store.YES, Field.Index.NO); // a dummy Field\n      ReaderContext topReaderContext = searcher.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      AtomicReaderContext currentLeaf = null;\n      if (leaves.length==1) {\n        // if there is a single segment, use that subReader and avoid looking up each time\n        currentLeaf = leaves[0];\n        leaves=null;\n      }\n\n      for (SortField sortField: sortFields) {\n        int type = sortField.getType();\n        if (type==SortField.SCORE || type==SortField.DOC) continue;\n\n        FieldComparator comparator = null;\n        FieldComparator comparators[] = (leaves==null) ? null : new FieldComparator[leaves.length];\n\n        String fieldname = sortField.getField();\n        FieldType ft = fieldname==null ? null : req.getSchema().getFieldTypeNoEx(fieldname);\n\n        DocList docList = rb.getResults().docList;\n        ArrayList<Object> vals = new ArrayList<Object>(docList.size());\n        DocIterator it = rb.getResults().docList.iterator();\n\n        int idx = 0;\n\n        while(it.hasNext()) {\n          int doc = it.nextDoc();\n          if (leaves != null) {\n            idx = ReaderUtil.subIndex(doc, leaves);\n            currentLeaf = leaves[idx];\n            comparator = comparators[idx];\n          }\n\n          if (comparator == null) {\n            comparator = sortField.getComparator(1,0);\n            comparator = comparator.setNextReader(currentLeaf);\n            if (comparators != null)\n              comparators[idx] = comparator;\n          }\n\n          doc -= currentLeaf.docBase;  // adjust for what segment this is in\n          comparator.copy(0, doc);\n          Object val = comparator.value(0);\n\n          // Sortable float, double, int, long types all just use a string\n          // comparator. For these, we need to put the type into a readable\n          // format.  One reason for this is that XML can't represent all\n          // string values (or even all unicode code points).\n          // indexedToReadable() should be a no-op and should\n          // thus be harmless anyway (for all current ways anyway)\n          if (val instanceof String) {\n            field.setValue((String)val);\n            val = ft.toObject(field);\n          }\n\n          // Must do the same conversion when sorting by a\n          // String field in Lucene, which returns the terms\n          // data as BytesRef:\n          if (val instanceof BytesRef) {\n            field.setValue(((BytesRef)val).utf8ToString());\n            val = ft.toObject(field);\n          }\n\n          vals.add(val);\n        }\n\n        sortVals.add(fieldname, vals);\n      }\n\n      rsp.add(\"sort_values\", sortVals);\n    }\n  }\n\n","sourceOld":"  protected void doFieldSortValues(ResponseBuilder rb, SolrIndexSearcher searcher) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    // The query cache doesn't currently store sort field values, and SolrIndexSearcher doesn't\n    // currently have an option to return sort field values.  Because of this, we\n    // take the documents given and re-derive the sort values.\n    boolean fsv = req.getParams().getBool(ResponseBuilder.FIELD_SORT_VALUES,false);\n    if(fsv){\n      Sort sort = rb.getSortSpec().getSort();\n      SortField[] sortFields = sort==null ? new SortField[]{SortField.FIELD_SCORE} : sort.getSort();\n      NamedList sortVals = new NamedList(); // order is important for the sort fields\n      Field field = new Field(\"dummy\", \"\", Field.Store.YES, Field.Index.NO); // a dummy Field\n      ReaderContext topReaderContext = searcher.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      AtomicReaderContext currentLeaf = null;\n      if (leaves.length==1) {\n        // if there is a single segment, use that subReader and avoid looking up each time\n        currentLeaf = leaves[0];\n        leaves=null;\n      }\n\n      for (SortField sortField: sortFields) {\n        int type = sortField.getType();\n        if (type==SortField.SCORE || type==SortField.DOC) continue;\n\n        FieldComparator comparator = null;\n        FieldComparator comparators[] = (leaves==null) ? null : new FieldComparator[leaves.length];\n\n        String fieldname = sortField.getField();\n        FieldType ft = fieldname==null ? null : req.getSchema().getFieldTypeNoEx(fieldname);\n\n        DocList docList = rb.getResults().docList;\n        ArrayList<Object> vals = new ArrayList<Object>(docList.size());\n        DocIterator it = rb.getResults().docList.iterator();\n\n        int idx = 0;\n\n        while(it.hasNext()) {\n          int doc = it.nextDoc();\n          if (leaves != null) {\n            idx = ReaderUtil.subIndex(doc, leaves);\n            currentLeaf = leaves[idx];\n            comparator = comparators[idx];\n          }\n\n          if (comparator == null) {\n            comparator = sortField.getComparator(1,0);\n            comparator = comparator.setNextReader(currentLeaf);\n            if (comparators != null)\n              comparators[idx] = comparator;\n          }\n\n          doc -= currentLeaf.docBase;  // adjust for what segment this is in\n          comparator.copy(0, doc);\n          Object val = comparator.value(0);\n\n          // Sortable float, double, int, long types all just use a string\n          // comparator. For these, we need to put the type into a readable\n          // format.  One reason for this is that XML can't represent all\n          // string values (or even all unicode code points).\n          // indexedToReadable() should be a no-op and should\n          // thus be harmless anyway (for all current ways anyway)\n          if (val instanceof String) {\n            field.setValue((String)val);\n            val = ft.toObject(field);\n          }\n\n          // Must do the same conversion when sorting by a\n          // String field in Lucene, which returns the terms\n          // data as BytesRef:\n          if (val instanceof BytesRef) {\n            field.setValue(((BytesRef)val).utf8ToString());\n            val = ft.toObject(field);\n          }\n\n          vals.add(val);\n        }\n\n        sortVals.add(fieldname, vals);\n      }\n\n      rsp.add(\"sort_values\", sortVals);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryComponent#doFieldSortValues(ResponseBuilder,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryComponent#doFieldSortValues(ResponseBuilder,SolrIndexSearcher).mjava","sourceNew":"  protected void doFieldSortValues(ResponseBuilder rb, SolrIndexSearcher searcher) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    // The query cache doesn't currently store sort field values, and SolrIndexSearcher doesn't\n    // currently have an option to return sort field values.  Because of this, we\n    // take the documents given and re-derive the sort values.\n    boolean fsv = req.getParams().getBool(ResponseBuilder.FIELD_SORT_VALUES,false);\n    if(fsv){\n      Sort sort = searcher.weightSort(rb.getSortSpec().getSort());\n      SortField[] sortFields = sort==null ? new SortField[]{SortField.FIELD_SCORE} : sort.getSort();\n      NamedList sortVals = new NamedList(); // order is important for the sort fields\n      Field field = new Field(\"dummy\", \"\", Field.Store.YES, Field.Index.NO); // a dummy Field\n      ReaderContext topReaderContext = searcher.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      AtomicReaderContext currentLeaf = null;\n      if (leaves.length==1) {\n        // if there is a single segment, use that subReader and avoid looking up each time\n        currentLeaf = leaves[0];\n        leaves=null;\n      }\n\n      for (SortField sortField: sortFields) {\n        int type = sortField.getType();\n        if (type==SortField.SCORE || type==SortField.DOC) continue;\n\n        FieldComparator comparator = null;\n        FieldComparator comparators[] = (leaves==null) ? null : new FieldComparator[leaves.length];\n\n        String fieldname = sortField.getField();\n        FieldType ft = fieldname==null ? null : req.getSchema().getFieldTypeNoEx(fieldname);\n\n        DocList docList = rb.getResults().docList;\n        ArrayList<Object> vals = new ArrayList<Object>(docList.size());\n        DocIterator it = rb.getResults().docList.iterator();\n\n        int idx = 0;\n\n        while(it.hasNext()) {\n          int doc = it.nextDoc();\n          if (leaves != null) {\n            idx = ReaderUtil.subIndex(doc, leaves);\n            currentLeaf = leaves[idx];\n            comparator = comparators[idx];\n          }\n\n          if (comparator == null) {\n            comparator = sortField.getComparator(1,0);\n            comparator = comparator.setNextReader(currentLeaf);\n            if (comparators != null)\n              comparators[idx] = comparator;\n          }\n\n          doc -= currentLeaf.docBase;  // adjust for what segment this is in\n          comparator.copy(0, doc);\n          Object val = comparator.value(0);\n\n          // Sortable float, double, int, long types all just use a string\n          // comparator. For these, we need to put the type into a readable\n          // format.  One reason for this is that XML can't represent all\n          // string values (or even all unicode code points).\n          // indexedToReadable() should be a no-op and should\n          // thus be harmless anyway (for all current ways anyway)\n          if (val instanceof String) {\n            field.setValue((String)val);\n            val = ft.toObject(field);\n          }\n\n          // Must do the same conversion when sorting by a\n          // String field in Lucene, which returns the terms\n          // data as BytesRef:\n          if (val instanceof BytesRef) {\n            field.setValue(((BytesRef)val).utf8ToString());\n            val = ft.toObject(field);\n          }\n\n          vals.add(val);\n        }\n\n        sortVals.add(fieldname, vals);\n      }\n\n      rsp.add(\"sort_values\", sortVals);\n    }\n  }\n\n","sourceOld":"  protected void doFieldSortValues(ResponseBuilder rb, SolrIndexSearcher searcher) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    // The query cache doesn't currently store sort field values, and SolrIndexSearcher doesn't\n    // currently have an option to return sort field values.  Because of this, we\n    // take the documents given and re-derive the sort values.\n    boolean fsv = req.getParams().getBool(ResponseBuilder.FIELD_SORT_VALUES,false);\n    if(fsv){\n      Sort sort = rb.getSortSpec().getSort();\n      SortField[] sortFields = sort==null ? new SortField[]{SortField.FIELD_SCORE} : sort.getSort();\n      NamedList sortVals = new NamedList(); // order is important for the sort fields\n      Field field = new Field(\"dummy\", \"\", Field.Store.YES, Field.Index.NO); // a dummy Field\n\n      SolrIndexReader reader = searcher.getReader();\n      SolrIndexReader[] readers = reader.getLeafReaders();\n      SolrIndexReader subReader = reader;\n      if (readers.length==1) {\n        // if there is a single segment, use that subReader and avoid looking up each time\n        subReader = readers[0];\n        readers=null;\n      }\n      int[] offsets = reader.getLeafOffsets();\n\n      for (SortField sortField: sortFields) {\n        int type = sortField.getType();\n        if (type==SortField.SCORE || type==SortField.DOC) continue;\n\n        FieldComparator comparator = null;\n        FieldComparator comparators[] = (readers==null) ? null : new FieldComparator[readers.length];\n\n        String fieldname = sortField.getField();\n        FieldType ft = fieldname==null ? null : req.getSchema().getFieldTypeNoEx(fieldname);\n\n        DocList docList = rb.getResults().docList;\n        ArrayList<Object> vals = new ArrayList<Object>(docList.size());\n        DocIterator it = rb.getResults().docList.iterator();\n\n        int offset = 0;\n        int idx = 0;\n\n        while(it.hasNext()) {\n          int doc = it.nextDoc();\n          if (readers != null) {\n            idx = SolrIndexReader.readerIndex(doc, offsets);\n            subReader = readers[idx];\n            offset = offsets[idx];\n            comparator = comparators[idx];\n          }\n\n          if (comparator == null) {\n            comparator = sortField.getComparator(1,0);\n            comparator = comparator.setNextReader(subReader, offset);\n            if (comparators != null)\n              comparators[idx] = comparator;\n          }\n\n          doc -= offset;  // adjust for what segment this is in\n          comparator.copy(0, doc);\n          Object val = comparator.value(0);\n\n          // Sortable float, double, int, long types all just use a string\n          // comparator. For these, we need to put the type into a readable\n          // format.  One reason for this is that XML can't represent all\n          // string values (or even all unicode code points).\n          // indexedToReadable() should be a no-op and should\n          // thus be harmless anyway (for all current ways anyway)\n          if (val instanceof String) {\n            field.setValue((String)val);\n            val = ft.toObject(field);\n          }\n\n          // Must do the same conversion when sorting by a\n          // String field in Lucene, which returns the terms\n          // data as BytesRef:\n          if (val instanceof BytesRef) {\n            field.setValue(((BytesRef)val).utf8ToString());\n            val = ft.toObject(field);\n          }\n\n          vals.add(val);\n        }\n\n        sortVals.add(fieldname, vals);\n      }\n\n      rsp.add(\"sort_values\", sortVals);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1b3a24d5d9b47345473ff564f5cc127a7b526b4","date":1306277076,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryComponent#doFieldSortValues(ResponseBuilder,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryComponent#doFieldSortValues(ResponseBuilder,SolrIndexSearcher).mjava","sourceNew":"  protected void doFieldSortValues(ResponseBuilder rb, SolrIndexSearcher searcher) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    final CharsRef spare = new CharsRef();\n    // The query cache doesn't currently store sort field values, and SolrIndexSearcher doesn't\n    // currently have an option to return sort field values.  Because of this, we\n    // take the documents given and re-derive the sort values.\n    boolean fsv = req.getParams().getBool(ResponseBuilder.FIELD_SORT_VALUES,false);\n    if(fsv){\n      Sort sort = searcher.weightSort(rb.getSortSpec().getSort());\n      SortField[] sortFields = sort==null ? new SortField[]{SortField.FIELD_SCORE} : sort.getSort();\n      NamedList sortVals = new NamedList(); // order is important for the sort fields\n      Field field = new Field(\"dummy\", \"\", Field.Store.YES, Field.Index.NO); // a dummy Field\n      ReaderContext topReaderContext = searcher.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      AtomicReaderContext currentLeaf = null;\n      if (leaves.length==1) {\n        // if there is a single segment, use that subReader and avoid looking up each time\n        currentLeaf = leaves[0];\n        leaves=null;\n      }\n\n      for (SortField sortField: sortFields) {\n        int type = sortField.getType();\n        if (type==SortField.SCORE || type==SortField.DOC) continue;\n\n        FieldComparator comparator = null;\n        FieldComparator comparators[] = (leaves==null) ? null : new FieldComparator[leaves.length];\n\n        String fieldname = sortField.getField();\n        FieldType ft = fieldname==null ? null : req.getSchema().getFieldTypeNoEx(fieldname);\n\n        DocList docList = rb.getResults().docList;\n        ArrayList<Object> vals = new ArrayList<Object>(docList.size());\n        DocIterator it = rb.getResults().docList.iterator();\n\n        int idx = 0;\n\n        while(it.hasNext()) {\n          int doc = it.nextDoc();\n          if (leaves != null) {\n            idx = ReaderUtil.subIndex(doc, leaves);\n            currentLeaf = leaves[idx];\n            comparator = comparators[idx];\n          }\n\n          if (comparator == null) {\n            comparator = sortField.getComparator(1,0);\n            comparator = comparator.setNextReader(currentLeaf);\n            if (comparators != null)\n              comparators[idx] = comparator;\n          }\n\n          doc -= currentLeaf.docBase;  // adjust for what segment this is in\n          comparator.copy(0, doc);\n          Object val = comparator.value(0);\n\n          // Sortable float, double, int, long types all just use a string\n          // comparator. For these, we need to put the type into a readable\n          // format.  One reason for this is that XML can't represent all\n          // string values (or even all unicode code points).\n          // indexedToReadable() should be a no-op and should\n          // thus be harmless anyway (for all current ways anyway)\n          if (val instanceof String) {\n            field.setValue((String)val);\n            val = ft.toObject(field);\n          }\n\n          // Must do the same conversion when sorting by a\n          // String field in Lucene, which returns the terms\n          // data as BytesRef:\n          if (val instanceof BytesRef) {\n            field.setValue(((BytesRef)val).utf8ToChars(spare).toString());\n            val = ft.toObject(field);\n          }\n\n          vals.add(val);\n        }\n\n        sortVals.add(fieldname, vals);\n      }\n\n      rsp.add(\"sort_values\", sortVals);\n    }\n  }\n\n","sourceOld":"  protected void doFieldSortValues(ResponseBuilder rb, SolrIndexSearcher searcher) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    // The query cache doesn't currently store sort field values, and SolrIndexSearcher doesn't\n    // currently have an option to return sort field values.  Because of this, we\n    // take the documents given and re-derive the sort values.\n    boolean fsv = req.getParams().getBool(ResponseBuilder.FIELD_SORT_VALUES,false);\n    if(fsv){\n      Sort sort = searcher.weightSort(rb.getSortSpec().getSort());\n      SortField[] sortFields = sort==null ? new SortField[]{SortField.FIELD_SCORE} : sort.getSort();\n      NamedList sortVals = new NamedList(); // order is important for the sort fields\n      Field field = new Field(\"dummy\", \"\", Field.Store.YES, Field.Index.NO); // a dummy Field\n      ReaderContext topReaderContext = searcher.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      AtomicReaderContext currentLeaf = null;\n      if (leaves.length==1) {\n        // if there is a single segment, use that subReader and avoid looking up each time\n        currentLeaf = leaves[0];\n        leaves=null;\n      }\n\n      for (SortField sortField: sortFields) {\n        int type = sortField.getType();\n        if (type==SortField.SCORE || type==SortField.DOC) continue;\n\n        FieldComparator comparator = null;\n        FieldComparator comparators[] = (leaves==null) ? null : new FieldComparator[leaves.length];\n\n        String fieldname = sortField.getField();\n        FieldType ft = fieldname==null ? null : req.getSchema().getFieldTypeNoEx(fieldname);\n\n        DocList docList = rb.getResults().docList;\n        ArrayList<Object> vals = new ArrayList<Object>(docList.size());\n        DocIterator it = rb.getResults().docList.iterator();\n\n        int idx = 0;\n\n        while(it.hasNext()) {\n          int doc = it.nextDoc();\n          if (leaves != null) {\n            idx = ReaderUtil.subIndex(doc, leaves);\n            currentLeaf = leaves[idx];\n            comparator = comparators[idx];\n          }\n\n          if (comparator == null) {\n            comparator = sortField.getComparator(1,0);\n            comparator = comparator.setNextReader(currentLeaf);\n            if (comparators != null)\n              comparators[idx] = comparator;\n          }\n\n          doc -= currentLeaf.docBase;  // adjust for what segment this is in\n          comparator.copy(0, doc);\n          Object val = comparator.value(0);\n\n          // Sortable float, double, int, long types all just use a string\n          // comparator. For these, we need to put the type into a readable\n          // format.  One reason for this is that XML can't represent all\n          // string values (or even all unicode code points).\n          // indexedToReadable() should be a no-op and should\n          // thus be harmless anyway (for all current ways anyway)\n          if (val instanceof String) {\n            field.setValue((String)val);\n            val = ft.toObject(field);\n          }\n\n          // Must do the same conversion when sorting by a\n          // String field in Lucene, which returns the terms\n          // data as BytesRef:\n          if (val instanceof BytesRef) {\n            field.setValue(((BytesRef)val).utf8ToString());\n            val = ft.toObject(field);\n          }\n\n          vals.add(val);\n        }\n\n        sortVals.add(fieldname, vals);\n      }\n\n      rsp.add(\"sort_values\", sortVals);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryComponent#doFieldSortValues(ResponseBuilder,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryComponent#doFieldSortValues(ResponseBuilder,SolrIndexSearcher).mjava","sourceNew":"  protected void doFieldSortValues(ResponseBuilder rb, SolrIndexSearcher searcher) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    final CharsRef spare = new CharsRef();\n    // The query cache doesn't currently store sort field values, and SolrIndexSearcher doesn't\n    // currently have an option to return sort field values.  Because of this, we\n    // take the documents given and re-derive the sort values.\n    boolean fsv = req.getParams().getBool(ResponseBuilder.FIELD_SORT_VALUES,false);\n    if(fsv){\n      Sort sort = searcher.weightSort(rb.getSortSpec().getSort());\n      SortField[] sortFields = sort==null ? new SortField[]{SortField.FIELD_SCORE} : sort.getSort();\n      NamedList sortVals = new NamedList(); // order is important for the sort fields\n      Field field = new Field(\"dummy\", \"\", Field.Store.YES, Field.Index.NO); // a dummy Field\n      ReaderContext topReaderContext = searcher.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      AtomicReaderContext currentLeaf = null;\n      if (leaves.length==1) {\n        // if there is a single segment, use that subReader and avoid looking up each time\n        currentLeaf = leaves[0];\n        leaves=null;\n      }\n\n      for (SortField sortField: sortFields) {\n        int type = sortField.getType();\n        if (type==SortField.SCORE || type==SortField.DOC) continue;\n\n        FieldComparator comparator = null;\n        FieldComparator comparators[] = (leaves==null) ? null : new FieldComparator[leaves.length];\n\n        String fieldname = sortField.getField();\n        FieldType ft = fieldname==null ? null : req.getSchema().getFieldTypeNoEx(fieldname);\n\n        DocList docList = rb.getResults().docList;\n        ArrayList<Object> vals = new ArrayList<Object>(docList.size());\n        DocIterator it = rb.getResults().docList.iterator();\n\n        int idx = 0;\n\n        while(it.hasNext()) {\n          int doc = it.nextDoc();\n          if (leaves != null) {\n            idx = ReaderUtil.subIndex(doc, leaves);\n            currentLeaf = leaves[idx];\n            comparator = comparators[idx];\n          }\n\n          if (comparator == null) {\n            comparator = sortField.getComparator(1,0);\n            comparator = comparator.setNextReader(currentLeaf);\n            if (comparators != null)\n              comparators[idx] = comparator;\n          }\n\n          doc -= currentLeaf.docBase;  // adjust for what segment this is in\n          comparator.copy(0, doc);\n          Object val = comparator.value(0);\n\n          // Sortable float, double, int, long types all just use a string\n          // comparator. For these, we need to put the type into a readable\n          // format.  One reason for this is that XML can't represent all\n          // string values (or even all unicode code points).\n          // indexedToReadable() should be a no-op and should\n          // thus be harmless anyway (for all current ways anyway)\n          if (val instanceof String) {\n            field.setValue((String)val);\n            val = ft.toObject(field);\n          }\n\n          // Must do the same conversion when sorting by a\n          // String field in Lucene, which returns the terms\n          // data as BytesRef:\n          if (val instanceof BytesRef) {\n            field.setValue(((BytesRef)val).utf8ToChars(spare).toString());\n            val = ft.toObject(field);\n          }\n\n          vals.add(val);\n        }\n\n        sortVals.add(fieldname, vals);\n      }\n\n      rsp.add(\"sort_values\", sortVals);\n    }\n  }\n\n","sourceOld":"  protected void doFieldSortValues(ResponseBuilder rb, SolrIndexSearcher searcher) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    // The query cache doesn't currently store sort field values, and SolrIndexSearcher doesn't\n    // currently have an option to return sort field values.  Because of this, we\n    // take the documents given and re-derive the sort values.\n    boolean fsv = req.getParams().getBool(ResponseBuilder.FIELD_SORT_VALUES,false);\n    if(fsv){\n      Sort sort = searcher.weightSort(rb.getSortSpec().getSort());\n      SortField[] sortFields = sort==null ? new SortField[]{SortField.FIELD_SCORE} : sort.getSort();\n      NamedList sortVals = new NamedList(); // order is important for the sort fields\n      Field field = new Field(\"dummy\", \"\", Field.Store.YES, Field.Index.NO); // a dummy Field\n      ReaderContext topReaderContext = searcher.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      AtomicReaderContext currentLeaf = null;\n      if (leaves.length==1) {\n        // if there is a single segment, use that subReader and avoid looking up each time\n        currentLeaf = leaves[0];\n        leaves=null;\n      }\n\n      for (SortField sortField: sortFields) {\n        int type = sortField.getType();\n        if (type==SortField.SCORE || type==SortField.DOC) continue;\n\n        FieldComparator comparator = null;\n        FieldComparator comparators[] = (leaves==null) ? null : new FieldComparator[leaves.length];\n\n        String fieldname = sortField.getField();\n        FieldType ft = fieldname==null ? null : req.getSchema().getFieldTypeNoEx(fieldname);\n\n        DocList docList = rb.getResults().docList;\n        ArrayList<Object> vals = new ArrayList<Object>(docList.size());\n        DocIterator it = rb.getResults().docList.iterator();\n\n        int idx = 0;\n\n        while(it.hasNext()) {\n          int doc = it.nextDoc();\n          if (leaves != null) {\n            idx = ReaderUtil.subIndex(doc, leaves);\n            currentLeaf = leaves[idx];\n            comparator = comparators[idx];\n          }\n\n          if (comparator == null) {\n            comparator = sortField.getComparator(1,0);\n            comparator = comparator.setNextReader(currentLeaf);\n            if (comparators != null)\n              comparators[idx] = comparator;\n          }\n\n          doc -= currentLeaf.docBase;  // adjust for what segment this is in\n          comparator.copy(0, doc);\n          Object val = comparator.value(0);\n\n          // Sortable float, double, int, long types all just use a string\n          // comparator. For these, we need to put the type into a readable\n          // format.  One reason for this is that XML can't represent all\n          // string values (or even all unicode code points).\n          // indexedToReadable() should be a no-op and should\n          // thus be harmless anyway (for all current ways anyway)\n          if (val instanceof String) {\n            field.setValue((String)val);\n            val = ft.toObject(field);\n          }\n\n          // Must do the same conversion when sorting by a\n          // String field in Lucene, which returns the terms\n          // data as BytesRef:\n          if (val instanceof BytesRef) {\n            field.setValue(((BytesRef)val).utf8ToString());\n            val = ft.toObject(field);\n          }\n\n          vals.add(val);\n        }\n\n        sortVals.add(fieldname, vals);\n      }\n\n      rsp.add(\"sort_values\", sortVals);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryComponent#doFieldSortValues(ResponseBuilder,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryComponent#doFieldSortValues(ResponseBuilder,SolrIndexSearcher).mjava","sourceNew":"  protected void doFieldSortValues(ResponseBuilder rb, SolrIndexSearcher searcher) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    final CharsRef spare = new CharsRef();\n    // The query cache doesn't currently store sort field values, and SolrIndexSearcher doesn't\n    // currently have an option to return sort field values.  Because of this, we\n    // take the documents given and re-derive the sort values.\n    boolean fsv = req.getParams().getBool(ResponseBuilder.FIELD_SORT_VALUES,false);\n    if(fsv){\n      Sort sort = searcher.weightSort(rb.getSortSpec().getSort());\n      SortField[] sortFields = sort==null ? new SortField[]{SortField.FIELD_SCORE} : sort.getSort();\n      NamedList sortVals = new NamedList(); // order is important for the sort fields\n      Field field = new Field(\"dummy\", \"\", Field.Store.YES, Field.Index.NO); // a dummy Field\n      ReaderContext topReaderContext = searcher.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      AtomicReaderContext currentLeaf = null;\n      if (leaves.length==1) {\n        // if there is a single segment, use that subReader and avoid looking up each time\n        currentLeaf = leaves[0];\n        leaves=null;\n      }\n\n      for (SortField sortField: sortFields) {\n        int type = sortField.getType();\n        if (type==SortField.SCORE || type==SortField.DOC) continue;\n\n        FieldComparator comparator = null;\n        FieldComparator comparators[] = (leaves==null) ? null : new FieldComparator[leaves.length];\n\n        String fieldname = sortField.getField();\n        FieldType ft = fieldname==null ? null : req.getSchema().getFieldTypeNoEx(fieldname);\n\n        DocList docList = rb.getResults().docList;\n        ArrayList<Object> vals = new ArrayList<Object>(docList.size());\n        DocIterator it = rb.getResults().docList.iterator();\n\n        int idx = 0;\n\n        while(it.hasNext()) {\n          int doc = it.nextDoc();\n          if (leaves != null) {\n            idx = ReaderUtil.subIndex(doc, leaves);\n            currentLeaf = leaves[idx];\n            comparator = comparators[idx];\n          }\n\n          if (comparator == null) {\n            comparator = sortField.getComparator(1,0);\n            comparator = comparator.setNextReader(currentLeaf);\n            if (comparators != null)\n              comparators[idx] = comparator;\n          }\n\n          doc -= currentLeaf.docBase;  // adjust for what segment this is in\n          comparator.copy(0, doc);\n          Object val = comparator.value(0);\n\n          // Sortable float, double, int, long types all just use a string\n          // comparator. For these, we need to put the type into a readable\n          // format.  One reason for this is that XML can't represent all\n          // string values (or even all unicode code points).\n          // indexedToReadable() should be a no-op and should\n          // thus be harmless anyway (for all current ways anyway)\n          if (val instanceof String) {\n            field.setValue((String)val);\n            val = ft.toObject(field);\n          }\n\n          // Must do the same conversion when sorting by a\n          // String field in Lucene, which returns the terms\n          // data as BytesRef:\n          if (val instanceof BytesRef) {\n            field.setValue(((BytesRef)val).utf8ToChars(spare).toString());\n            val = ft.toObject(field);\n          }\n\n          vals.add(val);\n        }\n\n        sortVals.add(fieldname, vals);\n      }\n\n      rsp.add(\"sort_values\", sortVals);\n    }\n  }\n\n","sourceOld":"  protected void doFieldSortValues(ResponseBuilder rb, SolrIndexSearcher searcher) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    // The query cache doesn't currently store sort field values, and SolrIndexSearcher doesn't\n    // currently have an option to return sort field values.  Because of this, we\n    // take the documents given and re-derive the sort values.\n    boolean fsv = req.getParams().getBool(ResponseBuilder.FIELD_SORT_VALUES,false);\n    if(fsv){\n      Sort sort = searcher.weightSort(rb.getSortSpec().getSort());\n      SortField[] sortFields = sort==null ? new SortField[]{SortField.FIELD_SCORE} : sort.getSort();\n      NamedList sortVals = new NamedList(); // order is important for the sort fields\n      Field field = new Field(\"dummy\", \"\", Field.Store.YES, Field.Index.NO); // a dummy Field\n      ReaderContext topReaderContext = searcher.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      AtomicReaderContext currentLeaf = null;\n      if (leaves.length==1) {\n        // if there is a single segment, use that subReader and avoid looking up each time\n        currentLeaf = leaves[0];\n        leaves=null;\n      }\n\n      for (SortField sortField: sortFields) {\n        int type = sortField.getType();\n        if (type==SortField.SCORE || type==SortField.DOC) continue;\n\n        FieldComparator comparator = null;\n        FieldComparator comparators[] = (leaves==null) ? null : new FieldComparator[leaves.length];\n\n        String fieldname = sortField.getField();\n        FieldType ft = fieldname==null ? null : req.getSchema().getFieldTypeNoEx(fieldname);\n\n        DocList docList = rb.getResults().docList;\n        ArrayList<Object> vals = new ArrayList<Object>(docList.size());\n        DocIterator it = rb.getResults().docList.iterator();\n\n        int idx = 0;\n\n        while(it.hasNext()) {\n          int doc = it.nextDoc();\n          if (leaves != null) {\n            idx = ReaderUtil.subIndex(doc, leaves);\n            currentLeaf = leaves[idx];\n            comparator = comparators[idx];\n          }\n\n          if (comparator == null) {\n            comparator = sortField.getComparator(1,0);\n            comparator = comparator.setNextReader(currentLeaf);\n            if (comparators != null)\n              comparators[idx] = comparator;\n          }\n\n          doc -= currentLeaf.docBase;  // adjust for what segment this is in\n          comparator.copy(0, doc);\n          Object val = comparator.value(0);\n\n          // Sortable float, double, int, long types all just use a string\n          // comparator. For these, we need to put the type into a readable\n          // format.  One reason for this is that XML can't represent all\n          // string values (or even all unicode code points).\n          // indexedToReadable() should be a no-op and should\n          // thus be harmless anyway (for all current ways anyway)\n          if (val instanceof String) {\n            field.setValue((String)val);\n            val = ft.toObject(field);\n          }\n\n          // Must do the same conversion when sorting by a\n          // String field in Lucene, which returns the terms\n          // data as BytesRef:\n          if (val instanceof BytesRef) {\n            field.setValue(((BytesRef)val).utf8ToString());\n            val = ft.toObject(field);\n          }\n\n          vals.add(val);\n        }\n\n        sortVals.add(fieldname, vals);\n      }\n\n      rsp.add(\"sort_values\", sortVals);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"090a0320e4de4a3674376aef96b9701f47564f86","date":1308707325,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryComponent#doFieldSortValues(ResponseBuilder,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryComponent#doFieldSortValues(ResponseBuilder,SolrIndexSearcher).mjava","sourceNew":"  protected void doFieldSortValues(ResponseBuilder rb, SolrIndexSearcher searcher) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    final CharsRef spare = new CharsRef();\n    // The query cache doesn't currently store sort field values, and SolrIndexSearcher doesn't\n    // currently have an option to return sort field values.  Because of this, we\n    // take the documents given and re-derive the sort values.\n    boolean fsv = req.getParams().getBool(ResponseBuilder.FIELD_SORT_VALUES,false);\n    if(fsv){\n      Sort sort = searcher.weightSort(rb.getSortSpec().getSort());\n      SortField[] sortFields = sort==null ? new SortField[]{SortField.FIELD_SCORE} : sort.getSort();\n      NamedList sortVals = new NamedList(); // order is important for the sort fields\n      Field field = new Field(\"dummy\", \"\", Field.Store.YES, Field.Index.NO); // a dummy Field\n      ReaderContext topReaderContext = searcher.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      AtomicReaderContext currentLeaf = null;\n      if (leaves.length==1) {\n        // if there is a single segment, use that subReader and avoid looking up each time\n        currentLeaf = leaves[0];\n        leaves=null;\n      }\n\n      for (SortField sortField: sortFields) {\n        SortField.Type type = sortField.getType();\n        if (type==SortField.Type.SCORE || type==SortField.Type.DOC) continue;\n\n        FieldComparator comparator = null;\n        FieldComparator comparators[] = (leaves==null) ? null : new FieldComparator[leaves.length];\n\n        String fieldname = sortField.getField();\n        FieldType ft = fieldname==null ? null : req.getSchema().getFieldTypeNoEx(fieldname);\n\n        DocList docList = rb.getResults().docList;\n        ArrayList<Object> vals = new ArrayList<Object>(docList.size());\n        DocIterator it = rb.getResults().docList.iterator();\n\n        int idx = 0;\n\n        while(it.hasNext()) {\n          int doc = it.nextDoc();\n          if (leaves != null) {\n            idx = ReaderUtil.subIndex(doc, leaves);\n            currentLeaf = leaves[idx];\n            comparator = comparators[idx];\n          }\n\n          if (comparator == null) {\n            comparator = sortField.getComparator(1,0);\n            comparator = comparator.setNextReader(currentLeaf);\n            if (comparators != null)\n              comparators[idx] = comparator;\n          }\n\n          doc -= currentLeaf.docBase;  // adjust for what segment this is in\n          comparator.copy(0, doc);\n          Object val = comparator.value(0);\n\n          // Sortable float, double, int, long types all just use a string\n          // comparator. For these, we need to put the type into a readable\n          // format.  One reason for this is that XML can't represent all\n          // string values (or even all unicode code points).\n          // indexedToReadable() should be a no-op and should\n          // thus be harmless anyway (for all current ways anyway)\n          if (val instanceof String) {\n            field.setValue((String)val);\n            val = ft.toObject(field);\n          }\n\n          // Must do the same conversion when sorting by a\n          // String field in Lucene, which returns the terms\n          // data as BytesRef:\n          if (val instanceof BytesRef) {\n            field.setValue(((BytesRef)val).utf8ToChars(spare).toString());\n            val = ft.toObject(field);\n          }\n\n          vals.add(val);\n        }\n\n        sortVals.add(fieldname, vals);\n      }\n\n      rsp.add(\"sort_values\", sortVals);\n    }\n  }\n\n","sourceOld":"  protected void doFieldSortValues(ResponseBuilder rb, SolrIndexSearcher searcher) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    final CharsRef spare = new CharsRef();\n    // The query cache doesn't currently store sort field values, and SolrIndexSearcher doesn't\n    // currently have an option to return sort field values.  Because of this, we\n    // take the documents given and re-derive the sort values.\n    boolean fsv = req.getParams().getBool(ResponseBuilder.FIELD_SORT_VALUES,false);\n    if(fsv){\n      Sort sort = searcher.weightSort(rb.getSortSpec().getSort());\n      SortField[] sortFields = sort==null ? new SortField[]{SortField.FIELD_SCORE} : sort.getSort();\n      NamedList sortVals = new NamedList(); // order is important for the sort fields\n      Field field = new Field(\"dummy\", \"\", Field.Store.YES, Field.Index.NO); // a dummy Field\n      ReaderContext topReaderContext = searcher.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      AtomicReaderContext currentLeaf = null;\n      if (leaves.length==1) {\n        // if there is a single segment, use that subReader and avoid looking up each time\n        currentLeaf = leaves[0];\n        leaves=null;\n      }\n\n      for (SortField sortField: sortFields) {\n        int type = sortField.getType();\n        if (type==SortField.SCORE || type==SortField.DOC) continue;\n\n        FieldComparator comparator = null;\n        FieldComparator comparators[] = (leaves==null) ? null : new FieldComparator[leaves.length];\n\n        String fieldname = sortField.getField();\n        FieldType ft = fieldname==null ? null : req.getSchema().getFieldTypeNoEx(fieldname);\n\n        DocList docList = rb.getResults().docList;\n        ArrayList<Object> vals = new ArrayList<Object>(docList.size());\n        DocIterator it = rb.getResults().docList.iterator();\n\n        int idx = 0;\n\n        while(it.hasNext()) {\n          int doc = it.nextDoc();\n          if (leaves != null) {\n            idx = ReaderUtil.subIndex(doc, leaves);\n            currentLeaf = leaves[idx];\n            comparator = comparators[idx];\n          }\n\n          if (comparator == null) {\n            comparator = sortField.getComparator(1,0);\n            comparator = comparator.setNextReader(currentLeaf);\n            if (comparators != null)\n              comparators[idx] = comparator;\n          }\n\n          doc -= currentLeaf.docBase;  // adjust for what segment this is in\n          comparator.copy(0, doc);\n          Object val = comparator.value(0);\n\n          // Sortable float, double, int, long types all just use a string\n          // comparator. For these, we need to put the type into a readable\n          // format.  One reason for this is that XML can't represent all\n          // string values (or even all unicode code points).\n          // indexedToReadable() should be a no-op and should\n          // thus be harmless anyway (for all current ways anyway)\n          if (val instanceof String) {\n            field.setValue((String)val);\n            val = ft.toObject(field);\n          }\n\n          // Must do the same conversion when sorting by a\n          // String field in Lucene, which returns the terms\n          // data as BytesRef:\n          if (val instanceof BytesRef) {\n            field.setValue(((BytesRef)val).utf8ToChars(spare).toString());\n            val = ft.toObject(field);\n          }\n\n          vals.add(val);\n        }\n\n        sortVals.add(fieldname, vals);\n      }\n\n      rsp.add(\"sort_values\", sortVals);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryComponent#doFieldSortValues(ResponseBuilder,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryComponent#doFieldSortValues(ResponseBuilder,SolrIndexSearcher).mjava","sourceNew":"  protected void doFieldSortValues(ResponseBuilder rb, SolrIndexSearcher searcher) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    final CharsRef spare = new CharsRef();\n    // The query cache doesn't currently store sort field values, and SolrIndexSearcher doesn't\n    // currently have an option to return sort field values.  Because of this, we\n    // take the documents given and re-derive the sort values.\n    boolean fsv = req.getParams().getBool(ResponseBuilder.FIELD_SORT_VALUES,false);\n    if(fsv){\n      Sort sort = searcher.weightSort(rb.getSortSpec().getSort());\n      SortField[] sortFields = sort==null ? new SortField[]{SortField.FIELD_SCORE} : sort.getSort();\n      NamedList sortVals = new NamedList(); // order is important for the sort fields\n      Field field = new Field(\"dummy\", \"\", Field.Store.YES, Field.Index.NO); // a dummy Field\n      ReaderContext topReaderContext = searcher.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      AtomicReaderContext currentLeaf = null;\n      if (leaves.length==1) {\n        // if there is a single segment, use that subReader and avoid looking up each time\n        currentLeaf = leaves[0];\n        leaves=null;\n      }\n\n      for (SortField sortField: sortFields) {\n        SortField.Type type = sortField.getType();\n        if (type==SortField.Type.SCORE || type==SortField.Type.DOC) continue;\n\n        FieldComparator comparator = null;\n        FieldComparator comparators[] = (leaves==null) ? null : new FieldComparator[leaves.length];\n\n        String fieldname = sortField.getField();\n        FieldType ft = fieldname==null ? null : req.getSchema().getFieldTypeNoEx(fieldname);\n\n        DocList docList = rb.getResults().docList;\n        ArrayList<Object> vals = new ArrayList<Object>(docList.size());\n        DocIterator it = rb.getResults().docList.iterator();\n\n        int idx = 0;\n\n        while(it.hasNext()) {\n          int doc = it.nextDoc();\n          if (leaves != null) {\n            idx = ReaderUtil.subIndex(doc, leaves);\n            currentLeaf = leaves[idx];\n            comparator = comparators[idx];\n          }\n\n          if (comparator == null) {\n            comparator = sortField.getComparator(1,0);\n            comparator = comparator.setNextReader(currentLeaf);\n            if (comparators != null)\n              comparators[idx] = comparator;\n          }\n\n          doc -= currentLeaf.docBase;  // adjust for what segment this is in\n          comparator.copy(0, doc);\n          Object val = comparator.value(0);\n\n          // Sortable float, double, int, long types all just use a string\n          // comparator. For these, we need to put the type into a readable\n          // format.  One reason for this is that XML can't represent all\n          // string values (or even all unicode code points).\n          // indexedToReadable() should be a no-op and should\n          // thus be harmless anyway (for all current ways anyway)\n          if (val instanceof String) {\n            field.setValue((String)val);\n            val = ft.toObject(field);\n          }\n\n          // Must do the same conversion when sorting by a\n          // String field in Lucene, which returns the terms\n          // data as BytesRef:\n          if (val instanceof BytesRef) {\n            field.setValue(((BytesRef)val).utf8ToChars(spare).toString());\n            val = ft.toObject(field);\n          }\n\n          vals.add(val);\n        }\n\n        sortVals.add(fieldname, vals);\n      }\n\n      rsp.add(\"sort_values\", sortVals);\n    }\n  }\n\n","sourceOld":"  protected void doFieldSortValues(ResponseBuilder rb, SolrIndexSearcher searcher) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    final CharsRef spare = new CharsRef();\n    // The query cache doesn't currently store sort field values, and SolrIndexSearcher doesn't\n    // currently have an option to return sort field values.  Because of this, we\n    // take the documents given and re-derive the sort values.\n    boolean fsv = req.getParams().getBool(ResponseBuilder.FIELD_SORT_VALUES,false);\n    if(fsv){\n      Sort sort = searcher.weightSort(rb.getSortSpec().getSort());\n      SortField[] sortFields = sort==null ? new SortField[]{SortField.FIELD_SCORE} : sort.getSort();\n      NamedList sortVals = new NamedList(); // order is important for the sort fields\n      Field field = new Field(\"dummy\", \"\", Field.Store.YES, Field.Index.NO); // a dummy Field\n      ReaderContext topReaderContext = searcher.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      AtomicReaderContext currentLeaf = null;\n      if (leaves.length==1) {\n        // if there is a single segment, use that subReader and avoid looking up each time\n        currentLeaf = leaves[0];\n        leaves=null;\n      }\n\n      for (SortField sortField: sortFields) {\n        int type = sortField.getType();\n        if (type==SortField.SCORE || type==SortField.DOC) continue;\n\n        FieldComparator comparator = null;\n        FieldComparator comparators[] = (leaves==null) ? null : new FieldComparator[leaves.length];\n\n        String fieldname = sortField.getField();\n        FieldType ft = fieldname==null ? null : req.getSchema().getFieldTypeNoEx(fieldname);\n\n        DocList docList = rb.getResults().docList;\n        ArrayList<Object> vals = new ArrayList<Object>(docList.size());\n        DocIterator it = rb.getResults().docList.iterator();\n\n        int idx = 0;\n\n        while(it.hasNext()) {\n          int doc = it.nextDoc();\n          if (leaves != null) {\n            idx = ReaderUtil.subIndex(doc, leaves);\n            currentLeaf = leaves[idx];\n            comparator = comparators[idx];\n          }\n\n          if (comparator == null) {\n            comparator = sortField.getComparator(1,0);\n            comparator = comparator.setNextReader(currentLeaf);\n            if (comparators != null)\n              comparators[idx] = comparator;\n          }\n\n          doc -= currentLeaf.docBase;  // adjust for what segment this is in\n          comparator.copy(0, doc);\n          Object val = comparator.value(0);\n\n          // Sortable float, double, int, long types all just use a string\n          // comparator. For these, we need to put the type into a readable\n          // format.  One reason for this is that XML can't represent all\n          // string values (or even all unicode code points).\n          // indexedToReadable() should be a no-op and should\n          // thus be harmless anyway (for all current ways anyway)\n          if (val instanceof String) {\n            field.setValue((String)val);\n            val = ft.toObject(field);\n          }\n\n          // Must do the same conversion when sorting by a\n          // String field in Lucene, which returns the terms\n          // data as BytesRef:\n          if (val instanceof BytesRef) {\n            field.setValue(((BytesRef)val).utf8ToChars(spare).toString());\n            val = ft.toObject(field);\n          }\n\n          vals.add(val);\n        }\n\n        sortVals.add(fieldname, vals);\n      }\n\n      rsp.add(\"sort_values\", sortVals);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryComponent#doFieldSortValues(ResponseBuilder,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryComponent#doFieldSortValues(ResponseBuilder,SolrIndexSearcher).mjava","sourceNew":"  protected void doFieldSortValues(ResponseBuilder rb, SolrIndexSearcher searcher) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    final CharsRef spare = new CharsRef();\n    // The query cache doesn't currently store sort field values, and SolrIndexSearcher doesn't\n    // currently have an option to return sort field values.  Because of this, we\n    // take the documents given and re-derive the sort values.\n    boolean fsv = req.getParams().getBool(ResponseBuilder.FIELD_SORT_VALUES,false);\n    if(fsv){\n      Sort sort = searcher.weightSort(rb.getSortSpec().getSort());\n      SortField[] sortFields = sort==null ? new SortField[]{SortField.FIELD_SCORE} : sort.getSort();\n      NamedList sortVals = new NamedList(); // order is important for the sort fields\n      Field field = new Field(\"dummy\", \"\", Field.Store.YES, Field.Index.NO); // a dummy Field\n      ReaderContext topReaderContext = searcher.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      AtomicReaderContext currentLeaf = null;\n      if (leaves.length==1) {\n        // if there is a single segment, use that subReader and avoid looking up each time\n        currentLeaf = leaves[0];\n        leaves=null;\n      }\n\n      for (SortField sortField: sortFields) {\n        SortField.Type type = sortField.getType();\n        if (type==SortField.Type.SCORE || type==SortField.Type.DOC) continue;\n\n        FieldComparator comparator = null;\n        FieldComparator comparators[] = (leaves==null) ? null : new FieldComparator[leaves.length];\n\n        String fieldname = sortField.getField();\n        FieldType ft = fieldname==null ? null : req.getSchema().getFieldTypeNoEx(fieldname);\n\n        DocList docList = rb.getResults().docList;\n        ArrayList<Object> vals = new ArrayList<Object>(docList.size());\n        DocIterator it = rb.getResults().docList.iterator();\n\n        int idx = 0;\n\n        while(it.hasNext()) {\n          int doc = it.nextDoc();\n          if (leaves != null) {\n            idx = ReaderUtil.subIndex(doc, leaves);\n            currentLeaf = leaves[idx];\n            comparator = comparators[idx];\n          }\n\n          if (comparator == null) {\n            comparator = sortField.getComparator(1,0);\n            comparator = comparator.setNextReader(currentLeaf);\n            if (comparators != null)\n              comparators[idx] = comparator;\n          }\n\n          doc -= currentLeaf.docBase;  // adjust for what segment this is in\n          comparator.copy(0, doc);\n          Object val = comparator.value(0);\n\n          // Sortable float, double, int, long types all just use a string\n          // comparator. For these, we need to put the type into a readable\n          // format.  One reason for this is that XML can't represent all\n          // string values (or even all unicode code points).\n          // indexedToReadable() should be a no-op and should\n          // thus be harmless anyway (for all current ways anyway)\n          if (val instanceof String) {\n            field.setValue((String)val);\n            val = ft.toObject(field);\n          }\n\n          // Must do the same conversion when sorting by a\n          // String field in Lucene, which returns the terms\n          // data as BytesRef:\n          if (val instanceof BytesRef) {\n            field.setValue(((BytesRef)val).utf8ToChars(spare).toString());\n            val = ft.toObject(field);\n          }\n\n          vals.add(val);\n        }\n\n        sortVals.add(fieldname, vals);\n      }\n\n      rsp.add(\"sort_values\", sortVals);\n    }\n  }\n\n","sourceOld":"  protected void doFieldSortValues(ResponseBuilder rb, SolrIndexSearcher searcher) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    final CharsRef spare = new CharsRef();\n    // The query cache doesn't currently store sort field values, and SolrIndexSearcher doesn't\n    // currently have an option to return sort field values.  Because of this, we\n    // take the documents given and re-derive the sort values.\n    boolean fsv = req.getParams().getBool(ResponseBuilder.FIELD_SORT_VALUES,false);\n    if(fsv){\n      Sort sort = searcher.weightSort(rb.getSortSpec().getSort());\n      SortField[] sortFields = sort==null ? new SortField[]{SortField.FIELD_SCORE} : sort.getSort();\n      NamedList sortVals = new NamedList(); // order is important for the sort fields\n      Field field = new Field(\"dummy\", \"\", Field.Store.YES, Field.Index.NO); // a dummy Field\n      ReaderContext topReaderContext = searcher.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      AtomicReaderContext currentLeaf = null;\n      if (leaves.length==1) {\n        // if there is a single segment, use that subReader and avoid looking up each time\n        currentLeaf = leaves[0];\n        leaves=null;\n      }\n\n      for (SortField sortField: sortFields) {\n        int type = sortField.getType();\n        if (type==SortField.SCORE || type==SortField.DOC) continue;\n\n        FieldComparator comparator = null;\n        FieldComparator comparators[] = (leaves==null) ? null : new FieldComparator[leaves.length];\n\n        String fieldname = sortField.getField();\n        FieldType ft = fieldname==null ? null : req.getSchema().getFieldTypeNoEx(fieldname);\n\n        DocList docList = rb.getResults().docList;\n        ArrayList<Object> vals = new ArrayList<Object>(docList.size());\n        DocIterator it = rb.getResults().docList.iterator();\n\n        int idx = 0;\n\n        while(it.hasNext()) {\n          int doc = it.nextDoc();\n          if (leaves != null) {\n            idx = ReaderUtil.subIndex(doc, leaves);\n            currentLeaf = leaves[idx];\n            comparator = comparators[idx];\n          }\n\n          if (comparator == null) {\n            comparator = sortField.getComparator(1,0);\n            comparator = comparator.setNextReader(currentLeaf);\n            if (comparators != null)\n              comparators[idx] = comparator;\n          }\n\n          doc -= currentLeaf.docBase;  // adjust for what segment this is in\n          comparator.copy(0, doc);\n          Object val = comparator.value(0);\n\n          // Sortable float, double, int, long types all just use a string\n          // comparator. For these, we need to put the type into a readable\n          // format.  One reason for this is that XML can't represent all\n          // string values (or even all unicode code points).\n          // indexedToReadable() should be a no-op and should\n          // thus be harmless anyway (for all current ways anyway)\n          if (val instanceof String) {\n            field.setValue((String)val);\n            val = ft.toObject(field);\n          }\n\n          // Must do the same conversion when sorting by a\n          // String field in Lucene, which returns the terms\n          // data as BytesRef:\n          if (val instanceof BytesRef) {\n            field.setValue(((BytesRef)val).utf8ToChars(spare).toString());\n            val = ft.toObject(field);\n          }\n\n          vals.add(val);\n        }\n\n        sortVals.add(fieldname, vals);\n      }\n\n      rsp.add(\"sort_values\", sortVals);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#doFieldSortValues(ResponseBuilder,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryComponent#doFieldSortValues(ResponseBuilder,SolrIndexSearcher).mjava","sourceNew":"  protected void doFieldSortValues(ResponseBuilder rb, SolrIndexSearcher searcher) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    final CharsRef spare = new CharsRef();\n    // The query cache doesn't currently store sort field values, and SolrIndexSearcher doesn't\n    // currently have an option to return sort field values.  Because of this, we\n    // take the documents given and re-derive the sort values.\n    boolean fsv = req.getParams().getBool(ResponseBuilder.FIELD_SORT_VALUES,false);\n    if(fsv){\n      Sort sort = searcher.weightSort(rb.getSortSpec().getSort());\n      SortField[] sortFields = sort==null ? new SortField[]{SortField.FIELD_SCORE} : sort.getSort();\n      NamedList sortVals = new NamedList(); // order is important for the sort fields\n      Field field = new Field(\"dummy\", \"\", Field.Store.YES, Field.Index.NO); // a dummy Field\n      ReaderContext topReaderContext = searcher.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      AtomicReaderContext currentLeaf = null;\n      if (leaves.length==1) {\n        // if there is a single segment, use that subReader and avoid looking up each time\n        currentLeaf = leaves[0];\n        leaves=null;\n      }\n\n      for (SortField sortField: sortFields) {\n        SortField.Type type = sortField.getType();\n        if (type==SortField.Type.SCORE || type==SortField.Type.DOC) continue;\n\n        FieldComparator comparator = null;\n        FieldComparator comparators[] = (leaves==null) ? null : new FieldComparator[leaves.length];\n\n        String fieldname = sortField.getField();\n        FieldType ft = fieldname==null ? null : req.getSchema().getFieldTypeNoEx(fieldname);\n\n        DocList docList = rb.getResults().docList;\n        ArrayList<Object> vals = new ArrayList<Object>(docList.size());\n        DocIterator it = rb.getResults().docList.iterator();\n\n        int idx = 0;\n\n        while(it.hasNext()) {\n          int doc = it.nextDoc();\n          if (leaves != null) {\n            idx = ReaderUtil.subIndex(doc, leaves);\n            currentLeaf = leaves[idx];\n            comparator = comparators[idx];\n          }\n\n          if (comparator == null) {\n            comparator = sortField.getComparator(1,0);\n            comparator = comparator.setNextReader(currentLeaf);\n            if (comparators != null)\n              comparators[idx] = comparator;\n          }\n\n          doc -= currentLeaf.docBase;  // adjust for what segment this is in\n          comparator.copy(0, doc);\n          Object val = comparator.value(0);\n\n          // Sortable float, double, int, long types all just use a string\n          // comparator. For these, we need to put the type into a readable\n          // format.  One reason for this is that XML can't represent all\n          // string values (or even all unicode code points).\n          // indexedToReadable() should be a no-op and should\n          // thus be harmless anyway (for all current ways anyway)\n          if (val instanceof String) {\n            field.setValue((String)val);\n            val = ft.toObject(field);\n          }\n\n          // Must do the same conversion when sorting by a\n          // String field in Lucene, which returns the terms\n          // data as BytesRef:\n          if (val instanceof BytesRef) {\n            field.setValue(((BytesRef)val).utf8ToChars(spare).toString());\n            val = ft.toObject(field);\n          }\n\n          vals.add(val);\n        }\n\n        sortVals.add(fieldname, vals);\n      }\n\n      rsp.add(\"sort_values\", sortVals);\n    }\n  }\n\n","sourceOld":"  protected void doFieldSortValues(ResponseBuilder rb, SolrIndexSearcher searcher) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    final CharsRef spare = new CharsRef();\n    // The query cache doesn't currently store sort field values, and SolrIndexSearcher doesn't\n    // currently have an option to return sort field values.  Because of this, we\n    // take the documents given and re-derive the sort values.\n    boolean fsv = req.getParams().getBool(ResponseBuilder.FIELD_SORT_VALUES,false);\n    if(fsv){\n      Sort sort = searcher.weightSort(rb.getSortSpec().getSort());\n      SortField[] sortFields = sort==null ? new SortField[]{SortField.FIELD_SCORE} : sort.getSort();\n      NamedList sortVals = new NamedList(); // order is important for the sort fields\n      Field field = new Field(\"dummy\", \"\", Field.Store.YES, Field.Index.NO); // a dummy Field\n      ReaderContext topReaderContext = searcher.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      AtomicReaderContext currentLeaf = null;\n      if (leaves.length==1) {\n        // if there is a single segment, use that subReader and avoid looking up each time\n        currentLeaf = leaves[0];\n        leaves=null;\n      }\n\n      for (SortField sortField: sortFields) {\n        SortField.Type type = sortField.getType();\n        if (type==SortField.Type.SCORE || type==SortField.Type.DOC) continue;\n\n        FieldComparator comparator = null;\n        FieldComparator comparators[] = (leaves==null) ? null : new FieldComparator[leaves.length];\n\n        String fieldname = sortField.getField();\n        FieldType ft = fieldname==null ? null : req.getSchema().getFieldTypeNoEx(fieldname);\n\n        DocList docList = rb.getResults().docList;\n        ArrayList<Object> vals = new ArrayList<Object>(docList.size());\n        DocIterator it = rb.getResults().docList.iterator();\n\n        int idx = 0;\n\n        while(it.hasNext()) {\n          int doc = it.nextDoc();\n          if (leaves != null) {\n            idx = ReaderUtil.subIndex(doc, leaves);\n            currentLeaf = leaves[idx];\n            comparator = comparators[idx];\n          }\n\n          if (comparator == null) {\n            comparator = sortField.getComparator(1,0);\n            comparator = comparator.setNextReader(currentLeaf);\n            if (comparators != null)\n              comparators[idx] = comparator;\n          }\n\n          doc -= currentLeaf.docBase;  // adjust for what segment this is in\n          comparator.copy(0, doc);\n          Object val = comparator.value(0);\n\n          // Sortable float, double, int, long types all just use a string\n          // comparator. For these, we need to put the type into a readable\n          // format.  One reason for this is that XML can't represent all\n          // string values (or even all unicode code points).\n          // indexedToReadable() should be a no-op and should\n          // thus be harmless anyway (for all current ways anyway)\n          if (val instanceof String) {\n            field.setValue((String)val);\n            val = ft.toObject(field);\n          }\n\n          // Must do the same conversion when sorting by a\n          // String field in Lucene, which returns the terms\n          // data as BytesRef:\n          if (val instanceof BytesRef) {\n            field.setValue(((BytesRef)val).utf8ToChars(spare).toString());\n            val = ft.toObject(field);\n          }\n\n          vals.add(val);\n        }\n\n        sortVals.add(fieldname, vals);\n      }\n\n      rsp.add(\"sort_values\", sortVals);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#doFieldSortValues(ResponseBuilder,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryComponent#doFieldSortValues(ResponseBuilder,SolrIndexSearcher).mjava","sourceNew":"  protected void doFieldSortValues(ResponseBuilder rb, SolrIndexSearcher searcher) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    final CharsRef spare = new CharsRef();\n    // The query cache doesn't currently store sort field values, and SolrIndexSearcher doesn't\n    // currently have an option to return sort field values.  Because of this, we\n    // take the documents given and re-derive the sort values.\n    boolean fsv = req.getParams().getBool(ResponseBuilder.FIELD_SORT_VALUES,false);\n    if(fsv){\n      Sort sort = searcher.weightSort(rb.getSortSpec().getSort());\n      SortField[] sortFields = sort==null ? new SortField[]{SortField.FIELD_SCORE} : sort.getSort();\n      NamedList sortVals = new NamedList(); // order is important for the sort fields\n      Field field = new Field(\"dummy\", \"\", Field.Store.YES, Field.Index.NO); // a dummy Field\n      ReaderContext topReaderContext = searcher.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      AtomicReaderContext currentLeaf = null;\n      if (leaves.length==1) {\n        // if there is a single segment, use that subReader and avoid looking up each time\n        currentLeaf = leaves[0];\n        leaves=null;\n      }\n\n      for (SortField sortField: sortFields) {\n        SortField.Type type = sortField.getType();\n        if (type==SortField.Type.SCORE || type==SortField.Type.DOC) continue;\n\n        FieldComparator comparator = null;\n        FieldComparator comparators[] = (leaves==null) ? null : new FieldComparator[leaves.length];\n\n        String fieldname = sortField.getField();\n        FieldType ft = fieldname==null ? null : req.getSchema().getFieldTypeNoEx(fieldname);\n\n        DocList docList = rb.getResults().docList;\n        ArrayList<Object> vals = new ArrayList<Object>(docList.size());\n        DocIterator it = rb.getResults().docList.iterator();\n\n        int idx = 0;\n\n        while(it.hasNext()) {\n          int doc = it.nextDoc();\n          if (leaves != null) {\n            idx = ReaderUtil.subIndex(doc, leaves);\n            currentLeaf = leaves[idx];\n            comparator = comparators[idx];\n          }\n\n          if (comparator == null) {\n            comparator = sortField.getComparator(1,0);\n            comparator = comparator.setNextReader(currentLeaf);\n            if (comparators != null)\n              comparators[idx] = comparator;\n          }\n\n          doc -= currentLeaf.docBase;  // adjust for what segment this is in\n          comparator.copy(0, doc);\n          Object val = comparator.value(0);\n\n          // Sortable float, double, int, long types all just use a string\n          // comparator. For these, we need to put the type into a readable\n          // format.  One reason for this is that XML can't represent all\n          // string values (or even all unicode code points).\n          // indexedToReadable() should be a no-op and should\n          // thus be harmless anyway (for all current ways anyway)\n          if (val instanceof String) {\n            field.setValue((String)val);\n            val = ft.toObject(field);\n          }\n\n          // Must do the same conversion when sorting by a\n          // String field in Lucene, which returns the terms\n          // data as BytesRef:\n          if (val instanceof BytesRef) {\n            field.setValue(((BytesRef)val).utf8ToChars(spare).toString());\n            val = ft.toObject(field);\n          }\n\n          vals.add(val);\n        }\n\n        sortVals.add(fieldname, vals);\n      }\n\n      rsp.add(\"sort_values\", sortVals);\n    }\n  }\n\n","sourceOld":"  protected void doFieldSortValues(ResponseBuilder rb, SolrIndexSearcher searcher) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    final CharsRef spare = new CharsRef();\n    // The query cache doesn't currently store sort field values, and SolrIndexSearcher doesn't\n    // currently have an option to return sort field values.  Because of this, we\n    // take the documents given and re-derive the sort values.\n    boolean fsv = req.getParams().getBool(ResponseBuilder.FIELD_SORT_VALUES,false);\n    if(fsv){\n      Sort sort = searcher.weightSort(rb.getSortSpec().getSort());\n      SortField[] sortFields = sort==null ? new SortField[]{SortField.FIELD_SCORE} : sort.getSort();\n      NamedList sortVals = new NamedList(); // order is important for the sort fields\n      Field field = new Field(\"dummy\", \"\", Field.Store.YES, Field.Index.NO); // a dummy Field\n      ReaderContext topReaderContext = searcher.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      AtomicReaderContext currentLeaf = null;\n      if (leaves.length==1) {\n        // if there is a single segment, use that subReader and avoid looking up each time\n        currentLeaf = leaves[0];\n        leaves=null;\n      }\n\n      for (SortField sortField: sortFields) {\n        SortField.Type type = sortField.getType();\n        if (type==SortField.Type.SCORE || type==SortField.Type.DOC) continue;\n\n        FieldComparator comparator = null;\n        FieldComparator comparators[] = (leaves==null) ? null : new FieldComparator[leaves.length];\n\n        String fieldname = sortField.getField();\n        FieldType ft = fieldname==null ? null : req.getSchema().getFieldTypeNoEx(fieldname);\n\n        DocList docList = rb.getResults().docList;\n        ArrayList<Object> vals = new ArrayList<Object>(docList.size());\n        DocIterator it = rb.getResults().docList.iterator();\n\n        int idx = 0;\n\n        while(it.hasNext()) {\n          int doc = it.nextDoc();\n          if (leaves != null) {\n            idx = ReaderUtil.subIndex(doc, leaves);\n            currentLeaf = leaves[idx];\n            comparator = comparators[idx];\n          }\n\n          if (comparator == null) {\n            comparator = sortField.getComparator(1,0);\n            comparator = comparator.setNextReader(currentLeaf);\n            if (comparators != null)\n              comparators[idx] = comparator;\n          }\n\n          doc -= currentLeaf.docBase;  // adjust for what segment this is in\n          comparator.copy(0, doc);\n          Object val = comparator.value(0);\n\n          // Sortable float, double, int, long types all just use a string\n          // comparator. For these, we need to put the type into a readable\n          // format.  One reason for this is that XML can't represent all\n          // string values (or even all unicode code points).\n          // indexedToReadable() should be a no-op and should\n          // thus be harmless anyway (for all current ways anyway)\n          if (val instanceof String) {\n            field.setValue((String)val);\n            val = ft.toObject(field);\n          }\n\n          // Must do the same conversion when sorting by a\n          // String field in Lucene, which returns the terms\n          // data as BytesRef:\n          if (val instanceof BytesRef) {\n            field.setValue(((BytesRef)val).utf8ToChars(spare).toString());\n            val = ft.toObject(field);\n          }\n\n          vals.add(val);\n        }\n\n        sortVals.add(fieldname, vals);\n      }\n\n      rsp.add(\"sort_values\", sortVals);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#doFieldSortValues(ResponseBuilder,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryComponent#doFieldSortValues(ResponseBuilder,SolrIndexSearcher).mjava","sourceNew":"  protected void doFieldSortValues(ResponseBuilder rb, SolrIndexSearcher searcher) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    final CharsRef spare = new CharsRef();\n    // The query cache doesn't currently store sort field values, and SolrIndexSearcher doesn't\n    // currently have an option to return sort field values.  Because of this, we\n    // take the documents given and re-derive the sort values.\n    boolean fsv = req.getParams().getBool(ResponseBuilder.FIELD_SORT_VALUES,false);\n    if(fsv){\n      Sort sort = searcher.weightSort(rb.getSortSpec().getSort());\n      SortField[] sortFields = sort==null ? new SortField[]{SortField.FIELD_SCORE} : sort.getSort();\n      NamedList sortVals = new NamedList(); // order is important for the sort fields\n      Field field = new Field(\"dummy\", \"\", Field.Store.YES, Field.Index.NO); // a dummy Field\n      ReaderContext topReaderContext = searcher.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      AtomicReaderContext currentLeaf = null;\n      if (leaves.length==1) {\n        // if there is a single segment, use that subReader and avoid looking up each time\n        currentLeaf = leaves[0];\n        leaves=null;\n      }\n\n      for (SortField sortField: sortFields) {\n        SortField.Type type = sortField.getType();\n        if (type==SortField.Type.SCORE || type==SortField.Type.DOC) continue;\n\n        FieldComparator comparator = null;\n        FieldComparator comparators[] = (leaves==null) ? null : new FieldComparator[leaves.length];\n\n        String fieldname = sortField.getField();\n        FieldType ft = fieldname==null ? null : req.getSchema().getFieldTypeNoEx(fieldname);\n\n        DocList docList = rb.getResults().docList;\n        ArrayList<Object> vals = new ArrayList<Object>(docList.size());\n        DocIterator it = rb.getResults().docList.iterator();\n\n        int idx = 0;\n\n        while(it.hasNext()) {\n          int doc = it.nextDoc();\n          if (leaves != null) {\n            idx = ReaderUtil.subIndex(doc, leaves);\n            currentLeaf = leaves[idx];\n            comparator = comparators[idx];\n          }\n\n          if (comparator == null) {\n            comparator = sortField.getComparator(1,0);\n            comparator = comparator.setNextReader(currentLeaf);\n            if (comparators != null)\n              comparators[idx] = comparator;\n          }\n\n          doc -= currentLeaf.docBase;  // adjust for what segment this is in\n          comparator.copy(0, doc);\n          Object val = comparator.value(0);\n\n          // Sortable float, double, int, long types all just use a string\n          // comparator. For these, we need to put the type into a readable\n          // format.  One reason for this is that XML can't represent all\n          // string values (or even all unicode code points).\n          // indexedToReadable() should be a no-op and should\n          // thus be harmless anyway (for all current ways anyway)\n          if (val instanceof String) {\n            field.setValue((String)val);\n            val = ft.toObject(field);\n          }\n\n          // Must do the same conversion when sorting by a\n          // String field in Lucene, which returns the terms\n          // data as BytesRef:\n          if (val instanceof BytesRef) {\n            field.setValue(((BytesRef)val).utf8ToChars(spare).toString());\n            val = ft.toObject(field);\n          }\n\n          vals.add(val);\n        }\n\n        sortVals.add(fieldname, vals);\n      }\n\n      rsp.add(\"sort_values\", sortVals);\n    }\n  }\n\n","sourceOld":"  protected void doFieldSortValues(ResponseBuilder rb, SolrIndexSearcher searcher) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    final CharsRef spare = new CharsRef();\n    // The query cache doesn't currently store sort field values, and SolrIndexSearcher doesn't\n    // currently have an option to return sort field values.  Because of this, we\n    // take the documents given and re-derive the sort values.\n    boolean fsv = req.getParams().getBool(ResponseBuilder.FIELD_SORT_VALUES,false);\n    if(fsv){\n      Sort sort = searcher.weightSort(rb.getSortSpec().getSort());\n      SortField[] sortFields = sort==null ? new SortField[]{SortField.FIELD_SCORE} : sort.getSort();\n      NamedList sortVals = new NamedList(); // order is important for the sort fields\n      Field field = new Field(\"dummy\", \"\", Field.Store.YES, Field.Index.NO); // a dummy Field\n      ReaderContext topReaderContext = searcher.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      AtomicReaderContext currentLeaf = null;\n      if (leaves.length==1) {\n        // if there is a single segment, use that subReader and avoid looking up each time\n        currentLeaf = leaves[0];\n        leaves=null;\n      }\n\n      for (SortField sortField: sortFields) {\n        SortField.Type type = sortField.getType();\n        if (type==SortField.Type.SCORE || type==SortField.Type.DOC) continue;\n\n        FieldComparator comparator = null;\n        FieldComparator comparators[] = (leaves==null) ? null : new FieldComparator[leaves.length];\n\n        String fieldname = sortField.getField();\n        FieldType ft = fieldname==null ? null : req.getSchema().getFieldTypeNoEx(fieldname);\n\n        DocList docList = rb.getResults().docList;\n        ArrayList<Object> vals = new ArrayList<Object>(docList.size());\n        DocIterator it = rb.getResults().docList.iterator();\n\n        int idx = 0;\n\n        while(it.hasNext()) {\n          int doc = it.nextDoc();\n          if (leaves != null) {\n            idx = ReaderUtil.subIndex(doc, leaves);\n            currentLeaf = leaves[idx];\n            comparator = comparators[idx];\n          }\n\n          if (comparator == null) {\n            comparator = sortField.getComparator(1,0);\n            comparator = comparator.setNextReader(currentLeaf);\n            if (comparators != null)\n              comparators[idx] = comparator;\n          }\n\n          doc -= currentLeaf.docBase;  // adjust for what segment this is in\n          comparator.copy(0, doc);\n          Object val = comparator.value(0);\n\n          // Sortable float, double, int, long types all just use a string\n          // comparator. For these, we need to put the type into a readable\n          // format.  One reason for this is that XML can't represent all\n          // string values (or even all unicode code points).\n          // indexedToReadable() should be a no-op and should\n          // thus be harmless anyway (for all current ways anyway)\n          if (val instanceof String) {\n            field.setValue((String)val);\n            val = ft.toObject(field);\n          }\n\n          // Must do the same conversion when sorting by a\n          // String field in Lucene, which returns the terms\n          // data as BytesRef:\n          if (val instanceof BytesRef) {\n            field.setValue(((BytesRef)val).utf8ToChars(spare).toString());\n            val = ft.toObject(field);\n          }\n\n          vals.add(val);\n        }\n\n        sortVals.add(fieldname, vals);\n      }\n\n      rsp.add(\"sort_values\", sortVals);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["1da8d55113b689b06716246649de6f62430f15c0"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"323f871ffe96b871d8c534a614be60751bb023c2":["9eed5547b2f58afdc475cc06312622f5bcf220c2"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["090a0320e4de4a3674376aef96b9701f47564f86","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"2553b00f699380c64959ccb27991289aae87be2e":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","090a0320e4de4a3674376aef96b9701f47564f86"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["be20f9fed1d3edcb1c84abcc39df87a90fab22df","9eed5547b2f58afdc475cc06312622f5bcf220c2"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a1b3a24d5d9b47345473ff564f5cc127a7b526b4","090a0320e4de4a3674376aef96b9701f47564f86"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["868da859b43505d9d2a023bfeae6dd0c795f5295","771281b4c7dc712b48ba338b970b49007ca402a1"],"090a0320e4de4a3674376aef96b9701f47564f86":["a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"771281b4c7dc712b48ba338b970b49007ca402a1":["323f871ffe96b871d8c534a614be60751bb023c2"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["2553b00f699380c64959ccb27991289aae87be2e"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["771281b4c7dc712b48ba338b970b49007ca402a1","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9eed5547b2f58afdc475cc06312622f5bcf220c2","771281b4c7dc712b48ba338b970b49007ca402a1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["090a0320e4de4a3674376aef96b9701f47564f86"],"a1b3a24d5d9b47345473ff564f5cc127a7b526b4":["771281b4c7dc712b48ba338b970b49007ca402a1"],"9eed5547b2f58afdc475cc06312622f5bcf220c2":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","323f871ffe96b871d8c534a614be60751bb023c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["29ef99d61cda9641b6250bf9567329a6e65f901d","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"]},"commit2Childs":{"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","9eed5547b2f58afdc475cc06312622f5bcf220c2"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"323f871ffe96b871d8c534a614be60751bb023c2":["771281b4c7dc712b48ba338b970b49007ca402a1","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"2553b00f699380c64959ccb27991289aae87be2e":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"090a0320e4de4a3674376aef96b9701f47564f86":["c26f00b574427b55127e869b935845554afde1fa","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","a258fbb26824fd104ed795e5d9033d2d040049ee"],"771281b4c7dc712b48ba338b970b49007ca402a1":["e79a6d080bdd5b2a8f56342cf571b5476de04180","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","29ef99d61cda9641b6250bf9567329a6e65f901d","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"1da8d55113b689b06716246649de6f62430f15c0":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["2553b00f699380c64959ccb27991289aae87be2e"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"9eed5547b2f58afdc475cc06312622f5bcf220c2":["323f871ffe96b871d8c534a614be60751bb023c2","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","29ef99d61cda9641b6250bf9567329a6e65f901d"],"a1b3a24d5d9b47345473ff564f5cc127a7b526b4":["d083e83f225b11e5fdd900e83d26ddb385b6955c","090a0320e4de4a3674376aef96b9701f47564f86","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","e79a6d080bdd5b2a8f56342cf571b5476de04180","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}