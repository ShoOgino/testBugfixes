{"path":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testNonTrivialDeleteByQuery().mjava","commits":[{"id":"6a9c418372d8b5fe59a0661a7a164183ea1b274d","date":1359660354,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testNonTrivialDeleteByQuery().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * verify that delete by query works with the QParser framework and\n   * pure negative queries\n   */\n  public void testNonTrivialDeleteByQuery() throws Exception {\n    clearIndex();\n    \n    // setup\n    assertU( add(doc(\"id\",\"101\", \"text\", \"red apple\" )) );\n    assertU( add(doc(\"id\",\"102\", \"text\", \"purple grape\" )) );\n    assertU( add(doc(\"id\",\"103\", \"text\", \"green grape\" )) );\n    assertU( add(doc(\"id\",\"104\", \"text\", \"green pear\" )) );\n    assertU( add(doc(\"id\",\"105\", \"text\", \"yellow banana\" )) );\n    assertU( add(doc(\"id\",\"106\", \"text\", \"red cherry\" )) );\n\n    // sanity checks\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='6']\"\n            );\n    assertQ(req(\"*:*\")\n            ,\"//*[@numFound='6']\"\n            );\n    assertQ(req(\"text:red\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"-text:red\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"text:grape\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"-text:grape\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"-text:red -text:grape\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"{!lucene q.op=AND df=text}grape green\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='103']\"\n             );\n    assertQ(req(\"-_val_:\\\"{!lucene q.op=AND df=text}grape green\\\"\")\n            ,\"//*[@numFound='5']\"\n            ,\"//int[@name='id'][.='101']\"\n            ,\"//int[@name='id'][.='102']\"\n            ,\"//int[@name='id'][.='104']\"\n            ,\"//int[@name='id'][.='105']\"\n            ,\"//int[@name='id'][.='106']\"\n            );\n\n    // tests\n\n    assertU(delQ(\"-*:*\")); // NOOP\n    assertU(commit());\n    assertQ(req(\"*:*\")\n            ,\"//*[@numFound='6']\"\n            );\n\n    assertU(delQ(\"-text:grape -text:red\"));\n    assertU(commit());\n    assertQ(req(\"*:*\")\n            ,\"//*[@numFound='4']\"\n            ,\"//int[@name='id'][.='101']\"\n            ,\"//int[@name='id'][.='102']\"\n            ,\"//int[@name='id'][.='103']\"\n            ,\"//int[@name='id'][.='106']\"\n            );\n\n    assertU(delQ(\"{!term f=id}106\"));\n    assertU(commit());\n    assertQ(req(\"*:*\")\n            ,\"//*[@numFound='3']\"\n            ,\"//int[@name='id'][.='101']\"\n            ,\"//int[@name='id'][.='102']\"\n            ,\"//int[@name='id'][.='103']\"\n            );\n\n    assertU(delQ(\"-_val_:\\\"{!lucene q.op=AND df=text}grape green\\\"\"));\n    assertU(commit());\n    assertQ(req(\"*:*\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='103']\"\n            );\n\n    assertU(delQ(\"-text:doesnotexist\"));\n    assertU(commit());\n    assertQ(req(\"*:*\")\n            ,\"//*[@numFound='0']\"\n            );\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0bf1d4eb51af6e03fffcbf80f0b5d69923c9f86","date":1359670147,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testNonTrivialDeleteByQuery().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * verify that delete by query works with the QParser framework and\n   * pure negative queries\n   */\n  public void testNonTrivialDeleteByQuery() throws Exception {\n    clearIndex();\n    \n    // setup\n    assertU( add(doc(\"id\",\"101\", \"text\", \"red apple\" )) );\n    assertU( add(doc(\"id\",\"102\", \"text\", \"purple grape\" )) );\n    assertU( add(doc(\"id\",\"103\", \"text\", \"green grape\" )) );\n    assertU( add(doc(\"id\",\"104\", \"text\", \"green pear\" )) );\n    assertU( add(doc(\"id\",\"105\", \"text\", \"yellow banana\" )) );\n    assertU( add(doc(\"id\",\"106\", \"text\", \"red cherry\" )) );\n\n    // sanity checks\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='6']\"\n            );\n    assertQ(req(\"*:*\")\n            ,\"//*[@numFound='6']\"\n            );\n    assertQ(req(\"text:red\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"-text:red\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"text:grape\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"-text:grape\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"-text:red -text:grape\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"{!lucene q.op=AND df=text}grape green\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='103']\"\n             );\n    assertQ(req(\"-_val_:\\\"{!lucene q.op=AND df=text}grape green\\\"\")\n            ,\"//*[@numFound='5']\"\n            ,\"//int[@name='id'][.='101']\"\n            ,\"//int[@name='id'][.='102']\"\n            ,\"//int[@name='id'][.='104']\"\n            ,\"//int[@name='id'][.='105']\"\n            ,\"//int[@name='id'][.='106']\"\n            );\n\n    // tests\n\n    assertU(delQ(\"-*:*\")); // NOOP\n    assertU(commit());\n    assertQ(req(\"*:*\")\n            ,\"//*[@numFound='6']\"\n            );\n\n    assertU(delQ(\"-text:grape -text:red\"));\n    assertU(commit());\n    assertQ(req(\"*:*\")\n            ,\"//*[@numFound='4']\"\n            ,\"//int[@name='id'][.='101']\"\n            ,\"//int[@name='id'][.='102']\"\n            ,\"//int[@name='id'][.='103']\"\n            ,\"//int[@name='id'][.='106']\"\n            );\n\n    assertU(delQ(\"{!term f=id}106\"));\n    assertU(commit());\n    assertQ(req(\"*:*\")\n            ,\"//*[@numFound='3']\"\n            ,\"//int[@name='id'][.='101']\"\n            ,\"//int[@name='id'][.='102']\"\n            ,\"//int[@name='id'][.='103']\"\n            );\n\n    assertU(delQ(\"-_val_:\\\"{!lucene q.op=AND df=text}grape green\\\"\"));\n    assertU(commit());\n    assertQ(req(\"*:*\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='103']\"\n            );\n\n    assertU(delQ(\"-text:doesnotexist\"));\n    assertU(commit());\n    assertQ(req(\"*:*\")\n            ,\"//*[@numFound='0']\"\n            );\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testNonTrivialDeleteByQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testNonTrivialDeleteByQuery().mjava","sourceNew":"  /**\n   * verify that delete by query works with the QParser framework and\n   * pure negative queries\n   */\n  public void testNonTrivialDeleteByQuery() throws Exception {\n    clearIndex();\n    \n    // setup\n    assertU( add(doc(\"id\",\"101\", \"text\", \"red apple\" )) );\n    assertU( add(doc(\"id\",\"102\", \"text\", \"purple grape\" )) );\n    assertU( add(doc(\"id\",\"103\", \"text\", \"green grape\" )) );\n    assertU( add(doc(\"id\",\"104\", \"text\", \"green pear\" )) );\n    assertU( add(doc(\"id\",\"105\", \"text\", \"yellow banana\" )) );\n    assertU( add(doc(\"id\",\"106\", \"text\", \"red cherry\" )) );\n\n    // sanity checks\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='6']\"\n            );\n    assertQ(req(\"*:*\")\n            ,\"//*[@numFound='6']\"\n            );\n    assertQ(req(\"text:red\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"-text:red\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"text:grape\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"-text:grape\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"-text:red -text:grape\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"{!lucene q.op=AND df=text}grape green\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[@name='id'][.='103']\"\n             );\n    assertQ(req(\"-_val_:\\\"{!lucene q.op=AND df=text}grape green\\\"\")\n            ,\"//*[@numFound='5']\"\n            ,\"//str[@name='id'][.='101']\"\n            ,\"//str[@name='id'][.='102']\"\n            ,\"//str[@name='id'][.='104']\"\n            ,\"//str[@name='id'][.='105']\"\n            ,\"//str[@name='id'][.='106']\"\n            );\n\n    // tests\n\n    assertU(delQ(\"-*:*\")); // NOOP\n    assertU(commit());\n    assertQ(req(\"*:*\")\n            ,\"//*[@numFound='6']\"\n            );\n\n    assertU(delQ(\"-text:grape -text:red\"));\n    assertU(commit());\n    assertQ(req(\"*:*\")\n            ,\"//*[@numFound='4']\"\n            ,\"//str[@name='id'][.='101']\"\n            ,\"//str[@name='id'][.='102']\"\n            ,\"//str[@name='id'][.='103']\"\n            ,\"//str[@name='id'][.='106']\"\n            );\n\n    assertU(delQ(\"{!term f=id}106\"));\n    assertU(commit());\n    assertQ(req(\"*:*\")\n            ,\"//*[@numFound='3']\"\n            ,\"//str[@name='id'][.='101']\"\n            ,\"//str[@name='id'][.='102']\"\n            ,\"//str[@name='id'][.='103']\"\n            );\n\n    assertU(delQ(\"-_val_:\\\"{!lucene q.op=AND df=text}grape green\\\"\"));\n    assertU(commit());\n    assertQ(req(\"*:*\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[@name='id'][.='103']\"\n            );\n\n    assertU(delQ(\"-text:doesnotexist\"));\n    assertU(commit());\n    assertQ(req(\"*:*\")\n            ,\"//*[@numFound='0']\"\n            );\n\n  }\n\n","sourceOld":"  /**\n   * verify that delete by query works with the QParser framework and\n   * pure negative queries\n   */\n  public void testNonTrivialDeleteByQuery() throws Exception {\n    clearIndex();\n    \n    // setup\n    assertU( add(doc(\"id\",\"101\", \"text\", \"red apple\" )) );\n    assertU( add(doc(\"id\",\"102\", \"text\", \"purple grape\" )) );\n    assertU( add(doc(\"id\",\"103\", \"text\", \"green grape\" )) );\n    assertU( add(doc(\"id\",\"104\", \"text\", \"green pear\" )) );\n    assertU( add(doc(\"id\",\"105\", \"text\", \"yellow banana\" )) );\n    assertU( add(doc(\"id\",\"106\", \"text\", \"red cherry\" )) );\n\n    // sanity checks\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='6']\"\n            );\n    assertQ(req(\"*:*\")\n            ,\"//*[@numFound='6']\"\n            );\n    assertQ(req(\"text:red\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"-text:red\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"text:grape\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"-text:grape\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"-text:red -text:grape\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"{!lucene q.op=AND df=text}grape green\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='103']\"\n             );\n    assertQ(req(\"-_val_:\\\"{!lucene q.op=AND df=text}grape green\\\"\")\n            ,\"//*[@numFound='5']\"\n            ,\"//int[@name='id'][.='101']\"\n            ,\"//int[@name='id'][.='102']\"\n            ,\"//int[@name='id'][.='104']\"\n            ,\"//int[@name='id'][.='105']\"\n            ,\"//int[@name='id'][.='106']\"\n            );\n\n    // tests\n\n    assertU(delQ(\"-*:*\")); // NOOP\n    assertU(commit());\n    assertQ(req(\"*:*\")\n            ,\"//*[@numFound='6']\"\n            );\n\n    assertU(delQ(\"-text:grape -text:red\"));\n    assertU(commit());\n    assertQ(req(\"*:*\")\n            ,\"//*[@numFound='4']\"\n            ,\"//int[@name='id'][.='101']\"\n            ,\"//int[@name='id'][.='102']\"\n            ,\"//int[@name='id'][.='103']\"\n            ,\"//int[@name='id'][.='106']\"\n            );\n\n    assertU(delQ(\"{!term f=id}106\"));\n    assertU(commit());\n    assertQ(req(\"*:*\")\n            ,\"//*[@numFound='3']\"\n            ,\"//int[@name='id'][.='101']\"\n            ,\"//int[@name='id'][.='102']\"\n            ,\"//int[@name='id'][.='103']\"\n            );\n\n    assertU(delQ(\"-_val_:\\\"{!lucene q.op=AND df=text}grape green\\\"\"));\n    assertU(commit());\n    assertQ(req(\"*:*\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='103']\"\n            );\n\n    assertU(delQ(\"-text:doesnotexist\"));\n    assertU(commit());\n    assertQ(req(\"*:*\")\n            ,\"//*[@numFound='0']\"\n            );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testNonTrivialDeleteByQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testNonTrivialDeleteByQuery().mjava","sourceNew":"  /**\n   * verify that delete by query works with the QParser framework and\n   * pure negative queries\n   */\n  public void testNonTrivialDeleteByQuery() throws Exception {\n    clearIndex();\n    \n    // setup\n    assertU( add(doc(\"id\",\"101\", \"text\", \"red apple\" )) );\n    assertU( add(doc(\"id\",\"102\", \"text\", \"purple grape\" )) );\n    assertU( add(doc(\"id\",\"103\", \"text\", \"green grape\" )) );\n    assertU( add(doc(\"id\",\"104\", \"text\", \"green pear\" )) );\n    assertU( add(doc(\"id\",\"105\", \"text\", \"yellow banana\" )) );\n    assertU( add(doc(\"id\",\"106\", \"text\", \"red cherry\" )) );\n\n    // sanity checks\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='6']\"\n            );\n    assertQ(req(\"*:*\")\n            ,\"//*[@numFound='6']\"\n            );\n    assertQ(req(\"text:red\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"-text:red\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"text:grape\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"-text:grape\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"-text:red -text:grape\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"{!lucene q.op=AND df=text}grape green\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[@name='id'][.='103']\"\n             );\n    assertQ(req(\"-_val_:\\\"{!lucene q.op=AND df=text}grape green\\\"\")\n            ,\"//*[@numFound='5']\"\n            ,\"//str[@name='id'][.='101']\"\n            ,\"//str[@name='id'][.='102']\"\n            ,\"//str[@name='id'][.='104']\"\n            ,\"//str[@name='id'][.='105']\"\n            ,\"//str[@name='id'][.='106']\"\n            );\n\n    // tests\n\n    assertU(delQ(\"-*:*\")); // NOOP\n    assertU(commit());\n    assertQ(req(\"*:*\")\n            ,\"//*[@numFound='6']\"\n            );\n\n    assertU(delQ(\"-text:grape -text:red\"));\n    assertU(commit());\n    assertQ(req(\"*:*\")\n            ,\"//*[@numFound='4']\"\n            ,\"//str[@name='id'][.='101']\"\n            ,\"//str[@name='id'][.='102']\"\n            ,\"//str[@name='id'][.='103']\"\n            ,\"//str[@name='id'][.='106']\"\n            );\n\n    assertU(delQ(\"{!term f=id}106\"));\n    assertU(commit());\n    assertQ(req(\"*:*\")\n            ,\"//*[@numFound='3']\"\n            ,\"//str[@name='id'][.='101']\"\n            ,\"//str[@name='id'][.='102']\"\n            ,\"//str[@name='id'][.='103']\"\n            );\n\n    assertU(delQ(\"-_val_:\\\"{!lucene q.op=AND df=text}grape green\\\"\"));\n    assertU(commit());\n    assertQ(req(\"*:*\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[@name='id'][.='103']\"\n            );\n\n    assertU(delQ(\"-text:doesnotexist\"));\n    assertU(commit());\n    assertQ(req(\"*:*\")\n            ,\"//*[@numFound='0']\"\n            );\n\n  }\n\n","sourceOld":"  /**\n   * verify that delete by query works with the QParser framework and\n   * pure negative queries\n   */\n  public void testNonTrivialDeleteByQuery() throws Exception {\n    clearIndex();\n    \n    // setup\n    assertU( add(doc(\"id\",\"101\", \"text\", \"red apple\" )) );\n    assertU( add(doc(\"id\",\"102\", \"text\", \"purple grape\" )) );\n    assertU( add(doc(\"id\",\"103\", \"text\", \"green grape\" )) );\n    assertU( add(doc(\"id\",\"104\", \"text\", \"green pear\" )) );\n    assertU( add(doc(\"id\",\"105\", \"text\", \"yellow banana\" )) );\n    assertU( add(doc(\"id\",\"106\", \"text\", \"red cherry\" )) );\n\n    // sanity checks\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='6']\"\n            );\n    assertQ(req(\"*:*\")\n            ,\"//*[@numFound='6']\"\n            );\n    assertQ(req(\"text:red\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"-text:red\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"text:grape\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"-text:grape\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"-text:red -text:grape\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"{!lucene q.op=AND df=text}grape green\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='103']\"\n             );\n    assertQ(req(\"-_val_:\\\"{!lucene q.op=AND df=text}grape green\\\"\")\n            ,\"//*[@numFound='5']\"\n            ,\"//int[@name='id'][.='101']\"\n            ,\"//int[@name='id'][.='102']\"\n            ,\"//int[@name='id'][.='104']\"\n            ,\"//int[@name='id'][.='105']\"\n            ,\"//int[@name='id'][.='106']\"\n            );\n\n    // tests\n\n    assertU(delQ(\"-*:*\")); // NOOP\n    assertU(commit());\n    assertQ(req(\"*:*\")\n            ,\"//*[@numFound='6']\"\n            );\n\n    assertU(delQ(\"-text:grape -text:red\"));\n    assertU(commit());\n    assertQ(req(\"*:*\")\n            ,\"//*[@numFound='4']\"\n            ,\"//int[@name='id'][.='101']\"\n            ,\"//int[@name='id'][.='102']\"\n            ,\"//int[@name='id'][.='103']\"\n            ,\"//int[@name='id'][.='106']\"\n            );\n\n    assertU(delQ(\"{!term f=id}106\"));\n    assertU(commit());\n    assertQ(req(\"*:*\")\n            ,\"//*[@numFound='3']\"\n            ,\"//int[@name='id'][.='101']\"\n            ,\"//int[@name='id'][.='102']\"\n            ,\"//int[@name='id'][.='103']\"\n            );\n\n    assertU(delQ(\"-_val_:\\\"{!lucene q.op=AND df=text}grape green\\\"\"));\n    assertU(commit());\n    assertQ(req(\"*:*\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='103']\"\n            );\n\n    assertU(delQ(\"-text:doesnotexist\"));\n    assertU(commit());\n    assertQ(req(\"*:*\")\n            ,\"//*[@numFound='0']\"\n            );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testNonTrivialDeleteByQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testNonTrivialDeleteByQuery().mjava","sourceNew":"  /**\n   * verify that delete by query works with the QParser framework and\n   * pure negative queries\n   */\n  public void testNonTrivialDeleteByQuery() throws Exception {\n    clearIndex();\n    \n    // setup\n    assertU( add(doc(\"id\",\"101\", \"text\", \"red apple\" )) );\n    assertU( add(doc(\"id\",\"102\", \"text\", \"purple grape\" )) );\n    assertU( add(doc(\"id\",\"103\", \"text\", \"green grape\" )) );\n    assertU( add(doc(\"id\",\"104\", \"text\", \"green pear\" )) );\n    assertU( add(doc(\"id\",\"105\", \"text\", \"yellow banana\" )) );\n    assertU( add(doc(\"id\",\"106\", \"text\", \"red cherry\" )) );\n\n    // sanity checks\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='6']\"\n            );\n    assertQ(req(\"*:*\")\n            ,\"//*[@numFound='6']\"\n            );\n    assertQ(req(\"text:red\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"-text:red\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"text:grape\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"-text:grape\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"-text:red -text:grape\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"{!lucene q.op=AND df=text}grape green\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[@name='id'][.='103']\"\n             );\n    assertQ(req(\"-_val_:\\\"{!lucene q.op=AND df=text}grape green\\\"\")\n            ,\"//*[@numFound='5']\"\n            ,\"//str[@name='id'][.='101']\"\n            ,\"//str[@name='id'][.='102']\"\n            ,\"//str[@name='id'][.='104']\"\n            ,\"//str[@name='id'][.='105']\"\n            ,\"//str[@name='id'][.='106']\"\n            );\n\n    // tests\n\n    assertU(delQ(\"-*:*\")); // NOOP\n    assertU(commit());\n    assertQ(req(\"*:*\")\n            ,\"//*[@numFound='6']\"\n            );\n\n    assertU(delQ(\"-text:grape -text:red\"));\n    assertU(commit());\n    assertQ(req(\"*:*\")\n            ,\"//*[@numFound='4']\"\n            ,\"//str[@name='id'][.='101']\"\n            ,\"//str[@name='id'][.='102']\"\n            ,\"//str[@name='id'][.='103']\"\n            ,\"//str[@name='id'][.='106']\"\n            );\n\n    assertU(delQ(\"{!term f=id}106\"));\n    assertU(commit());\n    assertQ(req(\"*:*\")\n            ,\"//*[@numFound='3']\"\n            ,\"//str[@name='id'][.='101']\"\n            ,\"//str[@name='id'][.='102']\"\n            ,\"//str[@name='id'][.='103']\"\n            );\n\n    assertU(delQ(\"-_val_:\\\"{!lucene q.op=AND df=text}grape green\\\"\"));\n    assertU(commit());\n    assertQ(req(\"*:*\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[@name='id'][.='103']\"\n            );\n\n    assertU(delQ(\"-text:doesnotexist\"));\n    assertU(commit());\n    assertQ(req(\"*:*\")\n            ,\"//*[@numFound='0']\"\n            );\n\n  }\n\n","sourceOld":"  /**\n   * verify that delete by query works with the QParser framework and\n   * pure negative queries\n   */\n  public void testNonTrivialDeleteByQuery() throws Exception {\n    clearIndex();\n    \n    // setup\n    assertU( add(doc(\"id\",\"101\", \"text\", \"red apple\" )) );\n    assertU( add(doc(\"id\",\"102\", \"text\", \"purple grape\" )) );\n    assertU( add(doc(\"id\",\"103\", \"text\", \"green grape\" )) );\n    assertU( add(doc(\"id\",\"104\", \"text\", \"green pear\" )) );\n    assertU( add(doc(\"id\",\"105\", \"text\", \"yellow banana\" )) );\n    assertU( add(doc(\"id\",\"106\", \"text\", \"red cherry\" )) );\n\n    // sanity checks\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='6']\"\n            );\n    assertQ(req(\"*:*\")\n            ,\"//*[@numFound='6']\"\n            );\n    assertQ(req(\"text:red\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"-text:red\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"text:grape\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"-text:grape\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"-text:red -text:grape\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"{!lucene q.op=AND df=text}grape green\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='103']\"\n             );\n    assertQ(req(\"-_val_:\\\"{!lucene q.op=AND df=text}grape green\\\"\")\n            ,\"//*[@numFound='5']\"\n            ,\"//int[@name='id'][.='101']\"\n            ,\"//int[@name='id'][.='102']\"\n            ,\"//int[@name='id'][.='104']\"\n            ,\"//int[@name='id'][.='105']\"\n            ,\"//int[@name='id'][.='106']\"\n            );\n\n    // tests\n\n    assertU(delQ(\"-*:*\")); // NOOP\n    assertU(commit());\n    assertQ(req(\"*:*\")\n            ,\"//*[@numFound='6']\"\n            );\n\n    assertU(delQ(\"-text:grape -text:red\"));\n    assertU(commit());\n    assertQ(req(\"*:*\")\n            ,\"//*[@numFound='4']\"\n            ,\"//int[@name='id'][.='101']\"\n            ,\"//int[@name='id'][.='102']\"\n            ,\"//int[@name='id'][.='103']\"\n            ,\"//int[@name='id'][.='106']\"\n            );\n\n    assertU(delQ(\"{!term f=id}106\"));\n    assertU(commit());\n    assertQ(req(\"*:*\")\n            ,\"//*[@numFound='3']\"\n            ,\"//int[@name='id'][.='101']\"\n            ,\"//int[@name='id'][.='102']\"\n            ,\"//int[@name='id'][.='103']\"\n            );\n\n    assertU(delQ(\"-_val_:\\\"{!lucene q.op=AND df=text}grape green\\\"\"));\n    assertU(commit());\n    assertQ(req(\"*:*\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='103']\"\n            );\n\n    assertU(delQ(\"-text:doesnotexist\"));\n    assertU(commit());\n    assertQ(req(\"*:*\")\n            ,\"//*[@numFound='0']\"\n            );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b0bf1d4eb51af6e03fffcbf80f0b5d69923c9f86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6a9c418372d8b5fe59a0661a7a164183ea1b274d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a71f63026529f3c1f03cfdd664910873ab2369ae":["6a9c418372d8b5fe59a0661a7a164183ea1b274d"],"6a9c418372d8b5fe59a0661a7a164183ea1b274d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["6a9c418372d8b5fe59a0661a7a164183ea1b274d","a71f63026529f3c1f03cfdd664910873ab2369ae"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["6a9c418372d8b5fe59a0661a7a164183ea1b274d","a71f63026529f3c1f03cfdd664910873ab2369ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"b0bf1d4eb51af6e03fffcbf80f0b5d69923c9f86":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b0bf1d4eb51af6e03fffcbf80f0b5d69923c9f86","6a9c418372d8b5fe59a0661a7a164183ea1b274d"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"6a9c418372d8b5fe59a0661a7a164183ea1b274d":["b0bf1d4eb51af6e03fffcbf80f0b5d69923c9f86","a71f63026529f3c1f03cfdd664910873ab2369ae","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b0bf1d4eb51af6e03fffcbf80f0b5d69923c9f86","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}