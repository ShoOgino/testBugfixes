{"path":"lucene/core/src/test/org/apache/lucene/search/TestComplexExplanations#test2().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestComplexExplanations#test2().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestComplexExplanations#test2().mjava","sourceNew":"  public void test2() throws Exception {\n    \n    BooleanQuery q = new BooleanQuery();\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.setSlop(1);\n    phraseQuery.add(new Term(FIELD, \"w1\"));\n    phraseQuery.add(new Term(FIELD, \"w2\"));\n    q.add(phraseQuery, Occur.MUST);\n    q.add(snear(st(\"w2\"),\n                sor(\"w5\",\"zz\"),\n                4, true),\n          Occur.SHOULD);\n    q.add(snear(sf(\"w3\",2), st(\"w2\"), st(\"w3\"), 5, true),\n          Occur.SHOULD);\n    \n    Query t = new FilteredQuery(new TermQuery(new Term(FIELD, \"xx\")),\n                                new ItemizedFilter(new int[] {1,3}));\n    t.setBoost(1000);\n    q.add(t, Occur.SHOULD);\n    \n    t = new ConstantScoreQuery(new ItemizedFilter(new int[] {0,2}));\n    t.setBoost(-20.0f);\n    q.add(t, Occur.SHOULD);\n    \n    DisjunctionMaxQuery dm = new DisjunctionMaxQuery(0.2f);\n    dm.add(snear(st(\"w2\"),\n                 sor(\"w5\",\"zz\"),\n                 4, true));\n    dm.add(new TermQuery(new Term(FIELD, \"QQ\")));\n\n    BooleanQuery xxYYZZ = new BooleanQuery();\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"yy\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"zz\")), Occur.MUST_NOT);\n\n    dm.add(xxYYZZ);\n\n    BooleanQuery xxW1 = new BooleanQuery();\n    xxW1.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.MUST_NOT);\n    xxW1.add(new TermQuery(new Term(FIELD, \"w1\")), Occur.MUST_NOT);\n\n    dm.add(xxW1);\n\n    DisjunctionMaxQuery dm2 = new DisjunctionMaxQuery(0.5f);\n    dm2.add(new TermQuery(new Term(FIELD, \"w1\")));\n    dm2.add(new TermQuery(new Term(FIELD, \"w2\")));\n    dm2.add(new TermQuery(new Term(FIELD, \"w3\")));\n    dm.add(dm2);\n\n    q.add(dm, Occur.SHOULD);\n\n    BooleanQuery b = new BooleanQuery();\n    b.setMinimumNumberShouldMatch(2);\n    b.add(snear(\"w1\",\"w2\",1,true), Occur.SHOULD);\n    b.add(snear(\"w2\",\"w3\",1,true), Occur.SHOULD);\n    b.add(snear(\"w1\",\"w3\",3,true), Occur.SHOULD);\n    b.setBoost(0.0f);\n    \n    q.add(b, Occur.SHOULD);\n    \n    qtest(q, new int[] { 0,1,2 });\n  }\n\n","sourceOld":"  public void test2() throws Exception {\n    \n    BooleanQuery q = new BooleanQuery();\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.setSlop(1);\n    phraseQuery.add(new Term(FIELD, \"w1\"));\n    phraseQuery.add(new Term(FIELD, \"w2\"));\n    q.add(phraseQuery, Occur.MUST);\n    q.add(snear(st(\"w2\"),\n                sor(\"w5\",\"zz\"),\n                4, true),\n          Occur.SHOULD);\n    q.add(snear(sf(\"w3\",2), st(\"w2\"), st(\"w3\"), 5, true),\n          Occur.SHOULD);\n    \n    Query t = new FilteredQuery(new TermQuery(new Term(FIELD, \"xx\")),\n                                new ItemizedFilter(new int[] {1,3}));\n    t.setBoost(1000);\n    q.add(t, Occur.SHOULD);\n    \n    t = new ConstantScoreQuery(new ItemizedFilter(new int[] {0,2}));\n    t.setBoost(-20.0f);\n    q.add(t, Occur.SHOULD);\n    \n    DisjunctionMaxQuery dm = new DisjunctionMaxQuery(0.2f);\n    dm.add(snear(st(\"w2\"),\n                 sor(\"w5\",\"zz\"),\n                 4, true));\n    dm.add(new TermQuery(new Term(FIELD, \"QQ\")));\n\n    BooleanQuery xxYYZZ = new BooleanQuery();\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"yy\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"zz\")), Occur.MUST_NOT);\n\n    dm.add(xxYYZZ);\n\n    BooleanQuery xxW1 = new BooleanQuery();\n    xxW1.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.MUST_NOT);\n    xxW1.add(new TermQuery(new Term(FIELD, \"w1\")), Occur.MUST_NOT);\n\n    dm.add(xxW1);\n\n    DisjunctionMaxQuery dm2 = new DisjunctionMaxQuery(0.5f);\n    dm2.add(new TermQuery(new Term(FIELD, \"w1\")));\n    dm2.add(new TermQuery(new Term(FIELD, \"w2\")));\n    dm2.add(new TermQuery(new Term(FIELD, \"w3\")));\n    dm.add(dm2);\n\n    q.add(dm, Occur.SHOULD);\n\n    BooleanQuery b = new BooleanQuery();\n    b.setMinimumNumberShouldMatch(2);\n    b.add(snear(\"w1\",\"w2\",1,true), Occur.SHOULD);\n    b.add(snear(\"w2\",\"w3\",1,true), Occur.SHOULD);\n    b.add(snear(\"w1\",\"w3\",3,true), Occur.SHOULD);\n    b.setBoost(0.0f);\n    \n    q.add(b, Occur.SHOULD);\n    \n    qtest(q, new int[] { 0,1,2 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87fab14adebb5b490363c9bc05f747938bd15e6a","date":1424877964,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestComplexExplanations#test2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestComplexExplanations#test2().mjava","sourceNew":"  public void test2() throws Exception {\n    \n    BooleanQuery q = new BooleanQuery();\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.setSlop(1);\n    phraseQuery.add(new Term(FIELD, \"w1\"));\n    phraseQuery.add(new Term(FIELD, \"w2\"));\n    q.add(phraseQuery, Occur.MUST);\n    q.add(snear(st(\"w2\"),\n                sor(\"w5\",\"zz\"),\n                4, true),\n          Occur.SHOULD);\n    q.add(snear(sf(\"w3\",2), st(\"w2\"), st(\"w3\"), 5, true),\n          Occur.SHOULD);\n    \n    Query t = new FilteredQuery(new TermQuery(new Term(FIELD, \"xx\")),\n                                new QueryWrapperFilter(new ItemizedQuery(new int[] {1,3})));\n    t.setBoost(1000);\n    q.add(t, Occur.SHOULD);\n    \n    t = new ConstantScoreQuery(new ItemizedQuery(new int[] {0,2}));\n    t.setBoost(-20.0f);\n    q.add(t, Occur.SHOULD);\n    \n    DisjunctionMaxQuery dm = new DisjunctionMaxQuery(0.2f);\n    dm.add(snear(st(\"w2\"),\n                 sor(\"w5\",\"zz\"),\n                 4, true));\n    dm.add(new TermQuery(new Term(FIELD, \"QQ\")));\n\n    BooleanQuery xxYYZZ = new BooleanQuery();\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"yy\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"zz\")), Occur.MUST_NOT);\n\n    dm.add(xxYYZZ);\n\n    BooleanQuery xxW1 = new BooleanQuery();\n    xxW1.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.MUST_NOT);\n    xxW1.add(new TermQuery(new Term(FIELD, \"w1\")), Occur.MUST_NOT);\n\n    dm.add(xxW1);\n\n    DisjunctionMaxQuery dm2 = new DisjunctionMaxQuery(0.5f);\n    dm2.add(new TermQuery(new Term(FIELD, \"w1\")));\n    dm2.add(new TermQuery(new Term(FIELD, \"w2\")));\n    dm2.add(new TermQuery(new Term(FIELD, \"w3\")));\n    dm.add(dm2);\n\n    q.add(dm, Occur.SHOULD);\n\n    BooleanQuery b = new BooleanQuery();\n    b.setMinimumNumberShouldMatch(2);\n    b.add(snear(\"w1\",\"w2\",1,true), Occur.SHOULD);\n    b.add(snear(\"w2\",\"w3\",1,true), Occur.SHOULD);\n    b.add(snear(\"w1\",\"w3\",3,true), Occur.SHOULD);\n    b.setBoost(0.0f);\n    \n    q.add(b, Occur.SHOULD);\n    \n    qtest(q, new int[] { 0,1,2 });\n  }\n\n","sourceOld":"  public void test2() throws Exception {\n    \n    BooleanQuery q = new BooleanQuery();\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.setSlop(1);\n    phraseQuery.add(new Term(FIELD, \"w1\"));\n    phraseQuery.add(new Term(FIELD, \"w2\"));\n    q.add(phraseQuery, Occur.MUST);\n    q.add(snear(st(\"w2\"),\n                sor(\"w5\",\"zz\"),\n                4, true),\n          Occur.SHOULD);\n    q.add(snear(sf(\"w3\",2), st(\"w2\"), st(\"w3\"), 5, true),\n          Occur.SHOULD);\n    \n    Query t = new FilteredQuery(new TermQuery(new Term(FIELD, \"xx\")),\n                                new ItemizedFilter(new int[] {1,3}));\n    t.setBoost(1000);\n    q.add(t, Occur.SHOULD);\n    \n    t = new ConstantScoreQuery(new ItemizedFilter(new int[] {0,2}));\n    t.setBoost(-20.0f);\n    q.add(t, Occur.SHOULD);\n    \n    DisjunctionMaxQuery dm = new DisjunctionMaxQuery(0.2f);\n    dm.add(snear(st(\"w2\"),\n                 sor(\"w5\",\"zz\"),\n                 4, true));\n    dm.add(new TermQuery(new Term(FIELD, \"QQ\")));\n\n    BooleanQuery xxYYZZ = new BooleanQuery();\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"yy\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"zz\")), Occur.MUST_NOT);\n\n    dm.add(xxYYZZ);\n\n    BooleanQuery xxW1 = new BooleanQuery();\n    xxW1.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.MUST_NOT);\n    xxW1.add(new TermQuery(new Term(FIELD, \"w1\")), Occur.MUST_NOT);\n\n    dm.add(xxW1);\n\n    DisjunctionMaxQuery dm2 = new DisjunctionMaxQuery(0.5f);\n    dm2.add(new TermQuery(new Term(FIELD, \"w1\")));\n    dm2.add(new TermQuery(new Term(FIELD, \"w2\")));\n    dm2.add(new TermQuery(new Term(FIELD, \"w3\")));\n    dm.add(dm2);\n\n    q.add(dm, Occur.SHOULD);\n\n    BooleanQuery b = new BooleanQuery();\n    b.setMinimumNumberShouldMatch(2);\n    b.add(snear(\"w1\",\"w2\",1,true), Occur.SHOULD);\n    b.add(snear(\"w2\",\"w3\",1,true), Occur.SHOULD);\n    b.add(snear(\"w1\",\"w3\",3,true), Occur.SHOULD);\n    b.setBoost(0.0f);\n    \n    q.add(b, Occur.SHOULD);\n    \n    qtest(q, new int[] { 0,1,2 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestComplexExplanations#test2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestComplexExplanations#test2().mjava","sourceNew":"  public void test2() throws Exception {\n    \n    BooleanQuery q = new BooleanQuery();\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.setSlop(1);\n    phraseQuery.add(new Term(FIELD, \"w1\"));\n    phraseQuery.add(new Term(FIELD, \"w2\"));\n    q.add(phraseQuery, Occur.MUST);\n    q.add(snear(st(\"w2\"),\n                sor(\"w5\",\"zz\"),\n                4, true),\n          Occur.SHOULD);\n    q.add(snear(sf(\"w3\",2), st(\"w2\"), st(\"w3\"), 5, true),\n          Occur.SHOULD);\n    \n    Query t = new FilteredQuery(new TermQuery(new Term(FIELD, \"xx\")),\n                                new QueryWrapperFilter(new ItemizedQuery(new int[] {1,3})));\n    t.setBoost(1000);\n    q.add(t, Occur.SHOULD);\n    \n    t = new ConstantScoreQuery(new ItemizedQuery(new int[] {0,2}));\n    t.setBoost(-20.0f);\n    q.add(t, Occur.SHOULD);\n    \n    DisjunctionMaxQuery dm = new DisjunctionMaxQuery(0.2f);\n    dm.add(snear(st(\"w2\"),\n                 sor(\"w5\",\"zz\"),\n                 4, true));\n    dm.add(new TermQuery(new Term(FIELD, \"QQ\")));\n\n    BooleanQuery xxYYZZ = new BooleanQuery();\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"yy\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"zz\")), Occur.MUST_NOT);\n\n    dm.add(xxYYZZ);\n\n    BooleanQuery xxW1 = new BooleanQuery();\n    xxW1.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.MUST_NOT);\n    xxW1.add(new TermQuery(new Term(FIELD, \"w1\")), Occur.MUST_NOT);\n\n    dm.add(xxW1);\n\n    DisjunctionMaxQuery dm2 = new DisjunctionMaxQuery(0.5f);\n    dm2.add(new TermQuery(new Term(FIELD, \"w1\")));\n    dm2.add(new TermQuery(new Term(FIELD, \"w2\")));\n    dm2.add(new TermQuery(new Term(FIELD, \"w3\")));\n    dm.add(dm2);\n\n    q.add(dm, Occur.SHOULD);\n\n    BooleanQuery b = new BooleanQuery();\n    b.setMinimumNumberShouldMatch(2);\n    b.add(snear(\"w1\",\"w2\",1,true), Occur.SHOULD);\n    b.add(snear(\"w2\",\"w3\",1,true), Occur.SHOULD);\n    b.add(snear(\"w1\",\"w3\",3,true), Occur.SHOULD);\n    b.setBoost(0.0f);\n    \n    q.add(b, Occur.SHOULD);\n    \n    qtest(q, new int[] { 0,1,2 });\n  }\n\n","sourceOld":"  public void test2() throws Exception {\n    \n    BooleanQuery q = new BooleanQuery();\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.setSlop(1);\n    phraseQuery.add(new Term(FIELD, \"w1\"));\n    phraseQuery.add(new Term(FIELD, \"w2\"));\n    q.add(phraseQuery, Occur.MUST);\n    q.add(snear(st(\"w2\"),\n                sor(\"w5\",\"zz\"),\n                4, true),\n          Occur.SHOULD);\n    q.add(snear(sf(\"w3\",2), st(\"w2\"), st(\"w3\"), 5, true),\n          Occur.SHOULD);\n    \n    Query t = new FilteredQuery(new TermQuery(new Term(FIELD, \"xx\")),\n                                new ItemizedFilter(new int[] {1,3}));\n    t.setBoost(1000);\n    q.add(t, Occur.SHOULD);\n    \n    t = new ConstantScoreQuery(new ItemizedFilter(new int[] {0,2}));\n    t.setBoost(-20.0f);\n    q.add(t, Occur.SHOULD);\n    \n    DisjunctionMaxQuery dm = new DisjunctionMaxQuery(0.2f);\n    dm.add(snear(st(\"w2\"),\n                 sor(\"w5\",\"zz\"),\n                 4, true));\n    dm.add(new TermQuery(new Term(FIELD, \"QQ\")));\n\n    BooleanQuery xxYYZZ = new BooleanQuery();\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"yy\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"zz\")), Occur.MUST_NOT);\n\n    dm.add(xxYYZZ);\n\n    BooleanQuery xxW1 = new BooleanQuery();\n    xxW1.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.MUST_NOT);\n    xxW1.add(new TermQuery(new Term(FIELD, \"w1\")), Occur.MUST_NOT);\n\n    dm.add(xxW1);\n\n    DisjunctionMaxQuery dm2 = new DisjunctionMaxQuery(0.5f);\n    dm2.add(new TermQuery(new Term(FIELD, \"w1\")));\n    dm2.add(new TermQuery(new Term(FIELD, \"w2\")));\n    dm2.add(new TermQuery(new Term(FIELD, \"w3\")));\n    dm.add(dm2);\n\n    q.add(dm, Occur.SHOULD);\n\n    BooleanQuery b = new BooleanQuery();\n    b.setMinimumNumberShouldMatch(2);\n    b.add(snear(\"w1\",\"w2\",1,true), Occur.SHOULD);\n    b.add(snear(\"w2\",\"w3\",1,true), Occur.SHOULD);\n    b.add(snear(\"w1\",\"w3\",3,true), Occur.SHOULD);\n    b.setBoost(0.0f);\n    \n    q.add(b, Occur.SHOULD);\n    \n    qtest(q, new int[] { 0,1,2 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fb0efe75e5c6021561f115dfe334b74786364ba","date":1434366074,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestComplexExplanations#test2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestComplexExplanations#test2().mjava","sourceNew":"  public void test2() throws Exception {\n    \n    BooleanQuery q = new BooleanQuery();\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.setSlop(1);\n    phraseQuery.add(new Term(FIELD, \"w1\"));\n    phraseQuery.add(new Term(FIELD, \"w2\"));\n    q.add(phraseQuery, Occur.MUST);\n    q.add(snear(st(\"w2\"),\n                sor(\"w5\",\"zz\"),\n                4, true),\n          Occur.SHOULD);\n    q.add(snear(sf(\"w3\",2), st(\"w2\"), st(\"w3\"), 5, true),\n          Occur.SHOULD);\n    \n    Query t = new FilteredQuery(new TermQuery(new Term(FIELD, \"xx\")),\n                                new QueryWrapperFilter(matchTheseItems(new int[] {1,3})));\n    t.setBoost(1000);\n    q.add(t, Occur.SHOULD);\n    \n    t = new ConstantScoreQuery(matchTheseItems(new int[] {0,2}));\n    t.setBoost(-20.0f);\n    q.add(t, Occur.SHOULD);\n    \n    DisjunctionMaxQuery dm = new DisjunctionMaxQuery(0.2f);\n    dm.add(snear(st(\"w2\"),\n                 sor(\"w5\",\"zz\"),\n                 4, true));\n    dm.add(new TermQuery(new Term(FIELD, \"QQ\")));\n\n    BooleanQuery xxYYZZ = new BooleanQuery();\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"yy\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"zz\")), Occur.MUST_NOT);\n\n    dm.add(xxYYZZ);\n\n    BooleanQuery xxW1 = new BooleanQuery();\n    xxW1.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.MUST_NOT);\n    xxW1.add(new TermQuery(new Term(FIELD, \"w1\")), Occur.MUST_NOT);\n\n    dm.add(xxW1);\n\n    DisjunctionMaxQuery dm2 = new DisjunctionMaxQuery(0.5f);\n    dm2.add(new TermQuery(new Term(FIELD, \"w1\")));\n    dm2.add(new TermQuery(new Term(FIELD, \"w2\")));\n    dm2.add(new TermQuery(new Term(FIELD, \"w3\")));\n    dm.add(dm2);\n\n    q.add(dm, Occur.SHOULD);\n\n    BooleanQuery b = new BooleanQuery();\n    b.setMinimumNumberShouldMatch(2);\n    b.add(snear(\"w1\",\"w2\",1,true), Occur.SHOULD);\n    b.add(snear(\"w2\",\"w3\",1,true), Occur.SHOULD);\n    b.add(snear(\"w1\",\"w3\",3,true), Occur.SHOULD);\n    b.setBoost(0.0f);\n    \n    q.add(b, Occur.SHOULD);\n    \n    qtest(q, new int[] { 0,1,2 });\n  }\n\n","sourceOld":"  public void test2() throws Exception {\n    \n    BooleanQuery q = new BooleanQuery();\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.setSlop(1);\n    phraseQuery.add(new Term(FIELD, \"w1\"));\n    phraseQuery.add(new Term(FIELD, \"w2\"));\n    q.add(phraseQuery, Occur.MUST);\n    q.add(snear(st(\"w2\"),\n                sor(\"w5\",\"zz\"),\n                4, true),\n          Occur.SHOULD);\n    q.add(snear(sf(\"w3\",2), st(\"w2\"), st(\"w3\"), 5, true),\n          Occur.SHOULD);\n    \n    Query t = new FilteredQuery(new TermQuery(new Term(FIELD, \"xx\")),\n                                new QueryWrapperFilter(new ItemizedQuery(new int[] {1,3})));\n    t.setBoost(1000);\n    q.add(t, Occur.SHOULD);\n    \n    t = new ConstantScoreQuery(new ItemizedQuery(new int[] {0,2}));\n    t.setBoost(-20.0f);\n    q.add(t, Occur.SHOULD);\n    \n    DisjunctionMaxQuery dm = new DisjunctionMaxQuery(0.2f);\n    dm.add(snear(st(\"w2\"),\n                 sor(\"w5\",\"zz\"),\n                 4, true));\n    dm.add(new TermQuery(new Term(FIELD, \"QQ\")));\n\n    BooleanQuery xxYYZZ = new BooleanQuery();\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"yy\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"zz\")), Occur.MUST_NOT);\n\n    dm.add(xxYYZZ);\n\n    BooleanQuery xxW1 = new BooleanQuery();\n    xxW1.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.MUST_NOT);\n    xxW1.add(new TermQuery(new Term(FIELD, \"w1\")), Occur.MUST_NOT);\n\n    dm.add(xxW1);\n\n    DisjunctionMaxQuery dm2 = new DisjunctionMaxQuery(0.5f);\n    dm2.add(new TermQuery(new Term(FIELD, \"w1\")));\n    dm2.add(new TermQuery(new Term(FIELD, \"w2\")));\n    dm2.add(new TermQuery(new Term(FIELD, \"w3\")));\n    dm.add(dm2);\n\n    q.add(dm, Occur.SHOULD);\n\n    BooleanQuery b = new BooleanQuery();\n    b.setMinimumNumberShouldMatch(2);\n    b.add(snear(\"w1\",\"w2\",1,true), Occur.SHOULD);\n    b.add(snear(\"w2\",\"w3\",1,true), Occur.SHOULD);\n    b.add(snear(\"w1\",\"w3\",3,true), Occur.SHOULD);\n    b.setBoost(0.0f);\n    \n    q.add(b, Occur.SHOULD);\n    \n    qtest(q, new int[] { 0,1,2 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9e1499c5d26c936238506df90a3c02c76707722","date":1434449920,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestComplexExplanations#test2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestComplexExplanations#test2().mjava","sourceNew":"  public void test2() throws Exception {\n    \n    BooleanQuery q = new BooleanQuery();\n\n    PhraseQuery phraseQuery = new PhraseQuery(1, FIELD, \"w1\", \"w2\");\n    q.add(phraseQuery, Occur.MUST);\n    q.add(snear(st(\"w2\"),\n                sor(\"w5\",\"zz\"),\n                4, true),\n          Occur.SHOULD);\n    q.add(snear(sf(\"w3\",2), st(\"w2\"), st(\"w3\"), 5, true),\n          Occur.SHOULD);\n    \n    Query t = new FilteredQuery(new TermQuery(new Term(FIELD, \"xx\")),\n                                new QueryWrapperFilter(matchTheseItems(new int[] {1,3})));\n    t.setBoost(1000);\n    q.add(t, Occur.SHOULD);\n    \n    t = new ConstantScoreQuery(matchTheseItems(new int[] {0,2}));\n    t.setBoost(-20.0f);\n    q.add(t, Occur.SHOULD);\n    \n    DisjunctionMaxQuery dm = new DisjunctionMaxQuery(0.2f);\n    dm.add(snear(st(\"w2\"),\n                 sor(\"w5\",\"zz\"),\n                 4, true));\n    dm.add(new TermQuery(new Term(FIELD, \"QQ\")));\n\n    BooleanQuery xxYYZZ = new BooleanQuery();\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"yy\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"zz\")), Occur.MUST_NOT);\n\n    dm.add(xxYYZZ);\n\n    BooleanQuery xxW1 = new BooleanQuery();\n    xxW1.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.MUST_NOT);\n    xxW1.add(new TermQuery(new Term(FIELD, \"w1\")), Occur.MUST_NOT);\n\n    dm.add(xxW1);\n\n    DisjunctionMaxQuery dm2 = new DisjunctionMaxQuery(0.5f);\n    dm2.add(new TermQuery(new Term(FIELD, \"w1\")));\n    dm2.add(new TermQuery(new Term(FIELD, \"w2\")));\n    dm2.add(new TermQuery(new Term(FIELD, \"w3\")));\n    dm.add(dm2);\n\n    q.add(dm, Occur.SHOULD);\n\n    BooleanQuery b = new BooleanQuery();\n    b.setMinimumNumberShouldMatch(2);\n    b.add(snear(\"w1\",\"w2\",1,true), Occur.SHOULD);\n    b.add(snear(\"w2\",\"w3\",1,true), Occur.SHOULD);\n    b.add(snear(\"w1\",\"w3\",3,true), Occur.SHOULD);\n    b.setBoost(0.0f);\n    \n    q.add(b, Occur.SHOULD);\n    \n    qtest(q, new int[] { 0,1,2 });\n  }\n\n","sourceOld":"  public void test2() throws Exception {\n    \n    BooleanQuery q = new BooleanQuery();\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.setSlop(1);\n    phraseQuery.add(new Term(FIELD, \"w1\"));\n    phraseQuery.add(new Term(FIELD, \"w2\"));\n    q.add(phraseQuery, Occur.MUST);\n    q.add(snear(st(\"w2\"),\n                sor(\"w5\",\"zz\"),\n                4, true),\n          Occur.SHOULD);\n    q.add(snear(sf(\"w3\",2), st(\"w2\"), st(\"w3\"), 5, true),\n          Occur.SHOULD);\n    \n    Query t = new FilteredQuery(new TermQuery(new Term(FIELD, \"xx\")),\n                                new QueryWrapperFilter(matchTheseItems(new int[] {1,3})));\n    t.setBoost(1000);\n    q.add(t, Occur.SHOULD);\n    \n    t = new ConstantScoreQuery(matchTheseItems(new int[] {0,2}));\n    t.setBoost(-20.0f);\n    q.add(t, Occur.SHOULD);\n    \n    DisjunctionMaxQuery dm = new DisjunctionMaxQuery(0.2f);\n    dm.add(snear(st(\"w2\"),\n                 sor(\"w5\",\"zz\"),\n                 4, true));\n    dm.add(new TermQuery(new Term(FIELD, \"QQ\")));\n\n    BooleanQuery xxYYZZ = new BooleanQuery();\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"yy\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"zz\")), Occur.MUST_NOT);\n\n    dm.add(xxYYZZ);\n\n    BooleanQuery xxW1 = new BooleanQuery();\n    xxW1.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.MUST_NOT);\n    xxW1.add(new TermQuery(new Term(FIELD, \"w1\")), Occur.MUST_NOT);\n\n    dm.add(xxW1);\n\n    DisjunctionMaxQuery dm2 = new DisjunctionMaxQuery(0.5f);\n    dm2.add(new TermQuery(new Term(FIELD, \"w1\")));\n    dm2.add(new TermQuery(new Term(FIELD, \"w2\")));\n    dm2.add(new TermQuery(new Term(FIELD, \"w3\")));\n    dm.add(dm2);\n\n    q.add(dm, Occur.SHOULD);\n\n    BooleanQuery b = new BooleanQuery();\n    b.setMinimumNumberShouldMatch(2);\n    b.add(snear(\"w1\",\"w2\",1,true), Occur.SHOULD);\n    b.add(snear(\"w2\",\"w3\",1,true), Occur.SHOULD);\n    b.add(snear(\"w1\",\"w3\",3,true), Occur.SHOULD);\n    b.setBoost(0.0f);\n    \n    q.add(b, Occur.SHOULD);\n    \n    qtest(q, new int[] { 0,1,2 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestComplexExplanations#test2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestComplexExplanations#test2().mjava","sourceNew":"  public void test2() throws Exception {\n    \n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n\n    PhraseQuery phraseQuery = new PhraseQuery(1, FIELD, \"w1\", \"w2\");\n    q.add(phraseQuery, Occur.MUST);\n    q.add(snear(st(\"w2\"),\n                sor(\"w5\",\"zz\"),\n                4, true),\n          Occur.SHOULD);\n    q.add(snear(sf(\"w3\",2), st(\"w2\"), st(\"w3\"), 5, true),\n          Occur.SHOULD);\n    \n    Query t = new FilteredQuery(new TermQuery(new Term(FIELD, \"xx\")),\n                                new QueryWrapperFilter(matchTheseItems(new int[] {1,3})));\n    t.setBoost(1000);\n    q.add(t, Occur.SHOULD);\n    \n    t = new ConstantScoreQuery(matchTheseItems(new int[] {0,2}));\n    t.setBoost(-20.0f);\n    q.add(t, Occur.SHOULD);\n    \n    DisjunctionMaxQuery dm = new DisjunctionMaxQuery(0.2f);\n    dm.add(snear(st(\"w2\"),\n                 sor(\"w5\",\"zz\"),\n                 4, true));\n    dm.add(new TermQuery(new Term(FIELD, \"QQ\")));\n\n    BooleanQuery.Builder xxYYZZ = new BooleanQuery.Builder();;\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"yy\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"zz\")), Occur.MUST_NOT);\n\n    dm.add(xxYYZZ.build());\n\n    BooleanQuery.Builder xxW1 = new BooleanQuery.Builder();;\n    xxW1.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.MUST_NOT);\n    xxW1.add(new TermQuery(new Term(FIELD, \"w1\")), Occur.MUST_NOT);\n\n    dm.add(xxW1.build());\n\n    DisjunctionMaxQuery dm2 = new DisjunctionMaxQuery(0.5f);\n    dm2.add(new TermQuery(new Term(FIELD, \"w1\")));\n    dm2.add(new TermQuery(new Term(FIELD, \"w2\")));\n    dm2.add(new TermQuery(new Term(FIELD, \"w3\")));\n    dm.add(dm2);\n\n    q.add(dm, Occur.SHOULD);\n\n    BooleanQuery.Builder builder = new BooleanQuery.Builder();;\n    builder.setMinimumNumberShouldMatch(2);\n    builder.add(snear(\"w1\",\"w2\",1,true), Occur.SHOULD);\n    builder.add(snear(\"w2\",\"w3\",1,true), Occur.SHOULD);\n    builder.add(snear(\"w1\",\"w3\",3,true), Occur.SHOULD);\n    BooleanQuery b = builder.build(); \n    b.setBoost(0.0f);\n    \n    q.add(b, Occur.SHOULD);\n    \n    qtest(q.build(), new int[] { 0,1,2 });\n  }\n\n","sourceOld":"  public void test2() throws Exception {\n    \n    BooleanQuery q = new BooleanQuery();\n\n    PhraseQuery phraseQuery = new PhraseQuery(1, FIELD, \"w1\", \"w2\");\n    q.add(phraseQuery, Occur.MUST);\n    q.add(snear(st(\"w2\"),\n                sor(\"w5\",\"zz\"),\n                4, true),\n          Occur.SHOULD);\n    q.add(snear(sf(\"w3\",2), st(\"w2\"), st(\"w3\"), 5, true),\n          Occur.SHOULD);\n    \n    Query t = new FilteredQuery(new TermQuery(new Term(FIELD, \"xx\")),\n                                new QueryWrapperFilter(matchTheseItems(new int[] {1,3})));\n    t.setBoost(1000);\n    q.add(t, Occur.SHOULD);\n    \n    t = new ConstantScoreQuery(matchTheseItems(new int[] {0,2}));\n    t.setBoost(-20.0f);\n    q.add(t, Occur.SHOULD);\n    \n    DisjunctionMaxQuery dm = new DisjunctionMaxQuery(0.2f);\n    dm.add(snear(st(\"w2\"),\n                 sor(\"w5\",\"zz\"),\n                 4, true));\n    dm.add(new TermQuery(new Term(FIELD, \"QQ\")));\n\n    BooleanQuery xxYYZZ = new BooleanQuery();\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"yy\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"zz\")), Occur.MUST_NOT);\n\n    dm.add(xxYYZZ);\n\n    BooleanQuery xxW1 = new BooleanQuery();\n    xxW1.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.MUST_NOT);\n    xxW1.add(new TermQuery(new Term(FIELD, \"w1\")), Occur.MUST_NOT);\n\n    dm.add(xxW1);\n\n    DisjunctionMaxQuery dm2 = new DisjunctionMaxQuery(0.5f);\n    dm2.add(new TermQuery(new Term(FIELD, \"w1\")));\n    dm2.add(new TermQuery(new Term(FIELD, \"w2\")));\n    dm2.add(new TermQuery(new Term(FIELD, \"w3\")));\n    dm.add(dm2);\n\n    q.add(dm, Occur.SHOULD);\n\n    BooleanQuery b = new BooleanQuery();\n    b.setMinimumNumberShouldMatch(2);\n    b.add(snear(\"w1\",\"w2\",1,true), Occur.SHOULD);\n    b.add(snear(\"w2\",\"w3\",1,true), Occur.SHOULD);\n    b.add(snear(\"w1\",\"w3\",3,true), Occur.SHOULD);\n    b.setBoost(0.0f);\n    \n    q.add(b, Occur.SHOULD);\n    \n    qtest(q, new int[] { 0,1,2 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1db68e96dd908fcd79ef809095822736aa601d08","date":1434630596,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestComplexExplanations#test2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestComplexExplanations#test2().mjava","sourceNew":"  public void test2() throws Exception {\n    \n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n\n    PhraseQuery phraseQuery = new PhraseQuery(1, FIELD, \"w1\", \"w2\");\n    q.add(phraseQuery, Occur.MUST);\n    q.add(snear(st(\"w2\"),\n                sor(\"w5\",\"zz\"),\n                4, true),\n          Occur.SHOULD);\n    q.add(snear(sf(\"w3\",2), st(\"w2\"), st(\"w3\"), 5, true),\n          Occur.SHOULD);\n    \n    Query t = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(FIELD, \"xx\")), Occur.MUST)\n        .add(matchTheseItems(new int[] {1,3}), Occur.FILTER)\n        .build();\n    t.setBoost(1000);\n    q.add(t, Occur.SHOULD);\n    \n    t = new ConstantScoreQuery(matchTheseItems(new int[] {0,2}));\n    t.setBoost(-20.0f);\n    q.add(t, Occur.SHOULD);\n    \n    DisjunctionMaxQuery dm = new DisjunctionMaxQuery(0.2f);\n    dm.add(snear(st(\"w2\"),\n                 sor(\"w5\",\"zz\"),\n                 4, true));\n    dm.add(new TermQuery(new Term(FIELD, \"QQ\")));\n\n    BooleanQuery.Builder xxYYZZ = new BooleanQuery.Builder();;\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"yy\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"zz\")), Occur.MUST_NOT);\n\n    dm.add(xxYYZZ.build());\n\n    BooleanQuery.Builder xxW1 = new BooleanQuery.Builder();;\n    xxW1.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.MUST_NOT);\n    xxW1.add(new TermQuery(new Term(FIELD, \"w1\")), Occur.MUST_NOT);\n\n    dm.add(xxW1.build());\n\n    DisjunctionMaxQuery dm2 = new DisjunctionMaxQuery(0.5f);\n    dm2.add(new TermQuery(new Term(FIELD, \"w1\")));\n    dm2.add(new TermQuery(new Term(FIELD, \"w2\")));\n    dm2.add(new TermQuery(new Term(FIELD, \"w3\")));\n    dm.add(dm2);\n\n    q.add(dm, Occur.SHOULD);\n\n    BooleanQuery.Builder builder = new BooleanQuery.Builder();;\n    builder.setMinimumNumberShouldMatch(2);\n    builder.add(snear(\"w1\",\"w2\",1,true), Occur.SHOULD);\n    builder.add(snear(\"w2\",\"w3\",1,true), Occur.SHOULD);\n    builder.add(snear(\"w1\",\"w3\",3,true), Occur.SHOULD);\n    BooleanQuery b = builder.build(); \n    b.setBoost(0.0f);\n    \n    q.add(b, Occur.SHOULD);\n    \n    qtest(q.build(), new int[] { 0,1,2 });\n  }\n\n","sourceOld":"  public void test2() throws Exception {\n    \n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n\n    PhraseQuery phraseQuery = new PhraseQuery(1, FIELD, \"w1\", \"w2\");\n    q.add(phraseQuery, Occur.MUST);\n    q.add(snear(st(\"w2\"),\n                sor(\"w5\",\"zz\"),\n                4, true),\n          Occur.SHOULD);\n    q.add(snear(sf(\"w3\",2), st(\"w2\"), st(\"w3\"), 5, true),\n          Occur.SHOULD);\n    \n    Query t = new FilteredQuery(new TermQuery(new Term(FIELD, \"xx\")),\n                                new QueryWrapperFilter(matchTheseItems(new int[] {1,3})));\n    t.setBoost(1000);\n    q.add(t, Occur.SHOULD);\n    \n    t = new ConstantScoreQuery(matchTheseItems(new int[] {0,2}));\n    t.setBoost(-20.0f);\n    q.add(t, Occur.SHOULD);\n    \n    DisjunctionMaxQuery dm = new DisjunctionMaxQuery(0.2f);\n    dm.add(snear(st(\"w2\"),\n                 sor(\"w5\",\"zz\"),\n                 4, true));\n    dm.add(new TermQuery(new Term(FIELD, \"QQ\")));\n\n    BooleanQuery.Builder xxYYZZ = new BooleanQuery.Builder();;\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"yy\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"zz\")), Occur.MUST_NOT);\n\n    dm.add(xxYYZZ.build());\n\n    BooleanQuery.Builder xxW1 = new BooleanQuery.Builder();;\n    xxW1.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.MUST_NOT);\n    xxW1.add(new TermQuery(new Term(FIELD, \"w1\")), Occur.MUST_NOT);\n\n    dm.add(xxW1.build());\n\n    DisjunctionMaxQuery dm2 = new DisjunctionMaxQuery(0.5f);\n    dm2.add(new TermQuery(new Term(FIELD, \"w1\")));\n    dm2.add(new TermQuery(new Term(FIELD, \"w2\")));\n    dm2.add(new TermQuery(new Term(FIELD, \"w3\")));\n    dm.add(dm2);\n\n    q.add(dm, Occur.SHOULD);\n\n    BooleanQuery.Builder builder = new BooleanQuery.Builder();;\n    builder.setMinimumNumberShouldMatch(2);\n    builder.add(snear(\"w1\",\"w2\",1,true), Occur.SHOULD);\n    builder.add(snear(\"w2\",\"w3\",1,true), Occur.SHOULD);\n    builder.add(snear(\"w1\",\"w3\",3,true), Occur.SHOULD);\n    BooleanQuery b = builder.build(); \n    b.setBoost(0.0f);\n    \n    q.add(b, Occur.SHOULD);\n    \n    qtest(q.build(), new int[] { 0,1,2 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestComplexExplanations#test2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestComplexExplanations#test2().mjava","sourceNew":"  public void test2() throws Exception {\n    \n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n\n    PhraseQuery phraseQuery = new PhraseQuery(1, FIELD, \"w1\", \"w2\");\n    q.add(phraseQuery, Occur.MUST);\n    q.add(snear(st(\"w2\"),\n                sor(\"w5\",\"zz\"),\n                4, true),\n          Occur.SHOULD);\n    q.add(snear(sf(\"w3\",2), st(\"w2\"), st(\"w3\"), 5, true),\n          Occur.SHOULD);\n    \n    Query t = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(FIELD, \"xx\")), Occur.MUST)\n        .add(matchTheseItems(new int[] {1,3}), Occur.FILTER)\n        .build();\n    q.add(new BoostQuery(t, 1000), Occur.SHOULD);\n    \n    t = new ConstantScoreQuery(matchTheseItems(new int[] {0,2}));\n    q.add(new BoostQuery(t, -20), Occur.SHOULD);\n    \n    DisjunctionMaxQuery dm = new DisjunctionMaxQuery(0.2f);\n    dm.add(snear(st(\"w2\"),\n                 sor(\"w5\",\"zz\"),\n                 4, true));\n    dm.add(new TermQuery(new Term(FIELD, \"QQ\")));\n\n    BooleanQuery.Builder xxYYZZ = new BooleanQuery.Builder();;\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"yy\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"zz\")), Occur.MUST_NOT);\n\n    dm.add(xxYYZZ.build());\n\n    BooleanQuery.Builder xxW1 = new BooleanQuery.Builder();;\n    xxW1.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.MUST_NOT);\n    xxW1.add(new TermQuery(new Term(FIELD, \"w1\")), Occur.MUST_NOT);\n\n    dm.add(xxW1.build());\n\n    DisjunctionMaxQuery dm2 = new DisjunctionMaxQuery(0.5f);\n    dm2.add(new TermQuery(new Term(FIELD, \"w1\")));\n    dm2.add(new TermQuery(new Term(FIELD, \"w2\")));\n    dm2.add(new TermQuery(new Term(FIELD, \"w3\")));\n    dm.add(dm2);\n\n    q.add(dm, Occur.SHOULD);\n\n    BooleanQuery.Builder builder = new BooleanQuery.Builder();;\n    builder.setMinimumNumberShouldMatch(2);\n    builder.add(snear(\"w1\",\"w2\",1,true), Occur.SHOULD);\n    builder.add(snear(\"w2\",\"w3\",1,true), Occur.SHOULD);\n    builder.add(snear(\"w1\",\"w3\",3,true), Occur.SHOULD);\n    BooleanQuery b = builder.build(); \n    \n    q.add(new BoostQuery(b, 0), Occur.SHOULD);\n    \n    qtest(q.build(), new int[] { 0,1,2 });\n  }\n\n","sourceOld":"  public void test2() throws Exception {\n    \n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n\n    PhraseQuery phraseQuery = new PhraseQuery(1, FIELD, \"w1\", \"w2\");\n    q.add(phraseQuery, Occur.MUST);\n    q.add(snear(st(\"w2\"),\n                sor(\"w5\",\"zz\"),\n                4, true),\n          Occur.SHOULD);\n    q.add(snear(sf(\"w3\",2), st(\"w2\"), st(\"w3\"), 5, true),\n          Occur.SHOULD);\n    \n    Query t = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(FIELD, \"xx\")), Occur.MUST)\n        .add(matchTheseItems(new int[] {1,3}), Occur.FILTER)\n        .build();\n    t.setBoost(1000);\n    q.add(t, Occur.SHOULD);\n    \n    t = new ConstantScoreQuery(matchTheseItems(new int[] {0,2}));\n    t.setBoost(-20.0f);\n    q.add(t, Occur.SHOULD);\n    \n    DisjunctionMaxQuery dm = new DisjunctionMaxQuery(0.2f);\n    dm.add(snear(st(\"w2\"),\n                 sor(\"w5\",\"zz\"),\n                 4, true));\n    dm.add(new TermQuery(new Term(FIELD, \"QQ\")));\n\n    BooleanQuery.Builder xxYYZZ = new BooleanQuery.Builder();;\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"yy\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"zz\")), Occur.MUST_NOT);\n\n    dm.add(xxYYZZ.build());\n\n    BooleanQuery.Builder xxW1 = new BooleanQuery.Builder();;\n    xxW1.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.MUST_NOT);\n    xxW1.add(new TermQuery(new Term(FIELD, \"w1\")), Occur.MUST_NOT);\n\n    dm.add(xxW1.build());\n\n    DisjunctionMaxQuery dm2 = new DisjunctionMaxQuery(0.5f);\n    dm2.add(new TermQuery(new Term(FIELD, \"w1\")));\n    dm2.add(new TermQuery(new Term(FIELD, \"w2\")));\n    dm2.add(new TermQuery(new Term(FIELD, \"w3\")));\n    dm.add(dm2);\n\n    q.add(dm, Occur.SHOULD);\n\n    BooleanQuery.Builder builder = new BooleanQuery.Builder();;\n    builder.setMinimumNumberShouldMatch(2);\n    builder.add(snear(\"w1\",\"w2\",1,true), Occur.SHOULD);\n    builder.add(snear(\"w2\",\"w3\",1,true), Occur.SHOULD);\n    builder.add(snear(\"w1\",\"w3\",3,true), Occur.SHOULD);\n    BooleanQuery b = builder.build(); \n    b.setBoost(0.0f);\n    \n    q.add(b, Occur.SHOULD);\n    \n    qtest(q.build(), new int[] { 0,1,2 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5d3ee590efa5b1f764e8ce985d9125bc97af483","date":1446225158,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestComplexExplanations#test2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestComplexExplanations#test2().mjava","sourceNew":"  public void test2() throws Exception {\n    \n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n\n    PhraseQuery phraseQuery = new PhraseQuery(1, FIELD, \"w1\", \"w2\");\n    q.add(phraseQuery, Occur.MUST);\n    q.add(snear(st(\"w2\"),\n                sor(\"w5\",\"zz\"),\n                4, true),\n          Occur.SHOULD);\n    q.add(snear(sf(\"w3\",2), st(\"w2\"), st(\"w3\"), 5, true),\n          Occur.SHOULD);\n    \n    Query t = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(FIELD, \"xx\")), Occur.MUST)\n        .add(matchTheseItems(new int[] {1,3}), Occur.FILTER)\n        .build();\n    q.add(new BoostQuery(t, 1000), Occur.SHOULD);\n    \n    t = new ConstantScoreQuery(matchTheseItems(new int[] {0,2}));\n    q.add(new BoostQuery(t, -20), Occur.SHOULD);\n    \n    List<Query> disjuncts = new ArrayList<>();\n    disjuncts.add(snear(st(\"w2\"),\n                 sor(\"w5\",\"zz\"),\n                 4, true));\n    disjuncts.add(new TermQuery(new Term(FIELD, \"QQ\")));\n\n    BooleanQuery.Builder xxYYZZ = new BooleanQuery.Builder();;\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"yy\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"zz\")), Occur.MUST_NOT);\n\n    disjuncts.add(xxYYZZ.build());\n\n    BooleanQuery.Builder xxW1 = new BooleanQuery.Builder();;\n    xxW1.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.MUST_NOT);\n    xxW1.add(new TermQuery(new Term(FIELD, \"w1\")), Occur.MUST_NOT);\n\n    disjuncts.add(xxW1.build());\n\n    DisjunctionMaxQuery dm2 = new DisjunctionMaxQuery(\n        Arrays.asList(\n            new TermQuery(new Term(FIELD, \"w1\")),\n            new TermQuery(new Term(FIELD, \"w2\")),\n            new TermQuery(new Term(FIELD, \"w3\"))),\n        0.5f);\n    disjuncts.add(dm2);\n\n    q.add(new DisjunctionMaxQuery(disjuncts, 0.2f), Occur.SHOULD);\n\n    BooleanQuery.Builder builder = new BooleanQuery.Builder();;\n    builder.setMinimumNumberShouldMatch(2);\n    builder.add(snear(\"w1\",\"w2\",1,true), Occur.SHOULD);\n    builder.add(snear(\"w2\",\"w3\",1,true), Occur.SHOULD);\n    builder.add(snear(\"w1\",\"w3\",3,true), Occur.SHOULD);\n    BooleanQuery b = builder.build(); \n    \n    q.add(new BoostQuery(b, 0), Occur.SHOULD);\n    \n    qtest(q.build(), new int[] { 0,1,2 });\n  }\n\n","sourceOld":"  public void test2() throws Exception {\n    \n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n\n    PhraseQuery phraseQuery = new PhraseQuery(1, FIELD, \"w1\", \"w2\");\n    q.add(phraseQuery, Occur.MUST);\n    q.add(snear(st(\"w2\"),\n                sor(\"w5\",\"zz\"),\n                4, true),\n          Occur.SHOULD);\n    q.add(snear(sf(\"w3\",2), st(\"w2\"), st(\"w3\"), 5, true),\n          Occur.SHOULD);\n    \n    Query t = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(FIELD, \"xx\")), Occur.MUST)\n        .add(matchTheseItems(new int[] {1,3}), Occur.FILTER)\n        .build();\n    q.add(new BoostQuery(t, 1000), Occur.SHOULD);\n    \n    t = new ConstantScoreQuery(matchTheseItems(new int[] {0,2}));\n    q.add(new BoostQuery(t, -20), Occur.SHOULD);\n    \n    DisjunctionMaxQuery dm = new DisjunctionMaxQuery(0.2f);\n    dm.add(snear(st(\"w2\"),\n                 sor(\"w5\",\"zz\"),\n                 4, true));\n    dm.add(new TermQuery(new Term(FIELD, \"QQ\")));\n\n    BooleanQuery.Builder xxYYZZ = new BooleanQuery.Builder();;\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"yy\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"zz\")), Occur.MUST_NOT);\n\n    dm.add(xxYYZZ.build());\n\n    BooleanQuery.Builder xxW1 = new BooleanQuery.Builder();;\n    xxW1.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.MUST_NOT);\n    xxW1.add(new TermQuery(new Term(FIELD, \"w1\")), Occur.MUST_NOT);\n\n    dm.add(xxW1.build());\n\n    DisjunctionMaxQuery dm2 = new DisjunctionMaxQuery(0.5f);\n    dm2.add(new TermQuery(new Term(FIELD, \"w1\")));\n    dm2.add(new TermQuery(new Term(FIELD, \"w2\")));\n    dm2.add(new TermQuery(new Term(FIELD, \"w3\")));\n    dm.add(dm2);\n\n    q.add(dm, Occur.SHOULD);\n\n    BooleanQuery.Builder builder = new BooleanQuery.Builder();;\n    builder.setMinimumNumberShouldMatch(2);\n    builder.add(snear(\"w1\",\"w2\",1,true), Occur.SHOULD);\n    builder.add(snear(\"w2\",\"w3\",1,true), Occur.SHOULD);\n    builder.add(snear(\"w1\",\"w3\",3,true), Occur.SHOULD);\n    BooleanQuery b = builder.build(); \n    \n    q.add(new BoostQuery(b, 0), Occur.SHOULD);\n    \n    qtest(q.build(), new int[] { 0,1,2 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb","date":1512565563,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestComplexExplanations#test2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestComplexExplanations#test2().mjava","sourceNew":"  public void test2() throws Exception {\n    \n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n\n    PhraseQuery phraseQuery = new PhraseQuery(1, FIELD, \"w1\", \"w2\");\n    q.add(phraseQuery, Occur.MUST);\n    q.add(snear(st(\"w2\"),\n                sor(\"w5\",\"zz\"),\n                4, true),\n          Occur.SHOULD);\n    q.add(snear(sf(\"w3\",2), st(\"w2\"), st(\"w3\"), 5, true),\n          Occur.SHOULD);\n    \n    Query t = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(FIELD, \"xx\")), Occur.MUST)\n        .add(matchTheseItems(new int[] {1,3}), Occur.FILTER)\n        .build();\n    q.add(new BoostQuery(t, 1000), Occur.SHOULD);\n    \n    t = new ConstantScoreQuery(matchTheseItems(new int[] {0,2}));\n    q.add(new BoostQuery(t, 20), Occur.SHOULD);\n    \n    List<Query> disjuncts = new ArrayList<>();\n    disjuncts.add(snear(st(\"w2\"),\n                 sor(\"w5\",\"zz\"),\n                 4, true));\n    disjuncts.add(new TermQuery(new Term(FIELD, \"QQ\")));\n\n    BooleanQuery.Builder xxYYZZ = new BooleanQuery.Builder();;\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"yy\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"zz\")), Occur.MUST_NOT);\n\n    disjuncts.add(xxYYZZ.build());\n\n    BooleanQuery.Builder xxW1 = new BooleanQuery.Builder();;\n    xxW1.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.MUST_NOT);\n    xxW1.add(new TermQuery(new Term(FIELD, \"w1\")), Occur.MUST_NOT);\n\n    disjuncts.add(xxW1.build());\n\n    DisjunctionMaxQuery dm2 = new DisjunctionMaxQuery(\n        Arrays.asList(\n            new TermQuery(new Term(FIELD, \"w1\")),\n            new TermQuery(new Term(FIELD, \"w2\")),\n            new TermQuery(new Term(FIELD, \"w3\"))),\n        0.5f);\n    disjuncts.add(dm2);\n\n    q.add(new DisjunctionMaxQuery(disjuncts, 0.2f), Occur.SHOULD);\n\n    BooleanQuery.Builder builder = new BooleanQuery.Builder();;\n    builder.setMinimumNumberShouldMatch(2);\n    builder.add(snear(\"w1\",\"w2\",1,true), Occur.SHOULD);\n    builder.add(snear(\"w2\",\"w3\",1,true), Occur.SHOULD);\n    builder.add(snear(\"w1\",\"w3\",3,true), Occur.SHOULD);\n    BooleanQuery b = builder.build(); \n    \n    q.add(new BoostQuery(b, 0), Occur.SHOULD);\n    \n    qtest(q.build(), new int[] { 0,1,2 });\n  }\n\n","sourceOld":"  public void test2() throws Exception {\n    \n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n\n    PhraseQuery phraseQuery = new PhraseQuery(1, FIELD, \"w1\", \"w2\");\n    q.add(phraseQuery, Occur.MUST);\n    q.add(snear(st(\"w2\"),\n                sor(\"w5\",\"zz\"),\n                4, true),\n          Occur.SHOULD);\n    q.add(snear(sf(\"w3\",2), st(\"w2\"), st(\"w3\"), 5, true),\n          Occur.SHOULD);\n    \n    Query t = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(FIELD, \"xx\")), Occur.MUST)\n        .add(matchTheseItems(new int[] {1,3}), Occur.FILTER)\n        .build();\n    q.add(new BoostQuery(t, 1000), Occur.SHOULD);\n    \n    t = new ConstantScoreQuery(matchTheseItems(new int[] {0,2}));\n    q.add(new BoostQuery(t, -20), Occur.SHOULD);\n    \n    List<Query> disjuncts = new ArrayList<>();\n    disjuncts.add(snear(st(\"w2\"),\n                 sor(\"w5\",\"zz\"),\n                 4, true));\n    disjuncts.add(new TermQuery(new Term(FIELD, \"QQ\")));\n\n    BooleanQuery.Builder xxYYZZ = new BooleanQuery.Builder();;\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"yy\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"zz\")), Occur.MUST_NOT);\n\n    disjuncts.add(xxYYZZ.build());\n\n    BooleanQuery.Builder xxW1 = new BooleanQuery.Builder();;\n    xxW1.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.MUST_NOT);\n    xxW1.add(new TermQuery(new Term(FIELD, \"w1\")), Occur.MUST_NOT);\n\n    disjuncts.add(xxW1.build());\n\n    DisjunctionMaxQuery dm2 = new DisjunctionMaxQuery(\n        Arrays.asList(\n            new TermQuery(new Term(FIELD, \"w1\")),\n            new TermQuery(new Term(FIELD, \"w2\")),\n            new TermQuery(new Term(FIELD, \"w3\"))),\n        0.5f);\n    disjuncts.add(dm2);\n\n    q.add(new DisjunctionMaxQuery(disjuncts, 0.2f), Occur.SHOULD);\n\n    BooleanQuery.Builder builder = new BooleanQuery.Builder();;\n    builder.setMinimumNumberShouldMatch(2);\n    builder.add(snear(\"w1\",\"w2\",1,true), Occur.SHOULD);\n    builder.add(snear(\"w2\",\"w3\",1,true), Occur.SHOULD);\n    builder.add(snear(\"w1\",\"w3\",3,true), Occur.SHOULD);\n    BooleanQuery b = builder.build(); \n    \n    q.add(new BoostQuery(b, 0), Occur.SHOULD);\n    \n    qtest(q.build(), new int[] { 0,1,2 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["e9e1499c5d26c936238506df90a3c02c76707722"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","87fab14adebb5b490363c9bc05f747938bd15e6a"],"1db68e96dd908fcd79ef809095822736aa601d08":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"e9e1499c5d26c936238506df90a3c02c76707722":["9fb0efe75e5c6021561f115dfe334b74786364ba"],"784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb":["a5d3ee590efa5b1f764e8ce985d9125bc97af483"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a5d3ee590efa5b1f764e8ce985d9125bc97af483":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["1db68e96dd908fcd79ef809095822736aa601d08"],"9fb0efe75e5c6021561f115dfe334b74786364ba":["87fab14adebb5b490363c9bc05f747938bd15e6a"],"87fab14adebb5b490363c9bc05f747938bd15e6a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["1db68e96dd908fcd79ef809095822736aa601d08"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"1db68e96dd908fcd79ef809095822736aa601d08":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"e9e1499c5d26c936238506df90a3c02c76707722":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","87fab14adebb5b490363c9bc05f747938bd15e6a"],"784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a5d3ee590efa5b1f764e8ce985d9125bc97af483":["784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["a5d3ee590efa5b1f764e8ce985d9125bc97af483"],"9fb0efe75e5c6021561f115dfe334b74786364ba":["e9e1499c5d26c936238506df90a3c02c76707722"],"87fab14adebb5b490363c9bc05f747938bd15e6a":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9fb0efe75e5c6021561f115dfe334b74786364ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}