{"path":"src/test/org/apache/lucene/search/TestRangeQuery#testExclusive().mjava","commits":[{"id":"9c868e2098a42d4cd7242fbf3f4f9ad498d1e711","date":1064089774,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestRangeQuery#testExclusive().mjava","pathOld":"/dev/null","sourceNew":"  public void testExclusive() throws Exception {\n    Directory dir = new RAMDirectory();\n    Query query = new RangeQuery(new Term(\"content\", \"A\"), new Term(\"content\", \"C\"), false);\n    Hits hits = null;\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    addDoc(writer, \"A\");\n    addDoc(writer, \"B\");\n    addDoc(writer, \"C\");\n    addDoc(writer, \"D\");\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(dir);\n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    searcher.close();\n\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    addDoc(writer, \"A\");\n    addDoc(writer, \"B\");\n    addDoc(writer, \"D\");\n    writer.close();\n\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    searcher.close();\n\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n    addDoc(writer, \"C\");\n    writer.close();\n\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    searcher.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f57518d231d7541b3ca7b0220b7bffdc07c2173","date":1064092361,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestRangeQuery#testExclusive().mjava","pathOld":"src/test/org/apache/lucene/search/TestRangeQuery#testExclusive().mjava","sourceNew":"  public void testExclusive() throws Exception {\n    Query query = new RangeQuery(new Term(\"content\", \"A\"),\n                                 new Term(\"content\", \"C\"),\n                                 false);\n    initializeIndex(new String[] {\"A\", \"B\", \"C\", \"D\"});\n    IndexSearcher searcher = new IndexSearcher(dir);\n    Hits hits = searcher.search(query);\n    assertEquals(\"A,B,C,D, only B in range\", 1, hits.length());\n    searcher.close();\n\n    initializeIndex(new String[] {\"A\", \"B\", \"D\"});\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(query);\n    assertEquals(\"A,B,D, only B in range\", 1, hits.length());\n    searcher.close();\n\n    addDoc(\"C\");\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(query);\n    assertEquals(\"C added, still only B in range\", 1, hits.length());\n    searcher.close();\n  }\n\n","sourceOld":"  public void testExclusive() throws Exception {\n    Directory dir = new RAMDirectory();\n    Query query = new RangeQuery(new Term(\"content\", \"A\"), new Term(\"content\", \"C\"), false);\n    Hits hits = null;\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    addDoc(writer, \"A\");\n    addDoc(writer, \"B\");\n    addDoc(writer, \"C\");\n    addDoc(writer, \"D\");\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(dir);\n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    searcher.close();\n\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    addDoc(writer, \"A\");\n    addDoc(writer, \"B\");\n    addDoc(writer, \"D\");\n    writer.close();\n\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    searcher.close();\n\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n    addDoc(writer, \"C\");\n    writer.close();\n\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestRangeQuery#testExclusive().mjava","pathOld":"src/test/org/apache/lucene/search/TestRangeQuery#testExclusive().mjava","sourceNew":"  public void testExclusive() throws Exception {\n    Query query = new RangeQuery(new Term(\"content\", \"A\"),\n                                 new Term(\"content\", \"C\"),\n                                 false);\n    initializeIndex(new String[] {\"A\", \"B\", \"C\", \"D\"});\n    IndexSearcher searcher = new IndexSearcher(dir);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,C,D, only B in range\", 1, hits.length);\n    searcher.close();\n\n    initializeIndex(new String[] {\"A\", \"B\", \"D\"});\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,D, only B in range\", 1, hits.length);\n    searcher.close();\n\n    addDoc(\"C\");\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"C added, still only B in range\", 1, hits.length);\n    searcher.close();\n  }\n\n","sourceOld":"  public void testExclusive() throws Exception {\n    Query query = new RangeQuery(new Term(\"content\", \"A\"),\n                                 new Term(\"content\", \"C\"),\n                                 false);\n    initializeIndex(new String[] {\"A\", \"B\", \"C\", \"D\"});\n    IndexSearcher searcher = new IndexSearcher(dir);\n    Hits hits = searcher.search(query);\n    assertEquals(\"A,B,C,D, only B in range\", 1, hits.length());\n    searcher.close();\n\n    initializeIndex(new String[] {\"A\", \"B\", \"D\"});\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(query);\n    assertEquals(\"A,B,D, only B in range\", 1, hits.length());\n    searcher.close();\n\n    addDoc(\"C\");\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(query);\n    assertEquals(\"C added, still only B in range\", 1, hits.length());\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f7a11eba51d213f09b96054111cf56a1e5796a3","date":1226364000,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestRangeQuery#testExclusive().mjava","pathOld":"src/test/org/apache/lucene/search/TestRangeQuery#testExclusive().mjava","sourceNew":"  public void testExclusive() throws Exception {\n    Query query = new RangeQuery(\"content\", \"A\", \"C\", false, false);\n    initializeIndex(new String[] {\"A\", \"B\", \"C\", \"D\"});\n    IndexSearcher searcher = new IndexSearcher(dir);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,C,D, only B in range\", 1, hits.length);\n    searcher.close();\n\n    initializeIndex(new String[] {\"A\", \"B\", \"D\"});\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,D, only B in range\", 1, hits.length);\n    searcher.close();\n\n    addDoc(\"C\");\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"C added, still only B in range\", 1, hits.length);\n    searcher.close();\n  }\n\n","sourceOld":"  public void testExclusive() throws Exception {\n    Query query = new RangeQuery(new Term(\"content\", \"A\"),\n                                 new Term(\"content\", \"C\"),\n                                 false);\n    initializeIndex(new String[] {\"A\", \"B\", \"C\", \"D\"});\n    IndexSearcher searcher = new IndexSearcher(dir);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,C,D, only B in range\", 1, hits.length);\n    searcher.close();\n\n    initializeIndex(new String[] {\"A\", \"B\", \"D\"});\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,D, only B in range\", 1, hits.length);\n    searcher.close();\n\n    addDoc(\"C\");\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"C added, still only B in range\", 1, hits.length);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f612096ab5275c4821d05f126bf45a89f4782b8","date":1246738452,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermRangeQuery#testExclusive().mjava","pathOld":"src/test/org/apache/lucene/search/TestRangeQuery#testExclusive().mjava","sourceNew":"  public void testExclusive() throws Exception {\n    Query query = new TermRangeQuery(\"content\", \"A\", \"C\", false, false);\n    initializeIndex(new String[] {\"A\", \"B\", \"C\", \"D\"});\n    IndexSearcher searcher = new IndexSearcher(dir);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,C,D, only B in range\", 1, hits.length);\n    searcher.close();\n\n    initializeIndex(new String[] {\"A\", \"B\", \"D\"});\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,D, only B in range\", 1, hits.length);\n    searcher.close();\n\n    addDoc(\"C\");\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"C added, still only B in range\", 1, hits.length);\n    searcher.close();\n  }\n\n","sourceOld":"  public void testExclusive() throws Exception {\n    Query query = new RangeQuery(\"content\", \"A\", \"C\", false, false);\n    initializeIndex(new String[] {\"A\", \"B\", \"C\", \"D\"});\n    IndexSearcher searcher = new IndexSearcher(dir);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,C,D, only B in range\", 1, hits.length);\n    searcher.close();\n\n    initializeIndex(new String[] {\"A\", \"B\", \"D\"});\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,D, only B in range\", 1, hits.length);\n    searcher.close();\n\n    addDoc(\"C\");\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"C added, still only B in range\", 1, hits.length);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f57518d231d7541b3ca7b0220b7bffdc07c2173":["9c868e2098a42d4cd7242fbf3f4f9ad498d1e711"],"9c868e2098a42d4cd7242fbf3f4f9ad498d1e711":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f612096ab5275c4821d05f126bf45a89f4782b8":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["3f57518d231d7541b3ca7b0220b7bffdc07c2173"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["5af07783dbc171e26a694c4f7d735e30c2769faa"]},"commit2Childs":{"3f57518d231d7541b3ca7b0220b7bffdc07c2173":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"9c868e2098a42d4cd7242fbf3f4f9ad498d1e711":["3f57518d231d7541b3ca7b0220b7bffdc07c2173"],"0f612096ab5275c4821d05f126bf45a89f4782b8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9c868e2098a42d4cd7242fbf3f4f9ad498d1e711"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}