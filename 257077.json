{"path":"solr/core/src/java/org/apache/solr/search/QParser#QParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#QParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/QParser#QParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Constructor for the QParser\n   * @param qstr The part of the query string specific to this parser\n   * @param localParams The set of parameters that are specific to this QParser.  See http://wiki.apache.org/solr/LocalParams\n   * @param params The rest of the {@link org.apache.solr.common.params.SolrParams}\n   * @param req The original {@link org.apache.solr.request.SolrQueryRequest}.\n   */\n  public QParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    this.qstr = qstr;\n    this.localParams = localParams;\n\n    // insert tags into tagmap.\n    // WARNING: the internal representation of tagged objects in the request context is\n    // experimental and subject to change!\n    if (localParams != null) {\n      String tagStr = localParams.get(CommonParams.TAG);\n      if (tagStr != null) {\n        Map<Object,Object> context = req.getContext();\n        @SuppressWarnings(\"unchecked\")\n        Map<Object,Collection<Object>> tagMap = (Map<Object, Collection<Object>>)req.getContext().get(\"tags\");\n        if (tagMap == null) {\n          tagMap = new HashMap<Object,Collection<Object>>();\n          context.put(\"tags\", tagMap);          \n        }\n        if (tagStr.indexOf(',') >= 0) {\n          List<String> tags = StrUtils.splitSmart(tagStr, ',');\n          for (String tag : tags) {\n            addTag(tagMap, tag, this);\n          }\n        } else {\n          addTag(tagMap, tagStr, this);\n        }\n      }\n    }\n\n    this.params = params;\n    this.req = req;\n  }\n\n","sourceOld":"  /**\n   * Constructor for the QParser\n   * @param qstr The part of the query string specific to this parser\n   * @param localParams The set of parameters that are specific to this QParser.  See http://wiki.apache.org/solr/LocalParams\n   * @param params The rest of the {@link org.apache.solr.common.params.SolrParams}\n   * @param req The original {@link org.apache.solr.request.SolrQueryRequest}.\n   */\n  public QParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    this.qstr = qstr;\n    this.localParams = localParams;\n\n    // insert tags into tagmap.\n    // WARNING: the internal representation of tagged objects in the request context is\n    // experimental and subject to change!\n    if (localParams != null) {\n      String tagStr = localParams.get(CommonParams.TAG);\n      if (tagStr != null) {\n        Map<Object,Object> context = req.getContext();\n        @SuppressWarnings(\"unchecked\")\n        Map<Object,Collection<Object>> tagMap = (Map<Object, Collection<Object>>)req.getContext().get(\"tags\");\n        if (tagMap == null) {\n          tagMap = new HashMap<Object,Collection<Object>>();\n          context.put(\"tags\", tagMap);          \n        }\n        if (tagStr.indexOf(',') >= 0) {\n          List<String> tags = StrUtils.splitSmart(tagStr, ',');\n          for (String tag : tags) {\n            addTag(tagMap, tag, this);\n          }\n        } else {\n          addTag(tagMap, tagStr, this);\n        }\n      }\n    }\n\n    this.params = params;\n    this.req = req;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#QParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/QParser#QParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Constructor for the QParser\n   * @param qstr The part of the query string specific to this parser\n   * @param localParams The set of parameters that are specific to this QParser.  See http://wiki.apache.org/solr/LocalParams\n   * @param params The rest of the {@link org.apache.solr.common.params.SolrParams}\n   * @param req The original {@link org.apache.solr.request.SolrQueryRequest}.\n   */\n  public QParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    this.qstr = qstr;\n    this.localParams = localParams;\n\n    // insert tags into tagmap.\n    // WARNING: the internal representation of tagged objects in the request context is\n    // experimental and subject to change!\n    if (localParams != null) {\n      String tagStr = localParams.get(CommonParams.TAG);\n      if (tagStr != null) {\n        Map<Object,Object> context = req.getContext();\n        @SuppressWarnings(\"unchecked\")\n        Map<Object,Collection<Object>> tagMap = (Map<Object, Collection<Object>>)req.getContext().get(\"tags\");\n        if (tagMap == null) {\n          tagMap = new HashMap<Object,Collection<Object>>();\n          context.put(\"tags\", tagMap);          \n        }\n        if (tagStr.indexOf(',') >= 0) {\n          List<String> tags = StrUtils.splitSmart(tagStr, ',');\n          for (String tag : tags) {\n            addTag(tagMap, tag, this);\n          }\n        } else {\n          addTag(tagMap, tagStr, this);\n        }\n      }\n    }\n\n    this.params = params;\n    this.req = req;\n  }\n\n","sourceOld":"  /**\n   * Constructor for the QParser\n   * @param qstr The part of the query string specific to this parser\n   * @param localParams The set of parameters that are specific to this QParser.  See http://wiki.apache.org/solr/LocalParams\n   * @param params The rest of the {@link org.apache.solr.common.params.SolrParams}\n   * @param req The original {@link org.apache.solr.request.SolrQueryRequest}.\n   */\n  public QParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    this.qstr = qstr;\n    this.localParams = localParams;\n\n    // insert tags into tagmap.\n    // WARNING: the internal representation of tagged objects in the request context is\n    // experimental and subject to change!\n    if (localParams != null) {\n      String tagStr = localParams.get(CommonParams.TAG);\n      if (tagStr != null) {\n        Map<Object,Object> context = req.getContext();\n        @SuppressWarnings(\"unchecked\")\n        Map<Object,Collection<Object>> tagMap = (Map<Object, Collection<Object>>)req.getContext().get(\"tags\");\n        if (tagMap == null) {\n          tagMap = new HashMap<Object,Collection<Object>>();\n          context.put(\"tags\", tagMap);          \n        }\n        if (tagStr.indexOf(',') >= 0) {\n          List<String> tags = StrUtils.splitSmart(tagStr, ',');\n          for (String tag : tags) {\n            addTag(tagMap, tag, this);\n          }\n        } else {\n          addTag(tagMap, tagStr, this);\n        }\n      }\n    }\n\n    this.params = params;\n    this.req = req;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#QParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/QParser#QParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Constructor for the QParser\n   * @param qstr The part of the query string specific to this parser\n   * @param localParams The set of parameters that are specific to this QParser.  See http://wiki.apache.org/solr/LocalParams\n   * @param params The rest of the {@link org.apache.solr.common.params.SolrParams}\n   * @param req The original {@link org.apache.solr.request.SolrQueryRequest}.\n   */\n  public QParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    this.qstr = qstr;\n    this.localParams = localParams;\n\n    // insert tags into tagmap.\n    // WARNING: the internal representation of tagged objects in the request context is\n    // experimental and subject to change!\n    if (localParams != null) {\n      String tagStr = localParams.get(CommonParams.TAG);\n      if (tagStr != null) {\n        Map<Object,Object> context = req.getContext();\n        @SuppressWarnings(\"unchecked\")\n        Map<Object,Collection<Object>> tagMap = (Map<Object, Collection<Object>>)req.getContext().get(\"tags\");\n        if (tagMap == null) {\n          tagMap = new HashMap<Object,Collection<Object>>();\n          context.put(\"tags\", tagMap);          \n        }\n        if (tagStr.indexOf(',') >= 0) {\n          List<String> tags = StrUtils.splitSmart(tagStr, ',');\n          for (String tag : tags) {\n            addTag(tagMap, tag, this);\n          }\n        } else {\n          addTag(tagMap, tagStr, this);\n        }\n      }\n    }\n\n    this.params = params;\n    this.req = req;\n  }\n\n","sourceOld":"  /**\n   * Constructor for the QParser\n   * @param qstr The part of the query string specific to this parser\n   * @param localParams The set of parameters that are specific to this QParser.  See http://wiki.apache.org/solr/LocalParams\n   * @param params The rest of the {@link org.apache.solr.common.params.SolrParams}\n   * @param req The original {@link org.apache.solr.request.SolrQueryRequest}.\n   */\n  public QParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    this.qstr = qstr;\n    this.localParams = localParams;\n\n    // insert tags into tagmap.\n    // WARNING: the internal representation of tagged objects in the request context is\n    // experimental and subject to change!\n    if (localParams != null) {\n      String tagStr = localParams.get(CommonParams.TAG);\n      if (tagStr != null) {\n        Map<Object,Object> context = req.getContext();\n        @SuppressWarnings(\"unchecked\")\n        Map<Object,Collection<Object>> tagMap = (Map<Object, Collection<Object>>)req.getContext().get(\"tags\");\n        if (tagMap == null) {\n          tagMap = new HashMap<Object,Collection<Object>>();\n          context.put(\"tags\", tagMap);          \n        }\n        if (tagStr.indexOf(',') >= 0) {\n          List<String> tags = StrUtils.splitSmart(tagStr, ',');\n          for (String tag : tags) {\n            addTag(tagMap, tag, this);\n          }\n        } else {\n          addTag(tagMap, tagStr, this);\n        }\n      }\n    }\n\n    this.params = params;\n    this.req = req;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#QParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QParser#QParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Constructor for the QParser\n   * @param qstr The part of the query string specific to this parser\n   * @param localParams The set of parameters that are specific to this QParser.  See http://wiki.apache.org/solr/LocalParams\n   * @param params The rest of the {@link org.apache.solr.common.params.SolrParams}\n   * @param req The original {@link org.apache.solr.request.SolrQueryRequest}.\n   */\n  public QParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    this.qstr = qstr;\n    this.localParams = localParams;\n\n    // insert tags into tagmap.\n    // WARNING: the internal representation of tagged objects in the request context is\n    // experimental and subject to change!\n    if (localParams != null) {\n      String tagStr = localParams.get(CommonParams.TAG);\n      if (tagStr != null) {\n        Map<Object,Object> context = req.getContext();\n        @SuppressWarnings(\"unchecked\")\n        Map<Object,Collection<Object>> tagMap = (Map<Object, Collection<Object>>)req.getContext().get(\"tags\");\n        if (tagMap == null) {\n          tagMap = new HashMap<Object,Collection<Object>>();\n          context.put(\"tags\", tagMap);          \n        }\n        if (tagStr.indexOf(',') >= 0) {\n          List<String> tags = StrUtils.splitSmart(tagStr, ',');\n          for (String tag : tags) {\n            addTag(tagMap, tag, this);\n          }\n        } else {\n          addTag(tagMap, tagStr, this);\n        }\n      }\n    }\n\n    this.params = params;\n    this.req = req;\n  }\n\n","sourceOld":"  /**\n   * Constructor for the QParser\n   * @param qstr The part of the query string specific to this parser\n   * @param localParams The set of parameters that are specific to this QParser.  See http://wiki.apache.org/solr/LocalParams\n   * @param params The rest of the {@link org.apache.solr.common.params.SolrParams}\n   * @param req The original {@link org.apache.solr.request.SolrQueryRequest}.\n   */\n  public QParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    this.qstr = qstr;\n    this.localParams = localParams;\n\n    // insert tags into tagmap.\n    // WARNING: the internal representation of tagged objects in the request context is\n    // experimental and subject to change!\n    if (localParams != null) {\n      String tagStr = localParams.get(CommonParams.TAG);\n      if (tagStr != null) {\n        Map<Object,Object> context = req.getContext();\n        @SuppressWarnings(\"unchecked\")\n        Map<Object,Collection<Object>> tagMap = (Map<Object, Collection<Object>>)req.getContext().get(\"tags\");\n        if (tagMap == null) {\n          tagMap = new HashMap<Object,Collection<Object>>();\n          context.put(\"tags\", tagMap);          \n        }\n        if (tagStr.indexOf(',') >= 0) {\n          List<String> tags = StrUtils.splitSmart(tagStr, ',');\n          for (String tag : tags) {\n            addTag(tagMap, tag, this);\n          }\n        } else {\n          addTag(tagMap, tagStr, this);\n        }\n      }\n    }\n\n    this.params = params;\n    this.req = req;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#QParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QParser#QParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Constructor for the QParser\n   * @param qstr The part of the query string specific to this parser\n   * @param localParams The set of parameters that are specific to this QParser.  See http://wiki.apache.org/solr/LocalParams\n   * @param params The rest of the {@link org.apache.solr.common.params.SolrParams}\n   * @param req The original {@link org.apache.solr.request.SolrQueryRequest}.\n   */\n  public QParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    this.qstr = qstr;\n    this.localParams = localParams;\n\n    // insert tags into tagmap.\n    // WARNING: the internal representation of tagged objects in the request context is\n    // experimental and subject to change!\n    if (localParams != null) {\n      String tagStr = localParams.get(CommonParams.TAG);\n      if (tagStr != null) {\n        Map<Object,Object> context = req.getContext();\n        @SuppressWarnings(\"unchecked\")\n        Map<Object,Collection<Object>> tagMap = (Map<Object, Collection<Object>>)req.getContext().get(\"tags\");\n        if (tagMap == null) {\n          tagMap = new HashMap<Object,Collection<Object>>();\n          context.put(\"tags\", tagMap);          \n        }\n        if (tagStr.indexOf(',') >= 0) {\n          List<String> tags = StrUtils.splitSmart(tagStr, ',');\n          for (String tag : tags) {\n            addTag(tagMap, tag, this);\n          }\n        } else {\n          addTag(tagMap, tagStr, this);\n        }\n      }\n    }\n\n    this.params = params;\n    this.req = req;\n  }\n\n","sourceOld":"  /**\n   * Constructor for the QParser\n   * @param qstr The part of the query string specific to this parser\n   * @param localParams The set of parameters that are specific to this QParser.  See http://wiki.apache.org/solr/LocalParams\n   * @param params The rest of the {@link org.apache.solr.common.params.SolrParams}\n   * @param req The original {@link org.apache.solr.request.SolrQueryRequest}.\n   */\n  public QParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    this.qstr = qstr;\n    this.localParams = localParams;\n\n    // insert tags into tagmap.\n    // WARNING: the internal representation of tagged objects in the request context is\n    // experimental and subject to change!\n    if (localParams != null) {\n      String tagStr = localParams.get(CommonParams.TAG);\n      if (tagStr != null) {\n        Map<Object,Object> context = req.getContext();\n        @SuppressWarnings(\"unchecked\")\n        Map<Object,Collection<Object>> tagMap = (Map<Object, Collection<Object>>)req.getContext().get(\"tags\");\n        if (tagMap == null) {\n          tagMap = new HashMap<Object,Collection<Object>>();\n          context.put(\"tags\", tagMap);          \n        }\n        if (tagStr.indexOf(',') >= 0) {\n          List<String> tags = StrUtils.splitSmart(tagStr, ',');\n          for (String tag : tags) {\n            addTag(tagMap, tag, this);\n          }\n        } else {\n          addTag(tagMap, tagStr, this);\n        }\n      }\n    }\n\n    this.params = params;\n    this.req = req;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#QParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QParser#QParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Constructor for the QParser\n   * @param qstr The part of the query string specific to this parser\n   * @param localParams The set of parameters that are specific to this QParser.  See http://wiki.apache.org/solr/LocalParams\n   * @param params The rest of the {@link org.apache.solr.common.params.SolrParams}\n   * @param req The original {@link org.apache.solr.request.SolrQueryRequest}.\n   */\n  public QParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    this.qstr = qstr;\n    this.localParams = localParams;\n\n    // insert tags into tagmap.\n    // WARNING: the internal representation of tagged objects in the request context is\n    // experimental and subject to change!\n    if (localParams != null) {\n      String tagStr = localParams.get(CommonParams.TAG);\n      if (tagStr != null) {\n        Map<Object,Object> context = req.getContext();\n        @SuppressWarnings(\"unchecked\")\n        Map<Object,Collection<Object>> tagMap = (Map<Object, Collection<Object>>)req.getContext().get(\"tags\");\n        if (tagMap == null) {\n          tagMap = new HashMap<>();\n          context.put(\"tags\", tagMap);          \n        }\n        if (tagStr.indexOf(',') >= 0) {\n          List<String> tags = StrUtils.splitSmart(tagStr, ',');\n          for (String tag : tags) {\n            addTag(tagMap, tag, this);\n          }\n        } else {\n          addTag(tagMap, tagStr, this);\n        }\n      }\n    }\n\n    this.params = params;\n    this.req = req;\n  }\n\n","sourceOld":"  /**\n   * Constructor for the QParser\n   * @param qstr The part of the query string specific to this parser\n   * @param localParams The set of parameters that are specific to this QParser.  See http://wiki.apache.org/solr/LocalParams\n   * @param params The rest of the {@link org.apache.solr.common.params.SolrParams}\n   * @param req The original {@link org.apache.solr.request.SolrQueryRequest}.\n   */\n  public QParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    this.qstr = qstr;\n    this.localParams = localParams;\n\n    // insert tags into tagmap.\n    // WARNING: the internal representation of tagged objects in the request context is\n    // experimental and subject to change!\n    if (localParams != null) {\n      String tagStr = localParams.get(CommonParams.TAG);\n      if (tagStr != null) {\n        Map<Object,Object> context = req.getContext();\n        @SuppressWarnings(\"unchecked\")\n        Map<Object,Collection<Object>> tagMap = (Map<Object, Collection<Object>>)req.getContext().get(\"tags\");\n        if (tagMap == null) {\n          tagMap = new HashMap<Object,Collection<Object>>();\n          context.put(\"tags\", tagMap);          \n        }\n        if (tagStr.indexOf(',') >= 0) {\n          List<String> tags = StrUtils.splitSmart(tagStr, ',');\n          for (String tag : tags) {\n            addTag(tagMap, tag, this);\n          }\n        } else {\n          addTag(tagMap, tagStr, this);\n        }\n      }\n    }\n\n    this.params = params;\n    this.req = req;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["c26f00b574427b55127e869b935845554afde1fa","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}