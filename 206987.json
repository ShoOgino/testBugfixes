{"path":"solr/core/src/java/org/apache/solr/logging/jul/JulWatcher#registerListener(ListenerConfig,CoreContainer).mjava","commits":[{"id":"829761a123d59d7a3c39e5f13fbc03de63f55ce5","date":1334686329,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/logging/jul/JulWatcher#registerListener(ListenerConfig,CoreContainer).mjava","pathOld":"/dev/null","sourceNew":"  @Override\r\n  public void registerListener(ListenerConfig cfg, CoreContainer container) {\r\n    if(history!=null) {\r\n      throw new IllegalStateException(\"History already registered\");\r\n    }\r\n    history = new CircularList<LogRecord>(cfg.size);\r\n    handler = new RecordHandler(this);\r\n    if(cfg.threshold != null) {\r\n      handler.setLevel(Level.parse(cfg.threshold));\r\n    }\r\n    else {\r\n      handler.setLevel(Level.WARNING);\r\n    }\r\n    \r\n    Logger log = LogManager.getLogManager().getLogger(\"\");\r\n    log.addHandler(handler);\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d681ca1a1c487b2501ef9bde8602a65c4c717a46","date":1346078839,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/logging/jul/JulWatcher#registerListener(ListenerConfig,CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/logging/jul/JulWatcher#registerListener(ListenerConfig,CoreContainer).mjava","sourceNew":"  @Override\n  public void registerListener(ListenerConfig cfg, CoreContainer container) {\n    if(history!=null) {\n      throw new IllegalStateException(\"History already registered\");\n    }\n    history = new CircularList<LogRecord>(cfg.size);\n    handler = new RecordHandler(this);\n    if(cfg.threshold != null) {\n      handler.setLevel(Level.parse(cfg.threshold));\n    }\n    else {\n      handler.setLevel(Level.WARNING);\n    }\n    \n    Logger log = LogManager.getLogManager().getLogger(\"\");\n    log.addHandler(handler);\n  }\n\n","sourceOld":"  @Override\r\n  public void registerListener(ListenerConfig cfg, CoreContainer container) {\r\n    if(history!=null) {\r\n      throw new IllegalStateException(\"History already registered\");\r\n    }\r\n    history = new CircularList<LogRecord>(cfg.size);\r\n    handler = new RecordHandler(this);\r\n    if(cfg.threshold != null) {\r\n      handler.setLevel(Level.parse(cfg.threshold));\r\n    }\r\n    else {\r\n      handler.setLevel(Level.WARNING);\r\n    }\r\n    \r\n    Logger log = LogManager.getLogManager().getLogger(\"\");\r\n    log.addHandler(handler);\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/logging/jul/JulWatcher#registerListener(ListenerConfig,CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/logging/jul/JulWatcher#registerListener(ListenerConfig,CoreContainer).mjava","sourceNew":"  @Override\n  public void registerListener(ListenerConfig cfg, CoreContainer container) {\n    if(history!=null) {\n      throw new IllegalStateException(\"History already registered\");\n    }\n    history = new CircularList<LogRecord>(cfg.size);\n    handler = new RecordHandler(this);\n    if(cfg.threshold != null) {\n      handler.setLevel(Level.parse(cfg.threshold));\n    }\n    else {\n      handler.setLevel(Level.WARNING);\n    }\n    \n    Logger log = LogManager.getLogManager().getLogger(\"\");\n    log.addHandler(handler);\n  }\n\n","sourceOld":"  @Override\r\n  public void registerListener(ListenerConfig cfg, CoreContainer container) {\r\n    if(history!=null) {\r\n      throw new IllegalStateException(\"History already registered\");\r\n    }\r\n    history = new CircularList<LogRecord>(cfg.size);\r\n    handler = new RecordHandler(this);\r\n    if(cfg.threshold != null) {\r\n      handler.setLevel(Level.parse(cfg.threshold));\r\n    }\r\n    else {\r\n      handler.setLevel(Level.WARNING);\r\n    }\r\n    \r\n    Logger log = LogManager.getLogManager().getLogger(\"\");\r\n    log.addHandler(handler);\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a757d77b8686d261b25acf542b0037bf65d8fa","date":1367436352,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/logging/jul/JulWatcher#registerListener(ListenerConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/logging/jul/JulWatcher#registerListener(ListenerConfig,CoreContainer).mjava","sourceNew":"  @Override\n  public void registerListener(ListenerConfig cfg) {\n    if(history!=null) {\n      throw new IllegalStateException(\"History already registered\");\n    }\n    history = new CircularList<LogRecord>(cfg.size);\n    handler = new RecordHandler(this);\n    if(cfg.threshold != null) {\n      handler.setLevel(Level.parse(cfg.threshold));\n    }\n    else {\n      handler.setLevel(Level.WARNING);\n    }\n    \n    Logger log = LogManager.getLogManager().getLogger(\"\");\n    log.addHandler(handler);\n  }\n\n","sourceOld":"  @Override\n  public void registerListener(ListenerConfig cfg, CoreContainer container) {\n    if(history!=null) {\n      throw new IllegalStateException(\"History already registered\");\n    }\n    history = new CircularList<LogRecord>(cfg.size);\n    handler = new RecordHandler(this);\n    if(cfg.threshold != null) {\n      handler.setLevel(Level.parse(cfg.threshold));\n    }\n    else {\n      handler.setLevel(Level.WARNING);\n    }\n    \n    Logger log = LogManager.getLogManager().getLogger(\"\");\n    log.addHandler(handler);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d681ca1a1c487b2501ef9bde8602a65c4c717a46":["829761a123d59d7a3c39e5f13fbc03de63f55ce5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a757d77b8686d261b25acf542b0037bf65d8fa":["d681ca1a1c487b2501ef9bde8602a65c4c717a46"],"829761a123d59d7a3c39e5f13fbc03de63f55ce5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["829761a123d59d7a3c39e5f13fbc03de63f55ce5","d681ca1a1c487b2501ef9bde8602a65c4c717a46"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["85a757d77b8686d261b25acf542b0037bf65d8fa"]},"commit2Childs":{"d681ca1a1c487b2501ef9bde8602a65c4c717a46":["85a757d77b8686d261b25acf542b0037bf65d8fa","05a14b2611ead08655a2b2bdc61632eb31316e57"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["829761a123d59d7a3c39e5f13fbc03de63f55ce5"],"829761a123d59d7a3c39e5f13fbc03de63f55ce5":["d681ca1a1c487b2501ef9bde8602a65c4c717a46","05a14b2611ead08655a2b2bdc61632eb31316e57"],"85a757d77b8686d261b25acf542b0037bf65d8fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}