{"path":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/server/registry/TestFeedRegistry#testRegisterComponent().mjava","commits":[{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/server/registry/TestFeedRegistry#testRegisterComponent().mjava","pathOld":"contrib/gdata-server/src/test/org/apache/lucene/gdata/server/registry/TestFeedRegistry#testRegisterComponent().mjava","sourceNew":"    public void testRegisterComponent() throws RegistryException {\n        try {\n            this.reg.registerComponent(StorageController.class, null);\n            fail(\"RegistryException expected\");\n        } catch (RegistryException e) {\n            //\n        }\n        new GDataRequestListener();\n        try {\n            this.reg.registerComponent(StorageCoreController.class, null);\n            fail(\"no config\");\n        } catch (Exception e) {\n            // TODO: handle exception\n        }\n        this.reg.registerComponent(DefaultRequestHandlerFactory.class, null);\n        RequestHandlerFactory factory = this.reg.lookup(\n                RequestHandlerFactory.class,\n                ComponentType.REQUESTHANDLERFACTORY);\n        try {\n            this.reg\n                    .registerComponent(DefaultRequestHandlerFactory.class, null);\n            fail(\"RegistryException expected\");\n        } catch (RegistryException e) {\n            //\n        }\n        this.reg.registerComponent(ServiceFactory.class, null);\n        ServiceFactory servicefactory = this.reg.lookup(ServiceFactory.class,\n                ComponentType.SERVICEFACTORY);\n        assertNotNull(servicefactory);\n        assertNotNull(factory);\n    }\n\n","sourceOld":"    public void testRegisterComponent() throws RegistryException {\n        try {\n            this.reg.registerComponent(StorageController.class, null);\n            fail(\"RegistryException expected\");\n        } catch (RegistryException e) {\n            //\n        }\n        new GDataRequestListener();\n        try {\n            this.reg.registerComponent(StorageCoreController.class, null);\n            fail(\"no config\");\n        } catch (Exception e) {\n            // TODO: handle exception\n        }\n        this.reg.registerComponent(DefaultRequestHandlerFactory.class, null);\n        RequestHandlerFactory factory = this.reg.lookup(\n                RequestHandlerFactory.class,\n                ComponentType.REQUESTHANDLERFACTORY);\n        try {\n            this.reg\n                    .registerComponent(DefaultRequestHandlerFactory.class, null);\n            fail(\"RegistryException expected\");\n        } catch (RegistryException e) {\n            //\n        }\n        this.reg.registerComponent(ServiceFactory.class, null);\n        ServiceFactory servicefactory = this.reg.lookup(ServiceFactory.class,\n                ComponentType.SERVICEFACTORY);\n        assertNotNull(servicefactory);\n        assertNotNull(factory);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/src/test/org/apache/lucene/gdata/server/registry/TestFeedRegistry#testRegisterComponent().mjava","pathOld":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/server/registry/TestFeedRegistry#testRegisterComponent().mjava","sourceNew":"    public void testRegisterComponent() throws RegistryException {\n        try {\n            this.reg.registerComponent(StorageController.class, null);\n            fail(\"RegistryException expected\");\n        } catch (RegistryException e) {\n            //\n        }\n        new GDataRequestListener();\n        try {\n            this.reg.registerComponent(StorageCoreController.class, null);\n            fail(\"no config\");\n        } catch (Exception e) {\n            // TODO: handle exception\n        }\n        this.reg.registerComponent(DefaultRequestHandlerFactory.class, null);\n        RequestHandlerFactory factory = this.reg.lookup(\n                RequestHandlerFactory.class,\n                ComponentType.REQUESTHANDLERFACTORY);\n        try {\n            this.reg\n                    .registerComponent(DefaultRequestHandlerFactory.class, null);\n            fail(\"RegistryException expected\");\n        } catch (RegistryException e) {\n            //\n        }\n        this.reg.registerComponent(ServiceFactory.class, null);\n        ServiceFactory servicefactory = this.reg.lookup(ServiceFactory.class,\n                ComponentType.SERVICEFACTORY);\n        assertNotNull(servicefactory);\n        assertNotNull(factory);\n    }\n\n","sourceOld":"    public void testRegisterComponent() throws RegistryException {\n        try {\n            this.reg.registerComponent(StorageController.class, null);\n            fail(\"RegistryException expected\");\n        } catch (RegistryException e) {\n            //\n        }\n        new GDataRequestListener();\n        try {\n            this.reg.registerComponent(StorageCoreController.class, null);\n            fail(\"no config\");\n        } catch (Exception e) {\n            // TODO: handle exception\n        }\n        this.reg.registerComponent(DefaultRequestHandlerFactory.class, null);\n        RequestHandlerFactory factory = this.reg.lookup(\n                RequestHandlerFactory.class,\n                ComponentType.REQUESTHANDLERFACTORY);\n        try {\n            this.reg\n                    .registerComponent(DefaultRequestHandlerFactory.class, null);\n            fail(\"RegistryException expected\");\n        } catch (RegistryException e) {\n            //\n        }\n        this.reg.registerComponent(ServiceFactory.class, null);\n        ServiceFactory servicefactory = this.reg.lookup(ServiceFactory.class,\n                ComponentType.SERVICEFACTORY);\n        assertNotNull(servicefactory);\n        assertNotNull(factory);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}