{"path":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriterImpl#startDoc(int,int).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriterImpl#startDoc(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Adds a new doc in this term.  If this returns null\n   *  then we just skip consuming positions/payloads. */\n  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n\n    final int delta = docID - lastDocID;\n    \n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" )\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n    lastDocID = docID;\n    if (omitTermFreqAndPositions) {\n      freqOut.writeVInt(delta);\n    } else if (1 == termDocFreq) {\n      freqOut.writeVInt((delta<<1) | 1);\n    } else {\n      freqOut.writeVInt(delta<<1);\n      freqOut.writeVInt(termDocFreq);\n    }\n\n    lastPosition = 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99cf56f3a650b908f7017a72f9d23940418f8a52","date":1284891529,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriterImpl#startDoc(int,int).mjava","sourceNew":"  /** Adds a new doc in this term.  If this returns null\n   *  then we just skip consuming positions/payloads. */\n  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n\n    final int delta = docID - lastDocID;\n    \n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" )\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n    lastDocID = docID;\n    if (omitTermFreqAndPositions) {\n      freqOut.writeVInt(delta);\n    } else if (1 == termDocFreq) {\n      freqOut.writeVInt((delta<<1) | 1);\n    } else {\n      freqOut.writeVInt(delta<<1);\n      freqOut.writeVInt(termDocFreq);\n    }\n\n    lastPosition = 0;\n  }\n\n","sourceOld":"  /** Adds a new doc in this term.  If this returns null\n   *  then we just skip consuming positions/payloads. */\n  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n\n    final int delta = docID - lastDocID;\n    \n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" )\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n    lastDocID = docID;\n    if (omitTermFreqAndPositions) {\n      freqOut.writeVInt(delta);\n    } else if (1 == termDocFreq) {\n      freqOut.writeVInt((delta<<1) | 1);\n    } else {\n      freqOut.writeVInt(delta<<1);\n      freqOut.writeVInt(termDocFreq);\n    }\n\n    lastPosition = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriterImpl#startDoc(int,int).mjava","sourceNew":"  /** Adds a new doc in this term.  If this returns null\n   *  then we just skip consuming positions/payloads. */\n  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n\n    final int delta = docID - lastDocID;\n    \n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" )\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n    lastDocID = docID;\n    if (omitTermFreqAndPositions) {\n      freqOut.writeVInt(delta);\n    } else if (1 == termDocFreq) {\n      freqOut.writeVInt((delta<<1) | 1);\n    } else {\n      freqOut.writeVInt(delta<<1);\n      freqOut.writeVInt(termDocFreq);\n    }\n\n    lastPosition = 0;\n  }\n\n","sourceOld":"  /** Adds a new doc in this term.  If this returns null\n   *  then we just skip consuming positions/payloads. */\n  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n\n    final int delta = docID - lastDocID;\n    \n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" )\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n    lastDocID = docID;\n    if (omitTermFreqAndPositions) {\n      freqOut.writeVInt(delta);\n    } else if (1 == termDocFreq) {\n      freqOut.writeVInt((delta<<1) | 1);\n    } else {\n      freqOut.writeVInt(delta<<1);\n      freqOut.writeVInt(termDocFreq);\n    }\n\n    lastPosition = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","99cf56f3a650b908f7017a72f9d23940418f8a52"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["99cf56f3a650b908f7017a72f9d23940418f8a52"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","99cf56f3a650b908f7017a72f9d23940418f8a52"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"99cf56f3a650b908f7017a72f9d23940418f8a52":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}