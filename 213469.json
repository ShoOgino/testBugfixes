{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration.TestTriggerListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration.TestTriggerListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public synchronized void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName,\n                                     ActionContext context, Throwable error, String message) {\n      List<CapturedEvent> lst = listenerEvents.computeIfAbsent(config.name, s -> new ArrayList<>());\n      lst.add(new CapturedEvent(cluster.getTimeSource().getTime(), context, config, stage, actionName, event, message));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4412883c12067d8a4e2a354aa8adc58c32be1d6","date":1521129281,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration.TestTriggerListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration.TestTriggerListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","sourceNew":"    @Override\n    public synchronized void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName,\n                                     ActionContext context, Throwable error, String message) {\n      List<CapturedEvent> lst = listenerEvents.computeIfAbsent(config.name, s -> new ArrayList<>());\n      lst.add(new CapturedEvent(cluster.getTimeSource().getTimeNs(), context, config, stage, actionName, event, message));\n    }\n\n","sourceOld":"    @Override\n    public synchronized void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName,\n                                     ActionContext context, Throwable error, String message) {\n      List<CapturedEvent> lst = listenerEvents.computeIfAbsent(config.name, s -> new ArrayList<>());\n      lst.add(new CapturedEvent(cluster.getTimeSource().getTime(), context, config, stage, actionName, event, message));\n    }\n\n","bugFix":null,"bugIntro":["25d862725cffd5d4d62fd002b5dc320f92c53365"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"25d862725cffd5d4d62fd002b5dc320f92c53365","date":1534448650,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration.TestTriggerListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration.TestTriggerListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","sourceNew":"    @Override\n    public synchronized void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName,\n                                     ActionContext context, Throwable error, String message) {\n      List<CapturedEvent> lst = listenerEvents.computeIfAbsent(config.name, s -> new ArrayList<>());\n      CapturedEvent ev = new CapturedEvent(cluster.getTimeSource().getTimeNs(), context, config, stage, actionName, event, message);\n      lst.add(ev);\n      allListenerEvents.add(ev);\n    }\n\n","sourceOld":"    @Override\n    public synchronized void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName,\n                                     ActionContext context, Throwable error, String message) {\n      List<CapturedEvent> lst = listenerEvents.computeIfAbsent(config.name, s -> new ArrayList<>());\n      lst.add(new CapturedEvent(cluster.getTimeSource().getTimeNs(), context, config, stage, actionName, event, message));\n    }\n\n","bugFix":["d4412883c12067d8a4e2a354aa8adc58c32be1d6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration.TestTriggerListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration.TestTriggerListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","sourceNew":"    @Override\n    public synchronized void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName,\n                                     ActionContext context, Throwable error, String message) {\n      List<CapturedEvent> lst = listenerEvents.computeIfAbsent(config.name, s -> new ArrayList<>());\n      CapturedEvent ev = new CapturedEvent(cluster.getTimeSource().getTimeNs(), context, config, stage, actionName, event, message);\n      lst.add(ev);\n      allListenerEvents.add(ev);\n    }\n\n","sourceOld":"    @Override\n    public synchronized void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName,\n                                     ActionContext context, Throwable error, String message) {\n      List<CapturedEvent> lst = listenerEvents.computeIfAbsent(config.name, s -> new ArrayList<>());\n      CapturedEvent ev = new CapturedEvent(cluster.getTimeSource().getTimeNs(), context, config, stage, actionName, event, message);\n      lst.add(ev);\n      allListenerEvents.add(ev);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["25d862725cffd5d4d62fd002b5dc320f92c53365"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d4412883c12067d8a4e2a354aa8adc58c32be1d6":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"25d862725cffd5d4d62fd002b5dc320f92c53365":["d4412883c12067d8a4e2a354aa8adc58c32be1d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6a5c1c40529f15b445e6720dfde1967e139bff1"]},"commit2Childs":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"d4412883c12067d8a4e2a354aa8adc58c32be1d6":["25d862725cffd5d4d62fd002b5dc320f92c53365"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["d4412883c12067d8a4e2a354aa8adc58c32be1d6"],"25d862725cffd5d4d62fd002b5dc320f92c53365":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}