{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#[T-extends-Throwable]_expectThrowsAnyOf(List[Class[#-extends-T]],ThrowingRunnable).mjava","commits":[{"id":"f3adea0022cffaaa592081efed775a7b8bf86b51","date":1532414870,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#[T-extends-Throwable]_expectThrowsAnyOf(List[Class[#-extends-T]],ThrowingRunnable).mjava","pathOld":"/dev/null","sourceNew":"  /** Checks a specific exception class is thrown by the given runnable, and returns it. */\n  public static <T extends Throwable> T expectThrowsAnyOf(List<Class<? extends T>> expectedTypes, ThrowingRunnable runnable) {\n    if (expectedTypes.isEmpty()) {\n      throw new AssertionError(\"At least one expected exception type is required?\");\n    }\n\n    Throwable thrown = null;\n    try {\n      runnable.run();\n    } catch (Throwable e) {\n      for (Class<? extends T> expectedType : expectedTypes) {\n        if (expectedType.isInstance(e)) {\n          return expectedType.cast(e);\n        }\n      }\n      thrown = e;\n    }\n\n    List<String> exceptionTypes = expectedTypes.stream().map(c -> c.getSimpleName()).collect(Collectors.toList());\n\n    if (thrown != null) {\n      AssertionFailedError assertion = new AssertionFailedError(\"Unexpected exception type, expected any of \" +\n          exceptionTypes +\n          \" but got: \" + thrown);\n      assertion.initCause(thrown);\n      throw assertion;\n    } else {\n      throw new AssertionFailedError(\"Expected any of the following exception types: \" +\n          exceptionTypes+ \" but no exception was thrown.\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d592ac9e6400869a47757802651c715b4e88219","date":1570470117,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#[T-extends-Throwable]_expectThrowsAnyOf(List[Class[#-extends-T]],ThrowingRunnable).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#[T-extends-Throwable]_expectThrowsAnyOf(List[Class[#-extends-T]],ThrowingRunnable).mjava","sourceNew":"  /** Checks a specific exception class is thrown by the given runnable, and returns it. */\n  public static <T extends Throwable> T expectThrowsAnyOf(List<Class<? extends T>> expectedTypes, ThrowingRunnable runnable) {\n    if (expectedTypes.isEmpty()) {\n      throw new AssertionError(\"At least one expected exception type is required?\");\n    }\n\n    final Throwable thrown = _expectThrows(expectedTypes, runnable);\n    if (null != thrown) {\n      for (Class<? extends T> expectedType : expectedTypes) {\n        if (expectedType.isInstance(thrown)) {\n          return expectedType.cast(thrown);\n        }\n      }\n    }\n\n    List<String> exceptionTypes = expectedTypes.stream().map(c -> c.getSimpleName()).collect(Collectors.toList());\n\n    if (thrown != null) {\n      AssertionFailedError assertion = new AssertionFailedError(\"Unexpected exception type, expected any of \" +\n          exceptionTypes +\n          \" but got: \" + thrown);\n      assertion.initCause(thrown);\n      throw assertion;\n    } else {\n      throw new AssertionFailedError(\"Expected any of the following exception types: \" +\n          exceptionTypes+ \" but no exception was thrown.\");\n    }\n  }\n\n","sourceOld":"  /** Checks a specific exception class is thrown by the given runnable, and returns it. */\n  public static <T extends Throwable> T expectThrowsAnyOf(List<Class<? extends T>> expectedTypes, ThrowingRunnable runnable) {\n    if (expectedTypes.isEmpty()) {\n      throw new AssertionError(\"At least one expected exception type is required?\");\n    }\n\n    Throwable thrown = null;\n    try {\n      runnable.run();\n    } catch (Throwable e) {\n      for (Class<? extends T> expectedType : expectedTypes) {\n        if (expectedType.isInstance(e)) {\n          return expectedType.cast(e);\n        }\n      }\n      thrown = e;\n    }\n\n    List<String> exceptionTypes = expectedTypes.stream().map(c -> c.getSimpleName()).collect(Collectors.toList());\n\n    if (thrown != null) {\n      AssertionFailedError assertion = new AssertionFailedError(\"Unexpected exception type, expected any of \" +\n          exceptionTypes +\n          \" but got: \" + thrown);\n      assertion.initCause(thrown);\n      throw assertion;\n    } else {\n      throw new AssertionFailedError(\"Expected any of the following exception types: \" +\n          exceptionTypes+ \" but no exception was thrown.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#[T-extends-Throwable]_expectThrowsAnyOf(List[Class[#-extends-T]],ThrowingRunnable).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#[T-extends-Throwable]_expectThrowsAnyOf(List[Class[#-extends-T]],ThrowingRunnable).mjava","sourceNew":"  /** Checks a specific exception class is thrown by the given runnable, and returns it. */\n  public static <T extends Throwable> T expectThrowsAnyOf(List<Class<? extends T>> expectedTypes, ThrowingRunnable runnable) {\n    if (expectedTypes.isEmpty()) {\n      throw new AssertionError(\"At least one expected exception type is required?\");\n    }\n\n    final Throwable thrown = _expectThrows(expectedTypes, runnable);\n    if (null != thrown) {\n      for (Class<? extends T> expectedType : expectedTypes) {\n        if (expectedType.isInstance(thrown)) {\n          return expectedType.cast(thrown);\n        }\n      }\n    }\n\n    List<String> exceptionTypes = expectedTypes.stream().map(c -> c.getSimpleName()).collect(Collectors.toList());\n\n    if (thrown != null) {\n      AssertionFailedError assertion = new AssertionFailedError(\"Unexpected exception type, expected any of \" +\n          exceptionTypes +\n          \" but got: \" + thrown);\n      assertion.initCause(thrown);\n      throw assertion;\n    } else {\n      throw new AssertionFailedError(\"Expected any of the following exception types: \" +\n          exceptionTypes+ \" but no exception was thrown.\");\n    }\n  }\n\n","sourceOld":"  /** Checks a specific exception class is thrown by the given runnable, and returns it. */\n  public static <T extends Throwable> T expectThrowsAnyOf(List<Class<? extends T>> expectedTypes, ThrowingRunnable runnable) {\n    if (expectedTypes.isEmpty()) {\n      throw new AssertionError(\"At least one expected exception type is required?\");\n    }\n\n    Throwable thrown = null;\n    try {\n      runnable.run();\n    } catch (Throwable e) {\n      for (Class<? extends T> expectedType : expectedTypes) {\n        if (expectedType.isInstance(e)) {\n          return expectedType.cast(e);\n        }\n      }\n      thrown = e;\n    }\n\n    List<String> exceptionTypes = expectedTypes.stream().map(c -> c.getSimpleName()).collect(Collectors.toList());\n\n    if (thrown != null) {\n      AssertionFailedError assertion = new AssertionFailedError(\"Unexpected exception type, expected any of \" +\n          exceptionTypes +\n          \" but got: \" + thrown);\n      assertion.initCause(thrown);\n      throw assertion;\n    } else {\n      throw new AssertionFailedError(\"Expected any of the following exception types: \" +\n          exceptionTypes+ \" but no exception was thrown.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8d592ac9e6400869a47757802651c715b4e88219":["f3adea0022cffaaa592081efed775a7b8bf86b51"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f3adea0022cffaaa592081efed775a7b8bf86b51":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8d592ac9e6400869a47757802651c715b4e88219"],"b0b597c65628ca9e73913a07e81691f8229bae35":["f3adea0022cffaaa592081efed775a7b8bf86b51","8d592ac9e6400869a47757802651c715b4e88219"]},"commit2Childs":{"8d592ac9e6400869a47757802651c715b4e88219":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f3adea0022cffaaa592081efed775a7b8bf86b51"],"f3adea0022cffaaa592081efed775a7b8bf86b51":["8d592ac9e6400869a47757802651c715b4e88219","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}