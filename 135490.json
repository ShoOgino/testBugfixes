{"path":"src/test/org/apache/lucene/search/TestWildcard#assertMatches(IndexSearcher,Query,int).mjava","commits":[{"id":"dca593206e9e07eee9839b23d0c0b435915af416","date":1046539941,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestWildcard#assertMatches(IndexSearcher,Query,int).mjava","pathOld":"/dev/null","sourceNew":"    private void assertMatches(IndexSearcher searcher, Query q, int expectedMatches)\n\tthrows IOException\n    {\n\tHits result = searcher.search(q);\n\tassertEquals(expectedMatches, result.length());\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fb70d5d797131bf722eac86615eae787b5af9ea","date":1112363464,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestWildcard#assertMatches(IndexSearcher,Query,int).mjava","pathOld":"src/test/org/apache/lucene/search/TestWildcard#assertMatches(IndexSearcher,Query,int).mjava","sourceNew":"  private void assertMatches(IndexSearcher searcher, Query q, int expectedMatches)\n      throws IOException {\n    Hits result = searcher.search(q);\n    assertEquals(expectedMatches, result.length());\n  }\n\n","sourceOld":"    private void assertMatches(IndexSearcher searcher, Query q, int expectedMatches)\n\tthrows IOException\n    {\n\tHits result = searcher.search(q);\n\tassertEquals(expectedMatches, result.length());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestWildcard#assertMatches(IndexSearcher,Query,int).mjava","pathOld":"src/test/org/apache/lucene/search/TestWildcard#assertMatches(IndexSearcher,Query,int).mjava","sourceNew":"  private void assertMatches(IndexSearcher searcher, Query q, int expectedMatches)\n      throws IOException {\n    ScoreDoc[] result = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(expectedMatches, result.length);\n  }\n\n","sourceOld":"  private void assertMatches(IndexSearcher searcher, Query q, int expectedMatches)\n      throws IOException {\n    Hits result = searcher.search(q);\n    assertEquals(expectedMatches, result.length());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#assertMatches(IndexSearcher,Query,int).mjava","pathOld":"src/test/org/apache/lucene/search/TestWildcard#assertMatches(IndexSearcher,Query,int).mjava","sourceNew":"  private void assertMatches(IndexSearcher searcher, Query q, int expectedMatches)\n      throws IOException {\n    ScoreDoc[] result = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(expectedMatches, result.length);\n  }\n\n","sourceOld":"  private void assertMatches(IndexSearcher searcher, Query q, int expectedMatches)\n      throws IOException {\n    ScoreDoc[] result = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(expectedMatches, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1fb70d5d797131bf722eac86615eae787b5af9ea":["dca593206e9e07eee9839b23d0c0b435915af416"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["1fb70d5d797131bf722eac86615eae787b5af9ea"],"dca593206e9e07eee9839b23d0c0b435915af416":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["5af07783dbc171e26a694c4f7d735e30c2769faa"]},"commit2Childs":{"1fb70d5d797131bf722eac86615eae787b5af9ea":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dca593206e9e07eee9839b23d0c0b435915af416"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"dca593206e9e07eee9839b23d0c0b435915af416":["1fb70d5d797131bf722eac86615eae787b5af9ea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}