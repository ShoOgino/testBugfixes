{"path":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#refreshTerms().mjava","commits":[{"id":"84f20f331d8001864545c7021812d8c6509c7593","date":1517216128,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#refreshTerms().mjava","pathOld":"/dev/null","sourceNew":"  /**\r\n   * Fetch latest terms from ZK\r\n   */\r\n  public void refreshTerms() {\r\n    Terms newTerms;\r\n    try {\r\n      Stat stat = new Stat();\r\n      byte[] data = zkClient.getData(znodePath, null, stat, true);\r\n      newTerms = new Terms((Map<String, Long>) Utils.fromJSON(data), stat.getVersion());\r\n    } catch (KeeperException e) {\r\n      Thread.interrupted();\r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error updating shard term for collection:\" + collection, e);\r\n    } catch (InterruptedException e) {\r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error updating shard term for collection:\" + collection, e);\r\n    }\r\n\r\n    setNewTerms(newTerms);\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fdaba0a5669b9525668d79c41f87bb5c067c03e4","date":1521113339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#refreshTerms().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#refreshTerms().mjava","sourceNew":"  /**\r\n   * Fetch latest terms from ZK\r\n   */\r\n  public void refreshTerms() {\r\n    Terms newTerms;\r\n    try {\r\n      Stat stat = new Stat();\r\n      byte[] data = zkClient.getData(znodePath, null, stat, true);\r\n      newTerms = new Terms((Map<String, Long>) Utils.fromJSON(data), stat.getVersion());\r\n    } catch (KeeperException e) {\r\n      Thread.interrupted();\r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error updating shard term for collection: \" + collection, e);\r\n    } catch (InterruptedException e) {\r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error updating shard term for collection: \" + collection, e);\r\n    }\r\n\r\n    setNewTerms(newTerms);\r\n  }\r\n\n","sourceOld":"  /**\r\n   * Fetch latest terms from ZK\r\n   */\r\n  public void refreshTerms() {\r\n    Terms newTerms;\r\n    try {\r\n      Stat stat = new Stat();\r\n      byte[] data = zkClient.getData(znodePath, null, stat, true);\r\n      newTerms = new Terms((Map<String, Long>) Utils.fromJSON(data), stat.getVersion());\r\n    } catch (KeeperException e) {\r\n      Thread.interrupted();\r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error updating shard term for collection:\" + collection, e);\r\n    } catch (InterruptedException e) {\r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error updating shard term for collection:\" + collection, e);\r\n    }\r\n\r\n    setNewTerms(newTerms);\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6cc501b75cbd5d0319284563cdd20aff857ee6","date":1575346594,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#refreshTerms().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#refreshTerms().mjava","sourceNew":"  /**\r\n   * Fetch latest terms from ZK\r\n   */\r\n  public void refreshTerms() {\r\n    ShardTerms newTerms;\r\n    try {\r\n      Stat stat = new Stat();\r\n      byte[] data = zkClient.getData(znodePath, null, stat, true);\r\n      newTerms = new ShardTerms((Map<String, Long>) Utils.fromJSON(data), stat.getVersion());\r\n    } catch (KeeperException e) {\r\n      Thread.interrupted();\r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error updating shard term for collection: \" + collection, e);\r\n    } catch (InterruptedException e) {\r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error updating shard term for collection: \" + collection, e);\r\n    }\r\n\r\n    setNewTerms(newTerms);\r\n  }\r\n\n","sourceOld":"  /**\r\n   * Fetch latest terms from ZK\r\n   */\r\n  public void refreshTerms() {\r\n    Terms newTerms;\r\n    try {\r\n      Stat stat = new Stat();\r\n      byte[] data = zkClient.getData(znodePath, null, stat, true);\r\n      newTerms = new Terms((Map<String, Long>) Utils.fromJSON(data), stat.getVersion());\r\n    } catch (KeeperException e) {\r\n      Thread.interrupted();\r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error updating shard term for collection: \" + collection, e);\r\n    } catch (InterruptedException e) {\r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error updating shard term for collection: \" + collection, e);\r\n    }\r\n\r\n    setNewTerms(newTerms);\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3aa683bba99315838c968fefedf3d74f44aa993","date":1575395112,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#refreshTerms().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#refreshTerms().mjava","sourceNew":"  /**\r\n   * Fetch latest terms from ZK\r\n   */\r\n  public void refreshTerms() {\r\n    ShardTerms newTerms;\r\n    try {\r\n      Stat stat = new Stat();\r\n      byte[] data = zkClient.getData(znodePath, null, stat, true);\r\n      newTerms = new ShardTerms((Map<String, Long>) Utils.fromJSON(data), stat.getVersion());\r\n    } catch (KeeperException e) {\r\n      Thread.interrupted();\r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error updating shard term for collection: \" + collection, e);\r\n    } catch (InterruptedException e) {\r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error updating shard term for collection: \" + collection, e);\r\n    }\r\n\r\n    setNewTerms(newTerms);\r\n  }\r\n\n","sourceOld":"  /**\r\n   * Fetch latest terms from ZK\r\n   */\r\n  public void refreshTerms() {\r\n    Terms newTerms;\r\n    try {\r\n      Stat stat = new Stat();\r\n      byte[] data = zkClient.getData(znodePath, null, stat, true);\r\n      newTerms = new Terms((Map<String, Long>) Utils.fromJSON(data), stat.getVersion());\r\n    } catch (KeeperException e) {\r\n      Thread.interrupted();\r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error updating shard term for collection: \" + collection, e);\r\n    } catch (InterruptedException e) {\r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error updating shard term for collection: \" + collection, e);\r\n    }\r\n\r\n    setNewTerms(newTerms);\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14b990ee56c39c454f5c6bc2e645d1286e93acee","date":1579181439,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#refreshTerms().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#refreshTerms().mjava","sourceNew":"  /**\n   * Fetch latest terms from ZK\n   */\n  public void refreshTerms() {\n    ShardTerms newTerms;\n    try {\n      Stat stat = new Stat();\n      byte[] data = zkClient.getData(znodePath, null, stat, true);\n      newTerms = new ShardTerms((Map<String, Long>) Utils.fromJSON(data), stat.getVersion());\n    } catch (KeeperException e) {\n      Thread.interrupted();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error updating shard term for collection: \" + collection, e);\n    } catch (InterruptedException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error updating shard term for collection: \" + collection, e);\n    }\n\n    setNewTerms(newTerms);\n  }\n\n","sourceOld":"  /**\r\n   * Fetch latest terms from ZK\r\n   */\r\n  public void refreshTerms() {\r\n    ShardTerms newTerms;\r\n    try {\r\n      Stat stat = new Stat();\r\n      byte[] data = zkClient.getData(znodePath, null, stat, true);\r\n      newTerms = new ShardTerms((Map<String, Long>) Utils.fromJSON(data), stat.getVersion());\r\n    } catch (KeeperException e) {\r\n      Thread.interrupted();\r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error updating shard term for collection: \" + collection, e);\r\n    } catch (InterruptedException e) {\r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error updating shard term for collection: \" + collection, e);\r\n    }\r\n\r\n    setNewTerms(newTerms);\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8891f085f71282bb3ece1b1732b68f07813a3","date":1591912889,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#refreshTerms().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#refreshTerms().mjava","sourceNew":"  /**\n   * Fetch latest terms from ZK\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public void refreshTerms() {\n    ShardTerms newTerms;\n    try {\n      Stat stat = new Stat();\n      byte[] data = zkClient.getData(znodePath, null, stat, true);\n      newTerms = new ShardTerms((Map<String, Long>) Utils.fromJSON(data), stat.getVersion());\n    } catch (KeeperException e) {\n      Thread.interrupted();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error updating shard term for collection: \" + collection, e);\n    } catch (InterruptedException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error updating shard term for collection: \" + collection, e);\n    }\n\n    setNewTerms(newTerms);\n  }\n\n","sourceOld":"  /**\n   * Fetch latest terms from ZK\n   */\n  public void refreshTerms() {\n    ShardTerms newTerms;\n    try {\n      Stat stat = new Stat();\n      byte[] data = zkClient.getData(znodePath, null, stat, true);\n      newTerms = new ShardTerms((Map<String, Long>) Utils.fromJSON(data), stat.getVersion());\n    } catch (KeeperException e) {\n      Thread.interrupted();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error updating shard term for collection: \" + collection, e);\n    } catch (InterruptedException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error updating shard term for collection: \" + collection, e);\n    }\n\n    setNewTerms(newTerms);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fdaba0a5669b9525668d79c41f87bb5c067c03e4":["84f20f331d8001864545c7021812d8c6509c7593"],"d3aa683bba99315838c968fefedf3d74f44aa993":["fdaba0a5669b9525668d79c41f87bb5c067c03e4","5b6cc501b75cbd5d0319284563cdd20aff857ee6"],"14b990ee56c39c454f5c6bc2e645d1286e93acee":["5b6cc501b75cbd5d0319284563cdd20aff857ee6"],"5b6cc501b75cbd5d0319284563cdd20aff857ee6":["fdaba0a5669b9525668d79c41f87bb5c067c03e4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06a8891f085f71282bb3ece1b1732b68f07813a3":["14b990ee56c39c454f5c6bc2e645d1286e93acee"],"84f20f331d8001864545c7021812d8c6509c7593":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06a8891f085f71282bb3ece1b1732b68f07813a3"]},"commit2Childs":{"fdaba0a5669b9525668d79c41f87bb5c067c03e4":["d3aa683bba99315838c968fefedf3d74f44aa993","5b6cc501b75cbd5d0319284563cdd20aff857ee6"],"d3aa683bba99315838c968fefedf3d74f44aa993":[],"5b6cc501b75cbd5d0319284563cdd20aff857ee6":["d3aa683bba99315838c968fefedf3d74f44aa993","14b990ee56c39c454f5c6bc2e645d1286e93acee"],"14b990ee56c39c454f5c6bc2e645d1286e93acee":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["84f20f331d8001864545c7021812d8c6509c7593"],"06a8891f085f71282bb3ece1b1732b68f07813a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"84f20f331d8001864545c7021812d8c6509c7593":["fdaba0a5669b9525668d79c41f87bb5c067c03e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3aa683bba99315838c968fefedf3d74f44aa993","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}