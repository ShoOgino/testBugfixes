{"path":"solr/core/src/test/org/apache/solr/cloud/OnlyLeaderIndexesTest#outOfOrderDBQWithInPlaceUpdatesTest().mjava","commits":[{"id":"be320990bdc77e643388fa801e75017f19289c42","date":1489477067,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OnlyLeaderIndexesTest#outOfOrderDBQWithInPlaceUpdatesTest().mjava","pathOld":"/dev/null","sourceNew":"  public void outOfOrderDBQWithInPlaceUpdatesTest() throws Exception {\n    new UpdateRequest()\n        .deleteByQuery(\"*:*\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n    List<UpdateRequest> updates = new ArrayList<>();\n    updates.add(simulatedUpdateRequest(null, \"id\", 1, \"title_s\", \"title0_new\", \"inplace_updatable_int\", 5, \"_version_\", Long.MAX_VALUE-100)); // full update\n    updates.add(simulatedDBQ(\"inplace_updatable_int:5\", Long.MAX_VALUE-98));\n    updates.add(simulatedUpdateRequest(Long.MAX_VALUE-100, \"id\", 1, \"inplace_updatable_int\", 6, \"_version_\", Long.MAX_VALUE-99));\n    for (JettySolrRunner solrRunner: getSolrRunner(false)) {\n      try (SolrClient client = solrRunner.newClient()) {\n        for (UpdateRequest up : updates) {\n          up.process(client, COLLECTION);\n        }\n      }\n    }\n    JettySolrRunner oldLeaderJetty = getSolrRunner(true).get(0);\n    ChaosMonkey.kill(oldLeaderJetty);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n    ChaosMonkey.start(oldLeaderJetty);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"2\"))\n        .commit(cluster.getSolrClient(), COLLECTION);\n    checkShardConsistency(2,20);\n    SolrDocument doc = cluster.getSolrClient().getById(COLLECTION,\"1\");\n    assertNotNull(doc.get(\"title_s\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f996f8177b9204bdc92f7164460c6cefad9ac99a","date":1489482690,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OnlyLeaderIndexesTest#outOfOrderDBQWithInPlaceUpdatesTest().mjava","pathOld":"/dev/null","sourceNew":"  public void outOfOrderDBQWithInPlaceUpdatesTest() throws Exception {\n    new UpdateRequest()\n        .deleteByQuery(\"*:*\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n    List<UpdateRequest> updates = new ArrayList<>();\n    updates.add(simulatedUpdateRequest(null, \"id\", 1, \"title_s\", \"title0_new\", \"inplace_updatable_int\", 5, \"_version_\", Long.MAX_VALUE-100)); // full update\n    updates.add(simulatedDBQ(\"inplace_updatable_int:5\", Long.MAX_VALUE-98));\n    updates.add(simulatedUpdateRequest(Long.MAX_VALUE-100, \"id\", 1, \"inplace_updatable_int\", 6, \"_version_\", Long.MAX_VALUE-99));\n    for (JettySolrRunner solrRunner: getSolrRunner(false)) {\n      try (SolrClient client = solrRunner.newClient()) {\n        for (UpdateRequest up : updates) {\n          up.process(client, COLLECTION);\n        }\n      }\n    }\n    JettySolrRunner oldLeaderJetty = getSolrRunner(true).get(0);\n    ChaosMonkey.kill(oldLeaderJetty);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n    ChaosMonkey.start(oldLeaderJetty);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"2\"))\n        .commit(cluster.getSolrClient(), COLLECTION);\n    checkShardConsistency(2,20);\n    SolrDocument doc = cluster.getSolrClient().getById(COLLECTION,\"1\");\n    assertNotNull(doc.get(\"title_s\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OnlyLeaderIndexesTest#outOfOrderDBQWithInPlaceUpdatesTest().mjava","pathOld":"/dev/null","sourceNew":"  public void outOfOrderDBQWithInPlaceUpdatesTest() throws Exception {\n    new UpdateRequest()\n        .deleteByQuery(\"*:*\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n    List<UpdateRequest> updates = new ArrayList<>();\n    updates.add(simulatedUpdateRequest(null, \"id\", 1, \"title_s\", \"title0_new\", \"inplace_updatable_int\", 5, \"_version_\", Long.MAX_VALUE-100)); // full update\n    updates.add(simulatedDBQ(\"inplace_updatable_int:5\", Long.MAX_VALUE-98));\n    updates.add(simulatedUpdateRequest(Long.MAX_VALUE-100, \"id\", 1, \"inplace_updatable_int\", 6, \"_version_\", Long.MAX_VALUE-99));\n    for (JettySolrRunner solrRunner: getSolrRunner(false)) {\n      try (SolrClient client = solrRunner.newClient()) {\n        for (UpdateRequest up : updates) {\n          up.process(client, COLLECTION);\n        }\n      }\n    }\n    JettySolrRunner oldLeaderJetty = getSolrRunner(true).get(0);\n    ChaosMonkey.kill(oldLeaderJetty);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n    ChaosMonkey.start(oldLeaderJetty);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"2\"))\n        .commit(cluster.getSolrClient(), COLLECTION);\n    checkShardConsistency(2,20);\n    SolrDocument doc = cluster.getSolrClient().getById(COLLECTION,\"1\");\n    assertNotNull(doc.get(\"title_s\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":5,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#testOutOfOrderDBQWithInPlaceUpdates().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OnlyLeaderIndexesTest#outOfOrderDBQWithInPlaceUpdatesTest().mjava","sourceNew":"  public void testOutOfOrderDBQWithInPlaceUpdates() throws Exception {\n    createAndWaitForCollection(1,0,2,0);\n    assertFalse(getSolrCore(true).get(0).getLatestSchema().getField(\"inplace_updatable_int\").indexed());\n    assertFalse(getSolrCore(true).get(0).getLatestSchema().getField(\"inplace_updatable_int\").stored());\n    assertTrue(getSolrCore(true).get(0).getLatestSchema().getField(\"inplace_updatable_int\").hasDocValues());\n    List<UpdateRequest> updates = new ArrayList<>();\n    updates.add(simulatedUpdateRequest(null, \"id\", 1, \"title_s\", \"title0_new\", \"inplace_updatable_int\", 5, \"_version_\", 1L)); // full update\n    updates.add(simulatedDBQ(\"inplace_updatable_int:5\", 3L));\n    updates.add(simulatedUpdateRequest(1L, \"id\", 1, \"inplace_updatable_int\", 6, \"_version_\", 2L));\n    for (JettySolrRunner solrRunner: getSolrRunner(false)) {\n      try (SolrClient client = solrRunner.newClient()) {\n        for (UpdateRequest up : updates) {\n          up.process(client, collectionName);\n        }\n      }\n    }\n    JettySolrRunner oldLeaderJetty = getSolrRunner(true).get(0);\n    ChaosMonkey.kill(oldLeaderJetty);\n    waitForState(\"Replica not removed\", collectionName, activeReplicaCount(0, 1, 0));\n    ChaosMonkey.start(oldLeaderJetty);\n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(0, 2, 0));\n    checkRTG(1,1, cluster.getJettySolrRunners());\n    SolrDocument doc = cluster.getSolrClient().getById(collectionName,\"1\");\n    assertNotNull(doc.get(\"title_s\"));\n  }\n\n","sourceOld":"  public void outOfOrderDBQWithInPlaceUpdatesTest() throws Exception {\n    new UpdateRequest()\n        .deleteByQuery(\"*:*\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n    List<UpdateRequest> updates = new ArrayList<>();\n    updates.add(simulatedUpdateRequest(null, \"id\", 1, \"title_s\", \"title0_new\", \"inplace_updatable_int\", 5, \"_version_\", Long.MAX_VALUE-100)); // full update\n    updates.add(simulatedDBQ(\"inplace_updatable_int:5\", Long.MAX_VALUE-98));\n    updates.add(simulatedUpdateRequest(Long.MAX_VALUE-100, \"id\", 1, \"inplace_updatable_int\", 6, \"_version_\", Long.MAX_VALUE-99));\n    for (JettySolrRunner solrRunner: getSolrRunner(false)) {\n      try (SolrClient client = solrRunner.newClient()) {\n        for (UpdateRequest up : updates) {\n          up.process(client, COLLECTION);\n        }\n      }\n    }\n    JettySolrRunner oldLeaderJetty = getSolrRunner(true).get(0);\n    ChaosMonkey.kill(oldLeaderJetty);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n    ChaosMonkey.start(oldLeaderJetty);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"2\"))\n        .commit(cluster.getSolrClient(), COLLECTION);\n    checkShardConsistency(2,20);\n    SolrDocument doc = cluster.getSolrClient().getById(COLLECTION,\"1\");\n    assertNotNull(doc.get(\"title_s\"));\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/OnlyLeaderIndexesTest#outOfOrderDBQWithInPlaceUpdatesTest().mjava","sourceNew":null,"sourceOld":"  public void outOfOrderDBQWithInPlaceUpdatesTest() throws Exception {\n    new UpdateRequest()\n        .deleteByQuery(\"*:*\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n    List<UpdateRequest> updates = new ArrayList<>();\n    updates.add(simulatedUpdateRequest(null, \"id\", 1, \"title_s\", \"title0_new\", \"inplace_updatable_int\", 5, \"_version_\", Long.MAX_VALUE-100)); // full update\n    updates.add(simulatedDBQ(\"inplace_updatable_int:5\", Long.MAX_VALUE-98));\n    updates.add(simulatedUpdateRequest(Long.MAX_VALUE-100, \"id\", 1, \"inplace_updatable_int\", 6, \"_version_\", Long.MAX_VALUE-99));\n    for (JettySolrRunner solrRunner: getSolrRunner(false)) {\n      try (SolrClient client = solrRunner.newClient()) {\n        for (UpdateRequest up : updates) {\n          up.process(client, COLLECTION);\n        }\n      }\n    }\n    JettySolrRunner oldLeaderJetty = getSolrRunner(true).get(0);\n    ChaosMonkey.kill(oldLeaderJetty);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n    ChaosMonkey.start(oldLeaderJetty);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"2\"))\n        .commit(cluster.getSolrClient(), COLLECTION);\n    checkShardConsistency(2,20);\n    SolrDocument doc = cluster.getSolrClient().getById(COLLECTION,\"1\");\n    assertNotNull(doc.get(\"title_s\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["ab68488225b6a6c357dda72ed11dedca9914a192","61c45e99cf6676da48f19d7511c73712ad39402b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["be320990bdc77e643388fa801e75017f19289c42"],"f996f8177b9204bdc92f7164460c6cefad9ac99a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"be320990bdc77e643388fa801e75017f19289c42":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ab68488225b6a6c357dda72ed11dedca9914a192":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f996f8177b9204bdc92f7164460c6cefad9ac99a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["61c45e99cf6676da48f19d7511c73712ad39402b"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f996f8177b9204bdc92f7164460c6cefad9ac99a":["ab68488225b6a6c357dda72ed11dedca9914a192"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f996f8177b9204bdc92f7164460c6cefad9ac99a","be320990bdc77e643388fa801e75017f19289c42","ab68488225b6a6c357dda72ed11dedca9914a192"],"ab68488225b6a6c357dda72ed11dedca9914a192":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"be320990bdc77e643388fa801e75017f19289c42":["61c45e99cf6676da48f19d7511c73712ad39402b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}