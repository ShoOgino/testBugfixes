{"path":"src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","commits":[{"id":"84b6c001c19319635b53dd80ee9fc1ba9a5b4574","date":1213883214,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          NamedList spellchecker = (NamedList) initParams.getVal(i);\n          String className = (String) spellchecker.get(\"classname\");\n          if (className == null)\n            className = IndexBasedSpellChecker.class.getName();\n          SolrResourceLoader loader = core.getResourceLoader();\n          SolrSpellChecker checker = (SolrSpellChecker) loader.newInstance(className);\n          if (checker != null) {\n            String dictionary = checker.init(spellchecker, loader);\n            if (dictionary != null) {\n              boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n              if (isDefault == true && hasDefault == false){\n                hasDefault = true;\n              } else if (isDefault == true && hasDefault == true){\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n              spellCheckers.put(dictionary, checker);\n            } else {\n              if (hasDefault == false){\n                spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n                hasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n            }\n          } else {\n            throw new RuntimeException(\"Can't load spell checker: \" + className);\n          }\n        }\n     }\n      String xpath = \"queryConverter\";\n      SolrConfig solrConfig = core.getSolrConfig();\n      NodeList nodes = (NodeList) solrConfig.evaluate(xpath, XPathConstants.NODESET);\n\n      Map<String, QueryConverter> queryConverters = new HashMap<String, QueryConverter>();\n      NamedListPluginLoader<QueryConverter> loader =\n              new NamedListPluginLoader<QueryConverter>(\"[solrconfig.xml] \" + xpath, queryConverters);\n\n      loader.load(solrConfig.getResourceLoader(), nodes);\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer()\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      } else {\n        //TODO: Is there a better way?\n        throw new RuntimeException(\"One and only one queryConverter may be defined\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d6a7ae0a5e41f95f1e5771fcbbe60d9bdba7be90"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d6a7ae0a5e41f95f1e5771fcbbe60d9bdba7be90","date":1216996119,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","pathOld":"src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          NamedList spellchecker = (NamedList) initParams.getVal(i);\n          String className = (String) spellchecker.get(\"classname\");\n          if (className == null)\n            className = IndexBasedSpellChecker.class.getName();\n          SolrResourceLoader loader = core.getResourceLoader();\n          SolrSpellChecker checker = (SolrSpellChecker) loader.newInstance(className);\n          if (checker != null) {\n            String dictionary = checker.init(spellchecker, core);\n            if (dictionary != null) {\n              boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n              if (isDefault == true && hasDefault == false){\n                hasDefault = true;\n              } else if (isDefault == true && hasDefault == true){\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n              spellCheckers.put(dictionary, checker);\n            } else {\n              if (hasDefault == false){\n                spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n                hasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n            }\n          } else {\n            throw new RuntimeException(\"Can't load spell checker: \" + className);\n          }\n        }\n     }\n      String xpath = \"queryConverter\";\n      SolrConfig solrConfig = core.getSolrConfig();\n      NodeList nodes = (NodeList) solrConfig.evaluate(xpath, XPathConstants.NODESET);\n\n      Map<String, QueryConverter> queryConverters = new HashMap<String, QueryConverter>();\n      NamedListPluginLoader<QueryConverter> loader =\n              new NamedListPluginLoader<QueryConverter>(\"[solrconfig.xml] \" + xpath, queryConverters);\n\n      loader.load(solrConfig.getResourceLoader(), nodes);\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer()\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      } else {\n        //TODO: Is there a better way?\n        throw new RuntimeException(\"One and only one queryConverter may be defined\");\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          NamedList spellchecker = (NamedList) initParams.getVal(i);\n          String className = (String) spellchecker.get(\"classname\");\n          if (className == null)\n            className = IndexBasedSpellChecker.class.getName();\n          SolrResourceLoader loader = core.getResourceLoader();\n          SolrSpellChecker checker = (SolrSpellChecker) loader.newInstance(className);\n          if (checker != null) {\n            String dictionary = checker.init(spellchecker, loader);\n            if (dictionary != null) {\n              boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n              if (isDefault == true && hasDefault == false){\n                hasDefault = true;\n              } else if (isDefault == true && hasDefault == true){\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n              spellCheckers.put(dictionary, checker);\n            } else {\n              if (hasDefault == false){\n                spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n                hasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n            }\n          } else {\n            throw new RuntimeException(\"Can't load spell checker: \" + className);\n          }\n        }\n     }\n      String xpath = \"queryConverter\";\n      SolrConfig solrConfig = core.getSolrConfig();\n      NodeList nodes = (NodeList) solrConfig.evaluate(xpath, XPathConstants.NODESET);\n\n      Map<String, QueryConverter> queryConverters = new HashMap<String, QueryConverter>();\n      NamedListPluginLoader<QueryConverter> loader =\n              new NamedListPluginLoader<QueryConverter>(\"[solrconfig.xml] \" + xpath, queryConverters);\n\n      loader.load(solrConfig.getResourceLoader(), nodes);\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer()\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      } else {\n        //TODO: Is there a better way?\n        throw new RuntimeException(\"One and only one queryConverter may be defined\");\n      }\n    }\n  }\n\n","bugFix":["84b6c001c19319635b53dd80ee9fc1ba9a5b4574"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35426836c91acd1884436cafce89c7f7011eb8a1","date":1217571118,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","pathOld":"src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          NamedList spellchecker = (NamedList) initParams.getVal(i);\n          String className = (String) spellchecker.get(\"classname\");\n          if (className == null)\n            className = IndexBasedSpellChecker.class.getName();\n          SolrResourceLoader loader = core.getResourceLoader();\n          SolrSpellChecker checker = (SolrSpellChecker) loader.newInstance(className);\n          if (checker != null) {\n            String dictionary = checker.init(spellchecker, core);\n            if (dictionary != null) {\n              boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n              if (isDefault == true && hasDefault == false){\n                hasDefault = true;\n              } else if (isDefault == true && hasDefault == true){\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n              spellCheckers.put(dictionary, checker);\n            } else {\n              if (hasDefault == false){\n                spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n                hasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n            }\n            // Register event listeners for this SpellChecker\n            core.registerFirstSearcherListener(new SpellCheckerListener(core, checker, true));\n            if (Boolean.parseBoolean((String)spellchecker.get(\"buildOnCommit\")))   {\n              LOG.info(\"Registering newSearcher listener for spellchecker: \" + checker.getDictionaryName());\n              core.registerNewSearcherListener(new SpellCheckerListener(core, checker, false));\n            }\n          } else {\n            throw new RuntimeException(\"Can't load spell checker: \" + className);\n          }\n        }\n     }\n      String xpath = \"queryConverter\";\n      SolrConfig solrConfig = core.getSolrConfig();\n      NodeList nodes = (NodeList) solrConfig.evaluate(xpath, XPathConstants.NODESET);\n\n      Map<String, QueryConverter> queryConverters = new HashMap<String, QueryConverter>();\n      NamedListPluginLoader<QueryConverter> loader =\n              new NamedListPluginLoader<QueryConverter>(\"[solrconfig.xml] \" + xpath, queryConverters);\n\n      loader.load(solrConfig.getResourceLoader(), nodes);\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer()\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      } else {\n        //TODO: Is there a better way?\n        throw new RuntimeException(\"One and only one queryConverter may be defined\");\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          NamedList spellchecker = (NamedList) initParams.getVal(i);\n          String className = (String) spellchecker.get(\"classname\");\n          if (className == null)\n            className = IndexBasedSpellChecker.class.getName();\n          SolrResourceLoader loader = core.getResourceLoader();\n          SolrSpellChecker checker = (SolrSpellChecker) loader.newInstance(className);\n          if (checker != null) {\n            String dictionary = checker.init(spellchecker, core);\n            if (dictionary != null) {\n              boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n              if (isDefault == true && hasDefault == false){\n                hasDefault = true;\n              } else if (isDefault == true && hasDefault == true){\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n              spellCheckers.put(dictionary, checker);\n            } else {\n              if (hasDefault == false){\n                spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n                hasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n            }\n          } else {\n            throw new RuntimeException(\"Can't load spell checker: \" + className);\n          }\n        }\n     }\n      String xpath = \"queryConverter\";\n      SolrConfig solrConfig = core.getSolrConfig();\n      NodeList nodes = (NodeList) solrConfig.evaluate(xpath, XPathConstants.NODESET);\n\n      Map<String, QueryConverter> queryConverters = new HashMap<String, QueryConverter>();\n      NamedListPluginLoader<QueryConverter> loader =\n              new NamedListPluginLoader<QueryConverter>(\"[solrconfig.xml] \" + xpath, queryConverters);\n\n      loader.load(solrConfig.getResourceLoader(), nodes);\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer()\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      } else {\n        //TODO: Is there a better way?\n        throw new RuntimeException(\"One and only one queryConverter may be defined\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df5b2c4435120263bb2b661464c024c748e17c97","date":1218625446,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","pathOld":"src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          NamedList spellchecker = (NamedList) initParams.getVal(i);\n          String className = (String) spellchecker.get(\"classname\");\n          if (className == null)\n            className = IndexBasedSpellChecker.class.getName();\n          SolrResourceLoader loader = core.getResourceLoader();\n          SolrSpellChecker checker = (SolrSpellChecker) loader.newInstance(className);\n          if (checker != null) {\n            String dictionary = checker.init(spellchecker, core);\n            if (dictionary != null) {\n              boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n              if (isDefault == true && hasDefault == false){\n                hasDefault = true;\n              } else if (isDefault == true && hasDefault == true){\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n              spellCheckers.put(dictionary, checker);\n            } else {\n              if (hasDefault == false){\n                spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n                hasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n            }\n            // Register event listeners for this SpellChecker\n            core.registerFirstSearcherListener(new SpellCheckerListener(core, checker, true));\n            if (Boolean.parseBoolean((String)spellchecker.get(\"buildOnCommit\")))   {\n              LOG.info(\"Registering newSearcher listener for spellchecker: \" + checker.getDictionaryName());\n              core.registerNewSearcherListener(new SpellCheckerListener(core, checker, false));\n            }\n          } else {\n            throw new RuntimeException(\"Can't load spell checker: \" + className);\n          }\n        }\n     }\n      String xpath = \"queryConverter\";\n      SolrConfig solrConfig = core.getSolrConfig();\n      NodeList nodes = (NodeList) solrConfig.evaluate(xpath, XPathConstants.NODESET);\n\n      Map<String, QueryConverter> queryConverters = new HashMap<String, QueryConverter>();\n      NamedListPluginLoader<QueryConverter> loader =\n              new NamedListPluginLoader<QueryConverter>(\"[solrconfig.xml] \" + xpath, queryConverters);\n\n      loader.load(solrConfig.getResourceLoader(), nodes);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.warning(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer()\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          NamedList spellchecker = (NamedList) initParams.getVal(i);\n          String className = (String) spellchecker.get(\"classname\");\n          if (className == null)\n            className = IndexBasedSpellChecker.class.getName();\n          SolrResourceLoader loader = core.getResourceLoader();\n          SolrSpellChecker checker = (SolrSpellChecker) loader.newInstance(className);\n          if (checker != null) {\n            String dictionary = checker.init(spellchecker, core);\n            if (dictionary != null) {\n              boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n              if (isDefault == true && hasDefault == false){\n                hasDefault = true;\n              } else if (isDefault == true && hasDefault == true){\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n              spellCheckers.put(dictionary, checker);\n            } else {\n              if (hasDefault == false){\n                spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n                hasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n            }\n            // Register event listeners for this SpellChecker\n            core.registerFirstSearcherListener(new SpellCheckerListener(core, checker, true));\n            if (Boolean.parseBoolean((String)spellchecker.get(\"buildOnCommit\")))   {\n              LOG.info(\"Registering newSearcher listener for spellchecker: \" + checker.getDictionaryName());\n              core.registerNewSearcherListener(new SpellCheckerListener(core, checker, false));\n            }\n          } else {\n            throw new RuntimeException(\"Can't load spell checker: \" + className);\n          }\n        }\n     }\n      String xpath = \"queryConverter\";\n      SolrConfig solrConfig = core.getSolrConfig();\n      NodeList nodes = (NodeList) solrConfig.evaluate(xpath, XPathConstants.NODESET);\n\n      Map<String, QueryConverter> queryConverters = new HashMap<String, QueryConverter>();\n      NamedListPluginLoader<QueryConverter> loader =\n              new NamedListPluginLoader<QueryConverter>(\"[solrconfig.xml] \" + xpath, queryConverters);\n\n      loader.load(solrConfig.getResourceLoader(), nodes);\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer()\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      } else {\n        //TODO: Is there a better way?\n        throw new RuntimeException(\"One and only one queryConverter may be defined\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00da8b51bdeae168a5b26ec506db372b219ca7a2","date":1221704186,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","pathOld":"src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          NamedList spellchecker = (NamedList) initParams.getVal(i);\n          String className = (String) spellchecker.get(\"classname\");\n          if (className == null)\n            className = IndexBasedSpellChecker.class.getName();\n          SolrResourceLoader loader = core.getResourceLoader();\n          SolrSpellChecker checker = (SolrSpellChecker) loader.newInstance(className);\n          if (checker != null) {\n            String dictionary = checker.init(spellchecker, core);\n            if (dictionary != null) {\n              boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n              if (isDefault == true && hasDefault == false){\n                hasDefault = true;\n              } else if (isDefault == true && hasDefault == true){\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n              spellCheckers.put(dictionary, checker);\n            } else {\n              if (hasDefault == false){\n                spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n                hasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n            }\n            // Register event listeners for this SpellChecker\n            core.registerFirstSearcherListener(new SpellCheckerListener(core, checker, true));\n            if (Boolean.parseBoolean((String)spellchecker.get(\"buildOnCommit\")))   {\n              LOG.info(\"Registering newSearcher listener for spellchecker: \" + checker.getDictionaryName());\n              core.registerNewSearcherListener(new SpellCheckerListener(core, checker, false));\n            }\n          } else {\n            throw new RuntimeException(\"Can't load spell checker: \" + className);\n          }\n        }\n     }\n      String xpath = \"queryConverter\";\n      SolrConfig solrConfig = core.getSolrConfig();\n      NodeList nodes = (NodeList) solrConfig.evaluate(xpath, XPathConstants.NODESET);\n\n      Map<String, QueryConverter> queryConverters = new HashMap<String, QueryConverter>();\n      NamedListPluginLoader<QueryConverter> loader =\n              new NamedListPluginLoader<QueryConverter>(\"[solrconfig.xml] \" + xpath, queryConverters);\n\n      loader.load(solrConfig.getResourceLoader(), nodes);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.warn(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer()\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          NamedList spellchecker = (NamedList) initParams.getVal(i);\n          String className = (String) spellchecker.get(\"classname\");\n          if (className == null)\n            className = IndexBasedSpellChecker.class.getName();\n          SolrResourceLoader loader = core.getResourceLoader();\n          SolrSpellChecker checker = (SolrSpellChecker) loader.newInstance(className);\n          if (checker != null) {\n            String dictionary = checker.init(spellchecker, core);\n            if (dictionary != null) {\n              boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n              if (isDefault == true && hasDefault == false){\n                hasDefault = true;\n              } else if (isDefault == true && hasDefault == true){\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n              spellCheckers.put(dictionary, checker);\n            } else {\n              if (hasDefault == false){\n                spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n                hasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n            }\n            // Register event listeners for this SpellChecker\n            core.registerFirstSearcherListener(new SpellCheckerListener(core, checker, true));\n            if (Boolean.parseBoolean((String)spellchecker.get(\"buildOnCommit\")))   {\n              LOG.info(\"Registering newSearcher listener for spellchecker: \" + checker.getDictionaryName());\n              core.registerNewSearcherListener(new SpellCheckerListener(core, checker, false));\n            }\n          } else {\n            throw new RuntimeException(\"Can't load spell checker: \" + className);\n          }\n        }\n     }\n      String xpath = \"queryConverter\";\n      SolrConfig solrConfig = core.getSolrConfig();\n      NodeList nodes = (NodeList) solrConfig.evaluate(xpath, XPathConstants.NODESET);\n\n      Map<String, QueryConverter> queryConverters = new HashMap<String, QueryConverter>();\n      NamedListPluginLoader<QueryConverter> loader =\n              new NamedListPluginLoader<QueryConverter>(\"[solrconfig.xml] \" + xpath, queryConverters);\n\n      loader.load(solrConfig.getResourceLoader(), nodes);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.warning(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer()\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"216fd89a361927421e4f8d245ec707a0a49872ef","date":1225223984,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","pathOld":"src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          NamedList spellchecker = (NamedList) initParams.getVal(i);\n          String className = (String) spellchecker.get(\"classname\");\n          if (className == null)\n            className = IndexBasedSpellChecker.class.getName();\n          SolrResourceLoader loader = core.getResourceLoader();\n          SolrSpellChecker checker = (SolrSpellChecker) loader.newInstance(className);\n          if (checker != null) {\n            String dictionary = checker.init(spellchecker, core);\n            if (dictionary != null) {\n              boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n              if (isDefault == true && hasDefault == false){\n                hasDefault = true;\n              } else if (isDefault == true && hasDefault == true){\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n              spellCheckers.put(dictionary, checker);\n            } else {\n              if (hasDefault == false){\n                spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n                hasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n            }\n            // Register event listeners for this SpellChecker\n            core.registerFirstSearcherListener(new SpellCheckerListener(core, checker, false, false));\n            boolean buildOnCommit = Boolean.parseBoolean((String) spellchecker.get(\"buildOnCommit\"));\n            boolean buildOnOptimize = Boolean.parseBoolean((String) spellchecker.get(\"buildOnOptimize\"));\n            if (buildOnCommit || buildOnOptimize)   {\n              LOG.info(\"Registering newSearcher listener for spellchecker: \" + checker.getDictionaryName());\n              core.registerNewSearcherListener(new SpellCheckerListener(core, checker, buildOnCommit, buildOnOptimize));\n            }\n          } else {\n            throw new RuntimeException(\"Can't load spell checker: \" + className);\n          }\n        }\n     }\n      String xpath = \"queryConverter\";\n      SolrConfig solrConfig = core.getSolrConfig();\n      NodeList nodes = (NodeList) solrConfig.evaluate(xpath, XPathConstants.NODESET);\n\n      Map<String, QueryConverter> queryConverters = new HashMap<String, QueryConverter>();\n      NamedListPluginLoader<QueryConverter> loader =\n              new NamedListPluginLoader<QueryConverter>(\"[solrconfig.xml] \" + xpath, queryConverters);\n\n      loader.load(solrConfig.getResourceLoader(), nodes);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.warn(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer()\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          NamedList spellchecker = (NamedList) initParams.getVal(i);\n          String className = (String) spellchecker.get(\"classname\");\n          if (className == null)\n            className = IndexBasedSpellChecker.class.getName();\n          SolrResourceLoader loader = core.getResourceLoader();\n          SolrSpellChecker checker = (SolrSpellChecker) loader.newInstance(className);\n          if (checker != null) {\n            String dictionary = checker.init(spellchecker, core);\n            if (dictionary != null) {\n              boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n              if (isDefault == true && hasDefault == false){\n                hasDefault = true;\n              } else if (isDefault == true && hasDefault == true){\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n              spellCheckers.put(dictionary, checker);\n            } else {\n              if (hasDefault == false){\n                spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n                hasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n            }\n            // Register event listeners for this SpellChecker\n            core.registerFirstSearcherListener(new SpellCheckerListener(core, checker, true));\n            if (Boolean.parseBoolean((String)spellchecker.get(\"buildOnCommit\")))   {\n              LOG.info(\"Registering newSearcher listener for spellchecker: \" + checker.getDictionaryName());\n              core.registerNewSearcherListener(new SpellCheckerListener(core, checker, false));\n            }\n          } else {\n            throw new RuntimeException(\"Can't load spell checker: \" + className);\n          }\n        }\n     }\n      String xpath = \"queryConverter\";\n      SolrConfig solrConfig = core.getSolrConfig();\n      NodeList nodes = (NodeList) solrConfig.evaluate(xpath, XPathConstants.NODESET);\n\n      Map<String, QueryConverter> queryConverters = new HashMap<String, QueryConverter>();\n      NamedListPluginLoader<QueryConverter> loader =\n              new NamedListPluginLoader<QueryConverter>(\"[solrconfig.xml] \" + xpath, queryConverters);\n\n      loader.load(solrConfig.getResourceLoader(), nodes);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.warn(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer()\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"997375f68b316cac9912730779b3243ee41e58a6","date":1252053379,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","pathOld":"src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          NamedList spellchecker = (NamedList) initParams.getVal(i);\n          String className = (String) spellchecker.get(\"classname\");\n          if (className == null)\n            className = IndexBasedSpellChecker.class.getName();\n          SolrResourceLoader loader = core.getResourceLoader();\n          SolrSpellChecker checker = (SolrSpellChecker) loader.newInstance(className);\n          if (checker != null) {\n            String dictionary = checker.init(spellchecker, core);\n            if (dictionary != null) {\n              boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n              if (isDefault == true && hasDefault == false){\n                hasDefault = true;\n              } else if (isDefault == true && hasDefault == true){\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n              spellCheckers.put(dictionary, checker);\n            } else {\n              if (hasDefault == false){\n                spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n                hasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n            }\n            // Register event listeners for this SpellChecker\n            core.registerFirstSearcherListener(new SpellCheckerListener(core, checker, false, false));\n            boolean buildOnCommit = Boolean.parseBoolean((String) spellchecker.get(\"buildOnCommit\"));\n            boolean buildOnOptimize = Boolean.parseBoolean((String) spellchecker.get(\"buildOnOptimize\"));\n            if (buildOnCommit || buildOnOptimize)   {\n              LOG.info(\"Registering newSearcher listener for spellchecker: \" + checker.getDictionaryName());\n              core.registerNewSearcherListener(new SpellCheckerListener(core, checker, buildOnCommit, buildOnOptimize));\n            }\n          } else {\n            throw new RuntimeException(\"Can't load spell checker: \" + className);\n          }\n        }\n     }\n\n      Map<String, QueryConverter> queryConverters = new HashMap<String, QueryConverter>();\n      core.initPlugins(core.getSolrConfig().getQueryConverterInfo(), queryConverters,QueryConverter.class);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.warn(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer()\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          NamedList spellchecker = (NamedList) initParams.getVal(i);\n          String className = (String) spellchecker.get(\"classname\");\n          if (className == null)\n            className = IndexBasedSpellChecker.class.getName();\n          SolrResourceLoader loader = core.getResourceLoader();\n          SolrSpellChecker checker = (SolrSpellChecker) loader.newInstance(className);\n          if (checker != null) {\n            String dictionary = checker.init(spellchecker, core);\n            if (dictionary != null) {\n              boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n              if (isDefault == true && hasDefault == false){\n                hasDefault = true;\n              } else if (isDefault == true && hasDefault == true){\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n              spellCheckers.put(dictionary, checker);\n            } else {\n              if (hasDefault == false){\n                spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n                hasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n            }\n            // Register event listeners for this SpellChecker\n            core.registerFirstSearcherListener(new SpellCheckerListener(core, checker, false, false));\n            boolean buildOnCommit = Boolean.parseBoolean((String) spellchecker.get(\"buildOnCommit\"));\n            boolean buildOnOptimize = Boolean.parseBoolean((String) spellchecker.get(\"buildOnOptimize\"));\n            if (buildOnCommit || buildOnOptimize)   {\n              LOG.info(\"Registering newSearcher listener for spellchecker: \" + checker.getDictionaryName());\n              core.registerNewSearcherListener(new SpellCheckerListener(core, checker, buildOnCommit, buildOnOptimize));\n            }\n          } else {\n            throw new RuntimeException(\"Can't load spell checker: \" + className);\n          }\n        }\n     }\n      String xpath = \"queryConverter\";\n      SolrConfig solrConfig = core.getSolrConfig();\n      NodeList nodes = (NodeList) solrConfig.evaluate(xpath, XPathConstants.NODESET);\n\n      Map<String, QueryConverter> queryConverters = new HashMap<String, QueryConverter>();\n      NamedListPluginLoader<QueryConverter> loader =\n              new NamedListPluginLoader<QueryConverter>(\"[solrconfig.xml] \" + xpath, queryConverters);\n\n      loader.load(solrConfig.getResourceLoader(), nodes);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.warn(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer()\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28a016ae2abf4934515e45810192aa4350e3092b","date":1252309557,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","pathOld":"src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          NamedList spellchecker = (NamedList) initParams.getVal(i);\n          String className = (String) spellchecker.get(\"classname\");\n          if (className == null)\n            className = IndexBasedSpellChecker.class.getName();\n          SolrResourceLoader loader = core.getResourceLoader();\n          SolrSpellChecker checker = (SolrSpellChecker) loader.newInstance(className);\n          if (checker != null) {\n            String dictionary = checker.init(spellchecker, core);\n            if (dictionary != null) {\n              boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n              if (isDefault == true && hasDefault == false){\n                hasDefault = true;\n              } else if (isDefault == true && hasDefault == true){\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n              spellCheckers.put(dictionary, checker);\n            } else {\n              if (hasDefault == false){\n                spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n                hasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n            }\n            // Register event listeners for this SpellChecker\n            core.registerFirstSearcherListener(new SpellCheckerListener(core, checker, false, false));\n            boolean buildOnCommit = Boolean.parseBoolean((String) spellchecker.get(\"buildOnCommit\"));\n            boolean buildOnOptimize = Boolean.parseBoolean((String) spellchecker.get(\"buildOnOptimize\"));\n            if (buildOnCommit || buildOnOptimize)   {\n              LOG.info(\"Registering newSearcher listener for spellchecker: \" + checker.getDictionaryName());\n              core.registerNewSearcherListener(new SpellCheckerListener(core, checker, buildOnCommit, buildOnOptimize));\n            }\n          } else {\n            throw new RuntimeException(\"Can't load spell checker: \" + className);\n          }\n        }\n     }\n\n      Map<String, QueryConverter> queryConverters = new HashMap<String, QueryConverter>();\n      core.initPlugins(queryConverters,QueryConverter.class);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.warn(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer()\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          NamedList spellchecker = (NamedList) initParams.getVal(i);\n          String className = (String) spellchecker.get(\"classname\");\n          if (className == null)\n            className = IndexBasedSpellChecker.class.getName();\n          SolrResourceLoader loader = core.getResourceLoader();\n          SolrSpellChecker checker = (SolrSpellChecker) loader.newInstance(className);\n          if (checker != null) {\n            String dictionary = checker.init(spellchecker, core);\n            if (dictionary != null) {\n              boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n              if (isDefault == true && hasDefault == false){\n                hasDefault = true;\n              } else if (isDefault == true && hasDefault == true){\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n              spellCheckers.put(dictionary, checker);\n            } else {\n              if (hasDefault == false){\n                spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n                hasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n            }\n            // Register event listeners for this SpellChecker\n            core.registerFirstSearcherListener(new SpellCheckerListener(core, checker, false, false));\n            boolean buildOnCommit = Boolean.parseBoolean((String) spellchecker.get(\"buildOnCommit\"));\n            boolean buildOnOptimize = Boolean.parseBoolean((String) spellchecker.get(\"buildOnOptimize\"));\n            if (buildOnCommit || buildOnOptimize)   {\n              LOG.info(\"Registering newSearcher listener for spellchecker: \" + checker.getDictionaryName());\n              core.registerNewSearcherListener(new SpellCheckerListener(core, checker, buildOnCommit, buildOnOptimize));\n            }\n          } else {\n            throw new RuntimeException(\"Can't load spell checker: \" + className);\n          }\n        }\n     }\n\n      Map<String, QueryConverter> queryConverters = new HashMap<String, QueryConverter>();\n      core.initPlugins(core.getSolrConfig().getQueryConverterInfo(), queryConverters,QueryConverter.class);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.warn(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer()\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","pathOld":"src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          NamedList spellchecker = (NamedList) initParams.getVal(i);\n          String className = (String) spellchecker.get(\"classname\");\n          if (className == null)\n            className = IndexBasedSpellChecker.class.getName();\n          SolrResourceLoader loader = core.getResourceLoader();\n          SolrSpellChecker checker = (SolrSpellChecker) loader.newInstance(className);\n          if (checker != null) {\n            String dictionary = checker.init(spellchecker, core);\n            if (dictionary != null) {\n              boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n              if (isDefault == true && hasDefault == false){\n                hasDefault = true;\n              } else if (isDefault == true && hasDefault == true){\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n              spellCheckers.put(dictionary, checker);\n            } else {\n              if (hasDefault == false){\n                spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n                hasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n            }\n            // Register event listeners for this SpellChecker\n            core.registerFirstSearcherListener(new SpellCheckerListener(core, checker, false, false));\n            boolean buildOnCommit = Boolean.parseBoolean((String) spellchecker.get(\"buildOnCommit\"));\n            boolean buildOnOptimize = Boolean.parseBoolean((String) spellchecker.get(\"buildOnOptimize\"));\n            if (buildOnCommit || buildOnOptimize)   {\n              LOG.info(\"Registering newSearcher listener for spellchecker: \" + checker.getDictionaryName());\n              core.registerNewSearcherListener(new SpellCheckerListener(core, checker, buildOnCommit, buildOnOptimize));\n            }\n          } else {\n            throw new RuntimeException(\"Can't load spell checker: \" + className);\n          }\n        }\n     }\n\n      Map<String, QueryConverter> queryConverters = new HashMap<String, QueryConverter>();\n      core.initPlugins(queryConverters,QueryConverter.class);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.warn(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer()\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          NamedList spellchecker = (NamedList) initParams.getVal(i);\n          String className = (String) spellchecker.get(\"classname\");\n          if (className == null)\n            className = IndexBasedSpellChecker.class.getName();\n          SolrResourceLoader loader = core.getResourceLoader();\n          SolrSpellChecker checker = (SolrSpellChecker) loader.newInstance(className);\n          if (checker != null) {\n            String dictionary = checker.init(spellchecker, core);\n            if (dictionary != null) {\n              boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n              if (isDefault == true && hasDefault == false){\n                hasDefault = true;\n              } else if (isDefault == true && hasDefault == true){\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n              spellCheckers.put(dictionary, checker);\n            } else {\n              if (hasDefault == false){\n                spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n                hasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n            }\n            // Register event listeners for this SpellChecker\n            core.registerFirstSearcherListener(new SpellCheckerListener(core, checker, false, false));\n            boolean buildOnCommit = Boolean.parseBoolean((String) spellchecker.get(\"buildOnCommit\"));\n            boolean buildOnOptimize = Boolean.parseBoolean((String) spellchecker.get(\"buildOnOptimize\"));\n            if (buildOnCommit || buildOnOptimize)   {\n              LOG.info(\"Registering newSearcher listener for spellchecker: \" + checker.getDictionaryName());\n              core.registerNewSearcherListener(new SpellCheckerListener(core, checker, buildOnCommit, buildOnOptimize));\n            }\n          } else {\n            throw new RuntimeException(\"Can't load spell checker: \" + className);\n          }\n        }\n     }\n\n      Map<String, QueryConverter> queryConverters = new HashMap<String, QueryConverter>();\n      core.initPlugins(queryConverters,QueryConverter.class);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.warn(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer()\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df5b2c4435120263bb2b661464c024c748e17c97":["35426836c91acd1884436cafce89c7f7011eb8a1"],"216fd89a361927421e4f8d245ec707a0a49872ef":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"84b6c001c19319635b53dd80ee9fc1ba9a5b4574":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["28a016ae2abf4934515e45810192aa4350e3092b"],"d6a7ae0a5e41f95f1e5771fcbbe60d9bdba7be90":["84b6c001c19319635b53dd80ee9fc1ba9a5b4574"],"28a016ae2abf4934515e45810192aa4350e3092b":["997375f68b316cac9912730779b3243ee41e58a6"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["df5b2c4435120263bb2b661464c024c748e17c97"],"997375f68b316cac9912730779b3243ee41e58a6":["216fd89a361927421e4f8d245ec707a0a49872ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"35426836c91acd1884436cafce89c7f7011eb8a1":["d6a7ae0a5e41f95f1e5771fcbbe60d9bdba7be90"]},"commit2Childs":{"df5b2c4435120263bb2b661464c024c748e17c97":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"216fd89a361927421e4f8d245ec707a0a49872ef":["997375f68b316cac9912730779b3243ee41e58a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"84b6c001c19319635b53dd80ee9fc1ba9a5b4574":["d6a7ae0a5e41f95f1e5771fcbbe60d9bdba7be90"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["84b6c001c19319635b53dd80ee9fc1ba9a5b4574"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"d6a7ae0a5e41f95f1e5771fcbbe60d9bdba7be90":["35426836c91acd1884436cafce89c7f7011eb8a1"],"28a016ae2abf4934515e45810192aa4350e3092b":["ad94625fb8d088209f46650c8097196fec67f00c"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["216fd89a361927421e4f8d245ec707a0a49872ef"],"997375f68b316cac9912730779b3243ee41e58a6":["28a016ae2abf4934515e45810192aa4350e3092b"],"35426836c91acd1884436cafce89c7f7011eb8a1":["df5b2c4435120263bb2b661464c024c748e17c97"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}