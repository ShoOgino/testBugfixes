{"path":"solr/core/src/test/org/apache/solr/search/TestLFUCache#testSimple().mjava","commits":[{"id":"3a2591037a85ef083e6588e0b846a5a34ff9b5a3","date":1326403130,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestLFUCache#testSimple().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSimple() throws IOException {\n    LFUCache lfuCache = new LFUCache();\n    LFUCache newLFUCache = new LFUCache();\n    LFUCache noWarmLFUCache = new LFUCache();\n    try {\n      Map params = new HashMap();\n      params.put(\"size\", \"100\");\n      params.put(\"initialSize\", \"10\");\n      params.put(\"autowarmCount\", \"25\");\n      LFURegenerator regenerator = new LFURegenerator();\n      Object initObj = lfuCache.init(params, null, regenerator);\n      lfuCache.setState(SolrCache.State.LIVE);\n      for (int i = 0; i < 101; i++) {\n        lfuCache.put(i + 1, \"\" + (i + 1));\n      }\n      assertEquals(\"15\", lfuCache.get(15));\n      assertEquals(\"75\", lfuCache.get(75));\n      assertEquals(null, lfuCache.get(110));\n      NamedList nl = lfuCache.getStatistics();\n      assertEquals(3L, nl.get(\"lookups\"));\n      assertEquals(2L, nl.get(\"hits\"));\n      assertEquals(101L, nl.get(\"inserts\"));\n\n      assertEquals(null, lfuCache.get(1));  // first item put in should be the first out\n\n      // Test autowarming\n      newLFUCache.init(params, initObj, regenerator);\n      newLFUCache.warm(null, lfuCache);\n      newLFUCache.setState(SolrCache.State.LIVE);\n\n      newLFUCache.put(103, \"103\");\n      assertEquals(\"15\", newLFUCache.get(15));\n      assertEquals(\"75\", newLFUCache.get(75));\n      assertEquals(null, newLFUCache.get(50));\n      nl = newLFUCache.getStatistics();\n      assertEquals(3L, nl.get(\"lookups\"));\n      assertEquals(2L, nl.get(\"hits\"));\n      assertEquals(1L, nl.get(\"inserts\"));\n      assertEquals(0L, nl.get(\"evictions\"));\n\n      assertEquals(7L, nl.get(\"cumulative_lookups\"));\n      assertEquals(4L, nl.get(\"cumulative_hits\"));\n      assertEquals(102L, nl.get(\"cumulative_inserts\"));\n      newLFUCache.close();\n\n      // Test no autowarming\n\n      params.put(\"autowarmCount\", \"0\");\n      noWarmLFUCache.init(params, initObj, regenerator);\n      noWarmLFUCache.warm(null, lfuCache);\n      noWarmLFUCache.setState(SolrCache.State.LIVE);\n\n      noWarmLFUCache.put(103, \"103\");\n      assertNull(noWarmLFUCache.get(15));\n      assertNull(noWarmLFUCache.get(75));\n      assertEquals(\"103\", noWarmLFUCache.get(103));\n    } finally {\n      if (newLFUCache != null) newLFUCache.close();\n      if (noWarmLFUCache != null) noWarmLFUCache.close();\n      if (lfuCache != null) lfuCache.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b5eb85061a04532d079d1ca2e6cfae6be263073","date":1377213475,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestLFUCache#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestLFUCache#testSimple().mjava","sourceNew":"  @Test\n  public void testSimple() throws IOException {\n    LFUCache lfuCache = new LFUCache();\n    LFUCache newLFUCache = new LFUCache();\n    LFUCache noWarmLFUCache = new LFUCache();\n    try {\n      Map params = new HashMap();\n      params.put(\"size\", \"100\");\n      params.put(\"initialSize\", \"10\");\n      params.put(\"autowarmCount\", \"25\");\n      NoOpRegenerator regenerator = new NoOpRegenerator();\n      Object initObj = lfuCache.init(params, null, regenerator);\n      lfuCache.setState(SolrCache.State.LIVE);\n      for (int i = 0; i < 101; i++) {\n        lfuCache.put(i + 1, \"\" + (i + 1));\n      }\n      assertEquals(\"15\", lfuCache.get(15));\n      assertEquals(\"75\", lfuCache.get(75));\n      assertEquals(null, lfuCache.get(110));\n      NamedList nl = lfuCache.getStatistics();\n      assertEquals(3L, nl.get(\"lookups\"));\n      assertEquals(2L, nl.get(\"hits\"));\n      assertEquals(101L, nl.get(\"inserts\"));\n\n      assertEquals(null, lfuCache.get(1));  // first item put in should be the first out\n\n      // Test autowarming\n      newLFUCache.init(params, initObj, regenerator);\n      newLFUCache.warm(null, lfuCache);\n      newLFUCache.setState(SolrCache.State.LIVE);\n\n      newLFUCache.put(103, \"103\");\n      assertEquals(\"15\", newLFUCache.get(15));\n      assertEquals(\"75\", newLFUCache.get(75));\n      assertEquals(null, newLFUCache.get(50));\n      nl = newLFUCache.getStatistics();\n      assertEquals(3L, nl.get(\"lookups\"));\n      assertEquals(2L, nl.get(\"hits\"));\n      assertEquals(1L, nl.get(\"inserts\"));\n      assertEquals(0L, nl.get(\"evictions\"));\n\n      assertEquals(7L, nl.get(\"cumulative_lookups\"));\n      assertEquals(4L, nl.get(\"cumulative_hits\"));\n      assertEquals(102L, nl.get(\"cumulative_inserts\"));\n      newLFUCache.close();\n\n      // Test no autowarming\n\n      params.put(\"autowarmCount\", \"0\");\n      noWarmLFUCache.init(params, initObj, regenerator);\n      noWarmLFUCache.warm(null, lfuCache);\n      noWarmLFUCache.setState(SolrCache.State.LIVE);\n\n      noWarmLFUCache.put(103, \"103\");\n      assertNull(noWarmLFUCache.get(15));\n      assertNull(noWarmLFUCache.get(75));\n      assertEquals(\"103\", noWarmLFUCache.get(103));\n    } finally {\n      if (newLFUCache != null) newLFUCache.close();\n      if (noWarmLFUCache != null) noWarmLFUCache.close();\n      if (lfuCache != null) lfuCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSimple() throws IOException {\n    LFUCache lfuCache = new LFUCache();\n    LFUCache newLFUCache = new LFUCache();\n    LFUCache noWarmLFUCache = new LFUCache();\n    try {\n      Map params = new HashMap();\n      params.put(\"size\", \"100\");\n      params.put(\"initialSize\", \"10\");\n      params.put(\"autowarmCount\", \"25\");\n      LFURegenerator regenerator = new LFURegenerator();\n      Object initObj = lfuCache.init(params, null, regenerator);\n      lfuCache.setState(SolrCache.State.LIVE);\n      for (int i = 0; i < 101; i++) {\n        lfuCache.put(i + 1, \"\" + (i + 1));\n      }\n      assertEquals(\"15\", lfuCache.get(15));\n      assertEquals(\"75\", lfuCache.get(75));\n      assertEquals(null, lfuCache.get(110));\n      NamedList nl = lfuCache.getStatistics();\n      assertEquals(3L, nl.get(\"lookups\"));\n      assertEquals(2L, nl.get(\"hits\"));\n      assertEquals(101L, nl.get(\"inserts\"));\n\n      assertEquals(null, lfuCache.get(1));  // first item put in should be the first out\n\n      // Test autowarming\n      newLFUCache.init(params, initObj, regenerator);\n      newLFUCache.warm(null, lfuCache);\n      newLFUCache.setState(SolrCache.State.LIVE);\n\n      newLFUCache.put(103, \"103\");\n      assertEquals(\"15\", newLFUCache.get(15));\n      assertEquals(\"75\", newLFUCache.get(75));\n      assertEquals(null, newLFUCache.get(50));\n      nl = newLFUCache.getStatistics();\n      assertEquals(3L, nl.get(\"lookups\"));\n      assertEquals(2L, nl.get(\"hits\"));\n      assertEquals(1L, nl.get(\"inserts\"));\n      assertEquals(0L, nl.get(\"evictions\"));\n\n      assertEquals(7L, nl.get(\"cumulative_lookups\"));\n      assertEquals(4L, nl.get(\"cumulative_hits\"));\n      assertEquals(102L, nl.get(\"cumulative_inserts\"));\n      newLFUCache.close();\n\n      // Test no autowarming\n\n      params.put(\"autowarmCount\", \"0\");\n      noWarmLFUCache.init(params, initObj, regenerator);\n      noWarmLFUCache.warm(null, lfuCache);\n      noWarmLFUCache.setState(SolrCache.State.LIVE);\n\n      noWarmLFUCache.put(103, \"103\");\n      assertNull(noWarmLFUCache.get(15));\n      assertNull(noWarmLFUCache.get(75));\n      assertEquals(\"103\", noWarmLFUCache.get(103));\n    } finally {\n      if (newLFUCache != null) newLFUCache.close();\n      if (noWarmLFUCache != null) noWarmLFUCache.close();\n      if (lfuCache != null) lfuCache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestLFUCache#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestLFUCache#testSimple().mjava","sourceNew":"  @Test\n  public void testSimple() throws IOException {\n    LFUCache lfuCache = new LFUCache();\n    LFUCache newLFUCache = new LFUCache();\n    LFUCache noWarmLFUCache = new LFUCache();\n    try {\n      Map params = new HashMap();\n      params.put(\"size\", \"100\");\n      params.put(\"initialSize\", \"10\");\n      params.put(\"autowarmCount\", \"25\");\n      NoOpRegenerator regenerator = new NoOpRegenerator();\n      Object initObj = lfuCache.init(params, null, regenerator);\n      lfuCache.setState(SolrCache.State.LIVE);\n      for (int i = 0; i < 101; i++) {\n        lfuCache.put(i + 1, \"\" + (i + 1));\n      }\n      assertEquals(\"15\", lfuCache.get(15));\n      assertEquals(\"75\", lfuCache.get(75));\n      assertEquals(null, lfuCache.get(110));\n      NamedList nl = lfuCache.getStatistics();\n      assertEquals(3L, nl.get(\"lookups\"));\n      assertEquals(2L, nl.get(\"hits\"));\n      assertEquals(101L, nl.get(\"inserts\"));\n\n      assertEquals(null, lfuCache.get(1));  // first item put in should be the first out\n\n      // Test autowarming\n      newLFUCache.init(params, initObj, regenerator);\n      newLFUCache.warm(null, lfuCache);\n      newLFUCache.setState(SolrCache.State.LIVE);\n\n      newLFUCache.put(103, \"103\");\n      assertEquals(\"15\", newLFUCache.get(15));\n      assertEquals(\"75\", newLFUCache.get(75));\n      assertEquals(null, newLFUCache.get(50));\n      nl = newLFUCache.getStatistics();\n      assertEquals(3L, nl.get(\"lookups\"));\n      assertEquals(2L, nl.get(\"hits\"));\n      assertEquals(1L, nl.get(\"inserts\"));\n      assertEquals(0L, nl.get(\"evictions\"));\n\n      assertEquals(7L, nl.get(\"cumulative_lookups\"));\n      assertEquals(4L, nl.get(\"cumulative_hits\"));\n      assertEquals(102L, nl.get(\"cumulative_inserts\"));\n      newLFUCache.close();\n\n      // Test no autowarming\n\n      params.put(\"autowarmCount\", \"0\");\n      noWarmLFUCache.init(params, initObj, regenerator);\n      noWarmLFUCache.warm(null, lfuCache);\n      noWarmLFUCache.setState(SolrCache.State.LIVE);\n\n      noWarmLFUCache.put(103, \"103\");\n      assertNull(noWarmLFUCache.get(15));\n      assertNull(noWarmLFUCache.get(75));\n      assertEquals(\"103\", noWarmLFUCache.get(103));\n    } finally {\n      if (newLFUCache != null) newLFUCache.close();\n      if (noWarmLFUCache != null) noWarmLFUCache.close();\n      if (lfuCache != null) lfuCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSimple() throws IOException {\n    LFUCache lfuCache = new LFUCache();\n    LFUCache newLFUCache = new LFUCache();\n    LFUCache noWarmLFUCache = new LFUCache();\n    try {\n      Map params = new HashMap();\n      params.put(\"size\", \"100\");\n      params.put(\"initialSize\", \"10\");\n      params.put(\"autowarmCount\", \"25\");\n      LFURegenerator regenerator = new LFURegenerator();\n      Object initObj = lfuCache.init(params, null, regenerator);\n      lfuCache.setState(SolrCache.State.LIVE);\n      for (int i = 0; i < 101; i++) {\n        lfuCache.put(i + 1, \"\" + (i + 1));\n      }\n      assertEquals(\"15\", lfuCache.get(15));\n      assertEquals(\"75\", lfuCache.get(75));\n      assertEquals(null, lfuCache.get(110));\n      NamedList nl = lfuCache.getStatistics();\n      assertEquals(3L, nl.get(\"lookups\"));\n      assertEquals(2L, nl.get(\"hits\"));\n      assertEquals(101L, nl.get(\"inserts\"));\n\n      assertEquals(null, lfuCache.get(1));  // first item put in should be the first out\n\n      // Test autowarming\n      newLFUCache.init(params, initObj, regenerator);\n      newLFUCache.warm(null, lfuCache);\n      newLFUCache.setState(SolrCache.State.LIVE);\n\n      newLFUCache.put(103, \"103\");\n      assertEquals(\"15\", newLFUCache.get(15));\n      assertEquals(\"75\", newLFUCache.get(75));\n      assertEquals(null, newLFUCache.get(50));\n      nl = newLFUCache.getStatistics();\n      assertEquals(3L, nl.get(\"lookups\"));\n      assertEquals(2L, nl.get(\"hits\"));\n      assertEquals(1L, nl.get(\"inserts\"));\n      assertEquals(0L, nl.get(\"evictions\"));\n\n      assertEquals(7L, nl.get(\"cumulative_lookups\"));\n      assertEquals(4L, nl.get(\"cumulative_hits\"));\n      assertEquals(102L, nl.get(\"cumulative_inserts\"));\n      newLFUCache.close();\n\n      // Test no autowarming\n\n      params.put(\"autowarmCount\", \"0\");\n      noWarmLFUCache.init(params, initObj, regenerator);\n      noWarmLFUCache.warm(null, lfuCache);\n      noWarmLFUCache.setState(SolrCache.State.LIVE);\n\n      noWarmLFUCache.put(103, \"103\");\n      assertNull(noWarmLFUCache.get(15));\n      assertNull(noWarmLFUCache.get(75));\n      assertEquals(\"103\", noWarmLFUCache.get(103));\n    } finally {\n      if (newLFUCache != null) newLFUCache.close();\n      if (noWarmLFUCache != null) noWarmLFUCache.close();\n      if (lfuCache != null) lfuCache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestLFUCache#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestLFUCache#testSimple().mjava","sourceNew":"  @Test\n  public void testSimple() throws IOException {\n    SolrMetricManager metricManager = new SolrMetricManager();\n    Random r = random();\n    String registry = TestUtil.randomSimpleString(r, 2, 10);\n    String scope = TestUtil.randomSimpleString(r, 2, 10);\n    LFUCache lfuCache = new LFUCache();\n    LFUCache newLFUCache = new LFUCache();\n    LFUCache noWarmLFUCache = new LFUCache();\n    lfuCache.initializeMetrics(metricManager, registry, scope + \".lfuCache\");\n    newLFUCache.initializeMetrics(metricManager, registry, scope + \".newLFUCache\");\n    noWarmLFUCache.initializeMetrics(metricManager, registry, scope + \".noWarmLFUCache\");\n    try {\n      Map params = new HashMap();\n      params.put(\"size\", \"100\");\n      params.put(\"initialSize\", \"10\");\n      params.put(\"autowarmCount\", \"25\");\n      NoOpRegenerator regenerator = new NoOpRegenerator();\n      Object initObj = lfuCache.init(params, null, regenerator);\n      lfuCache.setState(SolrCache.State.LIVE);\n      for (int i = 0; i < 101; i++) {\n        lfuCache.put(i + 1, \"\" + (i + 1));\n      }\n      assertEquals(\"15\", lfuCache.get(15));\n      assertEquals(\"75\", lfuCache.get(75));\n      assertEquals(null, lfuCache.get(110));\n      Map<String,Object> nl = lfuCache.getMetricsMap().getValue();\n      assertEquals(3L, nl.get(\"lookups\"));\n      assertEquals(2L, nl.get(\"hits\"));\n      assertEquals(101L, nl.get(\"inserts\"));\n\n      assertEquals(null, lfuCache.get(1));  // first item put in should be the first out\n\n      // Test autowarming\n      newLFUCache.init(params, initObj, regenerator);\n      newLFUCache.warm(null, lfuCache);\n      newLFUCache.setState(SolrCache.State.LIVE);\n\n      newLFUCache.put(103, \"103\");\n      assertEquals(\"15\", newLFUCache.get(15));\n      assertEquals(\"75\", newLFUCache.get(75));\n      assertEquals(null, newLFUCache.get(50));\n      nl = newLFUCache.getMetricsMap().getValue();\n      assertEquals(3L, nl.get(\"lookups\"));\n      assertEquals(2L, nl.get(\"hits\"));\n      assertEquals(1L, nl.get(\"inserts\"));\n      assertEquals(0L, nl.get(\"evictions\"));\n\n      assertEquals(7L, nl.get(\"cumulative_lookups\"));\n      assertEquals(4L, nl.get(\"cumulative_hits\"));\n      assertEquals(102L, nl.get(\"cumulative_inserts\"));\n      newLFUCache.close();\n\n      // Test no autowarming\n\n      params.put(\"autowarmCount\", \"0\");\n      noWarmLFUCache.init(params, initObj, regenerator);\n      noWarmLFUCache.warm(null, lfuCache);\n      noWarmLFUCache.setState(SolrCache.State.LIVE);\n\n      noWarmLFUCache.put(103, \"103\");\n      assertNull(noWarmLFUCache.get(15));\n      assertNull(noWarmLFUCache.get(75));\n      assertEquals(\"103\", noWarmLFUCache.get(103));\n    } finally {\n      if (newLFUCache != null) newLFUCache.close();\n      if (noWarmLFUCache != null) noWarmLFUCache.close();\n      if (lfuCache != null) lfuCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSimple() throws IOException {\n    LFUCache lfuCache = new LFUCache();\n    LFUCache newLFUCache = new LFUCache();\n    LFUCache noWarmLFUCache = new LFUCache();\n    try {\n      Map params = new HashMap();\n      params.put(\"size\", \"100\");\n      params.put(\"initialSize\", \"10\");\n      params.put(\"autowarmCount\", \"25\");\n      NoOpRegenerator regenerator = new NoOpRegenerator();\n      Object initObj = lfuCache.init(params, null, regenerator);\n      lfuCache.setState(SolrCache.State.LIVE);\n      for (int i = 0; i < 101; i++) {\n        lfuCache.put(i + 1, \"\" + (i + 1));\n      }\n      assertEquals(\"15\", lfuCache.get(15));\n      assertEquals(\"75\", lfuCache.get(75));\n      assertEquals(null, lfuCache.get(110));\n      NamedList nl = lfuCache.getStatistics();\n      assertEquals(3L, nl.get(\"lookups\"));\n      assertEquals(2L, nl.get(\"hits\"));\n      assertEquals(101L, nl.get(\"inserts\"));\n\n      assertEquals(null, lfuCache.get(1));  // first item put in should be the first out\n\n      // Test autowarming\n      newLFUCache.init(params, initObj, regenerator);\n      newLFUCache.warm(null, lfuCache);\n      newLFUCache.setState(SolrCache.State.LIVE);\n\n      newLFUCache.put(103, \"103\");\n      assertEquals(\"15\", newLFUCache.get(15));\n      assertEquals(\"75\", newLFUCache.get(75));\n      assertEquals(null, newLFUCache.get(50));\n      nl = newLFUCache.getStatistics();\n      assertEquals(3L, nl.get(\"lookups\"));\n      assertEquals(2L, nl.get(\"hits\"));\n      assertEquals(1L, nl.get(\"inserts\"));\n      assertEquals(0L, nl.get(\"evictions\"));\n\n      assertEquals(7L, nl.get(\"cumulative_lookups\"));\n      assertEquals(4L, nl.get(\"cumulative_hits\"));\n      assertEquals(102L, nl.get(\"cumulative_inserts\"));\n      newLFUCache.close();\n\n      // Test no autowarming\n\n      params.put(\"autowarmCount\", \"0\");\n      noWarmLFUCache.init(params, initObj, regenerator);\n      noWarmLFUCache.warm(null, lfuCache);\n      noWarmLFUCache.setState(SolrCache.State.LIVE);\n\n      noWarmLFUCache.put(103, \"103\");\n      assertNull(noWarmLFUCache.get(15));\n      assertNull(noWarmLFUCache.get(75));\n      assertEquals(\"103\", noWarmLFUCache.get(103));\n    } finally {\n      if (newLFUCache != null) newLFUCache.close();\n      if (noWarmLFUCache != null) noWarmLFUCache.close();\n      if (lfuCache != null) lfuCache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["bfc52860e6d13d034226a760813c59d984c6817a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestLFUCache#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestLFUCache#testSimple().mjava","sourceNew":"  @Test\n  public void testSimple() throws IOException {\n    SolrMetricManager metricManager = new SolrMetricManager();\n    Random r = random();\n    String registry = TestUtil.randomSimpleString(r, 2, 10);\n    String scope = TestUtil.randomSimpleString(r, 2, 10);\n    LFUCache lfuCache = new LFUCache();\n    LFUCache newLFUCache = new LFUCache();\n    LFUCache noWarmLFUCache = new LFUCache();\n    lfuCache.initializeMetrics(metricManager, registry, scope + \".lfuCache\");\n    newLFUCache.initializeMetrics(metricManager, registry, scope + \".newLFUCache\");\n    noWarmLFUCache.initializeMetrics(metricManager, registry, scope + \".noWarmLFUCache\");\n    try {\n      Map params = new HashMap();\n      params.put(\"size\", \"100\");\n      params.put(\"initialSize\", \"10\");\n      params.put(\"autowarmCount\", \"25\");\n      NoOpRegenerator regenerator = new NoOpRegenerator();\n      Object initObj = lfuCache.init(params, null, regenerator);\n      lfuCache.setState(SolrCache.State.LIVE);\n      for (int i = 0; i < 101; i++) {\n        lfuCache.put(i + 1, \"\" + (i + 1));\n      }\n      assertEquals(\"15\", lfuCache.get(15));\n      assertEquals(\"75\", lfuCache.get(75));\n      assertEquals(null, lfuCache.get(110));\n      Map<String,Object> nl = lfuCache.getMetricsMap().getValue();\n      assertEquals(3L, nl.get(\"lookups\"));\n      assertEquals(2L, nl.get(\"hits\"));\n      assertEquals(101L, nl.get(\"inserts\"));\n\n      assertEquals(null, lfuCache.get(1));  // first item put in should be the first out\n\n      // Test autowarming\n      newLFUCache.init(params, initObj, regenerator);\n      newLFUCache.warm(null, lfuCache);\n      newLFUCache.setState(SolrCache.State.LIVE);\n\n      newLFUCache.put(103, \"103\");\n      assertEquals(\"15\", newLFUCache.get(15));\n      assertEquals(\"75\", newLFUCache.get(75));\n      assertEquals(null, newLFUCache.get(50));\n      nl = newLFUCache.getMetricsMap().getValue();\n      assertEquals(3L, nl.get(\"lookups\"));\n      assertEquals(2L, nl.get(\"hits\"));\n      assertEquals(1L, nl.get(\"inserts\"));\n      assertEquals(0L, nl.get(\"evictions\"));\n\n      assertEquals(7L, nl.get(\"cumulative_lookups\"));\n      assertEquals(4L, nl.get(\"cumulative_hits\"));\n      assertEquals(102L, nl.get(\"cumulative_inserts\"));\n      newLFUCache.close();\n\n      // Test no autowarming\n\n      params.put(\"autowarmCount\", \"0\");\n      noWarmLFUCache.init(params, initObj, regenerator);\n      noWarmLFUCache.warm(null, lfuCache);\n      noWarmLFUCache.setState(SolrCache.State.LIVE);\n\n      noWarmLFUCache.put(103, \"103\");\n      assertNull(noWarmLFUCache.get(15));\n      assertNull(noWarmLFUCache.get(75));\n      assertEquals(\"103\", noWarmLFUCache.get(103));\n    } finally {\n      if (newLFUCache != null) newLFUCache.close();\n      if (noWarmLFUCache != null) noWarmLFUCache.close();\n      if (lfuCache != null) lfuCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSimple() throws IOException {\n    LFUCache lfuCache = new LFUCache();\n    LFUCache newLFUCache = new LFUCache();\n    LFUCache noWarmLFUCache = new LFUCache();\n    try {\n      Map params = new HashMap();\n      params.put(\"size\", \"100\");\n      params.put(\"initialSize\", \"10\");\n      params.put(\"autowarmCount\", \"25\");\n      NoOpRegenerator regenerator = new NoOpRegenerator();\n      Object initObj = lfuCache.init(params, null, regenerator);\n      lfuCache.setState(SolrCache.State.LIVE);\n      for (int i = 0; i < 101; i++) {\n        lfuCache.put(i + 1, \"\" + (i + 1));\n      }\n      assertEquals(\"15\", lfuCache.get(15));\n      assertEquals(\"75\", lfuCache.get(75));\n      assertEquals(null, lfuCache.get(110));\n      NamedList nl = lfuCache.getStatistics();\n      assertEquals(3L, nl.get(\"lookups\"));\n      assertEquals(2L, nl.get(\"hits\"));\n      assertEquals(101L, nl.get(\"inserts\"));\n\n      assertEquals(null, lfuCache.get(1));  // first item put in should be the first out\n\n      // Test autowarming\n      newLFUCache.init(params, initObj, regenerator);\n      newLFUCache.warm(null, lfuCache);\n      newLFUCache.setState(SolrCache.State.LIVE);\n\n      newLFUCache.put(103, \"103\");\n      assertEquals(\"15\", newLFUCache.get(15));\n      assertEquals(\"75\", newLFUCache.get(75));\n      assertEquals(null, newLFUCache.get(50));\n      nl = newLFUCache.getStatistics();\n      assertEquals(3L, nl.get(\"lookups\"));\n      assertEquals(2L, nl.get(\"hits\"));\n      assertEquals(1L, nl.get(\"inserts\"));\n      assertEquals(0L, nl.get(\"evictions\"));\n\n      assertEquals(7L, nl.get(\"cumulative_lookups\"));\n      assertEquals(4L, nl.get(\"cumulative_hits\"));\n      assertEquals(102L, nl.get(\"cumulative_inserts\"));\n      newLFUCache.close();\n\n      // Test no autowarming\n\n      params.put(\"autowarmCount\", \"0\");\n      noWarmLFUCache.init(params, initObj, regenerator);\n      noWarmLFUCache.warm(null, lfuCache);\n      noWarmLFUCache.setState(SolrCache.State.LIVE);\n\n      noWarmLFUCache.put(103, \"103\");\n      assertNull(noWarmLFUCache.get(15));\n      assertNull(noWarmLFUCache.get(75));\n      assertEquals(\"103\", noWarmLFUCache.get(103));\n    } finally {\n      if (newLFUCache != null) newLFUCache.close();\n      if (noWarmLFUCache != null) noWarmLFUCache.close();\n      if (lfuCache != null) lfuCache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfc52860e6d13d034226a760813c59d984c6817a","date":1522229027,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestLFUCache#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestLFUCache#testSimple().mjava","sourceNew":"  @Test\n  public void testSimple() throws IOException {\n    SolrMetricManager metricManager = new SolrMetricManager();\n    Random r = random();\n    String registry = TestUtil.randomSimpleString(r, 2, 10);\n    String scope = TestUtil.randomSimpleString(r, 2, 10);\n    LFUCache lfuCache = new LFUCache();\n    LFUCache newLFUCache = new LFUCache();\n    LFUCache noWarmLFUCache = new LFUCache();\n    lfuCache.initializeMetrics(metricManager, registry, \"foo\", scope + \".lfuCache\");\n    newLFUCache.initializeMetrics(metricManager, registry, \"foo\", scope + \".newLFUCache\");\n    noWarmLFUCache.initializeMetrics(metricManager, registry, \"foo\", scope + \".noWarmLFUCache\");\n    try {\n      Map params = new HashMap();\n      params.put(\"size\", \"100\");\n      params.put(\"initialSize\", \"10\");\n      params.put(\"autowarmCount\", \"25\");\n      NoOpRegenerator regenerator = new NoOpRegenerator();\n      Object initObj = lfuCache.init(params, null, regenerator);\n      lfuCache.setState(SolrCache.State.LIVE);\n      for (int i = 0; i < 101; i++) {\n        lfuCache.put(i + 1, \"\" + (i + 1));\n      }\n      assertEquals(\"15\", lfuCache.get(15));\n      assertEquals(\"75\", lfuCache.get(75));\n      assertEquals(null, lfuCache.get(110));\n      Map<String,Object> nl = lfuCache.getMetricsMap().getValue();\n      assertEquals(3L, nl.get(\"lookups\"));\n      assertEquals(2L, nl.get(\"hits\"));\n      assertEquals(101L, nl.get(\"inserts\"));\n\n      assertEquals(null, lfuCache.get(1));  // first item put in should be the first out\n\n      // Test autowarming\n      newLFUCache.init(params, initObj, regenerator);\n      newLFUCache.warm(null, lfuCache);\n      newLFUCache.setState(SolrCache.State.LIVE);\n\n      newLFUCache.put(103, \"103\");\n      assertEquals(\"15\", newLFUCache.get(15));\n      assertEquals(\"75\", newLFUCache.get(75));\n      assertEquals(null, newLFUCache.get(50));\n      nl = newLFUCache.getMetricsMap().getValue();\n      assertEquals(3L, nl.get(\"lookups\"));\n      assertEquals(2L, nl.get(\"hits\"));\n      assertEquals(1L, nl.get(\"inserts\"));\n      assertEquals(0L, nl.get(\"evictions\"));\n\n      assertEquals(7L, nl.get(\"cumulative_lookups\"));\n      assertEquals(4L, nl.get(\"cumulative_hits\"));\n      assertEquals(102L, nl.get(\"cumulative_inserts\"));\n      newLFUCache.close();\n\n      // Test no autowarming\n\n      params.put(\"autowarmCount\", \"0\");\n      noWarmLFUCache.init(params, initObj, regenerator);\n      noWarmLFUCache.warm(null, lfuCache);\n      noWarmLFUCache.setState(SolrCache.State.LIVE);\n\n      noWarmLFUCache.put(103, \"103\");\n      assertNull(noWarmLFUCache.get(15));\n      assertNull(noWarmLFUCache.get(75));\n      assertEquals(\"103\", noWarmLFUCache.get(103));\n    } finally {\n      if (newLFUCache != null) newLFUCache.close();\n      if (noWarmLFUCache != null) noWarmLFUCache.close();\n      if (lfuCache != null) lfuCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSimple() throws IOException {\n    SolrMetricManager metricManager = new SolrMetricManager();\n    Random r = random();\n    String registry = TestUtil.randomSimpleString(r, 2, 10);\n    String scope = TestUtil.randomSimpleString(r, 2, 10);\n    LFUCache lfuCache = new LFUCache();\n    LFUCache newLFUCache = new LFUCache();\n    LFUCache noWarmLFUCache = new LFUCache();\n    lfuCache.initializeMetrics(metricManager, registry, scope + \".lfuCache\");\n    newLFUCache.initializeMetrics(metricManager, registry, scope + \".newLFUCache\");\n    noWarmLFUCache.initializeMetrics(metricManager, registry, scope + \".noWarmLFUCache\");\n    try {\n      Map params = new HashMap();\n      params.put(\"size\", \"100\");\n      params.put(\"initialSize\", \"10\");\n      params.put(\"autowarmCount\", \"25\");\n      NoOpRegenerator regenerator = new NoOpRegenerator();\n      Object initObj = lfuCache.init(params, null, regenerator);\n      lfuCache.setState(SolrCache.State.LIVE);\n      for (int i = 0; i < 101; i++) {\n        lfuCache.put(i + 1, \"\" + (i + 1));\n      }\n      assertEquals(\"15\", lfuCache.get(15));\n      assertEquals(\"75\", lfuCache.get(75));\n      assertEquals(null, lfuCache.get(110));\n      Map<String,Object> nl = lfuCache.getMetricsMap().getValue();\n      assertEquals(3L, nl.get(\"lookups\"));\n      assertEquals(2L, nl.get(\"hits\"));\n      assertEquals(101L, nl.get(\"inserts\"));\n\n      assertEquals(null, lfuCache.get(1));  // first item put in should be the first out\n\n      // Test autowarming\n      newLFUCache.init(params, initObj, regenerator);\n      newLFUCache.warm(null, lfuCache);\n      newLFUCache.setState(SolrCache.State.LIVE);\n\n      newLFUCache.put(103, \"103\");\n      assertEquals(\"15\", newLFUCache.get(15));\n      assertEquals(\"75\", newLFUCache.get(75));\n      assertEquals(null, newLFUCache.get(50));\n      nl = newLFUCache.getMetricsMap().getValue();\n      assertEquals(3L, nl.get(\"lookups\"));\n      assertEquals(2L, nl.get(\"hits\"));\n      assertEquals(1L, nl.get(\"inserts\"));\n      assertEquals(0L, nl.get(\"evictions\"));\n\n      assertEquals(7L, nl.get(\"cumulative_lookups\"));\n      assertEquals(4L, nl.get(\"cumulative_hits\"));\n      assertEquals(102L, nl.get(\"cumulative_inserts\"));\n      newLFUCache.close();\n\n      // Test no autowarming\n\n      params.put(\"autowarmCount\", \"0\");\n      noWarmLFUCache.init(params, initObj, regenerator);\n      noWarmLFUCache.warm(null, lfuCache);\n      noWarmLFUCache.setState(SolrCache.State.LIVE);\n\n      noWarmLFUCache.put(103, \"103\");\n      assertNull(noWarmLFUCache.get(15));\n      assertNull(noWarmLFUCache.get(75));\n      assertEquals(\"103\", noWarmLFUCache.get(103));\n    } finally {\n      if (newLFUCache != null) newLFUCache.close();\n      if (noWarmLFUCache != null) noWarmLFUCache.close();\n      if (lfuCache != null) lfuCache.close();\n    }\n  }\n\n","bugFix":["816521ebaad5add9cb96bb88c577394e2938c40b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestLFUCache#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestLFUCache#testSimple().mjava","sourceNew":"  @Test\n  public void testSimple() throws IOException {\n    SolrMetricManager metricManager = new SolrMetricManager();\n    Random r = random();\n    String registry = TestUtil.randomSimpleString(r, 2, 10);\n    String scope = TestUtil.randomSimpleString(r, 2, 10);\n    LFUCache lfuCache = new LFUCache();\n    LFUCache newLFUCache = new LFUCache();\n    LFUCache noWarmLFUCache = new LFUCache();\n    lfuCache.initializeMetrics(metricManager, registry, \"foo\", scope + \".lfuCache\");\n    newLFUCache.initializeMetrics(metricManager, registry, \"foo\", scope + \".newLFUCache\");\n    noWarmLFUCache.initializeMetrics(metricManager, registry, \"foo\", scope + \".noWarmLFUCache\");\n    try {\n      Map params = new HashMap();\n      params.put(\"size\", \"100\");\n      params.put(\"initialSize\", \"10\");\n      params.put(\"autowarmCount\", \"25\");\n      NoOpRegenerator regenerator = new NoOpRegenerator();\n      Object initObj = lfuCache.init(params, null, regenerator);\n      lfuCache.setState(SolrCache.State.LIVE);\n      for (int i = 0; i < 101; i++) {\n        lfuCache.put(i + 1, \"\" + (i + 1));\n      }\n      assertEquals(\"15\", lfuCache.get(15));\n      assertEquals(\"75\", lfuCache.get(75));\n      assertEquals(null, lfuCache.get(110));\n      Map<String,Object> nl = lfuCache.getMetricsMap().getValue();\n      assertEquals(3L, nl.get(\"lookups\"));\n      assertEquals(2L, nl.get(\"hits\"));\n      assertEquals(101L, nl.get(\"inserts\"));\n\n      assertEquals(null, lfuCache.get(1));  // first item put in should be the first out\n\n      // Test autowarming\n      newLFUCache.init(params, initObj, regenerator);\n      newLFUCache.warm(null, lfuCache);\n      newLFUCache.setState(SolrCache.State.LIVE);\n\n      newLFUCache.put(103, \"103\");\n      assertEquals(\"15\", newLFUCache.get(15));\n      assertEquals(\"75\", newLFUCache.get(75));\n      assertEquals(null, newLFUCache.get(50));\n      nl = newLFUCache.getMetricsMap().getValue();\n      assertEquals(3L, nl.get(\"lookups\"));\n      assertEquals(2L, nl.get(\"hits\"));\n      assertEquals(1L, nl.get(\"inserts\"));\n      assertEquals(0L, nl.get(\"evictions\"));\n\n      assertEquals(7L, nl.get(\"cumulative_lookups\"));\n      assertEquals(4L, nl.get(\"cumulative_hits\"));\n      assertEquals(102L, nl.get(\"cumulative_inserts\"));\n      newLFUCache.close();\n\n      // Test no autowarming\n\n      params.put(\"autowarmCount\", \"0\");\n      noWarmLFUCache.init(params, initObj, regenerator);\n      noWarmLFUCache.warm(null, lfuCache);\n      noWarmLFUCache.setState(SolrCache.State.LIVE);\n\n      noWarmLFUCache.put(103, \"103\");\n      assertNull(noWarmLFUCache.get(15));\n      assertNull(noWarmLFUCache.get(75));\n      assertEquals(\"103\", noWarmLFUCache.get(103));\n    } finally {\n      if (newLFUCache != null) newLFUCache.close();\n      if (noWarmLFUCache != null) noWarmLFUCache.close();\n      if (lfuCache != null) lfuCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSimple() throws IOException {\n    SolrMetricManager metricManager = new SolrMetricManager();\n    Random r = random();\n    String registry = TestUtil.randomSimpleString(r, 2, 10);\n    String scope = TestUtil.randomSimpleString(r, 2, 10);\n    LFUCache lfuCache = new LFUCache();\n    LFUCache newLFUCache = new LFUCache();\n    LFUCache noWarmLFUCache = new LFUCache();\n    lfuCache.initializeMetrics(metricManager, registry, scope + \".lfuCache\");\n    newLFUCache.initializeMetrics(metricManager, registry, scope + \".newLFUCache\");\n    noWarmLFUCache.initializeMetrics(metricManager, registry, scope + \".noWarmLFUCache\");\n    try {\n      Map params = new HashMap();\n      params.put(\"size\", \"100\");\n      params.put(\"initialSize\", \"10\");\n      params.put(\"autowarmCount\", \"25\");\n      NoOpRegenerator regenerator = new NoOpRegenerator();\n      Object initObj = lfuCache.init(params, null, regenerator);\n      lfuCache.setState(SolrCache.State.LIVE);\n      for (int i = 0; i < 101; i++) {\n        lfuCache.put(i + 1, \"\" + (i + 1));\n      }\n      assertEquals(\"15\", lfuCache.get(15));\n      assertEquals(\"75\", lfuCache.get(75));\n      assertEquals(null, lfuCache.get(110));\n      Map<String,Object> nl = lfuCache.getMetricsMap().getValue();\n      assertEquals(3L, nl.get(\"lookups\"));\n      assertEquals(2L, nl.get(\"hits\"));\n      assertEquals(101L, nl.get(\"inserts\"));\n\n      assertEquals(null, lfuCache.get(1));  // first item put in should be the first out\n\n      // Test autowarming\n      newLFUCache.init(params, initObj, regenerator);\n      newLFUCache.warm(null, lfuCache);\n      newLFUCache.setState(SolrCache.State.LIVE);\n\n      newLFUCache.put(103, \"103\");\n      assertEquals(\"15\", newLFUCache.get(15));\n      assertEquals(\"75\", newLFUCache.get(75));\n      assertEquals(null, newLFUCache.get(50));\n      nl = newLFUCache.getMetricsMap().getValue();\n      assertEquals(3L, nl.get(\"lookups\"));\n      assertEquals(2L, nl.get(\"hits\"));\n      assertEquals(1L, nl.get(\"inserts\"));\n      assertEquals(0L, nl.get(\"evictions\"));\n\n      assertEquals(7L, nl.get(\"cumulative_lookups\"));\n      assertEquals(4L, nl.get(\"cumulative_hits\"));\n      assertEquals(102L, nl.get(\"cumulative_inserts\"));\n      newLFUCache.close();\n\n      // Test no autowarming\n\n      params.put(\"autowarmCount\", \"0\");\n      noWarmLFUCache.init(params, initObj, regenerator);\n      noWarmLFUCache.warm(null, lfuCache);\n      noWarmLFUCache.setState(SolrCache.State.LIVE);\n\n      noWarmLFUCache.put(103, \"103\");\n      assertNull(noWarmLFUCache.get(15));\n      assertNull(noWarmLFUCache.get(75));\n      assertEquals(\"103\", noWarmLFUCache.get(103));\n    } finally {\n      if (newLFUCache != null) newLFUCache.close();\n      if (noWarmLFUCache != null) noWarmLFUCache.close();\n      if (lfuCache != null) lfuCache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","date":1571411704,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestLFUCache#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestLFUCache#testSimple().mjava","sourceNew":"  @Test\n  public void testSimple() throws Exception {\n    SolrMetricManager metricManager = new SolrMetricManager();\n    Random r = random();\n    String registry = TestUtil.randomSimpleString(r, 2, 10);\n    String scope = TestUtil.randomSimpleString(r, 2, 10);\n    LFUCache lfuCache = new LFUCache();\n    LFUCache newLFUCache = new LFUCache();\n    LFUCache noWarmLFUCache = new LFUCache();\n    lfuCache.initializeMetrics(metricManager, registry, \"foo\", scope + \".lfuCache\");\n    newLFUCache.initializeMetrics(metricManager, registry, \"foo\", scope + \".newLFUCache\");\n    noWarmLFUCache.initializeMetrics(metricManager, registry, \"foo\", scope + \".noWarmLFUCache\");\n    try {\n      Map params = new HashMap();\n      params.put(\"size\", \"100\");\n      params.put(\"initialSize\", \"10\");\n      params.put(\"autowarmCount\", \"25\");\n      NoOpRegenerator regenerator = new NoOpRegenerator();\n      Object initObj = lfuCache.init(params, null, regenerator);\n      lfuCache.setState(SolrCache.State.LIVE);\n      for (int i = 0; i < 101; i++) {\n        lfuCache.put(i + 1, \"\" + (i + 1));\n      }\n      assertEquals(\"15\", lfuCache.get(15));\n      assertEquals(\"75\", lfuCache.get(75));\n      assertEquals(null, lfuCache.get(110));\n      Map<String,Object> nl = lfuCache.getMetricsMap().getValue();\n      assertEquals(3L, nl.get(\"lookups\"));\n      assertEquals(2L, nl.get(\"hits\"));\n      assertEquals(101L, nl.get(\"inserts\"));\n\n      assertEquals(null, lfuCache.get(1));  // first item put in should be the first out\n\n      // Test autowarming\n      newLFUCache.init(params, initObj, regenerator);\n      newLFUCache.warm(null, lfuCache);\n      newLFUCache.setState(SolrCache.State.LIVE);\n\n      newLFUCache.put(103, \"103\");\n      assertEquals(\"15\", newLFUCache.get(15));\n      assertEquals(\"75\", newLFUCache.get(75));\n      assertEquals(null, newLFUCache.get(50));\n      nl = newLFUCache.getMetricsMap().getValue();\n      assertEquals(3L, nl.get(\"lookups\"));\n      assertEquals(2L, nl.get(\"hits\"));\n      assertEquals(1L, nl.get(\"inserts\"));\n      assertEquals(0L, nl.get(\"evictions\"));\n\n      assertEquals(7L, nl.get(\"cumulative_lookups\"));\n      assertEquals(4L, nl.get(\"cumulative_hits\"));\n      assertEquals(102L, nl.get(\"cumulative_inserts\"));\n      newLFUCache.close();\n\n      // Test no autowarming\n\n      params.put(\"autowarmCount\", \"0\");\n      noWarmLFUCache.init(params, initObj, regenerator);\n      noWarmLFUCache.warm(null, lfuCache);\n      noWarmLFUCache.setState(SolrCache.State.LIVE);\n\n      noWarmLFUCache.put(103, \"103\");\n      assertNull(noWarmLFUCache.get(15));\n      assertNull(noWarmLFUCache.get(75));\n      assertEquals(\"103\", noWarmLFUCache.get(103));\n    } finally {\n      if (newLFUCache != null) newLFUCache.close();\n      if (noWarmLFUCache != null) noWarmLFUCache.close();\n      if (lfuCache != null) lfuCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSimple() throws IOException {\n    SolrMetricManager metricManager = new SolrMetricManager();\n    Random r = random();\n    String registry = TestUtil.randomSimpleString(r, 2, 10);\n    String scope = TestUtil.randomSimpleString(r, 2, 10);\n    LFUCache lfuCache = new LFUCache();\n    LFUCache newLFUCache = new LFUCache();\n    LFUCache noWarmLFUCache = new LFUCache();\n    lfuCache.initializeMetrics(metricManager, registry, \"foo\", scope + \".lfuCache\");\n    newLFUCache.initializeMetrics(metricManager, registry, \"foo\", scope + \".newLFUCache\");\n    noWarmLFUCache.initializeMetrics(metricManager, registry, \"foo\", scope + \".noWarmLFUCache\");\n    try {\n      Map params = new HashMap();\n      params.put(\"size\", \"100\");\n      params.put(\"initialSize\", \"10\");\n      params.put(\"autowarmCount\", \"25\");\n      NoOpRegenerator regenerator = new NoOpRegenerator();\n      Object initObj = lfuCache.init(params, null, regenerator);\n      lfuCache.setState(SolrCache.State.LIVE);\n      for (int i = 0; i < 101; i++) {\n        lfuCache.put(i + 1, \"\" + (i + 1));\n      }\n      assertEquals(\"15\", lfuCache.get(15));\n      assertEquals(\"75\", lfuCache.get(75));\n      assertEquals(null, lfuCache.get(110));\n      Map<String,Object> nl = lfuCache.getMetricsMap().getValue();\n      assertEquals(3L, nl.get(\"lookups\"));\n      assertEquals(2L, nl.get(\"hits\"));\n      assertEquals(101L, nl.get(\"inserts\"));\n\n      assertEquals(null, lfuCache.get(1));  // first item put in should be the first out\n\n      // Test autowarming\n      newLFUCache.init(params, initObj, regenerator);\n      newLFUCache.warm(null, lfuCache);\n      newLFUCache.setState(SolrCache.State.LIVE);\n\n      newLFUCache.put(103, \"103\");\n      assertEquals(\"15\", newLFUCache.get(15));\n      assertEquals(\"75\", newLFUCache.get(75));\n      assertEquals(null, newLFUCache.get(50));\n      nl = newLFUCache.getMetricsMap().getValue();\n      assertEquals(3L, nl.get(\"lookups\"));\n      assertEquals(2L, nl.get(\"hits\"));\n      assertEquals(1L, nl.get(\"inserts\"));\n      assertEquals(0L, nl.get(\"evictions\"));\n\n      assertEquals(7L, nl.get(\"cumulative_lookups\"));\n      assertEquals(4L, nl.get(\"cumulative_hits\"));\n      assertEquals(102L, nl.get(\"cumulative_inserts\"));\n      newLFUCache.close();\n\n      // Test no autowarming\n\n      params.put(\"autowarmCount\", \"0\");\n      noWarmLFUCache.init(params, initObj, regenerator);\n      noWarmLFUCache.warm(null, lfuCache);\n      noWarmLFUCache.setState(SolrCache.State.LIVE);\n\n      noWarmLFUCache.put(103, \"103\");\n      assertNull(noWarmLFUCache.get(15));\n      assertNull(noWarmLFUCache.get(75));\n      assertEquals(\"103\", noWarmLFUCache.get(103));\n    } finally {\n      if (newLFUCache != null) newLFUCache.close();\n      if (noWarmLFUCache != null) noWarmLFUCache.close();\n      if (lfuCache != null) lfuCache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e9e5eaf280a6aa21423126b8232aa157a9b7366","date":1571772228,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestLFUCache#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestLFUCache#testSimple().mjava","sourceNew":"  @Test\n  public void testSimple() throws Exception {\n    SolrMetricManager metricManager = new SolrMetricManager();\n    Random r = random();\n    String registry = TestUtil.randomSimpleString(r, 2, 10);\n    String scope = TestUtil.randomSimpleString(r, 2, 10);\n    LFUCache lfuCache = new LFUCache();\n    LFUCache newLFUCache = new LFUCache();\n    LFUCache noWarmLFUCache = new LFUCache();\n    SolrMetricsContext solrMetricsContext = new SolrMetricsContext(metricManager, registry, \"foo\");\n    lfuCache.initializeMetrics(solrMetricsContext, scope + \".lfuCache\");\n    newLFUCache.initializeMetrics(solrMetricsContext, scope + \".newLFUCache\");\n    noWarmLFUCache.initializeMetrics(solrMetricsContext, scope + \".noWarmLFUCache\");\n    try {\n      Map params = new HashMap();\n      params.put(\"size\", \"100\");\n      params.put(\"initialSize\", \"10\");\n      params.put(\"autowarmCount\", \"25\");\n      NoOpRegenerator regenerator = new NoOpRegenerator();\n      Object initObj = lfuCache.init(params, null, regenerator);\n      lfuCache.setState(SolrCache.State.LIVE);\n      for (int i = 0; i < 101; i++) {\n        lfuCache.put(i + 1, \"\" + (i + 1));\n      }\n      assertEquals(\"15\", lfuCache.get(15));\n      assertEquals(\"75\", lfuCache.get(75));\n      assertEquals(null, lfuCache.get(110));\n      Map<String,Object> nl = lfuCache.getMetricsMap().getValue();\n      assertEquals(3L, nl.get(\"lookups\"));\n      assertEquals(2L, nl.get(\"hits\"));\n      assertEquals(101L, nl.get(\"inserts\"));\n\n      assertEquals(null, lfuCache.get(1));  // first item put in should be the first out\n\n      // Test autowarming\n      newLFUCache.init(params, initObj, regenerator);\n      newLFUCache.warm(null, lfuCache);\n      newLFUCache.setState(SolrCache.State.LIVE);\n\n      newLFUCache.put(103, \"103\");\n      assertEquals(\"15\", newLFUCache.get(15));\n      assertEquals(\"75\", newLFUCache.get(75));\n      assertEquals(null, newLFUCache.get(50));\n      nl = newLFUCache.getMetricsMap().getValue();\n      assertEquals(3L, nl.get(\"lookups\"));\n      assertEquals(2L, nl.get(\"hits\"));\n      assertEquals(1L, nl.get(\"inserts\"));\n      assertEquals(0L, nl.get(\"evictions\"));\n\n      assertEquals(7L, nl.get(\"cumulative_lookups\"));\n      assertEquals(4L, nl.get(\"cumulative_hits\"));\n      assertEquals(102L, nl.get(\"cumulative_inserts\"));\n      newLFUCache.close();\n\n      // Test no autowarming\n\n      params.put(\"autowarmCount\", \"0\");\n      noWarmLFUCache.init(params, initObj, regenerator);\n      noWarmLFUCache.warm(null, lfuCache);\n      noWarmLFUCache.setState(SolrCache.State.LIVE);\n\n      noWarmLFUCache.put(103, \"103\");\n      assertNull(noWarmLFUCache.get(15));\n      assertNull(noWarmLFUCache.get(75));\n      assertEquals(\"103\", noWarmLFUCache.get(103));\n    } finally {\n      if (newLFUCache != null) newLFUCache.close();\n      if (noWarmLFUCache != null) noWarmLFUCache.close();\n      if (lfuCache != null) lfuCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSimple() throws Exception {\n    SolrMetricManager metricManager = new SolrMetricManager();\n    Random r = random();\n    String registry = TestUtil.randomSimpleString(r, 2, 10);\n    String scope = TestUtil.randomSimpleString(r, 2, 10);\n    LFUCache lfuCache = new LFUCache();\n    LFUCache newLFUCache = new LFUCache();\n    LFUCache noWarmLFUCache = new LFUCache();\n    lfuCache.initializeMetrics(metricManager, registry, \"foo\", scope + \".lfuCache\");\n    newLFUCache.initializeMetrics(metricManager, registry, \"foo\", scope + \".newLFUCache\");\n    noWarmLFUCache.initializeMetrics(metricManager, registry, \"foo\", scope + \".noWarmLFUCache\");\n    try {\n      Map params = new HashMap();\n      params.put(\"size\", \"100\");\n      params.put(\"initialSize\", \"10\");\n      params.put(\"autowarmCount\", \"25\");\n      NoOpRegenerator regenerator = new NoOpRegenerator();\n      Object initObj = lfuCache.init(params, null, regenerator);\n      lfuCache.setState(SolrCache.State.LIVE);\n      for (int i = 0; i < 101; i++) {\n        lfuCache.put(i + 1, \"\" + (i + 1));\n      }\n      assertEquals(\"15\", lfuCache.get(15));\n      assertEquals(\"75\", lfuCache.get(75));\n      assertEquals(null, lfuCache.get(110));\n      Map<String,Object> nl = lfuCache.getMetricsMap().getValue();\n      assertEquals(3L, nl.get(\"lookups\"));\n      assertEquals(2L, nl.get(\"hits\"));\n      assertEquals(101L, nl.get(\"inserts\"));\n\n      assertEquals(null, lfuCache.get(1));  // first item put in should be the first out\n\n      // Test autowarming\n      newLFUCache.init(params, initObj, regenerator);\n      newLFUCache.warm(null, lfuCache);\n      newLFUCache.setState(SolrCache.State.LIVE);\n\n      newLFUCache.put(103, \"103\");\n      assertEquals(\"15\", newLFUCache.get(15));\n      assertEquals(\"75\", newLFUCache.get(75));\n      assertEquals(null, newLFUCache.get(50));\n      nl = newLFUCache.getMetricsMap().getValue();\n      assertEquals(3L, nl.get(\"lookups\"));\n      assertEquals(2L, nl.get(\"hits\"));\n      assertEquals(1L, nl.get(\"inserts\"));\n      assertEquals(0L, nl.get(\"evictions\"));\n\n      assertEquals(7L, nl.get(\"cumulative_lookups\"));\n      assertEquals(4L, nl.get(\"cumulative_hits\"));\n      assertEquals(102L, nl.get(\"cumulative_inserts\"));\n      newLFUCache.close();\n\n      // Test no autowarming\n\n      params.put(\"autowarmCount\", \"0\");\n      noWarmLFUCache.init(params, initObj, regenerator);\n      noWarmLFUCache.warm(null, lfuCache);\n      noWarmLFUCache.setState(SolrCache.State.LIVE);\n\n      noWarmLFUCache.put(103, \"103\");\n      assertNull(noWarmLFUCache.get(15));\n      assertNull(noWarmLFUCache.get(75));\n      assertEquals(\"103\", noWarmLFUCache.get(103));\n    } finally {\n      if (newLFUCache != null) newLFUCache.close();\n      if (noWarmLFUCache != null) noWarmLFUCache.close();\n      if (lfuCache != null) lfuCache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d7d3943904804560937e6239effeebda0f920e4","date":1573762904,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/search/TestLFUCache#testSimple().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testSimple() throws Exception {\n    SolrMetricManager metricManager = new SolrMetricManager();\n    Random r = random();\n    String registry = TestUtil.randomSimpleString(r, 2, 10);\n    String scope = TestUtil.randomSimpleString(r, 2, 10);\n    LFUCache lfuCache = new LFUCache();\n    LFUCache newLFUCache = new LFUCache();\n    LFUCache noWarmLFUCache = new LFUCache();\n    SolrMetricsContext solrMetricsContext = new SolrMetricsContext(metricManager, registry, \"foo\");\n    lfuCache.initializeMetrics(solrMetricsContext, scope + \".lfuCache\");\n    newLFUCache.initializeMetrics(solrMetricsContext, scope + \".newLFUCache\");\n    noWarmLFUCache.initializeMetrics(solrMetricsContext, scope + \".noWarmLFUCache\");\n    try {\n      Map params = new HashMap();\n      params.put(\"size\", \"100\");\n      params.put(\"initialSize\", \"10\");\n      params.put(\"autowarmCount\", \"25\");\n      NoOpRegenerator regenerator = new NoOpRegenerator();\n      Object initObj = lfuCache.init(params, null, regenerator);\n      lfuCache.setState(SolrCache.State.LIVE);\n      for (int i = 0; i < 101; i++) {\n        lfuCache.put(i + 1, \"\" + (i + 1));\n      }\n      assertEquals(\"15\", lfuCache.get(15));\n      assertEquals(\"75\", lfuCache.get(75));\n      assertEquals(null, lfuCache.get(110));\n      Map<String,Object> nl = lfuCache.getMetricsMap().getValue();\n      assertEquals(3L, nl.get(\"lookups\"));\n      assertEquals(2L, nl.get(\"hits\"));\n      assertEquals(101L, nl.get(\"inserts\"));\n\n      assertEquals(null, lfuCache.get(1));  // first item put in should be the first out\n\n      // Test autowarming\n      newLFUCache.init(params, initObj, regenerator);\n      newLFUCache.warm(null, lfuCache);\n      newLFUCache.setState(SolrCache.State.LIVE);\n\n      newLFUCache.put(103, \"103\");\n      assertEquals(\"15\", newLFUCache.get(15));\n      assertEquals(\"75\", newLFUCache.get(75));\n      assertEquals(null, newLFUCache.get(50));\n      nl = newLFUCache.getMetricsMap().getValue();\n      assertEquals(3L, nl.get(\"lookups\"));\n      assertEquals(2L, nl.get(\"hits\"));\n      assertEquals(1L, nl.get(\"inserts\"));\n      assertEquals(0L, nl.get(\"evictions\"));\n\n      assertEquals(7L, nl.get(\"cumulative_lookups\"));\n      assertEquals(4L, nl.get(\"cumulative_hits\"));\n      assertEquals(102L, nl.get(\"cumulative_inserts\"));\n      newLFUCache.close();\n\n      // Test no autowarming\n\n      params.put(\"autowarmCount\", \"0\");\n      noWarmLFUCache.init(params, initObj, regenerator);\n      noWarmLFUCache.warm(null, lfuCache);\n      noWarmLFUCache.setState(SolrCache.State.LIVE);\n\n      noWarmLFUCache.put(103, \"103\");\n      assertNull(noWarmLFUCache.get(15));\n      assertNull(noWarmLFUCache.get(75));\n      assertEquals(\"103\", noWarmLFUCache.get(103));\n    } finally {\n      if (newLFUCache != null) newLFUCache.close();\n      if (noWarmLFUCache != null) noWarmLFUCache.close();\n      if (lfuCache != null) lfuCache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["1b5eb85061a04532d079d1ca2e6cfae6be263073"],"1b5eb85061a04532d079d1ca2e6cfae6be263073":["3a2591037a85ef083e6588e0b846a5a34ff9b5a3"],"bfc52860e6d13d034226a760813c59d984c6817a":["816521ebaad5add9cb96bb88c577394e2938c40b"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["43564cbb30b064675027cfb569564e8531096e97"],"43564cbb30b064675027cfb569564e8531096e97":["816521ebaad5add9cb96bb88c577394e2938c40b","bfc52860e6d13d034226a760813c59d984c6817a"],"2e9e5eaf280a6aa21423126b8232aa157a9b7366":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["3a2591037a85ef083e6588e0b846a5a34ff9b5a3","1b5eb85061a04532d079d1ca2e6cfae6be263073"],"4d7d3943904804560937e6239effeebda0f920e4":["2e9e5eaf280a6aa21423126b8232aa157a9b7366"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"816521ebaad5add9cb96bb88c577394e2938c40b":["1b5eb85061a04532d079d1ca2e6cfae6be263073"],"3a2591037a85ef083e6588e0b846a5a34ff9b5a3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d7d3943904804560937e6239effeebda0f920e4"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"1b5eb85061a04532d079d1ca2e6cfae6be263073":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","816521ebaad5add9cb96bb88c577394e2938c40b"],"bfc52860e6d13d034226a760813c59d984c6817a":["43564cbb30b064675027cfb569564e8531096e97"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["2e9e5eaf280a6aa21423126b8232aa157a9b7366"],"43564cbb30b064675027cfb569564e8531096e97":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"2e9e5eaf280a6aa21423126b8232aa157a9b7366":["4d7d3943904804560937e6239effeebda0f920e4"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"4d7d3943904804560937e6239effeebda0f920e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a2591037a85ef083e6588e0b846a5a34ff9b5a3"],"3a2591037a85ef083e6588e0b846a5a34ff9b5a3":["1b5eb85061a04532d079d1ca2e6cfae6be263073","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"816521ebaad5add9cb96bb88c577394e2938c40b":["bfc52860e6d13d034226a760813c59d984c6817a","43564cbb30b064675027cfb569564e8531096e97"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}