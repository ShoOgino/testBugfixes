{"path":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#cleanup().mjava","commits":[{"id":"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349","date":1224582283,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#cleanup().mjava","pathOld":"/dev/null","sourceNew":"    private void cleanup() {\n      try {\n        fileChannel.close();\n      } catch (Exception e) {/* noop */\n      }\n      if (bytesDownloaded != size) {\n        try {\n          file.delete();\n        } catch (Exception e) {\n          LOG.error(\"Error deleting file in cleanup\" + e.getMessage());\n        }\n        if (!aborted)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Unable to download \" + fileName + \" completely. Downloaded \"\n                          + bytesDownloaded + \"!=\" + size);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d0bf7f3e57143e25ea24eee3a8faafeb247b8e2e","cbc3688252d4a8045d69a164236b2cf87b721f17","cbc3688252d4a8045d69a164236b2cf87b721f17","cbc3688252d4a8045d69a164236b2cf87b721f17","cbc3688252d4a8045d69a164236b2cf87b721f17","cbc3688252d4a8045d69a164236b2cf87b721f17","cbc3688252d4a8045d69a164236b2cf87b721f17"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9","date":1225202752,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#cleanup().mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#cleanup().mjava","sourceNew":"    /**cleanup everything\n     */\n    private void cleanup() {\n      try {\n        //close the file\n        fileChannel.close();\n      } catch (Exception e) {/* noop */\n      }\n      if (bytesDownloaded != size) {\n        //if the download is notcomplete then\n        //delete the file being downloaded\n        try {\n          file.delete();\n        } catch (Exception e) {\n          LOG.error(\"Error deleting file in cleanup\" + e.getMessage());\n        }\n        //if the failure is due to a user abort it is returned nomally else an exception is thrown\n        if (!aborted)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Unable to download \" + fileName + \" completely. Downloaded \"\n                          + bytesDownloaded + \"!=\" + size);\n      }\n    }\n\n","sourceOld":"    private void cleanup() {\n      try {\n        fileChannel.close();\n      } catch (Exception e) {/* noop */\n      }\n      if (bytesDownloaded != size) {\n        try {\n          file.delete();\n        } catch (Exception e) {\n          LOG.error(\"Error deleting file in cleanup\" + e.getMessage());\n        }\n        if (!aborted)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Unable to download \" + fileName + \" completely. Downloaded \"\n                          + bytesDownloaded + \"!=\" + size);\n      }\n    }\n\n","bugFix":null,"bugIntro":["d0bf7f3e57143e25ea24eee3a8faafeb247b8e2e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8620c64e323e74078214cf931e505179d14c888e","date":1225270494,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#cleanup().mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#cleanup().mjava","sourceNew":"    /**\n     * cleanup everything\n     */\n    private void cleanup() {\n      try {\n        //close the file\n        fileChannel.close();\n      } catch (Exception e) {/* noop */\n      }\n      if (bytesDownloaded != size) {\n        //if the download is not complete then\n        //delete the file being downloaded\n        try {\n          file.delete();\n        } catch (Exception e) {\n          LOG.error(\"Error deleting file in cleanup\" + e.getMessage());\n        }\n        //if the failure is due to a user abort it is returned nomally else an exception is thrown\n        if (!aborted)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Unable to download \" + fileName + \" completely. Downloaded \"\n                          + bytesDownloaded + \"!=\" + size);\n      }\n    }\n\n","sourceOld":"    /**cleanup everything\n     */\n    private void cleanup() {\n      try {\n        //close the file\n        fileChannel.close();\n      } catch (Exception e) {/* noop */\n      }\n      if (bytesDownloaded != size) {\n        //if the download is notcomplete then\n        //delete the file being downloaded\n        try {\n          file.delete();\n        } catch (Exception e) {\n          LOG.error(\"Error deleting file in cleanup\" + e.getMessage());\n        }\n        //if the failure is due to a user abort it is returned nomally else an exception is thrown\n        if (!aborted)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Unable to download \" + fileName + \" completely. Downloaded \"\n                          + bytesDownloaded + \"!=\" + size);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c6e1afc23adf8af4aa2dfc781b02b63710546b33","date":1227622754,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#cleanup().mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#cleanup().mjava","sourceNew":"    /**\n     * cleanup everything\n     */\n    private void cleanup() {\n      try {\n        //close the file\n        fileChannel.close();\n      } catch (Exception e) {/* noop */\n      }\n      try {\n        post.releaseConnection();\n      } catch (Exception e) {}\n      if (bytesDownloaded != size) {\n        //if the download is not complete then\n        //delete the file being downloaded\n        try {\n          file.delete();\n        } catch (Exception e) {\n          LOG.error(\"Error deleting file in cleanup\" + e.getMessage());\n        }\n        //if the failure is due to a user abort it is returned nomally else an exception is thrown\n        if (!aborted)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Unable to download \" + fileName + \" completely. Downloaded \"\n                          + bytesDownloaded + \"!=\" + size);\n      }\n    }\n\n","sourceOld":"    /**\n     * cleanup everything\n     */\n    private void cleanup() {\n      try {\n        //close the file\n        fileChannel.close();\n      } catch (Exception e) {/* noop */\n      }\n      if (bytesDownloaded != size) {\n        //if the download is not complete then\n        //delete the file being downloaded\n        try {\n          file.delete();\n        } catch (Exception e) {\n          LOG.error(\"Error deleting file in cleanup\" + e.getMessage());\n        }\n        //if the failure is due to a user abort it is returned nomally else an exception is thrown\n        if (!aborted)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Unable to download \" + fileName + \" completely. Downloaded \"\n                          + bytesDownloaded + \"!=\" + size);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9be231d18ef58129524215a1d30331523320b744","date":1229505566,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#cleanup().mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#cleanup().mjava","sourceNew":"    /**\n     * cleanup everything\n     */\n    private void cleanup() {\n      try {\n        //close the file\n        fileChannel.close();\n      } catch (Exception e) {/* noop */\n      }\n      try {\n        post.releaseConnection();\n      } catch (Exception e) {\n      }\n      if (bytesDownloaded != size) {\n        //if the download is not complete then\n        //delete the file being downloaded\n        try {\n          file.delete();\n        } catch (Exception e) {\n          LOG.error(\"Error deleting file in cleanup\" + e.getMessage());\n        }\n        //if the failure is due to a user abort it is returned nomally else an exception is thrown\n        if (!aborted)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Unable to download \" + fileName + \" completely. Downloaded \"\n                          + bytesDownloaded + \"!=\" + size);\n      }\n    }\n\n","sourceOld":"    /**\n     * cleanup everything\n     */\n    private void cleanup() {\n      try {\n        //close the file\n        fileChannel.close();\n      } catch (Exception e) {/* noop */\n      }\n      try {\n        post.releaseConnection();\n      } catch (Exception e) {}\n      if (bytesDownloaded != size) {\n        //if the download is not complete then\n        //delete the file being downloaded\n        try {\n          file.delete();\n        } catch (Exception e) {\n          LOG.error(\"Error deleting file in cleanup\" + e.getMessage());\n        }\n        //if the failure is due to a user abort it is returned nomally else an exception is thrown\n        if (!aborted)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Unable to download \" + fileName + \" completely. Downloaded \"\n                          + bytesDownloaded + \"!=\" + size);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"530ebfd92bca7116555792112f655ad316104ae4","date":1232651327,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#cleanup().mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#cleanup().mjava","sourceNew":"    /**\n     * cleanup everything\n     */\n    private void cleanup() {\n      try {\n        //close the file\n        fileChannel.close();\n      } catch (Exception e) {/* noop */\n          LOG.error(\"Error closing the file stream: \"+ this.saveAs ,e);\n      }\n      try {\n        post.releaseConnection();\n      } catch (Exception e) {\n      }\n      if (bytesDownloaded != size) {\n        //if the download is not complete then\n        //delete the file being downloaded\n        try {\n          file.delete();\n        } catch (Exception e) {\n          LOG.error(\"Error deleting file in cleanup\" + e.getMessage());\n        }\n        //if the failure is due to a user abort it is returned nomally else an exception is thrown\n        if (!aborted)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Unable to download \" + fileName + \" completely. Downloaded \"\n                          + bytesDownloaded + \"!=\" + size);\n      }\n    }\n\n","sourceOld":"    /**\n     * cleanup everything\n     */\n    private void cleanup() {\n      try {\n        //close the file\n        fileChannel.close();\n      } catch (Exception e) {/* noop */\n      }\n      try {\n        post.releaseConnection();\n      } catch (Exception e) {\n      }\n      if (bytesDownloaded != size) {\n        //if the download is not complete then\n        //delete the file being downloaded\n        try {\n          file.delete();\n        } catch (Exception e) {\n          LOG.error(\"Error deleting file in cleanup\" + e.getMessage());\n        }\n        //if the failure is due to a user abort it is returned nomally else an exception is thrown\n        if (!aborted)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Unable to download \" + fileName + \" completely. Downloaded \"\n                          + bytesDownloaded + \"!=\" + size);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0bf7f3e57143e25ea24eee3a8faafeb247b8e2e","date":1254059677,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#cleanup().mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#cleanup().mjava","sourceNew":"    /**\n     * cleanup everything\n     */\n    private void cleanup() {\n      try {\n        //close the FileOutputStream (which also closes the Channel)\n        fileOutputStream.close();\n      } catch (Exception e) {/* noop */\n          LOG.error(\"Error closing the file stream: \"+ this.saveAs ,e);\n      }\n      try {\n        post.releaseConnection();\n      } catch (Exception e) {\n      }\n      if (bytesDownloaded != size) {\n        //if the download is not complete then\n        //delete the file being downloaded\n        try {\n          file.delete();\n        } catch (Exception e) {\n          LOG.error(\"Error deleting file in cleanup\" + e.getMessage());\n        }\n        //if the failure is due to a user abort it is returned nomally else an exception is thrown\n        if (!aborted)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Unable to download \" + fileName + \" completely. Downloaded \"\n                          + bytesDownloaded + \"!=\" + size);\n      }\n    }\n\n","sourceOld":"    /**\n     * cleanup everything\n     */\n    private void cleanup() {\n      try {\n        //close the file\n        fileChannel.close();\n      } catch (Exception e) {/* noop */\n          LOG.error(\"Error closing the file stream: \"+ this.saveAs ,e);\n      }\n      try {\n        post.releaseConnection();\n      } catch (Exception e) {\n      }\n      if (bytesDownloaded != size) {\n        //if the download is not complete then\n        //delete the file being downloaded\n        try {\n          file.delete();\n        } catch (Exception e) {\n          LOG.error(\"Error deleting file in cleanup\" + e.getMessage());\n        }\n        //if the failure is due to a user abort it is returned nomally else an exception is thrown\n        if (!aborted)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Unable to download \" + fileName + \" completely. Downloaded \"\n                          + bytesDownloaded + \"!=\" + size);\n      }\n    }\n\n","bugFix":["6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9","f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#cleanup().mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#cleanup().mjava","sourceNew":"    /**\n     * cleanup everything\n     */\n    private void cleanup() {\n      try {\n        //close the FileOutputStream (which also closes the Channel)\n        fileOutputStream.close();\n      } catch (Exception e) {/* noop */\n          LOG.error(\"Error closing the file stream: \"+ this.saveAs ,e);\n      }\n      try {\n        post.releaseConnection();\n      } catch (Exception e) {\n      }\n      if (bytesDownloaded != size) {\n        //if the download is not complete then\n        //delete the file being downloaded\n        try {\n          file.delete();\n        } catch (Exception e) {\n          LOG.error(\"Error deleting file in cleanup\" + e.getMessage());\n        }\n        //if the failure is due to a user abort it is returned nomally else an exception is thrown\n        if (!aborted)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Unable to download \" + fileName + \" completely. Downloaded \"\n                          + bytesDownloaded + \"!=\" + size);\n      }\n    }\n\n","sourceOld":"    /**\n     * cleanup everything\n     */\n    private void cleanup() {\n      try {\n        //close the FileOutputStream (which also closes the Channel)\n        fileOutputStream.close();\n      } catch (Exception e) {/* noop */\n          LOG.error(\"Error closing the file stream: \"+ this.saveAs ,e);\n      }\n      try {\n        post.releaseConnection();\n      } catch (Exception e) {\n      }\n      if (bytesDownloaded != size) {\n        //if the download is not complete then\n        //delete the file being downloaded\n        try {\n          file.delete();\n        } catch (Exception e) {\n          LOG.error(\"Error deleting file in cleanup\" + e.getMessage());\n        }\n        //if the failure is due to a user abort it is returned nomally else an exception is thrown\n        if (!aborted)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Unable to download \" + fileName + \" completely. Downloaded \"\n                          + bytesDownloaded + \"!=\" + size);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"530ebfd92bca7116555792112f655ad316104ae4":["9be231d18ef58129524215a1d30331523320b744"],"9be231d18ef58129524215a1d30331523320b744":["c6e1afc23adf8af4aa2dfc781b02b63710546b33"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"8620c64e323e74078214cf931e505179d14c888e":["6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9"],"ad94625fb8d088209f46650c8097196fec67f00c":["d0bf7f3e57143e25ea24eee3a8faafeb247b8e2e"],"c6e1afc23adf8af4aa2dfc781b02b63710546b33":["8620c64e323e74078214cf931e505179d14c888e"],"6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d0bf7f3e57143e25ea24eee3a8faafeb247b8e2e":["530ebfd92bca7116555792112f655ad316104ae4"]},"commit2Childs":{"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349":["6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9"],"530ebfd92bca7116555792112f655ad316104ae4":["d0bf7f3e57143e25ea24eee3a8faafeb247b8e2e"],"9be231d18ef58129524215a1d30331523320b744":["530ebfd92bca7116555792112f655ad316104ae4"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8620c64e323e74078214cf931e505179d14c888e":["c6e1afc23adf8af4aa2dfc781b02b63710546b33"],"c6e1afc23adf8af4aa2dfc781b02b63710546b33":["9be231d18ef58129524215a1d30331523320b744"],"6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9":["8620c64e323e74078214cf931e505179d14c888e"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"d0bf7f3e57143e25ea24eee3a8faafeb247b8e2e":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}