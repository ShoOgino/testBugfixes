{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testEmptySingletonConcatenate().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testEmptySingletonConcatenate().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testEmptySingletonConcatenate().mjava","sourceNew":"  /** Test optimization to concatenate() with empty String */\n  public void testEmptySingletonConcatenate() {\n    Automaton singleton = BasicAutomata.makeString(\"\");\n    Automaton expandedSingleton = singleton.cloneExpanded();\n    Automaton other = BasicAutomata.makeCharRange('5', '7');\n    Automaton concat1 = BasicOperations.concatenate(expandedSingleton, other);\n    Automaton concat2 = BasicOperations.concatenate(singleton, other);\n    assertTrue(concat2.isDeterministic());\n    assertTrue(BasicOperations.sameLanguage(concat1, concat2));\n    assertTrue(BasicOperations.sameLanguage(other, concat1));\n    assertTrue(BasicOperations.sameLanguage(other, concat2));\n  }\n\n","sourceOld":"  /** Test optimization to concatenate() with empty String */\n  public void testEmptySingletonConcatenate() {\n    Automaton singleton = BasicAutomata.makeString(\"\");\n    Automaton expandedSingleton = singleton.cloneExpanded();\n    Automaton other = BasicAutomata.makeCharRange('5', '7');\n    Automaton concat1 = BasicOperations.concatenate(expandedSingleton, other);\n    Automaton concat2 = BasicOperations.concatenate(singleton, other);\n    assertTrue(concat2.isDeterministic());\n    assertTrue(BasicOperations.sameLanguage(concat1, concat2));\n    assertTrue(BasicOperations.sameLanguage(other, concat1));\n    assertTrue(BasicOperations.sameLanguage(other, concat2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2de8b489026711e8edde133418a7cacfd2ce4d3","date":1402528930,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testEmptySingletonConcatenate().mjava","sourceNew":null,"sourceOld":"  /** Test optimization to concatenate() with empty String */\n  public void testEmptySingletonConcatenate() {\n    Automaton singleton = BasicAutomata.makeString(\"\");\n    Automaton expandedSingleton = singleton.cloneExpanded();\n    Automaton other = BasicAutomata.makeCharRange('5', '7');\n    Automaton concat1 = BasicOperations.concatenate(expandedSingleton, other);\n    Automaton concat2 = BasicOperations.concatenate(singleton, other);\n    assertTrue(concat2.isDeterministic());\n    assertTrue(BasicOperations.sameLanguage(concat1, concat2));\n    assertTrue(BasicOperations.sameLanguage(other, concat1));\n    assertTrue(BasicOperations.sameLanguage(other, concat2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testEmptySingletonConcatenate().mjava","sourceNew":null,"sourceOld":"  /** Test optimization to concatenate() with empty String */\n  public void testEmptySingletonConcatenate() {\n    Automaton singleton = BasicAutomata.makeString(\"\");\n    Automaton expandedSingleton = singleton.cloneExpanded();\n    Automaton other = BasicAutomata.makeCharRange('5', '7');\n    Automaton concat1 = BasicOperations.concatenate(expandedSingleton, other);\n    Automaton concat2 = BasicOperations.concatenate(singleton, other);\n    assertTrue(concat2.isDeterministic());\n    assertTrue(BasicOperations.sameLanguage(concat1, concat2));\n    assertTrue(BasicOperations.sameLanguage(other, concat1));\n    assertTrue(BasicOperations.sameLanguage(other, concat2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a2de8b489026711e8edde133418a7cacfd2ce4d3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5c84485629d80d203608e8975a1139de9933cc38":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","a2de8b489026711e8edde133418a7cacfd2ce4d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"a2de8b489026711e8edde133418a7cacfd2ce4d3":["5c84485629d80d203608e8975a1139de9933cc38"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a2de8b489026711e8edde133418a7cacfd2ce4d3","5c84485629d80d203608e8975a1139de9933cc38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}