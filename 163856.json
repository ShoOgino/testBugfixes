{"path":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithDelegationTokens#testDelegationTokenSolrClient().mjava","commits":[{"id":"20be168d828ac40d262f85364d02f15b491dd88b","date":1469725145,"type":0,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithDelegationTokens#testDelegationTokenSolrClient().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test HttpSolrServer's delegation token support\n   */\n  @Test\n  public void testDelegationTokenSolrClient() throws Exception {\n    // Get token\n    String token = getDelegationToken(null, \"bar\", solrClientPrimary);\n    assertNotNull(token);\n\n    SolrRequest request = getAdminRequest(new ModifiableSolrParams());\n\n    // test without token\n    HttpSolrClient ss =\n        new HttpSolrClient.Builder(solrClientPrimary.getBaseURL().toString())\n            .withResponseParser(solrClientPrimary.getParser())\n            .build();\n    try {\n      doSolrRequest(ss, request, ErrorCode.UNAUTHORIZED.code);\n    } finally {\n      ss.close();\n    }\n\n    ss = new HttpSolrClient.Builder(solrClientPrimary.getBaseURL().toString())\n        .withDelegationToken(token)\n        .withResponseParser(solrClientPrimary.getParser())\n        .build();\n    try {\n      // test with token via property\n      doSolrRequest(ss, request, HttpStatus.SC_OK);\n\n      // test with param -- should throw an exception\n      ModifiableSolrParams tokenParam = new ModifiableSolrParams();\n      tokenParam.set(\"delegation\", \"invalidToken\");\n      try {\n        doSolrRequest(ss, getAdminRequest(tokenParam), ErrorCode.FORBIDDEN.code);\n        Assert.fail(\"Expected exception\");\n      } catch (IllegalArgumentException ex) {}\n    } finally {\n      ss.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithDelegationTokens#testDelegationTokenSolrClient().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test HttpSolrServer's delegation token support\n   */\n  @Test\n  public void testDelegationTokenSolrClient() throws Exception {\n    // Get token\n    String token = getDelegationToken(null, \"bar\", solrClientPrimary);\n    assertNotNull(token);\n\n    SolrRequest request = getAdminRequest(new ModifiableSolrParams());\n\n    // test without token\n    HttpSolrClient ss =\n        new HttpSolrClient.Builder(solrClientPrimary.getBaseURL().toString())\n            .withResponseParser(solrClientPrimary.getParser())\n            .build();\n    try {\n      doSolrRequest(ss, request, ErrorCode.UNAUTHORIZED.code);\n    } finally {\n      ss.close();\n    }\n\n    ss = new HttpSolrClient.Builder(solrClientPrimary.getBaseURL().toString())\n        .withDelegationToken(token)\n        .withResponseParser(solrClientPrimary.getParser())\n        .build();\n    try {\n      // test with token via property\n      doSolrRequest(ss, request, HttpStatus.SC_OK);\n\n      // test with param -- should throw an exception\n      ModifiableSolrParams tokenParam = new ModifiableSolrParams();\n      tokenParam.set(\"delegation\", \"invalidToken\");\n      try {\n        doSolrRequest(ss, getAdminRequest(tokenParam), ErrorCode.FORBIDDEN.code);\n        Assert.fail(\"Expected exception\");\n      } catch (IllegalArgumentException ex) {}\n    } finally {\n      ss.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithDelegationTokens#testDelegationTokenSolrClient().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test HttpSolrServer's delegation token support\n   */\n  @Test\n  public void testDelegationTokenSolrClient() throws Exception {\n    // Get token\n    String token = getDelegationToken(null, \"bar\", solrClientPrimary);\n    assertNotNull(token);\n\n    SolrRequest request = getAdminRequest(new ModifiableSolrParams());\n\n    // test without token\n    HttpSolrClient ss =\n        new HttpSolrClient.Builder(solrClientPrimary.getBaseURL().toString())\n            .withResponseParser(solrClientPrimary.getParser())\n            .build();\n    try {\n      doSolrRequest(ss, request, ErrorCode.UNAUTHORIZED.code);\n    } finally {\n      ss.close();\n    }\n\n    ss = new HttpSolrClient.Builder(solrClientPrimary.getBaseURL().toString())\n        .withDelegationToken(token)\n        .withResponseParser(solrClientPrimary.getParser())\n        .build();\n    try {\n      // test with token via property\n      doSolrRequest(ss, request, HttpStatus.SC_OK);\n\n      // test with param -- should throw an exception\n      ModifiableSolrParams tokenParam = new ModifiableSolrParams();\n      tokenParam.set(\"delegation\", \"invalidToken\");\n      try {\n        doSolrRequest(ss, getAdminRequest(tokenParam), ErrorCode.FORBIDDEN.code);\n        Assert.fail(\"Expected exception\");\n      } catch (IllegalArgumentException ex) {}\n    } finally {\n      ss.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63a1978c6710c767fa084741e3d6424840003a62","date":1495850671,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithDelegationTokens#testDelegationTokenSolrClient().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithDelegationTokens#testDelegationTokenSolrClient().mjava","sourceNew":"  /**\n   * Test HttpSolrServer's delegation token support\n   */\n  @Test\n  public void testDelegationTokenSolrClient() throws Exception {\n    // Get token\n    String token = getDelegationToken(null, \"bar\", solrClientPrimary);\n    assertNotNull(token);\n\n    SolrRequest request = getAdminRequest(new ModifiableSolrParams());\n\n    // test without token\n    HttpSolrClient ss =\n        new HttpSolrClient.Builder(solrClientPrimary.getBaseURL().toString())\n            .withResponseParser(solrClientPrimary.getParser())\n            .build();\n    try {\n      doSolrRequest(ss, request, ErrorCode.UNAUTHORIZED.code);\n    } finally {\n      ss.close();\n    }\n\n    ss = new HttpSolrClient.Builder(solrClientPrimary.getBaseURL().toString())\n        .withKerberosDelegationToken(token)\n        .withResponseParser(solrClientPrimary.getParser())\n        .build();\n    try {\n      // test with token via property\n      doSolrRequest(ss, request, HttpStatus.SC_OK);\n\n      // test with param -- should throw an exception\n      ModifiableSolrParams tokenParam = new ModifiableSolrParams();\n      tokenParam.set(\"delegation\", \"invalidToken\");\n      try {\n        doSolrRequest(ss, getAdminRequest(tokenParam), ErrorCode.FORBIDDEN.code);\n        Assert.fail(\"Expected exception\");\n      } catch (IllegalArgumentException ex) {}\n    } finally {\n      ss.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Test HttpSolrServer's delegation token support\n   */\n  @Test\n  public void testDelegationTokenSolrClient() throws Exception {\n    // Get token\n    String token = getDelegationToken(null, \"bar\", solrClientPrimary);\n    assertNotNull(token);\n\n    SolrRequest request = getAdminRequest(new ModifiableSolrParams());\n\n    // test without token\n    HttpSolrClient ss =\n        new HttpSolrClient.Builder(solrClientPrimary.getBaseURL().toString())\n            .withResponseParser(solrClientPrimary.getParser())\n            .build();\n    try {\n      doSolrRequest(ss, request, ErrorCode.UNAUTHORIZED.code);\n    } finally {\n      ss.close();\n    }\n\n    ss = new HttpSolrClient.Builder(solrClientPrimary.getBaseURL().toString())\n        .withDelegationToken(token)\n        .withResponseParser(solrClientPrimary.getParser())\n        .build();\n    try {\n      // test with token via property\n      doSolrRequest(ss, request, HttpStatus.SC_OK);\n\n      // test with param -- should throw an exception\n      ModifiableSolrParams tokenParam = new ModifiableSolrParams();\n      tokenParam.set(\"delegation\", \"invalidToken\");\n      try {\n        doSolrRequest(ss, getAdminRequest(tokenParam), ErrorCode.FORBIDDEN.code);\n        Assert.fail(\"Expected exception\");\n      } catch (IllegalArgumentException ex) {}\n    } finally {\n      ss.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithDelegationTokens#testDelegationTokenSolrClient().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithDelegationTokens#testDelegationTokenSolrClient().mjava","sourceNew":"  /**\n   * Test HttpSolrServer's delegation token support\n   */\n  @Test\n  public void testDelegationTokenSolrClient() throws Exception {\n    // Get token\n    String token = getDelegationToken(null, \"bar\", solrClientPrimary);\n    assertNotNull(token);\n\n    SolrRequest request = getAdminRequest(new ModifiableSolrParams());\n\n    // test without token\n    HttpSolrClient ss =\n        new HttpSolrClient.Builder(solrClientPrimary.getBaseURL().toString())\n            .withResponseParser(solrClientPrimary.getParser())\n            .build();\n    try {\n      doSolrRequest(ss, request, ErrorCode.UNAUTHORIZED.code);\n    } finally {\n      ss.close();\n    }\n\n    ss = new HttpSolrClient.Builder(solrClientPrimary.getBaseURL().toString())\n        .withKerberosDelegationToken(token)\n        .withResponseParser(solrClientPrimary.getParser())\n        .build();\n    try {\n      // test with token via property\n      doSolrRequest(ss, request, HttpStatus.SC_OK);\n\n      // test with param -- should throw an exception\n      ModifiableSolrParams tokenParam = new ModifiableSolrParams();\n      tokenParam.set(\"delegation\", \"invalidToken\");\n      try {\n        doSolrRequest(ss, getAdminRequest(tokenParam), ErrorCode.FORBIDDEN.code);\n        Assert.fail(\"Expected exception\");\n      } catch (IllegalArgumentException ex) {}\n    } finally {\n      ss.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Test HttpSolrServer's delegation token support\n   */\n  @Test\n  public void testDelegationTokenSolrClient() throws Exception {\n    // Get token\n    String token = getDelegationToken(null, \"bar\", solrClientPrimary);\n    assertNotNull(token);\n\n    SolrRequest request = getAdminRequest(new ModifiableSolrParams());\n\n    // test without token\n    HttpSolrClient ss =\n        new HttpSolrClient.Builder(solrClientPrimary.getBaseURL().toString())\n            .withResponseParser(solrClientPrimary.getParser())\n            .build();\n    try {\n      doSolrRequest(ss, request, ErrorCode.UNAUTHORIZED.code);\n    } finally {\n      ss.close();\n    }\n\n    ss = new HttpSolrClient.Builder(solrClientPrimary.getBaseURL().toString())\n        .withDelegationToken(token)\n        .withResponseParser(solrClientPrimary.getParser())\n        .build();\n    try {\n      // test with token via property\n      doSolrRequest(ss, request, HttpStatus.SC_OK);\n\n      // test with param -- should throw an exception\n      ModifiableSolrParams tokenParam = new ModifiableSolrParams();\n      tokenParam.set(\"delegation\", \"invalidToken\");\n      try {\n        doSolrRequest(ss, getAdminRequest(tokenParam), ErrorCode.FORBIDDEN.code);\n        Assert.fail(\"Expected exception\");\n      } catch (IllegalArgumentException ex) {}\n    } finally {\n      ss.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithDelegationTokens#testDelegationTokenSolrClient().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithDelegationTokens#testDelegationTokenSolrClient().mjava","sourceNew":"  /**\n   * Test HttpSolrServer's delegation token support\n   */\n  @Test\n  public void testDelegationTokenSolrClient() throws Exception {\n    // Get token\n    String token = getDelegationToken(null, \"bar\", solrClientPrimary);\n    assertNotNull(token);\n\n    SolrRequest request = getAdminRequest(new ModifiableSolrParams());\n\n    // test without token\n    HttpSolrClient ss =\n        new HttpSolrClient.Builder(solrClientPrimary.getBaseURL().toString())\n            .withResponseParser(solrClientPrimary.getParser())\n            .build();\n    try {\n      doSolrRequest(ss, request, ErrorCode.UNAUTHORIZED.code);\n    } finally {\n      ss.close();\n    }\n\n    ss = new HttpSolrClient.Builder(solrClientPrimary.getBaseURL().toString())\n        .withKerberosDelegationToken(token)\n        .withResponseParser(solrClientPrimary.getParser())\n        .build();\n    try {\n      // test with token via property\n      doSolrRequest(ss, request, HttpStatus.SC_OK);\n\n      // test with param -- should throw an exception\n      ModifiableSolrParams tokenParam = new ModifiableSolrParams();\n      tokenParam.set(\"delegation\", \"invalidToken\");\n      try {\n        doSolrRequest(ss, getAdminRequest(tokenParam), ErrorCode.FORBIDDEN.code);\n        Assert.fail(\"Expected exception\");\n      } catch (IllegalArgumentException ex) {}\n    } finally {\n      ss.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Test HttpSolrServer's delegation token support\n   */\n  @Test\n  public void testDelegationTokenSolrClient() throws Exception {\n    // Get token\n    String token = getDelegationToken(null, \"bar\", solrClientPrimary);\n    assertNotNull(token);\n\n    SolrRequest request = getAdminRequest(new ModifiableSolrParams());\n\n    // test without token\n    HttpSolrClient ss =\n        new HttpSolrClient.Builder(solrClientPrimary.getBaseURL().toString())\n            .withResponseParser(solrClientPrimary.getParser())\n            .build();\n    try {\n      doSolrRequest(ss, request, ErrorCode.UNAUTHORIZED.code);\n    } finally {\n      ss.close();\n    }\n\n    ss = new HttpSolrClient.Builder(solrClientPrimary.getBaseURL().toString())\n        .withDelegationToken(token)\n        .withResponseParser(solrClientPrimary.getParser())\n        .build();\n    try {\n      // test with token via property\n      doSolrRequest(ss, request, HttpStatus.SC_OK);\n\n      // test with param -- should throw an exception\n      ModifiableSolrParams tokenParam = new ModifiableSolrParams();\n      tokenParam.set(\"delegation\", \"invalidToken\");\n      try {\n        doSolrRequest(ss, getAdminRequest(tokenParam), ErrorCode.FORBIDDEN.code);\n        Assert.fail(\"Expected exception\");\n      } catch (IllegalArgumentException ex) {}\n    } finally {\n      ss.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92f789dbd1886e4b468e61b0def88b29a3f55228","date":1533844010,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithDelegationTokens#testDelegationTokenSolrClient().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithDelegationTokens#testDelegationTokenSolrClient().mjava","sourceNew":"  /**\n   * Test HttpSolrServer's delegation token support\n   */\n  @Test\n  public void testDelegationTokenSolrClient() throws Exception {\n    // Get token\n    String token = getDelegationToken(null, \"bar\", solrClientPrimary);\n    assertNotNull(token);\n\n    SolrRequest request = getAdminRequest(new ModifiableSolrParams());\n\n    // test without token\n    final HttpSolrClient ssWoToken =\n      new HttpSolrClient.Builder(solrClientPrimary.getBaseURL().toString())\n          .withResponseParser(solrClientPrimary.getParser())\n          .build();\n    try {\n      doSolrRequest(ssWoToken, request, ErrorCode.UNAUTHORIZED.code);\n    } finally {\n      ssWoToken.close();\n    }\n\n    final HttpSolrClient ssWToken = new HttpSolrClient.Builder(solrClientPrimary.getBaseURL().toString())\n        .withKerberosDelegationToken(token)\n        .withResponseParser(solrClientPrimary.getParser())\n        .build();\n    try {\n      // test with token via property\n      doSolrRequest(ssWToken, request, HttpStatus.SC_OK);\n\n      // test with param -- should throw an exception\n      ModifiableSolrParams tokenParam = new ModifiableSolrParams();\n      tokenParam.set(\"delegation\", \"invalidToken\");\n      expectThrows(IllegalArgumentException.class,\n          () -> doSolrRequest(ssWToken, getAdminRequest(tokenParam), ErrorCode.FORBIDDEN.code));\n    } finally {\n      ssWToken.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Test HttpSolrServer's delegation token support\n   */\n  @Test\n  public void testDelegationTokenSolrClient() throws Exception {\n    // Get token\n    String token = getDelegationToken(null, \"bar\", solrClientPrimary);\n    assertNotNull(token);\n\n    SolrRequest request = getAdminRequest(new ModifiableSolrParams());\n\n    // test without token\n    HttpSolrClient ss =\n        new HttpSolrClient.Builder(solrClientPrimary.getBaseURL().toString())\n            .withResponseParser(solrClientPrimary.getParser())\n            .build();\n    try {\n      doSolrRequest(ss, request, ErrorCode.UNAUTHORIZED.code);\n    } finally {\n      ss.close();\n    }\n\n    ss = new HttpSolrClient.Builder(solrClientPrimary.getBaseURL().toString())\n        .withKerberosDelegationToken(token)\n        .withResponseParser(solrClientPrimary.getParser())\n        .build();\n    try {\n      // test with token via property\n      doSolrRequest(ss, request, HttpStatus.SC_OK);\n\n      // test with param -- should throw an exception\n      ModifiableSolrParams tokenParam = new ModifiableSolrParams();\n      tokenParam.set(\"delegation\", \"invalidToken\");\n      try {\n        doSolrRequest(ss, getAdminRequest(tokenParam), ErrorCode.FORBIDDEN.code);\n        Assert.fail(\"Expected exception\");\n      } catch (IllegalArgumentException ex) {}\n    } finally {\n      ss.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithDelegationTokens#testDelegationTokenSolrClient().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithDelegationTokens#testDelegationTokenSolrClient().mjava","sourceNew":"  /**\n   * Test HttpSolrServer's delegation token support\n   */\n  @Test\n  public void testDelegationTokenSolrClient() throws Exception {\n    // Get token\n    String token = getDelegationToken(null, \"bar\", solrClientPrimary);\n    assertNotNull(token);\n\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest request = getAdminRequest(new ModifiableSolrParams());\n\n    // test without token\n    final HttpSolrClient ssWoToken =\n      new HttpSolrClient.Builder(solrClientPrimary.getBaseURL().toString())\n          .withResponseParser(solrClientPrimary.getParser())\n          .build();\n    try {\n      doSolrRequest(ssWoToken, request, ErrorCode.UNAUTHORIZED.code);\n    } finally {\n      ssWoToken.close();\n    }\n\n    final HttpSolrClient ssWToken = new HttpSolrClient.Builder(solrClientPrimary.getBaseURL().toString())\n        .withKerberosDelegationToken(token)\n        .withResponseParser(solrClientPrimary.getParser())\n        .build();\n    try {\n      // test with token via property\n      doSolrRequest(ssWToken, request, HttpStatus.SC_OK);\n\n      // test with param -- should throw an exception\n      ModifiableSolrParams tokenParam = new ModifiableSolrParams();\n      tokenParam.set(\"delegation\", \"invalidToken\");\n      expectThrows(IllegalArgumentException.class,\n          () -> doSolrRequest(ssWToken, getAdminRequest(tokenParam), ErrorCode.FORBIDDEN.code));\n    } finally {\n      ssWToken.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Test HttpSolrServer's delegation token support\n   */\n  @Test\n  public void testDelegationTokenSolrClient() throws Exception {\n    // Get token\n    String token = getDelegationToken(null, \"bar\", solrClientPrimary);\n    assertNotNull(token);\n\n    SolrRequest request = getAdminRequest(new ModifiableSolrParams());\n\n    // test without token\n    final HttpSolrClient ssWoToken =\n      new HttpSolrClient.Builder(solrClientPrimary.getBaseURL().toString())\n          .withResponseParser(solrClientPrimary.getParser())\n          .build();\n    try {\n      doSolrRequest(ssWoToken, request, ErrorCode.UNAUTHORIZED.code);\n    } finally {\n      ssWoToken.close();\n    }\n\n    final HttpSolrClient ssWToken = new HttpSolrClient.Builder(solrClientPrimary.getBaseURL().toString())\n        .withKerberosDelegationToken(token)\n        .withResponseParser(solrClientPrimary.getParser())\n        .build();\n    try {\n      // test with token via property\n      doSolrRequest(ssWToken, request, HttpStatus.SC_OK);\n\n      // test with param -- should throw an exception\n      ModifiableSolrParams tokenParam = new ModifiableSolrParams();\n      tokenParam.set(\"delegation\", \"invalidToken\");\n      expectThrows(IllegalArgumentException.class,\n          () -> doSolrRequest(ssWToken, getAdminRequest(tokenParam), ErrorCode.FORBIDDEN.code));\n    } finally {\n      ssWToken.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["20be168d828ac40d262f85364d02f15b491dd88b","63a1978c6710c767fa084741e3d6424840003a62"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["92f789dbd1886e4b468e61b0def88b29a3f55228"],"63a1978c6710c767fa084741e3d6424840003a62":["20be168d828ac40d262f85364d02f15b491dd88b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92f789dbd1886e4b468e61b0def88b29a3f55228":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"20be168d828ac40d262f85364d02f15b491dd88b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["20be168d828ac40d262f85364d02f15b491dd88b","63a1978c6710c767fa084741e3d6424840003a62"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","20be168d828ac40d262f85364d02f15b491dd88b"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","20be168d828ac40d262f85364d02f15b491dd88b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"63a1978c6710c767fa084741e3d6424840003a62":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["20be168d828ac40d262f85364d02f15b491dd88b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"92f789dbd1886e4b468e61b0def88b29a3f55228":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"20be168d828ac40d262f85364d02f15b491dd88b":["e9017cf144952056066919f1ebc7897ff9bd71b1","63a1978c6710c767fa084741e3d6424840003a62","d1f5728f32a4a256b36cfabd7a2636452f599bb9","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["92f789dbd1886e4b468e61b0def88b29a3f55228"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}