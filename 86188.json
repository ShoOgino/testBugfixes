{"path":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory();\n        IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10));\n        ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n        ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false);\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(new Field(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(directory);\n\n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory();\n        IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10));\n        ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n        ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false);\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(new Field(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(directory);\n\n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory();\n        IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10));\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(new Field(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(directory);\n\n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory();\n        IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10));\n        ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n        ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false);\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(new Field(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(directory);\n\n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory();\n        IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(new Field(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(directory);\n\n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory();\n        IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10));\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(new Field(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(directory);\n\n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8dc26bfa5ebbc55b5a04fbec545dfcec647b046b","date":1280297653,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory();\n        IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(new Field(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(directory);\n\n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory();\n        IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(new Field(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(directory);\n\n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(Random,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(Random random, int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(new Field(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(directory);\n\n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory();\n        IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(new Field(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(directory);\n\n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d47f68d60cbff5718136b945ba8c55982342f38","date":1285583375,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(Random,int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(directory);\n\n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","sourceOld":"    private void createIndex(Random random, int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(directory);\n\n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7740a3e0858e88aaf6b09efe52e35c04a0d717f7","date":1286877329,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, true, false)).setMaxBufferedDocs(10));\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(directory);\n\n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(directory);\n\n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","bugFix":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, true, false)).setMaxBufferedDocs(10));\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(directory);\n\n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(directory);\n\n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13452165d8bf3d45a72f572aaed3c679735d3af2","date":1290101307,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, true, false)).setMaxBufferedDocs(10));\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(directory);\n\n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, true, false)).setMaxBufferedDocs(10));\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(directory);\n\n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bce89597a7c3a4535b5b7f8100c2078e520f6e57","date":1290106041,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, true, false)).setMaxBufferedDocs(10));\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(directory);\n\n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, true, false)).setMaxBufferedDocs(10));\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(directory);\n\n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeebcf026b55d8ce3ac8165210782b26cc4efe30","date":1290108396,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, true, false)).setMaxBufferedDocs(10));\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(directory);\n\n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, true, false)).setMaxBufferedDocs(10));\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(directory);\n\n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, true, false)).\n                setMaxBufferedDocs(10).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(directory, false));\n\n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, true, false)).setMaxBufferedDocs(10));\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(directory);\n\n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, true, false)).\n                setMaxBufferedDocs(10).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(directory, false));\n\n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, true, false)).setMaxBufferedDocs(10));\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(directory);\n\n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n\n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, true, false)).\n                setMaxBufferedDocs(10).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n\n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(directory, false));\n\n        this.searcher = new IndexSearcher(reader);\n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory();\n        IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(new Field(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(directory);\n\n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, true, false)).\n                setMaxBufferedDocs(10).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(directory, false));\n\n      this.searcher = newSearcher(reader);\n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, true, false)).\n                setMaxBufferedDocs(10).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(directory, false));\n\n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, true, false)).\n                setMaxBufferedDocs(10).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(directory, false));\n\n      this.searcher = newSearcher(reader);\n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, true, false)).\n                setMaxBufferedDocs(10).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(directory, false));\n\n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n\n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, true, false)).\n                setMaxBufferedDocs(10).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n\n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(directory, false));\n\n      this.searcher = newSearcher(reader);\n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n\n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, true, false)).\n                setMaxBufferedDocs(10).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n\n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(directory, false));\n\n        this.searcher = new IndexSearcher(reader);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        final Analyzer analyzer = new Analyzer() {\n          @Override\n          public TokenStream tokenStream(String fieldName, Reader reader) {\n            return new MockTokenizer(reader, MockTokenizer.WHITESPACE, true);\n          }\n        };\n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        // note: test explicitly disables payloads\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(10).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(directory, false));\n\n      this.searcher = newSearcher(reader);\n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, true, false)).\n                setMaxBufferedDocs(10).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(directory, false));\n\n      this.searcher = newSearcher(reader);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n\n        final Analyzer analyzer = new Analyzer() {\n          @Override\n          public TokenStream tokenStream(String fieldName, Reader reader) {\n            return new MockTokenizer(reader, MockTokenizer.WHITESPACE, true);\n          }\n        };\n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        // note: test explicitly disables payloads\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(10).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n\n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(directory, false));\n\n      this.searcher = newSearcher(reader);\n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n\n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, true, false)).\n                setMaxBufferedDocs(10).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n\n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(directory, false));\n\n      this.searcher = newSearcher(reader);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        final Analyzer analyzer = new Analyzer() {\n          @Override\n          public TokenStream tokenStream(String fieldName, Reader reader) {\n            return new MockTokenizer(reader, MockTokenizer.WHITESPACE, true);\n          }\n        };\n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        // note: test explicitly disables payloads\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(10).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(directory, false));\n\n      this.searcher = newSearcher(reader);\n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, true, false)).\n                setMaxBufferedDocs(10).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(directory, false));\n\n      this.searcher = newSearcher(reader);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        final Analyzer analyzer = new Analyzer() {\n          @Override\n          public TokenStream tokenStream(String fieldName, Reader reader) {\n            return new MockTokenizer(reader, MockTokenizer.WHITESPACE, true);\n          }\n        };\n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        // note: test explicitly disables payloads\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(10).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(directory, false));\n\n      this.searcher = newSearcher(reader);\n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, true, false)).\n                setMaxBufferedDocs(10).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(directory, false));\n\n      this.searcher = newSearcher(reader);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        final Analyzer analyzer = new Analyzer() {\n          @Override\n          public TokenStream tokenStream(String fieldName, Reader reader) {\n            return new MockTokenizer(reader, MockTokenizer.WHITESPACE, true);\n          }\n        };\n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        // note: test explicitly disables payloads\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(10).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        \n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, TextField.TYPE_STORED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(directory, false));\n\n      this.searcher = newSearcher(reader);\n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        final Analyzer analyzer = new Analyzer() {\n          @Override\n          public TokenStream tokenStream(String fieldName, Reader reader) {\n            return new MockTokenizer(reader, MockTokenizer.WHITESPACE, true);\n          }\n        };\n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        // note: test explicitly disables payloads\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(10).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(directory, false));\n\n      this.searcher = newSearcher(reader);\n    }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"53ae89cd75b0acbdfb8890710c6742f3fb80e65d","date":1315806626,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        final Analyzer analyzer = new ReusableAnalyzerBase() {\n          @Override\n          public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n            return new TokenStreamComponents(new MockTokenizer(reader, MockTokenizer.WHITESPACE, true));\n          }\n        };\n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        // note: test explicitly disables payloads\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(10).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        \n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, TextField.TYPE_STORED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(directory, false));\n\n      this.searcher = newSearcher(reader);\n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        final Analyzer analyzer = new Analyzer() {\n          @Override\n          public TokenStream tokenStream(String fieldName, Reader reader) {\n            return new MockTokenizer(reader, MockTokenizer.WHITESPACE, true);\n          }\n        };\n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        // note: test explicitly disables payloads\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(10).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        \n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, TextField.TYPE_STORED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(directory, false));\n\n      this.searcher = newSearcher(reader);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2f49143da0a5d278a72f741432047fcfa6da996e","date":1316927425,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        final Analyzer analyzer = new Analyzer() {\n          @Override\n          public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n            return new TokenStreamComponents(new MockTokenizer(reader, MockTokenizer.WHITESPACE, true));\n          }\n        };\n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        // note: test explicitly disables payloads\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(10).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        \n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, TextField.TYPE_STORED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(directory, false));\n\n      this.searcher = newSearcher(reader);\n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        final Analyzer analyzer = new ReusableAnalyzerBase() {\n          @Override\n          public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n            return new TokenStreamComponents(new MockTokenizer(reader, MockTokenizer.WHITESPACE, true));\n          }\n        };\n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        // note: test explicitly disables payloads\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(10).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        \n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, TextField.TYPE_STORED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(directory, false));\n\n      this.searcher = newSearcher(reader);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        final Analyzer analyzer = new Analyzer() {\n          @Override\n          public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n            return new TokenStreamComponents(new MockTokenizer(reader, MockTokenizer.WHITESPACE, true));\n          }\n        };\n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        // note: test explicitly disables payloads\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(10).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        \n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, TextField.TYPE_STORED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.forceMerge(1);\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(directory, false));\n\n      this.searcher = newSearcher(reader);\n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        final Analyzer analyzer = new Analyzer() {\n          @Override\n          public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n            return new TokenStreamComponents(new MockTokenizer(reader, MockTokenizer.WHITESPACE, true));\n          }\n        };\n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        // note: test explicitly disables payloads\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(10).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        \n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, TextField.TYPE_STORED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(directory, false));\n\n      this.searcher = newSearcher(reader);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        final Analyzer analyzer = new Analyzer() {\n          @Override\n          public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n            return new TokenStreamComponents(new MockTokenizer(reader, MockTokenizer.WHITESPACE, true));\n          }\n        };\n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        // note: test explicitly disables payloads\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(10).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        \n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, TextField.TYPE_STORED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.forceMerge(1);\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(directory));\n\n      this.searcher = newSearcher(reader);\n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        final Analyzer analyzer = new Analyzer() {\n          @Override\n          public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n            return new TokenStreamComponents(new MockTokenizer(reader, MockTokenizer.WHITESPACE, true));\n          }\n        };\n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        // note: test explicitly disables payloads\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(10).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        \n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, TextField.TYPE_STORED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.forceMerge(1);\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(directory, false));\n\n      this.searcher = newSearcher(reader);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        final Analyzer analyzer = new Analyzer() {\n          @Override\n          public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n            return new TokenStreamComponents(new MockTokenizer(reader, MockTokenizer.WHITESPACE, true));\n          }\n        };\n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        // note: test explicitly disables payloads\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(10).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        \n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, TextField.TYPE_STORED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.forceMerge(1);\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(directory));\n\n      this.searcher = newSearcher(reader);\n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        final Analyzer analyzer = new Analyzer() {\n          @Override\n          public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n            return new TokenStreamComponents(new MockTokenizer(reader, MockTokenizer.WHITESPACE, true));\n          }\n        };\n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        // note: test explicitly disables payloads\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(10).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        \n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, TextField.TYPE_STORED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.forceMerge(1);\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(directory, false));\n\n      this.searcher = newSearcher(reader);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        final Analyzer analyzer = new Analyzer() {\n          @Override\n          public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n            return new TokenStreamComponents(new MockTokenizer(reader, MockTokenizer.WHITESPACE, true));\n          }\n        };\n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        // note: test explicitly disables payloads\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(10).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        \n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, TextField.TYPE_STORED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.forceMerge(1);\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(directory));\n\n      this.searcher = newSearcher(reader);\n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        final Analyzer analyzer = new Analyzer() {\n          @Override\n          public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n            return new TokenStreamComponents(new MockTokenizer(reader, MockTokenizer.WHITESPACE, true));\n          }\n        };\n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        // note: test explicitly disables payloads\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(10).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        \n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, TextField.TYPE_STORED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.forceMerge(1);\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(directory, false));\n\n      this.searcher = newSearcher(reader);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        final Analyzer analyzer = new Analyzer() {\n          @Override\n          public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n            return new TokenStreamComponents(new MockTokenizer(reader, MockTokenizer.WHITESPACE, true));\n          }\n        };\n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        // note: test explicitly disables payloads\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(10).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        \n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, TextField.TYPE_STORED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.forceMerge(1);\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(directory));\n\n      this.searcher = newSearcher(reader);\n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        final Analyzer analyzer = new Analyzer() {\n          @Override\n          public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n            return new TokenStreamComponents(new MockTokenizer(reader, MockTokenizer.WHITESPACE, true));\n          }\n        };\n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        // note: test explicitly disables payloads\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(10).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        \n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, TextField.TYPE_STORED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.forceMerge(1);\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(directory));\n\n      this.searcher = newSearcher(reader);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["2f49143da0a5d278a72f741432047fcfa6da996e"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["8dc26bfa5ebbc55b5a04fbec545dfcec647b046b","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"7740a3e0858e88aaf6b09efe52e35c04a0d717f7":["8d47f68d60cbff5718136b945ba8c55982342f38"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2f49143da0a5d278a72f741432047fcfa6da996e":["53ae89cd75b0acbdfb8890710c6742f3fb80e65d"],"eeebcf026b55d8ce3ac8165210782b26cc4efe30":["bce89597a7c3a4535b5b7f8100c2078e520f6e57"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"8d47f68d60cbff5718136b945ba8c55982342f38":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"8dc26bfa5ebbc55b5a04fbec545dfcec647b046b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"53ae89cd75b0acbdfb8890710c6742f3fb80e65d":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"bce89597a7c3a4535b5b7f8100c2078e520f6e57":["13452165d8bf3d45a72f572aaed3c679735d3af2"],"13452165d8bf3d45a72f572aaed3c679735d3af2":["7740a3e0858e88aaf6b09efe52e35c04a0d717f7"],"a3776dccca01c11e7046323cfad46a3b4a471233":["790e1fde4caa765b3faaad3fbcd25c6973450336","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["8d47f68d60cbff5718136b945ba8c55982342f38","7740a3e0858e88aaf6b09efe52e35c04a0d717f7"],"3bb13258feba31ab676502787ab2e1779f129b7a":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["eeebcf026b55d8ce3ac8165210782b26cc4efe30"]},"commit2Childs":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"7740a3e0858e88aaf6b09efe52e35c04a0d717f7":["13452165d8bf3d45a72f572aaed3c679735d3af2","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["1509f151d7692d84fae414b2b799ac06ba60fcb4","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"2f49143da0a5d278a72f741432047fcfa6da996e":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"eeebcf026b55d8ce3ac8165210782b26cc4efe30":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["53ae89cd75b0acbdfb8890710c6742f3fb80e65d"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["8d47f68d60cbff5718136b945ba8c55982342f38"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["d572389229127c297dd1fa5ce4758e1cec41e799"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["b21422ff1d1d56499dec481f193b402e5e8def5b","8dc26bfa5ebbc55b5a04fbec545dfcec647b046b"],"962d04139994fce5193143ef35615499a9a96d78":[],"8d47f68d60cbff5718136b945ba8c55982342f38":["7740a3e0858e88aaf6b09efe52e35c04a0d717f7","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"8dc26bfa5ebbc55b5a04fbec545dfcec647b046b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"53ae89cd75b0acbdfb8890710c6742f3fb80e65d":["2f49143da0a5d278a72f741432047fcfa6da996e"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["f2c5f0cb44df114db4228c8f77861714b5cabaea","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","a3776dccca01c11e7046323cfad46a3b4a471233"],"bce89597a7c3a4535b5b7f8100c2078e520f6e57":["eeebcf026b55d8ce3ac8165210782b26cc4efe30"],"13452165d8bf3d45a72f572aaed3c679735d3af2":["bce89597a7c3a4535b5b7f8100c2078e520f6e57"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["3bb13258feba31ab676502787ab2e1779f129b7a"],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}