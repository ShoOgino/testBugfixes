{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene62/Lucene62SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","commits":[{"id":"fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8","date":1462567286,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene62/Lucene62SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene62SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        int format = CodecUtil.checkIndexHeader(input, Lucene62SegmentInfoFormat.CODEC_NAME,\n                                                Lucene62SegmentInfoFormat.VERSION_START,\n                                                Lucene62SegmentInfoFormat.VERSION_CURRENT,\n                                                segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        \n        final Map<String,String> diagnostics = input.readMapOfStrings();\n        final Set<String> files = input.readSetOfStrings();\n        final Map<String,String> attributes = input.readMapOfStrings();\n\n        int numSortFields = input.readVInt();\n        Sort indexSort;\n        if (numSortFields > 0) {\n          SortField[] sortFields = new SortField[numSortFields];\n          for(int i=0;i<numSortFields;i++) {\n            String fieldName = input.readString();\n            int sortTypeID = input.readVInt();\n            SortField.Type sortType;\n            switch(sortTypeID) {\n            case 0:\n              sortType = SortField.Type.STRING;\n              break;\n            case 1:\n              sortType = SortField.Type.LONG;\n              break;\n            case 2:\n              sortType = SortField.Type.INT;\n              break;\n            default:\n              throw new CorruptIndexException(\"invalid index sort field type ID: \" + sortTypeID, input);\n            }\n            byte b = input.readByte();\n            boolean reverse;\n            if (b == 0) {\n              reverse = true;\n            } else if (b == 1) {\n              reverse = false;\n            } else {\n              throw new CorruptIndexException(\"invalid index sort reverse: \" + b, input);\n            }\n\n            sortFields[i] = new SortField(fieldName, sortType, reverse);\n\n            Object missingValue;\n            b = input.readByte();\n            if (b == 0) {\n              missingValue = null;\n            } else {\n              switch(sortType) {\n              case STRING:\n                if (b == 1) {\n                  missingValue = SortField.STRING_LAST;\n                } else if (b == 2) {\n                  missingValue = SortField.STRING_FIRST;\n                } else {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                break;\n              case LONG:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = input.readLong();\n                break;\n              case INT:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = input.readInt();\n                break;\n              default:\n                throw new AssertionError(\"unhandled sortType=\" + sortType);\n              }\n            }\n            if (missingValue != null) {\n              sortFields[i].setMissingValue(missingValue);\n            }\n          }\n          indexSort = new Sort(sortFields);\n        } else if (numSortFields < 0) {\n          throw new CorruptIndexException(\"invalid index sort field count: \" + numSortFields, input);\n        } else {\n          indexSort = null;\n        }\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, segmentID, attributes, indexSort);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45bfb4d30b7e62ec7d645a5e0113362636ac4981","date":1462660573,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene62/Lucene62SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene62/Lucene62SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene62SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        int format = CodecUtil.checkIndexHeader(input, Lucene62SegmentInfoFormat.CODEC_NAME,\n                                                Lucene62SegmentInfoFormat.VERSION_START,\n                                                Lucene62SegmentInfoFormat.VERSION_CURRENT,\n                                                segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        \n        final Map<String,String> diagnostics = input.readMapOfStrings();\n        final Set<String> files = input.readSetOfStrings();\n        final Map<String,String> attributes = input.readMapOfStrings();\n\n        int numSortFields = input.readVInt();\n        Sort indexSort;\n        if (numSortFields > 0) {\n          SortField[] sortFields = new SortField[numSortFields];\n          for(int i=0;i<numSortFields;i++) {\n            String fieldName = input.readString();\n            int sortTypeID = input.readVInt();\n            SortField.Type sortType;\n            switch(sortTypeID) {\n            case 0:\n              sortType = SortField.Type.STRING;\n              break;\n            case 1:\n              sortType = SortField.Type.LONG;\n              break;\n            case 2:\n              sortType = SortField.Type.INT;\n              break;\n            case 3:\n              sortType = SortField.Type.DOUBLE;\n              break;\n            case 4:\n              sortType = SortField.Type.FLOAT;\n              break;\n            default:\n              throw new CorruptIndexException(\"invalid index sort field type ID: \" + sortTypeID, input);\n            }\n            byte b = input.readByte();\n            boolean reverse;\n            if (b == 0) {\n              reverse = true;\n            } else if (b == 1) {\n              reverse = false;\n            } else {\n              throw new CorruptIndexException(\"invalid index sort reverse: \" + b, input);\n            }\n\n            sortFields[i] = new SortField(fieldName, sortType, reverse);\n\n            Object missingValue;\n            b = input.readByte();\n            if (b == 0) {\n              missingValue = null;\n            } else {\n              switch(sortType) {\n              case STRING:\n                if (b == 1) {\n                  missingValue = SortField.STRING_LAST;\n                } else if (b == 2) {\n                  missingValue = SortField.STRING_FIRST;\n                } else {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                break;\n              case LONG:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = input.readLong();\n                break;\n              case INT:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = input.readInt();\n                break;\n              case DOUBLE:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = Double.longBitsToDouble(input.readLong());\n                break;\n              case FLOAT:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = Float.intBitsToFloat(input.readInt());\n                break;\n              default:\n                throw new AssertionError(\"unhandled sortType=\" + sortType);\n              }\n            }\n            if (missingValue != null) {\n              sortFields[i].setMissingValue(missingValue);\n            }\n          }\n          indexSort = new Sort(sortFields);\n        } else if (numSortFields < 0) {\n          throw new CorruptIndexException(\"invalid index sort field count: \" + numSortFields, input);\n        } else {\n          indexSort = null;\n        }\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, segmentID, attributes, indexSort);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene62SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        int format = CodecUtil.checkIndexHeader(input, Lucene62SegmentInfoFormat.CODEC_NAME,\n                                                Lucene62SegmentInfoFormat.VERSION_START,\n                                                Lucene62SegmentInfoFormat.VERSION_CURRENT,\n                                                segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        \n        final Map<String,String> diagnostics = input.readMapOfStrings();\n        final Set<String> files = input.readSetOfStrings();\n        final Map<String,String> attributes = input.readMapOfStrings();\n\n        int numSortFields = input.readVInt();\n        Sort indexSort;\n        if (numSortFields > 0) {\n          SortField[] sortFields = new SortField[numSortFields];\n          for(int i=0;i<numSortFields;i++) {\n            String fieldName = input.readString();\n            int sortTypeID = input.readVInt();\n            SortField.Type sortType;\n            switch(sortTypeID) {\n            case 0:\n              sortType = SortField.Type.STRING;\n              break;\n            case 1:\n              sortType = SortField.Type.LONG;\n              break;\n            case 2:\n              sortType = SortField.Type.INT;\n              break;\n            default:\n              throw new CorruptIndexException(\"invalid index sort field type ID: \" + sortTypeID, input);\n            }\n            byte b = input.readByte();\n            boolean reverse;\n            if (b == 0) {\n              reverse = true;\n            } else if (b == 1) {\n              reverse = false;\n            } else {\n              throw new CorruptIndexException(\"invalid index sort reverse: \" + b, input);\n            }\n\n            sortFields[i] = new SortField(fieldName, sortType, reverse);\n\n            Object missingValue;\n            b = input.readByte();\n            if (b == 0) {\n              missingValue = null;\n            } else {\n              switch(sortType) {\n              case STRING:\n                if (b == 1) {\n                  missingValue = SortField.STRING_LAST;\n                } else if (b == 2) {\n                  missingValue = SortField.STRING_FIRST;\n                } else {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                break;\n              case LONG:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = input.readLong();\n                break;\n              case INT:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = input.readInt();\n                break;\n              default:\n                throw new AssertionError(\"unhandled sortType=\" + sortType);\n              }\n            }\n            if (missingValue != null) {\n              sortFields[i].setMissingValue(missingValue);\n            }\n          }\n          indexSort = new Sort(sortFields);\n        } else if (numSortFields < 0) {\n          throw new CorruptIndexException(\"invalid index sort field count: \" + numSortFields, input);\n        } else {\n          indexSort = null;\n        }\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, segmentID, attributes, indexSort);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene62/Lucene62SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene62SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        int format = CodecUtil.checkIndexHeader(input, Lucene62SegmentInfoFormat.CODEC_NAME,\n                                                Lucene62SegmentInfoFormat.VERSION_START,\n                                                Lucene62SegmentInfoFormat.VERSION_CURRENT,\n                                                segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        \n        final Map<String,String> diagnostics = input.readMapOfStrings();\n        final Set<String> files = input.readSetOfStrings();\n        final Map<String,String> attributes = input.readMapOfStrings();\n\n        int numSortFields = input.readVInt();\n        Sort indexSort;\n        if (numSortFields > 0) {\n          SortField[] sortFields = new SortField[numSortFields];\n          for(int i=0;i<numSortFields;i++) {\n            String fieldName = input.readString();\n            int sortTypeID = input.readVInt();\n            SortField.Type sortType;\n            switch(sortTypeID) {\n            case 0:\n              sortType = SortField.Type.STRING;\n              break;\n            case 1:\n              sortType = SortField.Type.LONG;\n              break;\n            case 2:\n              sortType = SortField.Type.INT;\n              break;\n            case 3:\n              sortType = SortField.Type.DOUBLE;\n              break;\n            case 4:\n              sortType = SortField.Type.FLOAT;\n              break;\n            default:\n              throw new CorruptIndexException(\"invalid index sort field type ID: \" + sortTypeID, input);\n            }\n            byte b = input.readByte();\n            boolean reverse;\n            if (b == 0) {\n              reverse = true;\n            } else if (b == 1) {\n              reverse = false;\n            } else {\n              throw new CorruptIndexException(\"invalid index sort reverse: \" + b, input);\n            }\n\n            sortFields[i] = new SortField(fieldName, sortType, reverse);\n\n            Object missingValue;\n            b = input.readByte();\n            if (b == 0) {\n              missingValue = null;\n            } else {\n              switch(sortType) {\n              case STRING:\n                if (b == 1) {\n                  missingValue = SortField.STRING_LAST;\n                } else if (b == 2) {\n                  missingValue = SortField.STRING_FIRST;\n                } else {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                break;\n              case LONG:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = input.readLong();\n                break;\n              case INT:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = input.readInt();\n                break;\n              case DOUBLE:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = Double.longBitsToDouble(input.readLong());\n                break;\n              case FLOAT:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = Float.intBitsToFloat(input.readInt());\n                break;\n              default:\n                throw new AssertionError(\"unhandled sortType=\" + sortType);\n              }\n            }\n            if (missingValue != null) {\n              sortFields[i].setMissingValue(missingValue);\n            }\n          }\n          indexSort = new Sort(sortFields);\n        } else if (numSortFields < 0) {\n          throw new CorruptIndexException(\"invalid index sort field count: \" + numSortFields, input);\n        } else {\n          indexSort = null;\n        }\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, segmentID, attributes, indexSort);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene62/Lucene62SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene62SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        int format = CodecUtil.checkIndexHeader(input, Lucene62SegmentInfoFormat.CODEC_NAME,\n                                                Lucene62SegmentInfoFormat.VERSION_START,\n                                                Lucene62SegmentInfoFormat.VERSION_CURRENT,\n                                                segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        \n        final Map<String,String> diagnostics = input.readMapOfStrings();\n        final Set<String> files = input.readSetOfStrings();\n        final Map<String,String> attributes = input.readMapOfStrings();\n\n        int numSortFields = input.readVInt();\n        Sort indexSort;\n        if (numSortFields > 0) {\n          SortField[] sortFields = new SortField[numSortFields];\n          for(int i=0;i<numSortFields;i++) {\n            String fieldName = input.readString();\n            int sortTypeID = input.readVInt();\n            SortField.Type sortType;\n            switch(sortTypeID) {\n            case 0:\n              sortType = SortField.Type.STRING;\n              break;\n            case 1:\n              sortType = SortField.Type.LONG;\n              break;\n            case 2:\n              sortType = SortField.Type.INT;\n              break;\n            case 3:\n              sortType = SortField.Type.DOUBLE;\n              break;\n            case 4:\n              sortType = SortField.Type.FLOAT;\n              break;\n            default:\n              throw new CorruptIndexException(\"invalid index sort field type ID: \" + sortTypeID, input);\n            }\n            byte b = input.readByte();\n            boolean reverse;\n            if (b == 0) {\n              reverse = true;\n            } else if (b == 1) {\n              reverse = false;\n            } else {\n              throw new CorruptIndexException(\"invalid index sort reverse: \" + b, input);\n            }\n\n            sortFields[i] = new SortField(fieldName, sortType, reverse);\n\n            Object missingValue;\n            b = input.readByte();\n            if (b == 0) {\n              missingValue = null;\n            } else {\n              switch(sortType) {\n              case STRING:\n                if (b == 1) {\n                  missingValue = SortField.STRING_LAST;\n                } else if (b == 2) {\n                  missingValue = SortField.STRING_FIRST;\n                } else {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                break;\n              case LONG:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = input.readLong();\n                break;\n              case INT:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = input.readInt();\n                break;\n              case DOUBLE:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = Double.longBitsToDouble(input.readLong());\n                break;\n              case FLOAT:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = Float.intBitsToFloat(input.readInt());\n                break;\n              default:\n                throw new AssertionError(\"unhandled sortType=\" + sortType);\n              }\n            }\n            if (missingValue != null) {\n              sortFields[i].setMissingValue(missingValue);\n            }\n          }\n          indexSort = new Sort(sortFields);\n        } else if (numSortFields < 0) {\n          throw new CorruptIndexException(\"invalid index sort field count: \" + numSortFields, input);\n        } else {\n          indexSort = null;\n        }\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, segmentID, attributes, indexSort);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene62/Lucene62SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene62SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        int format = CodecUtil.checkIndexHeader(input, Lucene62SegmentInfoFormat.CODEC_NAME,\n                                                Lucene62SegmentInfoFormat.VERSION_START,\n                                                Lucene62SegmentInfoFormat.VERSION_CURRENT,\n                                                segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        \n        final Map<String,String> diagnostics = input.readMapOfStrings();\n        final Set<String> files = input.readSetOfStrings();\n        final Map<String,String> attributes = input.readMapOfStrings();\n\n        int numSortFields = input.readVInt();\n        Sort indexSort;\n        if (numSortFields > 0) {\n          SortField[] sortFields = new SortField[numSortFields];\n          for(int i=0;i<numSortFields;i++) {\n            String fieldName = input.readString();\n            int sortTypeID = input.readVInt();\n            SortField.Type sortType;\n            switch(sortTypeID) {\n            case 0:\n              sortType = SortField.Type.STRING;\n              break;\n            case 1:\n              sortType = SortField.Type.LONG;\n              break;\n            case 2:\n              sortType = SortField.Type.INT;\n              break;\n            case 3:\n              sortType = SortField.Type.DOUBLE;\n              break;\n            case 4:\n              sortType = SortField.Type.FLOAT;\n              break;\n            default:\n              throw new CorruptIndexException(\"invalid index sort field type ID: \" + sortTypeID, input);\n            }\n            byte b = input.readByte();\n            boolean reverse;\n            if (b == 0) {\n              reverse = true;\n            } else if (b == 1) {\n              reverse = false;\n            } else {\n              throw new CorruptIndexException(\"invalid index sort reverse: \" + b, input);\n            }\n\n            sortFields[i] = new SortField(fieldName, sortType, reverse);\n\n            Object missingValue;\n            b = input.readByte();\n            if (b == 0) {\n              missingValue = null;\n            } else {\n              switch(sortType) {\n              case STRING:\n                if (b == 1) {\n                  missingValue = SortField.STRING_LAST;\n                } else if (b == 2) {\n                  missingValue = SortField.STRING_FIRST;\n                } else {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                break;\n              case LONG:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = input.readLong();\n                break;\n              case INT:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = input.readInt();\n                break;\n              case DOUBLE:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = Double.longBitsToDouble(input.readLong());\n                break;\n              case FLOAT:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = Float.intBitsToFloat(input.readInt());\n                break;\n              default:\n                throw new AssertionError(\"unhandled sortType=\" + sortType);\n              }\n            }\n            if (missingValue != null) {\n              sortFields[i].setMissingValue(missingValue);\n            }\n          }\n          indexSort = new Sort(sortFields);\n        } else if (numSortFields < 0) {\n          throw new CorruptIndexException(\"invalid index sort field count: \" + numSortFields, input);\n        } else {\n          indexSort = null;\n        }\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, segmentID, attributes, indexSort);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene62/Lucene62SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene62SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        int format = CodecUtil.checkIndexHeader(input, Lucene62SegmentInfoFormat.CODEC_NAME,\n                                                Lucene62SegmentInfoFormat.VERSION_START,\n                                                Lucene62SegmentInfoFormat.VERSION_CURRENT,\n                                                segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        \n        final Map<String,String> diagnostics = input.readMapOfStrings();\n        final Set<String> files = input.readSetOfStrings();\n        final Map<String,String> attributes = input.readMapOfStrings();\n\n        int numSortFields = input.readVInt();\n        Sort indexSort;\n        if (numSortFields > 0) {\n          SortField[] sortFields = new SortField[numSortFields];\n          for(int i=0;i<numSortFields;i++) {\n            String fieldName = input.readString();\n            int sortTypeID = input.readVInt();\n            SortField.Type sortType;\n            switch(sortTypeID) {\n            case 0:\n              sortType = SortField.Type.STRING;\n              break;\n            case 1:\n              sortType = SortField.Type.LONG;\n              break;\n            case 2:\n              sortType = SortField.Type.INT;\n              break;\n            case 3:\n              sortType = SortField.Type.DOUBLE;\n              break;\n            case 4:\n              sortType = SortField.Type.FLOAT;\n              break;\n            default:\n              throw new CorruptIndexException(\"invalid index sort field type ID: \" + sortTypeID, input);\n            }\n            byte b = input.readByte();\n            boolean reverse;\n            if (b == 0) {\n              reverse = true;\n            } else if (b == 1) {\n              reverse = false;\n            } else {\n              throw new CorruptIndexException(\"invalid index sort reverse: \" + b, input);\n            }\n\n            sortFields[i] = new SortField(fieldName, sortType, reverse);\n\n            Object missingValue;\n            b = input.readByte();\n            if (b == 0) {\n              missingValue = null;\n            } else {\n              switch(sortType) {\n              case STRING:\n                if (b == 1) {\n                  missingValue = SortField.STRING_LAST;\n                } else if (b == 2) {\n                  missingValue = SortField.STRING_FIRST;\n                } else {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                break;\n              case LONG:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = input.readLong();\n                break;\n              case INT:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = input.readInt();\n                break;\n              case DOUBLE:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = Double.longBitsToDouble(input.readLong());\n                break;\n              case FLOAT:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = Float.intBitsToFloat(input.readInt());\n                break;\n              default:\n                throw new AssertionError(\"unhandled sortType=\" + sortType);\n              }\n            }\n            if (missingValue != null) {\n              sortFields[i].setMissingValue(missingValue);\n            }\n          }\n          indexSort = new Sort(sortFields);\n        } else if (numSortFields < 0) {\n          throw new CorruptIndexException(\"invalid index sort field count: \" + numSortFields, input);\n        } else {\n          indexSort = null;\n        }\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, segmentID, attributes, indexSort);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e065cebbdee472a02bde38052717a8cd7ee8ab3b","date":1479244971,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene62/Lucene62SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene62/Lucene62SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene62SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        int format = CodecUtil.checkIndexHeader(input, Lucene62SegmentInfoFormat.CODEC_NAME,\n                                                Lucene62SegmentInfoFormat.VERSION_START,\n                                                Lucene62SegmentInfoFormat.VERSION_CURRENT,\n                                                segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n\n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n        final Map<String,String> diagnostics = input.readMapOfStrings();\n        final Set<String> files = input.readSetOfStrings();\n        final Map<String,String> attributes = input.readMapOfStrings();\n\n        int numSortFields = input.readVInt();\n        Sort indexSort;\n        if (numSortFields > 0) {\n          SortField[] sortFields = new SortField[numSortFields];\n          for(int i=0;i<numSortFields;i++) {\n            String fieldName = input.readString();\n            int sortTypeID = input.readVInt();\n            SortField.Type sortType;\n            SortedSetSelector.Type sortedSetSelector = null;\n            SortedNumericSelector.Type sortedNumericSelector = null;\n            switch(sortTypeID) {\n            case 0:\n              sortType = SortField.Type.STRING;\n              break;\n            case 1:\n              sortType = SortField.Type.LONG;\n              break;\n            case 2:\n              sortType = SortField.Type.INT;\n              break;\n            case 3:\n              sortType = SortField.Type.DOUBLE;\n              break;\n            case 4:\n              sortType = SortField.Type.FLOAT;\n              break;\n            case 5:\n              sortType = SortField.Type.STRING;\n              byte selector = input.readByte();\n              if (selector == 0) {\n                sortedSetSelector = SortedSetSelector.Type.MIN;\n              } else if (selector == 1) {\n                sortedSetSelector = SortedSetSelector.Type.MAX;\n              } else if (selector == 2) {\n                sortedSetSelector = SortedSetSelector.Type.MIDDLE_MIN;\n              } else if (selector == 3) {\n                sortedSetSelector = SortedSetSelector.Type.MIDDLE_MAX;\n              } else {\n                throw new CorruptIndexException(\"invalid index SortedSetSelector ID: \" + selector, input);\n              }\n              break;\n            case 6:\n              byte type = input.readByte();\n              if (type == 0) {\n                sortType = SortField.Type.LONG;\n              } else if (type == 1) {\n                sortType = SortField.Type.INT;\n              } else if (type == 2) {\n                sortType = SortField.Type.DOUBLE;\n              } else if (type == 3) {\n                sortType = SortField.Type.FLOAT;\n              } else {\n                throw new CorruptIndexException(\"invalid index SortedNumericSortField type ID: \" + type, input);\n              }\n              byte numericSelector = input.readByte();\n              if (numericSelector == 0) {\n                sortedNumericSelector = SortedNumericSelector.Type.MIN;\n              } else if (numericSelector == 1) {\n                sortedNumericSelector = SortedNumericSelector.Type.MAX;\n              } else {\n                throw new CorruptIndexException(\"invalid index SortedNumericSelector ID: \" + numericSelector, input);\n              }\n              break;\n            default:\n              throw new CorruptIndexException(\"invalid index sort field type ID: \" + sortTypeID, input);\n            }\n            byte b = input.readByte();\n            boolean reverse;\n            if (b == 0) {\n              reverse = true;\n            } else if (b == 1) {\n              reverse = false;\n            } else {\n              throw new CorruptIndexException(\"invalid index sort reverse: \" + b, input);\n            }\n\n            if (sortedSetSelector != null) {\n              sortFields[i] = new SortedSetSortField(fieldName, reverse, sortedSetSelector);\n            } else if (sortedNumericSelector != null) {\n              sortFields[i] = new SortedNumericSortField(fieldName, sortType, reverse, sortedNumericSelector);\n            } else {\n              sortFields[i] = new SortField(fieldName, sortType, reverse);\n            }\n\n            Object missingValue;\n            b = input.readByte();\n            if (b == 0) {\n              missingValue = null;\n            } else {\n              switch(sortType) {\n              case STRING:\n                if (b == 1) {\n                  missingValue = SortField.STRING_LAST;\n                } else if (b == 2) {\n                  missingValue = SortField.STRING_FIRST;\n                } else {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                break;\n              case LONG:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = input.readLong();\n                break;\n              case INT:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = input.readInt();\n                break;\n              case DOUBLE:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = Double.longBitsToDouble(input.readLong());\n                break;\n              case FLOAT:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = Float.intBitsToFloat(input.readInt());\n                break;\n              default:\n                throw new AssertionError(\"unhandled sortType=\" + sortType);\n              }\n            }\n            if (missingValue != null) {\n              sortFields[i].setMissingValue(missingValue);\n            }\n          }\n          indexSort = new Sort(sortFields);\n        } else if (numSortFields < 0) {\n          throw new CorruptIndexException(\"invalid index sort field count: \" + numSortFields, input);\n        } else {\n          indexSort = null;\n        }\n\n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, segmentID, attributes, indexSort);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene62SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        int format = CodecUtil.checkIndexHeader(input, Lucene62SegmentInfoFormat.CODEC_NAME,\n                                                Lucene62SegmentInfoFormat.VERSION_START,\n                                                Lucene62SegmentInfoFormat.VERSION_CURRENT,\n                                                segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        \n        final Map<String,String> diagnostics = input.readMapOfStrings();\n        final Set<String> files = input.readSetOfStrings();\n        final Map<String,String> attributes = input.readMapOfStrings();\n\n        int numSortFields = input.readVInt();\n        Sort indexSort;\n        if (numSortFields > 0) {\n          SortField[] sortFields = new SortField[numSortFields];\n          for(int i=0;i<numSortFields;i++) {\n            String fieldName = input.readString();\n            int sortTypeID = input.readVInt();\n            SortField.Type sortType;\n            switch(sortTypeID) {\n            case 0:\n              sortType = SortField.Type.STRING;\n              break;\n            case 1:\n              sortType = SortField.Type.LONG;\n              break;\n            case 2:\n              sortType = SortField.Type.INT;\n              break;\n            case 3:\n              sortType = SortField.Type.DOUBLE;\n              break;\n            case 4:\n              sortType = SortField.Type.FLOAT;\n              break;\n            default:\n              throw new CorruptIndexException(\"invalid index sort field type ID: \" + sortTypeID, input);\n            }\n            byte b = input.readByte();\n            boolean reverse;\n            if (b == 0) {\n              reverse = true;\n            } else if (b == 1) {\n              reverse = false;\n            } else {\n              throw new CorruptIndexException(\"invalid index sort reverse: \" + b, input);\n            }\n\n            sortFields[i] = new SortField(fieldName, sortType, reverse);\n\n            Object missingValue;\n            b = input.readByte();\n            if (b == 0) {\n              missingValue = null;\n            } else {\n              switch(sortType) {\n              case STRING:\n                if (b == 1) {\n                  missingValue = SortField.STRING_LAST;\n                } else if (b == 2) {\n                  missingValue = SortField.STRING_FIRST;\n                } else {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                break;\n              case LONG:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = input.readLong();\n                break;\n              case INT:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = input.readInt();\n                break;\n              case DOUBLE:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = Double.longBitsToDouble(input.readLong());\n                break;\n              case FLOAT:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = Float.intBitsToFloat(input.readInt());\n                break;\n              default:\n                throw new AssertionError(\"unhandled sortType=\" + sortType);\n              }\n            }\n            if (missingValue != null) {\n              sortFields[i].setMissingValue(missingValue);\n            }\n          }\n          indexSort = new Sort(sortFields);\n        } else if (numSortFields < 0) {\n          throw new CorruptIndexException(\"invalid index sort field count: \" + numSortFields, input);\n        } else {\n          indexSort = null;\n        }\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, segmentID, attributes, indexSort);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene62/Lucene62SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene62/Lucene62SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene62SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        int format = CodecUtil.checkIndexHeader(input, Lucene62SegmentInfoFormat.CODEC_NAME,\n                                                Lucene62SegmentInfoFormat.VERSION_START,\n                                                Lucene62SegmentInfoFormat.VERSION_CURRENT,\n                                                segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n\n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n        final Map<String,String> diagnostics = input.readMapOfStrings();\n        final Set<String> files = input.readSetOfStrings();\n        final Map<String,String> attributes = input.readMapOfStrings();\n\n        int numSortFields = input.readVInt();\n        Sort indexSort;\n        if (numSortFields > 0) {\n          SortField[] sortFields = new SortField[numSortFields];\n          for(int i=0;i<numSortFields;i++) {\n            String fieldName = input.readString();\n            int sortTypeID = input.readVInt();\n            SortField.Type sortType;\n            SortedSetSelector.Type sortedSetSelector = null;\n            SortedNumericSelector.Type sortedNumericSelector = null;\n            switch(sortTypeID) {\n            case 0:\n              sortType = SortField.Type.STRING;\n              break;\n            case 1:\n              sortType = SortField.Type.LONG;\n              break;\n            case 2:\n              sortType = SortField.Type.INT;\n              break;\n            case 3:\n              sortType = SortField.Type.DOUBLE;\n              break;\n            case 4:\n              sortType = SortField.Type.FLOAT;\n              break;\n            case 5:\n              sortType = SortField.Type.STRING;\n              byte selector = input.readByte();\n              if (selector == 0) {\n                sortedSetSelector = SortedSetSelector.Type.MIN;\n              } else if (selector == 1) {\n                sortedSetSelector = SortedSetSelector.Type.MAX;\n              } else if (selector == 2) {\n                sortedSetSelector = SortedSetSelector.Type.MIDDLE_MIN;\n              } else if (selector == 3) {\n                sortedSetSelector = SortedSetSelector.Type.MIDDLE_MAX;\n              } else {\n                throw new CorruptIndexException(\"invalid index SortedSetSelector ID: \" + selector, input);\n              }\n              break;\n            case 6:\n              byte type = input.readByte();\n              if (type == 0) {\n                sortType = SortField.Type.LONG;\n              } else if (type == 1) {\n                sortType = SortField.Type.INT;\n              } else if (type == 2) {\n                sortType = SortField.Type.DOUBLE;\n              } else if (type == 3) {\n                sortType = SortField.Type.FLOAT;\n              } else {\n                throw new CorruptIndexException(\"invalid index SortedNumericSortField type ID: \" + type, input);\n              }\n              byte numericSelector = input.readByte();\n              if (numericSelector == 0) {\n                sortedNumericSelector = SortedNumericSelector.Type.MIN;\n              } else if (numericSelector == 1) {\n                sortedNumericSelector = SortedNumericSelector.Type.MAX;\n              } else {\n                throw new CorruptIndexException(\"invalid index SortedNumericSelector ID: \" + numericSelector, input);\n              }\n              break;\n            default:\n              throw new CorruptIndexException(\"invalid index sort field type ID: \" + sortTypeID, input);\n            }\n            byte b = input.readByte();\n            boolean reverse;\n            if (b == 0) {\n              reverse = true;\n            } else if (b == 1) {\n              reverse = false;\n            } else {\n              throw new CorruptIndexException(\"invalid index sort reverse: \" + b, input);\n            }\n\n            if (sortedSetSelector != null) {\n              sortFields[i] = new SortedSetSortField(fieldName, reverse, sortedSetSelector);\n            } else if (sortedNumericSelector != null) {\n              sortFields[i] = new SortedNumericSortField(fieldName, sortType, reverse, sortedNumericSelector);\n            } else {\n              sortFields[i] = new SortField(fieldName, sortType, reverse);\n            }\n\n            Object missingValue;\n            b = input.readByte();\n            if (b == 0) {\n              missingValue = null;\n            } else {\n              switch(sortType) {\n              case STRING:\n                if (b == 1) {\n                  missingValue = SortField.STRING_LAST;\n                } else if (b == 2) {\n                  missingValue = SortField.STRING_FIRST;\n                } else {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                break;\n              case LONG:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = input.readLong();\n                break;\n              case INT:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = input.readInt();\n                break;\n              case DOUBLE:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = Double.longBitsToDouble(input.readLong());\n                break;\n              case FLOAT:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = Float.intBitsToFloat(input.readInt());\n                break;\n              default:\n                throw new AssertionError(\"unhandled sortType=\" + sortType);\n              }\n            }\n            if (missingValue != null) {\n              sortFields[i].setMissingValue(missingValue);\n            }\n          }\n          indexSort = new Sort(sortFields);\n        } else if (numSortFields < 0) {\n          throw new CorruptIndexException(\"invalid index sort field count: \" + numSortFields, input);\n        } else {\n          indexSort = null;\n        }\n\n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, segmentID, attributes, indexSort);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene62SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        int format = CodecUtil.checkIndexHeader(input, Lucene62SegmentInfoFormat.CODEC_NAME,\n                                                Lucene62SegmentInfoFormat.VERSION_START,\n                                                Lucene62SegmentInfoFormat.VERSION_CURRENT,\n                                                segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        \n        final Map<String,String> diagnostics = input.readMapOfStrings();\n        final Set<String> files = input.readSetOfStrings();\n        final Map<String,String> attributes = input.readMapOfStrings();\n\n        int numSortFields = input.readVInt();\n        Sort indexSort;\n        if (numSortFields > 0) {\n          SortField[] sortFields = new SortField[numSortFields];\n          for(int i=0;i<numSortFields;i++) {\n            String fieldName = input.readString();\n            int sortTypeID = input.readVInt();\n            SortField.Type sortType;\n            switch(sortTypeID) {\n            case 0:\n              sortType = SortField.Type.STRING;\n              break;\n            case 1:\n              sortType = SortField.Type.LONG;\n              break;\n            case 2:\n              sortType = SortField.Type.INT;\n              break;\n            case 3:\n              sortType = SortField.Type.DOUBLE;\n              break;\n            case 4:\n              sortType = SortField.Type.FLOAT;\n              break;\n            default:\n              throw new CorruptIndexException(\"invalid index sort field type ID: \" + sortTypeID, input);\n            }\n            byte b = input.readByte();\n            boolean reverse;\n            if (b == 0) {\n              reverse = true;\n            } else if (b == 1) {\n              reverse = false;\n            } else {\n              throw new CorruptIndexException(\"invalid index sort reverse: \" + b, input);\n            }\n\n            sortFields[i] = new SortField(fieldName, sortType, reverse);\n\n            Object missingValue;\n            b = input.readByte();\n            if (b == 0) {\n              missingValue = null;\n            } else {\n              switch(sortType) {\n              case STRING:\n                if (b == 1) {\n                  missingValue = SortField.STRING_LAST;\n                } else if (b == 2) {\n                  missingValue = SortField.STRING_FIRST;\n                } else {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                break;\n              case LONG:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = input.readLong();\n                break;\n              case INT:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = input.readInt();\n                break;\n              case DOUBLE:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = Double.longBitsToDouble(input.readLong());\n                break;\n              case FLOAT:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = Float.intBitsToFloat(input.readInt());\n                break;\n              default:\n                throw new AssertionError(\"unhandled sortType=\" + sortType);\n              }\n            }\n            if (missingValue != null) {\n              sortFields[i].setMissingValue(missingValue);\n            }\n          }\n          indexSort = new Sort(sortFields);\n        } else if (numSortFields < 0) {\n          throw new CorruptIndexException(\"invalid index sort field count: \" + numSortFields, input);\n        } else {\n          indexSort = null;\n        }\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, segmentID, attributes, indexSort);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31741cf1390044e38a2ec3127cf302ba841bfd75","date":1491292636,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene62/Lucene62SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene62/Lucene62SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene62SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        int format = CodecUtil.checkIndexHeader(input, Lucene62SegmentInfoFormat.CODEC_NAME,\n                                                Lucene62SegmentInfoFormat.VERSION_START,\n                                                Lucene62SegmentInfoFormat.VERSION_CURRENT,\n                                                segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n\n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n        final Map<String,String> diagnostics = input.readMapOfStrings();\n        final Set<String> files = input.readSetOfStrings();\n        final Map<String,String> attributes = input.readMapOfStrings();\n\n        int numSortFields = input.readVInt();\n        Sort indexSort;\n        if (numSortFields > 0) {\n          SortField[] sortFields = new SortField[numSortFields];\n          for(int i=0;i<numSortFields;i++) {\n            String fieldName = input.readString();\n            int sortTypeID = input.readVInt();\n            SortField.Type sortType;\n            SortedSetSelector.Type sortedSetSelector = null;\n            SortedNumericSelector.Type sortedNumericSelector = null;\n            switch(sortTypeID) {\n            case 0:\n              sortType = SortField.Type.STRING;\n              break;\n            case 1:\n              sortType = SortField.Type.LONG;\n              break;\n            case 2:\n              sortType = SortField.Type.INT;\n              break;\n            case 3:\n              sortType = SortField.Type.DOUBLE;\n              break;\n            case 4:\n              sortType = SortField.Type.FLOAT;\n              break;\n            case 5:\n              sortType = SortField.Type.STRING;\n              byte selector = input.readByte();\n              if (selector == 0) {\n                sortedSetSelector = SortedSetSelector.Type.MIN;\n              } else if (selector == 1) {\n                sortedSetSelector = SortedSetSelector.Type.MAX;\n              } else if (selector == 2) {\n                sortedSetSelector = SortedSetSelector.Type.MIDDLE_MIN;\n              } else if (selector == 3) {\n                sortedSetSelector = SortedSetSelector.Type.MIDDLE_MAX;\n              } else {\n                throw new CorruptIndexException(\"invalid index SortedSetSelector ID: \" + selector, input);\n              }\n              break;\n            case 6:\n              byte type = input.readByte();\n              if (type == 0) {\n                sortType = SortField.Type.LONG;\n              } else if (type == 1) {\n                sortType = SortField.Type.INT;\n              } else if (type == 2) {\n                sortType = SortField.Type.DOUBLE;\n              } else if (type == 3) {\n                sortType = SortField.Type.FLOAT;\n              } else {\n                throw new CorruptIndexException(\"invalid index SortedNumericSortField type ID: \" + type, input);\n              }\n              byte numericSelector = input.readByte();\n              if (numericSelector == 0) {\n                sortedNumericSelector = SortedNumericSelector.Type.MIN;\n              } else if (numericSelector == 1) {\n                sortedNumericSelector = SortedNumericSelector.Type.MAX;\n              } else {\n                throw new CorruptIndexException(\"invalid index SortedNumericSelector ID: \" + numericSelector, input);\n              }\n              break;\n            default:\n              throw new CorruptIndexException(\"invalid index sort field type ID: \" + sortTypeID, input);\n            }\n            byte b = input.readByte();\n            boolean reverse;\n            if (b == 0) {\n              reverse = true;\n            } else if (b == 1) {\n              reverse = false;\n            } else {\n              throw new CorruptIndexException(\"invalid index sort reverse: \" + b, input);\n            }\n\n            if (sortedSetSelector != null) {\n              sortFields[i] = new SortedSetSortField(fieldName, reverse, sortedSetSelector);\n            } else if (sortedNumericSelector != null) {\n              sortFields[i] = new SortedNumericSortField(fieldName, sortType, reverse, sortedNumericSelector);\n            } else {\n              sortFields[i] = new SortField(fieldName, sortType, reverse);\n            }\n\n            Object missingValue;\n            b = input.readByte();\n            if (b == 0) {\n              missingValue = null;\n            } else {\n              switch(sortType) {\n              case STRING:\n                if (b == 1) {\n                  missingValue = SortField.STRING_LAST;\n                } else if (b == 2) {\n                  missingValue = SortField.STRING_FIRST;\n                } else {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                break;\n              case LONG:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = input.readLong();\n                break;\n              case INT:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = input.readInt();\n                break;\n              case DOUBLE:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = Double.longBitsToDouble(input.readLong());\n                break;\n              case FLOAT:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = Float.intBitsToFloat(input.readInt());\n                break;\n              default:\n                throw new AssertionError(\"unhandled sortType=\" + sortType);\n              }\n            }\n            if (missingValue != null) {\n              sortFields[i].setMissingValue(missingValue);\n            }\n          }\n          indexSort = new Sort(sortFields);\n        } else if (numSortFields < 0) {\n          throw new CorruptIndexException(\"invalid index sort field count: \" + numSortFields, input);\n        } else {\n          indexSort = null;\n        }\n\n        si = new SegmentInfo(dir, version, null, segment, docCount, isCompoundFile, null, diagnostics, segmentID, attributes, indexSort);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene62SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        int format = CodecUtil.checkIndexHeader(input, Lucene62SegmentInfoFormat.CODEC_NAME,\n                                                Lucene62SegmentInfoFormat.VERSION_START,\n                                                Lucene62SegmentInfoFormat.VERSION_CURRENT,\n                                                segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n\n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n        final Map<String,String> diagnostics = input.readMapOfStrings();\n        final Set<String> files = input.readSetOfStrings();\n        final Map<String,String> attributes = input.readMapOfStrings();\n\n        int numSortFields = input.readVInt();\n        Sort indexSort;\n        if (numSortFields > 0) {\n          SortField[] sortFields = new SortField[numSortFields];\n          for(int i=0;i<numSortFields;i++) {\n            String fieldName = input.readString();\n            int sortTypeID = input.readVInt();\n            SortField.Type sortType;\n            SortedSetSelector.Type sortedSetSelector = null;\n            SortedNumericSelector.Type sortedNumericSelector = null;\n            switch(sortTypeID) {\n            case 0:\n              sortType = SortField.Type.STRING;\n              break;\n            case 1:\n              sortType = SortField.Type.LONG;\n              break;\n            case 2:\n              sortType = SortField.Type.INT;\n              break;\n            case 3:\n              sortType = SortField.Type.DOUBLE;\n              break;\n            case 4:\n              sortType = SortField.Type.FLOAT;\n              break;\n            case 5:\n              sortType = SortField.Type.STRING;\n              byte selector = input.readByte();\n              if (selector == 0) {\n                sortedSetSelector = SortedSetSelector.Type.MIN;\n              } else if (selector == 1) {\n                sortedSetSelector = SortedSetSelector.Type.MAX;\n              } else if (selector == 2) {\n                sortedSetSelector = SortedSetSelector.Type.MIDDLE_MIN;\n              } else if (selector == 3) {\n                sortedSetSelector = SortedSetSelector.Type.MIDDLE_MAX;\n              } else {\n                throw new CorruptIndexException(\"invalid index SortedSetSelector ID: \" + selector, input);\n              }\n              break;\n            case 6:\n              byte type = input.readByte();\n              if (type == 0) {\n                sortType = SortField.Type.LONG;\n              } else if (type == 1) {\n                sortType = SortField.Type.INT;\n              } else if (type == 2) {\n                sortType = SortField.Type.DOUBLE;\n              } else if (type == 3) {\n                sortType = SortField.Type.FLOAT;\n              } else {\n                throw new CorruptIndexException(\"invalid index SortedNumericSortField type ID: \" + type, input);\n              }\n              byte numericSelector = input.readByte();\n              if (numericSelector == 0) {\n                sortedNumericSelector = SortedNumericSelector.Type.MIN;\n              } else if (numericSelector == 1) {\n                sortedNumericSelector = SortedNumericSelector.Type.MAX;\n              } else {\n                throw new CorruptIndexException(\"invalid index SortedNumericSelector ID: \" + numericSelector, input);\n              }\n              break;\n            default:\n              throw new CorruptIndexException(\"invalid index sort field type ID: \" + sortTypeID, input);\n            }\n            byte b = input.readByte();\n            boolean reverse;\n            if (b == 0) {\n              reverse = true;\n            } else if (b == 1) {\n              reverse = false;\n            } else {\n              throw new CorruptIndexException(\"invalid index sort reverse: \" + b, input);\n            }\n\n            if (sortedSetSelector != null) {\n              sortFields[i] = new SortedSetSortField(fieldName, reverse, sortedSetSelector);\n            } else if (sortedNumericSelector != null) {\n              sortFields[i] = new SortedNumericSortField(fieldName, sortType, reverse, sortedNumericSelector);\n            } else {\n              sortFields[i] = new SortField(fieldName, sortType, reverse);\n            }\n\n            Object missingValue;\n            b = input.readByte();\n            if (b == 0) {\n              missingValue = null;\n            } else {\n              switch(sortType) {\n              case STRING:\n                if (b == 1) {\n                  missingValue = SortField.STRING_LAST;\n                } else if (b == 2) {\n                  missingValue = SortField.STRING_FIRST;\n                } else {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                break;\n              case LONG:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = input.readLong();\n                break;\n              case INT:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = input.readInt();\n                break;\n              case DOUBLE:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = Double.longBitsToDouble(input.readLong());\n                break;\n              case FLOAT:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = Float.intBitsToFloat(input.readInt());\n                break;\n              default:\n                throw new AssertionError(\"unhandled sortType=\" + sortType);\n              }\n            }\n            if (missingValue != null) {\n              sortFields[i].setMissingValue(missingValue);\n            }\n          }\n          indexSort = new Sort(sortFields);\n        } else if (numSortFields < 0) {\n          throw new CorruptIndexException(\"invalid index sort field count: \" + numSortFields, input);\n        } else {\n          indexSort = null;\n        }\n\n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, segmentID, attributes, indexSort);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92212fd254551a0b1156aafc3a1a6ed1a43932ad","date":1491296431,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene62/Lucene62SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene62/Lucene62SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene62SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        int format = CodecUtil.checkIndexHeader(input, Lucene62SegmentInfoFormat.CODEC_NAME,\n                                                Lucene62SegmentInfoFormat.VERSION_START,\n                                                Lucene62SegmentInfoFormat.VERSION_CURRENT,\n                                                segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n\n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n        final Map<String,String> diagnostics = input.readMapOfStrings();\n        final Set<String> files = input.readSetOfStrings();\n        final Map<String,String> attributes = input.readMapOfStrings();\n\n        int numSortFields = input.readVInt();\n        Sort indexSort;\n        if (numSortFields > 0) {\n          SortField[] sortFields = new SortField[numSortFields];\n          for(int i=0;i<numSortFields;i++) {\n            String fieldName = input.readString();\n            int sortTypeID = input.readVInt();\n            SortField.Type sortType;\n            SortedSetSelector.Type sortedSetSelector = null;\n            SortedNumericSelector.Type sortedNumericSelector = null;\n            switch(sortTypeID) {\n            case 0:\n              sortType = SortField.Type.STRING;\n              break;\n            case 1:\n              sortType = SortField.Type.LONG;\n              break;\n            case 2:\n              sortType = SortField.Type.INT;\n              break;\n            case 3:\n              sortType = SortField.Type.DOUBLE;\n              break;\n            case 4:\n              sortType = SortField.Type.FLOAT;\n              break;\n            case 5:\n              sortType = SortField.Type.STRING;\n              byte selector = input.readByte();\n              if (selector == 0) {\n                sortedSetSelector = SortedSetSelector.Type.MIN;\n              } else if (selector == 1) {\n                sortedSetSelector = SortedSetSelector.Type.MAX;\n              } else if (selector == 2) {\n                sortedSetSelector = SortedSetSelector.Type.MIDDLE_MIN;\n              } else if (selector == 3) {\n                sortedSetSelector = SortedSetSelector.Type.MIDDLE_MAX;\n              } else {\n                throw new CorruptIndexException(\"invalid index SortedSetSelector ID: \" + selector, input);\n              }\n              break;\n            case 6:\n              byte type = input.readByte();\n              if (type == 0) {\n                sortType = SortField.Type.LONG;\n              } else if (type == 1) {\n                sortType = SortField.Type.INT;\n              } else if (type == 2) {\n                sortType = SortField.Type.DOUBLE;\n              } else if (type == 3) {\n                sortType = SortField.Type.FLOAT;\n              } else {\n                throw new CorruptIndexException(\"invalid index SortedNumericSortField type ID: \" + type, input);\n              }\n              byte numericSelector = input.readByte();\n              if (numericSelector == 0) {\n                sortedNumericSelector = SortedNumericSelector.Type.MIN;\n              } else if (numericSelector == 1) {\n                sortedNumericSelector = SortedNumericSelector.Type.MAX;\n              } else {\n                throw new CorruptIndexException(\"invalid index SortedNumericSelector ID: \" + numericSelector, input);\n              }\n              break;\n            default:\n              throw new CorruptIndexException(\"invalid index sort field type ID: \" + sortTypeID, input);\n            }\n            byte b = input.readByte();\n            boolean reverse;\n            if (b == 0) {\n              reverse = true;\n            } else if (b == 1) {\n              reverse = false;\n            } else {\n              throw new CorruptIndexException(\"invalid index sort reverse: \" + b, input);\n            }\n\n            if (sortedSetSelector != null) {\n              sortFields[i] = new SortedSetSortField(fieldName, reverse, sortedSetSelector);\n            } else if (sortedNumericSelector != null) {\n              sortFields[i] = new SortedNumericSortField(fieldName, sortType, reverse, sortedNumericSelector);\n            } else {\n              sortFields[i] = new SortField(fieldName, sortType, reverse);\n            }\n\n            Object missingValue;\n            b = input.readByte();\n            if (b == 0) {\n              missingValue = null;\n            } else {\n              switch(sortType) {\n              case STRING:\n                if (b == 1) {\n                  missingValue = SortField.STRING_LAST;\n                } else if (b == 2) {\n                  missingValue = SortField.STRING_FIRST;\n                } else {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                break;\n              case LONG:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = input.readLong();\n                break;\n              case INT:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = input.readInt();\n                break;\n              case DOUBLE:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = Double.longBitsToDouble(input.readLong());\n                break;\n              case FLOAT:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = Float.intBitsToFloat(input.readInt());\n                break;\n              default:\n                throw new AssertionError(\"unhandled sortType=\" + sortType);\n              }\n            }\n            if (missingValue != null) {\n              sortFields[i].setMissingValue(missingValue);\n            }\n          }\n          indexSort = new Sort(sortFields);\n        } else if (numSortFields < 0) {\n          throw new CorruptIndexException(\"invalid index sort field count: \" + numSortFields, input);\n        } else {\n          indexSort = null;\n        }\n\n        si = new SegmentInfo(dir, version, null, segment, docCount, isCompoundFile, null, diagnostics, segmentID, attributes, indexSort);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene62SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        int format = CodecUtil.checkIndexHeader(input, Lucene62SegmentInfoFormat.CODEC_NAME,\n                                                Lucene62SegmentInfoFormat.VERSION_START,\n                                                Lucene62SegmentInfoFormat.VERSION_CURRENT,\n                                                segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n\n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n        final Map<String,String> diagnostics = input.readMapOfStrings();\n        final Set<String> files = input.readSetOfStrings();\n        final Map<String,String> attributes = input.readMapOfStrings();\n\n        int numSortFields = input.readVInt();\n        Sort indexSort;\n        if (numSortFields > 0) {\n          SortField[] sortFields = new SortField[numSortFields];\n          for(int i=0;i<numSortFields;i++) {\n            String fieldName = input.readString();\n            int sortTypeID = input.readVInt();\n            SortField.Type sortType;\n            SortedSetSelector.Type sortedSetSelector = null;\n            SortedNumericSelector.Type sortedNumericSelector = null;\n            switch(sortTypeID) {\n            case 0:\n              sortType = SortField.Type.STRING;\n              break;\n            case 1:\n              sortType = SortField.Type.LONG;\n              break;\n            case 2:\n              sortType = SortField.Type.INT;\n              break;\n            case 3:\n              sortType = SortField.Type.DOUBLE;\n              break;\n            case 4:\n              sortType = SortField.Type.FLOAT;\n              break;\n            case 5:\n              sortType = SortField.Type.STRING;\n              byte selector = input.readByte();\n              if (selector == 0) {\n                sortedSetSelector = SortedSetSelector.Type.MIN;\n              } else if (selector == 1) {\n                sortedSetSelector = SortedSetSelector.Type.MAX;\n              } else if (selector == 2) {\n                sortedSetSelector = SortedSetSelector.Type.MIDDLE_MIN;\n              } else if (selector == 3) {\n                sortedSetSelector = SortedSetSelector.Type.MIDDLE_MAX;\n              } else {\n                throw new CorruptIndexException(\"invalid index SortedSetSelector ID: \" + selector, input);\n              }\n              break;\n            case 6:\n              byte type = input.readByte();\n              if (type == 0) {\n                sortType = SortField.Type.LONG;\n              } else if (type == 1) {\n                sortType = SortField.Type.INT;\n              } else if (type == 2) {\n                sortType = SortField.Type.DOUBLE;\n              } else if (type == 3) {\n                sortType = SortField.Type.FLOAT;\n              } else {\n                throw new CorruptIndexException(\"invalid index SortedNumericSortField type ID: \" + type, input);\n              }\n              byte numericSelector = input.readByte();\n              if (numericSelector == 0) {\n                sortedNumericSelector = SortedNumericSelector.Type.MIN;\n              } else if (numericSelector == 1) {\n                sortedNumericSelector = SortedNumericSelector.Type.MAX;\n              } else {\n                throw new CorruptIndexException(\"invalid index SortedNumericSelector ID: \" + numericSelector, input);\n              }\n              break;\n            default:\n              throw new CorruptIndexException(\"invalid index sort field type ID: \" + sortTypeID, input);\n            }\n            byte b = input.readByte();\n            boolean reverse;\n            if (b == 0) {\n              reverse = true;\n            } else if (b == 1) {\n              reverse = false;\n            } else {\n              throw new CorruptIndexException(\"invalid index sort reverse: \" + b, input);\n            }\n\n            if (sortedSetSelector != null) {\n              sortFields[i] = new SortedSetSortField(fieldName, reverse, sortedSetSelector);\n            } else if (sortedNumericSelector != null) {\n              sortFields[i] = new SortedNumericSortField(fieldName, sortType, reverse, sortedNumericSelector);\n            } else {\n              sortFields[i] = new SortField(fieldName, sortType, reverse);\n            }\n\n            Object missingValue;\n            b = input.readByte();\n            if (b == 0) {\n              missingValue = null;\n            } else {\n              switch(sortType) {\n              case STRING:\n                if (b == 1) {\n                  missingValue = SortField.STRING_LAST;\n                } else if (b == 2) {\n                  missingValue = SortField.STRING_FIRST;\n                } else {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                break;\n              case LONG:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = input.readLong();\n                break;\n              case INT:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = input.readInt();\n                break;\n              case DOUBLE:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = Double.longBitsToDouble(input.readLong());\n                break;\n              case FLOAT:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = Float.intBitsToFloat(input.readInt());\n                break;\n              default:\n                throw new AssertionError(\"unhandled sortType=\" + sortType);\n              }\n            }\n            if (missingValue != null) {\n              sortFields[i].setMissingValue(missingValue);\n            }\n          }\n          indexSort = new Sort(sortFields);\n        } else if (numSortFields < 0) {\n          throw new CorruptIndexException(\"invalid index sort field count: \" + numSortFields, input);\n        } else {\n          indexSort = null;\n        }\n\n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, segmentID, attributes, indexSort);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0e7448656541edc407546460641f47950451b16","date":1519150500,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene62/Lucene62SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene62SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        int format = CodecUtil.checkIndexHeader(input, Lucene62SegmentInfoFormat.CODEC_NAME,\n                                                Lucene62SegmentInfoFormat.VERSION_START,\n                                                Lucene62SegmentInfoFormat.VERSION_CURRENT,\n                                                segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n\n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n        final Map<String,String> diagnostics = input.readMapOfStrings();\n        final Set<String> files = input.readSetOfStrings();\n        final Map<String,String> attributes = input.readMapOfStrings();\n\n        int numSortFields = input.readVInt();\n        Sort indexSort;\n        if (numSortFields > 0) {\n          SortField[] sortFields = new SortField[numSortFields];\n          for(int i=0;i<numSortFields;i++) {\n            String fieldName = input.readString();\n            int sortTypeID = input.readVInt();\n            SortField.Type sortType;\n            SortedSetSelector.Type sortedSetSelector = null;\n            SortedNumericSelector.Type sortedNumericSelector = null;\n            switch(sortTypeID) {\n            case 0:\n              sortType = SortField.Type.STRING;\n              break;\n            case 1:\n              sortType = SortField.Type.LONG;\n              break;\n            case 2:\n              sortType = SortField.Type.INT;\n              break;\n            case 3:\n              sortType = SortField.Type.DOUBLE;\n              break;\n            case 4:\n              sortType = SortField.Type.FLOAT;\n              break;\n            case 5:\n              sortType = SortField.Type.STRING;\n              byte selector = input.readByte();\n              if (selector == 0) {\n                sortedSetSelector = SortedSetSelector.Type.MIN;\n              } else if (selector == 1) {\n                sortedSetSelector = SortedSetSelector.Type.MAX;\n              } else if (selector == 2) {\n                sortedSetSelector = SortedSetSelector.Type.MIDDLE_MIN;\n              } else if (selector == 3) {\n                sortedSetSelector = SortedSetSelector.Type.MIDDLE_MAX;\n              } else {\n                throw new CorruptIndexException(\"invalid index SortedSetSelector ID: \" + selector, input);\n              }\n              break;\n            case 6:\n              byte type = input.readByte();\n              if (type == 0) {\n                sortType = SortField.Type.LONG;\n              } else if (type == 1) {\n                sortType = SortField.Type.INT;\n              } else if (type == 2) {\n                sortType = SortField.Type.DOUBLE;\n              } else if (type == 3) {\n                sortType = SortField.Type.FLOAT;\n              } else {\n                throw new CorruptIndexException(\"invalid index SortedNumericSortField type ID: \" + type, input);\n              }\n              byte numericSelector = input.readByte();\n              if (numericSelector == 0) {\n                sortedNumericSelector = SortedNumericSelector.Type.MIN;\n              } else if (numericSelector == 1) {\n                sortedNumericSelector = SortedNumericSelector.Type.MAX;\n              } else {\n                throw new CorruptIndexException(\"invalid index SortedNumericSelector ID: \" + numericSelector, input);\n              }\n              break;\n            default:\n              throw new CorruptIndexException(\"invalid index sort field type ID: \" + sortTypeID, input);\n            }\n            byte b = input.readByte();\n            boolean reverse;\n            if (b == 0) {\n              reverse = true;\n            } else if (b == 1) {\n              reverse = false;\n            } else {\n              throw new CorruptIndexException(\"invalid index sort reverse: \" + b, input);\n            }\n\n            if (sortedSetSelector != null) {\n              sortFields[i] = new SortedSetSortField(fieldName, reverse, sortedSetSelector);\n            } else if (sortedNumericSelector != null) {\n              sortFields[i] = new SortedNumericSortField(fieldName, sortType, reverse, sortedNumericSelector);\n            } else {\n              sortFields[i] = new SortField(fieldName, sortType, reverse);\n            }\n\n            Object missingValue;\n            b = input.readByte();\n            if (b == 0) {\n              missingValue = null;\n            } else {\n              switch(sortType) {\n              case STRING:\n                if (b == 1) {\n                  missingValue = SortField.STRING_LAST;\n                } else if (b == 2) {\n                  missingValue = SortField.STRING_FIRST;\n                } else {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                break;\n              case LONG:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = input.readLong();\n                break;\n              case INT:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = input.readInt();\n                break;\n              case DOUBLE:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = Double.longBitsToDouble(input.readLong());\n                break;\n              case FLOAT:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = Float.intBitsToFloat(input.readInt());\n                break;\n              default:\n                throw new AssertionError(\"unhandled sortType=\" + sortType);\n              }\n            }\n            if (missingValue != null) {\n              sortFields[i].setMissingValue(missingValue);\n            }\n          }\n          indexSort = new Sort(sortFields);\n        } else if (numSortFields < 0) {\n          throw new CorruptIndexException(\"invalid index sort field count: \" + numSortFields, input);\n        } else {\n          indexSort = null;\n        }\n\n        si = new SegmentInfo(dir, version, null, segment, docCount, isCompoundFile, null, diagnostics, segmentID, attributes, indexSort);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0e7448656541edc407546460641f47950451b16":["31741cf1390044e38a2ec3127cf302ba841bfd75"],"45bfb4d30b7e62ec7d645a5e0113362636ac4981":["fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8"],"e065cebbdee472a02bde38052717a8cd7ee8ab3b":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"0ad30c6a479e764150a3316e57263319775f1df2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3d33e731a93d4b57e662ff094f64f94a745422d4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d470c8182e92b264680e34081b75e70a9f2b3c89"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["e065cebbdee472a02bde38052717a8cd7ee8ab3b"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ad30c6a479e764150a3316e57263319775f1df2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e065cebbdee472a02bde38052717a8cd7ee8ab3b"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":["e065cebbdee472a02bde38052717a8cd7ee8ab3b"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","45bfb4d30b7e62ec7d645a5e0113362636ac4981"],"fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c0e7448656541edc407546460641f47950451b16"]},"commit2Childs":{"c0e7448656541edc407546460641f47950451b16":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"45bfb4d30b7e62ec7d645a5e0113362636ac4981":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"e065cebbdee472a02bde38052717a8cd7ee8ab3b":["31741cf1390044e38a2ec3127cf302ba841bfd75","a1ef55e1fff7ff44354432770ad8bc19be1fcc75","92212fd254551a0b1156aafc3a1a6ed1a43932ad"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["c0e7448656541edc407546460641f47950451b16"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["e065cebbdee472a02bde38052717a8cd7ee8ab3b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","3d33e731a93d4b57e662ff094f64f94a745422d4","fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":[],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8":["45bfb4d30b7e62ec7d645a5e0113362636ac4981"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","92212fd254551a0b1156aafc3a1a6ed1a43932ad","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}