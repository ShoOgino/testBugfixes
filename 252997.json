{"path":"solr/core/src/java/org/apache/solr/handler/sql/SolrFilter.Translator#translateBinary(String,String,RexCall).mjava","commits":[{"id":"d984627825732e682759c22df7a3b171a80f3812","date":1461857653,"type":0,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrFilter.Translator#translateBinary(String,String,RexCall).mjava","pathOld":"/dev/null","sourceNew":"    /** Translates a call to a binary operator, reversing arguments if necessary. */\n    private String translateBinary(String op, String rop, RexCall call) {\n      final RexNode left = call.operands.get(0);\n      final RexNode right = call.operands.get(1);\n      String b = translateBinary2(op, left, right);\n      if (b != null) {\n        return b;\n      }\n      b = translateBinary2(rop, right, left);\n      if (b != null) {\n        return b;\n      }\n      throw new AssertionError(\"cannot translate op \" + op + \" call \" + call);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1bfdd692c5b78fe01e8f90339fb1edbcc887a90","date":1461958396,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrFilter.Translator#translateBinary(String,String,RexCall).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrFilter.Translator#translateBinary(String,String,RexCall).mjava","sourceNew":"    /** Translates a call to a binary operator, reversing arguments if necessary. */\n    private String translateBinary(String op, String rop, RexCall call) {\n      if(call.operands.size() != 2) {\n        throw new AssertionError(\"hello\");\n      }\n      final RexNode left = call.operands.get(0);\n      final RexNode right = call.operands.get(1);\n      String b = translateBinary2(op, left, right);\n      if (b != null) {\n        return b;\n      }\n      b = translateBinary2(rop, right, left);\n      if (b != null) {\n        return b;\n      }\n      throw new AssertionError(\"cannot translate op \" + op + \" call \" + call);\n    }\n\n","sourceOld":"    /** Translates a call to a binary operator, reversing arguments if necessary. */\n    private String translateBinary(String op, String rop, RexCall call) {\n      final RexNode left = call.operands.get(0);\n      final RexNode right = call.operands.get(1);\n      String b = translateBinary2(op, left, right);\n      if (b != null) {\n        return b;\n      }\n      b = translateBinary2(rop, right, left);\n      if (b != null) {\n        return b;\n      }\n      throw new AssertionError(\"cannot translate op \" + op + \" call \" + call);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef","date":1462373155,"type":4,"author":"Kevin Risden","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrFilter.Translator#translateBinary(String,String,RexCall).mjava","sourceNew":null,"sourceOld":"    /** Translates a call to a binary operator, reversing arguments if necessary. */\n    private String translateBinary(String op, String rop, RexCall call) {\n      if(call.operands.size() != 2) {\n        throw new AssertionError(\"hello\");\n      }\n      final RexNode left = call.operands.get(0);\n      final RexNode right = call.operands.get(1);\n      String b = translateBinary2(op, left, right);\n      if (b != null) {\n        return b;\n      }\n      b = translateBinary2(rop, right, left);\n      if (b != null) {\n        return b;\n      }\n      throw new AssertionError(\"cannot translate op \" + op + \" call \" + call);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d984627825732e682759c22df7a3b171a80f3812":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c1bfdd692c5b78fe01e8f90339fb1edbcc887a90":["d984627825732e682759c22df7a3b171a80f3812"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef":["c1bfdd692c5b78fe01e8f90339fb1edbcc887a90"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d984627825732e682759c22df7a3b171a80f3812":["c1bfdd692c5b78fe01e8f90339fb1edbcc887a90"],"c1bfdd692c5b78fe01e8f90339fb1edbcc887a90":["724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d984627825732e682759c22df7a3b171a80f3812","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}