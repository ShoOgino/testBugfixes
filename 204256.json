{"path":"lucene/core/src/java/org/apache/lucene/search/CachingWrapperFilter#docIdSetToCache(DocIdSet,AtomicReader).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/CachingWrapperFilter#docIdSetToCache(DocIdSet,AtomicReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#docIdSetToCache(DocIdSet,AtomicReader).mjava","sourceNew":"  /** Provide the DocIdSet to be cached, using the DocIdSet provided\n   *  by the wrapped Filter.\n   *  <p>This implementation returns the given {@link DocIdSet}, if {@link DocIdSet#isCacheable}\n   *  returns <code>true</code>, else it copies the {@link DocIdSetIterator} into\n   *  a {@link FixedBitSet}.\n   */\n  protected DocIdSet docIdSetToCache(DocIdSet docIdSet, AtomicReader reader) throws IOException {\n    if (docIdSet == null) {\n      // this is better than returning null, as the nonnull result can be cached\n      return DocIdSet.EMPTY_DOCIDSET;\n    } else if (docIdSet.isCacheable()) {\n      return docIdSet;\n    } else {\n      final DocIdSetIterator it = docIdSet.iterator();\n      // null is allowed to be returned by iterator(),\n      // in this case we wrap with the empty set,\n      // which is cacheable.\n      if (it == null) {\n        return DocIdSet.EMPTY_DOCIDSET;\n      } else {\n        final FixedBitSet bits = new FixedBitSet(reader.maxDoc());\n        bits.or(it);\n        return bits;\n      }\n    }\n  }\n\n","sourceOld":"  /** Provide the DocIdSet to be cached, using the DocIdSet provided\n   *  by the wrapped Filter.\n   *  <p>This implementation returns the given {@link DocIdSet}, if {@link DocIdSet#isCacheable}\n   *  returns <code>true</code>, else it copies the {@link DocIdSetIterator} into\n   *  a {@link FixedBitSet}.\n   */\n  protected DocIdSet docIdSetToCache(DocIdSet docIdSet, AtomicReader reader) throws IOException {\n    if (docIdSet == null) {\n      // this is better than returning null, as the nonnull result can be cached\n      return DocIdSet.EMPTY_DOCIDSET;\n    } else if (docIdSet.isCacheable()) {\n      return docIdSet;\n    } else {\n      final DocIdSetIterator it = docIdSet.iterator();\n      // null is allowed to be returned by iterator(),\n      // in this case we wrap with the empty set,\n      // which is cacheable.\n      if (it == null) {\n        return DocIdSet.EMPTY_DOCIDSET;\n      } else {\n        final FixedBitSet bits = new FixedBitSet(reader.maxDoc());\n        bits.or(it);\n        return bits;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc06632ede7e48a5ddc6917badec25c8336feedc","date":1366983006,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/CachingWrapperFilter#docIdSetToCache(DocIdSet,AtomicReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/CachingWrapperFilter#docIdSetToCache(DocIdSet,AtomicReader).mjava","sourceNew":"  /** \n   *  Provide the DocIdSet to be cached, using the DocIdSet provided\n   *  by the wrapped Filter. <p>This implementation returns the given {@link DocIdSet},\n   *  if {@link DocIdSet#isCacheable} returns <code>true</code>, else it copies the \n   *  {@link DocIdSetIterator} into a {@link FixedBitSet}.\n   *  <p>Note: This method returns {@linkplain #EMPTY_DOCIDSET} if the given docIdSet\n   *  is <code>null</code> or if {@link DocIdSet#iterator()} return <code>null</code>. The empty\n   *  instance is use as a placeholder in the cache instead of the <code>null</code> value.\n   */\n  protected DocIdSet docIdSetToCache(DocIdSet docIdSet, AtomicReader reader) throws IOException {\n    if (docIdSet == null) {\n      // this is better than returning null, as the nonnull result can be cached\n      return EMPTY_DOCIDSET;\n    } else if (docIdSet.isCacheable()) {\n      return docIdSet;\n    } else {\n      final DocIdSetIterator it = docIdSet.iterator();\n      // null is allowed to be returned by iterator(),\n      // in this case we wrap with the sentinel set,\n      // which is cacheable.\n      if (it == null) {\n        return EMPTY_DOCIDSET;\n      } else {\n        final FixedBitSet bits = new FixedBitSet(reader.maxDoc());\n        bits.or(it);\n        return bits;\n      }\n    }\n  }\n\n","sourceOld":"  /** Provide the DocIdSet to be cached, using the DocIdSet provided\n   *  by the wrapped Filter.\n   *  <p>This implementation returns the given {@link DocIdSet}, if {@link DocIdSet#isCacheable}\n   *  returns <code>true</code>, else it copies the {@link DocIdSetIterator} into\n   *  a {@link FixedBitSet}.\n   */\n  protected DocIdSet docIdSetToCache(DocIdSet docIdSet, AtomicReader reader) throws IOException {\n    if (docIdSet == null) {\n      // this is better than returning null, as the nonnull result can be cached\n      return DocIdSet.EMPTY_DOCIDSET;\n    } else if (docIdSet.isCacheable()) {\n      return docIdSet;\n    } else {\n      final DocIdSetIterator it = docIdSet.iterator();\n      // null is allowed to be returned by iterator(),\n      // in this case we wrap with the empty set,\n      // which is cacheable.\n      if (it == null) {\n        return DocIdSet.EMPTY_DOCIDSET;\n      } else {\n        final FixedBitSet bits = new FixedBitSet(reader.maxDoc());\n        bits.or(it);\n        return bits;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"49a8cbd66bc94e18d7b9087e42dbc6cc0ee0c161","date":1378462032,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/CachingWrapperFilter#docIdSetToCache(DocIdSet,AtomicReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/CachingWrapperFilter#docIdSetToCache(DocIdSet,AtomicReader).mjava","sourceNew":"  /** \n   *  Provide the DocIdSet to be cached, using the DocIdSet provided\n   *  by the wrapped Filter. <p>This implementation returns the given {@link DocIdSet},\n   *  if {@link DocIdSet#isCacheable} returns <code>true</code>, else it calls\n   *  {@link #cacheImpl(DocIdSetIterator,AtomicReader)}\n   *  <p>Note: This method returns {@linkplain #EMPTY_DOCIDSET} if the given docIdSet\n   *  is <code>null</code> or if {@link DocIdSet#iterator()} return <code>null</code>. The empty\n   *  instance is use as a placeholder in the cache instead of the <code>null</code> value.\n   */\n  protected DocIdSet docIdSetToCache(DocIdSet docIdSet, AtomicReader reader) throws IOException {\n    if (docIdSet == null) {\n      // this is better than returning null, as the nonnull result can be cached\n      return EMPTY_DOCIDSET;\n    } else if (docIdSet.isCacheable()) {\n      return docIdSet;\n    } else {\n      final DocIdSetIterator it = docIdSet.iterator();\n      // null is allowed to be returned by iterator(),\n      // in this case we wrap with the sentinel set,\n      // which is cacheable.\n      if (it == null) {\n        return EMPTY_DOCIDSET;\n      } else {\n        return cacheImpl(it, reader);\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   *  Provide the DocIdSet to be cached, using the DocIdSet provided\n   *  by the wrapped Filter. <p>This implementation returns the given {@link DocIdSet},\n   *  if {@link DocIdSet#isCacheable} returns <code>true</code>, else it copies the \n   *  {@link DocIdSetIterator} into a {@link FixedBitSet}.\n   *  <p>Note: This method returns {@linkplain #EMPTY_DOCIDSET} if the given docIdSet\n   *  is <code>null</code> or if {@link DocIdSet#iterator()} return <code>null</code>. The empty\n   *  instance is use as a placeholder in the cache instead of the <code>null</code> value.\n   */\n  protected DocIdSet docIdSetToCache(DocIdSet docIdSet, AtomicReader reader) throws IOException {\n    if (docIdSet == null) {\n      // this is better than returning null, as the nonnull result can be cached\n      return EMPTY_DOCIDSET;\n    } else if (docIdSet.isCacheable()) {\n      return docIdSet;\n    } else {\n      final DocIdSetIterator it = docIdSet.iterator();\n      // null is allowed to be returned by iterator(),\n      // in this case we wrap with the sentinel set,\n      // which is cacheable.\n      if (it == null) {\n        return EMPTY_DOCIDSET;\n      } else {\n        final FixedBitSet bits = new FixedBitSet(reader.maxDoc());\n        bits.or(it);\n        return bits;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ea8c8c94ae9da9a366175e2abbe1dde3aa0453","date":1402659583,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/CachingWrapperFilter#docIdSetToCache(DocIdSet,AtomicReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/CachingWrapperFilter#docIdSetToCache(DocIdSet,AtomicReader).mjava","sourceNew":"  /** \n   *  Provide the DocIdSet to be cached, using the DocIdSet provided\n   *  by the wrapped Filter. <p>This implementation returns the given {@link DocIdSet},\n   *  if {@link DocIdSet#isCacheable} returns <code>true</code>, else it calls\n   *  {@link #cacheImpl(DocIdSetIterator,AtomicReader)}\n   *  <p>Note: This method returns {@linkplain DocIdSet#EMPTY} if the given docIdSet\n   *  is <code>null</code> or if {@link DocIdSet#iterator()} return <code>null</code>. The empty\n   *  instance is use as a placeholder in the cache instead of the <code>null</code> value.\n   */\n  protected DocIdSet docIdSetToCache(DocIdSet docIdSet, AtomicReader reader) throws IOException {\n    if (docIdSet == null) {\n      // this is better than returning null, as the nonnull result can be cached\n      return EMPTY;\n    } else if (docIdSet.isCacheable()) {\n      return docIdSet;\n    } else {\n      final DocIdSetIterator it = docIdSet.iterator();\n      // null is allowed to be returned by iterator(),\n      // in this case we wrap with the sentinel set,\n      // which is cacheable.\n      if (it == null) {\n        return EMPTY;\n      } else {\n        return cacheImpl(it, reader);\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   *  Provide the DocIdSet to be cached, using the DocIdSet provided\n   *  by the wrapped Filter. <p>This implementation returns the given {@link DocIdSet},\n   *  if {@link DocIdSet#isCacheable} returns <code>true</code>, else it calls\n   *  {@link #cacheImpl(DocIdSetIterator,AtomicReader)}\n   *  <p>Note: This method returns {@linkplain #EMPTY_DOCIDSET} if the given docIdSet\n   *  is <code>null</code> or if {@link DocIdSet#iterator()} return <code>null</code>. The empty\n   *  instance is use as a placeholder in the cache instead of the <code>null</code> value.\n   */\n  protected DocIdSet docIdSetToCache(DocIdSet docIdSet, AtomicReader reader) throws IOException {\n    if (docIdSet == null) {\n      // this is better than returning null, as the nonnull result can be cached\n      return EMPTY_DOCIDSET;\n    } else if (docIdSet.isCacheable()) {\n      return docIdSet;\n    } else {\n      final DocIdSetIterator it = docIdSet.iterator();\n      // null is allowed to be returned by iterator(),\n      // in this case we wrap with the sentinel set,\n      // which is cacheable.\n      if (it == null) {\n        return EMPTY_DOCIDSET;\n      } else {\n        return cacheImpl(it, reader);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/CachingWrapperFilter#docIdSetToCache(DocIdSet,AtomicReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/CachingWrapperFilter#docIdSetToCache(DocIdSet,AtomicReader).mjava","sourceNew":"  /** \n   *  Provide the DocIdSet to be cached, using the DocIdSet provided\n   *  by the wrapped Filter. <p>This implementation returns the given {@link DocIdSet},\n   *  if {@link DocIdSet#isCacheable} returns <code>true</code>, else it calls\n   *  {@link #cacheImpl(DocIdSetIterator,AtomicReader)}\n   *  <p>Note: This method returns {@linkplain DocIdSet#EMPTY} if the given docIdSet\n   *  is <code>null</code> or if {@link DocIdSet#iterator()} return <code>null</code>. The empty\n   *  instance is use as a placeholder in the cache instead of the <code>null</code> value.\n   */\n  protected DocIdSet docIdSetToCache(DocIdSet docIdSet, AtomicReader reader) throws IOException {\n    if (docIdSet == null) {\n      // this is better than returning null, as the nonnull result can be cached\n      return EMPTY;\n    } else if (docIdSet.isCacheable()) {\n      return docIdSet;\n    } else {\n      final DocIdSetIterator it = docIdSet.iterator();\n      // null is allowed to be returned by iterator(),\n      // in this case we wrap with the sentinel set,\n      // which is cacheable.\n      if (it == null) {\n        return EMPTY;\n      } else {\n        return cacheImpl(it, reader);\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   *  Provide the DocIdSet to be cached, using the DocIdSet provided\n   *  by the wrapped Filter. <p>This implementation returns the given {@link DocIdSet},\n   *  if {@link DocIdSet#isCacheable} returns <code>true</code>, else it calls\n   *  {@link #cacheImpl(DocIdSetIterator,AtomicReader)}\n   *  <p>Note: This method returns {@linkplain #EMPTY_DOCIDSET} if the given docIdSet\n   *  is <code>null</code> or if {@link DocIdSet#iterator()} return <code>null</code>. The empty\n   *  instance is use as a placeholder in the cache instead of the <code>null</code> value.\n   */\n  protected DocIdSet docIdSetToCache(DocIdSet docIdSet, AtomicReader reader) throws IOException {\n    if (docIdSet == null) {\n      // this is better than returning null, as the nonnull result can be cached\n      return EMPTY_DOCIDSET;\n    } else if (docIdSet.isCacheable()) {\n      return docIdSet;\n    } else {\n      final DocIdSetIterator it = docIdSet.iterator();\n      // null is allowed to be returned by iterator(),\n      // in this case we wrap with the sentinel set,\n      // which is cacheable.\n      if (it == null) {\n        return EMPTY_DOCIDSET;\n      } else {\n        return cacheImpl(it, reader);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/CachingWrapperFilter#docIdSetToCache(DocIdSet,AtomicReader).mjava","sourceNew":null,"sourceOld":"  /** \n   *  Provide the DocIdSet to be cached, using the DocIdSet provided\n   *  by the wrapped Filter. <p>This implementation returns the given {@link DocIdSet},\n   *  if {@link DocIdSet#isCacheable} returns <code>true</code>, else it calls\n   *  {@link #cacheImpl(DocIdSetIterator,AtomicReader)}\n   *  <p>Note: This method returns {@linkplain DocIdSet#EMPTY} if the given docIdSet\n   *  is <code>null</code> or if {@link DocIdSet#iterator()} return <code>null</code>. The empty\n   *  instance is use as a placeholder in the cache instead of the <code>null</code> value.\n   */\n  protected DocIdSet docIdSetToCache(DocIdSet docIdSet, AtomicReader reader) throws IOException {\n    if (docIdSet == null) {\n      // this is better than returning null, as the nonnull result can be cached\n      return EMPTY;\n    } else if (docIdSet.isCacheable()) {\n      return docIdSet;\n    } else {\n      final DocIdSetIterator it = docIdSet.iterator();\n      // null is allowed to be returned by iterator(),\n      // in this case we wrap with the sentinel set,\n      // which is cacheable.\n      if (it == null) {\n        return EMPTY;\n      } else {\n        return cacheImpl(it, reader);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dc06632ede7e48a5ddc6917badec25c8336feedc":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"54ea8c8c94ae9da9a366175e2abbe1dde3aa0453":["49a8cbd66bc94e18d7b9087e42dbc6cc0ee0c161"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"49a8cbd66bc94e18d7b9087e42dbc6cc0ee0c161":["dc06632ede7e48a5ddc6917badec25c8336feedc"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["49a8cbd66bc94e18d7b9087e42dbc6cc0ee0c161","54ea8c8c94ae9da9a366175e2abbe1dde3aa0453"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["54ea8c8c94ae9da9a366175e2abbe1dde3aa0453"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"dc06632ede7e48a5ddc6917badec25c8336feedc":["49a8cbd66bc94e18d7b9087e42dbc6cc0ee0c161"],"54ea8c8c94ae9da9a366175e2abbe1dde3aa0453":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["dc06632ede7e48a5ddc6917badec25c8336feedc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"49a8cbd66bc94e18d7b9087e42dbc6cc0ee0c161":["54ea8c8c94ae9da9a366175e2abbe1dde3aa0453","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}