{"path":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPath.SegmentEndpoint#SegmentEndpoint(GeoPoint,SidedPlane,GeoPoint,GeoPoint).mjava","commits":[{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPath.SegmentEndpoint#SegmentEndpoint(GeoPoint,SidedPlane,GeoPoint,GeoPoint).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath.SegmentEndpoint#SegmentEndpoint(GeoPoint,SidedPlane,GeoPoint,GeoPoint).mjava","sourceNew":"    /** Constructor for case (2).\n     * Generate an endpoint, given a single cutoff plane plus upper and lower edge points.\n     */\n    public SegmentEndpoint(final GeoPoint point,\n      final SidedPlane cutoffPlane, final GeoPoint topEdgePoint, final GeoPoint bottomEdgePoint) {\n      this.point = point;\n      this.cutoffPlanes = new Membership[]{new SidedPlane(cutoffPlane)};\n      this.notablePoints = new GeoPoint[]{topEdgePoint, bottomEdgePoint};\n      // To construct the plane, we now just need D, which is simply the negative of the evaluation of the circle normal vector at one of the points.\n      this.circlePlane = SidedPlane.constructNormalizedPerpendicularSidedPlane(point, cutoffPlane, topEdgePoint, bottomEdgePoint);\n    }\n\n","sourceOld":"    /** Constructor for case (2).\n     * Generate an endpoint, given a single cutoff plane plus upper and lower edge points.\n     */\n    public SegmentEndpoint(final GeoPoint point,\n      final SidedPlane cutoffPlane, final GeoPoint topEdgePoint, final GeoPoint bottomEdgePoint) {\n      this.point = point;\n      this.cutoffPlanes = new Membership[]{new SidedPlane(cutoffPlane)};\n      this.notablePoints = new GeoPoint[]{topEdgePoint, bottomEdgePoint};\n      // To construct the plane, we now just need D, which is simply the negative of the evaluation of the circle normal vector at one of the points.\n      this.circlePlane = SidedPlane.constructNormalizedPerpendicularSidedPlane(point, cutoffPlane, topEdgePoint, bottomEdgePoint);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71849bd31d150133a9a1027bf1607967b406c57","date":1436811056,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPath.SegmentEndpoint#SegmentEndpoint(GeoPoint,SidedPlane,GeoPoint,GeoPoint).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPath.SegmentEndpoint#SegmentEndpoint(GeoPoint,SidedPlane,GeoPoint,GeoPoint).mjava","sourceNew":"    /** Constructor for case (2).\n     * Generate an endpoint, given a single cutoff plane plus upper and lower edge points.\n     *@param point is the center point.\n     *@param cutoffPlane is the plane from the adjoining path segment marking the boundary between this endpoint and that segment.\n     *@param topEdgePoint is a point on the cutoffPlane that should be also on the circle plane.\n     *@param bottomEdgePoint is another point on the cutoffPlane that should be also on the circle plane.\n     */\n    public SegmentEndpoint(final GeoPoint point,\n      final SidedPlane cutoffPlane, final GeoPoint topEdgePoint, final GeoPoint bottomEdgePoint) {\n      this.point = point;\n      this.cutoffPlanes = new Membership[]{new SidedPlane(cutoffPlane)};\n      this.notablePoints = new GeoPoint[]{topEdgePoint, bottomEdgePoint};\n      // To construct the plane, we now just need D, which is simply the negative of the evaluation of the circle normal vector at one of the points.\n      this.circlePlane = SidedPlane.constructNormalizedPerpendicularSidedPlane(point, cutoffPlane, topEdgePoint, bottomEdgePoint);\n    }\n\n","sourceOld":"    /** Constructor for case (2).\n     * Generate an endpoint, given a single cutoff plane plus upper and lower edge points.\n     */\n    public SegmentEndpoint(final GeoPoint point,\n      final SidedPlane cutoffPlane, final GeoPoint topEdgePoint, final GeoPoint bottomEdgePoint) {\n      this.point = point;\n      this.cutoffPlanes = new Membership[]{new SidedPlane(cutoffPlane)};\n      this.notablePoints = new GeoPoint[]{topEdgePoint, bottomEdgePoint};\n      // To construct the plane, we now just need D, which is simply the negative of the evaluation of the circle normal vector at one of the points.\n      this.circlePlane = SidedPlane.constructNormalizedPerpendicularSidedPlane(point, cutoffPlane, topEdgePoint, bottomEdgePoint);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPath.SegmentEndpoint#SegmentEndpoint(GeoPoint,SidedPlane,GeoPoint,GeoPoint).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPath.SegmentEndpoint#SegmentEndpoint(GeoPoint,SidedPlane,GeoPoint,GeoPoint).mjava","sourceNew":"    /** Constructor for case (2).\n     * Generate an endpoint, given a single cutoff plane plus upper and lower edge points.\n     *@param point is the center point.\n     *@param cutoffPlane is the plane from the adjoining path segment marking the boundary between this endpoint and that segment.\n     *@param topEdgePoint is a point on the cutoffPlane that should be also on the circle plane.\n     *@param bottomEdgePoint is another point on the cutoffPlane that should be also on the circle plane.\n     */\n    public SegmentEndpoint(final GeoPoint point,\n      final SidedPlane cutoffPlane, final GeoPoint topEdgePoint, final GeoPoint bottomEdgePoint) {\n      this.point = point;\n      this.cutoffPlanes = new Membership[]{new SidedPlane(cutoffPlane)};\n      this.notablePoints = new GeoPoint[]{topEdgePoint, bottomEdgePoint};\n      // To construct the plane, we now just need D, which is simply the negative of the evaluation of the circle normal vector at one of the points.\n      this.circlePlane = SidedPlane.constructNormalizedPerpendicularSidedPlane(point, cutoffPlane, topEdgePoint, bottomEdgePoint);\n    }\n\n","sourceOld":"    /** Constructor for case (2).\n     * Generate an endpoint, given a single cutoff plane plus upper and lower edge points.\n     *@param point is the center point.\n     *@param cutoffPlane is the plane from the adjoining path segment marking the boundary between this endpoint and that segment.\n     *@param topEdgePoint is a point on the cutoffPlane that should be also on the circle plane.\n     *@param bottomEdgePoint is another point on the cutoffPlane that should be also on the circle plane.\n     */\n    public SegmentEndpoint(final GeoPoint point,\n      final SidedPlane cutoffPlane, final GeoPoint topEdgePoint, final GeoPoint bottomEdgePoint) {\n      this.point = point;\n      this.cutoffPlanes = new Membership[]{new SidedPlane(cutoffPlane)};\n      this.notablePoints = new GeoPoint[]{topEdgePoint, bottomEdgePoint};\n      // To construct the plane, we now just need D, which is simply the negative of the evaluation of the circle normal vector at one of the points.\n      this.circlePlane = SidedPlane.constructNormalizedPerpendicularSidedPlane(point, cutoffPlane, topEdgePoint, bottomEdgePoint);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a71849bd31d150133a9a1027bf1607967b406c57":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3022be5842502b7c2a57a5124199bbc30236f0a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b4e444678504caf66a8060b1d514383aa4feac0c":["a71849bd31d150133a9a1027bf1607967b406c57"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4e444678504caf66a8060b1d514383aa4feac0c"]},"commit2Childs":{"a71849bd31d150133a9a1027bf1607967b406c57":["b4e444678504caf66a8060b1d514383aa4feac0c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["a71849bd31d150133a9a1027bf1607967b406c57"],"b4e444678504caf66a8060b1d514383aa4feac0c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}