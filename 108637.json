{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/en/KStemmer#plural().mjava","commits":[{"id":"f3517d617f8b4502b5cca1a57e228d54bda3dd0f","date":1307019502,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/en/KStemmer#plural().mjava","pathOld":"/dev/null","sourceNew":"  /* Convert plurals to singular form, and '-ies' to 'y' */\n  private void plural() {\n    if (word.charAt(k) == 's') {\n      if (endsIn('i', 'e', 's')) {\n        word.setLength(j + 3);\n        k--;\n        if (lookup()) /* ensure calories -> calorie */\n        return;\n        k++;\n        word.unsafeWrite('s');\n        setSuffix(\"y\");\n        lookup();\n      } else if (endsIn('e', 's')) {\n        /* try just removing the \"s\" */\n        word.setLength(j + 2);\n        k--;\n        \n        /*\n         * note: don't check for exceptions here. So, `aides' -> `aide', but\n         * `aided' -> `aid'. The exception for double s is used to prevent\n         * crosses -> crosse. This is actually correct if crosses is a plural\n         * noun (a type of racket used in lacrosse), but the verb is much more\n         * common\n         */\n\n        /****\n         * YCS: this was the one place where lookup was not followed by return.\n         * So restructure it. if ((j>0)&&(lookup(word.toString())) &&\n         * !((word.charAt(j) == 's') && (word.charAt(j-1) == 's'))) return;\n         *****/\n        boolean tryE = j > 0\n            && !((word.charAt(j) == 's') && (word.charAt(j - 1) == 's'));\n        if (tryE && lookup()) return;\n        \n        /* try removing the \"es\" */\n\n        word.setLength(j + 1);\n        k--;\n        if (lookup()) return;\n        \n        /* the default is to retain the \"e\" */\n        word.unsafeWrite('e');\n        k++;\n        \n        if (!tryE) lookup(); // if we didn't try the \"e\" ending before\n        return;\n      } else {\n        if (word.length() > 3 && penultChar() != 's' && !endsIn('o', 'u', 's')) {\n          /* unless the word ends in \"ous\" or a double \"s\", remove the final \"s\" */\n\n          word.setLength(k);\n          k--;\n          lookup();\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d62f5453a200cec2cbb60148de159dbf55591e9d","date":1307049300,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/en/KStemmer#plural().mjava","pathOld":"/dev/null","sourceNew":"  /* Convert plurals to singular form, and '-ies' to 'y' */\n  private void plural() {\n    if (word.charAt(k) == 's') {\n      if (endsIn('i', 'e', 's')) {\n        word.setLength(j + 3);\n        k--;\n        if (lookup()) /* ensure calories -> calorie */\n        return;\n        k++;\n        word.unsafeWrite('s');\n        setSuffix(\"y\");\n        lookup();\n      } else if (endsIn('e', 's')) {\n        /* try just removing the \"s\" */\n        word.setLength(j + 2);\n        k--;\n        \n        /*\n         * note: don't check for exceptions here. So, `aides' -> `aide', but\n         * `aided' -> `aid'. The exception for double s is used to prevent\n         * crosses -> crosse. This is actually correct if crosses is a plural\n         * noun (a type of racket used in lacrosse), but the verb is much more\n         * common\n         */\n\n        /****\n         * YCS: this was the one place where lookup was not followed by return.\n         * So restructure it. if ((j>0)&&(lookup(word.toString())) &&\n         * !((word.charAt(j) == 's') && (word.charAt(j-1) == 's'))) return;\n         *****/\n        boolean tryE = j > 0\n            && !((word.charAt(j) == 's') && (word.charAt(j - 1) == 's'));\n        if (tryE && lookup()) return;\n        \n        /* try removing the \"es\" */\n\n        word.setLength(j + 1);\n        k--;\n        if (lookup()) return;\n        \n        /* the default is to retain the \"e\" */\n        word.unsafeWrite('e');\n        k++;\n        \n        if (!tryE) lookup(); // if we didn't try the \"e\" ending before\n        return;\n      } else {\n        if (word.length() > 3 && penultChar() != 's' && !endsIn('o', 'u', 's')) {\n          /* unless the word ends in \"ous\" or a double \"s\", remove the final \"s\" */\n\n          word.setLength(k);\n          k--;\n          lookup();\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c715a0f99152be7566591f323c6c5a25725a1bcb","date":1307118449,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/en/KStemmer#plural().mjava","pathOld":"/dev/null","sourceNew":"  /* Convert plurals to singular form, and '-ies' to 'y' */\n  private void plural() {\n    if (word.charAt(k) == 's') {\n      if (endsIn('i', 'e', 's')) {\n        word.setLength(j + 3);\n        k--;\n        if (lookup()) /* ensure calories -> calorie */\n        return;\n        k++;\n        word.unsafeWrite('s');\n        setSuffix(\"y\");\n        lookup();\n      } else if (endsIn('e', 's')) {\n        /* try just removing the \"s\" */\n        word.setLength(j + 2);\n        k--;\n        \n        /*\n         * note: don't check for exceptions here. So, `aides' -> `aide', but\n         * `aided' -> `aid'. The exception for double s is used to prevent\n         * crosses -> crosse. This is actually correct if crosses is a plural\n         * noun (a type of racket used in lacrosse), but the verb is much more\n         * common\n         */\n\n        /****\n         * YCS: this was the one place where lookup was not followed by return.\n         * So restructure it. if ((j>0)&&(lookup(word.toString())) &&\n         * !((word.charAt(j) == 's') && (word.charAt(j-1) == 's'))) return;\n         *****/\n        boolean tryE = j > 0\n            && !((word.charAt(j) == 's') && (word.charAt(j - 1) == 's'));\n        if (tryE && lookup()) return;\n        \n        /* try removing the \"es\" */\n\n        word.setLength(j + 1);\n        k--;\n        if (lookup()) return;\n        \n        /* the default is to retain the \"e\" */\n        word.unsafeWrite('e');\n        k++;\n        \n        if (!tryE) lookup(); // if we didn't try the \"e\" ending before\n        return;\n      } else {\n        if (word.length() > 3 && penultChar() != 's' && !endsIn('o', 'u', 's')) {\n          /* unless the word ends in \"ous\" or a double \"s\", remove the final \"s\" */\n\n          word.setLength(k);\n          k--;\n          lookup();\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/en/KStemmer#plural().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/en/KStemmer#plural().mjava","sourceNew":"  /* Convert plurals to singular form, and '-ies' to 'y' */\n  private void plural() {\n    if (word.charAt(k) == 's') {\n      if (endsIn('i', 'e', 's')) {\n        word.setLength(j + 3);\n        k--;\n        if (lookup()) /* ensure calories -> calorie */\n        return;\n        k++;\n        word.unsafeWrite('s');\n        setSuffix(\"y\");\n        lookup();\n      } else if (endsIn('e', 's')) {\n        /* try just removing the \"s\" */\n        word.setLength(j + 2);\n        k--;\n        \n        /*\n         * note: don't check for exceptions here. So, `aides' -> `aide', but\n         * `aided' -> `aid'. The exception for double s is used to prevent\n         * crosses -> crosse. This is actually correct if crosses is a plural\n         * noun (a type of racket used in lacrosse), but the verb is much more\n         * common\n         */\n\n        /****\n         * YCS: this was the one place where lookup was not followed by return.\n         * So restructure it. if ((j>0)&&(lookup(word.toString())) &&\n         * !((word.charAt(j) == 's') && (word.charAt(j-1) == 's'))) return;\n         *****/\n        boolean tryE = j > 0\n            && !((word.charAt(j) == 's') && (word.charAt(j - 1) == 's'));\n        if (tryE && lookup()) return;\n        \n        /* try removing the \"es\" */\n\n        word.setLength(j + 1);\n        k--;\n        if (lookup()) return;\n        \n        /* the default is to retain the \"e\" */\n        word.unsafeWrite('e');\n        k++;\n        \n        if (!tryE) lookup(); // if we didn't try the \"e\" ending before\n        return;\n      } else {\n        if (word.length() > 3 && penultChar() != 's' && !endsIn('o', 'u', 's')) {\n          /* unless the word ends in \"ous\" or a double \"s\", remove the final \"s\" */\n\n          word.setLength(k);\n          k--;\n          lookup();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /* Convert plurals to singular form, and '-ies' to 'y' */\n  private void plural() {\n    if (word.charAt(k) == 's') {\n      if (endsIn('i', 'e', 's')) {\n        word.setLength(j + 3);\n        k--;\n        if (lookup()) /* ensure calories -> calorie */\n        return;\n        k++;\n        word.unsafeWrite('s');\n        setSuffix(\"y\");\n        lookup();\n      } else if (endsIn('e', 's')) {\n        /* try just removing the \"s\" */\n        word.setLength(j + 2);\n        k--;\n        \n        /*\n         * note: don't check for exceptions here. So, `aides' -> `aide', but\n         * `aided' -> `aid'. The exception for double s is used to prevent\n         * crosses -> crosse. This is actually correct if crosses is a plural\n         * noun (a type of racket used in lacrosse), but the verb is much more\n         * common\n         */\n\n        /****\n         * YCS: this was the one place where lookup was not followed by return.\n         * So restructure it. if ((j>0)&&(lookup(word.toString())) &&\n         * !((word.charAt(j) == 's') && (word.charAt(j-1) == 's'))) return;\n         *****/\n        boolean tryE = j > 0\n            && !((word.charAt(j) == 's') && (word.charAt(j - 1) == 's'));\n        if (tryE && lookup()) return;\n        \n        /* try removing the \"es\" */\n\n        word.setLength(j + 1);\n        k--;\n        if (lookup()) return;\n        \n        /* the default is to retain the \"e\" */\n        word.unsafeWrite('e');\n        k++;\n        \n        if (!tryE) lookup(); // if we didn't try the \"e\" ending before\n        return;\n      } else {\n        if (word.length() > 3 && penultChar() != 's' && !endsIn('o', 'u', 's')) {\n          /* unless the word ends in \"ous\" or a double \"s\", remove the final \"s\" */\n\n          word.setLength(k);\n          k--;\n          lookup();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["f3517d617f8b4502b5cca1a57e228d54bda3dd0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c715a0f99152be7566591f323c6c5a25725a1bcb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f3517d617f8b4502b5cca1a57e228d54bda3dd0f"],"d62f5453a200cec2cbb60148de159dbf55591e9d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f3517d617f8b4502b5cca1a57e228d54bda3dd0f"],"f3517d617f8b4502b5cca1a57e228d54bda3dd0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c715a0f99152be7566591f323c6c5a25725a1bcb","d62f5453a200cec2cbb60148de159dbf55591e9d","f3517d617f8b4502b5cca1a57e228d54bda3dd0f"],"c715a0f99152be7566591f323c6c5a25725a1bcb":[],"d62f5453a200cec2cbb60148de159dbf55591e9d":[],"f3517d617f8b4502b5cca1a57e228d54bda3dd0f":["b89678825b68eccaf09e6ab71675fc0b0af1e099","c715a0f99152be7566591f323c6c5a25725a1bcb","d62f5453a200cec2cbb60148de159dbf55591e9d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c715a0f99152be7566591f323c6c5a25725a1bcb","d62f5453a200cec2cbb60148de159dbf55591e9d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}