{"path":"src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(Searcher).mjava","commits":[{"id":"45f06bdc846cdc9b2546a27a8a1492d613e87879","date":1097422035,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(Searcher).mjava","pathOld":"/dev/null","sourceNew":"    public MultiPhraseWeight(Searcher searcher) {\n      this.searcher = searcher;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402061809f3a4629ea0c449e33e9f94a9772f3c3","date":1113967712,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(Searcher).mjava","pathOld":"src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(Searcher).mjava","sourceNew":"    public MultiPhraseWeight(Searcher searcher)\n      throws IOException {\n      this.similarity = getSimilarity(searcher);\n\n      // compute idf\n      Iterator i = termArrays.iterator();\n      while (i.hasNext()) {\n        Term[] terms = (Term[])i.next();\n        for (int j=0; j<terms.length; j++) {\n          idf += getSimilarity(searcher).idf(terms[j], searcher);\n        }\n      }\n    }\n\n","sourceOld":"    public MultiPhraseWeight(Searcher searcher) {\n      this.searcher = searcher;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(Searcher).mjava","pathOld":"src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(Searcher).mjava","sourceNew":"    public MultiPhraseWeight(Searcher searcher)\n      throws IOException {\n      this.similarity = getSimilarity(searcher);\n\n      // compute idf\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          idf += getSimilarity(searcher).idf(term, searcher);\n        }\n      }\n    }\n\n","sourceOld":"    public MultiPhraseWeight(Searcher searcher)\n      throws IOException {\n      this.similarity = getSimilarity(searcher);\n\n      // compute idf\n      Iterator i = termArrays.iterator();\n      while (i.hasNext()) {\n        Term[] terms = (Term[])i.next();\n        for (int j=0; j<terms.length; j++) {\n          idf += getSimilarity(searcher).idf(terms[j], searcher);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca7db7f1c27f53e2fbd8dc29c316e1ac3d808e58","date":1256297148,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(Searcher).mjava","pathOld":"src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(Searcher).mjava","sourceNew":"    public MultiPhraseWeight(Searcher searcher)\n      throws IOException {\n      this.similarity = getSimilarity(searcher);\n\n      // compute idf\n      final int maxDoc = searcher.maxDoc();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          idf += this.similarity.idf(searcher.docFreq(term), maxDoc);\n        }\n      }\n    }\n\n","sourceOld":"    public MultiPhraseWeight(Searcher searcher)\n      throws IOException {\n      this.similarity = getSimilarity(searcher);\n\n      // compute idf\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          idf += getSimilarity(searcher).idf(term, searcher);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(Searcher).mjava","pathOld":"src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(Searcher).mjava","sourceNew":"    public MultiPhraseWeight(Searcher searcher)\n      throws IOException {\n      this.similarity = getSimilarity(searcher);\n\n      // compute idf\n      final int maxDoc = searcher.maxDoc();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          idf += this.similarity.idf(searcher.docFreq(term), maxDoc);\n        }\n      }\n    }\n\n","sourceOld":"    public MultiPhraseWeight(Searcher searcher)\n      throws IOException {\n      this.similarity = getSimilarity(searcher);\n\n      // compute idf\n      final int maxDoc = searcher.maxDoc();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          idf += this.similarity.idf(searcher.docFreq(term), maxDoc);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"402061809f3a4629ea0c449e33e9f94a9772f3c3":["45f06bdc846cdc9b2546a27a8a1492d613e87879"],"ca7db7f1c27f53e2fbd8dc29c316e1ac3d808e58":["ef82ff03e4016c705811b2658e81471a645c0e49"],"ef82ff03e4016c705811b2658e81471a645c0e49":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45f06bdc846cdc9b2546a27a8a1492d613e87879":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ca7db7f1c27f53e2fbd8dc29c316e1ac3d808e58"]},"commit2Childs":{"402061809f3a4629ea0c449e33e9f94a9772f3c3":["ef82ff03e4016c705811b2658e81471a645c0e49"],"ca7db7f1c27f53e2fbd8dc29c316e1ac3d808e58":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ef82ff03e4016c705811b2658e81471a645c0e49":["ca7db7f1c27f53e2fbd8dc29c316e1ac3d808e58"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["45f06bdc846cdc9b2546a27a8a1492d613e87879"],"45f06bdc846cdc9b2546a27a8a1492d613e87879":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}