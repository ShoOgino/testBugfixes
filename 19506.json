{"path":"src/test/org/apache/solr/common/params/SolrParamTest#testGetParams().mjava","commits":[{"id":"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb","date":1181791578,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/common/params/SolrParamTest#testGetParams().mjava","pathOld":"src/test/org/apache/solr/util/SolrParamTest#testGetParams().mjava","sourceNew":"  public void testGetParams() {\n    Map<String,String> pmap = new HashMap<String, String>();\n    pmap.put( \"str\"        , \"string\"   );\n    pmap.put( \"bool\"       , \"true\"     );\n    pmap.put( \"true-0\"     , \"true\"     );\n    pmap.put( \"true-1\"     , \"yes\"      );\n    pmap.put( \"true-2\"     , \"on\"       );\n    pmap.put( \"false-0\"    , \"false\"    );\n    pmap.put( \"false-1\"    , \"off\"      );\n    pmap.put( \"false-2\"    , \"no\"       );\n    pmap.put( \"int\"        , \"100\"      );\n    pmap.put( \"float\"      , \"10.6\"     );\n    pmap.put( \"f.fl.str\"   , \"string\"   );\n    pmap.put( \"f.fl.bool\"  , \"true\"     );\n    pmap.put( \"f.fl.int\"   , \"100\"      );\n    pmap.put( \"f.fl.float\" , \"10.6\"     );\n    pmap.put( \"f.bad.bool\" , \"notbool\"  );\n    pmap.put( \"f.bad.int\"  , \"notint\"   );\n    pmap.put( \"f.bad.float\", \"notfloat\" );\n    final SolrParams params = new MapSolrParams( pmap );\n    \n    // Test the string values we put in directly\n    assertEquals(  \"string\"   , params.get( \"str\"       ) );\n    assertEquals(  \"true\"     , params.get( \"bool\"      ) );\n    assertEquals(  \"100\"      , params.get( \"int\"       ) );\n    assertEquals(  \"10.6\"     , params.get( \"float\"     ) );\n    assertEquals(  \"string\"   , params.get( \"f.fl.str\"    ) );\n    assertEquals(  \"true\"     , params.get( \"f.fl.bool\"   ) );\n    assertEquals(  \"100\"      , params.get( \"f.fl.int\"    ) );\n    assertEquals(  \"10.6\"     , params.get( \"f.fl.float\"  ) );\n    assertEquals(  \"notbool\"  , params.get( \"f.bad.bool\"  ) );\n    assertEquals(  \"notint\"   , params.get( \"f.bad.int\"   ) );\n    assertEquals(  \"notfloat\" , params.get( \"f.bad.float\" ) );\n    \n    final String  pstr = \"string\";\n    final Boolean pbool = Boolean.TRUE;\n    final Integer pint = new Integer( 100 );\n    final Float   pfloat = new Float( 10.6f );\n    \n    // Make sure they parse ok\n    assertEquals( pstr   , params.get(      \"str\"      ) );\n    assertEquals( pbool  , params.getBool(  \"bool\"     ) );\n    assertEquals( pint   , params.getInt(   \"int\"      ) );\n    assertEquals( pfloat , params.getFloat( \"float\"    ) );\n    assertEquals( pbool  , params.getBool(  \"f.fl.bool\"  ) );\n    assertEquals( pint   , params.getInt(   \"f.fl.int\"   ) );\n    assertEquals( pfloat , params.getFloat( \"f.fl.float\" ) );\n    assertEquals( pstr   , params.getFieldParam( \"fl\", \"str\"  ) );\n    assertEquals( pbool  , params.getFieldBool(  \"fl\", \"bool\" ) );\n    assertEquals( pint   , params.getFieldInt(   \"fl\", \"int\"  ) );\n    assertEquals( pfloat , params.getFieldFloat( \"fl\", \"float\" ) );\n    \n    // Test field defaulting (fall through to non-field-specific value)\n    assertEquals( pint   , params.getFieldInt( \"fff\",  \"int\"      ) );\n    \n    // test boolean parsing\n    for( int i=0; i<3; i++ ) {\n      // Must use Boolean rather than boolean reference value to prevent\n      // auto-unboxing ambiguity\n      assertEquals( Boolean.TRUE,  params.getBool( \"true-\"+i  ) );\n      assertEquals( Boolean.FALSE, params.getBool( \"false-\"+i ) );\n    }\n    \n    // Malformed params: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFloat( \"f.bad.float\" ); } } ) );\n    \n    // Ask for params that arent there\n    assertNull( params.get( \"asagdsaga\" ) );\n    assertNull( params.getBool( \"asagdsaga\" ) );\n    assertNull( params.getInt( \"asagdsaga\" ) );\n    assertNull( params.getFloat( \"asagdsaga\" ) );\n    \n    // Get things with defaults\n    assertEquals( pstr                  , params.get(          \"xxx\", pstr   ) );\n    assertEquals( pbool.booleanValue()  , params.getBool(      \"xxx\", pbool   ) );\n    assertEquals( pint.intValue()       , params.getInt(       \"xxx\", pint   ) );\n    assertEquals( pfloat.floatValue()   , params.getFloat(     \"xxx\", pfloat  ) );\n    assertEquals( pbool.booleanValue()  , params.getFieldBool( \"xxx\", \"bool\", pbool ) );\n    assertEquals( pint.intValue()       , params.getFieldInt(  \"xxx\", \"int\", pint  ) );\n    assertEquals( pfloat.floatValue()   , params.getFieldFloat(\"xxx\", \"float\", pfloat  ) );\n    assertEquals( pstr                  , params.getFieldParam(\"xxx\", \"str\", pstr  ) );\n\n    // Required params testing uses decorator\n    final SolrParams required = params.required();\n    \n    // Required params which are present should test same as above\n    assertEquals( pstr   , required.get(      \"str\"      ) );\n    assertEquals( pbool  , required.getBool(  \"bool\"     ) );\n    assertEquals( pint   , required.getInt(   \"int\"      ) );\n    assertEquals( pfloat , required.getFloat( \"float\"    ) );\n    \n    // field value present\n    assertEquals( pbool  , required.getFieldBool(  \"fl\", \"bool\" ) );\n    // field defaulting (fall through to non-field-specific value)\n    //assertEquals( pint   , required.getFieldInt( \"fff\",  \"int\"      ) );\n    \n    // Required params which are missing: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.get( \"aaaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getFloat( \"f.bad.float\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getInt(   \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getBool(  \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getFloat( \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFieldBool(  \"bad\", \"bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFieldInt(   \"bad\", \"int\"  ); } } ) );\n\n    // Fields with default use their parent value:\n    assertEquals(\n        params.get(   \"aaaa\", \"str\" ), \n        required.get( \"aaaa\", \"str\" ) );\n    assertEquals(\n        params.getInt(   \"f.bad.nnnn\", pint ), \n        required.getInt( \"f.bad.nnnn\", pint ) );\n    \n    // Check default SolrParams\n    Map<String,String> dmap = new HashMap<String, String>();\n    // these are not defined in params\n    dmap.put( \"dstr\"               , \"default\"   );\n    dmap.put( \"dint\"               , \"123\"       );\n    // these are defined in params\n    dmap.put( \"int\"                , \"456\"       );\n    SolrParams defaults = new DefaultSolrParams( params, new MapSolrParams( dmap ) );\n  \n    // in params, not in default\n    assertEquals( pstr                  , defaults.get( \"str\"      ) );\n    // in default, not in params\n    assertEquals( \"default\"             , defaults.get( \"dstr\"      ) );\n    assertEquals( new Integer(123)      , defaults.getInt(  \"dint\"     ) );\n    // in params, overriding defaults\n    assertEquals( pint                  , defaults.getInt(   \"int\"      ) );\n    // in neither params nor defaults\n    assertNull( defaults.get( \"asagdsaga\" ) );\n  }\n\n","sourceOld":"  public void testGetParams() {\n    Map<String,String> pmap = new HashMap<String, String>();\n    pmap.put( \"str\"        , \"string\"   );\n    pmap.put( \"bool\"       , \"true\"     );\n    pmap.put( \"true-0\"     , \"true\"     );\n    pmap.put( \"true-1\"     , \"yes\"      );\n    pmap.put( \"true-2\"     , \"on\"       );\n    pmap.put( \"false-0\"    , \"false\"    );\n    pmap.put( \"false-1\"    , \"off\"      );\n    pmap.put( \"false-2\"    , \"no\"       );\n    pmap.put( \"int\"        , \"100\"      );\n    pmap.put( \"float\"      , \"10.6\"     );\n    pmap.put( \"f.fl.str\"   , \"string\"   );\n    pmap.put( \"f.fl.bool\"  , \"true\"     );\n    pmap.put( \"f.fl.int\"   , \"100\"      );\n    pmap.put( \"f.fl.float\" , \"10.6\"     );\n    pmap.put( \"f.bad.bool\" , \"notbool\"  );\n    pmap.put( \"f.bad.int\"  , \"notint\"   );\n    pmap.put( \"f.bad.float\", \"notfloat\" );\n    final SolrParams params = new MapSolrParams( pmap );\n    \n    // Test the string values we put in directly\n    assertEquals(  \"string\"   , params.get( \"str\"       ) );\n    assertEquals(  \"true\"     , params.get( \"bool\"      ) );\n    assertEquals(  \"100\"      , params.get( \"int\"       ) );\n    assertEquals(  \"10.6\"     , params.get( \"float\"     ) );\n    assertEquals(  \"string\"   , params.get( \"f.fl.str\"    ) );\n    assertEquals(  \"true\"     , params.get( \"f.fl.bool\"   ) );\n    assertEquals(  \"100\"      , params.get( \"f.fl.int\"    ) );\n    assertEquals(  \"10.6\"     , params.get( \"f.fl.float\"  ) );\n    assertEquals(  \"notbool\"  , params.get( \"f.bad.bool\"  ) );\n    assertEquals(  \"notint\"   , params.get( \"f.bad.int\"   ) );\n    assertEquals(  \"notfloat\" , params.get( \"f.bad.float\" ) );\n    \n    final String  pstr = \"string\";\n    final Boolean pbool = Boolean.TRUE;\n    final Integer pint = new Integer( 100 );\n    final Float   pfloat = new Float( 10.6f );\n    \n    // Make sure they parse ok\n    assertEquals( pstr   , params.get(      \"str\"      ) );\n    assertEquals( pbool  , params.getBool(  \"bool\"     ) );\n    assertEquals( pint   , params.getInt(   \"int\"      ) );\n    assertEquals( pfloat , params.getFloat( \"float\"    ) );\n    assertEquals( pbool  , params.getBool(  \"f.fl.bool\"  ) );\n    assertEquals( pint   , params.getInt(   \"f.fl.int\"   ) );\n    assertEquals( pfloat , params.getFloat( \"f.fl.float\" ) );\n    assertEquals( pstr   , params.getFieldParam( \"fl\", \"str\"  ) );\n    assertEquals( pbool  , params.getFieldBool(  \"fl\", \"bool\" ) );\n    assertEquals( pint   , params.getFieldInt(   \"fl\", \"int\"  ) );\n    assertEquals( pfloat , params.getFieldFloat( \"fl\", \"float\" ) );\n    \n    // Test field defaulting (fall through to non-field-specific value)\n    assertEquals( pint   , params.getFieldInt( \"fff\",  \"int\"      ) );\n    \n    // test boolean parsing\n    for( int i=0; i<3; i++ ) {\n      // Must use Boolean rather than boolean reference value to prevent\n      // auto-unboxing ambiguity\n      assertEquals( Boolean.TRUE,  params.getBool( \"true-\"+i  ) );\n      assertEquals( Boolean.FALSE, params.getBool( \"false-\"+i ) );\n    }\n    \n    // Malformed params: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFloat( \"f.bad.float\" ); } } ) );\n    \n    // Ask for params that arent there\n    assertNull( params.get( \"asagdsaga\" ) );\n    assertNull( params.getBool( \"asagdsaga\" ) );\n    assertNull( params.getInt( \"asagdsaga\" ) );\n    assertNull( params.getFloat( \"asagdsaga\" ) );\n    \n    // Get things with defaults\n    assertEquals( pstr                  , params.get(          \"xxx\", pstr   ) );\n    assertEquals( pbool.booleanValue()  , params.getBool(      \"xxx\", pbool   ) );\n    assertEquals( pint.intValue()       , params.getInt(       \"xxx\", pint   ) );\n    assertEquals( pfloat.floatValue()   , params.getFloat(     \"xxx\", pfloat  ) );\n    assertEquals( pbool.booleanValue()  , params.getFieldBool( \"xxx\", \"bool\", pbool ) );\n    assertEquals( pint.intValue()       , params.getFieldInt(  \"xxx\", \"int\", pint  ) );\n    assertEquals( pfloat.floatValue()   , params.getFieldFloat(\"xxx\", \"float\", pfloat  ) );\n    assertEquals( pstr                  , params.getFieldParam(\"xxx\", \"str\", pstr  ) );\n\n    // Required params testing uses decorator\n    final SolrParams required = params.required();\n    \n    // Required params which are present should test same as above\n    assertEquals( pstr   , required.get(      \"str\"      ) );\n    assertEquals( pbool  , required.getBool(  \"bool\"     ) );\n    assertEquals( pint   , required.getInt(   \"int\"      ) );\n    assertEquals( pfloat , required.getFloat( \"float\"    ) );\n    \n    // field value present\n    assertEquals( pbool  , required.getFieldBool(  \"fl\", \"bool\" ) );\n    // field defaulting (fall through to non-field-specific value)\n    //assertEquals( pint   , required.getFieldInt( \"fff\",  \"int\"      ) );\n    \n    // Required params which are missing: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.get( \"aaaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getFloat( \"f.bad.float\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getInt(   \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getBool(  \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getFloat( \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFieldBool(  \"bad\", \"bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFieldInt(   \"bad\", \"int\"  ); } } ) );\n\n    // Fields with default use their parent value:\n    assertEquals(\n        params.get(   \"aaaa\", \"str\" ), \n        required.get( \"aaaa\", \"str\" ) );\n    assertEquals(\n        params.getInt(   \"f.bad.nnnn\", pint ), \n        required.getInt( \"f.bad.nnnn\", pint ) );\n    \n    // Check default SolrParams\n    Map<String,String> dmap = new HashMap<String, String>();\n    // these are not defined in params\n    dmap.put( \"dstr\"               , \"default\"   );\n    dmap.put( \"dint\"               , \"123\"       );\n    // these are defined in params\n    dmap.put( \"int\"                , \"456\"       );\n    SolrParams defaults = new DefaultSolrParams( params, new MapSolrParams( dmap ) );\n  \n    // in params, not in default\n    assertEquals( pstr                  , defaults.get( \"str\"      ) );\n    // in default, not in params\n    assertEquals( \"default\"             , defaults.get( \"dstr\"      ) );\n    assertEquals( new Integer(123)      , defaults.getInt(  \"dint\"     ) );\n    // in params, overriding defaults\n    assertEquals( pint                  , defaults.getInt(   \"int\"      ) );\n    // in neither params nor defaults\n    assertNull( defaults.get( \"asagdsaga\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71d977f94c09d5fcc8b02d63e3bb052ebb823988","date":1184176671,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/test/org/apache/solr/common/params/SolrParamTest#testGetParams().mjava","pathOld":"src/test/org/apache/solr/common/params/SolrParamTest#testGetParams().mjava","sourceNew":"  public void testGetParams() {\n    Map<String,String> pmap = new HashMap<String, String>();\n    pmap.put( \"str\"        , \"string\"   );\n    pmap.put( \"bool\"       , \"true\"     );\n    pmap.put( \"true-0\"     , \"true\"     );\n    pmap.put( \"true-1\"     , \"yes\"      );\n    pmap.put( \"true-2\"     , \"on\"       );\n    pmap.put( \"false-0\"    , \"false\"    );\n    pmap.put( \"false-1\"    , \"off\"      );\n    pmap.put( \"false-2\"    , \"no\"       );\n    pmap.put( \"int\"        , \"100\"      );\n    pmap.put( \"float\"      , \"10.6\"     );\n    pmap.put( \"f.fl.str\"   , \"string\"   );\n    pmap.put( \"f.fl.bool\"  , \"true\"     );\n    pmap.put( \"f.fl.int\"   , \"100\"      );\n    pmap.put( \"f.fl.float\" , \"10.6\"     );\n    pmap.put( \"f.bad.bool\" , \"notbool\"  );\n    pmap.put( \"f.bad.int\"  , \"notint\"   );\n    pmap.put( \"f.bad.float\", \"notfloat\" );\n    final SolrParams params = new MapSolrParams( pmap );\n    \n    // Test the string values we put in directly\n    assertEquals(  \"string\"   , params.get( \"str\"       ) );\n    assertEquals(  \"true\"     , params.get( \"bool\"      ) );\n    assertEquals(  \"100\"      , params.get( \"int\"       ) );\n    assertEquals(  \"10.6\"     , params.get( \"float\"     ) );\n    assertEquals(  \"string\"   , params.get( \"f.fl.str\"    ) );\n    assertEquals(  \"true\"     , params.get( \"f.fl.bool\"   ) );\n    assertEquals(  \"100\"      , params.get( \"f.fl.int\"    ) );\n    assertEquals(  \"10.6\"     , params.get( \"f.fl.float\"  ) );\n    assertEquals(  \"notbool\"  , params.get( \"f.bad.bool\"  ) );\n    assertEquals(  \"notint\"   , params.get( \"f.bad.int\"   ) );\n    assertEquals(  \"notfloat\" , params.get( \"f.bad.float\" ) );\n    \n    final String  pstr = \"string\";\n    final Boolean pbool = Boolean.TRUE;\n    final Integer pint = new Integer( 100 );\n    final Float   pfloat = new Float( 10.6f );\n    \n    // Make sure they parse ok\n    assertEquals( pstr   , params.get(      \"str\"      ) );\n    assertEquals( pbool  , params.getBool(  \"bool\"     ) );\n    assertEquals( pint   , params.getInt(   \"int\"      ) );\n    assertEquals( pfloat , params.getFloat( \"float\"    ) );\n    assertEquals( pbool  , params.getBool(  \"f.fl.bool\"  ) );\n    assertEquals( pint   , params.getInt(   \"f.fl.int\"   ) );\n    assertEquals( pfloat , params.getFloat( \"f.fl.float\" ) );\n    assertEquals( pstr   , params.getFieldParam( \"fl\", \"str\"  ) );\n    assertEquals( pbool  , params.getFieldBool(  \"fl\", \"bool\" ) );\n    assertEquals( pint   , params.getFieldInt(   \"fl\", \"int\"  ) );\n    assertEquals( pfloat , params.getFieldFloat( \"fl\", \"float\" ) );\n    \n    // Test field defaulting (fall through to non-field-specific value)\n    assertEquals( pint   , params.getFieldInt( \"fff\",  \"int\"      ) );\n    \n    // test boolean parsing\n    for( int i=0; i<3; i++ ) {\n      // Must use Boolean rather than boolean reference value to prevent\n      // auto-unboxing ambiguity\n      assertEquals( Boolean.TRUE,  params.getBool( \"true-\"+i  ) );\n      assertEquals( Boolean.FALSE, params.getBool( \"false-\"+i ) );\n    }\n    \n    // Malformed params: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFloat( \"f.bad.float\" ); } } ) );\n    \n    // Ask for params that arent there\n    assertNull( params.get( \"asagdsaga\" ) );\n    assertNull( params.getBool( \"asagdsaga\" ) );\n    assertNull( params.getInt( \"asagdsaga\" ) );\n    assertNull( params.getFloat( \"asagdsaga\" ) );\n    \n    // Get things with defaults\n    assertEquals( pstr                  , params.get(          \"xxx\", pstr   ) );\n    assertEquals( pbool.booleanValue()  , params.getBool(      \"xxx\", pbool   ) );\n    assertEquals( pint.intValue()       , params.getInt(       \"xxx\", pint   ) );\n    assertEquals( pfloat.floatValue()   , params.getFloat(     \"xxx\", pfloat  ) );\n    assertEquals( pbool.booleanValue()  , params.getFieldBool( \"xxx\", \"bool\", pbool ) );\n    assertEquals( pint.intValue()       , params.getFieldInt(  \"xxx\", \"int\", pint  ) );\n    assertEquals( pfloat.floatValue()   , params.getFieldFloat(\"xxx\", \"float\", pfloat  ) );\n    assertEquals( pstr                  , params.getFieldParam(\"xxx\", \"str\", pstr  ) );\n\n    // Required params testing uses decorator\n    final SolrParams required = params.required();\n    \n    // Required params which are present should test same as above\n    assertEquals( pstr   , required.get(      \"str\"      ) );\n    assertEquals( pbool  , required.getBool(  \"bool\"     ) );\n    assertEquals( pint   , required.getInt(   \"int\"      ) );\n    assertEquals( pfloat , required.getFloat( \"float\"    ) );\n    \n    // field value present\n    assertEquals( pbool  , required.getFieldBool(  \"fl\", \"bool\" ) );\n    // field defaulting (fall through to non-field-specific value)\n    assertEquals( pstr   , required.getFieldParams(\"fakefield\", \"str\")[0] );\n    assertEquals( pstr   , required.getFieldParam( \"fakefield\", \"str\"   ) );\n    assertEquals( pbool  , required.getFieldBool(  \"fakefield\", \"bool\"  ) );\n    assertEquals( pint   , required.getFieldInt(   \"fakefield\", \"int\"   ) );\n    assertEquals( pfloat , required.getFieldFloat( \"fakefield\", \"float\" ) );\n    \n    // Required params which are missing: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.get( \"aaaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getFloat( \"f.bad.float\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getInt(   \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getBool(  \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getFloat( \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFieldBool(  \"bad\", \"bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFieldInt(   \"bad\", \"int\"  ); } } ) );\n\n    // Fields with default use their parent value:\n    assertEquals(\n        params.get(   \"aaaa\", \"str\" ), \n        required.get( \"aaaa\", \"str\" ) );\n    assertEquals(\n        params.getInt(   \"f.bad.nnnn\", pint ), \n        required.getInt( \"f.bad.nnnn\", pint ) );\n    \n    // Check default SolrParams\n    Map<String,String> dmap = new HashMap<String, String>();\n    // these are not defined in params\n    dmap.put( \"dstr\"               , \"default\"   );\n    dmap.put( \"dint\"               , \"123\"       );\n    // these are defined in params\n    dmap.put( \"int\"                , \"456\"       );\n    SolrParams defaults = new DefaultSolrParams( params, new MapSolrParams( dmap ) );\n  \n    // in params, not in default\n    assertEquals( pstr                  , defaults.get( \"str\"      ) );\n    // in default, not in params\n    assertEquals( \"default\"             , defaults.get( \"dstr\"      ) );\n    assertEquals( new Integer(123)      , defaults.getInt(  \"dint\"     ) );\n    // in params, overriding defaults\n    assertEquals( pint                  , defaults.getInt(   \"int\"      ) );\n    // in neither params nor defaults\n    assertNull( defaults.get( \"asagdsaga\" ) );\n  }\n\n","sourceOld":"  public void testGetParams() {\n    Map<String,String> pmap = new HashMap<String, String>();\n    pmap.put( \"str\"        , \"string\"   );\n    pmap.put( \"bool\"       , \"true\"     );\n    pmap.put( \"true-0\"     , \"true\"     );\n    pmap.put( \"true-1\"     , \"yes\"      );\n    pmap.put( \"true-2\"     , \"on\"       );\n    pmap.put( \"false-0\"    , \"false\"    );\n    pmap.put( \"false-1\"    , \"off\"      );\n    pmap.put( \"false-2\"    , \"no\"       );\n    pmap.put( \"int\"        , \"100\"      );\n    pmap.put( \"float\"      , \"10.6\"     );\n    pmap.put( \"f.fl.str\"   , \"string\"   );\n    pmap.put( \"f.fl.bool\"  , \"true\"     );\n    pmap.put( \"f.fl.int\"   , \"100\"      );\n    pmap.put( \"f.fl.float\" , \"10.6\"     );\n    pmap.put( \"f.bad.bool\" , \"notbool\"  );\n    pmap.put( \"f.bad.int\"  , \"notint\"   );\n    pmap.put( \"f.bad.float\", \"notfloat\" );\n    final SolrParams params = new MapSolrParams( pmap );\n    \n    // Test the string values we put in directly\n    assertEquals(  \"string\"   , params.get( \"str\"       ) );\n    assertEquals(  \"true\"     , params.get( \"bool\"      ) );\n    assertEquals(  \"100\"      , params.get( \"int\"       ) );\n    assertEquals(  \"10.6\"     , params.get( \"float\"     ) );\n    assertEquals(  \"string\"   , params.get( \"f.fl.str\"    ) );\n    assertEquals(  \"true\"     , params.get( \"f.fl.bool\"   ) );\n    assertEquals(  \"100\"      , params.get( \"f.fl.int\"    ) );\n    assertEquals(  \"10.6\"     , params.get( \"f.fl.float\"  ) );\n    assertEquals(  \"notbool\"  , params.get( \"f.bad.bool\"  ) );\n    assertEquals(  \"notint\"   , params.get( \"f.bad.int\"   ) );\n    assertEquals(  \"notfloat\" , params.get( \"f.bad.float\" ) );\n    \n    final String  pstr = \"string\";\n    final Boolean pbool = Boolean.TRUE;\n    final Integer pint = new Integer( 100 );\n    final Float   pfloat = new Float( 10.6f );\n    \n    // Make sure they parse ok\n    assertEquals( pstr   , params.get(      \"str\"      ) );\n    assertEquals( pbool  , params.getBool(  \"bool\"     ) );\n    assertEquals( pint   , params.getInt(   \"int\"      ) );\n    assertEquals( pfloat , params.getFloat( \"float\"    ) );\n    assertEquals( pbool  , params.getBool(  \"f.fl.bool\"  ) );\n    assertEquals( pint   , params.getInt(   \"f.fl.int\"   ) );\n    assertEquals( pfloat , params.getFloat( \"f.fl.float\" ) );\n    assertEquals( pstr   , params.getFieldParam( \"fl\", \"str\"  ) );\n    assertEquals( pbool  , params.getFieldBool(  \"fl\", \"bool\" ) );\n    assertEquals( pint   , params.getFieldInt(   \"fl\", \"int\"  ) );\n    assertEquals( pfloat , params.getFieldFloat( \"fl\", \"float\" ) );\n    \n    // Test field defaulting (fall through to non-field-specific value)\n    assertEquals( pint   , params.getFieldInt( \"fff\",  \"int\"      ) );\n    \n    // test boolean parsing\n    for( int i=0; i<3; i++ ) {\n      // Must use Boolean rather than boolean reference value to prevent\n      // auto-unboxing ambiguity\n      assertEquals( Boolean.TRUE,  params.getBool( \"true-\"+i  ) );\n      assertEquals( Boolean.FALSE, params.getBool( \"false-\"+i ) );\n    }\n    \n    // Malformed params: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFloat( \"f.bad.float\" ); } } ) );\n    \n    // Ask for params that arent there\n    assertNull( params.get( \"asagdsaga\" ) );\n    assertNull( params.getBool( \"asagdsaga\" ) );\n    assertNull( params.getInt( \"asagdsaga\" ) );\n    assertNull( params.getFloat( \"asagdsaga\" ) );\n    \n    // Get things with defaults\n    assertEquals( pstr                  , params.get(          \"xxx\", pstr   ) );\n    assertEquals( pbool.booleanValue()  , params.getBool(      \"xxx\", pbool   ) );\n    assertEquals( pint.intValue()       , params.getInt(       \"xxx\", pint   ) );\n    assertEquals( pfloat.floatValue()   , params.getFloat(     \"xxx\", pfloat  ) );\n    assertEquals( pbool.booleanValue()  , params.getFieldBool( \"xxx\", \"bool\", pbool ) );\n    assertEquals( pint.intValue()       , params.getFieldInt(  \"xxx\", \"int\", pint  ) );\n    assertEquals( pfloat.floatValue()   , params.getFieldFloat(\"xxx\", \"float\", pfloat  ) );\n    assertEquals( pstr                  , params.getFieldParam(\"xxx\", \"str\", pstr  ) );\n\n    // Required params testing uses decorator\n    final SolrParams required = params.required();\n    \n    // Required params which are present should test same as above\n    assertEquals( pstr   , required.get(      \"str\"      ) );\n    assertEquals( pbool  , required.getBool(  \"bool\"     ) );\n    assertEquals( pint   , required.getInt(   \"int\"      ) );\n    assertEquals( pfloat , required.getFloat( \"float\"    ) );\n    \n    // field value present\n    assertEquals( pbool  , required.getFieldBool(  \"fl\", \"bool\" ) );\n    // field defaulting (fall through to non-field-specific value)\n    //assertEquals( pint   , required.getFieldInt( \"fff\",  \"int\"      ) );\n    \n    // Required params which are missing: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.get( \"aaaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getFloat( \"f.bad.float\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getInt(   \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getBool(  \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getFloat( \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFieldBool(  \"bad\", \"bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFieldInt(   \"bad\", \"int\"  ); } } ) );\n\n    // Fields with default use their parent value:\n    assertEquals(\n        params.get(   \"aaaa\", \"str\" ), \n        required.get( \"aaaa\", \"str\" ) );\n    assertEquals(\n        params.getInt(   \"f.bad.nnnn\", pint ), \n        required.getInt( \"f.bad.nnnn\", pint ) );\n    \n    // Check default SolrParams\n    Map<String,String> dmap = new HashMap<String, String>();\n    // these are not defined in params\n    dmap.put( \"dstr\"               , \"default\"   );\n    dmap.put( \"dint\"               , \"123\"       );\n    // these are defined in params\n    dmap.put( \"int\"                , \"456\"       );\n    SolrParams defaults = new DefaultSolrParams( params, new MapSolrParams( dmap ) );\n  \n    // in params, not in default\n    assertEquals( pstr                  , defaults.get( \"str\"      ) );\n    // in default, not in params\n    assertEquals( \"default\"             , defaults.get( \"dstr\"      ) );\n    assertEquals( new Integer(123)      , defaults.getInt(  \"dint\"     ) );\n    // in params, overriding defaults\n    assertEquals( pint                  , defaults.getInt(   \"int\"      ) );\n    // in neither params nor defaults\n    assertNull( defaults.get( \"asagdsaga\" ) );\n  }\n\n","bugFix":["1f396c786865615804018225fa7142e8e1202c20"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/common/params/SolrParamTest#testGetParams().mjava","pathOld":"src/test/org/apache/solr/common/params/SolrParamTest#testGetParams().mjava","sourceNew":"  public void testGetParams() {\n    Map<String,String> pmap = new HashMap<String, String>();\n    pmap.put( \"str\"        , \"string\"   );\n    pmap.put( \"bool\"       , \"true\"     );\n    pmap.put( \"true-0\"     , \"true\"     );\n    pmap.put( \"true-1\"     , \"yes\"      );\n    pmap.put( \"true-2\"     , \"on\"       );\n    pmap.put( \"false-0\"    , \"false\"    );\n    pmap.put( \"false-1\"    , \"off\"      );\n    pmap.put( \"false-2\"    , \"no\"       );\n    pmap.put( \"int\"        , \"100\"      );\n    pmap.put( \"float\"      , \"10.6\"     );\n    pmap.put( \"f.fl.str\"   , \"string\"   );\n    pmap.put( \"f.fl.bool\"  , \"true\"     );\n    pmap.put( \"f.fl.int\"   , \"100\"      );\n    pmap.put( \"f.fl.float\" , \"10.6\"     );\n    pmap.put( \"f.bad.bool\" , \"notbool\"  );\n    pmap.put( \"f.bad.int\"  , \"notint\"   );\n    pmap.put( \"f.bad.float\", \"notfloat\" );\n    final SolrParams params = new MapSolrParams( pmap );\n    \n    // Test the string values we put in directly\n    assertEquals(  \"string\"   , params.get( \"str\"       ) );\n    assertEquals(  \"true\"     , params.get( \"bool\"      ) );\n    assertEquals(  \"100\"      , params.get( \"int\"       ) );\n    assertEquals(  \"10.6\"     , params.get( \"float\"     ) );\n    assertEquals(  \"string\"   , params.get( \"f.fl.str\"    ) );\n    assertEquals(  \"true\"     , params.get( \"f.fl.bool\"   ) );\n    assertEquals(  \"100\"      , params.get( \"f.fl.int\"    ) );\n    assertEquals(  \"10.6\"     , params.get( \"f.fl.float\"  ) );\n    assertEquals(  \"notbool\"  , params.get( \"f.bad.bool\"  ) );\n    assertEquals(  \"notint\"   , params.get( \"f.bad.int\"   ) );\n    assertEquals(  \"notfloat\" , params.get( \"f.bad.float\" ) );\n    \n    final String  pstr = \"string\";\n    final Boolean pbool = Boolean.TRUE;\n    final Integer pint = new Integer( 100 );\n    final Float   pfloat = new Float( 10.6f );\n    \n    // Make sure they parse ok\n    assertEquals( pstr   , params.get(      \"str\"      ) );\n    assertEquals( pbool  , params.getBool(  \"bool\"     ) );\n    assertEquals( pint   , params.getInt(   \"int\"      ) );\n    assertEquals( pfloat , params.getFloat( \"float\"    ) );\n    assertEquals( pbool  , params.getBool(  \"f.fl.bool\"  ) );\n    assertEquals( pint   , params.getInt(   \"f.fl.int\"   ) );\n    assertEquals( pfloat , params.getFloat( \"f.fl.float\" ) );\n    assertEquals( pstr   , params.getFieldParam( \"fl\", \"str\"  ) );\n    assertEquals( pbool  , params.getFieldBool(  \"fl\", \"bool\" ) );\n    assertEquals( pint   , params.getFieldInt(   \"fl\", \"int\"  ) );\n    assertEquals( pfloat , params.getFieldFloat( \"fl\", \"float\" ) );\n    \n    // Test field defaulting (fall through to non-field-specific value)\n    assertEquals( pint   , params.getFieldInt( \"fff\",  \"int\"      ) );\n    \n    // test boolean parsing\n    for( int i=0; i<3; i++ ) {\n      // Must use Boolean rather than boolean reference value to prevent\n      // auto-unboxing ambiguity\n      assertEquals( Boolean.TRUE,  params.getBool( \"true-\"+i  ) );\n      assertEquals( Boolean.FALSE, params.getBool( \"false-\"+i ) );\n    }\n    \n    // Malformed params: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFloat( \"f.bad.float\" ); } } ) );\n    \n    // Ask for params that arent there\n    assertNull( params.get( \"asagdsaga\" ) );\n    assertNull( params.getBool( \"asagdsaga\" ) );\n    assertNull( params.getInt( \"asagdsaga\" ) );\n    assertNull( params.getFloat( \"asagdsaga\" ) );\n    \n    // Get things with defaults\n    assertEquals( pstr                  , params.get(          \"xxx\", pstr   ) );\n    assertEquals( pbool.booleanValue()  , params.getBool(      \"xxx\", pbool   ) );\n    assertEquals( pint.intValue()       , params.getInt(       \"xxx\", pint   ) );\n    assertEquals( pfloat.floatValue()   , params.getFloat(     \"xxx\", pfloat  ) );\n    assertEquals( pbool.booleanValue()  , params.getFieldBool( \"xxx\", \"bool\", pbool ) );\n    assertEquals( pint.intValue()       , params.getFieldInt(  \"xxx\", \"int\", pint  ) );\n    assertEquals( pfloat.floatValue()   , params.getFieldFloat(\"xxx\", \"float\", pfloat  ) );\n    assertEquals( pstr                  , params.getFieldParam(\"xxx\", \"str\", pstr  ) );\n\n    // Required params testing uses decorator\n    final SolrParams required = params.required();\n    \n    // Required params which are present should test same as above\n    assertEquals( pstr   , required.get(      \"str\"      ) );\n    assertEquals( pbool  , required.getBool(  \"bool\"     ) );\n    assertEquals( pint   , required.getInt(   \"int\"      ) );\n    assertEquals( pfloat , required.getFloat( \"float\"    ) );\n    \n    // field value present\n    assertEquals( pbool  , required.getFieldBool(  \"fl\", \"bool\" ) );\n    // field defaulting (fall through to non-field-specific value)\n    assertEquals( pstr   , required.getFieldParams(\"fakefield\", \"str\")[0] );\n    assertEquals( pstr   , required.getFieldParam( \"fakefield\", \"str\"   ) );\n    assertEquals( pbool  , required.getFieldBool(  \"fakefield\", \"bool\"  ) );\n    assertEquals( pint   , required.getFieldInt(   \"fakefield\", \"int\"   ) );\n    assertEquals( pfloat , required.getFieldFloat( \"fakefield\", \"float\" ) );\n    \n    // Required params which are missing: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.get( \"aaaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getFloat( \"f.bad.float\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getInt(   \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getBool(  \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getFloat( \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFieldBool(  \"bad\", \"bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFieldInt(   \"bad\", \"int\"  ); } } ) );\n\n    // Fields with default use their parent value:\n    assertEquals(\n        params.get(   \"aaaa\", \"str\" ), \n        required.get( \"aaaa\", \"str\" ) );\n    assertEquals(\n        params.getInt(   \"f.bad.nnnn\", pint ), \n        required.getInt( \"f.bad.nnnn\", pint ) );\n    \n    // Check default SolrParams\n    Map<String,String> dmap = new HashMap<String, String>();\n    // these are not defined in params\n    dmap.put( \"dstr\"               , \"default\"   );\n    dmap.put( \"dint\"               , \"123\"       );\n    // these are defined in params\n    dmap.put( \"int\"                , \"456\"       );\n    SolrParams defaults = new DefaultSolrParams( params, new MapSolrParams( dmap ) );\n  \n    // in params, not in default\n    assertEquals( pstr                  , defaults.get( \"str\"      ) );\n    // in default, not in params\n    assertEquals( \"default\"             , defaults.get( \"dstr\"      ) );\n    assertEquals( new Integer(123)      , defaults.getInt(  \"dint\"     ) );\n    // in params, overriding defaults\n    assertEquals( pint                  , defaults.getInt(   \"int\"      ) );\n    // in neither params nor defaults\n    assertNull( defaults.get( \"asagdsaga\" ) );\n  }\n\n","sourceOld":"  public void testGetParams() {\n    Map<String,String> pmap = new HashMap<String, String>();\n    pmap.put( \"str\"        , \"string\"   );\n    pmap.put( \"bool\"       , \"true\"     );\n    pmap.put( \"true-0\"     , \"true\"     );\n    pmap.put( \"true-1\"     , \"yes\"      );\n    pmap.put( \"true-2\"     , \"on\"       );\n    pmap.put( \"false-0\"    , \"false\"    );\n    pmap.put( \"false-1\"    , \"off\"      );\n    pmap.put( \"false-2\"    , \"no\"       );\n    pmap.put( \"int\"        , \"100\"      );\n    pmap.put( \"float\"      , \"10.6\"     );\n    pmap.put( \"f.fl.str\"   , \"string\"   );\n    pmap.put( \"f.fl.bool\"  , \"true\"     );\n    pmap.put( \"f.fl.int\"   , \"100\"      );\n    pmap.put( \"f.fl.float\" , \"10.6\"     );\n    pmap.put( \"f.bad.bool\" , \"notbool\"  );\n    pmap.put( \"f.bad.int\"  , \"notint\"   );\n    pmap.put( \"f.bad.float\", \"notfloat\" );\n    final SolrParams params = new MapSolrParams( pmap );\n    \n    // Test the string values we put in directly\n    assertEquals(  \"string\"   , params.get( \"str\"       ) );\n    assertEquals(  \"true\"     , params.get( \"bool\"      ) );\n    assertEquals(  \"100\"      , params.get( \"int\"       ) );\n    assertEquals(  \"10.6\"     , params.get( \"float\"     ) );\n    assertEquals(  \"string\"   , params.get( \"f.fl.str\"    ) );\n    assertEquals(  \"true\"     , params.get( \"f.fl.bool\"   ) );\n    assertEquals(  \"100\"      , params.get( \"f.fl.int\"    ) );\n    assertEquals(  \"10.6\"     , params.get( \"f.fl.float\"  ) );\n    assertEquals(  \"notbool\"  , params.get( \"f.bad.bool\"  ) );\n    assertEquals(  \"notint\"   , params.get( \"f.bad.int\"   ) );\n    assertEquals(  \"notfloat\" , params.get( \"f.bad.float\" ) );\n    \n    final String  pstr = \"string\";\n    final Boolean pbool = Boolean.TRUE;\n    final Integer pint = new Integer( 100 );\n    final Float   pfloat = new Float( 10.6f );\n    \n    // Make sure they parse ok\n    assertEquals( pstr   , params.get(      \"str\"      ) );\n    assertEquals( pbool  , params.getBool(  \"bool\"     ) );\n    assertEquals( pint   , params.getInt(   \"int\"      ) );\n    assertEquals( pfloat , params.getFloat( \"float\"    ) );\n    assertEquals( pbool  , params.getBool(  \"f.fl.bool\"  ) );\n    assertEquals( pint   , params.getInt(   \"f.fl.int\"   ) );\n    assertEquals( pfloat , params.getFloat( \"f.fl.float\" ) );\n    assertEquals( pstr   , params.getFieldParam( \"fl\", \"str\"  ) );\n    assertEquals( pbool  , params.getFieldBool(  \"fl\", \"bool\" ) );\n    assertEquals( pint   , params.getFieldInt(   \"fl\", \"int\"  ) );\n    assertEquals( pfloat , params.getFieldFloat( \"fl\", \"float\" ) );\n    \n    // Test field defaulting (fall through to non-field-specific value)\n    assertEquals( pint   , params.getFieldInt( \"fff\",  \"int\"      ) );\n    \n    // test boolean parsing\n    for( int i=0; i<3; i++ ) {\n      // Must use Boolean rather than boolean reference value to prevent\n      // auto-unboxing ambiguity\n      assertEquals( Boolean.TRUE,  params.getBool( \"true-\"+i  ) );\n      assertEquals( Boolean.FALSE, params.getBool( \"false-\"+i ) );\n    }\n    \n    // Malformed params: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFloat( \"f.bad.float\" ); } } ) );\n    \n    // Ask for params that arent there\n    assertNull( params.get( \"asagdsaga\" ) );\n    assertNull( params.getBool( \"asagdsaga\" ) );\n    assertNull( params.getInt( \"asagdsaga\" ) );\n    assertNull( params.getFloat( \"asagdsaga\" ) );\n    \n    // Get things with defaults\n    assertEquals( pstr                  , params.get(          \"xxx\", pstr   ) );\n    assertEquals( pbool.booleanValue()  , params.getBool(      \"xxx\", pbool   ) );\n    assertEquals( pint.intValue()       , params.getInt(       \"xxx\", pint   ) );\n    assertEquals( pfloat.floatValue()   , params.getFloat(     \"xxx\", pfloat  ) );\n    assertEquals( pbool.booleanValue()  , params.getFieldBool( \"xxx\", \"bool\", pbool ) );\n    assertEquals( pint.intValue()       , params.getFieldInt(  \"xxx\", \"int\", pint  ) );\n    assertEquals( pfloat.floatValue()   , params.getFieldFloat(\"xxx\", \"float\", pfloat  ) );\n    assertEquals( pstr                  , params.getFieldParam(\"xxx\", \"str\", pstr  ) );\n\n    // Required params testing uses decorator\n    final SolrParams required = params.required();\n    \n    // Required params which are present should test same as above\n    assertEquals( pstr   , required.get(      \"str\"      ) );\n    assertEquals( pbool  , required.getBool(  \"bool\"     ) );\n    assertEquals( pint   , required.getInt(   \"int\"      ) );\n    assertEquals( pfloat , required.getFloat( \"float\"    ) );\n    \n    // field value present\n    assertEquals( pbool  , required.getFieldBool(  \"fl\", \"bool\" ) );\n    // field defaulting (fall through to non-field-specific value)\n    assertEquals( pstr   , required.getFieldParams(\"fakefield\", \"str\")[0] );\n    assertEquals( pstr   , required.getFieldParam( \"fakefield\", \"str\"   ) );\n    assertEquals( pbool  , required.getFieldBool(  \"fakefield\", \"bool\"  ) );\n    assertEquals( pint   , required.getFieldInt(   \"fakefield\", \"int\"   ) );\n    assertEquals( pfloat , required.getFieldFloat( \"fakefield\", \"float\" ) );\n    \n    // Required params which are missing: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.get( \"aaaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getFloat( \"f.bad.float\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getInt(   \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getBool(  \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getFloat( \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFieldBool(  \"bad\", \"bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFieldInt(   \"bad\", \"int\"  ); } } ) );\n\n    // Fields with default use their parent value:\n    assertEquals(\n        params.get(   \"aaaa\", \"str\" ), \n        required.get( \"aaaa\", \"str\" ) );\n    assertEquals(\n        params.getInt(   \"f.bad.nnnn\", pint ), \n        required.getInt( \"f.bad.nnnn\", pint ) );\n    \n    // Check default SolrParams\n    Map<String,String> dmap = new HashMap<String, String>();\n    // these are not defined in params\n    dmap.put( \"dstr\"               , \"default\"   );\n    dmap.put( \"dint\"               , \"123\"       );\n    // these are defined in params\n    dmap.put( \"int\"                , \"456\"       );\n    SolrParams defaults = new DefaultSolrParams( params, new MapSolrParams( dmap ) );\n  \n    // in params, not in default\n    assertEquals( pstr                  , defaults.get( \"str\"      ) );\n    // in default, not in params\n    assertEquals( \"default\"             , defaults.get( \"dstr\"      ) );\n    assertEquals( new Integer(123)      , defaults.getInt(  \"dint\"     ) );\n    // in params, overriding defaults\n    assertEquals( pint                  , defaults.getInt(   \"int\"      ) );\n    // in neither params nor defaults\n    assertNull( defaults.get( \"asagdsaga\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"71d977f94c09d5fcc8b02d63e3bb052ebb823988":["3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["71d977f94c09d5fcc8b02d63e3bb052ebb823988"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb":["71d977f94c09d5fcc8b02d63e3bb052ebb823988"],"71d977f94c09d5fcc8b02d63e3bb052ebb823988":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}