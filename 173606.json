{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/DocNameExtractor#docName(IndexSearcher,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/DocNameExtractor#docName(IndexSearcher,int).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/DocNameExtractor#docName(IndexSearcher,int).mjava","sourceNew":"  /**\n   * Extract the name of the input doc from the index.\n   * @param searcher access to the index.\n   * @param docid ID of doc whose name is needed.\n   * @return the name of the input doc as extracted from the index.\n   * @throws IOException if cannot extract the doc name from the index.\n   */\n  public String docName(IndexSearcher searcher, int docid) throws IOException {\n    final List<String> name = new ArrayList<String>();\n    searcher.getIndexReader().document(docid, new StoredFieldVisitor() {\n        @Override\n        public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n          name.add(value);\n        }\n\n        @Override\n        public Status needsField(FieldInfo fieldInfo) throws IOException {\n          if (!name.isEmpty()) {\n            return Status.STOP;\n          } else if (fieldInfo.name.equals(docNameField)) {\n            return Status.YES;\n          } else {\n            return Status.NO;\n          }\n        }\n      });\n    if (name.size() != 0) {\n      return name.get(0);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Extract the name of the input doc from the index.\n   * @param searcher access to the index.\n   * @param docid ID of doc whose name is needed.\n   * @return the name of the input doc as extracted from the index.\n   * @throws IOException if cannot extract the doc name from the index.\n   */\n  public String docName(IndexSearcher searcher, int docid) throws IOException {\n    final List<String> name = new ArrayList<String>();\n    searcher.getIndexReader().document(docid, new StoredFieldVisitor() {\n        @Override\n        public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n          name.add(value);\n        }\n\n        @Override\n        public Status needsField(FieldInfo fieldInfo) throws IOException {\n          if (!name.isEmpty()) {\n            return Status.STOP;\n          } else if (fieldInfo.name.equals(docNameField)) {\n            return Status.YES;\n          } else {\n            return Status.NO;\n          }\n        }\n      });\n    if (name.size() != 0) {\n      return name.get(0);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/DocNameExtractor#docName(IndexSearcher,int).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/DocNameExtractor#docName(IndexSearcher,int).mjava","sourceNew":"  /**\n   * Extract the name of the input doc from the index.\n   * @param searcher access to the index.\n   * @param docid ID of doc whose name is needed.\n   * @return the name of the input doc as extracted from the index.\n   * @throws IOException if cannot extract the doc name from the index.\n   */\n  public String docName(IndexSearcher searcher, int docid) throws IOException {\n    final List<String> name = new ArrayList<String>();\n    searcher.getIndexReader().document(docid, new StoredFieldVisitor() {\n        @Override\n        public void stringField(FieldInfo fieldInfo, String value) {\n          name.add(value);\n        }\n\n        @Override\n        public Status needsField(FieldInfo fieldInfo) {\n          if (!name.isEmpty()) {\n            return Status.STOP;\n          } else if (fieldInfo.name.equals(docNameField)) {\n            return Status.YES;\n          } else {\n            return Status.NO;\n          }\n        }\n      });\n    if (name.size() != 0) {\n      return name.get(0);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Extract the name of the input doc from the index.\n   * @param searcher access to the index.\n   * @param docid ID of doc whose name is needed.\n   * @return the name of the input doc as extracted from the index.\n   * @throws IOException if cannot extract the doc name from the index.\n   */\n  public String docName(IndexSearcher searcher, int docid) throws IOException {\n    final List<String> name = new ArrayList<String>();\n    searcher.getIndexReader().document(docid, new StoredFieldVisitor() {\n        @Override\n        public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n          name.add(value);\n        }\n\n        @Override\n        public Status needsField(FieldInfo fieldInfo) throws IOException {\n          if (!name.isEmpty()) {\n            return Status.STOP;\n          } else if (fieldInfo.name.equals(docNameField)) {\n            return Status.YES;\n          } else {\n            return Status.NO;\n          }\n        }\n      });\n    if (name.size() != 0) {\n      return name.get(0);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":["06584e6e98d592b34e1329b384182f368d2025e8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/DocNameExtractor#docName(IndexSearcher,int).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/DocNameExtractor#docName(IndexSearcher,int).mjava","sourceNew":"  /**\n   * Extract the name of the input doc from the index.\n   * @param searcher access to the index.\n   * @param docid ID of doc whose name is needed.\n   * @return the name of the input doc as extracted from the index.\n   * @throws IOException if cannot extract the doc name from the index.\n   */\n  public String docName(IndexSearcher searcher, int docid) throws IOException {\n    final List<String> name = new ArrayList<String>();\n    searcher.getIndexReader().document(docid, new StoredFieldVisitor() {\n        @Override\n        public void stringField(FieldInfo fieldInfo, String value) {\n          name.add(value);\n        }\n\n        @Override\n        public Status needsField(FieldInfo fieldInfo) {\n          if (!name.isEmpty()) {\n            return Status.STOP;\n          } else if (fieldInfo.name.equals(docNameField)) {\n            return Status.YES;\n          } else {\n            return Status.NO;\n          }\n        }\n      });\n    if (name.size() != 0) {\n      return name.get(0);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Extract the name of the input doc from the index.\n   * @param searcher access to the index.\n   * @param docid ID of doc whose name is needed.\n   * @return the name of the input doc as extracted from the index.\n   * @throws IOException if cannot extract the doc name from the index.\n   */\n  public String docName(IndexSearcher searcher, int docid) throws IOException {\n    final List<String> name = new ArrayList<String>();\n    searcher.getIndexReader().document(docid, new StoredFieldVisitor() {\n        @Override\n        public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n          name.add(value);\n        }\n\n        @Override\n        public Status needsField(FieldInfo fieldInfo) throws IOException {\n          if (!name.isEmpty()) {\n            return Status.STOP;\n          } else if (fieldInfo.name.equals(docNameField)) {\n            return Status.YES;\n          } else {\n            return Status.NO;\n          }\n        }\n      });\n    if (name.size() != 0) {\n      return name.get(0);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/DocNameExtractor#docName(IndexSearcher,int).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/DocNameExtractor#docName(IndexSearcher,int).mjava","sourceNew":"  /**\n   * Extract the name of the input doc from the index.\n   * @param searcher access to the index.\n   * @param docid ID of doc whose name is needed.\n   * @return the name of the input doc as extracted from the index.\n   * @throws IOException if cannot extract the doc name from the index.\n   */\n  public String docName(IndexSearcher searcher, int docid) throws IOException {\n    final List<String> name = new ArrayList<String>();\n    searcher.getIndexReader().document(docid, new StoredFieldVisitor() {\n        @Override\n        public void stringField(FieldInfo fieldInfo, String value) {\n          name.add(value);\n        }\n\n        @Override\n        public Status needsField(FieldInfo fieldInfo) {\n          if (!name.isEmpty()) {\n            return Status.STOP;\n          } else if (fieldInfo.name.equals(docNameField)) {\n            return Status.YES;\n          } else {\n            return Status.NO;\n          }\n        }\n      });\n    if (name.size() != 0) {\n      return name.get(0);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Extract the name of the input doc from the index.\n   * @param searcher access to the index.\n   * @param docid ID of doc whose name is needed.\n   * @return the name of the input doc as extracted from the index.\n   * @throws IOException if cannot extract the doc name from the index.\n   */\n  public String docName(IndexSearcher searcher, int docid) throws IOException {\n    final List<String> name = new ArrayList<String>();\n    searcher.getIndexReader().document(docid, new StoredFieldVisitor() {\n        @Override\n        public void stringField(FieldInfo fieldInfo, String value) {\n          name.add(value);\n        }\n\n        @Override\n        public Status needsField(FieldInfo fieldInfo) {\n          if (!name.isEmpty()) {\n            return Status.STOP;\n          } else if (fieldInfo.name.equals(docNameField)) {\n            return Status.YES;\n          } else {\n            return Status.NO;\n          }\n        }\n      });\n    if (name.size() != 0) {\n      return name.get(0);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/DocNameExtractor#docName(IndexSearcher,int).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/DocNameExtractor#docName(IndexSearcher,int).mjava","sourceNew":"  /**\n   * Extract the name of the input doc from the index.\n   * @param searcher access to the index.\n   * @param docid ID of doc whose name is needed.\n   * @return the name of the input doc as extracted from the index.\n   * @throws IOException if cannot extract the doc name from the index.\n   */\n  public String docName(IndexSearcher searcher, int docid) throws IOException {\n    final List<String> name = new ArrayList<String>();\n    searcher.getIndexReader().document(docid, new StoredFieldVisitor() {\n        @Override\n        public void stringField(FieldInfo fieldInfo, String value) {\n          name.add(value);\n        }\n\n        @Override\n        public Status needsField(FieldInfo fieldInfo) {\n          if (!name.isEmpty()) {\n            return Status.STOP;\n          } else if (fieldInfo.name.equals(docNameField)) {\n            return Status.YES;\n          } else {\n            return Status.NO;\n          }\n        }\n      });\n    if (name.size() != 0) {\n      return name.get(0);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Extract the name of the input doc from the index.\n   * @param searcher access to the index.\n   * @param docid ID of doc whose name is needed.\n   * @return the name of the input doc as extracted from the index.\n   * @throws IOException if cannot extract the doc name from the index.\n   */\n  public String docName(IndexSearcher searcher, int docid) throws IOException {\n    final List<String> name = new ArrayList<String>();\n    searcher.getIndexReader().document(docid, new StoredFieldVisitor() {\n        @Override\n        public void stringField(FieldInfo fieldInfo, String value) {\n          name.add(value);\n        }\n\n        @Override\n        public Status needsField(FieldInfo fieldInfo) {\n          if (!name.isEmpty()) {\n            return Status.STOP;\n          } else if (fieldInfo.name.equals(docNameField)) {\n            return Status.YES;\n          } else {\n            return Status.NO;\n          }\n        }\n      });\n    if (name.size() != 0) {\n      return name.get(0);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/DocNameExtractor#docName(IndexSearcher,int).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/DocNameExtractor#docName(IndexSearcher,int).mjava","sourceNew":"  /**\n   * Extract the name of the input doc from the index.\n   * @param searcher access to the index.\n   * @param docid ID of doc whose name is needed.\n   * @return the name of the input doc as extracted from the index.\n   * @throws IOException if cannot extract the doc name from the index.\n   */\n  public String docName(IndexSearcher searcher, int docid) throws IOException {\n    final List<String> name = new ArrayList<>();\n    searcher.getIndexReader().document(docid, new StoredFieldVisitor() {\n        @Override\n        public void stringField(FieldInfo fieldInfo, String value) {\n          name.add(value);\n        }\n\n        @Override\n        public Status needsField(FieldInfo fieldInfo) {\n          if (!name.isEmpty()) {\n            return Status.STOP;\n          } else if (fieldInfo.name.equals(docNameField)) {\n            return Status.YES;\n          } else {\n            return Status.NO;\n          }\n        }\n      });\n    if (name.size() != 0) {\n      return name.get(0);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Extract the name of the input doc from the index.\n   * @param searcher access to the index.\n   * @param docid ID of doc whose name is needed.\n   * @return the name of the input doc as extracted from the index.\n   * @throws IOException if cannot extract the doc name from the index.\n   */\n  public String docName(IndexSearcher searcher, int docid) throws IOException {\n    final List<String> name = new ArrayList<String>();\n    searcher.getIndexReader().document(docid, new StoredFieldVisitor() {\n        @Override\n        public void stringField(FieldInfo fieldInfo, String value) {\n          name.add(value);\n        }\n\n        @Override\n        public Status needsField(FieldInfo fieldInfo) {\n          if (!name.isEmpty()) {\n            return Status.STOP;\n          } else if (fieldInfo.name.equals(docNameField)) {\n            return Status.YES;\n          } else {\n            return Status.NO;\n          }\n        }\n      });\n    if (name.size() != 0) {\n      return name.get(0);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"399d127639ae13222a8545b50e0ac545a6bcd2d7","date":1428704686,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/DocNameExtractor#docName(IndexSearcher,int).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/DocNameExtractor#docName(IndexSearcher,int).mjava","sourceNew":"  /**\n   * Extract the name of the input doc from the index.\n   * @param searcher access to the index.\n   * @param docid ID of doc whose name is needed.\n   * @return the name of the input doc as extracted from the index.\n   * @throws IOException if cannot extract the doc name from the index.\n   */\n  public String docName(IndexSearcher searcher, int docid) throws IOException {\n    final List<String> name = new ArrayList<>();\n    searcher.getIndexReader().document(docid, new StoredFieldVisitor() {\n        @Override\n        public void stringField(FieldInfo fieldInfo, byte[] bytes) {\n          String value = new String(bytes, StandardCharsets.UTF_8);\n          name.add(value);\n        }\n\n        @Override\n        public Status needsField(FieldInfo fieldInfo) {\n          if (!name.isEmpty()) {\n            return Status.STOP;\n          } else if (fieldInfo.name.equals(docNameField)) {\n            return Status.YES;\n          } else {\n            return Status.NO;\n          }\n        }\n      });\n    if (name.size() != 0) {\n      return name.get(0);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Extract the name of the input doc from the index.\n   * @param searcher access to the index.\n   * @param docid ID of doc whose name is needed.\n   * @return the name of the input doc as extracted from the index.\n   * @throws IOException if cannot extract the doc name from the index.\n   */\n  public String docName(IndexSearcher searcher, int docid) throws IOException {\n    final List<String> name = new ArrayList<>();\n    searcher.getIndexReader().document(docid, new StoredFieldVisitor() {\n        @Override\n        public void stringField(FieldInfo fieldInfo, String value) {\n          name.add(value);\n        }\n\n        @Override\n        public Status needsField(FieldInfo fieldInfo) {\n          if (!name.isEmpty()) {\n            return Status.STOP;\n          } else if (fieldInfo.name.equals(docNameField)) {\n            return Status.YES;\n          } else {\n            return Status.NO;\n          }\n        }\n      });\n    if (name.size() != 0) {\n      return name.get(0);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"500188ac33da6ce742a5b18858f34701ef16c77a","date":1558462722,"type":3,"author":"Namgyu Kim","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/DocNameExtractor#docName(IndexSearcher,int).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/DocNameExtractor#docName(IndexSearcher,int).mjava","sourceNew":"  /**\n   * Extract the name of the input doc from the index.\n   * @param searcher access to the index.\n   * @param docid ID of doc whose name is needed.\n   * @return the name of the input doc as extracted from the index.\n   * @throws IOException if cannot extract the doc name from the index.\n   */\n  public String docName(IndexSearcher searcher, int docid) throws IOException {\n    final List<String> name = new ArrayList<>();\n    searcher.getIndexReader().document(docid, new StoredFieldVisitor() {\n        @Override\n        public void stringField(FieldInfo fieldInfo, String value) {\n          name.add(Objects.requireNonNull(value, \"String value should not be null\"));\n        }\n\n        @Override\n        public Status needsField(FieldInfo fieldInfo) {\n          if (!name.isEmpty()) {\n            return Status.STOP;\n          } else if (fieldInfo.name.equals(docNameField)) {\n            return Status.YES;\n          } else {\n            return Status.NO;\n          }\n        }\n      });\n    if (name.size() != 0) {\n      return name.get(0);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Extract the name of the input doc from the index.\n   * @param searcher access to the index.\n   * @param docid ID of doc whose name is needed.\n   * @return the name of the input doc as extracted from the index.\n   * @throws IOException if cannot extract the doc name from the index.\n   */\n  public String docName(IndexSearcher searcher, int docid) throws IOException {\n    final List<String> name = new ArrayList<>();\n    searcher.getIndexReader().document(docid, new StoredFieldVisitor() {\n        @Override\n        public void stringField(FieldInfo fieldInfo, byte[] bytes) {\n          String value = new String(bytes, StandardCharsets.UTF_8);\n          name.add(value);\n        }\n\n        @Override\n        public Status needsField(FieldInfo fieldInfo) {\n          if (!name.isEmpty()) {\n            return Status.STOP;\n          } else if (fieldInfo.name.equals(docNameField)) {\n            return Status.YES;\n          } else {\n            return Status.NO;\n          }\n        }\n      });\n    if (name.size() != 0) {\n      return name.get(0);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"500188ac33da6ce742a5b18858f34701ef16c77a":["399d127639ae13222a8545b50e0ac545a6bcd2d7"],"399d127639ae13222a8545b50e0ac545a6bcd2d7":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["500188ac33da6ce742a5b18858f34701ef16c77a"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["399d127639ae13222a8545b50e0ac545a6bcd2d7"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"500188ac33da6ce742a5b18858f34701ef16c77a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"399d127639ae13222a8545b50e0ac545a6bcd2d7":["500188ac33da6ce742a5b18858f34701ef16c77a"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}