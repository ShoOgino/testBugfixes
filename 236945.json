{"path":"solr/core/src/test/org/apache/solr/security/BaseTestRuleBasedAuthorizationPlugin.Perms#runCmd(String,boolean).mjava","commits":[{"id":"8076096f334b0665d0a69a63ee98ac09baad402b","date":1589405373,"type":1,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BaseTestRuleBasedAuthorizationPlugin.Perms#runCmd(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestRuleBasedAuthorizationPlugin.Perms#runCmd(String,boolean).mjava","sourceNew":"    public void runCmd(String cmds, boolean failOnError) throws IOException {\n      parsedCommands = CommandOperation.parse(new StringReader(cmds));\n      LinkedList ll = new LinkedList();\n      Map<String, Object> edited = plugin.edit(conf, parsedCommands);\n      if(edited!= null) conf = edited;\n      List<Map> maps = captureErrors(parsedCommands);\n      if(failOnError){\n        assertTrue(\"unexpected error ,\"+maps , maps.isEmpty());\n      } else {\n        assertFalse(\"expected error\", maps.isEmpty());\n      }\n    }\n\n","sourceOld":"    public void runCmd(String cmds, boolean failOnError) throws IOException {\n      parsedCommands = CommandOperation.parse(new StringReader(cmds));\n      LinkedList ll = new LinkedList();\n      Map<String, Object> edited = plugin.edit(conf, parsedCommands);\n      if(edited!= null) conf = edited;\n      List<Map> maps = captureErrors(parsedCommands);\n      if(failOnError){\n        assertTrue(\"unexpected error ,\"+maps , maps.isEmpty());\n      } else {\n        assertFalse(\"expected error\", maps.isEmpty());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BaseTestRuleBasedAuthorizationPlugin.Perms#runCmd(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BaseTestRuleBasedAuthorizationPlugin.Perms#runCmd(String,boolean).mjava","sourceNew":"    public void runCmd(String cmds, boolean failOnError) throws IOException {\n      parsedCommands = CommandOperation.parse(new StringReader(cmds));\n      @SuppressWarnings({\"rawtypes\"})\n      LinkedList ll = new LinkedList();\n      Map<String, Object> edited = plugin.edit(conf, parsedCommands);\n      if(edited!= null) conf = edited;\n      @SuppressWarnings({\"rawtypes\"})\n      List<Map> maps = captureErrors(parsedCommands);\n      if(failOnError){\n        assertTrue(\"unexpected error ,\"+maps , maps.isEmpty());\n      } else {\n        assertFalse(\"expected error\", maps.isEmpty());\n      }\n    }\n\n","sourceOld":"    public void runCmd(String cmds, boolean failOnError) throws IOException {\n      parsedCommands = CommandOperation.parse(new StringReader(cmds));\n      LinkedList ll = new LinkedList();\n      Map<String, Object> edited = plugin.edit(conf, parsedCommands);\n      if(edited!= null) conf = edited;\n      List<Map> maps = captureErrors(parsedCommands);\n      if(failOnError){\n        assertTrue(\"unexpected error ,\"+maps , maps.isEmpty());\n      } else {\n        assertFalse(\"expected error\", maps.isEmpty());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e0ac06a3dde3a146042d8eb8820dc45326e9263","date":1594139870,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BaseTestRuleBasedAuthorizationPlugin.Perms#runCmd(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BaseTestRuleBasedAuthorizationPlugin.Perms#runCmd(String,boolean).mjava","sourceNew":"    public void runCmd(String cmds, boolean failOnError) throws IOException {\n      parsedCommands = CommandOperation.parse(new StringReader(cmds));\n      Map<String, Object> edited = plugin.edit(conf, parsedCommands);\n      if(edited!= null) conf = edited;\n      @SuppressWarnings({\"rawtypes\"})\n      List<Map> maps = captureErrors(parsedCommands);\n      if(failOnError){\n        assertTrue(\"unexpected error ,\"+maps , maps.isEmpty());\n      } else {\n        assertFalse(\"expected error\", maps.isEmpty());\n      }\n    }\n\n","sourceOld":"    public void runCmd(String cmds, boolean failOnError) throws IOException {\n      parsedCommands = CommandOperation.parse(new StringReader(cmds));\n      @SuppressWarnings({\"rawtypes\"})\n      LinkedList ll = new LinkedList();\n      Map<String, Object> edited = plugin.edit(conf, parsedCommands);\n      if(edited!= null) conf = edited;\n      @SuppressWarnings({\"rawtypes\"})\n      List<Map> maps = captureErrors(parsedCommands);\n      if(failOnError){\n        assertTrue(\"unexpected error ,\"+maps , maps.isEmpty());\n      } else {\n        assertFalse(\"expected error\", maps.isEmpty());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8076096f334b0665d0a69a63ee98ac09baad402b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5e0ac06a3dde3a146042d8eb8820dc45326e9263":["e98520789adb1d5ad05afb4956eca0944a929688"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5e0ac06a3dde3a146042d8eb8820dc45326e9263"],"e98520789adb1d5ad05afb4956eca0944a929688":["8076096f334b0665d0a69a63ee98ac09baad402b"]},"commit2Childs":{"8076096f334b0665d0a69a63ee98ac09baad402b":["e98520789adb1d5ad05afb4956eca0944a929688"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8076096f334b0665d0a69a63ee98ac09baad402b"],"5e0ac06a3dde3a146042d8eb8820dc45326e9263":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e98520789adb1d5ad05afb4956eca0944a929688":["5e0ac06a3dde3a146042d8eb8820dc45326e9263"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}