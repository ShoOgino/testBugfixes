{"path":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#addAndDelete(AddUpdateCommand,List[Query]).mjava","commits":[{"id":"fb999ed3fc6e419b9104de9ebfe62ace27f31d5f","date":1341327930,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#addAndDelete(AddUpdateCommand,List[Query]).mjava","pathOld":"/dev/null","sourceNew":"  /** Add a document execute the deletes as atomically as possible */\n  private void addAndDelete(AddUpdateCommand cmd, List<Query> dbqList) throws IOException {\n    Document luceneDocument = cmd.getLuceneDocument();\n    Term idTerm = new Term(idField.getName(), cmd.getIndexedId());\n\n    // see comment in deleteByQuery\n    synchronized (this) {\n      IndexWriter writer = solrCoreState.getIndexWriter(core);\n\n      writer.updateDocument(idTerm, luceneDocument);\n\n      for (Query q : dbqList) {\n        writer.deleteDocuments(q);\n      }\n\n      if (ulog != null) ulog.add(cmd, true);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c3465573b8d89796a7dc94c1b6461292f8708c6d","c9767265f21f7d1246b13dd7e73e8a4ad88b4384"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c3465573b8d89796a7dc94c1b6461292f8708c6d","date":1341336998,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#addAndDelete(AddUpdateCommand,List[Query]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#addAndDelete(AddUpdateCommand,List[Query]).mjava","sourceNew":"  /** Add a document execute the deletes as atomically as possible */\n  private void addAndDelete(AddUpdateCommand cmd, List<Query> dbqList) throws IOException {\n    Document luceneDocument = cmd.getLuceneDocument();\n    Term idTerm = new Term(idField.getName(), cmd.getIndexedId());\n\n    // see comment in deleteByQuery\n    synchronized (this) {\n      IndexWriter writer = solrCoreState.getIndexWriter(core);\n\n      writer.updateDocument(idTerm, luceneDocument, core.getSchema().getAnalyzer());\n\n      for (Query q : dbqList) {\n        writer.deleteDocuments(q);\n      }\n\n      if (ulog != null) ulog.add(cmd, true);\n    }\n\n  }\n\n","sourceOld":"  /** Add a document execute the deletes as atomically as possible */\n  private void addAndDelete(AddUpdateCommand cmd, List<Query> dbqList) throws IOException {\n    Document luceneDocument = cmd.getLuceneDocument();\n    Term idTerm = new Term(idField.getName(), cmd.getIndexedId());\n\n    // see comment in deleteByQuery\n    synchronized (this) {\n      IndexWriter writer = solrCoreState.getIndexWriter(core);\n\n      writer.updateDocument(idTerm, luceneDocument);\n\n      for (Query q : dbqList) {\n        writer.deleteDocuments(q);\n      }\n\n      if (ulog != null) ulog.add(cmd, true);\n    }\n\n  }\n\n","bugFix":["fb999ed3fc6e419b9104de9ebfe62ace27f31d5f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"08bcaef9e931052e4ca24133a89cc6aefaf61829","date":1342469326,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#addAndDelete(AddUpdateCommand,List[Query]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#addAndDelete(AddUpdateCommand,List[Query]).mjava","sourceNew":"  /** Add a document execute the deletes as atomically as possible */\n  private void addAndDelete(AddUpdateCommand cmd, List<Query> dbqList)\n      throws IOException {\n    Document luceneDocument = cmd.getLuceneDocument();\n    Term idTerm = new Term(idField.getName(), cmd.getIndexedId());\n    \n    // see comment in deleteByQuery\n    synchronized (this) {\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        IndexWriter writer = iw.get();\n        writer.updateDocument(idTerm, luceneDocument, core.getSchema()\n            .getAnalyzer());\n        \n        for (Query q : dbqList) {\n          writer.deleteDocuments(q);\n        }\n      } finally {\n        iw.decref();\n      }\n      \n      if (ulog != null) ulog.add(cmd, true);\n    }\n    \n  }\n\n","sourceOld":"  /** Add a document execute the deletes as atomically as possible */\n  private void addAndDelete(AddUpdateCommand cmd, List<Query> dbqList) throws IOException {\n    Document luceneDocument = cmd.getLuceneDocument();\n    Term idTerm = new Term(idField.getName(), cmd.getIndexedId());\n\n    // see comment in deleteByQuery\n    synchronized (this) {\n      IndexWriter writer = solrCoreState.getIndexWriter(core);\n\n      writer.updateDocument(idTerm, luceneDocument, core.getSchema().getAnalyzer());\n\n      for (Query q : dbqList) {\n        writer.deleteDocuments(q);\n      }\n\n      if (ulog != null) ulog.add(cmd, true);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#addAndDelete(AddUpdateCommand,List[Query]).mjava","pathOld":"/dev/null","sourceNew":"  /** Add a document execute the deletes as atomically as possible */\n  private void addAndDelete(AddUpdateCommand cmd, List<Query> dbqList)\n      throws IOException {\n    Document luceneDocument = cmd.getLuceneDocument();\n    Term idTerm = new Term(idField.getName(), cmd.getIndexedId());\n    \n    // see comment in deleteByQuery\n    synchronized (this) {\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        IndexWriter writer = iw.get();\n        writer.updateDocument(idTerm, luceneDocument, core.getSchema()\n            .getAnalyzer());\n        \n        for (Query q : dbqList) {\n          writer.deleteDocuments(q);\n        }\n      } finally {\n        iw.decref();\n      }\n      \n      if (ulog != null) ulog.add(cmd, true);\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9767265f21f7d1246b13dd7e73e8a4ad88b4384","date":1342986300,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#addAndDelete(AddUpdateCommand,List[Query]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#addAndDelete(AddUpdateCommand,List[Query]).mjava","sourceNew":"  /** Add a document execute the deletes as atomically as possible */\n  private void addAndDelete(AddUpdateCommand cmd, List<Query> dbqList)\n      throws IOException {\n    Document luceneDocument = cmd.getLuceneDocument();\n    Term idTerm = new Term(idField.getName(), cmd.getIndexedId());\n    \n    // see comment in deleteByQuery\n    synchronized (solrCoreState) {\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        IndexWriter writer = iw.get();\n        writer.updateDocument(idTerm, luceneDocument, core.getSchema()\n            .getAnalyzer());\n        \n        for (Query q : dbqList) {\n          writer.deleteDocuments(q);\n        }\n      } finally {\n        iw.decref();\n      }\n      \n      if (ulog != null) ulog.add(cmd, true);\n    }\n    \n  }\n\n","sourceOld":"  /** Add a document execute the deletes as atomically as possible */\n  private void addAndDelete(AddUpdateCommand cmd, List<Query> dbqList)\n      throws IOException {\n    Document luceneDocument = cmd.getLuceneDocument();\n    Term idTerm = new Term(idField.getName(), cmd.getIndexedId());\n    \n    // see comment in deleteByQuery\n    synchronized (this) {\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        IndexWriter writer = iw.get();\n        writer.updateDocument(idTerm, luceneDocument, core.getSchema()\n            .getAnalyzer());\n        \n        for (Query q : dbqList) {\n          writer.deleteDocuments(q);\n        }\n      } finally {\n        iw.decref();\n      }\n      \n      if (ulog != null) ulog.add(cmd, true);\n    }\n    \n  }\n\n","bugFix":["fb999ed3fc6e419b9104de9ebfe62ace27f31d5f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#addAndDelete(AddUpdateCommand,List[Query]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#addAndDelete(AddUpdateCommand,List[Query]).mjava","sourceNew":"  /** Add a document execute the deletes as atomically as possible */\n  private void addAndDelete(AddUpdateCommand cmd, List<Query> dbqList)\n      throws IOException {\n    Document luceneDocument = cmd.getLuceneDocument();\n    Term idTerm = new Term(idField.getName(), cmd.getIndexedId());\n    \n    // see comment in deleteByQuery\n    synchronized (solrCoreState) {\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        IndexWriter writer = iw.get();\n        writer.updateDocument(idTerm, luceneDocument, core.getSchema()\n            .getAnalyzer());\n        \n        for (Query q : dbqList) {\n          writer.deleteDocuments(q);\n        }\n      } finally {\n        iw.decref();\n      }\n      \n      if (ulog != null) ulog.add(cmd, true);\n    }\n    \n  }\n\n","sourceOld":"  /** Add a document execute the deletes as atomically as possible */\n  private void addAndDelete(AddUpdateCommand cmd, List<Query> dbqList)\n      throws IOException {\n    Document luceneDocument = cmd.getLuceneDocument();\n    Term idTerm = new Term(idField.getName(), cmd.getIndexedId());\n    \n    // see comment in deleteByQuery\n    synchronized (this) {\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        IndexWriter writer = iw.get();\n        writer.updateDocument(idTerm, luceneDocument, core.getSchema()\n            .getAnalyzer());\n        \n        for (Query q : dbqList) {\n          writer.deleteDocuments(q);\n        }\n      } finally {\n        iw.decref();\n      }\n      \n      if (ulog != null) ulog.add(cmd, true);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#addAndDelete(AddUpdateCommand,List[Query]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#addAndDelete(AddUpdateCommand,List[Query]).mjava","sourceNew":"  /** Add a document execute the deletes as atomically as possible */\n  private void addAndDelete(AddUpdateCommand cmd, List<Query> dbqList)\n      throws IOException {\n    Document luceneDocument = cmd.getLuceneDocument();\n    Term idTerm = new Term(idField.getName(), cmd.getIndexedId());\n    \n    // see comment in deleteByQuery\n    synchronized (solrCoreState) {\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        IndexWriter writer = iw.get();\n        writer.updateDocument(idTerm, luceneDocument, core.getSchema()\n            .getAnalyzer());\n        \n        for (Query q : dbqList) {\n          writer.deleteDocuments(q);\n        }\n      } finally {\n        iw.decref();\n      }\n      \n      if (ulog != null) ulog.add(cmd, true);\n    }\n    \n  }\n\n","sourceOld":"  /** Add a document execute the deletes as atomically as possible */\n  private void addAndDelete(AddUpdateCommand cmd, List<Query> dbqList) throws IOException {\n    Document luceneDocument = cmd.getLuceneDocument();\n    Term idTerm = new Term(idField.getName(), cmd.getIndexedId());\n\n    // see comment in deleteByQuery\n    synchronized (this) {\n      IndexWriter writer = solrCoreState.getIndexWriter(core);\n\n      writer.updateDocument(idTerm, luceneDocument, core.getSchema().getAnalyzer());\n\n      for (Query q : dbqList) {\n        writer.deleteDocuments(q);\n      }\n\n      if (ulog != null) ulog.add(cmd, true);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1381b91b03f7409d8d548c7070dbc615931a0f50","date":1343667369,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#addAndDelete(AddUpdateCommand,List[Query]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#addAndDelete(AddUpdateCommand,List[Query]).mjava","sourceNew":"  /** Add a document execute the deletes as atomically as possible */\n  private void addAndDelete(AddUpdateCommand cmd, List<Query> dbqList)\n      throws IOException {\n    Document luceneDocument = cmd.getLuceneDocument();\n    Term idTerm = new Term(idField.getName(), cmd.getIndexedId());\n    \n    // see comment in deleteByQuery\n    synchronized (solrCoreState.getUpdateLock()) {\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        IndexWriter writer = iw.get();\n        writer.updateDocument(idTerm, luceneDocument, core.getSchema()\n            .getAnalyzer());\n        \n        for (Query q : dbqList) {\n          writer.deleteDocuments(q);\n        }\n      } finally {\n        iw.decref();\n      }\n      \n      if (ulog != null) ulog.add(cmd, true);\n    }\n    \n  }\n\n","sourceOld":"  /** Add a document execute the deletes as atomically as possible */\n  private void addAndDelete(AddUpdateCommand cmd, List<Query> dbqList)\n      throws IOException {\n    Document luceneDocument = cmd.getLuceneDocument();\n    Term idTerm = new Term(idField.getName(), cmd.getIndexedId());\n    \n    // see comment in deleteByQuery\n    synchronized (solrCoreState) {\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        IndexWriter writer = iw.get();\n        writer.updateDocument(idTerm, luceneDocument, core.getSchema()\n            .getAnalyzer());\n        \n        for (Query q : dbqList) {\n          writer.deleteDocuments(q);\n        }\n      } finally {\n        iw.decref();\n      }\n      \n      if (ulog != null) ulog.add(cmd, true);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#addAndDelete(AddUpdateCommand,List[Query]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#addAndDelete(AddUpdateCommand,List[Query]).mjava","sourceNew":"  /** Add a document execute the deletes as atomically as possible */\n  private void addAndDelete(AddUpdateCommand cmd, List<Query> dbqList)\n      throws IOException {\n    Document luceneDocument = cmd.getLuceneDocument();\n    Term idTerm = new Term(idField.getName(), cmd.getIndexedId());\n    \n    // see comment in deleteByQuery\n    synchronized (solrCoreState.getUpdateLock()) {\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        IndexWriter writer = iw.get();\n        writer.updateDocument(idTerm, luceneDocument, core.getSchema()\n            .getAnalyzer());\n        \n        for (Query q : dbqList) {\n          writer.deleteDocuments(q);\n        }\n      } finally {\n        iw.decref();\n      }\n      \n      if (ulog != null) ulog.add(cmd, true);\n    }\n    \n  }\n\n","sourceOld":"  /** Add a document execute the deletes as atomically as possible */\n  private void addAndDelete(AddUpdateCommand cmd, List<Query> dbqList)\n      throws IOException {\n    Document luceneDocument = cmd.getLuceneDocument();\n    Term idTerm = new Term(idField.getName(), cmd.getIndexedId());\n    \n    // see comment in deleteByQuery\n    synchronized (solrCoreState) {\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        IndexWriter writer = iw.get();\n        writer.updateDocument(idTerm, luceneDocument, core.getSchema()\n            .getAnalyzer());\n        \n        for (Query q : dbqList) {\n          writer.deleteDocuments(q);\n        }\n      } finally {\n        iw.decref();\n      }\n      \n      if (ulog != null) ulog.add(cmd, true);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#addAndDelete(AddUpdateCommand,List[Query]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#addAndDelete(AddUpdateCommand,List[Query]).mjava","sourceNew":"  /** Add a document execute the deletes as atomically as possible */\n  private void addAndDelete(AddUpdateCommand cmd, List<Query> dbqList)\n      throws IOException {\n    Document luceneDocument = cmd.getLuceneDocument();\n    Term idTerm = new Term(idField.getName(), cmd.getIndexedId());\n    \n    // see comment in deleteByQuery\n    synchronized (solrCoreState.getUpdateLock()) {\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        IndexWriter writer = iw.get();\n        writer.updateDocument(idTerm, luceneDocument, core.getSchema()\n            .getAnalyzer());\n        \n        for (Query q : dbqList) {\n          writer.deleteDocuments(q);\n        }\n      } finally {\n        iw.decref();\n      }\n      \n      if (ulog != null) ulog.add(cmd, true);\n    }\n    \n  }\n\n","sourceOld":"  /** Add a document execute the deletes as atomically as possible */\n  private void addAndDelete(AddUpdateCommand cmd, List<Query> dbqList)\n      throws IOException {\n    Document luceneDocument = cmd.getLuceneDocument();\n    Term idTerm = new Term(idField.getName(), cmd.getIndexedId());\n    \n    // see comment in deleteByQuery\n    synchronized (solrCoreState) {\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        IndexWriter writer = iw.get();\n        writer.updateDocument(idTerm, luceneDocument, core.getSchema()\n            .getAnalyzer());\n        \n        for (Query q : dbqList) {\n          writer.deleteDocuments(q);\n        }\n      } finally {\n        iw.decref();\n      }\n      \n      if (ulog != null) ulog.add(cmd, true);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#addAndDelete(AddUpdateCommand,List[Query]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#addAndDelete(AddUpdateCommand,List[Query]).mjava","sourceNew":"  /** Add a document execute the deletes as atomically as possible */\n  private void addAndDelete(AddUpdateCommand cmd, List<Query> dbqList)\n      throws IOException {\n    Document luceneDocument = cmd.getLuceneDocument();\n    Term idTerm = new Term(idField.getName(), cmd.getIndexedId());\n    \n    // see comment in deleteByQuery\n    synchronized (solrCoreState.getUpdateLock()) {\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        IndexWriter writer = iw.get();\n        writer.updateDocument(idTerm, luceneDocument, cmd.getReq().getSchema()\n            .getAnalyzer());\n        \n        for (Query q : dbqList) {\n          writer.deleteDocuments(q);\n        }\n      } finally {\n        iw.decref();\n      }\n      \n      if (ulog != null) ulog.add(cmd, true);\n    }\n    \n  }\n\n","sourceOld":"  /** Add a document execute the deletes as atomically as possible */\n  private void addAndDelete(AddUpdateCommand cmd, List<Query> dbqList)\n      throws IOException {\n    Document luceneDocument = cmd.getLuceneDocument();\n    Term idTerm = new Term(idField.getName(), cmd.getIndexedId());\n    \n    // see comment in deleteByQuery\n    synchronized (solrCoreState.getUpdateLock()) {\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        IndexWriter writer = iw.get();\n        writer.updateDocument(idTerm, luceneDocument, core.getSchema()\n            .getAnalyzer());\n        \n        for (Query q : dbqList) {\n          writer.deleteDocuments(q);\n        }\n      } finally {\n        iw.decref();\n      }\n      \n      if (ulog != null) ulog.add(cmd, true);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"123698fbe83b595f9e084f0019cd35ab4a01d7f7","date":1399070065,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#addAndDelete(AddUpdateCommand,List[Query]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#addAndDelete(AddUpdateCommand,List[Query]).mjava","sourceNew":"  /** Add a document execute the deletes as atomically as possible */\n  private void addAndDelete(AddUpdateCommand cmd, List<Query> dbqList)\n      throws IOException {\n    Document luceneDocument = cmd.getLuceneDocument();\n    Term idTerm = new Term(idField.getName(), cmd.getIndexedId());\n    \n    // see comment in deleteByQuery\n    synchronized (solrCoreState.getUpdateLock()) {\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        IndexWriter writer = iw.get();\n        writer.updateDocument(idTerm, luceneDocument, cmd.getReq().getSchema()\n            .getIndexAnalyzer());\n        \n        for (Query q : dbqList) {\n          writer.deleteDocuments(q);\n        }\n      } finally {\n        iw.decref();\n      }\n      \n      if (ulog != null) ulog.add(cmd, true);\n    }\n    \n  }\n\n","sourceOld":"  /** Add a document execute the deletes as atomically as possible */\n  private void addAndDelete(AddUpdateCommand cmd, List<Query> dbqList)\n      throws IOException {\n    Document luceneDocument = cmd.getLuceneDocument();\n    Term idTerm = new Term(idField.getName(), cmd.getIndexedId());\n    \n    // see comment in deleteByQuery\n    synchronized (solrCoreState.getUpdateLock()) {\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        IndexWriter writer = iw.get();\n        writer.updateDocument(idTerm, luceneDocument, cmd.getReq().getSchema()\n            .getAnalyzer());\n        \n        for (Query q : dbqList) {\n          writer.deleteDocuments(q);\n        }\n      } finally {\n        iw.decref();\n      }\n      \n      if (ulog != null) ulog.add(cmd, true);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7c19b4ecf30c060f4d2e29c25f027e73262713d","date":1400023065,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#addAndDelete(AddUpdateCommand,List[Query]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#addAndDelete(AddUpdateCommand,List[Query]).mjava","sourceNew":"  /** Add a document execute the deletes as atomically as possible */\n  private void addAndDelete(AddUpdateCommand cmd, List<Query> dbqList)\n      throws IOException {\n    Document luceneDocument = cmd.getLuceneDocument();\n    Term idTerm = new Term(idField.getName(), cmd.getIndexedId());\n    \n    // see comment in deleteByQuery\n    synchronized (solrCoreState.getUpdateLock()) {\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        IndexWriter writer = iw.get();\n        writer.updateDocument(idTerm, luceneDocument, cmd.getReq().getSchema()\n            .getIndexAnalyzer());\n        \n        for (Query q : dbqList) {\n          writer.deleteDocuments(new DeleteByQueryWrapper(q, core.getLatestSchema()));\n        }\n      } finally {\n        iw.decref();\n      }\n      \n      if (ulog != null) ulog.add(cmd, true);\n    }\n    \n  }\n\n","sourceOld":"  /** Add a document execute the deletes as atomically as possible */\n  private void addAndDelete(AddUpdateCommand cmd, List<Query> dbqList)\n      throws IOException {\n    Document luceneDocument = cmd.getLuceneDocument();\n    Term idTerm = new Term(idField.getName(), cmd.getIndexedId());\n    \n    // see comment in deleteByQuery\n    synchronized (solrCoreState.getUpdateLock()) {\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        IndexWriter writer = iw.get();\n        writer.updateDocument(idTerm, luceneDocument, cmd.getReq().getSchema()\n            .getIndexAnalyzer());\n        \n        for (Query q : dbqList) {\n          writer.deleteDocuments(q);\n        }\n      } finally {\n        iw.decref();\n      }\n      \n      if (ulog != null) ulog.add(cmd, true);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#addAndDelete(AddUpdateCommand,List[Query]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#addAndDelete(AddUpdateCommand,List[Query]).mjava","sourceNew":"  /** Add a document execute the deletes as atomically as possible */\n  private void addAndDelete(AddUpdateCommand cmd, List<Query> dbqList)\n      throws IOException {\n    Document luceneDocument = cmd.getLuceneDocument();\n    Term idTerm = new Term(idField.getName(), cmd.getIndexedId());\n    \n    // see comment in deleteByQuery\n    synchronized (solrCoreState.getUpdateLock()) {\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        IndexWriter writer = iw.get();\n        writer.updateDocument(idTerm, luceneDocument, cmd.getReq().getSchema()\n            .getIndexAnalyzer());\n        \n        for (Query q : dbqList) {\n          writer.deleteDocuments(new DeleteByQueryWrapper(q, core.getLatestSchema()));\n        }\n      } finally {\n        iw.decref();\n      }\n      \n      if (ulog != null) ulog.add(cmd, true);\n    }\n    \n  }\n\n","sourceOld":"  /** Add a document execute the deletes as atomically as possible */\n  private void addAndDelete(AddUpdateCommand cmd, List<Query> dbqList)\n      throws IOException {\n    Document luceneDocument = cmd.getLuceneDocument();\n    Term idTerm = new Term(idField.getName(), cmd.getIndexedId());\n    \n    // see comment in deleteByQuery\n    synchronized (solrCoreState.getUpdateLock()) {\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        IndexWriter writer = iw.get();\n        writer.updateDocument(idTerm, luceneDocument, cmd.getReq().getSchema()\n            .getIndexAnalyzer());\n        \n        for (Query q : dbqList) {\n          writer.deleteDocuments(q);\n        }\n      } finally {\n        iw.decref();\n      }\n      \n      if (ulog != null) ulog.add(cmd, true);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#addAndDelete(AddUpdateCommand,List[Query]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#addAndDelete(AddUpdateCommand,List[Query]).mjava","sourceNew":"  /** Add a document execute the deletes as atomically as possible */\n  private void addAndDelete(AddUpdateCommand cmd, List<Query> dbqList)\n      throws IOException {\n    Document luceneDocument = cmd.getLuceneDocument();\n    Term idTerm = new Term(idField.getName(), cmd.getIndexedId());\n    \n    // see comment in deleteByQuery\n    synchronized (solrCoreState.getUpdateLock()) {\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        IndexWriter writer = iw.get();\n        writer.updateDocument(idTerm, luceneDocument, cmd.getReq().getSchema()\n            .getIndexAnalyzer());\n        \n        for (Query q : dbqList) {\n          writer.deleteDocuments(new DeleteByQueryWrapper(q, core.getLatestSchema()));\n        }\n      } finally {\n        iw.decref();\n      }\n      \n      if (ulog != null) ulog.add(cmd, true);\n    }\n    \n  }\n\n","sourceOld":"  /** Add a document execute the deletes as atomically as possible */\n  private void addAndDelete(AddUpdateCommand cmd, List<Query> dbqList)\n      throws IOException {\n    Document luceneDocument = cmd.getLuceneDocument();\n    Term idTerm = new Term(idField.getName(), cmd.getIndexedId());\n    \n    // see comment in deleteByQuery\n    synchronized (solrCoreState.getUpdateLock()) {\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        IndexWriter writer = iw.get();\n        writer.updateDocument(idTerm, luceneDocument, cmd.getReq().getSchema()\n            .getIndexAnalyzer());\n        \n        for (Query q : dbqList) {\n          writer.deleteDocuments(q);\n        }\n      } finally {\n        iw.decref();\n      }\n      \n      if (ulog != null) ulog.add(cmd, true);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0","date":1422781929,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#addAndDelete(AddUpdateCommand,List[Query]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#addAndDelete(AddUpdateCommand,List[Query]).mjava","sourceNew":"  /** Add a document execute the deletes as atomically as possible */\n  private void addAndDelete(AddUpdateCommand cmd, List<Query> dbqList)\n      throws IOException {\n    Document luceneDocument = cmd.getLuceneDocument();\n    Term idTerm = new Term(idField.getName(), cmd.getIndexedId());\n    \n    // see comment in deleteByQuery\n    synchronized (solrCoreState.getUpdateLock()) {\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        IndexWriter writer = iw.get();\n        writer.updateDocument(idTerm, luceneDocument);\n        \n        for (Query q : dbqList) {\n          writer.deleteDocuments(new DeleteByQueryWrapper(q, core.getLatestSchema()));\n        }\n      } finally {\n        iw.decref();\n      }\n      \n      if (ulog != null) ulog.add(cmd, true);\n    }\n    \n  }\n\n","sourceOld":"  /** Add a document execute the deletes as atomically as possible */\n  private void addAndDelete(AddUpdateCommand cmd, List<Query> dbqList)\n      throws IOException {\n    Document luceneDocument = cmd.getLuceneDocument();\n    Term idTerm = new Term(idField.getName(), cmd.getIndexedId());\n    \n    // see comment in deleteByQuery\n    synchronized (solrCoreState.getUpdateLock()) {\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        IndexWriter writer = iw.get();\n        writer.updateDocument(idTerm, luceneDocument, cmd.getReq().getSchema()\n            .getIndexAnalyzer());\n        \n        for (Query q : dbqList) {\n          writer.deleteDocuments(new DeleteByQueryWrapper(q, core.getLatestSchema()));\n        }\n      } finally {\n        iw.decref();\n      }\n      \n      if (ulog != null) ulog.add(cmd, true);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76fe9c497e8a6dfe48a1c3d048a6778db23b5a0b","date":1439091488,"type":4,"author":"Erick Erickson","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#addAndDelete(AddUpdateCommand,List[Query]).mjava","sourceNew":null,"sourceOld":"  /** Add a document execute the deletes as atomically as possible */\n  private void addAndDelete(AddUpdateCommand cmd, List<Query> dbqList)\n      throws IOException {\n    Document luceneDocument = cmd.getLuceneDocument();\n    Term idTerm = new Term(idField.getName(), cmd.getIndexedId());\n    \n    // see comment in deleteByQuery\n    synchronized (solrCoreState.getUpdateLock()) {\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        IndexWriter writer = iw.get();\n        writer.updateDocument(idTerm, luceneDocument);\n        \n        for (Query q : dbqList) {\n          writer.deleteDocuments(new DeleteByQueryWrapper(q, core.getLatestSchema()));\n        }\n      } finally {\n        iw.decref();\n      }\n      \n      if (ulog != null) ulog.add(cmd, true);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb999ed3fc6e419b9104de9ebfe62ace27f31d5f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1381b91b03f7409d8d548c7070dbc615931a0f50":["c9767265f21f7d1246b13dd7e73e8a4ad88b4384"],"c3465573b8d89796a7dc94c1b6461292f8708c6d":["fb999ed3fc6e419b9104de9ebfe62ace27f31d5f"],"56572ec06f1407c066d6b7399413178b33176cd8":["123698fbe83b595f9e084f0019cd35ab4a01d7f7","93dd449115a9247533e44bab47e8429e5dccbc6d"],"5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"08970e5b8411182a29412c177eff67ec1110095b":["1381b91b03f7409d8d548c7070dbc615931a0f50"],"aba371508186796cc6151d8223a5b4e16d02e26e":["c3465573b8d89796a7dc94c1b6461292f8708c6d","c9767265f21f7d1246b13dd7e73e8a4ad88b4384"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["123698fbe83b595f9e084f0019cd35ab4a01d7f7","c7c19b4ecf30c060f4d2e29c25f027e73262713d"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","08bcaef9e931052e4ca24133a89cc6aefaf61829"],"123698fbe83b595f9e084f0019cd35ab4a01d7f7":["08970e5b8411182a29412c177eff67ec1110095b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","1381b91b03f7409d8d548c7070dbc615931a0f50"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["aba371508186796cc6151d8223a5b4e16d02e26e","1381b91b03f7409d8d548c7070dbc615931a0f50"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["fe33227f6805edab2036cbb80645cc4e2d1fa424","c9767265f21f7d1246b13dd7e73e8a4ad88b4384"],"08bcaef9e931052e4ca24133a89cc6aefaf61829":["c3465573b8d89796a7dc94c1b6461292f8708c6d"],"c9767265f21f7d1246b13dd7e73e8a4ad88b4384":["08bcaef9e931052e4ca24133a89cc6aefaf61829"],"76fe9c497e8a6dfe48a1c3d048a6778db23b5a0b":["5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0"],"c7c19b4ecf30c060f4d2e29c25f027e73262713d":["123698fbe83b595f9e084f0019cd35ab4a01d7f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["76fe9c497e8a6dfe48a1c3d048a6778db23b5a0b"]},"commit2Childs":{"fb999ed3fc6e419b9104de9ebfe62ace27f31d5f":["c3465573b8d89796a7dc94c1b6461292f8708c6d"],"1381b91b03f7409d8d548c7070dbc615931a0f50":["08970e5b8411182a29412c177eff67ec1110095b","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"c3465573b8d89796a7dc94c1b6461292f8708c6d":["aba371508186796cc6151d8223a5b4e16d02e26e","08bcaef9e931052e4ca24133a89cc6aefaf61829"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0":["76fe9c497e8a6dfe48a1c3d048a6778db23b5a0b"],"08970e5b8411182a29412c177eff67ec1110095b":["123698fbe83b595f9e084f0019cd35ab4a01d7f7"],"aba371508186796cc6151d8223a5b4e16d02e26e":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb999ed3fc6e419b9104de9ebfe62ace27f31d5f","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"123698fbe83b595f9e084f0019cd35ab4a01d7f7":["56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d","c7c19b4ecf30c060f4d2e29c25f027e73262713d"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"08bcaef9e931052e4ca24133a89cc6aefaf61829":["fe33227f6805edab2036cbb80645cc4e2d1fa424","c9767265f21f7d1246b13dd7e73e8a4ad88b4384"],"c9767265f21f7d1246b13dd7e73e8a4ad88b4384":["1381b91b03f7409d8d548c7070dbc615931a0f50","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"c7c19b4ecf30c060f4d2e29c25f027e73262713d":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"76fe9c497e8a6dfe48a1c3d048a6778db23b5a0b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}