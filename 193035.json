{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/LegacyPrefixTree#getTreeCellIterator(Shape,int).mjava","commits":[{"id":"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6","date":1397789149,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/LegacyPrefixTree#getTreeCellIterator(Shape,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public CellIterator getTreeCellIterator(Shape shape, int detailLevel) {\n    if (!(shape instanceof Point))\n      return super.getTreeCellIterator(shape, detailLevel);\n\n    //This specialization is here because the legacy implementations don't have a fast implementation of\n    // cell.getSubCells(point). It's fastest here to encode the full bytes for detailLevel, and create\n    // subcells from the bytesRef in a loop. This avoids an O(N^2) encode, and we have O(N) instead.\n\n    Cell cell = getCell((Point) shape, detailLevel);\n    assert !cell.isLeaf() && cell instanceof LegacyCell;\n    BytesRef fullBytes = cell.getTokenBytesNoLeaf(null);\n    //fill in reverse order to be sorted\n    Cell[] cells = new Cell[detailLevel];\n    for (int i = 1; i < detailLevel; i++) {\n      Cell parentCell = getWorldCell();\n      fullBytes.length = i;\n      parentCell.readCell(fullBytes);\n      cells[i-1] = parentCell;\n    }\n    cells[detailLevel-1] = cell;\n    return new FilterCellIterator(Arrays.asList(cells).iterator(), null);//null filter\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6c7011603e29f861f395fd2799b2ac2aa6e46da","date":1399596428,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/LegacyPrefixTree#getTreeCellIterator(Shape,int).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/LegacyPrefixTree#getTreeCellIterator(Shape,int).mjava","sourceNew":"  @Override\n  public CellIterator getTreeCellIterator(Shape shape, int detailLevel) {\n    if (!(shape instanceof Point))\n      return super.getTreeCellIterator(shape, detailLevel);\n\n    //This specialization is here because the legacy implementations don't have a fast implementation of\n    // cell.getSubCells(point). It's fastest here to encode the full bytes for detailLevel, and create\n    // subcells from the bytesRef in a loop. This avoids an O(N^2) encode, and we have O(N) instead.\n\n    Cell cell = getCell((Point) shape, detailLevel);\n    assert !cell.isLeaf() && cell instanceof LegacyCell;\n    BytesRef fullBytes = cell.getTokenBytesNoLeaf(null);\n    //fill in reverse order to be sorted\n    Cell[] cells = new Cell[detailLevel];\n    for (int i = 1; i < detailLevel; i++) {\n      fullBytes.length = i;\n      Cell parentCell = readCell(fullBytes, null);\n      cells[i-1] = parentCell;\n    }\n    cells[detailLevel-1] = cell;\n    return new FilterCellIterator(Arrays.asList(cells).iterator(), null);//null filter\n  }\n\n","sourceOld":"  @Override\n  public CellIterator getTreeCellIterator(Shape shape, int detailLevel) {\n    if (!(shape instanceof Point))\n      return super.getTreeCellIterator(shape, detailLevel);\n\n    //This specialization is here because the legacy implementations don't have a fast implementation of\n    // cell.getSubCells(point). It's fastest here to encode the full bytes for detailLevel, and create\n    // subcells from the bytesRef in a loop. This avoids an O(N^2) encode, and we have O(N) instead.\n\n    Cell cell = getCell((Point) shape, detailLevel);\n    assert !cell.isLeaf() && cell instanceof LegacyCell;\n    BytesRef fullBytes = cell.getTokenBytesNoLeaf(null);\n    //fill in reverse order to be sorted\n    Cell[] cells = new Cell[detailLevel];\n    for (int i = 1; i < detailLevel; i++) {\n      Cell parentCell = getWorldCell();\n      fullBytes.length = i;\n      parentCell.readCell(fullBytes);\n      cells[i-1] = parentCell;\n    }\n    cells[detailLevel-1] = cell;\n    return new FilterCellIterator(Arrays.asList(cells).iterator(), null);//null filter\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0","date":1426015524,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/LegacyPrefixTree#getTreeCellIterator(Shape,int).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/LegacyPrefixTree#getTreeCellIterator(Shape,int).mjava","sourceNew":"  @Override\n  public CellIterator getTreeCellIterator(Shape shape, int detailLevel) {\n    if (!(shape instanceof Point))\n      return super.getTreeCellIterator(shape, detailLevel);\n\n    //This specialization is here because the legacy implementations don't have a fast implementation of\n    // cell.getSubCells(point). It's fastest here to encode the full bytes for detailLevel, and create\n    // subcells from the bytesRef in a loop. This avoids an O(N^2) encode, and we have O(N) instead.\n\n    Cell cell = getCell((Point) shape, detailLevel);\n    assert cell instanceof LegacyCell;\n    BytesRef fullBytes = cell.getTokenBytesNoLeaf(null);\n    //fill in reverse order to be sorted\n    Cell[] cells = new Cell[detailLevel];\n    for (int i = 1; i < detailLevel; i++) {\n      fullBytes.length = i;\n      Cell parentCell = readCell(fullBytes, null);\n      cells[i-1] = parentCell;\n    }\n    cells[detailLevel-1] = cell;\n    return new FilterCellIterator(Arrays.asList(cells).iterator(), null);//null filter\n  }\n\n","sourceOld":"  @Override\n  public CellIterator getTreeCellIterator(Shape shape, int detailLevel) {\n    if (!(shape instanceof Point))\n      return super.getTreeCellIterator(shape, detailLevel);\n\n    //This specialization is here because the legacy implementations don't have a fast implementation of\n    // cell.getSubCells(point). It's fastest here to encode the full bytes for detailLevel, and create\n    // subcells from the bytesRef in a loop. This avoids an O(N^2) encode, and we have O(N) instead.\n\n    Cell cell = getCell((Point) shape, detailLevel);\n    assert !cell.isLeaf() && cell instanceof LegacyCell;\n    BytesRef fullBytes = cell.getTokenBytesNoLeaf(null);\n    //fill in reverse order to be sorted\n    Cell[] cells = new Cell[detailLevel];\n    for (int i = 1; i < detailLevel; i++) {\n      fullBytes.length = i;\n      Cell parentCell = readCell(fullBytes, null);\n      cells[i-1] = parentCell;\n    }\n    cells[detailLevel-1] = cell;\n    return new FilterCellIterator(Arrays.asList(cells).iterator(), null);//null filter\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/LegacyPrefixTree#getTreeCellIterator(Shape,int).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/LegacyPrefixTree#getTreeCellIterator(Shape,int).mjava","sourceNew":"  @Override\n  public CellIterator getTreeCellIterator(Shape shape, int detailLevel) {\n    if (!(shape instanceof Point))\n      return super.getTreeCellIterator(shape, detailLevel);\n\n    //This specialization is here because the legacy implementations don't have a fast implementation of\n    // cell.getSubCells(point). It's fastest here to encode the full bytes for detailLevel, and create\n    // subcells from the bytesRef in a loop. This avoids an O(N^2) encode, and we have O(N) instead.\n\n    Cell cell = getCell((Point) shape, detailLevel);\n    assert cell instanceof LegacyCell;\n    BytesRef fullBytes = cell.getTokenBytesNoLeaf(null);\n    //fill in reverse order to be sorted\n    Cell[] cells = new Cell[detailLevel];\n    for (int i = 1; i < detailLevel; i++) {\n      fullBytes.length = i;\n      Cell parentCell = readCell(fullBytes, null);\n      cells[i-1] = parentCell;\n    }\n    cells[detailLevel-1] = cell;\n    return new FilterCellIterator(Arrays.asList(cells).iterator(), null);//null filter\n  }\n\n","sourceOld":"  @Override\n  public CellIterator getTreeCellIterator(Shape shape, int detailLevel) {\n    if (!(shape instanceof Point))\n      return super.getTreeCellIterator(shape, detailLevel);\n\n    //This specialization is here because the legacy implementations don't have a fast implementation of\n    // cell.getSubCells(point). It's fastest here to encode the full bytes for detailLevel, and create\n    // subcells from the bytesRef in a loop. This avoids an O(N^2) encode, and we have O(N) instead.\n\n    Cell cell = getCell((Point) shape, detailLevel);\n    assert !cell.isLeaf() && cell instanceof LegacyCell;\n    BytesRef fullBytes = cell.getTokenBytesNoLeaf(null);\n    //fill in reverse order to be sorted\n    Cell[] cells = new Cell[detailLevel];\n    for (int i = 1; i < detailLevel; i++) {\n      fullBytes.length = i;\n      Cell parentCell = readCell(fullBytes, null);\n      cells[i-1] = parentCell;\n    }\n    cells[detailLevel-1] = cell;\n    return new FilterCellIterator(Arrays.asList(cells).iterator(), null);//null filter\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/LegacyPrefixTree#getTreeCellIterator(Shape,int).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/LegacyPrefixTree#getTreeCellIterator(Shape,int).mjava","sourceNew":"  @Override\n  public CellIterator getTreeCellIterator(Shape shape, int detailLevel) {\n    if (!(shape instanceof Point))\n      return super.getTreeCellIterator(shape, detailLevel);\n\n    //This specialization is here because the legacy implementations don't have a fast implementation of\n    // cell.getSubCells(point). It's fastest here to encode the full bytes for detailLevel, and create\n    // subcells from the bytesRef in a loop. This avoids an O(N^2) encode, and we have O(N) instead.\n\n    Cell cell = getCell((Point) shape, detailLevel);\n    assert cell instanceof LegacyCell;\n    BytesRef fullBytes = cell.getTokenBytesNoLeaf(null);\n    //fill in reverse order to be sorted\n    Cell[] cells = new Cell[detailLevel];\n    for (int i = 1; i < detailLevel; i++) {\n      fullBytes.length = i;\n      Cell parentCell = readCell(fullBytes, null);\n      cells[i-1] = parentCell;\n    }\n    cells[detailLevel-1] = cell;\n    return new FilterCellIterator(Arrays.asList(cells).iterator(), null);//null filter\n  }\n\n","sourceOld":"  @Override\n  public CellIterator getTreeCellIterator(Shape shape, int detailLevel) {\n    if (!(shape instanceof Point))\n      return super.getTreeCellIterator(shape, detailLevel);\n\n    //This specialization is here because the legacy implementations don't have a fast implementation of\n    // cell.getSubCells(point). It's fastest here to encode the full bytes for detailLevel, and create\n    // subcells from the bytesRef in a loop. This avoids an O(N^2) encode, and we have O(N) instead.\n\n    Cell cell = getCell((Point) shape, detailLevel);\n    assert cell instanceof LegacyCell;\n    BytesRef fullBytes = cell.getTokenBytesNoLeaf(null);\n    //fill in reverse order to be sorted\n    Cell[] cells = new Cell[detailLevel];\n    for (int i = 1; i < detailLevel; i++) {\n      fullBytes.length = i;\n      Cell parentCell = readCell(fullBytes, null);\n      cells[i-1] = parentCell;\n    }\n    cells[detailLevel-1] = cell;\n    return new FilterCellIterator(Arrays.asList(cells).iterator(), null);//null filter\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/LegacyPrefixTree#getTreeCellIterator(Shape,int).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/LegacyPrefixTree#getTreeCellIterator(Shape,int).mjava","sourceNew":"  @Override\n  public CellIterator getTreeCellIterator(Shape shape, int detailLevel) {\n    if (!(shape instanceof Point))\n      return super.getTreeCellIterator(shape, detailLevel);\n\n    //This specialization is here because the legacy implementations don't have a fast implementation of\n    // cell.getSubCells(point). It's fastest here to encode the full bytes for detailLevel, and create\n    // subcells from the bytesRef in a loop. This avoids an O(N^2) encode, and we have O(N) instead.\n\n    Cell cell = getCell((Point) shape, detailLevel);\n    assert cell instanceof LegacyCell;\n    BytesRef fullBytes = cell.getTokenBytesNoLeaf(null);\n    //fill in reverse order to be sorted\n    Cell[] cells = new Cell[detailLevel];\n    for (int i = 1; i < detailLevel; i++) {\n      fullBytes.length = i;\n      Cell parentCell = readCell(fullBytes, null);\n      cells[i-1] = parentCell;\n    }\n    cells[detailLevel-1] = cell;\n    return new FilterCellIterator(Arrays.asList(cells).iterator(), null);//null filter\n  }\n\n","sourceOld":"  @Override\n  public CellIterator getTreeCellIterator(Shape shape, int detailLevel) {\n    if (!(shape instanceof Point))\n      return super.getTreeCellIterator(shape, detailLevel);\n\n    //This specialization is here because the legacy implementations don't have a fast implementation of\n    // cell.getSubCells(point). It's fastest here to encode the full bytes for detailLevel, and create\n    // subcells from the bytesRef in a loop. This avoids an O(N^2) encode, and we have O(N) instead.\n\n    Cell cell = getCell((Point) shape, detailLevel);\n    assert cell instanceof LegacyCell;\n    BytesRef fullBytes = cell.getTokenBytesNoLeaf(null);\n    //fill in reverse order to be sorted\n    Cell[] cells = new Cell[detailLevel];\n    for (int i = 1; i < detailLevel; i++) {\n      fullBytes.length = i;\n      Cell parentCell = readCell(fullBytes, null);\n      cells[i-1] = parentCell;\n    }\n    cells[detailLevel-1] = cell;\n    return new FilterCellIterator(Arrays.asList(cells).iterator(), null);//null filter\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["c6c7011603e29f861f395fd2799b2ac2aa6e46da","11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0"],"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c6c7011603e29f861f395fd2799b2ac2aa6e46da":["8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6"],"11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0":["c6c7011603e29f861f395fd2799b2ac2aa6e46da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6":["c6c7011603e29f861f395fd2799b2ac2aa6e46da"],"c6c7011603e29f861f395fd2799b2ac2aa6e46da":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0"],"11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0":["af2638813028b254a88b418ebeafb541afb49653","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","112d77ac8d3e10a362516ad834c9a11d35c94234"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}