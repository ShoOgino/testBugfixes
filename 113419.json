{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest#testAliasHandling().mjava","commits":[{"id":"0544142c22eb88b6d8b3817f2e1190156aa4f9af","date":1551692505,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest#testAliasHandling().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAliasHandling() throws Exception {\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION, 2, 2);\n\n    CollectionAdminRequest.createCollection(COLLECTION2, \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION2, 2, 2);\n\n    CloudHttp2SolrClient client = getRandomClient();\n    SolrInputDocument doc = new SolrInputDocument(\"id\", \"1\", \"title_s\", \"my doc\");\n    client.add(COLLECTION, doc);\n    client.commit(COLLECTION);\n    CollectionAdminRequest.createAlias(\"testalias\", COLLECTION).process(cluster.getSolrClient());\n\n    SolrInputDocument doc2 = new SolrInputDocument(\"id\", \"2\", \"title_s\", \"my doc too\");\n    client.add(COLLECTION2, doc2);\n    client.commit(COLLECTION2);\n    CollectionAdminRequest.createAlias(\"testalias2\", COLLECTION2).process(cluster.getSolrClient());\n\n    CollectionAdminRequest.createAlias(\"testaliascombined\", COLLECTION + \",\" + COLLECTION2).process(cluster.getSolrClient());\n\n    // ensure that the aliases have been registered\n    Map<String, String> aliases = new CollectionAdminRequest.ListAliases().process(cluster.getSolrClient()).getAliases();\n    assertEquals(COLLECTION, aliases.get(\"testalias\"));\n    assertEquals(COLLECTION2, aliases.get(\"testalias2\"));\n    assertEquals(COLLECTION + \",\" + COLLECTION2, aliases.get(\"testaliascombined\"));\n\n    assertEquals(1, client.query(COLLECTION, params(\"q\", \"*:*\")).getResults().getNumFound());\n    assertEquals(1, client.query(\"testalias\", params(\"q\", \"*:*\")).getResults().getNumFound());\n\n    assertEquals(1, client.query(COLLECTION2, params(\"q\", \"*:*\")).getResults().getNumFound());\n    assertEquals(1, client.query(\"testalias2\", params(\"q\", \"*:*\")).getResults().getNumFound());\n\n    assertEquals(2, client.query(\"testaliascombined\", params(\"q\", \"*:*\")).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithBothCollections = params(\"q\", \"*:*\", \"collection\", COLLECTION + \",\" + COLLECTION2);\n    assertEquals(2, client.query(null, paramsWithBothCollections).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithBothAliases = params(\"q\", \"*:*\", \"collection\", \"testalias,testalias2\");\n    assertEquals(2, client.query(null, paramsWithBothAliases).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithCombinedAlias = params(\"q\", \"*:*\", \"collection\", \"testaliascombined\");\n    assertEquals(2, client.query(null, paramsWithCombinedAlias).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithMixedCollectionAndAlias = params(\"q\", \"*:*\", \"collection\", \"testalias,\" + COLLECTION2);\n    assertEquals(2, client.query(null, paramsWithMixedCollectionAndAlias).getResults().getNumFound());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"]},"commit2Childs":{"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}