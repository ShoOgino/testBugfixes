{"path":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleRestoreSystemProperties#afterAlways(List[Throwable]).mjava","commits":[{"id":"b40aa4949bd6a56c07fe71318a4006a73a56a308","date":1425241541,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleRestoreSystemProperties#afterAlways(List[Throwable]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\r\n  protected void afterAlways(List<Throwable> errors) throws Throwable {\r\n    for (String key : propertyNames) {\r\n      try {\r\n        String value = restore.get(key);\r\n        if (value == null) {\r\n          System.clearProperty(key);\r\n        } else {\r\n          System.setProperty(key, value);\r\n        }\r\n      } catch (SecurityException e) {\r\n        // We should have permission to write but if we don't, record the error\r\n        errors.add(e);\r\n      }\r\n    }\r\n    restore.clear();\r\n\r\n    super.afterAlways(errors);\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f816392dc13487bcea6901688a5c3681f87050b","date":1425328726,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleRestoreSystemProperties#afterAlways(List[Throwable]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleRestoreSystemProperties#afterAlways(List[Throwable]).mjava","sourceNew":"  @Override\n  protected void afterAlways(List<Throwable> errors) throws Throwable {\n    for (String key : propertyNames) {\n      try {\n        String value = restore.get(key);\n        if (value == null) {\n          System.clearProperty(key);\n        } else {\n          System.setProperty(key, value);\n        }\n      } catch (SecurityException e) {\n        // We should have permission to write but if we don't, record the error\n        errors.add(e);\n      }\n    }\n    restore.clear();\n\n    super.afterAlways(errors);\n  }\n\n","sourceOld":"  @Override\r\n  protected void afterAlways(List<Throwable> errors) throws Throwable {\r\n    for (String key : propertyNames) {\r\n      try {\r\n        String value = restore.get(key);\r\n        if (value == null) {\r\n          System.clearProperty(key);\r\n        } else {\r\n          System.setProperty(key, value);\r\n        }\r\n      } catch (SecurityException e) {\r\n        // We should have permission to write but if we don't, record the error\r\n        errors.add(e);\r\n      }\r\n    }\r\n    restore.clear();\r\n\r\n    super.afterAlways(errors);\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48ac7cad6e13e58e631e431ea26e8d4c8756f63a","date":1425329714,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleRestoreSystemProperties#afterAlways(List[Throwable]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void afterAlways(List<Throwable> errors) throws Throwable {\n    for (String key : propertyNames) {\n      try {\n        String value = restore.get(key);\n        if (value == null) {\n          System.clearProperty(key);\n        } else {\n          System.setProperty(key, value);\n        }\n      } catch (SecurityException e) {\n        // We should have permission to write but if we don't, record the error\n        errors.add(e);\n      }\n    }\n    restore.clear();\n\n    super.afterAlways(errors);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleRestoreSystemProperties#afterAlways(List[Throwable]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void afterAlways(List<Throwable> errors) throws Throwable {\n    for (String key : propertyNames) {\n      try {\n        String value = restore.get(key);\n        if (value == null) {\n          System.clearProperty(key);\n        } else {\n          System.setProperty(key, value);\n        }\n      } catch (SecurityException e) {\n        // We should have permission to write but if we don't, record the error\n        errors.add(e);\n      }\n    }\n    restore.clear();\n\n    super.afterAlways(errors);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","48ac7cad6e13e58e631e431ea26e8d4c8756f63a"],"48ac7cad6e13e58e631e431ea26e8d4c8756f63a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7f816392dc13487bcea6901688a5c3681f87050b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f816392dc13487bcea6901688a5c3681f87050b":["b40aa4949bd6a56c07fe71318a4006a73a56a308"],"b40aa4949bd6a56c07fe71318a4006a73a56a308":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["48ac7cad6e13e58e631e431ea26e8d4c8756f63a"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"48ac7cad6e13e58e631e431ea26e8d4c8756f63a":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","48ac7cad6e13e58e631e431ea26e8d4c8756f63a","b40aa4949bd6a56c07fe71318a4006a73a56a308"],"7f816392dc13487bcea6901688a5c3681f87050b":["48ac7cad6e13e58e631e431ea26e8d4c8756f63a"],"b40aa4949bd6a56c07fe71318a4006a73a56a308":["7f816392dc13487bcea6901688a5c3681f87050b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}