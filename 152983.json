{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#uninvert(String,IndexReader).mjava","commits":[{"id":"adc9dc8ef0ce617b940a039fd12f79e8b098cc7f","date":1456936072,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#uninvert(String,IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  // naive silly memory heavy uninversion!!  maps docID -> packed values (a Set because a given doc can be multi-valued)\n  private Map<Integer,Set<BytesRef>> uninvert(String fieldName, IndexReader reader) throws IOException {\n    final Map<Integer,Set<BytesRef>> docValues = new HashMap<>();\n    for(LeafReaderContext ctx : reader.leaves()) {\n\n      PointValues points = ctx.reader().getPointValues();\n      if (points == null) {\n        continue;\n      }\n\n      points.intersect(fieldName,\n                       new PointValues.IntersectVisitor() {\n                         @Override\n                         public void visit(int docID) {\n                           throw new UnsupportedOperationException();\n                         }\n\n                         @Override\n                         public void visit(int docID, byte[] packedValue) throws IOException {\n                           int topDocID = ctx.docBase + docID;\n                           if (docValues.containsKey(topDocID) == false) {\n                             docValues.put(topDocID, new HashSet<BytesRef>());\n                           }\n                           docValues.get(topDocID).add(new BytesRef(packedValue.clone()));\n                         }\n\n                         @Override\n                         public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                           // We pretend our query shape is so hairy that it crosses every single cell:\n                           return PointValues.Relation.CELL_CROSSES_QUERY;\n                         }\n                       });\n    }\n\n    return docValues;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#uninvert(String,IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  // naive silly memory heavy uninversion!!  maps docID -> packed values (a Set because a given doc can be multi-valued)\n  private Map<Integer,Set<BytesRef>> uninvert(String fieldName, IndexReader reader) throws IOException {\n    final Map<Integer,Set<BytesRef>> docValues = new HashMap<>();\n    for(LeafReaderContext ctx : reader.leaves()) {\n\n      PointValues points = ctx.reader().getPointValues();\n      if (points == null) {\n        continue;\n      }\n\n      points.intersect(fieldName,\n                       new PointValues.IntersectVisitor() {\n                         @Override\n                         public void visit(int docID) {\n                           throw new UnsupportedOperationException();\n                         }\n\n                         @Override\n                         public void visit(int docID, byte[] packedValue) throws IOException {\n                           int topDocID = ctx.docBase + docID;\n                           if (docValues.containsKey(topDocID) == false) {\n                             docValues.put(topDocID, new HashSet<BytesRef>());\n                           }\n                           docValues.get(topDocID).add(new BytesRef(packedValue.clone()));\n                         }\n\n                         @Override\n                         public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                           // We pretend our query shape is so hairy that it crosses every single cell:\n                           return PointValues.Relation.CELL_CROSSES_QUERY;\n                         }\n                       });\n    }\n\n    return docValues;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"367f57e2ee85b7f7e28cfe73370a22cf67624f65","date":1476778467,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#uninvert(String,IndexReader).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#uninvert(String,IndexReader).mjava","sourceNew":"  // naive silly memory heavy uninversion!!  maps docID -> packed values (a Set because a given doc can be multi-valued)\n  private Map<Integer,Set<BytesRef>> uninvert(String fieldName, IndexReader reader) throws IOException {\n    final Map<Integer,Set<BytesRef>> docValues = new HashMap<>();\n    for(LeafReaderContext ctx : reader.leaves()) {\n\n      PointValues points = ctx.reader().getPointValues(fieldName);\n      if (points == null) {\n        continue;\n      }\n\n      points.intersect(\n                       new PointValues.IntersectVisitor() {\n                         @Override\n                         public void visit(int docID) {\n                           throw new UnsupportedOperationException();\n                         }\n\n                         @Override\n                         public void visit(int docID, byte[] packedValue) throws IOException {\n                           int topDocID = ctx.docBase + docID;\n                           if (docValues.containsKey(topDocID) == false) {\n                             docValues.put(topDocID, new HashSet<BytesRef>());\n                           }\n                           docValues.get(topDocID).add(new BytesRef(packedValue.clone()));\n                         }\n\n                         @Override\n                         public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                           // We pretend our query shape is so hairy that it crosses every single cell:\n                           return PointValues.Relation.CELL_CROSSES_QUERY;\n                         }\n                       });\n    }\n\n    return docValues;\n  }\n\n","sourceOld":"  // naive silly memory heavy uninversion!!  maps docID -> packed values (a Set because a given doc can be multi-valued)\n  private Map<Integer,Set<BytesRef>> uninvert(String fieldName, IndexReader reader) throws IOException {\n    final Map<Integer,Set<BytesRef>> docValues = new HashMap<>();\n    for(LeafReaderContext ctx : reader.leaves()) {\n\n      PointValues points = ctx.reader().getPointValues();\n      if (points == null) {\n        continue;\n      }\n\n      points.intersect(fieldName,\n                       new PointValues.IntersectVisitor() {\n                         @Override\n                         public void visit(int docID) {\n                           throw new UnsupportedOperationException();\n                         }\n\n                         @Override\n                         public void visit(int docID, byte[] packedValue) throws IOException {\n                           int topDocID = ctx.docBase + docID;\n                           if (docValues.containsKey(topDocID) == false) {\n                             docValues.put(topDocID, new HashSet<BytesRef>());\n                           }\n                           docValues.get(topDocID).add(new BytesRef(packedValue.clone()));\n                         }\n\n                         @Override\n                         public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                           // We pretend our query shape is so hairy that it crosses every single cell:\n                           return PointValues.Relation.CELL_CROSSES_QUERY;\n                         }\n                       });\n    }\n\n    return docValues;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#uninvert(String,IndexReader).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#uninvert(String,IndexReader).mjava","sourceNew":"  // naive silly memory heavy uninversion!!  maps docID -> packed values (a Set because a given doc can be multi-valued)\n  private Map<Integer,Set<BytesRef>> uninvert(String fieldName, IndexReader reader) throws IOException {\n    final Map<Integer,Set<BytesRef>> docValues = new HashMap<>();\n    for(LeafReaderContext ctx : reader.leaves()) {\n\n      PointValues points = ctx.reader().getPointValues(fieldName);\n      if (points == null) {\n        continue;\n      }\n\n      points.intersect(\n                       new PointValues.IntersectVisitor() {\n                         @Override\n                         public void visit(int docID) {\n                           throw new UnsupportedOperationException();\n                         }\n\n                         @Override\n                         public void visit(int docID, byte[] packedValue) throws IOException {\n                           int topDocID = ctx.docBase + docID;\n                           if (docValues.containsKey(topDocID) == false) {\n                             docValues.put(topDocID, new HashSet<BytesRef>());\n                           }\n                           docValues.get(topDocID).add(new BytesRef(packedValue.clone()));\n                         }\n\n                         @Override\n                         public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                           // We pretend our query shape is so hairy that it crosses every single cell:\n                           return PointValues.Relation.CELL_CROSSES_QUERY;\n                         }\n                       });\n    }\n\n    return docValues;\n  }\n\n","sourceOld":"  // naive silly memory heavy uninversion!!  maps docID -> packed values (a Set because a given doc can be multi-valued)\n  private Map<Integer,Set<BytesRef>> uninvert(String fieldName, IndexReader reader) throws IOException {\n    final Map<Integer,Set<BytesRef>> docValues = new HashMap<>();\n    for(LeafReaderContext ctx : reader.leaves()) {\n\n      PointValues points = ctx.reader().getPointValues();\n      if (points == null) {\n        continue;\n      }\n\n      points.intersect(fieldName,\n                       new PointValues.IntersectVisitor() {\n                         @Override\n                         public void visit(int docID) {\n                           throw new UnsupportedOperationException();\n                         }\n\n                         @Override\n                         public void visit(int docID, byte[] packedValue) throws IOException {\n                           int topDocID = ctx.docBase + docID;\n                           if (docValues.containsKey(topDocID) == false) {\n                             docValues.put(topDocID, new HashSet<BytesRef>());\n                           }\n                           docValues.get(topDocID).add(new BytesRef(packedValue.clone()));\n                         }\n\n                         @Override\n                         public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                           // We pretend our query shape is so hairy that it crosses every single cell:\n                           return PointValues.Relation.CELL_CROSSES_QUERY;\n                         }\n                       });\n    }\n\n    return docValues;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","adc9dc8ef0ce617b940a039fd12f79e8b098cc7f"],"adc9dc8ef0ce617b940a039fd12f79e8b098cc7f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["367f57e2ee85b7f7e28cfe73370a22cf67624f65"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","adc9dc8ef0ce617b940a039fd12f79e8b098cc7f"],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["367f57e2ee85b7f7e28cfe73370a22cf67624f65","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"adc9dc8ef0ce617b940a039fd12f79e8b098cc7f":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}