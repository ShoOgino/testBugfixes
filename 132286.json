{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsEquals(String,IndexReader,Terms,Terms,boolean).mjava","commits":[{"id":"51c8450b3b616b6777f722ff4083c0bf946381a2","date":1363812022,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsEquals(String,IndexReader,Terms,Terms,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTerms(Terms,Terms,boolean).mjava","sourceNew":"  /** \n   * Terms api equivalency \n   */\n  public void assertTermsEquals(String info, IndexReader leftReader, Terms leftTerms, Terms rightTerms, boolean deep) throws IOException {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(info, leftTerms);\n      assertNull(info, rightTerms);\n      return;\n    }\n    assertTermsStatisticsEquals(info, leftTerms, rightTerms);\n    assertEquals(leftTerms.hasOffsets(), rightTerms.hasOffsets());\n    assertEquals(leftTerms.hasPositions(), rightTerms.hasPositions());\n    assertEquals(leftTerms.hasPayloads(), rightTerms.hasPayloads());\n\n    TermsEnum leftTermsEnum = leftTerms.iterator(null);\n    TermsEnum rightTermsEnum = rightTerms.iterator(null);\n    assertTermsEnumEquals(info, leftReader, leftTermsEnum, rightTermsEnum, true);\n    \n    assertTermsSeekingEquals(info, leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnumEquals(info, leftReader, leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Terms api equivalency \n   */\n  public void assertTerms(Terms leftTerms, Terms rightTerms, boolean deep) throws Exception {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(info, leftTerms);\n      assertNull(info, rightTerms);\n      return;\n    }\n    assertTermsStatistics(leftTerms, rightTerms);\n    assertEquals(leftTerms.hasOffsets(), rightTerms.hasOffsets());\n    assertEquals(leftTerms.hasPositions(), rightTerms.hasPositions());\n    assertEquals(leftTerms.hasPayloads(), rightTerms.hasPayloads());\n\n    TermsEnum leftTermsEnum = leftTerms.iterator(null);\n    TermsEnum rightTermsEnum = rightTerms.iterator(null);\n    assertTermsEnum(leftTermsEnum, rightTermsEnum, true);\n    \n    assertTermsSeeking(leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnum(leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsEquals(String,IndexReader,Terms,Terms,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsEquals(String,IndexReader,Terms,Terms,boolean).mjava","sourceNew":"  /** \n   * Terms api equivalency \n   */\n  public void assertTermsEquals(String info, IndexReader leftReader, Terms leftTerms, Terms rightTerms, boolean deep) throws IOException {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(info, leftTerms);\n      assertNull(info, rightTerms);\n      return;\n    }\n    assertTermsStatisticsEquals(info, leftTerms, rightTerms);\n    assertEquals(leftTerms.hasOffsets(), rightTerms.hasOffsets());\n    assertEquals(leftTerms.hasPositions(), rightTerms.hasPositions());\n    assertEquals(leftTerms.hasPayloads(), rightTerms.hasPayloads());\n\n    TermsEnum leftTermsEnum = leftTerms.iterator(null);\n    TermsEnum rightTermsEnum = rightTerms.iterator(null);\n    assertTermsEnumEquals(info, leftReader, leftTermsEnum, rightTermsEnum, true);\n    \n    assertTermsSeekingEquals(info, leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toLightAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnumEquals(info, leftReader, leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Terms api equivalency \n   */\n  public void assertTermsEquals(String info, IndexReader leftReader, Terms leftTerms, Terms rightTerms, boolean deep) throws IOException {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(info, leftTerms);\n      assertNull(info, rightTerms);\n      return;\n    }\n    assertTermsStatisticsEquals(info, leftTerms, rightTerms);\n    assertEquals(leftTerms.hasOffsets(), rightTerms.hasOffsets());\n    assertEquals(leftTerms.hasPositions(), rightTerms.hasPositions());\n    assertEquals(leftTerms.hasPayloads(), rightTerms.hasPayloads());\n\n    TermsEnum leftTermsEnum = leftTerms.iterator(null);\n    TermsEnum rightTermsEnum = rightTerms.iterator(null);\n    assertTermsEnumEquals(info, leftReader, leftTermsEnum, rightTermsEnum, true);\n    \n    assertTermsSeekingEquals(info, leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnumEquals(info, leftReader, leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsEquals(String,IndexReader,Terms,Terms,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsEquals(String,IndexReader,Terms,Terms,boolean).mjava","sourceNew":"  /** \n   * Terms api equivalency \n   */\n  public void assertTermsEquals(String info, IndexReader leftReader, Terms leftTerms, Terms rightTerms, boolean deep) throws IOException {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(info, leftTerms);\n      assertNull(info, rightTerms);\n      return;\n    }\n    assertTermsStatisticsEquals(info, leftTerms, rightTerms);\n    assertEquals(leftTerms.hasOffsets(), rightTerms.hasOffsets());\n    assertEquals(leftTerms.hasPositions(), rightTerms.hasPositions());\n    assertEquals(leftTerms.hasPayloads(), rightTerms.hasPayloads());\n\n    TermsEnum leftTermsEnum = leftTerms.iterator(null);\n    TermsEnum rightTermsEnum = rightTerms.iterator(null);\n    assertTermsEnumEquals(info, leftReader, leftTermsEnum, rightTermsEnum, true);\n    \n    assertTermsSeekingEquals(info, leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnumEquals(info, leftReader, leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Terms api equivalency \n   */\n  public void assertTermsEquals(String info, IndexReader leftReader, Terms leftTerms, Terms rightTerms, boolean deep) throws IOException {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(info, leftTerms);\n      assertNull(info, rightTerms);\n      return;\n    }\n    assertTermsStatisticsEquals(info, leftTerms, rightTerms);\n    assertEquals(leftTerms.hasOffsets(), rightTerms.hasOffsets());\n    assertEquals(leftTerms.hasPositions(), rightTerms.hasPositions());\n    assertEquals(leftTerms.hasPayloads(), rightTerms.hasPayloads());\n\n    TermsEnum leftTermsEnum = leftTerms.iterator(null);\n    TermsEnum rightTermsEnum = rightTerms.iterator(null);\n    assertTermsEnumEquals(info, leftReader, leftTermsEnum, rightTermsEnum, true);\n    \n    assertTermsSeekingEquals(info, leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toLightAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnumEquals(info, leftReader, leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsEquals(String,IndexReader,Terms,Terms,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsEquals(String,IndexReader,Terms,Terms,boolean).mjava","sourceNew":"  /** \n   * Terms api equivalency \n   */\n  public void assertTermsEquals(String info, IndexReader leftReader, Terms leftTerms, Terms rightTerms, boolean deep) throws IOException {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(info, leftTerms);\n      assertNull(info, rightTerms);\n      return;\n    }\n    assertTermsStatisticsEquals(info, leftTerms, rightTerms);\n    assertEquals(leftTerms.hasOffsets(), rightTerms.hasOffsets());\n    assertEquals(leftTerms.hasPositions(), rightTerms.hasPositions());\n    assertEquals(leftTerms.hasPayloads(), rightTerms.hasPayloads());\n\n    TermsEnum leftTermsEnum = leftTerms.iterator();\n    TermsEnum rightTermsEnum = rightTerms.iterator();\n    assertTermsEnumEquals(info, leftReader, leftTermsEnum, rightTermsEnum, true);\n    \n    assertTermsSeekingEquals(info, leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnumEquals(info, leftReader, leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Terms api equivalency \n   */\n  public void assertTermsEquals(String info, IndexReader leftReader, Terms leftTerms, Terms rightTerms, boolean deep) throws IOException {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(info, leftTerms);\n      assertNull(info, rightTerms);\n      return;\n    }\n    assertTermsStatisticsEquals(info, leftTerms, rightTerms);\n    assertEquals(leftTerms.hasOffsets(), rightTerms.hasOffsets());\n    assertEquals(leftTerms.hasPositions(), rightTerms.hasPositions());\n    assertEquals(leftTerms.hasPayloads(), rightTerms.hasPayloads());\n\n    TermsEnum leftTermsEnum = leftTerms.iterator(null);\n    TermsEnum rightTermsEnum = rightTerms.iterator(null);\n    assertTermsEnumEquals(info, leftReader, leftTermsEnum, rightTermsEnum, true);\n    \n    assertTermsSeekingEquals(info, leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnumEquals(info, leftReader, leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b60a5a43d1d9681c16083d846392f59562abf643","date":1463083042,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsEquals(String,IndexReader,Terms,Terms,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsEquals(String,IndexReader,Terms,Terms,boolean).mjava","sourceNew":"  /** \n   * Terms api equivalency \n   */\n  public void assertTermsEquals(String info, IndexReader leftReader, Terms leftTerms, Terms rightTerms, boolean deep) throws IOException {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(info, leftTerms);\n      assertNull(info, rightTerms);\n      return;\n    }\n    assertTermsStatisticsEquals(info, leftTerms, rightTerms);\n    assertEquals(\"hasOffsets\", leftTerms.hasOffsets(), rightTerms.hasOffsets());\n    assertEquals(\"hasPositions\", leftTerms.hasPositions(), rightTerms.hasPositions());\n    assertEquals(\"hasPayloads\", leftTerms.hasPayloads(), rightTerms.hasPayloads());\n\n    TermsEnum leftTermsEnum = leftTerms.iterator();\n    TermsEnum rightTermsEnum = rightTerms.iterator();\n    assertTermsEnumEquals(info, leftReader, leftTermsEnum, rightTermsEnum, true);\n    \n    assertTermsSeekingEquals(info, leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnumEquals(info, leftReader, leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Terms api equivalency \n   */\n  public void assertTermsEquals(String info, IndexReader leftReader, Terms leftTerms, Terms rightTerms, boolean deep) throws IOException {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(info, leftTerms);\n      assertNull(info, rightTerms);\n      return;\n    }\n    assertTermsStatisticsEquals(info, leftTerms, rightTerms);\n    assertEquals(leftTerms.hasOffsets(), rightTerms.hasOffsets());\n    assertEquals(leftTerms.hasPositions(), rightTerms.hasPositions());\n    assertEquals(leftTerms.hasPayloads(), rightTerms.hasPayloads());\n\n    TermsEnum leftTermsEnum = leftTerms.iterator();\n    TermsEnum rightTermsEnum = rightTerms.iterator();\n    assertTermsEnumEquals(info, leftReader, leftTermsEnum, rightTermsEnum, true);\n    \n    assertTermsSeekingEquals(info, leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnumEquals(info, leftReader, leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsEquals(String,IndexReader,Terms,Terms,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsEquals(String,IndexReader,Terms,Terms,boolean).mjava","sourceNew":"  /** \n   * Terms api equivalency \n   */\n  public void assertTermsEquals(String info, IndexReader leftReader, Terms leftTerms, Terms rightTerms, boolean deep) throws IOException {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(info, leftTerms);\n      assertNull(info, rightTerms);\n      return;\n    }\n    assertTermsStatisticsEquals(info, leftTerms, rightTerms);\n    assertEquals(\"hasOffsets\", leftTerms.hasOffsets(), rightTerms.hasOffsets());\n    assertEquals(\"hasPositions\", leftTerms.hasPositions(), rightTerms.hasPositions());\n    assertEquals(\"hasPayloads\", leftTerms.hasPayloads(), rightTerms.hasPayloads());\n\n    TermsEnum leftTermsEnum = leftTerms.iterator();\n    TermsEnum rightTermsEnum = rightTerms.iterator();\n    assertTermsEnumEquals(info, leftReader, leftTermsEnum, rightTermsEnum, true);\n    \n    assertTermsSeekingEquals(info, leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnumEquals(info, leftReader, leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Terms api equivalency \n   */\n  public void assertTermsEquals(String info, IndexReader leftReader, Terms leftTerms, Terms rightTerms, boolean deep) throws IOException {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(info, leftTerms);\n      assertNull(info, rightTerms);\n      return;\n    }\n    assertTermsStatisticsEquals(info, leftTerms, rightTerms);\n    assertEquals(leftTerms.hasOffsets(), rightTerms.hasOffsets());\n    assertEquals(leftTerms.hasPositions(), rightTerms.hasPositions());\n    assertEquals(leftTerms.hasPayloads(), rightTerms.hasPayloads());\n\n    TermsEnum leftTermsEnum = leftTerms.iterator();\n    TermsEnum rightTermsEnum = rightTerms.iterator();\n    assertTermsEnumEquals(info, leftReader, leftTermsEnum, rightTermsEnum, true);\n    \n    assertTermsSeekingEquals(info, leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnumEquals(info, leftReader, leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsEquals(String,IndexReader,Terms,Terms,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsEquals(String,IndexReader,Terms,Terms,boolean).mjava","sourceNew":"  /** \n   * Terms api equivalency \n   */\n  public void assertTermsEquals(String info, IndexReader leftReader, Terms leftTerms, Terms rightTerms, boolean deep) throws IOException {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(info, leftTerms);\n      assertNull(info, rightTerms);\n      return;\n    }\n    assertTermsStatisticsEquals(info, leftTerms, rightTerms);\n    assertEquals(\"hasOffsets\", leftTerms.hasOffsets(), rightTerms.hasOffsets());\n    assertEquals(\"hasPositions\", leftTerms.hasPositions(), rightTerms.hasPositions());\n    assertEquals(\"hasPayloads\", leftTerms.hasPayloads(), rightTerms.hasPayloads());\n\n    TermsEnum leftTermsEnum = leftTerms.iterator();\n    TermsEnum rightTermsEnum = rightTerms.iterator();\n    assertTermsEnumEquals(info, leftReader, leftTermsEnum, rightTermsEnum, true);\n    \n    assertTermsSeekingEquals(info, leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnumEquals(info, leftReader, leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Terms api equivalency \n   */\n  public void assertTermsEquals(String info, IndexReader leftReader, Terms leftTerms, Terms rightTerms, boolean deep) throws IOException {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(info, leftTerms);\n      assertNull(info, rightTerms);\n      return;\n    }\n    assertTermsStatisticsEquals(info, leftTerms, rightTerms);\n    assertEquals(leftTerms.hasOffsets(), rightTerms.hasOffsets());\n    assertEquals(leftTerms.hasPositions(), rightTerms.hasPositions());\n    assertEquals(leftTerms.hasPayloads(), rightTerms.hasPayloads());\n\n    TermsEnum leftTermsEnum = leftTerms.iterator();\n    TermsEnum rightTermsEnum = rightTerms.iterator();\n    assertTermsEnumEquals(info, leftReader, leftTermsEnum, rightTermsEnum, true);\n    \n    assertTermsSeekingEquals(info, leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnumEquals(info, leftReader, leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsEquals(String,IndexReader,Terms,Terms,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsEquals(String,IndexReader,Terms,Terms,boolean).mjava","sourceNew":"  /** \n   * Terms api equivalency \n   */\n  public void assertTermsEquals(String info, IndexReader leftReader, Terms leftTerms, Terms rightTerms, boolean deep) throws IOException {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(info, leftTerms);\n      assertNull(info, rightTerms);\n      return;\n    }\n    assertTermsStatisticsEquals(info, leftTerms, rightTerms);\n    assertEquals(\"hasOffsets\", leftTerms.hasOffsets(), rightTerms.hasOffsets());\n    assertEquals(\"hasPositions\", leftTerms.hasPositions(), rightTerms.hasPositions());\n    assertEquals(\"hasPayloads\", leftTerms.hasPayloads(), rightTerms.hasPayloads());\n\n    TermsEnum leftTermsEnum = leftTerms.iterator();\n    TermsEnum rightTermsEnum = rightTerms.iterator();\n    assertTermsEnumEquals(info, leftReader, leftTermsEnum, rightTermsEnum, true);\n    \n    assertTermsSeekingEquals(info, leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnumEquals(info, leftReader, leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Terms api equivalency \n   */\n  public void assertTermsEquals(String info, IndexReader leftReader, Terms leftTerms, Terms rightTerms, boolean deep) throws IOException {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(info, leftTerms);\n      assertNull(info, rightTerms);\n      return;\n    }\n    assertTermsStatisticsEquals(info, leftTerms, rightTerms);\n    assertEquals(leftTerms.hasOffsets(), rightTerms.hasOffsets());\n    assertEquals(leftTerms.hasPositions(), rightTerms.hasPositions());\n    assertEquals(leftTerms.hasPayloads(), rightTerms.hasPayloads());\n\n    TermsEnum leftTermsEnum = leftTerms.iterator();\n    TermsEnum rightTermsEnum = rightTerms.iterator();\n    assertTermsEnumEquals(info, leftReader, leftTermsEnum, rightTermsEnum, true);\n    \n    assertTermsSeekingEquals(info, leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnumEquals(info, leftReader, leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsEquals(String,IndexReader,Terms,Terms,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsEquals(String,IndexReader,Terms,Terms,boolean).mjava","sourceNew":"  /** \n   * Terms api equivalency \n   */\n  public void assertTermsEquals(String info, IndexReader leftReader, Terms leftTerms, Terms rightTerms, boolean deep) throws IOException {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(info, leftTerms);\n      assertNull(info, rightTerms);\n      return;\n    }\n    assertTermsStatisticsEquals(info, leftTerms, rightTerms);\n    assertEquals(\"hasOffsets\", leftTerms.hasOffsets(), rightTerms.hasOffsets());\n    assertEquals(\"hasPositions\", leftTerms.hasPositions(), rightTerms.hasPositions());\n    assertEquals(\"hasPayloads\", leftTerms.hasPayloads(), rightTerms.hasPayloads());\n\n    TermsEnum leftTermsEnum = leftTerms.iterator();\n    TermsEnum rightTermsEnum = rightTerms.iterator();\n    assertTermsEnumEquals(info, leftReader, leftTermsEnum, rightTermsEnum, true);\n    \n    assertTermsSeekingEquals(info, leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnumEquals(info, leftReader, leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Terms api equivalency \n   */\n  public void assertTermsEquals(String info, IndexReader leftReader, Terms leftTerms, Terms rightTerms, boolean deep) throws IOException {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(info, leftTerms);\n      assertNull(info, rightTerms);\n      return;\n    }\n    assertTermsStatisticsEquals(info, leftTerms, rightTerms);\n    assertEquals(leftTerms.hasOffsets(), rightTerms.hasOffsets());\n    assertEquals(leftTerms.hasPositions(), rightTerms.hasPositions());\n    assertEquals(leftTerms.hasPayloads(), rightTerms.hasPayloads());\n\n    TermsEnum leftTermsEnum = leftTerms.iterator();\n    TermsEnum rightTermsEnum = rightTerms.iterator();\n    assertTermsEnumEquals(info, leftReader, leftTermsEnum, rightTermsEnum, true);\n    \n    assertTermsSeekingEquals(info, leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnumEquals(info, leftReader, leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["51c8450b3b616b6777f722ff4083c0bf946381a2"],"b60a5a43d1d9681c16083d846392f59562abf643":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"0ad30c6a479e764150a3316e57263319775f1df2":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","3d33e731a93d4b57e662ff094f64f94a745422d4"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","b60a5a43d1d9681c16083d846392f59562abf643"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["51c8450b3b616b6777f722ff4083c0bf946381a2"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["b60a5a43d1d9681c16083d846392f59562abf643","0ad30c6a479e764150a3316e57263319775f1df2","3d33e731a93d4b57e662ff094f64f94a745422d4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"b60a5a43d1d9681c16083d846392f59562abf643":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["51c8450b3b616b6777f722ff4083c0bf946381a2"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}