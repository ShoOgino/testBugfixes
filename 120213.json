{"path":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#_testSimple().mjava","commits":[{"id":"36f91bf9cfc9d0c3155edab43359e7670ea8a5af","date":1269580873,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#_testSimple().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#_testSimple().mjava","sourceNew":"  // failing tests disabled since PrecedenceQueryParser\n  // is currently unmaintained\n  public void _testSimple() throws Exception {\n    assertQueryEquals(\"\", null, \"\");\n\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"türm term term\", null, \"türm term term\");\n    assertQueryEquals(\"ümlaut\", null, \"ümlaut\");\n\n    assertQueryEquals(\"+a\", null, \"+a\");\n    assertQueryEquals(\"-a\", null, \"-a\");\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n                      \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n                      \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n                      \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null,\n                      \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n                      \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n                      \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n    \n    PrecedenceQueryParser qp = new PrecedenceQueryParser(\"field\", new StandardAnalyzer(TEST_VERSION_CURRENT));\n    // make sure OR is the default:\n    assertEquals(PrecedenceQueryParser.OR_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(PrecedenceQueryParser.AND_OPERATOR);\n    assertEquals(PrecedenceQueryParser.AND_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(PrecedenceQueryParser.OR_OPERATOR);\n    assertEquals(PrecedenceQueryParser.OR_OPERATOR, qp.getDefaultOperator());\n\n    assertQueryEquals(\"a OR !b\", null, \"a (-b)\");\n    assertQueryEquals(\"a OR ! b\", null, \"a (-b)\");\n    assertQueryEquals(\"a OR -b\", null, \"a (-b)\");\n  }\n\n","sourceOld":"  // failing tests disabled since PrecedenceQueryParser\n  // is currently unmaintained\n  public void _testSimple() throws Exception {\n    assertQueryEquals(\"\", null, \"\");\n\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"türm term term\", null, \"türm term term\");\n    assertQueryEquals(\"ümlaut\", null, \"ümlaut\");\n\n    assertQueryEquals(\"+a\", null, \"+a\");\n    assertQueryEquals(\"-a\", null, \"-a\");\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n                      \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n                      \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n                      \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null,\n                      \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n                      \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n                      \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n    \n    PrecedenceQueryParser qp = new PrecedenceQueryParser(\"field\", new StandardAnalyzer(TEST_VERSION_CURRENT));\n    // make sure OR is the default:\n    assertEquals(PrecedenceQueryParser.OR_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(PrecedenceQueryParser.AND_OPERATOR);\n    assertEquals(PrecedenceQueryParser.AND_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(PrecedenceQueryParser.OR_OPERATOR);\n    assertEquals(PrecedenceQueryParser.OR_OPERATOR, qp.getDefaultOperator());\n\n    assertQueryEquals(\"a OR !b\", null, \"a (-b)\");\n    assertQueryEquals(\"a OR ! b\", null, \"a (-b)\");\n    assertQueryEquals(\"a OR -b\", null, \"a (-b)\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7f8e68717c68517265937c911e1ce9f25750247","date":1274071103,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#_testSimple().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#_testSimple().mjava","sourceNew":"  // failing tests disabled since PrecedenceQueryParser\n  // is currently unmaintained\n  public void _testSimple() throws Exception {\n    assertQueryEquals(\"\", null, \"\");\n\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"türm term term\", null, \"türm term term\");\n    assertQueryEquals(\"ümlaut\", null, \"ümlaut\");\n\n    assertQueryEquals(\"+a\", null, \"+a\");\n    assertQueryEquals(\"-a\", null, \"-a\");\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n                      \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n                      \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n                      \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null,\n                      \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n                      \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n                      \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n    \n    PrecedenceQueryParser qp = new PrecedenceQueryParser(\"field\", new MockAnalyzer());\n    // make sure OR is the default:\n    assertEquals(PrecedenceQueryParser.OR_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(PrecedenceQueryParser.AND_OPERATOR);\n    assertEquals(PrecedenceQueryParser.AND_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(PrecedenceQueryParser.OR_OPERATOR);\n    assertEquals(PrecedenceQueryParser.OR_OPERATOR, qp.getDefaultOperator());\n\n    assertQueryEquals(\"a OR !b\", null, \"a (-b)\");\n    assertQueryEquals(\"a OR ! b\", null, \"a (-b)\");\n    assertQueryEquals(\"a OR -b\", null, \"a (-b)\");\n  }\n\n","sourceOld":"  // failing tests disabled since PrecedenceQueryParser\n  // is currently unmaintained\n  public void _testSimple() throws Exception {\n    assertQueryEquals(\"\", null, \"\");\n\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"türm term term\", null, \"türm term term\");\n    assertQueryEquals(\"ümlaut\", null, \"ümlaut\");\n\n    assertQueryEquals(\"+a\", null, \"+a\");\n    assertQueryEquals(\"-a\", null, \"-a\");\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n                      \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n                      \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n                      \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null,\n                      \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n                      \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n                      \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n    \n    PrecedenceQueryParser qp = new PrecedenceQueryParser(\"field\", new StandardAnalyzer(TEST_VERSION_CURRENT));\n    // make sure OR is the default:\n    assertEquals(PrecedenceQueryParser.OR_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(PrecedenceQueryParser.AND_OPERATOR);\n    assertEquals(PrecedenceQueryParser.AND_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(PrecedenceQueryParser.OR_OPERATOR);\n    assertEquals(PrecedenceQueryParser.OR_OPERATOR, qp.getDefaultOperator());\n\n    assertQueryEquals(\"a OR !b\", null, \"a (-b)\");\n    assertQueryEquals(\"a OR ! b\", null, \"a (-b)\");\n    assertQueryEquals(\"a OR -b\", null, \"a (-b)\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecaea79e307d83311c31273b0ea89b9fdb0c5a32","date":1287584790,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testSimple().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#_testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"türm term term\", null, \"türm term term\");\n    assertQueryEquals(\"ümlaut\", null, \"ümlaut\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n        \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n        \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n        \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n        \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n        \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n\n    PrecedenceQueryParser qp = new PrecedenceQueryParser();\n    qp.setAnalyzer(new MockAnalyzer());\n    // make sure OR is the default:\n    assertEquals(Operator.OR, qp.getDefaultOperator());\n    qp.setDefaultOperator(Operator.AND);\n    assertEquals(Operator.AND, qp.getDefaultOperator());\n    qp.setDefaultOperator(Operator.OR);\n    assertEquals(Operator.OR, qp.getDefaultOperator());\n\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n  }\n\n","sourceOld":"  // failing tests disabled since PrecedenceQueryParser\n  // is currently unmaintained\n  public void _testSimple() throws Exception {\n    assertQueryEquals(\"\", null, \"\");\n\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"türm term term\", null, \"türm term term\");\n    assertQueryEquals(\"ümlaut\", null, \"ümlaut\");\n\n    assertQueryEquals(\"+a\", null, \"+a\");\n    assertQueryEquals(\"-a\", null, \"-a\");\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n                      \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n                      \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n                      \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null,\n                      \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n                      \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n                      \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n    \n    PrecedenceQueryParser qp = new PrecedenceQueryParser(\"field\", new MockAnalyzer());\n    // make sure OR is the default:\n    assertEquals(PrecedenceQueryParser.OR_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(PrecedenceQueryParser.AND_OPERATOR);\n    assertEquals(PrecedenceQueryParser.AND_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(PrecedenceQueryParser.OR_OPERATOR);\n    assertEquals(PrecedenceQueryParser.OR_OPERATOR, qp.getDefaultOperator());\n\n    assertQueryEquals(\"a OR !b\", null, \"a (-b)\");\n    assertQueryEquals(\"a OR ! b\", null, \"a (-b)\");\n    assertQueryEquals(\"a OR -b\", null, \"a (-b)\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8017ab6544f30f93b106e419e7298173bad77f69","date":1287608126,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testSimple().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#_testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"türm term term\", null, \"türm term term\");\n    assertQueryEquals(\"ümlaut\", null, \"ümlaut\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n        \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n        \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n        \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n        \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n        \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n\n    PrecedenceQueryParser qp = new PrecedenceQueryParser();\n    qp.setAnalyzer(new MockAnalyzer());\n    // make sure OR is the default:\n    assertEquals(Operator.OR, qp.getDefaultOperator());\n    qp.setDefaultOperator(Operator.AND);\n    assertEquals(Operator.AND, qp.getDefaultOperator());\n    qp.setDefaultOperator(Operator.OR);\n    assertEquals(Operator.OR, qp.getDefaultOperator());\n\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n  }\n\n","sourceOld":"  // failing tests disabled since PrecedenceQueryParser\n  // is currently unmaintained\n  public void _testSimple() throws Exception {\n    assertQueryEquals(\"\", null, \"\");\n\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"türm term term\", null, \"türm term term\");\n    assertQueryEquals(\"ümlaut\", null, \"ümlaut\");\n\n    assertQueryEquals(\"+a\", null, \"+a\");\n    assertQueryEquals(\"-a\", null, \"-a\");\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n                      \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n                      \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n                      \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null,\n                      \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n                      \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n                      \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n    \n    PrecedenceQueryParser qp = new PrecedenceQueryParser(\"field\", new MockAnalyzer());\n    // make sure OR is the default:\n    assertEquals(PrecedenceQueryParser.OR_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(PrecedenceQueryParser.AND_OPERATOR);\n    assertEquals(PrecedenceQueryParser.AND_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(PrecedenceQueryParser.OR_OPERATOR);\n    assertEquals(PrecedenceQueryParser.OR_OPERATOR, qp.getDefaultOperator());\n\n    assertQueryEquals(\"a OR !b\", null, \"a (-b)\");\n    assertQueryEquals(\"a OR ! b\", null, \"a (-b)\");\n    assertQueryEquals(\"a OR -b\", null, \"a (-b)\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#_testSimple().mjava","sourceNew":null,"sourceOld":"  // failing tests disabled since PrecedenceQueryParser\n  // is currently unmaintained\n  public void _testSimple() throws Exception {\n    assertQueryEquals(\"\", null, \"\");\n\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"türm term term\", null, \"türm term term\");\n    assertQueryEquals(\"ümlaut\", null, \"ümlaut\");\n\n    assertQueryEquals(\"+a\", null, \"+a\");\n    assertQueryEquals(\"-a\", null, \"-a\");\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n                      \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n                      \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n                      \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null,\n                      \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n                      \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n                      \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n    \n    PrecedenceQueryParser qp = new PrecedenceQueryParser(\"field\", new MockAnalyzer());\n    // make sure OR is the default:\n    assertEquals(PrecedenceQueryParser.OR_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(PrecedenceQueryParser.AND_OPERATOR);\n    assertEquals(PrecedenceQueryParser.AND_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(PrecedenceQueryParser.OR_OPERATOR);\n    assertEquals(PrecedenceQueryParser.OR_OPERATOR, qp.getDefaultOperator());\n\n    assertQueryEquals(\"a OR !b\", null, \"a (-b)\");\n    assertQueryEquals(\"a OR ! b\", null, \"a (-b)\");\n    assertQueryEquals(\"a OR -b\", null, \"a (-b)\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ecaea79e307d83311c31273b0ea89b9fdb0c5a32":["c7f8e68717c68517265937c911e1ce9f25750247"],"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c7f8e68717c68517265937c911e1ce9f25750247":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"8017ab6544f30f93b106e419e7298173bad77f69":["c7f8e68717c68517265937c911e1ce9f25750247","ecaea79e307d83311c31273b0ea89b9fdb0c5a32"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["c7f8e68717c68517265937c911e1ce9f25750247","ecaea79e307d83311c31273b0ea89b9fdb0c5a32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ecaea79e307d83311c31273b0ea89b9fdb0c5a32"]},"commit2Childs":{"ecaea79e307d83311c31273b0ea89b9fdb0c5a32":["8017ab6544f30f93b106e419e7298173bad77f69","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["c7f8e68717c68517265937c911e1ce9f25750247"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"c7f8e68717c68517265937c911e1ce9f25750247":["ecaea79e307d83311c31273b0ea89b9fdb0c5a32","8017ab6544f30f93b106e419e7298173bad77f69","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"8017ab6544f30f93b106e419e7298173bad77f69":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8017ab6544f30f93b106e419e7298173bad77f69","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}