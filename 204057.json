{"path":"src/java/org/apache/solr/core/SolrCore#newHolder(SolrIndexSearcher).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#newHolder(SolrIndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  private RefCounted<SolrIndexSearcher> newHolder(SolrIndexSearcher newSearcher) {\n    RefCounted<SolrIndexSearcher> holder = new RefCounted<SolrIndexSearcher>(newSearcher)\n    {\n      public void close() {\n        try {\n          resource.close();\n        } catch (IOException e) {\n          log.severe(\"Error closing searcher:\" + SolrException.toStr(e));\n        }\n      }\n    };\n    holder.incref();  // set ref count to 1 to account for this._searcher\n    return holder;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d6338c87060be5f66757a94945975f3bbd377a9","date":1189278234,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#newHolder(SolrIndexSearcher).mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#newHolder(SolrIndexSearcher).mjava","sourceNew":"  private RefCounted<SolrIndexSearcher> newHolder(SolrIndexSearcher newSearcher) {\n    RefCounted<SolrIndexSearcher> holder = new RefCounted<SolrIndexSearcher>(newSearcher) {\n      public void close() {\n        try {\n          resource.close();\n        } catch (IOException e) {\n          log.severe(\"Error closing searcher:\" + SolrException.toStr(e));\n        }\n      }\n    };\n    holder.incref();  // set ref count to 1 to account for this._searcher\n    return holder;\n  }\n\n","sourceOld":"  private RefCounted<SolrIndexSearcher> newHolder(SolrIndexSearcher newSearcher) {\n    RefCounted<SolrIndexSearcher> holder = new RefCounted<SolrIndexSearcher>(newSearcher)\n    {\n      public void close() {\n        try {\n          resource.close();\n        } catch (IOException e) {\n          log.severe(\"Error closing searcher:\" + SolrException.toStr(e));\n        }\n      }\n    };\n    holder.incref();  // set ref count to 1 to account for this._searcher\n    return holder;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9ee90cb9c9196a70b1d7cc96cca56fdabaad263","date":1216648894,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#newHolder(SolrIndexSearcher).mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#newHolder(SolrIndexSearcher).mjava","sourceNew":"  private RefCounted<SolrIndexSearcher> newHolder(SolrIndexSearcher newSearcher) {\n    RefCounted<SolrIndexSearcher> holder = new RefCounted<SolrIndexSearcher>(newSearcher) {\n      public void close() {\n        try {\n          synchronized(searcherLock) {\n            // it's possible for someone to get a reference via the _searchers queue\n            // and increment the refcount while RefCounted.close() is being called.\n            // we check the refcount again to see if this has happened and abort the close.\n            // This relies on the RefCounted class allowing close() to be called every\n            // time the counter hits zero.\n            if (refcount.get() > 0) return;\n            _searchers.remove(this);\n          }\n          resource.close();\n        } catch (IOException e) {\n          log.severe(\"Error closing searcher:\" + SolrException.toStr(e));\n        }\n      }\n    };\n    holder.incref();  // set ref count to 1 to account for this._searcher\n    return holder;\n  }\n\n","sourceOld":"  private RefCounted<SolrIndexSearcher> newHolder(SolrIndexSearcher newSearcher) {\n    RefCounted<SolrIndexSearcher> holder = new RefCounted<SolrIndexSearcher>(newSearcher) {\n      public void close() {\n        try {\n          resource.close();\n        } catch (IOException e) {\n          log.severe(\"Error closing searcher:\" + SolrException.toStr(e));\n        }\n      }\n    };\n    holder.incref();  // set ref count to 1 to account for this._searcher\n    return holder;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00da8b51bdeae168a5b26ec506db372b219ca7a2","date":1221704186,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#newHolder(SolrIndexSearcher).mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#newHolder(SolrIndexSearcher).mjava","sourceNew":"  private RefCounted<SolrIndexSearcher> newHolder(SolrIndexSearcher newSearcher) {\n    RefCounted<SolrIndexSearcher> holder = new RefCounted<SolrIndexSearcher>(newSearcher) {\n      public void close() {\n        try {\n          synchronized(searcherLock) {\n            // it's possible for someone to get a reference via the _searchers queue\n            // and increment the refcount while RefCounted.close() is being called.\n            // we check the refcount again to see if this has happened and abort the close.\n            // This relies on the RefCounted class allowing close() to be called every\n            // time the counter hits zero.\n            if (refcount.get() > 0) return;\n            _searchers.remove(this);\n          }\n          resource.close();\n        } catch (IOException e) {\n          log.error(\"Error closing searcher:\" + SolrException.toStr(e));\n        }\n      }\n    };\n    holder.incref();  // set ref count to 1 to account for this._searcher\n    return holder;\n  }\n\n","sourceOld":"  private RefCounted<SolrIndexSearcher> newHolder(SolrIndexSearcher newSearcher) {\n    RefCounted<SolrIndexSearcher> holder = new RefCounted<SolrIndexSearcher>(newSearcher) {\n      public void close() {\n        try {\n          synchronized(searcherLock) {\n            // it's possible for someone to get a reference via the _searchers queue\n            // and increment the refcount while RefCounted.close() is being called.\n            // we check the refcount again to see if this has happened and abort the close.\n            // This relies on the RefCounted class allowing close() to be called every\n            // time the counter hits zero.\n            if (refcount.get() > 0) return;\n            _searchers.remove(this);\n          }\n          resource.close();\n        } catch (IOException e) {\n          log.severe(\"Error closing searcher:\" + SolrException.toStr(e));\n        }\n      }\n    };\n    holder.incref();  // set ref count to 1 to account for this._searcher\n    return holder;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrCore#newHolder(SolrIndexSearcher).mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#newHolder(SolrIndexSearcher).mjava","sourceNew":"  private RefCounted<SolrIndexSearcher> newHolder(SolrIndexSearcher newSearcher) {\n    RefCounted<SolrIndexSearcher> holder = new RefCounted<SolrIndexSearcher>(newSearcher) {\n      public void close() {\n        try {\n          synchronized(searcherLock) {\n            // it's possible for someone to get a reference via the _searchers queue\n            // and increment the refcount while RefCounted.close() is being called.\n            // we check the refcount again to see if this has happened and abort the close.\n            // This relies on the RefCounted class allowing close() to be called every\n            // time the counter hits zero.\n            if (refcount.get() > 0) return;\n            _searchers.remove(this);\n          }\n          resource.close();\n        } catch (IOException e) {\n          log.error(\"Error closing searcher:\" + SolrException.toStr(e));\n        }\n      }\n    };\n    holder.incref();  // set ref count to 1 to account for this._searcher\n    return holder;\n  }\n\n","sourceOld":"  private RefCounted<SolrIndexSearcher> newHolder(SolrIndexSearcher newSearcher) {\n    RefCounted<SolrIndexSearcher> holder = new RefCounted<SolrIndexSearcher>(newSearcher) {\n      public void close() {\n        try {\n          synchronized(searcherLock) {\n            // it's possible for someone to get a reference via the _searchers queue\n            // and increment the refcount while RefCounted.close() is being called.\n            // we check the refcount again to see if this has happened and abort the close.\n            // This relies on the RefCounted class allowing close() to be called every\n            // time the counter hits zero.\n            if (refcount.get() > 0) return;\n            _searchers.remove(this);\n          }\n          resource.close();\n        } catch (IOException e) {\n          log.error(\"Error closing searcher:\" + SolrException.toStr(e));\n        }\n      }\n    };\n    holder.incref();  // set ref count to 1 to account for this._searcher\n    return holder;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6d6338c87060be5f66757a94945975f3bbd377a9":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["b9ee90cb9c9196a70b1d7cc96cca56fdabaad263"],"b9ee90cb9c9196a70b1d7cc96cca56fdabaad263":["6d6338c87060be5f66757a94945975f3bbd377a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6d6338c87060be5f66757a94945975f3bbd377a9":["b9ee90cb9c9196a70b1d7cc96cca56fdabaad263"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["6d6338c87060be5f66757a94945975f3bbd377a9"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["ad94625fb8d088209f46650c8097196fec67f00c"],"b9ee90cb9c9196a70b1d7cc96cca56fdabaad263":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}