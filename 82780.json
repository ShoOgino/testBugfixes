{"path":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#extractRemotePath(String,String).mjava","commits":[{"id":"9125399a2b1542e8303716ed9020cb6cd4a7aa93","date":1510160069,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#extractRemotePath(String,String).mjava","pathOld":"/dev/null","sourceNew":"  protected void extractRemotePath(String collectionName, String origCorename) throws UnsupportedEncodingException, KeeperException, InterruptedException {\n    assert core == null;\n    coreUrl = getRemotCoreUrl(collectionName, origCorename);\n    // don't proxy for internal update requests\n    invalidStates = checkStateVersionsAreValid(queryParams.get(CloudSolrClient.STATE_VERSION));\n    if (coreUrl != null\n        && queryParams.get(DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM) == null) {\n      if (invalidStates != null) {\n        //it does not make sense to send the request to a remote node\n        throw new SolrException(SolrException.ErrorCode.INVALID_STATE, new String(Utils.toJSON(invalidStates), org.apache.lucene.util.IOUtils.UTF_8));\n      }\n      action = REMOTEQUERY;\n    } else {\n      if (!retry) {\n        // we couldn't find a core to work with, try reloading aliases\n        // TODO: it would be nice if admin ui elements skipped this...\n        ZkStateReader reader = cores.getZkController()\n            .getZkStateReader();\n        reader.updateAliases();\n        action = RETRY;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3ce90eebc5ea0ea353b865b3db6dbe0c51fc1710"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"215e40821821b2df2e69355e208532c05ef095a5","date":1510858642,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#extractRemotePath(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#extractRemotePath(String,String).mjava","sourceNew":"  protected void extractRemotePath(String collectionName, String origCorename) throws UnsupportedEncodingException, KeeperException, InterruptedException {\n    assert core == null;\n    coreUrl = getRemotCoreUrl(collectionName, origCorename);\n    // don't proxy for internal update requests\n    invalidStates = checkStateVersionsAreValid(queryParams.get(CloudSolrClient.STATE_VERSION));\n    if (coreUrl != null\n        && queryParams.get(DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM) == null) {\n      if (invalidStates != null) {\n        //it does not make sense to send the request to a remote node\n        throw new SolrException(SolrException.ErrorCode.INVALID_STATE, new String(Utils.toJSON(invalidStates), org.apache.lucene.util.IOUtils.UTF_8));\n      }\n      action = REMOTEQUERY;\n    } else {\n      if (!retry) {\n        // we couldn't find a core to work with, try reloading aliases\n        // TODO: it would be nice if admin ui elements skipped this...\n        cores.getZkController().getZkStateReader().aliasesHolder.update();\n        action = RETRY;\n      }\n    }\n  }\n\n","sourceOld":"  protected void extractRemotePath(String collectionName, String origCorename) throws UnsupportedEncodingException, KeeperException, InterruptedException {\n    assert core == null;\n    coreUrl = getRemotCoreUrl(collectionName, origCorename);\n    // don't proxy for internal update requests\n    invalidStates = checkStateVersionsAreValid(queryParams.get(CloudSolrClient.STATE_VERSION));\n    if (coreUrl != null\n        && queryParams.get(DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM) == null) {\n      if (invalidStates != null) {\n        //it does not make sense to send the request to a remote node\n        throw new SolrException(SolrException.ErrorCode.INVALID_STATE, new String(Utils.toJSON(invalidStates), org.apache.lucene.util.IOUtils.UTF_8));\n      }\n      action = REMOTEQUERY;\n    } else {\n      if (!retry) {\n        // we couldn't find a core to work with, try reloading aliases\n        // TODO: it would be nice if admin ui elements skipped this...\n        ZkStateReader reader = cores.getZkController()\n            .getZkStateReader();\n        reader.updateAliases();\n        action = RETRY;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3cbd743a4843f513f793670e3ab0e272bf824faf","date":1518149529,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#extractRemotePath(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#extractRemotePath(String,String).mjava","sourceNew":"  protected void extractRemotePath(String collectionName, String origCorename) throws UnsupportedEncodingException, KeeperException, InterruptedException {\n    assert core == null;\n    coreUrl = getRemotCoreUrl(collectionName, origCorename);\n    // don't proxy for internal update requests\n    invalidStates = checkStateVersionsAreValid(queryParams.get(CloudSolrClient.STATE_VERSION));\n    if (coreUrl != null\n        && queryParams.get(DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM) == null) {\n      if (invalidStates != null) {\n        //it does not make sense to send the request to a remote node\n        throw new SolrException(SolrException.ErrorCode.INVALID_STATE, new String(Utils.toJSON(invalidStates), org.apache.lucene.util.IOUtils.UTF_8));\n      }\n      action = REMOTEQUERY;\n    } else {\n      if (!retry) {\n        // we couldn't find a core to work with, try reloading aliases\n        // TODO: it would be nice if admin ui elements skipped this...\n        cores.getZkController().getZkStateReader().aliasesManager.update();\n        action = RETRY;\n      }\n    }\n  }\n\n","sourceOld":"  protected void extractRemotePath(String collectionName, String origCorename) throws UnsupportedEncodingException, KeeperException, InterruptedException {\n    assert core == null;\n    coreUrl = getRemotCoreUrl(collectionName, origCorename);\n    // don't proxy for internal update requests\n    invalidStates = checkStateVersionsAreValid(queryParams.get(CloudSolrClient.STATE_VERSION));\n    if (coreUrl != null\n        && queryParams.get(DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM) == null) {\n      if (invalidStates != null) {\n        //it does not make sense to send the request to a remote node\n        throw new SolrException(SolrException.ErrorCode.INVALID_STATE, new String(Utils.toJSON(invalidStates), org.apache.lucene.util.IOUtils.UTF_8));\n      }\n      action = REMOTEQUERY;\n    } else {\n      if (!retry) {\n        // we couldn't find a core to work with, try reloading aliases\n        // TODO: it would be nice if admin ui elements skipped this...\n        cores.getZkController().getZkStateReader().aliasesHolder.update();\n        action = RETRY;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8e81b6aab54e3749e1502c221e0bc9dbd3f91e15","date":1525806607,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#extractRemotePath(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#extractRemotePath(String,String).mjava","sourceNew":"  protected void extractRemotePath(String collectionName, String origCorename) throws UnsupportedEncodingException, KeeperException, InterruptedException {\n    assert core == null;\n    coreUrl = getRemotCoreUrl(collectionName, origCorename);\n    // don't proxy for internal update requests\n    invalidStates = checkStateVersionsAreValid(queryParams.get(CloudSolrClient.STATE_VERSION));\n    if (coreUrl != null\n        && queryParams.get(DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM) == null) {\n      if (invalidStates != null) {\n        //it does not make sense to send the request to a remote node\n        throw new SolrException(SolrException.ErrorCode.INVALID_STATE, new String(Utils.toJSON(invalidStates), org.apache.lucene.util.IOUtils.UTF_8));\n      }\n      action = REMOTEQUERY;\n    } else {\n      if (!retry) {\n        // we couldn't find a core to work with, try reloading aliases & this collection\n        cores.getZkController().getZkStateReader().aliasesManager.update();\n        cores.getZkController().zkStateReader.forceUpdateCollection(collectionName);\n        action = RETRY;\n      }\n    }\n  }\n\n","sourceOld":"  protected void extractRemotePath(String collectionName, String origCorename) throws UnsupportedEncodingException, KeeperException, InterruptedException {\n    assert core == null;\n    coreUrl = getRemotCoreUrl(collectionName, origCorename);\n    // don't proxy for internal update requests\n    invalidStates = checkStateVersionsAreValid(queryParams.get(CloudSolrClient.STATE_VERSION));\n    if (coreUrl != null\n        && queryParams.get(DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM) == null) {\n      if (invalidStates != null) {\n        //it does not make sense to send the request to a remote node\n        throw new SolrException(SolrException.ErrorCode.INVALID_STATE, new String(Utils.toJSON(invalidStates), org.apache.lucene.util.IOUtils.UTF_8));\n      }\n      action = REMOTEQUERY;\n    } else {\n      if (!retry) {\n        // we couldn't find a core to work with, try reloading aliases\n        // TODO: it would be nice if admin ui elements skipped this...\n        cores.getZkController().getZkStateReader().aliasesManager.update();\n        action = RETRY;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"813335f324f8bd40ae4d83d8391674b42b536cc0","date":1555591986,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#extractRemotePath(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#extractRemotePath(String,String).mjava","sourceNew":"  protected void extractRemotePath(String collectionName, String origCorename) throws UnsupportedEncodingException, KeeperException, InterruptedException {\n    assert core == null;\n    coreUrl = getRemoteCoreUrl(collectionName, origCorename);\n    // don't proxy for internal update requests\n    invalidStates = checkStateVersionsAreValid(queryParams.get(CloudSolrClient.STATE_VERSION));\n    if (coreUrl != null\n        && queryParams.get(DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM) == null) {\n      if (invalidStates != null) {\n        //it does not make sense to send the request to a remote node\n        throw new SolrException(SolrException.ErrorCode.INVALID_STATE, new String(Utils.toJSON(invalidStates), org.apache.lucene.util.IOUtils.UTF_8));\n      }\n      action = REMOTEQUERY;\n    } else {\n      if (!retry) {\n        // we couldn't find a core to work with, try reloading aliases & this collection\n        cores.getZkController().getZkStateReader().aliasesManager.update();\n        cores.getZkController().zkStateReader.forceUpdateCollection(collectionName);\n        action = RETRY;\n      }\n    }\n  }\n\n","sourceOld":"  protected void extractRemotePath(String collectionName, String origCorename) throws UnsupportedEncodingException, KeeperException, InterruptedException {\n    assert core == null;\n    coreUrl = getRemotCoreUrl(collectionName, origCorename);\n    // don't proxy for internal update requests\n    invalidStates = checkStateVersionsAreValid(queryParams.get(CloudSolrClient.STATE_VERSION));\n    if (coreUrl != null\n        && queryParams.get(DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM) == null) {\n      if (invalidStates != null) {\n        //it does not make sense to send the request to a remote node\n        throw new SolrException(SolrException.ErrorCode.INVALID_STATE, new String(Utils.toJSON(invalidStates), org.apache.lucene.util.IOUtils.UTF_8));\n      }\n      action = REMOTEQUERY;\n    } else {\n      if (!retry) {\n        // we couldn't find a core to work with, try reloading aliases & this collection\n        cores.getZkController().getZkStateReader().aliasesManager.update();\n        cores.getZkController().zkStateReader.forceUpdateCollection(collectionName);\n        action = RETRY;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3ce90eebc5ea0ea353b865b3db6dbe0c51fc1710","date":1571130800,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#extractRemotePath(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#extractRemotePath(String,String).mjava","sourceNew":"  protected void extractRemotePath(String collectionName, String origCorename) throws UnsupportedEncodingException, KeeperException, InterruptedException, SolrException {\n    assert core == null;\n    coreUrl = getRemoteCoreUrl(collectionName, origCorename);\n    // don't proxy for internal update requests\n    invalidStates = checkStateVersionsAreValid(queryParams.get(CloudSolrClient.STATE_VERSION));\n    if (coreUrl != null\n        && queryParams.get(DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM) == null) {\n      if (invalidStates != null) {\n        //it does not make sense to send the request to a remote node\n        throw new SolrException(SolrException.ErrorCode.INVALID_STATE, new String(Utils.toJSON(invalidStates), org.apache.lucene.util.IOUtils.UTF_8));\n      }\n      action = REMOTEQUERY;\n    } else {\n      if (!retry) {\n        // we couldn't find a core to work with, try reloading aliases & this collection\n        cores.getZkController().getZkStateReader().aliasesManager.update();\n        cores.getZkController().zkStateReader.forceUpdateCollection(collectionName);\n        action = RETRY;\n      }\n    }\n  }\n\n","sourceOld":"  protected void extractRemotePath(String collectionName, String origCorename) throws UnsupportedEncodingException, KeeperException, InterruptedException {\n    assert core == null;\n    coreUrl = getRemoteCoreUrl(collectionName, origCorename);\n    // don't proxy for internal update requests\n    invalidStates = checkStateVersionsAreValid(queryParams.get(CloudSolrClient.STATE_VERSION));\n    if (coreUrl != null\n        && queryParams.get(DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM) == null) {\n      if (invalidStates != null) {\n        //it does not make sense to send the request to a remote node\n        throw new SolrException(SolrException.ErrorCode.INVALID_STATE, new String(Utils.toJSON(invalidStates), org.apache.lucene.util.IOUtils.UTF_8));\n      }\n      action = REMOTEQUERY;\n    } else {\n      if (!retry) {\n        // we couldn't find a core to work with, try reloading aliases & this collection\n        cores.getZkController().getZkStateReader().aliasesManager.update();\n        cores.getZkController().zkStateReader.forceUpdateCollection(collectionName);\n        action = RETRY;\n      }\n    }\n  }\n\n","bugFix":["9125399a2b1542e8303716ed9020cb6cd4a7aa93"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#extractRemotePath(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#extractRemotePath(String,String).mjava","sourceNew":"  protected void extractRemotePath(String collectionName, String origCorename) throws UnsupportedEncodingException, KeeperException, InterruptedException, SolrException {\n    assert core == null;\n    coreUrl = getRemoteCoreUrl(collectionName, origCorename);\n    // don't proxy for internal update requests\n    invalidStates = checkStateVersionsAreValid(queryParams.get(CloudSolrClient.STATE_VERSION));\n    if (coreUrl != null\n        && queryParams.get(DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM) == null) {\n      if (invalidStates != null) {\n        //it does not make sense to send the request to a remote node\n        throw new SolrException(SolrException.ErrorCode.INVALID_STATE, new String(Utils.toJSON(invalidStates), org.apache.lucene.util.IOUtils.UTF_8));\n      }\n      action = REMOTEQUERY;\n    } else {\n      if (!retry) {\n        // we couldn't find a core to work with, try reloading aliases & this collection\n        cores.getZkController().getZkStateReader().aliasesManager.update();\n        cores.getZkController().zkStateReader.forceUpdateCollection(collectionName);\n        action = RETRY;\n      }\n    }\n  }\n\n","sourceOld":"  protected void extractRemotePath(String collectionName, String origCorename) throws UnsupportedEncodingException, KeeperException, InterruptedException {\n    assert core == null;\n    coreUrl = getRemoteCoreUrl(collectionName, origCorename);\n    // don't proxy for internal update requests\n    invalidStates = checkStateVersionsAreValid(queryParams.get(CloudSolrClient.STATE_VERSION));\n    if (coreUrl != null\n        && queryParams.get(DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM) == null) {\n      if (invalidStates != null) {\n        //it does not make sense to send the request to a remote node\n        throw new SolrException(SolrException.ErrorCode.INVALID_STATE, new String(Utils.toJSON(invalidStates), org.apache.lucene.util.IOUtils.UTF_8));\n      }\n      action = REMOTEQUERY;\n    } else {\n      if (!retry) {\n        // we couldn't find a core to work with, try reloading aliases & this collection\n        cores.getZkController().getZkStateReader().aliasesManager.update();\n        cores.getZkController().zkStateReader.forceUpdateCollection(collectionName);\n        action = RETRY;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"215e40821821b2df2e69355e208532c05ef095a5":["9125399a2b1542e8303716ed9020cb6cd4a7aa93"],"8e81b6aab54e3749e1502c221e0bc9dbd3f91e15":["3cbd743a4843f513f793670e3ab0e272bf824faf"],"3cbd743a4843f513f793670e3ab0e272bf824faf":["215e40821821b2df2e69355e208532c05ef095a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"813335f324f8bd40ae4d83d8391674b42b536cc0":["8e81b6aab54e3749e1502c221e0bc9dbd3f91e15"],"3ce90eebc5ea0ea353b865b3db6dbe0c51fc1710":["813335f324f8bd40ae4d83d8391674b42b536cc0"],"9125399a2b1542e8303716ed9020cb6cd4a7aa93":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3ce90eebc5ea0ea353b865b3db6dbe0c51fc1710"],"b0b597c65628ca9e73913a07e81691f8229bae35":["813335f324f8bd40ae4d83d8391674b42b536cc0","3ce90eebc5ea0ea353b865b3db6dbe0c51fc1710"]},"commit2Childs":{"215e40821821b2df2e69355e208532c05ef095a5":["3cbd743a4843f513f793670e3ab0e272bf824faf"],"8e81b6aab54e3749e1502c221e0bc9dbd3f91e15":["813335f324f8bd40ae4d83d8391674b42b536cc0"],"3cbd743a4843f513f793670e3ab0e272bf824faf":["8e81b6aab54e3749e1502c221e0bc9dbd3f91e15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9125399a2b1542e8303716ed9020cb6cd4a7aa93"],"813335f324f8bd40ae4d83d8391674b42b536cc0":["3ce90eebc5ea0ea353b865b3db6dbe0c51fc1710","b0b597c65628ca9e73913a07e81691f8229bae35"],"3ce90eebc5ea0ea353b865b3db6dbe0c51fc1710":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"9125399a2b1542e8303716ed9020cb6cd4a7aa93":["215e40821821b2df2e69355e208532c05ef095a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}