{"path":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreNames(SolrCore).mjava","commits":[{"id":"9409650933cc688e77e565092a25e58adfc2e18d","date":1366663164,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreNames(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreMaps#getCoreNames(SolrCore).mjava","sourceNew":"  List<String> getCoreNames(SolrCore core) {\n    List<String> lst = new ArrayList<String>();\n\n    synchronized (modifyLock) {\n      for (Map.Entry<String, SolrCore> entry : cores.entrySet()) {\n        if (core == entry.getValue()) {\n          lst.add(entry.getKey());\n        }\n      }\n      for (Map.Entry<String, SolrCore> entry : transientCores.entrySet()) {\n        if (core == entry.getValue()) {\n          lst.add(entry.getKey());\n        }\n      }\n    }\n    return lst;\n  }\n\n","sourceOld":"  List<String> getCoreNames(SolrCore core) {\n    List<String> lst = new ArrayList<String>();\n\n    synchronized (locker) {\n      for (Map.Entry<String, SolrCore> entry : cores.entrySet()) {\n        if (core == entry.getValue()) {\n          lst.add(entry.getKey());\n        }\n      }\n      for (Map.Entry<String, SolrCore> entry : transientCores.entrySet()) {\n        if (core == entry.getValue()) {\n          lst.add(entry.getKey());\n        }\n      }\n    }\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreNames(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreNames(SolrCore).mjava","sourceNew":"  List<String> getCoreNames(SolrCore core) {\n    List<String> lst = new ArrayList<>();\n\n    synchronized (modifyLock) {\n      for (Map.Entry<String, SolrCore> entry : cores.entrySet()) {\n        if (core == entry.getValue()) {\n          lst.add(entry.getKey());\n        }\n      }\n      for (Map.Entry<String, SolrCore> entry : transientCores.entrySet()) {\n        if (core == entry.getValue()) {\n          lst.add(entry.getKey());\n        }\n      }\n    }\n    return lst;\n  }\n\n","sourceOld":"  List<String> getCoreNames(SolrCore core) {\n    List<String> lst = new ArrayList<String>();\n\n    synchronized (modifyLock) {\n      for (Map.Entry<String, SolrCore> entry : cores.entrySet()) {\n        if (core == entry.getValue()) {\n          lst.add(entry.getKey());\n        }\n      }\n      for (Map.Entry<String, SolrCore> entry : transientCores.entrySet()) {\n        if (core == entry.getValue()) {\n          lst.add(entry.getKey());\n        }\n      }\n    }\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9435d55e3ea95c5d94406d3affc36f9505b6a736","date":1491251232,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreNames(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreNames(SolrCore).mjava","sourceNew":"  /** This method is currently experimental.\n   * @return a Collection of the names that a specific core is mapped to.\n   * \n   * Note: this implies that the core is loaded\n   */\n  @Experimental\n  List<String> getCoreNames(SolrCore core) {\n    List<String> lst = new ArrayList<>();\n\n    synchronized (modifyLock) {\n      for (Map.Entry<String, SolrCore> entry : cores.entrySet()) {\n        if (core == entry.getValue()) {\n          lst.add(entry.getKey());\n        }\n      }\n      if (container.getTransientCacheHandler() != null) {\n        lst.addAll(container.getTransientCacheHandler().getNamesForCore(core));\n      }\n    }\n    return lst;\n  }\n\n","sourceOld":"  List<String> getCoreNames(SolrCore core) {\n    List<String> lst = new ArrayList<>();\n\n    synchronized (modifyLock) {\n      for (Map.Entry<String, SolrCore> entry : cores.entrySet()) {\n        if (core == entry.getValue()) {\n          lst.add(entry.getKey());\n        }\n      }\n      for (Map.Entry<String, SolrCore> entry : transientCores.entrySet()) {\n        if (core == entry.getValue()) {\n          lst.add(entry.getKey());\n        }\n      }\n    }\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b6a4b585aed7660a589375f6a09b90efd29c961","date":1491296430,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreNames(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreNames(SolrCore).mjava","sourceNew":"  /** This method is currently experimental.\n   * @return a Collection of the names that a specific core is mapped to.\n   * \n   * Note: this implies that the core is loaded\n   */\n  @Experimental\n  List<String> getCoreNames(SolrCore core) {\n    List<String> lst = new ArrayList<>();\n\n    synchronized (modifyLock) {\n      for (Map.Entry<String, SolrCore> entry : cores.entrySet()) {\n        if (core == entry.getValue()) {\n          lst.add(entry.getKey());\n        }\n      }\n      if (container.getTransientCacheHandler() != null) {\n        lst.addAll(container.getTransientCacheHandler().getNamesForCore(core));\n      }\n    }\n    return lst;\n  }\n\n","sourceOld":"  List<String> getCoreNames(SolrCore core) {\n    List<String> lst = new ArrayList<>();\n\n    synchronized (modifyLock) {\n      for (Map.Entry<String, SolrCore> entry : cores.entrySet()) {\n        if (core == entry.getValue()) {\n          lst.add(entry.getKey());\n        }\n      }\n      for (Map.Entry<String, SolrCore> entry : transientCores.entrySet()) {\n        if (core == entry.getValue()) {\n          lst.add(entry.getKey());\n        }\n      }\n    }\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7871f9c286dce2a9370bcf517a3e7d12e3bd9602","date":1498708934,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getNamesForCore(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreNames(SolrCore).mjava","sourceNew":"  /** This method is currently experimental.\n   *\n   * @return a Collection of the names that a specific core object is mapped to, there are more than one.\n   */\n  @Experimental\n  List<String> getNamesForCore(SolrCore core) {\n    List<String> lst = new ArrayList<>();\n\n    synchronized (modifyLock) {\n      for (Map.Entry<String, SolrCore> entry : cores.entrySet()) {\n        if (core == entry.getValue()) {\n          lst.add(entry.getKey());\n        }\n      }\n      if (getTransientCacheHandler() != null) {\n        lst.addAll(getTransientCacheHandler().getNamesForCore(core));\n      }\n    }\n    return lst;\n  }\n\n","sourceOld":"  /** This method is currently experimental.\n   * @return a Collection of the names that a specific core is mapped to.\n   * \n   * Note: this implies that the core is loaded\n   */\n  @Experimental\n  List<String> getCoreNames(SolrCore core) {\n    List<String> lst = new ArrayList<>();\n\n    synchronized (modifyLock) {\n      for (Map.Entry<String, SolrCore> entry : cores.entrySet()) {\n        if (core == entry.getValue()) {\n          lst.add(entry.getKey());\n        }\n      }\n      if (container.getTransientCacheHandler() != null) {\n        lst.addAll(container.getTransientCacheHandler().getNamesForCore(core));\n      }\n    }\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreNames(SolrCore).mjava","sourceNew":null,"sourceOld":"  /** This method is currently experimental.\n   * @return a Collection of the names that a specific core is mapped to.\n   * \n   * Note: this implies that the core is loaded\n   */\n  @Experimental\n  List<String> getCoreNames(SolrCore core) {\n    List<String> lst = new ArrayList<>();\n\n    synchronized (modifyLock) {\n      for (Map.Entry<String, SolrCore> entry : cores.entrySet()) {\n        if (core == entry.getValue()) {\n          lst.add(entry.getKey());\n        }\n      }\n      if (container.getTransientCacheHandler() != null) {\n        lst.addAll(container.getTransientCacheHandler().getNamesForCore(core));\n      }\n    }\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreNames(SolrCore).mjava","sourceNew":null,"sourceOld":"  /** This method is currently experimental.\n   * @return a Collection of the names that a specific core is mapped to.\n   * \n   * Note: this implies that the core is loaded\n   */\n  @Experimental\n  List<String> getCoreNames(SolrCore core) {\n    List<String> lst = new ArrayList<>();\n\n    synchronized (modifyLock) {\n      for (Map.Entry<String, SolrCore> entry : cores.entrySet()) {\n        if (core == entry.getValue()) {\n          lst.add(entry.getKey());\n        }\n      }\n      if (container.getTransientCacheHandler() != null) {\n        lst.addAll(container.getTransientCacheHandler().getNamesForCore(core));\n      }\n    }\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9435d55e3ea95c5d94406d3affc36f9505b6a736":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["9409650933cc688e77e565092a25e58adfc2e18d"],"9409650933cc688e77e565092a25e58adfc2e18d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["9435d55e3ea95c5d94406d3affc36f9505b6a736"],"30c8e5574b55d57947e989443dfde611646530ee":["8b6a4b585aed7660a589375f6a09b90efd29c961","28288370235ed02234a64753cdbf0c6ec096304a"],"8b6a4b585aed7660a589375f6a09b90efd29c961":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"28288370235ed02234a64753cdbf0c6ec096304a":["9435d55e3ea95c5d94406d3affc36f9505b6a736","7871f9c286dce2a9370bcf517a3e7d12e3bd9602"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"9435d55e3ea95c5d94406d3affc36f9505b6a736":["7871f9c286dce2a9370bcf517a3e7d12e3bd9602","28288370235ed02234a64753cdbf0c6ec096304a"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["9435d55e3ea95c5d94406d3affc36f9505b6a736","8b6a4b585aed7660a589375f6a09b90efd29c961"],"9409650933cc688e77e565092a25e58adfc2e18d":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9409650933cc688e77e565092a25e58adfc2e18d"],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"8b6a4b585aed7660a589375f6a09b90efd29c961":["30c8e5574b55d57947e989443dfde611646530ee"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}