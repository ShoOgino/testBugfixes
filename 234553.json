{"path":"lucene/facet/src/java/org/apache/lucene/facet/index/CategoryDocumentBuilder#fillCategoriesMap(Iterable[CategoryAttribute]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/CategoryDocumentBuilder#fillCategoriesMap(Iterable[CategoryAttribute]).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/index/CategoryDocumentBuilder#fillCategoriesMap(Iterable[CategoryAttribute]).mjava","sourceNew":"  /**\n   * Fills the categories mapping between a field name and a list of\n   * categories that belongs to it according to this builder's\n   * {@link FacetIndexingParams} object\n   * \n   * @param categories\n   *            Iterable over the category attributes\n   */\n  protected void fillCategoriesMap(Iterable<CategoryAttribute> categories)\n      throws IOException {\n    categoriesMap.clear();\n\n    // for-each category\n    for (CategoryAttribute category : categories) {\n      // extracting the field-name to which this category belongs\n      String fieldName = indexingParams.getCategoryListParams(\n          category.getCategoryPath()).getTerm().field();\n\n      // getting the list of categories which belongs to that field\n      List<CategoryAttribute> list = categoriesMap.get(fieldName);\n\n      // if no such list exists\n      if (list == null) {\n        // adding a new one to the map\n        list = new ArrayList<CategoryAttribute>();\n        categoriesMap.put(fieldName, list);\n      }\n\n      // adding the new category to the list\n      list.add(category.clone());\n    }\n  }\n\n","sourceOld":"  /**\n   * Fills the categories mapping between a field name and a list of\n   * categories that belongs to it according to this builder's\n   * {@link FacetIndexingParams} object\n   * \n   * @param categories\n   *            Iterable over the category attributes\n   */\n  protected void fillCategoriesMap(Iterable<CategoryAttribute> categories)\n      throws IOException {\n    categoriesMap.clear();\n\n    // for-each category\n    for (CategoryAttribute category : categories) {\n      // extracting the field-name to which this category belongs\n      String fieldName = indexingParams.getCategoryListParams(\n          category.getCategoryPath()).getTerm().field();\n\n      // getting the list of categories which belongs to that field\n      List<CategoryAttribute> list = categoriesMap.get(fieldName);\n\n      // if no such list exists\n      if (list == null) {\n        // adding a new one to the map\n        list = new ArrayList<CategoryAttribute>();\n        categoriesMap.put(fieldName, list);\n      }\n\n      // adding the new category to the list\n      list.add(category.clone());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a1037d9031f9702ee6912f8751ef1d5320da6d9","date":1357217787,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/CategoryDocumentBuilder#fillCategoriesMap(Iterable[CategoryAttribute]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Fills the categories mapping between a field name and a list of\n   * categories that belongs to it according to this builder's\n   * {@link FacetIndexingParams} object\n   * \n   * @param categories\n   *            Iterable over the category attributes\n   */\n  protected void fillCategoriesMap(Iterable<CategoryAttribute> categories)\n      throws IOException {\n    categoriesMap.clear();\n\n    // for-each category\n    for (CategoryAttribute category : categories) {\n      // extracting the field-name to which this category belongs\n      String fieldName = indexingParams.getCategoryListParams(\n          category.getCategoryPath()).getTerm().field();\n\n      // getting the list of categories which belongs to that field\n      List<CategoryAttribute> list = categoriesMap.get(fieldName);\n\n      // if no such list exists\n      if (list == null) {\n        // adding a new one to the map\n        list = new ArrayList<CategoryAttribute>();\n        categoriesMap.put(fieldName, list);\n      }\n\n      // adding the new category to the list\n      list.add(category.clone());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/CategoryDocumentBuilder#fillCategoriesMap(Iterable[CategoryAttribute]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Fills the categories mapping between a field name and a list of\n   * categories that belongs to it according to this builder's\n   * {@link FacetIndexingParams} object\n   * \n   * @param categories\n   *            Iterable over the category attributes\n   */\n  protected void fillCategoriesMap(Iterable<CategoryAttribute> categories)\n      throws IOException {\n    categoriesMap.clear();\n\n    // for-each category\n    for (CategoryAttribute category : categories) {\n      // extracting the field-name to which this category belongs\n      String fieldName = indexingParams.getCategoryListParams(\n          category.getCategoryPath()).getTerm().field();\n\n      // getting the list of categories which belongs to that field\n      List<CategoryAttribute> list = categoriesMap.get(fieldName);\n\n      // if no such list exists\n      if (list == null) {\n        // adding a new one to the map\n        list = new ArrayList<CategoryAttribute>();\n        categoriesMap.put(fieldName, list);\n      }\n\n      // adding the new category to the list\n      list.add(category.clone());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7a1037d9031f9702ee6912f8751ef1d5320da6d9"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}