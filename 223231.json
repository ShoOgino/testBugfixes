{"path":"contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#testNormalizedScores().mjava","commits":[{"id":"1474a58d42cdf3b9e16ffe07bce31e4abffe5e02","date":1244977984,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#testNormalizedScores().mjava","pathOld":"/dev/null","sourceNew":"  // test that the relevancy scores are the same even if\n  // hits are sorted\n  public void testNormalizedScores() throws Exception {\n\n    // capture relevancy scores\n    HashMap scoresX = getScores (full.search (queryX, null, 1000).scoreDocs, full);\n    HashMap scoresY = getScores (full.search (queryY, null, 1000).scoreDocs, full);\n    HashMap scoresA = getScores (full.search (queryA, null, 1000).scoreDocs, full);\n\n    // we'll test searching locally, remote and multi\n    MultiSearcher remote = new MultiSearcher (new Searchable[] { getRemote() });\n\n    // change sorting and make sure relevancy stays the same\n\n    sort = new Sort();\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort(SortField.FIELD_DOC);\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (\"int\");\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (\"float\");\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (\"string\");\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new String[] {\"int\",\"float\"});\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField[] { new SortField (\"int\", SortField.INT, true), new SortField (null, SortField.DOC, true) });\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new String[] {\"float\",\"string\"});\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["084b18e2b1c84d66746d1a94b6668766d357c2d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99","date":1255432705,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#testNormalizedScores().mjava","pathOld":"contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#testNormalizedScores().mjava","sourceNew":"  // test that the relevancy scores are the same even if\n  // hits are sorted\n  public void testNormalizedScores() throws Exception {\n\n    // capture relevancy scores\n    HashMap scoresX = getScores (full.search (queryX, null, 1000).scoreDocs, full);\n    HashMap scoresY = getScores (full.search (queryY, null, 1000).scoreDocs, full);\n    HashMap scoresA = getScores (full.search (queryA, null, 1000).scoreDocs, full);\n\n    // we'll test searching locally, remote and multi\n    MultiSearcher remote = new MultiSearcher (new Searchable[] { getRemote() });\n\n    // change sorting and make sure relevancy stays the same\n\n    sort = new Sort();\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort(SortField.FIELD_DOC);\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"int\", SortField.INT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"string\", SortField.STRING));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"int\", SortField.INT), new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true), new SortField (null, SortField.DOC, true) );\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"float\", SortField.FLOAT), new SortField(\"string\", SortField.STRING));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n  }\n\n","sourceOld":"  // test that the relevancy scores are the same even if\n  // hits are sorted\n  public void testNormalizedScores() throws Exception {\n\n    // capture relevancy scores\n    HashMap scoresX = getScores (full.search (queryX, null, 1000).scoreDocs, full);\n    HashMap scoresY = getScores (full.search (queryY, null, 1000).scoreDocs, full);\n    HashMap scoresA = getScores (full.search (queryA, null, 1000).scoreDocs, full);\n\n    // we'll test searching locally, remote and multi\n    MultiSearcher remote = new MultiSearcher (new Searchable[] { getRemote() });\n\n    // change sorting and make sure relevancy stays the same\n\n    sort = new Sort();\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort(SortField.FIELD_DOC);\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (\"int\");\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (\"float\");\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (\"string\");\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new String[] {\"int\",\"float\"});\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField[] { new SortField (\"int\", SortField.INT, true), new SortField (null, SortField.DOC, true) });\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new String[] {\"float\",\"string\"});\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#testNormalizedScores().mjava","pathOld":"contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#testNormalizedScores().mjava","sourceNew":"  // test that the relevancy scores are the same even if\n  // hits are sorted\n  public void testNormalizedScores() throws Exception {\n\n    // capture relevancy scores\n    HashMap<String,Float> scoresX = getScores (full.search (queryX, null, 1000).scoreDocs, full);\n    HashMap<String,Float> scoresY = getScores (full.search (queryY, null, 1000).scoreDocs, full);\n    HashMap<String,Float> scoresA = getScores (full.search (queryA, null, 1000).scoreDocs, full);\n\n    // we'll test searching locally, remote and multi\n    MultiSearcher remote = new MultiSearcher (new Searchable[] { getRemote() });\n\n    // change sorting and make sure relevancy stays the same\n\n    sort = new Sort();\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort(SortField.FIELD_DOC);\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"int\", SortField.INT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"string\", SortField.STRING));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"int\", SortField.INT), new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true), new SortField (null, SortField.DOC, true) );\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"float\", SortField.FLOAT), new SortField(\"string\", SortField.STRING));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n  }\n\n","sourceOld":"  // test that the relevancy scores are the same even if\n  // hits are sorted\n  public void testNormalizedScores() throws Exception {\n\n    // capture relevancy scores\n    HashMap scoresX = getScores (full.search (queryX, null, 1000).scoreDocs, full);\n    HashMap scoresY = getScores (full.search (queryY, null, 1000).scoreDocs, full);\n    HashMap scoresA = getScores (full.search (queryA, null, 1000).scoreDocs, full);\n\n    // we'll test searching locally, remote and multi\n    MultiSearcher remote = new MultiSearcher (new Searchable[] { getRemote() });\n\n    // change sorting and make sure relevancy stays the same\n\n    sort = new Sort();\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort(SortField.FIELD_DOC);\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"int\", SortField.INT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"string\", SortField.STRING));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"int\", SortField.INT), new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true), new SortField (null, SortField.DOC, true) );\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"float\", SortField.FLOAT), new SortField(\"string\", SortField.STRING));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#testNormalizedScores().mjava","pathOld":"contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#testNormalizedScores().mjava","sourceNew":"  // test that the relevancy scores are the same even if\n  // hits are sorted\n  public void testNormalizedScores() throws Exception {\n\n    // capture relevancy scores\n    HashMap<String,Float> scoresX = getScores (full.search (queryX, null, 1000).scoreDocs, full);\n    HashMap<String,Float> scoresY = getScores (full.search (queryY, null, 1000).scoreDocs, full);\n    HashMap<String,Float> scoresA = getScores (full.search (queryA, null, 1000).scoreDocs, full);\n\n    // we'll test searching locally, remote and multi\n    MultiSearcher remote = new MultiSearcher (new Searchable[] { getRemote() });\n\n    // change sorting and make sure relevancy stays the same\n\n    sort = new Sort();\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort(SortField.FIELD_DOC);\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"int\", SortField.INT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"string\", SortField.STRING));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"int\", SortField.INT), new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true), new SortField (null, SortField.DOC, true) );\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"float\", SortField.FLOAT), new SortField(\"string\", SortField.STRING));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n  }\n\n","sourceOld":"  // test that the relevancy scores are the same even if\n  // hits are sorted\n  public void testNormalizedScores() throws Exception {\n\n    // capture relevancy scores\n    HashMap<String,Float> scoresX = getScores (full.search (queryX, null, 1000).scoreDocs, full);\n    HashMap<String,Float> scoresY = getScores (full.search (queryY, null, 1000).scoreDocs, full);\n    HashMap<String,Float> scoresA = getScores (full.search (queryA, null, 1000).scoreDocs, full);\n\n    // we'll test searching locally, remote and multi\n    MultiSearcher remote = new MultiSearcher (new Searchable[] { getRemote() });\n\n    // change sorting and make sure relevancy stays the same\n\n    sort = new Sort();\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort(SortField.FIELD_DOC);\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"int\", SortField.INT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"string\", SortField.STRING));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"int\", SortField.INT), new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true), new SortField (null, SortField.DOC, true) );\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"float\", SortField.FLOAT), new SortField(\"string\", SortField.STRING));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1474a58d42cdf3b9e16ffe07bce31e4abffe5e02":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99":["1474a58d42cdf3b9e16ffe07bce31e4abffe5e02"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["ded38b25fe842ef1efc6715745bb8d8ed8e2fc99"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"1474a58d42cdf3b9e16ffe07bce31e4abffe5e02":["ded38b25fe842ef1efc6715745bb8d8ed8e2fc99"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1474a58d42cdf3b9e16ffe07bce31e4abffe5e02"],"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}