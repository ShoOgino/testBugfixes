{"path":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKGEquiv.TermFacet#buildRandomFacets(AtomicInteger,int).mjava","commits":[{"id":"c5ec3c464e62e57df598ba20e010313bf6d5d7b4","date":1589998565,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKGEquiv.TermFacet#buildRandomFacets(AtomicInteger,int).mjava","pathOld":"/dev/null","sourceNew":"    /** \n     * recursive helper method for building random facets\n     *\n     * @param keyCounter used to ensure every generated facet has a unique key name\n     * @param maxDepth max possible depth allowed for the recusion, a lower value may be used depending on how many facets are returned at the current level. \n     */\n    private static Map<String,TermFacet> buildRandomFacets(AtomicInteger keyCounter, int maxDepth) {\n      final int numFacets = Math.max(1, TestUtil.nextInt(random(), -1, 3)); // 3/5th chance of being '1'\n      Map<String,TermFacet> results = new LinkedHashMap<>();\n      for (int i = 0; i < numFacets; i++) {\n        if (keyCounter.get() < 3) { // a hard limit on the total number of facets (regardless of depth) to reduce OOM risk\n\n          final TermFacet facet = TermFacet.buildRandom();\n          \n          results.put(\"facet_\" + keyCounter.incrementAndGet(), facet);\n          if (0 < maxDepth) {\n            // if we're going wide, don't go deep\n            final int nextMaxDepth = Math.max(0, maxDepth - numFacets);\n            facet.subFacets.putAll(buildRandomFacets(keyCounter, TestUtil.nextInt(random(), 0, nextMaxDepth)));\n          }\n          \n          // we get one implicit RelatednessFacet automatically,\n          // randomly add 1 or 2 more ... 3/5th chance of being '0'\n          final int numExtraSKGStats = Math.max(0, TestUtil.nextInt(random(), -2, 2)); \n          for (int skgId = 0; skgId < numExtraSKGStats; skgId++) {\n            // sometimes we overwrite the trivial defualt \"skg\" with this one...\n            final String key = (0 == skgId && 0 == TestUtil.nextInt(random(), 0, 5)) ? \"skg\" : \"skg\" + skgId;\n            facet.subFacets.put(key, RelatednessFacet.buildRandom());\n          }\n\n          if (1 == TestUtil.nextInt(random(), 0, 4)) {\n            // occasionally add in a non-SKG related stat...\n            facet.subFacets.put(\"sum\", SumFacet.buildRandom());\n          }\n        }\n      }\n      return results;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c5ec3c464e62e57df598ba20e010313bf6d5d7b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c5ec3c464e62e57df598ba20e010313bf6d5d7b4"]},"commit2Childs":{"c5ec3c464e62e57df598ba20e010313bf6d5d7b4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c5ec3c464e62e57df598ba20e010313bf6d5d7b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}