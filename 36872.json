{"path":"lucene/backwards/src/java/org/apache/lucene/util/NumericUtils#doubleToSortableLong(double).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/util/NumericUtils#doubleToSortableLong(double).mjava","pathOld":"backwards/src/java/org/apache/lucene/util/NumericUtils#doubleToSortableLong(double).mjava","sourceNew":"  /**\n   * Converts a <code>double</code> value to a sortable signed <code>long</code>.\n   * The value is converted by getting their IEEE 754 floating-point &quot;double format&quot;\n   * bit layout and then some bits are swapped, to be able to compare the result as long.\n   * By this the precision is not reduced, but the value can easily used as a long.\n   * @see #sortableLongToDouble\n   */\n  public static long doubleToSortableLong(double val) {\n    long f = Double.doubleToRawLongBits(val);\n    if (f<0) f ^= 0x7fffffffffffffffL;\n    return f;\n  }\n\n","sourceOld":"  /**\n   * Converts a <code>double</code> value to a sortable signed <code>long</code>.\n   * The value is converted by getting their IEEE 754 floating-point &quot;double format&quot;\n   * bit layout and then some bits are swapped, to be able to compare the result as long.\n   * By this the precision is not reduced, but the value can easily used as a long.\n   * @see #sortableLongToDouble\n   */\n  public static long doubleToSortableLong(double val) {\n    long f = Double.doubleToRawLongBits(val);\n    if (f<0) f ^= 0x7fffffffffffffffL;\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/util/NumericUtils#doubleToSortableLong(double).mjava","sourceNew":null,"sourceOld":"  /**\n   * Converts a <code>double</code> value to a sortable signed <code>long</code>.\n   * The value is converted by getting their IEEE 754 floating-point &quot;double format&quot;\n   * bit layout and then some bits are swapped, to be able to compare the result as long.\n   * By this the precision is not reduced, but the value can easily used as a long.\n   * @see #sortableLongToDouble\n   */\n  public static long doubleToSortableLong(double val) {\n    long f = Double.doubleToRawLongBits(val);\n    if (f<0) f ^= 0x7fffffffffffffffL;\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}