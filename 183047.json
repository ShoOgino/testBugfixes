{"path":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimple() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"command\", \"full-import\");\n    params.set(\"clean\", \"false\");\n    req.setParams(params);\n    String url = \"http://localhost:\" + jetty.getLocalPort() + \"/solr\";\n    CommonsHttpSolrServer solrServer = new CommonsHttpSolrServer(url);\n    solrServer.request(req);\n    ModifiableSolrParams qparams = new ModifiableSolrParams();\n    qparams.add(\"q\", \"*:*\");\n    QueryResponse qres = solrServer.query(qparams);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(2, results.getNumFound());\n    SolrDocument doc = results.get(0);\n    assertEquals(\"1\", doc.getFieldValue(\"id\"));\n    assertEquals(\"Hello C1\", ((List)doc.getFieldValue(\"desc\")).get(0));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","sourceNew":null,"sourceOld":"  public void testSimple() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"command\", \"full-import\");\n    params.set(\"clean\", \"false\");\n    req.setParams(params);\n    String url = \"http://localhost:\" + jetty.getLocalPort() + \"/solr\";\n    CommonsHttpSolrServer solrServer = new CommonsHttpSolrServer(url);\n    solrServer.request(req);\n    ModifiableSolrParams qparams = new ModifiableSolrParams();\n    qparams.add(\"q\", \"*:*\");\n    QueryResponse qres = solrServer.query(qparams);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(2, results.getNumFound());\n    SolrDocument doc = results.get(0);\n    assertEquals(\"1\", doc.getFieldValue(\"id\"));\n    assertEquals(\"Hello C1\", ((List)doc.getFieldValue(\"desc\")).get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"command\", \"full-import\");\n    params.set(\"clean\", \"false\");\n    req.setParams(params);\n    String url = \"http://localhost:\" + jetty.getLocalPort() + \"/solr\";\n    CommonsHttpSolrServer solrServer = new CommonsHttpSolrServer(url);\n    solrServer.request(req);\n    ModifiableSolrParams qparams = new ModifiableSolrParams();\n    qparams.add(\"q\", \"*:*\");\n    QueryResponse qres = solrServer.query(qparams);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(2, results.getNumFound());\n    SolrDocument doc = results.get(0);\n    assertEquals(\"1\", doc.getFieldValue(\"id\"));\n    assertEquals(\"Hello C1\", ((List)doc.getFieldValue(\"desc\")).get(0));\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"command\", \"full-import\");\n    params.set(\"clean\", \"false\");\n    req.setParams(params);\n    String url = \"http://localhost:\" + jetty.getLocalPort() + \"/solr\";\n    CommonsHttpSolrServer solrServer = new CommonsHttpSolrServer(url);\n    solrServer.request(req);\n    ModifiableSolrParams qparams = new ModifiableSolrParams();\n    qparams.add(\"q\", \"*:*\");\n    QueryResponse qres = solrServer.query(qparams);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(2, results.getNumFound());\n    SolrDocument doc = results.get(0);\n    assertEquals(\"1\", doc.getFieldValue(\"id\"));\n    assertEquals(\"Hello C1\", ((List)doc.getFieldValue(\"desc\")).get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimple() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"command\", \"full-import\");\n    params.set(\"clean\", \"false\");\n    req.setParams(params);\n    String url = \"http://localhost:\" + jetty.getLocalPort() + \"/solr\";\n    CommonsHttpSolrServer solrServer = new CommonsHttpSolrServer(url);\n    solrServer.request(req);\n    ModifiableSolrParams qparams = new ModifiableSolrParams();\n    qparams.add(\"q\", \"*:*\");\n    QueryResponse qres = solrServer.query(qparams);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(2, results.getNumFound());\n    SolrDocument doc = results.get(0);\n    assertEquals(\"1\", doc.getFieldValue(\"id\"));\n    assertEquals(\"Hello C1\", ((List)doc.getFieldValue(\"desc\")).get(0));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e15e433a5cf81d3275a13920ec3461408b3f26b7","date":1283541243,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","sourceNew":"  @Test\n  public void testSimple() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"command\", \"full-import\");\n    params.set(\"clean\", \"false\");\n    req.setParams(params);\n    String url = \"http://localhost:\" + jetty.getLocalPort() + \"/solr\";\n    CommonsHttpSolrServer solrServer = new CommonsHttpSolrServer(url);\n    solrServer.request(req);\n    ModifiableSolrParams qparams = new ModifiableSolrParams();\n    qparams.add(\"q\", \"*:*\");\n    QueryResponse qres = solrServer.query(qparams);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(2, results.getNumFound());\n    SolrDocument doc = results.get(0);\n    assertEquals(\"1\", doc.getFieldValue(\"id\"));\n    assertEquals(\"Hello C1\", ((List)doc.getFieldValue(\"desc\")).get(0));\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"command\", \"full-import\");\n    params.set(\"clean\", \"false\");\n    req.setParams(params);\n    String url = \"http://localhost:\" + jetty.getLocalPort() + \"/solr\";\n    CommonsHttpSolrServer solrServer = new CommonsHttpSolrServer(url);\n    solrServer.request(req);\n    ModifiableSolrParams qparams = new ModifiableSolrParams();\n    qparams.add(\"q\", \"*:*\");\n    QueryResponse qres = solrServer.query(qparams);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(2, results.getNumFound());\n    SolrDocument doc = results.get(0);\n    assertEquals(\"1\", doc.getFieldValue(\"id\"));\n    assertEquals(\"Hello C1\", ((List)doc.getFieldValue(\"desc\")).get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","sourceNew":"  @Test\n  public void testSimple() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"command\", \"full-import\");\n    params.set(\"clean\", \"false\");\n    req.setParams(params);\n    String url = \"http://localhost:\" + jetty.getLocalPort() + \"/solr\";\n    CommonsHttpSolrServer solrServer = new CommonsHttpSolrServer(url);\n    solrServer.request(req);\n    ModifiableSolrParams qparams = new ModifiableSolrParams();\n    qparams.add(\"q\", \"*:*\");\n    QueryResponse qres = solrServer.query(qparams);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(2, results.getNumFound());\n    SolrDocument doc = results.get(0);\n    assertEquals(\"1\", doc.getFieldValue(\"id\"));\n    assertEquals(\"Hello C1\", ((List)doc.getFieldValue(\"desc\")).get(0));\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"command\", \"full-import\");\n    params.set(\"clean\", \"false\");\n    req.setParams(params);\n    String url = \"http://localhost:\" + jetty.getLocalPort() + \"/solr\";\n    CommonsHttpSolrServer solrServer = new CommonsHttpSolrServer(url);\n    solrServer.request(req);\n    ModifiableSolrParams qparams = new ModifiableSolrParams();\n    qparams.add(\"q\", \"*:*\");\n    QueryResponse qres = solrServer.query(qparams);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(2, results.getNumFound());\n    SolrDocument doc = results.get(0);\n    assertEquals(\"1\", doc.getFieldValue(\"id\"));\n    assertEquals(\"Hello C1\", ((List)doc.getFieldValue(\"desc\")).get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","sourceNew":"  @Test\n  public void testSimple() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"command\", \"full-import\");\n    params.set(\"clean\", \"false\");\n    req.setParams(params);\n    String url = \"http://localhost:\" + jetty.getLocalPort() + \"/solr\";\n    CommonsHttpSolrServer solrServer = new CommonsHttpSolrServer(url);\n    solrServer.request(req);\n    ModifiableSolrParams qparams = new ModifiableSolrParams();\n    qparams.add(\"q\", \"*:*\");\n    QueryResponse qres = solrServer.query(qparams);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(2, results.getNumFound());\n    SolrDocument doc = results.get(0);\n    assertEquals(\"1\", doc.getFieldValue(\"id\"));\n    assertEquals(\"Hello C1\", ((List)doc.getFieldValue(\"desc\")).get(0));\n  }\n\n","sourceOld":"  @Test\n  public void testSimple() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"command\", \"full-import\");\n    params.set(\"clean\", \"false\");\n    req.setParams(params);\n    String url = \"http://localhost:\" + jetty.getLocalPort() + \"/solr\";\n    CommonsHttpSolrServer solrServer = new CommonsHttpSolrServer(url);\n    solrServer.request(req);\n    ModifiableSolrParams qparams = new ModifiableSolrParams();\n    qparams.add(\"q\", \"*:*\");\n    QueryResponse qres = solrServer.query(qparams);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(2, results.getNumFound());\n    SolrDocument doc = results.get(0);\n    assertEquals(\"1\", doc.getFieldValue(\"id\"));\n    assertEquals(\"Hello C1\", ((List)doc.getFieldValue(\"desc\")).get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","sourceNew":"  @Test\n  public void testSimple() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"command\", \"full-import\");\n    params.set(\"clean\", \"false\");\n    req.setParams(params);\n    String url = \"http://localhost:\" + jetty.getLocalPort() + \"/solr\";\n    CommonsHttpSolrServer solrServer = new CommonsHttpSolrServer(url);\n    solrServer.request(req);\n    ModifiableSolrParams qparams = new ModifiableSolrParams();\n    qparams.add(\"q\", \"*:*\");\n    QueryResponse qres = solrServer.query(qparams);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(2, results.getNumFound());\n    SolrDocument doc = results.get(0);\n    assertEquals(\"1\", doc.getFieldValue(\"id\"));\n    assertEquals(\"Hello C1\", ((List)doc.getFieldValue(\"desc\")).get(0));\n  }\n\n","sourceOld":"  @Test\n  public void testSimple() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"command\", \"full-import\");\n    params.set(\"clean\", \"false\");\n    req.setParams(params);\n    String url = \"http://localhost:\" + jetty.getLocalPort() + \"/solr\";\n    CommonsHttpSolrServer solrServer = new CommonsHttpSolrServer(url);\n    solrServer.request(req);\n    ModifiableSolrParams qparams = new ModifiableSolrParams();\n    qparams.add(\"q\", \"*:*\");\n    QueryResponse qres = solrServer.query(qparams);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(2, results.getNumFound());\n    SolrDocument doc = results.get(0);\n    assertEquals(\"1\", doc.getFieldValue(\"id\"));\n    assertEquals(\"Hello C1\", ((List)doc.getFieldValue(\"desc\")).get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e15e433a5cf81d3275a13920ec3461408b3f26b7":["1da8d55113b689b06716246649de6f62430f15c0"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["e15e433a5cf81d3275a13920ec3461408b3f26b7","e15e433a5cf81d3275a13920ec3461408b3f26b7"],"c26f00b574427b55127e869b935845554afde1fa":["e15e433a5cf81d3275a13920ec3461408b3f26b7","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","e15e433a5cf81d3275a13920ec3461408b3f26b7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["e15e433a5cf81d3275a13920ec3461408b3f26b7","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"e15e433a5cf81d3275a13920ec3461408b3f26b7":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}