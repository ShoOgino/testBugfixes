{"path":"lucene/sandbox/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat.PerThreadVersionPKLookup#lookup(BytesRef,long).mjava","commits":[{"id":"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e","date":1400786907,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat.PerThreadVersionPKLookup#lookup(BytesRef,long).mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat.PerThreadVersionPKLookup#lookup(BytesRef,long).mjava","sourceNew":"    /** Returns docID if found, else -1. */\n    public int lookup(BytesRef id, long version) throws IOException {\n      for(int seg=0;seg<numSegs;seg++) {\n        if (((IDVersionSegmentTermsEnum) termsEnums[seg]).seekExact(id, version)) {\n          if (VERBOSE) {\n            System.out.println(\"  found in seg=\" + termsEnums[seg]);\n          }\n          docsEnums[seg] = termsEnums[seg].docs(liveDocs[seg], docsEnums[seg], 0);\n          int docID = docsEnums[seg].nextDoc();\n          if (docID != DocsEnum.NO_MORE_DOCS) {\n            lastVersion = ((IDVersionSegmentTermsEnum) termsEnums[seg]).getVersion();\n            return docBases[seg] + docID;\n          }\n          assert hasDeletions;\n        }\n      }\n\n      return -1;\n    }\n\n","sourceOld":"    /** Returns docID if found, else -1. */\n    public int lookup(BytesRef id, long version) throws IOException {\n      for(int seg=0;seg<numSegs;seg++) {\n        if (((IDVersionSegmentTermsEnum) termsEnums[seg]).seekExact(id, version)) {\n          if (VERBOSE) {\n            System.out.println(\"  found in seg=\" + termsEnums[seg]);\n          }\n          docsEnums[seg] = termsEnums[seg].docs(liveDocs[seg], docsEnums[seg], 0);\n          int docID = docsEnums[seg].nextDoc();\n          if (docID != DocsEnum.NO_MORE_DOCS) {\n            lastVersion = ((IDVersionSegmentTermsEnum) termsEnums[seg]).getVersion();\n            return docBases[seg] + docID;\n          }\n          assert hasDeletions;\n        }\n      }\n\n      return -1;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat.PerThreadVersionPKLookup#lookup(BytesRef,long).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum.PerThreadPKLookup#lookup(BytesRef).mjava","sourceNew":"    /** Returns docID if found, else -1. */\n    public int lookup(BytesRef id, long version) throws IOException {\n      for(int seg=0;seg<numSegs;seg++) {\n        if (((IDVersionSegmentTermsEnum) termsEnums[seg]).seekExact(id, version)) {\n          if (VERBOSE) {\n            System.out.println(\"  found in seg=\" + termsEnums[seg]);\n          }\n          docsEnums[seg] = termsEnums[seg].docs(liveDocs[seg], docsEnums[seg], 0);\n          int docID = docsEnums[seg].nextDoc();\n          if (docID != DocsEnum.NO_MORE_DOCS) {\n            lastVersion = ((IDVersionSegmentTermsEnum) termsEnums[seg]).getVersion();\n            return docBases[seg] + docID;\n          }\n          assert hasDeletions;\n        }\n      }\n\n      return -1;\n    }\n\n","sourceOld":"    /** Returns docID if found, else -1. */\n    public int lookup(BytesRef id) throws IOException {\n      for(int seg=0;seg<numSegs;seg++) {\n        if (termsEnums[seg].seekExact(id)) {\n          docsEnums[seg] = termsEnums[seg].docs(liveDocs[seg], docsEnums[seg], 0);\n          int docID = docsEnums[seg].nextDoc();\n          if (docID != DocsEnum.NO_MORE_DOCS) {\n            return docBases[seg] + docID;\n          }\n          assert hasDeletions;\n        }\n      }\n\n      return -1;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat.PerThreadVersionPKLookup#lookup(BytesRef,long).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat.PerThreadVersionPKLookup#lookup(BytesRef,long).mjava","sourceNew":"    /** Returns docID if found, else -1. */\n    public int lookup(BytesRef id, long version) throws IOException {\n      for(int seg=0;seg<numSegs;seg++) {\n        if (((IDVersionSegmentTermsEnum) termsEnums[seg]).seekExact(id, version)) {\n          if (VERBOSE) {\n            System.out.println(\"  found in seg=\" + termsEnums[seg]);\n          }\n          postingsEnums[seg] = termsEnums[seg].postings(liveDocs[seg], postingsEnums[seg], 0);\n          int docID = postingsEnums[seg].nextDoc();\n          if (docID != PostingsEnum.NO_MORE_DOCS) {\n            lastVersion = ((IDVersionSegmentTermsEnum) termsEnums[seg]).getVersion();\n            return docBases[seg] + docID;\n          }\n          assert hasDeletions;\n        }\n      }\n\n      return -1;\n    }\n\n","sourceOld":"    /** Returns docID if found, else -1. */\n    public int lookup(BytesRef id, long version) throws IOException {\n      for(int seg=0;seg<numSegs;seg++) {\n        if (((IDVersionSegmentTermsEnum) termsEnums[seg]).seekExact(id, version)) {\n          if (VERBOSE) {\n            System.out.println(\"  found in seg=\" + termsEnums[seg]);\n          }\n          docsEnums[seg] = termsEnums[seg].docs(liveDocs[seg], docsEnums[seg], 0);\n          int docID = docsEnums[seg].nextDoc();\n          if (docID != DocsEnum.NO_MORE_DOCS) {\n            lastVersion = ((IDVersionSegmentTermsEnum) termsEnums[seg]).getVersion();\n            return docBases[seg] + docID;\n          }\n          assert hasDeletions;\n        }\n      }\n\n      return -1;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat.PerThreadVersionPKLookup#lookup(BytesRef,long).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat.PerThreadVersionPKLookup#lookup(BytesRef,long).mjava","sourceNew":"    /** Returns docID if found, else -1. */\n    public int lookup(BytesRef id, long version) throws IOException {\n      for(int seg=0;seg<numSegs;seg++) {\n        if (((IDVersionSegmentTermsEnum) termsEnums[seg]).seekExact(id, version)) {\n          if (VERBOSE) {\n            System.out.println(\"  found in seg=\" + termsEnums[seg]);\n          }\n          postingsEnums[seg] = termsEnums[seg].postings(postingsEnums[seg], 0);\n          int docID = postingsEnums[seg].nextDoc();\n          if (docID != PostingsEnum.NO_MORE_DOCS && (liveDocs[seg] == null || liveDocs[seg].get(docID))) {\n            lastVersion = ((IDVersionSegmentTermsEnum) termsEnums[seg]).getVersion();\n            return docBases[seg] + docID;\n          }\n          assert hasDeletions;\n        }\n      }\n\n      return -1;\n    }\n\n","sourceOld":"    /** Returns docID if found, else -1. */\n    public int lookup(BytesRef id, long version) throws IOException {\n      for(int seg=0;seg<numSegs;seg++) {\n        if (((IDVersionSegmentTermsEnum) termsEnums[seg]).seekExact(id, version)) {\n          if (VERBOSE) {\n            System.out.println(\"  found in seg=\" + termsEnums[seg]);\n          }\n          postingsEnums[seg] = termsEnums[seg].postings(liveDocs[seg], postingsEnums[seg], 0);\n          int docID = postingsEnums[seg].nextDoc();\n          if (docID != PostingsEnum.NO_MORE_DOCS) {\n            lastVersion = ((IDVersionSegmentTermsEnum) termsEnums[seg]).getVersion();\n            return docBases[seg] + docID;\n          }\n          assert hasDeletions;\n        }\n      }\n\n      return -1;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["51f5280f31484820499077f41fcdfe92d527d9dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"51f5280f31484820499077f41fcdfe92d527d9dc":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4464508ee83288c8c4585b533f9faaa93aa314"]},"commit2Childs":{"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["51f5280f31484820499077f41fcdfe92d527d9dc"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e","4d637064d608752565d4f9f41b2497dfdfdde50e"],"51f5280f31484820499077f41fcdfe92d527d9dc":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}