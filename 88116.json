{"path":"solr/core/src/java/org/apache/solr/util/SimplePostTool.PageFetcher#parseRobotsTxt(InputStream).mjava","commits":[{"id":"c2c3a504730329ae644b009dee43024116605d47","date":1345253449,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool.PageFetcher#parseRobotsTxt(InputStream).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Very simple robots.txt parser which obeys all Disallow lines regardless\n     * of user agent or whether there are valid Allow: lines.\n     * @param is Input stream of the robots.txt file\n     * @return a list of disallow paths\n     * @throws IOException if problems reading the stream\n     */\n    protected List<String> parseRobotsTxt(InputStream is) throws IOException {\n      List<String> disallows = new ArrayList<String>();\n      BufferedReader r = new BufferedReader(new InputStreamReader(is, \"UTF-8\"));\n      String l;\n      while((l = r.readLine()) != null) {\n        String[] arr = l.split(\"#\");\n        if(arr.length == 0) continue;\n        l = arr[0].trim();\n        if(l.startsWith(DISALLOW)) {\n          l = l.substring(DISALLOW.length()).trim();\n          if(l.length() == 0) continue;\n          disallows.add(l);\n        }\n      }\n      is.close();\n      return disallows;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70fa1c0f4d75735ff2e1485e059d9bc5efa50598","date":1345296911,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool.PageFetcher#parseRobotsTxt(InputStream).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Very simple robots.txt parser which obeys all Disallow lines regardless\n     * of user agent or whether there are valid Allow: lines.\n     * @param is Input stream of the robots.txt file\n     * @return a list of disallow paths\n     * @throws IOException if problems reading the stream\n     */\n    protected List<String> parseRobotsTxt(InputStream is) throws IOException {\n      List<String> disallows = new ArrayList<String>();\n      BufferedReader r = new BufferedReader(new InputStreamReader(is, \"UTF-8\"));\n      String l;\n      while((l = r.readLine()) != null) {\n        String[] arr = l.split(\"#\");\n        if(arr.length == 0) continue;\n        l = arr[0].trim();\n        if(l.startsWith(DISALLOW)) {\n          l = l.substring(DISALLOW.length()).trim();\n          if(l.length() == 0) continue;\n          disallows.add(l);\n        }\n      }\n      is.close();\n      return disallows;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"616c1830142ff5c1ddedec1ed898733b73c8e23b","date":1345368925,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool.PageFetcher#parseRobotsTxt(InputStream).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Very simple robots.txt parser which obeys all Disallow lines regardless\n     * of user agent or whether there are valid Allow: lines.\n     * @param is Input stream of the robots.txt file\n     * @return a list of disallow paths\n     * @throws IOException if problems reading the stream\n     */\n    protected List<String> parseRobotsTxt(InputStream is) throws IOException {\n      List<String> disallows = new ArrayList<String>();\n      BufferedReader r = new BufferedReader(new InputStreamReader(is, \"UTF-8\"));\n      String l;\n      while((l = r.readLine()) != null) {\n        String[] arr = l.split(\"#\");\n        if(arr.length == 0) continue;\n        l = arr[0].trim();\n        if(l.startsWith(DISALLOW)) {\n          l = l.substring(DISALLOW.length()).trim();\n          if(l.length() == 0) continue;\n          disallows.add(l);\n        }\n      }\n      is.close();\n      return disallows;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool.PageFetcher#parseRobotsTxt(InputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool.PageFetcher#parseRobotsTxt(InputStream).mjava","sourceNew":"    /**\n     * Very simple robots.txt parser which obeys all Disallow lines regardless\n     * of user agent or whether there are valid Allow: lines.\n     * @param is Input stream of the robots.txt file\n     * @return a list of disallow paths\n     * @throws IOException if problems reading the stream\n     */\n    protected List<String> parseRobotsTxt(InputStream is) throws IOException {\n      List<String> disallows = new ArrayList<>();\n      BufferedReader r = new BufferedReader(new InputStreamReader(is, \"UTF-8\"));\n      String l;\n      while((l = r.readLine()) != null) {\n        String[] arr = l.split(\"#\");\n        if(arr.length == 0) continue;\n        l = arr[0].trim();\n        if(l.startsWith(DISALLOW)) {\n          l = l.substring(DISALLOW.length()).trim();\n          if(l.length() == 0) continue;\n          disallows.add(l);\n        }\n      }\n      is.close();\n      return disallows;\n    }\n\n","sourceOld":"    /**\n     * Very simple robots.txt parser which obeys all Disallow lines regardless\n     * of user agent or whether there are valid Allow: lines.\n     * @param is Input stream of the robots.txt file\n     * @return a list of disallow paths\n     * @throws IOException if problems reading the stream\n     */\n    protected List<String> parseRobotsTxt(InputStream is) throws IOException {\n      List<String> disallows = new ArrayList<String>();\n      BufferedReader r = new BufferedReader(new InputStreamReader(is, \"UTF-8\"));\n      String l;\n      while((l = r.readLine()) != null) {\n        String[] arr = l.split(\"#\");\n        if(arr.length == 0) continue;\n        l = arr[0].trim();\n        if(l.startsWith(DISALLOW)) {\n          l = l.substring(DISALLOW.length()).trim();\n          if(l.length() == 0) continue;\n          disallows.add(l);\n        }\n      }\n      is.close();\n      return disallows;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d3d365762604952e436b51980101dfc84cc1b3e","date":1396298116,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool.PageFetcher#parseRobotsTxt(InputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool.PageFetcher#parseRobotsTxt(InputStream).mjava","sourceNew":"    /**\n     * Very simple robots.txt parser which obeys all Disallow lines regardless\n     * of user agent or whether there are valid Allow: lines.\n     * @param is Input stream of the robots.txt file\n     * @return a list of disallow paths\n     * @throws IOException if problems reading the stream\n     */\n    protected List<String> parseRobotsTxt(InputStream is) throws IOException {\n      List<String> disallows = new ArrayList<>();\n      BufferedReader r = new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8));\n      String l;\n      while((l = r.readLine()) != null) {\n        String[] arr = l.split(\"#\");\n        if(arr.length == 0) continue;\n        l = arr[0].trim();\n        if(l.startsWith(DISALLOW)) {\n          l = l.substring(DISALLOW.length()).trim();\n          if(l.length() == 0) continue;\n          disallows.add(l);\n        }\n      }\n      is.close();\n      return disallows;\n    }\n\n","sourceOld":"    /**\n     * Very simple robots.txt parser which obeys all Disallow lines regardless\n     * of user agent or whether there are valid Allow: lines.\n     * @param is Input stream of the robots.txt file\n     * @return a list of disallow paths\n     * @throws IOException if problems reading the stream\n     */\n    protected List<String> parseRobotsTxt(InputStream is) throws IOException {\n      List<String> disallows = new ArrayList<>();\n      BufferedReader r = new BufferedReader(new InputStreamReader(is, \"UTF-8\"));\n      String l;\n      while((l = r.readLine()) != null) {\n        String[] arr = l.split(\"#\");\n        if(arr.length == 0) continue;\n        l = arr[0].trim();\n        if(l.startsWith(DISALLOW)) {\n          l = l.substring(DISALLOW.length()).trim();\n          if(l.length() == 0) continue;\n          disallows.add(l);\n        }\n      }\n      is.close();\n      return disallows;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool.PageFetcher#parseRobotsTxt(InputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool.PageFetcher#parseRobotsTxt(InputStream).mjava","sourceNew":"    /**\n     * Very simple robots.txt parser which obeys all Disallow lines regardless\n     * of user agent or whether there are valid Allow: lines.\n     * @param is Input stream of the robots.txt file\n     * @return a list of disallow paths\n     * @throws IOException if problems reading the stream\n     */\n    protected List<String> parseRobotsTxt(InputStream is) throws IOException {\n      List<String> disallows = new ArrayList<>();\n      BufferedReader r = new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8));\n      String l;\n      while((l = r.readLine()) != null) {\n        String[] arr = l.split(\"#\");\n        if(arr.length == 0) continue;\n        l = arr[0].trim();\n        if(l.startsWith(DISALLOW)) {\n          l = l.substring(DISALLOW.length()).trim();\n          if(l.length() == 0) continue;\n          disallows.add(l);\n        }\n      }\n      is.close();\n      return disallows;\n    }\n\n","sourceOld":"    /**\n     * Very simple robots.txt parser which obeys all Disallow lines regardless\n     * of user agent or whether there are valid Allow: lines.\n     * @param is Input stream of the robots.txt file\n     * @return a list of disallow paths\n     * @throws IOException if problems reading the stream\n     */\n    protected List<String> parseRobotsTxt(InputStream is) throws IOException {\n      List<String> disallows = new ArrayList<>();\n      BufferedReader r = new BufferedReader(new InputStreamReader(is, \"UTF-8\"));\n      String l;\n      while((l = r.readLine()) != null) {\n        String[] arr = l.split(\"#\");\n        if(arr.length == 0) continue;\n        l = arr[0].trim();\n        if(l.startsWith(DISALLOW)) {\n          l = l.substring(DISALLOW.length()).trim();\n          if(l.length() == 0) continue;\n          disallows.add(l);\n        }\n      }\n      is.close();\n      return disallows;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","9d3d365762604952e436b51980101dfc84cc1b3e"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c2c3a504730329ae644b009dee43024116605d47"],"616c1830142ff5c1ddedec1ed898733b73c8e23b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c2c3a504730329ae644b009dee43024116605d47"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c2c3a504730329ae644b009dee43024116605d47"],"9d3d365762604952e436b51980101dfc84cc1b3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c2c3a504730329ae644b009dee43024116605d47":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9d3d365762604952e436b51980101dfc84cc1b3e"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5eb2511ababf862ea11e10761c70ee560cd84510","9d3d365762604952e436b51980101dfc84cc1b3e"],"616c1830142ff5c1ddedec1ed898733b73c8e23b":[],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":[],"9d3d365762604952e436b51980101dfc84cc1b3e":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c2c3a504730329ae644b009dee43024116605d47":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","c2c3a504730329ae644b009dee43024116605d47"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}