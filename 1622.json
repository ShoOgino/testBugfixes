{"path":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#addMyself().mjava","commits":[{"id":"290c401c31db375e771805c3ba7ac5f64c7370dc","date":1192034795,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#addMyself().mjava","pathOld":"/dev/null","sourceNew":"  /** Used for testing */\n  private void addMyself() {\n    synchronized(allInstances) {\n      final int size=0;\n      int upto = 0;\n      for(int i=0;i<size;i++) {\n        final ConcurrentMergeScheduler other = (ConcurrentMergeScheduler) allInstances.get(i);\n        if (!(other.closed && 0 == other.mergeThreadCount()))\n          // Keep this one for now: it still has threads or\n          // may spawn new threads\n          allInstances.set(upto++, other);\n      }\n      allInstances.subList(upto, allInstances.size()).clear();\n      allInstances.add(this);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["431ff1b52896e831553661864976ecfa2d7fc798"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"431ff1b52896e831553661864976ecfa2d7fc798","date":1236246847,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#addMyself().mjava","pathOld":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#addMyself().mjava","sourceNew":"  /** Used for testing */\n  private void addMyself() {\n    synchronized(allInstances) {\n      final int size = allInstances.size();\n      int upto = 0;\n      for(int i=0;i<size;i++) {\n        final ConcurrentMergeScheduler other = (ConcurrentMergeScheduler) allInstances.get(i);\n        if (!(other.closed && 0 == other.mergeThreadCount()))\n          // Keep this one for now: it still has threads or\n          // may spawn new threads\n          allInstances.set(upto++, other);\n      }\n      allInstances.subList(upto, allInstances.size()).clear();\n      allInstances.add(this);\n    }\n  }\n\n","sourceOld":"  /** Used for testing */\n  private void addMyself() {\n    synchronized(allInstances) {\n      final int size=0;\n      int upto = 0;\n      for(int i=0;i<size;i++) {\n        final ConcurrentMergeScheduler other = (ConcurrentMergeScheduler) allInstances.get(i);\n        if (!(other.closed && 0 == other.mergeThreadCount()))\n          // Keep this one for now: it still has threads or\n          // may spawn new threads\n          allInstances.set(upto++, other);\n      }\n      allInstances.subList(upto, allInstances.size()).clear();\n      allInstances.add(this);\n    }\n  }\n\n","bugFix":["290c401c31db375e771805c3ba7ac5f64c7370dc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f011f01db72fa6f556a9a0843944ecee2de4aaa8","date":1255806907,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#addMyself().mjava","pathOld":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#addMyself().mjava","sourceNew":"  /** Used for testing */\n  private void addMyself() {\n    synchronized(allInstances) {\n      final int size = allInstances.size();\n      int upto = 0;\n      for(int i=0;i<size;i++) {\n        final ConcurrentMergeScheduler other = allInstances.get(i);\n        if (!(other.closed && 0 == other.mergeThreadCount()))\n          // Keep this one for now: it still has threads or\n          // may spawn new threads\n          allInstances.set(upto++, other);\n      }\n      allInstances.subList(upto, allInstances.size()).clear();\n      allInstances.add(this);\n    }\n  }\n\n","sourceOld":"  /** Used for testing */\n  private void addMyself() {\n    synchronized(allInstances) {\n      final int size = allInstances.size();\n      int upto = 0;\n      for(int i=0;i<size;i++) {\n        final ConcurrentMergeScheduler other = (ConcurrentMergeScheduler) allInstances.get(i);\n        if (!(other.closed && 0 == other.mergeThreadCount()))\n          // Keep this one for now: it still has threads or\n          // may spawn new threads\n          allInstances.set(upto++, other);\n      }\n      allInstances.subList(upto, allInstances.size()).clear();\n      allInstances.add(this);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#addMyself().mjava","pathOld":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#addMyself().mjava","sourceNew":"  /** Used for testing */\n  private void addMyself() {\n    synchronized(allInstances) {\n      final int size = allInstances.size();\n      int upto = 0;\n      for(int i=0;i<size;i++) {\n        final ConcurrentMergeScheduler other = allInstances.get(i);\n        if (!(other.closed && 0 == other.mergeThreadCount()))\n          // Keep this one for now: it still has threads or\n          // may spawn new threads\n          allInstances.set(upto++, other);\n      }\n      allInstances.subList(upto, allInstances.size()).clear();\n      allInstances.add(this);\n    }\n  }\n\n","sourceOld":"  /** Used for testing */\n  private void addMyself() {\n    synchronized(allInstances) {\n      final int size = allInstances.size();\n      int upto = 0;\n      for(int i=0;i<size;i++) {\n        final ConcurrentMergeScheduler other = allInstances.get(i);\n        if (!(other.closed && 0 == other.mergeThreadCount()))\n          // Keep this one for now: it still has threads or\n          // may spawn new threads\n          allInstances.set(upto++, other);\n      }\n      allInstances.subList(upto, allInstances.size()).clear();\n      allInstances.add(this);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"431ff1b52896e831553661864976ecfa2d7fc798":["290c401c31db375e771805c3ba7ac5f64c7370dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"290c401c31db375e771805c3ba7ac5f64c7370dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f011f01db72fa6f556a9a0843944ecee2de4aaa8":["431ff1b52896e831553661864976ecfa2d7fc798"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f011f01db72fa6f556a9a0843944ecee2de4aaa8"]},"commit2Childs":{"431ff1b52896e831553661864976ecfa2d7fc798":["f011f01db72fa6f556a9a0843944ecee2de4aaa8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["290c401c31db375e771805c3ba7ac5f64c7370dc"],"290c401c31db375e771805c3ba7ac5f64c7370dc":["431ff1b52896e831553661864976ecfa2d7fc798"],"f011f01db72fa6f556a9a0843944ecee2de4aaa8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}