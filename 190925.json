{"path":"solr/core/src/java/org/apache/solr/util/SolrLogPostTool.LogRecordReader#addParams(SolrInputDocument,String).mjava","commits":[{"id":"2e38054de362483189e0fdd850b779ed766aa7aa","date":1578059239,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrLogPostTool.LogRecordReader#addParams(SolrInputDocument,String).mjava","pathOld":"/dev/null","sourceNew":"    private void addParams(SolrInputDocument doc,  String params) {\n      String[] pairs = params.split(\"&\");\n      for(String pair : pairs) {\n        String[] parts = pair.split(\"=\");\n        if(parts.length == 2 && parts[0].equals(\"q\")) {\n          String dq = URLDecoder.decode(parts[1]);\n          doc.addField(\"q_s\", dq);\n          doc.addField(\"q_t\", dq);\n        }\n\n        if(parts[0].equals(\"rows\")) {\n          String dr = URLDecoder.decode(parts[1]);\n          doc.addField(\"rows_i\", dr);\n        }\n\n        if(parts[0].equals(\"distrib\")) {\n          String dr = URLDecoder.decode(parts[1]);\n          doc.addField(\"distrib_s\", dr);\n        }\n\n        if(parts[0].equals(\"isShard\")) {\n          String dr = URLDecoder.decode(parts[1]);\n          doc.addField(\"isShard_s\", dr);\n        }\n\n        if(parts[0].equals(\"wt\")) {\n          String dr = URLDecoder.decode(parts[1]);\n          doc.addField(\"wt_s\", dr);\n        }\n\n        if(parts[0].equals(\"facet\")) {\n          String dr = URLDecoder.decode(parts[1]);\n          doc.addField(\"facet_s\", dr);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60c0a5252c6159c48f98b20a14f05297c36ba354","date":1578059239,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrLogPostTool.LogRecordReader#addParams(SolrInputDocument,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrLogPostTool.LogRecordReader#addParams(SolrInputDocument,String).mjava","sourceNew":"    private void addParams(SolrInputDocument doc,  String params) {\n      String[] pairs = params.split(\"&\");\n      for(String pair : pairs) {\n        String[] parts = pair.split(\"=\");\n        if(parts.length == 2 && parts[0].equals(\"q\")) {\n          String dq = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"q_s\", dq);\n          doc.addField(\"q_t\", dq);\n        }\n\n        if(parts[0].equals(\"rows\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"rows_i\", dr);\n        }\n\n        if(parts[0].equals(\"distrib\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"distrib_s\", dr);\n        }\n\n        if(parts[0].equals(\"isShard\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"isShard_s\", dr);\n        }\n\n        if(parts[0].equals(\"wt\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"wt_s\", dr);\n        }\n\n        if(parts[0].equals(\"facet\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"facet_s\", dr);\n        }\n      }\n    }\n\n","sourceOld":"    private void addParams(SolrInputDocument doc,  String params) {\n      String[] pairs = params.split(\"&\");\n      for(String pair : pairs) {\n        String[] parts = pair.split(\"=\");\n        if(parts.length == 2 && parts[0].equals(\"q\")) {\n          String dq = URLDecoder.decode(parts[1]);\n          doc.addField(\"q_s\", dq);\n          doc.addField(\"q_t\", dq);\n        }\n\n        if(parts[0].equals(\"rows\")) {\n          String dr = URLDecoder.decode(parts[1]);\n          doc.addField(\"rows_i\", dr);\n        }\n\n        if(parts[0].equals(\"distrib\")) {\n          String dr = URLDecoder.decode(parts[1]);\n          doc.addField(\"distrib_s\", dr);\n        }\n\n        if(parts[0].equals(\"isShard\")) {\n          String dr = URLDecoder.decode(parts[1]);\n          doc.addField(\"isShard_s\", dr);\n        }\n\n        if(parts[0].equals(\"wt\")) {\n          String dr = URLDecoder.decode(parts[1]);\n          doc.addField(\"wt_s\", dr);\n        }\n\n        if(parts[0].equals(\"facet\")) {\n          String dr = URLDecoder.decode(parts[1]);\n          doc.addField(\"facet_s\", dr);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca62564055241632cd20d65b5ecb8c8e93bd60c4","date":1578383112,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrLogPostTool.LogRecordReader#addParams(SolrInputDocument,String).mjava","pathOld":"/dev/null","sourceNew":"    private void addParams(SolrInputDocument doc,  String params) {\n      String[] pairs = params.split(\"&\");\n      for(String pair : pairs) {\n        String[] parts = pair.split(\"=\");\n        if(parts.length == 2 && parts[0].equals(\"q\")) {\n          String dq = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"q_s\", dq);\n          doc.addField(\"q_t\", dq);\n        }\n\n        if(parts[0].equals(\"rows\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"rows_i\", dr);\n        }\n\n        if(parts[0].equals(\"distrib\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"distrib_s\", dr);\n        }\n\n        if(parts[0].equals(\"isShard\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"isShard_s\", dr);\n        }\n\n        if(parts[0].equals(\"wt\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"wt_s\", dr);\n        }\n\n        if(parts[0].equals(\"facet\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"facet_s\", dr);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a36d7415fd302a874e548c5e8b2f15930464d095","date":1579118488,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrLogPostTool.LogRecordReader#addParams(SolrInputDocument,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrLogPostTool.LogRecordReader#addParams(SolrInputDocument,String).mjava","sourceNew":"    private void addParams(SolrInputDocument doc,  String params) {\n      String[] pairs = params.split(\"&\");\n      for(String pair : pairs) {\n        String[] parts = pair.split(\"=\");\n        if(parts.length == 2 && parts[0].equals(\"q\")) {\n          String dq = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"q_s\", dq);\n          doc.addField(\"q_t\", dq);\n        }\n\n        if(parts[0].equals(\"rows\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"rows_i\", dr);\n        }\n\n        if(parts[0].equals(\"distrib\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"distrib_s\", dr);\n        }\n\n        if(parts[0].equals(\"shards\")) {\n          doc.addField(\"shards_s\", \"true\");\n        }\n\n        if(parts[0].equals(\"ids\")) {\n          doc.addField(\"ids_s\", \"true\");\n        }\n\n        if(parts[0].equals(\"isShard\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"isShard_s\", dr);\n        }\n\n        if(parts[0].equals(\"wt\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"wt_s\", dr);\n        }\n\n        if(parts[0].equals(\"facet\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"facet_s\", dr);\n        }\n      }\n\n\n      //Special params used to determine what stage a query is.\n      //So we populate with defaults.\n      //The absence of the distrib params means its a distributed query.\n\n      if(doc.getField(\"distrib_s\") == null) {\n        doc.addField(\"distrib_s\", \"true\");\n      }\n\n      if(doc.getField(\"shards_s\") == null) {\n        doc.addField(\"shards_s\", \"false\");\n      }\n\n      if(doc.getField(\"ids_s\") == null) {\n        doc.addField(\"ids_s\", \"false\");\n      }\n    }\n\n","sourceOld":"    private void addParams(SolrInputDocument doc,  String params) {\n      String[] pairs = params.split(\"&\");\n      for(String pair : pairs) {\n        String[] parts = pair.split(\"=\");\n        if(parts.length == 2 && parts[0].equals(\"q\")) {\n          String dq = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"q_s\", dq);\n          doc.addField(\"q_t\", dq);\n        }\n\n        if(parts[0].equals(\"rows\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"rows_i\", dr);\n        }\n\n        if(parts[0].equals(\"distrib\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"distrib_s\", dr);\n        }\n\n        if(parts[0].equals(\"isShard\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"isShard_s\", dr);\n        }\n\n        if(parts[0].equals(\"wt\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"wt_s\", dr);\n        }\n\n        if(parts[0].equals(\"facet\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"facet_s\", dr);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f44d533b1ca980d07e26a1f9ec24e6bf20bca2ca","date":1585744908,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrLogPostTool.LogRecordReader#addParams(SolrInputDocument,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrLogPostTool.LogRecordReader#addParams(SolrInputDocument,String).mjava","sourceNew":"    private void addParams(SolrInputDocument doc,  String params) {\n      String[] pairs = params.split(\"&\");\n      for(String pair : pairs) {\n        String[] parts = pair.split(\"=\");\n        if(parts.length == 2 && parts[0].equals(\"q\")) {\n          String dq = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"q_s\", dq);\n          doc.addField(\"q_t\", dq);\n        }\n\n        if(parts[0].equals(\"rows\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"rows_i\", dr);\n        }\n\n        if(parts[0].equals(\"distrib\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"distrib_s\", dr);\n        }\n\n        if(parts[0].equals(\"shards\")) {\n          doc.addField(\"shards_s\", \"true\");\n        }\n\n        if(parts[0].equals(\"ids\") && ! isRTGRequest(doc)) {\n          doc.addField(\"ids_s\", \"true\");\n        }\n\n        if(parts[0].equals(\"isShard\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"isShard_s\", dr);\n        }\n\n        if(parts[0].equals(\"wt\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"wt_s\", dr);\n        }\n\n        if(parts[0].equals(\"facet\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"facet_s\", dr);\n        }\n      }\n\n\n      //Special params used to determine what stage a query is.\n      //So we populate with defaults.\n      //The absence of the distrib params means its a distributed query.\n\n      if(doc.getField(\"distrib_s\") == null) {\n        doc.addField(\"distrib_s\", \"true\");\n      }\n\n      if(doc.getField(\"shards_s\") == null) {\n        doc.addField(\"shards_s\", \"false\");\n      }\n\n      if(doc.getField(\"ids_s\") == null) {\n        doc.addField(\"ids_s\", \"false\");\n      }\n    }\n\n","sourceOld":"    private void addParams(SolrInputDocument doc,  String params) {\n      String[] pairs = params.split(\"&\");\n      for(String pair : pairs) {\n        String[] parts = pair.split(\"=\");\n        if(parts.length == 2 && parts[0].equals(\"q\")) {\n          String dq = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"q_s\", dq);\n          doc.addField(\"q_t\", dq);\n        }\n\n        if(parts[0].equals(\"rows\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"rows_i\", dr);\n        }\n\n        if(parts[0].equals(\"distrib\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"distrib_s\", dr);\n        }\n\n        if(parts[0].equals(\"shards\")) {\n          doc.addField(\"shards_s\", \"true\");\n        }\n\n        if(parts[0].equals(\"ids\")) {\n          doc.addField(\"ids_s\", \"true\");\n        }\n\n        if(parts[0].equals(\"isShard\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"isShard_s\", dr);\n        }\n\n        if(parts[0].equals(\"wt\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"wt_s\", dr);\n        }\n\n        if(parts[0].equals(\"facet\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"facet_s\", dr);\n        }\n      }\n\n\n      //Special params used to determine what stage a query is.\n      //So we populate with defaults.\n      //The absence of the distrib params means its a distributed query.\n\n      if(doc.getField(\"distrib_s\") == null) {\n        doc.addField(\"distrib_s\", \"true\");\n      }\n\n      if(doc.getField(\"shards_s\") == null) {\n        doc.addField(\"shards_s\", \"false\");\n      }\n\n      if(doc.getField(\"ids_s\") == null) {\n        doc.addField(\"ids_s\", \"false\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1e7f5b96ccf8844b947064317d55fbe9a308236","date":1589464324,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrLogPostTool.LogRecordReader#addParams(SolrInputDocument,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrLogPostTool.LogRecordReader#addParams(SolrInputDocument,String).mjava","sourceNew":"    private void addParams(SolrInputDocument doc,  String params) {\n      String[] pairs = params.split(\"&\");\n      for(String pair : pairs) {\n        String[] parts = pair.split(\"=\");\n        if(parts.length == 2 && parts[0].equals(\"q\")) {\n          String dq = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"q_s\", dq);\n          doc.addField(\"q_t\", dq);\n        }\n\n        if(parts[0].equals(\"rows\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"rows_i\", dr);\n        }\n\n        if(parts[0].equals(\"distrib\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"distrib_s\", dr);\n        }\n\n        if(parts[0].equals(\"shards\")) {\n          doc.addField(\"shards_s\", \"true\");\n        }\n\n        if(parts[0].equals(\"ids\") && !isRTGRequest(doc)) {\n          doc.addField(\"ids_s\", \"true\");\n        }\n\n        if(parts[0].equals(\"isShard\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"isShard_s\", dr);\n        }\n\n        if(parts[0].equals(\"wt\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"wt_s\", dr);\n        }\n\n        if(parts[0].equals(\"facet\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"facet_s\", dr);\n        }\n\n        if(parts[0].equals(\"shards.purpose\")) {\n          try {\n            int purpose = Integer.parseInt(parts[1]);\n            String[] purposes = getRequestPurposeNames(purpose);\n            for (String p : purposes) {\n              doc.addField(\"purpose_ss\", p);\n            }\n          } catch(Throwable e) {\n            //We'll just sit on this for now and not interrupt the load for this one field.\n          }\n        }\n      }\n\n      //Special params used to determine what stage a query is.\n      //So we populate with defaults.\n      //The absence of the distrib params means its a distributed query.\n\n\n      if(doc.getField(\"distrib_s\") == null) {\n        doc.addField(\"distrib_s\", \"true\");\n      }\n\n      if(doc.getField(\"shards_s\") == null) {\n        doc.addField(\"shards_s\", \"false\");\n      }\n\n      if(doc.getField(\"ids_s\") == null) {\n        doc.addField(\"ids_s\", \"false\");\n      }\n    }\n\n","sourceOld":"    private void addParams(SolrInputDocument doc,  String params) {\n      String[] pairs = params.split(\"&\");\n      for(String pair : pairs) {\n        String[] parts = pair.split(\"=\");\n        if(parts.length == 2 && parts[0].equals(\"q\")) {\n          String dq = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"q_s\", dq);\n          doc.addField(\"q_t\", dq);\n        }\n\n        if(parts[0].equals(\"rows\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"rows_i\", dr);\n        }\n\n        if(parts[0].equals(\"distrib\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"distrib_s\", dr);\n        }\n\n        if(parts[0].equals(\"shards\")) {\n          doc.addField(\"shards_s\", \"true\");\n        }\n\n        if(parts[0].equals(\"ids\") && ! isRTGRequest(doc)) {\n          doc.addField(\"ids_s\", \"true\");\n        }\n\n        if(parts[0].equals(\"isShard\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"isShard_s\", dr);\n        }\n\n        if(parts[0].equals(\"wt\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"wt_s\", dr);\n        }\n\n        if(parts[0].equals(\"facet\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"facet_s\", dr);\n        }\n      }\n\n\n      //Special params used to determine what stage a query is.\n      //So we populate with defaults.\n      //The absence of the distrib params means its a distributed query.\n\n      if(doc.getField(\"distrib_s\") == null) {\n        doc.addField(\"distrib_s\", \"true\");\n      }\n\n      if(doc.getField(\"shards_s\") == null) {\n        doc.addField(\"shards_s\", \"false\");\n      }\n\n      if(doc.getField(\"ids_s\") == null) {\n        doc.addField(\"ids_s\", \"false\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"88c63c47c168cb7f36e9b541fe0a3d3464c021b9","date":1590156506,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrLogPostTool.LogRecordReader#addParams(SolrInputDocument,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrLogPostTool.LogRecordReader#addParams(SolrInputDocument,String).mjava","sourceNew":"    private void addParams(SolrInputDocument doc,  String params) {\n      String[] pairs = params.split(\"&\");\n      for(String pair : pairs) {\n        String[] parts = pair.split(\"=\");\n        if(parts.length == 2 && parts[0].equals(\"q\")) {\n          String dq = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          setFieldIfUnset(doc, \"q_s\", dq);\n          setFieldIfUnset(doc, \"q_t\", dq);\n        }\n\n        if(parts[0].equals(\"rows\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          setFieldIfUnset(doc, \"rows_i\", dr);\n        }\n\n        if(parts[0].equals(\"distrib\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          setFieldIfUnset(doc, \"distrib_s\", dr);\n        }\n\n        if(parts[0].equals(\"shards\")) {\n          setFieldIfUnset(doc, \"shards_s\", \"true\");\n        }\n\n        if(parts[0].equals(\"ids\") && !isRTGRequest(doc)) {\n          setFieldIfUnset(doc, \"ids_s\", \"true\");\n        }\n\n        if(parts[0].equals(\"isShard\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          setFieldIfUnset(doc, \"isShard_s\", dr);\n        }\n\n        if(parts[0].equals(\"wt\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          setFieldIfUnset(doc, \"wt_s\", dr);\n        }\n\n        if(parts[0].equals(\"facet\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          setFieldIfUnset(doc, \"facet_s\", dr);\n        }\n\n        if(parts[0].equals(\"shards.purpose\")) {\n          try {\n            int purpose = Integer.parseInt(parts[1]);\n            String[] purposes = getRequestPurposeNames(purpose);\n            for (String p : purposes) {\n              doc.addField(\"purpose_ss\", p);\n            }\n          } catch(Throwable e) {\n            //We'll just sit on this for now and not interrupt the load for this one field.\n          }\n        }\n      }\n\n      //Special params used to determine what stage a query is.\n      //So we populate with defaults.\n      //The absence of the distrib params means its a distributed query.\n      setFieldIfUnset(doc, \"distrib_s\", \"true\");\n      setFieldIfUnset(doc, \"shards_s\", \"false\");\n      setFieldIfUnset(doc, \"ids_s\", \"false\");\n    }\n\n","sourceOld":"    private void addParams(SolrInputDocument doc,  String params) {\n      String[] pairs = params.split(\"&\");\n      for(String pair : pairs) {\n        String[] parts = pair.split(\"=\");\n        if(parts.length == 2 && parts[0].equals(\"q\")) {\n          String dq = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"q_s\", dq);\n          doc.addField(\"q_t\", dq);\n        }\n\n        if(parts[0].equals(\"rows\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"rows_i\", dr);\n        }\n\n        if(parts[0].equals(\"distrib\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"distrib_s\", dr);\n        }\n\n        if(parts[0].equals(\"shards\")) {\n          doc.addField(\"shards_s\", \"true\");\n        }\n\n        if(parts[0].equals(\"ids\") && !isRTGRequest(doc)) {\n          doc.addField(\"ids_s\", \"true\");\n        }\n\n        if(parts[0].equals(\"isShard\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"isShard_s\", dr);\n        }\n\n        if(parts[0].equals(\"wt\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"wt_s\", dr);\n        }\n\n        if(parts[0].equals(\"facet\")) {\n          String dr = URLDecoder.decode(parts[1], Charset.defaultCharset());\n          doc.addField(\"facet_s\", dr);\n        }\n\n        if(parts[0].equals(\"shards.purpose\")) {\n          try {\n            int purpose = Integer.parseInt(parts[1]);\n            String[] purposes = getRequestPurposeNames(purpose);\n            for (String p : purposes) {\n              doc.addField(\"purpose_ss\", p);\n            }\n          } catch(Throwable e) {\n            //We'll just sit on this for now and not interrupt the load for this one field.\n          }\n        }\n      }\n\n      //Special params used to determine what stage a query is.\n      //So we populate with defaults.\n      //The absence of the distrib params means its a distributed query.\n\n\n      if(doc.getField(\"distrib_s\") == null) {\n        doc.addField(\"distrib_s\", \"true\");\n      }\n\n      if(doc.getField(\"shards_s\") == null) {\n        doc.addField(\"shards_s\", \"false\");\n      }\n\n      if(doc.getField(\"ids_s\") == null) {\n        doc.addField(\"ids_s\", \"false\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60c0a5252c6159c48f98b20a14f05297c36ba354":["2e38054de362483189e0fdd850b779ed766aa7aa"],"f44d533b1ca980d07e26a1f9ec24e6bf20bca2ca":["a36d7415fd302a874e548c5e8b2f15930464d095"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1e7f5b96ccf8844b947064317d55fbe9a308236":["f44d533b1ca980d07e26a1f9ec24e6bf20bca2ca"],"2e38054de362483189e0fdd850b779ed766aa7aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","60c0a5252c6159c48f98b20a14f05297c36ba354"],"a36d7415fd302a874e548c5e8b2f15930464d095":["60c0a5252c6159c48f98b20a14f05297c36ba354"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["88c63c47c168cb7f36e9b541fe0a3d3464c021b9"],"88c63c47c168cb7f36e9b541fe0a3d3464c021b9":["d1e7f5b96ccf8844b947064317d55fbe9a308236"]},"commit2Childs":{"60c0a5252c6159c48f98b20a14f05297c36ba354":["ca62564055241632cd20d65b5ecb8c8e93bd60c4","a36d7415fd302a874e548c5e8b2f15930464d095"],"f44d533b1ca980d07e26a1f9ec24e6bf20bca2ca":["d1e7f5b96ccf8844b947064317d55fbe9a308236"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2e38054de362483189e0fdd850b779ed766aa7aa","ca62564055241632cd20d65b5ecb8c8e93bd60c4"],"2e38054de362483189e0fdd850b779ed766aa7aa":["60c0a5252c6159c48f98b20a14f05297c36ba354"],"d1e7f5b96ccf8844b947064317d55fbe9a308236":["88c63c47c168cb7f36e9b541fe0a3d3464c021b9"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":[],"a36d7415fd302a874e548c5e8b2f15930464d095":["f44d533b1ca980d07e26a1f9ec24e6bf20bca2ca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"88c63c47c168cb7f36e9b541fe0a3d3464c021b9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["ca62564055241632cd20d65b5ecb8c8e93bd60c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}