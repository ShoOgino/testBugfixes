{"path":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator.AnyOrdComparator#copy(int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator.AnyOrdComparator#copy(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator.AnyOrdComparator#copy(int,int).mjava","sourceNew":"      @Override\n      public void copy(int slot, int doc) {\n        final int ord = (int) readerOrds.get(doc);\n        ords[slot] = ord;\n        if (ord == 0) {\n          values[slot] = null;\n        } else {\n          assert ord > 0;\n          if (values[slot] == null) {\n            values[slot] = new BytesRef();\n          }\n          termsIndex.lookup(ord, values[slot]);\n        }\n        readerGen[slot] = currentReaderGen;\n      }\n\n","sourceOld":"      @Override\n      public void copy(int slot, int doc) {\n        final int ord = (int) readerOrds.get(doc);\n        ords[slot] = ord;\n        if (ord == 0) {\n          values[slot] = null;\n        } else {\n          assert ord > 0;\n          if (values[slot] == null) {\n            values[slot] = new BytesRef();\n          }\n          termsIndex.lookup(ord, values[slot]);\n        }\n        readerGen[slot] = currentReaderGen;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ed65f3455364344c6d2ff76ea5421aac754eae7","date":1353261762,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator.AnyOrdComparator#copy(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator.AnyOrdComparator#copy(int,int).mjava","sourceNew":"      @Override\n      public void copy(int slot, int doc) {\n        final int ord = (int) termsIndex.getOrd(doc);\n        ords[slot] = ord;\n        if (ord == 0) {\n          values[slot] = null;\n        } else {\n          assert ord > 0;\n          if (values[slot] == null) {\n            values[slot] = new BytesRef();\n          }\n          termsIndex.lookup(ord, values[slot]);\n        }\n        readerGen[slot] = currentReaderGen;\n      }\n\n","sourceOld":"      @Override\n      public void copy(int slot, int doc) {\n        final int ord = (int) readerOrds.get(doc);\n        ords[slot] = ord;\n        if (ord == 0) {\n          values[slot] = null;\n        } else {\n          assert ord > 0;\n          if (values[slot] == null) {\n            values[slot] = new BytesRef();\n          }\n          termsIndex.lookup(ord, values[slot]);\n        }\n        readerGen[slot] = currentReaderGen;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29f7cc7c185412da66c1d0089d9e75da01329a00","date":1353364851,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator.AnyOrdComparator#copy(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator.AnyOrdComparator#copy(int,int).mjava","sourceNew":"      @Override\n      public void copy(int slot, int doc) {\n        final int ord = termsIndex.getOrd(doc);\n        ords[slot] = ord;\n        if (ord == -1) {\n          values[slot] = null;\n        } else {\n          assert ord >= 0;\n          if (values[slot] == null) {\n            values[slot] = new BytesRef();\n          }\n          termsIndex.lookup(ord, values[slot]);\n        }\n        readerGen[slot] = currentReaderGen;\n      }\n\n","sourceOld":"      @Override\n      public void copy(int slot, int doc) {\n        final int ord = (int) termsIndex.getOrd(doc);\n        ords[slot] = ord;\n        if (ord == 0) {\n          values[slot] = null;\n        } else {\n          assert ord > 0;\n          if (values[slot] == null) {\n            values[slot] = new BytesRef();\n          }\n          termsIndex.lookup(ord, values[slot]);\n        }\n        readerGen[slot] = currentReaderGen;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9d7e5f3aa5935964617824d1f9b2599ddb334464","date":1353762831,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator.AnyOrdComparator#copy(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator.AnyOrdComparator#copy(int,int).mjava","sourceNew":"      @Override\n      public void copy(int slot, int doc) {\n        final int ord = termsIndex.getOrd(doc);\n        ords[slot] = ord;\n        if (ord == -1) {\n          values[slot] = null;\n        } else {\n          assert ord >= 0;\n          if (values[slot] == null) {\n            values[slot] = new BytesRef();\n          }\n          termsIndex.lookupOrd(ord, values[slot]);\n        }\n        readerGen[slot] = currentReaderGen;\n      }\n\n","sourceOld":"      @Override\n      public void copy(int slot, int doc) {\n        final int ord = termsIndex.getOrd(doc);\n        ords[slot] = ord;\n        if (ord == -1) {\n          values[slot] = null;\n        } else {\n          assert ord >= 0;\n          if (values[slot] == null) {\n            values[slot] = new BytesRef();\n          }\n          termsIndex.lookup(ord, values[slot]);\n        }\n        readerGen[slot] = currentReaderGen;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator.AnyOrdComparator#copy(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator.AnyOrdComparator#copy(int,int).mjava","sourceNew":"      @Override\n      public void copy(int slot, int doc) {\n        final int ord = termsIndex.getOrd(doc);\n        ords[slot] = ord;\n        if (ord == -1) {\n          values[slot] = null;\n        } else {\n          assert ord >= 0;\n          if (values[slot] == null) {\n            values[slot] = new BytesRef();\n          }\n          termsIndex.lookupOrd(ord, values[slot]);\n        }\n        readerGen[slot] = currentReaderGen;\n      }\n\n","sourceOld":"      @Override\n      public void copy(int slot, int doc) {\n        final int ord = (int) readerOrds.get(doc);\n        ords[slot] = ord;\n        if (ord == 0) {\n          values[slot] = null;\n        } else {\n          assert ord > 0;\n          if (values[slot] == null) {\n            values[slot] = new BytesRef();\n          }\n          termsIndex.lookup(ord, values[slot]);\n        }\n        readerGen[slot] = currentReaderGen;\n      }\n\n","bugFix":["9eed5547b2f58afdc475cc06312622f5bcf220c2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7615b855702e008d91a95a2578bf05d27372f599","date":1389802891,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator.AnyOrdComparator#copy(int,int).mjava","sourceNew":null,"sourceOld":"      @Override\n      public void copy(int slot, int doc) {\n        final int ord = termsIndex.getOrd(doc);\n        ords[slot] = ord;\n        if (ord == -1) {\n          values[slot] = null;\n        } else {\n          assert ord >= 0;\n          if (values[slot] == null) {\n            values[slot] = new BytesRef();\n          }\n          termsIndex.lookupOrd(ord, values[slot]);\n        }\n        readerGen[slot] = currentReaderGen;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27ab7b234eab0cbc020836989b96ed430e1065bb","date":1389894025,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator.AnyOrdComparator#copy(int,int).mjava","sourceNew":null,"sourceOld":"      @Override\n      public void copy(int slot, int doc) {\n        final int ord = termsIndex.getOrd(doc);\n        ords[slot] = ord;\n        if (ord == -1) {\n          values[slot] = null;\n        } else {\n          assert ord >= 0;\n          if (values[slot] == null) {\n            values[slot] = new BytesRef();\n          }\n          termsIndex.lookupOrd(ord, values[slot]);\n        }\n        readerGen[slot] = currentReaderGen;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","9d7e5f3aa5935964617824d1f9b2599ddb334464"],"29f7cc7c185412da66c1d0089d9e75da01329a00":["1ed65f3455364344c6d2ff76ea5421aac754eae7"],"27ab7b234eab0cbc020836989b96ed430e1065bb":["d4d69c535930b5cce125cff868d40f6373dc27d4","7615b855702e008d91a95a2578bf05d27372f599"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1ed65f3455364344c6d2ff76ea5421aac754eae7":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7615b855702e008d91a95a2578bf05d27372f599":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"9d7e5f3aa5935964617824d1f9b2599ddb334464":["29f7cc7c185412da66c1d0089d9e75da01329a00"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["27ab7b234eab0cbc020836989b96ed430e1065bb"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["27ab7b234eab0cbc020836989b96ed430e1065bb","7615b855702e008d91a95a2578bf05d27372f599"],"29f7cc7c185412da66c1d0089d9e75da01329a00":["9d7e5f3aa5935964617824d1f9b2599ddb334464"],"27ab7b234eab0cbc020836989b96ed430e1065bb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d4d69c535930b5cce125cff868d40f6373dc27d4","1ed65f3455364344c6d2ff76ea5421aac754eae7"],"1ed65f3455364344c6d2ff76ea5421aac754eae7":["29f7cc7c185412da66c1d0089d9e75da01329a00"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7615b855702e008d91a95a2578bf05d27372f599":["27ab7b234eab0cbc020836989b96ed430e1065bb"],"9d7e5f3aa5935964617824d1f9b2599ddb334464":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}