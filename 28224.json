{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene84/Lucene84PostingsReader.EverythingEnum#reset(IntBlockTermState,int).mjava","commits":[{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":2,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene84/Lucene84PostingsReader.EverythingEnum#reset(IntBlockTermState,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.EverythingEnum#reset(IntBlockTermState,int).mjava","sourceNew":"    public EverythingEnum reset(IntBlockTermState termState, int flags) throws IOException {\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      posTermStartFP = termState.posStartFP;\n      payTermStartFP = termState.payStartFP;\n      skipOffset = termState.skipOffset;\n      totalTermFreq = termState.totalTermFreq;\n      singletonDocID = termState.singletonDocID;\n      if (docFreq > 1) {\n        if (docIn == null) {\n          // lazy init\n          docIn = startDocIn.clone();\n        }\n        docIn.seek(docTermStartFP);\n      }\n      posPendingFP = posTermStartFP;\n      payPendingFP = payTermStartFP;\n      posPendingCount = 0;\n      if (termState.totalTermFreq < BLOCK_SIZE) {\n        lastPosBlockFP = posTermStartFP;\n      } else if (termState.totalTermFreq == BLOCK_SIZE) {\n        lastPosBlockFP = -1;\n      } else {\n        lastPosBlockFP = posTermStartFP + termState.lastPosBlockOffset;\n      }\n\n      this.needsOffsets = PostingsEnum.featureRequested(flags, PostingsEnum.OFFSETS);\n      this.needsPayloads = PostingsEnum.featureRequested(flags, PostingsEnum.PAYLOADS);\n\n      doc = -1;\n      accum = 0;\n      docUpto = 0;\n      if (docFreq > BLOCK_SIZE) {\n        nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      } else {\n        nextSkipDoc = NO_MORE_DOCS; // not enough docs for skipping\n      }\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","sourceOld":"    public EverythingEnum reset(IntBlockTermState termState, int flags) throws IOException {\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      posTermStartFP = termState.posStartFP;\n      payTermStartFP = termState.payStartFP;\n      skipOffset = termState.skipOffset;\n      totalTermFreq = termState.totalTermFreq;\n      singletonDocID = termState.singletonDocID;\n      if (docFreq > 1) {\n        if (docIn == null) {\n          // lazy init\n          docIn = startDocIn.clone();\n        }\n        docIn.seek(docTermStartFP);\n      }\n      posPendingFP = posTermStartFP;\n      payPendingFP = payTermStartFP;\n      posPendingCount = 0;\n      if (termState.totalTermFreq < BLOCK_SIZE) {\n        lastPosBlockFP = posTermStartFP;\n      } else if (termState.totalTermFreq == BLOCK_SIZE) {\n        lastPosBlockFP = -1;\n      } else {\n        lastPosBlockFP = posTermStartFP + termState.lastPosBlockOffset;\n      }\n\n      this.needsOffsets = PostingsEnum.featureRequested(flags, PostingsEnum.OFFSETS);\n      this.needsPayloads = PostingsEnum.featureRequested(flags, PostingsEnum.PAYLOADS);\n\n      doc = -1;\n      accum = 0;\n      docUpto = 0;\n      if (docFreq > BLOCK_SIZE) {\n        nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      } else {\n        nextSkipDoc = NO_MORE_DOCS; // not enough docs for skipping\n      }\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3270c8036d92f23d84b526bdcb07d645d3102eb7","date":1574438988,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene84/Lucene84PostingsReader.EverythingEnum#reset(IntBlockTermState,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene84/Lucene84PostingsReader.EverythingEnum#reset(IntBlockTermState,int).mjava","sourceNew":"    public EverythingEnum reset(IntBlockTermState termState, int flags) throws IOException {\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      posTermStartFP = termState.posStartFP;\n      payTermStartFP = termState.payStartFP;\n      skipOffset = termState.skipOffset;\n      totalTermFreq = termState.totalTermFreq;\n      singletonDocID = termState.singletonDocID;\n      if (docFreq > 1) {\n        if (docIn == null) {\n          // lazy init\n          docIn = startDocIn.clone();\n        }\n        docIn.seek(docTermStartFP);\n      }\n      posPendingFP = posTermStartFP;\n      payPendingFP = payTermStartFP;\n      posPendingCount = 0;\n      if (termState.totalTermFreq < BLOCK_SIZE) {\n        lastPosBlockFP = posTermStartFP;\n      } else if (termState.totalTermFreq == BLOCK_SIZE) {\n        lastPosBlockFP = -1;\n      } else {\n        lastPosBlockFP = posTermStartFP + termState.lastPosBlockOffset;\n      }\n\n      this.needsOffsets = PostingsEnum.featureRequested(flags, PostingsEnum.OFFSETS);\n      this.needsPayloads = PostingsEnum.featureRequested(flags, PostingsEnum.PAYLOADS);\n\n      doc = -1;\n      accum = 0;\n      blockUpto = 0;\n      if (docFreq > BLOCK_SIZE) {\n        nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      } else {\n        nextSkipDoc = NO_MORE_DOCS; // not enough docs for skipping\n      }\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","sourceOld":"    public EverythingEnum reset(IntBlockTermState termState, int flags) throws IOException {\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      posTermStartFP = termState.posStartFP;\n      payTermStartFP = termState.payStartFP;\n      skipOffset = termState.skipOffset;\n      totalTermFreq = termState.totalTermFreq;\n      singletonDocID = termState.singletonDocID;\n      if (docFreq > 1) {\n        if (docIn == null) {\n          // lazy init\n          docIn = startDocIn.clone();\n        }\n        docIn.seek(docTermStartFP);\n      }\n      posPendingFP = posTermStartFP;\n      payPendingFP = payTermStartFP;\n      posPendingCount = 0;\n      if (termState.totalTermFreq < BLOCK_SIZE) {\n        lastPosBlockFP = posTermStartFP;\n      } else if (termState.totalTermFreq == BLOCK_SIZE) {\n        lastPosBlockFP = -1;\n      } else {\n        lastPosBlockFP = posTermStartFP + termState.lastPosBlockOffset;\n      }\n\n      this.needsOffsets = PostingsEnum.featureRequested(flags, PostingsEnum.OFFSETS);\n      this.needsPayloads = PostingsEnum.featureRequested(flags, PostingsEnum.PAYLOADS);\n\n      doc = -1;\n      accum = 0;\n      docUpto = 0;\n      if (docFreq > BLOCK_SIZE) {\n        nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      } else {\n        nextSkipDoc = NO_MORE_DOCS; // not enough docs for skipping\n      }\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3270c8036d92f23d84b526bdcb07d645d3102eb7":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3270c8036d92f23d84b526bdcb07d645d3102eb7"]},"commit2Childs":{"3270c8036d92f23d84b526bdcb07d645d3102eb7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["3270c8036d92f23d84b526bdcb07d645d3102eb7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}