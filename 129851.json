{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoUtils#checkPolygon(double[],double[]).mjava","commits":[{"id":"ad0d09e969f4763b0df4230f8e3f74357872a4e4","date":1459188769,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoUtils#checkPolygon(double[],double[]).mjava","pathOld":"/dev/null","sourceNew":"  /** validates polygon values are within standard +/-180 coordinate bounds, same\n   *  number of latitude and longitude, and is closed\n   */\n  public static void checkPolygon(double[] polyLats, double[] polyLons) {\n    if (polyLats == null) {\n      throw new IllegalArgumentException(\"polyLats must not be null\");\n    }\n    if (polyLons == null) {\n      throw new IllegalArgumentException(\"polyLons must not be null\");\n    }\n    if (polyLats.length != polyLons.length) {\n      throw new IllegalArgumentException(\"polyLats and polyLons must be equal length\");\n    }\n    if (polyLats.length != polyLons.length) {\n      throw new IllegalArgumentException(\"polyLats and polyLons must be equal length\");\n    }\n    if (polyLats.length < 4) {\n      throw new IllegalArgumentException(\"at least 4 polygon points required\");\n    }\n    if (polyLats[0] != polyLats[polyLats.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLats[0]=\" + polyLats[0] + \" polyLats[\" + (polyLats.length-1) + \"]=\" + polyLats[polyLats.length-1]);\n    }\n    if (polyLons[0] != polyLons[polyLons.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLons[0]=\" + polyLons[0] + \" polyLons[\" + (polyLons.length-1) + \"]=\" + polyLons[polyLons.length-1]);\n    }\n    for (int i = 0; i < polyLats.length; i++) {\n      checkLatitude(polyLats[i]);\n      checkLongitude(polyLons[i]);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95ddcac9ac08381985af6eac8f8b77ba881d4ad8","date":1459477726,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/Polygon#Polygon(double[],double[],Polygon...).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoUtils#checkPolygon(double[],double[]).mjava","sourceNew":"  /** \n   * Creates a new Polygon from the supplied latitude/longitude array, and optionally any holes.\n   */\n  public Polygon(double[] polyLats, double[] polyLons, Polygon... holes) {\n    if (polyLats == null) {\n      throw new IllegalArgumentException(\"polyLats must not be null\");\n    }\n    if (polyLons == null) {\n      throw new IllegalArgumentException(\"polyLons must not be null\");\n    }\n    if (holes == null) {\n      throw new IllegalArgumentException(\"holes must not be null\");\n    }\n    if (polyLats.length != polyLons.length) {\n      throw new IllegalArgumentException(\"polyLats and polyLons must be equal length\");\n    }\n    if (polyLats.length != polyLons.length) {\n      throw new IllegalArgumentException(\"polyLats and polyLons must be equal length\");\n    }\n    if (polyLats.length < 4) {\n      throw new IllegalArgumentException(\"at least 4 polygon points required\");\n    }\n    if (polyLats[0] != polyLats[polyLats.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLats[0]=\" + polyLats[0] + \" polyLats[\" + (polyLats.length-1) + \"]=\" + polyLats[polyLats.length-1]);\n    }\n    if (polyLons[0] != polyLons[polyLons.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLons[0]=\" + polyLons[0] + \" polyLons[\" + (polyLons.length-1) + \"]=\" + polyLons[polyLons.length-1]);\n    }\n    for (int i = 0; i < polyLats.length; i++) {\n      GeoUtils.checkLatitude(polyLats[i]);\n      GeoUtils.checkLongitude(polyLons[i]);\n    }\n    for (int i = 0; i < holes.length; i++) {\n      Polygon inner = holes[i];\n      if (inner.holes.length > 0) {\n        throw new IllegalArgumentException(\"holes may not contain holes: polygons may not nest.\");\n      }\n    }\n    this.polyLats = polyLats.clone();\n    this.polyLons = polyLons.clone();\n    this.holes = holes.clone();\n\n    // compute bounding box\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n    double minLon = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n\n    for (int i = 0;i < polyLats.length; i++) {\n      minLat = Math.min(polyLats[i], minLat);\n      maxLat = Math.max(polyLats[i], maxLat);\n      minLon = Math.min(polyLons[i], minLon);\n      maxLon = Math.max(polyLons[i], maxLon);\n    }\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n  }\n\n","sourceOld":"  /** validates polygon values are within standard +/-180 coordinate bounds, same\n   *  number of latitude and longitude, and is closed\n   */\n  public static void checkPolygon(double[] polyLats, double[] polyLons) {\n    if (polyLats == null) {\n      throw new IllegalArgumentException(\"polyLats must not be null\");\n    }\n    if (polyLons == null) {\n      throw new IllegalArgumentException(\"polyLons must not be null\");\n    }\n    if (polyLats.length != polyLons.length) {\n      throw new IllegalArgumentException(\"polyLats and polyLons must be equal length\");\n    }\n    if (polyLats.length != polyLons.length) {\n      throw new IllegalArgumentException(\"polyLats and polyLons must be equal length\");\n    }\n    if (polyLats.length < 4) {\n      throw new IllegalArgumentException(\"at least 4 polygon points required\");\n    }\n    if (polyLats[0] != polyLats[polyLats.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLats[0]=\" + polyLats[0] + \" polyLats[\" + (polyLats.length-1) + \"]=\" + polyLats[polyLats.length-1]);\n    }\n    if (polyLons[0] != polyLons[polyLons.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLons[0]=\" + polyLons[0] + \" polyLons[\" + (polyLons.length-1) + \"]=\" + polyLons[polyLons.length-1]);\n    }\n    for (int i = 0; i < polyLats.length; i++) {\n      checkLatitude(polyLats[i]);\n      checkLongitude(polyLons[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"95ddcac9ac08381985af6eac8f8b77ba881d4ad8":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad0d09e969f4763b0df4230f8e3f74357872a4e4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["95ddcac9ac08381985af6eac8f8b77ba881d4ad8"]},"commit2Childs":{"95ddcac9ac08381985af6eac8f8b77ba881d4ad8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"ad0d09e969f4763b0df4230f8e3f74357872a4e4":["95ddcac9ac08381985af6eac8f8b77ba881d4ad8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}