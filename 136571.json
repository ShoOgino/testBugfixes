{"path":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testWithPendingDeletes().mjava","commits":[{"id":"fb10b6bcde550b87d8f10e5f010bd8f3021023b6","date":1274974592,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testWithPendingDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testWithPendingDeletes().mjava","sourceNew":"  public void testWithPendingDeletes() throws IOException {\n    // main directory\n    Directory dir = new MockRAMDirectory();\n    // auxiliary directory\n    Directory aux = new MockRAMDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n\n    writer.addIndexes(new Directory[] {aux});\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.ANALYZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  public void testWithPendingDeletes() throws IOException {\n    // main directory\n    Directory dir = new MockRAMDirectory();\n    // auxiliary directory\n    Directory aux = new MockRAMDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n\n    writer.addIndexesNoOptimize(new Directory[] {aux});\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.ANALYZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"163fe85a71d778fd2b7747f65ca27b54829e2e57","date":1279898785,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testWithPendingDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testWithPendingDeletes().mjava","sourceNew":"  public void testWithPendingDeletes() throws IOException {\n    // main directory\n    Directory dir = new MockRAMDirectory();\n    // auxiliary directory\n    Directory aux = new MockRAMDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.addIndexes(new Directory[] {aux});\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.ANALYZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  public void testWithPendingDeletes() throws IOException {\n    // main directory\n    Directory dir = new MockRAMDirectory();\n    // auxiliary directory\n    Directory aux = new MockRAMDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n\n    writer.addIndexes(new Directory[] {aux});\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.ANALYZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testWithPendingDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testWithPendingDeletes().mjava","sourceNew":"  public void testWithPendingDeletes() throws IOException {\n    // main directory\n    Directory dir = new MockRAMDirectory();\n    // auxiliary directory\n    Directory aux = new MockRAMDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.addIndexes(new Directory[] {aux});\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.ANALYZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  public void testWithPendingDeletes() throws IOException {\n    // main directory\n    Directory dir = new MockRAMDirectory();\n    // auxiliary directory\n    Directory aux = new MockRAMDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n\n    writer.addIndexes(new Directory[] {aux});\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.ANALYZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testWithPendingDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testWithPendingDeletes().mjava","sourceNew":"  public void testWithPendingDeletes() throws IOException {\n    // main directory\n    Directory dir = new MockRAMDirectory();\n    // auxiliary directory\n    Directory aux = new MockRAMDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.addIndexes(new Directory[] {aux});\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.ANALYZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  public void testWithPendingDeletes() throws IOException {\n    // main directory\n    Directory dir = new MockRAMDirectory();\n    // auxiliary directory\n    Directory aux = new MockRAMDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n\n    writer.addIndexes(new Directory[] {aux});\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.ANALYZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testWithPendingDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testWithPendingDeletes().mjava","sourceNew":"  public void testWithPendingDeletes() throws IOException {\n    // main directory\n    Directory dir = new MockRAMDirectory();\n    // auxiliary directory\n    Directory aux = new MockRAMDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.addIndexes(new Directory[] {aux});\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.ANALYZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  public void testWithPendingDeletes() throws IOException {\n    // main directory\n    Directory dir = new MockRAMDirectory();\n    // auxiliary directory\n    Directory aux = new MockRAMDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.addIndexes(new Directory[] {aux});\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.ANALYZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testWithPendingDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testWithPendingDeletes().mjava","sourceNew":"  public void testWithPendingDeletes() throws IOException {\n    // main directory\n    Directory dir = newDirectory(random);\n    // auxiliary directory\n    Directory aux = newDirectory(random);\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.addIndexes(new Directory[] {aux});\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.ANALYZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  public void testWithPendingDeletes() throws IOException {\n    // main directory\n    Directory dir = new MockRAMDirectory();\n    // auxiliary directory\n    Directory aux = new MockRAMDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.addIndexes(new Directory[] {aux});\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.ANALYZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testWithPendingDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testWithPendingDeletes().mjava","sourceNew":"  public void testWithPendingDeletes() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.addIndexes(new Directory[] {aux});\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.ANALYZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  public void testWithPendingDeletes() throws IOException {\n    // main directory\n    Directory dir = newDirectory(random);\n    // auxiliary directory\n    Directory aux = newDirectory(random);\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.addIndexes(new Directory[] {aux});\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.ANALYZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testWithPendingDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testWithPendingDeletes().mjava","sourceNew":"  public void testWithPendingDeletes() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.addIndexes(new Directory[] {aux});\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.ANALYZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  public void testWithPendingDeletes() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.addIndexes(new Directory[] {aux});\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.ANALYZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testWithPendingDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testWithPendingDeletes().mjava","sourceNew":"  public void testWithPendingDeletes() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.addIndexes(aux);\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.ANALYZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  public void testWithPendingDeletes() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.addIndexes(new Directory[] {aux});\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.ANALYZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testWithPendingDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testWithPendingDeletes().mjava","sourceNew":"  public void testWithPendingDeletes() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.addIndexes(aux);\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.ANALYZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  public void testWithPendingDeletes() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.addIndexes(new Directory[] {aux});\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.ANALYZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testWithPendingDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testWithPendingDeletes().mjava","sourceNew":"  public void testWithPendingDeletes() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.addIndexes(aux);\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.ANALYZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  public void testWithPendingDeletes() throws IOException {\n    // main directory\n    Directory dir = new MockRAMDirectory();\n    // auxiliary directory\n    Directory aux = new MockRAMDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.addIndexes(new Directory[] {aux});\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.ANALYZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69a6d2d525aeab53c867ed26934185e5bb627d0e","date":1296516902,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testWithPendingDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testWithPendingDeletes().mjava","sourceNew":"  public void testWithPendingDeletes() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(aux);\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.ANALYZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  public void testWithPendingDeletes() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.addIndexes(aux);\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.ANALYZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testWithPendingDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testWithPendingDeletes().mjava","sourceNew":"  public void testWithPendingDeletes() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(aux);\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.ANALYZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  public void testWithPendingDeletes() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.addIndexes(aux);\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.ANALYZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testWithPendingDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testWithPendingDeletes().mjava","sourceNew":"  public void testWithPendingDeletes() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(aux);\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.ANALYZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  public void testWithPendingDeletes() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.addIndexes(aux);\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.ANALYZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testWithPendingDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testWithPendingDeletes().mjava","sourceNew":"  public void testWithPendingDeletes() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(aux);\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.ANALYZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  public void testWithPendingDeletes() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(aux);\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.ANALYZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testWithPendingDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testWithPendingDeletes().mjava","sourceNew":"  public void testWithPendingDeletes() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(aux);\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.ANALYZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  public void testWithPendingDeletes() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(aux);\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.ANALYZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testWithPendingDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testWithPendingDeletes().mjava","sourceNew":"  public void testWithPendingDeletes() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(aux);\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.ANALYZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  public void testWithPendingDeletes() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(aux);\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.ANALYZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testWithPendingDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testWithPendingDeletes().mjava","sourceNew":"  public void testWithPendingDeletes() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(aux);\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.ANALYZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  public void testWithPendingDeletes() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(aux);\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.ANALYZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testWithPendingDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testWithPendingDeletes().mjava","sourceNew":"  public void testWithPendingDeletes() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(aux);\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\" + (i % 10), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"content\", \"bbb \" + i, TextField.TYPE_UNSTORED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  public void testWithPendingDeletes() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(aux);\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.ANALYZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testWithPendingDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testWithPendingDeletes().mjava","sourceNew":"  public void testWithPendingDeletes() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.addIndexes(aux);\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\" + (i % 10), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"content\", \"bbb \" + i, TextField.TYPE_UNSTORED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  public void testWithPendingDeletes() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(aux);\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\" + (i % 10), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"content\", \"bbb \" + i, TextField.TYPE_UNSTORED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testWithPendingDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testWithPendingDeletes().mjava","sourceNew":"  public void testWithPendingDeletes() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.addIndexes(aux);\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\" + (i % 10), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"content\", \"bbb \" + i, TextField.TYPE_UNSTORED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.forceMerge(1);\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  public void testWithPendingDeletes() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.addIndexes(aux);\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\" + (i % 10), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"content\", \"bbb \" + i, TextField.TYPE_UNSTORED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testWithPendingDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testWithPendingDeletes().mjava","sourceNew":"  public void testWithPendingDeletes() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.addIndexes(aux);\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\" + (i % 10), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"content\", \"bbb \" + i, TextField.TYPE_UNSTORED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.forceMerge(1);\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  public void testWithPendingDeletes() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.addIndexes(aux);\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\" + (i % 10), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"content\", \"bbb \" + i, TextField.TYPE_UNSTORED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.forceMerge(1);\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3242a09f703274d3b9283f2064a1a33064b53a1b":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6","163fe85a71d778fd2b7747f65ca27b54829e2e57"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"06584e6e98d592b34e1329b384182f368d2025e8":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["06584e6e98d592b34e1329b384182f368d2025e8"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["69a6d2d525aeab53c867ed26934185e5bb627d0e"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a3776dccca01c11e7046323cfad46a3b4a471233":["69a6d2d525aeab53c867ed26934185e5bb627d0e","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","69a6d2d525aeab53c867ed26934185e5bb627d0e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"69a6d2d525aeab53c867ed26934185e5bb627d0e":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"3bb13258feba31ab676502787ab2e1779f129b7a":["132903c28af3aa6f67284b78de91c0f0a99488c2","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","69a6d2d525aeab53c867ed26934185e5bb627d0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["132903c28af3aa6f67284b78de91c0f0a99488c2"]},"commit2Childs":{"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["3242a09f703274d3b9283f2064a1a33064b53a1b","b21422ff1d1d56499dec481f193b402e5e8def5b"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06584e6e98d592b34e1329b384182f368d2025e8":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["3242a09f703274d3b9283f2064a1a33064b53a1b","4b103252dee6afa1b6d7a622c773d178788eb85a","163fe85a71d778fd2b7747f65ca27b54829e2e57"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"69a6d2d525aeab53c867ed26934185e5bb627d0e":["f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["06584e6e98d592b34e1329b384182f368d2025e8"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","69a6d2d525aeab53c867ed26934185e5bb627d0e","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}