{"path":"lucene/core/src/java/org/apache/lucene/document/IntRange#verifyAndEncode(int[],int[],byte[]).mjava","commits":[{"id":"4a52b01a73cacbd2d360240e72d64c0ba353618f","date":1489389749,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/IntRange#verifyAndEncode(int[],int[],byte[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/IntRangeField#verifyAndEncode(int[],int[],byte[]).mjava","sourceNew":"  /**\n   * encode the ranges into a sortable byte array ({@code Double.NaN} not allowed)\n   * <p>\n   * example for 4 dimensions (8 bytes per dimension value):\n   * minD1 ... minD4 | maxD1 ... maxD4\n   */\n  static void verifyAndEncode(int[] min, int[] max, byte[] bytes) {\n    for (int d=0,i=0,j=min.length*BYTES; d<min.length; ++d, i+=BYTES, j+=BYTES) {\n      if (Double.isNaN(min[d])) {\n        throw new IllegalArgumentException(\"invalid min value (\" + Double.NaN + \")\" + \" in IntRange\");\n      }\n      if (Double.isNaN(max[d])) {\n        throw new IllegalArgumentException(\"invalid max value (\" + Double.NaN + \")\" + \" in IntRange\");\n      }\n      if (min[d] > max[d]) {\n        throw new IllegalArgumentException(\"min value (\" + min[d] + \") is greater than max value (\" + max[d] + \")\");\n      }\n      encode(min[d], bytes, i);\n      encode(max[d], bytes, j);\n    }\n  }\n\n","sourceOld":"  /**\n   * encode the ranges into a sortable byte array ({@code Double.NaN} not allowed)\n   * <p>\n   * example for 4 dimensions (8 bytes per dimension value):\n   * minD1 ... minD4 | maxD1 ... maxD4\n   */\n  static void verifyAndEncode(int[] min, int[] max, byte[] bytes) {\n    for (int d=0,i=0,j=min.length*BYTES; d<min.length; ++d, i+=BYTES, j+=BYTES) {\n      if (Double.isNaN(min[d])) {\n        throw new IllegalArgumentException(\"invalid min value (\" + Double.NaN + \")\" + \" in IntRangeField\");\n      }\n      if (Double.isNaN(max[d])) {\n        throw new IllegalArgumentException(\"invalid max value (\" + Double.NaN + \")\" + \" in IntRangeField\");\n      }\n      if (min[d] > max[d]) {\n        throw new IllegalArgumentException(\"min value (\" + min[d] + \") is greater than max value (\" + max[d] + \")\");\n      }\n      encode(min[d], bytes, i);\n      encode(max[d], bytes, j);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4a52b01a73cacbd2d360240e72d64c0ba353618f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4a52b01a73cacbd2d360240e72d64c0ba353618f"]},"commit2Childs":{"4a52b01a73cacbd2d360240e72d64c0ba353618f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4a52b01a73cacbd2d360240e72d64c0ba353618f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}