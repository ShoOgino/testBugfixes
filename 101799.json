{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#toString(int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#toString(int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#toString(int).mjava","sourceNew":"  public String toString(int max) {\n    ensureOpen();\n    StringBuilder sb = new StringBuilder();\n    int upperl = Math.min(max, this.indexReader.maxDoc());\n    for (int i = 0; i < upperl; i++) {\n      try {\n        CategoryPath category = this.getPath(i);\n        if (category == null) {\n          sb.append(i + \": NULL!! \\n\");\n          continue;\n        } \n        if (category.length() == 0) {\n          sb.append(i + \": EMPTY STRING!! \\n\");\n          continue;\n        }\n        sb.append(i +\": \"+category.toString()+\"\\n\");\n      } catch (IOException e) {\n        if (logger.isLoggable(Level.FINEST)) {\n          logger.log(Level.FINEST, e.getMessage(), e);\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  public String toString(int max) {\n    ensureOpen();\n    StringBuilder sb = new StringBuilder();\n    int upperl = Math.min(max, this.indexReader.maxDoc());\n    for (int i = 0; i < upperl; i++) {\n      try {\n        CategoryPath category = this.getPath(i);\n        if (category == null) {\n          sb.append(i + \": NULL!! \\n\");\n          continue;\n        } \n        if (category.length() == 0) {\n          sb.append(i + \": EMPTY STRING!! \\n\");\n          continue;\n        }\n        sb.append(i +\": \"+category.toString()+\"\\n\");\n      } catch (IOException e) {\n        if (logger.isLoggable(Level.FINEST)) {\n          logger.log(Level.FINEST, e.getMessage(), e);\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1","date":1353511594,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#toString(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#toString(int).mjava","sourceNew":"  public String toString(int max) {\n    ensureOpen();\n    StringBuilder sb = new StringBuilder();\n    int upperl = Math.min(max, indexReader.maxDoc());\n    for (int i = 0; i < upperl; i++) {\n      try {\n        CategoryPath category = this.getPath(i);\n        if (category == null) {\n          sb.append(i + \": NULL!! \\n\");\n          continue;\n        } \n        if (category.length() == 0) {\n          sb.append(i + \": EMPTY STRING!! \\n\");\n          continue;\n        }\n        sb.append(i +\": \"+category.toString()+\"\\n\");\n      } catch (IOException e) {\n        if (logger.isLoggable(Level.FINEST)) {\n          logger.log(Level.FINEST, e.getMessage(), e);\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  public String toString(int max) {\n    ensureOpen();\n    StringBuilder sb = new StringBuilder();\n    int upperl = Math.min(max, this.indexReader.maxDoc());\n    for (int i = 0; i < upperl; i++) {\n      try {\n        CategoryPath category = this.getPath(i);\n        if (category == null) {\n          sb.append(i + \": NULL!! \\n\");\n          continue;\n        } \n        if (category.length() == 0) {\n          sb.append(i + \": EMPTY STRING!! \\n\");\n          continue;\n        }\n        sb.append(i +\": \"+category.toString()+\"\\n\");\n      } catch (IOException e) {\n        if (logger.isLoggable(Level.FINEST)) {\n          logger.log(Level.FINEST, e.getMessage(), e);\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#toString(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#toString(int).mjava","sourceNew":"  public String toString(int max) {\n    ensureOpen();\n    StringBuilder sb = new StringBuilder();\n    int upperl = Math.min(max, indexReader.maxDoc());\n    for (int i = 0; i < upperl; i++) {\n      try {\n        CategoryPath category = this.getPath(i);\n        if (category == null) {\n          sb.append(i + \": NULL!! \\n\");\n          continue;\n        } \n        if (category.length() == 0) {\n          sb.append(i + \": EMPTY STRING!! \\n\");\n          continue;\n        }\n        sb.append(i +\": \"+category.toString()+\"\\n\");\n      } catch (IOException e) {\n        if (logger.isLoggable(Level.FINEST)) {\n          logger.log(Level.FINEST, e.getMessage(), e);\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  public String toString(int max) {\n    ensureOpen();\n    StringBuilder sb = new StringBuilder();\n    int upperl = Math.min(max, this.indexReader.maxDoc());\n    for (int i = 0; i < upperl; i++) {\n      try {\n        CategoryPath category = this.getPath(i);\n        if (category == null) {\n          sb.append(i + \": NULL!! \\n\");\n          continue;\n        } \n        if (category.length() == 0) {\n          sb.append(i + \": EMPTY STRING!! \\n\");\n          continue;\n        }\n        sb.append(i +\": \"+category.toString()+\"\\n\");\n      } catch (IOException e) {\n        if (logger.isLoggable(Level.FINEST)) {\n          logger.log(Level.FINEST, e.getMessage(), e);\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#toString(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#toString(int).mjava","sourceNew":"  public String toString(int max) {\n    ensureOpen();\n    StringBuilder sb = new StringBuilder();\n    int upperl = Math.min(max, indexReader.maxDoc());\n    for (int i = 0; i < upperl; i++) {\n      try {\n        CategoryPath category = this.getPath(i);\n        if (category == null) {\n          sb.append(i + \": NULL!! \\n\");\n          continue;\n        } \n        if (category.length == 0) {\n          sb.append(i + \": EMPTY STRING!! \\n\");\n          continue;\n        }\n        sb.append(i +\": \"+category.toString()+\"\\n\");\n      } catch (IOException e) {\n        if (logger.isLoggable(Level.FINEST)) {\n          logger.log(Level.FINEST, e.getMessage(), e);\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  public String toString(int max) {\n    ensureOpen();\n    StringBuilder sb = new StringBuilder();\n    int upperl = Math.min(max, indexReader.maxDoc());\n    for (int i = 0; i < upperl; i++) {\n      try {\n        CategoryPath category = this.getPath(i);\n        if (category == null) {\n          sb.append(i + \": NULL!! \\n\");\n          continue;\n        } \n        if (category.length() == 0) {\n          sb.append(i + \": EMPTY STRING!! \\n\");\n          continue;\n        }\n        sb.append(i +\": \"+category.toString()+\"\\n\");\n      } catch (IOException e) {\n        if (logger.isLoggable(Level.FINEST)) {\n          logger.log(Level.FINEST, e.getMessage(), e);\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#toString(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#toString(int).mjava","sourceNew":"  public String toString(int max) {\n    ensureOpen();\n    StringBuilder sb = new StringBuilder();\n    int upperl = Math.min(max, indexReader.maxDoc());\n    for (int i = 0; i < upperl; i++) {\n      try {\n        CategoryPath category = this.getPath(i);\n        if (category == null) {\n          sb.append(i + \": NULL!! \\n\");\n          continue;\n        } \n        if (category.length == 0) {\n          sb.append(i + \": EMPTY STRING!! \\n\");\n          continue;\n        }\n        sb.append(i +\": \"+category.toString()+\"\\n\");\n      } catch (IOException e) {\n        if (logger.isLoggable(Level.FINEST)) {\n          logger.log(Level.FINEST, e.getMessage(), e);\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  public String toString(int max) {\n    ensureOpen();\n    StringBuilder sb = new StringBuilder();\n    int upperl = Math.min(max, indexReader.maxDoc());\n    for (int i = 0; i < upperl; i++) {\n      try {\n        CategoryPath category = this.getPath(i);\n        if (category == null) {\n          sb.append(i + \": NULL!! \\n\");\n          continue;\n        } \n        if (category.length() == 0) {\n          sb.append(i + \": EMPTY STRING!! \\n\");\n          continue;\n        }\n        sb.append(i +\": \"+category.toString()+\"\\n\");\n      } catch (IOException e) {\n        if (logger.isLoggable(Level.FINEST)) {\n          logger.log(Level.FINEST, e.getMessage(), e);\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#toString(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#toString(int).mjava","sourceNew":"  public String toString(int max) {\n    ensureOpen();\n    StringBuilder sb = new StringBuilder();\n    int upperl = Math.min(max, indexReader.maxDoc());\n    for (int i = 0; i < upperl; i++) {\n      try {\n        FacetLabel category = this.getPath(i);\n        if (category == null) {\n          sb.append(i + \": NULL!! \\n\");\n          continue;\n        } \n        if (category.length == 0) {\n          sb.append(i + \": EMPTY STRING!! \\n\");\n          continue;\n        }\n        sb.append(i +\": \"+category.toString()+\"\\n\");\n      } catch (IOException e) {\n        if (logger.isLoggable(Level.FINEST)) {\n          logger.log(Level.FINEST, e.getMessage(), e);\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  public String toString(int max) {\n    ensureOpen();\n    StringBuilder sb = new StringBuilder();\n    int upperl = Math.min(max, indexReader.maxDoc());\n    for (int i = 0; i < upperl; i++) {\n      try {\n        CategoryPath category = this.getPath(i);\n        if (category == null) {\n          sb.append(i + \": NULL!! \\n\");\n          continue;\n        } \n        if (category.length == 0) {\n          sb.append(i + \": EMPTY STRING!! \\n\");\n          continue;\n        }\n        sb.append(i +\": \"+category.toString()+\"\\n\");\n      } catch (IOException e) {\n        if (logger.isLoggable(Level.FINEST)) {\n          logger.log(Level.FINEST, e.getMessage(), e);\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0b656cbf28fe2a4be7de3f0e561623ca39d06884","date":1388622204,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#toString(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#toString(int).mjava","sourceNew":"  /** Returns ordinal -> label mapping, up to the provided\n   *  max ordinal or number of ordinals, whichever is\n   *  smaller. */\n  public String toString(int max) {\n    ensureOpen();\n    StringBuilder sb = new StringBuilder();\n    int upperl = Math.min(max, indexReader.maxDoc());\n    for (int i = 0; i < upperl; i++) {\n      try {\n        FacetLabel category = this.getPath(i);\n        if (category == null) {\n          sb.append(i + \": NULL!! \\n\");\n          continue;\n        } \n        if (category.length == 0) {\n          sb.append(i + \": EMPTY STRING!! \\n\");\n          continue;\n        }\n        sb.append(i +\": \"+category.toString()+\"\\n\");\n      } catch (IOException e) {\n        if (logger.isLoggable(Level.FINEST)) {\n          logger.log(Level.FINEST, e.getMessage(), e);\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  public String toString(int max) {\n    ensureOpen();\n    StringBuilder sb = new StringBuilder();\n    int upperl = Math.min(max, indexReader.maxDoc());\n    for (int i = 0; i < upperl; i++) {\n      try {\n        FacetLabel category = this.getPath(i);\n        if (category == null) {\n          sb.append(i + \": NULL!! \\n\");\n          continue;\n        } \n        if (category.length == 0) {\n          sb.append(i + \": EMPTY STRING!! \\n\");\n          continue;\n        }\n        sb.append(i +\": \"+category.toString()+\"\\n\");\n      } catch (IOException e) {\n        if (logger.isLoggable(Level.FINEST)) {\n          logger.log(Level.FINEST, e.getMessage(), e);\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#toString(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#toString(int).mjava","sourceNew":"  /** Returns ordinal -> label mapping, up to the provided\n   *  max ordinal or number of ordinals, whichever is\n   *  smaller. */\n  public String toString(int max) {\n    ensureOpen();\n    StringBuilder sb = new StringBuilder();\n    int upperl = Math.min(max, indexReader.maxDoc());\n    for (int i = 0; i < upperl; i++) {\n      try {\n        FacetLabel category = this.getPath(i);\n        if (category == null) {\n          sb.append(i + \": NULL!! \\n\");\n          continue;\n        } \n        if (category.length == 0) {\n          sb.append(i + \": EMPTY STRING!! \\n\");\n          continue;\n        }\n        sb.append(i +\": \"+category.toString()+\"\\n\");\n      } catch (IOException e) {\n        if (logger.isLoggable(Level.FINEST)) {\n          logger.log(Level.FINEST, e.getMessage(), e);\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  public String toString(int max) {\n    ensureOpen();\n    StringBuilder sb = new StringBuilder();\n    int upperl = Math.min(max, indexReader.maxDoc());\n    for (int i = 0; i < upperl; i++) {\n      try {\n        CategoryPath category = this.getPath(i);\n        if (category == null) {\n          sb.append(i + \": NULL!! \\n\");\n          continue;\n        } \n        if (category.length == 0) {\n          sb.append(i + \": EMPTY STRING!! \\n\");\n          continue;\n        }\n        sb.append(i +\": \"+category.toString()+\"\\n\");\n      } catch (IOException e) {\n        if (logger.isLoggable(Level.FINEST)) {\n          logger.log(Level.FINEST, e.getMessage(), e);\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1eb427f2c6beed80d1724555fc1db003ccf3030","date":1417137397,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#toString(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#toString(int).mjava","sourceNew":"  /** Returns ordinal -&gt; label mapping, up to the provided\n   *  max ordinal or number of ordinals, whichever is\n   *  smaller. */\n  public String toString(int max) {\n    ensureOpen();\n    StringBuilder sb = new StringBuilder();\n    int upperl = Math.min(max, indexReader.maxDoc());\n    for (int i = 0; i < upperl; i++) {\n      try {\n        FacetLabel category = this.getPath(i);\n        if (category == null) {\n          sb.append(i + \": NULL!! \\n\");\n          continue;\n        } \n        if (category.length == 0) {\n          sb.append(i + \": EMPTY STRING!! \\n\");\n          continue;\n        }\n        sb.append(i +\": \"+category.toString()+\"\\n\");\n      } catch (IOException e) {\n        if (logger.isLoggable(Level.FINEST)) {\n          logger.log(Level.FINEST, e.getMessage(), e);\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /** Returns ordinal -> label mapping, up to the provided\n   *  max ordinal or number of ordinals, whichever is\n   *  smaller. */\n  public String toString(int max) {\n    ensureOpen();\n    StringBuilder sb = new StringBuilder();\n    int upperl = Math.min(max, indexReader.maxDoc());\n    for (int i = 0; i < upperl; i++) {\n      try {\n        FacetLabel category = this.getPath(i);\n        if (category == null) {\n          sb.append(i + \": NULL!! \\n\");\n          continue;\n        } \n        if (category.length == 0) {\n          sb.append(i + \": EMPTY STRING!! \\n\");\n          continue;\n        }\n        sb.append(i +\": \"+category.toString()+\"\\n\");\n      } catch (IOException e) {\n        if (logger.isLoggable(Level.FINEST)) {\n          logger.log(Level.FINEST, e.getMessage(), e);\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#toString(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#toString(int).mjava","sourceNew":"  /** Returns ordinal -&gt; label mapping, up to the provided\n   *  max ordinal or number of ordinals, whichever is\n   *  smaller. */\n  public String toString(int max) {\n    ensureOpen();\n    StringBuilder sb = new StringBuilder();\n    int upperl = Math.min(max, indexReader.maxDoc());\n    for (int i = 0; i < upperl; i++) {\n      try {\n        FacetLabel category = this.getPath(i);\n        if (category == null) {\n          sb.append(i + \": NULL!! \\n\");\n          continue;\n        } \n        if (category.length == 0) {\n          sb.append(i + \": EMPTY STRING!! \\n\");\n          continue;\n        }\n        sb.append(i +\": \"+category.toString()+\"\\n\");\n      } catch (IOException e) {\n        if (log.isLoggable(Level.FINEST)) {\n          log.log(Level.FINEST, e.getMessage(), e);\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /** Returns ordinal -&gt; label mapping, up to the provided\n   *  max ordinal or number of ordinals, whichever is\n   *  smaller. */\n  public String toString(int max) {\n    ensureOpen();\n    StringBuilder sb = new StringBuilder();\n    int upperl = Math.min(max, indexReader.maxDoc());\n    for (int i = 0; i < upperl; i++) {\n      try {\n        FacetLabel category = this.getPath(i);\n        if (category == null) {\n          sb.append(i + \": NULL!! \\n\");\n          continue;\n        } \n        if (category.length == 0) {\n          sb.append(i + \": EMPTY STRING!! \\n\");\n          continue;\n        }\n        sb.append(i +\": \"+category.toString()+\"\\n\");\n      } catch (IOException e) {\n        if (logger.isLoggable(Level.FINEST)) {\n          logger.log(Level.FINEST, e.getMessage(), e);\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ffe681f212e5073c69955b4ad22946794c84940","date":1560182863,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#toString(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#toString(int).mjava","sourceNew":"  /** Returns ordinal -&gt; label mapping, up to the provided\n   *  max ordinal or number of ordinals, whichever is\n   *  smaller. */\n  public String toString(int max) {\n    ensureOpen();\n    StringBuilder sb = new StringBuilder();\n    int upperl = Math.min(max, indexReader.maxDoc());\n    for (int i = 0; i < upperl; i++) {\n      try {\n        FacetLabel category = this.getPath(i);\n        if (category == null) {\n          sb.append(i).append(\": NULL!! \\n\");\n          continue;\n        } \n        if (category.length == 0) {\n          sb.append(i).append(\": EMPTY STRING!! \\n\");\n          continue;\n        }\n        sb.append(i).append(\": \").append(category.toString()).append(\"\\n\");\n      } catch (IOException e) {\n        if (log.isLoggable(Level.FINEST)) {\n          log.log(Level.FINEST, e.getMessage(), e);\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /** Returns ordinal -&gt; label mapping, up to the provided\n   *  max ordinal or number of ordinals, whichever is\n   *  smaller. */\n  public String toString(int max) {\n    ensureOpen();\n    StringBuilder sb = new StringBuilder();\n    int upperl = Math.min(max, indexReader.maxDoc());\n    for (int i = 0; i < upperl; i++) {\n      try {\n        FacetLabel category = this.getPath(i);\n        if (category == null) {\n          sb.append(i + \": NULL!! \\n\");\n          continue;\n        } \n        if (category.length == 0) {\n          sb.append(i + \": EMPTY STRING!! \\n\");\n          continue;\n        }\n        sb.append(i +\": \"+category.toString()+\"\\n\");\n      } catch (IOException e) {\n        if (log.isLoggable(Level.FINEST)) {\n          log.log(Level.FINEST, e.getMessage(), e);\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"b1eb427f2c6beed80d1724555fc1db003ccf3030":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"2ffe681f212e5073c69955b4ad22946794c84940":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"407687e67faf6e1f02a211ca078d8e3eed631027":["b89678825b68eccaf09e6ab71675fc0b0af1e099","219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"],"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","0b656cbf28fe2a4be7de3f0e561623ca39d06884"],"0b656cbf28fe2a4be7de3f0e561623ca39d06884":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2ffe681f212e5073c69955b4ad22946794c84940"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["b1eb427f2c6beed80d1724555fc1db003ccf3030"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b1eb427f2c6beed80d1724555fc1db003ccf3030":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"2ffe681f212e5073c69955b4ad22946794c84940":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1":["407687e67faf6e1f02a211ca078d8e3eed631027","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["0b656cbf28fe2a4be7de3f0e561623ca39d06884"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c190847801a50f4dd20fd639bdc29b54ea3b288b","3cc728b07df73b197e6d940d27f9b08b63918f13"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["407687e67faf6e1f02a211ca078d8e3eed631027","219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"0b656cbf28fe2a4be7de3f0e561623ca39d06884":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["2ffe681f212e5073c69955b4ad22946794c84940"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}