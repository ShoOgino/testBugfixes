{"path":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,boolean,float).mjava","commits":[{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Map valueSourceContext = ValueSource.newContext(searcher);\n\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Compute approx & exact\n        final IntersectsDifferentiatingQuery.IntersectsDifferentiatingVisitor result =\n            intersectsDiffQuery.compute(context);\n        if (result.approxDocIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator approxDISI = result.approxDocIdSet.iterator();\n        if (approxDISI == null) {\n          return null;\n        }\n        final DocIdSetIterator exactIterator;\n        if (result.exactDocIdSet != null) {\n          // If both sets are the same, there's nothing to verify; we needn't return a TwoPhaseIterator\n          if (result.approxDocIdSet == result.exactDocIdSet) {\n            return new ConstantScoreScorer(this, score(), approxDISI);\n          }\n          exactIterator = result.exactDocIdSet.iterator();\n          assert exactIterator != null;\n        } else {\n          exactIterator = null;\n        }\n\n        final FunctionValues predFuncValues = predicateValueSource.getValues(valueSourceContext, context);\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approxDISI) {\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approxDISI.docID();\n            if (exactIterator != null) {\n              if (exactIterator.docID() < doc) {\n                exactIterator.advance(doc);\n              }\n              if (exactIterator.docID() == doc) {\n                return true;\n              }\n            }\n\n            return predFuncValues.boolVal(doc);\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO: use cost of exactIterator.advance() and predFuncValues.boolVal()\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Map valueSourceContext = ValueSource.newContext(searcher);\n\n    return new ConstantScoreWeight(this) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Compute approx & exact\n        final IntersectsDifferentiatingQuery.IntersectsDifferentiatingVisitor result =\n            intersectsDiffQuery.compute(context);\n        if (result.approxDocIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator approxDISI = result.approxDocIdSet.iterator();\n        if (approxDISI == null) {\n          return null;\n        }\n        final DocIdSetIterator exactIterator;\n        if (result.exactDocIdSet != null) {\n          // If both sets are the same, there's nothing to verify; we needn't return a TwoPhaseIterator\n          if (result.approxDocIdSet == result.exactDocIdSet) {\n            return new ConstantScoreScorer(this, score(), approxDISI);\n          }\n          exactIterator = result.exactDocIdSet.iterator();\n          assert exactIterator != null;\n        } else {\n          exactIterator = null;\n        }\n\n        final FunctionValues predFuncValues = predicateValueSource.getValues(valueSourceContext, context);\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approxDISI) {\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approxDISI.docID();\n            if (exactIterator != null) {\n              if (exactIterator.docID() < doc) {\n                exactIterator.advance(doc);\n              }\n              if (exactIterator.docID() == doc) {\n                return true;\n              }\n            }\n\n            return predFuncValues.boolVal(doc);\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO: use cost of exactIterator.advance() and predFuncValues.boolVal()\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Map valueSourceContext = ValueSource.newContext(searcher);\n\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Compute approx & exact\n        final IntersectsDifferentiatingQuery.IntersectsDifferentiatingVisitor result =\n            intersectsDiffQuery.compute(context);\n        if (result.approxDocIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator approxDISI = result.approxDocIdSet.iterator();\n        if (approxDISI == null) {\n          return null;\n        }\n        final DocIdSetIterator exactIterator;\n        if (result.exactDocIdSet != null) {\n          // If both sets are the same, there's nothing to verify; we needn't return a TwoPhaseIterator\n          if (result.approxDocIdSet == result.exactDocIdSet) {\n            return new ConstantScoreScorer(this, score(), approxDISI);\n          }\n          exactIterator = result.exactDocIdSet.iterator();\n          assert exactIterator != null;\n        } else {\n          exactIterator = null;\n        }\n\n        final FunctionValues predFuncValues = predicateValueSource.getValues(valueSourceContext, context);\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approxDISI) {\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approxDISI.docID();\n            if (exactIterator != null) {\n              if (exactIterator.docID() < doc) {\n                exactIterator.advance(doc);\n              }\n              if (exactIterator.docID() == doc) {\n                return true;\n              }\n            }\n\n            return predFuncValues.boolVal(doc);\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO: use cost of exactIterator.advance() and predFuncValues.boolVal()\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32b9119890a8e82252b6cc341ac491d18fa1e49b","date":1498575219,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Compute approx & exact\n        final IntersectsDifferentiatingQuery.IntersectsDifferentiatingVisitor result =\n            intersectsDiffQuery.compute(context);\n        if (result.approxDocIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator approxDISI = result.approxDocIdSet.iterator();\n        if (approxDISI == null) {\n          return null;\n        }\n        final DocIdSetIterator exactIterator;\n        if (result.exactDocIdSet != null) {\n          // If both sets are the same, there's nothing to verify; we needn't return a TwoPhaseIterator\n          if (result.approxDocIdSet == result.exactDocIdSet) {\n            return new ConstantScoreScorer(this, score(), approxDISI);\n          }\n          exactIterator = result.exactDocIdSet.iterator();\n          assert exactIterator != null;\n        } else {\n          exactIterator = null;\n        }\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approxDISI) {\n\n          final TwoPhaseIterator predFuncValues = predicateValueSource.iterator(context, approxDISI);\n\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approxDISI.docID();\n            if (exactIterator != null) {\n              if (exactIterator.docID() < doc) {\n                exactIterator.advance(doc);\n              }\n              if (exactIterator.docID() == doc) {\n                return true;\n              }\n            }\n            return predFuncValues.matches();\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO: use cost of exactIterator.advance() and predFuncValues.cost()\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Map valueSourceContext = ValueSource.newContext(searcher);\n\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Compute approx & exact\n        final IntersectsDifferentiatingQuery.IntersectsDifferentiatingVisitor result =\n            intersectsDiffQuery.compute(context);\n        if (result.approxDocIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator approxDISI = result.approxDocIdSet.iterator();\n        if (approxDISI == null) {\n          return null;\n        }\n        final DocIdSetIterator exactIterator;\n        if (result.exactDocIdSet != null) {\n          // If both sets are the same, there's nothing to verify; we needn't return a TwoPhaseIterator\n          if (result.approxDocIdSet == result.exactDocIdSet) {\n            return new ConstantScoreScorer(this, score(), approxDISI);\n          }\n          exactIterator = result.exactDocIdSet.iterator();\n          assert exactIterator != null;\n        } else {\n          exactIterator = null;\n        }\n\n        final FunctionValues predFuncValues = predicateValueSource.getValues(valueSourceContext, context);\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approxDISI) {\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approxDISI.docID();\n            if (exactIterator != null) {\n              if (exactIterator.docID() < doc) {\n                exactIterator.advance(doc);\n              }\n              if (exactIterator.docID() == doc) {\n                return true;\n              }\n            }\n\n            return predFuncValues.boolVal(doc);\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO: use cost of exactIterator.advance() and predFuncValues.boolVal()\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Compute approx & exact\n        final IntersectsDifferentiatingQuery.IntersectsDifferentiatingVisitor result =\n            intersectsDiffQuery.compute(context);\n        if (result.approxDocIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator approxDISI = result.approxDocIdSet.iterator();\n        if (approxDISI == null) {\n          return null;\n        }\n        final DocIdSetIterator exactIterator;\n        if (result.exactDocIdSet != null) {\n          // If both sets are the same, there's nothing to verify; we needn't return a TwoPhaseIterator\n          if (result.approxDocIdSet == result.exactDocIdSet) {\n            return new ConstantScoreScorer(this, score(), approxDISI);\n          }\n          exactIterator = result.exactDocIdSet.iterator();\n          assert exactIterator != null;\n        } else {\n          exactIterator = null;\n        }\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approxDISI) {\n\n          final TwoPhaseIterator predFuncValues = predicateValueSource.iterator(context, approxDISI);\n\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approxDISI.docID();\n            if (exactIterator != null) {\n              if (exactIterator.docID() < doc) {\n                exactIterator.advance(doc);\n              }\n              if (exactIterator.docID() == doc) {\n                return true;\n              }\n            }\n            return predFuncValues.matches();\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO: use cost of exactIterator.advance() and predFuncValues.cost()\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Map valueSourceContext = ValueSource.newContext(searcher);\n\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Compute approx & exact\n        final IntersectsDifferentiatingQuery.IntersectsDifferentiatingVisitor result =\n            intersectsDiffQuery.compute(context);\n        if (result.approxDocIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator approxDISI = result.approxDocIdSet.iterator();\n        if (approxDISI == null) {\n          return null;\n        }\n        final DocIdSetIterator exactIterator;\n        if (result.exactDocIdSet != null) {\n          // If both sets are the same, there's nothing to verify; we needn't return a TwoPhaseIterator\n          if (result.approxDocIdSet == result.exactDocIdSet) {\n            return new ConstantScoreScorer(this, score(), approxDISI);\n          }\n          exactIterator = result.exactDocIdSet.iterator();\n          assert exactIterator != null;\n        } else {\n          exactIterator = null;\n        }\n\n        final FunctionValues predFuncValues = predicateValueSource.getValues(valueSourceContext, context);\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approxDISI) {\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approxDISI.docID();\n            if (exactIterator != null) {\n              if (exactIterator.docID() < doc) {\n                exactIterator.advance(doc);\n              }\n              if (exactIterator.docID() == doc) {\n                return true;\n              }\n            }\n\n            return predFuncValues.boolVal(doc);\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO: use cost of exactIterator.advance() and predFuncValues.boolVal()\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Compute approx & exact\n        final IntersectsDifferentiatingQuery.IntersectsDifferentiatingVisitor result =\n            intersectsDiffQuery.compute(context);\n        if (result.approxDocIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator approxDISI = result.approxDocIdSet.iterator();\n        if (approxDISI == null) {\n          return null;\n        }\n        final DocIdSetIterator exactIterator;\n        if (result.exactDocIdSet != null) {\n          // If both sets are the same, there's nothing to verify; we needn't return a TwoPhaseIterator\n          if (result.approxDocIdSet == result.exactDocIdSet) {\n            return new ConstantScoreScorer(this, score(), approxDISI);\n          }\n          exactIterator = result.exactDocIdSet.iterator();\n          assert exactIterator != null;\n        } else {\n          exactIterator = null;\n        }\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approxDISI) {\n\n          final TwoPhaseIterator predFuncValues = predicateValueSource.iterator(context, approxDISI);\n\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approxDISI.docID();\n            if (exactIterator != null) {\n              if (exactIterator.docID() < doc) {\n                exactIterator.advance(doc);\n              }\n              if (exactIterator.docID() == doc) {\n                return true;\n              }\n            }\n            return predFuncValues.matches();\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO: use cost of exactIterator.advance() and predFuncValues.cost()\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Map valueSourceContext = ValueSource.newContext(searcher);\n\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Compute approx & exact\n        final IntersectsDifferentiatingQuery.IntersectsDifferentiatingVisitor result =\n            intersectsDiffQuery.compute(context);\n        if (result.approxDocIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator approxDISI = result.approxDocIdSet.iterator();\n        if (approxDISI == null) {\n          return null;\n        }\n        final DocIdSetIterator exactIterator;\n        if (result.exactDocIdSet != null) {\n          // If both sets are the same, there's nothing to verify; we needn't return a TwoPhaseIterator\n          if (result.approxDocIdSet == result.exactDocIdSet) {\n            return new ConstantScoreScorer(this, score(), approxDISI);\n          }\n          exactIterator = result.exactDocIdSet.iterator();\n          assert exactIterator != null;\n        } else {\n          exactIterator = null;\n        }\n\n        final FunctionValues predFuncValues = predicateValueSource.getValues(valueSourceContext, context);\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approxDISI) {\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approxDISI.docID();\n            if (exactIterator != null) {\n              if (exactIterator.docID() < doc) {\n                exactIterator.advance(doc);\n              }\n              if (exactIterator.docID() == doc) {\n                return true;\n              }\n            }\n\n            return predFuncValues.boolVal(doc);\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO: use cost of exactIterator.advance() and predFuncValues.boolVal()\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"706a7a3396c030cc66dda92a0492eb492131c4c0","date":1509705614,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Compute approx & exact\n        final IntersectsDifferentiatingQuery.IntersectsDifferentiatingVisitor result =\n            intersectsDiffQuery.compute(context);\n        if (result.approxDocIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator approxDISI = result.approxDocIdSet.iterator();\n        if (approxDISI == null) {\n          return null;\n        }\n        final DocIdSetIterator exactIterator;\n        if (result.exactDocIdSet != null) {\n          // If both sets are the same, there's nothing to verify; we needn't return a TwoPhaseIterator\n          if (result.approxDocIdSet == result.exactDocIdSet) {\n            return new ConstantScoreScorer(this, score(), approxDISI);\n          }\n          exactIterator = result.exactDocIdSet.iterator();\n          assert exactIterator != null;\n        } else {\n          exactIterator = null;\n        }\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approxDISI) {\n\n          final TwoPhaseIterator predFuncValues = predicateValueSource.iterator(context, approxDISI);\n\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approxDISI.docID();\n            if (exactIterator != null) {\n              if (exactIterator.docID() < doc) {\n                exactIterator.advance(doc);\n              }\n              if (exactIterator.docID() == doc) {\n                return true;\n              }\n            }\n            return predFuncValues.matches();\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO: use cost of exactIterator.advance() and predFuncValues.cost()\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n\n      @Override\n      public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n        return null; // TODO delegate to PredicateValueSource?\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Compute approx & exact\n        final IntersectsDifferentiatingQuery.IntersectsDifferentiatingVisitor result =\n            intersectsDiffQuery.compute(context);\n        if (result.approxDocIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator approxDISI = result.approxDocIdSet.iterator();\n        if (approxDISI == null) {\n          return null;\n        }\n        final DocIdSetIterator exactIterator;\n        if (result.exactDocIdSet != null) {\n          // If both sets are the same, there's nothing to verify; we needn't return a TwoPhaseIterator\n          if (result.approxDocIdSet == result.exactDocIdSet) {\n            return new ConstantScoreScorer(this, score(), approxDISI);\n          }\n          exactIterator = result.exactDocIdSet.iterator();\n          assert exactIterator != null;\n        } else {\n          exactIterator = null;\n        }\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approxDISI) {\n\n          final TwoPhaseIterator predFuncValues = predicateValueSource.iterator(context, approxDISI);\n\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approxDISI.docID();\n            if (exactIterator != null) {\n              if (exactIterator.docID() < doc) {\n                exactIterator.advance(doc);\n              }\n              if (exactIterator.docID() == doc) {\n                return true;\n              }\n            }\n            return predFuncValues.matches();\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO: use cost of exactIterator.advance() and predFuncValues.cost()\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Compute approx & exact\n        final IntersectsDifferentiatingQuery.IntersectsDifferentiatingVisitor result =\n            intersectsDiffQuery.compute(context);\n        if (result.approxDocIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator approxDISI = result.approxDocIdSet.iterator();\n        if (approxDISI == null) {\n          return null;\n        }\n        final DocIdSetIterator exactIterator;\n        if (result.exactDocIdSet != null) {\n          // If both sets are the same, there's nothing to verify; we needn't return a TwoPhaseIterator\n          if (result.approxDocIdSet == result.exactDocIdSet) {\n            return new ConstantScoreScorer(this, score(), approxDISI);\n          }\n          exactIterator = result.exactDocIdSet.iterator();\n          assert exactIterator != null;\n        } else {\n          exactIterator = null;\n        }\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approxDISI) {\n\n          final TwoPhaseIterator predFuncValues = predicateValueSource.iterator(context, approxDISI);\n\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approxDISI.docID();\n            if (exactIterator != null) {\n              if (exactIterator.docID() < doc) {\n                exactIterator.advance(doc);\n              }\n              if (exactIterator.docID() == doc) {\n                return true;\n              }\n            }\n            return predFuncValues.matches();\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO: use cost of exactIterator.advance() and predFuncValues.cost()\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n\n      @Override\n      public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n        return null; // TODO delegate to PredicateValueSource?\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Compute approx & exact\n        final IntersectsDifferentiatingQuery.IntersectsDifferentiatingVisitor result =\n            intersectsDiffQuery.compute(context);\n        if (result.approxDocIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator approxDISI = result.approxDocIdSet.iterator();\n        if (approxDISI == null) {\n          return null;\n        }\n        final DocIdSetIterator exactIterator;\n        if (result.exactDocIdSet != null) {\n          // If both sets are the same, there's nothing to verify; we needn't return a TwoPhaseIterator\n          if (result.approxDocIdSet == result.exactDocIdSet) {\n            return new ConstantScoreScorer(this, score(), approxDISI);\n          }\n          exactIterator = result.exactDocIdSet.iterator();\n          assert exactIterator != null;\n        } else {\n          exactIterator = null;\n        }\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approxDISI) {\n\n          final TwoPhaseIterator predFuncValues = predicateValueSource.iterator(context, approxDISI);\n\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approxDISI.docID();\n            if (exactIterator != null) {\n              if (exactIterator.docID() < doc) {\n                exactIterator.advance(doc);\n              }\n              if (exactIterator.docID() == doc) {\n                return true;\n              }\n            }\n            return predFuncValues.matches();\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO: use cost of exactIterator.advance() and predFuncValues.cost()\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da1460d7a5dea2658e7b8e4f6e632e53ade440ac","date":1510316270,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Compute approx & exact\n        final IntersectsDifferentiatingQuery.IntersectsDifferentiatingVisitor result =\n            intersectsDiffQuery.compute(context);\n        if (result.approxDocIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator approxDISI = result.approxDocIdSet.iterator();\n        if (approxDISI == null) {\n          return null;\n        }\n        final DocIdSetIterator exactIterator;\n        if (result.exactDocIdSet != null) {\n          // If both sets are the same, there's nothing to verify; we needn't return a TwoPhaseIterator\n          if (result.approxDocIdSet == result.exactDocIdSet) {\n            return new ConstantScoreScorer(this, score(), approxDISI);\n          }\n          exactIterator = result.exactDocIdSet.iterator();\n          assert exactIterator != null;\n        } else {\n          exactIterator = null;\n        }\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approxDISI) {\n\n          final TwoPhaseIterator predFuncValues = predicateValueSource.iterator(context, approxDISI);\n\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approxDISI.docID();\n            if (exactIterator != null) {\n              if (exactIterator.docID() < doc) {\n                exactIterator.advance(doc);\n              }\n              if (exactIterator.docID() == doc) {\n                return true;\n              }\n            }\n            return predFuncValues.matches();\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO: use cost of exactIterator.advance() and predFuncValues.cost()\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return predicateValueSource.isCacheable(ctx);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Compute approx & exact\n        final IntersectsDifferentiatingQuery.IntersectsDifferentiatingVisitor result =\n            intersectsDiffQuery.compute(context);\n        if (result.approxDocIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator approxDISI = result.approxDocIdSet.iterator();\n        if (approxDISI == null) {\n          return null;\n        }\n        final DocIdSetIterator exactIterator;\n        if (result.exactDocIdSet != null) {\n          // If both sets are the same, there's nothing to verify; we needn't return a TwoPhaseIterator\n          if (result.approxDocIdSet == result.exactDocIdSet) {\n            return new ConstantScoreScorer(this, score(), approxDISI);\n          }\n          exactIterator = result.exactDocIdSet.iterator();\n          assert exactIterator != null;\n        } else {\n          exactIterator = null;\n        }\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approxDISI) {\n\n          final TwoPhaseIterator predFuncValues = predicateValueSource.iterator(context, approxDISI);\n\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approxDISI.docID();\n            if (exactIterator != null) {\n              if (exactIterator.docID() < doc) {\n                exactIterator.advance(doc);\n              }\n              if (exactIterator.docID() == doc) {\n                return true;\n              }\n            }\n            return predFuncValues.matches();\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO: use cost of exactIterator.advance() and predFuncValues.cost()\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n\n      @Override\n      public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n        return null; // TODO delegate to PredicateValueSource?\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Compute approx & exact\n        final IntersectsDifferentiatingQuery.IntersectsDifferentiatingVisitor result =\n            intersectsDiffQuery.compute(context);\n        if (result.approxDocIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator approxDISI = result.approxDocIdSet.iterator();\n        if (approxDISI == null) {\n          return null;\n        }\n        final DocIdSetIterator exactIterator;\n        if (result.exactDocIdSet != null) {\n          // If both sets are the same, there's nothing to verify; we needn't return a TwoPhaseIterator\n          if (result.approxDocIdSet == result.exactDocIdSet) {\n            return new ConstantScoreScorer(this, score(), approxDISI);\n          }\n          exactIterator = result.exactDocIdSet.iterator();\n          assert exactIterator != null;\n        } else {\n          exactIterator = null;\n        }\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approxDISI) {\n\n          final TwoPhaseIterator predFuncValues = predicateValueSource.iterator(context, approxDISI);\n\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approxDISI.docID();\n            if (exactIterator != null) {\n              if (exactIterator.docID() < doc) {\n                exactIterator.advance(doc);\n              }\n              if (exactIterator.docID() == doc) {\n                return true;\n              }\n            }\n            return predFuncValues.matches();\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO: use cost of exactIterator.advance() and predFuncValues.cost()\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return predicateValueSource.isCacheable(ctx);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Compute approx & exact\n        final IntersectsDifferentiatingQuery.IntersectsDifferentiatingVisitor result =\n            intersectsDiffQuery.compute(context);\n        if (result.approxDocIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator approxDISI = result.approxDocIdSet.iterator();\n        if (approxDISI == null) {\n          return null;\n        }\n        final DocIdSetIterator exactIterator;\n        if (result.exactDocIdSet != null) {\n          // If both sets are the same, there's nothing to verify; we needn't return a TwoPhaseIterator\n          if (result.approxDocIdSet == result.exactDocIdSet) {\n            return new ConstantScoreScorer(this, score(), approxDISI);\n          }\n          exactIterator = result.exactDocIdSet.iterator();\n          assert exactIterator != null;\n        } else {\n          exactIterator = null;\n        }\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approxDISI) {\n\n          final TwoPhaseIterator predFuncValues = predicateValueSource.iterator(context, approxDISI);\n\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approxDISI.docID();\n            if (exactIterator != null) {\n              if (exactIterator.docID() < doc) {\n                exactIterator.advance(doc);\n              }\n              if (exactIterator.docID() == doc) {\n                return true;\n              }\n            }\n            return predFuncValues.matches();\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO: use cost of exactIterator.advance() and predFuncValues.cost()\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return predicateValueSource.isCacheable(ctx);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Compute approx & exact\n        final IntersectsDifferentiatingQuery.IntersectsDifferentiatingVisitor result =\n            intersectsDiffQuery.compute(context);\n        if (result.approxDocIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator approxDISI = result.approxDocIdSet.iterator();\n        if (approxDISI == null) {\n          return null;\n        }\n        final DocIdSetIterator exactIterator;\n        if (result.exactDocIdSet != null) {\n          // If both sets are the same, there's nothing to verify; we needn't return a TwoPhaseIterator\n          if (result.approxDocIdSet == result.exactDocIdSet) {\n            return new ConstantScoreScorer(this, score(), approxDISI);\n          }\n          exactIterator = result.exactDocIdSet.iterator();\n          assert exactIterator != null;\n        } else {\n          exactIterator = null;\n        }\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approxDISI) {\n\n          final TwoPhaseIterator predFuncValues = predicateValueSource.iterator(context, approxDISI);\n\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approxDISI.docID();\n            if (exactIterator != null) {\n              if (exactIterator.docID() < doc) {\n                exactIterator.advance(doc);\n              }\n              if (exactIterator.docID() == doc) {\n                return true;\n              }\n            }\n            return predFuncValues.matches();\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO: use cost of exactIterator.advance() and predFuncValues.cost()\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return predicateValueSource.isCacheable(ctx);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Compute approx & exact\n        final IntersectsDifferentiatingQuery.IntersectsDifferentiatingVisitor result =\n            intersectsDiffQuery.compute(context);\n        if (result.approxDocIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator approxDISI = result.approxDocIdSet.iterator();\n        if (approxDISI == null) {\n          return null;\n        }\n        final DocIdSetIterator exactIterator;\n        if (result.exactDocIdSet != null) {\n          // If both sets are the same, there's nothing to verify; we needn't return a TwoPhaseIterator\n          if (result.approxDocIdSet == result.exactDocIdSet) {\n            return new ConstantScoreScorer(this, score(), approxDISI);\n          }\n          exactIterator = result.exactDocIdSet.iterator();\n          assert exactIterator != null;\n        } else {\n          exactIterator = null;\n        }\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approxDISI) {\n\n          final TwoPhaseIterator predFuncValues = predicateValueSource.iterator(context, approxDISI);\n\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approxDISI.docID();\n            if (exactIterator != null) {\n              if (exactIterator.docID() < doc) {\n                exactIterator.advance(doc);\n              }\n              if (exactIterator.docID() == doc) {\n                return true;\n              }\n            }\n            return predFuncValues.matches();\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO: use cost of exactIterator.advance() and predFuncValues.cost()\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return predicateValueSource.isCacheable(ctx);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"706a7a3396c030cc66dda92a0492eb492131c4c0":["28288370235ed02234a64753cdbf0c6ec096304a"],"32b9119890a8e82252b6cc341ac491d18fa1e49b":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"da1460d7a5dea2658e7b8e4f6e632e53ade440ac":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["28288370235ed02234a64753cdbf0c6ec096304a","706a7a3396c030cc66dda92a0492eb492131c4c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac"],"28288370235ed02234a64753cdbf0c6ec096304a":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","32b9119890a8e82252b6cc341ac491d18fa1e49b"],"98f11c416d30e556e0004a9a84960702d12d35b1":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","32b9119890a8e82252b6cc341ac491d18fa1e49b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"706a7a3396c030cc66dda92a0492eb492131c4c0":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"32b9119890a8e82252b6cc341ac491d18fa1e49b":["28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"da1460d7a5dea2658e7b8e4f6e632e53ade440ac":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["32b9119890a8e82252b6cc341ac491d18fa1e49b","28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"28288370235ed02234a64753cdbf0c6ec096304a":["706a7a3396c030cc66dda92a0492eb492131c4c0","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"98f11c416d30e556e0004a9a84960702d12d35b1":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"417142ff08fda9cf0b72d5133e63097a166c6458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["98f11c416d30e556e0004a9a84960702d12d35b1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}