{"path":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","commits":[{"id":"4e9bbb27241bcf9645bb2f724c137537aa69918a","date":1287780008,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean).mjava","sourceNew":"  /**\n   * Overrides super class, by passing terms through analyzer.\n   * @exception ParseException\n   */\n  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the terms\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(part1));\n    CharTermAttribute termAtt = source.addAttribute(CharTermAttribute.class);\n    boolean multipleTokens = false;\n\n    // part1\n    try {\n      if (source.incrementToken()) {\n        part1 = termAtt.toString();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      // ignore\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part1\");\n    }\n\n    // part2\n    source = getAnalyzer().tokenStream(field, new StringReader(part2));\n    termAtt = source.addAttribute(CharTermAttribute.class);\n    \n    try {\n      if (source.incrementToken()) {\n        part2 = termAtt.toString();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      // ignore\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part2\");\n    }\n    return super.getRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  /**\n   * Overrides super class, by passing terms through analyzer.\n   * @exception ParseException\n   */\n  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the terms\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(part1));\n    CharTermAttribute termAtt = source.addAttribute(CharTermAttribute.class);\n    boolean multipleTokens = false;\n\n    // part1\n    try {\n      if (source.incrementToken()) {\n        part1 = termAtt.toString();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      // ignore\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part1\");\n    }\n\n    // part2\n    source = getAnalyzer().tokenStream(field, new StringReader(part2));\n    termAtt = source.addAttribute(CharTermAttribute.class);\n    \n    try {\n      if (source.incrementToken()) {\n        part2 = termAtt.toString();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      // ignore\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part2\");\n    }\n    return super.getRangeQuery(field, part1, part2, inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65e2e921993a78565715c17f099593272b4a92bd","date":1287833451,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Overrides super class, by passing terms through analyzer.\n   * @exception ParseException\n   */\n  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the terms\n    TokenStream source = null;\n    CharTermAttribute termAtt = null;\n    boolean multipleTokens = false;\n\n    if (part1 != null) {\n      // part1\n      try {\n        source = getAnalyzer().tokenStream(field, new StringReader(part1));\n        termAtt = source.addAttribute(CharTermAttribute.class);\n        multipleTokens = false;\n\n\n        if (source.incrementToken()) {\n          part1 = termAtt.toString();\n        }\n        multipleTokens = source.incrementToken();\n      } catch (IOException e) {\n        // ignore\n      }\n      try {\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n      if (multipleTokens) {\n        throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n            + \" - tokens were added to part1\");\n      }\n    }\n\n    if (part2 != null) {\n      // part2\n      source = getAnalyzer().tokenStream(field, new StringReader(part2));\n      termAtt = source.addAttribute(CharTermAttribute.class);\n\n      try {\n        if (source.incrementToken()) {\n          part2 = termAtt.toString();\n        }\n        multipleTokens = source.incrementToken();\n      } catch (IOException e) {\n        // ignore\n      }\n      try {\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n      if (multipleTokens) {\n        throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n            + \" - tokens were added to part2\");\n      }\n    }\n    return super.getRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  /**\n   * Overrides super class, by passing terms through analyzer.\n   * @exception ParseException\n   */\n  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the terms\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(part1));\n    CharTermAttribute termAtt = source.addAttribute(CharTermAttribute.class);\n    boolean multipleTokens = false;\n\n    // part1\n    try {\n      if (source.incrementToken()) {\n        part1 = termAtt.toString();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      // ignore\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part1\");\n    }\n\n    // part2\n    source = getAnalyzer().tokenStream(field, new StringReader(part2));\n    termAtt = source.addAttribute(CharTermAttribute.class);\n    \n    try {\n      if (source.incrementToken()) {\n        part2 = termAtt.toString();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      // ignore\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part2\");\n    }\n    return super.getRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b12d3e81e0f95a4527b5703953c503f71120ffcc","date":1288080933,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Overrides super class, by passing terms through analyzer.\n   * @exception ParseException\n   */\n  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the terms\n    TokenStream source = null;\n    CharTermAttribute termAtt = null;\n    boolean multipleTokens = false;\n\n    if (part1 != null) {\n      // part1\n      try {\n        source = getAnalyzer().tokenStream(field, new StringReader(part1));\n        termAtt = source.addAttribute(CharTermAttribute.class);\n        multipleTokens = false;\n\n\n        if (source.incrementToken()) {\n          part1 = termAtt.toString();\n        }\n        multipleTokens = source.incrementToken();\n      } catch (IOException e) {\n        // ignore\n      }\n      try {\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n      if (multipleTokens) {\n        throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n            + \" - tokens were added to part1\");\n      }\n    }\n\n    if (part2 != null) {\n      // part2\n      source = getAnalyzer().tokenStream(field, new StringReader(part2));\n      termAtt = source.addAttribute(CharTermAttribute.class);\n\n      try {\n        if (source.incrementToken()) {\n          part2 = termAtt.toString();\n        }\n        multipleTokens = source.incrementToken();\n      } catch (IOException e) {\n        // ignore\n      }\n      try {\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n      if (multipleTokens) {\n        throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n            + \" - tokens were added to part2\");\n      }\n    }\n    return super.getRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Overrides super class, by passing terms through analyzer.\n   * @exception ParseException\n   */\n  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the terms\n    TokenStream source = null;\n    CharTermAttribute termAtt = null;\n    boolean multipleTokens = false;\n\n    if (part1 != null) {\n      // part1\n      try {\n        source = getAnalyzer().tokenStream(field, new StringReader(part1));\n        termAtt = source.addAttribute(CharTermAttribute.class);\n        multipleTokens = false;\n\n\n        if (source.incrementToken()) {\n          part1 = termAtt.toString();\n        }\n        multipleTokens = source.incrementToken();\n      } catch (IOException e) {\n        // ignore\n      }\n      try {\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n      if (multipleTokens) {\n        throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n            + \" - tokens were added to part1\");\n      }\n    }\n\n    if (part2 != null) {\n      // part2\n      source = getAnalyzer().tokenStream(field, new StringReader(part2));\n      termAtt = source.addAttribute(CharTermAttribute.class);\n\n      try {\n        if (source.incrementToken()) {\n          part2 = termAtt.toString();\n        }\n        multipleTokens = source.incrementToken();\n      } catch (IOException e) {\n        // ignore\n      }\n      try {\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n      if (multipleTokens) {\n        throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n            + \" - tokens were added to part2\");\n      }\n    }\n    return super.getRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4","date":1305207152,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Overrides super class, by passing terms through analyzer.\n   * @exception ParseException\n   */\n  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the terms\n    TokenStream source = null;\n    CharTermAttribute termAtt = null;\n    boolean multipleTokens = false;\n\n    if (part1 != null) {\n      // part1\n      try {\n        source = getAnalyzer().tokenStream(field, new StringReader(part1));\n        termAtt = source.addAttribute(CharTermAttribute.class);\n        source.reset();\n        multipleTokens = false;\n\n\n        if (source.incrementToken()) {\n          part1 = termAtt.toString();\n        }\n        multipleTokens = source.incrementToken();\n      } catch (IOException e) {\n        // ignore\n      }\n      try {\n        source.end();\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n      if (multipleTokens) {\n        throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n            + \" - tokens were added to part1\");\n      }\n    }\n\n    if (part2 != null) {\n      // part2\n      source = getAnalyzer().tokenStream(field, new StringReader(part2));\n      termAtt = source.addAttribute(CharTermAttribute.class);\n\n      try {\n        source.reset();\n        if (source.incrementToken()) {\n          part2 = termAtt.toString();\n        }\n        multipleTokens = source.incrementToken();\n      } catch (IOException e) {\n        // ignore\n      }\n      try {\n        source.end();\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n      if (multipleTokens) {\n        throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n            + \" - tokens were added to part2\");\n      }\n    }\n    return super.getRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  /**\n   * Overrides super class, by passing terms through analyzer.\n   * @exception ParseException\n   */\n  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the terms\n    TokenStream source = null;\n    CharTermAttribute termAtt = null;\n    boolean multipleTokens = false;\n\n    if (part1 != null) {\n      // part1\n      try {\n        source = getAnalyzer().tokenStream(field, new StringReader(part1));\n        termAtt = source.addAttribute(CharTermAttribute.class);\n        multipleTokens = false;\n\n\n        if (source.incrementToken()) {\n          part1 = termAtt.toString();\n        }\n        multipleTokens = source.incrementToken();\n      } catch (IOException e) {\n        // ignore\n      }\n      try {\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n      if (multipleTokens) {\n        throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n            + \" - tokens were added to part1\");\n      }\n    }\n\n    if (part2 != null) {\n      // part2\n      source = getAnalyzer().tokenStream(field, new StringReader(part2));\n      termAtt = source.addAttribute(CharTermAttribute.class);\n\n      try {\n        if (source.incrementToken()) {\n          part2 = termAtt.toString();\n        }\n        multipleTokens = source.incrementToken();\n      } catch (IOException e) {\n        // ignore\n      }\n      try {\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n      if (multipleTokens) {\n        throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n            + \" - tokens were added to part2\");\n      }\n    }\n    return super.getRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Overrides super class, by passing terms through analyzer.\n   * @exception ParseException\n   */\n  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the terms\n    TokenStream source = null;\n    CharTermAttribute termAtt = null;\n    boolean multipleTokens = false;\n\n    if (part1 != null) {\n      // part1\n      try {\n        source = getAnalyzer().tokenStream(field, new StringReader(part1));\n        termAtt = source.addAttribute(CharTermAttribute.class);\n        source.reset();\n        multipleTokens = false;\n\n\n        if (source.incrementToken()) {\n          part1 = termAtt.toString();\n        }\n        multipleTokens = source.incrementToken();\n      } catch (IOException e) {\n        // ignore\n      }\n      try {\n        source.end();\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n      if (multipleTokens) {\n        throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n            + \" - tokens were added to part1\");\n      }\n    }\n\n    if (part2 != null) {\n      // part2\n      source = getAnalyzer().tokenStream(field, new StringReader(part2));\n      termAtt = source.addAttribute(CharTermAttribute.class);\n\n      try {\n        source.reset();\n        if (source.incrementToken()) {\n          part2 = termAtt.toString();\n        }\n        multipleTokens = source.incrementToken();\n      } catch (IOException e) {\n        // ignore\n      }\n      try {\n        source.end();\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n      if (multipleTokens) {\n        throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n            + \" - tokens were added to part2\");\n      }\n    }\n    return super.getRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  /**\n   * Overrides super class, by passing terms through analyzer.\n   * @exception ParseException\n   */\n  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the terms\n    TokenStream source = null;\n    CharTermAttribute termAtt = null;\n    boolean multipleTokens = false;\n\n    if (part1 != null) {\n      // part1\n      try {\n        source = getAnalyzer().tokenStream(field, new StringReader(part1));\n        termAtt = source.addAttribute(CharTermAttribute.class);\n        multipleTokens = false;\n\n\n        if (source.incrementToken()) {\n          part1 = termAtt.toString();\n        }\n        multipleTokens = source.incrementToken();\n      } catch (IOException e) {\n        // ignore\n      }\n      try {\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n      if (multipleTokens) {\n        throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n            + \" - tokens were added to part1\");\n      }\n    }\n\n    if (part2 != null) {\n      // part2\n      source = getAnalyzer().tokenStream(field, new StringReader(part2));\n      termAtt = source.addAttribute(CharTermAttribute.class);\n\n      try {\n        if (source.incrementToken()) {\n          part2 = termAtt.toString();\n        }\n        multipleTokens = source.incrementToken();\n      } catch (IOException e) {\n        // ignore\n      }\n      try {\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n      if (multipleTokens) {\n        throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n            + \" - tokens were added to part2\");\n      }\n    }\n    return super.getRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00746ad002a54281629e3b6f3eb39833a33f093e","date":1305306799,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Overrides super class, by passing terms through analyzer.\n   * @exception ParseException\n   */\n  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the terms\n    TokenStream source = null;\n    CharTermAttribute termAtt = null;\n    boolean multipleTokens = false;\n\n    if (part1 != null) {\n      // part1\n      try {\n        source = getAnalyzer().reusableTokenStream(field, new StringReader(part1));\n        termAtt = source.addAttribute(CharTermAttribute.class);\n        source.reset();\n        multipleTokens = false;\n\n\n        if (source.incrementToken()) {\n          part1 = termAtt.toString();\n        }\n        multipleTokens = source.incrementToken();\n      } catch (IOException e) {\n        // ignore\n      }\n      try {\n        source.end();\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n      if (multipleTokens) {\n        throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n            + \" - tokens were added to part1\");\n      }\n    }\n\n    if (part2 != null) {\n      try {\n        // part2\n        source = getAnalyzer().reusableTokenStream(field, new StringReader(part2));\n        termAtt = source.addAttribute(CharTermAttribute.class);\n        source.reset();\n        if (source.incrementToken()) {\n          part2 = termAtt.toString();\n        }\n        multipleTokens = source.incrementToken();\n      } catch (IOException e) {\n        // ignore\n      }\n      try {\n        source.end();\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n      if (multipleTokens) {\n        throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n            + \" - tokens were added to part2\");\n      }\n    }\n    return super.getRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  /**\n   * Overrides super class, by passing terms through analyzer.\n   * @exception ParseException\n   */\n  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the terms\n    TokenStream source = null;\n    CharTermAttribute termAtt = null;\n    boolean multipleTokens = false;\n\n    if (part1 != null) {\n      // part1\n      try {\n        source = getAnalyzer().tokenStream(field, new StringReader(part1));\n        termAtt = source.addAttribute(CharTermAttribute.class);\n        source.reset();\n        multipleTokens = false;\n\n\n        if (source.incrementToken()) {\n          part1 = termAtt.toString();\n        }\n        multipleTokens = source.incrementToken();\n      } catch (IOException e) {\n        // ignore\n      }\n      try {\n        source.end();\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n      if (multipleTokens) {\n        throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n            + \" - tokens were added to part1\");\n      }\n    }\n\n    if (part2 != null) {\n      // part2\n      source = getAnalyzer().tokenStream(field, new StringReader(part2));\n      termAtt = source.addAttribute(CharTermAttribute.class);\n\n      try {\n        source.reset();\n        if (source.incrementToken()) {\n          part2 = termAtt.toString();\n        }\n        multipleTokens = source.incrementToken();\n      } catch (IOException e) {\n        // ignore\n      }\n      try {\n        source.end();\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n      if (multipleTokens) {\n        throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n            + \" - tokens were added to part2\");\n      }\n    }\n    return super.getRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Overrides super class, by passing terms through analyzer.\n   * @exception ParseException\n   */\n  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the terms\n    TokenStream source = null;\n    CharTermAttribute termAtt = null;\n    boolean multipleTokens = false;\n\n    if (part1 != null) {\n      // part1\n      try {\n        source = getAnalyzer().reusableTokenStream(field, new StringReader(part1));\n        termAtt = source.addAttribute(CharTermAttribute.class);\n        source.reset();\n        multipleTokens = false;\n\n\n        if (source.incrementToken()) {\n          part1 = termAtt.toString();\n        }\n        multipleTokens = source.incrementToken();\n      } catch (IOException e) {\n        // ignore\n      }\n      try {\n        source.end();\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n      if (multipleTokens) {\n        throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n            + \" - tokens were added to part1\");\n      }\n    }\n\n    if (part2 != null) {\n      try {\n        // part2\n        source = getAnalyzer().reusableTokenStream(field, new StringReader(part2));\n        termAtt = source.addAttribute(CharTermAttribute.class);\n        source.reset();\n        if (source.incrementToken()) {\n          part2 = termAtt.toString();\n        }\n        multipleTokens = source.incrementToken();\n      } catch (IOException e) {\n        // ignore\n      }\n      try {\n        source.end();\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n      if (multipleTokens) {\n        throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n            + \" - tokens were added to part2\");\n      }\n    }\n    return super.getRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  /**\n   * Overrides super class, by passing terms through analyzer.\n   * @exception ParseException\n   */\n  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the terms\n    TokenStream source = null;\n    CharTermAttribute termAtt = null;\n    boolean multipleTokens = false;\n\n    if (part1 != null) {\n      // part1\n      try {\n        source = getAnalyzer().tokenStream(field, new StringReader(part1));\n        termAtt = source.addAttribute(CharTermAttribute.class);\n        source.reset();\n        multipleTokens = false;\n\n\n        if (source.incrementToken()) {\n          part1 = termAtt.toString();\n        }\n        multipleTokens = source.incrementToken();\n      } catch (IOException e) {\n        // ignore\n      }\n      try {\n        source.end();\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n      if (multipleTokens) {\n        throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n            + \" - tokens were added to part1\");\n      }\n    }\n\n    if (part2 != null) {\n      // part2\n      source = getAnalyzer().tokenStream(field, new StringReader(part2));\n      termAtt = source.addAttribute(CharTermAttribute.class);\n\n      try {\n        source.reset();\n        if (source.incrementToken()) {\n          part2 = termAtt.toString();\n        }\n        multipleTokens = source.incrementToken();\n      } catch (IOException e) {\n        // ignore\n      }\n      try {\n        source.end();\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n      if (multipleTokens) {\n        throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n            + \" - tokens were added to part2\");\n      }\n    }\n    return super.getRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Overrides super class, by passing terms through analyzer.\n   * @exception ParseException\n   */\n  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the terms\n    TokenStream source = null;\n    CharTermAttribute termAtt = null;\n    boolean multipleTokens = false;\n\n    if (part1 != null) {\n      // part1\n      try {\n        source = getAnalyzer().reusableTokenStream(field, new StringReader(part1));\n        termAtt = source.addAttribute(CharTermAttribute.class);\n        source.reset();\n        multipleTokens = false;\n\n\n        if (source.incrementToken()) {\n          part1 = termAtt.toString();\n        }\n        multipleTokens = source.incrementToken();\n      } catch (IOException e) {\n        // ignore\n      }\n      try {\n        source.end();\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n      if (multipleTokens) {\n        throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n            + \" - tokens were added to part1\");\n      }\n    }\n\n    if (part2 != null) {\n      try {\n        // part2\n        source = getAnalyzer().reusableTokenStream(field, new StringReader(part2));\n        termAtt = source.addAttribute(CharTermAttribute.class);\n        source.reset();\n        if (source.incrementToken()) {\n          part2 = termAtt.toString();\n        }\n        multipleTokens = source.incrementToken();\n      } catch (IOException e) {\n        // ignore\n      }\n      try {\n        source.end();\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n      if (multipleTokens) {\n        throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n            + \" - tokens were added to part2\");\n      }\n    }\n    return super.getRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  /**\n   * Overrides super class, by passing terms through analyzer.\n   * @exception ParseException\n   */\n  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the terms\n    TokenStream source = null;\n    CharTermAttribute termAtt = null;\n    boolean multipleTokens = false;\n\n    if (part1 != null) {\n      // part1\n      try {\n        source = getAnalyzer().tokenStream(field, new StringReader(part1));\n        termAtt = source.addAttribute(CharTermAttribute.class);\n        multipleTokens = false;\n\n\n        if (source.incrementToken()) {\n          part1 = termAtt.toString();\n        }\n        multipleTokens = source.incrementToken();\n      } catch (IOException e) {\n        // ignore\n      }\n      try {\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n      if (multipleTokens) {\n        throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n            + \" - tokens were added to part1\");\n      }\n    }\n\n    if (part2 != null) {\n      // part2\n      source = getAnalyzer().tokenStream(field, new StringReader(part2));\n      termAtt = source.addAttribute(CharTermAttribute.class);\n\n      try {\n        if (source.incrementToken()) {\n          part2 = termAtt.toString();\n        }\n        multipleTokens = source.incrementToken();\n      } catch (IOException e) {\n        // ignore\n      }\n      try {\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n      if (multipleTokens) {\n        throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n            + \" - tokens were added to part2\");\n      }\n    }\n    return super.getRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a53a291ad9b1cc050d846b68758c061a55d52734","date":1310437344,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Overrides super class, by passing terms through analyzer.\n   * @exception ParseException\n   */\n  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the terms\n    TokenStream source = null;\n    CharTermAttribute termAtt = null;\n    boolean multipleTokens = false;\n\n    if (part1 != null) {\n      // part1\n      try {\n        source = getAnalyzer().reusableTokenStream(field, new StringReader(part1));\n        termAtt = source.addAttribute(CharTermAttribute.class);\n        source.reset();\n        multipleTokens = false;\n\n\n        if (source.incrementToken()) {\n          part1 = termAtt.toString();\n        }\n        multipleTokens = source.incrementToken();\n      } catch (IOException e) {\n        // ignore\n      }\n      try {\n        source.end();\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n      if (multipleTokens) {\n        throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n            + \" - tokens were added to part1\");\n      }\n    }\n\n    if (part2 != null) {\n      try {\n        // part2\n        source = getAnalyzer().reusableTokenStream(field, new StringReader(part2));\n        termAtt = source.addAttribute(CharTermAttribute.class);\n        source.reset();\n        if (source.incrementToken()) {\n          part2 = termAtt.toString();\n        }\n        multipleTokens = source.incrementToken();\n      } catch (IOException e) {\n        // ignore\n      }\n      try {\n        source.end();\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n      if (multipleTokens) {\n        throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n            + \" - tokens were added to part2\");\n      }\n    }\n    return super.getRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  /**\n   * Overrides super class, by passing terms through analyzer.\n   * @exception ParseException\n   */\n  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the terms\n    TokenStream source = null;\n    CharTermAttribute termAtt = null;\n    boolean multipleTokens = false;\n\n    if (part1 != null) {\n      // part1\n      try {\n        source = getAnalyzer().reusableTokenStream(field, new StringReader(part1));\n        termAtt = source.addAttribute(CharTermAttribute.class);\n        source.reset();\n        multipleTokens = false;\n\n\n        if (source.incrementToken()) {\n          part1 = termAtt.toString();\n        }\n        multipleTokens = source.incrementToken();\n      } catch (IOException e) {\n        // ignore\n      }\n      try {\n        source.end();\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n      if (multipleTokens) {\n        throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n            + \" - tokens were added to part1\");\n      }\n    }\n\n    if (part2 != null) {\n      try {\n        // part2\n        source = getAnalyzer().reusableTokenStream(field, new StringReader(part2));\n        termAtt = source.addAttribute(CharTermAttribute.class);\n        source.reset();\n        if (source.incrementToken()) {\n          part2 = termAtt.toString();\n        }\n        multipleTokens = source.incrementToken();\n      } catch (IOException e) {\n        // ignore\n      }\n      try {\n        source.end();\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n      if (multipleTokens) {\n        throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n            + \" - tokens were added to part2\");\n      }\n    }\n    return super.getRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c3a8a449466c1ff7ce2274fe73dab487256964b4":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb","00746ad002a54281629e3b6f3eb39833a33f093e"],"e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4":["65e2e921993a78565715c17f099593272b4a92bd"],"4e9bbb27241bcf9645bb2f724c137537aa69918a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a3776dccca01c11e7046323cfad46a3b4a471233":["65e2e921993a78565715c17f099593272b4a92bd","00746ad002a54281629e3b6f3eb39833a33f093e"],"65e2e921993a78565715c17f099593272b4a92bd":["4e9bbb27241bcf9645bb2f724c137537aa69918a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","65e2e921993a78565715c17f099593272b4a92bd"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["b12d3e81e0f95a4527b5703953c503f71120ffcc","e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","65e2e921993a78565715c17f099593272b4a92bd"],"00746ad002a54281629e3b6f3eb39833a33f093e":["e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4"],"a53a291ad9b1cc050d846b68758c061a55d52734":["00746ad002a54281629e3b6f3eb39833a33f093e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a53a291ad9b1cc050d846b68758c061a55d52734"]},"commit2Childs":{"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb","00746ad002a54281629e3b6f3eb39833a33f093e"],"4e9bbb27241bcf9645bb2f724c137537aa69918a":["65e2e921993a78565715c17f099593272b4a92bd"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"65e2e921993a78565715c17f099593272b4a92bd":["e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4","a3776dccca01c11e7046323cfad46a3b4a471233","b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e9bbb27241bcf9645bb2f724c137537aa69918a","b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"00746ad002a54281629e3b6f3eb39833a33f093e":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","a53a291ad9b1cc050d846b68758c061a55d52734"],"a53a291ad9b1cc050d846b68758c061a55d52734":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}