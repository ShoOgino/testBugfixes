{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#initTransition(int,Transition).mjava","commits":[{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#initTransition(int,Transition).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/LightAutomaton#initTransition(int,Transition).mjava","sourceNew":"  /** Initialize the provided Transition to iterate through all transitions\n   *  leaving the specified state.  You must call {@link #getNextTransition} to\n   *  get each transition.  Returns the number of transitions\n   *  leaving this state. */\n  public int initTransition(int state, Transition t) {\n    assert state < nextState/2: \"state=\" + state + \" nextState=\" + nextState;\n    t.source = state;\n    t.transitionUpto = states[2*state];\n    return getNumTransitions(state);\n  }\n\n","sourceOld":"  /** Initialize the provided Transition to iterate through all transitions\n   *  leaving the specified state.  You must call {@link #getNextTransition} to\n   *  get each transition.  Returns the number of transitions\n   *  leaving this state. */\n  public int initTransition(int state, Transition t) {\n    assert state < nextState/2: \"state=\" + state + \" nextState=\" + nextState;\n    t.source = state;\n    t.transitionUpto = states[2*state];\n    return getNumTransitions(state);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#initTransition(int,Transition).mjava","pathOld":"/dev/null","sourceNew":"  /** Initialize the provided Transition to iterate through all transitions\n   *  leaving the specified state.  You must call {@link #getNextTransition} to\n   *  get each transition.  Returns the number of transitions\n   *  leaving this state. */\n  public int initTransition(int state, Transition t) {\n    assert state < nextState/2: \"state=\" + state + \" nextState=\" + nextState;\n    t.source = state;\n    t.transitionUpto = states[2*state];\n    return getNumTransitions(state);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5c84485629d80d203608e8975a1139de9933cc38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","5c84485629d80d203608e8975a1139de9933cc38"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}