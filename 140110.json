{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsEnum#nextDoc().mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsEnum#nextDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      if (docID == NO_MORE_DOCS) {\n        return docID;\n      }\n      boolean first = true;\n      int termFreq = 0;\n      while(true) {\n        final long lineStart = in.getFilePointer();\n        SimpleTextUtil.readLine(in, scratch);\n        if (StringHelper.startsWith(scratch, DOC)) {\n          if (!first && (liveDocs == null || liveDocs.get(docID))) {\n            in.seek(lineStart);\n            if (!omitTF) {\n              tf = termFreq;\n            }\n            return docID;\n          }\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          termFreq = 0;\n          first = false;\n        } else if (StringHelper.startsWith(scratch, FREQ)) {\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+FREQ.length, scratch.length-FREQ.length, scratchUTF16);\n          termFreq = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n        } else if (StringHelper.startsWith(scratch, POS)) {\n          // skip termFreq++;\n        } else if (StringHelper.startsWith(scratch, START_OFFSET)) {\n          // skip\n        } else if (StringHelper.startsWith(scratch, END_OFFSET)) {\n          // skip\n        } else if (StringHelper.startsWith(scratch, PAYLOAD)) {\n          // skip\n        } else {\n          assert StringHelper.startsWith(scratch, TERM) || StringHelper.startsWith(scratch, FIELD) || StringHelper.startsWith(scratch, END): \"scratch=\" + scratch.utf8ToString();\n          if (!first && (liveDocs == null || liveDocs.get(docID))) {\n            in.seek(lineStart);\n            if (!omitTF) {\n              tf = termFreq;\n            }\n            return docID;\n          }\n          return docID = NO_MORE_DOCS;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      if (docID == NO_MORE_DOCS) {\n        return docID;\n      }\n      boolean first = true;\n      int termFreq = 0;\n      while(true) {\n        final long lineStart = in.getFilePointer();\n        SimpleTextUtil.readLine(in, scratch);\n        if (StringHelper.startsWith(scratch, DOC)) {\n          if (!first && (liveDocs == null || liveDocs.get(docID))) {\n            in.seek(lineStart);\n            if (!omitTF) {\n              tf = termFreq;\n            }\n            return docID;\n          }\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          termFreq = 0;\n          first = false;\n        } else if (StringHelper.startsWith(scratch, FREQ)) {\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+FREQ.length, scratch.length-FREQ.length, scratchUTF16);\n          termFreq = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n        } else if (StringHelper.startsWith(scratch, POS)) {\n          // skip termFreq++;\n        } else if (StringHelper.startsWith(scratch, START_OFFSET)) {\n          // skip\n        } else if (StringHelper.startsWith(scratch, END_OFFSET)) {\n          // skip\n        } else if (StringHelper.startsWith(scratch, PAYLOAD)) {\n          // skip\n        } else {\n          assert StringHelper.startsWith(scratch, TERM) || StringHelper.startsWith(scratch, FIELD) || StringHelper.startsWith(scratch, END): \"scratch=\" + scratch.utf8ToString();\n          if (!first && (liveDocs == null || liveDocs.get(docID))) {\n            in.seek(lineStart);\n            if (!omitTF) {\n              tf = termFreq;\n            }\n            return docID;\n          }\n          return docID = NO_MORE_DOCS;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsEnum#nextDoc().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      if (docID == NO_MORE_DOCS) {\n        return docID;\n      }\n      boolean first = true;\n      int termFreq = 0;\n      while(true) {\n        final long lineStart = in.getFilePointer();\n        SimpleTextUtil.readLine(in, scratch);\n        if (StringHelper.startsWith(scratch.get(), DOC)) {\n          if (!first && (liveDocs == null || liveDocs.get(docID))) {\n            in.seek(lineStart);\n            if (!omitTF) {\n              tf = termFreq;\n            }\n            return docID;\n          }\n          scratchUTF16.copyUTF8Bytes(scratch.bytes(), DOC.length, scratch.length()-DOC.length);\n          docID = ArrayUtil.parseInt(scratchUTF16.chars(), 0, scratchUTF16.length());\n          termFreq = 0;\n          first = false;\n        } else if (StringHelper.startsWith(scratch.get(), FREQ)) {\n          scratchUTF16.copyUTF8Bytes(scratch.bytes(), FREQ.length, scratch.length()-FREQ.length);\n          termFreq = ArrayUtil.parseInt(scratchUTF16.chars(), 0, scratchUTF16.length());\n        } else if (StringHelper.startsWith(scratch.get(), POS)) {\n          // skip termFreq++;\n        } else if (StringHelper.startsWith(scratch.get(), START_OFFSET)) {\n          // skip\n        } else if (StringHelper.startsWith(scratch.get(), END_OFFSET)) {\n          // skip\n        } else if (StringHelper.startsWith(scratch.get(), PAYLOAD)) {\n          // skip\n        } else {\n          assert StringHelper.startsWith(scratch.get(), TERM) || StringHelper.startsWith(scratch.get(), FIELD) || StringHelper.startsWith(scratch.get(), END): \"scratch=\" + scratch.get().utf8ToString();\n          if (!first && (liveDocs == null || liveDocs.get(docID))) {\n            in.seek(lineStart);\n            if (!omitTF) {\n              tf = termFreq;\n            }\n            return docID;\n          }\n          return docID = NO_MORE_DOCS;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      if (docID == NO_MORE_DOCS) {\n        return docID;\n      }\n      boolean first = true;\n      int termFreq = 0;\n      while(true) {\n        final long lineStart = in.getFilePointer();\n        SimpleTextUtil.readLine(in, scratch);\n        if (StringHelper.startsWith(scratch, DOC)) {\n          if (!first && (liveDocs == null || liveDocs.get(docID))) {\n            in.seek(lineStart);\n            if (!omitTF) {\n              tf = termFreq;\n            }\n            return docID;\n          }\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          termFreq = 0;\n          first = false;\n        } else if (StringHelper.startsWith(scratch, FREQ)) {\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+FREQ.length, scratch.length-FREQ.length, scratchUTF16);\n          termFreq = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n        } else if (StringHelper.startsWith(scratch, POS)) {\n          // skip termFreq++;\n        } else if (StringHelper.startsWith(scratch, START_OFFSET)) {\n          // skip\n        } else if (StringHelper.startsWith(scratch, END_OFFSET)) {\n          // skip\n        } else if (StringHelper.startsWith(scratch, PAYLOAD)) {\n          // skip\n        } else {\n          assert StringHelper.startsWith(scratch, TERM) || StringHelper.startsWith(scratch, FIELD) || StringHelper.startsWith(scratch, END): \"scratch=\" + scratch.utf8ToString();\n          if (!first && (liveDocs == null || liveDocs.get(docID))) {\n            in.seek(lineStart);\n            if (!omitTF) {\n              tf = termFreq;\n            }\n            return docID;\n          }\n          return docID = NO_MORE_DOCS;\n        }\n      }\n    }\n\n","bugFix":["2afd23a6f1242190c3409d8d81d5c5912d607fc9","61f30939a6ca0891c7b0c0f34aa43800bd4c9a15","73ba365ae82cd3711e98f656f96eb9e811606c53","31f025ae60076ae95274433f3fe8e6ace2857a87","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsEnum#nextDoc().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      if (docID == NO_MORE_DOCS) {\n        return docID;\n      }\n      boolean first = true;\n      int termFreq = 0;\n      while(true) {\n        final long lineStart = in.getFilePointer();\n        SimpleTextUtil.readLine(in, scratch);\n        if (StringHelper.startsWith(scratch.get(), DOC)) {\n          if (!first) {\n            in.seek(lineStart);\n            if (!omitTF) {\n              tf = termFreq;\n            }\n            return docID;\n          }\n          scratchUTF16.copyUTF8Bytes(scratch.bytes(), DOC.length, scratch.length()-DOC.length);\n          docID = ArrayUtil.parseInt(scratchUTF16.chars(), 0, scratchUTF16.length());\n          termFreq = 0;\n          first = false;\n        } else if (StringHelper.startsWith(scratch.get(), FREQ)) {\n          scratchUTF16.copyUTF8Bytes(scratch.bytes(), FREQ.length, scratch.length()-FREQ.length);\n          termFreq = ArrayUtil.parseInt(scratchUTF16.chars(), 0, scratchUTF16.length());\n        } else if (StringHelper.startsWith(scratch.get(), POS)) {\n          // skip termFreq++;\n        } else if (StringHelper.startsWith(scratch.get(), START_OFFSET)) {\n          // skip\n        } else if (StringHelper.startsWith(scratch.get(), END_OFFSET)) {\n          // skip\n        } else if (StringHelper.startsWith(scratch.get(), PAYLOAD)) {\n          // skip\n        } else {\n          assert StringHelper.startsWith(scratch.get(), TERM) || StringHelper.startsWith(scratch.get(), FIELD) || StringHelper.startsWith(scratch.get(), END): \"scratch=\" + scratch.get().utf8ToString();\n          if (!first) {\n            in.seek(lineStart);\n            if (!omitTF) {\n              tf = termFreq;\n            }\n            return docID;\n          }\n          return docID = NO_MORE_DOCS;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      if (docID == NO_MORE_DOCS) {\n        return docID;\n      }\n      boolean first = true;\n      int termFreq = 0;\n      while(true) {\n        final long lineStart = in.getFilePointer();\n        SimpleTextUtil.readLine(in, scratch);\n        if (StringHelper.startsWith(scratch.get(), DOC)) {\n          if (!first && (liveDocs == null || liveDocs.get(docID))) {\n            in.seek(lineStart);\n            if (!omitTF) {\n              tf = termFreq;\n            }\n            return docID;\n          }\n          scratchUTF16.copyUTF8Bytes(scratch.bytes(), DOC.length, scratch.length()-DOC.length);\n          docID = ArrayUtil.parseInt(scratchUTF16.chars(), 0, scratchUTF16.length());\n          termFreq = 0;\n          first = false;\n        } else if (StringHelper.startsWith(scratch.get(), FREQ)) {\n          scratchUTF16.copyUTF8Bytes(scratch.bytes(), FREQ.length, scratch.length()-FREQ.length);\n          termFreq = ArrayUtil.parseInt(scratchUTF16.chars(), 0, scratchUTF16.length());\n        } else if (StringHelper.startsWith(scratch.get(), POS)) {\n          // skip termFreq++;\n        } else if (StringHelper.startsWith(scratch.get(), START_OFFSET)) {\n          // skip\n        } else if (StringHelper.startsWith(scratch.get(), END_OFFSET)) {\n          // skip\n        } else if (StringHelper.startsWith(scratch.get(), PAYLOAD)) {\n          // skip\n        } else {\n          assert StringHelper.startsWith(scratch.get(), TERM) || StringHelper.startsWith(scratch.get(), FIELD) || StringHelper.startsWith(scratch.get(), END): \"scratch=\" + scratch.get().utf8ToString();\n          if (!first && (liveDocs == null || liveDocs.get(docID))) {\n            in.seek(lineStart);\n            if (!omitTF) {\n              tf = termFreq;\n            }\n            return docID;\n          }\n          return docID = NO_MORE_DOCS;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4464508ee83288c8c4585b533f9faaa93aa314"]},"commit2Childs":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}