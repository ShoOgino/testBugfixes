{"path":"solr/core/src/test/org/apache/solr/util/hll/SparseHLLTest#unionTest().mjava","commits":[{"id":"6faa211c4af605e3cf078a76d200c1dc348973f5","date":1437043657,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/hll/SparseHLLTest#unionTest().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Tests {@link HLL#union(HLL)}.\n     */\n    @Test\n    public void unionTest() {\n        final int log2m = 11/*arbitrary*/;\n        final int sparseThreshold = 256/*arbitrary*/;\n\n        { // two empty multisets should union to an empty set\n            final HLL hllA = new HLL(log2m, 5/*regwidth*/, 128/*explicitThreshold, arbitrary, unused*/, sparseThreshold, HLLType.SPARSE);\n            final HLL hllB = new HLL(log2m, 5/*regwidth*/, 128/*explicitThreshold, arbitrary, unused*/, sparseThreshold, HLLType.SPARSE);\n\n            hllA.union(hllB);\n\n            assertEquals(hllA.getType(), HLLType.SPARSE/*unchanged*/);\n            assertEquals(hllA.cardinality(), 0L);\n        }\n        { // two disjoint multisets should union properly\n            final HLL hllA = new HLL(log2m, 5/*regwidth*/, 128/*explicitThreshold, arbitrary, unused*/, sparseThreshold, HLLType.SPARSE);\n            hllA.addRaw(ProbabilisticTestUtil.constructHLLValue(log2m, 1, 1));\n            final HLL hllB = new HLL(log2m, 5/*regwidth*/, 128/*explicitThreshold, arbitrary, unused*/, sparseThreshold, HLLType.SPARSE);\n            hllB.addRaw(ProbabilisticTestUtil.constructHLLValue(log2m, 2, 1));\n\n\n            hllA.union(hllB);\n\n            assertEquals(hllA.getType(), HLLType.SPARSE/*unchanged*/);\n            assertEquals(hllA.cardinality(), 3L/*precomputed*/);\n            assertRegisterPresent(hllA, 1, (byte)1);\n            assertRegisterPresent(hllA, 2, (byte)1);\n        }\n        { // two exactly overlapping multisets should union properly\n            final HLL hllA = new HLL(log2m, 5/*regwidth*/, 128/*explicitThreshold, arbitrary, unused*/, sparseThreshold, HLLType.SPARSE);\n            hllA.addRaw(ProbabilisticTestUtil.constructHLLValue(log2m, 1, 10));\n            final HLL hllB = new HLL(log2m, 5/*regwidth*/, 128/*explicitThreshold, arbitrary, unused*/, sparseThreshold, HLLType.SPARSE);\n            hllB.addRaw(ProbabilisticTestUtil.constructHLLValue(log2m, 1, 13));\n\n            hllA.union(hllB);\n\n            assertEquals(hllA.getType(), HLLType.SPARSE/*unchanged*/);\n            assertEquals(hllA.cardinality(), 2L/*precomputed*/);\n            assertOneRegisterSet(hllA, 1, (byte)13/*max(10,13)*/);\n        }\n        { // overlapping multisets should union properly\n            final HLL hllA = new HLL(log2m, 5/*regwidth*/, 128/*explicitThreshold, arbitrary, unused*/, sparseThreshold, HLLType.SPARSE);\n            final HLL hllB = new HLL(log2m, 5/*regwidth*/, 128/*explicitThreshold, arbitrary, unused*/, sparseThreshold, HLLType.SPARSE);\n            // register index = 3\n            final long rawValueA = ProbabilisticTestUtil.constructHLLValue(log2m, 3, 11);\n\n            // register index = 4\n            final long rawValueB = ProbabilisticTestUtil.constructHLLValue(log2m, 4, 13);\n            final long rawValueBPrime = ProbabilisticTestUtil.constructHLLValue(log2m, 4, 21);\n\n            // register index = 5\n            final long rawValueC = ProbabilisticTestUtil.constructHLLValue(log2m, 5, 14);\n\n            hllA.addRaw(rawValueA);\n            hllA.addRaw(rawValueB);\n\n            hllB.addRaw(rawValueBPrime);\n            hllB.addRaw(rawValueC);\n\n            hllA.union(hllB);\n            // union should have three registers set, with partition B set to the\n            // max of the two registers\n            assertRegisterPresent(hllA, 3, (byte)11);\n            assertRegisterPresent(hllA, 4, (byte)21/*max(21,13)*/);\n            assertRegisterPresent(hllA, 5, (byte)14);\n        }\n        { // too-large unions should promote\n            final HLL hllA = new HLL(log2m, 5/*regwidth*/, 128/*explicitThreshold, arbitrary, unused*/, sparseThreshold, HLLType.SPARSE);\n            final HLL hllB = new HLL(log2m, 5/*regwidth*/, 128/*explicitThreshold, arbitrary, unused*/, sparseThreshold, HLLType.SPARSE);\n\n            // fill up sets to maxCapacity\n            for(int i=0; i<sparseThreshold; i++) {\n                hllA.addRaw(ProbabilisticTestUtil.constructHLLValue(log2m, i, 1));\n                hllB.addRaw(ProbabilisticTestUtil.constructHLLValue(log2m, (i + sparseThreshold)/*non-overlapping*/, 1));\n            }\n\n            hllA.union(hllB);\n\n            assertEquals(hllA.getType(), HLLType.FULL);\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b5ee4c66244bdfcc4796a114519d47701b2c026","date":1437132013,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/hll/SparseHLLTest#unionTest().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Tests {@link HLL#union(HLL)}.\n     */\n    @Test\n    public void unionTest() {\n        final int log2m = 11/*arbitrary*/;\n        final int sparseThreshold = 256/*arbitrary*/;\n\n        { // two empty multisets should union to an empty set\n            final HLL hllA = new HLL(log2m, 5/*regwidth*/, 128/*explicitThreshold, arbitrary, unused*/, sparseThreshold, HLLType.SPARSE);\n            final HLL hllB = new HLL(log2m, 5/*regwidth*/, 128/*explicitThreshold, arbitrary, unused*/, sparseThreshold, HLLType.SPARSE);\n\n            hllA.union(hllB);\n\n            assertEquals(hllA.getType(), HLLType.SPARSE/*unchanged*/);\n            assertEquals(hllA.cardinality(), 0L);\n        }\n        { // two disjoint multisets should union properly\n            final HLL hllA = new HLL(log2m, 5/*regwidth*/, 128/*explicitThreshold, arbitrary, unused*/, sparseThreshold, HLLType.SPARSE);\n            hllA.addRaw(ProbabilisticTestUtil.constructHLLValue(log2m, 1, 1));\n            final HLL hllB = new HLL(log2m, 5/*regwidth*/, 128/*explicitThreshold, arbitrary, unused*/, sparseThreshold, HLLType.SPARSE);\n            hllB.addRaw(ProbabilisticTestUtil.constructHLLValue(log2m, 2, 1));\n\n\n            hllA.union(hllB);\n\n            assertEquals(hllA.getType(), HLLType.SPARSE/*unchanged*/);\n            assertEquals(hllA.cardinality(), 3L/*precomputed*/);\n            assertRegisterPresent(hllA, 1, (byte)1);\n            assertRegisterPresent(hllA, 2, (byte)1);\n        }\n        { // two exactly overlapping multisets should union properly\n            final HLL hllA = new HLL(log2m, 5/*regwidth*/, 128/*explicitThreshold, arbitrary, unused*/, sparseThreshold, HLLType.SPARSE);\n            hllA.addRaw(ProbabilisticTestUtil.constructHLLValue(log2m, 1, 10));\n            final HLL hllB = new HLL(log2m, 5/*regwidth*/, 128/*explicitThreshold, arbitrary, unused*/, sparseThreshold, HLLType.SPARSE);\n            hllB.addRaw(ProbabilisticTestUtil.constructHLLValue(log2m, 1, 13));\n\n            hllA.union(hllB);\n\n            assertEquals(hllA.getType(), HLLType.SPARSE/*unchanged*/);\n            assertEquals(hllA.cardinality(), 2L/*precomputed*/);\n            assertOneRegisterSet(hllA, 1, (byte)13/*max(10,13)*/);\n        }\n        { // overlapping multisets should union properly\n            final HLL hllA = new HLL(log2m, 5/*regwidth*/, 128/*explicitThreshold, arbitrary, unused*/, sparseThreshold, HLLType.SPARSE);\n            final HLL hllB = new HLL(log2m, 5/*regwidth*/, 128/*explicitThreshold, arbitrary, unused*/, sparseThreshold, HLLType.SPARSE);\n            // register index = 3\n            final long rawValueA = ProbabilisticTestUtil.constructHLLValue(log2m, 3, 11);\n\n            // register index = 4\n            final long rawValueB = ProbabilisticTestUtil.constructHLLValue(log2m, 4, 13);\n            final long rawValueBPrime = ProbabilisticTestUtil.constructHLLValue(log2m, 4, 21);\n\n            // register index = 5\n            final long rawValueC = ProbabilisticTestUtil.constructHLLValue(log2m, 5, 14);\n\n            hllA.addRaw(rawValueA);\n            hllA.addRaw(rawValueB);\n\n            hllB.addRaw(rawValueBPrime);\n            hllB.addRaw(rawValueC);\n\n            hllA.union(hllB);\n            // union should have three registers set, with partition B set to the\n            // max of the two registers\n            assertRegisterPresent(hllA, 3, (byte)11);\n            assertRegisterPresent(hllA, 4, (byte)21/*max(21,13)*/);\n            assertRegisterPresent(hllA, 5, (byte)14);\n        }\n        { // too-large unions should promote\n            final HLL hllA = new HLL(log2m, 5/*regwidth*/, 128/*explicitThreshold, arbitrary, unused*/, sparseThreshold, HLLType.SPARSE);\n            final HLL hllB = new HLL(log2m, 5/*regwidth*/, 128/*explicitThreshold, arbitrary, unused*/, sparseThreshold, HLLType.SPARSE);\n\n            // fill up sets to maxCapacity\n            for(int i=0; i<sparseThreshold; i++) {\n                hllA.addRaw(ProbabilisticTestUtil.constructHLLValue(log2m, i, 1));\n                hllB.addRaw(ProbabilisticTestUtil.constructHLLValue(log2m, (i + sparseThreshold)/*non-overlapping*/, 1));\n            }\n\n            hllA.union(hllB);\n\n            assertEquals(hllA.getType(), HLLType.FULL);\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6faa211c4af605e3cf078a76d200c1dc348973f5"],"6faa211c4af605e3cf078a76d200c1dc348973f5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b5ee4c66244bdfcc4796a114519d47701b2c026"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b5ee4c66244bdfcc4796a114519d47701b2c026","6faa211c4af605e3cf078a76d200c1dc348973f5"],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6faa211c4af605e3cf078a76d200c1dc348973f5":["3b5ee4c66244bdfcc4796a114519d47701b2c026"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}