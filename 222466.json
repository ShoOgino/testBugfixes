{"path":"lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsReader.TVTermsEnum#next().mjava","commits":[{"id":"5013b6ff92e8f7f62cd228936ce019f8819b092b","date":1326844034,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsReader.TVTermsEnum#next().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public BytesRef next() throws IOException {\n      if (nextTerm >= numTerms) {\n        return null;\n      }\n      term.copyBytes(lastTerm);\n      final int start = tvf.readVInt();\n      final int deltaLen = tvf.readVInt();\n      term.length = start + deltaLen;\n      term.grow(term.length);\n      tvf.readBytes(term.bytes, start, deltaLen);\n      freq = tvf.readVInt();\n\n      if (storePositions) {\n        // TODO: we could maybe reuse last array, if we can\n        // somehow be careful about consumer never using two\n        // D&PEnums at once...\n        positions = new int[freq];\n        int pos = 0;\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          pos += tvf.readVInt();\n          positions[posUpto] = pos;\n        }\n      }\n\n      if (storeOffsets) {\n        startOffsets = new int[freq];\n        endOffsets = new int[freq];\n        int offset = 0;\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          startOffsets[posUpto] = offset + tvf.readVInt();\n          offset = endOffsets[posUpto] = startOffsets[posUpto] + tvf.readVInt();\n        }\n      }\n\n      lastTerm.copyBytes(term);\n      nextTerm++;\n      return term;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"426bf91d9f9500f9c52dbdc111f6c1762cf54e20","date":1326909425,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsReader.TVTermsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsReader.TVTermsEnum#next().mjava","sourceNew":"    @Override\n    public BytesRef next() throws IOException {\n      if (++currentTerm >= numTerms) {\n        return null;\n      }\n      return term();\n    }\n\n","sourceOld":"    @Override\n    public BytesRef next() throws IOException {\n      if (nextTerm >= numTerms) {\n        return null;\n      }\n      term.copyBytes(lastTerm);\n      final int start = tvf.readVInt();\n      final int deltaLen = tvf.readVInt();\n      term.length = start + deltaLen;\n      term.grow(term.length);\n      tvf.readBytes(term.bytes, start, deltaLen);\n      freq = tvf.readVInt();\n\n      if (storePositions) {\n        // TODO: we could maybe reuse last array, if we can\n        // somehow be careful about consumer never using two\n        // D&PEnums at once...\n        positions = new int[freq];\n        int pos = 0;\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          pos += tvf.readVInt();\n          positions[posUpto] = pos;\n        }\n      }\n\n      if (storeOffsets) {\n        startOffsets = new int[freq];\n        endOffsets = new int[freq];\n        int offset = 0;\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          startOffsets[posUpto] = offset + tvf.readVInt();\n          offset = endOffsets[posUpto] = startOffsets[posUpto] + tvf.readVInt();\n        }\n      }\n\n      lastTerm.copyBytes(term);\n      nextTerm++;\n      return term;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsReader.TVTermsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsReader.TVTermsEnum#next().mjava","sourceNew":"    @Override\n    public BytesRef next() throws IOException {\n      if (++currentTerm >= numTerms) {\n        return null;\n      }\n      return term();\n    }\n\n","sourceOld":"    @Override\n    public BytesRef next() throws IOException {\n      if (++currentTerm >= numTerms) {\n        return null;\n      }\n      return term();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5013b6ff92e8f7f62cd228936ce019f8819b092b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["426bf91d9f9500f9c52dbdc111f6c1762cf54e20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"426bf91d9f9500f9c52dbdc111f6c1762cf54e20":["5013b6ff92e8f7f62cd228936ce019f8819b092b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"5013b6ff92e8f7f62cd228936ce019f8819b092b":["426bf91d9f9500f9c52dbdc111f6c1762cf54e20"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5013b6ff92e8f7f62cd228936ce019f8819b092b"],"426bf91d9f9500f9c52dbdc111f6c1762cf54e20":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}