{"path":"lucene/core/src/java/org/apache/lucene/index/NumberDVWriter#addValue(int,long).mjava","commits":[{"id":"9b637fb447c5b4257f6b4532d84ca91e456c1f2a","date":1352405059,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NumberDVWriter#addValue(int,long).mjava","pathOld":"/dev/null","sourceNew":"  public void addValue(int docID, long value) {\n    final int oldBytesUsed = bytesUsed;\n    mergeValue(value);\n\n    // Fill in any holes:\n    while(pending.size() < docID) {\n      pending.add(MISSING);\n      bytesUsed += RamUsageEstimator.NUM_BYTES_OBJECT_REF;\n      mergeValue(0);\n    }\n\n    pending.add(value);\n\n    // estimate 25% overhead for ArrayList:\n    bytesUsed += (int) (RamUsageEstimator.NUM_BYTES_OBJECT_HEADER + RamUsageEstimator.NUM_BYTES_LONG + (RamUsageEstimator.NUM_BYTES_OBJECT_REF * 1.25));\n    iwBytesUsed.addAndGet(bytesUsed - oldBytesUsed);\n    //System.out.println(\"ADD: \" + value);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ad1376d356a33e10b3b9b95708ddc83252499a6","date":1353008654,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NumberDVWriter#addValue(int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NumberDVWriter#addValue(int,long).mjava","sourceNew":"  public void addValue(int docID, long value) {\n    mergeValue(value);\n\n    // Fill in any holes:\n    for (int i = pending.size(); i < docID; ++i) {\n      pending.add(MISSING);\n      mergeValue(0);\n    }\n\n    pending.add(value);\n\n    updateBytesUsed();\n    //System.out.println(\"ADD: \" + value);\n  }\n\n","sourceOld":"  public void addValue(int docID, long value) {\n    final int oldBytesUsed = bytesUsed;\n    mergeValue(value);\n\n    // Fill in any holes:\n    while(pending.size() < docID) {\n      pending.add(MISSING);\n      bytesUsed += RamUsageEstimator.NUM_BYTES_OBJECT_REF;\n      mergeValue(0);\n    }\n\n    pending.add(value);\n\n    // estimate 25% overhead for ArrayList:\n    bytesUsed += (int) (RamUsageEstimator.NUM_BYTES_OBJECT_HEADER + RamUsageEstimator.NUM_BYTES_LONG + (RamUsageEstimator.NUM_BYTES_OBJECT_REF * 1.25));\n    iwBytesUsed.addAndGet(bytesUsed - oldBytesUsed);\n    //System.out.println(\"ADD: \" + value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6295f14d43685811599f8a8f02a63d75ec6bd8fe","date":1353248103,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NumberDVWriter#addValue(int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NumberDVWriter#addValue(int,long).mjava","sourceNew":"  public void addValue(int docID, long value) {\n    mergeValue(value);\n\n    // Fill in any holes:\n    for (int i = pending.size(); i < docID; ++i) {\n      pending.add(MISSING);\n      mergeValue(0);\n    }\n\n    pending.add(value);\n\n    updateBytesUsed();\n  }\n\n","sourceOld":"  public void addValue(int docID, long value) {\n    mergeValue(value);\n\n    // Fill in any holes:\n    for (int i = pending.size(); i < docID; ++i) {\n      pending.add(MISSING);\n      mergeValue(0);\n    }\n\n    pending.add(value);\n\n    updateBytesUsed();\n    //System.out.println(\"ADD: \" + value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f37ad9574eb102efe282ecda793ea5ebdf5d2fb","date":1353263968,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NumberDVWriter#addValue(int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NumberDVWriter#addValue(int,long).mjava","sourceNew":"  public void addValue(int docID, long value) {\n    if (docID < pending.size()) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n    mergeValue(value);\n\n    // Fill in any holes:\n    for (int i = pending.size(); i < docID; ++i) {\n      pending.add(MISSING);\n      mergeValue(0);\n    }\n\n    pending.add(value);\n\n    updateBytesUsed();\n  }\n\n","sourceOld":"  public void addValue(int docID, long value) {\n    mergeValue(value);\n\n    // Fill in any holes:\n    for (int i = pending.size(); i < docID; ++i) {\n      pending.add(MISSING);\n      mergeValue(0);\n    }\n\n    pending.add(value);\n\n    updateBytesUsed();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32fb848e256860b63adc9c2b068f386032c77b67","date":1357587205,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NumberDVWriter#addValue(int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NumberDVWriter#addValue(int,long).mjava","sourceNew":"  public void addValue(int docID, long value) {\n    if (docID < pending.size()) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n\n    // Fill in any holes:\n    for (int i = pending.size(); i < docID; ++i) {\n      pending.add(MISSING);\n    }\n\n    pending.add(value);\n\n    updateBytesUsed();\n  }\n\n","sourceOld":"  public void addValue(int docID, long value) {\n    if (docID < pending.size()) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n    mergeValue(value);\n\n    // Fill in any holes:\n    for (int i = pending.size(); i < docID; ++i) {\n      pending.add(MISSING);\n      mergeValue(0);\n    }\n\n    pending.add(value);\n\n    updateBytesUsed();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e5d36d3b999ce76a1e80788e5d243f513c69d50","date":1359044508,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NumericDocValuesWriter#addValue(int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NumberDVWriter#addValue(int,long).mjava","sourceNew":"  public void addValue(int docID, long value) {\n    if (docID < pending.size()) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n\n    // Fill in any holes:\n    for (int i = pending.size(); i < docID; ++i) {\n      pending.add(MISSING);\n    }\n\n    pending.add(value);\n\n    updateBytesUsed();\n  }\n\n","sourceOld":"  public void addValue(int docID, long value) {\n    if (docID < pending.size()) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n\n    // Fill in any holes:\n    for (int i = pending.size(); i < docID; ++i) {\n      pending.add(MISSING);\n    }\n\n    pending.add(value);\n\n    updateBytesUsed();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7ad1376d356a33e10b3b9b95708ddc83252499a6":["9b637fb447c5b4257f6b4532d84ca91e456c1f2a"],"6295f14d43685811599f8a8f02a63d75ec6bd8fe":["7ad1376d356a33e10b3b9b95708ddc83252499a6"],"2e5d36d3b999ce76a1e80788e5d243f513c69d50":["32fb848e256860b63adc9c2b068f386032c77b67"],"0f37ad9574eb102efe282ecda793ea5ebdf5d2fb":["6295f14d43685811599f8a8f02a63d75ec6bd8fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b637fb447c5b4257f6b4532d84ca91e456c1f2a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"32fb848e256860b63adc9c2b068f386032c77b67":["0f37ad9574eb102efe282ecda793ea5ebdf5d2fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7ad1376d356a33e10b3b9b95708ddc83252499a6":["6295f14d43685811599f8a8f02a63d75ec6bd8fe"],"6295f14d43685811599f8a8f02a63d75ec6bd8fe":["0f37ad9574eb102efe282ecda793ea5ebdf5d2fb"],"2e5d36d3b999ce76a1e80788e5d243f513c69d50":[],"0f37ad9574eb102efe282ecda793ea5ebdf5d2fb":["32fb848e256860b63adc9c2b068f386032c77b67"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9b637fb447c5b4257f6b4532d84ca91e456c1f2a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9b637fb447c5b4257f6b4532d84ca91e456c1f2a":["7ad1376d356a33e10b3b9b95708ddc83252499a6"],"32fb848e256860b63adc9c2b068f386032c77b67":["2e5d36d3b999ce76a1e80788e5d243f513c69d50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2e5d36d3b999ce76a1e80788e5d243f513c69d50","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}