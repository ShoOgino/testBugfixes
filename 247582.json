{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String,LockFactory).mjava","commits":[{"id":"285cdc737de75b7cc7c284a156b20214deb67bca","date":1415535483,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String,LockFactory).mjava","pathOld":"/dev/null","sourceNew":"  static Directory newDirectoryImpl(Random random, String clazzName, LockFactory lf) {\n    if (clazzName.equals(\"random\")) {\n      if (rarely(random)) {\n        clazzName = RandomPicks.randomFrom(random, CORE_DIRECTORIES);\n      } else {\n        clazzName = \"RAMDirectory\";\n      }\n    }\n\n    try {\n      final Class<? extends Directory> clazz = CommandLineUtil.loadDirectoryClass(clazzName);\n      // If it is a FSDirectory type, try its ctor(Path)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final Path dir = createTempDir(\"index-\" + clazzName);\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), dir, lf);\n      }\n\n      // See if it has a Path/LockFactory ctor even though it's not an\n      // FSDir subclass:\n      try {\n        Constructor<? extends Directory> pathCtor = clazz.getConstructor(Path.class, LockFactory.class);\n        final Path dir = createTempDir(\"index\");\n        return pathCtor.newInstance(dir, lf);\n      } catch (NoSuchMethodException nsme) {\n        // Ignore\n      }\n      \n      // the remaining dirs are no longer filesystem based, so we must check that the passedLockFactory is not file based:\n      if (!(lf instanceof FSLockFactory)) {\n        // try ctor with only LockFactory (e.g. RAMDirectory)\n        try {\n          return clazz.getConstructor(LockFactory.class).newInstance(lf);\n        } catch (NoSuchMethodException nsme) {\n          // Ignore\n        }\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      Rethrow.rethrow(e);\n      throw null; // dummy to prevent compiler failure\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cbd49d01e70938f9b96aab93ccf87d92ef5e807","date":1417114695,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String,LockFactory).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String,LockFactory).mjava","sourceNew":"  static Directory newDirectoryImpl(Random random, String clazzName, LockFactory lf) {\n    if (clazzName.equals(\"random\")) {\n      if (rarely(random)) {\n        clazzName = RandomPicks.randomFrom(random, CORE_DIRECTORIES);\n        if (clazzName.equals(\"SimpleFSDirectory\")) {\n          // pick again\n          clazzName = RandomPicks.randomFrom(random, CORE_DIRECTORIES);\n        }\n      } else {\n        clazzName = \"RAMDirectory\";\n      }\n    }\n\n    try {\n      final Class<? extends Directory> clazz = CommandLineUtil.loadDirectoryClass(clazzName);\n      // If it is a FSDirectory type, try its ctor(Path)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final Path dir = createTempDir(\"index-\" + clazzName);\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), dir, lf);\n      }\n\n      // See if it has a Path/LockFactory ctor even though it's not an\n      // FSDir subclass:\n      try {\n        Constructor<? extends Directory> pathCtor = clazz.getConstructor(Path.class, LockFactory.class);\n        final Path dir = createTempDir(\"index\");\n        return pathCtor.newInstance(dir, lf);\n      } catch (NoSuchMethodException nsme) {\n        // Ignore\n      }\n      \n      // the remaining dirs are no longer filesystem based, so we must check that the passedLockFactory is not file based:\n      if (!(lf instanceof FSLockFactory)) {\n        // try ctor with only LockFactory (e.g. RAMDirectory)\n        try {\n          return clazz.getConstructor(LockFactory.class).newInstance(lf);\n        } catch (NoSuchMethodException nsme) {\n          // Ignore\n        }\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      Rethrow.rethrow(e);\n      throw null; // dummy to prevent compiler failure\n    }\n  }\n\n","sourceOld":"  static Directory newDirectoryImpl(Random random, String clazzName, LockFactory lf) {\n    if (clazzName.equals(\"random\")) {\n      if (rarely(random)) {\n        clazzName = RandomPicks.randomFrom(random, CORE_DIRECTORIES);\n      } else {\n        clazzName = \"RAMDirectory\";\n      }\n    }\n\n    try {\n      final Class<? extends Directory> clazz = CommandLineUtil.loadDirectoryClass(clazzName);\n      // If it is a FSDirectory type, try its ctor(Path)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final Path dir = createTempDir(\"index-\" + clazzName);\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), dir, lf);\n      }\n\n      // See if it has a Path/LockFactory ctor even though it's not an\n      // FSDir subclass:\n      try {\n        Constructor<? extends Directory> pathCtor = clazz.getConstructor(Path.class, LockFactory.class);\n        final Path dir = createTempDir(\"index\");\n        return pathCtor.newInstance(dir, lf);\n      } catch (NoSuchMethodException nsme) {\n        // Ignore\n      }\n      \n      // the remaining dirs are no longer filesystem based, so we must check that the passedLockFactory is not file based:\n      if (!(lf instanceof FSLockFactory)) {\n        // try ctor with only LockFactory (e.g. RAMDirectory)\n        try {\n          return clazz.getConstructor(LockFactory.class).newInstance(lf);\n        } catch (NoSuchMethodException nsme) {\n          // Ignore\n        }\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      Rethrow.rethrow(e);\n      throw null; // dummy to prevent compiler failure\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String,LockFactory).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String,LockFactory).mjava","sourceNew":"  static Directory newDirectoryImpl(Random random, String clazzName, LockFactory lf) {\n    if (clazzName.equals(\"random\")) {\n      if (rarely(random)) {\n        clazzName = RandomPicks.randomFrom(random, CORE_DIRECTORIES);\n      } else {\n        clazzName = \"RAMDirectory\";\n      }\n    }\n\n    try {\n      final Class<? extends Directory> clazz = CommandLineUtil.loadDirectoryClass(clazzName);\n      // If it is a FSDirectory type, try its ctor(Path)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final Path dir = createTempDir(\"index-\" + clazzName);\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), dir, lf);\n      }\n\n      // See if it has a Path/LockFactory ctor even though it's not an\n      // FSDir subclass:\n      try {\n        Constructor<? extends Directory> pathCtor = clazz.getConstructor(Path.class, LockFactory.class);\n        final Path dir = createTempDir(\"index\");\n        return pathCtor.newInstance(dir, lf);\n      } catch (NoSuchMethodException nsme) {\n        // Ignore\n      }\n      \n      // the remaining dirs are no longer filesystem based, so we must check that the passedLockFactory is not file based:\n      if (!(lf instanceof FSLockFactory)) {\n        // try ctor with only LockFactory (e.g. RAMDirectory)\n        try {\n          return clazz.getConstructor(LockFactory.class).newInstance(lf);\n        } catch (NoSuchMethodException nsme) {\n          // Ignore\n        }\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      Rethrow.rethrow(e);\n      throw null; // dummy to prevent compiler failure\n    }\n  }\n\n","sourceOld":"  static Directory newDirectoryImpl(Random random, String clazzName, LockFactory lf) {\n    if (clazzName.equals(\"random\")) {\n      if (rarely(random)) {\n        clazzName = RandomPicks.randomFrom(random, CORE_DIRECTORIES);\n        if (clazzName.equals(\"SimpleFSDirectory\")) {\n          // pick again\n          clazzName = RandomPicks.randomFrom(random, CORE_DIRECTORIES);\n        }\n      } else {\n        clazzName = \"RAMDirectory\";\n      }\n    }\n\n    try {\n      final Class<? extends Directory> clazz = CommandLineUtil.loadDirectoryClass(clazzName);\n      // If it is a FSDirectory type, try its ctor(Path)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final Path dir = createTempDir(\"index-\" + clazzName);\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), dir, lf);\n      }\n\n      // See if it has a Path/LockFactory ctor even though it's not an\n      // FSDir subclass:\n      try {\n        Constructor<? extends Directory> pathCtor = clazz.getConstructor(Path.class, LockFactory.class);\n        final Path dir = createTempDir(\"index\");\n        return pathCtor.newInstance(dir, lf);\n      } catch (NoSuchMethodException nsme) {\n        // Ignore\n      }\n      \n      // the remaining dirs are no longer filesystem based, so we must check that the passedLockFactory is not file based:\n      if (!(lf instanceof FSLockFactory)) {\n        // try ctor with only LockFactory (e.g. RAMDirectory)\n        try {\n          return clazz.getConstructor(LockFactory.class).newInstance(lf);\n        } catch (NoSuchMethodException nsme) {\n          // Ignore\n        }\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      Rethrow.rethrow(e);\n      throw null; // dummy to prevent compiler failure\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String,LockFactory).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String,LockFactory).mjava","sourceNew":"  static Directory newDirectoryImpl(Random random, String clazzName, LockFactory lf) {\n    if (clazzName.equals(\"random\")) {\n      if (rarely(random)) {\n        clazzName = RandomPicks.randomFrom(random, CORE_DIRECTORIES);\n      } else {\n        clazzName = ByteBuffersDirectory.class.getName();\n      }\n    }\n\n    try {\n      final Class<? extends Directory> clazz = CommandLineUtil.loadDirectoryClass(clazzName);\n      // If it is a FSDirectory type, try its ctor(Path)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final Path dir = createTempDir(\"index-\" + clazzName);\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), dir, lf);\n      }\n\n      // See if it has a Path/LockFactory ctor even though it's not an\n      // FSDir subclass:\n      try {\n        Constructor<? extends Directory> pathCtor = clazz.getConstructor(Path.class, LockFactory.class);\n        final Path dir = createTempDir(\"index\");\n        return pathCtor.newInstance(dir, lf);\n      } catch (NoSuchMethodException nsme) {\n        // Ignore\n      }\n      \n      // the remaining dirs are no longer filesystem based, so we must check that the passedLockFactory is not file based:\n      if (!(lf instanceof FSLockFactory)) {\n        // try ctor with only LockFactory\n        try {\n          return clazz.getConstructor(LockFactory.class).newInstance(lf);\n        } catch (NoSuchMethodException nsme) {\n          // Ignore\n        }\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      Rethrow.rethrow(e);\n      throw null; // dummy to prevent compiler failure\n    }\n  }\n\n","sourceOld":"  static Directory newDirectoryImpl(Random random, String clazzName, LockFactory lf) {\n    if (clazzName.equals(\"random\")) {\n      if (rarely(random)) {\n        clazzName = RandomPicks.randomFrom(random, CORE_DIRECTORIES);\n      } else {\n        clazzName = \"RAMDirectory\";\n      }\n    }\n\n    try {\n      final Class<? extends Directory> clazz = CommandLineUtil.loadDirectoryClass(clazzName);\n      // If it is a FSDirectory type, try its ctor(Path)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final Path dir = createTempDir(\"index-\" + clazzName);\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), dir, lf);\n      }\n\n      // See if it has a Path/LockFactory ctor even though it's not an\n      // FSDir subclass:\n      try {\n        Constructor<? extends Directory> pathCtor = clazz.getConstructor(Path.class, LockFactory.class);\n        final Path dir = createTempDir(\"index\");\n        return pathCtor.newInstance(dir, lf);\n      } catch (NoSuchMethodException nsme) {\n        // Ignore\n      }\n      \n      // the remaining dirs are no longer filesystem based, so we must check that the passedLockFactory is not file based:\n      if (!(lf instanceof FSLockFactory)) {\n        // try ctor with only LockFactory (e.g. RAMDirectory)\n        try {\n          return clazz.getConstructor(LockFactory.class).newInstance(lf);\n        } catch (NoSuchMethodException nsme) {\n          // Ignore\n        }\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      Rethrow.rethrow(e);\n      throw null; // dummy to prevent compiler failure\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String,LockFactory).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String,LockFactory).mjava","sourceNew":"  static Directory newDirectoryImpl(Random random, String clazzName, LockFactory lf) {\n    if (clazzName.equals(\"random\")) {\n      if (rarely(random)) {\n        clazzName = RandomPicks.randomFrom(random, CORE_DIRECTORIES);\n      } else {\n        clazzName = ByteBuffersDirectory.class.getName();\n      }\n    }\n\n    try {\n      final Class<? extends Directory> clazz = CommandLineUtil.loadDirectoryClass(clazzName);\n      // If it is a FSDirectory type, try its ctor(Path)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final Path dir = createTempDir(\"index-\" + clazzName);\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), dir, lf);\n      }\n\n      // See if it has a Path/LockFactory ctor even though it's not an\n      // FSDir subclass:\n      try {\n        Constructor<? extends Directory> pathCtor = clazz.getConstructor(Path.class, LockFactory.class);\n        final Path dir = createTempDir(\"index\");\n        return pathCtor.newInstance(dir, lf);\n      } catch (NoSuchMethodException nsme) {\n        // Ignore\n      }\n      \n      // the remaining dirs are no longer filesystem based, so we must check that the passedLockFactory is not file based:\n      if (!(lf instanceof FSLockFactory)) {\n        // try ctor with only LockFactory\n        try {\n          return clazz.getConstructor(LockFactory.class).newInstance(lf);\n        } catch (NoSuchMethodException nsme) {\n          // Ignore\n        }\n      }\n\n      // try empty ctor\n      return clazz.getConstructor().newInstance();\n    } catch (Exception e) {\n      Rethrow.rethrow(e);\n      throw null; // dummy to prevent compiler failure\n    }\n  }\n\n","sourceOld":"  static Directory newDirectoryImpl(Random random, String clazzName, LockFactory lf) {\n    if (clazzName.equals(\"random\")) {\n      if (rarely(random)) {\n        clazzName = RandomPicks.randomFrom(random, CORE_DIRECTORIES);\n      } else {\n        clazzName = ByteBuffersDirectory.class.getName();\n      }\n    }\n\n    try {\n      final Class<? extends Directory> clazz = CommandLineUtil.loadDirectoryClass(clazzName);\n      // If it is a FSDirectory type, try its ctor(Path)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final Path dir = createTempDir(\"index-\" + clazzName);\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), dir, lf);\n      }\n\n      // See if it has a Path/LockFactory ctor even though it's not an\n      // FSDir subclass:\n      try {\n        Constructor<? extends Directory> pathCtor = clazz.getConstructor(Path.class, LockFactory.class);\n        final Path dir = createTempDir(\"index\");\n        return pathCtor.newInstance(dir, lf);\n      } catch (NoSuchMethodException nsme) {\n        // Ignore\n      }\n      \n      // the remaining dirs are no longer filesystem based, so we must check that the passedLockFactory is not file based:\n      if (!(lf instanceof FSLockFactory)) {\n        // try ctor with only LockFactory\n        try {\n          return clazz.getConstructor(LockFactory.class).newInstance(lf);\n        } catch (NoSuchMethodException nsme) {\n          // Ignore\n        }\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      Rethrow.rethrow(e);\n      throw null; // dummy to prevent compiler failure\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8dffb29c521092508345dceee6c6491e07410c76","date":1560870921,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String,LockFactory).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String,LockFactory).mjava","sourceNew":"  static Directory newDirectoryImpl(Random random, String clazzName, LockFactory lf) {\n    if (clazzName.equals(\"random\")) {\n      if (rarely(random)) {\n        clazzName = RandomPicks.randomFrom(random, CORE_DIRECTORIES);\n      } else if (rarely(random)) {\n        String clazzName1 = rarely(random)\n            ? RandomPicks.randomFrom(random, CORE_DIRECTORIES)\n            : ByteBuffersDirectory.class.getName();\n        String clazzName2 = rarely(random)\n            ? RandomPicks.randomFrom(random, CORE_DIRECTORIES)\n            : ByteBuffersDirectory.class.getName();\n        return newFileSwitchDirectory(random,\n            newDirectoryImpl(random, clazzName1, lf),\n            newDirectoryImpl(random, clazzName2, lf));\n      } else {\n        clazzName = ByteBuffersDirectory.class.getName();\n      }\n    }\n\n    try {\n      final Class<? extends Directory> clazz = CommandLineUtil.loadDirectoryClass(clazzName);\n      // If it is a FSDirectory type, try its ctor(Path)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final Path dir = createTempDir(\"index-\" + clazzName);\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), dir, lf);\n      }\n\n      // See if it has a Path/LockFactory ctor even though it's not an\n      // FSDir subclass:\n      try {\n        Constructor<? extends Directory> pathCtor = clazz.getConstructor(Path.class, LockFactory.class);\n        final Path dir = createTempDir(\"index\");\n        return pathCtor.newInstance(dir, lf);\n      } catch (NoSuchMethodException nsme) {\n        // Ignore\n      }\n      \n      // the remaining dirs are no longer filesystem based, so we must check that the passedLockFactory is not file based:\n      if (!(lf instanceof FSLockFactory)) {\n        // try ctor with only LockFactory\n        try {\n          return clazz.getConstructor(LockFactory.class).newInstance(lf);\n        } catch (NoSuchMethodException nsme) {\n          // Ignore\n        }\n      }\n\n      // try empty ctor\n      return clazz.getConstructor().newInstance();\n    } catch (Exception e) {\n      Rethrow.rethrow(e);\n      throw null; // dummy to prevent compiler failure\n    }\n  }\n\n","sourceOld":"  static Directory newDirectoryImpl(Random random, String clazzName, LockFactory lf) {\n    if (clazzName.equals(\"random\")) {\n      if (rarely(random)) {\n        clazzName = RandomPicks.randomFrom(random, CORE_DIRECTORIES);\n      } else {\n        clazzName = ByteBuffersDirectory.class.getName();\n      }\n    }\n\n    try {\n      final Class<? extends Directory> clazz = CommandLineUtil.loadDirectoryClass(clazzName);\n      // If it is a FSDirectory type, try its ctor(Path)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final Path dir = createTempDir(\"index-\" + clazzName);\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), dir, lf);\n      }\n\n      // See if it has a Path/LockFactory ctor even though it's not an\n      // FSDir subclass:\n      try {\n        Constructor<? extends Directory> pathCtor = clazz.getConstructor(Path.class, LockFactory.class);\n        final Path dir = createTempDir(\"index\");\n        return pathCtor.newInstance(dir, lf);\n      } catch (NoSuchMethodException nsme) {\n        // Ignore\n      }\n      \n      // the remaining dirs are no longer filesystem based, so we must check that the passedLockFactory is not file based:\n      if (!(lf instanceof FSLockFactory)) {\n        // try ctor with only LockFactory\n        try {\n          return clazz.getConstructor(LockFactory.class).newInstance(lf);\n        } catch (NoSuchMethodException nsme) {\n          // Ignore\n        }\n      }\n\n      // try empty ctor\n      return clazz.getConstructor().newInstance();\n    } catch (Exception e) {\n      Rethrow.rethrow(e);\n      throw null; // dummy to prevent compiler failure\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8dffb29c521092508345dceee6c6491e07410c76":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["d77dafd89756a5161d244985903e3487ca109182"],"285cdc737de75b7cc7c284a156b20214deb67bca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d77dafd89756a5161d244985903e3487ca109182":["51f5280f31484820499077f41fcdfe92d527d9dc"],"4cbd49d01e70938f9b96aab93ccf87d92ef5e807":["285cdc737de75b7cc7c284a156b20214deb67bca"],"51f5280f31484820499077f41fcdfe92d527d9dc":["4cbd49d01e70938f9b96aab93ccf87d92ef5e807"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8dffb29c521092508345dceee6c6491e07410c76"]},"commit2Childs":{"8dffb29c521092508345dceee6c6491e07410c76":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["8dffb29c521092508345dceee6c6491e07410c76"],"285cdc737de75b7cc7c284a156b20214deb67bca":["4cbd49d01e70938f9b96aab93ccf87d92ef5e807"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["285cdc737de75b7cc7c284a156b20214deb67bca"],"d77dafd89756a5161d244985903e3487ca109182":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"4cbd49d01e70938f9b96aab93ccf87d92ef5e807":["51f5280f31484820499077f41fcdfe92d527d9dc"],"51f5280f31484820499077f41fcdfe92d527d9dc":["d77dafd89756a5161d244985903e3487ca109182"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}