{"path":"solr/solrj/src/java/org/noggit/JSONParser#nextEvent().mjava","commits":[{"id":"980f4ef5a16664be88d82c37e6af5c49a3d57c9c","date":1557969027,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/noggit/JSONParser#nextEvent().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the next event encountered in the JSON stream, one of\n   * <ul>\n   * <li>{@link #STRING}</li>\n   * <li>{@link #LONG}</li>\n   * <li>{@link #NUMBER}</li>\n   * <li>{@link #BIGNUMBER}</li>\n   * <li>{@link #BOOLEAN}</li>\n   * <li>{@link #NULL}</li>\n   * <li>{@link #OBJECT_START}</li>\n   * <li>{@link #OBJECT_END}</li>\n   * <li>{@link #OBJECT_END}</li>\n   * <li>{@link #ARRAY_START}</li>\n   * <li>{@link #ARRAY_END}</li>\n   * <li>{@link #EOF}</li>\n   * </ul>\n   */\n  public int nextEvent() throws IOException {\n    if (valstate != 0) {\n      if (valstate == STRING) {\n        readStringChars2(devNull, start);\n      } else if (valstate == BIGNUMBER) {\n        continueNumber(devNull);\n      }\n      valstate = 0;\n    }\n\n    int ch;\n    outer:\n    for (; ; ) {\n      switch (state) {\n        case 0:\n          event = next(getChar());\n          if (event == STRING && (flags & OPTIONAL_OUTER_BRACES) != 0) {\n            if (start > 0) start--;\n            missingOpeningBrace = true;\n            stringTerm = 0;\n            valstate = 0;\n            event = next('{');\n          }\n          return event;\n        case DID_OBJSTART:\n          ch = getCharExpected('\"');\n          if (ch == '}') {\n            pop();\n            return event = OBJECT_END;\n          }\n          if (ch == '\"') {\n            stringTerm = ch;\n          } else if (ch == ',' && (flags & ALLOW_EXTRA_COMMAS) != 0) {\n            continue outer;\n          } else {\n            handleNonDoubleQuoteString(ch, true);\n          }\n          state = DID_MEMNAME;\n          valstate = STRING;\n          return event = STRING;\n        case DID_MEMNAME:\n          ch = getCharExpected(':');\n          if (ch != ':') {\n            if ((ch == '{' || ch == '[') && (flags & ALLOW_MISSING_COLON_COMMA_BEFORE_OBJECT) != 0) {\n              start--;\n            } else {\n              throw err(\"Expected key,value separator ':'\");\n            }\n          }\n          state = DID_MEMVAL;  // set state first because it might be pushed...\n          return event = next(getChar());\n        case DID_MEMVAL:\n          ch = getCharExpected(',');\n          if (ch == '}') {\n            pop();\n            return event = OBJECT_END;\n          } else if (ch != ',') {\n            if ((flags & ALLOW_EXTRA_COMMAS) != 0 && (ch == '\\'' || ch == '\"' || Character.isLetter(ch))) {\n              start--;\n            } else if (missingOpeningBrace && ch == -1 && (flags & OPTIONAL_OUTER_BRACES) != 0) {\n              missingOpeningBrace = false;\n              pop();\n              return event = OBJECT_END;\n            } else throw err(\"Expected ',' or '}'\");\n          }\n          ch = getCharExpected('\"');\n          if (ch == '\"') {\n            stringTerm = ch;\n          } else if ((ch == ',' || ch == '}') && (flags & ALLOW_EXTRA_COMMAS) != 0) {\n            if (ch == ',') continue outer;\n            pop();\n            return event = OBJECT_END;\n          } else {\n            handleNonDoubleQuoteString(ch, true);\n          }\n          state = DID_MEMNAME;\n          valstate = STRING;\n          return event = STRING;\n        case DID_ARRSTART:\n          ch = getCharNWS();\n          if (ch == ']') {\n            pop();\n            return event = ARRAY_END;\n          }\n          state = DID_ARRELEM;  // set state first, might be pushed...\n          return event = next(ch);\n        case DID_ARRELEM:\n          ch = getCharExpected(',');\n          if (ch == ',') {\n            // state = DID_ARRELEM;  // redundant\n            return event = next(getChar());\n          } else if (ch == ']') {\n            pop();\n            return event = ARRAY_END;\n          } else {\n            if ((ch == '{' || ch == '[') && (flags & ALLOW_MISSING_COLON_COMMA_BEFORE_OBJECT) != 0) {\n              return event = next(ch);\n            } else {\n              throw err(\"Expected ',' or ']'\");\n            }\n          }\n      }\n    } // end for(;;)\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"980f4ef5a16664be88d82c37e6af5c49a3d57c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["980f4ef5a16664be88d82c37e6af5c49a3d57c9c"]},"commit2Childs":{"980f4ef5a16664be88d82c37e6af5c49a3d57c9c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["980f4ef5a16664be88d82c37e6af5c49a3d57c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}