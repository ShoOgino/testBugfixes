{"path":"solr/core/src/java/org/apache/solr/handler/admin/LogLevelHandler.LoggerFactoryWrapperJUL#getLoggers().mjava","commits":[{"id":"43aba035b2a37ad571a7b19496d3108f44e0b97d","date":1329961988,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LogLevelHandler.LoggerFactoryWrapperJUL#getLoggers().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Collection<LoggerWrapper> getLoggers() {\n      LogManager manager = LogManager.getLogManager();\n\n      Logger root = manager.getLogger(\"\");\n      Map<String,LoggerWrapper> map = new HashMap<String,LoggerWrapper>();\n      Enumeration<String> names = manager.getLoggerNames();\n      while (names.hasMoreElements()) {\n        String name = names.nextElement();\n        Logger logger = Logger.getLogger(name);\n        if( logger == root) {\n          continue;\n        }\n        map.put(name, new LoggerWrapperJUL(name, logger));\n\n        while (true) {\n          int dot = name.lastIndexOf(\".\");\n          if (dot < 0)\n            break;\n          name = name.substring(0, dot);\n          if(!map.containsKey(name)) {\n            map.put(name, new LoggerWrapperJUL(name, null));\n          }\n        }\n      }\n      map.put(ROOT_NAME, new LoggerWrapperJUL(ROOT_NAME, root));\n      return map.values();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LogLevelHandler.LoggerFactoryWrapperJUL#getLoggers().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Collection<LoggerWrapper> getLoggers() {\n      LogManager manager = LogManager.getLogManager();\n\n      Logger root = manager.getLogger(\"\");\n      Map<String,LoggerWrapper> map = new HashMap<String,LoggerWrapper>();\n      Enumeration<String> names = manager.getLoggerNames();\n      while (names.hasMoreElements()) {\n        String name = names.nextElement();\n        Logger logger = Logger.getLogger(name);\n        if( logger == root) {\n          continue;\n        }\n        map.put(name, new LoggerWrapperJUL(name, logger));\n\n        while (true) {\n          int dot = name.lastIndexOf(\".\");\n          if (dot < 0)\n            break;\n          name = name.substring(0, dot);\n          if(!map.containsKey(name)) {\n            map.put(name, new LoggerWrapperJUL(name, null));\n          }\n        }\n      }\n      map.put(ROOT_NAME, new LoggerWrapperJUL(ROOT_NAME, root));\n      return map.values();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"829761a123d59d7a3c39e5f13fbc03de63f55ce5","date":1334686329,"type":4,"author":"Ryan McKinley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LogLevelHandler.LoggerFactoryWrapperJUL#getLoggers().mjava","sourceNew":null,"sourceOld":"    @Override\n    public Collection<LoggerWrapper> getLoggers() {\n      LogManager manager = LogManager.getLogManager();\n\n      Logger root = manager.getLogger(\"\");\n      Map<String,LoggerWrapper> map = new HashMap<String,LoggerWrapper>();\n      Enumeration<String> names = manager.getLoggerNames();\n      while (names.hasMoreElements()) {\n        String name = names.nextElement();\n        Logger logger = Logger.getLogger(name);\n        if( logger == root) {\n          continue;\n        }\n        map.put(name, new LoggerWrapperJUL(name, logger));\n\n        while (true) {\n          int dot = name.lastIndexOf(\".\");\n          if (dot < 0)\n            break;\n          name = name.substring(0, dot);\n          if(!map.containsKey(name)) {\n            map.put(name, new LoggerWrapperJUL(name, null));\n          }\n        }\n      }\n      map.put(ROOT_NAME, new LoggerWrapperJUL(ROOT_NAME, root));\n      return map.values();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"43aba035b2a37ad571a7b19496d3108f44e0b97d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43aba035b2a37ad571a7b19496d3108f44e0b97d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"829761a123d59d7a3c39e5f13fbc03de63f55ce5":["43aba035b2a37ad571a7b19496d3108f44e0b97d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["829761a123d59d7a3c39e5f13fbc03de63f55ce5"]},"commit2Childs":{"43aba035b2a37ad571a7b19496d3108f44e0b97d":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","829761a123d59d7a3c39e5f13fbc03de63f55ce5"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["43aba035b2a37ad571a7b19496d3108f44e0b97d","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"829761a123d59d7a3c39e5f13fbc03de63f55ce5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}