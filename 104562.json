{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#opt(List[Scorer],int,boolean).mjava","commits":[{"id":"a18a03f140cbd3f78694787c9f98cf452aab7b7f","date":1423241474,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#opt(List[Scorer],int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private Scorer opt(List<Scorer> optional, int minShouldMatch, boolean disableCoord) throws IOException {\n    if (optional.size() == 1) {\n      Scorer opt = optional.get(0);\n      if (!disableCoord && maxCoord > 1) {\n        return new BooleanTopLevelScorers.BoostedScorer(opt, coord(1, maxCoord));\n      } else {\n        return opt;\n      }\n    } else {\n      float coords[];\n      if (disableCoord) {\n        coords = new float[optional.size()+1];\n        Arrays.fill(coords, 1F);\n      } else {\n        coords = coords();\n      }\n      if (minShouldMatch > 1) {\n        return new MinShouldMatchSumScorer(this, optional, minShouldMatch, coords);\n      } else {\n        return new DisjunctionSumScorer(this, \n                                        optional.toArray(new Scorer[optional.size()]), \n                                        coords);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"835e9a6d1c5a6cc5684c905d972d68df554cfad5","date":1424111245,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#opt(List[Scorer],int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#opt(List[Scorer],int,boolean).mjava","sourceNew":"  private Scorer opt(List<Scorer> optional, int minShouldMatch, boolean disableCoord) throws IOException {\n    if (optional.size() == 1) {\n      Scorer opt = optional.get(0);\n      if (!disableCoord && maxCoord > 1) {\n        return new BooleanTopLevelScorers.BoostedScorer(opt, coord(1, maxCoord));\n      } else {\n        return opt;\n      }\n    } else {\n      float coords[];\n      if (disableCoord) {\n        coords = new float[optional.size()+1];\n        Arrays.fill(coords, 1F);\n      } else {\n        coords = coords();\n      }\n      if (minShouldMatch > 1) {\n        return new MinShouldMatchSumScorer(this, optional, minShouldMatch, coords);\n      } else {\n        return new DisjunctionSumScorer(this, optional, coords, needsScores);\n      }\n    }\n  }\n\n","sourceOld":"  private Scorer opt(List<Scorer> optional, int minShouldMatch, boolean disableCoord) throws IOException {\n    if (optional.size() == 1) {\n      Scorer opt = optional.get(0);\n      if (!disableCoord && maxCoord > 1) {\n        return new BooleanTopLevelScorers.BoostedScorer(opt, coord(1, maxCoord));\n      } else {\n        return opt;\n      }\n    } else {\n      float coords[];\n      if (disableCoord) {\n        coords = new float[optional.size()+1];\n        Arrays.fill(coords, 1F);\n      } else {\n        coords = coords();\n      }\n      if (minShouldMatch > 1) {\n        return new MinShouldMatchSumScorer(this, optional, minShouldMatch, coords);\n      } else {\n        return new DisjunctionSumScorer(this, \n                                        optional.toArray(new Scorer[optional.size()]), \n                                        coords);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"603e11ad1dfc3a603ed848618c542ab244327332","date":1425141834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#opt(List[Scorer],int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#opt(List[Scorer],int,boolean).mjava","sourceNew":"  private Scorer opt(List<Scorer> optional, int minShouldMatch, boolean disableCoord) throws IOException {\n    if (optional.size() == 1) {\n      Scorer opt = optional.get(0);\n      if (!disableCoord && maxCoord > 1) {\n        return new BooleanTopLevelScorers.BoostedScorer(opt, coord(1, maxCoord));\n      } else {\n        return opt;\n      }\n    } else {\n      float coords[];\n      if (disableCoord) {\n        // sneaky: when we do a mixed conjunction/disjunction, we need a fake for the disjunction part.\n        coords = new float[optional.size()+1];\n        Arrays.fill(coords, 1F);\n      } else {\n        coords = this.coords;\n      }\n      if (minShouldMatch > 1) {\n        return new MinShouldMatchSumScorer(this, optional, minShouldMatch, coords);\n      } else {\n        return new DisjunctionSumScorer(this, optional, coords, needsScores);\n      }\n    }\n  }\n\n","sourceOld":"  private Scorer opt(List<Scorer> optional, int minShouldMatch, boolean disableCoord) throws IOException {\n    if (optional.size() == 1) {\n      Scorer opt = optional.get(0);\n      if (!disableCoord && maxCoord > 1) {\n        return new BooleanTopLevelScorers.BoostedScorer(opt, coord(1, maxCoord));\n      } else {\n        return opt;\n      }\n    } else {\n      float coords[];\n      if (disableCoord) {\n        coords = new float[optional.size()+1];\n        Arrays.fill(coords, 1F);\n      } else {\n        coords = coords();\n      }\n      if (minShouldMatch > 1) {\n        return new MinShouldMatchSumScorer(this, optional, minShouldMatch, coords);\n      } else {\n        return new DisjunctionSumScorer(this, optional, coords, needsScores);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#opt(List[Scorer],int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#opt(List[Scorer],int,boolean).mjava","sourceNew":"  private Scorer opt(List<Scorer> optional, int minShouldMatch, boolean disableCoord) throws IOException {\n    if (optional.size() == 1) {\n      Scorer opt = optional.get(0);\n      if (!disableCoord && maxCoord > 1) {\n        return new BooleanTopLevelScorers.BoostedScorer(opt, coord(1, maxCoord));\n      } else {\n        return opt;\n      }\n    } else {\n      float coords[];\n      if (disableCoord) {\n        // sneaky: when we do a mixed conjunction/disjunction, we need a fake for the disjunction part.\n        coords = new float[optional.size()+1];\n        Arrays.fill(coords, 1F);\n      } else {\n        coords = this.coords;\n      }\n      if (minShouldMatch > 1) {\n        return new MinShouldMatchSumScorer(this, optional, minShouldMatch, coords);\n      } else {\n        return new DisjunctionSumScorer(this, optional, coords, needsScores);\n      }\n    }\n  }\n\n","sourceOld":"  private Scorer opt(List<Scorer> optional, int minShouldMatch, boolean disableCoord) throws IOException {\n    if (optional.size() == 1) {\n      Scorer opt = optional.get(0);\n      if (!disableCoord && maxCoord > 1) {\n        return new BooleanTopLevelScorers.BoostedScorer(opt, coord(1, maxCoord));\n      } else {\n        return opt;\n      }\n    } else {\n      float coords[];\n      if (disableCoord) {\n        coords = new float[optional.size()+1];\n        Arrays.fill(coords, 1F);\n      } else {\n        coords = coords();\n      }\n      if (minShouldMatch > 1) {\n        return new MinShouldMatchSumScorer(this, optional, minShouldMatch, coords);\n      } else {\n        return new DisjunctionSumScorer(this, optional, coords, needsScores);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#opt(List[Scorer],int,boolean).mjava","sourceNew":null,"sourceOld":"  private Scorer opt(List<Scorer> optional, int minShouldMatch, boolean disableCoord) throws IOException {\n    if (optional.size() == 1) {\n      Scorer opt = optional.get(0);\n      if (!disableCoord && maxCoord > 1) {\n        return new BooleanTopLevelScorers.BoostedScorer(opt, coord(1, maxCoord));\n      } else {\n        return opt;\n      }\n    } else {\n      float coords[];\n      if (disableCoord) {\n        // sneaky: when we do a mixed conjunction/disjunction, we need a fake for the disjunction part.\n        coords = new float[optional.size()+1];\n        Arrays.fill(coords, 1F);\n      } else {\n        coords = this.coords;\n      }\n      if (minShouldMatch > 1) {\n        return new MinShouldMatchSumScorer(this, optional, minShouldMatch, coords);\n      } else {\n        return new DisjunctionSumScorer(this, optional, coords, needsScores);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#opt(List[Scorer],int,boolean).mjava","sourceNew":null,"sourceOld":"  private Scorer opt(List<Scorer> optional, int minShouldMatch, boolean disableCoord) throws IOException {\n    if (optional.size() == 1) {\n      Scorer opt = optional.get(0);\n      if (!disableCoord && maxCoord > 1) {\n        return new BooleanTopLevelScorers.BoostedScorer(opt, coord(1, maxCoord));\n      } else {\n        return opt;\n      }\n    } else {\n      float coords[];\n      if (disableCoord) {\n        // sneaky: when we do a mixed conjunction/disjunction, we need a fake for the disjunction part.\n        coords = new float[optional.size()+1];\n        Arrays.fill(coords, 1F);\n      } else {\n        coords = this.coords;\n      }\n      if (minShouldMatch > 1) {\n        return new MinShouldMatchSumScorer(this, optional, minShouldMatch, coords);\n      } else {\n        return new DisjunctionSumScorer(this, optional, coords, needsScores);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["835e9a6d1c5a6cc5684c905d972d68df554cfad5","603e11ad1dfc3a603ed848618c542ab244327332"],"835e9a6d1c5a6cc5684c905d972d68df554cfad5":["a18a03f140cbd3f78694787c9f98cf452aab7b7f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8a0e442f7b61f811680273b25da95994a724466":["603e11ad1dfc3a603ed848618c542ab244327332"],"603e11ad1dfc3a603ed848618c542ab244327332":["835e9a6d1c5a6cc5684c905d972d68df554cfad5"],"a18a03f140cbd3f78694787c9f98cf452aab7b7f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["603e11ad1dfc3a603ed848618c542ab244327332","c8a0e442f7b61f811680273b25da95994a724466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c8a0e442f7b61f811680273b25da95994a724466"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"835e9a6d1c5a6cc5684c905d972d68df554cfad5":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","603e11ad1dfc3a603ed848618c542ab244327332"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a18a03f140cbd3f78694787c9f98cf452aab7b7f"],"c8a0e442f7b61f811680273b25da95994a724466":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"603e11ad1dfc3a603ed848618c542ab244327332":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","c8a0e442f7b61f811680273b25da95994a724466","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a18a03f140cbd3f78694787c9f98cf452aab7b7f":["835e9a6d1c5a6cc5684c905d972d68df554cfad5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}