{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLightAutomaton#testConcatEmpty().mjava","commits":[{"id":"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9","date":1402946522,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLightAutomaton#testConcatEmpty().mjava","pathOld":"/dev/null","sourceNew":"  public void testConcatEmpty() throws Exception {\n    // If you concat empty automaton to anything the result should still be empty:\n    LightAutomaton a = BasicOperations.concatenateLight(BasicAutomata.makeEmptyLight(),\n                                                        BasicAutomata.makeStringLight(\"foo\"));\n    assertEquals(new HashSet<IntsRef>(), SpecialOperations.getFiniteStrings(a, -1));\n\n    a = BasicOperations.concatenateLight(BasicAutomata.makeStringLight(\"foo\"),\n                                         BasicAutomata.makeEmptyLight());\n    assertEquals(new HashSet<IntsRef>(), SpecialOperations.getFiniteStrings(a, -1));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLightAutomaton#testConcatEmpty().mjava","sourceNew":null,"sourceOld":"  public void testConcatEmpty() throws Exception {\n    // If you concat empty automaton to anything the result should still be empty:\n    LightAutomaton a = BasicOperations.concatenateLight(BasicAutomata.makeEmptyLight(),\n                                                        BasicAutomata.makeStringLight(\"foo\"));\n    assertEquals(new HashSet<IntsRef>(), SpecialOperations.getFiniteStrings(a, -1));\n\n    a = BasicOperations.concatenateLight(BasicAutomata.makeStringLight(\"foo\"),\n                                         BasicAutomata.makeEmptyLight());\n    assertEquals(new HashSet<IntsRef>(), SpecialOperations.getFiniteStrings(a, -1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}