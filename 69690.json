{"path":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/lucene/TestLuceneTaxonomyWriter#testCommitUserData().mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/lucene/TestLuceneTaxonomyWriter#testCommitUserData().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCommitUserData() throws Exception {\n    // Verifies that committed data is retrievable\n    Directory dir = new RAMDirectory();\n    LuceneTaxonomyWriter ltw = new LuceneTaxonomyWriter(dir, OpenMode.CREATE_OR_APPEND, new NoOpCache());\n    assertFalse(IndexReader.indexExists(dir));\n    ltw.commit(); // first commit, so that an index will be created\n    ltw.addCategory(new CategoryPath(\"a\"));\n    ltw.addCategory(new CategoryPath(\"b\"));\n    Map <String, String> userCommitData = new HashMap<String, String>();\n    userCommitData.put(\"testing\", \"1 2 3\");\n    ltw.commit(userCommitData);\n    ltw.close();\n    IndexReader r = IndexReader.open(dir);\n    assertEquals(\"2 categories plus root should have been committed to the underlying directory\", 3, r.numDocs());\n    Map <String, String> readUserCommitData = r.getCommitUserData();\n    assertTrue(\"wrong value extracted from commit data\", \n        \"1 2 3\".equals(readUserCommitData.get(\"testing\")));\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e26e3b5080bfb6fcabdc46d0072efe441de1a21b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a4df66e06e0c3b520d7d5941e1c043076f06f17","date":1309454196,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/lucene/TestLuceneTaxonomyWriter#testCommitUserData().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/lucene/TestLuceneTaxonomyWriter#testCommitUserData().mjava","sourceNew":"  @Test\n  public void testCommitUserData() throws Exception {\n    // Verifies that committed data is retrievable\n    Directory dir = newDirectory();\n    LuceneTaxonomyWriter ltw = new LuceneTaxonomyWriter(dir, OpenMode.CREATE_OR_APPEND, new NoOpCache());\n    assertFalse(IndexReader.indexExists(dir));\n    ltw.commit(); // first commit, so that an index will be created\n    ltw.addCategory(new CategoryPath(\"a\"));\n    ltw.addCategory(new CategoryPath(\"b\"));\n    Map <String, String> userCommitData = new HashMap<String, String>();\n    userCommitData.put(\"testing\", \"1 2 3\");\n    ltw.commit(userCommitData);\n    ltw.close();\n    IndexReader r = IndexReader.open(dir);\n    assertEquals(\"2 categories plus root should have been committed to the underlying directory\", 3, r.numDocs());\n    Map <String, String> readUserCommitData = r.getCommitUserData();\n    assertTrue(\"wrong value extracted from commit data\", \n        \"1 2 3\".equals(readUserCommitData.get(\"testing\")));\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCommitUserData() throws Exception {\n    // Verifies that committed data is retrievable\n    Directory dir = new RAMDirectory();\n    LuceneTaxonomyWriter ltw = new LuceneTaxonomyWriter(dir, OpenMode.CREATE_OR_APPEND, new NoOpCache());\n    assertFalse(IndexReader.indexExists(dir));\n    ltw.commit(); // first commit, so that an index will be created\n    ltw.addCategory(new CategoryPath(\"a\"));\n    ltw.addCategory(new CategoryPath(\"b\"));\n    Map <String, String> userCommitData = new HashMap<String, String>();\n    userCommitData.put(\"testing\", \"1 2 3\");\n    ltw.commit(userCommitData);\n    ltw.close();\n    IndexReader r = IndexReader.open(dir);\n    assertEquals(\"2 categories plus root should have been committed to the underlying directory\", 3, r.numDocs());\n    Map <String, String> readUserCommitData = r.getCommitUserData();\n    assertTrue(\"wrong value extracted from commit data\", \n        \"1 2 3\".equals(readUserCommitData.get(\"testing\")));\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/lucene/TestLuceneTaxonomyWriter#testCommitUserData().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCommitUserData() throws Exception {\n    // Verifies that committed data is retrievable\n    Directory dir = newDirectory();\n    LuceneTaxonomyWriter ltw = new LuceneTaxonomyWriter(dir, OpenMode.CREATE_OR_APPEND, new NoOpCache());\n    assertFalse(IndexReader.indexExists(dir));\n    ltw.commit(); // first commit, so that an index will be created\n    ltw.addCategory(new CategoryPath(\"a\"));\n    ltw.addCategory(new CategoryPath(\"b\"));\n    Map <String, String> userCommitData = new HashMap<String, String>();\n    userCommitData.put(\"testing\", \"1 2 3\");\n    ltw.commit(userCommitData);\n    ltw.close();\n    IndexReader r = IndexReader.open(dir);\n    assertEquals(\"2 categories plus root should have been committed to the underlying directory\", 3, r.numDocs());\n    Map <String, String> readUserCommitData = r.getCommitUserData();\n    assertTrue(\"wrong value extracted from commit data\", \n        \"1 2 3\".equals(readUserCommitData.get(\"testing\")));\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/lucene/TestLuceneTaxonomyWriter#testCommitUserData().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCommitUserData() throws Exception {\n    // Verifies that committed data is retrievable\n    Directory dir = newDirectory();\n    LuceneTaxonomyWriter ltw = new LuceneTaxonomyWriter(dir, OpenMode.CREATE_OR_APPEND, new NoOpCache());\n    assertFalse(IndexReader.indexExists(dir));\n    ltw.commit(); // first commit, so that an index will be created\n    ltw.addCategory(new CategoryPath(\"a\"));\n    ltw.addCategory(new CategoryPath(\"b\"));\n    Map <String, String> userCommitData = new HashMap<String, String>();\n    userCommitData.put(\"testing\", \"1 2 3\");\n    ltw.commit(userCommitData);\n    ltw.close();\n    IndexReader r = IndexReader.open(dir);\n    assertEquals(\"2 categories plus root should have been committed to the underlying directory\", 3, r.numDocs());\n    Map <String, String> readUserCommitData = r.getCommitUserData();\n    assertTrue(\"wrong value extracted from commit data\", \n        \"1 2 3\".equals(readUserCommitData.get(\"testing\")));\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea469eab8fd0f3032f4fcde1c644a721e8309d3b","date":1320301582,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testCommitUserData().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/lucene/TestLuceneTaxonomyWriter#testCommitUserData().mjava","sourceNew":"  @Test\n  public void testCommitUserData() throws Exception {\n    // Verifies that committed data is retrievable\n    Directory dir = newDirectory();\n    DirectoryTaxonomyWriter ltw = new DirectoryTaxonomyWriter(dir, OpenMode.CREATE_OR_APPEND, new NoOpCache());\n    assertFalse(IndexReader.indexExists(dir));\n    ltw.commit(); // first commit, so that an index will be created\n    ltw.addCategory(new CategoryPath(\"a\"));\n    ltw.addCategory(new CategoryPath(\"b\"));\n    Map <String, String> userCommitData = new HashMap<String, String>();\n    userCommitData.put(\"testing\", \"1 2 3\");\n    ltw.commit(userCommitData);\n    ltw.close();\n    IndexReader r = IndexReader.open(dir);\n    assertEquals(\"2 categories plus root should have been committed to the underlying directory\", 3, r.numDocs());\n    Map <String, String> readUserCommitData = r.getCommitUserData();\n    assertTrue(\"wrong value extracted from commit data\", \n        \"1 2 3\".equals(readUserCommitData.get(\"testing\")));\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCommitUserData() throws Exception {\n    // Verifies that committed data is retrievable\n    Directory dir = newDirectory();\n    LuceneTaxonomyWriter ltw = new LuceneTaxonomyWriter(dir, OpenMode.CREATE_OR_APPEND, new NoOpCache());\n    assertFalse(IndexReader.indexExists(dir));\n    ltw.commit(); // first commit, so that an index will be created\n    ltw.addCategory(new CategoryPath(\"a\"));\n    ltw.addCategory(new CategoryPath(\"b\"));\n    Map <String, String> userCommitData = new HashMap<String, String>();\n    userCommitData.put(\"testing\", \"1 2 3\");\n    ltw.commit(userCommitData);\n    ltw.close();\n    IndexReader r = IndexReader.open(dir);\n    assertEquals(\"2 categories plus root should have been committed to the underlying directory\", 3, r.numDocs());\n    Map <String, String> readUserCommitData = r.getCommitUserData();\n    assertTrue(\"wrong value extracted from commit data\", \n        \"1 2 3\".equals(readUserCommitData.get(\"testing\")));\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["e26e3b5080bfb6fcabdc46d0072efe441de1a21b"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7a4df66e06e0c3b520d7d5941e1c043076f06f17":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"]},"commit2Childs":{"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"7a4df66e06e0c3b520d7d5941e1c043076f06f17":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}