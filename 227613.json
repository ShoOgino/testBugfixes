{"path":"lucene/misc/src/java/org/apache/lucene/document/InetAddressPoint#newRangeQuery(String,InetAddress,InetAddress).mjava","commits":[{"id":"4a52b01a73cacbd2d360240e72d64c0ba353618f","date":1489389749,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/document/InetAddressPoint#newRangeQuery(String,InetAddress,InetAddress).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newRangeQuery(String,InetAddress,InetAddress).mjava","sourceNew":"  /** \n   * Create a range query for network addresses.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting {@code lowerValue = InetAddressPoint.MIN_VALUE} or\n   * {@code upperValue = InetAddressPoint.MAX_VALUE}.\n   * <p> Ranges are inclusive. For exclusive ranges, pass {@code InetAddressPoint#nextUp(lowerValue)}\n   * or {@code InetAddressPoint#nexDown(upperValue)}.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range (inclusive). must not be null.\n   * @param upperValue upper portion of the range (inclusive). must not be null.\n   * @throws IllegalArgumentException if {@code field} is null, {@code lowerValue} is null, \n   *                                  or {@code upperValue} is null\n   * @return a query matching documents within this range.\n   */\n  public static Query newRangeQuery(String field, InetAddress lowerValue, InetAddress upperValue) {\n    PointRangeQuery.checkArgs(field, lowerValue, upperValue);\n    return new PointRangeQuery(field, encode(lowerValue), encode(upperValue), 1) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        return decode(value).getHostAddress(); // for ranges, the range itself is already bracketed\n      }\n    };\n  }\n\n","sourceOld":"  /** \n   * Create a range query for network addresses.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting {@code lowerValue = InetAddressPoint.MIN_VALUE} or\n   * {@code upperValue = InetAddressPoint.MAX_VALUE}.\n   * <p> Ranges are inclusive. For exclusive ranges, pass {@code InetAddressPoint#nextUp(lowerValue)}\n   * or {@code InetAddressPoint#nexDown(upperValue)}.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range (inclusive). must not be null.\n   * @param upperValue upper portion of the range (inclusive). must not be null.\n   * @throws IllegalArgumentException if {@code field} is null, {@code lowerValue} is null, \n   *                                  or {@code upperValue} is null\n   * @return a query matching documents within this range.\n   */\n  public static Query newRangeQuery(String field, InetAddress lowerValue, InetAddress upperValue) {\n    PointRangeQuery.checkArgs(field, lowerValue, upperValue);\n    return new PointRangeQuery(field, encode(lowerValue), encode(upperValue), 1) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        return decode(value).getHostAddress(); // for ranges, the range itself is already bracketed\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4a52b01a73cacbd2d360240e72d64c0ba353618f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4a52b01a73cacbd2d360240e72d64c0ba353618f"]},"commit2Childs":{"4a52b01a73cacbd2d360240e72d64c0ba353618f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4a52b01a73cacbd2d360240e72d64c0ba353618f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}