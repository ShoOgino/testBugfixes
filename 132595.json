{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#initEntity(DataConfig.Entity,Map[String,DataConfig.Field],boolean).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#initEntity(DataConfig.Entity,Map[String,DataConfig.Field],boolean).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#initEntity(DataConfig.Entity,Map[String,DataConfig.Field],boolean).mjava","sourceNew":"  private void initEntity(DataConfig.Entity e,\n                          Map<String, DataConfig.Field> fields, boolean docRootFound) {\n    e.allAttributes.put(DATA_SRC, e.dataSource);\n\n    if (!docRootFound && !\"false\".equals(e.docRoot)) {\n      // if in this chain no document root is found()\n      e.isDocRoot = true;\n    }\n    if (e.allAttributes.get(\"threads\") != null) {\n      if(docRootFound) throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"'threads' not allowed below rootEntity \");\n      config.isMultiThreaded = true;      \n    }\n\n    if (e.fields != null) {\n      for (DataConfig.Field f : e.fields) {\n        if (schema != null) {\n          if(f.name != null && f.name.contains(\"${\")){\n            f.dynamicName = true;\n            continue;\n          }\n          SchemaField schemaField = schema.getFieldOrNull(f.getName());\n          if (schemaField == null) {\n            schemaField = config.lowerNameVsSchemaField.get(f.getName().toLowerCase(Locale.ENGLISH));\n            if (schemaField != null) f.name = schemaField.getName();\n          }\n          if (schemaField != null) {\n            f.multiValued = schemaField.multiValued();\n            f.allAttributes.put(MULTI_VALUED, Boolean.toString(schemaField\n                    .multiValued()));\n            f.allAttributes.put(TYPE, schemaField.getType().getTypeName());\n            f.allAttributes.put(\"indexed\", Boolean.toString(schemaField.indexed()));\n            f.allAttributes.put(\"stored\", Boolean.toString(schemaField.stored()));\n            f.allAttributes.put(\"defaultValue\", schemaField.getDefaultValue());\n          } else {\n            f.toWrite = false;\n          }\n        }\n        fields.put(f.getName(), f);\n        f.entity = e;\n        f.allAttributes.put(\"boost\", f.boost.toString());\n        f.allAttributes.put(\"toWrite\", Boolean.toString(f.toWrite));\n        e.allFieldsList.add(Collections.unmodifiableMap(f.allAttributes));\n      }\n    }\n    e.allFieldsList = Collections.unmodifiableList(e.allFieldsList);\n    e.allAttributes = Collections.unmodifiableMap(e.allAttributes);\n\n    if (e.entities == null)\n      return;\n    for (DataConfig.Entity e1 : e.entities) {\n      e1.parentEntity = e;\n      initEntity(e1, fields, e.isDocRoot || docRootFound);\n    }\n\n  }\n\n","sourceOld":"  private void initEntity(DataConfig.Entity e,\n                          Map<String, DataConfig.Field> fields, boolean docRootFound) {\n    e.allAttributes.put(DATA_SRC, e.dataSource);\n\n    if (!docRootFound && !\"false\".equals(e.docRoot)) {\n      // if in this chain no document root is found()\n      e.isDocRoot = true;\n    }\n    if (e.allAttributes.get(\"threads\") != null) {\n      if(docRootFound) throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"'threads' not allowed below rootEntity \");\n      config.isMultiThreaded = true;      \n    }\n\n    if (e.fields != null) {\n      for (DataConfig.Field f : e.fields) {\n        if (schema != null) {\n          if(f.name != null && f.name.contains(\"${\")){\n            f.dynamicName = true;\n            continue;\n          }\n          SchemaField schemaField = schema.getFieldOrNull(f.getName());\n          if (schemaField == null) {\n            schemaField = config.lowerNameVsSchemaField.get(f.getName().toLowerCase(Locale.ENGLISH));\n            if (schemaField != null) f.name = schemaField.getName();\n          }\n          if (schemaField != null) {\n            f.multiValued = schemaField.multiValued();\n            f.allAttributes.put(MULTI_VALUED, Boolean.toString(schemaField\n                    .multiValued()));\n            f.allAttributes.put(TYPE, schemaField.getType().getTypeName());\n            f.allAttributes.put(\"indexed\", Boolean.toString(schemaField.indexed()));\n            f.allAttributes.put(\"stored\", Boolean.toString(schemaField.stored()));\n            f.allAttributes.put(\"defaultValue\", schemaField.getDefaultValue());\n          } else {\n            f.toWrite = false;\n          }\n        }\n        fields.put(f.getName(), f);\n        f.entity = e;\n        f.allAttributes.put(\"boost\", f.boost.toString());\n        f.allAttributes.put(\"toWrite\", Boolean.toString(f.toWrite));\n        e.allFieldsList.add(Collections.unmodifiableMap(f.allAttributes));\n      }\n    }\n    e.allFieldsList = Collections.unmodifiableList(e.allFieldsList);\n    e.allAttributes = Collections.unmodifiableMap(e.allAttributes);\n\n    if (e.entities == null)\n      return;\n    for (DataConfig.Entity e1 : e.entities) {\n      e1.parentEntity = e;\n      initEntity(e1, fields, e.isDocRoot || docRootFound);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#initEntity(DataConfig.Entity,Map[String,DataConfig.Field],boolean).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#initEntity(DataConfig.Entity,Map[String,DataConfig.Field],boolean).mjava","sourceNew":"  private void initEntity(DataConfig.Entity e,\n                          Map<String, DataConfig.Field> fields, boolean docRootFound) {\n    e.allAttributes.put(DATA_SRC, e.dataSource);\n\n    if (!docRootFound && !\"false\".equals(e.docRoot)) {\n      // if in this chain no document root is found()\n      e.isDocRoot = true;\n    }\n    if (e.allAttributes.get(\"threads\") != null) {\n      if(docRootFound) throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"'threads' not allowed below rootEntity \");\n      config.isMultiThreaded = true;      \n    }\n\n    if (e.fields != null) {\n      for (DataConfig.Field f : e.fields) {\n        if (schema != null) {\n          if(f.name != null && f.name.contains(\"${\")){\n            f.dynamicName = true;\n            continue;\n          }\n          SchemaField schemaField = schema.getFieldOrNull(f.getName());\n          if (schemaField == null) {\n            schemaField = config.lowerNameVsSchemaField.get(f.getName().toLowerCase(Locale.ENGLISH));\n            if (schemaField != null) f.name = schemaField.getName();\n          }\n          if (schemaField != null) {\n            f.multiValued = schemaField.multiValued();\n            f.allAttributes.put(MULTI_VALUED, Boolean.toString(schemaField\n                    .multiValued()));\n            f.allAttributes.put(TYPE, schemaField.getType().getTypeName());\n            f.allAttributes.put(\"indexed\", Boolean.toString(schemaField.indexed()));\n            f.allAttributes.put(\"stored\", Boolean.toString(schemaField.stored()));\n            f.allAttributes.put(\"defaultValue\", schemaField.getDefaultValue());\n          } else {\n            f.toWrite = false;\n          }\n        }\n        fields.put(f.getName(), f);\n        f.entity = e;\n        f.allAttributes.put(\"boost\", f.boost.toString());\n        f.allAttributes.put(\"toWrite\", Boolean.toString(f.toWrite));\n        e.allFieldsList.add(Collections.unmodifiableMap(f.allAttributes));\n      }\n    }\n    e.allFieldsList = Collections.unmodifiableList(e.allFieldsList);\n    e.allAttributes = Collections.unmodifiableMap(e.allAttributes);\n\n    if (e.entities == null)\n      return;\n    for (DataConfig.Entity e1 : e.entities) {\n      e1.parentEntity = e;\n      initEntity(e1, fields, e.isDocRoot || docRootFound);\n    }\n\n  }\n\n","sourceOld":"  private void initEntity(DataConfig.Entity e,\n                          Map<String, DataConfig.Field> fields, boolean docRootFound) {\n    e.allAttributes.put(DATA_SRC, e.dataSource);\n\n    if (!docRootFound && !\"false\".equals(e.docRoot)) {\n      // if in this chain no document root is found()\n      e.isDocRoot = true;\n    }\n    if (e.allAttributes.get(\"threads\") != null) {\n      if(docRootFound) throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"'threads' not allowed below rootEntity \");\n      config.isMultiThreaded = true;      \n    }\n\n    if (e.fields != null) {\n      for (DataConfig.Field f : e.fields) {\n        if (schema != null) {\n          if(f.name != null && f.name.contains(\"${\")){\n            f.dynamicName = true;\n            continue;\n          }\n          SchemaField schemaField = schema.getFieldOrNull(f.getName());\n          if (schemaField == null) {\n            schemaField = config.lowerNameVsSchemaField.get(f.getName().toLowerCase(Locale.ENGLISH));\n            if (schemaField != null) f.name = schemaField.getName();\n          }\n          if (schemaField != null) {\n            f.multiValued = schemaField.multiValued();\n            f.allAttributes.put(MULTI_VALUED, Boolean.toString(schemaField\n                    .multiValued()));\n            f.allAttributes.put(TYPE, schemaField.getType().getTypeName());\n            f.allAttributes.put(\"indexed\", Boolean.toString(schemaField.indexed()));\n            f.allAttributes.put(\"stored\", Boolean.toString(schemaField.stored()));\n            f.allAttributes.put(\"defaultValue\", schemaField.getDefaultValue());\n          } else {\n            f.toWrite = false;\n          }\n        }\n        fields.put(f.getName(), f);\n        f.entity = e;\n        f.allAttributes.put(\"boost\", f.boost.toString());\n        f.allAttributes.put(\"toWrite\", Boolean.toString(f.toWrite));\n        e.allFieldsList.add(Collections.unmodifiableMap(f.allAttributes));\n      }\n    }\n    e.allFieldsList = Collections.unmodifiableList(e.allFieldsList);\n    e.allAttributes = Collections.unmodifiableMap(e.allAttributes);\n\n    if (e.entities == null)\n      return;\n    for (DataConfig.Entity e1 : e.entities) {\n      e1.parentEntity = e;\n      initEntity(e1, fields, e.isDocRoot || docRootFound);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b84e23a1c994ea309896dd9424563e0092f3607","date":1332774278,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#initEntity(DataConfig.Entity,Map[String,DataConfig.Field],boolean).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#initEntity(DataConfig.Entity,Map[String,DataConfig.Field],boolean).mjava","sourceNew":"  private void initEntity(DataConfig.Entity e,\n                          Map<String, DataConfig.Field> fields, boolean docRootFound) {\n    e.allAttributes.put(DATA_SRC, e.dataSource);\n\n    if (!docRootFound && !\"false\".equals(e.docRoot)) {\n      // if in this chain no document root is found()\n      e.isDocRoot = true;\n    }\n    if (e.fields != null) {\n      for (DataConfig.Field f : e.fields) {\n        if (schema != null) {\n          if(f.name != null && f.name.contains(\"${\")){\n            f.dynamicName = true;\n            continue;\n          }\n          SchemaField schemaField = schema.getFieldOrNull(f.getName());\n          if (schemaField == null) {\n            schemaField = config.lowerNameVsSchemaField.get(f.getName().toLowerCase(Locale.ENGLISH));\n            if (schemaField != null) f.name = schemaField.getName();\n          }\n          if (schemaField != null) {\n            f.multiValued = schemaField.multiValued();\n            f.allAttributes.put(MULTI_VALUED, Boolean.toString(schemaField\n                    .multiValued()));\n            f.allAttributes.put(TYPE, schemaField.getType().getTypeName());\n            f.allAttributes.put(\"indexed\", Boolean.toString(schemaField.indexed()));\n            f.allAttributes.put(\"stored\", Boolean.toString(schemaField.stored()));\n            f.allAttributes.put(\"defaultValue\", schemaField.getDefaultValue());\n          } else {\n            f.toWrite = false;\n          }\n        }\n        fields.put(f.getName(), f);\n        f.entity = e;\n        f.allAttributes.put(\"boost\", f.boost.toString());\n        f.allAttributes.put(\"toWrite\", Boolean.toString(f.toWrite));\n        e.allFieldsList.add(Collections.unmodifiableMap(f.allAttributes));\n      }\n    }\n    e.allFieldsList = Collections.unmodifiableList(e.allFieldsList);\n    e.allAttributes = Collections.unmodifiableMap(e.allAttributes);\n\n    if (e.entities == null)\n      return;\n    for (DataConfig.Entity e1 : e.entities) {\n      e1.parentEntity = e;\n      initEntity(e1, fields, e.isDocRoot || docRootFound);\n    }\n\n  }\n\n","sourceOld":"  private void initEntity(DataConfig.Entity e,\n                          Map<String, DataConfig.Field> fields, boolean docRootFound) {\n    e.allAttributes.put(DATA_SRC, e.dataSource);\n\n    if (!docRootFound && !\"false\".equals(e.docRoot)) {\n      // if in this chain no document root is found()\n      e.isDocRoot = true;\n    }\n    if (e.allAttributes.get(\"threads\") != null) {\n      if(docRootFound) throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"'threads' not allowed below rootEntity \");\n      config.isMultiThreaded = true;      \n    }\n\n    if (e.fields != null) {\n      for (DataConfig.Field f : e.fields) {\n        if (schema != null) {\n          if(f.name != null && f.name.contains(\"${\")){\n            f.dynamicName = true;\n            continue;\n          }\n          SchemaField schemaField = schema.getFieldOrNull(f.getName());\n          if (schemaField == null) {\n            schemaField = config.lowerNameVsSchemaField.get(f.getName().toLowerCase(Locale.ENGLISH));\n            if (schemaField != null) f.name = schemaField.getName();\n          }\n          if (schemaField != null) {\n            f.multiValued = schemaField.multiValued();\n            f.allAttributes.put(MULTI_VALUED, Boolean.toString(schemaField\n                    .multiValued()));\n            f.allAttributes.put(TYPE, schemaField.getType().getTypeName());\n            f.allAttributes.put(\"indexed\", Boolean.toString(schemaField.indexed()));\n            f.allAttributes.put(\"stored\", Boolean.toString(schemaField.stored()));\n            f.allAttributes.put(\"defaultValue\", schemaField.getDefaultValue());\n          } else {\n            f.toWrite = false;\n          }\n        }\n        fields.put(f.getName(), f);\n        f.entity = e;\n        f.allAttributes.put(\"boost\", f.boost.toString());\n        f.allAttributes.put(\"toWrite\", Boolean.toString(f.toWrite));\n        e.allFieldsList.add(Collections.unmodifiableMap(f.allAttributes));\n      }\n    }\n    e.allFieldsList = Collections.unmodifiableList(e.allFieldsList);\n    e.allAttributes = Collections.unmodifiableMap(e.allAttributes);\n\n    if (e.entities == null)\n      return;\n    for (DataConfig.Entity e1 : e.entities) {\n      e1.parentEntity = e;\n      initEntity(e1, fields, e.isDocRoot || docRootFound);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c","date":1335805170,"type":4,"author":"James Dyer","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#initEntity(DataConfig.Entity,Map[String,DataConfig.Field],boolean).mjava","sourceNew":null,"sourceOld":"  private void initEntity(DataConfig.Entity e,\n                          Map<String, DataConfig.Field> fields, boolean docRootFound) {\n    e.allAttributes.put(DATA_SRC, e.dataSource);\n\n    if (!docRootFound && !\"false\".equals(e.docRoot)) {\n      // if in this chain no document root is found()\n      e.isDocRoot = true;\n    }\n    if (e.fields != null) {\n      for (DataConfig.Field f : e.fields) {\n        if (schema != null) {\n          if(f.name != null && f.name.contains(\"${\")){\n            f.dynamicName = true;\n            continue;\n          }\n          SchemaField schemaField = schema.getFieldOrNull(f.getName());\n          if (schemaField == null) {\n            schemaField = config.lowerNameVsSchemaField.get(f.getName().toLowerCase(Locale.ENGLISH));\n            if (schemaField != null) f.name = schemaField.getName();\n          }\n          if (schemaField != null) {\n            f.multiValued = schemaField.multiValued();\n            f.allAttributes.put(MULTI_VALUED, Boolean.toString(schemaField\n                    .multiValued()));\n            f.allAttributes.put(TYPE, schemaField.getType().getTypeName());\n            f.allAttributes.put(\"indexed\", Boolean.toString(schemaField.indexed()));\n            f.allAttributes.put(\"stored\", Boolean.toString(schemaField.stored()));\n            f.allAttributes.put(\"defaultValue\", schemaField.getDefaultValue());\n          } else {\n            f.toWrite = false;\n          }\n        }\n        fields.put(f.getName(), f);\n        f.entity = e;\n        f.allAttributes.put(\"boost\", f.boost.toString());\n        f.allAttributes.put(\"toWrite\", Boolean.toString(f.toWrite));\n        e.allFieldsList.add(Collections.unmodifiableMap(f.allAttributes));\n      }\n    }\n    e.allFieldsList = Collections.unmodifiableList(e.allFieldsList);\n    e.allAttributes = Collections.unmodifiableMap(e.allAttributes);\n\n    if (e.entities == null)\n      return;\n    for (DataConfig.Entity e1 : e.entities) {\n      e1.parentEntity = e;\n      initEntity(e1, fields, e.isDocRoot || docRootFound);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4b84e23a1c994ea309896dd9424563e0092f3607":["c26f00b574427b55127e869b935845554afde1fa"],"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c":["4b84e23a1c994ea309896dd9424563e0092f3607"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c"]},"commit2Childs":{"4b84e23a1c994ea309896dd9424563e0092f3607":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c"],"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["4b84e23a1c994ea309896dd9424563e0092f3607"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}