{"path":"src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getSpanQueryScorer(Query,String,CachingTokenFilter,SolrQueryRequest).mjava","commits":[{"id":"c013889a237f29c0b690ee86faa24c165860f3f8","date":1211577805,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getSpanQueryScorer(Query,String,CachingTokenFilter,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return a SpanScorer suitable for this Query and field.\n   * @param query The current query\n   * @param tokenStream document text CachingTokenStream\n   * @param fieldName The name of the field\n   * @param request The SolrQueryRequest\n   * @throws IOException \n   */\n  private SpanScorer getSpanQueryScorer(Query query, String fieldName, CachingTokenFilter tokenStream, SolrQueryRequest request) throws IOException {\n    boolean reqFieldMatch = request.getParams().getFieldBool(fieldName, HighlightParams.FIELD_MATCH, false);\n    if (reqFieldMatch) {\n      return new SpanScorer(query, fieldName, tokenStream);\n    }\n    else {\n      return new SpanScorer(query, null, tokenStream);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","fbdd7b4f937ad415349159b57272901047d49af4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fbdd7b4f937ad415349159b57272901047d49af4","date":1242391451,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getSpanQueryScorer(Query,String,CachingTokenFilter,SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getSpanQueryScorer(Query,String,CachingTokenFilter,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Return a SpanScorer suitable for this Query and field.\n   * @param query The current query\n   * @param tokenStream document text CachingTokenStream\n   * @param fieldName The name of the field\n   * @param request The SolrQueryRequest\n   * @throws IOException \n   */\n  private SpanScorer getSpanQueryScorer(Query query, String fieldName, CachingTokenFilter tokenStream, SolrQueryRequest request) throws IOException {\n    boolean reqFieldMatch = request.getParams().getFieldBool(fieldName, HighlightParams.FIELD_MATCH, false);\n    Boolean highlightMultiTerm = request.getParams().getBool(HighlightParams.HIGHLIGHT_MULTI_TERM);\n    if(highlightMultiTerm == null) {\n      highlightMultiTerm = false;\n    }\n\n    if (reqFieldMatch) {\n      return new SpanScorer(query, fieldName, tokenStream, highlightMultiTerm);\n    }\n    else {\n      return new SpanScorer(query, null, tokenStream, highlightMultiTerm);\n    }\n  }\n\n","sourceOld":"  /**\n   * Return a SpanScorer suitable for this Query and field.\n   * @param query The current query\n   * @param tokenStream document text CachingTokenStream\n   * @param fieldName The name of the field\n   * @param request The SolrQueryRequest\n   * @throws IOException \n   */\n  private SpanScorer getSpanQueryScorer(Query query, String fieldName, CachingTokenFilter tokenStream, SolrQueryRequest request) throws IOException {\n    boolean reqFieldMatch = request.getParams().getFieldBool(fieldName, HighlightParams.FIELD_MATCH, false);\n    if (reqFieldMatch) {\n      return new SpanScorer(query, fieldName, tokenStream);\n    }\n    else {\n      return new SpanScorer(query, null, tokenStream);\n    }\n  }\n\n","bugFix":["c013889a237f29c0b690ee86faa24c165860f3f8"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c20f931a6f10b153366015604398a5eb7a4d17fa","date":1249615266,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getSpanQueryScorer(Query,String,TokenStream,SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getSpanQueryScorer(Query,String,CachingTokenFilter,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Return a SpanScorer suitable for this Query and field.\n   * @param query The current query\n   * @param tokenStream document text CachingTokenStream\n   * @param fieldName The name of the field\n   * @param request The SolrQueryRequest\n   * @throws IOException \n   */\n  private QueryScorer getSpanQueryScorer(Query query, String fieldName, TokenStream tokenStream, SolrQueryRequest request) throws IOException {\n    boolean reqFieldMatch = request.getParams().getFieldBool(fieldName, HighlightParams.FIELD_MATCH, false);\n    Boolean highlightMultiTerm = request.getParams().getBool(HighlightParams.HIGHLIGHT_MULTI_TERM);\n    if(highlightMultiTerm == null) {\n      highlightMultiTerm = false;\n    }\n    QueryScorer scorer;\n    if (reqFieldMatch) {\n      scorer = new QueryScorer(query, fieldName);\n    }\n    else {\n      scorer = new QueryScorer(query, null);\n    }\n    scorer.setExpandMultiTermQuery(highlightMultiTerm);\n    return scorer;\n  }\n\n","sourceOld":"  /**\n   * Return a SpanScorer suitable for this Query and field.\n   * @param query The current query\n   * @param tokenStream document text CachingTokenStream\n   * @param fieldName The name of the field\n   * @param request The SolrQueryRequest\n   * @throws IOException \n   */\n  private SpanScorer getSpanQueryScorer(Query query, String fieldName, CachingTokenFilter tokenStream, SolrQueryRequest request) throws IOException {\n    boolean reqFieldMatch = request.getParams().getFieldBool(fieldName, HighlightParams.FIELD_MATCH, false);\n    Boolean highlightMultiTerm = request.getParams().getBool(HighlightParams.HIGHLIGHT_MULTI_TERM);\n    if(highlightMultiTerm == null) {\n      highlightMultiTerm = false;\n    }\n\n    if (reqFieldMatch) {\n      return new SpanScorer(query, fieldName, tokenStream, highlightMultiTerm);\n    }\n    else {\n      return new SpanScorer(query, null, tokenStream, highlightMultiTerm);\n    }\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c20f931a6f10b153366015604398a5eb7a4d17fa":["fbdd7b4f937ad415349159b57272901047d49af4"],"fbdd7b4f937ad415349159b57272901047d49af4":["c013889a237f29c0b690ee86faa24c165860f3f8"],"c013889a237f29c0b690ee86faa24c165860f3f8":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c20f931a6f10b153366015604398a5eb7a4d17fa":[],"fbdd7b4f937ad415349159b57272901047d49af4":["c20f931a6f10b153366015604398a5eb7a4d17fa"],"c013889a237f29c0b690ee86faa24c165860f3f8":["fbdd7b4f937ad415349159b57272901047d49af4"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["c013889a237f29c0b690ee86faa24c165860f3f8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c20f931a6f10b153366015604398a5eb7a4d17fa","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}