{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest#testFirstTokenPositionIncrement().mjava","commits":[{"id":"0d8ddc12dae0634654a3f363c0f211dccebc3d7b","date":1366637163,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest#testFirstTokenPositionIncrement().mjava","pathOld":"/dev/null","sourceNew":"  public void testFirstTokenPositionIncrement() throws Exception {\n    TokenStream ts = new MockTokenizer(new StringReader(\"a abc\"), MockTokenizer.WHITESPACE, false);\n    ts = new PositionFilter(ts, 0); // All but first token will get 0 position increment\n    EdgeNGramTokenFilter filter = new EdgeNGramTokenFilter(ts, EdgeNGramTokenFilter.Side.FRONT, 2, 3);\n    // The first token \"a\" will not be output, since it's smaller than the mingram size of 2.\n    // The second token on input to EdgeNGramTokenFilter will have position increment of 0,\n    // which should be increased to 1, since this is the first output token in the stream.\n    assertTokenStreamContents(filter,\n        new String[] { \"ab\", \"abc\" },\n        new int[]    {    2,     2 },\n        new int[]    {    4,     5 },\n        new int[]    {    1,     0 }\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"523c1863d7ec17e9a5067cef7e233c388f8ab263","date":1367931848,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest#testFirstTokenPositionIncrement().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest#testFirstTokenPositionIncrement().mjava","sourceNew":"  public void testFirstTokenPositionIncrement() throws Exception {\n    TokenStream ts = new MockTokenizer(new StringReader(\"a abc\"), MockTokenizer.WHITESPACE, false);\n    ts = new PositionFilter(ts, 0); // All but first token will get 0 position increment\n    EdgeNGramTokenFilter filter = new EdgeNGramTokenFilter(TEST_VERSION_CURRENT, ts, EdgeNGramTokenFilter.Side.FRONT, 2, 3);\n    // The first token \"a\" will not be output, since it's smaller than the mingram size of 2.\n    // The second token on input to EdgeNGramTokenFilter will have position increment of 0,\n    // which should be increased to 1, since this is the first output token in the stream.\n    assertTokenStreamContents(filter,\n        new String[] { \"ab\", \"abc\" },\n        new int[]    {    2,     2 },\n        new int[]    {    5,     5 },\n        new int[]    {    1,     0 }\n    );\n  }\n\n","sourceOld":"  public void testFirstTokenPositionIncrement() throws Exception {\n    TokenStream ts = new MockTokenizer(new StringReader(\"a abc\"), MockTokenizer.WHITESPACE, false);\n    ts = new PositionFilter(ts, 0); // All but first token will get 0 position increment\n    EdgeNGramTokenFilter filter = new EdgeNGramTokenFilter(ts, EdgeNGramTokenFilter.Side.FRONT, 2, 3);\n    // The first token \"a\" will not be output, since it's smaller than the mingram size of 2.\n    // The second token on input to EdgeNGramTokenFilter will have position increment of 0,\n    // which should be increased to 1, since this is the first output token in the stream.\n    assertTokenStreamContents(filter,\n        new String[] { \"ab\", \"abc\" },\n        new int[]    {    2,     2 },\n        new int[]    {    4,     5 },\n        new int[]    {    1,     0 }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7567347acd9579d742a2ffd4feb1a32062fb1bc3","date":1367935406,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest#testFirstTokenPositionIncrement().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest#testFirstTokenPositionIncrement().mjava","sourceNew":"  public void testFirstTokenPositionIncrement() throws Exception {\n    TokenStream ts = new MockTokenizer(new StringReader(\"a abc\"), MockTokenizer.WHITESPACE, false);\n    ts = new PositionFilter(ts, 0); // All but first token will get 0 position increment\n    EdgeNGramTokenFilter filter = new EdgeNGramTokenFilter(TEST_VERSION_CURRENT, ts, 2, 3);\n    // The first token \"a\" will not be output, since it's smaller than the mingram size of 2.\n    // The second token on input to EdgeNGramTokenFilter will have position increment of 0,\n    // which should be increased to 1, since this is the first output token in the stream.\n    assertTokenStreamContents(filter,\n        new String[] { \"ab\", \"abc\" },\n        new int[]    {    2,     2 },\n        new int[]    {    5,     5 },\n        new int[]    {    1,     0 }\n    );\n  }\n\n","sourceOld":"  public void testFirstTokenPositionIncrement() throws Exception {\n    TokenStream ts = new MockTokenizer(new StringReader(\"a abc\"), MockTokenizer.WHITESPACE, false);\n    ts = new PositionFilter(ts, 0); // All but first token will get 0 position increment\n    EdgeNGramTokenFilter filter = new EdgeNGramTokenFilter(TEST_VERSION_CURRENT, ts, EdgeNGramTokenFilter.Side.FRONT, 2, 3);\n    // The first token \"a\" will not be output, since it's smaller than the mingram size of 2.\n    // The second token on input to EdgeNGramTokenFilter will have position increment of 0,\n    // which should be increased to 1, since this is the first output token in the stream.\n    assertTokenStreamContents(filter,\n        new String[] { \"ab\", \"abc\" },\n        new int[]    {    2,     2 },\n        new int[]    {    5,     5 },\n        new int[]    {    1,     0 }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4249936d432418bbe1208a383729593c450cb376","date":1368717068,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest#testFirstTokenPositionIncrement().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest#testFirstTokenPositionIncrement().mjava","sourceNew":"  public void testFirstTokenPositionIncrement() throws Exception {\n    TokenStream ts = new MockTokenizer(new StringReader(\"a abc\"), MockTokenizer.WHITESPACE, false);\n    ts = new PositionFilter(ts); // All but first token will get 0 position increment\n    EdgeNGramTokenFilter filter = new EdgeNGramTokenFilter(TEST_VERSION_CURRENT, ts, 2, 3);\n    // The first token \"a\" will not be output, since it's smaller than the mingram size of 2.\n    // The second token on input to EdgeNGramTokenFilter will have position increment of 0,\n    // which should be increased to 1, since this is the first output token in the stream.\n    assertTokenStreamContents(filter,\n        new String[] { \"ab\", \"abc\" },\n        new int[]    {    2,     2 },\n        new int[]    {    5,     5 },\n        new int[]    {    1,     0 }\n    );\n  }\n\n","sourceOld":"  public void testFirstTokenPositionIncrement() throws Exception {\n    TokenStream ts = new MockTokenizer(new StringReader(\"a abc\"), MockTokenizer.WHITESPACE, false);\n    ts = new PositionFilter(ts, 0); // All but first token will get 0 position increment\n    EdgeNGramTokenFilter filter = new EdgeNGramTokenFilter(TEST_VERSION_CURRENT, ts, 2, 3);\n    // The first token \"a\" will not be output, since it's smaller than the mingram size of 2.\n    // The second token on input to EdgeNGramTokenFilter will have position increment of 0,\n    // which should be increased to 1, since this is the first output token in the stream.\n    assertTokenStreamContents(filter,\n        new String[] { \"ab\", \"abc\" },\n        new int[]    {    2,     2 },\n        new int[]    {    5,     5 },\n        new int[]    {    1,     0 }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest#testFirstTokenPositionIncrement().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest#testFirstTokenPositionIncrement().mjava","sourceNew":"  public void testFirstTokenPositionIncrement() throws Exception {\n    TokenStream ts = whitespaceMockTokenizer(\"a abc\");\n    ts = new PositionFilter(ts); // All but first token will get 0 position increment\n    EdgeNGramTokenFilter filter = new EdgeNGramTokenFilter(TEST_VERSION_CURRENT, ts, 2, 3);\n    // The first token \"a\" will not be output, since it's smaller than the mingram size of 2.\n    // The second token on input to EdgeNGramTokenFilter will have position increment of 0,\n    // which should be increased to 1, since this is the first output token in the stream.\n    assertTokenStreamContents(filter,\n        new String[] { \"ab\", \"abc\" },\n        new int[]    {    2,     2 },\n        new int[]    {    5,     5 },\n        new int[]    {    1,     0 }\n    );\n  }\n\n","sourceOld":"  public void testFirstTokenPositionIncrement() throws Exception {\n    TokenStream ts = new MockTokenizer(new StringReader(\"a abc\"), MockTokenizer.WHITESPACE, false);\n    ts = new PositionFilter(ts); // All but first token will get 0 position increment\n    EdgeNGramTokenFilter filter = new EdgeNGramTokenFilter(TEST_VERSION_CURRENT, ts, 2, 3);\n    // The first token \"a\" will not be output, since it's smaller than the mingram size of 2.\n    // The second token on input to EdgeNGramTokenFilter will have position increment of 0,\n    // which should be increased to 1, since this is the first output token in the stream.\n    assertTokenStreamContents(filter,\n        new String[] { \"ab\", \"abc\" },\n        new int[]    {    2,     2 },\n        new int[]    {    5,     5 },\n        new int[]    {    1,     0 }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest#testFirstTokenPositionIncrement().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest#testFirstTokenPositionIncrement().mjava","sourceNew":"  public void testFirstTokenPositionIncrement() throws Exception {\n    TokenStream ts = whitespaceMockTokenizer(\"a abc\");\n    ts = new PositionFilter(ts); // All but first token will get 0 position increment\n    EdgeNGramTokenFilter filter = new EdgeNGramTokenFilter(ts, 2, 3);\n    // The first token \"a\" will not be output, since it's smaller than the mingram size of 2.\n    // The second token on input to EdgeNGramTokenFilter will have position increment of 0,\n    // which should be increased to 1, since this is the first output token in the stream.\n    assertTokenStreamContents(filter,\n        new String[] { \"ab\", \"abc\" },\n        new int[]    {    2,     2 },\n        new int[]    {    5,     5 },\n        new int[]    {    1,     0 }\n    );\n  }\n\n","sourceOld":"  public void testFirstTokenPositionIncrement() throws Exception {\n    TokenStream ts = whitespaceMockTokenizer(\"a abc\");\n    ts = new PositionFilter(ts); // All but first token will get 0 position increment\n    EdgeNGramTokenFilter filter = new EdgeNGramTokenFilter(TEST_VERSION_CURRENT, ts, 2, 3);\n    // The first token \"a\" will not be output, since it's smaller than the mingram size of 2.\n    // The second token on input to EdgeNGramTokenFilter will have position increment of 0,\n    // which should be increased to 1, since this is the first output token in the stream.\n    assertTokenStreamContents(filter,\n        new String[] { \"ab\", \"abc\" },\n        new int[]    {    2,     2 },\n        new int[]    {    5,     5 },\n        new int[]    {    1,     0 }\n    );\n  }\n\n","bugFix":null,"bugIntro":["8a255765a5625ff80fba75863de5a16ea392015e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8a255765a5625ff80fba75863de5a16ea392015e","date":1528161860,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest#testFirstTokenPositionIncrement().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest#testFirstTokenPositionIncrement().mjava","sourceNew":"  public void testFirstTokenPositionIncrement() throws Exception {\n    TokenStream ts = whitespaceMockTokenizer(\"a abc\");\n    ts = new PositionFilter(ts); // All but first token will get 0 position increment\n    EdgeNGramTokenFilter filter = new EdgeNGramTokenFilter(ts, 2, 3, false);\n    // The first token \"a\" will not be output, since it's smaller than the mingram size of 2.\n    // The second token on input to EdgeNGramTokenFilter will have position increment of 0,\n    // which should be increased to 1, since this is the first output token in the stream.\n    assertTokenStreamContents(filter,\n        new String[] { \"ab\", \"abc\" },\n        new int[]    {    2,     2 },\n        new int[]    {    5,     5 },\n        new int[]    {    1,     0 }\n    );\n  }\n\n","sourceOld":"  public void testFirstTokenPositionIncrement() throws Exception {\n    TokenStream ts = whitespaceMockTokenizer(\"a abc\");\n    ts = new PositionFilter(ts); // All but first token will get 0 position increment\n    EdgeNGramTokenFilter filter = new EdgeNGramTokenFilter(ts, 2, 3);\n    // The first token \"a\" will not be output, since it's smaller than the mingram size of 2.\n    // The second token on input to EdgeNGramTokenFilter will have position increment of 0,\n    // which should be increased to 1, since this is the first output token in the stream.\n    assertTokenStreamContents(filter,\n        new String[] { \"ab\", \"abc\" },\n        new int[]    {    2,     2 },\n        new int[]    {    5,     5 },\n        new int[]    {    1,     0 }\n    );\n  }\n\n","bugFix":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest#testFirstTokenPositionIncrement().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest#testFirstTokenPositionIncrement().mjava","sourceNew":"  public void testFirstTokenPositionIncrement() throws Exception {\n    TokenStream ts = whitespaceMockTokenizer(\"a abc\");\n    ts = new PositionFilter(ts); // All but first token will get 0 position increment\n    EdgeNGramTokenFilter filter = new EdgeNGramTokenFilter(ts, 2, 3, false);\n    // The first token \"a\" will not be output, since it's smaller than the mingram size of 2.\n    // The second token on input to EdgeNGramTokenFilter will have position increment of 0,\n    // which should be increased to 1, since this is the first output token in the stream.\n    assertTokenStreamContents(filter,\n        new String[] { \"ab\", \"abc\" },\n        new int[]    {    2,     2 },\n        new int[]    {    5,     5 },\n        new int[]    {    1,     0 }\n    );\n  }\n\n","sourceOld":"  public void testFirstTokenPositionIncrement() throws Exception {\n    TokenStream ts = whitespaceMockTokenizer(\"a abc\");\n    ts = new PositionFilter(ts); // All but first token will get 0 position increment\n    EdgeNGramTokenFilter filter = new EdgeNGramTokenFilter(ts, 2, 3);\n    // The first token \"a\" will not be output, since it's smaller than the mingram size of 2.\n    // The second token on input to EdgeNGramTokenFilter will have position increment of 0,\n    // which should be increased to 1, since this is the first output token in the stream.\n    assertTokenStreamContents(filter,\n        new String[] { \"ab\", \"abc\" },\n        new int[]    {    2,     2 },\n        new int[]    {    5,     5 },\n        new int[]    {    1,     0 }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest#testFirstTokenPositionIncrement().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest#testFirstTokenPositionIncrement().mjava","sourceNew":"  public void testFirstTokenPositionIncrement() throws Exception {\n    TokenStream ts = whitespaceMockTokenizer(\"a abc\");\n    ts = new PositionFilter(ts); // All but first token will get 0 position increment\n    EdgeNGramTokenFilter filter = new EdgeNGramTokenFilter(ts, 2, 3, false);\n    // The first token \"a\" will not be output, since it's smaller than the mingram size of 2.\n    // The second token on input to EdgeNGramTokenFilter will have position increment of 0,\n    // which should be increased to 1, since this is the first output token in the stream.\n    assertTokenStreamContents(filter,\n        new String[] { \"ab\", \"abc\" },\n        new int[]    {    2,     2 },\n        new int[]    {    5,     5 },\n        new int[]    {    1,     0 }\n    );\n  }\n\n","sourceOld":"  public void testFirstTokenPositionIncrement() throws Exception {\n    TokenStream ts = whitespaceMockTokenizer(\"a abc\");\n    ts = new PositionFilter(ts); // All but first token will get 0 position increment\n    EdgeNGramTokenFilter filter = new EdgeNGramTokenFilter(ts, 2, 3);\n    // The first token \"a\" will not be output, since it's smaller than the mingram size of 2.\n    // The second token on input to EdgeNGramTokenFilter will have position increment of 0,\n    // which should be increased to 1, since this is the first output token in the stream.\n    assertTokenStreamContents(filter,\n        new String[] { \"ab\", \"abc\" },\n        new int[]    {    2,     2 },\n        new int[]    {    5,     5 },\n        new int[]    {    1,     0 }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d8ddc12dae0634654a3f363c0f211dccebc3d7b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"523c1863d7ec17e9a5067cef7e233c388f8ab263":["0d8ddc12dae0634654a3f363c0f211dccebc3d7b"],"8a255765a5625ff80fba75863de5a16ea392015e":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["4249936d432418bbe1208a383729593c450cb376"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["379db3ad24c4f0214f30a122265a6d6be003a99d","8a255765a5625ff80fba75863de5a16ea392015e"],"4249936d432418bbe1208a383729593c450cb376":["7567347acd9579d742a2ffd4feb1a32062fb1bc3"],"f592209545c71895260367152601e9200399776d":["379db3ad24c4f0214f30a122265a6d6be003a99d","8a255765a5625ff80fba75863de5a16ea392015e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8a255765a5625ff80fba75863de5a16ea392015e"],"7567347acd9579d742a2ffd4feb1a32062fb1bc3":["523c1863d7ec17e9a5067cef7e233c388f8ab263"]},"commit2Childs":{"0d8ddc12dae0634654a3f363c0f211dccebc3d7b":["523c1863d7ec17e9a5067cef7e233c388f8ab263"],"523c1863d7ec17e9a5067cef7e233c388f8ab263":["7567347acd9579d742a2ffd4feb1a32062fb1bc3"],"8a255765a5625ff80fba75863de5a16ea392015e":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d8ddc12dae0634654a3f363c0f211dccebc3d7b"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["8a255765a5625ff80fba75863de5a16ea392015e","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"4249936d432418bbe1208a383729593c450cb376":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"f592209545c71895260367152601e9200399776d":[],"7567347acd9579d742a2ffd4feb1a32062fb1bc3":["4249936d432418bbe1208a383729593c450cb376"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}