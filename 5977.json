{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestSuggestField#testThreads().mjava","commits":[{"id":"8c33f6677a2078739058f81eca1df69d12cd62b0","date":1432799589,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestSuggestField#testThreads().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/SuggestFieldTest#testThreads().mjava","sourceNew":"  @Test\n  public void testThreads() throws Exception {\n    final Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field_1\", \"suggest_field_2\", \"suggest_field_3\"));\n    int num = Math.min(1000, atLeast(100));\n    final String prefix1 = \"abc1_\";\n    final String prefix2 = \"abc2_\";\n    final String prefix3 = \"abc3_\";\n    final Entry[] entries1 = new Entry[num];\n    final Entry[] entries2 = new Entry[num];\n    final Entry[] entries3 = new Entry[num];\n    for (int i = 0; i < num; i++) {\n      int weight = num - (i + 1);\n      entries1[i] = new Entry(prefix1 + weight, weight);\n      entries2[i] = new Entry(prefix2 + weight, weight);\n      entries3[i] = new Entry(prefix3 + weight, weight);\n    }\n    for (int i = 0; i < num; i++) {\n      Document doc = new Document();\n      doc.add(new SuggestField(\"suggest_field_1\", prefix1 + i, i));\n      doc.add(new SuggestField(\"suggest_field_2\", prefix2 + i, i));\n      doc.add(new SuggestField(\"suggest_field_3\", prefix3 + i, i));\n      iw.addDocument(doc);\n\n      if (rarely()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CyclicBarrier startingGun = new CyclicBarrier(numThreads+1);\n    final CopyOnWriteArrayList<Throwable> errors = new CopyOnWriteArrayList<>();\n    final SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader);\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            PrefixCompletionQuery query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field_1\", prefix1));\n            TopSuggestDocs suggest = indexSearcher.suggest(query, num);\n            assertSuggestions(suggest, entries1);\n            query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field_2\", prefix2));\n            suggest = indexSearcher.suggest(query, num);\n            assertSuggestions(suggest, entries2);\n            query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field_3\", prefix3));\n            suggest = indexSearcher.suggest(query, num);\n            assertSuggestions(suggest, entries3);\n          } catch (Throwable e) {\n            errors.add(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n\n    startingGun.await();\n    for (Thread t : threads) {\n      t.join();\n    }\n    assertTrue(errors.toString(), errors.isEmpty());\n\n    reader.close();\n    iw.close();\n  }\n\n","sourceOld":"  @Test\n  public void testThreads() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field_1\", \"suggest_field_2\", \"suggest_field_3\"));\n    int num = Math.min(1000, atLeast(100));\n    final String prefix1 = \"abc1_\";\n    final String prefix2 = \"abc2_\";\n    final String prefix3 = \"abc3_\";\n    final Entry[] entries1 = new Entry[num];\n    final Entry[] entries2 = new Entry[num];\n    final Entry[] entries3 = new Entry[num];\n    for (int i = 0; i < num; i++) {\n      int weight = num - (i + 1);\n      entries1[i] = new Entry(prefix1 + weight, weight);\n      entries2[i] = new Entry(prefix2 + weight, weight);\n      entries3[i] = new Entry(prefix3 + weight, weight);\n    }\n    for (int i = 0; i < num; i++) {\n      Document doc = new Document();\n      doc.add(newSuggestField(\"suggest_field_1\", prefix1 + i, i));\n      doc.add(newSuggestField(\"suggest_field_2\", prefix2 + i, i));\n      doc.add(newSuggestField(\"suggest_field_3\", prefix3 + i, i));\n      iw.addDocument(doc);\n\n      if (rarely()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CyclicBarrier startingGun = new CyclicBarrier(numThreads+1);\n    final CopyOnWriteArrayList<Throwable> errors = new CopyOnWriteArrayList<>();\n    final SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader, analyzer);\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            TopSuggestDocs suggest = indexSearcher.suggest(\"suggest_field_1\", prefix1, num);\n            assertSuggestions(suggest, entries1);\n            suggest = indexSearcher.suggest(\"suggest_field_2\", prefix2, num);\n            assertSuggestions(suggest, entries2);\n            suggest = indexSearcher.suggest(\"suggest_field_3\", prefix3, num);\n            assertSuggestions(suggest, entries3);\n          } catch (Throwable e) {\n            errors.add(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n\n    startingGun.await();\n    for (Thread t : threads) {\n      t.join();\n    }\n    assertTrue(errors.toString(), errors.isEmpty());\n\n    reader.close();\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"902a92b60648a8925bfd9bb53a78669cd2ea98fd","date":1487797466,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestSuggestField#testThreads().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestSuggestField#testThreads().mjava","sourceNew":"  @Test\n  public void testThreads() throws Exception {\n    final Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field_1\", \"suggest_field_2\", \"suggest_field_3\"));\n    int num = Math.min(1000, atLeast(100));\n    final String prefix1 = \"abc1_\";\n    final String prefix2 = \"abc2_\";\n    final String prefix3 = \"abc3_\";\n    final Entry[] entries1 = new Entry[num];\n    final Entry[] entries2 = new Entry[num];\n    final Entry[] entries3 = new Entry[num];\n    for (int i = 0; i < num; i++) {\n      int weight = num - (i + 1);\n      entries1[i] = new Entry(prefix1 + weight, weight);\n      entries2[i] = new Entry(prefix2 + weight, weight);\n      entries3[i] = new Entry(prefix3 + weight, weight);\n    }\n    for (int i = 0; i < num; i++) {\n      Document doc = new Document();\n      doc.add(new SuggestField(\"suggest_field_1\", prefix1 + i, i));\n      doc.add(new SuggestField(\"suggest_field_2\", prefix2 + i, i));\n      doc.add(new SuggestField(\"suggest_field_3\", prefix3 + i, i));\n      iw.addDocument(doc);\n\n      if (rarely()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CyclicBarrier startingGun = new CyclicBarrier(numThreads+1);\n    final CopyOnWriteArrayList<Throwable> errors = new CopyOnWriteArrayList<>();\n    final SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader);\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            PrefixCompletionQuery query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field_1\", prefix1));\n            TopSuggestDocs suggest = indexSearcher.suggest(query, num, false);\n            assertSuggestions(suggest, entries1);\n            query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field_2\", prefix2));\n            suggest = indexSearcher.suggest(query, num, false);\n            assertSuggestions(suggest, entries2);\n            query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field_3\", prefix3));\n            suggest = indexSearcher.suggest(query, num, false);\n            assertSuggestions(suggest, entries3);\n          } catch (Throwable e) {\n            errors.add(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n\n    startingGun.await();\n    for (Thread t : threads) {\n      t.join();\n    }\n    assertTrue(errors.toString(), errors.isEmpty());\n\n    reader.close();\n    iw.close();\n  }\n\n","sourceOld":"  @Test\n  public void testThreads() throws Exception {\n    final Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field_1\", \"suggest_field_2\", \"suggest_field_3\"));\n    int num = Math.min(1000, atLeast(100));\n    final String prefix1 = \"abc1_\";\n    final String prefix2 = \"abc2_\";\n    final String prefix3 = \"abc3_\";\n    final Entry[] entries1 = new Entry[num];\n    final Entry[] entries2 = new Entry[num];\n    final Entry[] entries3 = new Entry[num];\n    for (int i = 0; i < num; i++) {\n      int weight = num - (i + 1);\n      entries1[i] = new Entry(prefix1 + weight, weight);\n      entries2[i] = new Entry(prefix2 + weight, weight);\n      entries3[i] = new Entry(prefix3 + weight, weight);\n    }\n    for (int i = 0; i < num; i++) {\n      Document doc = new Document();\n      doc.add(new SuggestField(\"suggest_field_1\", prefix1 + i, i));\n      doc.add(new SuggestField(\"suggest_field_2\", prefix2 + i, i));\n      doc.add(new SuggestField(\"suggest_field_3\", prefix3 + i, i));\n      iw.addDocument(doc);\n\n      if (rarely()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CyclicBarrier startingGun = new CyclicBarrier(numThreads+1);\n    final CopyOnWriteArrayList<Throwable> errors = new CopyOnWriteArrayList<>();\n    final SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader);\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            PrefixCompletionQuery query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field_1\", prefix1));\n            TopSuggestDocs suggest = indexSearcher.suggest(query, num);\n            assertSuggestions(suggest, entries1);\n            query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field_2\", prefix2));\n            suggest = indexSearcher.suggest(query, num);\n            assertSuggestions(suggest, entries2);\n            query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field_3\", prefix3));\n            suggest = indexSearcher.suggest(query, num);\n            assertSuggestions(suggest, entries3);\n          } catch (Throwable e) {\n            errors.add(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n\n    startingGun.await();\n    for (Thread t : threads) {\n      t.join();\n    }\n    assertTrue(errors.toString(), errors.isEmpty());\n\n    reader.close();\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8c33f6677a2078739058f81eca1df69d12cd62b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"902a92b60648a8925bfd9bb53a78669cd2ea98fd":["8c33f6677a2078739058f81eca1df69d12cd62b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["902a92b60648a8925bfd9bb53a78669cd2ea98fd"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c33f6677a2078739058f81eca1df69d12cd62b0"],"8c33f6677a2078739058f81eca1df69d12cd62b0":["902a92b60648a8925bfd9bb53a78669cd2ea98fd"],"902a92b60648a8925bfd9bb53a78669cd2ea98fd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}