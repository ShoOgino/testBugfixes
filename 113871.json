{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","sourceNew":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\")) {\n      clazzName = randomDirectory(random);\n    }\n    \n    try {\n      final Class<? extends Directory> clazz = CommandLineUtil.loadDirectoryClass(clazzName);\n      // If it is a FSDirectory type, try its ctor(File)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final File dir = _TestUtil.getTempDir(\"index\");\n        dir.mkdirs(); // ensure it's created so we 'have' it.\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), dir);\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\")) {\n      clazzName = randomDirectory(random);\n    }\n    \n    try {\n      final Class<? extends Directory> clazz = CommandLineUtil.loadDirectoryClass(clazzName);\n      // If it is a FSDirectory type, try its ctor(File)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final File dir = _TestUtil.getTempDir(\"index\");\n        dir.mkdirs(); // ensure it's created so we 'have' it.\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), dir);\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5da0b42730b6b99b31389ef94cb97384e83b9ede","date":1337107665,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","sourceNew":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\")) {\n      if (rarely(random)) {\n        clazzName = RandomPicks.randomFrom(random, CORE_DIRECTORIES);\n      } else {\n        clazzName = \"RAMDirectory\";\n      }\n    }\n\n    try {\n      final Class<? extends Directory> clazz = CommandLineUtil.loadDirectoryClass(clazzName);\n      // If it is a FSDirectory type, try its ctor(File)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final File dir = _TestUtil.getTempDir(\"index\");\n        dir.mkdirs(); // ensure it's created so we 'have' it.\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), dir);\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\")) {\n      clazzName = randomDirectory(random);\n    }\n    \n    try {\n      final Class<? extends Directory> clazz = CommandLineUtil.loadDirectoryClass(clazzName);\n      // If it is a FSDirectory type, try its ctor(File)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final File dir = _TestUtil.getTempDir(\"index\");\n        dir.mkdirs(); // ensure it's created so we 'have' it.\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), dir);\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","sourceNew":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\")) {\n      if (rarely(random)) {\n        clazzName = RandomPicks.randomFrom(random, CORE_DIRECTORIES);\n      } else {\n        clazzName = \"RAMDirectory\";\n      }\n    }\n\n    try {\n      final Class<? extends Directory> clazz = CommandLineUtil.loadDirectoryClass(clazzName);\n      // If it is a FSDirectory type, try its ctor(File)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final File dir = TestUtil.getTempDir(\"index\");\n        dir.mkdirs(); // ensure it's created so we 'have' it.\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), dir);\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\")) {\n      if (rarely(random)) {\n        clazzName = RandomPicks.randomFrom(random, CORE_DIRECTORIES);\n      } else {\n        clazzName = \"RAMDirectory\";\n      }\n    }\n\n    try {\n      final Class<? extends Directory> clazz = CommandLineUtil.loadDirectoryClass(clazzName);\n      // If it is a FSDirectory type, try its ctor(File)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final File dir = _TestUtil.getTempDir(\"index\");\n        dir.mkdirs(); // ensure it's created so we 'have' it.\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), dir);\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","sourceNew":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\")) {\n      if (rarely(random)) {\n        clazzName = RandomPicks.randomFrom(random, CORE_DIRECTORIES);\n      } else {\n        clazzName = \"RAMDirectory\";\n      }\n    }\n\n    try {\n      final Class<? extends Directory> clazz = CommandLineUtil.loadDirectoryClass(clazzName);\n      // If it is a FSDirectory type, try its ctor(File)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final File dir = TestUtil.createTempDir(\"index\");\n        dir.mkdirs(); // ensure it's created so we 'have' it.\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), dir);\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\")) {\n      if (rarely(random)) {\n        clazzName = RandomPicks.randomFrom(random, CORE_DIRECTORIES);\n      } else {\n        clazzName = \"RAMDirectory\";\n      }\n    }\n\n    try {\n      final Class<? extends Directory> clazz = CommandLineUtil.loadDirectoryClass(clazzName);\n      // If it is a FSDirectory type, try its ctor(File)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final File dir = TestUtil.getTempDir(\"index\");\n        dir.mkdirs(); // ensure it's created so we 'have' it.\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), dir);\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be04a7534a8a0679382542b62556ea5fba6cfb7f","date":1396613089,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","sourceNew":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\")) {\n      if (rarely(random)) {\n        clazzName = RandomPicks.randomFrom(random, CORE_DIRECTORIES);\n      } else {\n        clazzName = \"RAMDirectory\";\n      }\n    }\n\n    try {\n      final Class<? extends Directory> clazz = CommandLineUtil.loadDirectoryClass(clazzName);\n      // If it is a FSDirectory type, try its ctor(File)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final File dir = new File(TestUtil.createTempDir(), \"index\");\n        dir.mkdirs(); // ensure it's created so we 'have' it.\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), dir);\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\")) {\n      if (rarely(random)) {\n        clazzName = RandomPicks.randomFrom(random, CORE_DIRECTORIES);\n      } else {\n        clazzName = \"RAMDirectory\";\n      }\n    }\n\n    try {\n      final Class<? extends Directory> clazz = CommandLineUtil.loadDirectoryClass(clazzName);\n      // If it is a FSDirectory type, try its ctor(File)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final File dir = TestUtil.createTempDir(\"index\");\n        dir.mkdirs(); // ensure it's created so we 'have' it.\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), dir);\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","date":1396633078,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","sourceNew":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\")) {\n      if (rarely(random)) {\n        clazzName = RandomPicks.randomFrom(random, CORE_DIRECTORIES);\n      } else {\n        clazzName = \"RAMDirectory\";\n      }\n    }\n\n    try {\n      final Class<? extends Directory> clazz = CommandLineUtil.loadDirectoryClass(clazzName);\n      // If it is a FSDirectory type, try its ctor(File)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final File dir = createTempDir(\"index-\" + clazzName);\n        dir.mkdirs(); // ensure it's created so we 'have' it.\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), dir);\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\")) {\n      if (rarely(random)) {\n        clazzName = RandomPicks.randomFrom(random, CORE_DIRECTORIES);\n      } else {\n        clazzName = \"RAMDirectory\";\n      }\n    }\n\n    try {\n      final Class<? extends Directory> clazz = CommandLineUtil.loadDirectoryClass(clazzName);\n      // If it is a FSDirectory type, try its ctor(File)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final File dir = new File(TestUtil.createTempDir(), \"index\");\n        dir.mkdirs(); // ensure it's created so we 'have' it.\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), dir);\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c0e11c85a63a4eb8a3f072df2a1d380b7e48c14","date":1396642661,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","sourceNew":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\")) {\n      if (rarely(random)) {\n        clazzName = RandomPicks.randomFrom(random, CORE_DIRECTORIES);\n      } else {\n        clazzName = \"RAMDirectory\";\n      }\n    }\n\n    try {\n      final Class<? extends Directory> clazz = CommandLineUtil.loadDirectoryClass(clazzName);\n      // If it is a FSDirectory type, try its ctor(File)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final File dir = TestUtil.getTempDir(\"index\");\n        dir.mkdirs(); // ensure it's created so we 'have' it.\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), dir);\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      Rethrow.rethrow(e);\n      throw null; // dummy to prevent compiler failure\n    }\n  }\n\n","sourceOld":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\")) {\n      if (rarely(random)) {\n        clazzName = RandomPicks.randomFrom(random, CORE_DIRECTORIES);\n      } else {\n        clazzName = \"RAMDirectory\";\n      }\n    }\n\n    try {\n      final Class<? extends Directory> clazz = CommandLineUtil.loadDirectoryClass(clazzName);\n      // If it is a FSDirectory type, try its ctor(File)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final File dir = TestUtil.getTempDir(\"index\");\n        dir.mkdirs(); // ensure it's created so we 'have' it.\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), dir);\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","sourceNew":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\")) {\n      if (rarely(random)) {\n        clazzName = RandomPicks.randomFrom(random, CORE_DIRECTORIES);\n      } else {\n        clazzName = \"RAMDirectory\";\n      }\n    }\n\n    try {\n      final Class<? extends Directory> clazz = CommandLineUtil.loadDirectoryClass(clazzName);\n      // If it is a FSDirectory type, try its ctor(File)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final File dir = createTempDir(\"index-\" + clazzName);\n        dir.mkdirs(); // ensure it's created so we 'have' it.\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), dir);\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      Rethrow.rethrow(e);\n      throw null; // dummy to prevent compiler failure\n    }\n  }\n\n","sourceOld":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\")) {\n      if (rarely(random)) {\n        clazzName = RandomPicks.randomFrom(random, CORE_DIRECTORIES);\n      } else {\n        clazzName = \"RAMDirectory\";\n      }\n    }\n\n    try {\n      final Class<? extends Directory> clazz = CommandLineUtil.loadDirectoryClass(clazzName);\n      // If it is a FSDirectory type, try its ctor(File)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final File dir = createTempDir(\"index-\" + clazzName);\n        dir.mkdirs(); // ensure it's created so we 'have' it.\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), dir);\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","sourceNew":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\")) {\n      if (rarely(random)) {\n        clazzName = RandomPicks.randomFrom(random, CORE_DIRECTORIES);\n      } else {\n        clazzName = \"RAMDirectory\";\n      }\n    }\n\n    try {\n      final Class<? extends Directory> clazz = CommandLineUtil.loadDirectoryClass(clazzName);\n      // If it is a FSDirectory type, try its ctor(File)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final File dir = createTempDir(\"index-\" + clazzName);\n        dir.mkdirs(); // ensure it's created so we 'have' it.\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), dir);\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      Rethrow.rethrow(e);\n      throw null; // dummy to prevent compiler failure\n    }\n  }\n\n","sourceOld":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\")) {\n      if (rarely(random)) {\n        clazzName = RandomPicks.randomFrom(random, CORE_DIRECTORIES);\n      } else {\n        clazzName = \"RAMDirectory\";\n      }\n    }\n\n    try {\n      final Class<? extends Directory> clazz = CommandLineUtil.loadDirectoryClass(clazzName);\n      // If it is a FSDirectory type, try its ctor(File)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final File dir = TestUtil.getTempDir(\"index\");\n        dir.mkdirs(); // ensure it's created so we 'have' it.\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), dir);\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      Rethrow.rethrow(e);\n      throw null; // dummy to prevent compiler failure\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c15a75016387504d70a40cba6e9314b8885307f0","date":1397542349,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","sourceNew":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\")) {\n      if (rarely(random)) {\n        clazzName = RandomPicks.randomFrom(random, CORE_DIRECTORIES);\n      } else {\n        clazzName = \"RAMDirectory\";\n      }\n    }\n\n    try {\n      final Class<? extends Directory> clazz = CommandLineUtil.loadDirectoryClass(clazzName);\n      // If it is a FSDirectory type, try its ctor(File)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final File dir = createTempDir(\"index-\" + clazzName);\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), dir);\n      }\n\n      // See if it has a File ctor even though it's not an\n      // FSDir subclass:\n      Constructor<? extends Directory> fileCtor = null;\n      try {\n        fileCtor = clazz.getConstructor(File.class);\n      } catch (NoSuchMethodException nsme) {\n        // Ignore\n      }\n\n      if (fileCtor != null) {\n        final File dir = createTempDir(\"index\");\n        return fileCtor.newInstance(dir);\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      Rethrow.rethrow(e);\n      throw null; // dummy to prevent compiler failure\n    }\n  }\n\n","sourceOld":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\")) {\n      if (rarely(random)) {\n        clazzName = RandomPicks.randomFrom(random, CORE_DIRECTORIES);\n      } else {\n        clazzName = \"RAMDirectory\";\n      }\n    }\n\n    try {\n      final Class<? extends Directory> clazz = CommandLineUtil.loadDirectoryClass(clazzName);\n      // If it is a FSDirectory type, try its ctor(File)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final File dir = createTempDir(\"index-\" + clazzName);\n        dir.mkdirs(); // ensure it's created so we 'have' it.\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), dir);\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      Rethrow.rethrow(e);\n      throw null; // dummy to prevent compiler failure\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","sourceNew":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\")) {\n      if (rarely(random)) {\n        clazzName = RandomPicks.randomFrom(random, CORE_DIRECTORIES);\n      } else {\n        clazzName = \"RAMDirectory\";\n      }\n    }\n\n    try {\n      final Class<? extends Directory> clazz = CommandLineUtil.loadDirectoryClass(clazzName);\n      // If it is a FSDirectory type, try its ctor(Path)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final Path dir = createTempDir(\"index-\" + clazzName);\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), dir);\n      }\n\n      // See if it has a Path ctor even though it's not an\n      // FSDir subclass:\n      Constructor<? extends Directory> pathCtor = null;\n      try {\n        pathCtor = clazz.getConstructor(Path.class);\n      } catch (NoSuchMethodException nsme) {\n        // Ignore\n      }\n\n      if (pathCtor != null) {\n        final Path dir = createTempDir(\"index\");\n        return pathCtor.newInstance(dir);\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      Rethrow.rethrow(e);\n      throw null; // dummy to prevent compiler failure\n    }\n  }\n\n","sourceOld":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\")) {\n      if (rarely(random)) {\n        clazzName = RandomPicks.randomFrom(random, CORE_DIRECTORIES);\n      } else {\n        clazzName = \"RAMDirectory\";\n      }\n    }\n\n    try {\n      final Class<? extends Directory> clazz = CommandLineUtil.loadDirectoryClass(clazzName);\n      // If it is a FSDirectory type, try its ctor(File)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final File dir = createTempDir(\"index-\" + clazzName);\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), dir);\n      }\n\n      // See if it has a File ctor even though it's not an\n      // FSDir subclass:\n      Constructor<? extends Directory> fileCtor = null;\n      try {\n        fileCtor = clazz.getConstructor(File.class);\n      } catch (NoSuchMethodException nsme) {\n        // Ignore\n      }\n\n      if (fileCtor != null) {\n        final File dir = createTempDir(\"index\");\n        return fileCtor.newInstance(dir);\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      Rethrow.rethrow(e);\n      throw null; // dummy to prevent compiler failure\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285cdc737de75b7cc7c284a156b20214deb67bca","date":1415535483,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","sourceNew":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    return newDirectoryImpl(random, clazzName, FSLockFactory.getDefault());\n  }\n\n","sourceOld":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\")) {\n      if (rarely(random)) {\n        clazzName = RandomPicks.randomFrom(random, CORE_DIRECTORIES);\n      } else {\n        clazzName = \"RAMDirectory\";\n      }\n    }\n\n    try {\n      final Class<? extends Directory> clazz = CommandLineUtil.loadDirectoryClass(clazzName);\n      // If it is a FSDirectory type, try its ctor(Path)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final Path dir = createTempDir(\"index-\" + clazzName);\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), dir);\n      }\n\n      // See if it has a Path ctor even though it's not an\n      // FSDir subclass:\n      Constructor<? extends Directory> pathCtor = null;\n      try {\n        pathCtor = clazz.getConstructor(Path.class);\n      } catch (NoSuchMethodException nsme) {\n        // Ignore\n      }\n\n      if (pathCtor != null) {\n        final Path dir = createTempDir(\"index\");\n        return pathCtor.newInstance(dir);\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      Rethrow.rethrow(e);\n      throw null; // dummy to prevent compiler failure\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["4c0e11c85a63a4eb8a3f072df2a1d380b7e48c14","15e323346eac5e4685c0a9f2df85eb96b4239bbb"],"6613659748fe4411a7dcf85266e55db1f95f7315":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"285cdc737de75b7cc7c284a156b20214deb67bca":["f4abec28b874149a7223e32cc7a01704c27790de"],"c15a75016387504d70a40cba6e9314b8885307f0":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"4c0e11c85a63a4eb8a3f072df2a1d380b7e48c14":["6613659748fe4411a7dcf85266e55db1f95f7315"],"f4abec28b874149a7223e32cc7a01704c27790de":["c15a75016387504d70a40cba6e9314b8885307f0"],"d0d579490a72f2e6297eaa648940611234c57cf1":["6613659748fe4411a7dcf85266e55db1f95f7315"],"be04a7534a8a0679382542b62556ea5fba6cfb7f":["d0d579490a72f2e6297eaa648940611234c57cf1"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["be04a7534a8a0679382542b62556ea5fba6cfb7f"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","4c0e11c85a63a4eb8a3f072df2a1d380b7e48c14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["285cdc737de75b7cc7c284a156b20214deb67bca"]},"commit2Childs":{"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["c15a75016387504d70a40cba6e9314b8885307f0"],"6613659748fe4411a7dcf85266e55db1f95f7315":["4c0e11c85a63a4eb8a3f072df2a1d380b7e48c14","d0d579490a72f2e6297eaa648940611234c57cf1"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"285cdc737de75b7cc7c284a156b20214deb67bca":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c15a75016387504d70a40cba6e9314b8885307f0":["f4abec28b874149a7223e32cc7a01704c27790de"],"4c0e11c85a63a4eb8a3f072df2a1d380b7e48c14":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","15e323346eac5e4685c0a9f2df85eb96b4239bbb"],"f4abec28b874149a7223e32cc7a01704c27790de":["285cdc737de75b7cc7c284a156b20214deb67bca"],"d0d579490a72f2e6297eaa648940611234c57cf1":["be04a7534a8a0679382542b62556ea5fba6cfb7f"],"be04a7534a8a0679382542b62556ea5fba6cfb7f":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["6613659748fe4411a7dcf85266e55db1f95f7315"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["15e323346eac5e4685c0a9f2df85eb96b4239bbb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}