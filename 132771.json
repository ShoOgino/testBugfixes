{"path":"lucene/src/test/org/apache/lucene/index/TestStressAdvance#testOne(DocsEnum,List[Integer]).mjava","commits":[{"id":"e212ce9e66e9e69443bd5faec69d9f312b1574e8","date":1297606129,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressAdvance#testOne(DocsEnum,List[Integer]).mjava","pathOld":"/dev/null","sourceNew":"  private void testOne(DocsEnum docs, List<Integer> expected) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"test\");\n    }\n    int upto = -1;\n    while(upto < expected.size()) {\n      if (VERBOSE) {\n        System.out.println(\"  cycle upto=\" + upto + \" of \" + expected.size());\n      }\n      final int docID;\n      if (random.nextInt(4) == 1 || upto == expected.size()-1) {\n        // test nextDoc()\n        if (VERBOSE) {\n          System.out.println(\"    do nextDoc\");\n        }\n        upto++;\n        docID = docs.nextDoc();\n      } else {\n        // test advance()\n        final int inc = _TestUtil.nextInt(random, 1, expected.size()-1-upto);\n        if (VERBOSE) {\n          System.out.println(\"    do advance inc=\" + inc);\n        }\n        upto += inc;\n        docID = docs.advance(expected.get(upto));\n      }\n      if (upto == expected.size()) {\n        if (VERBOSE) {\n          System.out.println(\"  expect docID=\" + DocsEnum.NO_MORE_DOCS + \" actual=\" + docID);\n        }\n        assertEquals(DocsEnum.NO_MORE_DOCS, docID);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  expect docID=\" + expected.get(upto) + \" actual=\" + docID);\n        }\n        assertTrue(docID != DocsEnum.NO_MORE_DOCS);\n        assertEquals(expected.get(upto).intValue(), docID);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressAdvance#testOne(DocsEnum,List[Integer]).mjava","pathOld":"/dev/null","sourceNew":"  private void testOne(DocsEnum docs, List<Integer> expected) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"test\");\n    }\n    int upto = -1;\n    while(upto < expected.size()) {\n      if (VERBOSE) {\n        System.out.println(\"  cycle upto=\" + upto + \" of \" + expected.size());\n      }\n      final int docID;\n      if (random.nextInt(4) == 1 || upto == expected.size()-1) {\n        // test nextDoc()\n        if (VERBOSE) {\n          System.out.println(\"    do nextDoc\");\n        }\n        upto++;\n        docID = docs.nextDoc();\n      } else {\n        // test advance()\n        final int inc = _TestUtil.nextInt(random, 1, expected.size()-1-upto);\n        if (VERBOSE) {\n          System.out.println(\"    do advance inc=\" + inc);\n        }\n        upto += inc;\n        docID = docs.advance(expected.get(upto));\n      }\n      if (upto == expected.size()) {\n        if (VERBOSE) {\n          System.out.println(\"  expect docID=\" + DocsEnum.NO_MORE_DOCS + \" actual=\" + docID);\n        }\n        assertEquals(DocsEnum.NO_MORE_DOCS, docID);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  expect docID=\" + expected.get(upto) + \" actual=\" + docID);\n        }\n        assertTrue(docID != DocsEnum.NO_MORE_DOCS);\n        assertEquals(expected.get(upto).intValue(), docID);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressAdvance#testOne(DocsEnum,List[Integer]).mjava","pathOld":"/dev/null","sourceNew":"  private void testOne(DocsEnum docs, List<Integer> expected) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"test\");\n    }\n    int upto = -1;\n    while(upto < expected.size()) {\n      if (VERBOSE) {\n        System.out.println(\"  cycle upto=\" + upto + \" of \" + expected.size());\n      }\n      final int docID;\n      if (random.nextInt(4) == 1 || upto == expected.size()-1) {\n        // test nextDoc()\n        if (VERBOSE) {\n          System.out.println(\"    do nextDoc\");\n        }\n        upto++;\n        docID = docs.nextDoc();\n      } else {\n        // test advance()\n        final int inc = _TestUtil.nextInt(random, 1, expected.size()-1-upto);\n        if (VERBOSE) {\n          System.out.println(\"    do advance inc=\" + inc);\n        }\n        upto += inc;\n        docID = docs.advance(expected.get(upto));\n      }\n      if (upto == expected.size()) {\n        if (VERBOSE) {\n          System.out.println(\"  expect docID=\" + DocsEnum.NO_MORE_DOCS + \" actual=\" + docID);\n        }\n        assertEquals(DocsEnum.NO_MORE_DOCS, docID);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  expect docID=\" + expected.get(upto) + \" actual=\" + docID);\n        }\n        assertTrue(docID != DocsEnum.NO_MORE_DOCS);\n        assertEquals(expected.get(upto).intValue(), docID);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testOne(DocsEnum,List[Integer]).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressAdvance#testOne(DocsEnum,List[Integer]).mjava","sourceNew":"  private void testOne(DocsEnum docs, List<Integer> expected) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"test\");\n    }\n    int upto = -1;\n    while(upto < expected.size()) {\n      if (VERBOSE) {\n        System.out.println(\"  cycle upto=\" + upto + \" of \" + expected.size());\n      }\n      final int docID;\n      if (random.nextInt(4) == 1 || upto == expected.size()-1) {\n        // test nextDoc()\n        if (VERBOSE) {\n          System.out.println(\"    do nextDoc\");\n        }\n        upto++;\n        docID = docs.nextDoc();\n      } else {\n        // test advance()\n        final int inc = _TestUtil.nextInt(random, 1, expected.size()-1-upto);\n        if (VERBOSE) {\n          System.out.println(\"    do advance inc=\" + inc);\n        }\n        upto += inc;\n        docID = docs.advance(expected.get(upto));\n      }\n      if (upto == expected.size()) {\n        if (VERBOSE) {\n          System.out.println(\"  expect docID=\" + DocsEnum.NO_MORE_DOCS + \" actual=\" + docID);\n        }\n        assertEquals(DocsEnum.NO_MORE_DOCS, docID);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  expect docID=\" + expected.get(upto) + \" actual=\" + docID);\n        }\n        assertTrue(docID != DocsEnum.NO_MORE_DOCS);\n        assertEquals(expected.get(upto).intValue(), docID);\n      }\n    }\n  }\n\n","sourceOld":"  private void testOne(DocsEnum docs, List<Integer> expected) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"test\");\n    }\n    int upto = -1;\n    while(upto < expected.size()) {\n      if (VERBOSE) {\n        System.out.println(\"  cycle upto=\" + upto + \" of \" + expected.size());\n      }\n      final int docID;\n      if (random.nextInt(4) == 1 || upto == expected.size()-1) {\n        // test nextDoc()\n        if (VERBOSE) {\n          System.out.println(\"    do nextDoc\");\n        }\n        upto++;\n        docID = docs.nextDoc();\n      } else {\n        // test advance()\n        final int inc = _TestUtil.nextInt(random, 1, expected.size()-1-upto);\n        if (VERBOSE) {\n          System.out.println(\"    do advance inc=\" + inc);\n        }\n        upto += inc;\n        docID = docs.advance(expected.get(upto));\n      }\n      if (upto == expected.size()) {\n        if (VERBOSE) {\n          System.out.println(\"  expect docID=\" + DocsEnum.NO_MORE_DOCS + \" actual=\" + docID);\n        }\n        assertEquals(DocsEnum.NO_MORE_DOCS, docID);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  expect docID=\" + expected.get(upto) + \" actual=\" + docID);\n        }\n        assertTrue(docID != DocsEnum.NO_MORE_DOCS);\n        assertEquals(expected.get(upto).intValue(), docID);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e212ce9e66e9e69443bd5faec69d9f312b1574e8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e212ce9e66e9e69443bd5faec69d9f312b1574e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e212ce9e66e9e69443bd5faec69d9f312b1574e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e212ce9e66e9e69443bd5faec69d9f312b1574e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","e212ce9e66e9e69443bd5faec69d9f312b1574e8"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"e212ce9e66e9e69443bd5faec69d9f312b1574e8":["f1bdbf92da222965b46c0a942c3857ba56e5c638","3a119bbc8703c10faa329ec201c654b3a35a1e3e","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}