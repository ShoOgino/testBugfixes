{"path":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getMergedFieldInfos(IndexReader).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getMergedFieldInfos(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFields#getMergedFieldInfos(IndexReader).mjava","sourceNew":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final List<AtomicReader> subReaders = new ArrayList<AtomicReader>();\n    ReaderUtil.gatherSubReaders(subReaders, reader);\n    final FieldInfos fieldInfos = new FieldInfos();\n    for(AtomicReader subReader : subReaders) {\n      fieldInfos.add(subReader.getFieldInfos());\n    }\n    return fieldInfos;\n  }\n\n","sourceOld":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final List<AtomicReader> subReaders = new ArrayList<AtomicReader>();\n    ReaderUtil.gatherSubReaders(subReaders, reader);\n    final FieldInfos fieldInfos = new FieldInfos();\n    for(AtomicReader subReader : subReaders) {\n      fieldInfos.add(subReader.getFieldInfos());\n    }\n    return fieldInfos;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b","date":1337136355,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getMergedFieldInfos(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getMergedFieldInfos(IndexReader).mjava","sourceNew":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final List<AtomicReader> subReaders = new ArrayList<AtomicReader>();\n    ReaderUtil.gatherSubReaders(subReaders, reader);\n    // nocommit: this should be read-only\n    final MutableFieldInfos fieldInfos = new MutableFieldInfos();\n    for(AtomicReader subReader : subReaders) {\n      fieldInfos.add(subReader.getFieldInfos());\n    }\n    return fieldInfos;\n  }\n\n","sourceOld":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final List<AtomicReader> subReaders = new ArrayList<AtomicReader>();\n    ReaderUtil.gatherSubReaders(subReaders, reader);\n    final FieldInfos fieldInfos = new FieldInfos();\n    for(AtomicReader subReader : subReaders) {\n      fieldInfos.add(subReader.getFieldInfos());\n    }\n    return fieldInfos;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76923f6a33f2c4bec7f584e3f251261afe7ea276","date":1337149711,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getMergedFieldInfos(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getMergedFieldInfos(IndexReader).mjava","sourceNew":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final List<AtomicReader> subReaders = new ArrayList<AtomicReader>();\n    ReaderUtil.gatherSubReaders(subReaders, reader);\n    final MutableFieldInfos fieldInfos = new MutableFieldInfos();\n    for(AtomicReader subReader : subReaders) {\n      fieldInfos.add(subReader.getFieldInfos());\n    }\n    return fieldInfos.asReadOnly();\n  }\n\n","sourceOld":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final List<AtomicReader> subReaders = new ArrayList<AtomicReader>();\n    ReaderUtil.gatherSubReaders(subReaders, reader);\n    // nocommit: this should be read-only\n    final MutableFieldInfos fieldInfos = new MutableFieldInfos();\n    for(AtomicReader subReader : subReaders) {\n      fieldInfos.add(subReader.getFieldInfos());\n    }\n    return fieldInfos;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"030c3c949a4d9470b22d6b1aa20e836d96c72cb7","date":1337350881,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getMergedFieldInfos(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getMergedFieldInfos(IndexReader).mjava","sourceNew":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final List<AtomicReader> subReaders = new ArrayList<AtomicReader>();\n    ReaderUtil.gatherSubReaders(subReaders, reader);\n    final MutableFieldInfos fieldInfos = new MutableFieldInfos();\n    for(AtomicReader subReader : subReaders) {\n      fieldInfos.add(subReader.getFieldInfos());\n    }\n    return fieldInfos.finish();\n  }\n\n","sourceOld":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final List<AtomicReader> subReaders = new ArrayList<AtomicReader>();\n    ReaderUtil.gatherSubReaders(subReaders, reader);\n    final MutableFieldInfos fieldInfos = new MutableFieldInfos();\n    for(AtomicReader subReader : subReaders) {\n      fieldInfos.add(subReader.getFieldInfos());\n    }\n    return fieldInfos.asReadOnly();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a851824c09818632c94eba41e60ef5e72e323c8e","date":1337355760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getMergedFieldInfos(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getMergedFieldInfos(IndexReader).mjava","sourceNew":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final List<AtomicReader> subReaders = new ArrayList<AtomicReader>();\n    ReaderUtil.gatherSubReaders(subReaders, reader);\n    final FieldInfos.Builder builder = new FieldInfos.Builder();\n    for(AtomicReader subReader : subReaders) {\n      builder.add(subReader.getFieldInfos());\n    }\n    return builder.finish();\n  }\n\n","sourceOld":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final List<AtomicReader> subReaders = new ArrayList<AtomicReader>();\n    ReaderUtil.gatherSubReaders(subReaders, reader);\n    final MutableFieldInfos fieldInfos = new MutableFieldInfos();\n    for(AtomicReader subReader : subReaders) {\n      fieldInfos.add(subReader.getFieldInfos());\n    }\n    return fieldInfos.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0f42e0639920b2e917c9ece35fb68ad83021e38","date":1337629438,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getMergedFieldInfos(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getMergedFieldInfos(IndexReader).mjava","sourceNew":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader. \n   *  <p>\n   *  NOTE: the returned field numbers will likely not\n   *  correspond to the actual field numbers in the underlying\n   *  readers, and codec metadata ({@link FieldInfo#getAttribute(String)}\n   *  will be unavailable.\n   */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final List<AtomicReader> subReaders = new ArrayList<AtomicReader>();\n    ReaderUtil.gatherSubReaders(subReaders, reader);\n    final FieldInfos.Builder builder = new FieldInfos.Builder();\n    for(AtomicReader subReader : subReaders) {\n      builder.add(subReader.getFieldInfos());\n    }\n    return builder.finish();\n  }\n\n","sourceOld":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final List<AtomicReader> subReaders = new ArrayList<AtomicReader>();\n    ReaderUtil.gatherSubReaders(subReaders, reader);\n    final FieldInfos.Builder builder = new FieldInfos.Builder();\n    for(AtomicReader subReader : subReaders) {\n      builder.add(subReader.getFieldInfos());\n    }\n    return builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getMergedFieldInfos(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getMergedFieldInfos(IndexReader).mjava","sourceNew":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader. \n   *  <p>\n   *  NOTE: the returned field numbers will likely not\n   *  correspond to the actual field numbers in the underlying\n   *  readers, and codec metadata ({@link FieldInfo#getAttribute(String)}\n   *  will be unavailable.\n   */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final List<AtomicReader> subReaders = new ArrayList<AtomicReader>();\n    ReaderUtil.gatherSubReaders(subReaders, reader);\n    final FieldInfos.Builder builder = new FieldInfos.Builder();\n    for(AtomicReader subReader : subReaders) {\n      builder.add(subReader.getFieldInfos());\n    }\n    return builder.finish();\n  }\n\n","sourceOld":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final List<AtomicReader> subReaders = new ArrayList<AtomicReader>();\n    ReaderUtil.gatherSubReaders(subReaders, reader);\n    final FieldInfos fieldInfos = new FieldInfos();\n    for(AtomicReader subReader : subReaders) {\n      fieldInfos.add(subReader.getFieldInfos());\n    }\n    return fieldInfos;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getMergedFieldInfos(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getMergedFieldInfos(IndexReader).mjava","sourceNew":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader. \n   *  <p>\n   *  NOTE: the returned field numbers will likely not\n   *  correspond to the actual field numbers in the underlying\n   *  readers, and codec metadata ({@link FieldInfo#getAttribute(String)}\n   *  will be unavailable.\n   */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final FieldInfos.Builder builder = new FieldInfos.Builder();\n    for(final AtomicReaderContext ctx : reader.getTopReaderContext().leaves()) {\n      builder.add(ctx.reader().getFieldInfos());\n    }\n    return builder.finish();\n  }\n\n","sourceOld":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader. \n   *  <p>\n   *  NOTE: the returned field numbers will likely not\n   *  correspond to the actual field numbers in the underlying\n   *  readers, and codec metadata ({@link FieldInfo#getAttribute(String)}\n   *  will be unavailable.\n   */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final List<AtomicReader> subReaders = new ArrayList<AtomicReader>();\n    ReaderUtil.gatherSubReaders(subReaders, reader);\n    final FieldInfos.Builder builder = new FieldInfos.Builder();\n    for(AtomicReader subReader : subReaders) {\n      builder.add(subReader.getFieldInfos());\n    }\n    return builder.finish();\n  }\n\n","bugFix":null,"bugIntro":["d743dbdc40bef0a47a5d54d99623ef0c2eb5923e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d743dbdc40bef0a47a5d54d99623ef0c2eb5923e","date":1344896544,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getMergedFieldInfos(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getMergedFieldInfos(IndexReader).mjava","sourceNew":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader. \n   *  <p>\n   *  NOTE: the returned field numbers will likely not\n   *  correspond to the actual field numbers in the underlying\n   *  readers, and codec metadata ({@link FieldInfo#getAttribute(String)}\n   *  will be unavailable.\n   */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final FieldInfos.Builder builder = new FieldInfos.Builder();\n    for(final AtomicReaderContext ctx : reader.leaves()) {\n      builder.add(ctx.reader().getFieldInfos());\n    }\n    return builder.finish();\n  }\n\n","sourceOld":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader. \n   *  <p>\n   *  NOTE: the returned field numbers will likely not\n   *  correspond to the actual field numbers in the underlying\n   *  readers, and codec metadata ({@link FieldInfo#getAttribute(String)}\n   *  will be unavailable.\n   */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final FieldInfos.Builder builder = new FieldInfos.Builder();\n    for(final AtomicReaderContext ctx : reader.getTopReaderContext().leaves()) {\n      builder.add(ctx.reader().getFieldInfos());\n    }\n    return builder.finish();\n  }\n\n","bugFix":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getMergedFieldInfos(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getMergedFieldInfos(IndexReader).mjava","sourceNew":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader. \n   *  <p>\n   *  NOTE: the returned field numbers will likely not\n   *  correspond to the actual field numbers in the underlying\n   *  readers, and codec metadata ({@link FieldInfo#getAttribute(String)}\n   *  will be unavailable.\n   */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final FieldInfos.Builder builder = new FieldInfos.Builder();\n    for(final AtomicReaderContext ctx : reader.leaves()) {\n      builder.add(ctx.reader().getFieldInfos());\n    }\n    return builder.finish();\n  }\n\n","sourceOld":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader. \n   *  <p>\n   *  NOTE: the returned field numbers will likely not\n   *  correspond to the actual field numbers in the underlying\n   *  readers, and codec metadata ({@link FieldInfo#getAttribute(String)}\n   *  will be unavailable.\n   */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final FieldInfos.Builder builder = new FieldInfos.Builder();\n    for(final AtomicReaderContext ctx : reader.getTopReaderContext().leaves()) {\n      builder.add(ctx.reader().getFieldInfos());\n    }\n    return builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c188105a9aae04f56c24996f98f8333fc825d2e","date":1345031914,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getMergedFieldInfos(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getMergedFieldInfos(IndexReader).mjava","sourceNew":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader. \n   *  <p>\n   *  NOTE: the returned field numbers will likely not\n   *  correspond to the actual field numbers in the underlying\n   *  readers, and codec metadata ({@link FieldInfo#getAttribute(String)}\n   *  will be unavailable.\n   */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final FieldInfos.Builder builder = new FieldInfos.Builder();\n    for(final AtomicReaderContext ctx : reader.leaves()) {\n      builder.add(ctx.reader().getFieldInfos());\n    }\n    return builder.finish();\n  }\n\n","sourceOld":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader. \n   *  <p>\n   *  NOTE: the returned field numbers will likely not\n   *  correspond to the actual field numbers in the underlying\n   *  readers, and codec metadata ({@link FieldInfo#getAttribute(String)}\n   *  will be unavailable.\n   */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final FieldInfos.Builder builder = new FieldInfos.Builder();\n    for(final AtomicReaderContext ctx : reader.getTopReaderContext().leaves()) {\n      builder.add(ctx.reader().getFieldInfos());\n    }\n    return builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c93396a1df03720cb20e2c2f513a6fa59b21e4c","date":1345032673,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getMergedFieldInfos(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getMergedFieldInfos(IndexReader).mjava","sourceNew":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader. \n   *  <p>\n   *  NOTE: the returned field numbers will likely not\n   *  correspond to the actual field numbers in the underlying\n   *  readers, and codec metadata ({@link FieldInfo#getAttribute(String)}\n   *  will be unavailable.\n   */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final FieldInfos.Builder builder = new FieldInfos.Builder();\n    for(final AtomicReaderContext ctx : reader.getTopReaderContext().leaves()) {\n      builder.add(ctx.reader().getFieldInfos());\n    }\n    return builder.finish();\n  }\n\n","sourceOld":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader. \n   *  <p>\n   *  NOTE: the returned field numbers will likely not\n   *  correspond to the actual field numbers in the underlying\n   *  readers, and codec metadata ({@link FieldInfo#getAttribute(String)}\n   *  will be unavailable.\n   */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final FieldInfos.Builder builder = new FieldInfos.Builder();\n    for(final AtomicReaderContext ctx : reader.leaves()) {\n      builder.add(ctx.reader().getFieldInfos());\n    }\n    return builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getMergedFieldInfos(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getMergedFieldInfos(IndexReader).mjava","sourceNew":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader. \n   *  <p>\n   *  NOTE: the returned field numbers will likely not\n   *  correspond to the actual field numbers in the underlying\n   *  readers, and codec metadata ({@link FieldInfo#getAttribute(String)}\n   *  will be unavailable.\n   */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final FieldInfos.Builder builder = new FieldInfos.Builder();\n    for(final AtomicReaderContext ctx : reader.leaves()) {\n      builder.add(ctx.reader().getFieldInfos());\n    }\n    return builder.finish();\n  }\n\n","sourceOld":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader. \n   *  <p>\n   *  NOTE: the returned field numbers will likely not\n   *  correspond to the actual field numbers in the underlying\n   *  readers, and codec metadata ({@link FieldInfo#getAttribute(String)}\n   *  will be unavailable.\n   */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final FieldInfos.Builder builder = new FieldInfos.Builder();\n    for(final AtomicReaderContext ctx : reader.getTopReaderContext().leaves()) {\n      builder.add(ctx.reader().getFieldInfos());\n    }\n    return builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getMergedFieldInfos(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getMergedFieldInfos(IndexReader).mjava","sourceNew":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader. \n   *  <p>\n   *  NOTE: the returned field numbers will likely not\n   *  correspond to the actual field numbers in the underlying\n   *  readers, and codec metadata ({@link FieldInfo#getAttribute(String)}\n   *  will be unavailable.\n   */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final FieldInfos.Builder builder = new FieldInfos.Builder();\n    for(final LeafReaderContext ctx : reader.leaves()) {\n      builder.add(ctx.reader().getFieldInfos());\n    }\n    return builder.finish();\n  }\n\n","sourceOld":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader. \n   *  <p>\n   *  NOTE: the returned field numbers will likely not\n   *  correspond to the actual field numbers in the underlying\n   *  readers, and codec metadata ({@link FieldInfo#getAttribute(String)}\n   *  will be unavailable.\n   */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final FieldInfos.Builder builder = new FieldInfos.Builder();\n    for(final AtomicReaderContext ctx : reader.leaves()) {\n      builder.add(ctx.reader().getFieldInfos());\n    }\n    return builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7e4ca6dc9612ff741d8713743e2bccfae5eadac","date":1528093718,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getMergedFieldInfos(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getMergedFieldInfos(IndexReader).mjava","sourceNew":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader. \n   *  <p>\n   *  NOTE: the returned field numbers will likely not\n   *  correspond to the actual field numbers in the underlying\n   *  readers, and codec metadata ({@link FieldInfo#getAttribute(String)}\n   *  will be unavailable.\n   */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final String softDeletesField = reader.leaves().stream()\n        .map(l -> l.reader().getFieldInfos().getSoftDeletesField())\n        .filter(Objects::nonNull).findAny().orElse(null);\n    final FieldInfos.Builder builder = new FieldInfos.Builder(new FieldInfos.FieldNumbers(softDeletesField));\n    for(final LeafReaderContext ctx : reader.leaves()) {\n      builder.add(ctx.reader().getFieldInfos());\n    }\n    return builder.finish();\n  }\n\n","sourceOld":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader. \n   *  <p>\n   *  NOTE: the returned field numbers will likely not\n   *  correspond to the actual field numbers in the underlying\n   *  readers, and codec metadata ({@link FieldInfo#getAttribute(String)}\n   *  will be unavailable.\n   */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final FieldInfos.Builder builder = new FieldInfos.Builder();\n    for(final LeafReaderContext ctx : reader.leaves()) {\n      builder.add(ctx.reader().getFieldInfos());\n    }\n    return builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getMergedFieldInfos(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getMergedFieldInfos(IndexReader).mjava","sourceNew":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader. \n   *  <p>\n   *  NOTE: the returned field numbers will likely not\n   *  correspond to the actual field numbers in the underlying\n   *  readers, and codec metadata ({@link FieldInfo#getAttribute(String)}\n   *  will be unavailable.\n   */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final String softDeletesField = reader.leaves().stream()\n        .map(l -> l.reader().getFieldInfos().getSoftDeletesField())\n        .filter(Objects::nonNull).findAny().orElse(null);\n    final FieldInfos.Builder builder = new FieldInfos.Builder(new FieldInfos.FieldNumbers(softDeletesField));\n    for(final LeafReaderContext ctx : reader.leaves()) {\n      builder.add(ctx.reader().getFieldInfos());\n    }\n    return builder.finish();\n  }\n\n","sourceOld":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader. \n   *  <p>\n   *  NOTE: the returned field numbers will likely not\n   *  correspond to the actual field numbers in the underlying\n   *  readers, and codec metadata ({@link FieldInfo#getAttribute(String)}\n   *  will be unavailable.\n   */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final FieldInfos.Builder builder = new FieldInfos.Builder();\n    for(final LeafReaderContext ctx : reader.leaves()) {\n      builder.add(ctx.reader().getFieldInfos());\n    }\n    return builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getMergedFieldInfos(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getMergedFieldInfos(IndexReader).mjava","sourceNew":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader. \n   *  <p>\n   *  NOTE: the returned field numbers will likely not\n   *  correspond to the actual field numbers in the underlying\n   *  readers, and codec metadata ({@link FieldInfo#getAttribute(String)}\n   *  will be unavailable.\n   */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final String softDeletesField = reader.leaves().stream()\n        .map(l -> l.reader().getFieldInfos().getSoftDeletesField())\n        .filter(Objects::nonNull).findAny().orElse(null);\n    final FieldInfos.Builder builder = new FieldInfos.Builder(new FieldInfos.FieldNumbers(softDeletesField));\n    for(final LeafReaderContext ctx : reader.leaves()) {\n      builder.add(ctx.reader().getFieldInfos());\n    }\n    return builder.finish();\n  }\n\n","sourceOld":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader. \n   *  <p>\n   *  NOTE: the returned field numbers will likely not\n   *  correspond to the actual field numbers in the underlying\n   *  readers, and codec metadata ({@link FieldInfo#getAttribute(String)}\n   *  will be unavailable.\n   */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final FieldInfos.Builder builder = new FieldInfos.Builder();\n    for(final LeafReaderContext ctx : reader.leaves()) {\n      builder.add(ctx.reader().getFieldInfos());\n    }\n    return builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da5d9b1595107c543a197a30a4ea7ba48736b5e8","date":1537588030,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getMergedFieldInfos(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getMergedFieldInfos(IndexReader).mjava","sourceNew":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader. \n   *  <p>\n   *  NOTE: the returned field numbers will likely not\n   *  correspond to the actual field numbers in the underlying\n   *  readers, and codec metadata ({@link FieldInfo#getAttribute(String)}\n   *  will be unavailable.\n   */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final String softDeletesField = reader.leaves().stream()\n        .map(l -> l.reader().getFieldInfos().getSoftDeletesField())\n        .filter(Objects::nonNull)\n        .findAny().orElse(null);\n    final FieldInfos.Builder builder = new FieldInfos.Builder(new FieldInfos.FieldNumbers(softDeletesField));\n    for(final LeafReaderContext ctx : reader.leaves()) {\n      builder.add(ctx.reader().getFieldInfos());\n    }\n    return builder.finish();\n  }\n\n","sourceOld":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader. \n   *  <p>\n   *  NOTE: the returned field numbers will likely not\n   *  correspond to the actual field numbers in the underlying\n   *  readers, and codec metadata ({@link FieldInfo#getAttribute(String)}\n   *  will be unavailable.\n   */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final String softDeletesField = reader.leaves().stream()\n        .map(l -> l.reader().getFieldInfos().getSoftDeletesField())\n        .filter(Objects::nonNull).findAny().orElse(null);\n    final FieldInfos.Builder builder = new FieldInfos.Builder(new FieldInfos.FieldNumbers(softDeletesField));\n    for(final LeafReaderContext ctx : reader.leaves()) {\n      builder.add(ctx.reader().getFieldInfos());\n    }\n    return builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1fec8b37cbb6884a64d39565e9dd7b4522a0598","date":1537699559,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getMergedFieldInfos(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getMergedFieldInfos(IndexReader).mjava","sourceNew":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader. \n   *  <p>\n   *  NOTE: the returned field numbers will likely not\n   *  correspond to the actual field numbers in the underlying\n   *  readers, and codec metadata ({@link FieldInfo#getAttribute(String)}\n   *  will be unavailable.\n   */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final String softDeletesField = reader.leaves().stream()\n        .map(l -> l.reader().getFieldInfos().getSoftDeletesField())\n        .filter(Objects::nonNull)\n        .findAny().orElse(null);\n    final FieldInfos.Builder builder = new FieldInfos.Builder(new FieldInfos.FieldNumbers(softDeletesField));\n    for(final LeafReaderContext ctx : reader.leaves()) {\n      builder.add(ctx.reader().getFieldInfos());\n    }\n    return builder.finish();\n  }\n\n","sourceOld":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader. \n   *  <p>\n   *  NOTE: the returned field numbers will likely not\n   *  correspond to the actual field numbers in the underlying\n   *  readers, and codec metadata ({@link FieldInfo#getAttribute(String)}\n   *  will be unavailable.\n   */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final String softDeletesField = reader.leaves().stream()\n        .map(l -> l.reader().getFieldInfos().getSoftDeletesField())\n        .filter(Objects::nonNull).findAny().orElse(null);\n    final FieldInfos.Builder builder = new FieldInfos.Builder(new FieldInfos.FieldNumbers(softDeletesField));\n    for(final LeafReaderContext ctx : reader.leaves()) {\n      builder.add(ctx.reader().getFieldInfos());\n    }\n    return builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfos#getMergedFieldInfos(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getMergedFieldInfos(IndexReader).mjava","sourceNew":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader.\n   *  <p>\n   *  NOTE: the returned field numbers will likely not\n   *  correspond to the actual field numbers in the underlying\n   *  readers, and codec metadata ({@link FieldInfo#getAttribute(String)}\n   *  will be unavailable.\n   */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final String softDeletesField = reader.leaves().stream()\n        .map(l -> l.reader().getFieldInfos().getSoftDeletesField())\n        .filter(Objects::nonNull)\n        .findAny().orElse(null);\n    final Builder builder = new Builder(new FieldNumbers(softDeletesField));\n    for(final LeafReaderContext ctx : reader.leaves()) {\n      builder.add(ctx.reader().getFieldInfos());\n    }\n    return builder.finish();\n  }\n\n","sourceOld":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader. \n   *  <p>\n   *  NOTE: the returned field numbers will likely not\n   *  correspond to the actual field numbers in the underlying\n   *  readers, and codec metadata ({@link FieldInfo#getAttribute(String)}\n   *  will be unavailable.\n   */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final String softDeletesField = reader.leaves().stream()\n        .map(l -> l.reader().getFieldInfos().getSoftDeletesField())\n        .filter(Objects::nonNull)\n        .findAny().orElse(null);\n    final FieldInfos.Builder builder = new FieldInfos.Builder(new FieldInfos.FieldNumbers(softDeletesField));\n    for(final LeafReaderContext ctx : reader.leaves()) {\n      builder.add(ctx.reader().getFieldInfos());\n    }\n    return builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3c188105a9aae04f56c24996f98f8333fc825d2e":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c","d743dbdc40bef0a47a5d54d99623ef0c2eb5923e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"030c3c949a4d9470b22d6b1aa20e836d96c72cb7":["76923f6a33f2c4bec7f584e3f251261afe7ea276"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"a0f42e0639920b2e917c9ece35fb68ad83021e38":["a851824c09818632c94eba41e60ef5e72e323c8e"],"a851824c09818632c94eba41e60ef5e72e323c8e":["030c3c949a4d9470b22d6b1aa20e836d96c72cb7"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","d743dbdc40bef0a47a5d54d99623ef0c2eb5923e"],"f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d743dbdc40bef0a47a5d54d99623ef0c2eb5923e"],"da5d9b1595107c543a197a30a4ea7ba48736b5e8":["b7e4ca6dc9612ff741d8713743e2bccfae5eadac"],"76923f6a33f2c4bec7f584e3f251261afe7ea276":["f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","a0f42e0639920b2e917c9ece35fb68ad83021e38"],"f1fec8b37cbb6884a64d39565e9dd7b4522a0598":["b7e4ca6dc9612ff741d8713743e2bccfae5eadac","da5d9b1595107c543a197a30a4ea7ba48736b5e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["c9fb5f46e264daf5ba3860defe623a89d202dd87","b7e4ca6dc9612ff741d8713743e2bccfae5eadac"],"b7e4ca6dc9612ff741d8713743e2bccfae5eadac":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"d743dbdc40bef0a47a5d54d99623ef0c2eb5923e":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["f1fec8b37cbb6884a64d39565e9dd7b4522a0598"],"f592209545c71895260367152601e9200399776d":["c9fb5f46e264daf5ba3860defe623a89d202dd87","b7e4ca6dc9612ff741d8713743e2bccfae5eadac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"]},"commit2Childs":{"3c188105a9aae04f56c24996f98f8333fc825d2e":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["3c188105a9aae04f56c24996f98f8333fc825d2e","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","d743dbdc40bef0a47a5d54d99623ef0c2eb5923e"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"030c3c949a4d9470b22d6b1aa20e836d96c72cb7":["a851824c09818632c94eba41e60ef5e72e323c8e"],"a0f42e0639920b2e917c9ece35fb68ad83021e38":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a851824c09818632c94eba41e60ef5e72e323c8e":["a0f42e0639920b2e917c9ece35fb68ad83021e38"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b":["76923f6a33f2c4bec7f584e3f251261afe7ea276"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["b70042a8a492f7054d480ccdd2be9796510d4327","b7e4ca6dc9612ff741d8713743e2bccfae5eadac","f592209545c71895260367152601e9200399776d"],"da5d9b1595107c543a197a30a4ea7ba48736b5e8":["f1fec8b37cbb6884a64d39565e9dd7b4522a0598"],"76923f6a33f2c4bec7f584e3f251261afe7ea276":["030c3c949a4d9470b22d6b1aa20e836d96c72cb7"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"f1fec8b37cbb6884a64d39565e9dd7b4522a0598":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"b7e4ca6dc9612ff741d8713743e2bccfae5eadac":["da5d9b1595107c543a197a30a4ea7ba48736b5e8","f1fec8b37cbb6884a64d39565e9dd7b4522a0598","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"d743dbdc40bef0a47a5d54d99623ef0c2eb5923e":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f592209545c71895260367152601e9200399776d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}