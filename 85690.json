{"path":"solr/core/src/java/org/apache/solr/handler/component/RangeFacetRequest#RangeFacetRequest(ResponseBuilder,String).mjava","commits":[{"id":"22d0a81a05eba47d5e18976f17d88306b218cc22","date":1436341569,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RangeFacetRequest#RangeFacetRequest(ResponseBuilder,String).mjava","pathOld":"/dev/null","sourceNew":"  public RangeFacetRequest(ResponseBuilder rb, String f) {\n    super(rb, FacetParams.FACET_RANGE, f);\n\n    IndexSchema schema = rb.req.getSchema();\n    this.schemaField = schema.getField(facetOn);\n\n    SolrParams params = SolrParams.wrapDefaults(localParams, rb.req.getParams());\n    SolrParams required = new RequiredSolrParams(params);\n\n    String methodStr = params.get(FacetParams.FACET_RANGE_METHOD);\n    FacetParams.FacetRangeMethod method = (methodStr == null ? FacetParams.FacetRangeMethod.getDefault() : FacetParams.FacetRangeMethod.get(methodStr));\n\n    if ((schemaField.getType() instanceof DateRangeField) && method.equals(FacetParams.FacetRangeMethod.DV)) {\n      // the user has explicitly selected the FacetRangeMethod.DV method\n      log.warn(\"Range facet method '\" + FacetParams.FacetRangeMethod.DV + \"' is not supported together with field type '\" +\n          DateRangeField.class + \"'. Will use method '\" + FacetParams.FacetRangeMethod.FILTER + \"' instead\");\n      method = FacetParams.FacetRangeMethod.FILTER;\n    }\n\n    this.start = required.getFieldParam(facetOn, FacetParams.FACET_RANGE_START);\n    this.end = required.getFieldParam(facetOn, FacetParams.FACET_RANGE_END);\n\n\n    this.gap = required.getFieldParam(facetOn, FacetParams.FACET_RANGE_GAP);\n    this.minCount = params.getFieldInt(facetOn, FacetParams.FACET_MINCOUNT, 0);\n\n    this.include = FacetParams.FacetRangeInclude.parseParam\n        (params.getFieldParams(facetOn, FacetParams.FACET_RANGE_INCLUDE));\n\n    this.hardEnd = params.getFieldBool(facetOn, FacetParams.FACET_RANGE_HARD_END, false);\n\n    this.others = EnumSet.noneOf(FacetParams.FacetRangeOther.class);\n    final String[] othersP = params.getFieldParams(facetOn, FacetParams.FACET_RANGE_OTHER);\n    if (othersP != null && othersP.length > 0) {\n      for (final String o : othersP) {\n        others.add(FacetParams.FacetRangeOther.get(o));\n      }\n    }\n\n    this.groupFacet = params.getBool(GroupParams.GROUP_FACET, false);\n    if (groupFacet && method.equals(FacetParams.FacetRangeMethod.DV)) {\n      // the user has explicitly selected the FacetRangeMethod.DV method\n      log.warn(\"Range facet method '\" + FacetParams.FacetRangeMethod.DV + \"' is not supported together with '\" +\n          GroupParams.GROUP_FACET + \"'. Will use method '\" + FacetParams.FacetRangeMethod.FILTER + \"' instead\");\n      method = FacetParams.FacetRangeMethod.FILTER;\n    }\n\n    this.method = method;\n\n    RangeEndpointCalculator<? extends Comparable<?>> calculator = createCalculator();\n    this.facetRanges = calculator.computeRanges();\n    this.gapObj = calculator.getGap();\n    this.startObj = calculator.getStart();\n    this.endObj = calculator.getComputedEnd();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46dc9ac8b3e748407baaef82453138ff3974480c","date":1484789241,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RangeFacetRequest#RangeFacetRequest(ResponseBuilder,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RangeFacetRequest#RangeFacetRequest(ResponseBuilder,String).mjava","sourceNew":"  public RangeFacetRequest(ResponseBuilder rb, String f) {\n    super(rb, FacetParams.FACET_RANGE, f);\n\n    IndexSchema schema = rb.req.getSchema();\n    this.schemaField = schema.getField(facetOn);\n\n    SolrParams params = SolrParams.wrapDefaults(localParams, rb.req.getParams());\n    SolrParams required = new RequiredSolrParams(params);\n\n    String methodStr = params.get(FacetParams.FACET_RANGE_METHOD);\n    FacetParams.FacetRangeMethod method = (methodStr == null ? FacetParams.FacetRangeMethod.getDefault() : FacetParams.FacetRangeMethod.get(methodStr));\n\n    if ((schemaField.getType() instanceof DateRangeField) && method.equals(FacetParams.FacetRangeMethod.DV)) {\n      // the user has explicitly selected the FacetRangeMethod.DV method\n      log.warn(\"Range facet method '\" + FacetParams.FacetRangeMethod.DV + \"' is not supported together with field type '\" +\n          DateRangeField.class + \"'. Will use method '\" + FacetParams.FacetRangeMethod.FILTER + \"' instead\");\n      method = FacetParams.FacetRangeMethod.FILTER;\n    }\n    if (method.equals(FacetParams.FacetRangeMethod.DV) && !schemaField.hasDocValues() && (schemaField.getType().isPointField())) {\n      log.warn(\"Range facet method '\" + FacetParams.FacetRangeMethod.DV + \"' is not supported on PointFields without docValues.\" +\n          \"Will use method '\" + FacetParams.FacetRangeMethod.FILTER + \"' instead\");\n      method = FacetParams.FacetRangeMethod.FILTER;\n    }\n\n    this.start = required.getFieldParam(facetOn, FacetParams.FACET_RANGE_START);\n    this.end = required.getFieldParam(facetOn, FacetParams.FACET_RANGE_END);\n\n\n    this.gap = required.getFieldParam(facetOn, FacetParams.FACET_RANGE_GAP);\n    this.minCount = params.getFieldInt(facetOn, FacetParams.FACET_MINCOUNT, 0);\n\n    this.include = FacetParams.FacetRangeInclude.parseParam\n        (params.getFieldParams(facetOn, FacetParams.FACET_RANGE_INCLUDE));\n\n    this.hardEnd = params.getFieldBool(facetOn, FacetParams.FACET_RANGE_HARD_END, false);\n\n    this.others = EnumSet.noneOf(FacetParams.FacetRangeOther.class);\n    final String[] othersP = params.getFieldParams(facetOn, FacetParams.FACET_RANGE_OTHER);\n    if (othersP != null && othersP.length > 0) {\n      for (final String o : othersP) {\n        others.add(FacetParams.FacetRangeOther.get(o));\n      }\n    }\n\n    this.groupFacet = params.getBool(GroupParams.GROUP_FACET, false);\n    if (groupFacet && method.equals(FacetParams.FacetRangeMethod.DV)) {\n      // the user has explicitly selected the FacetRangeMethod.DV method\n      log.warn(\"Range facet method '\" + FacetParams.FacetRangeMethod.DV + \"' is not supported together with '\" +\n          GroupParams.GROUP_FACET + \"'. Will use method '\" + FacetParams.FacetRangeMethod.FILTER + \"' instead\");\n      method = FacetParams.FacetRangeMethod.FILTER;\n    }\n\n    this.method = method;\n\n    RangeEndpointCalculator<? extends Comparable<?>> calculator = createCalculator();\n    this.facetRanges = calculator.computeRanges();\n    this.gapObj = calculator.getGap();\n    this.startObj = calculator.getStart();\n    this.endObj = calculator.getComputedEnd();\n  }\n\n","sourceOld":"  public RangeFacetRequest(ResponseBuilder rb, String f) {\n    super(rb, FacetParams.FACET_RANGE, f);\n\n    IndexSchema schema = rb.req.getSchema();\n    this.schemaField = schema.getField(facetOn);\n\n    SolrParams params = SolrParams.wrapDefaults(localParams, rb.req.getParams());\n    SolrParams required = new RequiredSolrParams(params);\n\n    String methodStr = params.get(FacetParams.FACET_RANGE_METHOD);\n    FacetParams.FacetRangeMethod method = (methodStr == null ? FacetParams.FacetRangeMethod.getDefault() : FacetParams.FacetRangeMethod.get(methodStr));\n\n    if ((schemaField.getType() instanceof DateRangeField) && method.equals(FacetParams.FacetRangeMethod.DV)) {\n      // the user has explicitly selected the FacetRangeMethod.DV method\n      log.warn(\"Range facet method '\" + FacetParams.FacetRangeMethod.DV + \"' is not supported together with field type '\" +\n          DateRangeField.class + \"'. Will use method '\" + FacetParams.FacetRangeMethod.FILTER + \"' instead\");\n      method = FacetParams.FacetRangeMethod.FILTER;\n    }\n\n    this.start = required.getFieldParam(facetOn, FacetParams.FACET_RANGE_START);\n    this.end = required.getFieldParam(facetOn, FacetParams.FACET_RANGE_END);\n\n\n    this.gap = required.getFieldParam(facetOn, FacetParams.FACET_RANGE_GAP);\n    this.minCount = params.getFieldInt(facetOn, FacetParams.FACET_MINCOUNT, 0);\n\n    this.include = FacetParams.FacetRangeInclude.parseParam\n        (params.getFieldParams(facetOn, FacetParams.FACET_RANGE_INCLUDE));\n\n    this.hardEnd = params.getFieldBool(facetOn, FacetParams.FACET_RANGE_HARD_END, false);\n\n    this.others = EnumSet.noneOf(FacetParams.FacetRangeOther.class);\n    final String[] othersP = params.getFieldParams(facetOn, FacetParams.FACET_RANGE_OTHER);\n    if (othersP != null && othersP.length > 0) {\n      for (final String o : othersP) {\n        others.add(FacetParams.FacetRangeOther.get(o));\n      }\n    }\n\n    this.groupFacet = params.getBool(GroupParams.GROUP_FACET, false);\n    if (groupFacet && method.equals(FacetParams.FacetRangeMethod.DV)) {\n      // the user has explicitly selected the FacetRangeMethod.DV method\n      log.warn(\"Range facet method '\" + FacetParams.FacetRangeMethod.DV + \"' is not supported together with '\" +\n          GroupParams.GROUP_FACET + \"'. Will use method '\" + FacetParams.FacetRangeMethod.FILTER + \"' instead\");\n      method = FacetParams.FacetRangeMethod.FILTER;\n    }\n\n    this.method = method;\n\n    RangeEndpointCalculator<? extends Comparable<?>> calculator = createCalculator();\n    this.facetRanges = calculator.computeRanges();\n    this.gapObj = calculator.getGap();\n    this.startObj = calculator.getStart();\n    this.endObj = calculator.getComputedEnd();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RangeFacetRequest#RangeFacetRequest(ResponseBuilder,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RangeFacetRequest#RangeFacetRequest(ResponseBuilder,String).mjava","sourceNew":"  public RangeFacetRequest(ResponseBuilder rb, String f) {\n    super(rb, FacetParams.FACET_RANGE, f);\n\n    IndexSchema schema = rb.req.getSchema();\n    this.schemaField = schema.getField(facetOn);\n\n    SolrParams params = SolrParams.wrapDefaults(localParams, rb.req.getParams());\n    SolrParams required = new RequiredSolrParams(params);\n\n    String methodStr = params.get(FacetParams.FACET_RANGE_METHOD);\n    FacetParams.FacetRangeMethod method = (methodStr == null ? FacetParams.FacetRangeMethod.getDefault() : FacetParams.FacetRangeMethod.get(methodStr));\n\n    if ((schemaField.getType() instanceof DateRangeField) && method.equals(FacetParams.FacetRangeMethod.DV)) {\n      // the user has explicitly selected the FacetRangeMethod.DV method\n      log.warn(\"Range facet method '\" + FacetParams.FacetRangeMethod.DV + \"' is not supported together with field type '\" +\n          DateRangeField.class + \"'. Will use method '\" + FacetParams.FacetRangeMethod.FILTER + \"' instead\");\n      method = FacetParams.FacetRangeMethod.FILTER;\n    }\n    if (method.equals(FacetParams.FacetRangeMethod.DV) && !schemaField.hasDocValues() && (schemaField.getType().isPointField())) {\n      log.warn(\"Range facet method '\" + FacetParams.FacetRangeMethod.DV + \"' is not supported on PointFields without docValues.\" +\n          \"Will use method '\" + FacetParams.FacetRangeMethod.FILTER + \"' instead\");\n      method = FacetParams.FacetRangeMethod.FILTER;\n    }\n\n    this.start = required.getFieldParam(facetOn, FacetParams.FACET_RANGE_START);\n    this.end = required.getFieldParam(facetOn, FacetParams.FACET_RANGE_END);\n\n\n    this.gap = required.getFieldParam(facetOn, FacetParams.FACET_RANGE_GAP);\n    this.minCount = params.getFieldInt(facetOn, FacetParams.FACET_MINCOUNT, 0);\n\n    this.include = FacetParams.FacetRangeInclude.parseParam\n        (params.getFieldParams(facetOn, FacetParams.FACET_RANGE_INCLUDE));\n\n    this.hardEnd = params.getFieldBool(facetOn, FacetParams.FACET_RANGE_HARD_END, false);\n\n    this.others = EnumSet.noneOf(FacetParams.FacetRangeOther.class);\n    final String[] othersP = params.getFieldParams(facetOn, FacetParams.FACET_RANGE_OTHER);\n    if (othersP != null && othersP.length > 0) {\n      for (final String o : othersP) {\n        others.add(FacetParams.FacetRangeOther.get(o));\n      }\n    }\n\n    this.groupFacet = params.getBool(GroupParams.GROUP_FACET, false);\n    if (groupFacet && method.equals(FacetParams.FacetRangeMethod.DV)) {\n      // the user has explicitly selected the FacetRangeMethod.DV method\n      log.warn(\"Range facet method '\" + FacetParams.FacetRangeMethod.DV + \"' is not supported together with '\" +\n          GroupParams.GROUP_FACET + \"'. Will use method '\" + FacetParams.FacetRangeMethod.FILTER + \"' instead\");\n      method = FacetParams.FacetRangeMethod.FILTER;\n    }\n\n    this.method = method;\n\n    RangeEndpointCalculator<? extends Comparable<?>> calculator = createCalculator();\n    this.facetRanges = calculator.computeRanges();\n    this.gapObj = calculator.getGap();\n    this.startObj = calculator.getStart();\n    this.endObj = calculator.getComputedEnd();\n  }\n\n","sourceOld":"  public RangeFacetRequest(ResponseBuilder rb, String f) {\n    super(rb, FacetParams.FACET_RANGE, f);\n\n    IndexSchema schema = rb.req.getSchema();\n    this.schemaField = schema.getField(facetOn);\n\n    SolrParams params = SolrParams.wrapDefaults(localParams, rb.req.getParams());\n    SolrParams required = new RequiredSolrParams(params);\n\n    String methodStr = params.get(FacetParams.FACET_RANGE_METHOD);\n    FacetParams.FacetRangeMethod method = (methodStr == null ? FacetParams.FacetRangeMethod.getDefault() : FacetParams.FacetRangeMethod.get(methodStr));\n\n    if ((schemaField.getType() instanceof DateRangeField) && method.equals(FacetParams.FacetRangeMethod.DV)) {\n      // the user has explicitly selected the FacetRangeMethod.DV method\n      log.warn(\"Range facet method '\" + FacetParams.FacetRangeMethod.DV + \"' is not supported together with field type '\" +\n          DateRangeField.class + \"'. Will use method '\" + FacetParams.FacetRangeMethod.FILTER + \"' instead\");\n      method = FacetParams.FacetRangeMethod.FILTER;\n    }\n\n    this.start = required.getFieldParam(facetOn, FacetParams.FACET_RANGE_START);\n    this.end = required.getFieldParam(facetOn, FacetParams.FACET_RANGE_END);\n\n\n    this.gap = required.getFieldParam(facetOn, FacetParams.FACET_RANGE_GAP);\n    this.minCount = params.getFieldInt(facetOn, FacetParams.FACET_MINCOUNT, 0);\n\n    this.include = FacetParams.FacetRangeInclude.parseParam\n        (params.getFieldParams(facetOn, FacetParams.FACET_RANGE_INCLUDE));\n\n    this.hardEnd = params.getFieldBool(facetOn, FacetParams.FACET_RANGE_HARD_END, false);\n\n    this.others = EnumSet.noneOf(FacetParams.FacetRangeOther.class);\n    final String[] othersP = params.getFieldParams(facetOn, FacetParams.FACET_RANGE_OTHER);\n    if (othersP != null && othersP.length > 0) {\n      for (final String o : othersP) {\n        others.add(FacetParams.FacetRangeOther.get(o));\n      }\n    }\n\n    this.groupFacet = params.getBool(GroupParams.GROUP_FACET, false);\n    if (groupFacet && method.equals(FacetParams.FacetRangeMethod.DV)) {\n      // the user has explicitly selected the FacetRangeMethod.DV method\n      log.warn(\"Range facet method '\" + FacetParams.FacetRangeMethod.DV + \"' is not supported together with '\" +\n          GroupParams.GROUP_FACET + \"'. Will use method '\" + FacetParams.FacetRangeMethod.FILTER + \"' instead\");\n      method = FacetParams.FacetRangeMethod.FILTER;\n    }\n\n    this.method = method;\n\n    RangeEndpointCalculator<? extends Comparable<?>> calculator = createCalculator();\n    this.facetRanges = calculator.computeRanges();\n    this.gapObj = calculator.getGap();\n    this.startObj = calculator.getStart();\n    this.endObj = calculator.getComputedEnd();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RangeFacetRequest#RangeFacetRequest(ResponseBuilder,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RangeFacetRequest#RangeFacetRequest(ResponseBuilder,String).mjava","sourceNew":"  public RangeFacetRequest(ResponseBuilder rb, String f) {\n    super(rb, FacetParams.FACET_RANGE, f);\n\n    IndexSchema schema = rb.req.getSchema();\n    this.schemaField = schema.getField(facetOn);\n\n    SolrParams params = SolrParams.wrapDefaults(localParams, rb.req.getParams());\n    SolrParams required = new RequiredSolrParams(params);\n\n    String methodStr = params.get(FacetParams.FACET_RANGE_METHOD);\n    FacetParams.FacetRangeMethod method = (methodStr == null ? FacetParams.FacetRangeMethod.getDefault() : FacetParams.FacetRangeMethod.get(methodStr));\n\n    if ((schemaField.getType() instanceof DateRangeField) && method.equals(FacetParams.FacetRangeMethod.DV)) {\n      // the user has explicitly selected the FacetRangeMethod.DV method\n      log.warn(\"Range facet method '{}' is not supported together with field type '{}'. Will use method '{}' instead\"\n          , FacetParams.FacetRangeMethod.DV, DateRangeField.class, FacetParams.FacetRangeMethod.FILTER);\n      method = FacetParams.FacetRangeMethod.FILTER;\n    }\n    if (method.equals(FacetParams.FacetRangeMethod.DV) && !schemaField.hasDocValues() && (schemaField.getType().isPointField())) {\n      log.warn(\"Range facet method '{}' is not supported on PointFields without docValues. Will use method '{}' instead\"\n          , FacetParams.FacetRangeMethod.DV\n          , FacetParams.FacetRangeMethod.FILTER);\n      method = FacetParams.FacetRangeMethod.FILTER;\n    }\n\n    this.start = required.getFieldParam(facetOn, FacetParams.FACET_RANGE_START);\n    this.end = required.getFieldParam(facetOn, FacetParams.FACET_RANGE_END);\n\n\n    this.gap = required.getFieldParam(facetOn, FacetParams.FACET_RANGE_GAP);\n    this.minCount = params.getFieldInt(facetOn, FacetParams.FACET_MINCOUNT, 0);\n\n    this.include = FacetParams.FacetRangeInclude.parseParam\n        (params.getFieldParams(facetOn, FacetParams.FACET_RANGE_INCLUDE));\n\n    this.hardEnd = params.getFieldBool(facetOn, FacetParams.FACET_RANGE_HARD_END, false);\n\n    this.others = EnumSet.noneOf(FacetParams.FacetRangeOther.class);\n    final String[] othersP = params.getFieldParams(facetOn, FacetParams.FACET_RANGE_OTHER);\n    if (othersP != null && othersP.length > 0) {\n      for (final String o : othersP) {\n        others.add(FacetParams.FacetRangeOther.get(o));\n      }\n    }\n\n    this.groupFacet = params.getBool(GroupParams.GROUP_FACET, false);\n    if (groupFacet && method.equals(FacetParams.FacetRangeMethod.DV)) {\n      // the user has explicitly selected the FacetRangeMethod.DV method\n      log.warn(\"Range facet method '{}' is not supported together with '{}'. Will use method '{}' instead\"\n          , FacetParams.FacetRangeMethod.DV, GroupParams.GROUP_FACET, FacetParams.FacetRangeMethod.FILTER);\n      method = FacetParams.FacetRangeMethod.FILTER;\n    }\n\n    this.method = method;\n\n    RangeEndpointCalculator<? extends Comparable<?>> calculator = createCalculator();\n    this.facetRanges = calculator.computeRanges();\n    this.gapObj = calculator.getGap();\n    this.startObj = calculator.getStart();\n    this.endObj = calculator.getComputedEnd();\n  }\n\n","sourceOld":"  public RangeFacetRequest(ResponseBuilder rb, String f) {\n    super(rb, FacetParams.FACET_RANGE, f);\n\n    IndexSchema schema = rb.req.getSchema();\n    this.schemaField = schema.getField(facetOn);\n\n    SolrParams params = SolrParams.wrapDefaults(localParams, rb.req.getParams());\n    SolrParams required = new RequiredSolrParams(params);\n\n    String methodStr = params.get(FacetParams.FACET_RANGE_METHOD);\n    FacetParams.FacetRangeMethod method = (methodStr == null ? FacetParams.FacetRangeMethod.getDefault() : FacetParams.FacetRangeMethod.get(methodStr));\n\n    if ((schemaField.getType() instanceof DateRangeField) && method.equals(FacetParams.FacetRangeMethod.DV)) {\n      // the user has explicitly selected the FacetRangeMethod.DV method\n      log.warn(\"Range facet method '\" + FacetParams.FacetRangeMethod.DV + \"' is not supported together with field type '\" +\n          DateRangeField.class + \"'. Will use method '\" + FacetParams.FacetRangeMethod.FILTER + \"' instead\");\n      method = FacetParams.FacetRangeMethod.FILTER;\n    }\n    if (method.equals(FacetParams.FacetRangeMethod.DV) && !schemaField.hasDocValues() && (schemaField.getType().isPointField())) {\n      log.warn(\"Range facet method '\" + FacetParams.FacetRangeMethod.DV + \"' is not supported on PointFields without docValues.\" +\n          \"Will use method '\" + FacetParams.FacetRangeMethod.FILTER + \"' instead\");\n      method = FacetParams.FacetRangeMethod.FILTER;\n    }\n\n    this.start = required.getFieldParam(facetOn, FacetParams.FACET_RANGE_START);\n    this.end = required.getFieldParam(facetOn, FacetParams.FACET_RANGE_END);\n\n\n    this.gap = required.getFieldParam(facetOn, FacetParams.FACET_RANGE_GAP);\n    this.minCount = params.getFieldInt(facetOn, FacetParams.FACET_MINCOUNT, 0);\n\n    this.include = FacetParams.FacetRangeInclude.parseParam\n        (params.getFieldParams(facetOn, FacetParams.FACET_RANGE_INCLUDE));\n\n    this.hardEnd = params.getFieldBool(facetOn, FacetParams.FACET_RANGE_HARD_END, false);\n\n    this.others = EnumSet.noneOf(FacetParams.FacetRangeOther.class);\n    final String[] othersP = params.getFieldParams(facetOn, FacetParams.FACET_RANGE_OTHER);\n    if (othersP != null && othersP.length > 0) {\n      for (final String o : othersP) {\n        others.add(FacetParams.FacetRangeOther.get(o));\n      }\n    }\n\n    this.groupFacet = params.getBool(GroupParams.GROUP_FACET, false);\n    if (groupFacet && method.equals(FacetParams.FacetRangeMethod.DV)) {\n      // the user has explicitly selected the FacetRangeMethod.DV method\n      log.warn(\"Range facet method '\" + FacetParams.FacetRangeMethod.DV + \"' is not supported together with '\" +\n          GroupParams.GROUP_FACET + \"'. Will use method '\" + FacetParams.FacetRangeMethod.FILTER + \"' instead\");\n      method = FacetParams.FacetRangeMethod.FILTER;\n    }\n\n    this.method = method;\n\n    RangeEndpointCalculator<? extends Comparable<?>> calculator = createCalculator();\n    this.facetRanges = calculator.computeRanges();\n    this.gapObj = calculator.getGap();\n    this.startObj = calculator.getStart();\n    this.endObj = calculator.getComputedEnd();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"46dc9ac8b3e748407baaef82453138ff3974480c":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"575e66bd4b2349209027f6801184da7fc3cba13f":["46dc9ac8b3e748407baaef82453138ff3974480c"],"22d0a81a05eba47d5e18976f17d88306b218cc22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["22d0a81a05eba47d5e18976f17d88306b218cc22","46dc9ac8b3e748407baaef82453138ff3974480c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"]},"commit2Childs":{"46dc9ac8b3e748407baaef82453138ff3974480c":["575e66bd4b2349209027f6801184da7fc3cba13f","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"22d0a81a05eba47d5e18976f17d88306b218cc22":["46dc9ac8b3e748407baaef82453138ff3974480c","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}