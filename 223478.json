{"path":"solr/core/src/test/org/apache/solr/cloud/ZkTestServer.ZKServerMain#initializeAndRun(String[]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkTestServer.ZKServerMain#initializeAndRun(String[]).mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkTestServer.ZKServerMain#initializeAndRun(String[]).mjava","sourceNew":"    protected void initializeAndRun(String[] args) throws ConfigException,\n        IOException {\n      try {\n        ManagedUtil.registerLog4jMBeans();\n      } catch (JMException e) {\n\n      }\n\n      ServerConfig config = new ServerConfig();\n      if (args.length == 1) {\n        config.parse(args[0]);\n      } else {\n        config.parse(args);\n      }\n\n      runFromConfig(config);\n    }\n\n","sourceOld":"    protected void initializeAndRun(String[] args) throws ConfigException,\n        IOException {\n      try {\n        ManagedUtil.registerLog4jMBeans();\n      } catch (JMException e) {\n\n      }\n\n      ServerConfig config = new ServerConfig();\n      if (args.length == 1) {\n        config.parse(args[0]);\n      } else {\n        config.parse(args);\n      }\n\n      runFromConfig(config);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkTestServer.ZKServerMain#initializeAndRun(String[]).mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkTestServer.ZKServerMain#initializeAndRun(String[]).mjava","sourceNew":"    protected void initializeAndRun(String[] args) throws ConfigException,\n        IOException {\n      try {\n        ManagedUtil.registerLog4jMBeans();\n      } catch (JMException e) {\n\n      }\n\n      ServerConfig config = new ServerConfig();\n      if (args.length == 1) {\n        config.parse(args[0]);\n      } else {\n        config.parse(args);\n      }\n\n      runFromConfig(config);\n    }\n\n","sourceOld":"    protected void initializeAndRun(String[] args) throws ConfigException,\n        IOException {\n      try {\n        ManagedUtil.registerLog4jMBeans();\n      } catch (JMException e) {\n\n      }\n\n      ServerConfig config = new ServerConfig();\n      if (args.length == 1) {\n        config.parse(args[0]);\n      } else {\n        config.parse(args);\n      }\n\n      runFromConfig(config);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkTestServer.ZKServerMain#initializeAndRun(String[]).mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkTestServer.ZKServerMain#initializeAndRun(String[]).mjava","sourceNew":"    protected void initializeAndRun(String[] args) throws ConfigException,\n        IOException {\n      try {\n        ManagedUtil.registerLog4jMBeans();\n      } catch (JMException e) {\n\n      }\n\n      ServerConfig config = new ServerConfig();\n      if (args.length == 1) {\n        config.parse(args[0]);\n      } else {\n        config.parse(args);\n      }\n\n      runFromConfig(config);\n    }\n\n","sourceOld":"    protected void initializeAndRun(String[] args) throws ConfigException,\n        IOException {\n      try {\n        ManagedUtil.registerLog4jMBeans();\n      } catch (JMException e) {\n\n      }\n\n      ServerConfig config = new ServerConfig();\n      if (args.length == 1) {\n        config.parse(args[0]);\n      } else {\n        config.parse(args);\n      }\n\n      runFromConfig(config);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c30e4c1cee08b3b229a77991882594fe7250b66","date":1344448871,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#initializeAndRun(String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkTestServer.ZKServerMain#initializeAndRun(String[]).mjava","sourceNew":"    protected void initializeAndRun(String[] args) throws ConfigException,\n        IOException {\n      try {\n        ManagedUtil.registerLog4jMBeans();\n      } catch (JMException e) {\n\n      }\n\n      ServerConfig config = new ServerConfig();\n      if (args.length == 1) {\n        config.parse(args[0]);\n      } else {\n        config.parse(args);\n      }\n\n      runFromConfig(config);\n    }\n\n","sourceOld":"    protected void initializeAndRun(String[] args) throws ConfigException,\n        IOException {\n      try {\n        ManagedUtil.registerLog4jMBeans();\n      } catch (JMException e) {\n\n      }\n\n      ServerConfig config = new ServerConfig();\n      if (args.length == 1) {\n        config.parse(args[0]);\n      } else {\n        config.parse(args);\n      }\n\n      runFromConfig(config);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#initializeAndRun(String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkTestServer.ZKServerMain#initializeAndRun(String[]).mjava","sourceNew":"    protected void initializeAndRun(String[] args) throws ConfigException,\n        IOException {\n      try {\n        ManagedUtil.registerLog4jMBeans();\n      } catch (JMException e) {\n\n      }\n\n      ServerConfig config = new ServerConfig();\n      if (args.length == 1) {\n        config.parse(args[0]);\n      } else {\n        config.parse(args);\n      }\n\n      runFromConfig(config);\n    }\n\n","sourceOld":"    protected void initializeAndRun(String[] args) throws ConfigException,\n        IOException {\n      try {\n        ManagedUtil.registerLog4jMBeans();\n      } catch (JMException e) {\n\n      }\n\n      ServerConfig config = new ServerConfig();\n      if (args.length == 1) {\n        config.parse(args[0]);\n      } else {\n        config.parse(args);\n      }\n\n      runFromConfig(config);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#initializeAndRun(String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkTestServer.ZKServerMain#initializeAndRun(String[]).mjava","sourceNew":"    protected void initializeAndRun(String[] args) throws ConfigException,\n        IOException {\n      try {\n        ManagedUtil.registerLog4jMBeans();\n      } catch (JMException e) {\n\n      }\n\n      ServerConfig config = new ServerConfig();\n      if (args.length == 1) {\n        config.parse(args[0]);\n      } else {\n        config.parse(args);\n      }\n\n      runFromConfig(config);\n    }\n\n","sourceOld":"    protected void initializeAndRun(String[] args) throws ConfigException,\n        IOException {\n      try {\n        ManagedUtil.registerLog4jMBeans();\n      } catch (JMException e) {\n\n      }\n\n      ServerConfig config = new ServerConfig();\n      if (args.length == 1) {\n        config.parse(args[0]);\n      } else {\n        config.parse(args);\n      }\n\n      runFromConfig(config);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":["c26f00b574427b55127e869b935845554afde1fa","2c30e4c1cee08b3b229a77991882594fe7250b66"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["c26f00b574427b55127e869b935845554afde1fa","2c30e4c1cee08b3b229a77991882594fe7250b66"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","2c30e4c1cee08b3b229a77991882594fe7250b66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"2c30e4c1cee08b3b229a77991882594fe7250b66":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}