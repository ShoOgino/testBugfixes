{"path":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","sourceNew":"  /**\n   * Test that we can create ShingleAnalyzerWrappers.\n   */\n  public void testShingleAnalyzer() throws Exception {\n    String text = \"one,two,three, four five six\";\n    \n    // Default analyzer, maxShingleSize, and outputUnigrams\n    Benchmark benchmark = execBenchmark(getShingleConfig(\"\"));\n    benchmark.getRunData().getAnalyzer().tokenStream\n      (\"bogus\", new StringReader(text)).close();\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] {\"one\", \"one two\", \"two\", \"two three\",\n                                     \"three\", \"three four\", \"four\", \"four five\",\n                                     \"five\", \"five six\", \"six\"});\n    // Default analyzer, maxShingleSize = 3, and outputUnigrams = false\n    benchmark = execBenchmark\n      (getShingleConfig(\"maxShingleSize:3,outputUnigrams:false\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one two\", \"one two three\", \"two three\",\n                                      \"two three four\", \"three four\", \n                                      \"three four five\", \"four five\",\n                                      \"four five six\", \"five six\" });\n    // WhitespaceAnalyzer, default maxShingleSize and outputUnigrams\n    benchmark = execBenchmark\n      (getShingleConfig(\"analyzer:WhitespaceAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three,\", \"one,two,three, four\",\n                                      \"four\", \"four five\", \"five\", \"five six\", \n                                      \"six\" });\n    \n    // WhitespaceAnalyzer, maxShingleSize=3 and outputUnigrams=false\n    benchmark = execBenchmark\n      (getShingleConfig\n        (\"outputUnigrams:false,maxShingleSize:3,analyzer:WhitespaceAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three, four\", \n                                      \"one,two,three, four five\",\n                                      \"four five\", \"four five six\",\n                                      \"five six\" });\n  }\n\n","sourceOld":"  /**\n   * Test that we can create ShingleAnalyzerWrappers.\n   */\n  public void testShingleAnalyzer() throws Exception {\n    String text = \"one,two,three, four five six\";\n    \n    // Default analyzer, maxShingleSize, and outputUnigrams\n    Benchmark benchmark = execBenchmark(getShingleConfig(\"\"));\n    benchmark.getRunData().getAnalyzer().tokenStream\n      (\"bogus\", new StringReader(text)).close();\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] {\"one\", \"one two\", \"two\", \"two three\",\n                                     \"three\", \"three four\", \"four\", \"four five\",\n                                     \"five\", \"five six\", \"six\"});\n    // Default analyzer, maxShingleSize = 3, and outputUnigrams = false\n    benchmark = execBenchmark\n      (getShingleConfig(\"maxShingleSize:3,outputUnigrams:false\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one two\", \"one two three\", \"two three\",\n                                      \"two three four\", \"three four\", \n                                      \"three four five\", \"four five\",\n                                      \"four five six\", \"five six\" });\n    // WhitespaceAnalyzer, default maxShingleSize and outputUnigrams\n    benchmark = execBenchmark\n      (getShingleConfig(\"analyzer:WhitespaceAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three,\", \"one,two,three, four\",\n                                      \"four\", \"four five\", \"five\", \"five six\", \n                                      \"six\" });\n    \n    // WhitespaceAnalyzer, maxShingleSize=3 and outputUnigrams=false\n    benchmark = execBenchmark\n      (getShingleConfig\n        (\"outputUnigrams:false,maxShingleSize:3,analyzer:WhitespaceAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three, four\", \n                                      \"one,two,three, four five\",\n                                      \"four five\", \"four five six\",\n                                      \"five six\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","sourceNew":"  /**\n   * Test that we can create ShingleAnalyzerWrappers.\n   */\n  public void testShingleAnalyzer() throws Exception {\n    String text = \"one,two,three, four five six\";\n    \n    // Default analyzer, maxShingleSize, and outputUnigrams\n    Benchmark benchmark = execBenchmark(getShingleConfig(\"\"));\n    benchmark.getRunData().getAnalyzer().tokenStream\n      (\"bogus\", new StringReader(text)).close();\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] {\"one\", \"one two\", \"two\", \"two three\",\n                                     \"three\", \"three four\", \"four\", \"four five\",\n                                     \"five\", \"five six\", \"six\"});\n    // Default analyzer, maxShingleSize = 3, and outputUnigrams = false\n    benchmark = execBenchmark\n      (getShingleConfig(\"maxShingleSize:3,outputUnigrams:false\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one two\", \"one two three\", \"two three\",\n                                      \"two three four\", \"three four\", \n                                      \"three four five\", \"four five\",\n                                      \"four five six\", \"five six\" });\n    // MockAnalyzer, default maxShingleSize and outputUnigrams\n    benchmark = execBenchmark\n      (getShingleConfig(\"analyzer:MockAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three,\", \"one,two,three, four\",\n                                      \"four\", \"four five\", \"five\", \"five six\", \n                                      \"six\" });\n    \n    // MockAnalyzer, maxShingleSize=3 and outputUnigrams=false\n    benchmark = execBenchmark\n      (getShingleConfig\n        (\"outputUnigrams:false,maxShingleSize:3,analyzer:MockAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three, four\", \n                                      \"one,two,three, four five\",\n                                      \"four five\", \"four five six\",\n                                      \"five six\" });\n  }\n\n","sourceOld":"  /**\n   * Test that we can create ShingleAnalyzerWrappers.\n   */\n  public void testShingleAnalyzer() throws Exception {\n    String text = \"one,two,three, four five six\";\n    \n    // Default analyzer, maxShingleSize, and outputUnigrams\n    Benchmark benchmark = execBenchmark(getShingleConfig(\"\"));\n    benchmark.getRunData().getAnalyzer().tokenStream\n      (\"bogus\", new StringReader(text)).close();\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] {\"one\", \"one two\", \"two\", \"two three\",\n                                     \"three\", \"three four\", \"four\", \"four five\",\n                                     \"five\", \"five six\", \"six\"});\n    // Default analyzer, maxShingleSize = 3, and outputUnigrams = false\n    benchmark = execBenchmark\n      (getShingleConfig(\"maxShingleSize:3,outputUnigrams:false\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one two\", \"one two three\", \"two three\",\n                                      \"two three four\", \"three four\", \n                                      \"three four five\", \"four five\",\n                                      \"four five six\", \"five six\" });\n    // WhitespaceAnalyzer, default maxShingleSize and outputUnigrams\n    benchmark = execBenchmark\n      (getShingleConfig(\"analyzer:WhitespaceAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three,\", \"one,two,three, four\",\n                                      \"four\", \"four five\", \"five\", \"five six\", \n                                      \"six\" });\n    \n    // WhitespaceAnalyzer, maxShingleSize=3 and outputUnigrams=false\n    benchmark = execBenchmark\n      (getShingleConfig\n        (\"outputUnigrams:false,maxShingleSize:3,analyzer:WhitespaceAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three, four\", \n                                      \"one,two,three, four five\",\n                                      \"four five\", \"four five six\",\n                                      \"five six\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","sourceNew":"  /**\n   * Test that we can create ShingleAnalyzerWrappers.\n   */\n  public void testShingleAnalyzer() throws Exception {\n    String text = \"one,two,three, four five six\";\n    \n    // Default analyzer, maxShingleSize, and outputUnigrams\n    Benchmark benchmark = execBenchmark(getShingleConfig(\"\"));\n    benchmark.getRunData().getAnalyzer().tokenStream\n      (\"bogus\", new StringReader(text)).close();\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] {\"one\", \"one two\", \"two\", \"two three\",\n                                     \"three\", \"three four\", \"four\", \"four five\",\n                                     \"five\", \"five six\", \"six\"});\n    // Default analyzer, maxShingleSize = 3, and outputUnigrams = false\n    benchmark = execBenchmark\n      (getShingleConfig(\"maxShingleSize:3,outputUnigrams:false\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one two\", \"one two three\", \"two three\",\n                                      \"two three four\", \"three four\", \n                                      \"three four five\", \"four five\",\n                                      \"four five six\", \"five six\" });\n    // MockAnalyzer, default maxShingleSize and outputUnigrams\n    benchmark = execBenchmark\n      (getShingleConfig(\"analyzer:MockAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three,\", \"one,two,three, four\",\n                                      \"four\", \"four five\", \"five\", \"five six\", \n                                      \"six\" });\n    \n    // MockAnalyzer, maxShingleSize=3 and outputUnigrams=false\n    benchmark = execBenchmark\n      (getShingleConfig\n        (\"outputUnigrams:false,maxShingleSize:3,analyzer:MockAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three, four\", \n                                      \"one,two,three, four five\",\n                                      \"four five\", \"four five six\",\n                                      \"five six\" });\n  }\n\n","sourceOld":"  /**\n   * Test that we can create ShingleAnalyzerWrappers.\n   */\n  public void testShingleAnalyzer() throws Exception {\n    String text = \"one,two,three, four five six\";\n    \n    // Default analyzer, maxShingleSize, and outputUnigrams\n    Benchmark benchmark = execBenchmark(getShingleConfig(\"\"));\n    benchmark.getRunData().getAnalyzer().tokenStream\n      (\"bogus\", new StringReader(text)).close();\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] {\"one\", \"one two\", \"two\", \"two three\",\n                                     \"three\", \"three four\", \"four\", \"four five\",\n                                     \"five\", \"five six\", \"six\"});\n    // Default analyzer, maxShingleSize = 3, and outputUnigrams = false\n    benchmark = execBenchmark\n      (getShingleConfig(\"maxShingleSize:3,outputUnigrams:false\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one two\", \"one two three\", \"two three\",\n                                      \"two three four\", \"three four\", \n                                      \"three four five\", \"four five\",\n                                      \"four five six\", \"five six\" });\n    // MockAnalyzer, default maxShingleSize and outputUnigrams\n    benchmark = execBenchmark\n      (getShingleConfig(\"analyzer:MockAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three,\", \"one,two,three, four\",\n                                      \"four\", \"four five\", \"five\", \"five six\", \n                                      \"six\" });\n    \n    // MockAnalyzer, maxShingleSize=3 and outputUnigrams=false\n    benchmark = execBenchmark\n      (getShingleConfig\n        (\"outputUnigrams:false,maxShingleSize:3,analyzer:MockAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three, four\", \n                                      \"one,two,three, four five\",\n                                      \"four five\", \"four five six\",\n                                      \"five six\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","sourceNew":"  /**\n   * Test that we can create ShingleAnalyzerWrappers.\n   */\n  public void testShingleAnalyzer() throws Exception {\n    String text = \"one,two,three, four five six\";\n    \n    // Default analyzer, maxShingleSize, and outputUnigrams\n    Benchmark benchmark = execBenchmark(getShingleConfig(\"\"));\n    benchmark.getRunData().getAnalyzer().tokenStream\n      (\"bogus\", new StringReader(text)).close();\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] {\"one\", \"one two\", \"two\", \"two three\",\n                                     \"three\", \"three four\", \"four\", \"four five\",\n                                     \"five\", \"five six\", \"six\"});\n    // Default analyzer, maxShingleSize = 3, and outputUnigrams = false\n    benchmark = execBenchmark\n      (getShingleConfig(\"maxShingleSize:3,outputUnigrams:false\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one two\", \"one two three\", \"two three\",\n                                      \"two three four\", \"three four\", \n                                      \"three four five\", \"four five\",\n                                      \"four five six\", \"five six\" });\n    // MockAnalyzer, default maxShingleSize and outputUnigrams\n    benchmark = execBenchmark\n      (getShingleConfig(\"analyzer:MockAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three,\", \"one,two,three, four\",\n                                      \"four\", \"four five\", \"five\", \"five six\", \n                                      \"six\" });\n    \n    // MockAnalyzer, maxShingleSize=3 and outputUnigrams=false\n    benchmark = execBenchmark\n      (getShingleConfig\n        (\"outputUnigrams:false,maxShingleSize:3,analyzer:MockAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three, four\", \n                                      \"one,two,three, four five\",\n                                      \"four five\", \"four five six\",\n                                      \"five six\" });\n  }\n\n","sourceOld":"  /**\n   * Test that we can create ShingleAnalyzerWrappers.\n   */\n  public void testShingleAnalyzer() throws Exception {\n    String text = \"one,two,three, four five six\";\n    \n    // Default analyzer, maxShingleSize, and outputUnigrams\n    Benchmark benchmark = execBenchmark(getShingleConfig(\"\"));\n    benchmark.getRunData().getAnalyzer().tokenStream\n      (\"bogus\", new StringReader(text)).close();\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] {\"one\", \"one two\", \"two\", \"two three\",\n                                     \"three\", \"three four\", \"four\", \"four five\",\n                                     \"five\", \"five six\", \"six\"});\n    // Default analyzer, maxShingleSize = 3, and outputUnigrams = false\n    benchmark = execBenchmark\n      (getShingleConfig(\"maxShingleSize:3,outputUnigrams:false\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one two\", \"one two three\", \"two three\",\n                                      \"two three four\", \"three four\", \n                                      \"three four five\", \"four five\",\n                                      \"four five six\", \"five six\" });\n    // MockAnalyzer, default maxShingleSize and outputUnigrams\n    benchmark = execBenchmark\n      (getShingleConfig(\"analyzer:MockAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three,\", \"one,two,three, four\",\n                                      \"four\", \"four five\", \"five\", \"five six\", \n                                      \"six\" });\n    \n    // MockAnalyzer, maxShingleSize=3 and outputUnigrams=false\n    benchmark = execBenchmark\n      (getShingleConfig\n        (\"outputUnigrams:false,maxShingleSize:3,analyzer:MockAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three, four\", \n                                      \"one,two,three, four five\",\n                                      \"four five\", \"four five six\",\n                                      \"five six\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","sourceNew":"  /**\n   * Test that we can create ShingleAnalyzerWrappers.\n   */\n  public void testShingleAnalyzer() throws Exception {\n    String text = \"one,two,three, four five six\";\n    \n    // Default analyzer, maxShingleSize, and outputUnigrams\n    Benchmark benchmark = execBenchmark(getShingleConfig(\"\"));\n    benchmark.getRunData().getAnalyzer().tokenStream\n      (\"bogus\", new StringReader(text)).close();\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] {\"one\", \"one two\", \"two\", \"two three\",\n                                     \"three\", \"three four\", \"four\", \"four five\",\n                                     \"five\", \"five six\", \"six\"});\n    // Default analyzer, maxShingleSize = 3, and outputUnigrams = false\n    benchmark = execBenchmark\n      (getShingleConfig(\"maxShingleSize:3,outputUnigrams:false\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one two\", \"one two three\", \"two three\",\n                                      \"two three four\", \"three four\", \n                                      \"three four five\", \"four five\",\n                                      \"four five six\", \"five six\" });\n    // MockAnalyzer, default maxShingleSize and outputUnigrams\n    benchmark = execBenchmark\n      (getShingleConfig(\"analyzer:MockAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three,\", \"one,two,three, four\",\n                                      \"four\", \"four five\", \"five\", \"five six\", \n                                      \"six\" });\n    \n    // MockAnalyzer, maxShingleSize=3 and outputUnigrams=false\n    benchmark = execBenchmark\n      (getShingleConfig\n        (\"outputUnigrams:false,maxShingleSize:3,analyzer:MockAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three, four\", \n                                      \"one,two,three, four five\",\n                                      \"four five\", \"four five six\",\n                                      \"five six\" });\n  }\n\n","sourceOld":"  /**\n   * Test that we can create ShingleAnalyzerWrappers.\n   */\n  public void testShingleAnalyzer() throws Exception {\n    String text = \"one,two,three, four five six\";\n    \n    // Default analyzer, maxShingleSize, and outputUnigrams\n    Benchmark benchmark = execBenchmark(getShingleConfig(\"\"));\n    benchmark.getRunData().getAnalyzer().tokenStream\n      (\"bogus\", new StringReader(text)).close();\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] {\"one\", \"one two\", \"two\", \"two three\",\n                                     \"three\", \"three four\", \"four\", \"four five\",\n                                     \"five\", \"five six\", \"six\"});\n    // Default analyzer, maxShingleSize = 3, and outputUnigrams = false\n    benchmark = execBenchmark\n      (getShingleConfig(\"maxShingleSize:3,outputUnigrams:false\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one two\", \"one two three\", \"two three\",\n                                      \"two three four\", \"three four\", \n                                      \"three four five\", \"four five\",\n                                      \"four five six\", \"five six\" });\n    // MockAnalyzer, default maxShingleSize and outputUnigrams\n    benchmark = execBenchmark\n      (getShingleConfig(\"analyzer:MockAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three,\", \"one,two,three, four\",\n                                      \"four\", \"four five\", \"five\", \"five six\", \n                                      \"six\" });\n    \n    // MockAnalyzer, maxShingleSize=3 and outputUnigrams=false\n    benchmark = execBenchmark\n      (getShingleConfig\n        (\"outputUnigrams:false,maxShingleSize:3,analyzer:MockAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three, four\", \n                                      \"one,two,three, four five\",\n                                      \"four five\", \"four five six\",\n                                      \"five six\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["d572389229127c297dd1fa5ce4758e1cec41e799","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["d572389229127c297dd1fa5ce4758e1cec41e799"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["d572389229127c297dd1fa5ce4758e1cec41e799","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d572389229127c297dd1fa5ce4758e1cec41e799":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}