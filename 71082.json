{"path":"src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","pathOld":"/dev/null","sourceNew":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    final PublicFieldSortedHitQueue hq =\n            new PublicFieldSortedHitQueue(reader, sort.getSort(), nDocs);\n    DocIterator iter = set.iterator();\n    int hits=0;\n    while(iter.hasNext()) {\n      int doc = iter.nextDoc();\n      hits++;   // could just use set.size(), but that would be slower for a bitset\n      hq.insert(new FieldDoc(doc,1.0f));\n    }\n\n    int numCollected = hq.size();\n    int[] ids = new int[numCollected];\n    for (int i = numCollected-1; i >= 0; i--) {\n      FieldDoc fieldDoc = (FieldDoc)hq.pop();\n      // hq.fillFields(fieldDoc)  // optional, if we need that info\n      ids[i] = fieldDoc.doc;\n    }\n\n    return new DocSlice(0,numCollected,ids,null,hits,0.0f);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6079dc4b996dfa326ce75a4fdd0422a4db7720c8","date":1139243061,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","sourceNew":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    final FieldSortedHitQueue hq =\n            new FieldSortedHitQueue(reader, sort.getSort(), nDocs);\n    DocIterator iter = set.iterator();\n    int hits=0;\n    while(iter.hasNext()) {\n      int doc = iter.nextDoc();\n      hits++;   // could just use set.size(), but that would be slower for a bitset\n      hq.insert(new FieldDoc(doc,1.0f));\n    }\n\n    int numCollected = hq.size();\n    int[] ids = new int[numCollected];\n    for (int i = numCollected-1; i >= 0; i--) {\n      FieldDoc fieldDoc = (FieldDoc)hq.pop();\n      // hq.fillFields(fieldDoc)  // optional, if we need that info\n      ids[i] = fieldDoc.doc;\n    }\n\n    return new DocSlice(0,numCollected,ids,null,hits,0.0f);\n  }\n\n","sourceOld":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    final PublicFieldSortedHitQueue hq =\n            new PublicFieldSortedHitQueue(reader, sort.getSort(), nDocs);\n    DocIterator iter = set.iterator();\n    int hits=0;\n    while(iter.hasNext()) {\n      int doc = iter.nextDoc();\n      hits++;   // could just use set.size(), but that would be slower for a bitset\n      hq.insert(new FieldDoc(doc,1.0f));\n    }\n\n    int numCollected = hq.size();\n    int[] ids = new int[numCollected];\n    for (int i = numCollected-1; i >= 0; i--) {\n      FieldDoc fieldDoc = (FieldDoc)hq.pop();\n      // hq.fillFields(fieldDoc)  // optional, if we need that info\n      ids[i] = fieldDoc.doc;\n    }\n\n    return new DocSlice(0,numCollected,ids,null,hits,0.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7856e050319831be8cd0cd1ae493fc7e91e9b05","date":1233674454,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","sourceNew":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    final FieldSortedHitQueue hq =\n            new FieldSortedHitQueue(reader, sort.getSort(), nDocs);\n    DocIterator iter = set.iterator();\n    int hits=0;\n    FieldDoc reusableFD = null;\n    while(iter.hasNext()) {\n      int doc = iter.nextDoc();\n      hits++;   // could just use set.size(), but that would be slower for a bitset\n      if(reusableFD == null) {\n        reusableFD = new FieldDoc(doc, 1.0f);\n      } else {\n        reusableFD.doc = doc;\n      }\n      reusableFD = (FieldDoc) hq.insertWithOverflow(reusableFD);\n    }\n\n    int numCollected = hq.size();\n    int[] ids = new int[numCollected];\n    for (int i = numCollected-1; i >= 0; i--) {\n      FieldDoc fieldDoc = (FieldDoc)hq.pop();\n      // hq.fillFields(fieldDoc)  // optional, if we need that info\n      ids[i] = fieldDoc.doc;\n    }\n\n    return new DocSlice(0,numCollected,ids,null,hits,0.0f);\n  }\n\n","sourceOld":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    final FieldSortedHitQueue hq =\n            new FieldSortedHitQueue(reader, sort.getSort(), nDocs);\n    DocIterator iter = set.iterator();\n    int hits=0;\n    while(iter.hasNext()) {\n      int doc = iter.nextDoc();\n      hits++;   // could just use set.size(), but that would be slower for a bitset\n      hq.insert(new FieldDoc(doc,1.0f));\n    }\n\n    int numCollected = hq.size();\n    int[] ids = new int[numCollected];\n    for (int i = numCollected-1; i >= 0; i--) {\n      FieldDoc fieldDoc = (FieldDoc)hq.pop();\n      // hq.fillFields(fieldDoc)  // optional, if we need that info\n      ids[i] = fieldDoc.doc;\n    }\n\n    return new DocSlice(0,numCollected,ids,null,hits,0.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac3e6437547a34cce2b5405ce0cf9e3af578401e","date":1243373693,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","sourceNew":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    // bit of a hack to tell if a set is sorted - do it better in the futute.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = TopFieldCollector.create(sort, nDocs, false, false, false, inOrder);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = -1;\n    SolrIndexReader r=null;\n\n\n    while(iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        r = reader.getLeafReaders()[++readerIndex];\n        base = reader.getLeafOffsets()[readerIndex];\n        end = base + r.maxDoc();\n        topCollector.setNextReader(r, base);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n\n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    return new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n  }\n\n","sourceOld":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    final FieldSortedHitQueue hq =\n            new FieldSortedHitQueue(reader, sort.getSort(), nDocs);\n    DocIterator iter = set.iterator();\n    int hits=0;\n    FieldDoc reusableFD = null;\n    while(iter.hasNext()) {\n      int doc = iter.nextDoc();\n      hits++;   // could just use set.size(), but that would be slower for a bitset\n      if(reusableFD == null) {\n        reusableFD = new FieldDoc(doc, 1.0f);\n      } else {\n        reusableFD.doc = doc;\n      }\n      reusableFD = (FieldDoc) hq.insertWithOverflow(reusableFD);\n    }\n\n    int numCollected = hq.size();\n    int[] ids = new int[numCollected];\n    for (int i = numCollected-1; i >= 0; i--) {\n      FieldDoc fieldDoc = (FieldDoc)hq.pop();\n      // hq.fillFields(fieldDoc)  // optional, if we need that info\n      ids[i] = fieldDoc.doc;\n    }\n\n    return new DocSlice(0,numCollected,ids,null,hits,0.0f);\n  }\n\n","bugFix":null,"bugIntro":["4ede171727c5c1ee9baddf5393d661bc2f7d88a2","4ede171727c5c1ee9baddf5393d661bc2f7d88a2","4ede171727c5c1ee9baddf5393d661bc2f7d88a2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","sourceNew":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    // bit of a hack to tell if a set is sorted - do it better in the futute.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = TopFieldCollector.create(sort, nDocs, false, false, false, inOrder);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = -1;\n    SolrIndexReader r=null;\n\n\n    while(iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        r = reader.getLeafReaders()[++readerIndex];\n        base = reader.getLeafOffsets()[readerIndex];\n        end = base + r.maxDoc();\n        topCollector.setNextReader(r, base);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n\n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    return new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n  }\n\n","sourceOld":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    // bit of a hack to tell if a set is sorted - do it better in the futute.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = TopFieldCollector.create(sort, nDocs, false, false, false, inOrder);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = -1;\n    SolrIndexReader r=null;\n\n\n    while(iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        r = reader.getLeafReaders()[++readerIndex];\n        base = reader.getLeafOffsets()[readerIndex];\n        end = base + r.maxDoc();\n        topCollector.setNextReader(r, base);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n\n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    return new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ac3e6437547a34cce2b5405ce0cf9e3af578401e":["b7856e050319831be8cd0cd1ae493fc7e91e9b05"],"b7856e050319831be8cd0cd1ae493fc7e91e9b05":["6079dc4b996dfa326ce75a4fdd0422a4db7720c8"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["ac3e6437547a34cce2b5405ce0cf9e3af578401e"],"6079dc4b996dfa326ce75a4fdd0422a4db7720c8":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ac3e6437547a34cce2b5405ce0cf9e3af578401e":["ad94625fb8d088209f46650c8097196fec67f00c"],"b7856e050319831be8cd0cd1ae493fc7e91e9b05":["ac3e6437547a34cce2b5405ce0cf9e3af578401e"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["6079dc4b996dfa326ce75a4fdd0422a4db7720c8"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"6079dc4b996dfa326ce75a4fdd0422a4db7720c8":["b7856e050319831be8cd0cd1ae493fc7e91e9b05"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}