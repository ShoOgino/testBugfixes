{"path":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#resolveVersionRanges(String,UpdateLog).mjava","commits":[{"id":"e511b092029d56e0d4e30204fba8509c1c2647b6","date":1467838965,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#resolveVersionRanges(String,UpdateLog).mjava","pathOld":"/dev/null","sourceNew":"  private List<Long> resolveVersionRanges(String versionsStr, UpdateLog ulog) {\n    if (StringUtils.isEmpty(versionsStr)) {\n      return Collections.emptyList();\n    }\n    \n    List<String> ranges = StrUtils.splitSmart(versionsStr, \",\", true);\n    \n    // TODO merge ranges.\n    \n    // get all the versions from updatelog and sort them\n    List<Long> versionAvailable = null;\n    try (UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates()) {\n      versionAvailable = recentUpdates.getVersions(ulog.getNumRecordsToKeep());\n    }\n    // sort versions\n    Collections.sort(versionAvailable, PeerSync.absComparator);\n    \n    // This can be done with single pass over both ranges and versionsAvailable, that would require \n    // merging ranges. We currently use Set to ensure there are no duplicates.\n    Set<Long> versionsToRet = new HashSet<>(ulog.getNumRecordsToKeep());\n    for (String range : ranges) {\n      String[] rangeBounds = range.split(\"\\\\.{3}\");\n      int indexStart = Collections.binarySearch(versionAvailable, Long.valueOf(rangeBounds[1]), PeerSync.absComparator);\n      int indexEnd = Collections.binarySearch(versionAvailable, Long.valueOf(rangeBounds[0]), PeerSync.absComparator); \n      if(indexStart >=0 && indexEnd >= 0) {\n        versionsToRet.addAll(versionAvailable.subList(indexStart, indexEnd + 1)); // indexEnd is exclusive\n      }\n    }\n    // TODO do we need to sort versions using PeerSync.absComparator?\n    return new ArrayList<>(versionsToRet);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8381eb1cd44d2e0defb52130de3295a576ac1e7b","date":1467840340,"type":0,"author":"Chris Hostetter","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#resolveVersionRanges(String,UpdateLog).mjava","pathOld":"/dev/null","sourceNew":"  private List<Long> resolveVersionRanges(String versionsStr, UpdateLog ulog) {\n    if (StringUtils.isEmpty(versionsStr)) {\n      return Collections.emptyList();\n    }\n    \n    List<String> ranges = StrUtils.splitSmart(versionsStr, \",\", true);\n    \n    // TODO merge ranges.\n    \n    // get all the versions from updatelog and sort them\n    List<Long> versionAvailable = null;\n    try (UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates()) {\n      versionAvailable = recentUpdates.getVersions(ulog.getNumRecordsToKeep());\n    }\n    // sort versions\n    Collections.sort(versionAvailable, PeerSync.absComparator);\n    \n    // This can be done with single pass over both ranges and versionsAvailable, that would require \n    // merging ranges. We currently use Set to ensure there are no duplicates.\n    Set<Long> versionsToRet = new HashSet<>(ulog.getNumRecordsToKeep());\n    for (String range : ranges) {\n      String[] rangeBounds = range.split(\"\\\\.{3}\");\n      int indexStart = Collections.binarySearch(versionAvailable, Long.valueOf(rangeBounds[1]), PeerSync.absComparator);\n      int indexEnd = Collections.binarySearch(versionAvailable, Long.valueOf(rangeBounds[0]), PeerSync.absComparator); \n      if(indexStart >=0 && indexEnd >= 0) {\n        versionsToRet.addAll(versionAvailable.subList(indexStart, indexEnd + 1)); // indexEnd is exclusive\n      }\n    }\n    // TODO do we need to sort versions using PeerSync.absComparator?\n    return new ArrayList<>(versionsToRet);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#resolveVersionRanges(String,UpdateLog).mjava","pathOld":"/dev/null","sourceNew":"  private List<Long> resolveVersionRanges(String versionsStr, UpdateLog ulog) {\n    if (StringUtils.isEmpty(versionsStr)) {\n      return Collections.emptyList();\n    }\n    \n    List<String> ranges = StrUtils.splitSmart(versionsStr, \",\", true);\n    \n    // TODO merge ranges.\n    \n    // get all the versions from updatelog and sort them\n    List<Long> versionAvailable = null;\n    try (UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates()) {\n      versionAvailable = recentUpdates.getVersions(ulog.getNumRecordsToKeep());\n    }\n    // sort versions\n    Collections.sort(versionAvailable, PeerSync.absComparator);\n    \n    // This can be done with single pass over both ranges and versionsAvailable, that would require \n    // merging ranges. We currently use Set to ensure there are no duplicates.\n    Set<Long> versionsToRet = new HashSet<>(ulog.getNumRecordsToKeep());\n    for (String range : ranges) {\n      String[] rangeBounds = range.split(\"\\\\.{3}\");\n      int indexStart = Collections.binarySearch(versionAvailable, Long.valueOf(rangeBounds[1]), PeerSync.absComparator);\n      int indexEnd = Collections.binarySearch(versionAvailable, Long.valueOf(rangeBounds[0]), PeerSync.absComparator); \n      if(indexStart >=0 && indexEnd >= 0) {\n        versionsToRet.addAll(versionAvailable.subList(indexStart, indexEnd + 1)); // indexEnd is exclusive\n      }\n    }\n    // TODO do we need to sort versions using PeerSync.absComparator?\n    return new ArrayList<>(versionsToRet);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8381eb1cd44d2e0defb52130de3295a576ac1e7b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e511b092029d56e0d4e30204fba8509c1c2647b6"],"e511b092029d56e0d4e30204fba8509c1c2647b6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8381eb1cd44d2e0defb52130de3295a576ac1e7b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8381eb1cd44d2e0defb52130de3295a576ac1e7b"]},"commit2Childs":{"8381eb1cd44d2e0defb52130de3295a576ac1e7b":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e511b092029d56e0d4e30204fba8509c1c2647b6":["8381eb1cd44d2e0defb52130de3295a576ac1e7b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8381eb1cd44d2e0defb52130de3295a576ac1e7b","e511b092029d56e0d4e30204fba8509c1c2647b6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}