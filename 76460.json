{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#createCollectAcc().mjava","commits":[{"id":"602cca3f75af03832471d8324bbc5b977a02969c","date":1472676981,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#createCollectAcc().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashNumeric#createCollectAcc().mjava","sourceNew":"  private void createCollectAcc() throws IOException {\n    int numSlots = table.numSlots();\n\n    if (freq.allBuckets) {\n      allBucketsSlot = numSlots++;\n    }\n\n    indexOrderAcc = new SlotAcc(fcontext) {\n      @Override\n      public void collect(int doc, int slot) throws IOException {\n      }\n\n      @Override\n      public int compare(int slotA, int slotB) {\n        long s1 = calc.bitsToSortableBits(table.vals[slotA]);\n        long s2 = calc.bitsToSortableBits(table.vals[slotB]);\n        return Long.compare(s1, s2);\n      }\n\n      @Override\n      public Object getValue(int slotNum) throws IOException {\n        return null;\n      }\n\n      @Override\n      public void reset() {\n      }\n\n      @Override\n      public void resize(Resizer resizer) {\n      }\n    };\n\n    countAcc = new CountSlotAcc(fcontext) {\n      @Override\n      public void incrementCount(int slot, int count) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getCount(int slot) {\n        return table.counts[slot];\n      }\n\n      @Override\n      public Object getValue(int slotNum) {\n        return getCount(slotNum);\n      }\n\n      @Override\n      public void reset() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void collect(int doc, int slot) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int compare(int slotA, int slotB) {\n        return Integer.compare( table.counts[slotA], table.counts[slotB] );\n      }\n\n      @Override\n      public void resize(Resizer resizer) {\n        throw new UnsupportedOperationException();\n      }\n    };\n\n    // we set the countAcc & indexAcc first so generic ones won't be created for us.\n    super.createCollectAcc(fcontext.base.size(), numSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n  }\n\n","sourceOld":"  private void createCollectAcc() throws IOException {\n    int numSlots = table.numSlots();\n\n    if (freq.allBuckets) {\n      allBucketsSlot = numSlots++;\n    }\n\n    indexOrderAcc = new SlotAcc(fcontext) {\n      @Override\n      public void collect(int doc, int slot) throws IOException {\n      }\n\n      @Override\n      public int compare(int slotA, int slotB) {\n        long s1 = calc.bitsToSortableBits(table.vals[slotA]);\n        long s2 = calc.bitsToSortableBits(table.vals[slotB]);\n        return Long.compare(s1, s2);\n      }\n\n      @Override\n      public Object getValue(int slotNum) throws IOException {\n        return null;\n      }\n\n      @Override\n      public void reset() {\n      }\n\n      @Override\n      public void resize(Resizer resizer) {\n      }\n    };\n\n    countAcc = new CountSlotAcc(fcontext) {\n      @Override\n      public void incrementCount(int slot, int count) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getCount(int slot) {\n        return table.counts[slot];\n      }\n\n      @Override\n      public Object getValue(int slotNum) {\n        return getCount(slotNum);\n      }\n\n      @Override\n      public void reset() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void collect(int doc, int slot) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int compare(int slotA, int slotB) {\n        return Integer.compare( table.counts[slotA], table.counts[slotB] );\n      }\n\n      @Override\n      public void resize(Resizer resizer) {\n        throw new UnsupportedOperationException();\n      }\n    };\n\n    // we set the countAcc & indexAcc first so generic ones won't be created for us.\n    super.createCollectAcc(fcontext.base.size(), numSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f206328a706450934717bec7ccc22ad166fc0","date":1473142172,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#createCollectAcc().mjava","pathOld":"/dev/null","sourceNew":"  private void createCollectAcc() throws IOException {\n    int numSlots = table.numSlots();\n\n    if (freq.allBuckets) {\n      allBucketsSlot = numSlots++;\n    }\n\n    indexOrderAcc = new SlotAcc(fcontext) {\n      @Override\n      public void collect(int doc, int slot) throws IOException {\n      }\n\n      @Override\n      public int compare(int slotA, int slotB) {\n        long s1 = calc.bitsToSortableBits(table.vals[slotA]);\n        long s2 = calc.bitsToSortableBits(table.vals[slotB]);\n        return Long.compare(s1, s2);\n      }\n\n      @Override\n      public Object getValue(int slotNum) throws IOException {\n        return null;\n      }\n\n      @Override\n      public void reset() {\n      }\n\n      @Override\n      public void resize(Resizer resizer) {\n      }\n    };\n\n    countAcc = new CountSlotAcc(fcontext) {\n      @Override\n      public void incrementCount(int slot, int count) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getCount(int slot) {\n        return table.counts[slot];\n      }\n\n      @Override\n      public Object getValue(int slotNum) {\n        return getCount(slotNum);\n      }\n\n      @Override\n      public void reset() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void collect(int doc, int slot) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int compare(int slotA, int slotB) {\n        return Integer.compare( table.counts[slotA], table.counts[slotB] );\n      }\n\n      @Override\n      public void resize(Resizer resizer) {\n        throw new UnsupportedOperationException();\n      }\n    };\n\n    // we set the countAcc & indexAcc first so generic ones won't be created for us.\n    super.createCollectAcc(fcontext.base.size(), numSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#createCollectAcc().mjava","pathOld":"/dev/null","sourceNew":"  private void createCollectAcc() throws IOException {\n    int numSlots = table.numSlots();\n\n    if (freq.allBuckets) {\n      allBucketsSlot = numSlots++;\n    }\n\n    indexOrderAcc = new SlotAcc(fcontext) {\n      @Override\n      public void collect(int doc, int slot) throws IOException {\n      }\n\n      @Override\n      public int compare(int slotA, int slotB) {\n        long s1 = calc.bitsToSortableBits(table.vals[slotA]);\n        long s2 = calc.bitsToSortableBits(table.vals[slotB]);\n        return Long.compare(s1, s2);\n      }\n\n      @Override\n      public Object getValue(int slotNum) throws IOException {\n        return null;\n      }\n\n      @Override\n      public void reset() {\n      }\n\n      @Override\n      public void resize(Resizer resizer) {\n      }\n    };\n\n    countAcc = new CountSlotAcc(fcontext) {\n      @Override\n      public void incrementCount(int slot, int count) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getCount(int slot) {\n        return table.counts[slot];\n      }\n\n      @Override\n      public Object getValue(int slotNum) {\n        return getCount(slotNum);\n      }\n\n      @Override\n      public void reset() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void collect(int doc, int slot) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int compare(int slotA, int slotB) {\n        return Integer.compare( table.counts[slotA], table.counts[slotB] );\n      }\n\n      @Override\n      public void resize(Resizer resizer) {\n        throw new UnsupportedOperationException();\n      }\n    };\n\n    // we set the countAcc & indexAcc first so generic ones won't be created for us.\n    super.createCollectAcc(fcontext.base.size(), numSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#createCollectAcc().mjava","pathOld":"/dev/null","sourceNew":"  private void createCollectAcc() throws IOException {\n    int numSlots = table.numSlots();\n\n    if (freq.allBuckets) {\n      allBucketsSlot = numSlots++;\n    }\n\n    indexOrderAcc = new SlotAcc(fcontext) {\n      @Override\n      public void collect(int doc, int slot) throws IOException {\n      }\n\n      @Override\n      public int compare(int slotA, int slotB) {\n        long s1 = calc.bitsToSortableBits(table.vals[slotA]);\n        long s2 = calc.bitsToSortableBits(table.vals[slotB]);\n        return Long.compare(s1, s2);\n      }\n\n      @Override\n      public Object getValue(int slotNum) throws IOException {\n        return null;\n      }\n\n      @Override\n      public void reset() {\n      }\n\n      @Override\n      public void resize(Resizer resizer) {\n      }\n    };\n\n    countAcc = new CountSlotAcc(fcontext) {\n      @Override\n      public void incrementCount(int slot, int count) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getCount(int slot) {\n        return table.counts[slot];\n      }\n\n      @Override\n      public Object getValue(int slotNum) {\n        return getCount(slotNum);\n      }\n\n      @Override\n      public void reset() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void collect(int doc, int slot) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int compare(int slotA, int slotB) {\n        return Integer.compare( table.counts[slotA], table.counts[slotB] );\n      }\n\n      @Override\n      public void resize(Resizer resizer) {\n        throw new UnsupportedOperationException();\n      }\n    };\n\n    // we set the countAcc & indexAcc first so generic ones won't be created for us.\n    super.createCollectAcc(fcontext.base.size(), numSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c705a0d590cf911e7c942df49563ca2ea176e22","date":1526916174,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#createCollectAcc().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#createCollectAcc().mjava","sourceNew":"  private void createCollectAcc() throws IOException {\n    int numSlots = table.numSlots();\n\n    if (freq.allBuckets) {\n      allBucketsSlot = numSlots++;\n    }\n\n    indexOrderAcc = new SlotAcc(fcontext) {\n      @Override\n      public void collect(int doc, int slot, IntFunction<SlotContext> slotContext) throws IOException {\n      }\n\n      @Override\n      public int compare(int slotA, int slotB) {\n        long s1 = calc.bitsToSortableBits(table.vals[slotA]);\n        long s2 = calc.bitsToSortableBits(table.vals[slotB]);\n        return Long.compare(s1, s2);\n      }\n\n      @Override\n      public Object getValue(int slotNum) throws IOException {\n        return null;\n      }\n\n      @Override\n      public void reset() {\n      }\n\n      @Override\n      public void resize(Resizer resizer) {\n      }\n    };\n\n    countAcc = new CountSlotAcc(fcontext) {\n      @Override\n      public void incrementCount(int slot, int count) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getCount(int slot) {\n        return table.counts[slot];\n      }\n\n      @Override\n      public Object getValue(int slotNum) {\n        return getCount(slotNum);\n      }\n\n      @Override\n      public void reset() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void collect(int doc, int slot, IntFunction<SlotContext> slotContext) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int compare(int slotA, int slotB) {\n        return Integer.compare( table.counts[slotA], table.counts[slotB] );\n      }\n\n      @Override\n      public void resize(Resizer resizer) {\n        throw new UnsupportedOperationException();\n      }\n    };\n\n    // we set the countAcc & indexAcc first so generic ones won't be created for us.\n    super.createCollectAcc(fcontext.base.size(), numSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n  }\n\n","sourceOld":"  private void createCollectAcc() throws IOException {\n    int numSlots = table.numSlots();\n\n    if (freq.allBuckets) {\n      allBucketsSlot = numSlots++;\n    }\n\n    indexOrderAcc = new SlotAcc(fcontext) {\n      @Override\n      public void collect(int doc, int slot) throws IOException {\n      }\n\n      @Override\n      public int compare(int slotA, int slotB) {\n        long s1 = calc.bitsToSortableBits(table.vals[slotA]);\n        long s2 = calc.bitsToSortableBits(table.vals[slotB]);\n        return Long.compare(s1, s2);\n      }\n\n      @Override\n      public Object getValue(int slotNum) throws IOException {\n        return null;\n      }\n\n      @Override\n      public void reset() {\n      }\n\n      @Override\n      public void resize(Resizer resizer) {\n      }\n    };\n\n    countAcc = new CountSlotAcc(fcontext) {\n      @Override\n      public void incrementCount(int slot, int count) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getCount(int slot) {\n        return table.counts[slot];\n      }\n\n      @Override\n      public Object getValue(int slotNum) {\n        return getCount(slotNum);\n      }\n\n      @Override\n      public void reset() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void collect(int doc, int slot) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int compare(int slotA, int slotB) {\n        return Integer.compare( table.counts[slotA], table.counts[slotB] );\n      }\n\n      @Override\n      public void resize(Resizer resizer) {\n        throw new UnsupportedOperationException();\n      }\n    };\n\n    // we set the countAcc & indexAcc first so generic ones won't be created for us.\n    super.createCollectAcc(fcontext.base.size(), numSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c841e27891873cab110ebeb89f124a8ec470176","date":1586527220,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#createCollectAcc().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#createCollectAcc().mjava","sourceNew":"  private void createCollectAcc() throws IOException {\n    int numSlots = table.numSlots();\n\n    if (freq.allBuckets) {\n      allBucketsSlot = numSlots++;\n    }\n\n    indexOrderAcc = new SlotAcc(fcontext) {\n      @Override\n      public void collect(int doc, int slot, IntFunction<SlotContext> slotContext) throws IOException {\n      }\n\n      @Override\n      public int compare(int slotA, int slotB) {\n        long s1 = calc.bitsToSortableBits(table.vals[slotA]);\n        long s2 = calc.bitsToSortableBits(table.vals[slotB]);\n        return Long.compare(s1, s2);\n      }\n\n      @Override\n      public Object getValue(int slotNum) throws IOException {\n        return null;\n      }\n\n      @Override\n      public void reset() {\n      }\n\n      @Override\n      public void resize(Resizer resizer) {\n      }\n    };\n\n    countAcc = new CountSlotAcc(fcontext) {\n      @Override\n      public void incrementCount(int slot, long count) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public long getCount(int slot) {\n        return table.counts[slot];\n      }\n\n      @Override\n      public Object getValue(int slotNum) {\n        return getCount(slotNum);\n      }\n\n      @Override\n      public void reset() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void collect(int doc, int slot, IntFunction<SlotContext> slotContext) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int compare(int slotA, int slotB) {\n        return Long.compare( table.counts[slotA], table.counts[slotB] );\n      }\n\n      @Override\n      public void resize(Resizer resizer) {\n        throw new UnsupportedOperationException();\n      }\n    };\n\n    // we set the countAcc & indexAcc first so generic ones won't be created for us.\n    super.createCollectAcc(fcontext.base.size(), numSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n  }\n\n","sourceOld":"  private void createCollectAcc() throws IOException {\n    int numSlots = table.numSlots();\n\n    if (freq.allBuckets) {\n      allBucketsSlot = numSlots++;\n    }\n\n    indexOrderAcc = new SlotAcc(fcontext) {\n      @Override\n      public void collect(int doc, int slot, IntFunction<SlotContext> slotContext) throws IOException {\n      }\n\n      @Override\n      public int compare(int slotA, int slotB) {\n        long s1 = calc.bitsToSortableBits(table.vals[slotA]);\n        long s2 = calc.bitsToSortableBits(table.vals[slotB]);\n        return Long.compare(s1, s2);\n      }\n\n      @Override\n      public Object getValue(int slotNum) throws IOException {\n        return null;\n      }\n\n      @Override\n      public void reset() {\n      }\n\n      @Override\n      public void resize(Resizer resizer) {\n      }\n    };\n\n    countAcc = new CountSlotAcc(fcontext) {\n      @Override\n      public void incrementCount(int slot, int count) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getCount(int slot) {\n        return table.counts[slot];\n      }\n\n      @Override\n      public Object getValue(int slotNum) {\n        return getCount(slotNum);\n      }\n\n      @Override\n      public void reset() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void collect(int doc, int slot, IntFunction<SlotContext> slotContext) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int compare(int slotA, int slotB) {\n        return Integer.compare( table.counts[slotA], table.counts[slotB] );\n      }\n\n      @Override\n      public void resize(Resizer resizer) {\n        throw new UnsupportedOperationException();\n      }\n    };\n\n    // we set the countAcc & indexAcc first so generic ones won't be created for us.\n    super.createCollectAcc(fcontext.base.size(), numSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n  }\n\n","bugFix":["3661d6742eed69ff6cc30ea2538d572624a7cdf8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56a9893014b284af4d1af451e6c02e7ffdf5b6e","date":1590065972,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#createCollectAcc().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#createCollectAcc().mjava","sourceNew":"  private void createCollectAcc() throws IOException {\n    int numSlots = table.numSlots();\n\n    if (freq.allBuckets) {\n      allBucketsSlot = numSlots++;\n    }\n\n    indexOrderAcc = new SlotAcc(fcontext) {\n      @Override\n      public void collect(int doc, int slot, IntFunction<SlotContext> slotContext) throws IOException {\n      }\n\n      @Override\n      public int compare(int slotA, int slotB) {\n        long s1 = calc.bitsToSortableBits(table.vals[slotA]);\n        long s2 = calc.bitsToSortableBits(table.vals[slotB]);\n        return Long.compare(s1, s2);\n      }\n\n      @Override\n      public Object getValue(int slotNum) throws IOException {\n        return null;\n      }\n\n      @Override\n      public void reset() {\n      }\n\n      @Override\n      public void resize(Resizer resizer) {\n      }\n    };\n\n    countAcc = new SlotAcc.CountSlotAcc(fcontext) {\n      @Override\n      public void incrementCount(int slot, long count) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public long getCount(int slot) {\n        return table.counts[slot];\n      }\n\n      @Override\n      public Object getValue(int slotNum) {\n        return getCount(slotNum);\n      }\n\n      @Override\n      public void reset() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void collect(int doc, int slot, IntFunction<SlotContext> slotContext) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int compare(int slotA, int slotB) {\n        return Long.compare( table.counts[slotA], table.counts[slotB] );\n      }\n\n      @Override\n      public void resize(Resizer resizer) {\n        throw new UnsupportedOperationException();\n      }\n    };\n\n    // we set the countAcc & indexAcc first so generic ones won't be created for us.\n    super.createCollectAcc(fcontext.base.size(), numSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n  }\n\n","sourceOld":"  private void createCollectAcc() throws IOException {\n    int numSlots = table.numSlots();\n\n    if (freq.allBuckets) {\n      allBucketsSlot = numSlots++;\n    }\n\n    indexOrderAcc = new SlotAcc(fcontext) {\n      @Override\n      public void collect(int doc, int slot, IntFunction<SlotContext> slotContext) throws IOException {\n      }\n\n      @Override\n      public int compare(int slotA, int slotB) {\n        long s1 = calc.bitsToSortableBits(table.vals[slotA]);\n        long s2 = calc.bitsToSortableBits(table.vals[slotB]);\n        return Long.compare(s1, s2);\n      }\n\n      @Override\n      public Object getValue(int slotNum) throws IOException {\n        return null;\n      }\n\n      @Override\n      public void reset() {\n      }\n\n      @Override\n      public void resize(Resizer resizer) {\n      }\n    };\n\n    countAcc = new CountSlotAcc(fcontext) {\n      @Override\n      public void incrementCount(int slot, long count) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public long getCount(int slot) {\n        return table.counts[slot];\n      }\n\n      @Override\n      public Object getValue(int slotNum) {\n        return getCount(slotNum);\n      }\n\n      @Override\n      public void reset() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void collect(int doc, int slot, IntFunction<SlotContext> slotContext) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int compare(int slotA, int slotB) {\n        return Long.compare( table.counts[slotA], table.counts[slotB] );\n      }\n\n      @Override\n      public void resize(Resizer resizer) {\n        throw new UnsupportedOperationException();\n      }\n    };\n\n    // we set the countAcc & indexAcc first so generic ones won't be created for us.\n    super.createCollectAcc(fcontext.base.size(), numSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1c841e27891873cab110ebeb89f124a8ec470176":["2c705a0d590cf911e7c942df49563ca2ea176e22"],"2c705a0d590cf911e7c942df49563ca2ea176e22":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["1c841e27891873cab110ebeb89f124a8ec470176"],"602cca3f75af03832471d8324bbc5b977a02969c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","602cca3f75af03832471d8324bbc5b977a02969c"],"bc8f206328a706450934717bec7ccc22ad166fc0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","602cca3f75af03832471d8324bbc5b977a02969c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"]},"commit2Childs":{"1c841e27891873cab110ebeb89f124a8ec470176":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"2c705a0d590cf911e7c942df49563ca2ea176e22":["1c841e27891873cab110ebeb89f124a8ec470176"],"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"602cca3f75af03832471d8324bbc5b977a02969c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","bc8f206328a706450934717bec7ccc22ad166fc0"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["2c705a0d590cf911e7c942df49563ca2ea176e22","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["602cca3f75af03832471d8324bbc5b977a02969c","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","bc8f206328a706450934717bec7ccc22ad166fc0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"bc8f206328a706450934717bec7ccc22ad166fc0":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["bc8f206328a706450934717bec7ccc22ad166fc0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}