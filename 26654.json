{"path":"contrib/queries/src/java/org/apache/lucene/search/trie/LongTrieRangeFilter#LongTrieRangeFilter(String,String,int,Long,Long,boolean,boolean).mjava","commits":[{"id":"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0","date":1234549621,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/LongTrieRangeFilter#LongTrieRangeFilter(String,String,int,Long,Long,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\r\n   * Expert: A trie filter for matching trie coded values using the given field names.\r\n   * You can specify the main and helper field name, that was used to idex the values.\r\n   * <code>precisionStep</code> must me equal or a multiple of the <code>precisionStep</code>\r\n   * used for indexing the values.\r\n   * You can leave the bounds open, by supplying <code>null</code> for <code>min</code> and/or\r\n   * <code>max</code>. Inclusive/exclusive bounds can also be supplied.\r\n   * To query double values use the converter {@link TrieUtils#doubleToSortableLong}.\r\n   * <p>This is the counterpart to {@link TrieUtils#addIndexedFields(Document,String,String,String[])}.\r\n   */\r\n  public LongTrieRangeFilter(final String field, final String lowerPrecisionField, final int precisionStep,\r\n    final Long min, final Long max, final boolean minInclusive, final boolean maxInclusive\r\n  ) {\r\n    this(new String[]{field, lowerPrecisionField},precisionStep,min,max,minInclusive,maxInclusive);\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1","date":1239104855,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/LongTrieRangeFilter#LongTrieRangeFilter(String,String,int,Long,Long,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  /**\r\n   * Expert: A trie filter for matching trie coded values using the given field names.\r\n   * You can specify the main and helper field name, that was used to idex the values.\r\n   * <code>precisionStep</code> must me equal or a multiple of the <code>precisionStep</code>\r\n   * used for indexing the values.\r\n   * You can leave the bounds open, by supplying <code>null</code> for <code>min</code> and/or\r\n   * <code>max</code>. Inclusive/exclusive bounds can also be supplied.\r\n   * To query double values use the converter {@link TrieUtils#doubleToSortableLong}.\r\n   * <p>This is the counterpart to {@link TrieUtils#addIndexedFields(Document,String,String,String[])}.\r\n   */\r\n  public LongTrieRangeFilter(final String field, final String lowerPrecisionField, final int precisionStep,\r\n    final Long min, final Long max, final boolean minInclusive, final boolean maxInclusive\r\n  ) {\r\n    this(new String[]{field, lowerPrecisionField},precisionStep,min,max,minInclusive,maxInclusive);\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1"]},"commit2Childs":{"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}