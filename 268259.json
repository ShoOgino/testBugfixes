{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","commits":[{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","sourceNew":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n      if (numTerms > 0 && numTerms % SKIP_INTERVAL == 0) {\n        bufferSkip();\n      }\n      // write term meta data into fst\n      final long longs[] = new long[longsSize];\n      final long delta = stats.totalTermFreq - stats.docFreq;\n      if (stats.totalTermFreq > 0) {\n        if (delta == 0) {\n          statsOut.writeVInt(stats.docFreq<<1|1);\n        } else {\n          statsOut.writeVInt(stats.docFreq<<1|0);\n          statsOut.writeVLong(stats.totalTermFreq-stats.docFreq);\n        }\n      } else {\n        statsOut.writeVInt(stats.docFreq);\n      }\n      BlockTermState state = postingsWriter.newTermState();\n      state.docFreq = stats.docFreq;\n      state.totalTermFreq = stats.totalTermFreq;\n      postingsWriter.finishTerm(state);\n      postingsWriter.encodeTerm(longs, metaBytesOut, fieldInfo, state, true);\n      for (int i = 0; i < longsSize; i++) {\n        metaLongsOut.writeVLong(longs[i] - lastLongs[i]);\n        lastLongs[i] = longs[i];\n      }\n      metaLongsOut.writeVLong(metaBytesOut.getFilePointer() - lastMetaBytesFP);\n\n      builder.add(Util.toIntsRef(text, scratchTerm), numTerms);\n      numTerms++;\n\n      lastMetaBytesFP = metaBytesOut.getFilePointer();\n    }\n\n","sourceOld":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n      if (numTerms > 0 && numTerms % SKIP_INTERVAL == 0) {\n        bufferSkip();\n      }\n      // write term meta data into fst\n      final long longs[] = new long[longsSize];\n      final long delta = stats.totalTermFreq - stats.docFreq;\n      if (stats.totalTermFreq > 0) {\n        if (delta == 0) {\n          statsOut.writeVInt(stats.docFreq<<1|1);\n        } else {\n          statsOut.writeVInt(stats.docFreq<<1|0);\n          statsOut.writeVLong(stats.totalTermFreq-stats.docFreq);\n        }\n      } else {\n        statsOut.writeVInt(stats.docFreq);\n      }\n      BlockTermState state = postingsWriter.newTermState();\n      state.docFreq = stats.docFreq;\n      state.totalTermFreq = stats.totalTermFreq;\n      postingsWriter.finishTerm(state);\n      postingsWriter.encodeTerm(longs, metaBytesOut, fieldInfo, state, true);\n      for (int i = 0; i < longsSize; i++) {\n        metaLongsOut.writeVLong(longs[i] - lastLongs[i]);\n        lastLongs[i] = longs[i];\n      }\n      metaLongsOut.writeVLong(metaBytesOut.getFilePointer() - lastMetaBytesFP);\n\n      builder.add(Util.toIntsRef(text, scratchTerm), numTerms);\n      numTerms++;\n\n      lastMetaBytesFP = metaBytesOut.getFilePointer();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56df73d43b6fc340f5332322862382c7e30f4368","date":1378304988,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","sourceNew":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n      if (numTerms > 0 && numTerms % SKIP_INTERVAL == 0) {\n        bufferSkip();\n      }\n      // write term meta data into fst\n      final long longs[] = new long[longsSize];\n      final long delta = stats.totalTermFreq - stats.docFreq;\n      if (stats.totalTermFreq > 0) {\n        if (delta == 0) {\n          statsOut.writeVInt(stats.docFreq<<1|1);\n        } else {\n          statsOut.writeVInt(stats.docFreq<<1|0);\n          statsOut.writeVLong(stats.totalTermFreq-stats.docFreq);\n        }\n      } else {\n        statsOut.writeVInt(stats.docFreq);\n      }\n      BlockTermState state = postingsWriter.newTermState();\n      state.docFreq = stats.docFreq;\n      state.totalTermFreq = stats.totalTermFreq;\n      postingsWriter.finishTerm(state);\n      postingsWriter.encodeTerm(longs, metaBytesOut, fieldInfo, state, true);\n      for (int i = 0; i < longsSize; i++) {\n        metaLongsOut.writeVLong(longs[i] - lastLongs[i]);\n        lastLongs[i] = longs[i];\n      }\n      metaLongsOut.writeVLong(metaBytesOut.getFilePointer() - lastMetaBytesFP);\n\n      builder.add(Util.toIntsRef(text, scratchTerm), numTerms);\n      numTerms++;\n\n      lastMetaBytesFP = metaBytesOut.getFilePointer();\n    }\n\n","sourceOld":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n      if (numTerms > 0 && numTerms % SKIP_INTERVAL == 0) {\n        bufferSkip();\n      }\n      // write term meta data into fst\n      final long longs[] = new long[longsSize];\n      final long delta = stats.totalTermFreq - stats.docFreq;\n      if (stats.totalTermFreq > 0) {\n        if (delta == 0) {\n          statsOut.writeVInt(stats.docFreq<<1|1);\n        } else {\n          statsOut.writeVInt(stats.docFreq<<1|0);\n          statsOut.writeVLong(stats.totalTermFreq-stats.docFreq);\n        }\n      } else {\n        statsOut.writeVInt(stats.docFreq);\n      }\n      BlockTermState state = postingsWriter.newTermState();\n      state.docFreq = stats.docFreq;\n      state.totalTermFreq = stats.totalTermFreq;\n      postingsWriter.finishTerm(state);\n      postingsWriter.encodeTerm(longs, metaBytesOut, fieldInfo, state, true);\n      for (int i = 0; i < longsSize; i++) {\n        metaLongsOut.writeVLong(longs[i] - lastLongs[i]);\n        lastLongs[i] = longs[i];\n      }\n      metaLongsOut.writeVLong(metaBytesOut.getFilePointer() - lastMetaBytesFP);\n\n      builder.add(Util.toIntsRef(text, scratchTerm), numTerms);\n      numTerms++;\n\n      lastMetaBytesFP = metaBytesOut.getFilePointer();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"56df73d43b6fc340f5332322862382c7e30f4368":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"56df73d43b6fc340f5332322862382c7e30f4368":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["56df73d43b6fc340f5332322862382c7e30f4368"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56df73d43b6fc340f5332322862382c7e30f4368","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}