{"path":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeSimpleDocValues(SegmentWriteState).mjava","commits":[{"id":"4b53a9a930ee01857178a1b512fbab24642f3fa8","date":1354471097,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeSimpleDocValues(SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"  private void mergeSimpleDocValues(SegmentWriteState segmentWriteState) throws IOException {\n\n    if (codec.simpleDocValuesFormat() != null) {\n      SimpleDVConsumer consumer = codec.simpleDocValuesFormat().fieldsConsumer(segmentWriteState);\n      boolean success = false;\n      try {\n        for (FieldInfo field : mergeState.fieldInfos) {\n          DocValues.Type type = field.getDocValuesType();\n          if (type != null) {\n            if (DocValues.isNumber(type) || DocValues.isFloat(type)) {\n              List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                NumericDocValues values = reader.getNumericDocValues(field.name);\n                if (values == null) {\n                  values = new NumericDocValues.EMPTY(reader.maxDoc());\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeNumericField(field, mergeState, toMerge);\n            } else if (DocValues.isBytes(type)) {\n              List<BinaryDocValues> toMerge = new ArrayList<BinaryDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                BinaryDocValues values = reader.getBinaryDocValues(field.name);\n                if (values == null) {\n                  values = new BinaryDocValues.EMPTY(reader.maxDoc());\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeBinaryField(field, mergeState, toMerge);\n            } else if (DocValues.isSortedBytes(type)) {\n              List<SortedDocValues> toMerge = new ArrayList<SortedDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                SortedDocValues values = reader.getSortedDocValues(field.name);\n                if (values == null) {\n                  values = new SortedDocValues.EMPTY(reader.maxDoc());\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeSortedField(field, mergeState, toMerge);\n            } else {\n              throw new AssertionError(\"type=\" + type);\n            }\n          }\n        }\n      } finally {\n        if (success) {\n          IOUtils.close(consumer);\n        } else {\n          IOUtils.closeWhileHandlingException(consumer);            \n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dec29dc8d723895339aee1463a6393a4026558d8","date":1355857014,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeSimpleDocValues(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeSimpleDocValues(SegmentWriteState).mjava","sourceNew":"  private void mergeSimpleDocValues(SegmentWriteState segmentWriteState) throws IOException {\n\n    if (codec.simpleDocValuesFormat() != null) {\n      SimpleDVConsumer consumer = codec.simpleDocValuesFormat().fieldsConsumer(segmentWriteState);\n      boolean success = false;\n      try {\n        for (FieldInfo field : mergeState.fieldInfos) {\n          DocValues.Type type = field.getDocValuesType();\n          if (type != null) {\n            if (DocValues.isNumber(type) || DocValues.isFloat(type)) {\n              List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                NumericDocValues values = reader.getNumericDocValues(field.name);\n                if (values == null) {\n                  values = new NumericDocValues.EMPTY(reader.maxDoc());\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeNumericField(field, mergeState, toMerge);\n            } else if (DocValues.isBytes(type)) {\n              List<BinaryDocValues> toMerge = new ArrayList<BinaryDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                BinaryDocValues values = reader.getBinaryDocValues(field.name);\n                if (values == null) {\n                  values = new BinaryDocValues.EMPTY(reader.maxDoc());\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeBinaryField(field, mergeState, toMerge);\n            } else if (DocValues.isSortedBytes(type)) {\n              List<SortedDocValues> toMerge = new ArrayList<SortedDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                SortedDocValues values = reader.getSortedDocValues(field.name);\n                if (values == null) {\n                  values = new SortedDocValues.EMPTY(reader.maxDoc());\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeSortedField(field, mergeState, toMerge);\n            } else {\n              throw new AssertionError(\"type=\" + type);\n            }\n          }\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(consumer);\n        } else {\n          IOUtils.closeWhileHandlingException(consumer);            \n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void mergeSimpleDocValues(SegmentWriteState segmentWriteState) throws IOException {\n\n    if (codec.simpleDocValuesFormat() != null) {\n      SimpleDVConsumer consumer = codec.simpleDocValuesFormat().fieldsConsumer(segmentWriteState);\n      boolean success = false;\n      try {\n        for (FieldInfo field : mergeState.fieldInfos) {\n          DocValues.Type type = field.getDocValuesType();\n          if (type != null) {\n            if (DocValues.isNumber(type) || DocValues.isFloat(type)) {\n              List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                NumericDocValues values = reader.getNumericDocValues(field.name);\n                if (values == null) {\n                  values = new NumericDocValues.EMPTY(reader.maxDoc());\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeNumericField(field, mergeState, toMerge);\n            } else if (DocValues.isBytes(type)) {\n              List<BinaryDocValues> toMerge = new ArrayList<BinaryDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                BinaryDocValues values = reader.getBinaryDocValues(field.name);\n                if (values == null) {\n                  values = new BinaryDocValues.EMPTY(reader.maxDoc());\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeBinaryField(field, mergeState, toMerge);\n            } else if (DocValues.isSortedBytes(type)) {\n              List<SortedDocValues> toMerge = new ArrayList<SortedDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                SortedDocValues values = reader.getSortedDocValues(field.name);\n                if (values == null) {\n                  values = new SortedDocValues.EMPTY(reader.maxDoc());\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeSortedField(field, mergeState, toMerge);\n            } else {\n              throw new AssertionError(\"type=\" + type);\n            }\n          }\n        }\n      } finally {\n        if (success) {\n          IOUtils.close(consumer);\n        } else {\n          IOUtils.closeWhileHandlingException(consumer);            \n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a","date":1357739321,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeSimpleDocValues(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeSimpleDocValues(SegmentWriteState).mjava","sourceNew":"  private void mergeSimpleDocValues(SegmentWriteState segmentWriteState) throws IOException {\n\n    if (codec.simpleDocValuesFormat() != null) {\n      SimpleDVConsumer consumer = codec.simpleDocValuesFormat().fieldsConsumer(segmentWriteState);\n      boolean success = false;\n      try {\n        for (FieldInfo field : mergeState.fieldInfos) {\n          DocValues.Type type = field.getDocValuesType();\n          if (type != null) {\n            if (DocValues.isNumber(type) || DocValues.isFloat(type)) {\n              List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                NumericDocValues values = reader.getNumericDocValues(field.name);\n                if (values == null) {\n                  values = NumericDocValues.EMPTY;\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeNumericField(field, mergeState, toMerge);\n            } else if (DocValues.isBytes(type)) {\n              List<BinaryDocValues> toMerge = new ArrayList<BinaryDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                BinaryDocValues values = reader.getBinaryDocValues(field.name);\n                if (values == null) {\n                  values = BinaryDocValues.EMPTY;\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeBinaryField(field, mergeState, toMerge);\n            } else if (DocValues.isSortedBytes(type)) {\n              List<SortedDocValues> toMerge = new ArrayList<SortedDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                SortedDocValues values = reader.getSortedDocValues(field.name);\n                if (values == null) {\n                  values = SortedDocValues.EMPTY;\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeSortedField(field, mergeState, toMerge);\n            } else {\n              throw new AssertionError(\"type=\" + type);\n            }\n          }\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(consumer);\n        } else {\n          IOUtils.closeWhileHandlingException(consumer);            \n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void mergeSimpleDocValues(SegmentWriteState segmentWriteState) throws IOException {\n\n    if (codec.simpleDocValuesFormat() != null) {\n      SimpleDVConsumer consumer = codec.simpleDocValuesFormat().fieldsConsumer(segmentWriteState);\n      boolean success = false;\n      try {\n        for (FieldInfo field : mergeState.fieldInfos) {\n          DocValues.Type type = field.getDocValuesType();\n          if (type != null) {\n            if (DocValues.isNumber(type) || DocValues.isFloat(type)) {\n              List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                NumericDocValues values = reader.getNumericDocValues(field.name);\n                if (values == null) {\n                  values = new NumericDocValues.EMPTY(reader.maxDoc());\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeNumericField(field, mergeState, toMerge);\n            } else if (DocValues.isBytes(type)) {\n              List<BinaryDocValues> toMerge = new ArrayList<BinaryDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                BinaryDocValues values = reader.getBinaryDocValues(field.name);\n                if (values == null) {\n                  values = new BinaryDocValues.EMPTY(reader.maxDoc());\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeBinaryField(field, mergeState, toMerge);\n            } else if (DocValues.isSortedBytes(type)) {\n              List<SortedDocValues> toMerge = new ArrayList<SortedDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                SortedDocValues values = reader.getSortedDocValues(field.name);\n                if (values == null) {\n                  values = new SortedDocValues.EMPTY(reader.maxDoc());\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeSortedField(field, mergeState, toMerge);\n            } else {\n              throw new AssertionError(\"type=\" + type);\n            }\n          }\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(consumer);\n        } else {\n          IOUtils.closeWhileHandlingException(consumer);            \n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeSimpleDocValues(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeSimpleDocValues(SegmentWriteState).mjava","sourceNew":"  private void mergeSimpleDocValues(SegmentWriteState segmentWriteState) throws IOException {\n\n    if (codec.simpleDocValuesFormat() != null) {\n      SimpleDVConsumer consumer = codec.simpleDocValuesFormat().fieldsConsumer(segmentWriteState);\n      boolean success = false;\n      try {\n        for (FieldInfo field : mergeState.fieldInfos) {\n          DocValuesType type = field.getDocValuesType();\n          if (type != null) {\n            if (type == DocValuesType.NUMERIC) {\n              List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                NumericDocValues values = reader.getNumericDocValues(field.name);\n                if (values == null) {\n                  values = NumericDocValues.EMPTY;\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeNumericField(field, mergeState, toMerge);\n            } else if (type == DocValuesType.BINARY) {\n              List<BinaryDocValues> toMerge = new ArrayList<BinaryDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                BinaryDocValues values = reader.getBinaryDocValues(field.name);\n                if (values == null) {\n                  values = BinaryDocValues.EMPTY;\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeBinaryField(field, mergeState, toMerge);\n            } else if (type == DocValuesType.SORTED) {\n              List<SortedDocValues> toMerge = new ArrayList<SortedDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                SortedDocValues values = reader.getSortedDocValues(field.name);\n                if (values == null) {\n                  values = SortedDocValues.EMPTY;\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeSortedField(field, mergeState, toMerge);\n            } else {\n              throw new AssertionError(\"type=\" + type);\n            }\n          }\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(consumer);\n        } else {\n          IOUtils.closeWhileHandlingException(consumer);            \n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void mergeSimpleDocValues(SegmentWriteState segmentWriteState) throws IOException {\n\n    if (codec.simpleDocValuesFormat() != null) {\n      SimpleDVConsumer consumer = codec.simpleDocValuesFormat().fieldsConsumer(segmentWriteState);\n      boolean success = false;\n      try {\n        for (FieldInfo field : mergeState.fieldInfos) {\n          DocValues.Type type = field.getDocValuesType();\n          if (type != null) {\n            if (DocValues.isNumber(type) || DocValues.isFloat(type)) {\n              List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                NumericDocValues values = reader.getNumericDocValues(field.name);\n                if (values == null) {\n                  values = NumericDocValues.EMPTY;\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeNumericField(field, mergeState, toMerge);\n            } else if (DocValues.isBytes(type)) {\n              List<BinaryDocValues> toMerge = new ArrayList<BinaryDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                BinaryDocValues values = reader.getBinaryDocValues(field.name);\n                if (values == null) {\n                  values = BinaryDocValues.EMPTY;\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeBinaryField(field, mergeState, toMerge);\n            } else if (DocValues.isSortedBytes(type)) {\n              List<SortedDocValues> toMerge = new ArrayList<SortedDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                SortedDocValues values = reader.getSortedDocValues(field.name);\n                if (values == null) {\n                  values = SortedDocValues.EMPTY;\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeSortedField(field, mergeState, toMerge);\n            } else {\n              throw new AssertionError(\"type=\" + type);\n            }\n          }\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(consumer);\n        } else {\n          IOUtils.closeWhileHandlingException(consumer);            \n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200","date":1358521790,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeSimpleDocValues(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeSimpleDocValues(SegmentWriteState).mjava","sourceNew":"  private void mergeSimpleDocValues(SegmentWriteState segmentWriteState) throws IOException {\n\n    if (codec.docValuesFormat() != null) {\n      DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(segmentWriteState);\n      boolean success = false;\n      try {\n        for (FieldInfo field : mergeState.fieldInfos) {\n          DocValuesType type = field.getDocValuesType();\n          if (type != null) {\n            if (type == DocValuesType.NUMERIC) {\n              List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                NumericDocValues values = reader.getNumericDocValues(field.name);\n                if (values == null) {\n                  values = NumericDocValues.EMPTY;\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeNumericField(field, mergeState, toMerge);\n            } else if (type == DocValuesType.BINARY) {\n              List<BinaryDocValues> toMerge = new ArrayList<BinaryDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                BinaryDocValues values = reader.getBinaryDocValues(field.name);\n                if (values == null) {\n                  values = BinaryDocValues.EMPTY;\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeBinaryField(field, mergeState, toMerge);\n            } else if (type == DocValuesType.SORTED) {\n              List<SortedDocValues> toMerge = new ArrayList<SortedDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                SortedDocValues values = reader.getSortedDocValues(field.name);\n                if (values == null) {\n                  values = SortedDocValues.EMPTY;\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeSortedField(field, mergeState, toMerge);\n            } else {\n              throw new AssertionError(\"type=\" + type);\n            }\n          }\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(consumer);\n        } else {\n          IOUtils.closeWhileHandlingException(consumer);            \n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void mergeSimpleDocValues(SegmentWriteState segmentWriteState) throws IOException {\n\n    if (codec.simpleDocValuesFormat() != null) {\n      SimpleDVConsumer consumer = codec.simpleDocValuesFormat().fieldsConsumer(segmentWriteState);\n      boolean success = false;\n      try {\n        for (FieldInfo field : mergeState.fieldInfos) {\n          DocValuesType type = field.getDocValuesType();\n          if (type != null) {\n            if (type == DocValuesType.NUMERIC) {\n              List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                NumericDocValues values = reader.getNumericDocValues(field.name);\n                if (values == null) {\n                  values = NumericDocValues.EMPTY;\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeNumericField(field, mergeState, toMerge);\n            } else if (type == DocValuesType.BINARY) {\n              List<BinaryDocValues> toMerge = new ArrayList<BinaryDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                BinaryDocValues values = reader.getBinaryDocValues(field.name);\n                if (values == null) {\n                  values = BinaryDocValues.EMPTY;\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeBinaryField(field, mergeState, toMerge);\n            } else if (type == DocValuesType.SORTED) {\n              List<SortedDocValues> toMerge = new ArrayList<SortedDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                SortedDocValues values = reader.getSortedDocValues(field.name);\n                if (values == null) {\n                  values = SortedDocValues.EMPTY;\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeSortedField(field, mergeState, toMerge);\n            } else {\n              throw new AssertionError(\"type=\" + type);\n            }\n          }\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(consumer);\n        } else {\n          IOUtils.closeWhileHandlingException(consumer);            \n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b57ad184373369f2ee65828cd86b30da949653f6","date":1360243980,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeDocValues(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeSimpleDocValues(SegmentWriteState).mjava","sourceNew":"  private void mergeDocValues(SegmentWriteState segmentWriteState) throws IOException {\n\n    if (codec.docValuesFormat() != null) {\n      DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(segmentWriteState);\n      boolean success = false;\n      try {\n        for (FieldInfo field : mergeState.fieldInfos) {\n          DocValuesType type = field.getDocValuesType();\n          if (type != null) {\n            if (type == DocValuesType.NUMERIC) {\n              List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                NumericDocValues values = reader.getNumericDocValues(field.name);\n                if (values == null) {\n                  values = NumericDocValues.EMPTY;\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeNumericField(field, mergeState, toMerge);\n            } else if (type == DocValuesType.BINARY) {\n              List<BinaryDocValues> toMerge = new ArrayList<BinaryDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                BinaryDocValues values = reader.getBinaryDocValues(field.name);\n                if (values == null) {\n                  values = BinaryDocValues.EMPTY;\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeBinaryField(field, mergeState, toMerge);\n            } else if (type == DocValuesType.SORTED) {\n              List<SortedDocValues> toMerge = new ArrayList<SortedDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                SortedDocValues values = reader.getSortedDocValues(field.name);\n                if (values == null) {\n                  values = SortedDocValues.EMPTY;\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeSortedField(field, mergeState, toMerge);\n            } else {\n              throw new AssertionError(\"type=\" + type);\n            }\n          }\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(consumer);\n        } else {\n          IOUtils.closeWhileHandlingException(consumer);            \n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void mergeSimpleDocValues(SegmentWriteState segmentWriteState) throws IOException {\n\n    if (codec.docValuesFormat() != null) {\n      DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(segmentWriteState);\n      boolean success = false;\n      try {\n        for (FieldInfo field : mergeState.fieldInfos) {\n          DocValuesType type = field.getDocValuesType();\n          if (type != null) {\n            if (type == DocValuesType.NUMERIC) {\n              List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                NumericDocValues values = reader.getNumericDocValues(field.name);\n                if (values == null) {\n                  values = NumericDocValues.EMPTY;\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeNumericField(field, mergeState, toMerge);\n            } else if (type == DocValuesType.BINARY) {\n              List<BinaryDocValues> toMerge = new ArrayList<BinaryDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                BinaryDocValues values = reader.getBinaryDocValues(field.name);\n                if (values == null) {\n                  values = BinaryDocValues.EMPTY;\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeBinaryField(field, mergeState, toMerge);\n            } else if (type == DocValuesType.SORTED) {\n              List<SortedDocValues> toMerge = new ArrayList<SortedDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                SortedDocValues values = reader.getSortedDocValues(field.name);\n                if (values == null) {\n                  values = SortedDocValues.EMPTY;\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeSortedField(field, mergeState, toMerge);\n            } else {\n              throw new AssertionError(\"type=\" + type);\n            }\n          }\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(consumer);\n        } else {\n          IOUtils.closeWhileHandlingException(consumer);            \n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["0837ab0472feecb3a54260729d845f839e1cbd72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dec29dc8d723895339aee1463a6393a4026558d8":["4b53a9a930ee01857178a1b512fbab24642f3fa8"],"0837ab0472feecb3a54260729d845f839e1cbd72":["32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a"],"4b53a9a930ee01857178a1b512fbab24642f3fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b57ad184373369f2ee65828cd86b30da949653f6":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a":["dec29dc8d723895339aee1463a6393a4026558d8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["b57ad184373369f2ee65828cd86b30da949653f6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4b53a9a930ee01857178a1b512fbab24642f3fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dec29dc8d723895339aee1463a6393a4026558d8":["32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a"],"0837ab0472feecb3a54260729d845f839e1cbd72":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"4b53a9a930ee01857178a1b512fbab24642f3fa8":["dec29dc8d723895339aee1463a6393a4026558d8"],"b57ad184373369f2ee65828cd86b30da949653f6":[],"32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a":["0837ab0472feecb3a54260729d845f839e1cbd72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b57ad184373369f2ee65828cd86b30da949653f6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}