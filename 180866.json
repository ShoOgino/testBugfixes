{"path":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForNoShardInconsistency().mjava","commits":[{"id":"5f6c494de6b7fddab42beeb839721ee126885db1","date":1395291794,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForNoShardInconsistency().mjava","pathOld":"/dev/null","sourceNew":"  public void waitForNoShardInconsistency() throws Exception {\n    log.info(\"Wait for no shard inconsistency\");\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      try {\n        commit();\n      } catch (Throwable t) {\n        t.printStackTrace();\n        // we don't care if this commit fails on some nodes\n      }\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToJetty.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, true, false);\n      }\n      \n      if (failMessage != null) {\n        log.info(\"shard inconsistency - waiting ...\");\n        retry = true;\n      } else {\n        retry = false;\n      }\n      cnt++;\n      if (cnt > 20) break;\n      Thread.sleep(2000);\n    } while (retry);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6784d0cc613dc1ee97030eaaa5e0754edc22d164","date":1420824784,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForNoShardInconsistency().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForNoShardInconsistency().mjava","sourceNew":"  public void waitForNoShardInconsistency() throws Exception {\n    log.info(\"Wait for no shard inconsistency\");\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      try {\n        commit();\n      } catch (Throwable t) {\n        t.printStackTrace();\n        // we don't care if this commit fails on some nodes\n      }\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToJetty.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        try {\n          failMessage = checkShardConsistency(shard, true, true);\n        } catch (Exception e) {\n          // we might hit a node we just stopped\n          failMessage=\"hit exception:\" + e.getMessage();\n        }\n      }\n      \n      if (failMessage != null) {\n        log.info(\"shard inconsistency - waiting ...\");\n        retry = true;\n      } else {\n        retry = false;\n      }\n      cnt++;\n      if (cnt > 40) break;\n      Thread.sleep(2000);\n    } while (retry);\n  }\n\n","sourceOld":"  public void waitForNoShardInconsistency() throws Exception {\n    log.info(\"Wait for no shard inconsistency\");\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      try {\n        commit();\n      } catch (Throwable t) {\n        t.printStackTrace();\n        // we don't care if this commit fails on some nodes\n      }\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToJetty.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, true, false);\n      }\n      \n      if (failMessage != null) {\n        log.info(\"shard inconsistency - waiting ...\");\n        retry = true;\n      } else {\n        retry = false;\n      }\n      cnt++;\n      if (cnt > 20) break;\n      Thread.sleep(2000);\n    } while (retry);\n  }\n\n","bugFix":["5f6c494de6b7fddab42beeb839721ee126885db1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForNoShardInconsistency().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForNoShardInconsistency().mjava","sourceNew":"  public void waitForNoShardInconsistency() throws Exception {\n    log.info(\"Wait for no shard inconsistency\");\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      try {\n        commit();\n      } catch (Throwable t) {\n        t.printStackTrace();\n        // we don't care if this commit fails on some nodes\n      }\n\n      updateMappingsFromZk(jettys, clients);\n\n      Set<String> theShards = shardToJetty.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        try {\n          failMessage = checkShardConsistency(shard, true, true);\n        } catch (Exception e) {\n          // we might hit a node we just stopped\n          failMessage=\"hit exception:\" + e.getMessage();\n        }\n      }\n\n      if (failMessage != null) {\n        log.info(\"shard inconsistency - waiting ...\");\n        retry = true;\n      } else {\n        retry = false;\n      }\n      cnt++;\n      if (cnt > 40) break;\n      Thread.sleep(2000);\n    } while (retry);\n  }\n\n","sourceOld":"  public void waitForNoShardInconsistency() throws Exception {\n    log.info(\"Wait for no shard inconsistency\");\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      try {\n        commit();\n      } catch (Throwable t) {\n        t.printStackTrace();\n        // we don't care if this commit fails on some nodes\n      }\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToJetty.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        try {\n          failMessage = checkShardConsistency(shard, true, true);\n        } catch (Exception e) {\n          // we might hit a node we just stopped\n          failMessage=\"hit exception:\" + e.getMessage();\n        }\n      }\n      \n      if (failMessage != null) {\n        log.info(\"shard inconsistency - waiting ...\");\n        retry = true;\n      } else {\n        retry = false;\n      }\n      cnt++;\n      if (cnt > 40) break;\n      Thread.sleep(2000);\n    } while (retry);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"abb23fcc2461782ab204e61213240feb77d355aa":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f6c494de6b7fddab42beeb839721ee126885db1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["5f6c494de6b7fddab42beeb839721ee126885db1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["abb23fcc2461782ab204e61213240feb77d355aa"]},"commit2Childs":{"abb23fcc2461782ab204e61213240feb77d355aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f6c494de6b7fddab42beeb839721ee126885db1"],"5f6c494de6b7fddab42beeb839721ee126885db1":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["abb23fcc2461782ab204e61213240feb77d355aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}