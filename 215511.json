{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/RepeatableSampler#createSample(ScoredDocIDs,int,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/RepeatableSampler#createSample(ScoredDocIDs,int,int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/sampling/RepeatableSampler#createSample(ScoredDocIDs,int,int).mjava","sourceNew":"  @Override\n  protected SampleResult createSample(ScoredDocIDs docids, int actualSize,\n      int sampleSetSize) throws IOException {\n    int[] sampleSet = null;\n    try {\n      sampleSet = repeatableSample(docids, actualSize,\n          sampleSetSize);\n    } catch (IOException e) {\n      if (logger.isLoggable(Level.WARNING)) {\n        logger.log(Level.WARNING, \"sampling failed: \"+e.getMessage()+\" - falling back to no sampling!\", e);\n      }\n      return new SampleResult(docids, 1d);\n    }\n\n    ScoredDocIDs sampled = ScoredDocIdsUtils.createScoredDocIDsSubset(docids,\n        sampleSet);\n    if (logger.isLoggable(Level.FINEST)) {\n      logger.finest(\"******************** \" + sampled.size());\n    }\n    return new SampleResult(sampled, sampled.size()/(double)docids.size());\n  }\n\n","sourceOld":"  @Override\n  protected SampleResult createSample(ScoredDocIDs docids, int actualSize,\n      int sampleSetSize) throws IOException {\n    int[] sampleSet = null;\n    try {\n      sampleSet = repeatableSample(docids, actualSize,\n          sampleSetSize);\n    } catch (IOException e) {\n      if (logger.isLoggable(Level.WARNING)) {\n        logger.log(Level.WARNING, \"sampling failed: \"+e.getMessage()+\" - falling back to no sampling!\", e);\n      }\n      return new SampleResult(docids, 1d);\n    }\n\n    ScoredDocIDs sampled = ScoredDocIdsUtils.createScoredDocIDsSubset(docids,\n        sampleSet);\n    if (logger.isLoggable(Level.FINEST)) {\n      logger.finest(\"******************** \" + sampled.size());\n    }\n    return new SampleResult(sampled, sampled.size()/(double)docids.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sampling/RepeatableSampler#createSample(ScoredDocIDs,int,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/RepeatableSampler#createSample(ScoredDocIDs,int,int).mjava","sourceNew":"  @Override\n  protected SampleResult createSample(ScoredDocIDs docids, int actualSize,\n      int sampleSetSize) throws IOException {\n    int[] sampleSet = null;\n    try {\n      sampleSet = repeatableSample(docids, actualSize,\n          sampleSetSize);\n    } catch (IOException e) {\n      if (logger.isLoggable(Level.WARNING)) {\n        logger.log(Level.WARNING, \"sampling failed: \"+e.getMessage()+\" - falling back to no sampling!\", e);\n      }\n      return new SampleResult(docids, 1d);\n    }\n\n    ScoredDocIDs sampled = ScoredDocIdsUtils.createScoredDocIDsSubset(docids,\n        sampleSet);\n    if (logger.isLoggable(Level.FINEST)) {\n      logger.finest(\"******************** \" + sampled.size());\n    }\n    return new SampleResult(sampled, sampled.size()/(double)docids.size());\n  }\n\n","sourceOld":"  @Override\n  protected SampleResult createSample(ScoredDocIDs docids, int actualSize,\n      int sampleSetSize) throws IOException {\n    int[] sampleSet = null;\n    try {\n      sampleSet = repeatableSample(docids, actualSize,\n          sampleSetSize);\n    } catch (IOException e) {\n      if (logger.isLoggable(Level.WARNING)) {\n        logger.log(Level.WARNING, \"sampling failed: \"+e.getMessage()+\" - falling back to no sampling!\", e);\n      }\n      return new SampleResult(docids, 1d);\n    }\n\n    ScoredDocIDs sampled = ScoredDocIdsUtils.createScoredDocIDsSubset(docids,\n        sampleSet);\n    if (logger.isLoggable(Level.FINEST)) {\n      logger.finest(\"******************** \" + sampled.size());\n    }\n    return new SampleResult(sampled, sampled.size()/(double)docids.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["607428da722dcb3e86bbd11c63de8986e6275c36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}