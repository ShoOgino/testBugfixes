{"path":"solr/core/src/test/org/apache/solr/response/TestSolrQueryResponse#testToLog().mjava","commits":[{"id":"1407827f8682ca5d8a8747ac1dda65ebeff67164","date":1449861948,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestSolrQueryResponse#testToLog().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testToLog() throws Exception {\n    final SolrQueryResponse response = new SolrQueryResponse();\n    assertEquals(\"toLog initially not empty\", 0, response.getToLog().size());\n    assertEquals(\"logid_only\", response.getToLogAsString(\"logid_only\"));\n    // initially empty, then add something\n    response.addToLog(\"key1\", \"value1\");\n    {\n      final Iterator<Map.Entry<String,Object>> it = response.getToLog().iterator();\n      assertTrue(it.hasNext());\n      final Map.Entry<String,Object> entry1 = it.next();\n      assertEquals(\"key1\", entry1.getKey());\n      assertEquals(\"value1\", entry1.getValue());\n      assertFalse(it.hasNext());\n    }\n    assertEquals(\"key1=value1\", response.getToLogAsString(\"\"));\n    assertEquals(\"abc123 key1=value1\", response.getToLogAsString(\"abc123\"));\n    // and then add something else\n    response.addToLog(\"key2\", \"value2\");\n    {\n      final Iterator<Map.Entry<String,Object>> it = response.getToLog().iterator();\n      assertTrue(it.hasNext());\n      final Map.Entry<String,Object> entry1 = it.next();\n      assertEquals(\"key1\", entry1.getKey());\n      assertEquals(\"value1\", entry1.getValue());\n      assertTrue(it.hasNext());\n      final Map.Entry<String,Object> entry2 = it.next();\n      assertEquals(\"key2\", entry2.getKey());\n      assertEquals(\"value2\", entry2.getValue());\n      assertFalse(it.hasNext());\n    }\n    assertEquals(\"key1=value1 key2=value2\", response.getToLogAsString(\"\"));\n    assertEquals(\"xyz789 key1=value1 key2=value2\", response.getToLogAsString(\"xyz789\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1407827f8682ca5d8a8747ac1dda65ebeff67164":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1407827f8682ca5d8a8747ac1dda65ebeff67164"]},"commit2Childs":{"1407827f8682ca5d8a8747ac1dda65ebeff67164":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1407827f8682ca5d8a8747ac1dda65ebeff67164"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}