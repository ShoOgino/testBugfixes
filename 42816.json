{"path":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testPoles().mjava","commits":[{"id":"3b6f51785c57651e9e1864b7b883037f24541c76","date":1271186480,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testPoles().mjava","pathOld":"/dev/null","sourceNew":"  public void testPoles() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double miles = 50.0;\n    lat = 89.99;\n    lng = 4;\n\n    if (VERBOSE) System.out.println(\"testPoleFlipping\");\n\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true, 2, 15);\n\n    if (VERBOSE) System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n\n      @Override\n      protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) {\n        return new CustomScoreProvider(reader) {\n          @Override // TODO: broken, as reader is not used!\n          public float customScore(int doc, float subQueryScore, float valSrcScore){\n            if (VERBOSE) System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n\n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = (float) ((miles - distance) / miles );\n            return score * subQueryScore;\n          }\n        };\n      }\n      \n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(customScore.createWeight(searcher),null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n\n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    if (VERBOSE) {\n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 18 \"+ distances.size());\n      System.out.println(\"Results should be 18 \"+ results);\n    }\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n      String name = d.get(\"name\");\n      double rsLat = Double.parseDouble(d.get(latField));\n      double rsLng = Double.parseDouble(d.get(lngField));\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n      if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      if (VERBOSE) System.out.println(\"checking limit \"+ distance + \" < \" + miles);\n      assertTrue((distance < miles ));\n      if (VERBOSE) System.out.println(\"checking sort \"+ geo_distance + \" >= \" + lastDistance);\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8e6ff1dd868eee0c9202357a60a5636ad62cb0c5","date":1271290552,"type":4,"author":"Grant Ingersoll","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testPoles().mjava","sourceNew":null,"sourceOld":"  public void testPoles() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double miles = 50.0;\n    lat = 89.99;\n    lng = 4;\n\n    if (VERBOSE) System.out.println(\"testPoleFlipping\");\n\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true, 2, 15);\n\n    if (VERBOSE) System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n\n      @Override\n      protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) {\n        return new CustomScoreProvider(reader) {\n          @Override // TODO: broken, as reader is not used!\n          public float customScore(int doc, float subQueryScore, float valSrcScore){\n            if (VERBOSE) System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n\n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = (float) ((miles - distance) / miles );\n            return score * subQueryScore;\n          }\n        };\n      }\n      \n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(customScore.createWeight(searcher),null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n\n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    if (VERBOSE) {\n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 18 \"+ distances.size());\n      System.out.println(\"Results should be 18 \"+ results);\n    }\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n      String name = d.get(\"name\");\n      double rsLat = Double.parseDouble(d.get(latField));\n      double rsLng = Double.parseDouble(d.get(lngField));\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n      if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      if (VERBOSE) System.out.println(\"checking limit \"+ distance + \" < \" + miles);\n      assertTrue((distance < miles ));\n      if (VERBOSE) System.out.println(\"checking sort \"+ geo_distance + \" >= \" + lastDistance);\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3b6f51785c57651e9e1864b7b883037f24541c76":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8e6ff1dd868eee0c9202357a60a5636ad62cb0c5":["3b6f51785c57651e9e1864b7b883037f24541c76"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8e6ff1dd868eee0c9202357a60a5636ad62cb0c5"]},"commit2Childs":{"3b6f51785c57651e9e1864b7b883037f24541c76":["8e6ff1dd868eee0c9202357a60a5636ad62cb0c5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b6f51785c57651e9e1864b7b883037f24541c76"],"8e6ff1dd868eee0c9202357a60a5636ad62cb0c5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}