{"path":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\n                      new StringReader(\"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = writer.getReader();\n\n    TermPositions tp = r.termPositions(new Term(\"content\", \"a\"));\n    int count = 0;\n    assertTrue(tp.next());\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertFalse(tp.next());\n\n    IndexSearcher is = new IndexSearcher(r);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    //System.out.println(\"\\ngetPayloadSpans test\");\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      //System.out.println(pspans.doc() + \" - \" + pspans.start() + \" - \"+ pspans.end());\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      count += payloads.size();\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    //System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      //System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" + spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n  \n    //System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\n                      new StringReader(\"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = writer.getReader();\n\n    TermPositions tp = r.termPositions(new Term(\"content\", \"a\"));\n    int count = 0;\n    assertTrue(tp.next());\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertFalse(tp.next());\n\n    IndexSearcher is = new IndexSearcher(r);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    //System.out.println(\"\\ngetPayloadSpans test\");\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      //System.out.println(pspans.doc() + \" - \" + pspans.start() + \" - \"+ pspans.end());\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      count += payloads.size();\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    //System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      //System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" + spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n  \n    //System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = writer.getReader();\n\n    TermPositions tp = r.termPositions(new Term(\"content\", \"a\"));\n    int count = 0;\n    assertTrue(tp.next());\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertFalse(tp.next());\n\n    IndexSearcher is = new IndexSearcher(r);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (@SuppressWarnings(\"unused\") byte[] bytes : payloads) {\n        count++;\n        if (!VERBOSE) {\n          // do nothing\n        } else {\n          System.out.println(\"  payload: \" + new String((byte[]) bytes));\n        }\n      }\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\n                      new StringReader(\"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = writer.getReader();\n\n    TermPositions tp = r.termPositions(new Term(\"content\", \"a\"));\n    int count = 0;\n    assertTrue(tp.next());\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertFalse(tp.next());\n\n    IndexSearcher is = new IndexSearcher(r);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    //System.out.println(\"\\ngetPayloadSpans test\");\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      //System.out.println(pspans.doc() + \" - \" + pspans.start() + \" - \"+ pspans.end());\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      count += payloads.size();\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    //System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      //System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" + spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n  \n    //System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = writer.getReader();\n\n    DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(r,\n                                                               MultiFields.getDeletedDocs(r),\n                                                               \"content\",\n                                                               new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != tp.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(tp.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = new IndexSearcher(r);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (@SuppressWarnings(\"unused\") byte[] bytes : payloads) {\n        count++;\n        if (!VERBOSE) {\n          // do nothing\n        } else {\n          System.out.println(\"  payload: \" + new String((byte[]) bytes));\n        }\n      }\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = writer.getReader();\n\n    TermPositions tp = r.termPositions(new Term(\"content\", \"a\"));\n    int count = 0;\n    assertTrue(tp.next());\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertFalse(tp.next());\n\n    IndexSearcher is = new IndexSearcher(r);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (@SuppressWarnings(\"unused\") byte[] bytes : payloads) {\n        count++;\n        if (!VERBOSE) {\n          // do nothing\n        } else {\n          System.out.println(\"  payload: \" + new String((byte[]) bytes));\n        }\n      }\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = writer.getReader();\n\n    DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(r,\n                                                               MultiFields.getDeletedDocs(r),\n                                                               \"content\",\n                                                               new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != tp.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(tp.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = new IndexSearcher(r);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (@SuppressWarnings(\"unused\") byte[] bytes : payloads) {\n        count++;\n        if (!VERBOSE) {\n          // do nothing\n        } else {\n          System.out.println(\"  payload: \" + new String((byte[]) bytes));\n        }\n      }\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = writer.getReader();\n\n    DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(r,\n                                                               MultiFields.getDeletedDocs(r),\n                                                               \"content\",\n                                                               new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != tp.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(tp.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = new IndexSearcher(r);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (@SuppressWarnings(\"unused\") byte[] bytes : payloads) {\n        count++;\n        if (!VERBOSE) {\n          // do nothing\n        } else {\n          System.out.println(\"  payload: \" + new String((byte[]) bytes));\n        }\n      }\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = writer.getReader();\n\n    DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(r,\n                                                               MultiFields.getDeletedDocs(r),\n                                                               \"content\",\n                                                               new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != tp.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(tp.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = new IndexSearcher(r);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (@SuppressWarnings(\"unused\") byte[] bytes : payloads) {\n        count++;\n        if (!VERBOSE) {\n          // do nothing\n        } else {\n          System.out.println(\"  payload: \" + new String((byte[]) bytes));\n        }\n      }\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = writer.getReader();\n\n    TermPositions tp = r.termPositions(new Term(\"content\", \"a\"));\n    int count = 0;\n    assertTrue(tp.next());\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertFalse(tp.next());\n\n    IndexSearcher is = new IndexSearcher(r);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (@SuppressWarnings(\"unused\") byte[] bytes : payloads) {\n        count++;\n        if (!VERBOSE) {\n          // do nothing\n        } else {\n          System.out.println(\"  payload: \" + new String((byte[]) bytes));\n        }\n      }\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15bbd254c1506df5299c4df8c148262c7bd6301e","date":1279913113,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir, new TestPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = writer.getReader();\n\n    DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(r,\n                                                               MultiFields.getDeletedDocs(r),\n                                                               \"content\",\n                                                               new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != tp.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(tp.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = new IndexSearcher(r);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (@SuppressWarnings(\"unused\") byte[] bytes : payloads) {\n        count++;\n        if (!VERBOSE) {\n          // do nothing\n        } else {\n          System.out.println(\"  payload: \" + new String((byte[]) bytes));\n        }\n      }\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = writer.getReader();\n\n    DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(r,\n                                                               MultiFields.getDeletedDocs(r),\n                                                               \"content\",\n                                                               new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != tp.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(tp.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = new IndexSearcher(r);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (@SuppressWarnings(\"unused\") byte[] bytes : payloads) {\n        count++;\n        if (!VERBOSE) {\n          // do nothing\n        } else {\n          System.out.println(\"  payload: \" + new String((byte[]) bytes));\n        }\n      }\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir, new TestPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = writer.getReader();\n\n    DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(r,\n                                                               MultiFields.getDeletedDocs(r),\n                                                               \"content\",\n                                                               new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != tp.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(tp.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = new IndexSearcher(r);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (@SuppressWarnings(\"unused\") byte[] bytes : payloads) {\n        count++;\n        if (!VERBOSE) {\n          // do nothing\n        } else {\n          System.out.println(\"  payload: \" + new String((byte[]) bytes));\n        }\n      }\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = writer.getReader();\n\n    DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(r,\n                                                               MultiFields.getDeletedDocs(r),\n                                                               \"content\",\n                                                               new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != tp.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(tp.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = new IndexSearcher(r);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (@SuppressWarnings(\"unused\") byte[] bytes : payloads) {\n        count++;\n        if (!VERBOSE) {\n          // do nothing\n        } else {\n          System.out.println(\"  payload: \" + new String((byte[]) bytes));\n        }\n      }\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir, new TestPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = writer.getReader();\n\n    DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(r,\n                                                               MultiFields.getDeletedDocs(r),\n                                                               \"content\",\n                                                               new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != tp.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(tp.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = new IndexSearcher(r);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (@SuppressWarnings(\"unused\") byte[] bytes : payloads) {\n        count++;\n        if (!VERBOSE) {\n          // do nothing\n        } else {\n          System.out.println(\"  payload: \" + new String((byte[]) bytes));\n        }\n      }\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = writer.getReader();\n\n    DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(r,\n                                                               MultiFields.getDeletedDocs(r),\n                                                               \"content\",\n                                                               new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != tp.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(tp.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = new IndexSearcher(r);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (@SuppressWarnings(\"unused\") byte[] bytes : payloads) {\n        count++;\n        if (!VERBOSE) {\n          // do nothing\n        } else {\n          System.out.println(\"  payload: \" + new String((byte[]) bytes));\n        }\n      }\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d302ba328993a5b449c2e0b3b5e15ae53e45879","date":1281609097,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir, new TestPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = writer.getReader();\n\n    DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(r,\n                                                               MultiFields.getDeletedDocs(r),\n                                                               \"content\",\n                                                               new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != tp.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(tp.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = new IndexSearcher(SlowMultiReaderWrapper.wrap(r));\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (@SuppressWarnings(\"unused\") byte[] bytes : payloads) {\n        count++;\n        if (!VERBOSE) {\n          // do nothing\n        } else {\n          System.out.println(\"  payload: \" + new String((byte[]) bytes));\n        }\n      }\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir, new TestPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = writer.getReader();\n\n    DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(r,\n                                                               MultiFields.getDeletedDocs(r),\n                                                               \"content\",\n                                                               new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != tp.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(tp.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = new IndexSearcher(r);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (@SuppressWarnings(\"unused\") byte[] bytes : payloads) {\n        count++;\n        if (!VERBOSE) {\n          // do nothing\n        } else {\n          System.out.println(\"  payload: \" + new String((byte[]) bytes));\n        }\n      }\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Random random = newRandom();\n    Directory dir = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new TestPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = writer.getReader();\n\n    DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(r,\n                                                               MultiFields.getDeletedDocs(r),\n                                                               \"content\",\n                                                               new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != tp.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(tp.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = new IndexSearcher(SlowMultiReaderWrapper.wrap(r));\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (@SuppressWarnings(\"unused\") byte[] bytes : payloads) {\n        count++;\n        if (!VERBOSE) {\n          // do nothing\n        } else {\n          System.out.println(\"  payload: \" + new String((byte[]) bytes));\n        }\n      }\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir, new TestPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = writer.getReader();\n\n    DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(r,\n                                                               MultiFields.getDeletedDocs(r),\n                                                               \"content\",\n                                                               new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != tp.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(tp.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = new IndexSearcher(SlowMultiReaderWrapper.wrap(r));\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (@SuppressWarnings(\"unused\") byte[] bytes : payloads) {\n        count++;\n        if (!VERBOSE) {\n          // do nothing\n        } else {\n          System.out.println(\"  payload: \" + new String((byte[]) bytes));\n        }\n      }\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new TestPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = writer.getReader();\n\n    DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(r,\n                                                               MultiFields.getDeletedDocs(r),\n                                                               \"content\",\n                                                               new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != tp.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(tp.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = new IndexSearcher(SlowMultiReaderWrapper.wrap(r));\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (@SuppressWarnings(\"unused\") byte[] bytes : payloads) {\n        count++;\n        if (!VERBOSE) {\n          // do nothing\n        } else {\n          System.out.println(\"  payload: \" + new String((byte[]) bytes));\n        }\n      }\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Random random = newRandom();\n    Directory dir = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new TestPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = writer.getReader();\n\n    DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(r,\n                                                               MultiFields.getDeletedDocs(r),\n                                                               \"content\",\n                                                               new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != tp.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(tp.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = new IndexSearcher(SlowMultiReaderWrapper.wrap(r));\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (@SuppressWarnings(\"unused\") byte[] bytes : payloads) {\n        count++;\n        if (!VERBOSE) {\n          // do nothing\n        } else {\n          System.out.println(\"  payload: \" + new String((byte[]) bytes));\n        }\n      }\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"36f5ca41cd8e60ec2be30ea9ed4f9d26b5a98e04","date":1285448136,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new TestPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = writer.getReader();\n\n    DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(r,\n                                                               MultiFields.getDeletedDocs(r),\n                                                               \"content\",\n                                                               new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != tp.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(tp.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = new IndexSearcher(SlowMultiReaderWrapper.wrap(r));\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new TestPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = writer.getReader();\n\n    DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(r,\n                                                               MultiFields.getDeletedDocs(r),\n                                                               \"content\",\n                                                               new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != tp.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(tp.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = new IndexSearcher(SlowMultiReaderWrapper.wrap(r));\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (@SuppressWarnings(\"unused\") byte[] bytes : payloads) {\n        count++;\n        if (!VERBOSE) {\n          // do nothing\n        } else {\n          System.out.println(\"  payload: \" + new String((byte[]) bytes));\n        }\n      }\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"498e168d849b4dbc097ac7b31f6db170d6f55725","date":1286807836,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = writer.getReader();\n\n    DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(r,\n                                                               MultiFields.getDeletedDocs(r),\n                                                               \"content\",\n                                                               new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != tp.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(tp.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = new IndexSearcher(SlowMultiReaderWrapper.wrap(r));\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new TestPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = writer.getReader();\n\n    DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(r,\n                                                               MultiFields.getDeletedDocs(r),\n                                                               \"content\",\n                                                               new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != tp.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(tp.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = new IndexSearcher(SlowMultiReaderWrapper.wrap(r));\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"51c34a3639838887e7997850b6be80f838a4d6f7","date":1290278815,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = new SlowMultiReaderWrapper(writer.getReader());\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getDeletedDocs(),\n                                                     \"content\",\n                                                     new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != tp.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(tp.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = new IndexSearcher(r);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = writer.getReader();\n\n    DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(r,\n                                                               MultiFields.getDeletedDocs(r),\n                                                               \"content\",\n                                                               new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != tp.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(tp.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = new IndexSearcher(SlowMultiReaderWrapper.wrap(r));\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = new SlowMultiReaderWrapper(writer.getReader());\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getDeletedDocs(),\n                                                     \"content\",\n                                                     new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != tp.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(tp.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = new IndexSearcher(r);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = writer.getReader();\n\n    DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(r,\n                                                               MultiFields.getDeletedDocs(r),\n                                                               \"content\",\n                                                               new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != tp.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(tp.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = new IndexSearcher(SlowMultiReaderWrapper.wrap(r));\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = new SlowMultiReaderWrapper(writer.getReader());\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getDeletedDocs(),\n                                                     \"content\",\n                                                     new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != tp.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(tp.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = new IndexSearcher(r);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir, new TestPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = writer.getReader();\n\n    DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(r,\n                                                               MultiFields.getDeletedDocs(r),\n                                                               \"content\",\n                                                               new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != tp.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(tp.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = new IndexSearcher(r);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (@SuppressWarnings(\"unused\") byte[] bytes : payloads) {\n        count++;\n        if (!VERBOSE) {\n          // do nothing\n        } else {\n          System.out.println(\"  payload: \" + new String((byte[]) bytes));\n        }\n      }\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8323d210478d76a02372693d254b69aac614689","date":1295877066,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    SlowMultiReaderWrapper r = new SlowMultiReaderWrapper(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getDeletedDocs(),\n                                                     \"content\",\n                                                     new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocsAndPositionsEnum.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = new IndexSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = new SlowMultiReaderWrapper(writer.getReader());\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getDeletedDocs(),\n                                                     \"content\",\n                                                     new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != tp.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(tp.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = new IndexSearcher(r);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    SlowMultiReaderWrapper r = new SlowMultiReaderWrapper(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getDeletedDocs(),\n                                                     \"content\",\n                                                     new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocsAndPositionsEnum.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = new IndexSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = new SlowMultiReaderWrapper(writer.getReader());\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getDeletedDocs(),\n                                                     \"content\",\n                                                     new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != tp.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(tp.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = new IndexSearcher(r);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    SlowMultiReaderWrapper r = new SlowMultiReaderWrapper(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getDeletedDocs(),\n                                                     \"content\",\n                                                     new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocsAndPositionsEnum.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    SlowMultiReaderWrapper r = new SlowMultiReaderWrapper(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getDeletedDocs(),\n                                                     \"content\",\n                                                     new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocsAndPositionsEnum.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = new IndexSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    SlowMultiReaderWrapper r = new SlowMultiReaderWrapper(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getDeletedDocs(),\n                                                     \"content\",\n                                                     new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocsAndPositionsEnum.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = new SlowMultiReaderWrapper(writer.getReader());\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getDeletedDocs(),\n                                                     \"content\",\n                                                     new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != tp.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(tp.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = new IndexSearcher(r);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    SlowMultiReaderWrapper r = new SlowMultiReaderWrapper(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getDeletedDocs(),\n                                                     \"content\",\n                                                     new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocsAndPositionsEnum.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    SlowMultiReaderWrapper r = new SlowMultiReaderWrapper(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getDeletedDocs(),\n                                                     \"content\",\n                                                     new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocsAndPositionsEnum.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = new IndexSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    SlowMultiReaderWrapper r = new SlowMultiReaderWrapper(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getLiveDocs(),\n                                                  \"content\",\n                                                  new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocsAndPositionsEnum.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    SlowMultiReaderWrapper r = new SlowMultiReaderWrapper(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getDeletedDocs(),\n                                                     \"content\",\n                                                     new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocsAndPositionsEnum.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    SlowMultiReaderWrapper r = new SlowMultiReaderWrapper(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getLiveDocs(),\n                                                  \"content\",\n                                                  new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocsAndPositionsEnum.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    SlowMultiReaderWrapper r = new SlowMultiReaderWrapper(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getDeletedDocs(),\n                                                     \"content\",\n                                                     new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocsAndPositionsEnum.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    SlowMultiReaderWrapper r = new SlowMultiReaderWrapper(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getLiveDocs(),\n                                                  \"content\",\n                                                  new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocsAndPositionsEnum.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    SlowMultiReaderWrapper r = new SlowMultiReaderWrapper(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getDeletedDocs(),\n                                                     \"content\",\n                                                     new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocsAndPositionsEnum.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    SlowMultiReaderWrapper r = new SlowMultiReaderWrapper(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getLiveDocs(),\n                                                  \"content\",\n                                                  new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocsAndPositionsEnum.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    SlowMultiReaderWrapper r = new SlowMultiReaderWrapper(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getLiveDocs(),\n                                                  \"content\",\n                                                  new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocsAndPositionsEnum.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"31f025ae60076ae95274433f3fe8e6ace2857a87","date":1326669465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    SlowMultiReaderWrapper r = new SlowMultiReaderWrapper(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getLiveDocs(),\n                                                  \"content\",\n                                                  new BytesRef(\"a\"),\n                                                  false);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocsAndPositionsEnum.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    SlowMultiReaderWrapper r = new SlowMultiReaderWrapper(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getLiveDocs(),\n                                                  \"content\",\n                                                  new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocsAndPositionsEnum.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"386d1b0dcb065f1bfc494b1407cb41c536b95485","date":1327848512,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    SlowCompositeReaderWrapper r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getLiveDocs(),\n                                                  \"content\",\n                                                  new BytesRef(\"a\"),\n                                                  false);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocsAndPositionsEnum.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    SlowMultiReaderWrapper r = new SlowMultiReaderWrapper(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getLiveDocs(),\n                                                  \"content\",\n                                                  new BytesRef(\"a\"),\n                                                  false);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocsAndPositionsEnum.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a2ec9a9068164200de82395f0e8537a9d9302f3f","date":1327856476,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    AtomicIndexReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getLiveDocs(),\n                                                  \"content\",\n                                                  new BytesRef(\"a\"),\n                                                  false);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocsAndPositionsEnum.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    SlowCompositeReaderWrapper r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getLiveDocs(),\n                                                  \"content\",\n                                                  new BytesRef(\"a\"),\n                                                  false);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocsAndPositionsEnum.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getLiveDocs(),\n                                                  \"content\",\n                                                  new BytesRef(\"a\"),\n                                                  false);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocsAndPositionsEnum.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    AtomicIndexReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getLiveDocs(),\n                                                  \"content\",\n                                                  new BytesRef(\"a\"),\n                                                  false);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocsAndPositionsEnum.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getLiveDocs(),\n                                                  \"content\",\n                                                  new BytesRef(\"a\"),\n                                                  false);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocsAndPositionsEnum.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    SlowMultiReaderWrapper r = new SlowMultiReaderWrapper(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getLiveDocs(),\n                                                  \"content\",\n                                                  new BytesRef(\"a\"),\n                                                  false);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocsAndPositionsEnum.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getLiveDocs(),\n                                                  \"content\",\n                                                  new BytesRef(\"a\"),\n                                                  false);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocsAndPositionsEnum.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getLiveDocs(),\n                                                  \"content\",\n                                                  new BytesRef(\"a\"),\n                                                  false);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocsAndPositionsEnum.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c8323d210478d76a02372693d254b69aac614689":["51c34a3639838887e7997850b6be80f838a4d6f7"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["c084e47df29de3330311d69dabf515ceaa989512"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0d302ba328993a5b449c2e0b3b5e15ae53e45879":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","51c34a3639838887e7997850b6be80f838a4d6f7"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c8323d210478d76a02372693d254b69aac614689"],"c084e47df29de3330311d69dabf515ceaa989512":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a2ec9a9068164200de82395f0e8537a9d9302f3f":["386d1b0dcb065f1bfc494b1407cb41c536b95485"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28427ef110c4c5bf5b4057731b83110bd1e13724":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","790e1fde4caa765b3faaad3fbcd25c6973450336"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["c084e47df29de3330311d69dabf515ceaa989512","15bbd254c1506df5299c4df8c148262c7bd6301e"],"36f5ca41cd8e60ec2be30ea9ed4f9d26b5a98e04":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["0d302ba328993a5b449c2e0b3b5e15ae53e45879"],"51c34a3639838887e7997850b6be80f838a4d6f7":["498e168d849b4dbc097ac7b31f6db170d6f55725"],"5f4e87790277826a2aea119328600dfb07761f32":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","c084e47df29de3330311d69dabf515ceaa989512"],"498e168d849b4dbc097ac7b31f6db170d6f55725":["36f5ca41cd8e60ec2be30ea9ed4f9d26b5a98e04"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["790e1fde4caa765b3faaad3fbcd25c6973450336","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["31f025ae60076ae95274433f3fe8e6ace2857a87","da6d5ac19a80d65b1e864251f155d30960353b7e"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["790e1fde4caa765b3faaad3fbcd25c6973450336","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["c8323d210478d76a02372693d254b69aac614689"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["a2ec9a9068164200de82395f0e8537a9d9302f3f"],"386d1b0dcb065f1bfc494b1407cb41c536b95485":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"3bb13258feba31ab676502787ab2e1779f129b7a":["498e168d849b4dbc097ac7b31f6db170d6f55725","51c34a3639838887e7997850b6be80f838a4d6f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"c8323d210478d76a02372693d254b69aac614689":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","790e1fde4caa765b3faaad3fbcd25c6973450336"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["1509f151d7692d84fae414b2b799ac06ba60fcb4","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["28427ef110c4c5bf5b4057731b83110bd1e13724","5f4e87790277826a2aea119328600dfb07761f32"],"0d302ba328993a5b449c2e0b3b5e15ae53e45879":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c084e47df29de3330311d69dabf515ceaa989512":["15bbd254c1506df5299c4df8c148262c7bd6301e","4b103252dee6afa1b6d7a622c773d178788eb85a","5f4e87790277826a2aea119328600dfb07761f32"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["36f5ca41cd8e60ec2be30ea9ed4f9d26b5a98e04"],"a2ec9a9068164200de82395f0e8537a9d9302f3f":["da6d5ac19a80d65b1e864251f155d30960353b7e"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["c084e47df29de3330311d69dabf515ceaa989512"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["5cab9a86bd67202d20b6adc463008c8e982b070a","386d1b0dcb065f1bfc494b1407cb41c536b95485"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["0d302ba328993a5b449c2e0b3b5e15ae53e45879","3242a09f703274d3b9283f2064a1a33064b53a1b"],"36f5ca41cd8e60ec2be30ea9ed4f9d26b5a98e04":["498e168d849b4dbc097ac7b31f6db170d6f55725"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"51c34a3639838887e7997850b6be80f838a4d6f7":["c8323d210478d76a02372693d254b69aac614689","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"498e168d849b4dbc097ac7b31f6db170d6f55725":["51c34a3639838887e7997850b6be80f838a4d6f7","3bb13258feba31ab676502787ab2e1779f129b7a"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"790e1fde4caa765b3faaad3fbcd25c6973450336":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"386d1b0dcb065f1bfc494b1407cb41c536b95485":["a2ec9a9068164200de82395f0e8537a9d9302f3f"],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}