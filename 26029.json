{"path":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#parseParams(String,VariableResolver).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#parseParams(String,VariableResolver).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Parses a string of expression into separate params. The values are separated by commas. each value will be\n   * translated into one of the following:\n   * &lt;ol&gt;\n   * &lt;li&gt;If it is in single quotes the value will be translated to a String&lt;/li&gt;\n   * &lt;li&gt;If is is not in quotes and is a number a it will be translated into a Double&lt;/li&gt;\n   * &lt;li&gt;else it is a variable which can be resolved and it will be put in as an instance of VariableWrapper&lt;/li&gt;\n   * &lt;/ol&gt;\n   *\n   * @param expression the expression to be parsed\n   * @param vr the VariableResolver instance for resolving variables\n   *\n   * @return a List of objects which can either be a string, number or a variable wrapper\n   */\n  public static List parseParams(String expression, VariableResolver vr) {\n    List result = new ArrayList();\n    expression = expression.trim();\n    String[] ss = expression.split(\",\");\n    for (int i = 0; i < ss.length; i++) {\n      ss[i] = ss[i].trim();\n      if (ss[i].startsWith(\"'\")) {//a string param has started\n        StringBuilder sb = new StringBuilder();\n        while (true) {\n          sb.append(ss[i]);\n          if (ss[i].endsWith(\"'\")) break;\n          i++;\n          if (i >= ss.length)\n            throw new DataImportHandlerException(SEVERE, \"invalid string at \" + ss[i - 1] + \" in function params: \" + expression);\n          sb.append(\",\");\n        }\n        String s = sb.substring(1, sb.length() - 1);\n        s = s.replaceAll(\"\\\\\\\\'\", \"'\");\n        result.add(s);\n      } else {\n        if (Character.isDigit(ss[i].charAt(0))) {\n          try {\n            Double doub = Double.parseDouble(ss[i]);\n            result.add(doub);\n          } catch (NumberFormatException e) {\n            if (vr.resolve(ss[i]) == null) {\n              wrapAndThrow(\n                      SEVERE, e, \"Invalid number :\" + ss[i] +\n                              \"in parameters  \" + expression);\n            }\n          }\n        } else {\n          result.add(new VariableWrapper(ss[i], vr));\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#parseParams(String,VariableResolver).mjava","sourceNew":null,"sourceOld":"  /**\n   * Parses a string of expression into separate params. The values are separated by commas. each value will be\n   * translated into one of the following:\n   * &lt;ol&gt;\n   * &lt;li&gt;If it is in single quotes the value will be translated to a String&lt;/li&gt;\n   * &lt;li&gt;If is is not in quotes and is a number a it will be translated into a Double&lt;/li&gt;\n   * &lt;li&gt;else it is a variable which can be resolved and it will be put in as an instance of VariableWrapper&lt;/li&gt;\n   * &lt;/ol&gt;\n   *\n   * @param expression the expression to be parsed\n   * @param vr the VariableResolver instance for resolving variables\n   *\n   * @return a List of objects which can either be a string, number or a variable wrapper\n   */\n  public static List parseParams(String expression, VariableResolver vr) {\n    List result = new ArrayList();\n    expression = expression.trim();\n    String[] ss = expression.split(\",\");\n    for (int i = 0; i < ss.length; i++) {\n      ss[i] = ss[i].trim();\n      if (ss[i].startsWith(\"'\")) {//a string param has started\n        StringBuilder sb = new StringBuilder();\n        while (true) {\n          sb.append(ss[i]);\n          if (ss[i].endsWith(\"'\")) break;\n          i++;\n          if (i >= ss.length)\n            throw new DataImportHandlerException(SEVERE, \"invalid string at \" + ss[i - 1] + \" in function params: \" + expression);\n          sb.append(\",\");\n        }\n        String s = sb.substring(1, sb.length() - 1);\n        s = s.replaceAll(\"\\\\\\\\'\", \"'\");\n        result.add(s);\n      } else {\n        if (Character.isDigit(ss[i].charAt(0))) {\n          try {\n            Double doub = Double.parseDouble(ss[i]);\n            result.add(doub);\n          } catch (NumberFormatException e) {\n            if (vr.resolve(ss[i]) == null) {\n              wrapAndThrow(\n                      SEVERE, e, \"Invalid number :\" + ss[i] +\n                              \"in parameters  \" + expression);\n            }\n          }\n        } else {\n          result.add(new VariableWrapper(ss[i], vr));\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#parseParams(String,VariableResolver).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#parseParams(String,VariableResolver).mjava","sourceNew":"  /**\n   * Parses a string of expression into separate params. The values are separated by commas. each value will be\n   * translated into one of the following:\n   * &lt;ol&gt;\n   * &lt;li&gt;If it is in single quotes the value will be translated to a String&lt;/li&gt;\n   * &lt;li&gt;If is is not in quotes and is a number a it will be translated into a Double&lt;/li&gt;\n   * &lt;li&gt;else it is a variable which can be resolved and it will be put in as an instance of VariableWrapper&lt;/li&gt;\n   * &lt;/ol&gt;\n   *\n   * @param expression the expression to be parsed\n   * @param vr the VariableResolver instance for resolving variables\n   *\n   * @return a List of objects which can either be a string, number or a variable wrapper\n   */\n  public static List parseParams(String expression, VariableResolver vr) {\n    List result = new ArrayList();\n    expression = expression.trim();\n    String[] ss = expression.split(\",\");\n    for (int i = 0; i < ss.length; i++) {\n      ss[i] = ss[i].trim();\n      if (ss[i].startsWith(\"'\")) {//a string param has started\n        StringBuilder sb = new StringBuilder();\n        while (true) {\n          sb.append(ss[i]);\n          if (ss[i].endsWith(\"'\")) break;\n          i++;\n          if (i >= ss.length)\n            throw new DataImportHandlerException(SEVERE, \"invalid string at \" + ss[i - 1] + \" in function params: \" + expression);\n          sb.append(\",\");\n        }\n        String s = sb.substring(1, sb.length() - 1);\n        s = s.replaceAll(\"\\\\\\\\'\", \"'\");\n        result.add(s);\n      } else {\n        if (Character.isDigit(ss[i].charAt(0))) {\n          try {\n            Double doub = Double.parseDouble(ss[i]);\n            result.add(doub);\n          } catch (NumberFormatException e) {\n            if (vr.resolve(ss[i]) == null) {\n              wrapAndThrow(\n                      SEVERE, e, \"Invalid number :\" + ss[i] +\n                              \"in parameters  \" + expression);\n            }\n          }\n        } else {\n          result.add(new VariableWrapper(ss[i], vr));\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Parses a string of expression into separate params. The values are separated by commas. each value will be\n   * translated into one of the following:\n   * &lt;ol&gt;\n   * &lt;li&gt;If it is in single quotes the value will be translated to a String&lt;/li&gt;\n   * &lt;li&gt;If is is not in quotes and is a number a it will be translated into a Double&lt;/li&gt;\n   * &lt;li&gt;else it is a variable which can be resolved and it will be put in as an instance of VariableWrapper&lt;/li&gt;\n   * &lt;/ol&gt;\n   *\n   * @param expression the expression to be parsed\n   * @param vr the VariableResolver instance for resolving variables\n   *\n   * @return a List of objects which can either be a string, number or a variable wrapper\n   */\n  public static List parseParams(String expression, VariableResolver vr) {\n    List result = new ArrayList();\n    expression = expression.trim();\n    String[] ss = expression.split(\",\");\n    for (int i = 0; i < ss.length; i++) {\n      ss[i] = ss[i].trim();\n      if (ss[i].startsWith(\"'\")) {//a string param has started\n        StringBuilder sb = new StringBuilder();\n        while (true) {\n          sb.append(ss[i]);\n          if (ss[i].endsWith(\"'\")) break;\n          i++;\n          if (i >= ss.length)\n            throw new DataImportHandlerException(SEVERE, \"invalid string at \" + ss[i - 1] + \" in function params: \" + expression);\n          sb.append(\",\");\n        }\n        String s = sb.substring(1, sb.length() - 1);\n        s = s.replaceAll(\"\\\\\\\\'\", \"'\");\n        result.add(s);\n      } else {\n        if (Character.isDigit(ss[i].charAt(0))) {\n          try {\n            Double doub = Double.parseDouble(ss[i]);\n            result.add(doub);\n          } catch (NumberFormatException e) {\n            if (vr.resolve(ss[i]) == null) {\n              wrapAndThrow(\n                      SEVERE, e, \"Invalid number :\" + ss[i] +\n                              \"in parameters  \" + expression);\n            }\n          }\n        } else {\n          result.add(new VariableWrapper(ss[i], vr));\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#parseParams(String,VariableResolver).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Parses a string of expression into separate params. The values are separated by commas. each value will be\n   * translated into one of the following:\n   * &lt;ol&gt;\n   * &lt;li&gt;If it is in single quotes the value will be translated to a String&lt;/li&gt;\n   * &lt;li&gt;If is is not in quotes and is a number a it will be translated into a Double&lt;/li&gt;\n   * &lt;li&gt;else it is a variable which can be resolved and it will be put in as an instance of VariableWrapper&lt;/li&gt;\n   * &lt;/ol&gt;\n   *\n   * @param expression the expression to be parsed\n   * @param vr the VariableResolver instance for resolving variables\n   *\n   * @return a List of objects which can either be a string, number or a variable wrapper\n   */\n  public static List parseParams(String expression, VariableResolver vr) {\n    List result = new ArrayList();\n    expression = expression.trim();\n    String[] ss = expression.split(\",\");\n    for (int i = 0; i < ss.length; i++) {\n      ss[i] = ss[i].trim();\n      if (ss[i].startsWith(\"'\")) {//a string param has started\n        StringBuilder sb = new StringBuilder();\n        while (true) {\n          sb.append(ss[i]);\n          if (ss[i].endsWith(\"'\")) break;\n          i++;\n          if (i >= ss.length)\n            throw new DataImportHandlerException(SEVERE, \"invalid string at \" + ss[i - 1] + \" in function params: \" + expression);\n          sb.append(\",\");\n        }\n        String s = sb.substring(1, sb.length() - 1);\n        s = s.replaceAll(\"\\\\\\\\'\", \"'\");\n        result.add(s);\n      } else {\n        if (Character.isDigit(ss[i].charAt(0))) {\n          try {\n            Double doub = Double.parseDouble(ss[i]);\n            result.add(doub);\n          } catch (NumberFormatException e) {\n            if (vr.resolve(ss[i]) == null) {\n              wrapAndThrow(\n                      SEVERE, e, \"Invalid number :\" + ss[i] +\n                              \"in parameters  \" + expression);\n            }\n          }\n        } else {\n          result.add(new VariableWrapper(ss[i], vr));\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EvaluatorBag#parseParams(String,VariableResolver).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#parseParams(String,VariableResolver).mjava","sourceNew":"  /**\n   * Parses a string of expression into separate params. The values are separated by commas. each value will be\n   * translated into one of the following:\n   * &lt;ol&gt;\n   * &lt;li&gt;If it is in single quotes the value will be translated to a String&lt;/li&gt;\n   * &lt;li&gt;If is is not in quotes and is a number a it will be translated into a Double&lt;/li&gt;\n   * &lt;li&gt;else it is a variable which can be resolved and it will be put in as an instance of VariableWrapper&lt;/li&gt;\n   * &lt;/ol&gt;\n   *\n   * @param expression the expression to be parsed\n   * @param vr the VariableResolver instance for resolving variables\n   *\n   * @return a List of objects which can either be a string, number or a variable wrapper\n   */\n  public static List parseParams(String expression, VariableResolver vr) {\n    List result = new ArrayList();\n    expression = expression.trim();\n    String[] ss = expression.split(\",\");\n    for (int i = 0; i < ss.length; i++) {\n      ss[i] = ss[i].trim();\n      if (ss[i].startsWith(\"'\")) {//a string param has started\n        StringBuilder sb = new StringBuilder();\n        while (true) {\n          sb.append(ss[i]);\n          if (ss[i].endsWith(\"'\")) break;\n          i++;\n          if (i >= ss.length)\n            throw new DataImportHandlerException(SEVERE, \"invalid string at \" + ss[i - 1] + \" in function params: \" + expression);\n          sb.append(\",\");\n        }\n        String s = sb.substring(1, sb.length() - 1);\n        s = s.replaceAll(\"\\\\\\\\'\", \"'\");\n        result.add(s);\n      } else {\n        if (Character.isDigit(ss[i].charAt(0))) {\n          try {\n            Double doub = Double.parseDouble(ss[i]);\n            result.add(doub);\n          } catch (NumberFormatException e) {\n            if (vr.resolve(ss[i]) == null) {\n              wrapAndThrow(\n                      SEVERE, e, \"Invalid number :\" + ss[i] +\n                              \"in parameters  \" + expression);\n            }\n          }\n        } else {\n          result.add(new VariableWrapper(ss[i], vr));\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Parses a string of expression into separate params. The values are separated by commas. each value will be\n   * translated into one of the following:\n   * &lt;ol&gt;\n   * &lt;li&gt;If it is in single quotes the value will be translated to a String&lt;/li&gt;\n   * &lt;li&gt;If is is not in quotes and is a number a it will be translated into a Double&lt;/li&gt;\n   * &lt;li&gt;else it is a variable which can be resolved and it will be put in as an instance of VariableWrapper&lt;/li&gt;\n   * &lt;/ol&gt;\n   *\n   * @param expression the expression to be parsed\n   * @param vr the VariableResolver instance for resolving variables\n   *\n   * @return a List of objects which can either be a string, number or a variable wrapper\n   */\n  public static List parseParams(String expression, VariableResolver vr) {\n    List result = new ArrayList();\n    expression = expression.trim();\n    String[] ss = expression.split(\",\");\n    for (int i = 0; i < ss.length; i++) {\n      ss[i] = ss[i].trim();\n      if (ss[i].startsWith(\"'\")) {//a string param has started\n        StringBuilder sb = new StringBuilder();\n        while (true) {\n          sb.append(ss[i]);\n          if (ss[i].endsWith(\"'\")) break;\n          i++;\n          if (i >= ss.length)\n            throw new DataImportHandlerException(SEVERE, \"invalid string at \" + ss[i - 1] + \" in function params: \" + expression);\n          sb.append(\",\");\n        }\n        String s = sb.substring(1, sb.length() - 1);\n        s = s.replaceAll(\"\\\\\\\\'\", \"'\");\n        result.add(s);\n      } else {\n        if (Character.isDigit(ss[i].charAt(0))) {\n          try {\n            Double doub = Double.parseDouble(ss[i]);\n            result.add(doub);\n          } catch (NumberFormatException e) {\n            if (vr.resolve(ss[i]) == null) {\n              wrapAndThrow(\n                      SEVERE, e, \"Invalid number :\" + ss[i] +\n                              \"in parameters  \" + expression);\n            }\n          }\n        } else {\n          result.add(new VariableWrapper(ss[i], vr));\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EvaluatorBag#parseParams(String,VariableResolver).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#parseParams(String,VariableResolver).mjava","sourceNew":"  /**\n   * Parses a string of expression into separate params. The values are separated by commas. each value will be\n   * translated into one of the following:\n   * &lt;ol&gt;\n   * &lt;li&gt;If it is in single quotes the value will be translated to a String&lt;/li&gt;\n   * &lt;li&gt;If is is not in quotes and is a number a it will be translated into a Double&lt;/li&gt;\n   * &lt;li&gt;else it is a variable which can be resolved and it will be put in as an instance of VariableWrapper&lt;/li&gt;\n   * &lt;/ol&gt;\n   *\n   * @param expression the expression to be parsed\n   * @param vr the VariableResolver instance for resolving variables\n   *\n   * @return a List of objects which can either be a string, number or a variable wrapper\n   */\n  public static List parseParams(String expression, VariableResolver vr) {\n    List result = new ArrayList();\n    expression = expression.trim();\n    String[] ss = expression.split(\",\");\n    for (int i = 0; i < ss.length; i++) {\n      ss[i] = ss[i].trim();\n      if (ss[i].startsWith(\"'\")) {//a string param has started\n        StringBuilder sb = new StringBuilder();\n        while (true) {\n          sb.append(ss[i]);\n          if (ss[i].endsWith(\"'\")) break;\n          i++;\n          if (i >= ss.length)\n            throw new DataImportHandlerException(SEVERE, \"invalid string at \" + ss[i - 1] + \" in function params: \" + expression);\n          sb.append(\",\");\n        }\n        String s = sb.substring(1, sb.length() - 1);\n        s = s.replaceAll(\"\\\\\\\\'\", \"'\");\n        result.add(s);\n      } else {\n        if (Character.isDigit(ss[i].charAt(0))) {\n          try {\n            Double doub = Double.parseDouble(ss[i]);\n            result.add(doub);\n          } catch (NumberFormatException e) {\n            if (vr.resolve(ss[i]) == null) {\n              wrapAndThrow(\n                      SEVERE, e, \"Invalid number :\" + ss[i] +\n                              \"in parameters  \" + expression);\n            }\n          }\n        } else {\n          result.add(new VariableWrapper(ss[i], vr));\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Parses a string of expression into separate params. The values are separated by commas. each value will be\n   * translated into one of the following:\n   * &lt;ol&gt;\n   * &lt;li&gt;If it is in single quotes the value will be translated to a String&lt;/li&gt;\n   * &lt;li&gt;If is is not in quotes and is a number a it will be translated into a Double&lt;/li&gt;\n   * &lt;li&gt;else it is a variable which can be resolved and it will be put in as an instance of VariableWrapper&lt;/li&gt;\n   * &lt;/ol&gt;\n   *\n   * @param expression the expression to be parsed\n   * @param vr the VariableResolver instance for resolving variables\n   *\n   * @return a List of objects which can either be a string, number or a variable wrapper\n   */\n  public static List parseParams(String expression, VariableResolver vr) {\n    List result = new ArrayList();\n    expression = expression.trim();\n    String[] ss = expression.split(\",\");\n    for (int i = 0; i < ss.length; i++) {\n      ss[i] = ss[i].trim();\n      if (ss[i].startsWith(\"'\")) {//a string param has started\n        StringBuilder sb = new StringBuilder();\n        while (true) {\n          sb.append(ss[i]);\n          if (ss[i].endsWith(\"'\")) break;\n          i++;\n          if (i >= ss.length)\n            throw new DataImportHandlerException(SEVERE, \"invalid string at \" + ss[i - 1] + \" in function params: \" + expression);\n          sb.append(\",\");\n        }\n        String s = sb.substring(1, sb.length() - 1);\n        s = s.replaceAll(\"\\\\\\\\'\", \"'\");\n        result.add(s);\n      } else {\n        if (Character.isDigit(ss[i].charAt(0))) {\n          try {\n            Double doub = Double.parseDouble(ss[i]);\n            result.add(doub);\n          } catch (NumberFormatException e) {\n            if (vr.resolve(ss[i]) == null) {\n              wrapAndThrow(\n                      SEVERE, e, \"Invalid number :\" + ss[i] +\n                              \"in parameters  \" + expression);\n            }\n          }\n        } else {\n          result.add(new VariableWrapper(ss[i], vr));\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["1da8d55113b689b06716246649de6f62430f15c0","1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["1da8d55113b689b06716246649de6f62430f15c0","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}