{"path":"solr/core/src/test/org/apache/solr/search/TestRTGBase#badVersion(Random,long).mjava","commits":[{"id":"2b2e7536fb06d1abad6c7543a0657bdad5242c5e","date":1341417762,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRTGBase#badVersion(Random,long).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#badVersion(Random,long).mjava","sourceNew":"  protected long badVersion(Random rand, long version) {\n    if (version > 0) {\n      // return a random number not equal to version\n      for (;;) {\n        long badVersion = rand.nextInt();\n        if (badVersion != version && badVersion != 0) return badVersion;\n      }\n    }\n\n    // if the version does not exist, then we can only specify a positive version\n    for (;;) {\n      long badVersion = rand.nextInt() & 0x7fffffff;  // mask off sign bit\n      if (badVersion != 0) return badVersion;\n    }\n  }\n\n","sourceOld":"  private long badVersion(Random rand, long version) {\n    if (version > 0) {\n      // return a random number not equal to version\n      for (;;) {\n        long badVersion = rand.nextInt();\n        if (badVersion != version && badVersion != 0) return badVersion;\n      }\n    }\n\n    // if the version does not exist, then we can only specify a positive version\n    for (;;) {\n      long badVersion = rand.nextInt() & 0x7fffffff;  // mask off sign bit\n      if (badVersion != 0) return badVersion;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRTGBase#badVersion(Random,long).mjava","pathOld":"/dev/null","sourceNew":"  protected long badVersion(Random rand, long version) {\n    if (version > 0) {\n      // return a random number not equal to version\n      for (;;) {\n        long badVersion = rand.nextInt();\n        if (badVersion != version && badVersion != 0) return badVersion;\n      }\n    }\n\n    // if the version does not exist, then we can only specify a positive version\n    for (;;) {\n      long badVersion = rand.nextInt() & 0x7fffffff;  // mask off sign bit\n      if (badVersion != 0) return badVersion;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2b2e7536fb06d1abad6c7543a0657bdad5242c5e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2b2e7536fb06d1abad6c7543a0657bdad5242c5e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2b2e7536fb06d1abad6c7543a0657bdad5242c5e"]},"commit2Childs":{"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fe33227f6805edab2036cbb80645cc4e2d1fa424","2b2e7536fb06d1abad6c7543a0657bdad5242c5e"],"2b2e7536fb06d1abad6c7543a0657bdad5242c5e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}