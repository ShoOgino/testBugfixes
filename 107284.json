{"path":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testRangeMap().mjava","commits":[{"id":"0ceb5bb30e401cb218b31197b1a9aa47e77cda17","date":1336330521,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testRangeMap().mjava","pathOld":"/dev/null","sourceNew":"  public void testRangeMap() throws Exception {\n    assertHits(new FunctionQuery(new RangeMapFloatFunction(new FloatFieldSource(\"float\"),\n        5, 6, 1, 0f)),\n        new float[] { 1f, 0f });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f8a098eef38bf48cf964fcd89c03e1e741130e9","date":1385973213,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testRangeMap().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testRangeMap().mjava","sourceNew":"  public void testRangeMap() throws Exception {\n    assertHits(new FunctionQuery(new RangeMapFloatFunction(new FloatFieldSource(\"float\"),\n        5, 6, 1, 0f)),\n        new float[] { 1f, 0f });\n    assertHits(new FunctionQuery(new RangeMapFloatFunction(new FloatFieldSource(\"float\"),\n        5, 6, new SumFloatFunction(new ValueSource[] {new ConstValueSource(1f), new ConstValueSource(2f)}),\n        new ConstValueSource(11f))),\n        new float[] { 3f, 11f });\n  }\n\n","sourceOld":"  public void testRangeMap() throws Exception {\n    assertHits(new FunctionQuery(new RangeMapFloatFunction(new FloatFieldSource(\"float\"),\n        5, 6, 1, 0f)),\n        new float[] { 1f, 0f });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testRangeMap().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testRangeMap().mjava","sourceNew":"  public void testRangeMap() throws Exception {\n    assertHits(new FunctionQuery(new RangeMapFloatFunction(new FloatFieldSource(\"float\"),\n        5, 6, 1, 0f)),\n        new float[] { 1f, 0f });\n    assertHits(new FunctionQuery(new RangeMapFloatFunction(new FloatFieldSource(\"float\"),\n        5, 6, new SumFloatFunction(new ValueSource[] {new ConstValueSource(1f), new ConstValueSource(2f)}),\n        new ConstValueSource(11f))),\n        new float[] { 3f, 11f });\n  }\n\n","sourceOld":"  public void testRangeMap() throws Exception {\n    assertHits(new FunctionQuery(new RangeMapFloatFunction(new FloatFieldSource(\"float\"),\n        5, 6, 1, 0f)),\n        new float[] { 1f, 0f });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a701a7aab388afa1412a3dc23b4115c321f478c4","date":1413486320,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testRangeMap().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testRangeMap().mjava","sourceNew":"  public void testRangeMap() throws Exception {\n    assertHits(new FunctionQuery(new RangeMapFloatFunction(new FloatFieldSource(\"float\"),\n        5, 6, 1, 0f)),\n        new float[] { 1f, 0f });\n    assertHits(new FunctionQuery(new RangeMapFloatFunction(new FloatFieldSource(\"float\"),\n        5, 6, new SumFloatFunction(new ValueSource[] {new ConstValueSource(1f), new ConstValueSource(2f)}),\n        new ConstValueSource(11f))),\n        new float[] { 3f, 11f });\n    \n    // TODO: what *should* the rules be for exist() ?\n    // ((source exists && source in range && target exists) OR (source not in range && default exists)) ?\n  }\n\n","sourceOld":"  public void testRangeMap() throws Exception {\n    assertHits(new FunctionQuery(new RangeMapFloatFunction(new FloatFieldSource(\"float\"),\n        5, 6, 1, 0f)),\n        new float[] { 1f, 0f });\n    assertHits(new FunctionQuery(new RangeMapFloatFunction(new FloatFieldSource(\"float\"),\n        5, 6, new SumFloatFunction(new ValueSource[] {new ConstValueSource(1f), new ConstValueSource(2f)}),\n        new ConstValueSource(11f))),\n        new float[] { 3f, 11f });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testRangeMap().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testRangeMap().mjava","sourceNew":"  public void testRangeMap() throws Exception {\n    assertHits(new FunctionQuery(new RangeMapFloatFunction(new FloatFieldSource(\"float\"),\n        5, 6, 1, 0f)),\n        new float[] { 1f, 0f });\n    assertHits(new FunctionQuery(new RangeMapFloatFunction(new FloatFieldSource(\"float\"),\n        5, 6, new SumFloatFunction(new ValueSource[] {new ConstValueSource(1f), new ConstValueSource(2f)}),\n        new ConstValueSource(11f))),\n        new float[] { 3f, 11f });\n    \n    // TODO: what *should* the rules be for exist() ?\n    // ((source exists && source in range && target exists) OR (source not in range && default exists)) ?\n  }\n\n","sourceOld":"  public void testRangeMap() throws Exception {\n    assertHits(new FunctionQuery(new RangeMapFloatFunction(new FloatFieldSource(\"float\"),\n        5, 6, 1, 0f)),\n        new float[] { 1f, 0f });\n    assertHits(new FunctionQuery(new RangeMapFloatFunction(new FloatFieldSource(\"float\"),\n        5, 6, new SumFloatFunction(new ValueSource[] {new ConstValueSource(1f), new ConstValueSource(2f)}),\n        new ConstValueSource(11f))),\n        new float[] { 3f, 11f });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2f8a098eef38bf48cf964fcd89c03e1e741130e9":["0ceb5bb30e401cb218b31197b1a9aa47e77cda17"],"0ceb5bb30e401cb218b31197b1a9aa47e77cda17":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["2f8a098eef38bf48cf964fcd89c03e1e741130e9","a701a7aab388afa1412a3dc23b4115c321f478c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["0ceb5bb30e401cb218b31197b1a9aa47e77cda17","2f8a098eef38bf48cf964fcd89c03e1e741130e9"],"a701a7aab388afa1412a3dc23b4115c321f478c4":["2f8a098eef38bf48cf964fcd89c03e1e741130e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a701a7aab388afa1412a3dc23b4115c321f478c4"]},"commit2Childs":{"2f8a098eef38bf48cf964fcd89c03e1e741130e9":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","74f45af4339b0daf7a95c820ab88c1aea74fbce0","a701a7aab388afa1412a3dc23b4115c321f478c4"],"0ceb5bb30e401cb218b31197b1a9aa47e77cda17":["2f8a098eef38bf48cf964fcd89c03e1e741130e9","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ceb5bb30e401cb218b31197b1a9aa47e77cda17"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"a701a7aab388afa1412a3dc23b4115c321f478c4":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}