{"path":"src/java/org/apache/solr/search/LuceneQueryOptimizer#optimize(BooleanQuery,Searcher,int,Query[],Filter[]).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/LuceneQueryOptimizer#optimize(BooleanQuery,Searcher,int,Query[],Filter[]).mjava","pathOld":"/dev/null","sourceNew":"  public TopDocs optimize(BooleanQuery original,\n                          Searcher searcher,\n                          int numHits,\n                          Query[] queryOut,\n                          Filter[] filterOut\n                          )\n    throws IOException {\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery filterQuery = null;\n\n    BooleanClause[] clauses = original.getClauses();\n    for (int i = 0; i < clauses.length; i++) {\n      BooleanClause c = clauses[i];\n\n/***\nSystem.out.println(\"required=\"+c.required);\nSystem.out.println(\"boost=\"+c.query.getBoost());\nSystem.out.println(\"isTermQuery=\"+(c.query instanceof TermQuery));\nif (c.query instanceof TermQuery) {\n System.out.println(\"term=\"+((TermQuery)c.query).getTerm());\n System.out.println(\"docFreq=\"+searcher.docFreq(((TermQuery)c.query).getTerm()));\n}\n***/\n      if (c.required                              // required\n          && c.query.getBoost() == 0.0f           // boost is zero\n          && c.query instanceof TermQuery         // TermQuery\n          && (searcher.docFreq(((TermQuery)c.query).getTerm())\n              / (float)searcher.maxDoc()) >= threshold) { // check threshold\n        if (filterQuery == null)\n          filterQuery = new BooleanQuery();\n        filterQuery.add(c.query, true, false);    // filter it\n//System.out.println(\"WooHoo... qualified to be hoisted to a filter!\");\n      } else {\n        query.add(c);                             // query it\n      }\n    }\n\n    Filter filter = null;\n    if (filterQuery != null) {\n      synchronized (cache) {                      // check cache\n        filter = (Filter)cache.get(filterQuery);\n      }\n      if (filter == null) {                       // miss\n        filter = new QueryFilter(filterQuery);    // construct new entry\n        synchronized (cache) {\n          cache.put(filterQuery, filter);         // cache it\n        }\n      }        \n    }\n\n    // YCS: added code to pass out optimized query and filter\n    // so they can be used with Hits\n    if (queryOut != null && filterOut != null) {\n      queryOut[0] = query; filterOut[0] = filter;\n      return null;\n    } else {\n      return searcher.search(query, filter, numHits);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c7040334a42400ca67824559be90a1f2f2c9e63","date":1142276541,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/LuceneQueryOptimizer#optimize(BooleanQuery,Searcher,int,Query[],Filter[]).mjava","pathOld":"src/java/org/apache/solr/search/LuceneQueryOptimizer#optimize(BooleanQuery,Searcher,int,Query[],Filter[]).mjava","sourceNew":"  public TopDocs optimize(BooleanQuery original,\n                          Searcher searcher,\n                          int numHits,\n                          Query[] queryOut,\n                          Filter[] filterOut\n                          )\n    throws IOException {\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery filterQuery = null;\n\n    BooleanClause[] clauses = original.getClauses();\n    for (int i = 0; i < clauses.length; i++) {\n      BooleanClause c = clauses[i];\n\n/***\nSystem.out.println(\"required=\"+c.required);\nSystem.out.println(\"boost=\"+c.query.getBoost());\nSystem.out.println(\"isTermQuery=\"+(c.query instanceof TermQuery));\nif (c.query instanceof TermQuery) {\n System.out.println(\"term=\"+((TermQuery)c.query).getTerm());\n System.out.println(\"docFreq=\"+searcher.docFreq(((TermQuery)c.query).getTerm()));\n}\n***/\n      Query q = c.getQuery();\n      if (c.isRequired()                              // required\n          && q.getBoost() == 0.0f           // boost is zero\n          && q instanceof TermQuery         // TermQuery\n          && (searcher.docFreq(((TermQuery)q).getTerm())\n              / (float)searcher.maxDoc()) >= threshold) { // check threshold\n        if (filterQuery == null)\n          filterQuery = new BooleanQuery();\n        filterQuery.add(q, BooleanClause.Occur.MUST);    // filter it\n//System.out.println(\"WooHoo... qualified to be hoisted to a filter!\");\n      } else {\n        query.add(c);                             // query it\n      }\n    }\n\n    Filter filter = null;\n    if (filterQuery != null) {\n      synchronized (cache) {                      // check cache\n        filter = (Filter)cache.get(filterQuery);\n      }\n      if (filter == null) {                       // miss\n        filter = new QueryFilter(filterQuery);    // construct new entry\n        synchronized (cache) {\n          cache.put(filterQuery, filter);         // cache it\n        }\n      }        \n    }\n\n    // YCS: added code to pass out optimized query and filter\n    // so they can be used with Hits\n    if (queryOut != null && filterOut != null) {\n      queryOut[0] = query; filterOut[0] = filter;\n      return null;\n    } else {\n      return searcher.search(query, filter, numHits);\n    }\n\n  }\n\n","sourceOld":"  public TopDocs optimize(BooleanQuery original,\n                          Searcher searcher,\n                          int numHits,\n                          Query[] queryOut,\n                          Filter[] filterOut\n                          )\n    throws IOException {\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery filterQuery = null;\n\n    BooleanClause[] clauses = original.getClauses();\n    for (int i = 0; i < clauses.length; i++) {\n      BooleanClause c = clauses[i];\n\n/***\nSystem.out.println(\"required=\"+c.required);\nSystem.out.println(\"boost=\"+c.query.getBoost());\nSystem.out.println(\"isTermQuery=\"+(c.query instanceof TermQuery));\nif (c.query instanceof TermQuery) {\n System.out.println(\"term=\"+((TermQuery)c.query).getTerm());\n System.out.println(\"docFreq=\"+searcher.docFreq(((TermQuery)c.query).getTerm()));\n}\n***/\n      if (c.required                              // required\n          && c.query.getBoost() == 0.0f           // boost is zero\n          && c.query instanceof TermQuery         // TermQuery\n          && (searcher.docFreq(((TermQuery)c.query).getTerm())\n              / (float)searcher.maxDoc()) >= threshold) { // check threshold\n        if (filterQuery == null)\n          filterQuery = new BooleanQuery();\n        filterQuery.add(c.query, true, false);    // filter it\n//System.out.println(\"WooHoo... qualified to be hoisted to a filter!\");\n      } else {\n        query.add(c);                             // query it\n      }\n    }\n\n    Filter filter = null;\n    if (filterQuery != null) {\n      synchronized (cache) {                      // check cache\n        filter = (Filter)cache.get(filterQuery);\n      }\n      if (filter == null) {                       // miss\n        filter = new QueryFilter(filterQuery);    // construct new entry\n        synchronized (cache) {\n          cache.put(filterQuery, filter);         // cache it\n        }\n      }        \n    }\n\n    // YCS: added code to pass out optimized query and filter\n    // so they can be used with Hits\n    if (queryOut != null && filterOut != null) {\n      queryOut[0] = query; filterOut[0] = filter;\n      return null;\n    } else {\n      return searcher.search(query, filter, numHits);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27adc06684d74d32d4d07537a81903ffbf816d27","date":1178648148,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/search/LuceneQueryOptimizer#optimize(BooleanQuery,Searcher,int,Query[],Filter[]).mjava","pathOld":"src/java/org/apache/solr/search/LuceneQueryOptimizer#optimize(BooleanQuery,Searcher,int,Query[],Filter[]).mjava","sourceNew":"  public TopDocs optimize(BooleanQuery original,\n                          Searcher searcher,\n                          int numHits,\n                          Query[] queryOut,\n                          Filter[] filterOut\n                          )\n    throws IOException {\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery filterQuery = null;\n\n    for (BooleanClause c : (List<BooleanClause>)original.clauses()) {\n\n/***\nSystem.out.println(\"required=\"+c.required);\nSystem.out.println(\"boost=\"+c.query.getBoost());\nSystem.out.println(\"isTermQuery=\"+(c.query instanceof TermQuery));\nif (c.query instanceof TermQuery) {\n System.out.println(\"term=\"+((TermQuery)c.query).getTerm());\n System.out.println(\"docFreq=\"+searcher.docFreq(((TermQuery)c.query).getTerm()));\n}\n***/\n      Query q = c.getQuery();\n      if (c.isRequired()                              // required\n          && q.getBoost() == 0.0f           // boost is zero\n          && q instanceof TermQuery         // TermQuery\n          && (searcher.docFreq(((TermQuery)q).getTerm())\n              / (float)searcher.maxDoc()) >= threshold) { // check threshold\n        if (filterQuery == null)\n          filterQuery = new BooleanQuery();\n        filterQuery.add(q, BooleanClause.Occur.MUST);    // filter it\n//System.out.println(\"WooHoo... qualified to be hoisted to a filter!\");\n      } else {\n        query.add(c);                             // query it\n      }\n    }\n\n    Filter filter = null;\n    if (filterQuery != null) {\n      synchronized (cache) {                      // check cache\n        filter = (Filter)cache.get(filterQuery);\n      }\n      if (filter == null) {                       // miss\n        filter = new QueryFilter(filterQuery);    // construct new entry\n        synchronized (cache) {\n          cache.put(filterQuery, filter);         // cache it\n        }\n      }        \n    }\n\n    // YCS: added code to pass out optimized query and filter\n    // so they can be used with Hits\n    if (queryOut != null && filterOut != null) {\n      queryOut[0] = query; filterOut[0] = filter;\n      return null;\n    } else {\n      return searcher.search(query, filter, numHits);\n    }\n\n  }\n\n","sourceOld":"  public TopDocs optimize(BooleanQuery original,\n                          Searcher searcher,\n                          int numHits,\n                          Query[] queryOut,\n                          Filter[] filterOut\n                          )\n    throws IOException {\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery filterQuery = null;\n\n    BooleanClause[] clauses = original.getClauses();\n    for (int i = 0; i < clauses.length; i++) {\n      BooleanClause c = clauses[i];\n\n/***\nSystem.out.println(\"required=\"+c.required);\nSystem.out.println(\"boost=\"+c.query.getBoost());\nSystem.out.println(\"isTermQuery=\"+(c.query instanceof TermQuery));\nif (c.query instanceof TermQuery) {\n System.out.println(\"term=\"+((TermQuery)c.query).getTerm());\n System.out.println(\"docFreq=\"+searcher.docFreq(((TermQuery)c.query).getTerm()));\n}\n***/\n      Query q = c.getQuery();\n      if (c.isRequired()                              // required\n          && q.getBoost() == 0.0f           // boost is zero\n          && q instanceof TermQuery         // TermQuery\n          && (searcher.docFreq(((TermQuery)q).getTerm())\n              / (float)searcher.maxDoc()) >= threshold) { // check threshold\n        if (filterQuery == null)\n          filterQuery = new BooleanQuery();\n        filterQuery.add(q, BooleanClause.Occur.MUST);    // filter it\n//System.out.println(\"WooHoo... qualified to be hoisted to a filter!\");\n      } else {\n        query.add(c);                             // query it\n      }\n    }\n\n    Filter filter = null;\n    if (filterQuery != null) {\n      synchronized (cache) {                      // check cache\n        filter = (Filter)cache.get(filterQuery);\n      }\n      if (filter == null) {                       // miss\n        filter = new QueryFilter(filterQuery);    // construct new entry\n        synchronized (cache) {\n          cache.put(filterQuery, filter);         // cache it\n        }\n      }        \n    }\n\n    // YCS: added code to pass out optimized query and filter\n    // so they can be used with Hits\n    if (queryOut != null && filterOut != null) {\n      queryOut[0] = query; filterOut[0] = filter;\n      return null;\n    } else {\n      return searcher.search(query, filter, numHits);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c90f01e1c0f11ee52212ab38c6d4393b3be8a646","date":1223059437,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/LuceneQueryOptimizer#optimize(BooleanQuery,Searcher,int,Query[],Filter[]).mjava","pathOld":"src/java/org/apache/solr/search/LuceneQueryOptimizer#optimize(BooleanQuery,Searcher,int,Query[],Filter[]).mjava","sourceNew":"  public TopDocs optimize(BooleanQuery original,\n                          Searcher searcher,\n                          int numHits,\n                          Query[] queryOut,\n                          Filter[] filterOut\n                          )\n    throws IOException {\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery filterQuery = null;\n\n    for (BooleanClause c : (List<BooleanClause>)original.clauses()) {\n\n/***\nSystem.out.println(\"required=\"+c.required);\nSystem.out.println(\"boost=\"+c.query.getBoost());\nSystem.out.println(\"isTermQuery=\"+(c.query instanceof TermQuery));\nif (c.query instanceof TermQuery) {\n System.out.println(\"term=\"+((TermQuery)c.query).getTerm());\n System.out.println(\"docFreq=\"+searcher.docFreq(((TermQuery)c.query).getTerm()));\n}\n***/\n      Query q = c.getQuery();\n      if (c.isRequired()                              // required\n          && q.getBoost() == 0.0f           // boost is zero\n          && q instanceof TermQuery         // TermQuery\n          && (searcher.docFreq(((TermQuery)q).getTerm())\n              / (float)searcher.maxDoc()) >= threshold) { // check threshold\n        if (filterQuery == null)\n          filterQuery = new BooleanQuery();\n        filterQuery.add(q, BooleanClause.Occur.MUST);    // filter it\n//System.out.println(\"WooHoo... qualified to be hoisted to a filter!\");\n      } else {\n        query.add(c);                             // query it\n      }\n    }\n\n    Filter filter = null;\n    if (filterQuery != null) {\n      synchronized (cache) {                      // check cache\n        filter = (Filter)cache.get(filterQuery);\n      }\n      if (filter == null) {                       // miss\n        filter = new CachingWrapperFilter(new QueryWrapperFilter(filterQuery)); // construct new entry\n        synchronized (cache) {\n          cache.put(filterQuery, filter);         // cache it\n        }\n      }        \n    }\n\n    // YCS: added code to pass out optimized query and filter\n    // so they can be used with Hits\n    if (queryOut != null && filterOut != null) {\n      queryOut[0] = query; filterOut[0] = filter;\n      return null;\n    } else {\n      return searcher.search(query, filter, numHits);\n    }\n\n  }\n\n","sourceOld":"  public TopDocs optimize(BooleanQuery original,\n                          Searcher searcher,\n                          int numHits,\n                          Query[] queryOut,\n                          Filter[] filterOut\n                          )\n    throws IOException {\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery filterQuery = null;\n\n    for (BooleanClause c : (List<BooleanClause>)original.clauses()) {\n\n/***\nSystem.out.println(\"required=\"+c.required);\nSystem.out.println(\"boost=\"+c.query.getBoost());\nSystem.out.println(\"isTermQuery=\"+(c.query instanceof TermQuery));\nif (c.query instanceof TermQuery) {\n System.out.println(\"term=\"+((TermQuery)c.query).getTerm());\n System.out.println(\"docFreq=\"+searcher.docFreq(((TermQuery)c.query).getTerm()));\n}\n***/\n      Query q = c.getQuery();\n      if (c.isRequired()                              // required\n          && q.getBoost() == 0.0f           // boost is zero\n          && q instanceof TermQuery         // TermQuery\n          && (searcher.docFreq(((TermQuery)q).getTerm())\n              / (float)searcher.maxDoc()) >= threshold) { // check threshold\n        if (filterQuery == null)\n          filterQuery = new BooleanQuery();\n        filterQuery.add(q, BooleanClause.Occur.MUST);    // filter it\n//System.out.println(\"WooHoo... qualified to be hoisted to a filter!\");\n      } else {\n        query.add(c);                             // query it\n      }\n    }\n\n    Filter filter = null;\n    if (filterQuery != null) {\n      synchronized (cache) {                      // check cache\n        filter = (Filter)cache.get(filterQuery);\n      }\n      if (filter == null) {                       // miss\n        filter = new QueryFilter(filterQuery);    // construct new entry\n        synchronized (cache) {\n          cache.put(filterQuery, filter);         // cache it\n        }\n      }        \n    }\n\n    // YCS: added code to pass out optimized query and filter\n    // so they can be used with Hits\n    if (queryOut != null && filterOut != null) {\n      queryOut[0] = query; filterOut[0] = filter;\n      return null;\n    } else {\n      return searcher.search(query, filter, numHits);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/LuceneQueryOptimizer#optimize(BooleanQuery,Searcher,int,Query[],Filter[]).mjava","pathOld":"src/java/org/apache/solr/search/LuceneQueryOptimizer#optimize(BooleanQuery,Searcher,int,Query[],Filter[]).mjava","sourceNew":"  public TopDocs optimize(BooleanQuery original,\n                          Searcher searcher,\n                          int numHits,\n                          Query[] queryOut,\n                          Filter[] filterOut\n                          )\n    throws IOException {\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery filterQuery = null;\n\n    for (BooleanClause c : (List<BooleanClause>)original.clauses()) {\n\n/***\nSystem.out.println(\"required=\"+c.required);\nSystem.out.println(\"boost=\"+c.query.getBoost());\nSystem.out.println(\"isTermQuery=\"+(c.query instanceof TermQuery));\nif (c.query instanceof TermQuery) {\n System.out.println(\"term=\"+((TermQuery)c.query).getTerm());\n System.out.println(\"docFreq=\"+searcher.docFreq(((TermQuery)c.query).getTerm()));\n}\n***/\n      Query q = c.getQuery();\n      if (c.isRequired()                              // required\n          && q.getBoost() == 0.0f           // boost is zero\n          && q instanceof TermQuery         // TermQuery\n          && (searcher.docFreq(((TermQuery)q).getTerm())\n              / (float)searcher.maxDoc()) >= threshold) { // check threshold\n        if (filterQuery == null)\n          filterQuery = new BooleanQuery();\n        filterQuery.add(q, BooleanClause.Occur.MUST);    // filter it\n//System.out.println(\"WooHoo... qualified to be hoisted to a filter!\");\n      } else {\n        query.add(c);                             // query it\n      }\n    }\n\n    Filter filter = null;\n    if (filterQuery != null) {\n      synchronized (cache) {                      // check cache\n        filter = (Filter)cache.get(filterQuery);\n      }\n      if (filter == null) {                       // miss\n        filter = new CachingWrapperFilter(new QueryWrapperFilter(filterQuery)); // construct new entry\n        synchronized (cache) {\n          cache.put(filterQuery, filter);         // cache it\n        }\n      }        \n    }\n\n    // YCS: added code to pass out optimized query and filter\n    // so they can be used with Hits\n    if (queryOut != null && filterOut != null) {\n      queryOut[0] = query; filterOut[0] = filter;\n      return null;\n    } else {\n      return searcher.search(query, filter, numHits);\n    }\n\n  }\n\n","sourceOld":"  public TopDocs optimize(BooleanQuery original,\n                          Searcher searcher,\n                          int numHits,\n                          Query[] queryOut,\n                          Filter[] filterOut\n                          )\n    throws IOException {\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery filterQuery = null;\n\n    for (BooleanClause c : (List<BooleanClause>)original.clauses()) {\n\n/***\nSystem.out.println(\"required=\"+c.required);\nSystem.out.println(\"boost=\"+c.query.getBoost());\nSystem.out.println(\"isTermQuery=\"+(c.query instanceof TermQuery));\nif (c.query instanceof TermQuery) {\n System.out.println(\"term=\"+((TermQuery)c.query).getTerm());\n System.out.println(\"docFreq=\"+searcher.docFreq(((TermQuery)c.query).getTerm()));\n}\n***/\n      Query q = c.getQuery();\n      if (c.isRequired()                              // required\n          && q.getBoost() == 0.0f           // boost is zero\n          && q instanceof TermQuery         // TermQuery\n          && (searcher.docFreq(((TermQuery)q).getTerm())\n              / (float)searcher.maxDoc()) >= threshold) { // check threshold\n        if (filterQuery == null)\n          filterQuery = new BooleanQuery();\n        filterQuery.add(q, BooleanClause.Occur.MUST);    // filter it\n//System.out.println(\"WooHoo... qualified to be hoisted to a filter!\");\n      } else {\n        query.add(c);                             // query it\n      }\n    }\n\n    Filter filter = null;\n    if (filterQuery != null) {\n      synchronized (cache) {                      // check cache\n        filter = (Filter)cache.get(filterQuery);\n      }\n      if (filter == null) {                       // miss\n        filter = new CachingWrapperFilter(new QueryWrapperFilter(filterQuery)); // construct new entry\n        synchronized (cache) {\n          cache.put(filterQuery, filter);         // cache it\n        }\n      }        \n    }\n\n    // YCS: added code to pass out optimized query and filter\n    // so they can be used with Hits\n    if (queryOut != null && filterOut != null) {\n      queryOut[0] = query; filterOut[0] = filter;\n      return null;\n    } else {\n      return searcher.search(query, filter, numHits);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c90f01e1c0f11ee52212ab38c6d4393b3be8a646":["27adc06684d74d32d4d07537a81903ffbf816d27"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["c90f01e1c0f11ee52212ab38c6d4393b3be8a646"],"7c7040334a42400ca67824559be90a1f2f2c9e63":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"27adc06684d74d32d4d07537a81903ffbf816d27":["7c7040334a42400ca67824559be90a1f2f2c9e63"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c90f01e1c0f11ee52212ab38c6d4393b3be8a646":["ad94625fb8d088209f46650c8097196fec67f00c"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["7c7040334a42400ca67824559be90a1f2f2c9e63"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"7c7040334a42400ca67824559be90a1f2f2c9e63":["27adc06684d74d32d4d07537a81903ffbf816d27"],"27adc06684d74d32d4d07537a81903ffbf816d27":["c90f01e1c0f11ee52212ab38c6d4393b3be8a646"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}