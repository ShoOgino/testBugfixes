{"path":"lucene/src/test/org/apache/lucene/index/TestTermsEnum#testRandomTerms().mjava","commits":[{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermsEnum#testRandomTerms().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandomTerms() throws Exception {\n    final String[] terms = new String[_TestUtil.nextInt(random, 1, atLeast(1000))];\n    final Set<String> seen = new HashSet<String>();\n\n    final boolean allowEmptyString = random.nextBoolean();\n\n    if (random.nextInt(10) == 7 && terms.length > 2) {\n      // Sometimes add a bunch of terms sharing a longish common prefix:\n      final int numTermsSamePrefix = random.nextInt(terms.length/2);\n      if (numTermsSamePrefix > 0) {\n        String prefix;\n        while(true) {\n          prefix = getRandomString();\n          if (prefix.length() < 5) {\n            continue;\n          } else {\n            break;\n          }\n        }\n        while(seen.size() < numTermsSamePrefix) {\n          final String t = prefix + getRandomString();\n          if (!seen.contains(t)) {\n            terms[seen.size()] = t;\n            seen.add(t);\n          }\n        }\n      }\n    }\n\n    while(seen.size() < terms.length) {\n      final String t = getRandomString();\n      if (!seen.contains(t) && (allowEmptyString || t.length() != 0)) {\n        terms[seen.size()] = t;\n        seen.add(t);\n      }\n    }\n    r = makeIndex(terms);\n    testRandomSeeks(r, terms);\n    close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testRandomTerms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermsEnum#testRandomTerms().mjava","sourceNew":"  public void testRandomTerms() throws Exception {\n    final String[] terms = new String[_TestUtil.nextInt(random, 1, atLeast(1000))];\n    final Set<String> seen = new HashSet<String>();\n\n    final boolean allowEmptyString = random.nextBoolean();\n\n    if (random.nextInt(10) == 7 && terms.length > 2) {\n      // Sometimes add a bunch of terms sharing a longish common prefix:\n      final int numTermsSamePrefix = random.nextInt(terms.length/2);\n      if (numTermsSamePrefix > 0) {\n        String prefix;\n        while(true) {\n          prefix = getRandomString();\n          if (prefix.length() < 5) {\n            continue;\n          } else {\n            break;\n          }\n        }\n        while(seen.size() < numTermsSamePrefix) {\n          final String t = prefix + getRandomString();\n          if (!seen.contains(t)) {\n            terms[seen.size()] = t;\n            seen.add(t);\n          }\n        }\n      }\n    }\n\n    while(seen.size() < terms.length) {\n      final String t = getRandomString();\n      if (!seen.contains(t) && (allowEmptyString || t.length() != 0)) {\n        terms[seen.size()] = t;\n        seen.add(t);\n      }\n    }\n    r = makeIndex(terms);\n    testRandomSeeks(r, terms);\n    close();\n  }\n\n","sourceOld":"  public void testRandomTerms() throws Exception {\n    final String[] terms = new String[_TestUtil.nextInt(random, 1, atLeast(1000))];\n    final Set<String> seen = new HashSet<String>();\n\n    final boolean allowEmptyString = random.nextBoolean();\n\n    if (random.nextInt(10) == 7 && terms.length > 2) {\n      // Sometimes add a bunch of terms sharing a longish common prefix:\n      final int numTermsSamePrefix = random.nextInt(terms.length/2);\n      if (numTermsSamePrefix > 0) {\n        String prefix;\n        while(true) {\n          prefix = getRandomString();\n          if (prefix.length() < 5) {\n            continue;\n          } else {\n            break;\n          }\n        }\n        while(seen.size() < numTermsSamePrefix) {\n          final String t = prefix + getRandomString();\n          if (!seen.contains(t)) {\n            terms[seen.size()] = t;\n            seen.add(t);\n          }\n        }\n      }\n    }\n\n    while(seen.size() < terms.length) {\n      final String t = getRandomString();\n      if (!seen.contains(t) && (allowEmptyString || t.length() != 0)) {\n        terms[seen.size()] = t;\n        seen.add(t);\n      }\n    }\n    r = makeIndex(terms);\n    testRandomSeeks(r, terms);\n    close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}