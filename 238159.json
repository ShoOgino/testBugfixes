{"path":"lucene/contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/BooleanQueryBuilder#getQuery(Element).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/BooleanQueryBuilder#getQuery(Element).mjava","pathOld":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/BooleanQueryBuilder#getQuery(Element).mjava","sourceNew":"\t/* (non-Javadoc)\n\t * @see org.apache.lucene.xmlparser.QueryObjectBuilder#process(org.w3c.dom.Element)\n\t */\n\tpublic Query getQuery(Element e) throws ParserException {\n\t\tBooleanQuery bq=new BooleanQuery(DOMUtils.getAttribute(e,\"disableCoord\",false));\n\t\tbq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e,\"minimumNumberShouldMatch\",0));\n\t\tbq.setBoost(DOMUtils.getAttribute(e,\"boost\",1.0f));\n\t\t\n\t\tNodeList nl = e.getChildNodes();\n\t\tfor(int i=0;i<nl.getLength();i++)\n\t\t{\n\t\t\tNode node = nl.item(i);\n\t\t\tif(node.getNodeName().equals(\"Clause\"))\n\t\t\t{\n\t\t\t\tElement clauseElem=(Element) node;\n\t\t\t\tBooleanClause.Occur occurs=getOccursValue(clauseElem);\n\t\t\t\t\n\t \t\t\tElement clauseQuery=DOMUtils.getFirstChildOrFail(clauseElem);\n\t \t\t\tQuery q=factory.getQuery(clauseQuery);\n\t \t\t\tbq.add(new BooleanClause(q,occurs));\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn bq;\n\t}\n\n","sourceOld":"\t/* (non-Javadoc)\n\t * @see org.apache.lucene.xmlparser.QueryObjectBuilder#process(org.w3c.dom.Element)\n\t */\n\tpublic Query getQuery(Element e) throws ParserException {\n\t\tBooleanQuery bq=new BooleanQuery(DOMUtils.getAttribute(e,\"disableCoord\",false));\n\t\tbq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e,\"minimumNumberShouldMatch\",0));\n\t\tbq.setBoost(DOMUtils.getAttribute(e,\"boost\",1.0f));\n\t\t\n\t\tNodeList nl = e.getChildNodes();\n\t\tfor(int i=0;i<nl.getLength();i++)\n\t\t{\n\t\t\tNode node = nl.item(i);\n\t\t\tif(node.getNodeName().equals(\"Clause\"))\n\t\t\t{\n\t\t\t\tElement clauseElem=(Element) node;\n\t\t\t\tBooleanClause.Occur occurs=getOccursValue(clauseElem);\n\t\t\t\t\n\t \t\t\tElement clauseQuery=DOMUtils.getFirstChildOrFail(clauseElem);\n\t \t\t\tQuery q=factory.getQuery(clauseQuery);\n\t \t\t\tbq.add(new BooleanClause(q,occurs));\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn bq;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2","date":1313460667,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/BooleanQueryBuilder#getQuery(Element).mjava","pathOld":"lucene/contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/BooleanQueryBuilder#getQuery(Element).mjava","sourceNew":"  public Query getQuery(Element e) throws ParserException {\n    BooleanQuery bq = new BooleanQuery(DOMUtils.getAttribute(e, \"disableCoord\", false));\n    bq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e, \"minimumNumberShouldMatch\", 0));\n    bq.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n\n    NodeList nl = e.getChildNodes();\n    for (int i = 0; i < nl.getLength(); i++) {\n      Node node = nl.item(i);\n      if (node.getNodeName().equals(\"Clause\")) {\n        Element clauseElem = (Element) node;\n        BooleanClause.Occur occurs = getOccursValue(clauseElem);\n\n        Element clauseQuery = DOMUtils.getFirstChildOrFail(clauseElem);\n        Query q = factory.getQuery(clauseQuery);\n        bq.add(new BooleanClause(q, occurs));\n      }\n    }\n\n    return bq;\n  }\n\n","sourceOld":"\t/* (non-Javadoc)\n\t * @see org.apache.lucene.xmlparser.QueryObjectBuilder#process(org.w3c.dom.Element)\n\t */\n\tpublic Query getQuery(Element e) throws ParserException {\n\t\tBooleanQuery bq=new BooleanQuery(DOMUtils.getAttribute(e,\"disableCoord\",false));\n\t\tbq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e,\"minimumNumberShouldMatch\",0));\n\t\tbq.setBoost(DOMUtils.getAttribute(e,\"boost\",1.0f));\n\t\t\n\t\tNodeList nl = e.getChildNodes();\n\t\tfor(int i=0;i<nl.getLength();i++)\n\t\t{\n\t\t\tNode node = nl.item(i);\n\t\t\tif(node.getNodeName().equals(\"Clause\"))\n\t\t\t{\n\t\t\t\tElement clauseElem=(Element) node;\n\t\t\t\tBooleanClause.Occur occurs=getOccursValue(clauseElem);\n\t\t\t\t\n\t \t\t\tElement clauseQuery=DOMUtils.getFirstChildOrFail(clauseElem);\n\t \t\t\tQuery q=factory.getQuery(clauseQuery);\n\t \t\t\tbq.add(new BooleanClause(q,occurs));\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn bq;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"251550f5d19b526a76f8c5126ae7bb2d22cf8935","date":1315202008,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BooleanQueryBuilder#getQuery(Element).mjava","pathOld":"lucene/contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/BooleanQueryBuilder#getQuery(Element).mjava","sourceNew":"  public Query getQuery(Element e) throws ParserException {\n    BooleanQuery bq = new BooleanQuery(DOMUtils.getAttribute(e, \"disableCoord\", false));\n    bq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e, \"minimumNumberShouldMatch\", 0));\n    bq.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n\n    NodeList nl = e.getChildNodes();\n    for (int i = 0; i < nl.getLength(); i++) {\n      Node node = nl.item(i);\n      if (node.getNodeName().equals(\"Clause\")) {\n        Element clauseElem = (Element) node;\n        BooleanClause.Occur occurs = getOccursValue(clauseElem);\n\n        Element clauseQuery = DOMUtils.getFirstChildOrFail(clauseElem);\n        Query q = factory.getQuery(clauseQuery);\n        bq.add(new BooleanClause(q, occurs));\n      }\n    }\n\n    return bq;\n  }\n\n","sourceOld":"  public Query getQuery(Element e) throws ParserException {\n    BooleanQuery bq = new BooleanQuery(DOMUtils.getAttribute(e, \"disableCoord\", false));\n    bq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e, \"minimumNumberShouldMatch\", 0));\n    bq.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n\n    NodeList nl = e.getChildNodes();\n    for (int i = 0; i < nl.getLength(); i++) {\n      Node node = nl.item(i);\n      if (node.getNodeName().equals(\"Clause\")) {\n        Element clauseElem = (Element) node;\n        BooleanClause.Occur occurs = getOccursValue(clauseElem);\n\n        Element clauseQuery = DOMUtils.getFirstChildOrFail(clauseElem);\n        Query q = factory.getQuery(clauseQuery);\n        bq.add(new BooleanClause(q, occurs));\n      }\n    }\n\n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"251550f5d19b526a76f8c5126ae7bb2d22cf8935":["b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["251550f5d19b526a76f8c5126ae7bb2d22cf8935"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2":["251550f5d19b526a76f8c5126ae7bb2d22cf8935"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"251550f5d19b526a76f8c5126ae7bb2d22cf8935":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}