{"path":"src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#split(String,boolean).mjava","commits":[{"id":"20349324eb18d1565d301e59be543989f38743d3","date":1258494398,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#split(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public static List<String> split(String s, boolean ignoreQuote) {\n    ArrayList<String> lst = new ArrayList<String>(4);\n    int pos=0, start=0, end=s.length();\n    char inString=0;\n    char ch=0;\n    while (pos < end) {\n      char prevChar=ch;\n      ch = s.charAt(pos++);\n      if (ch=='\\\\') {    // skip escaped chars\n        pos++;\n      } else if (inString != 0 && ch==inString) {\n        inString=0;\n      } else if (!ignoreQuote && ch=='\"') {\n        // If char is directly preceeded by a number or letter\n        // then don't treat it as the start of a string.\n        if (!Character.isLetterOrDigit(prevChar)) {\n          inString=ch;\n        }\n      } else if (Character.isWhitespace(ch) && inString==0) {\n        lst.add(s.substring(start,pos-1));\n        start=pos;\n      }\n    }\n    if (start < end) {\n      lst.add(s.substring(start,end));\n    }\n\n    if (inString != 0) {\n      // unbalanced quote... ignore them\n      return split(s, true);\n    }\n\n    return lst;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#split(String,boolean).mjava","pathOld":"src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#split(String,boolean).mjava","sourceNew":"  public static List<String> split(String s, boolean ignoreQuote) {\n    ArrayList<String> lst = new ArrayList<String>(4);\n    int pos=0, start=0, end=s.length();\n    char inString=0;\n    char ch=0;\n    while (pos < end) {\n      char prevChar=ch;\n      ch = s.charAt(pos++);\n      if (ch=='\\\\') {    // skip escaped chars\n        pos++;\n      } else if (inString != 0 && ch==inString) {\n        inString=0;\n      } else if (!ignoreQuote && ch=='\"') {\n        // If char is directly preceeded by a number or letter\n        // then don't treat it as the start of a string.\n        if (!Character.isLetterOrDigit(prevChar)) {\n          inString=ch;\n        }\n      } else if (Character.isWhitespace(ch) && inString==0) {\n        lst.add(s.substring(start,pos-1));\n        start=pos;\n      }\n    }\n    if (start < end) {\n      lst.add(s.substring(start,end));\n    }\n\n    if (inString != 0) {\n      // unbalanced quote... ignore them\n      return split(s, true);\n    }\n\n    return lst;\n  }\n\n","sourceOld":"  public static List<String> split(String s, boolean ignoreQuote) {\n    ArrayList<String> lst = new ArrayList<String>(4);\n    int pos=0, start=0, end=s.length();\n    char inString=0;\n    char ch=0;\n    while (pos < end) {\n      char prevChar=ch;\n      ch = s.charAt(pos++);\n      if (ch=='\\\\') {    // skip escaped chars\n        pos++;\n      } else if (inString != 0 && ch==inString) {\n        inString=0;\n      } else if (!ignoreQuote && ch=='\"') {\n        // If char is directly preceeded by a number or letter\n        // then don't treat it as the start of a string.\n        if (!Character.isLetterOrDigit(prevChar)) {\n          inString=ch;\n        }\n      } else if (Character.isWhitespace(ch) && inString==0) {\n        lst.add(s.substring(start,pos-1));\n        start=pos;\n      }\n    }\n    if (start < end) {\n      lst.add(s.substring(start,end));\n    }\n\n    if (inString != 0) {\n      // unbalanced quote... ignore them\n      return split(s, true);\n    }\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"20349324eb18d1565d301e59be543989f38743d3":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["20349324eb18d1565d301e59be543989f38743d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"20349324eb18d1565d301e59be543989f38743d3":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["20349324eb18d1565d301e59be543989f38743d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}