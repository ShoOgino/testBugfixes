{"path":"lucene/facet/src/java/org/apache/lucene/facet/simple/RangeFacetCounts#count(ValueSource,List[MatchingDocs]).mjava","commits":[{"id":"519ac3b8f2711b5bfeb1c90c77bb007032270a41","date":1384456090,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/RangeFacetCounts#count(ValueSource,List[MatchingDocs]).mjava","pathOld":"/dev/null","sourceNew":"  private void count(ValueSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    // TODO: test if this is faster (in the past it was\n    // faster to do MatchingDocs on the inside) ... see\n    // patches on LUCENE-4965):\n    for (MatchingDocs hits : matchingDocs) {\n      FunctionValues fv = valueSource.getValues(Collections.emptyMap(), hits.context);\n      final int length = hits.bits.length();\n      int doc = 0;\n      totCount += hits.totalHits;\n      while (doc < length && (doc = hits.bits.nextSetBit(doc)) != -1) {\n        // Skip missing docs:\n        if (fv.exists(doc)) {\n          \n          long v = fv.longVal(doc);\n\n          // TODO: if all ranges are non-overlapping, we\n          // should instead do a bin-search up front\n          // (really, a specialized case of the interval\n          // tree)\n          // TODO: use interval tree instead of linear search:\n          for (int j = 0; j < ranges.length; j++) {\n            if (ranges[j].accept(v)) {\n              counts[j]++;\n            }\n          }\n        }\n\n        doc++;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/RangeFacetCounts#count(ValueSource,List[MatchingDocs]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/RangeFacetCounts#count(ValueSource,List[MatchingDocs]).mjava","sourceNew":"  private void count(ValueSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    // TODO: test if this is faster (in the past it was\n    // faster to do MatchingDocs on the inside) ... see\n    // patches on LUCENE-4965):\n    for (MatchingDocs hits : matchingDocs) {\n      FunctionValues fv = valueSource.getValues(Collections.emptyMap(), hits.context);\n      final int length = hits.bits.length();\n      int doc = 0;\n      totCount += hits.totalHits;\n      while (doc < length && (doc = hits.bits.nextSetBit(doc)) != -1) {\n        // Skip missing docs:\n        if (fv.exists(doc)) {\n          \n          long v = fv.longVal(doc);\n\n          // TODO: if all ranges are non-overlapping, we\n          // should instead do a bin-search up front\n          // (really, a specialized case of the interval\n          // tree)\n          // TODO: use interval tree instead of linear search:\n          for (int j = 0; j < ranges.length; j++) {\n            if (ranges[j].accept(v)) {\n              counts[j]++;\n            }\n          }\n        }\n\n        doc++;\n      }\n    }\n  }\n\n","sourceOld":"  private void count(ValueSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    // TODO: test if this is faster (in the past it was\n    // faster to do MatchingDocs on the inside) ... see\n    // patches on LUCENE-4965):\n    for (MatchingDocs hits : matchingDocs) {\n      FunctionValues fv = valueSource.getValues(Collections.emptyMap(), hits.context);\n      final int length = hits.bits.length();\n      int doc = 0;\n      totCount += hits.totalHits;\n      while (doc < length && (doc = hits.bits.nextSetBit(doc)) != -1) {\n        // Skip missing docs:\n        if (fv.exists(doc)) {\n          \n          long v = fv.longVal(doc);\n\n          // TODO: if all ranges are non-overlapping, we\n          // should instead do a bin-search up front\n          // (really, a specialized case of the interval\n          // tree)\n          // TODO: use interval tree instead of linear search:\n          for (int j = 0; j < ranges.length; j++) {\n            if (ranges[j].accept(v)) {\n              counts[j]++;\n            }\n          }\n        }\n\n        doc++;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"21d36d0db865f7b84026b447bec653469a6e66df":["519ac3b8f2711b5bfeb1c90c77bb007032270a41"],"519ac3b8f2711b5bfeb1c90c77bb007032270a41":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["519ac3b8f2711b5bfeb1c90c77bb007032270a41","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"21d36d0db865f7b84026b447bec653469a6e66df":[],"519ac3b8f2711b5bfeb1c90c77bb007032270a41":["21d36d0db865f7b84026b447bec653469a6e66df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["21d36d0db865f7b84026b447bec653469a6e66df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}