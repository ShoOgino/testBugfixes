{"path":"lucene/src/java/org/apache/lucene/index/TermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,boolean).mjava","commits":[{"id":"31f025ae60076ae95274433f3fe8e6ace2857a87","date":1326669465,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","sourceNew":"  /** Get {@link DocsAndPositionsEnum} for the current term.\n   *  Do not call this when the enum is unpositioned.\n   *  This method will only return null if needsOffsets is\n   *  true but offsets were not indexed.\n   *  @param liveDocs unset bits are documents that should not\n   *  be returned\n   *  @param reuse pass a prior DocsAndPositionsEnum for possible reuse\n   *  @param needsOffsets true if offsets are required */\n  public abstract DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, boolean needsOffsets) throws IOException;\n\n","sourceOld":"  /** Get {@link DocsAndPositionsEnum} for the current term.\n   *  Do not call this when the enum is unpositioned.\n   *  This method will only return null if positions were\n   *  not indexed into the postings by this codec.\n   *  @param liveDocs unset bits are documents that should not\n   *  be returned\n   *  @param reuse pass a prior DocsAndPositionsEnum for possible reuse */\n  public abstract DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,boolean).mjava","sourceNew":"  /** Get {@link DocsAndPositionsEnum} for the current term.\n   *  Do not call this when the enum is unpositioned.\n   *  This method will only return null if needsOffsets is\n   *  true but offsets were not indexed.\n   *  @param liveDocs unset bits are documents that should not\n   *  be returned\n   *  @param reuse pass a prior DocsAndPositionsEnum for possible reuse\n   *  @param needsOffsets true if offsets are required */\n  public abstract DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, boolean needsOffsets) throws IOException;\n\n","sourceOld":"  /** Get {@link DocsAndPositionsEnum} for the current term.\n   *  Do not call this when the enum is unpositioned.\n   *  This method will only return null if needsOffsets is\n   *  true but offsets were not indexed.\n   *  @param liveDocs unset bits are documents that should not\n   *  be returned\n   *  @param reuse pass a prior DocsAndPositionsEnum for possible reuse\n   *  @param needsOffsets true if offsets are required */\n  public abstract DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, boolean needsOffsets) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}