{"path":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","pathOld":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","sourceNew":"  @Test\n  public void testBackup() throws Exception {\n    masterJetty.stop();\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master1.xml\", \n                          \"solrconfig.xml\");\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      @Override\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      @Override\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream, \"UTF-8\");\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n    Directory dir = new SimpleFSDirectory(snapDir.getAbsoluteFile());\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(nDocs, hits.totalHits);\n    searcher.close();\n    dir.close();\n    AbstractSolrTestCase.recurseDelete(snapDir); // clean up the snap dir\n  }\n\n","sourceOld":"  @Test\n  public void testBackup() throws Exception {\n    masterJetty.stop();\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master1.xml\", \n                          \"solrconfig.xml\");\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      @Override\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      @Override\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream, \"UTF-8\");\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n    Directory dir = new SimpleFSDirectory(snapDir.getAbsoluteFile());\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(nDocs, hits.totalHits);\n    searcher.close();\n    dir.close();\n    AbstractSolrTestCase.recurseDelete(snapDir); // clean up the snap dir\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","pathOld":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","sourceNew":"  @Test\n  public void testBackup() throws Exception {\n    masterJetty.stop();\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master1.xml\", \n                          \"solrconfig.xml\");\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      @Override\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      @Override\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream, \"UTF-8\");\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n    Directory dir = new SimpleFSDirectory(snapDir.getAbsoluteFile());\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(nDocs, hits.totalHits);\n    searcher.close();\n    dir.close();\n    AbstractSolrTestCase.recurseDelete(snapDir); // clean up the snap dir\n  }\n\n","sourceOld":"  @Test\n  public void testBackup() throws Exception {\n    masterJetty.stop();\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master1.xml\", \n                          \"solrconfig.xml\");\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      @Override\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      @Override\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream, \"UTF-8\");\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n    Directory dir = new SimpleFSDirectory(snapDir.getAbsoluteFile());\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(nDocs, hits.totalHits);\n    searcher.close();\n    dir.close();\n    AbstractSolrTestCase.recurseDelete(snapDir); // clean up the snap dir\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","pathOld":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","sourceNew":"  @Test\n  public void testBackup() throws Exception {\n    masterJetty.stop();\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master1.xml\", \n                          \"solrconfig.xml\");\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      @Override\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      @Override\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream, \"UTF-8\");\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n    Directory dir = new SimpleFSDirectory(snapDir.getAbsoluteFile());\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(nDocs, hits.totalHits);\n    searcher.close();\n    dir.close();\n    AbstractSolrTestCase.recurseDelete(snapDir); // clean up the snap dir\n  }\n\n","sourceOld":"  @Test\n  public void testBackup() throws Exception {\n    masterJetty.stop();\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master1.xml\", \n                          \"solrconfig.xml\");\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      @Override\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      @Override\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream, \"UTF-8\");\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n    Directory dir = new SimpleFSDirectory(snapDir.getAbsoluteFile());\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(nDocs, hits.totalHits);\n    searcher.close();\n    dir.close();\n    AbstractSolrTestCase.recurseDelete(snapDir); // clean up the snap dir\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bf853f0385a540ee0fb220fd272f2c362432294","date":1311520789,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestBackup().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","sourceNew":"  private void doTestBackup() throws Exception {\n    masterJetty.stop();\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master1.xml\", \n                          \"solrconfig.xml\");\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      @Override\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      @Override\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream, \"UTF-8\");\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n    Directory dir = new SimpleFSDirectory(snapDir.getAbsoluteFile());\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(nDocs, hits.totalHits);\n    searcher.close();\n    dir.close();\n    AbstractSolrTestCase.recurseDelete(snapDir); // clean up the snap dir\n  }\n\n","sourceOld":"  @Test\n  public void testBackup() throws Exception {\n    masterJetty.stop();\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master1.xml\", \n                          \"solrconfig.xml\");\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      @Override\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      @Override\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream, \"UTF-8\");\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n    Directory dir = new SimpleFSDirectory(snapDir.getAbsoluteFile());\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(nDocs, hits.totalHits);\n    searcher.close();\n    dir.close();\n    AbstractSolrTestCase.recurseDelete(snapDir); // clean up the snap dir\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1bf853f0385a540ee0fb220fd272f2c362432294":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1bf853f0385a540ee0fb220fd272f2c362432294"]},"commit2Childs":{"1bf853f0385a540ee0fb220fd272f2c362432294":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["1bf853f0385a540ee0fb220fd272f2c362432294"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}