{"path":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/SolrLocator#getIndexSchema().mjava","commits":[{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/SolrLocator#getIndexSchema().mjava","pathOld":"solr/contrib/solr-morphlines-core/src/java/org/apache/solr/morphlines/solr/SolrLocator#getIndexSchema().mjava","sourceNew":"  public IndexSchema getIndexSchema() {\n    if (context instanceof SolrMorphlineContext) {    \n      IndexSchema schema = ((SolrMorphlineContext)context).getIndexSchema();\n      if (schema != null) {\n        validateSchema(schema);\n        return schema;\n      }\n    }\n    \n    // If solrHomeDir isn't defined and zkHost and collectionName are defined \n    // then download schema.xml and solrconfig.xml, etc from zk and use that as solrHomeDir\n    String oldSolrHomeDir = null;\n    String mySolrHomeDir = solrHomeDir;\n    if (solrHomeDir == null || solrHomeDir.length() == 0) {\n      if (zkHost == null || zkHost.length() == 0) {\n        // TODO: implement download from solrUrl if specified\n        throw new MorphlineCompilationException(\n            \"Downloading a Solr schema requires either parameter 'solrHomeDir' or parameters 'zkHost' and 'collection'\",\n            config);\n      }\n      if (collectionName == null || collectionName.length() == 0) {\n        throw new MorphlineCompilationException(\n            \"Parameter 'zkHost' requires that you also pass parameter 'collection'\", config);\n      }\n      ZooKeeperDownloader zki = new ZooKeeperDownloader();\n      SolrZkClient zkClient = zki.getZkClient(zkHost);\n      try {\n        String configName = zki.readConfigName(zkClient, collectionName);\n        File downloadedSolrHomeDir = zki.downloadConfigDir(zkClient, configName);\n        mySolrHomeDir = downloadedSolrHomeDir.getAbsolutePath();\n      } catch (KeeperException e) {\n        throw new MorphlineCompilationException(\"Cannot download schema.xml from ZooKeeper\", config, e);\n      } catch (InterruptedException e) {\n        throw new MorphlineCompilationException(\"Cannot download schema.xml from ZooKeeper\", config, e);\n      } catch (IOException e) {\n        throw new MorphlineCompilationException(\"Cannot download schema.xml from ZooKeeper\", config, e);\n      } finally {\n        zkClient.close();\n      }\n    }\n    \n    oldSolrHomeDir = System.setProperty(SOLR_HOME_PROPERTY_NAME, mySolrHomeDir);\n    try {\n      SolrConfig solrConfig = new SolrConfig(); // TODO use SolrResourceLoader ala TikaMapper?\n      // SolrConfig solrConfig = new SolrConfig(\"solrconfig.xml\");\n      // SolrConfig solrConfig = new\n      // SolrConfig(\"/cloud/apache-solr-4.0.0-BETA/example/solr/collection1\",\n      // \"solrconfig.xml\", null);\n      // SolrConfig solrConfig = new\n      // SolrConfig(\"/cloud/apache-solr-4.0.0-BETA/example/solr/collection1/conf/solrconfig.xml\");\n      SolrResourceLoader loader = solrConfig.getResourceLoader();\n      \n      InputSource is = new InputSource(loader.openSchema(\"schema.xml\"));\n          is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(\"schema.xml\"));\n        \n      IndexSchema schema = new IndexSchema(solrConfig, \"schema.xml\", is);\n      validateSchema(schema);\n      return schema;\n    } catch (ParserConfigurationException e) {\n      throw new MorphlineRuntimeException(e);\n    } catch (IOException e) {\n      throw new MorphlineRuntimeException(e);\n    } catch (SAXException e) {\n      throw new MorphlineRuntimeException(e);\n    } finally { // restore old global state\n      if (solrHomeDir != null) {\n        if (oldSolrHomeDir == null) {\n          System.clearProperty(SOLR_HOME_PROPERTY_NAME);\n        } else {\n          System.setProperty(SOLR_HOME_PROPERTY_NAME, oldSolrHomeDir);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public IndexSchema getIndexSchema() {\n    if (context instanceof SolrMorphlineContext) {    \n      IndexSchema schema = ((SolrMorphlineContext)context).getIndexSchema();\n      if (schema != null) {\n        validateSchema(schema);\n        return schema;\n      }\n    }\n    \n    // If solrHomeDir isn't defined and zkHost and collectionName are defined \n    // then download schema.xml and solrconfig.xml, etc from zk and use that as solrHomeDir\n    String oldSolrHomeDir = null;\n    String mySolrHomeDir = solrHomeDir;\n    if (solrHomeDir == null || solrHomeDir.length() == 0) {\n      if (zkHost == null || zkHost.length() == 0) {\n        // TODO: implement download from solrUrl if specified\n        throw new MorphlineCompilationException(\n            \"Downloading a Solr schema requires either parameter 'solrHomeDir' or parameters 'zkHost' and 'collection'\",\n            config);\n      }\n      if (collectionName == null || collectionName.length() == 0) {\n        throw new MorphlineCompilationException(\n            \"Parameter 'zkHost' requires that you also pass parameter 'collection'\", config);\n      }\n      ZooKeeperDownloader zki = new ZooKeeperDownloader();\n      SolrZkClient zkClient = zki.getZkClient(zkHost);\n      try {\n        String configName = zki.readConfigName(zkClient, collectionName);\n        File downloadedSolrHomeDir = zki.downloadConfigDir(zkClient, configName);\n        mySolrHomeDir = downloadedSolrHomeDir.getAbsolutePath();\n      } catch (KeeperException e) {\n        throw new MorphlineCompilationException(\"Cannot download schema.xml from ZooKeeper\", config, e);\n      } catch (InterruptedException e) {\n        throw new MorphlineCompilationException(\"Cannot download schema.xml from ZooKeeper\", config, e);\n      } catch (IOException e) {\n        throw new MorphlineCompilationException(\"Cannot download schema.xml from ZooKeeper\", config, e);\n      } finally {\n        zkClient.close();\n      }\n    }\n    \n    oldSolrHomeDir = System.setProperty(SOLR_HOME_PROPERTY_NAME, mySolrHomeDir);\n    try {\n      SolrConfig solrConfig = new SolrConfig(); // TODO use SolrResourceLoader ala TikaMapper?\n      // SolrConfig solrConfig = new SolrConfig(\"solrconfig.xml\");\n      // SolrConfig solrConfig = new\n      // SolrConfig(\"/cloud/apache-solr-4.0.0-BETA/example/solr/collection1\",\n      // \"solrconfig.xml\", null);\n      // SolrConfig solrConfig = new\n      // SolrConfig(\"/cloud/apache-solr-4.0.0-BETA/example/solr/collection1/conf/solrconfig.xml\");\n      SolrResourceLoader loader = solrConfig.getResourceLoader();\n      \n      InputSource is = new InputSource(loader.openSchema(\"schema.xml\"));\n          is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(\"schema.xml\"));\n        \n      IndexSchema schema = new IndexSchema(solrConfig, \"schema.xml\", is);\n      validateSchema(schema);\n      return schema;\n    } catch (ParserConfigurationException e) {\n      throw new MorphlineRuntimeException(e);\n    } catch (IOException e) {\n      throw new MorphlineRuntimeException(e);\n    } catch (SAXException e) {\n      throw new MorphlineRuntimeException(e);\n    } finally { // restore old global state\n      if (solrHomeDir != null) {\n        if (oldSolrHomeDir == null) {\n          System.clearProperty(SOLR_HOME_PROPERTY_NAME);\n        } else {\n          System.setProperty(SOLR_HOME_PROPERTY_NAME, oldSolrHomeDir);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/SolrLocator#getIndexSchema().mjava","pathOld":"/dev/null","sourceNew":"  public IndexSchema getIndexSchema() {\n    if (context instanceof SolrMorphlineContext) {    \n      IndexSchema schema = ((SolrMorphlineContext)context).getIndexSchema();\n      if (schema != null) {\n        validateSchema(schema);\n        return schema;\n      }\n    }\n    \n    // If solrHomeDir isn't defined and zkHost and collectionName are defined \n    // then download schema.xml and solrconfig.xml, etc from zk and use that as solrHomeDir\n    String oldSolrHomeDir = null;\n    String mySolrHomeDir = solrHomeDir;\n    if (solrHomeDir == null || solrHomeDir.length() == 0) {\n      if (zkHost == null || zkHost.length() == 0) {\n        // TODO: implement download from solrUrl if specified\n        throw new MorphlineCompilationException(\n            \"Downloading a Solr schema requires either parameter 'solrHomeDir' or parameters 'zkHost' and 'collection'\",\n            config);\n      }\n      if (collectionName == null || collectionName.length() == 0) {\n        throw new MorphlineCompilationException(\n            \"Parameter 'zkHost' requires that you also pass parameter 'collection'\", config);\n      }\n      ZooKeeperDownloader zki = new ZooKeeperDownloader();\n      SolrZkClient zkClient = zki.getZkClient(zkHost);\n      try {\n        String configName = zki.readConfigName(zkClient, collectionName);\n        File downloadedSolrHomeDir = zki.downloadConfigDir(zkClient, configName);\n        mySolrHomeDir = downloadedSolrHomeDir.getAbsolutePath();\n      } catch (KeeperException e) {\n        throw new MorphlineCompilationException(\"Cannot download schema.xml from ZooKeeper\", config, e);\n      } catch (InterruptedException e) {\n        throw new MorphlineCompilationException(\"Cannot download schema.xml from ZooKeeper\", config, e);\n      } catch (IOException e) {\n        throw new MorphlineCompilationException(\"Cannot download schema.xml from ZooKeeper\", config, e);\n      } finally {\n        zkClient.close();\n      }\n    }\n    \n    oldSolrHomeDir = System.setProperty(SOLR_HOME_PROPERTY_NAME, mySolrHomeDir);\n    try {\n      SolrConfig solrConfig = new SolrConfig(); // TODO use SolrResourceLoader ala TikaMapper?\n      // SolrConfig solrConfig = new SolrConfig(\"solrconfig.xml\");\n      // SolrConfig solrConfig = new\n      // SolrConfig(\"/cloud/apache-solr-4.0.0-BETA/example/solr/collection1\",\n      // \"solrconfig.xml\", null);\n      // SolrConfig solrConfig = new\n      // SolrConfig(\"/cloud/apache-solr-4.0.0-BETA/example/solr/collection1/conf/solrconfig.xml\");\n      SolrResourceLoader loader = solrConfig.getResourceLoader();\n      \n      InputSource is = new InputSource(loader.openSchema(\"schema.xml\"));\n          is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(\"schema.xml\"));\n        \n      IndexSchema schema = new IndexSchema(solrConfig, \"schema.xml\", is);\n      validateSchema(schema);\n      return schema;\n    } catch (ParserConfigurationException e) {\n      throw new MorphlineRuntimeException(e);\n    } catch (IOException e) {\n      throw new MorphlineRuntimeException(e);\n    } catch (SAXException e) {\n      throw new MorphlineRuntimeException(e);\n    } finally { // restore old global state\n      if (solrHomeDir != null) {\n        if (oldSolrHomeDir == null) {\n          System.clearProperty(SOLR_HOME_PROPERTY_NAME);\n        } else {\n          System.setProperty(SOLR_HOME_PROPERTY_NAME, oldSolrHomeDir);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96fdd7189254bc9698a673fdf4e2b0e97e993ede","date":1387480427,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/SolrLocator#getIndexSchema().mjava","pathOld":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/SolrLocator#getIndexSchema().mjava","sourceNew":"  public IndexSchema getIndexSchema() {\n    if (context instanceof SolrMorphlineContext) {    \n      IndexSchema schema = ((SolrMorphlineContext)context).getIndexSchema();\n      if (schema != null) {\n        validateSchema(schema);\n        return schema;\n      }\n    }\n    \n    // If solrHomeDir isn't defined and zkHost and collectionName are defined \n    // then download schema.xml and solrconfig.xml, etc from zk and use that as solrHomeDir\n    String mySolrHomeDir = solrHomeDir;\n    if (solrHomeDir == null || solrHomeDir.length() == 0) {\n      if (zkHost == null || zkHost.length() == 0) {\n        // TODO: implement download from solrUrl if specified\n        throw new MorphlineCompilationException(\n            \"Downloading a Solr schema requires either parameter 'solrHomeDir' or parameters 'zkHost' and 'collection'\",\n            config);\n      }\n      if (collectionName == null || collectionName.length() == 0) {\n        throw new MorphlineCompilationException(\n            \"Parameter 'zkHost' requires that you also pass parameter 'collection'\", config);\n      }\n      ZooKeeperDownloader zki = new ZooKeeperDownloader();\n      SolrZkClient zkClient = zki.getZkClient(zkHost);\n      try {\n        String configName = zki.readConfigName(zkClient, collectionName);\n        File downloadedSolrHomeDir = zki.downloadConfigDir(zkClient, configName);\n        mySolrHomeDir = downloadedSolrHomeDir.getAbsolutePath();\n      } catch (KeeperException e) {\n        throw new MorphlineCompilationException(\"Cannot download schema.xml from ZooKeeper\", config, e);\n      } catch (InterruptedException e) {\n        throw new MorphlineCompilationException(\"Cannot download schema.xml from ZooKeeper\", config, e);\n      } catch (IOException e) {\n        throw new MorphlineCompilationException(\"Cannot download schema.xml from ZooKeeper\", config, e);\n      } finally {\n        zkClient.close();\n      }\n    }\n    \n    LOG.debug(\"SolrLocator loading IndexSchema from dir {}\", mySolrHomeDir);\n    try {\n      SolrResourceLoader loader = new SolrResourceLoader(mySolrHomeDir);\n      SolrConfig solrConfig = new SolrConfig(loader, \"solrconfig.xml\", null);\n      InputSource is = new InputSource(loader.openSchema(\"schema.xml\"));\n      is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(\"schema.xml\"));\n      \n      IndexSchema schema = new IndexSchema(solrConfig, \"schema.xml\", is);\n      validateSchema(schema);\n      return schema;\n    } catch (ParserConfigurationException e) {\n      throw new MorphlineRuntimeException(e);\n    } catch (IOException e) {\n      throw new MorphlineRuntimeException(e);\n    } catch (SAXException e) {\n      throw new MorphlineRuntimeException(e);\n    }\n  }\n\n","sourceOld":"  public IndexSchema getIndexSchema() {\n    if (context instanceof SolrMorphlineContext) {    \n      IndexSchema schema = ((SolrMorphlineContext)context).getIndexSchema();\n      if (schema != null) {\n        validateSchema(schema);\n        return schema;\n      }\n    }\n    \n    // If solrHomeDir isn't defined and zkHost and collectionName are defined \n    // then download schema.xml and solrconfig.xml, etc from zk and use that as solrHomeDir\n    String oldSolrHomeDir = null;\n    String mySolrHomeDir = solrHomeDir;\n    if (solrHomeDir == null || solrHomeDir.length() == 0) {\n      if (zkHost == null || zkHost.length() == 0) {\n        // TODO: implement download from solrUrl if specified\n        throw new MorphlineCompilationException(\n            \"Downloading a Solr schema requires either parameter 'solrHomeDir' or parameters 'zkHost' and 'collection'\",\n            config);\n      }\n      if (collectionName == null || collectionName.length() == 0) {\n        throw new MorphlineCompilationException(\n            \"Parameter 'zkHost' requires that you also pass parameter 'collection'\", config);\n      }\n      ZooKeeperDownloader zki = new ZooKeeperDownloader();\n      SolrZkClient zkClient = zki.getZkClient(zkHost);\n      try {\n        String configName = zki.readConfigName(zkClient, collectionName);\n        File downloadedSolrHomeDir = zki.downloadConfigDir(zkClient, configName);\n        mySolrHomeDir = downloadedSolrHomeDir.getAbsolutePath();\n      } catch (KeeperException e) {\n        throw new MorphlineCompilationException(\"Cannot download schema.xml from ZooKeeper\", config, e);\n      } catch (InterruptedException e) {\n        throw new MorphlineCompilationException(\"Cannot download schema.xml from ZooKeeper\", config, e);\n      } catch (IOException e) {\n        throw new MorphlineCompilationException(\"Cannot download schema.xml from ZooKeeper\", config, e);\n      } finally {\n        zkClient.close();\n      }\n    }\n    \n    oldSolrHomeDir = System.setProperty(SOLR_HOME_PROPERTY_NAME, mySolrHomeDir);\n    try {\n      SolrConfig solrConfig = new SolrConfig(); // TODO use SolrResourceLoader ala TikaMapper?\n      // SolrConfig solrConfig = new SolrConfig(\"solrconfig.xml\");\n      // SolrConfig solrConfig = new\n      // SolrConfig(\"/cloud/apache-solr-4.0.0-BETA/example/solr/collection1\",\n      // \"solrconfig.xml\", null);\n      // SolrConfig solrConfig = new\n      // SolrConfig(\"/cloud/apache-solr-4.0.0-BETA/example/solr/collection1/conf/solrconfig.xml\");\n      SolrResourceLoader loader = solrConfig.getResourceLoader();\n      \n      InputSource is = new InputSource(loader.openSchema(\"schema.xml\"));\n          is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(\"schema.xml\"));\n        \n      IndexSchema schema = new IndexSchema(solrConfig, \"schema.xml\", is);\n      validateSchema(schema);\n      return schema;\n    } catch (ParserConfigurationException e) {\n      throw new MorphlineRuntimeException(e);\n    } catch (IOException e) {\n      throw new MorphlineRuntimeException(e);\n    } catch (SAXException e) {\n      throw new MorphlineRuntimeException(e);\n    } finally { // restore old global state\n      if (solrHomeDir != null) {\n        if (oldSolrHomeDir == null) {\n          System.clearProperty(SOLR_HOME_PROPERTY_NAME);\n        } else {\n          System.setProperty(SOLR_HOME_PROPERTY_NAME, oldSolrHomeDir);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c170e9d4c93c47801b611c5f124a91c5d27e0d73","date":1392824784,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/SolrLocator#getIndexSchema().mjava","pathOld":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/SolrLocator#getIndexSchema().mjava","sourceNew":"  public IndexSchema getIndexSchema() {\n    if (context instanceof SolrMorphlineContext) {    \n      IndexSchema schema = ((SolrMorphlineContext)context).getIndexSchema();\n      if (schema != null) {\n        validateSchema(schema);\n        return schema;\n      }\n    }\n\n    File downloadedSolrHomeDir = null;\n    try {\n      // If solrHomeDir isn't defined and zkHost and collectionName are defined \n      // then download schema.xml and solrconfig.xml, etc from zk and use that as solrHomeDir\n      String mySolrHomeDir = solrHomeDir;\n      if (solrHomeDir == null || solrHomeDir.length() == 0) {\n        if (zkHost == null || zkHost.length() == 0) {\n          // TODO: implement download from solrUrl if specified\n          throw new MorphlineCompilationException(\n              \"Downloading a Solr schema requires either parameter 'solrHomeDir' or parameters 'zkHost' and 'collection'\",\n              config);\n        }\n        if (collectionName == null || collectionName.length() == 0) {\n          throw new MorphlineCompilationException(\n              \"Parameter 'zkHost' requires that you also pass parameter 'collection'\", config);\n        }\n        ZooKeeperDownloader zki = new ZooKeeperDownloader();\n        SolrZkClient zkClient = zki.getZkClient(zkHost);\n        try {\n          String configName = zki.readConfigName(zkClient, collectionName);\n          downloadedSolrHomeDir = Files.createTempDir();\n          downloadedSolrHomeDir = zki.downloadConfigDir(zkClient, configName, downloadedSolrHomeDir);\n          mySolrHomeDir = downloadedSolrHomeDir.getAbsolutePath();\n        } catch (KeeperException e) {\n          throw new MorphlineCompilationException(\"Cannot download schema.xml from ZooKeeper\", config, e);\n        } catch (InterruptedException e) {\n          throw new MorphlineCompilationException(\"Cannot download schema.xml from ZooKeeper\", config, e);\n        } catch (IOException e) {\n          throw new MorphlineCompilationException(\"Cannot download schema.xml from ZooKeeper\", config, e);\n        } finally {\n          zkClient.close();\n        }\n      }\n      \n      LOG.debug(\"SolrLocator loading IndexSchema from dir {}\", mySolrHomeDir);\n      try {\n        SolrResourceLoader loader = new SolrResourceLoader(mySolrHomeDir);\n        SolrConfig solrConfig = new SolrConfig(loader, \"solrconfig.xml\", null);\n        InputSource is = new InputSource(loader.openSchema(\"schema.xml\"));\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(\"schema.xml\"));\n        \n        IndexSchema schema = new IndexSchema(solrConfig, \"schema.xml\", is);\n        validateSchema(schema);\n        return schema;\n      } catch (ParserConfigurationException e) {\n        throw new MorphlineRuntimeException(e);\n      } catch (IOException e) {\n        throw new MorphlineRuntimeException(e);\n      } catch (SAXException e) {\n        throw new MorphlineRuntimeException(e);\n      }\n    } finally {\n      if (downloadedSolrHomeDir != null) {\n        try {\n          FileUtils.deleteDirectory(downloadedSolrHomeDir);\n        } catch (IOException e) {\n          LOG.warn(\"Cannot delete tmp directory\", e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public IndexSchema getIndexSchema() {\n    if (context instanceof SolrMorphlineContext) {    \n      IndexSchema schema = ((SolrMorphlineContext)context).getIndexSchema();\n      if (schema != null) {\n        validateSchema(schema);\n        return schema;\n      }\n    }\n    \n    // If solrHomeDir isn't defined and zkHost and collectionName are defined \n    // then download schema.xml and solrconfig.xml, etc from zk and use that as solrHomeDir\n    String mySolrHomeDir = solrHomeDir;\n    if (solrHomeDir == null || solrHomeDir.length() == 0) {\n      if (zkHost == null || zkHost.length() == 0) {\n        // TODO: implement download from solrUrl if specified\n        throw new MorphlineCompilationException(\n            \"Downloading a Solr schema requires either parameter 'solrHomeDir' or parameters 'zkHost' and 'collection'\",\n            config);\n      }\n      if (collectionName == null || collectionName.length() == 0) {\n        throw new MorphlineCompilationException(\n            \"Parameter 'zkHost' requires that you also pass parameter 'collection'\", config);\n      }\n      ZooKeeperDownloader zki = new ZooKeeperDownloader();\n      SolrZkClient zkClient = zki.getZkClient(zkHost);\n      try {\n        String configName = zki.readConfigName(zkClient, collectionName);\n        File downloadedSolrHomeDir = zki.downloadConfigDir(zkClient, configName);\n        mySolrHomeDir = downloadedSolrHomeDir.getAbsolutePath();\n      } catch (KeeperException e) {\n        throw new MorphlineCompilationException(\"Cannot download schema.xml from ZooKeeper\", config, e);\n      } catch (InterruptedException e) {\n        throw new MorphlineCompilationException(\"Cannot download schema.xml from ZooKeeper\", config, e);\n      } catch (IOException e) {\n        throw new MorphlineCompilationException(\"Cannot download schema.xml from ZooKeeper\", config, e);\n      } finally {\n        zkClient.close();\n      }\n    }\n    \n    LOG.debug(\"SolrLocator loading IndexSchema from dir {}\", mySolrHomeDir);\n    try {\n      SolrResourceLoader loader = new SolrResourceLoader(mySolrHomeDir);\n      SolrConfig solrConfig = new SolrConfig(loader, \"solrconfig.xml\", null);\n      InputSource is = new InputSource(loader.openSchema(\"schema.xml\"));\n      is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(\"schema.xml\"));\n      \n      IndexSchema schema = new IndexSchema(solrConfig, \"schema.xml\", is);\n      validateSchema(schema);\n      return schema;\n    } catch (ParserConfigurationException e) {\n      throw new MorphlineRuntimeException(e);\n    } catch (IOException e) {\n      throw new MorphlineRuntimeException(e);\n    } catch (SAXException e) {\n      throw new MorphlineRuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae76b9cb3096b2aede07a0adb65d789b9dfee9c6","date":1421882785,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/SolrLocator#getIndexSchema().mjava","pathOld":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/SolrLocator#getIndexSchema().mjava","sourceNew":"  public IndexSchema getIndexSchema() {\n    if (context instanceof SolrMorphlineContext) {    \n      IndexSchema schema = ((SolrMorphlineContext)context).getIndexSchema();\n      if (schema != null) {\n        validateSchema(schema);\n        return schema;\n      }\n    }\n\n    File downloadedSolrHomeDir = null;\n    try {\n      // If solrHomeDir isn't defined and zkHost and collectionName are defined \n      // then download schema.xml and solrconfig.xml, etc from zk and use that as solrHomeDir\n      String mySolrHomeDir = solrHomeDir;\n      if (solrHomeDir == null || solrHomeDir.length() == 0) {\n        if (zkHost == null || zkHost.length() == 0) {\n          // TODO: implement download from solrUrl if specified\n          throw new MorphlineCompilationException(\n              \"Downloading a Solr schema requires either parameter 'solrHomeDir' or parameters 'zkHost' and 'collection'\",\n              config);\n        }\n        if (collectionName == null || collectionName.length() == 0) {\n          throw new MorphlineCompilationException(\n              \"Parameter 'zkHost' requires that you also pass parameter 'collection'\", config);\n        }\n        ZooKeeperDownloader zki = new ZooKeeperDownloader();\n        SolrZkClient zkClient = zki.getZkClient(zkHost);\n        try {\n          String configName = zki.readConfigName(zkClient, collectionName);\n          downloadedSolrHomeDir = Files.createTempDir();\n          downloadedSolrHomeDir = zki.downloadConfigDir(zkClient, configName, downloadedSolrHomeDir);\n          mySolrHomeDir = downloadedSolrHomeDir.getAbsolutePath();\n        } catch (KeeperException | InterruptedException | IOException e) {\n          throw new MorphlineCompilationException(\"Cannot download schema.xml from ZooKeeper\", config, e);\n        } finally {\n          zkClient.close();\n        }\n      }\n      \n      LOG.debug(\"SolrLocator loading IndexSchema from dir {}\", mySolrHomeDir);\n      try {\n        SolrResourceLoader loader = new SolrResourceLoader(mySolrHomeDir);\n        SolrConfig solrConfig = new SolrConfig(loader, \"solrconfig.xml\", null);\n        InputSource is = new InputSource(loader.openSchema(\"schema.xml\"));\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(\"schema.xml\"));\n        \n        IndexSchema schema = new IndexSchema(solrConfig, \"schema.xml\", is);\n        validateSchema(schema);\n        return schema;\n      } catch (ParserConfigurationException | IOException | SAXException e) {\n        throw new MorphlineRuntimeException(e);\n      }\n    } finally {\n      if (downloadedSolrHomeDir != null) {\n        try {\n          FileUtils.deleteDirectory(downloadedSolrHomeDir);\n        } catch (IOException e) {\n          LOG.warn(\"Cannot delete tmp directory\", e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public IndexSchema getIndexSchema() {\n    if (context instanceof SolrMorphlineContext) {    \n      IndexSchema schema = ((SolrMorphlineContext)context).getIndexSchema();\n      if (schema != null) {\n        validateSchema(schema);\n        return schema;\n      }\n    }\n\n    File downloadedSolrHomeDir = null;\n    try {\n      // If solrHomeDir isn't defined and zkHost and collectionName are defined \n      // then download schema.xml and solrconfig.xml, etc from zk and use that as solrHomeDir\n      String mySolrHomeDir = solrHomeDir;\n      if (solrHomeDir == null || solrHomeDir.length() == 0) {\n        if (zkHost == null || zkHost.length() == 0) {\n          // TODO: implement download from solrUrl if specified\n          throw new MorphlineCompilationException(\n              \"Downloading a Solr schema requires either parameter 'solrHomeDir' or parameters 'zkHost' and 'collection'\",\n              config);\n        }\n        if (collectionName == null || collectionName.length() == 0) {\n          throw new MorphlineCompilationException(\n              \"Parameter 'zkHost' requires that you also pass parameter 'collection'\", config);\n        }\n        ZooKeeperDownloader zki = new ZooKeeperDownloader();\n        SolrZkClient zkClient = zki.getZkClient(zkHost);\n        try {\n          String configName = zki.readConfigName(zkClient, collectionName);\n          downloadedSolrHomeDir = Files.createTempDir();\n          downloadedSolrHomeDir = zki.downloadConfigDir(zkClient, configName, downloadedSolrHomeDir);\n          mySolrHomeDir = downloadedSolrHomeDir.getAbsolutePath();\n        } catch (KeeperException e) {\n          throw new MorphlineCompilationException(\"Cannot download schema.xml from ZooKeeper\", config, e);\n        } catch (InterruptedException e) {\n          throw new MorphlineCompilationException(\"Cannot download schema.xml from ZooKeeper\", config, e);\n        } catch (IOException e) {\n          throw new MorphlineCompilationException(\"Cannot download schema.xml from ZooKeeper\", config, e);\n        } finally {\n          zkClient.close();\n        }\n      }\n      \n      LOG.debug(\"SolrLocator loading IndexSchema from dir {}\", mySolrHomeDir);\n      try {\n        SolrResourceLoader loader = new SolrResourceLoader(mySolrHomeDir);\n        SolrConfig solrConfig = new SolrConfig(loader, \"solrconfig.xml\", null);\n        InputSource is = new InputSource(loader.openSchema(\"schema.xml\"));\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(\"schema.xml\"));\n        \n        IndexSchema schema = new IndexSchema(solrConfig, \"schema.xml\", is);\n        validateSchema(schema);\n        return schema;\n      } catch (ParserConfigurationException e) {\n        throw new MorphlineRuntimeException(e);\n      } catch (IOException e) {\n        throw new MorphlineRuntimeException(e);\n      } catch (SAXException e) {\n        throw new MorphlineRuntimeException(e);\n      }\n    } finally {\n      if (downloadedSolrHomeDir != null) {\n        try {\n          FileUtils.deleteDirectory(downloadedSolrHomeDir);\n        } catch (IOException e) {\n          LOG.warn(\"Cannot delete tmp directory\", e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a626ec4d1c92e59fe390724d6220081047b03ce7","date":1448021525,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/SolrLocator#getIndexSchema().mjava","pathOld":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/SolrLocator#getIndexSchema().mjava","sourceNew":"  public IndexSchema getIndexSchema() {\n    if (context instanceof SolrMorphlineContext) {    \n      IndexSchema schema = ((SolrMorphlineContext)context).getIndexSchema();\n      if (schema != null) {\n        validateSchema(schema);\n        return schema;\n      }\n    }\n\n    File downloadedSolrHomeDir = null;\n    try {\n      // If solrHomeDir isn't defined and zkHost and collectionName are defined \n      // then download schema.xml and solrconfig.xml, etc from zk and use that as solrHomeDir\n      String mySolrHomeDir = solrHomeDir;\n      if (solrHomeDir == null || solrHomeDir.length() == 0) {\n        if (zkHost == null || zkHost.length() == 0) {\n          // TODO: implement download from solrUrl if specified\n          throw new MorphlineCompilationException(\n              \"Downloading a Solr schema requires either parameter 'solrHomeDir' or parameters 'zkHost' and 'collection'\",\n              config);\n        }\n        if (collectionName == null || collectionName.length() == 0) {\n          throw new MorphlineCompilationException(\n              \"Parameter 'zkHost' requires that you also pass parameter 'collection'\", config);\n        }\n        ZooKeeperDownloader zki = new ZooKeeperDownloader();\n        SolrZkClient zkClient = zki.getZkClient(zkHost);\n        try {\n          String configName = zki.readConfigName(zkClient, collectionName);\n          downloadedSolrHomeDir = Files.createTempDir();\n          downloadedSolrHomeDir = zki.downloadConfigDir(zkClient, configName, downloadedSolrHomeDir);\n          mySolrHomeDir = downloadedSolrHomeDir.getAbsolutePath();\n        } catch (KeeperException | InterruptedException | IOException e) {\n          throw new MorphlineCompilationException(\"Cannot download schema.xml from ZooKeeper\", config, e);\n        } finally {\n          zkClient.close();\n        }\n      }\n      \n      LOG.debug(\"SolrLocator loading IndexSchema from dir {}\", mySolrHomeDir);\n      try {\n        SolrResourceLoader loader = new SolrResourceLoader(Paths.get(mySolrHomeDir));\n        SolrConfig solrConfig = new SolrConfig(loader, \"solrconfig.xml\", null);\n        InputSource is = new InputSource(loader.openSchema(\"schema.xml\"));\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(\"schema.xml\"));\n        \n        IndexSchema schema = new IndexSchema(solrConfig, \"schema.xml\", is);\n        validateSchema(schema);\n        return schema;\n      } catch (ParserConfigurationException | IOException | SAXException e) {\n        throw new MorphlineRuntimeException(e);\n      }\n    } finally {\n      if (downloadedSolrHomeDir != null) {\n        try {\n          FileUtils.deleteDirectory(downloadedSolrHomeDir);\n        } catch (IOException e) {\n          LOG.warn(\"Cannot delete tmp directory\", e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public IndexSchema getIndexSchema() {\n    if (context instanceof SolrMorphlineContext) {    \n      IndexSchema schema = ((SolrMorphlineContext)context).getIndexSchema();\n      if (schema != null) {\n        validateSchema(schema);\n        return schema;\n      }\n    }\n\n    File downloadedSolrHomeDir = null;\n    try {\n      // If solrHomeDir isn't defined and zkHost and collectionName are defined \n      // then download schema.xml and solrconfig.xml, etc from zk and use that as solrHomeDir\n      String mySolrHomeDir = solrHomeDir;\n      if (solrHomeDir == null || solrHomeDir.length() == 0) {\n        if (zkHost == null || zkHost.length() == 0) {\n          // TODO: implement download from solrUrl if specified\n          throw new MorphlineCompilationException(\n              \"Downloading a Solr schema requires either parameter 'solrHomeDir' or parameters 'zkHost' and 'collection'\",\n              config);\n        }\n        if (collectionName == null || collectionName.length() == 0) {\n          throw new MorphlineCompilationException(\n              \"Parameter 'zkHost' requires that you also pass parameter 'collection'\", config);\n        }\n        ZooKeeperDownloader zki = new ZooKeeperDownloader();\n        SolrZkClient zkClient = zki.getZkClient(zkHost);\n        try {\n          String configName = zki.readConfigName(zkClient, collectionName);\n          downloadedSolrHomeDir = Files.createTempDir();\n          downloadedSolrHomeDir = zki.downloadConfigDir(zkClient, configName, downloadedSolrHomeDir);\n          mySolrHomeDir = downloadedSolrHomeDir.getAbsolutePath();\n        } catch (KeeperException | InterruptedException | IOException e) {\n          throw new MorphlineCompilationException(\"Cannot download schema.xml from ZooKeeper\", config, e);\n        } finally {\n          zkClient.close();\n        }\n      }\n      \n      LOG.debug(\"SolrLocator loading IndexSchema from dir {}\", mySolrHomeDir);\n      try {\n        SolrResourceLoader loader = new SolrResourceLoader(mySolrHomeDir);\n        SolrConfig solrConfig = new SolrConfig(loader, \"solrconfig.xml\", null);\n        InputSource is = new InputSource(loader.openSchema(\"schema.xml\"));\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(\"schema.xml\"));\n        \n        IndexSchema schema = new IndexSchema(solrConfig, \"schema.xml\", is);\n        validateSchema(schema);\n        return schema;\n      } catch (ParserConfigurationException | IOException | SAXException e) {\n        throw new MorphlineRuntimeException(e);\n      }\n    } finally {\n      if (downloadedSolrHomeDir != null) {\n        try {\n          FileUtils.deleteDirectory(downloadedSolrHomeDir);\n        } catch (IOException e) {\n          LOG.warn(\"Cannot delete tmp directory\", e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12109b652e9210b8d58fca47f6c4a725d058a58e","date":1490373076,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/SolrLocator#getIndexSchema().mjava","sourceNew":null,"sourceOld":"  public IndexSchema getIndexSchema() {\n    if (context instanceof SolrMorphlineContext) {    \n      IndexSchema schema = ((SolrMorphlineContext)context).getIndexSchema();\n      if (schema != null) {\n        validateSchema(schema);\n        return schema;\n      }\n    }\n\n    File downloadedSolrHomeDir = null;\n    try {\n      // If solrHomeDir isn't defined and zkHost and collectionName are defined \n      // then download schema.xml and solrconfig.xml, etc from zk and use that as solrHomeDir\n      String mySolrHomeDir = solrHomeDir;\n      if (solrHomeDir == null || solrHomeDir.length() == 0) {\n        if (zkHost == null || zkHost.length() == 0) {\n          // TODO: implement download from solrUrl if specified\n          throw new MorphlineCompilationException(\n              \"Downloading a Solr schema requires either parameter 'solrHomeDir' or parameters 'zkHost' and 'collection'\",\n              config);\n        }\n        if (collectionName == null || collectionName.length() == 0) {\n          throw new MorphlineCompilationException(\n              \"Parameter 'zkHost' requires that you also pass parameter 'collection'\", config);\n        }\n        ZooKeeperDownloader zki = new ZooKeeperDownloader();\n        SolrZkClient zkClient = zki.getZkClient(zkHost);\n        try {\n          String configName = zki.readConfigName(zkClient, collectionName);\n          downloadedSolrHomeDir = Files.createTempDir();\n          downloadedSolrHomeDir = zki.downloadConfigDir(zkClient, configName, downloadedSolrHomeDir);\n          mySolrHomeDir = downloadedSolrHomeDir.getAbsolutePath();\n        } catch (KeeperException | InterruptedException | IOException e) {\n          throw new MorphlineCompilationException(\"Cannot download schema.xml from ZooKeeper\", config, e);\n        } finally {\n          zkClient.close();\n        }\n      }\n      \n      LOG.debug(\"SolrLocator loading IndexSchema from dir {}\", mySolrHomeDir);\n      try {\n        SolrResourceLoader loader = new SolrResourceLoader(Paths.get(mySolrHomeDir));\n        SolrConfig solrConfig = new SolrConfig(loader, \"solrconfig.xml\", null);\n        InputSource is = new InputSource(loader.openSchema(\"schema.xml\"));\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(\"schema.xml\"));\n        \n        IndexSchema schema = new IndexSchema(solrConfig, \"schema.xml\", is);\n        validateSchema(schema);\n        return schema;\n      } catch (ParserConfigurationException | IOException | SAXException e) {\n        throw new MorphlineRuntimeException(e);\n      }\n    } finally {\n      if (downloadedSolrHomeDir != null) {\n        try {\n          FileUtils.deleteDirectory(downloadedSolrHomeDir);\n        } catch (IOException e) {\n          LOG.warn(\"Cannot delete tmp directory\", e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe1c4aa9af769a38e878f608070f672efbeac27f","date":1490594650,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/SolrLocator#getIndexSchema().mjava","sourceNew":null,"sourceOld":"  public IndexSchema getIndexSchema() {\n    if (context instanceof SolrMorphlineContext) {    \n      IndexSchema schema = ((SolrMorphlineContext)context).getIndexSchema();\n      if (schema != null) {\n        validateSchema(schema);\n        return schema;\n      }\n    }\n\n    File downloadedSolrHomeDir = null;\n    try {\n      // If solrHomeDir isn't defined and zkHost and collectionName are defined \n      // then download schema.xml and solrconfig.xml, etc from zk and use that as solrHomeDir\n      String mySolrHomeDir = solrHomeDir;\n      if (solrHomeDir == null || solrHomeDir.length() == 0) {\n        if (zkHost == null || zkHost.length() == 0) {\n          // TODO: implement download from solrUrl if specified\n          throw new MorphlineCompilationException(\n              \"Downloading a Solr schema requires either parameter 'solrHomeDir' or parameters 'zkHost' and 'collection'\",\n              config);\n        }\n        if (collectionName == null || collectionName.length() == 0) {\n          throw new MorphlineCompilationException(\n              \"Parameter 'zkHost' requires that you also pass parameter 'collection'\", config);\n        }\n        ZooKeeperDownloader zki = new ZooKeeperDownloader();\n        SolrZkClient zkClient = zki.getZkClient(zkHost);\n        try {\n          String configName = zki.readConfigName(zkClient, collectionName);\n          downloadedSolrHomeDir = Files.createTempDir();\n          downloadedSolrHomeDir = zki.downloadConfigDir(zkClient, configName, downloadedSolrHomeDir);\n          mySolrHomeDir = downloadedSolrHomeDir.getAbsolutePath();\n        } catch (KeeperException | InterruptedException | IOException e) {\n          throw new MorphlineCompilationException(\"Cannot download schema.xml from ZooKeeper\", config, e);\n        } finally {\n          zkClient.close();\n        }\n      }\n      \n      LOG.debug(\"SolrLocator loading IndexSchema from dir {}\", mySolrHomeDir);\n      try {\n        SolrResourceLoader loader = new SolrResourceLoader(Paths.get(mySolrHomeDir));\n        SolrConfig solrConfig = new SolrConfig(loader, \"solrconfig.xml\", null);\n        InputSource is = new InputSource(loader.openSchema(\"schema.xml\"));\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(\"schema.xml\"));\n        \n        IndexSchema schema = new IndexSchema(solrConfig, \"schema.xml\", is);\n        validateSchema(schema);\n        return schema;\n      } catch (ParserConfigurationException | IOException | SAXException e) {\n        throw new MorphlineRuntimeException(e);\n      }\n    } finally {\n      if (downloadedSolrHomeDir != null) {\n        try {\n          FileUtils.deleteDirectory(downloadedSolrHomeDir);\n        } catch (IOException e) {\n          LOG.warn(\"Cannot delete tmp directory\", e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae76b9cb3096b2aede07a0adb65d789b9dfee9c6":["c170e9d4c93c47801b611c5f124a91c5d27e0d73"],"c170e9d4c93c47801b611c5f124a91c5d27e0d73":["96fdd7189254bc9698a673fdf4e2b0e97e993ede"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["ae76b9cb3096b2aede07a0adb65d789b9dfee9c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"96fdd7189254bc9698a673fdf4e2b0e97e993ede":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"fe1c4aa9af769a38e878f608070f672efbeac27f":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12109b652e9210b8d58fca47f6c4a725d058a58e"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","96fdd7189254bc9698a673fdf4e2b0e97e993ede"],"ae76b9cb3096b2aede07a0adb65d789b9dfee9c6":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"c170e9d4c93c47801b611c5f124a91c5d27e0d73":["ae76b9cb3096b2aede07a0adb65d789b9dfee9c6"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["12109b652e9210b8d58fca47f6c4a725d058a58e","fe1c4aa9af769a38e878f608070f672efbeac27f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70f91c8322fbffe3a3a897ef20ea19119cac10cd","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"96fdd7189254bc9698a673fdf4e2b0e97e993ede":["c170e9d4c93c47801b611c5f124a91c5d27e0d73"],"fe1c4aa9af769a38e878f608070f672efbeac27f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","fe1c4aa9af769a38e878f608070f672efbeac27f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}