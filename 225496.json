{"path":"lucene/core/src/java/org/apache/lucene/index/Payload#clone().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/Payload#clone().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/Payload#clone().mjava","sourceNew":"  /**\n   * Clones this payload by creating a copy of the underlying\n   * byte array.\n   */\n  @Override\n  public Object clone() {\n    try {\n      // Start with a shallow copy of data\n      Payload clone = (Payload) super.clone();\n      // Only copy the part of data that belongs to this Payload\n      if (offset == 0 && length == data.length) {\n        // It is the whole thing, so just clone it.\n        clone.data = data.clone();\n      }\n      else {\n        // Just get the part\n        clone.data = this.toByteArray();\n        clone.offset = 0;\n      }\n      return clone;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(e);  // shouldn't happen\n    }\n  }\n\n","sourceOld":"  /**\n   * Clones this payload by creating a copy of the underlying\n   * byte array.\n   */\n  @Override\n  public Object clone() {\n    try {\n      // Start with a shallow copy of data\n      Payload clone = (Payload) super.clone();\n      // Only copy the part of data that belongs to this Payload\n      if (offset == 0 && length == data.length) {\n        // It is the whole thing, so just clone it.\n        clone.data = data.clone();\n      }\n      else {\n        // Just get the part\n        clone.data = this.toByteArray();\n        clone.offset = 0;\n      }\n      return clone;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(e);  // shouldn't happen\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5bf508bfc98425280b4bb708ab724f718705c9d","date":1332973345,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/Payload#clone().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/Payload#clone().mjava","sourceNew":"  /**\n   * Clones this payload by creating a copy of the underlying\n   * byte array.\n   */\n  @Override\n  public Payload clone() {\n    try {\n      // Start with a shallow copy of data\n      Payload clone = (Payload) super.clone();\n      // Only copy the part of data that belongs to this Payload\n      if (offset == 0 && length == data.length) {\n        // It is the whole thing, so just clone it.\n        clone.data = data.clone();\n      }\n      else {\n        // Just get the part\n        clone.data = this.toByteArray();\n        clone.offset = 0;\n      }\n      return clone;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(e);  // shouldn't happen\n    }\n  }\n\n","sourceOld":"  /**\n   * Clones this payload by creating a copy of the underlying\n   * byte array.\n   */\n  @Override\n  public Object clone() {\n    try {\n      // Start with a shallow copy of data\n      Payload clone = (Payload) super.clone();\n      // Only copy the part of data that belongs to this Payload\n      if (offset == 0 && length == data.length) {\n        // It is the whole thing, so just clone it.\n        clone.data = data.clone();\n      }\n      else {\n        // Just get the part\n        clone.data = this.toByteArray();\n        clone.offset = 0;\n      }\n      return clone;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(e);  // shouldn't happen\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76fa9933adb0556e752e8af9734c4d0ae14622ff","date":1339178321,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/Payload#clone().mjava","sourceNew":null,"sourceOld":"  /**\n   * Clones this payload by creating a copy of the underlying\n   * byte array.\n   */\n  @Override\n  public Payload clone() {\n    try {\n      // Start with a shallow copy of data\n      Payload clone = (Payload) super.clone();\n      // Only copy the part of data that belongs to this Payload\n      if (offset == 0 && length == data.length) {\n        // It is the whole thing, so just clone it.\n        clone.data = data.clone();\n      }\n      else {\n        // Just get the part\n        clone.data = this.toByteArray();\n        clone.offset = 0;\n      }\n      return clone;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(e);  // shouldn't happen\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"76fa9933adb0556e752e8af9734c4d0ae14622ff":["f5bf508bfc98425280b4bb708ab724f718705c9d"],"f5bf508bfc98425280b4bb708ab724f718705c9d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["76fa9933adb0556e752e8af9734c4d0ae14622ff"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f5bf508bfc98425280b4bb708ab724f718705c9d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"76fa9933adb0556e752e8af9734c4d0ae14622ff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f5bf508bfc98425280b4bb708ab724f718705c9d":["76fa9933adb0556e752e8af9734c4d0ae14622ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}