{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testNodeLost().mjava","commits":[{"id":"a4422b331d00607258b0ed3e43934306e67764aa","date":1513943901,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testNodeLost().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNodeLost() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with 1 replica per node\n    String collectionName = \"testNodeLost\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 5, NUM_NODES / 10);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + waitForState(collectionName, 20 * NUM_NODES, TimeUnit.SECONDS, clusterShape(NUM_NODES / 5, NUM_NODES / 10)) + \" ms\");\n\n    // start killing nodes\n    int numNodes = NUM_NODES / 5;\n    List<String> nodes = new ArrayList<>(cluster.getLiveNodesSet().get());\n    for (int i = 0; i < numNodes; i++) {\n      // this may also select a node where a replica is moved to, so the total number of\n      // MOVEREPLICA may vary\n      cluster.simRemoveNode(nodes.get(i), false);\n      cluster.getTimeSource().sleep(4000);\n    }\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_lost_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODELOST\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event: \" + systemColl, startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int ignored = 0;\n    int lastIgnoredPos = startedEventPos;\n    for (int i = startedEventPos + 1; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_lost_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODELOST\".equals(d.getFieldValue(\"event.type_s\"))) {\n        if (\"IGNORED\".equals(d.getFieldValue(\"stage_s\"))) {\n          ignored++;\n          lastIgnoredPos = i;\n        }\n      }\n    }\n    assertTrue(\"no IGNORED events\", ignored > 0);\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops?\", cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + waitForState(collectionName, 20 * NUM_NODES, TimeUnit.SECONDS, clusterShape(NUM_NODES / 5, NUM_NODES / 10)) + \" ms\");\n\n    int count = 50;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(150000);\n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_lost_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes\", finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    log.info(\"#### System stabilized after \" + TimeUnit.NANOSECONDS.toMillis(delta) + \" ms\");\n    long ops = cluster.simGetOpCount(\"MOVEREPLICA\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops: \" + ops, ops >= 40);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a00c801e9678a87ab9d8f373daa9d1955a4c4cee","date":1514982555,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testNodeLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testNodeLost().mjava","sourceNew":"  @Test\n  public void testNodeLost() throws Exception {\n    doTestNodeLost(waitForSeconds, 5000, 1);\n  }\n\n","sourceOld":"  @Test\n  public void testNodeLost() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with 1 replica per node\n    String collectionName = \"testNodeLost\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 5, NUM_NODES / 10);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + waitForState(collectionName, 20 * NUM_NODES, TimeUnit.SECONDS, clusterShape(NUM_NODES / 5, NUM_NODES / 10)) + \" ms\");\n\n    // start killing nodes\n    int numNodes = NUM_NODES / 5;\n    List<String> nodes = new ArrayList<>(cluster.getLiveNodesSet().get());\n    for (int i = 0; i < numNodes; i++) {\n      // this may also select a node where a replica is moved to, so the total number of\n      // MOVEREPLICA may vary\n      cluster.simRemoveNode(nodes.get(i), false);\n      cluster.getTimeSource().sleep(4000);\n    }\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_lost_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODELOST\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event: \" + systemColl, startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int ignored = 0;\n    int lastIgnoredPos = startedEventPos;\n    for (int i = startedEventPos + 1; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_lost_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODELOST\".equals(d.getFieldValue(\"event.type_s\"))) {\n        if (\"IGNORED\".equals(d.getFieldValue(\"stage_s\"))) {\n          ignored++;\n          lastIgnoredPos = i;\n        }\n      }\n    }\n    assertTrue(\"no IGNORED events\", ignored > 0);\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops?\", cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + waitForState(collectionName, 20 * NUM_NODES, TimeUnit.SECONDS, clusterShape(NUM_NODES / 5, NUM_NODES / 10)) + \" ms\");\n\n    int count = 50;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(150000);\n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_lost_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes\", finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    log.info(\"#### System stabilized after \" + TimeUnit.NANOSECONDS.toMillis(delta) + \" ms\");\n    long ops = cluster.simGetOpCount(\"MOVEREPLICA\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops: \" + ops, ops >= 40);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d5ef2a9b4062088bd74169faad5ae11897a6d77","date":1516279764,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testNodeLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testNodeLost().mjava","sourceNew":"  @Test\n  public void testNodeLost() throws Exception {\n    doTestNodeLost(waitForSeconds, 5000, 0);\n  }\n\n","sourceOld":"  @Test\n  public void testNodeLost() throws Exception {\n    doTestNodeLost(waitForSeconds, 5000, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testNodeLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testNodeLost().mjava","sourceNew":"  @Test\n  public void testNodeLost() throws Exception {\n    doTestNodeLost(waitForSeconds, 5000, 0);\n  }\n\n","sourceOld":"  @Test\n  public void testNodeLost() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with 1 replica per node\n    String collectionName = \"testNodeLost\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 5, NUM_NODES / 10);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + waitForState(collectionName, 20 * NUM_NODES, TimeUnit.SECONDS, clusterShape(NUM_NODES / 5, NUM_NODES / 10)) + \" ms\");\n\n    // start killing nodes\n    int numNodes = NUM_NODES / 5;\n    List<String> nodes = new ArrayList<>(cluster.getLiveNodesSet().get());\n    for (int i = 0; i < numNodes; i++) {\n      // this may also select a node where a replica is moved to, so the total number of\n      // MOVEREPLICA may vary\n      cluster.simRemoveNode(nodes.get(i), false);\n      cluster.getTimeSource().sleep(4000);\n    }\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_lost_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODELOST\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event: \" + systemColl, startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int ignored = 0;\n    int lastIgnoredPos = startedEventPos;\n    for (int i = startedEventPos + 1; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_lost_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODELOST\".equals(d.getFieldValue(\"event.type_s\"))) {\n        if (\"IGNORED\".equals(d.getFieldValue(\"stage_s\"))) {\n          ignored++;\n          lastIgnoredPos = i;\n        }\n      }\n    }\n    assertTrue(\"no IGNORED events\", ignored > 0);\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops?\", cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + waitForState(collectionName, 20 * NUM_NODES, TimeUnit.SECONDS, clusterShape(NUM_NODES / 5, NUM_NODES / 10)) + \" ms\");\n\n    int count = 50;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(150000);\n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_lost_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes\", finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    log.info(\"#### System stabilized after \" + TimeUnit.NANOSECONDS.toMillis(delta) + \" ms\");\n    long ops = cluster.simGetOpCount(\"MOVEREPLICA\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops: \" + ops, ops >= 40);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a7544ad4b63d1b5f556c3da8f9c63d332aa034e","date":1529622176,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testNodeLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testNodeLost().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2018-06-18\n  public void testNodeLost() throws Exception {\n    doTestNodeLost(waitForSeconds, 5000, 0);\n  }\n\n","sourceOld":"  @Test\n  public void testNodeLost() throws Exception {\n    doTestNodeLost(waitForSeconds, 5000, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testNodeLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testNodeLost().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2018-06-18\n  public void testNodeLost() throws Exception {\n    doTestNodeLost(waitForSeconds, 5000, 0);\n  }\n\n","sourceOld":"  @Test\n  public void testNodeLost() throws Exception {\n    doTestNodeLost(waitForSeconds, 5000, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testNodeLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testNodeLost().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2018-06-18\n  public void testNodeLost() throws Exception {\n    doTestNodeLost(waitForSeconds, 5000, 0);\n  }\n\n","sourceOld":"  @Test\n  public void testNodeLost() throws Exception {\n    doTestNodeLost(waitForSeconds, 5000, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testNodeLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testNodeLost().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2018-06-18\n  public void testNodeLost() throws Exception {\n    doTestNodeLost(waitForSeconds, 5000, 0);\n  }\n\n","sourceOld":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2018-06-18\n  public void testNodeLost() throws Exception {\n    doTestNodeLost(waitForSeconds, 5000, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["7a7544ad4b63d1b5f556c3da8f9c63d332aa034e"],"b94236357aaa22b76c10629851fe4e376e0cea82":["a4422b331d00607258b0ed3e43934306e67764aa","0d5ef2a9b4062088bd74169faad5ae11897a6d77"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["b94236357aaa22b76c10629851fe4e376e0cea82","7a7544ad4b63d1b5f556c3da8f9c63d332aa034e"],"0d5ef2a9b4062088bd74169faad5ae11897a6d77":["a00c801e9678a87ab9d8f373daa9d1955a4c4cee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a4422b331d00607258b0ed3e43934306e67764aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7a7544ad4b63d1b5f556c3da8f9c63d332aa034e":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"a00c801e9678a87ab9d8f373daa9d1955a4c4cee":["a4422b331d00607258b0ed3e43934306e67764aa"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["b94236357aaa22b76c10629851fe4e376e0cea82","7a7544ad4b63d1b5f556c3da8f9c63d332aa034e"]},"commit2Childs":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b94236357aaa22b76c10629851fe4e376e0cea82":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7a7544ad4b63d1b5f556c3da8f9c63d332aa034e","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"0d5ef2a9b4062088bd74169faad5ae11897a6d77":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a4422b331d00607258b0ed3e43934306e67764aa"],"a4422b331d00607258b0ed3e43934306e67764aa":["b94236357aaa22b76c10629851fe4e376e0cea82","a00c801e9678a87ab9d8f373daa9d1955a4c4cee"],"7a7544ad4b63d1b5f556c3da8f9c63d332aa034e":["a6a5c1c40529f15b445e6720dfde1967e139bff1","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a00c801e9678a87ab9d8f373daa9d1955a4c4cee":["0d5ef2a9b4062088bd74169faad5ae11897a6d77"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}