{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/Sort#sort(File,File).mjava","commits":[{"id":"847d1294c8ff2f0172af20892ef98a1c6a952e09","date":1359503775,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/Sort#sort(File,File).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort#sort(File,File).mjava","sourceNew":"  /** \n   * Sort input to output, explicit hint for the buffer size. The amount of allocated\n   * memory may deviate from the hint (may be smaller or larger).  \n   */\n  public SortInfo sort(File input, File output) throws IOException {\n    sortInfo = new SortInfo();\n    sortInfo.totalTime = System.currentTimeMillis();\n\n    output.delete();\n\n    ArrayList<File> merges = new ArrayList<File>();\n    boolean success2 = false;\n    try {\n      ByteSequencesReader is = new ByteSequencesReader(input);\n      boolean success = false;\n      try {\n        int lines = 0;\n        while ((lines = readPartition(is)) > 0) {\n          merges.add(sortPartition(lines));\n          sortInfo.tempMergeFiles++;\n          sortInfo.lines += lines;\n\n          // Handle intermediate merges.\n          if (merges.size() == maxTempFiles) {\n            File intermediate = File.createTempFile(\"sort\", \"intermediate\", tempDirectory);\n            try {\n              mergePartitions(merges, intermediate);\n            } finally {\n              for (File file : merges) {\n                file.delete();\n              }\n              merges.clear();\n              merges.add(intermediate);\n            }\n            sortInfo.tempMergeFiles++;\n          }\n        }\n        success = true;\n      } finally {\n        if (success)\n          IOUtils.close(is);\n        else\n          IOUtils.closeWhileHandlingException(is);\n      }\n\n      // One partition, try to rename or copy if unsuccessful.\n      if (merges.size() == 1) {     \n        File single = merges.get(0);\n        // If simple rename doesn't work this means the output is\n        // on a different volume or something. Copy the input then.\n        if (!single.renameTo(output)) {\n          copy(single, output);\n        }\n      } else { \n        // otherwise merge the partitions with a priority queue.\n        mergePartitions(merges, output);\n      }\n      success2 = true;\n    } finally {\n      for (File file : merges) {\n        file.delete();\n      }\n      if (!success2) {\n        output.delete();\n      }\n    }\n\n    sortInfo.totalTime = (System.currentTimeMillis() - sortInfo.totalTime); \n    return sortInfo;\n  }\n\n","sourceOld":"  /** \n   * Sort input to output, explicit hint for the buffer size. The amount of allocated\n   * memory may deviate from the hint (may be smaller or larger).  \n   */\n  public SortInfo sort(File input, File output) throws IOException {\n    sortInfo = new SortInfo();\n    sortInfo.totalTime = System.currentTimeMillis();\n\n    output.delete();\n\n    ArrayList<File> merges = new ArrayList<File>();\n    boolean success2 = false;\n    try {\n      ByteSequencesReader is = new ByteSequencesReader(input);\n      boolean success = false;\n      try {\n        int lines = 0;\n        while ((lines = readPartition(is)) > 0) {\n          merges.add(sortPartition(lines));\n          sortInfo.tempMergeFiles++;\n          sortInfo.lines += lines;\n\n          // Handle intermediate merges.\n          if (merges.size() == maxTempFiles) {\n            File intermediate = File.createTempFile(\"sort\", \"intermediate\", tempDirectory);\n            try {\n              mergePartitions(merges, intermediate);\n            } finally {\n              for (File file : merges) {\n                file.delete();\n              }\n              merges.clear();\n              merges.add(intermediate);\n            }\n            sortInfo.tempMergeFiles++;\n          }\n        }\n        success = true;\n      } finally {\n        if (success)\n          IOUtils.close(is);\n        else\n          IOUtils.closeWhileHandlingException(is);\n      }\n\n      // One partition, try to rename or copy if unsuccessful.\n      if (merges.size() == 1) {     \n        File single = merges.get(0);\n        // If simple rename doesn't work this means the output is\n        // on a different volume or something. Copy the input then.\n        if (!single.renameTo(output)) {\n          copy(single, output);\n        }\n      } else { \n        // otherwise merge the partitions with a priority queue.\n        mergePartitions(merges, output);\n      }\n      success2 = true;\n    } finally {\n      for (File file : merges) {\n        file.delete();\n      }\n      if (!success2) {\n        output.delete();\n      }\n    }\n\n    sortInfo.totalTime = (System.currentTimeMillis() - sortInfo.totalTime); \n    return sortInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/Sort#sort(File,File).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort#sort(File,File).mjava","sourceNew":"  /** \n   * Sort input to output, explicit hint for the buffer size. The amount of allocated\n   * memory may deviate from the hint (may be smaller or larger).  \n   */\n  public SortInfo sort(File input, File output) throws IOException {\n    sortInfo = new SortInfo();\n    sortInfo.totalTime = System.currentTimeMillis();\n\n    output.delete();\n\n    ArrayList<File> merges = new ArrayList<File>();\n    boolean success2 = false;\n    try {\n      ByteSequencesReader is = new ByteSequencesReader(input);\n      boolean success = false;\n      try {\n        int lines = 0;\n        while ((lines = readPartition(is)) > 0) {\n          merges.add(sortPartition(lines));\n          sortInfo.tempMergeFiles++;\n          sortInfo.lines += lines;\n\n          // Handle intermediate merges.\n          if (merges.size() == maxTempFiles) {\n            File intermediate = File.createTempFile(\"sort\", \"intermediate\", tempDirectory);\n            try {\n              mergePartitions(merges, intermediate);\n            } finally {\n              for (File file : merges) {\n                file.delete();\n              }\n              merges.clear();\n              merges.add(intermediate);\n            }\n            sortInfo.tempMergeFiles++;\n          }\n        }\n        success = true;\n      } finally {\n        if (success)\n          IOUtils.close(is);\n        else\n          IOUtils.closeWhileHandlingException(is);\n      }\n\n      // One partition, try to rename or copy if unsuccessful.\n      if (merges.size() == 1) {     \n        File single = merges.get(0);\n        // If simple rename doesn't work this means the output is\n        // on a different volume or something. Copy the input then.\n        if (!single.renameTo(output)) {\n          copy(single, output);\n        }\n      } else { \n        // otherwise merge the partitions with a priority queue.\n        mergePartitions(merges, output);\n      }\n      success2 = true;\n    } finally {\n      for (File file : merges) {\n        file.delete();\n      }\n      if (!success2) {\n        output.delete();\n      }\n    }\n\n    sortInfo.totalTime = (System.currentTimeMillis() - sortInfo.totalTime); \n    return sortInfo;\n  }\n\n","sourceOld":"  /** \n   * Sort input to output, explicit hint for the buffer size. The amount of allocated\n   * memory may deviate from the hint (may be smaller or larger).  \n   */\n  public SortInfo sort(File input, File output) throws IOException {\n    sortInfo = new SortInfo();\n    sortInfo.totalTime = System.currentTimeMillis();\n\n    output.delete();\n\n    ArrayList<File> merges = new ArrayList<File>();\n    boolean success2 = false;\n    try {\n      ByteSequencesReader is = new ByteSequencesReader(input);\n      boolean success = false;\n      try {\n        int lines = 0;\n        while ((lines = readPartition(is)) > 0) {\n          merges.add(sortPartition(lines));\n          sortInfo.tempMergeFiles++;\n          sortInfo.lines += lines;\n\n          // Handle intermediate merges.\n          if (merges.size() == maxTempFiles) {\n            File intermediate = File.createTempFile(\"sort\", \"intermediate\", tempDirectory);\n            try {\n              mergePartitions(merges, intermediate);\n            } finally {\n              for (File file : merges) {\n                file.delete();\n              }\n              merges.clear();\n              merges.add(intermediate);\n            }\n            sortInfo.tempMergeFiles++;\n          }\n        }\n        success = true;\n      } finally {\n        if (success)\n          IOUtils.close(is);\n        else\n          IOUtils.closeWhileHandlingException(is);\n      }\n\n      // One partition, try to rename or copy if unsuccessful.\n      if (merges.size() == 1) {     \n        File single = merges.get(0);\n        // If simple rename doesn't work this means the output is\n        // on a different volume or something. Copy the input then.\n        if (!single.renameTo(output)) {\n          copy(single, output);\n        }\n      } else { \n        // otherwise merge the partitions with a priority queue.\n        mergePartitions(merges, output);\n      }\n      success2 = true;\n    } finally {\n      for (File file : merges) {\n        file.delete();\n      }\n      if (!success2) {\n        output.delete();\n      }\n    }\n\n    sortInfo.totalTime = (System.currentTimeMillis() - sortInfo.totalTime); \n    return sortInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36f5a8c57e16c0f801006a52f87c75378427852e","date":1393256707,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#sort(File,File).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/Sort#sort(File,File).mjava","sourceNew":"  /** \n   * Sort input to output, explicit hint for the buffer size. The amount of allocated\n   * memory may deviate from the hint (may be smaller or larger).  \n   */\n  public SortInfo sort(File input, File output) throws IOException {\n    sortInfo = new SortInfo();\n    sortInfo.totalTime = System.currentTimeMillis();\n\n    output.delete();\n\n    ArrayList<File> merges = new ArrayList<File>();\n    boolean success2 = false;\n    try {\n      ByteSequencesReader is = new ByteSequencesReader(input);\n      boolean success = false;\n      try {\n        int lines = 0;\n        while ((lines = readPartition(is)) > 0) {\n          merges.add(sortPartition(lines));\n          sortInfo.tempMergeFiles++;\n          sortInfo.lines += lines;\n\n          // Handle intermediate merges.\n          if (merges.size() == maxTempFiles) {\n            File intermediate = File.createTempFile(\"sort\", \"intermediate\", tempDirectory);\n            try {\n              mergePartitions(merges, intermediate);\n            } finally {\n              for (File file : merges) {\n                file.delete();\n              }\n              merges.clear();\n              merges.add(intermediate);\n            }\n            sortInfo.tempMergeFiles++;\n          }\n        }\n        success = true;\n      } finally {\n        if (success)\n          IOUtils.close(is);\n        else\n          IOUtils.closeWhileHandlingException(is);\n      }\n\n      // One partition, try to rename or copy if unsuccessful.\n      if (merges.size() == 1) {     \n        File single = merges.get(0);\n        // If simple rename doesn't work this means the output is\n        // on a different volume or something. Copy the input then.\n        if (!single.renameTo(output)) {\n          copy(single, output);\n        }\n      } else { \n        // otherwise merge the partitions with a priority queue.\n        mergePartitions(merges, output);\n      }\n      success2 = true;\n    } finally {\n      for (File file : merges) {\n        file.delete();\n      }\n      if (!success2) {\n        output.delete();\n      }\n    }\n\n    sortInfo.totalTime = (System.currentTimeMillis() - sortInfo.totalTime); \n    return sortInfo;\n  }\n\n","sourceOld":"  /** \n   * Sort input to output, explicit hint for the buffer size. The amount of allocated\n   * memory may deviate from the hint (may be smaller or larger).  \n   */\n  public SortInfo sort(File input, File output) throws IOException {\n    sortInfo = new SortInfo();\n    sortInfo.totalTime = System.currentTimeMillis();\n\n    output.delete();\n\n    ArrayList<File> merges = new ArrayList<File>();\n    boolean success2 = false;\n    try {\n      ByteSequencesReader is = new ByteSequencesReader(input);\n      boolean success = false;\n      try {\n        int lines = 0;\n        while ((lines = readPartition(is)) > 0) {\n          merges.add(sortPartition(lines));\n          sortInfo.tempMergeFiles++;\n          sortInfo.lines += lines;\n\n          // Handle intermediate merges.\n          if (merges.size() == maxTempFiles) {\n            File intermediate = File.createTempFile(\"sort\", \"intermediate\", tempDirectory);\n            try {\n              mergePartitions(merges, intermediate);\n            } finally {\n              for (File file : merges) {\n                file.delete();\n              }\n              merges.clear();\n              merges.add(intermediate);\n            }\n            sortInfo.tempMergeFiles++;\n          }\n        }\n        success = true;\n      } finally {\n        if (success)\n          IOUtils.close(is);\n        else\n          IOUtils.closeWhileHandlingException(is);\n      }\n\n      // One partition, try to rename or copy if unsuccessful.\n      if (merges.size() == 1) {     \n        File single = merges.get(0);\n        // If simple rename doesn't work this means the output is\n        // on a different volume or something. Copy the input then.\n        if (!single.renameTo(output)) {\n          copy(single, output);\n        }\n      } else { \n        // otherwise merge the partitions with a priority queue.\n        mergePartitions(merges, output);\n      }\n      success2 = true;\n    } finally {\n      for (File file : merges) {\n        file.delete();\n      }\n      if (!success2) {\n        output.delete();\n      }\n    }\n\n    sortInfo.totalTime = (System.currentTimeMillis() - sortInfo.totalTime); \n    return sortInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba791bce8103c79e38f957e9c5a53a75871bd918","date":1393539206,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#sort(File,File).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/Sort#sort(File,File).mjava","sourceNew":"  /** \n   * Sort input to output, explicit hint for the buffer size. The amount of allocated\n   * memory may deviate from the hint (may be smaller or larger).  \n   */\n  public SortInfo sort(File input, File output) throws IOException {\n    sortInfo = new SortInfo();\n    sortInfo.totalTime = System.currentTimeMillis();\n\n    output.delete();\n\n    ArrayList<File> merges = new ArrayList<File>();\n    boolean success2 = false;\n    try {\n      ByteSequencesReader is = new ByteSequencesReader(input);\n      boolean success = false;\n      try {\n        int lines = 0;\n        while ((lines = readPartition(is)) > 0) {\n          merges.add(sortPartition(lines));\n          sortInfo.tempMergeFiles++;\n          sortInfo.lines += lines;\n\n          // Handle intermediate merges.\n          if (merges.size() == maxTempFiles) {\n            File intermediate = File.createTempFile(\"sort\", \"intermediate\", tempDirectory);\n            try {\n              mergePartitions(merges, intermediate);\n            } finally {\n              for (File file : merges) {\n                file.delete();\n              }\n              merges.clear();\n              merges.add(intermediate);\n            }\n            sortInfo.tempMergeFiles++;\n          }\n        }\n        success = true;\n      } finally {\n        if (success)\n          IOUtils.close(is);\n        else\n          IOUtils.closeWhileHandlingException(is);\n      }\n\n      // One partition, try to rename or copy if unsuccessful.\n      if (merges.size() == 1) {     \n        File single = merges.get(0);\n        // If simple rename doesn't work this means the output is\n        // on a different volume or something. Copy the input then.\n        if (!single.renameTo(output)) {\n          copy(single, output);\n        }\n      } else { \n        // otherwise merge the partitions with a priority queue.\n        mergePartitions(merges, output);\n      }\n      success2 = true;\n    } finally {\n      for (File file : merges) {\n        file.delete();\n      }\n      if (!success2) {\n        output.delete();\n      }\n    }\n\n    sortInfo.totalTime = (System.currentTimeMillis() - sortInfo.totalTime); \n    return sortInfo;\n  }\n\n","sourceOld":"  /** \n   * Sort input to output, explicit hint for the buffer size. The amount of allocated\n   * memory may deviate from the hint (may be smaller or larger).  \n   */\n  public SortInfo sort(File input, File output) throws IOException {\n    sortInfo = new SortInfo();\n    sortInfo.totalTime = System.currentTimeMillis();\n\n    output.delete();\n\n    ArrayList<File> merges = new ArrayList<File>();\n    boolean success2 = false;\n    try {\n      ByteSequencesReader is = new ByteSequencesReader(input);\n      boolean success = false;\n      try {\n        int lines = 0;\n        while ((lines = readPartition(is)) > 0) {\n          merges.add(sortPartition(lines));\n          sortInfo.tempMergeFiles++;\n          sortInfo.lines += lines;\n\n          // Handle intermediate merges.\n          if (merges.size() == maxTempFiles) {\n            File intermediate = File.createTempFile(\"sort\", \"intermediate\", tempDirectory);\n            try {\n              mergePartitions(merges, intermediate);\n            } finally {\n              for (File file : merges) {\n                file.delete();\n              }\n              merges.clear();\n              merges.add(intermediate);\n            }\n            sortInfo.tempMergeFiles++;\n          }\n        }\n        success = true;\n      } finally {\n        if (success)\n          IOUtils.close(is);\n        else\n          IOUtils.closeWhileHandlingException(is);\n      }\n\n      // One partition, try to rename or copy if unsuccessful.\n      if (merges.size() == 1) {     \n        File single = merges.get(0);\n        // If simple rename doesn't work this means the output is\n        // on a different volume or something. Copy the input then.\n        if (!single.renameTo(output)) {\n          copy(single, output);\n        }\n      } else { \n        // otherwise merge the partitions with a priority queue.\n        mergePartitions(merges, output);\n      }\n      success2 = true;\n    } finally {\n      for (File file : merges) {\n        file.delete();\n      }\n      if (!success2) {\n        output.delete();\n      }\n    }\n\n    sortInfo.totalTime = (System.currentTimeMillis() - sortInfo.totalTime); \n    return sortInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","847d1294c8ff2f0172af20892ef98a1c6a952e09"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["d4d69c535930b5cce125cff868d40f6373dc27d4","36f5a8c57e16c0f801006a52f87c75378427852e"],"36f5a8c57e16c0f801006a52f87c75378427852e":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"847d1294c8ff2f0172af20892ef98a1c6a952e09":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba791bce8103c79e38f957e9c5a53a75871bd918"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["ba791bce8103c79e38f957e9c5a53a75871bd918","36f5a8c57e16c0f801006a52f87c75378427852e"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"36f5a8c57e16c0f801006a52f87c75378427852e":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","847d1294c8ff2f0172af20892ef98a1c6a952e09"],"847d1294c8ff2f0172af20892ef98a1c6a952e09":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}