{"path":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.BlockDocsAndPositionsEnum#refillPositions().mjava","commits":[{"id":"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","date":1343686506,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.BlockDocsAndPositionsEnum#refillPositions().mjava","pathOld":"/dev/null","sourceNew":"    private void refillPositions() throws IOException {\n      if (DEBUG) {\n        System.out.println(\"      refillPositions\");\n      }\n      if (posIn.getFilePointer() == lastPosBlockFP) {\n        if (DEBUG) {\n          System.out.println(\"        vInt pos block @ fp=\" + posIn.getFilePointer() + \" hasPayloads=\" + indexHasPayloads + \" hasOffsets=\" + indexHasOffsets);\n        }\n        final int count = posIn.readVInt();\n        int payloadLength = 0;\n        for(int i=0;i<count;i++) {\n          int code = posIn.readVInt();\n          if (indexHasPayloads) {\n            if ((code & 1) != 0) {\n              payloadLength = posIn.readVInt();\n            }\n            posDeltaBuffer[i] = code >>> 1;\n            if (payloadLength != 0) {\n              posIn.seek(posIn.getFilePointer() + payloadLength);\n            }\n          } else {\n            posDeltaBuffer[i] = code;\n          }\n\n          if (indexHasOffsets) {\n            posIn.readVInt();\n            posIn.readVInt();\n          }\n        }\n      } else {\n        if (DEBUG) {\n          System.out.println(\"        bulk pos block @ fp=\" + posIn.getFilePointer());\n        }\n        readBlock(posIn, encoded, encodedBuffer, posDeltaLBuffer);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e3359210474c12c0b79e6400450313e3d7ef2bb","date":1344347790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.BlockDocsAndPositionsEnum#refillPositions().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.BlockDocsAndPositionsEnum#refillPositions().mjava","sourceNew":"    private void refillPositions() throws IOException {\n      if (DEBUG) {\n        System.out.println(\"      refillPositions\");\n      }\n      if (posIn.getFilePointer() == lastPosBlockFP) {\n        if (DEBUG) {\n          System.out.println(\"        vInt pos block @ fp=\" + posIn.getFilePointer() + \" hasPayloads=\" + indexHasPayloads + \" hasOffsets=\" + indexHasOffsets);\n        }\n        final int count = posIn.readVInt();\n        int payloadLength = 0;\n        for(int i=0;i<count;i++) {\n          int code = posIn.readVInt();\n          if (indexHasPayloads) {\n            if ((code & 1) != 0) {\n              payloadLength = posIn.readVInt();\n            }\n            posDeltaBuffer[i] = code >>> 1;\n            if (payloadLength != 0) {\n              posIn.seek(posIn.getFilePointer() + payloadLength);\n            }\n          } else {\n            posDeltaBuffer[i] = code;\n          }\n          if (indexHasOffsets) {\n            posIn.readVInt();\n            posIn.readVInt();\n          }\n        }\n      } else {\n        if (DEBUG) {\n          System.out.println(\"        bulk pos block @ fp=\" + posIn.getFilePointer());\n        }\n        ForUtil.readBlock(posIn, encoded, posDeltaBuffer);\n      }\n    }\n\n","sourceOld":"    private void refillPositions() throws IOException {\n      if (DEBUG) {\n        System.out.println(\"      refillPositions\");\n      }\n      if (posIn.getFilePointer() == lastPosBlockFP) {\n        if (DEBUG) {\n          System.out.println(\"        vInt pos block @ fp=\" + posIn.getFilePointer() + \" hasPayloads=\" + indexHasPayloads + \" hasOffsets=\" + indexHasOffsets);\n        }\n        final int count = posIn.readVInt();\n        int payloadLength = 0;\n        for(int i=0;i<count;i++) {\n          int code = posIn.readVInt();\n          if (indexHasPayloads) {\n            if ((code & 1) != 0) {\n              payloadLength = posIn.readVInt();\n            }\n            posDeltaBuffer[i] = code >>> 1;\n            if (payloadLength != 0) {\n              posIn.seek(posIn.getFilePointer() + payloadLength);\n            }\n          } else {\n            posDeltaBuffer[i] = code;\n          }\n\n          if (indexHasOffsets) {\n            posIn.readVInt();\n            posIn.readVInt();\n          }\n        }\n      } else {\n        if (DEBUG) {\n          System.out.println(\"        bulk pos block @ fp=\" + posIn.getFilePointer());\n        }\n        readBlock(posIn, encoded, encodedBuffer, posDeltaLBuffer);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf88b0fdab72e7a3389fdd9a68ae252142c41511","date":1344435322,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.BlockDocsAndPositionsEnum#refillPositions().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.BlockDocsAndPositionsEnum#refillPositions().mjava","sourceNew":"    private void refillPositions() throws IOException {\n      if (DEBUG) {\n        System.out.println(\"      refillPositions\");\n      }\n      if (posIn.getFilePointer() == lastPosBlockFP) {\n        if (DEBUG) {\n          System.out.println(\"        vInt pos block @ fp=\" + posIn.getFilePointer() + \" hasPayloads=\" + indexHasPayloads + \" hasOffsets=\" + indexHasOffsets);\n        }\n        final int count = posIn.readVInt();\n        int payloadLength = 0;\n        for(int i=0;i<count;i++) {\n          int code = posIn.readVInt();\n          if (indexHasPayloads) {\n            if ((code & 1) != 0) {\n              payloadLength = posIn.readVInt();\n            }\n            posDeltaBuffer[i] = code >>> 1;\n            if (payloadLength != 0) {\n              posIn.seek(posIn.getFilePointer() + payloadLength);\n            }\n          } else {\n            posDeltaBuffer[i] = code;\n          }\n          if (indexHasOffsets) {\n            posIn.readVInt();\n            posIn.readVInt();\n          }\n        }\n      } else {\n        if (DEBUG) {\n          System.out.println(\"        bulk pos block @ fp=\" + posIn.getFilePointer());\n        }\n        forUtil.readBlock(posIn, encoded, posDeltaBuffer);\n      }\n    }\n\n","sourceOld":"    private void refillPositions() throws IOException {\n      if (DEBUG) {\n        System.out.println(\"      refillPositions\");\n      }\n      if (posIn.getFilePointer() == lastPosBlockFP) {\n        if (DEBUG) {\n          System.out.println(\"        vInt pos block @ fp=\" + posIn.getFilePointer() + \" hasPayloads=\" + indexHasPayloads + \" hasOffsets=\" + indexHasOffsets);\n        }\n        final int count = posIn.readVInt();\n        int payloadLength = 0;\n        for(int i=0;i<count;i++) {\n          int code = posIn.readVInt();\n          if (indexHasPayloads) {\n            if ((code & 1) != 0) {\n              payloadLength = posIn.readVInt();\n            }\n            posDeltaBuffer[i] = code >>> 1;\n            if (payloadLength != 0) {\n              posIn.seek(posIn.getFilePointer() + payloadLength);\n            }\n          } else {\n            posDeltaBuffer[i] = code;\n          }\n          if (indexHasOffsets) {\n            posIn.readVInt();\n            posIn.readVInt();\n          }\n        }\n      } else {\n        if (DEBUG) {\n          System.out.println(\"        bulk pos block @ fp=\" + posIn.getFilePointer());\n        }\n        ForUtil.readBlock(posIn, encoded, posDeltaBuffer);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6b41208259e8566cba0ecac7da6a331ea9732dd","date":1344551376,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.BlockDocsAndPositionsEnum#refillPositions().mjava","sourceNew":null,"sourceOld":"    private void refillPositions() throws IOException {\n      if (DEBUG) {\n        System.out.println(\"      refillPositions\");\n      }\n      if (posIn.getFilePointer() == lastPosBlockFP) {\n        if (DEBUG) {\n          System.out.println(\"        vInt pos block @ fp=\" + posIn.getFilePointer() + \" hasPayloads=\" + indexHasPayloads + \" hasOffsets=\" + indexHasOffsets);\n        }\n        final int count = posIn.readVInt();\n        int payloadLength = 0;\n        for(int i=0;i<count;i++) {\n          int code = posIn.readVInt();\n          if (indexHasPayloads) {\n            if ((code & 1) != 0) {\n              payloadLength = posIn.readVInt();\n            }\n            posDeltaBuffer[i] = code >>> 1;\n            if (payloadLength != 0) {\n              posIn.seek(posIn.getFilePointer() + payloadLength);\n            }\n          } else {\n            posDeltaBuffer[i] = code;\n          }\n          if (indexHasOffsets) {\n            posIn.readVInt();\n            posIn.readVInt();\n          }\n        }\n      } else {\n        if (DEBUG) {\n          System.out.println(\"        bulk pos block @ fp=\" + posIn.getFilePointer());\n        }\n        forUtil.readBlock(posIn, encoded, posDeltaBuffer);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df"],"cf88b0fdab72e7a3389fdd9a68ae252142c41511":["0e3359210474c12c0b79e6400450313e3d7ef2bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e6b41208259e8566cba0ecac7da6a331ea9732dd":["cf88b0fdab72e7a3389fdd9a68ae252142c41511"]},"commit2Childs":{"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":["0e3359210474c12c0b79e6400450313e3d7ef2bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["cf88b0fdab72e7a3389fdd9a68ae252142c41511"],"cf88b0fdab72e7a3389fdd9a68ae252142c41511":["e6b41208259e8566cba0ecac7da6a331ea9732dd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e6b41208259e8566cba0ecac7da6a331ea9732dd":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","e6b41208259e8566cba0ecac7da6a331ea9732dd"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}