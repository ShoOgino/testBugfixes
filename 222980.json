{"path":"lucene/src/java/org/apache/lucene/analysis/CharTokenizer#incrementToken().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/analysis/CharTokenizer#incrementToken().mjava","pathOld":"src/java/org/apache/lucene/analysis/CharTokenizer#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    if(useOldAPI) // TODO remove this in LUCENE 4.0\n      return incrementTokenOld();\n    int length = 0;\n    int start = bufferIndex;\n    char[] buffer = termAtt.termBuffer();\n    while (true) {\n      if (bufferIndex >= dataLen) {\n        offset += dataLen;\n        if(!charUtils.fill(ioBuffer, input)) { // read supplementary char aware with CharacterUtils\n          dataLen = 0; // so next offset += dataLen won't decrement offset\n          if (length > 0)\n            break;\n          else\n            return false;\n        }\n        dataLen = ioBuffer.getLength();\n        bufferIndex = 0;\n      }\n      // use CharacterUtils here to support < 3.1 UTF-16 code unit behavior if the char based methods are gone\n      final int c = charUtils.codePointAt(ioBuffer.getBuffer(), bufferIndex);\n      bufferIndex += Character.charCount(c);\n\n      if (isTokenChar(c)) {               // if it's a token char\n        if (length == 0)                 // start of token\n          start = offset + bufferIndex - 1;\n        else if (length >= buffer.length-1) // check if a supplementary could run out of bounds\n          buffer = termAtt.resizeTermBuffer(2+length); // make sure a supplementary fits in the buffer\n        length += Character.toChars(normalize(c), buffer, length); // buffer it, normalized\n        if (length >= MAX_WORD_LEN) // buffer overflow! make sure to check for >= surrogate pair could break == test\n          break;\n      } else if (length > 0)             // at non-Letter w/ chars\n        break;                           // return 'em\n    }\n\n    termAtt.setTermLength(length);\n    offsetAtt.setOffset(correctOffset(start), correctOffset(start+length));\n    return true;\n    \n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    if(useOldAPI) // TODO remove this in LUCENE 4.0\n      return incrementTokenOld();\n    int length = 0;\n    int start = bufferIndex;\n    char[] buffer = termAtt.termBuffer();\n    while (true) {\n      if (bufferIndex >= dataLen) {\n        offset += dataLen;\n        if(!charUtils.fill(ioBuffer, input)) { // read supplementary char aware with CharacterUtils\n          dataLen = 0; // so next offset += dataLen won't decrement offset\n          if (length > 0)\n            break;\n          else\n            return false;\n        }\n        dataLen = ioBuffer.getLength();\n        bufferIndex = 0;\n      }\n      // use CharacterUtils here to support < 3.1 UTF-16 code unit behavior if the char based methods are gone\n      final int c = charUtils.codePointAt(ioBuffer.getBuffer(), bufferIndex);\n      bufferIndex += Character.charCount(c);\n\n      if (isTokenChar(c)) {               // if it's a token char\n        if (length == 0)                 // start of token\n          start = offset + bufferIndex - 1;\n        else if (length >= buffer.length-1) // check if a supplementary could run out of bounds\n          buffer = termAtt.resizeTermBuffer(2+length); // make sure a supplementary fits in the buffer\n        length += Character.toChars(normalize(c), buffer, length); // buffer it, normalized\n        if (length >= MAX_WORD_LEN) // buffer overflow! make sure to check for >= surrogate pair could break == test\n          break;\n      } else if (length > 0)             // at non-Letter w/ chars\n        break;                           // return 'em\n    }\n\n    termAtt.setTermLength(length);\n    offsetAtt.setOffset(correctOffset(start), correctOffset(start+length));\n    return true;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a775c547c3519b47efd41c09cb47100ddb9604c7","date":1270914087,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/analysis/CharTokenizer#incrementToken().mjava","pathOld":"lucene/src/java/org/apache/lucene/analysis/CharTokenizer#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    if(useOldAPI) // TODO remove this in LUCENE 4.0\n      return incrementTokenOld();\n    int length = 0;\n    int start = bufferIndex;\n    char[] buffer = termAtt.buffer();\n    while (true) {\n      if (bufferIndex >= dataLen) {\n        offset += dataLen;\n        if(!charUtils.fill(ioBuffer, input)) { // read supplementary char aware with CharacterUtils\n          dataLen = 0; // so next offset += dataLen won't decrement offset\n          if (length > 0)\n            break;\n          else\n            return false;\n        }\n        dataLen = ioBuffer.getLength();\n        bufferIndex = 0;\n      }\n      // use CharacterUtils here to support < 3.1 UTF-16 code unit behavior if the char based methods are gone\n      final int c = charUtils.codePointAt(ioBuffer.getBuffer(), bufferIndex);\n      bufferIndex += Character.charCount(c);\n\n      if (isTokenChar(c)) {               // if it's a token char\n        if (length == 0)                 // start of token\n          start = offset + bufferIndex - 1;\n        else if (length >= buffer.length-1) // check if a supplementary could run out of bounds\n          buffer = termAtt.resizeBuffer(2+length); // make sure a supplementary fits in the buffer\n        length += Character.toChars(normalize(c), buffer, length); // buffer it, normalized\n        if (length >= MAX_WORD_LEN) // buffer overflow! make sure to check for >= surrogate pair could break == test\n          break;\n      } else if (length > 0)             // at non-Letter w/ chars\n        break;                           // return 'em\n    }\n\n    termAtt.setLength(length);\n    offsetAtt.setOffset(correctOffset(start), correctOffset(start+length));\n    return true;\n    \n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    if(useOldAPI) // TODO remove this in LUCENE 4.0\n      return incrementTokenOld();\n    int length = 0;\n    int start = bufferIndex;\n    char[] buffer = termAtt.termBuffer();\n    while (true) {\n      if (bufferIndex >= dataLen) {\n        offset += dataLen;\n        if(!charUtils.fill(ioBuffer, input)) { // read supplementary char aware with CharacterUtils\n          dataLen = 0; // so next offset += dataLen won't decrement offset\n          if (length > 0)\n            break;\n          else\n            return false;\n        }\n        dataLen = ioBuffer.getLength();\n        bufferIndex = 0;\n      }\n      // use CharacterUtils here to support < 3.1 UTF-16 code unit behavior if the char based methods are gone\n      final int c = charUtils.codePointAt(ioBuffer.getBuffer(), bufferIndex);\n      bufferIndex += Character.charCount(c);\n\n      if (isTokenChar(c)) {               // if it's a token char\n        if (length == 0)                 // start of token\n          start = offset + bufferIndex - 1;\n        else if (length >= buffer.length-1) // check if a supplementary could run out of bounds\n          buffer = termAtt.resizeTermBuffer(2+length); // make sure a supplementary fits in the buffer\n        length += Character.toChars(normalize(c), buffer, length); // buffer it, normalized\n        if (length >= MAX_WORD_LEN) // buffer overflow! make sure to check for >= surrogate pair could break == test\n          break;\n      } else if (length > 0)             // at non-Letter w/ chars\n        break;                           // return 'em\n    }\n\n    termAtt.setTermLength(length);\n    offsetAtt.setOffset(correctOffset(start), correctOffset(start+length));\n    return true;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ea9d1f915bc156f5ebbc6a9cdcf631c173a69a91","date":1275174858,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/analysis/CharTokenizer#incrementToken().mjava","pathOld":"lucene/src/java/org/apache/lucene/analysis/CharTokenizer#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    if(useOldAPI) // TODO remove this in LUCENE 4.0\n      return incrementTokenOld();\n    int length = 0;\n    int start = -1; // this variable is always initialized\n    char[] buffer = termAtt.buffer();\n    while (true) {\n      if (bufferIndex >= dataLen) {\n        offset += dataLen;\n        if(!charUtils.fill(ioBuffer, input)) { // read supplementary char aware with CharacterUtils\n          dataLen = 0; // so next offset += dataLen won't decrement offset\n          if (length > 0) {\n            break;\n          } else {\n            finalOffset = correctOffset(offset);\n            return false;\n          }\n        }\n        dataLen = ioBuffer.getLength();\n        bufferIndex = 0;\n      }\n      // use CharacterUtils here to support < 3.1 UTF-16 code unit behavior if the char based methods are gone\n      final int c = charUtils.codePointAt(ioBuffer.getBuffer(), bufferIndex);\n      bufferIndex += Character.charCount(c);\n\n      if (isTokenChar(c)) {               // if it's a token char\n        if (length == 0) {                // start of token\n          assert start == -1;\n          start = offset + bufferIndex - 1;\n        } else if (length >= buffer.length-1) { // check if a supplementary could run out of bounds\n          buffer = termAtt.resizeBuffer(2+length); // make sure a supplementary fits in the buffer\n        }\n        length += Character.toChars(normalize(c), buffer, length); // buffer it, normalized\n        if (length >= MAX_WORD_LEN) // buffer overflow! make sure to check for >= surrogate pair could break == test\n          break;\n      } else if (length > 0)             // at non-Letter w/ chars\n        break;                           // return 'em\n    }\n\n    termAtt.setLength(length);\n    assert start != -1;\n    offsetAtt.setOffset(correctOffset(start), finalOffset = correctOffset(start+length));\n    return true;\n    \n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    if(useOldAPI) // TODO remove this in LUCENE 4.0\n      return incrementTokenOld();\n    int length = 0;\n    int start = bufferIndex;\n    char[] buffer = termAtt.buffer();\n    while (true) {\n      if (bufferIndex >= dataLen) {\n        offset += dataLen;\n        if(!charUtils.fill(ioBuffer, input)) { // read supplementary char aware with CharacterUtils\n          dataLen = 0; // so next offset += dataLen won't decrement offset\n          if (length > 0)\n            break;\n          else\n            return false;\n        }\n        dataLen = ioBuffer.getLength();\n        bufferIndex = 0;\n      }\n      // use CharacterUtils here to support < 3.1 UTF-16 code unit behavior if the char based methods are gone\n      final int c = charUtils.codePointAt(ioBuffer.getBuffer(), bufferIndex);\n      bufferIndex += Character.charCount(c);\n\n      if (isTokenChar(c)) {               // if it's a token char\n        if (length == 0)                 // start of token\n          start = offset + bufferIndex - 1;\n        else if (length >= buffer.length-1) // check if a supplementary could run out of bounds\n          buffer = termAtt.resizeBuffer(2+length); // make sure a supplementary fits in the buffer\n        length += Character.toChars(normalize(c), buffer, length); // buffer it, normalized\n        if (length >= MAX_WORD_LEN) // buffer overflow! make sure to check for >= surrogate pair could break == test\n          break;\n      } else if (length > 0)             // at non-Letter w/ chars\n        break;                           // return 'em\n    }\n\n    termAtt.setLength(length);\n    offsetAtt.setOffset(correctOffset(start), correctOffset(start+length));\n    return true;\n    \n  }\n\n","bugFix":null,"bugIntro":["0c17d12803da6cadc96b3cdf15b0b940eddb28de","0c17d12803da6cadc96b3cdf15b0b940eddb28de","0c17d12803da6cadc96b3cdf15b0b940eddb28de"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/analysis/CharTokenizer#incrementToken().mjava","pathOld":"lucene/src/java/org/apache/lucene/analysis/CharTokenizer#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    int length = 0;\n    int start = -1; // this variable is always initialized\n    char[] buffer = termAtt.buffer();\n    while (true) {\n      if (bufferIndex >= dataLen) {\n        offset += dataLen;\n        if(!charUtils.fill(ioBuffer, input)) { // read supplementary char aware with CharacterUtils\n          dataLen = 0; // so next offset += dataLen won't decrement offset\n          if (length > 0) {\n            break;\n          } else {\n            finalOffset = correctOffset(offset);\n            return false;\n          }\n        }\n        dataLen = ioBuffer.getLength();\n        bufferIndex = 0;\n      }\n      // use CharacterUtils here to support < 3.1 UTF-16 code unit behavior if the char based methods are gone\n      final int c = charUtils.codePointAt(ioBuffer.getBuffer(), bufferIndex);\n      bufferIndex += Character.charCount(c);\n\n      if (isTokenChar(c)) {               // if it's a token char\n        if (length == 0) {                // start of token\n          assert start == -1;\n          start = offset + bufferIndex - 1;\n        } else if (length >= buffer.length-1) { // check if a supplementary could run out of bounds\n          buffer = termAtt.resizeBuffer(2+length); // make sure a supplementary fits in the buffer\n        }\n        length += Character.toChars(normalize(c), buffer, length); // buffer it, normalized\n        if (length >= MAX_WORD_LEN) // buffer overflow! make sure to check for >= surrogate pair could break == test\n          break;\n      } else if (length > 0)             // at non-Letter w/ chars\n        break;                           // return 'em\n    }\n\n    termAtt.setLength(length);\n    assert start != -1;\n    offsetAtt.setOffset(correctOffset(start), finalOffset = correctOffset(start+length));\n    return true;\n    \n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    if(useOldAPI) // TODO remove this in LUCENE 4.0\n      return incrementTokenOld();\n    int length = 0;\n    int start = -1; // this variable is always initialized\n    char[] buffer = termAtt.buffer();\n    while (true) {\n      if (bufferIndex >= dataLen) {\n        offset += dataLen;\n        if(!charUtils.fill(ioBuffer, input)) { // read supplementary char aware with CharacterUtils\n          dataLen = 0; // so next offset += dataLen won't decrement offset\n          if (length > 0) {\n            break;\n          } else {\n            finalOffset = correctOffset(offset);\n            return false;\n          }\n        }\n        dataLen = ioBuffer.getLength();\n        bufferIndex = 0;\n      }\n      // use CharacterUtils here to support < 3.1 UTF-16 code unit behavior if the char based methods are gone\n      final int c = charUtils.codePointAt(ioBuffer.getBuffer(), bufferIndex);\n      bufferIndex += Character.charCount(c);\n\n      if (isTokenChar(c)) {               // if it's a token char\n        if (length == 0) {                // start of token\n          assert start == -1;\n          start = offset + bufferIndex - 1;\n        } else if (length >= buffer.length-1) { // check if a supplementary could run out of bounds\n          buffer = termAtt.resizeBuffer(2+length); // make sure a supplementary fits in the buffer\n        }\n        length += Character.toChars(normalize(c), buffer, length); // buffer it, normalized\n        if (length >= MAX_WORD_LEN) // buffer overflow! make sure to check for >= surrogate pair could break == test\n          break;\n      } else if (length > 0)             // at non-Letter w/ chars\n        break;                           // return 'em\n    }\n\n    termAtt.setLength(length);\n    assert start != -1;\n    offsetAtt.setOffset(correctOffset(start), finalOffset = correctOffset(start+length));\n    return true;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/analysis/CharTokenizer#incrementToken().mjava","pathOld":"lucene/src/java/org/apache/lucene/analysis/CharTokenizer#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    int length = 0;\n    int start = -1; // this variable is always initialized\n    char[] buffer = termAtt.buffer();\n    while (true) {\n      if (bufferIndex >= dataLen) {\n        offset += dataLen;\n        if(!charUtils.fill(ioBuffer, input)) { // read supplementary char aware with CharacterUtils\n          dataLen = 0; // so next offset += dataLen won't decrement offset\n          if (length > 0) {\n            break;\n          } else {\n            finalOffset = correctOffset(offset);\n            return false;\n          }\n        }\n        dataLen = ioBuffer.getLength();\n        bufferIndex = 0;\n      }\n      // use CharacterUtils here to support < 3.1 UTF-16 code unit behavior if the char based methods are gone\n      final int c = charUtils.codePointAt(ioBuffer.getBuffer(), bufferIndex);\n      bufferIndex += Character.charCount(c);\n\n      if (isTokenChar(c)) {               // if it's a token char\n        if (length == 0) {                // start of token\n          assert start == -1;\n          start = offset + bufferIndex - 1;\n        } else if (length >= buffer.length-1) { // check if a supplementary could run out of bounds\n          buffer = termAtt.resizeBuffer(2+length); // make sure a supplementary fits in the buffer\n        }\n        length += Character.toChars(normalize(c), buffer, length); // buffer it, normalized\n        if (length >= MAX_WORD_LEN) // buffer overflow! make sure to check for >= surrogate pair could break == test\n          break;\n      } else if (length > 0)             // at non-Letter w/ chars\n        break;                           // return 'em\n    }\n\n    termAtt.setLength(length);\n    assert start != -1;\n    offsetAtt.setOffset(correctOffset(start), finalOffset = correctOffset(start+length));\n    return true;\n    \n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    if(useOldAPI) // TODO remove this in LUCENE 4.0\n      return incrementTokenOld();\n    int length = 0;\n    int start = -1; // this variable is always initialized\n    char[] buffer = termAtt.buffer();\n    while (true) {\n      if (bufferIndex >= dataLen) {\n        offset += dataLen;\n        if(!charUtils.fill(ioBuffer, input)) { // read supplementary char aware with CharacterUtils\n          dataLen = 0; // so next offset += dataLen won't decrement offset\n          if (length > 0) {\n            break;\n          } else {\n            finalOffset = correctOffset(offset);\n            return false;\n          }\n        }\n        dataLen = ioBuffer.getLength();\n        bufferIndex = 0;\n      }\n      // use CharacterUtils here to support < 3.1 UTF-16 code unit behavior if the char based methods are gone\n      final int c = charUtils.codePointAt(ioBuffer.getBuffer(), bufferIndex);\n      bufferIndex += Character.charCount(c);\n\n      if (isTokenChar(c)) {               // if it's a token char\n        if (length == 0) {                // start of token\n          assert start == -1;\n          start = offset + bufferIndex - 1;\n        } else if (length >= buffer.length-1) { // check if a supplementary could run out of bounds\n          buffer = termAtt.resizeBuffer(2+length); // make sure a supplementary fits in the buffer\n        }\n        length += Character.toChars(normalize(c), buffer, length); // buffer it, normalized\n        if (length >= MAX_WORD_LEN) // buffer overflow! make sure to check for >= surrogate pair could break == test\n          break;\n      } else if (length > 0)             // at non-Letter w/ chars\n        break;                           // return 'em\n    }\n\n    termAtt.setLength(length);\n    assert start != -1;\n    offsetAtt.setOffset(correctOffset(start), finalOffset = correctOffset(start+length));\n    return true;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/analysis/CharTokenizer#incrementToken().mjava","pathOld":"lucene/src/java/org/apache/lucene/analysis/CharTokenizer#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    int length = 0;\n    int start = -1; // this variable is always initialized\n    char[] buffer = termAtt.buffer();\n    while (true) {\n      if (bufferIndex >= dataLen) {\n        offset += dataLen;\n        if(!charUtils.fill(ioBuffer, input)) { // read supplementary char aware with CharacterUtils\n          dataLen = 0; // so next offset += dataLen won't decrement offset\n          if (length > 0) {\n            break;\n          } else {\n            finalOffset = correctOffset(offset);\n            return false;\n          }\n        }\n        dataLen = ioBuffer.getLength();\n        bufferIndex = 0;\n      }\n      // use CharacterUtils here to support < 3.1 UTF-16 code unit behavior if the char based methods are gone\n      final int c = charUtils.codePointAt(ioBuffer.getBuffer(), bufferIndex);\n      bufferIndex += Character.charCount(c);\n\n      if (isTokenChar(c)) {               // if it's a token char\n        if (length == 0) {                // start of token\n          assert start == -1;\n          start = offset + bufferIndex - 1;\n        } else if (length >= buffer.length-1) { // check if a supplementary could run out of bounds\n          buffer = termAtt.resizeBuffer(2+length); // make sure a supplementary fits in the buffer\n        }\n        length += Character.toChars(normalize(c), buffer, length); // buffer it, normalized\n        if (length >= MAX_WORD_LEN) // buffer overflow! make sure to check for >= surrogate pair could break == test\n          break;\n      } else if (length > 0)             // at non-Letter w/ chars\n        break;                           // return 'em\n    }\n\n    termAtt.setLength(length);\n    assert start != -1;\n    offsetAtt.setOffset(correctOffset(start), finalOffset = correctOffset(start+length));\n    return true;\n    \n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    if(useOldAPI) // TODO remove this in LUCENE 4.0\n      return incrementTokenOld();\n    int length = 0;\n    int start = -1; // this variable is always initialized\n    char[] buffer = termAtt.buffer();\n    while (true) {\n      if (bufferIndex >= dataLen) {\n        offset += dataLen;\n        if(!charUtils.fill(ioBuffer, input)) { // read supplementary char aware with CharacterUtils\n          dataLen = 0; // so next offset += dataLen won't decrement offset\n          if (length > 0) {\n            break;\n          } else {\n            finalOffset = correctOffset(offset);\n            return false;\n          }\n        }\n        dataLen = ioBuffer.getLength();\n        bufferIndex = 0;\n      }\n      // use CharacterUtils here to support < 3.1 UTF-16 code unit behavior if the char based methods are gone\n      final int c = charUtils.codePointAt(ioBuffer.getBuffer(), bufferIndex);\n      bufferIndex += Character.charCount(c);\n\n      if (isTokenChar(c)) {               // if it's a token char\n        if (length == 0) {                // start of token\n          assert start == -1;\n          start = offset + bufferIndex - 1;\n        } else if (length >= buffer.length-1) { // check if a supplementary could run out of bounds\n          buffer = termAtt.resizeBuffer(2+length); // make sure a supplementary fits in the buffer\n        }\n        length += Character.toChars(normalize(c), buffer, length); // buffer it, normalized\n        if (length >= MAX_WORD_LEN) // buffer overflow! make sure to check for >= surrogate pair could break == test\n          break;\n      } else if (length > 0)             // at non-Letter w/ chars\n        break;                           // return 'em\n    }\n\n    termAtt.setLength(length);\n    assert start != -1;\n    offsetAtt.setOffset(correctOffset(start), finalOffset = correctOffset(start+length));\n    return true;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d6179f9c4237a7e5d423f4e4b439a94e967efc9","date":1304382587,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/CharTokenizer#incrementToken().mjava","pathOld":"lucene/src/java/org/apache/lucene/analysis/CharTokenizer#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    int length = 0;\n    int start = -1; // this variable is always initialized\n    char[] buffer = termAtt.buffer();\n    while (true) {\n      if (bufferIndex >= dataLen) {\n        offset += dataLen;\n        if(!charUtils.fill(ioBuffer, input)) { // read supplementary char aware with CharacterUtils\n          dataLen = 0; // so next offset += dataLen won't decrement offset\n          if (length > 0) {\n            break;\n          } else {\n            finalOffset = correctOffset(offset);\n            return false;\n          }\n        }\n        dataLen = ioBuffer.getLength();\n        bufferIndex = 0;\n      }\n      // use CharacterUtils here to support < 3.1 UTF-16 code unit behavior if the char based methods are gone\n      final int c = charUtils.codePointAt(ioBuffer.getBuffer(), bufferIndex);\n      bufferIndex += Character.charCount(c);\n\n      if (isTokenChar(c)) {               // if it's a token char\n        if (length == 0) {                // start of token\n          assert start == -1;\n          start = offset + bufferIndex - 1;\n        } else if (length >= buffer.length-1) { // check if a supplementary could run out of bounds\n          buffer = termAtt.resizeBuffer(2+length); // make sure a supplementary fits in the buffer\n        }\n        length += Character.toChars(normalize(c), buffer, length); // buffer it, normalized\n        if (length >= MAX_WORD_LEN) // buffer overflow! make sure to check for >= surrogate pair could break == test\n          break;\n      } else if (length > 0)             // at non-Letter w/ chars\n        break;                           // return 'em\n    }\n\n    termAtt.setLength(length);\n    assert start != -1;\n    offsetAtt.setOffset(correctOffset(start), finalOffset = correctOffset(start+length));\n    return true;\n    \n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    int length = 0;\n    int start = -1; // this variable is always initialized\n    char[] buffer = termAtt.buffer();\n    while (true) {\n      if (bufferIndex >= dataLen) {\n        offset += dataLen;\n        if(!charUtils.fill(ioBuffer, input)) { // read supplementary char aware with CharacterUtils\n          dataLen = 0; // so next offset += dataLen won't decrement offset\n          if (length > 0) {\n            break;\n          } else {\n            finalOffset = correctOffset(offset);\n            return false;\n          }\n        }\n        dataLen = ioBuffer.getLength();\n        bufferIndex = 0;\n      }\n      // use CharacterUtils here to support < 3.1 UTF-16 code unit behavior if the char based methods are gone\n      final int c = charUtils.codePointAt(ioBuffer.getBuffer(), bufferIndex);\n      bufferIndex += Character.charCount(c);\n\n      if (isTokenChar(c)) {               // if it's a token char\n        if (length == 0) {                // start of token\n          assert start == -1;\n          start = offset + bufferIndex - 1;\n        } else if (length >= buffer.length-1) { // check if a supplementary could run out of bounds\n          buffer = termAtt.resizeBuffer(2+length); // make sure a supplementary fits in the buffer\n        }\n        length += Character.toChars(normalize(c), buffer, length); // buffer it, normalized\n        if (length >= MAX_WORD_LEN) // buffer overflow! make sure to check for >= surrogate pair could break == test\n          break;\n      } else if (length > 0)             // at non-Letter w/ chars\n        break;                           // return 'em\n    }\n\n    termAtt.setLength(length);\n    assert start != -1;\n    offsetAtt.setOffset(correctOffset(start), finalOffset = correctOffset(start+length));\n    return true;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/CharTokenizer#incrementToken().mjava","pathOld":"lucene/src/java/org/apache/lucene/analysis/CharTokenizer#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    int length = 0;\n    int start = -1; // this variable is always initialized\n    char[] buffer = termAtt.buffer();\n    while (true) {\n      if (bufferIndex >= dataLen) {\n        offset += dataLen;\n        if(!charUtils.fill(ioBuffer, input)) { // read supplementary char aware with CharacterUtils\n          dataLen = 0; // so next offset += dataLen won't decrement offset\n          if (length > 0) {\n            break;\n          } else {\n            finalOffset = correctOffset(offset);\n            return false;\n          }\n        }\n        dataLen = ioBuffer.getLength();\n        bufferIndex = 0;\n      }\n      // use CharacterUtils here to support < 3.1 UTF-16 code unit behavior if the char based methods are gone\n      final int c = charUtils.codePointAt(ioBuffer.getBuffer(), bufferIndex);\n      bufferIndex += Character.charCount(c);\n\n      if (isTokenChar(c)) {               // if it's a token char\n        if (length == 0) {                // start of token\n          assert start == -1;\n          start = offset + bufferIndex - 1;\n        } else if (length >= buffer.length-1) { // check if a supplementary could run out of bounds\n          buffer = termAtt.resizeBuffer(2+length); // make sure a supplementary fits in the buffer\n        }\n        length += Character.toChars(normalize(c), buffer, length); // buffer it, normalized\n        if (length >= MAX_WORD_LEN) // buffer overflow! make sure to check for >= surrogate pair could break == test\n          break;\n      } else if (length > 0)             // at non-Letter w/ chars\n        break;                           // return 'em\n    }\n\n    termAtt.setLength(length);\n    assert start != -1;\n    offsetAtt.setOffset(correctOffset(start), finalOffset = correctOffset(start+length));\n    return true;\n    \n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    int length = 0;\n    int start = -1; // this variable is always initialized\n    char[] buffer = termAtt.buffer();\n    while (true) {\n      if (bufferIndex >= dataLen) {\n        offset += dataLen;\n        if(!charUtils.fill(ioBuffer, input)) { // read supplementary char aware with CharacterUtils\n          dataLen = 0; // so next offset += dataLen won't decrement offset\n          if (length > 0) {\n            break;\n          } else {\n            finalOffset = correctOffset(offset);\n            return false;\n          }\n        }\n        dataLen = ioBuffer.getLength();\n        bufferIndex = 0;\n      }\n      // use CharacterUtils here to support < 3.1 UTF-16 code unit behavior if the char based methods are gone\n      final int c = charUtils.codePointAt(ioBuffer.getBuffer(), bufferIndex);\n      bufferIndex += Character.charCount(c);\n\n      if (isTokenChar(c)) {               // if it's a token char\n        if (length == 0) {                // start of token\n          assert start == -1;\n          start = offset + bufferIndex - 1;\n        } else if (length >= buffer.length-1) { // check if a supplementary could run out of bounds\n          buffer = termAtt.resizeBuffer(2+length); // make sure a supplementary fits in the buffer\n        }\n        length += Character.toChars(normalize(c), buffer, length); // buffer it, normalized\n        if (length >= MAX_WORD_LEN) // buffer overflow! make sure to check for >= surrogate pair could break == test\n          break;\n      } else if (length > 0)             // at non-Letter w/ chars\n        break;                           // return 'em\n    }\n\n    termAtt.setLength(length);\n    assert start != -1;\n    offsetAtt.setOffset(correctOffset(start), finalOffset = correctOffset(start+length));\n    return true;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/CharTokenizer#incrementToken().mjava","pathOld":"lucene/src/java/org/apache/lucene/analysis/CharTokenizer#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    int length = 0;\n    int start = -1; // this variable is always initialized\n    char[] buffer = termAtt.buffer();\n    while (true) {\n      if (bufferIndex >= dataLen) {\n        offset += dataLen;\n        if(!charUtils.fill(ioBuffer, input)) { // read supplementary char aware with CharacterUtils\n          dataLen = 0; // so next offset += dataLen won't decrement offset\n          if (length > 0) {\n            break;\n          } else {\n            finalOffset = correctOffset(offset);\n            return false;\n          }\n        }\n        dataLen = ioBuffer.getLength();\n        bufferIndex = 0;\n      }\n      // use CharacterUtils here to support < 3.1 UTF-16 code unit behavior if the char based methods are gone\n      final int c = charUtils.codePointAt(ioBuffer.getBuffer(), bufferIndex);\n      bufferIndex += Character.charCount(c);\n\n      if (isTokenChar(c)) {               // if it's a token char\n        if (length == 0) {                // start of token\n          assert start == -1;\n          start = offset + bufferIndex - 1;\n        } else if (length >= buffer.length-1) { // check if a supplementary could run out of bounds\n          buffer = termAtt.resizeBuffer(2+length); // make sure a supplementary fits in the buffer\n        }\n        length += Character.toChars(normalize(c), buffer, length); // buffer it, normalized\n        if (length >= MAX_WORD_LEN) // buffer overflow! make sure to check for >= surrogate pair could break == test\n          break;\n      } else if (length > 0)             // at non-Letter w/ chars\n        break;                           // return 'em\n    }\n\n    termAtt.setLength(length);\n    assert start != -1;\n    offsetAtt.setOffset(correctOffset(start), finalOffset = correctOffset(start+length));\n    return true;\n    \n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    int length = 0;\n    int start = -1; // this variable is always initialized\n    char[] buffer = termAtt.buffer();\n    while (true) {\n      if (bufferIndex >= dataLen) {\n        offset += dataLen;\n        if(!charUtils.fill(ioBuffer, input)) { // read supplementary char aware with CharacterUtils\n          dataLen = 0; // so next offset += dataLen won't decrement offset\n          if (length > 0) {\n            break;\n          } else {\n            finalOffset = correctOffset(offset);\n            return false;\n          }\n        }\n        dataLen = ioBuffer.getLength();\n        bufferIndex = 0;\n      }\n      // use CharacterUtils here to support < 3.1 UTF-16 code unit behavior if the char based methods are gone\n      final int c = charUtils.codePointAt(ioBuffer.getBuffer(), bufferIndex);\n      bufferIndex += Character.charCount(c);\n\n      if (isTokenChar(c)) {               // if it's a token char\n        if (length == 0) {                // start of token\n          assert start == -1;\n          start = offset + bufferIndex - 1;\n        } else if (length >= buffer.length-1) { // check if a supplementary could run out of bounds\n          buffer = termAtt.resizeBuffer(2+length); // make sure a supplementary fits in the buffer\n        }\n        length += Character.toChars(normalize(c), buffer, length); // buffer it, normalized\n        if (length >= MAX_WORD_LEN) // buffer overflow! make sure to check for >= surrogate pair could break == test\n          break;\n      } else if (length > 0)             // at non-Letter w/ chars\n        break;                           // return 'em\n    }\n\n    termAtt.setLength(length);\n    assert start != -1;\n    offsetAtt.setOffset(correctOffset(start), finalOffset = correctOffset(start+length));\n    return true;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1d6179f9c4237a7e5d423f4e4b439a94e967efc9":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4e8cc373c801e54cec75daf9f52792cb4b17f536","1d6179f9c4237a7e5d423f4e4b439a94e967efc9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["3bb13258feba31ab676502787ab2e1779f129b7a","1d6179f9c4237a7e5d423f4e4b439a94e967efc9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["ea9d1f915bc156f5ebbc6a9cdcf631c173a69a91","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3bb13258feba31ab676502787ab2e1779f129b7a":["ea9d1f915bc156f5ebbc6a9cdcf631c173a69a91","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d6179f9c4237a7e5d423f4e4b439a94e967efc9"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["ea9d1f915bc156f5ebbc6a9cdcf631c173a69a91"],"ea9d1f915bc156f5ebbc6a9cdcf631c173a69a91":["a775c547c3519b47efd41c09cb47100ddb9604c7"],"a775c547c3519b47efd41c09cb47100ddb9604c7":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1d6179f9c4237a7e5d423f4e4b439a94e967efc9":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"3bb13258feba31ab676502787ab2e1779f129b7a":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["1d6179f9c4237a7e5d423f4e4b439a94e967efc9","a3776dccca01c11e7046323cfad46a3b4a471233","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"ea9d1f915bc156f5ebbc6a9cdcf631c173a69a91":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"a775c547c3519b47efd41c09cb47100ddb9604c7":["ea9d1f915bc156f5ebbc6a9cdcf631c173a69a91"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a775c547c3519b47efd41c09cb47100ddb9604c7"]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}