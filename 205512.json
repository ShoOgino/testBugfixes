{"path":"solr/core/src/test/org/apache/solr/cloud/RecoveryZkTest#assertShardConsistency(Slice,boolean).mjava","commits":[{"id":"a4efd3fffdd7acd625bb88e455c8097e17f75735","date":1477647201,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/RecoveryZkTest#assertShardConsistency(Slice,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void assertShardConsistency(Slice shard, boolean expectDocs) throws Exception {\n    List<Replica> replicas = shard.getReplicas(r -> r.getState() == Replica.State.ACTIVE);\n    long[] numCounts = new long[replicas.size()];\n    int i = 0;\n    for (Replica replica : replicas) {\n      try (HttpSolrClient client = new HttpSolrClient.Builder(replica.getCoreUrl())\n          .withHttpClient(cluster.getSolrClient().getHttpClient()).build()) {\n        numCounts[i] = client.query(new SolrQuery(\"*:*\").add(\"distrib\", \"false\")).getResults().getNumFound();\n        i++;\n      }\n    }\n    for (int j = 1; j < replicas.size(); j++) {\n      if (numCounts[j] != numCounts[j - 1])\n        fail(\"Mismatch in counts between replicas\");  // nocommit improve this!\n      if (numCounts[j] == 0 && expectDocs)\n        fail(\"Expected docs on shard \" + shard.getName() + \" but found none\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e6bc19f4013b40a2ef37cd5da8f2527e77f70cd","date":1477660071,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/RecoveryZkTest#assertShardConsistency(Slice,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/RecoveryZkTest#assertShardConsistency(Slice,boolean).mjava","sourceNew":"  private void assertShardConsistency(Slice shard, boolean expectDocs) throws Exception {\n    List<Replica> replicas = shard.getReplicas(r -> r.getState() == Replica.State.ACTIVE);\n    long[] numCounts = new long[replicas.size()];\n    int i = 0;\n    for (Replica replica : replicas) {\n      try (HttpSolrClient client = new HttpSolrClient.Builder(replica.getCoreUrl())\n          .withHttpClient(cluster.getSolrClient().getHttpClient()).build()) {\n        numCounts[i] = client.query(new SolrQuery(\"*:*\").add(\"distrib\", \"false\")).getResults().getNumFound();\n        i++;\n      }\n    }\n    for (int j = 1; j < replicas.size(); j++) {\n      if (numCounts[j] != numCounts[j - 1])\n        fail(\"Mismatch in counts between replicas\");  // TODO improve this!\n      if (numCounts[j] == 0 && expectDocs)\n        fail(\"Expected docs on shard \" + shard.getName() + \" but found none\");\n    }\n  }\n\n","sourceOld":"  private void assertShardConsistency(Slice shard, boolean expectDocs) throws Exception {\n    List<Replica> replicas = shard.getReplicas(r -> r.getState() == Replica.State.ACTIVE);\n    long[] numCounts = new long[replicas.size()];\n    int i = 0;\n    for (Replica replica : replicas) {\n      try (HttpSolrClient client = new HttpSolrClient.Builder(replica.getCoreUrl())\n          .withHttpClient(cluster.getSolrClient().getHttpClient()).build()) {\n        numCounts[i] = client.query(new SolrQuery(\"*:*\").add(\"distrib\", \"false\")).getResults().getNumFound();\n        i++;\n      }\n    }\n    for (int j = 1; j < replicas.size(); j++) {\n      if (numCounts[j] != numCounts[j - 1])\n        fail(\"Mismatch in counts between replicas\");  // nocommit improve this!\n      if (numCounts[j] == 0 && expectDocs)\n        fail(\"Expected docs on shard \" + shard.getName() + \" but found none\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59dce44d6a0b58c171de1d47ad8c0a75831f94fd","date":1477668573,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/RecoveryZkTest#assertShardConsistency(Slice,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void assertShardConsistency(Slice shard, boolean expectDocs) throws Exception {\n    List<Replica> replicas = shard.getReplicas(r -> r.getState() == Replica.State.ACTIVE);\n    long[] numCounts = new long[replicas.size()];\n    int i = 0;\n    for (Replica replica : replicas) {\n      try (HttpSolrClient client = new HttpSolrClient.Builder(replica.getCoreUrl())\n          .withHttpClient(cluster.getSolrClient().getHttpClient()).build()) {\n        numCounts[i] = client.query(new SolrQuery(\"*:*\").add(\"distrib\", \"false\")).getResults().getNumFound();\n        i++;\n      }\n    }\n    for (int j = 1; j < replicas.size(); j++) {\n      if (numCounts[j] != numCounts[j - 1])\n        fail(\"Mismatch in counts between replicas\");  // TODO improve this!\n      if (numCounts[j] == 0 && expectDocs)\n        fail(\"Expected docs on shard \" + shard.getName() + \" but found none\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a4efd3fffdd7acd625bb88e455c8097e17f75735":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6e6bc19f4013b40a2ef37cd5da8f2527e77f70cd"],"6e6bc19f4013b40a2ef37cd5da8f2527e77f70cd":["a4efd3fffdd7acd625bb88e455c8097e17f75735"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6e6bc19f4013b40a2ef37cd5da8f2527e77f70cd"]},"commit2Childs":{"a4efd3fffdd7acd625bb88e455c8097e17f75735":["6e6bc19f4013b40a2ef37cd5da8f2527e77f70cd"],"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":[],"6e6bc19f4013b40a2ef37cd5da8f2527e77f70cd":["59dce44d6a0b58c171de1d47ad8c0a75831f94fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a4efd3fffdd7acd625bb88e455c8097e17f75735","59dce44d6a0b58c171de1d47ad8c0a75831f94fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["59dce44d6a0b58c171de1d47ad8c0a75831f94fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}